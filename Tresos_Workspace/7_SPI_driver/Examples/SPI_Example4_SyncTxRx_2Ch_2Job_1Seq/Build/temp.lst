
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000c0b 	.word	0x00000c0b
  10:	00000c0d 	.word	0x00000c0d
  14:	00000c0f 	.word	0x00000c0f
  18:	00000c11 	.word	0x00000c11
	...
  2c:	00000c13 	.word	0x00000c13
  30:	00000c15 	.word	0x00000c15
  34:	00000000 	.word	0x00000000
  38:	00000c17 	.word	0x00000c17
  3c:	00000c19 	.word	0x00000c19
  40:	00000c1b 	.word	0x00000c1b
  44:	00000c1b 	.word	0x00000c1b
  48:	00000c1b 	.word	0x00000c1b
  4c:	00000c1b 	.word	0x00000c1b
  50:	00000c1b 	.word	0x00000c1b
  54:	00000c1b 	.word	0x00000c1b
  58:	00000c1b 	.word	0x00000c1b
  5c:	00000c1b 	.word	0x00000c1b
  60:	00000c1b 	.word	0x00000c1b
  64:	00000c1b 	.word	0x00000c1b
  68:	00000c1b 	.word	0x00000c1b
  6c:	00000c1b 	.word	0x00000c1b
  70:	00000c1b 	.word	0x00000c1b
  74:	00000c1b 	.word	0x00000c1b
  78:	00000c1b 	.word	0x00000c1b
  7c:	00000c1b 	.word	0x00000c1b
  80:	00000c1b 	.word	0x00000c1b
  84:	00000c1b 	.word	0x00000c1b
  88:	00000c1b 	.word	0x00000c1b
  8c:	00000c1b 	.word	0x00000c1b
  90:	00000c1b 	.word	0x00000c1b
  94:	00000c1b 	.word	0x00000c1b
  98:	00000c1b 	.word	0x00000c1b
  9c:	00000c1b 	.word	0x00000c1b
  a0:	00000c1b 	.word	0x00000c1b
  a4:	00000c1b 	.word	0x00000c1b
  a8:	00000c1b 	.word	0x00000c1b
  ac:	00000c1b 	.word	0x00000c1b
  b0:	00000c1b 	.word	0x00000c1b
  b4:	00000c1b 	.word	0x00000c1b
  b8:	00000c1b 	.word	0x00000c1b
  bc:	00000c1b 	.word	0x00000c1b
  c0:	00000c1b 	.word	0x00000c1b
  c4:	00000c1b 	.word	0x00000c1b
  c8:	00000c1b 	.word	0x00000c1b
  cc:	00000c1b 	.word	0x00000c1b
  d0:	00000c1b 	.word	0x00000c1b
  d4:	00000c1b 	.word	0x00000c1b
  d8:	00000c1b 	.word	0x00000c1b
  dc:	00000c1b 	.word	0x00000c1b
  e0:	00000c1b 	.word	0x00000c1b
  e4:	00000c1b 	.word	0x00000c1b
  e8:	00000c1b 	.word	0x00000c1b
  ec:	00000c1b 	.word	0x00000c1b
  f0:	00000c1b 	.word	0x00000c1b
  f4:	00000c1b 	.word	0x00000c1b
  f8:	00000c1b 	.word	0x00000c1b
  fc:	00000c1b 	.word	0x00000c1b
 100:	00000c1b 	.word	0x00000c1b
 104:	00000c1b 	.word	0x00000c1b
 108:	00000c1b 	.word	0x00000c1b
 10c:	00000c1b 	.word	0x00000c1b
 110:	00000c1b 	.word	0x00000c1b
 114:	00000c1b 	.word	0x00000c1b
 118:	00000c1b 	.word	0x00000c1b
 11c:	00000c1b 	.word	0x00000c1b
 120:	00000c1b 	.word	0x00000c1b
 124:	00000c1b 	.word	0x00000c1b
 128:	00000c1b 	.word	0x00000c1b
 12c:	00000c1b 	.word	0x00000c1b
 130:	00000c1b 	.word	0x00000c1b
 134:	00000c1b 	.word	0x00000c1b
 138:	00000c1b 	.word	0x00000c1b
 13c:	00000c1b 	.word	0x00000c1b
 140:	00000c1b 	.word	0x00000c1b
 144:	00000c1b 	.word	0x00000c1b
 148:	00000c1b 	.word	0x00000c1b
 14c:	00000c1b 	.word	0x00000c1b
 150:	00000c1b 	.word	0x00000c1b
 154:	00000c1b 	.word	0x00000c1b
 158:	00000c1b 	.word	0x00000c1b
 15c:	00000c1b 	.word	0x00000c1b
 160:	00000c1b 	.word	0x00000c1b
 164:	00000c1b 	.word	0x00000c1b
 168:	00000c1b 	.word	0x00000c1b
 16c:	00000c1b 	.word	0x00000c1b
 170:	00000c1b 	.word	0x00000c1b
 174:	00000c1b 	.word	0x00000c1b
 178:	00000c1b 	.word	0x00000c1b
 17c:	00000c1b 	.word	0x00000c1b
 180:	00000c1b 	.word	0x00000c1b
 184:	00000c1b 	.word	0x00000c1b
 188:	00000c1b 	.word	0x00000c1b
 18c:	00000c1b 	.word	0x00000c1b
 190:	00000c1b 	.word	0x00000c1b
 194:	00000c1b 	.word	0x00000c1b
 198:	00000c1b 	.word	0x00000c1b
 19c:	00000c1b 	.word	0x00000c1b
 1a0:	00000c1b 	.word	0x00000c1b
 1a4:	00000c1b 	.word	0x00000c1b
 1a8:	00000c1b 	.word	0x00000c1b
 1ac:	00000c1b 	.word	0x00000c1b
 1b0:	00000c1b 	.word	0x00000c1b
 1b4:	00000c1b 	.word	0x00000c1b
 1b8:	00000c1b 	.word	0x00000c1b
 1bc:	00000c1b 	.word	0x00000c1b
 1c0:	00000c1b 	.word	0x00000c1b
 1c4:	00000c1b 	.word	0x00000c1b
 1c8:	00000c1b 	.word	0x00000c1b
 1cc:	00000c1b 	.word	0x00000c1b
 1d0:	00000c1b 	.word	0x00000c1b
 1d4:	00000c1b 	.word	0x00000c1b
 1d8:	00000c1b 	.word	0x00000c1b
 1dc:	00000c1b 	.word	0x00000c1b
 1e0:	00000c1b 	.word	0x00000c1b
 1e4:	00000c1b 	.word	0x00000c1b
 1e8:	00000c1b 	.word	0x00000c1b
 1ec:	00000c1b 	.word	0x00000c1b
 1f0:	00000c1b 	.word	0x00000c1b
 1f4:	00000c1b 	.word	0x00000c1b
 1f8:	00000c1b 	.word	0x00000c1b
 1fc:	00000c1b 	.word	0x00000c1b
 200:	00000c1b 	.word	0x00000c1b
 204:	00000c1b 	.word	0x00000c1b
 208:	00000c1b 	.word	0x00000c1b
 20c:	00000c1b 	.word	0x00000c1b
 210:	00000c1b 	.word	0x00000c1b
 214:	00000c1b 	.word	0x00000c1b
 218:	00000c1b 	.word	0x00000c1b
 21c:	00000c1b 	.word	0x00000c1b
 220:	00000c1b 	.word	0x00000c1b
 224:	00000c1b 	.word	0x00000c1b
 228:	00000c1b 	.word	0x00000c1b
 22c:	00000c1b 	.word	0x00000c1b
 230:	00000c1b 	.word	0x00000c1b
 234:	00000c1b 	.word	0x00000c1b
 238:	00000c1b 	.word	0x00000c1b
 23c:	00000c1b 	.word	0x00000c1b
 240:	00000c1b 	.word	0x00000c1b
 244:	00000c1b 	.word	0x00000c1b
 248:	00000c1b 	.word	0x00000c1b
 24c:	00000c1b 	.word	0x00000c1b
 250:	00000c1b 	.word	0x00000c1b
 254:	00000c1b 	.word	0x00000c1b
 258:	00000c1b 	.word	0x00000c1b
 25c:	00000c1b 	.word	0x00000c1b
 260:	00000c1b 	.word	0x00000c1b
 264:	00000c1b 	.word	0x00000c1b
 268:	00000c1b 	.word	0x00000c1b
 26c:	00000c1b 	.word	0x00000c1b
 270:	00000c1b 	.word	0x00000c1b
 274:	00000c1b 	.word	0x00000c1b
 278:	00000c1b 	.word	0x00000c1b
 27c:	00000c1b 	.word	0x00000c1b
 280:	00000c1b 	.word	0x00000c1b
 284:	00000c1b 	.word	0x00000c1b
 288:	00000c1b 	.word	0x00000c1b
 28c:	00000c1b 	.word	0x00000c1b
 290:	00000c1b 	.word	0x00000c1b
 294:	00000c1b 	.word	0x00000c1b
 298:	00000c1b 	.word	0x00000c1b
 29c:	00000c1b 	.word	0x00000c1b
 2a0:	00000c1b 	.word	0x00000c1b
 2a4:	00000c1b 	.word	0x00000c1b
 2a8:	00000c1b 	.word	0x00000c1b
 2ac:	00000c1b 	.word	0x00000c1b
 2b0:	00000c1b 	.word	0x00000c1b
 2b4:	00000c1b 	.word	0x00000c1b
 2b8:	00000c1b 	.word	0x00000c1b
 2bc:	00000c1b 	.word	0x00000c1b
 2c0:	00000c1b 	.word	0x00000c1b
 2c4:	00000c1b 	.word	0x00000c1b
 2c8:	00000c1b 	.word	0x00000c1b
 2cc:	00000c1b 	.word	0x00000c1b
 2d0:	00000c1b 	.word	0x00000c1b
 2d4:	00000c1b 	.word	0x00000c1b
 2d8:	00000c1b 	.word	0x00000c1b
 2dc:	00000c1b 	.word	0x00000c1b
 2e0:	00000c1b 	.word	0x00000c1b
 2e4:	00000c1b 	.word	0x00000c1b
 2e8:	00000c1b 	.word	0x00000c1b
 2ec:	00000c1b 	.word	0x00000c1b
 2f0:	00000c1b 	.word	0x00000c1b
 2f4:	00000c1b 	.word	0x00000c1b
 2f8:	00000c1b 	.word	0x00000c1b
 2fc:	00000c1b 	.word	0x00000c1b
 300:	00000c1b 	.word	0x00000c1b
 304:	00000c1b 	.word	0x00000c1b
 308:	00000c1b 	.word	0x00000c1b
 30c:	00000c1b 	.word	0x00000c1b

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 faf9 	bl	a78 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fbb8 	bl	c00 <startup_go_to_user_mode>
     490:	f000 fa34 	bl	8fc <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff8efc 	.word	0x1fff8efc

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fb03 	bl	ba4 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0x14>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0xc>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0x6>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0x2>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0x2>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0x18>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void Delay( uint32 ms );

/*this is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f001 f9aa 	bl	1c1c <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f001 f95a 	bl	1b84 <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do
    {
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f001 f96a 	bl	1bb6 <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     8fc:	b500      	push	{lr}
     8fe:	b085      	sub	sp, #20
    Spi_DataBufferType TxBuffer1[4];
    Spi_DataBufferType TxBuffer2[4];
    Spi_DataBufferType RxBuffer1[4];
    Spi_DataBufferType RxBuffer2[4];

    EcuM_Init();
     900:	f000 f880 	bl	a04 <EcuM_Init>
    SEGGER_RTT_Init();
     904:	f000 fb1c 	bl	f40 <SEGGER_RTT_Init>

    /*Enable writing instructions in the eeprom memories by sending a 0x06*/
    TxBuffer2[0] = TxBuffer1[0] = 0x06;          /*WREN Instruction value*/
     908:	2306      	movs	r3, #6
     90a:	f88d 300c 	strb.w	r3, [sp, #12]
     90e:	f89d 300c 	ldrb.w	r3, [sp, #12]
     912:	f88d 3008 	strb.w	r3, [sp, #8]
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_0, TxBuffer1, NULL, 1 );
     916:	a903      	add	r1, sp, #12
     918:	2301      	movs	r3, #1
     91a:	2200      	movs	r2, #0
     91c:	2000      	movs	r0, #0
     91e:	f007 fab1 	bl	7e84 <Spi_SetupEB>
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_1, TxBuffer2, NULL, 1 );
     922:	a902      	add	r1, sp, #8
     924:	2301      	movs	r3, #1
     926:	2200      	movs	r2, #0
     928:	2001      	movs	r0, #1
     92a:	f007 faab 	bl	7e84 <Spi_SetupEB>
    Spi_SyncTransmit( SpiConf_SpiSequence_SpiSequence_0 );
     92e:	2000      	movs	r0, #0
     930:	f007 fb80 	bl	8034 <Spi_SyncTransmit>

    /*Send to write the value 0x35 in the address 0 of the memory*/
    TxBuffer2[0] = TxBuffer1[0] = 0x02;                 /*Write instruction */
     934:	2302      	movs	r3, #2
     936:	f88d 300c 	strb.w	r3, [sp, #12]
     93a:	f89d 300c 	ldrb.w	r3, [sp, #12]
     93e:	f88d 3008 	strb.w	r3, [sp, #8]
    TxBuffer2[1] = TxBuffer1[1] = 0x00;                 /*16 bit - address  */
     942:	2300      	movs	r3, #0
     944:	f88d 300d 	strb.w	r3, [sp, #13]
     948:	f89d 300d 	ldrb.w	r3, [sp, #13]
     94c:	f88d 3009 	strb.w	r3, [sp, #9]
    TxBuffer2[2] = TxBuffer1[2] = 0x00;                 /*16 bit - address  */
     950:	2300      	movs	r3, #0
     952:	f88d 300e 	strb.w	r3, [sp, #14]
     956:	f89d 300e 	ldrb.w	r3, [sp, #14]
     95a:	f88d 300a 	strb.w	r3, [sp, #10]
    TxBuffer1[3] = 0x38;                                /*Data byte         */
     95e:	2338      	movs	r3, #56	; 0x38
     960:	f88d 300f 	strb.w	r3, [sp, #15]
    TxBuffer2[3] = 0x39;                                /*Data byte         */
     964:	2339      	movs	r3, #57	; 0x39
     966:	f88d 300b 	strb.w	r3, [sp, #11]
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_0, TxBuffer1, NULL, 4 );
     96a:	a903      	add	r1, sp, #12
     96c:	2304      	movs	r3, #4
     96e:	2200      	movs	r2, #0
     970:	2000      	movs	r0, #0
     972:	f007 fa87 	bl	7e84 <Spi_SetupEB>
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_1, TxBuffer2, NULL, 4 );
     976:	a902      	add	r1, sp, #8
     978:	2304      	movs	r3, #4
     97a:	2200      	movs	r2, #0
     97c:	2001      	movs	r0, #1
     97e:	f007 fa81 	bl	7e84 <Spi_SetupEB>
    Spi_SyncTransmit( SpiConf_SpiSequence_SpiSequence_0 );
     982:	2000      	movs	r0, #0
     984:	f007 fb56 	bl	8034 <Spi_SyncTransmit>

    /*Wait for the data to be recorded in memory, it is not the best way to
    do it, so it's just for demonstration purposes*/
    Delay( 10 );
     988:	200a      	movs	r0, #10
     98a:	f7ff ff91 	bl	8b0 <Delay>

    /*Read a byte from direccion 0x00 of each eeprom memory, TransmitReceive() Function needs as parameters structure
    to handle SPI , buffer where data to transmit is stored, buffer where data received is stored, total amount
    of bytes to transmit and receive*/
    TxBuffer2[0] = TxBuffer1[0] = 0x03; 
     98e:	2303      	movs	r3, #3
     990:	f88d 300c 	strb.w	r3, [sp, #12]
     994:	f89d 300c 	ldrb.w	r3, [sp, #12]
     998:	f88d 3008 	strb.w	r3, [sp, #8]
    TxBuffer2[1] = TxBuffer1[1] = 0x00; 
     99c:	2300      	movs	r3, #0
     99e:	f88d 300d 	strb.w	r3, [sp, #13]
     9a2:	f89d 300d 	ldrb.w	r3, [sp, #13]
     9a6:	f88d 3009 	strb.w	r3, [sp, #9]
    TxBuffer2[2] = TxBuffer1[2] = 0x00;
     9aa:	2300      	movs	r3, #0
     9ac:	f88d 300e 	strb.w	r3, [sp, #14]
     9b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
     9b4:	f88d 300a 	strb.w	r3, [sp, #10]
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_0, TxBuffer1, RxBuffer1, 4 );
     9b8:	aa01      	add	r2, sp, #4
     9ba:	a903      	add	r1, sp, #12
     9bc:	2304      	movs	r3, #4
     9be:	2000      	movs	r0, #0
     9c0:	f007 fa60 	bl	7e84 <Spi_SetupEB>
    Spi_SetupEB( SpiConf_SpiChannel_SpiChannel_1, TxBuffer2, RxBuffer2, 4 );
     9c4:	466a      	mov	r2, sp
     9c6:	a902      	add	r1, sp, #8
     9c8:	2304      	movs	r3, #4
     9ca:	2001      	movs	r0, #1
     9cc:	f007 fa5a 	bl	7e84 <Spi_SetupEB>
    Spi_SyncTransmit( SpiConf_SpiSequence_SpiSequence_0 );
     9d0:	2000      	movs	r0, #0
     9d2:	f007 fb2f 	bl	8034 <Spi_SyncTransmit>
    
    SEGGER_RTT_printf(0, "Data read from eeprom 1: 0x%x\n", RxBuffer1[3] );
     9d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     9da:	461a      	mov	r2, r3
     9dc:	4907      	ldr	r1, [pc, #28]	; (9fc <main+0x100>)
     9de:	2000      	movs	r0, #0
     9e0:	f000 fe16 	bl	1610 <SEGGER_RTT_printf>
    SEGGER_RTT_printf(0, "Data read from eeprom 2: 0x%x\n", RxBuffer2[3] );
     9e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
     9e8:	461a      	mov	r2, r3
     9ea:	4905      	ldr	r1, [pc, #20]	; (a00 <main+0x104>)
     9ec:	2000      	movs	r0, #0
     9ee:	f000 fe0f 	bl	1610 <SEGGER_RTT_printf>


    while( 1u )
    {
        Delay( 10u );
     9f2:	200a      	movs	r0, #10
     9f4:	f7ff ff5c 	bl	8b0 <Delay>
     9f8:	e7fb      	b.n	9f2 <main+0xf6>
     9fa:	bf00      	nop
     9fc:	0000a560 	.word	0x0000a560
     a00:	0000a580 	.word	0x0000a580

00000a04 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     a04:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     a06:	480b      	ldr	r0, [pc, #44]	; (a34 <EcuM_Init+0x30>)
     a08:	f004 fe48 	bl	569c <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     a0c:	2000      	movs	r0, #0
     a0e:	f004 fe99 	bl	5744 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     a12:	2000      	movs	r0, #0
     a14:	f004 feba 	bl	578c <Mcu_SetMode>

    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     a18:	2000      	movs	r0, #0
     a1a:	f001 f8aa 	bl	1b72 <OsIf_Init>
    /*enable and setup interrupts*/
    Platform_Init( NULL_PTR );
     a1e:	2000      	movs	r0, #0
     a20:	f000 ffa4 	bl	196c <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration, for this case
    only Port Pin 122  (D16) is configured as output*/
    Port_Init( &Port_Config );
     a24:	4804      	ldr	r0, [pc, #16]	; (a38 <EcuM_Init+0x34>)
     a26:	f005 fa3b 	bl	5ea0 <Port_Init>

    /*init the FlexCAN0 with the paramters set in Tresos in loop back mode*/
    Spi_Init( &Spi_Config );
     a2a:	4804      	ldr	r0, [pc, #16]	; (a3c <EcuM_Init+0x38>)
     a2c:	f007 f978 	bl	7d20 <Spi_Init>
}
     a30:	bf00      	nop
     a32:	bd08      	pop	{r3, pc}
     a34:	0000b19c 	.word	0x0000b19c
     a38:	0000b3c4 	.word	0x0000b3c4
     a3c:	0000b504 	.word	0x0000b504

00000a40 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a40:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a42:	f3ef 8310 	mrs	r3, PRIMASK
     a46:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a48:	4623      	mov	r3, r4
}
     a4a:	4618      	mov	r0, r3
     a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
     a50:	4770      	bx	lr

00000a52 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     a52:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a54:	f3ef 8310 	mrs	r3, PRIMASK
     a58:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a5a:	4623      	mov	r3, r4
}
     a5c:	4618      	mov	r0, r3
     a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
     a62:	4770      	bx	lr

00000a64 <Spi_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Spi_schm_read_msr(void)
{
     a64:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a66:	f3ef 8310 	mrs	r3, PRIMASK
     a6a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a6c:	4623      	mov	r3, r4
}
     a6e:	4618      	mov	r0, r3
     a70:	f85d 4b04 	ldr.w	r4, [sp], #4
     a74:	4770      	bx	lr
	...

00000a78 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a78:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a7a:	2300      	movs	r3, #0
     a7c:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a7e:	2300      	movs	r3, #0
     a80:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a82:	2300      	movs	r3, #0
     a84:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a86:	2300      	movs	r3, #0
     a88:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a8a:	4b44      	ldr	r3, [pc, #272]	; (b9c <init_data_bss+0x124>)
     a8c:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a8e:	4b44      	ldr	r3, [pc, #272]	; (ba0 <init_data_bss+0x128>)
     a90:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a92:	9b05      	ldr	r3, [sp, #20]
     a94:	681b      	ldr	r3, [r3, #0]
     a96:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     a98:	9b05      	ldr	r3, [sp, #20]
     a9a:	3304      	adds	r3, #4
     a9c:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a9e:	9b05      	ldr	r3, [sp, #20]
     aa0:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     aa2:	2300      	movs	r3, #0
     aa4:	9309      	str	r3, [sp, #36]	; 0x24
     aa6:	e03d      	b.n	b24 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aaa:	4613      	mov	r3, r2
     aac:	005b      	lsls	r3, r3, #1
     aae:	4413      	add	r3, r2
     ab0:	009b      	lsls	r3, r3, #2
     ab2:	461a      	mov	r2, r3
     ab4:	9b03      	ldr	r3, [sp, #12]
     ab6:	4413      	add	r3, r2
     ab8:	685b      	ldr	r3, [r3, #4]
     aba:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     abe:	4613      	mov	r3, r2
     ac0:	005b      	lsls	r3, r3, #1
     ac2:	4413      	add	r3, r2
     ac4:	009b      	lsls	r3, r3, #2
     ac6:	461a      	mov	r2, r3
     ac8:	9b03      	ldr	r3, [sp, #12]
     aca:	4413      	add	r3, r2
     acc:	681b      	ldr	r3, [r3, #0]
     ace:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     ad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ad2:	4613      	mov	r3, r2
     ad4:	005b      	lsls	r3, r3, #1
     ad6:	4413      	add	r3, r2
     ad8:	009b      	lsls	r3, r3, #2
     ada:	461a      	mov	r2, r3
     adc:	9b03      	ldr	r3, [sp, #12]
     ade:	4413      	add	r3, r2
     ae0:	689b      	ldr	r3, [r3, #8]
     ae2:	4619      	mov	r1, r3
     ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ae6:	4613      	mov	r3, r2
     ae8:	005b      	lsls	r3, r3, #1
     aea:	4413      	add	r3, r2
     aec:	009b      	lsls	r3, r3, #2
     aee:	461a      	mov	r2, r3
     af0:	9b03      	ldr	r3, [sp, #12]
     af2:	4413      	add	r3, r2
     af4:	685b      	ldr	r3, [r3, #4]
     af6:	1acb      	subs	r3, r1, r3
     af8:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     afa:	2300      	movs	r3, #0
     afc:	9308      	str	r3, [sp, #32]
     afe:	e00a      	b.n	b16 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     b00:	9a00      	ldr	r2, [sp, #0]
     b02:	9b08      	ldr	r3, [sp, #32]
     b04:	441a      	add	r2, r3
     b06:	9901      	ldr	r1, [sp, #4]
     b08:	9b08      	ldr	r3, [sp, #32]
     b0a:	440b      	add	r3, r1
     b0c:	7812      	ldrb	r2, [r2, #0]
     b0e:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b10:	9b08      	ldr	r3, [sp, #32]
     b12:	3301      	adds	r3, #1
     b14:	9308      	str	r3, [sp, #32]
     b16:	9a08      	ldr	r2, [sp, #32]
     b18:	9b06      	ldr	r3, [sp, #24]
     b1a:	429a      	cmp	r2, r3
     b1c:	d3f0      	bcc.n	b00 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b20:	3301      	adds	r3, #1
     b22:	9309      	str	r3, [sp, #36]	; 0x24
     b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b26:	9b07      	ldr	r3, [sp, #28]
     b28:	429a      	cmp	r2, r3
     b2a:	d3bd      	bcc.n	aa8 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     b2c:	9b04      	ldr	r3, [sp, #16]
     b2e:	681b      	ldr	r3, [r3, #0]
     b30:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b32:	9b04      	ldr	r3, [sp, #16]
     b34:	3304      	adds	r3, #4
     b36:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b38:	9b04      	ldr	r3, [sp, #16]
     b3a:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b3c:	2300      	movs	r3, #0
     b3e:	9309      	str	r3, [sp, #36]	; 0x24
     b40:	e024      	b.n	b8c <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b44:	00db      	lsls	r3, r3, #3
     b46:	9a02      	ldr	r2, [sp, #8]
     b48:	4413      	add	r3, r2
     b4a:	681b      	ldr	r3, [r3, #0]
     b4c:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b50:	00db      	lsls	r3, r3, #3
     b52:	9a02      	ldr	r2, [sp, #8]
     b54:	4413      	add	r3, r2
     b56:	685b      	ldr	r3, [r3, #4]
     b58:	4619      	mov	r1, r3
     b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b5c:	00db      	lsls	r3, r3, #3
     b5e:	9a02      	ldr	r2, [sp, #8]
     b60:	4413      	add	r3, r2
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	1acb      	subs	r3, r1, r3
     b66:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b68:	2300      	movs	r3, #0
     b6a:	9308      	str	r3, [sp, #32]
     b6c:	e007      	b.n	b7e <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b6e:	9a01      	ldr	r2, [sp, #4]
     b70:	9b08      	ldr	r3, [sp, #32]
     b72:	4413      	add	r3, r2
     b74:	2200      	movs	r2, #0
     b76:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b78:	9b08      	ldr	r3, [sp, #32]
     b7a:	3301      	adds	r3, #1
     b7c:	9308      	str	r3, [sp, #32]
     b7e:	9a08      	ldr	r2, [sp, #32]
     b80:	9b06      	ldr	r3, [sp, #24]
     b82:	429a      	cmp	r2, r3
     b84:	d3f3      	bcc.n	b6e <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b88:	3301      	adds	r3, #1
     b8a:	9309      	str	r3, [sp, #36]	; 0x24
     b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b8e:	9b07      	ldr	r3, [sp, #28]
     b90:	429a      	cmp	r2, r3
     b92:	d3d6      	bcc.n	b42 <init_data_bss+0xca>
        }
    }
}
     b94:	bf00      	nop
     b96:	bf00      	nop
     b98:	b00a      	add	sp, #40	; 0x28
     b9a:	4770      	bx	lr
     b9c:	0000b548 	.word	0x0000b548
     ba0:	0000b564 	.word	0x0000b564

00000ba4 <sys_m4_cache_init>:
{
     ba4:	b084      	sub	sp, #16
     ba6:	4603      	mov	r3, r0
     ba8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     bac:	2300      	movs	r3, #0
     bae:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     bb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bb6:	2b00      	cmp	r3, #0
     bb8:	d118      	bne.n	bec <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     bba:	4b10      	ldr	r3, [pc, #64]	; (bfc <sys_m4_cache_init+0x58>)
     bbc:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     bc0:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     bc2:	4b0e      	ldr	r3, [pc, #56]	; (bfc <sys_m4_cache_init+0x58>)
     bc4:	681b      	ldr	r3, [r3, #0]
     bc6:	4a0d      	ldr	r2, [pc, #52]	; (bfc <sys_m4_cache_init+0x58>)
     bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     bcc:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     bce:	bf00      	nop
     bd0:	4b0a      	ldr	r3, [pc, #40]	; (bfc <sys_m4_cache_init+0x58>)
     bd2:	681b      	ldr	r3, [r3, #0]
     bd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     bdc:	d0f8      	beq.n	bd0 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     bde:	4b07      	ldr	r3, [pc, #28]	; (bfc <sys_m4_cache_init+0x58>)
     be0:	681b      	ldr	r3, [r3, #0]
     be2:	4a06      	ldr	r2, [pc, #24]	; (bfc <sys_m4_cache_init+0x58>)
     be4:	f043 0301 	orr.w	r3, r3, #1
     be8:	6013      	str	r3, [r2, #0]
     bea:	e002      	b.n	bf2 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     bec:	2301      	movs	r3, #1
     bee:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     bf2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bf6:	4618      	mov	r0, r3
     bf8:	b004      	add	sp, #16
     bfa:	4770      	bx	lr
     bfc:	e0082000 	.word	0xe0082000

00000c00 <startup_go_to_user_mode>:
}
     c00:	bf00      	nop
     c02:	4770      	bx	lr

00000c04 <Sys_GetCoreID>:
    return 0U;
     c04:	2300      	movs	r3, #0
}
     c06:	4618      	mov	r0, r3
     c08:	4770      	bx	lr

00000c0a <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     c0a:	e7fe      	b.n	c0a <HardFault_Handler>

00000c0c <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     c0c:	e7fe      	b.n	c0c <MemManage_Handler>

00000c0e <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     c0e:	e7fe      	b.n	c0e <BusFault_Handler>

00000c10 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     c10:	e7fe      	b.n	c10 <UsageFault_Handler>

00000c12 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     c12:	e7fe      	b.n	c12 <SVC_Handler>

00000c14 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     c14:	e7fe      	b.n	c14 <DebugMon_Handler>

00000c16 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     c16:	e7fe      	b.n	c16 <PendSV_Handler>

00000c18 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     c18:	e7fe      	b.n	c18 <SysTick_Handler>

00000c1a <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     c1a:	e7fe      	b.n	c1a <undefined_handler>

00000c1c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     c1c:	b500      	push	{lr}
     c1e:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     c20:	4b26      	ldr	r3, [pc, #152]	; (cbc <_DoInit+0xa0>)
     c22:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     c24:	22a8      	movs	r2, #168	; 0xa8
     c26:	2100      	movs	r1, #0
     c28:	9800      	ldr	r0, [sp, #0]
     c2a:	f000 fd13 	bl	1654 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     c2e:	9b00      	ldr	r3, [sp, #0]
     c30:	2203      	movs	r2, #3
     c32:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     c34:	9b00      	ldr	r3, [sp, #0]
     c36:	2203      	movs	r2, #3
     c38:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     c3a:	9b00      	ldr	r3, [sp, #0]
     c3c:	4a20      	ldr	r2, [pc, #128]	; (cc0 <_DoInit+0xa4>)
     c3e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     c40:	9b00      	ldr	r3, [sp, #0]
     c42:	4a20      	ldr	r2, [pc, #128]	; (cc4 <_DoInit+0xa8>)
     c44:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     c46:	9b00      	ldr	r3, [sp, #0]
     c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
     c4c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     c4e:	9b00      	ldr	r3, [sp, #0]
     c50:	2200      	movs	r2, #0
     c52:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     c54:	9b00      	ldr	r3, [sp, #0]
     c56:	2200      	movs	r2, #0
     c58:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c5a:	9b00      	ldr	r3, [sp, #0]
     c5c:	2200      	movs	r2, #0
     c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     c60:	9b00      	ldr	r3, [sp, #0]
     c62:	4a17      	ldr	r2, [pc, #92]	; (cc0 <_DoInit+0xa4>)
     c64:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     c66:	9b00      	ldr	r3, [sp, #0]
     c68:	4a17      	ldr	r2, [pc, #92]	; (cc8 <_DoInit+0xac>)
     c6a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     c6c:	9b00      	ldr	r3, [sp, #0]
     c6e:	2210      	movs	r2, #16
     c70:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     c72:	9b00      	ldr	r3, [sp, #0]
     c74:	2200      	movs	r2, #0
     c76:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     c78:	9b00      	ldr	r3, [sp, #0]
     c7a:	2200      	movs	r2, #0
     c7c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     c7e:	9b00      	ldr	r3, [sp, #0]
     c80:	2200      	movs	r2, #0
     c82:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     c84:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     c88:	2300      	movs	r3, #0
     c8a:	9301      	str	r3, [sp, #4]
     c8c:	e00c      	b.n	ca8 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     c8e:	9b01      	ldr	r3, [sp, #4]
     c90:	f1c3 030f 	rsb	r3, r3, #15
     c94:	4a0d      	ldr	r2, [pc, #52]	; (ccc <_DoInit+0xb0>)
     c96:	5cd1      	ldrb	r1, [r2, r3]
     c98:	9a00      	ldr	r2, [sp, #0]
     c9a:	9b01      	ldr	r3, [sp, #4]
     c9c:	4413      	add	r3, r2
     c9e:	460a      	mov	r2, r1
     ca0:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     ca2:	9b01      	ldr	r3, [sp, #4]
     ca4:	3301      	adds	r3, #1
     ca6:	9301      	str	r3, [sp, #4]
     ca8:	9b01      	ldr	r3, [sp, #4]
     caa:	2b0f      	cmp	r3, #15
     cac:	d9ef      	bls.n	c8e <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     cae:	f3bf 8f5f 	dmb	sy
}
     cb2:	bf00      	nop
     cb4:	b003      	add	sp, #12
     cb6:	f85d fb04 	ldr.w	pc, [sp], #4
     cba:	bf00      	nop
     cbc:	1fff8f18 	.word	0x1fff8f18
     cc0:	0000a5a0 	.word	0x0000a5a0
     cc4:	1fff8fc0 	.word	0x1fff8fc0
     cc8:	1fff93c0 	.word	0x1fff93c0
     ccc:	0000b524 	.word	0x0000b524

00000cd0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     cd0:	b500      	push	{lr}
     cd2:	b08b      	sub	sp, #44	; 0x2c
     cd4:	9003      	str	r0, [sp, #12]
     cd6:	9102      	str	r1, [sp, #8]
     cd8:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     cda:	2300      	movs	r3, #0
     cdc:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     cde:	9b03      	ldr	r3, [sp, #12]
     ce0:	68db      	ldr	r3, [r3, #12]
     ce2:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     ce4:	9b03      	ldr	r3, [sp, #12]
     ce6:	691b      	ldr	r3, [r3, #16]
     ce8:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     cea:	9a06      	ldr	r2, [sp, #24]
     cec:	9b07      	ldr	r3, [sp, #28]
     cee:	429a      	cmp	r2, r3
     cf0:	d905      	bls.n	cfe <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     cf2:	9a06      	ldr	r2, [sp, #24]
     cf4:	9b07      	ldr	r3, [sp, #28]
     cf6:	1ad3      	subs	r3, r2, r3
     cf8:	3b01      	subs	r3, #1
     cfa:	9309      	str	r3, [sp, #36]	; 0x24
     cfc:	e007      	b.n	d0e <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     cfe:	9b03      	ldr	r3, [sp, #12]
     d00:	689a      	ldr	r2, [r3, #8]
     d02:	9906      	ldr	r1, [sp, #24]
     d04:	9b07      	ldr	r3, [sp, #28]
     d06:	1acb      	subs	r3, r1, r3
     d08:	4413      	add	r3, r2
     d0a:	3b01      	subs	r3, #1
     d0c:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     d0e:	9b03      	ldr	r3, [sp, #12]
     d10:	689a      	ldr	r2, [r3, #8]
     d12:	9b07      	ldr	r3, [sp, #28]
     d14:	1ad3      	subs	r3, r2, r3
     d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d18:	4293      	cmp	r3, r2
     d1a:	bf28      	it	cs
     d1c:	4613      	movcs	r3, r2
     d1e:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     d20:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d22:	9b01      	ldr	r3, [sp, #4]
     d24:	4293      	cmp	r3, r2
     d26:	bf28      	it	cs
     d28:	4613      	movcs	r3, r2
     d2a:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d2c:	9b03      	ldr	r3, [sp, #12]
     d2e:	685a      	ldr	r2, [r3, #4]
     d30:	9b07      	ldr	r3, [sp, #28]
     d32:	4413      	add	r3, r2
     d34:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d38:	9902      	ldr	r1, [sp, #8]
     d3a:	9805      	ldr	r0, [sp, #20]
     d3c:	f000 fc7c 	bl	1638 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     d40:	9a08      	ldr	r2, [sp, #32]
     d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d44:	4413      	add	r3, r2
     d46:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     d48:	9a02      	ldr	r2, [sp, #8]
     d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d4c:	4413      	add	r3, r2
     d4e:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     d50:	9a01      	ldr	r2, [sp, #4]
     d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d54:	1ad3      	subs	r3, r2, r3
     d56:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     d58:	9a07      	ldr	r2, [sp, #28]
     d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d5c:	4413      	add	r3, r2
     d5e:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     d60:	9b03      	ldr	r3, [sp, #12]
     d62:	689b      	ldr	r3, [r3, #8]
     d64:	9a07      	ldr	r2, [sp, #28]
     d66:	429a      	cmp	r2, r3
     d68:	d101      	bne.n	d6e <_WriteBlocking+0x9e>
      WrOff = 0u;
     d6a:	2300      	movs	r3, #0
     d6c:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     d6e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     d72:	9b03      	ldr	r3, [sp, #12]
     d74:	9a07      	ldr	r2, [sp, #28]
     d76:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     d78:	9b01      	ldr	r3, [sp, #4]
     d7a:	2b00      	cmp	r3, #0
     d7c:	d1b2      	bne.n	ce4 <_WriteBlocking+0x14>
  return NumBytesWritten;
     d7e:	9b08      	ldr	r3, [sp, #32]
}
     d80:	4618      	mov	r0, r3
     d82:	b00b      	add	sp, #44	; 0x2c
     d84:	f85d fb04 	ldr.w	pc, [sp], #4

00000d88 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     d88:	b500      	push	{lr}
     d8a:	b089      	sub	sp, #36	; 0x24
     d8c:	9003      	str	r0, [sp, #12]
     d8e:	9102      	str	r1, [sp, #8]
     d90:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     d92:	9b03      	ldr	r3, [sp, #12]
     d94:	68db      	ldr	r3, [r3, #12]
     d96:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     d98:	9b03      	ldr	r3, [sp, #12]
     d9a:	689a      	ldr	r2, [r3, #8]
     d9c:	9b07      	ldr	r3, [sp, #28]
     d9e:	1ad3      	subs	r3, r2, r3
     da0:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     da2:	9a06      	ldr	r2, [sp, #24]
     da4:	9b01      	ldr	r3, [sp, #4]
     da6:	429a      	cmp	r2, r3
     da8:	d911      	bls.n	dce <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     daa:	9b03      	ldr	r3, [sp, #12]
     dac:	685a      	ldr	r2, [r3, #4]
     dae:	9b07      	ldr	r3, [sp, #28]
     db0:	4413      	add	r3, r2
     db2:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     db4:	9a01      	ldr	r2, [sp, #4]
     db6:	9902      	ldr	r1, [sp, #8]
     db8:	9804      	ldr	r0, [sp, #16]
     dba:	f000 fc3d 	bl	1638 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     dbe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     dc2:	9a07      	ldr	r2, [sp, #28]
     dc4:	9b01      	ldr	r3, [sp, #4]
     dc6:	441a      	add	r2, r3
     dc8:	9b03      	ldr	r3, [sp, #12]
     dca:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     dcc:	e01f      	b.n	e0e <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     dce:	9b06      	ldr	r3, [sp, #24]
     dd0:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     dd2:	9b03      	ldr	r3, [sp, #12]
     dd4:	685a      	ldr	r2, [r3, #4]
     dd6:	9b07      	ldr	r3, [sp, #28]
     dd8:	4413      	add	r3, r2
     dda:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     ddc:	9a05      	ldr	r2, [sp, #20]
     dde:	9902      	ldr	r1, [sp, #8]
     de0:	9804      	ldr	r0, [sp, #16]
     de2:	f000 fc29 	bl	1638 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     de6:	9a01      	ldr	r2, [sp, #4]
     de8:	9b06      	ldr	r3, [sp, #24]
     dea:	1ad3      	subs	r3, r2, r3
     dec:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     dee:	9b03      	ldr	r3, [sp, #12]
     df0:	685b      	ldr	r3, [r3, #4]
     df2:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     df4:	9a02      	ldr	r2, [sp, #8]
     df6:	9b06      	ldr	r3, [sp, #24]
     df8:	4413      	add	r3, r2
     dfa:	9a05      	ldr	r2, [sp, #20]
     dfc:	4619      	mov	r1, r3
     dfe:	9804      	ldr	r0, [sp, #16]
     e00:	f000 fc1a 	bl	1638 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e04:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     e08:	9b03      	ldr	r3, [sp, #12]
     e0a:	9a05      	ldr	r2, [sp, #20]
     e0c:	60da      	str	r2, [r3, #12]
}
     e0e:	bf00      	nop
     e10:	b009      	add	sp, #36	; 0x24
     e12:	f85d fb04 	ldr.w	pc, [sp], #4

00000e16 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     e16:	b086      	sub	sp, #24
     e18:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     e1a:	9b01      	ldr	r3, [sp, #4]
     e1c:	691b      	ldr	r3, [r3, #16]
     e1e:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     e20:	9b01      	ldr	r3, [sp, #4]
     e22:	68db      	ldr	r3, [r3, #12]
     e24:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     e26:	9a04      	ldr	r2, [sp, #16]
     e28:	9b03      	ldr	r3, [sp, #12]
     e2a:	429a      	cmp	r2, r3
     e2c:	d808      	bhi.n	e40 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     e2e:	9b01      	ldr	r3, [sp, #4]
     e30:	689a      	ldr	r2, [r3, #8]
     e32:	9b03      	ldr	r3, [sp, #12]
     e34:	1ad2      	subs	r2, r2, r3
     e36:	9b04      	ldr	r3, [sp, #16]
     e38:	4413      	add	r3, r2
     e3a:	3b01      	subs	r3, #1
     e3c:	9305      	str	r3, [sp, #20]
     e3e:	e004      	b.n	e4a <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     e40:	9a04      	ldr	r2, [sp, #16]
     e42:	9b03      	ldr	r3, [sp, #12]
     e44:	1ad3      	subs	r3, r2, r3
     e46:	3b01      	subs	r3, #1
     e48:	9305      	str	r3, [sp, #20]
  }
  return r;
     e4a:	9b05      	ldr	r3, [sp, #20]
}
     e4c:	4618      	mov	r0, r3
     e4e:	b006      	add	sp, #24
     e50:	4770      	bx	lr
	...

00000e54 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     e54:	b500      	push	{lr}
     e56:	b089      	sub	sp, #36	; 0x24
     e58:	9003      	str	r0, [sp, #12]
     e5a:	9102      	str	r1, [sp, #8]
     e5c:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     e5e:	9b02      	ldr	r3, [sp, #8]
     e60:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     e62:	9b03      	ldr	r3, [sp, #12]
     e64:	1c5a      	adds	r2, r3, #1
     e66:	4613      	mov	r3, r2
     e68:	005b      	lsls	r3, r3, #1
     e6a:	4413      	add	r3, r2
     e6c:	00db      	lsls	r3, r3, #3
     e6e:	4a20      	ldr	r2, [pc, #128]	; (ef0 <SEGGER_RTT_WriteNoLock+0x9c>)
     e70:	4413      	add	r3, r2
     e72:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     e74:	9b05      	ldr	r3, [sp, #20]
     e76:	695b      	ldr	r3, [r3, #20]
     e78:	2b02      	cmp	r3, #2
     e7a:	d029      	beq.n	ed0 <SEGGER_RTT_WriteNoLock+0x7c>
     e7c:	2b02      	cmp	r3, #2
     e7e:	d82e      	bhi.n	ede <SEGGER_RTT_WriteNoLock+0x8a>
     e80:	2b00      	cmp	r3, #0
     e82:	d002      	beq.n	e8a <SEGGER_RTT_WriteNoLock+0x36>
     e84:	2b01      	cmp	r3, #1
     e86:	d013      	beq.n	eb0 <SEGGER_RTT_WriteNoLock+0x5c>
     e88:	e029      	b.n	ede <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     e8a:	9805      	ldr	r0, [sp, #20]
     e8c:	f7ff ffc3 	bl	e16 <_GetAvailWriteSpace>
     e90:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     e92:	9a04      	ldr	r2, [sp, #16]
     e94:	9b01      	ldr	r3, [sp, #4]
     e96:	429a      	cmp	r2, r3
     e98:	d202      	bcs.n	ea0 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     e9a:	2300      	movs	r3, #0
     e9c:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     e9e:	e021      	b.n	ee4 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     ea0:	9b01      	ldr	r3, [sp, #4]
     ea2:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     ea4:	9a01      	ldr	r2, [sp, #4]
     ea6:	9906      	ldr	r1, [sp, #24]
     ea8:	9805      	ldr	r0, [sp, #20]
     eaa:	f7ff ff6d 	bl	d88 <_WriteNoCheck>
    break;
     eae:	e019      	b.n	ee4 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     eb0:	9805      	ldr	r0, [sp, #20]
     eb2:	f7ff ffb0 	bl	e16 <_GetAvailWriteSpace>
     eb6:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     eb8:	9a01      	ldr	r2, [sp, #4]
     eba:	9b04      	ldr	r3, [sp, #16]
     ebc:	4293      	cmp	r3, r2
     ebe:	bf28      	it	cs
     ec0:	4613      	movcs	r3, r2
     ec2:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     ec4:	9a07      	ldr	r2, [sp, #28]
     ec6:	9906      	ldr	r1, [sp, #24]
     ec8:	9805      	ldr	r0, [sp, #20]
     eca:	f7ff ff5d 	bl	d88 <_WriteNoCheck>
    break;
     ece:	e009      	b.n	ee4 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     ed0:	9a01      	ldr	r2, [sp, #4]
     ed2:	9906      	ldr	r1, [sp, #24]
     ed4:	9805      	ldr	r0, [sp, #20]
     ed6:	f7ff fefb 	bl	cd0 <_WriteBlocking>
     eda:	9007      	str	r0, [sp, #28]
    break;
     edc:	e002      	b.n	ee4 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     ede:	2300      	movs	r3, #0
     ee0:	9307      	str	r3, [sp, #28]
    break;
     ee2:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     ee4:	9b07      	ldr	r3, [sp, #28]
}
     ee6:	4618      	mov	r0, r3
     ee8:	b009      	add	sp, #36	; 0x24
     eea:	f85d fb04 	ldr.w	pc, [sp], #4
     eee:	bf00      	nop
     ef0:	1fff8f18 	.word	0x1fff8f18

00000ef4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     ef4:	b500      	push	{lr}
     ef6:	b089      	sub	sp, #36	; 0x24
     ef8:	9003      	str	r0, [sp, #12]
     efa:	9102      	str	r1, [sp, #8]
     efc:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     efe:	4b0f      	ldr	r3, [pc, #60]	; (f3c <SEGGER_RTT_Write+0x48>)
     f00:	9307      	str	r3, [sp, #28]
     f02:	9b07      	ldr	r3, [sp, #28]
     f04:	781b      	ldrb	r3, [r3, #0]
     f06:	b2db      	uxtb	r3, r3
     f08:	2b53      	cmp	r3, #83	; 0x53
     f0a:	d001      	beq.n	f10 <SEGGER_RTT_Write+0x1c>
     f0c:	f7ff fe86 	bl	c1c <_DoInit>
  SEGGER_RTT_LOCK();
     f10:	f3ef 8311 	mrs	r3, BASEPRI
     f14:	f04f 0120 	mov.w	r1, #32
     f18:	f381 8811 	msr	BASEPRI, r1
     f1c:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     f1e:	9a01      	ldr	r2, [sp, #4]
     f20:	9902      	ldr	r1, [sp, #8]
     f22:	9803      	ldr	r0, [sp, #12]
     f24:	f7ff ff96 	bl	e54 <SEGGER_RTT_WriteNoLock>
     f28:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     f2a:	9b06      	ldr	r3, [sp, #24]
     f2c:	f383 8811 	msr	BASEPRI, r3
  return Status;
     f30:	9b05      	ldr	r3, [sp, #20]
}
     f32:	4618      	mov	r0, r3
     f34:	b009      	add	sp, #36	; 0x24
     f36:	f85d fb04 	ldr.w	pc, [sp], #4
     f3a:	bf00      	nop
     f3c:	1fff8f18 	.word	0x1fff8f18

00000f40 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     f40:	b508      	push	{r3, lr}
  _DoInit();
     f42:	f7ff fe6b 	bl	c1c <_DoInit>
}
     f46:	bf00      	nop
     f48:	bd08      	pop	{r3, pc}

00000f4a <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     f4a:	b500      	push	{lr}
     f4c:	b085      	sub	sp, #20
     f4e:	9001      	str	r0, [sp, #4]
     f50:	460b      	mov	r3, r1
     f52:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     f56:	9b01      	ldr	r3, [sp, #4]
     f58:	689b      	ldr	r3, [r3, #8]
     f5a:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     f5c:	9b03      	ldr	r3, [sp, #12]
     f5e:	1c5a      	adds	r2, r3, #1
     f60:	9b01      	ldr	r3, [sp, #4]
     f62:	685b      	ldr	r3, [r3, #4]
     f64:	429a      	cmp	r2, r3
     f66:	d80f      	bhi.n	f88 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     f68:	9b01      	ldr	r3, [sp, #4]
     f6a:	681a      	ldr	r2, [r3, #0]
     f6c:	9b03      	ldr	r3, [sp, #12]
     f6e:	4413      	add	r3, r2
     f70:	f89d 2003 	ldrb.w	r2, [sp, #3]
     f74:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     f76:	9b03      	ldr	r3, [sp, #12]
     f78:	1c5a      	adds	r2, r3, #1
     f7a:	9b01      	ldr	r3, [sp, #4]
     f7c:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     f7e:	9b01      	ldr	r3, [sp, #4]
     f80:	68db      	ldr	r3, [r3, #12]
     f82:	1c5a      	adds	r2, r3, #1
     f84:	9b01      	ldr	r3, [sp, #4]
     f86:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     f88:	9b01      	ldr	r3, [sp, #4]
     f8a:	689a      	ldr	r2, [r3, #8]
     f8c:	9b01      	ldr	r3, [sp, #4]
     f8e:	685b      	ldr	r3, [r3, #4]
     f90:	429a      	cmp	r2, r3
     f92:	d115      	bne.n	fc0 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     f94:	9b01      	ldr	r3, [sp, #4]
     f96:	6918      	ldr	r0, [r3, #16]
     f98:	9b01      	ldr	r3, [sp, #4]
     f9a:	6819      	ldr	r1, [r3, #0]
     f9c:	9b01      	ldr	r3, [sp, #4]
     f9e:	689b      	ldr	r3, [r3, #8]
     fa0:	461a      	mov	r2, r3
     fa2:	f7ff ffa7 	bl	ef4 <SEGGER_RTT_Write>
     fa6:	4602      	mov	r2, r0
     fa8:	9b01      	ldr	r3, [sp, #4]
     faa:	689b      	ldr	r3, [r3, #8]
     fac:	429a      	cmp	r2, r3
     fae:	d004      	beq.n	fba <_StoreChar+0x70>
      p->ReturnValue = -1;
     fb0:	9b01      	ldr	r3, [sp, #4]
     fb2:	f04f 32ff 	mov.w	r2, #4294967295
     fb6:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
     fb8:	e002      	b.n	fc0 <_StoreChar+0x76>
      p->Cnt = 0u;
     fba:	9b01      	ldr	r3, [sp, #4]
     fbc:	2200      	movs	r2, #0
     fbe:	609a      	str	r2, [r3, #8]
}
     fc0:	bf00      	nop
     fc2:	b005      	add	sp, #20
     fc4:	f85d fb04 	ldr.w	pc, [sp], #4

00000fc8 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
     fc8:	b500      	push	{lr}
     fca:	b08b      	sub	sp, #44	; 0x2c
     fcc:	9003      	str	r0, [sp, #12]
     fce:	9102      	str	r1, [sp, #8]
     fd0:	9201      	str	r2, [sp, #4]
     fd2:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
     fd4:	9b02      	ldr	r3, [sp, #8]
     fd6:	9308      	str	r3, [sp, #32]
  Digit = 1u;
     fd8:	2301      	movs	r3, #1
     fda:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
     fdc:	2301      	movs	r3, #1
     fde:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     fe0:	e007      	b.n	ff2 <_PrintUnsigned+0x2a>
    Number = (Number / Base);
     fe2:	9a08      	ldr	r2, [sp, #32]
     fe4:	9b01      	ldr	r3, [sp, #4]
     fe6:	fbb2 f3f3 	udiv	r3, r2, r3
     fea:	9308      	str	r3, [sp, #32]
    Width++;
     fec:	9b07      	ldr	r3, [sp, #28]
     fee:	3301      	adds	r3, #1
     ff0:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
     ff2:	9a08      	ldr	r2, [sp, #32]
     ff4:	9b01      	ldr	r3, [sp, #4]
     ff6:	429a      	cmp	r2, r3
     ff8:	d2f3      	bcs.n	fe2 <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
     ffa:	9a00      	ldr	r2, [sp, #0]
     ffc:	9b07      	ldr	r3, [sp, #28]
     ffe:	429a      	cmp	r2, r3
    1000:	d901      	bls.n	1006 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    1002:	9b00      	ldr	r3, [sp, #0]
    1004:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1008:	f003 0301 	and.w	r3, r3, #1
    100c:	2b00      	cmp	r3, #0
    100e:	d128      	bne.n	1062 <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1012:	2b00      	cmp	r3, #0
    1014:	d025      	beq.n	1062 <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1018:	f003 0302 	and.w	r3, r3, #2
    101c:	2b00      	cmp	r3, #0
    101e:	d006      	beq.n	102e <_PrintUnsigned+0x66>
    1020:	9b00      	ldr	r3, [sp, #0]
    1022:	2b00      	cmp	r3, #0
    1024:	d103      	bne.n	102e <_PrintUnsigned+0x66>
        c = '0';
    1026:	2330      	movs	r3, #48	; 0x30
    1028:	f88d 301b 	strb.w	r3, [sp, #27]
    102c:	e002      	b.n	1034 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    102e:	2320      	movs	r3, #32
    1030:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1034:	e00c      	b.n	1050 <_PrintUnsigned+0x88>
        FieldWidth--;
    1036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1038:	3b01      	subs	r3, #1
    103a:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    103c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1040:	4619      	mov	r1, r3
    1042:	9803      	ldr	r0, [sp, #12]
    1044:	f7ff ff81 	bl	f4a <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1048:	9b03      	ldr	r3, [sp, #12]
    104a:	68db      	ldr	r3, [r3, #12]
    104c:	2b00      	cmp	r3, #0
    104e:	db07      	blt.n	1060 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1050:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1052:	2b00      	cmp	r3, #0
    1054:	d005      	beq.n	1062 <_PrintUnsigned+0x9a>
    1056:	9a07      	ldr	r2, [sp, #28]
    1058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    105a:	429a      	cmp	r2, r3
    105c:	d3eb      	bcc.n	1036 <_PrintUnsigned+0x6e>
    105e:	e000      	b.n	1062 <_PrintUnsigned+0x9a>
          break;
    1060:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    1062:	9b03      	ldr	r3, [sp, #12]
    1064:	68db      	ldr	r3, [r3, #12]
    1066:	2b00      	cmp	r3, #0
    1068:	db55      	blt.n	1116 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    106a:	9b00      	ldr	r3, [sp, #0]
    106c:	2b01      	cmp	r3, #1
    106e:	d903      	bls.n	1078 <_PrintUnsigned+0xb0>
        NumDigits--;
    1070:	9b00      	ldr	r3, [sp, #0]
    1072:	3b01      	subs	r3, #1
    1074:	9300      	str	r3, [sp, #0]
    1076:	e009      	b.n	108c <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    1078:	9a02      	ldr	r2, [sp, #8]
    107a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    107c:	fbb2 f3f3 	udiv	r3, r2, r3
    1080:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    1082:	9a05      	ldr	r2, [sp, #20]
    1084:	9b01      	ldr	r3, [sp, #4]
    1086:	429a      	cmp	r2, r3
    1088:	d200      	bcs.n	108c <_PrintUnsigned+0xc4>
          break;
    108a:	e005      	b.n	1098 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    108c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    108e:	9a01      	ldr	r2, [sp, #4]
    1090:	fb02 f303 	mul.w	r3, r2, r3
    1094:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    1096:	e7e8      	b.n	106a <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    1098:	9a02      	ldr	r2, [sp, #8]
    109a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    109c:	fbb2 f3f3 	udiv	r3, r2, r3
    10a0:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    10a2:	9b05      	ldr	r3, [sp, #20]
    10a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10a6:	fb02 f303 	mul.w	r3, r2, r3
    10aa:	9a02      	ldr	r2, [sp, #8]
    10ac:	1ad3      	subs	r3, r2, r3
    10ae:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    10b0:	4a1b      	ldr	r2, [pc, #108]	; (1120 <_PrintUnsigned+0x158>)
    10b2:	9b05      	ldr	r3, [sp, #20]
    10b4:	4413      	add	r3, r2
    10b6:	781b      	ldrb	r3, [r3, #0]
    10b8:	4619      	mov	r1, r3
    10ba:	9803      	ldr	r0, [sp, #12]
    10bc:	f7ff ff45 	bl	f4a <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    10c0:	9b03      	ldr	r3, [sp, #12]
    10c2:	68db      	ldr	r3, [r3, #12]
    10c4:	2b00      	cmp	r3, #0
    10c6:	db08      	blt.n	10da <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    10c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10ca:	9b01      	ldr	r3, [sp, #4]
    10cc:	fbb2 f3f3 	udiv	r3, r2, r3
    10d0:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    10d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10d4:	2b00      	cmp	r3, #0
    10d6:	d1df      	bne.n	1098 <_PrintUnsigned+0xd0>
    10d8:	e000      	b.n	10dc <_PrintUnsigned+0x114>
        break;
    10da:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    10dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    10de:	f003 0301 	and.w	r3, r3, #1
    10e2:	2b00      	cmp	r3, #0
    10e4:	d017      	beq.n	1116 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    10e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10e8:	2b00      	cmp	r3, #0
    10ea:	d014      	beq.n	1116 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10ec:	e00a      	b.n	1104 <_PrintUnsigned+0x13c>
          FieldWidth--;
    10ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10f0:	3b01      	subs	r3, #1
    10f2:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    10f4:	2120      	movs	r1, #32
    10f6:	9803      	ldr	r0, [sp, #12]
    10f8:	f7ff ff27 	bl	f4a <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    10fc:	9b03      	ldr	r3, [sp, #12]
    10fe:	68db      	ldr	r3, [r3, #12]
    1100:	2b00      	cmp	r3, #0
    1102:	db07      	blt.n	1114 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1104:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1106:	2b00      	cmp	r3, #0
    1108:	d005      	beq.n	1116 <_PrintUnsigned+0x14e>
    110a:	9a07      	ldr	r2, [sp, #28]
    110c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    110e:	429a      	cmp	r2, r3
    1110:	d3ed      	bcc.n	10ee <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    1112:	e000      	b.n	1116 <_PrintUnsigned+0x14e>
            break;
    1114:	bf00      	nop
}
    1116:	bf00      	nop
    1118:	b00b      	add	sp, #44	; 0x2c
    111a:	f85d fb04 	ldr.w	pc, [sp], #4
    111e:	bf00      	nop
    1120:	0000b538 	.word	0x0000b538

00001124 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1124:	b500      	push	{lr}
    1126:	b089      	sub	sp, #36	; 0x24
    1128:	9005      	str	r0, [sp, #20]
    112a:	9104      	str	r1, [sp, #16]
    112c:	9203      	str	r2, [sp, #12]
    112e:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1130:	9b04      	ldr	r3, [sp, #16]
    1132:	2b00      	cmp	r3, #0
    1134:	bfb8      	it	lt
    1136:	425b      	neglt	r3, r3
    1138:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    113a:	2301      	movs	r3, #1
    113c:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    113e:	e007      	b.n	1150 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1140:	9b03      	ldr	r3, [sp, #12]
    1142:	9a06      	ldr	r2, [sp, #24]
    1144:	fb92 f3f3 	sdiv	r3, r2, r3
    1148:	9306      	str	r3, [sp, #24]
    Width++;
    114a:	9b07      	ldr	r3, [sp, #28]
    114c:	3301      	adds	r3, #1
    114e:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1150:	9b03      	ldr	r3, [sp, #12]
    1152:	9a06      	ldr	r2, [sp, #24]
    1154:	429a      	cmp	r2, r3
    1156:	daf3      	bge.n	1140 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    1158:	9a02      	ldr	r2, [sp, #8]
    115a:	9b07      	ldr	r3, [sp, #28]
    115c:	429a      	cmp	r2, r3
    115e:	d901      	bls.n	1164 <_PrintInt+0x40>
    Width = NumDigits;
    1160:	9b02      	ldr	r3, [sp, #8]
    1162:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    1164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1166:	2b00      	cmp	r3, #0
    1168:	d00a      	beq.n	1180 <_PrintInt+0x5c>
    116a:	9b04      	ldr	r3, [sp, #16]
    116c:	2b00      	cmp	r3, #0
    116e:	db04      	blt.n	117a <_PrintInt+0x56>
    1170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1172:	f003 0304 	and.w	r3, r3, #4
    1176:	2b00      	cmp	r3, #0
    1178:	d002      	beq.n	1180 <_PrintInt+0x5c>
    FieldWidth--;
    117a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    117c:	3b01      	subs	r3, #1
    117e:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    1180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1182:	f003 0302 	and.w	r3, r3, #2
    1186:	2b00      	cmp	r3, #0
    1188:	d002      	beq.n	1190 <_PrintInt+0x6c>
    118a:	9b02      	ldr	r3, [sp, #8]
    118c:	2b00      	cmp	r3, #0
    118e:	d01c      	beq.n	11ca <_PrintInt+0xa6>
    1190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1192:	f003 0301 	and.w	r3, r3, #1
    1196:	2b00      	cmp	r3, #0
    1198:	d117      	bne.n	11ca <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    119a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    119c:	2b00      	cmp	r3, #0
    119e:	d014      	beq.n	11ca <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11a0:	e00a      	b.n	11b8 <_PrintInt+0x94>
        FieldWidth--;
    11a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11a4:	3b01      	subs	r3, #1
    11a6:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    11a8:	2120      	movs	r1, #32
    11aa:	9805      	ldr	r0, [sp, #20]
    11ac:	f7ff fecd 	bl	f4a <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    11b0:	9b05      	ldr	r3, [sp, #20]
    11b2:	68db      	ldr	r3, [r3, #12]
    11b4:	2b00      	cmp	r3, #0
    11b6:	db07      	blt.n	11c8 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11ba:	2b00      	cmp	r3, #0
    11bc:	d005      	beq.n	11ca <_PrintInt+0xa6>
    11be:	9a07      	ldr	r2, [sp, #28]
    11c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11c2:	429a      	cmp	r2, r3
    11c4:	d3ed      	bcc.n	11a2 <_PrintInt+0x7e>
    11c6:	e000      	b.n	11ca <_PrintInt+0xa6>
          break;
    11c8:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    11ca:	9b05      	ldr	r3, [sp, #20]
    11cc:	68db      	ldr	r3, [r3, #12]
    11ce:	2b00      	cmp	r3, #0
    11d0:	db4a      	blt.n	1268 <_PrintInt+0x144>
    if (v < 0) {
    11d2:	9b04      	ldr	r3, [sp, #16]
    11d4:	2b00      	cmp	r3, #0
    11d6:	da07      	bge.n	11e8 <_PrintInt+0xc4>
      v = -v;
    11d8:	9b04      	ldr	r3, [sp, #16]
    11da:	425b      	negs	r3, r3
    11dc:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    11de:	212d      	movs	r1, #45	; 0x2d
    11e0:	9805      	ldr	r0, [sp, #20]
    11e2:	f7ff feb2 	bl	f4a <_StoreChar>
    11e6:	e008      	b.n	11fa <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    11e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11ea:	f003 0304 	and.w	r3, r3, #4
    11ee:	2b00      	cmp	r3, #0
    11f0:	d003      	beq.n	11fa <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    11f2:	212b      	movs	r1, #43	; 0x2b
    11f4:	9805      	ldr	r0, [sp, #20]
    11f6:	f7ff fea8 	bl	f4a <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    11fa:	9b05      	ldr	r3, [sp, #20]
    11fc:	68db      	ldr	r3, [r3, #12]
    11fe:	2b00      	cmp	r3, #0
    1200:	db32      	blt.n	1268 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    1202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1204:	f003 0302 	and.w	r3, r3, #2
    1208:	2b00      	cmp	r3, #0
    120a:	d01f      	beq.n	124c <_PrintInt+0x128>
    120c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    120e:	f003 0301 	and.w	r3, r3, #1
    1212:	2b00      	cmp	r3, #0
    1214:	d11a      	bne.n	124c <_PrintInt+0x128>
    1216:	9b02      	ldr	r3, [sp, #8]
    1218:	2b00      	cmp	r3, #0
    121a:	d117      	bne.n	124c <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    121c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    121e:	2b00      	cmp	r3, #0
    1220:	d014      	beq.n	124c <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1222:	e00a      	b.n	123a <_PrintInt+0x116>
            FieldWidth--;
    1224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1226:	3b01      	subs	r3, #1
    1228:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    122a:	2130      	movs	r1, #48	; 0x30
    122c:	9805      	ldr	r0, [sp, #20]
    122e:	f7ff fe8c 	bl	f4a <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    1232:	9b05      	ldr	r3, [sp, #20]
    1234:	68db      	ldr	r3, [r3, #12]
    1236:	2b00      	cmp	r3, #0
    1238:	db07      	blt.n	124a <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    123a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    123c:	2b00      	cmp	r3, #0
    123e:	d005      	beq.n	124c <_PrintInt+0x128>
    1240:	9a07      	ldr	r2, [sp, #28]
    1242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1244:	429a      	cmp	r2, r3
    1246:	d3ed      	bcc.n	1224 <_PrintInt+0x100>
    1248:	e000      	b.n	124c <_PrintInt+0x128>
              break;
    124a:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    124c:	9b05      	ldr	r3, [sp, #20]
    124e:	68db      	ldr	r3, [r3, #12]
    1250:	2b00      	cmp	r3, #0
    1252:	db09      	blt.n	1268 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    1254:	9904      	ldr	r1, [sp, #16]
    1256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1258:	9301      	str	r3, [sp, #4]
    125a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    125c:	9300      	str	r3, [sp, #0]
    125e:	9b02      	ldr	r3, [sp, #8]
    1260:	9a03      	ldr	r2, [sp, #12]
    1262:	9805      	ldr	r0, [sp, #20]
    1264:	f7ff feb0 	bl	fc8 <_PrintUnsigned>
      }
    }
  }
}
    1268:	bf00      	nop
    126a:	b009      	add	sp, #36	; 0x24
    126c:	f85d fb04 	ldr.w	pc, [sp], #4

00001270 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    1270:	b500      	push	{lr}
    1272:	b0a3      	sub	sp, #140	; 0x8c
    1274:	9005      	str	r0, [sp, #20]
    1276:	9104      	str	r1, [sp, #16]
    1278:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    127a:	ab06      	add	r3, sp, #24
    127c:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    127e:	2340      	movs	r3, #64	; 0x40
    1280:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    1282:	2300      	movs	r3, #0
    1284:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    1286:	9b05      	ldr	r3, [sp, #20]
    1288:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    128a:	2300      	movs	r3, #0
    128c:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    128e:	9b04      	ldr	r3, [sp, #16]
    1290:	781b      	ldrb	r3, [r3, #0]
    1292:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    1296:	9b04      	ldr	r3, [sp, #16]
    1298:	3301      	adds	r3, #1
    129a:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    129c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12a0:	2b00      	cmp	r3, #0
    12a2:	f000 819c 	beq.w	15de <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    12a6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12aa:	2b25      	cmp	r3, #37	; 0x25
    12ac:	f040 818b 	bne.w	15c6 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    12b0:	2300      	movs	r3, #0
    12b2:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    12b4:	2301      	movs	r3, #1
    12b6:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    12b8:	9b04      	ldr	r3, [sp, #16]
    12ba:	781b      	ldrb	r3, [r3, #0]
    12bc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    12c0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12c4:	3b23      	subs	r3, #35	; 0x23
    12c6:	2b0d      	cmp	r3, #13
    12c8:	d83e      	bhi.n	1348 <SEGGER_RTT_vprintf+0xd8>
    12ca:	a201      	add	r2, pc, #4	; (adr r2, 12d0 <SEGGER_RTT_vprintf+0x60>)
    12cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    12d0:	00001339 	.word	0x00001339
    12d4:	00001349 	.word	0x00001349
    12d8:	00001349 	.word	0x00001349
    12dc:	00001349 	.word	0x00001349
    12e0:	00001349 	.word	0x00001349
    12e4:	00001349 	.word	0x00001349
    12e8:	00001349 	.word	0x00001349
    12ec:	00001349 	.word	0x00001349
    12f0:	00001329 	.word	0x00001329
    12f4:	00001349 	.word	0x00001349
    12f8:	00001309 	.word	0x00001309
    12fc:	00001349 	.word	0x00001349
    1300:	00001349 	.word	0x00001349
    1304:	00001319 	.word	0x00001319
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1308:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    130a:	f043 0301 	orr.w	r3, r3, #1
    130e:	931e      	str	r3, [sp, #120]	; 0x78
    1310:	9b04      	ldr	r3, [sp, #16]
    1312:	3301      	adds	r3, #1
    1314:	9304      	str	r3, [sp, #16]
    1316:	e01a      	b.n	134e <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1318:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    131a:	f043 0302 	orr.w	r3, r3, #2
    131e:	931e      	str	r3, [sp, #120]	; 0x78
    1320:	9b04      	ldr	r3, [sp, #16]
    1322:	3301      	adds	r3, #1
    1324:	9304      	str	r3, [sp, #16]
    1326:	e012      	b.n	134e <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1328:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    132a:	f043 0304 	orr.w	r3, r3, #4
    132e:	931e      	str	r3, [sp, #120]	; 0x78
    1330:	9b04      	ldr	r3, [sp, #16]
    1332:	3301      	adds	r3, #1
    1334:	9304      	str	r3, [sp, #16]
    1336:	e00a      	b.n	134e <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1338:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    133a:	f043 0308 	orr.w	r3, r3, #8
    133e:	931e      	str	r3, [sp, #120]	; 0x78
    1340:	9b04      	ldr	r3, [sp, #16]
    1342:	3301      	adds	r3, #1
    1344:	9304      	str	r3, [sp, #16]
    1346:	e002      	b.n	134e <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1348:	2300      	movs	r3, #0
    134a:	9320      	str	r3, [sp, #128]	; 0x80
    134c:	bf00      	nop
        }
      } while (v);
    134e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1350:	2b00      	cmp	r3, #0
    1352:	d1b1      	bne.n	12b8 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    1354:	2300      	movs	r3, #0
    1356:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    1358:	9b04      	ldr	r3, [sp, #16]
    135a:	781b      	ldrb	r3, [r3, #0]
    135c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    1360:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1364:	2b2f      	cmp	r3, #47	; 0x2f
    1366:	d912      	bls.n	138e <SEGGER_RTT_vprintf+0x11e>
    1368:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    136c:	2b39      	cmp	r3, #57	; 0x39
    136e:	d80e      	bhi.n	138e <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    1370:	9b04      	ldr	r3, [sp, #16]
    1372:	3301      	adds	r3, #1
    1374:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    1376:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    1378:	4613      	mov	r3, r2
    137a:	009b      	lsls	r3, r3, #2
    137c:	4413      	add	r3, r2
    137e:	005b      	lsls	r3, r3, #1
    1380:	461a      	mov	r2, r3
    1382:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1386:	4413      	add	r3, r2
    1388:	3b30      	subs	r3, #48	; 0x30
    138a:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    138c:	e7e4      	b.n	1358 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    138e:	2300      	movs	r3, #0
    1390:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    1392:	9b04      	ldr	r3, [sp, #16]
    1394:	781b      	ldrb	r3, [r3, #0]
    1396:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    139a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    139e:	2b2e      	cmp	r3, #46	; 0x2e
    13a0:	d11d      	bne.n	13de <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    13a2:	9b04      	ldr	r3, [sp, #16]
    13a4:	3301      	adds	r3, #1
    13a6:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    13a8:	9b04      	ldr	r3, [sp, #16]
    13aa:	781b      	ldrb	r3, [r3, #0]
    13ac:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    13b0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13b4:	2b2f      	cmp	r3, #47	; 0x2f
    13b6:	d912      	bls.n	13de <SEGGER_RTT_vprintf+0x16e>
    13b8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13bc:	2b39      	cmp	r3, #57	; 0x39
    13be:	d80e      	bhi.n	13de <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    13c0:	9b04      	ldr	r3, [sp, #16]
    13c2:	3301      	adds	r3, #1
    13c4:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    13c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    13c8:	4613      	mov	r3, r2
    13ca:	009b      	lsls	r3, r3, #2
    13cc:	4413      	add	r3, r2
    13ce:	005b      	lsls	r3, r3, #1
    13d0:	461a      	mov	r2, r3
    13d2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13d6:	4413      	add	r3, r2
    13d8:	3b30      	subs	r3, #48	; 0x30
    13da:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    13dc:	e7e4      	b.n	13a8 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    13de:	9b04      	ldr	r3, [sp, #16]
    13e0:	781b      	ldrb	r3, [r3, #0]
    13e2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    13e6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13ea:	2b6c      	cmp	r3, #108	; 0x6c
    13ec:	d003      	beq.n	13f6 <SEGGER_RTT_vprintf+0x186>
    13ee:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13f2:	2b68      	cmp	r3, #104	; 0x68
    13f4:	d107      	bne.n	1406 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    13f6:	9b04      	ldr	r3, [sp, #16]
    13f8:	3301      	adds	r3, #1
    13fa:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    13fc:	9b04      	ldr	r3, [sp, #16]
    13fe:	781b      	ldrb	r3, [r3, #0]
    1400:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1404:	e7ef      	b.n	13e6 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1406:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    140a:	2b25      	cmp	r3, #37	; 0x25
    140c:	f000 80d0 	beq.w	15b0 <SEGGER_RTT_vprintf+0x340>
    1410:	2b25      	cmp	r3, #37	; 0x25
    1412:	f2c0 80d3 	blt.w	15bc <SEGGER_RTT_vprintf+0x34c>
    1416:	2b78      	cmp	r3, #120	; 0x78
    1418:	f300 80d0 	bgt.w	15bc <SEGGER_RTT_vprintf+0x34c>
    141c:	2b58      	cmp	r3, #88	; 0x58
    141e:	f2c0 80cd 	blt.w	15bc <SEGGER_RTT_vprintf+0x34c>
    1422:	3b58      	subs	r3, #88	; 0x58
    1424:	2b20      	cmp	r3, #32
    1426:	f200 80c9 	bhi.w	15bc <SEGGER_RTT_vprintf+0x34c>
    142a:	a201      	add	r2, pc, #4	; (adr r2, 1430 <SEGGER_RTT_vprintf+0x1c0>)
    142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1430:	00001521 	.word	0x00001521
    1434:	000015bd 	.word	0x000015bd
    1438:	000015bd 	.word	0x000015bd
    143c:	000015bd 	.word	0x000015bd
    1440:	000015bd 	.word	0x000015bd
    1444:	000015bd 	.word	0x000015bd
    1448:	000015bd 	.word	0x000015bd
    144c:	000015bd 	.word	0x000015bd
    1450:	000015bd 	.word	0x000015bd
    1454:	000015bd 	.word	0x000015bd
    1458:	000015bd 	.word	0x000015bd
    145c:	000014b5 	.word	0x000014b5
    1460:	000014d9 	.word	0x000014d9
    1464:	000015bd 	.word	0x000015bd
    1468:	000015bd 	.word	0x000015bd
    146c:	000015bd 	.word	0x000015bd
    1470:	000015bd 	.word	0x000015bd
    1474:	000015bd 	.word	0x000015bd
    1478:	000015bd 	.word	0x000015bd
    147c:	000015bd 	.word	0x000015bd
    1480:	000015bd 	.word	0x000015bd
    1484:	000015bd 	.word	0x000015bd
    1488:	000015bd 	.word	0x000015bd
    148c:	000015bd 	.word	0x000015bd
    1490:	0000158d 	.word	0x0000158d
    1494:	000015bd 	.word	0x000015bd
    1498:	000015bd 	.word	0x000015bd
    149c:	00001545 	.word	0x00001545
    14a0:	000015bd 	.word	0x000015bd
    14a4:	000014fd 	.word	0x000014fd
    14a8:	000015bd 	.word	0x000015bd
    14ac:	000015bd 	.word	0x000015bd
    14b0:	00001521 	.word	0x00001521
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    14b4:	9b03      	ldr	r3, [sp, #12]
    14b6:	681b      	ldr	r3, [r3, #0]
    14b8:	1d19      	adds	r1, r3, #4
    14ba:	9a03      	ldr	r2, [sp, #12]
    14bc:	6011      	str	r1, [r2, #0]
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    14c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
    14c4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    14c8:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    14cc:	ab16      	add	r3, sp, #88	; 0x58
    14ce:	4611      	mov	r1, r2
    14d0:	4618      	mov	r0, r3
    14d2:	f7ff fd3a 	bl	f4a <_StoreChar>
        break;
    14d6:	e072      	b.n	15be <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    14d8:	9b03      	ldr	r3, [sp, #12]
    14da:	681b      	ldr	r3, [r3, #0]
    14dc:	1d19      	adds	r1, r3, #4
    14de:	9a03      	ldr	r2, [sp, #12]
    14e0:	6011      	str	r1, [r2, #0]
    14e2:	681b      	ldr	r3, [r3, #0]
    14e4:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    14e6:	a816      	add	r0, sp, #88	; 0x58
    14e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    14ea:	9301      	str	r3, [sp, #4]
    14ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    14ee:	9300      	str	r3, [sp, #0]
    14f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    14f2:	220a      	movs	r2, #10
    14f4:	9920      	ldr	r1, [sp, #128]	; 0x80
    14f6:	f7ff fe15 	bl	1124 <_PrintInt>
        break;
    14fa:	e060      	b.n	15be <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    14fc:	9b03      	ldr	r3, [sp, #12]
    14fe:	681b      	ldr	r3, [r3, #0]
    1500:	1d19      	adds	r1, r3, #4
    1502:	9a03      	ldr	r2, [sp, #12]
    1504:	6011      	str	r1, [r2, #0]
    1506:	681b      	ldr	r3, [r3, #0]
    1508:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    150a:	9920      	ldr	r1, [sp, #128]	; 0x80
    150c:	a816      	add	r0, sp, #88	; 0x58
    150e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1510:	9301      	str	r3, [sp, #4]
    1512:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1514:	9300      	str	r3, [sp, #0]
    1516:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1518:	220a      	movs	r2, #10
    151a:	f7ff fd55 	bl	fc8 <_PrintUnsigned>
        break;
    151e:	e04e      	b.n	15be <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1520:	9b03      	ldr	r3, [sp, #12]
    1522:	681b      	ldr	r3, [r3, #0]
    1524:	1d19      	adds	r1, r3, #4
    1526:	9a03      	ldr	r2, [sp, #12]
    1528:	6011      	str	r1, [r2, #0]
    152a:	681b      	ldr	r3, [r3, #0]
    152c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    152e:	9920      	ldr	r1, [sp, #128]	; 0x80
    1530:	a816      	add	r0, sp, #88	; 0x58
    1532:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1534:	9301      	str	r3, [sp, #4]
    1536:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1538:	9300      	str	r3, [sp, #0]
    153a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    153c:	2210      	movs	r2, #16
    153e:	f7ff fd43 	bl	fc8 <_PrintUnsigned>
        break;
    1542:	e03c      	b.n	15be <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1544:	9b03      	ldr	r3, [sp, #12]
    1546:	681b      	ldr	r3, [r3, #0]
    1548:	1d19      	adds	r1, r3, #4
    154a:	9a03      	ldr	r2, [sp, #12]
    154c:	6011      	str	r1, [r2, #0]
    154e:	681b      	ldr	r3, [r3, #0]
    1550:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    1552:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1554:	2b00      	cmp	r3, #0
    1556:	d101      	bne.n	155c <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1558:	4b2c      	ldr	r3, [pc, #176]	; (160c <SEGGER_RTT_vprintf+0x39c>)
    155a:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    155c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    155e:	781b      	ldrb	r3, [r3, #0]
    1560:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1564:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1566:	3301      	adds	r3, #1
    1568:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    156a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    156e:	2b00      	cmp	r3, #0
    1570:	d00a      	beq.n	1588 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1572:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1576:	ab16      	add	r3, sp, #88	; 0x58
    1578:	4611      	mov	r1, r2
    157a:	4618      	mov	r0, r3
    157c:	f7ff fce5 	bl	f4a <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1580:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1582:	2b00      	cmp	r3, #0
    1584:	daea      	bge.n	155c <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1586:	e01a      	b.n	15be <SEGGER_RTT_vprintf+0x34e>
              break;
    1588:	bf00      	nop
        break;
    158a:	e018      	b.n	15be <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    158c:	9b03      	ldr	r3, [sp, #12]
    158e:	681b      	ldr	r3, [r3, #0]
    1590:	1d19      	adds	r1, r3, #4
    1592:	9a03      	ldr	r2, [sp, #12]
    1594:	6011      	str	r1, [r2, #0]
    1596:	681b      	ldr	r3, [r3, #0]
    1598:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    159a:	9920      	ldr	r1, [sp, #128]	; 0x80
    159c:	a816      	add	r0, sp, #88	; 0x58
    159e:	2300      	movs	r3, #0
    15a0:	9301      	str	r3, [sp, #4]
    15a2:	2308      	movs	r3, #8
    15a4:	9300      	str	r3, [sp, #0]
    15a6:	2308      	movs	r3, #8
    15a8:	2210      	movs	r2, #16
    15aa:	f7ff fd0d 	bl	fc8 <_PrintUnsigned>
        break;
    15ae:	e006      	b.n	15be <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    15b0:	ab16      	add	r3, sp, #88	; 0x58
    15b2:	2125      	movs	r1, #37	; 0x25
    15b4:	4618      	mov	r0, r3
    15b6:	f7ff fcc8 	bl	f4a <_StoreChar>
        break;
    15ba:	e000      	b.n	15be <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    15bc:	bf00      	nop
      }
      sFormat++;
    15be:	9b04      	ldr	r3, [sp, #16]
    15c0:	3301      	adds	r3, #1
    15c2:	9304      	str	r3, [sp, #16]
    15c4:	e006      	b.n	15d4 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    15c6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    15ca:	ab16      	add	r3, sp, #88	; 0x58
    15cc:	4611      	mov	r1, r2
    15ce:	4618      	mov	r0, r3
    15d0:	f7ff fcbb 	bl	f4a <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    15d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15d6:	2b00      	cmp	r3, #0
    15d8:	f6bf ae59 	bge.w	128e <SEGGER_RTT_vprintf+0x1e>
    15dc:	e000      	b.n	15e0 <SEGGER_RTT_vprintf+0x370>
      break;
    15de:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    15e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15e2:	2b00      	cmp	r3, #0
    15e4:	dd0c      	ble.n	1600 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    15e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    15e8:	2b00      	cmp	r3, #0
    15ea:	d005      	beq.n	15f8 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    15ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
    15ee:	ab06      	add	r3, sp, #24
    15f0:	4619      	mov	r1, r3
    15f2:	9805      	ldr	r0, [sp, #20]
    15f4:	f7ff fc7e 	bl	ef4 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    15f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
    15fc:	4413      	add	r3, r2
    15fe:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1600:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    1602:	4618      	mov	r0, r3
    1604:	b023      	add	sp, #140	; 0x8c
    1606:	f85d fb04 	ldr.w	pc, [sp], #4
    160a:	bf00      	nop
    160c:	0000a5ac 	.word	0x0000a5ac

00001610 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1610:	b40e      	push	{r1, r2, r3}
    1612:	b500      	push	{lr}
    1614:	b084      	sub	sp, #16
    1616:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1618:	ab06      	add	r3, sp, #24
    161a:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    161c:	ab02      	add	r3, sp, #8
    161e:	461a      	mov	r2, r3
    1620:	9905      	ldr	r1, [sp, #20]
    1622:	9801      	ldr	r0, [sp, #4]
    1624:	f7ff fe24 	bl	1270 <SEGGER_RTT_vprintf>
    1628:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    162a:	9b03      	ldr	r3, [sp, #12]
}
    162c:	4618      	mov	r0, r3
    162e:	b004      	add	sp, #16
    1630:	f85d eb04 	ldr.w	lr, [sp], #4
    1634:	b003      	add	sp, #12
    1636:	4770      	bx	lr

00001638 <memcpy>:
    1638:	440a      	add	r2, r1
    163a:	4291      	cmp	r1, r2
    163c:	f100 33ff 	add.w	r3, r0, #4294967295
    1640:	d100      	bne.n	1644 <memcpy+0xc>
    1642:	4770      	bx	lr
    1644:	b510      	push	{r4, lr}
    1646:	f811 4b01 	ldrb.w	r4, [r1], #1
    164a:	f803 4f01 	strb.w	r4, [r3, #1]!
    164e:	4291      	cmp	r1, r2
    1650:	d1f9      	bne.n	1646 <memcpy+0xe>
    1652:	bd10      	pop	{r4, pc}

00001654 <memset>:
    1654:	4402      	add	r2, r0
    1656:	4603      	mov	r3, r0
    1658:	4293      	cmp	r3, r2
    165a:	d100      	bne.n	165e <memset+0xa>
    165c:	4770      	bx	lr
    165e:	f803 1b01 	strb.w	r1, [r3], #1
    1662:	e7f9      	b.n	1658 <memset+0x4>

00001664 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1664:	b086      	sub	sp, #24
    1666:	9003      	str	r0, [sp, #12]
    1668:	9102      	str	r1, [sp, #8]
    166a:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    166c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1670:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1674:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    1676:	9b01      	ldr	r3, [sp, #4]
    1678:	2b00      	cmp	r3, #0
    167a:	d007      	beq.n	168c <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    167c:	9b03      	ldr	r3, [sp, #12]
    167e:	3310      	adds	r3, #16
    1680:	009b      	lsls	r3, r3, #2
    1682:	9a05      	ldr	r2, [sp, #20]
    1684:	4413      	add	r3, r2
    1686:	681a      	ldr	r2, [r3, #0]
    1688:	9b01      	ldr	r3, [sp, #4]
    168a:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    168c:	9b03      	ldr	r3, [sp, #12]
    168e:	3310      	adds	r3, #16
    1690:	009b      	lsls	r3, r3, #2
    1692:	9a05      	ldr	r2, [sp, #20]
    1694:	4413      	add	r3, r2
    1696:	9a02      	ldr	r2, [sp, #8]
    1698:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    169a:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    169e:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    16a2:	bf00      	nop
    16a4:	b006      	add	sp, #24
    16a6:	4770      	bx	lr

000016a8 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    16a8:	b082      	sub	sp, #8
    16aa:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16ac:	9b01      	ldr	r3, [sp, #4]
    16ae:	f003 021f 	and.w	r2, r3, #31
    16b2:	4905      	ldr	r1, [pc, #20]	; (16c8 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    16b4:	9b01      	ldr	r3, [sp, #4]
    16b6:	095b      	lsrs	r3, r3, #5
    16b8:	2001      	movs	r0, #1
    16ba:	fa00 f202 	lsl.w	r2, r0, r2
    16be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    16c2:	bf00      	nop
    16c4:	b002      	add	sp, #8
    16c6:	4770      	bx	lr
    16c8:	e000e100 	.word	0xe000e100

000016cc <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    16cc:	b082      	sub	sp, #8
    16ce:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16d0:	9b01      	ldr	r3, [sp, #4]
    16d2:	f003 021f 	and.w	r2, r3, #31
    16d6:	4906      	ldr	r1, [pc, #24]	; (16f0 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    16d8:	9b01      	ldr	r3, [sp, #4]
    16da:	095b      	lsrs	r3, r3, #5
    16dc:	2001      	movs	r0, #1
    16de:	fa00 f202 	lsl.w	r2, r0, r2
    16e2:	3320      	adds	r3, #32
    16e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    16e8:	bf00      	nop
    16ea:	b002      	add	sp, #8
    16ec:	4770      	bx	lr
    16ee:	bf00      	nop
    16f0:	e000e100 	.word	0xe000e100

000016f4 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    16f4:	b084      	sub	sp, #16
    16f6:	9001      	str	r0, [sp, #4]
    16f8:	460b      	mov	r3, r1
    16fa:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    16fe:	2304      	movs	r3, #4
    1700:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    1704:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1708:	f89d 300f 	ldrb.w	r3, [sp, #15]
    170c:	fa02 f103 	lsl.w	r1, r2, r3
    1710:	4a04      	ldr	r2, [pc, #16]	; (1724 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    1712:	9b01      	ldr	r3, [sp, #4]
    1714:	b2c9      	uxtb	r1, r1
    1716:	4413      	add	r3, r2
    1718:	460a      	mov	r2, r1
    171a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    171e:	bf00      	nop
    1720:	b004      	add	sp, #16
    1722:	4770      	bx	lr
    1724:	e000e100 	.word	0xe000e100

00001728 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1728:	b084      	sub	sp, #16
    172a:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    172c:	2304      	movs	r3, #4
    172e:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    1732:	4a09      	ldr	r2, [pc, #36]	; (1758 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    1734:	9b01      	ldr	r3, [sp, #4]
    1736:	4413      	add	r3, r2
    1738:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    173c:	b2db      	uxtb	r3, r3
    173e:	461a      	mov	r2, r3
    1740:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1744:	fa42 f303 	asr.w	r3, r2, r3
    1748:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    174c:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    1750:	4618      	mov	r0, r3
    1752:	b004      	add	sp, #16
    1754:	4770      	bx	lr
    1756:	bf00      	nop
    1758:	e000e100 	.word	0xe000e100

0000175c <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    175c:	b082      	sub	sp, #8
    175e:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1760:	9b01      	ldr	r3, [sp, #4]
    1762:	f003 021f 	and.w	r2, r3, #31
    1766:	4906      	ldr	r1, [pc, #24]	; (1780 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    1768:	9b01      	ldr	r3, [sp, #4]
    176a:	095b      	lsrs	r3, r3, #5
    176c:	2001      	movs	r0, #1
    176e:	fa00 f202 	lsl.w	r2, r0, r2
    1772:	3360      	adds	r3, #96	; 0x60
    1774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1778:	bf00      	nop
    177a:	b002      	add	sp, #8
    177c:	4770      	bx	lr
    177e:	bf00      	nop
    1780:	e000e100 	.word	0xe000e100

00001784 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1784:	b500      	push	{lr}
    1786:	b085      	sub	sp, #20
    1788:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    178a:	2300      	movs	r3, #0
    178c:	9303      	str	r3, [sp, #12]
    178e:	e05d      	b.n	184c <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1790:	9b01      	ldr	r3, [sp, #4]
    1792:	6859      	ldr	r1, [r3, #4]
    1794:	9a03      	ldr	r2, [sp, #12]
    1796:	4613      	mov	r3, r2
    1798:	005b      	lsls	r3, r3, #1
    179a:	4413      	add	r3, r2
    179c:	009b      	lsls	r3, r3, #2
    179e:	440b      	add	r3, r1
    17a0:	681b      	ldr	r3, [r3, #0]
    17a2:	4618      	mov	r0, r3
    17a4:	f000 f899 	bl	18da <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17a8:	9b01      	ldr	r3, [sp, #4]
    17aa:	6859      	ldr	r1, [r3, #4]
    17ac:	9a03      	ldr	r2, [sp, #12]
    17ae:	4613      	mov	r3, r2
    17b0:	005b      	lsls	r3, r3, #1
    17b2:	4413      	add	r3, r2
    17b4:	009b      	lsls	r3, r3, #2
    17b6:	440b      	add	r3, r1
    17b8:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    17ba:	9b01      	ldr	r3, [sp, #4]
    17bc:	6859      	ldr	r1, [r3, #4]
    17be:	9a03      	ldr	r2, [sp, #12]
    17c0:	4613      	mov	r3, r2
    17c2:	005b      	lsls	r3, r3, #1
    17c4:	4413      	add	r3, r2
    17c6:	009b      	lsls	r3, r3, #2
    17c8:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17ca:	795b      	ldrb	r3, [r3, #5]
    17cc:	4619      	mov	r1, r3
    17ce:	f000 f869 	bl	18a4 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17d2:	9b01      	ldr	r3, [sp, #4]
    17d4:	6859      	ldr	r1, [r3, #4]
    17d6:	9a03      	ldr	r2, [sp, #12]
    17d8:	4613      	mov	r3, r2
    17da:	005b      	lsls	r3, r3, #1
    17dc:	4413      	add	r3, r2
    17de:	009b      	lsls	r3, r3, #2
    17e0:	440b      	add	r3, r1
    17e2:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    17e4:	9b01      	ldr	r3, [sp, #4]
    17e6:	6859      	ldr	r1, [r3, #4]
    17e8:	9a03      	ldr	r2, [sp, #12]
    17ea:	4613      	mov	r3, r2
    17ec:	005b      	lsls	r3, r3, #1
    17ee:	4413      	add	r3, r2
    17f0:	009b      	lsls	r3, r3, #2
    17f2:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17f4:	689b      	ldr	r3, [r3, #8]
    17f6:	2200      	movs	r2, #0
    17f8:	4619      	mov	r1, r3
    17fa:	f000 f831 	bl	1860 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    17fe:	9b01      	ldr	r3, [sp, #4]
    1800:	6859      	ldr	r1, [r3, #4]
    1802:	9a03      	ldr	r2, [sp, #12]
    1804:	4613      	mov	r3, r2
    1806:	005b      	lsls	r3, r3, #1
    1808:	4413      	add	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	440b      	add	r3, r1
    180e:	791b      	ldrb	r3, [r3, #4]
    1810:	2b00      	cmp	r3, #0
    1812:	d00c      	beq.n	182e <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1814:	9b01      	ldr	r3, [sp, #4]
    1816:	6859      	ldr	r1, [r3, #4]
    1818:	9a03      	ldr	r2, [sp, #12]
    181a:	4613      	mov	r3, r2
    181c:	005b      	lsls	r3, r3, #1
    181e:	4413      	add	r3, r2
    1820:	009b      	lsls	r3, r3, #2
    1822:	440b      	add	r3, r1
    1824:	681b      	ldr	r3, [r3, #0]
    1826:	4618      	mov	r0, r3
    1828:	f000 f828 	bl	187c <IntCtrl_Ip_EnableIrq>
    182c:	e00b      	b.n	1846 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    182e:	9b01      	ldr	r3, [sp, #4]
    1830:	6859      	ldr	r1, [r3, #4]
    1832:	9a03      	ldr	r2, [sp, #12]
    1834:	4613      	mov	r3, r2
    1836:	005b      	lsls	r3, r3, #1
    1838:	4413      	add	r3, r2
    183a:	009b      	lsls	r3, r3, #2
    183c:	440b      	add	r3, r1
    183e:	681b      	ldr	r3, [r3, #0]
    1840:	4618      	mov	r0, r3
    1842:	f000 f825 	bl	1890 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1846:	9b03      	ldr	r3, [sp, #12]
    1848:	3301      	adds	r3, #1
    184a:	9303      	str	r3, [sp, #12]
    184c:	9b01      	ldr	r3, [sp, #4]
    184e:	681b      	ldr	r3, [r3, #0]
    1850:	9a03      	ldr	r2, [sp, #12]
    1852:	429a      	cmp	r2, r3
    1854:	d39c      	bcc.n	1790 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1856:	2300      	movs	r3, #0
}
    1858:	4618      	mov	r0, r3
    185a:	b005      	add	sp, #20
    185c:	f85d fb04 	ldr.w	pc, [sp], #4

00001860 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1860:	b500      	push	{lr}
    1862:	b085      	sub	sp, #20
    1864:	9003      	str	r0, [sp, #12]
    1866:	9102      	str	r1, [sp, #8]
    1868:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    186a:	9a01      	ldr	r2, [sp, #4]
    186c:	9902      	ldr	r1, [sp, #8]
    186e:	9803      	ldr	r0, [sp, #12]
    1870:	f7ff fef8 	bl	1664 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1874:	bf00      	nop
    1876:	b005      	add	sp, #20
    1878:	f85d fb04 	ldr.w	pc, [sp], #4

0000187c <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    187c:	b500      	push	{lr}
    187e:	b083      	sub	sp, #12
    1880:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1882:	9801      	ldr	r0, [sp, #4]
    1884:	f7ff ff10 	bl	16a8 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1888:	bf00      	nop
    188a:	b003      	add	sp, #12
    188c:	f85d fb04 	ldr.w	pc, [sp], #4

00001890 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1890:	b500      	push	{lr}
    1892:	b083      	sub	sp, #12
    1894:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1896:	9801      	ldr	r0, [sp, #4]
    1898:	f7ff ff18 	bl	16cc <IntCtrl_Ip_DisableIrqPrivileged>
}
    189c:	bf00      	nop
    189e:	b003      	add	sp, #12
    18a0:	f85d fb04 	ldr.w	pc, [sp], #4

000018a4 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    18a4:	b500      	push	{lr}
    18a6:	b083      	sub	sp, #12
    18a8:	9001      	str	r0, [sp, #4]
    18aa:	460b      	mov	r3, r1
    18ac:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    18b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    18b4:	4619      	mov	r1, r3
    18b6:	9801      	ldr	r0, [sp, #4]
    18b8:	f7ff ff1c 	bl	16f4 <IntCtrl_Ip_SetPriorityPrivileged>
}
    18bc:	bf00      	nop
    18be:	b003      	add	sp, #12
    18c0:	f85d fb04 	ldr.w	pc, [sp], #4

000018c4 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    18c4:	b500      	push	{lr}
    18c6:	b083      	sub	sp, #12
    18c8:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    18ca:	9801      	ldr	r0, [sp, #4]
    18cc:	f7ff ff2c 	bl	1728 <IntCtrl_Ip_GetPriorityPrivileged>
    18d0:	4603      	mov	r3, r0
}
    18d2:	4618      	mov	r0, r3
    18d4:	b003      	add	sp, #12
    18d6:	f85d fb04 	ldr.w	pc, [sp], #4

000018da <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    18da:	b500      	push	{lr}
    18dc:	b083      	sub	sp, #12
    18de:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    18e0:	9801      	ldr	r0, [sp, #4]
    18e2:	f7ff ff3b 	bl	175c <IntCtrl_Ip_ClearPendingPrivileged>
}
    18e6:	bf00      	nop
    18e8:	b003      	add	sp, #12
    18ea:	f85d fb04 	ldr.w	pc, [sp], #4
    18ee:	bf00      	nop

000018f0 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    18f0:	b500      	push	{lr}
    18f2:	b083      	sub	sp, #12
    18f4:	9001      	str	r0, [sp, #4]
    18f6:	460b      	mov	r3, r1
    18f8:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    18fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1900:	2b00      	cmp	r3, #0
    1902:	d003      	beq.n	190c <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1904:	9801      	ldr	r0, [sp, #4]
    1906:	f7ff ffb9 	bl	187c <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    190a:	e002      	b.n	1912 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    190c:	9801      	ldr	r0, [sp, #4]
    190e:	f7ff ffbf 	bl	1890 <IntCtrl_Ip_DisableIrq>
}
    1912:	bf00      	nop
    1914:	b003      	add	sp, #12
    1916:	f85d fb04 	ldr.w	pc, [sp], #4

0000191a <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    191a:	b500      	push	{lr}
    191c:	b083      	sub	sp, #12
    191e:	9001      	str	r0, [sp, #4]
    1920:	460b      	mov	r3, r1
    1922:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1926:	f89d 3003 	ldrb.w	r3, [sp, #3]
    192a:	4619      	mov	r1, r3
    192c:	9801      	ldr	r0, [sp, #4]
    192e:	f7ff ffb9 	bl	18a4 <IntCtrl_Ip_SetPriority>
}
    1932:	bf00      	nop
    1934:	b003      	add	sp, #12
    1936:	f85d fb04 	ldr.w	pc, [sp], #4

0000193a <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    193a:	b500      	push	{lr}
    193c:	b083      	sub	sp, #12
    193e:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1940:	9801      	ldr	r0, [sp, #4]
    1942:	f7ff ffbf 	bl	18c4 <IntCtrl_Ip_GetPriority>
    1946:	4603      	mov	r3, r0
}
    1948:	4618      	mov	r0, r3
    194a:	b003      	add	sp, #12
    194c:	f85d fb04 	ldr.w	pc, [sp], #4

00001950 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1950:	b500      	push	{lr}
    1952:	b085      	sub	sp, #20
    1954:	9003      	str	r0, [sp, #12]
    1956:	9102      	str	r1, [sp, #8]
    1958:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    195a:	9a01      	ldr	r2, [sp, #4]
    195c:	9902      	ldr	r1, [sp, #8]
    195e:	9803      	ldr	r0, [sp, #12]
    1960:	f7ff ff7e 	bl	1860 <IntCtrl_Ip_InstallHandler>
}
    1964:	bf00      	nop
    1966:	b005      	add	sp, #20
    1968:	f85d fb04 	ldr.w	pc, [sp], #4

0000196c <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    196c:	b500      	push	{lr}
    196e:	b085      	sub	sp, #20
    1970:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1972:	2300      	movs	r3, #0
    1974:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1978:	f89d 300f 	ldrb.w	r3, [sp, #15]
    197c:	4a05      	ldr	r2, [pc, #20]	; (1994 <Platform_Init+0x28>)
    197e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1982:	681b      	ldr	r3, [r3, #0]
    1984:	4618      	mov	r0, r3
    1986:	f000 f8c7 	bl	1b18 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    198a:	bf00      	nop
    198c:	b005      	add	sp, #20
    198e:	f85d fb04 	ldr.w	pc, [sp], #4
    1992:	bf00      	nop
    1994:	0000b1c8 	.word	0x0000b1c8

00001998 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1998:	b500      	push	{lr}
    199a:	b085      	sub	sp, #20
    199c:	9001      	str	r0, [sp, #4]
    199e:	460b      	mov	r3, r1
    19a0:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19a4:	2300      	movs	r3, #0
    19a6:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    19aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    19ae:	4619      	mov	r1, r3
    19b0:	9801      	ldr	r0, [sp, #4]
    19b2:	f7ff ff9d 	bl	18f0 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    19b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19ba:	4618      	mov	r0, r3
    19bc:	b005      	add	sp, #20
    19be:	f85d fb04 	ldr.w	pc, [sp], #4

000019c2 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    19c2:	b500      	push	{lr}
    19c4:	b085      	sub	sp, #20
    19c6:	9001      	str	r0, [sp, #4]
    19c8:	460b      	mov	r3, r1
    19ca:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19ce:	2300      	movs	r3, #0
    19d0:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    19d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    19d8:	4619      	mov	r1, r3
    19da:	9801      	ldr	r0, [sp, #4]
    19dc:	f7ff ff9d 	bl	191a <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    19e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    19e4:	4618      	mov	r0, r3
    19e6:	b005      	add	sp, #20
    19e8:	f85d fb04 	ldr.w	pc, [sp], #4

000019ec <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    19ec:	b500      	push	{lr}
    19ee:	b085      	sub	sp, #20
    19f0:	9001      	str	r0, [sp, #4]
    19f2:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19f4:	2300      	movs	r3, #0
    19f6:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    19fa:	9801      	ldr	r0, [sp, #4]
    19fc:	f7ff ff9d 	bl	193a <Platform_Ipw_GetIrqPriority>
    1a00:	4603      	mov	r3, r0
    1a02:	461a      	mov	r2, r3
    1a04:	9b00      	ldr	r3, [sp, #0]
    1a06:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1a08:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1a0c:	4618      	mov	r0, r3
    1a0e:	b005      	add	sp, #20
    1a10:	f85d fb04 	ldr.w	pc, [sp], #4

00001a14 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1a14:	b500      	push	{lr}
    1a16:	b087      	sub	sp, #28
    1a18:	9003      	str	r0, [sp, #12]
    1a1a:	9102      	str	r1, [sp, #8]
    1a1c:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a1e:	2300      	movs	r3, #0
    1a20:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1a24:	9a01      	ldr	r2, [sp, #4]
    1a26:	9902      	ldr	r1, [sp, #8]
    1a28:	9803      	ldr	r0, [sp, #12]
    1a2a:	f7ff ff91 	bl	1950 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1a2e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1a32:	4618      	mov	r0, r3
    1a34:	b007      	add	sp, #28
    1a36:	f85d fb04 	ldr.w	pc, [sp], #4
    1a3a:	bf00      	nop

00001a3c <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1a3c:	b500      	push	{lr}
    1a3e:	b085      	sub	sp, #20
    1a40:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a42:	2300      	movs	r3, #0
    1a44:	9303      	str	r3, [sp, #12]
    1a46:	e05d      	b.n	1b04 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a48:	9b01      	ldr	r3, [sp, #4]
    1a4a:	6859      	ldr	r1, [r3, #4]
    1a4c:	9a03      	ldr	r2, [sp, #12]
    1a4e:	4613      	mov	r3, r2
    1a50:	005b      	lsls	r3, r3, #1
    1a52:	4413      	add	r3, r2
    1a54:	009b      	lsls	r3, r3, #2
    1a56:	440b      	add	r3, r1
    1a58:	681b      	ldr	r3, [r3, #0]
    1a5a:	4618      	mov	r0, r3
    1a5c:	f7ff ff3d 	bl	18da <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a60:	9b01      	ldr	r3, [sp, #4]
    1a62:	6859      	ldr	r1, [r3, #4]
    1a64:	9a03      	ldr	r2, [sp, #12]
    1a66:	4613      	mov	r3, r2
    1a68:	005b      	lsls	r3, r3, #1
    1a6a:	4413      	add	r3, r2
    1a6c:	009b      	lsls	r3, r3, #2
    1a6e:	440b      	add	r3, r1
    1a70:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1a72:	9b01      	ldr	r3, [sp, #4]
    1a74:	6859      	ldr	r1, [r3, #4]
    1a76:	9a03      	ldr	r2, [sp, #12]
    1a78:	4613      	mov	r3, r2
    1a7a:	005b      	lsls	r3, r3, #1
    1a7c:	4413      	add	r3, r2
    1a7e:	009b      	lsls	r3, r3, #2
    1a80:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a82:	795b      	ldrb	r3, [r3, #5]
    1a84:	4619      	mov	r1, r3
    1a86:	f7ff ff0d 	bl	18a4 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1a8a:	9b01      	ldr	r3, [sp, #4]
    1a8c:	6859      	ldr	r1, [r3, #4]
    1a8e:	9a03      	ldr	r2, [sp, #12]
    1a90:	4613      	mov	r3, r2
    1a92:	005b      	lsls	r3, r3, #1
    1a94:	4413      	add	r3, r2
    1a96:	009b      	lsls	r3, r3, #2
    1a98:	440b      	add	r3, r1
    1a9a:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1a9c:	9b01      	ldr	r3, [sp, #4]
    1a9e:	6859      	ldr	r1, [r3, #4]
    1aa0:	9a03      	ldr	r2, [sp, #12]
    1aa2:	4613      	mov	r3, r2
    1aa4:	005b      	lsls	r3, r3, #1
    1aa6:	4413      	add	r3, r2
    1aa8:	009b      	lsls	r3, r3, #2
    1aaa:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1aac:	689b      	ldr	r3, [r3, #8]
    1aae:	2200      	movs	r2, #0
    1ab0:	4619      	mov	r1, r3
    1ab2:	f7ff fed5 	bl	1860 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1ab6:	9b01      	ldr	r3, [sp, #4]
    1ab8:	6859      	ldr	r1, [r3, #4]
    1aba:	9a03      	ldr	r2, [sp, #12]
    1abc:	4613      	mov	r3, r2
    1abe:	005b      	lsls	r3, r3, #1
    1ac0:	4413      	add	r3, r2
    1ac2:	009b      	lsls	r3, r3, #2
    1ac4:	440b      	add	r3, r1
    1ac6:	791b      	ldrb	r3, [r3, #4]
    1ac8:	2b00      	cmp	r3, #0
    1aca:	d00c      	beq.n	1ae6 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1acc:	9b01      	ldr	r3, [sp, #4]
    1ace:	6859      	ldr	r1, [r3, #4]
    1ad0:	9a03      	ldr	r2, [sp, #12]
    1ad2:	4613      	mov	r3, r2
    1ad4:	005b      	lsls	r3, r3, #1
    1ad6:	4413      	add	r3, r2
    1ad8:	009b      	lsls	r3, r3, #2
    1ada:	440b      	add	r3, r1
    1adc:	681b      	ldr	r3, [r3, #0]
    1ade:	4618      	mov	r0, r3
    1ae0:	f7ff fecc 	bl	187c <IntCtrl_Ip_EnableIrq>
    1ae4:	e00b      	b.n	1afe <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1ae6:	9b01      	ldr	r3, [sp, #4]
    1ae8:	6859      	ldr	r1, [r3, #4]
    1aea:	9a03      	ldr	r2, [sp, #12]
    1aec:	4613      	mov	r3, r2
    1aee:	005b      	lsls	r3, r3, #1
    1af0:	4413      	add	r3, r2
    1af2:	009b      	lsls	r3, r3, #2
    1af4:	440b      	add	r3, r1
    1af6:	681b      	ldr	r3, [r3, #0]
    1af8:	4618      	mov	r0, r3
    1afa:	f7ff fec9 	bl	1890 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1afe:	9b03      	ldr	r3, [sp, #12]
    1b00:	3301      	adds	r3, #1
    1b02:	9303      	str	r3, [sp, #12]
    1b04:	9b01      	ldr	r3, [sp, #4]
    1b06:	681b      	ldr	r3, [r3, #0]
    1b08:	9a03      	ldr	r2, [sp, #12]
    1b0a:	429a      	cmp	r2, r3
    1b0c:	d39c      	bcc.n	1a48 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1b0e:	2300      	movs	r3, #0
}
    1b10:	4618      	mov	r0, r3
    1b12:	b005      	add	sp, #20
    1b14:	f85d fb04 	ldr.w	pc, [sp], #4

00001b18 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1b18:	b500      	push	{lr}
    1b1a:	b085      	sub	sp, #20
    1b1c:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1b1e:	2300      	movs	r3, #0
    1b20:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1b24:	9b01      	ldr	r3, [sp, #4]
    1b26:	681b      	ldr	r3, [r3, #0]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d007      	beq.n	1b3c <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1b2c:	9b01      	ldr	r3, [sp, #4]
    1b2e:	681b      	ldr	r3, [r3, #0]
    1b30:	4618      	mov	r0, r3
    1b32:	f7ff ff83 	bl	1a3c <Platform_Ipw_InitIntCtrl>
    1b36:	4603      	mov	r3, r0
    1b38:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1b3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b40:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1b42:	bf00      	nop
    1b44:	b005      	add	sp, #20
    1b46:	f85d fb04 	ldr.w	pc, [sp], #4

00001b4a <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1b4a:	2300      	movs	r3, #0
}
    1b4c:	4618      	mov	r0, r3
    1b4e:	4770      	bx	lr

00001b50 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1b50:	b082      	sub	sp, #8
    1b52:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1b54:	2301      	movs	r3, #1
}
    1b56:	4618      	mov	r0, r3
    1b58:	b002      	add	sp, #8
    1b5a:	4770      	bx	lr

00001b5c <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1b5c:	b082      	sub	sp, #8
    1b5e:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1b60:	bf00      	nop
    1b62:	b002      	add	sp, #8
    1b64:	4770      	bx	lr

00001b66 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1b66:	b082      	sub	sp, #8
    1b68:	9001      	str	r0, [sp, #4]
    return Micros;
    1b6a:	9b01      	ldr	r3, [sp, #4]
}
    1b6c:	4618      	mov	r0, r3
    1b6e:	b002      	add	sp, #8
    1b70:	4770      	bx	lr

00001b72 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1b72:	b500      	push	{lr}
    1b74:	b083      	sub	sp, #12
    1b76:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1b78:	f000 f86c 	bl	1c54 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1b7c:	bf00      	nop
    1b7e:	b003      	add	sp, #12
    1b80:	f85d fb04 	ldr.w	pc, [sp], #4

00001b84 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1b84:	b500      	push	{lr}
    1b86:	b085      	sub	sp, #20
    1b88:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1b8a:	2300      	movs	r3, #0
    1b8c:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1b8e:	9b01      	ldr	r3, [sp, #4]
    1b90:	2b00      	cmp	r3, #0
    1b92:	d003      	beq.n	1b9c <OsIf_GetCounter+0x18>
    1b94:	9b01      	ldr	r3, [sp, #4]
    1b96:	2b01      	cmp	r3, #1
    1b98:	d004      	beq.n	1ba4 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1b9a:	e007      	b.n	1bac <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1b9c:	f7ff ffd5 	bl	1b4a <OsIf_Timer_Dummy_GetCounter>
    1ba0:	9003      	str	r0, [sp, #12]
            break;
    1ba2:	e003      	b.n	1bac <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1ba4:	f000 f872 	bl	1c8c <OsIf_Timer_System_GetCounter>
    1ba8:	9003      	str	r0, [sp, #12]
            break;
    1baa:	bf00      	nop
    }

    return Value;
    1bac:	9b03      	ldr	r3, [sp, #12]
}
    1bae:	4618      	mov	r0, r3
    1bb0:	b005      	add	sp, #20
    1bb2:	f85d fb04 	ldr.w	pc, [sp], #4

00001bb6 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1bb6:	b500      	push	{lr}
    1bb8:	b085      	sub	sp, #20
    1bba:	9001      	str	r0, [sp, #4]
    1bbc:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1bbe:	2300      	movs	r3, #0
    1bc0:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1bc2:	9b00      	ldr	r3, [sp, #0]
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	d003      	beq.n	1bd0 <OsIf_GetElapsed+0x1a>
    1bc8:	9b00      	ldr	r3, [sp, #0]
    1bca:	2b01      	cmp	r3, #1
    1bcc:	d005      	beq.n	1bda <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1bce:	e009      	b.n	1be4 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1bd0:	9801      	ldr	r0, [sp, #4]
    1bd2:	f7ff ffbd 	bl	1b50 <OsIf_Timer_Dummy_GetElapsed>
    1bd6:	9003      	str	r0, [sp, #12]
            break;
    1bd8:	e004      	b.n	1be4 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1bda:	9801      	ldr	r0, [sp, #4]
    1bdc:	f000 f864 	bl	1ca8 <OsIf_Timer_System_GetElapsed>
    1be0:	9003      	str	r0, [sp, #12]
            break;
    1be2:	bf00      	nop
    }

    return Value;
    1be4:	9b03      	ldr	r3, [sp, #12]
}
    1be6:	4618      	mov	r0, r3
    1be8:	b005      	add	sp, #20
    1bea:	f85d fb04 	ldr.w	pc, [sp], #4

00001bee <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1bee:	b500      	push	{lr}
    1bf0:	b083      	sub	sp, #12
    1bf2:	9001      	str	r0, [sp, #4]
    1bf4:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1bf6:	9b00      	ldr	r3, [sp, #0]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d003      	beq.n	1c04 <OsIf_SetTimerFrequency+0x16>
    1bfc:	9b00      	ldr	r3, [sp, #0]
    1bfe:	2b01      	cmp	r3, #1
    1c00:	d004      	beq.n	1c0c <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c02:	e007      	b.n	1c14 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1c04:	9801      	ldr	r0, [sp, #4]
    1c06:	f7ff ffa9 	bl	1b5c <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1c0a:	e003      	b.n	1c14 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1c0c:	9801      	ldr	r0, [sp, #4]
    1c0e:	f000 f85b 	bl	1cc8 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1c12:	bf00      	nop
    }
}
    1c14:	bf00      	nop
    1c16:	b003      	add	sp, #12
    1c18:	f85d fb04 	ldr.w	pc, [sp], #4

00001c1c <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1c1c:	b500      	push	{lr}
    1c1e:	b085      	sub	sp, #20
    1c20:	9001      	str	r0, [sp, #4]
    1c22:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1c24:	2300      	movs	r3, #0
    1c26:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1c28:	9b00      	ldr	r3, [sp, #0]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d003      	beq.n	1c36 <OsIf_MicrosToTicks+0x1a>
    1c2e:	9b00      	ldr	r3, [sp, #0]
    1c30:	2b01      	cmp	r3, #1
    1c32:	d005      	beq.n	1c40 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c34:	e009      	b.n	1c4a <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1c36:	9801      	ldr	r0, [sp, #4]
    1c38:	f7ff ff95 	bl	1b66 <OsIf_Timer_Dummy_MicrosToTicks>
    1c3c:	9003      	str	r0, [sp, #12]
            break;
    1c3e:	e004      	b.n	1c4a <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1c40:	9801      	ldr	r0, [sp, #4]
    1c42:	f000 f84f 	bl	1ce4 <OsIf_Timer_System_MicrosToTicks>
    1c46:	9003      	str	r0, [sp, #12]
            break;
    1c48:	bf00      	nop
    }

    return Value;
    1c4a:	9b03      	ldr	r3, [sp, #12]
}
    1c4c:	4618      	mov	r0, r3
    1c4e:	b005      	add	sp, #20
    1c50:	f85d fb04 	ldr.w	pc, [sp], #4

00001c54 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1c54:	b500      	push	{lr}
    1c56:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1c58:	2300      	movs	r3, #0
    1c5a:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1c5c:	4a09      	ldr	r2, [pc, #36]	; (1c84 <OsIf_Timer_System_Init+0x30>)
    1c5e:	9b01      	ldr	r3, [sp, #4]
    1c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c64:	685a      	ldr	r2, [r3, #4]
    1c66:	4908      	ldr	r1, [pc, #32]	; (1c88 <OsIf_Timer_System_Init+0x34>)
    1c68:	9b01      	ldr	r3, [sp, #4]
    1c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1c6e:	4a06      	ldr	r2, [pc, #24]	; (1c88 <OsIf_Timer_System_Init+0x34>)
    1c70:	9b01      	ldr	r3, [sp, #4]
    1c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c76:	4618      	mov	r0, r3
    1c78:	f000 f868 	bl	1d4c <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1c7c:	bf00      	nop
    1c7e:	b003      	add	sp, #12
    1c80:	f85d fb04 	ldr.w	pc, [sp], #4
    1c84:	0000b1c0 	.word	0x0000b1c0
    1c88:	1fff8b40 	.word	0x1fff8b40

00001c8c <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1c8c:	b500      	push	{lr}
    1c8e:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1c90:	2300      	movs	r3, #0
    1c92:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1c94:	2300      	movs	r3, #0
    1c96:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1c98:	f000 f86c 	bl	1d74 <OsIf_Timer_System_Internal_GetCounter>
    1c9c:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1c9e:	9b01      	ldr	r3, [sp, #4]
}
    1ca0:	4618      	mov	r0, r3
    1ca2:	b003      	add	sp, #12
    1ca4:	f85d fb04 	ldr.w	pc, [sp], #4

00001ca8 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1ca8:	b500      	push	{lr}
    1caa:	b085      	sub	sp, #20
    1cac:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1cae:	2300      	movs	r3, #0
    1cb0:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1cb2:	2300      	movs	r3, #0
    1cb4:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1cb6:	9801      	ldr	r0, [sp, #4]
    1cb8:	f000 f864 	bl	1d84 <OsIf_Timer_System_Internal_GetElapsed>
    1cbc:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1cbe:	9b03      	ldr	r3, [sp, #12]
}
    1cc0:	4618      	mov	r0, r3
    1cc2:	b005      	add	sp, #20
    1cc4:	f85d fb04 	ldr.w	pc, [sp], #4

00001cc8 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1cc8:	b084      	sub	sp, #16
    1cca:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1ccc:	2300      	movs	r3, #0
    1cce:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1cd0:	4903      	ldr	r1, [pc, #12]	; (1ce0 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1cd2:	9b03      	ldr	r3, [sp, #12]
    1cd4:	9a01      	ldr	r2, [sp, #4]
    1cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1cda:	bf00      	nop
    1cdc:	b004      	add	sp, #16
    1cde:	4770      	bx	lr
    1ce0:	1fff8b40 	.word	0x1fff8b40

00001ce4 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ce6:	b087      	sub	sp, #28
    1ce8:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1cea:	2100      	movs	r1, #0
    1cec:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1cee:	2100      	movs	r1, #0
    1cf0:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1cf2:	9901      	ldr	r1, [sp, #4]
    1cf4:	2000      	movs	r0, #0
    1cf6:	460e      	mov	r6, r1
    1cf8:	4607      	mov	r7, r0
    1cfa:	4812      	ldr	r0, [pc, #72]	; (1d44 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1cfc:	9904      	ldr	r1, [sp, #16]
    1cfe:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1d02:	2000      	movs	r0, #0
    1d04:	460c      	mov	r4, r1
    1d06:	4605      	mov	r5, r0
    1d08:	fb04 f007 	mul.w	r0, r4, r7
    1d0c:	fb06 f105 	mul.w	r1, r6, r5
    1d10:	4401      	add	r1, r0
    1d12:	fba6 2304 	umull	r2, r3, r6, r4
    1d16:	4419      	add	r1, r3
    1d18:	460b      	mov	r3, r1
    1d1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1d1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1d26:	4a08      	ldr	r2, [pc, #32]	; (1d48 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1d28:	f04f 0300 	mov.w	r3, #0
    1d2c:	f7fe fc3a 	bl	5a4 <__aeabi_uldivmod>
    1d30:	4602      	mov	r2, r0
    1d32:	460b      	mov	r3, r1
    1d34:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1d38:	9b02      	ldr	r3, [sp, #8]
    1d3a:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1d3c:	9b05      	ldr	r3, [sp, #20]
}
    1d3e:	4618      	mov	r0, r3
    1d40:	b007      	add	sp, #28
    1d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d44:	1fff8b40 	.word	0x1fff8b40
    1d48:	000f4240 	.word	0x000f4240

00001d4c <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1d4c:	b082      	sub	sp, #8
    1d4e:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1d50:	4b07      	ldr	r3, [pc, #28]	; (1d70 <OsIf_Timer_System_Internal_Init+0x24>)
    1d52:	2200      	movs	r2, #0
    1d54:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1d56:	4b06      	ldr	r3, [pc, #24]	; (1d70 <OsIf_Timer_System_Internal_Init+0x24>)
    1d58:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1d5c:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1d5e:	4b04      	ldr	r3, [pc, #16]	; (1d70 <OsIf_Timer_System_Internal_Init+0x24>)
    1d60:	2200      	movs	r2, #0
    1d62:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1d64:	4b02      	ldr	r3, [pc, #8]	; (1d70 <OsIf_Timer_System_Internal_Init+0x24>)
    1d66:	2205      	movs	r2, #5
    1d68:	601a      	str	r2, [r3, #0]
}
    1d6a:	bf00      	nop
    1d6c:	b002      	add	sp, #8
    1d6e:	4770      	bx	lr
    1d70:	e000e010 	.word	0xe000e010

00001d74 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1d74:	4b02      	ldr	r3, [pc, #8]	; (1d80 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1d76:	689b      	ldr	r3, [r3, #8]
    1d78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1d7c:	4618      	mov	r0, r3
    1d7e:	4770      	bx	lr
    1d80:	e000e010 	.word	0xe000e010

00001d84 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1d84:	b084      	sub	sp, #16
    1d86:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1d88:	4b10      	ldr	r3, [pc, #64]	; (1dcc <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1d8a:	689b      	ldr	r3, [r3, #8]
    1d8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1d90:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1d92:	2300      	movs	r3, #0
    1d94:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1d96:	9b01      	ldr	r3, [sp, #4]
    1d98:	681b      	ldr	r3, [r3, #0]
    1d9a:	9a02      	ldr	r2, [sp, #8]
    1d9c:	429a      	cmp	r2, r3
    1d9e:	d909      	bls.n	1db4 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1da0:	9b01      	ldr	r3, [sp, #4]
    1da2:	681a      	ldr	r2, [r3, #0]
    1da4:	9b02      	ldr	r3, [sp, #8]
    1da6:	1ad3      	subs	r3, r2, r3
    1da8:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1dac:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1db0:	9303      	str	r3, [sp, #12]
    1db2:	e004      	b.n	1dbe <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1db4:	9b01      	ldr	r3, [sp, #4]
    1db6:	681a      	ldr	r2, [r3, #0]
    1db8:	9b02      	ldr	r3, [sp, #8]
    1dba:	1ad3      	subs	r3, r2, r3
    1dbc:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1dbe:	9b01      	ldr	r3, [sp, #4]
    1dc0:	9a02      	ldr	r2, [sp, #8]
    1dc2:	601a      	str	r2, [r3, #0]

    return dif;
    1dc4:	9b03      	ldr	r3, [sp, #12]
}
    1dc6:	4618      	mov	r0, r3
    1dc8:	b004      	add	sp, #16
    1dca:	4770      	bx	lr
    1dcc:	e000e010 	.word	0xe000e010

00001dd0 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1dd0:	b082      	sub	sp, #8
    1dd2:	9001      	str	r0, [sp, #4]
    1dd4:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1dd6:	bf00      	nop
    1dd8:	b002      	add	sp, #8
    1dda:	4770      	bx	lr

00001ddc <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1ddc:	b500      	push	{lr}
    1dde:	b085      	sub	sp, #20
    1de0:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1de2:	4b24      	ldr	r3, [pc, #144]	; (1e74 <Clock_Ip_UpdateDriverContext+0x98>)
    1de4:	2201      	movs	r2, #1
    1de6:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1de8:	4b23      	ldr	r3, [pc, #140]	; (1e78 <Clock_Ip_UpdateDriverContext+0x9c>)
    1dea:	681b      	ldr	r3, [r3, #0]
    1dec:	2102      	movs	r1, #2
    1dee:	4618      	mov	r0, r3
    1df0:	f003 fc32 	bl	5658 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1df4:	2300      	movs	r3, #0
    1df6:	f88d 300f 	strb.w	r3, [sp, #15]
    1dfa:	e015      	b.n	1e28 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1dfc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e00:	9a01      	ldr	r2, [sp, #4]
    1e02:	334a      	adds	r3, #74	; 0x4a
    1e04:	00db      	lsls	r3, r3, #3
    1e06:	4413      	add	r3, r2
    1e08:	6858      	ldr	r0, [r3, #4]
    1e0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e0e:	9a01      	ldr	r2, [sp, #4]
    1e10:	334a      	adds	r3, #74	; 0x4a
    1e12:	00db      	lsls	r3, r3, #3
    1e14:	4413      	add	r3, r2
    1e16:	689b      	ldr	r3, [r3, #8]
    1e18:	4619      	mov	r1, r3
    1e1a:	f001 fadc 	bl	33d6 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e22:	3301      	adds	r3, #1
    1e24:	f88d 300f 	strb.w	r3, [sp, #15]
    1e28:	9b01      	ldr	r3, [sp, #4]
    1e2a:	7bdb      	ldrb	r3, [r3, #15]
    1e2c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e30:	429a      	cmp	r2, r3
    1e32:	d3e3      	bcc.n	1dfc <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1e34:	f000 f824 	bl	1e80 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e38:	2301      	movs	r3, #1
    1e3a:	f88d 300f 	strb.w	r3, [sp, #15]
    1e3e:	e00e      	b.n	1e5e <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1e40:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e44:	9b01      	ldr	r3, [sp, #4]
    1e46:	327e      	adds	r2, #126	; 0x7e
    1e48:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1e4c:	490b      	ldr	r1, [pc, #44]	; (1e7c <Clock_Ip_UpdateDriverContext+0xa0>)
    1e4e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e52:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e54:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e58:	3301      	adds	r3, #1
    1e5a:	f88d 300f 	strb.w	r3, [sp, #15]
    1e5e:	9b01      	ldr	r3, [sp, #4]
    1e60:	7cdb      	ldrb	r3, [r3, #19]
    1e62:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e66:	429a      	cmp	r2, r3
    1e68:	d3ea      	bcc.n	1e40 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1e6a:	bf00      	nop
    1e6c:	bf00      	nop
    1e6e:	b005      	add	sp, #20
    1e70:	f85d fb04 	ldr.w	pc, [sp], #4
    1e74:	1fff8b10 	.word	0x1fff8b10
    1e78:	1fff8b44 	.word	0x1fff8b44
    1e7c:	1fff8b50 	.word	0x1fff8b50

00001e80 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1e80:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1e82:	4b23      	ldr	r3, [pc, #140]	; (1f10 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e84:	781b      	ldrb	r3, [r3, #0]
    1e86:	f083 0301 	eor.w	r3, r3, #1
    1e8a:	b2db      	uxtb	r3, r3
    1e8c:	2b00      	cmp	r3, #0
    1e8e:	d03d      	beq.n	1f0c <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1e90:	4b1f      	ldr	r3, [pc, #124]	; (1f10 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1e92:	2201      	movs	r2, #1
    1e94:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1e96:	4b1f      	ldr	r3, [pc, #124]	; (1f14 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1e98:	685b      	ldr	r3, [r3, #4]
    1e9a:	2100      	movs	r1, #0
    1e9c:	2000      	movs	r0, #0
    1e9e:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1ea0:	4b1c      	ldr	r3, [pc, #112]	; (1f14 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1ea2:	689b      	ldr	r3, [r3, #8]
    1ea4:	2057      	movs	r0, #87	; 0x57
    1ea6:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ea8:	4b1b      	ldr	r3, [pc, #108]	; (1f18 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1eaa:	681b      	ldr	r3, [r3, #0]
    1eac:	2000      	movs	r0, #0
    1eae:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1eb0:	4b1a      	ldr	r3, [pc, #104]	; (1f1c <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	2000      	movs	r0, #0
    1eb6:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1eb8:	4b19      	ldr	r3, [pc, #100]	; (1f20 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1eba:	681b      	ldr	r3, [r3, #0]
    1ebc:	2000      	movs	r0, #0
    1ebe:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ec0:	4b18      	ldr	r3, [pc, #96]	; (1f24 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1ec2:	685b      	ldr	r3, [r3, #4]
    1ec4:	2000      	movs	r0, #0
    1ec6:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1ec8:	4b16      	ldr	r3, [pc, #88]	; (1f24 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1eca:	689b      	ldr	r3, [r3, #8]
    1ecc:	2057      	movs	r0, #87	; 0x57
    1ece:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ed0:	4b15      	ldr	r3, [pc, #84]	; (1f28 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1ed2:	681b      	ldr	r3, [r3, #0]
    1ed4:	2000      	movs	r0, #0
    1ed6:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1ed8:	4b13      	ldr	r3, [pc, #76]	; (1f28 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1eda:	685b      	ldr	r3, [r3, #4]
    1edc:	2100      	movs	r1, #0
    1ede:	2057      	movs	r0, #87	; 0x57
    1ee0:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ee2:	4b12      	ldr	r3, [pc, #72]	; (1f2c <Clock_Ip_CallEmptyCallbacks+0xac>)
    1ee4:	681b      	ldr	r3, [r3, #0]
    1ee6:	2000      	movs	r0, #0
    1ee8:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1eea:	4b11      	ldr	r3, [pc, #68]	; (1f30 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1eec:	685b      	ldr	r3, [r3, #4]
    1eee:	2000      	movs	r0, #0
    1ef0:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1ef2:	4b0f      	ldr	r3, [pc, #60]	; (1f30 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1ef4:	689b      	ldr	r3, [r3, #8]
    1ef6:	2057      	movs	r0, #87	; 0x57
    1ef8:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1efa:	4b0e      	ldr	r3, [pc, #56]	; (1f34 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1efc:	685b      	ldr	r3, [r3, #4]
    1efe:	2000      	movs	r0, #0
    1f00:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1f02:	4b0d      	ldr	r3, [pc, #52]	; (1f38 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1f04:	681b      	ldr	r3, [r3, #0]
    1f06:	2100      	movs	r1, #0
    1f08:	2000      	movs	r0, #0
    1f0a:	4798      	blx	r3
    }
}
    1f0c:	bf00      	nop
    1f0e:	bd08      	pop	{r3, pc}
    1f10:	1fff8b48 	.word	0x1fff8b48
    1f14:	0000ac50 	.word	0x0000ac50
    1f18:	0000ab64 	.word	0x0000ab64
    1f1c:	0000aba0 	.word	0x0000aba0
    1f20:	0000aba8 	.word	0x0000aba8
    1f24:	0000abd0 	.word	0x0000abd0
    1f28:	0000abdc 	.word	0x0000abdc
    1f2c:	0000ac14 	.word	0x0000ac14
    1f30:	0000ac60 	.word	0x0000ac60
    1f34:	0000ac8c 	.word	0x0000ac8c
    1f38:	0000ac88 	.word	0x0000ac88

00001f3c <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1f3c:	b500      	push	{lr}
    1f3e:	b085      	sub	sp, #20
    1f40:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f42:	9b01      	ldr	r3, [sp, #4]
    1f44:	7adb      	ldrb	r3, [r3, #11]
    1f46:	9303      	str	r3, [sp, #12]
    1f48:	e01f      	b.n	1f8a <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f4a:	9b03      	ldr	r3, [sp, #12]
    1f4c:	1e5a      	subs	r2, r3, #1
    1f4e:	9b01      	ldr	r3, [sp, #4]
    1f50:	320d      	adds	r2, #13
    1f52:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1f56:	495a      	ldr	r1, [pc, #360]	; (20c0 <Clock_Ip_ResetClockConfiguration+0x184>)
    1f58:	4613      	mov	r3, r2
    1f5a:	00db      	lsls	r3, r3, #3
    1f5c:	4413      	add	r3, r2
    1f5e:	440b      	add	r3, r1
    1f60:	3301      	adds	r3, #1
    1f62:	781b      	ldrb	r3, [r3, #0]
    1f64:	461a      	mov	r2, r3
    1f66:	4b57      	ldr	r3, [pc, #348]	; (20c4 <Clock_Ip_ResetClockConfiguration+0x188>)
    1f68:	5c9b      	ldrb	r3, [r3, r2]
    1f6a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1f6c:	4a56      	ldr	r2, [pc, #344]	; (20c8 <Clock_Ip_ResetClockConfiguration+0x18c>)
    1f6e:	9b02      	ldr	r3, [sp, #8]
    1f70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f74:	9a03      	ldr	r2, [sp, #12]
    1f76:	3a01      	subs	r2, #1
    1f78:	320d      	adds	r2, #13
    1f7a:	00d2      	lsls	r2, r2, #3
    1f7c:	9901      	ldr	r1, [sp, #4]
    1f7e:	440a      	add	r2, r1
    1f80:	4610      	mov	r0, r2
    1f82:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f84:	9b03      	ldr	r3, [sp, #12]
    1f86:	3b01      	subs	r3, #1
    1f88:	9303      	str	r3, [sp, #12]
    1f8a:	9b03      	ldr	r3, [sp, #12]
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	d1dc      	bne.n	1f4a <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1f90:	9b01      	ldr	r3, [sp, #4]
    1f92:	7b9b      	ldrb	r3, [r3, #14]
    1f94:	9303      	str	r3, [sp, #12]
    1f96:	e026      	b.n	1fe6 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f98:	9b03      	ldr	r3, [sp, #12]
    1f9a:	3b01      	subs	r3, #1
    1f9c:	9a01      	ldr	r2, [sp, #4]
    1f9e:	3324      	adds	r3, #36	; 0x24
    1fa0:	011b      	lsls	r3, r3, #4
    1fa2:	4413      	add	r3, r2
    1fa4:	3304      	adds	r3, #4
    1fa6:	681a      	ldr	r2, [r3, #0]
    1fa8:	4945      	ldr	r1, [pc, #276]	; (20c0 <Clock_Ip_ResetClockConfiguration+0x184>)
    1faa:	4613      	mov	r3, r2
    1fac:	00db      	lsls	r3, r3, #3
    1fae:	4413      	add	r3, r2
    1fb0:	440b      	add	r3, r1
    1fb2:	3301      	adds	r3, #1
    1fb4:	781b      	ldrb	r3, [r3, #0]
    1fb6:	461a      	mov	r2, r3
    1fb8:	4b44      	ldr	r3, [pc, #272]	; (20cc <Clock_Ip_ResetClockConfiguration+0x190>)
    1fba:	5c9b      	ldrb	r3, [r3, r2]
    1fbc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1fbe:	4944      	ldr	r1, [pc, #272]	; (20d0 <Clock_Ip_ResetClockConfiguration+0x194>)
    1fc0:	9a02      	ldr	r2, [sp, #8]
    1fc2:	4613      	mov	r3, r2
    1fc4:	005b      	lsls	r3, r3, #1
    1fc6:	4413      	add	r3, r2
    1fc8:	009b      	lsls	r3, r3, #2
    1fca:	440b      	add	r3, r1
    1fcc:	681b      	ldr	r3, [r3, #0]
    1fce:	9a03      	ldr	r2, [sp, #12]
    1fd0:	3a01      	subs	r2, #1
    1fd2:	3224      	adds	r2, #36	; 0x24
    1fd4:	0112      	lsls	r2, r2, #4
    1fd6:	9901      	ldr	r1, [sp, #4]
    1fd8:	440a      	add	r2, r1
    1fda:	3204      	adds	r2, #4
    1fdc:	4610      	mov	r0, r2
    1fde:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1fe0:	9b03      	ldr	r3, [sp, #12]
    1fe2:	3b01      	subs	r3, #1
    1fe4:	9303      	str	r3, [sp, #12]
    1fe6:	9b03      	ldr	r3, [sp, #12]
    1fe8:	2b00      	cmp	r3, #0
    1fea:	d1d5      	bne.n	1f98 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1fec:	9b01      	ldr	r3, [sp, #4]
    1fee:	7a9b      	ldrb	r3, [r3, #10]
    1ff0:	9303      	str	r3, [sp, #12]
    1ff2:	e02a      	b.n	204a <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1ff4:	9b03      	ldr	r3, [sp, #12]
    1ff6:	1e5a      	subs	r2, r3, #1
    1ff8:	9901      	ldr	r1, [sp, #4]
    1ffa:	4613      	mov	r3, r2
    1ffc:	009b      	lsls	r3, r3, #2
    1ffe:	4413      	add	r3, r2
    2000:	00db      	lsls	r3, r3, #3
    2002:	440b      	add	r3, r1
    2004:	3340      	adds	r3, #64	; 0x40
    2006:	681a      	ldr	r2, [r3, #0]
    2008:	492d      	ldr	r1, [pc, #180]	; (20c0 <Clock_Ip_ResetClockConfiguration+0x184>)
    200a:	4613      	mov	r3, r2
    200c:	00db      	lsls	r3, r3, #3
    200e:	4413      	add	r3, r2
    2010:	440b      	add	r3, r1
    2012:	3301      	adds	r3, #1
    2014:	781b      	ldrb	r3, [r3, #0]
    2016:	461a      	mov	r2, r3
    2018:	4b2e      	ldr	r3, [pc, #184]	; (20d4 <Clock_Ip_ResetClockConfiguration+0x198>)
    201a:	5c9b      	ldrb	r3, [r3, r2]
    201c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    201e:	492e      	ldr	r1, [pc, #184]	; (20d8 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2020:	9a02      	ldr	r2, [sp, #8]
    2022:	4613      	mov	r3, r2
    2024:	009b      	lsls	r3, r3, #2
    2026:	4413      	add	r3, r2
    2028:	009b      	lsls	r3, r3, #2
    202a:	440b      	add	r3, r1
    202c:	6819      	ldr	r1, [r3, #0]
    202e:	9b03      	ldr	r3, [sp, #12]
    2030:	1e5a      	subs	r2, r3, #1
    2032:	4613      	mov	r3, r2
    2034:	009b      	lsls	r3, r3, #2
    2036:	4413      	add	r3, r2
    2038:	00db      	lsls	r3, r3, #3
    203a:	3340      	adds	r3, #64	; 0x40
    203c:	9a01      	ldr	r2, [sp, #4]
    203e:	4413      	add	r3, r2
    2040:	4618      	mov	r0, r3
    2042:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2044:	9b03      	ldr	r3, [sp, #12]
    2046:	3b01      	subs	r3, #1
    2048:	9303      	str	r3, [sp, #12]
    204a:	9b03      	ldr	r3, [sp, #12]
    204c:	2b00      	cmp	r3, #0
    204e:	d1d1      	bne.n	1ff4 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2050:	9b01      	ldr	r3, [sp, #4]
    2052:	7a5b      	ldrb	r3, [r3, #9]
    2054:	9303      	str	r3, [sp, #12]
    2056:	e02b      	b.n	20b0 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2058:	9b03      	ldr	r3, [sp, #12]
    205a:	1e5a      	subs	r2, r3, #1
    205c:	9901      	ldr	r1, [sp, #4]
    205e:	4613      	mov	r3, r2
    2060:	009b      	lsls	r3, r3, #2
    2062:	4413      	add	r3, r2
    2064:	009b      	lsls	r3, r3, #2
    2066:	440b      	add	r3, r1
    2068:	332c      	adds	r3, #44	; 0x2c
    206a:	681a      	ldr	r2, [r3, #0]
    206c:	4914      	ldr	r1, [pc, #80]	; (20c0 <Clock_Ip_ResetClockConfiguration+0x184>)
    206e:	4613      	mov	r3, r2
    2070:	00db      	lsls	r3, r3, #3
    2072:	4413      	add	r3, r2
    2074:	440b      	add	r3, r1
    2076:	3301      	adds	r3, #1
    2078:	781b      	ldrb	r3, [r3, #0]
    207a:	461a      	mov	r2, r3
    207c:	4b17      	ldr	r3, [pc, #92]	; (20dc <Clock_Ip_ResetClockConfiguration+0x1a0>)
    207e:	5c9b      	ldrb	r3, [r3, r2]
    2080:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    2082:	4917      	ldr	r1, [pc, #92]	; (20e0 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    2084:	9a02      	ldr	r2, [sp, #8]
    2086:	4613      	mov	r3, r2
    2088:	009b      	lsls	r3, r3, #2
    208a:	4413      	add	r3, r2
    208c:	009b      	lsls	r3, r3, #2
    208e:	440b      	add	r3, r1
    2090:	6819      	ldr	r1, [r3, #0]
    2092:	9b03      	ldr	r3, [sp, #12]
    2094:	1e5a      	subs	r2, r3, #1
    2096:	4613      	mov	r3, r2
    2098:	009b      	lsls	r3, r3, #2
    209a:	4413      	add	r3, r2
    209c:	009b      	lsls	r3, r3, #2
    209e:	3328      	adds	r3, #40	; 0x28
    20a0:	9a01      	ldr	r2, [sp, #4]
    20a2:	4413      	add	r3, r2
    20a4:	3304      	adds	r3, #4
    20a6:	4618      	mov	r0, r3
    20a8:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    20aa:	9b03      	ldr	r3, [sp, #12]
    20ac:	3b01      	subs	r3, #1
    20ae:	9303      	str	r3, [sp, #12]
    20b0:	9b03      	ldr	r3, [sp, #12]
    20b2:	2b00      	cmp	r3, #0
    20b4:	d1d0      	bne.n	2058 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    20b6:	bf00      	nop
    20b8:	bf00      	nop
    20ba:	b005      	add	sp, #20
    20bc:	f85d fb04 	ldr.w	pc, [sp], #4
    20c0:	0000a654 	.word	0x0000a654
    20c4:	0000a624 	.word	0x0000a624
    20c8:	0000ac8c 	.word	0x0000ac8c
    20cc:	0000a604 	.word	0x0000a604
    20d0:	0000abd0 	.word	0x0000abd0
    20d4:	0000a614 	.word	0x0000a614
    20d8:	0000ac60 	.word	0x0000ac60
    20dc:	0000a5d4 	.word	0x0000a5d4
    20e0:	0000aba8 	.word	0x0000aba8

000020e4 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    20e4:	b500      	push	{lr}
    20e6:	b085      	sub	sp, #20
    20e8:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    20ea:	2301      	movs	r3, #1
    20ec:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    20ee:	9801      	ldr	r0, [sp, #4]
    20f0:	f000 f818 	bl	2124 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    20f4:	4b0a      	ldr	r3, [pc, #40]	; (2120 <Clock_Ip_Init+0x3c>)
    20f6:	781b      	ldrb	r3, [r3, #0]
    20f8:	2b00      	cmp	r3, #0
    20fa:	d00a      	beq.n	2112 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    20fc:	f000 fb74 	bl	27e8 <Clock_Ip_GetPllStatus>
    2100:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    2102:	9b02      	ldr	r3, [sp, #8]
    2104:	2b00      	cmp	r3, #0
    2106:	d106      	bne.n	2116 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2108:	f000 fbf2 	bl	28f0 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    210c:	2300      	movs	r3, #0
    210e:	9303      	str	r3, [sp, #12]
    2110:	e001      	b.n	2116 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    2112:	2300      	movs	r3, #0
    2114:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2116:	9b03      	ldr	r3, [sp, #12]
}
    2118:	4618      	mov	r0, r3
    211a:	b005      	add	sp, #20
    211c:	f85d fb04 	ldr.w	pc, [sp], #4
    2120:	1fff8b4c 	.word	0x1fff8b4c

00002124 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2124:	b510      	push	{r4, lr}
    2126:	b084      	sub	sp, #16
    2128:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    212a:	4a9f      	ldr	r2, [pc, #636]	; (23a8 <Clock_Ip_InitClock+0x284>)
    212c:	9b01      	ldr	r3, [sp, #4]
    212e:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2130:	2101      	movs	r1, #1
    2132:	9801      	ldr	r0, [sp, #4]
    2134:	f003 fa90 	bl	5658 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2138:	4b9b      	ldr	r3, [pc, #620]	; (23a8 <Clock_Ip_InitClock+0x284>)
    213a:	681b      	ldr	r3, [r3, #0]
    213c:	2b00      	cmp	r3, #0
    213e:	d030      	beq.n	21a2 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2140:	2300      	movs	r3, #0
    2142:	9303      	str	r3, [sp, #12]
    2144:	e027      	b.n	2196 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2146:	9901      	ldr	r1, [sp, #4]
    2148:	9a03      	ldr	r2, [sp, #12]
    214a:	4613      	mov	r3, r2
    214c:	009b      	lsls	r3, r3, #2
    214e:	4413      	add	r3, r2
    2150:	009b      	lsls	r3, r3, #2
    2152:	440b      	add	r3, r1
    2154:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2158:	681a      	ldr	r2, [r3, #0]
    215a:	4994      	ldr	r1, [pc, #592]	; (23ac <Clock_Ip_InitClock+0x288>)
    215c:	4613      	mov	r3, r2
    215e:	00db      	lsls	r3, r3, #3
    2160:	4413      	add	r3, r2
    2162:	440b      	add	r3, r1
    2164:	3301      	adds	r3, #1
    2166:	781b      	ldrb	r3, [r3, #0]
    2168:	461a      	mov	r2, r3
    216a:	4b91      	ldr	r3, [pc, #580]	; (23b0 <Clock_Ip_InitClock+0x28c>)
    216c:	5c9b      	ldrb	r3, [r3, r2]
    216e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    2170:	4a90      	ldr	r2, [pc, #576]	; (23b4 <Clock_Ip_InitClock+0x290>)
    2172:	9b02      	ldr	r3, [sp, #8]
    2174:	011b      	lsls	r3, r3, #4
    2176:	4413      	add	r3, r2
    2178:	6819      	ldr	r1, [r3, #0]
    217a:	9a03      	ldr	r2, [sp, #12]
    217c:	4613      	mov	r3, r2
    217e:	009b      	lsls	r3, r3, #2
    2180:	4413      	add	r3, r2
    2182:	009b      	lsls	r3, r3, #2
    2184:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2188:	9a01      	ldr	r2, [sp, #4]
    218a:	4413      	add	r3, r2
    218c:	4618      	mov	r0, r3
    218e:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2190:	9b03      	ldr	r3, [sp, #12]
    2192:	3301      	adds	r3, #1
    2194:	9303      	str	r3, [sp, #12]
    2196:	9b01      	ldr	r3, [sp, #4]
    2198:	7c9b      	ldrb	r3, [r3, #18]
    219a:	461a      	mov	r2, r3
    219c:	9b03      	ldr	r3, [sp, #12]
    219e:	4293      	cmp	r3, r2
    21a0:	d3d1      	bcc.n	2146 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    21a2:	9801      	ldr	r0, [sp, #4]
    21a4:	f7ff feca 	bl	1f3c <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    21a8:	2300      	movs	r3, #0
    21aa:	9303      	str	r3, [sp, #12]
    21ac:	e029      	b.n	2202 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    21ae:	9901      	ldr	r1, [sp, #4]
    21b0:	9a03      	ldr	r2, [sp, #12]
    21b2:	4613      	mov	r3, r2
    21b4:	005b      	lsls	r3, r3, #1
    21b6:	4413      	add	r3, r2
    21b8:	009b      	lsls	r3, r3, #2
    21ba:	440b      	add	r3, r1
    21bc:	3314      	adds	r3, #20
    21be:	681a      	ldr	r2, [r3, #0]
    21c0:	497a      	ldr	r1, [pc, #488]	; (23ac <Clock_Ip_InitClock+0x288>)
    21c2:	4613      	mov	r3, r2
    21c4:	00db      	lsls	r3, r3, #3
    21c6:	4413      	add	r3, r2
    21c8:	440b      	add	r3, r1
    21ca:	3301      	adds	r3, #1
    21cc:	781b      	ldrb	r3, [r3, #0]
    21ce:	461a      	mov	r2, r3
    21d0:	4b79      	ldr	r3, [pc, #484]	; (23b8 <Clock_Ip_InitClock+0x294>)
    21d2:	5c9b      	ldrb	r3, [r3, r2]
    21d4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    21d6:	4979      	ldr	r1, [pc, #484]	; (23bc <Clock_Ip_InitClock+0x298>)
    21d8:	9a02      	ldr	r2, [sp, #8]
    21da:	4613      	mov	r3, r2
    21dc:	005b      	lsls	r3, r3, #1
    21de:	4413      	add	r3, r2
    21e0:	009b      	lsls	r3, r3, #2
    21e2:	440b      	add	r3, r1
    21e4:	6819      	ldr	r1, [r3, #0]
    21e6:	9a03      	ldr	r2, [sp, #12]
    21e8:	4613      	mov	r3, r2
    21ea:	005b      	lsls	r3, r3, #1
    21ec:	4413      	add	r3, r2
    21ee:	009b      	lsls	r3, r3, #2
    21f0:	3310      	adds	r3, #16
    21f2:	9a01      	ldr	r2, [sp, #4]
    21f4:	4413      	add	r3, r2
    21f6:	3304      	adds	r3, #4
    21f8:	4618      	mov	r0, r3
    21fa:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    21fc:	9b03      	ldr	r3, [sp, #12]
    21fe:	3301      	adds	r3, #1
    2200:	9303      	str	r3, [sp, #12]
    2202:	9b01      	ldr	r3, [sp, #4]
    2204:	7a1b      	ldrb	r3, [r3, #8]
    2206:	461a      	mov	r2, r3
    2208:	9b03      	ldr	r3, [sp, #12]
    220a:	4293      	cmp	r3, r2
    220c:	d3cf      	bcc.n	21ae <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    220e:	2300      	movs	r3, #0
    2210:	9303      	str	r3, [sp, #12]
    2212:	e02a      	b.n	226a <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2214:	9901      	ldr	r1, [sp, #4]
    2216:	9a03      	ldr	r2, [sp, #12]
    2218:	4613      	mov	r3, r2
    221a:	009b      	lsls	r3, r3, #2
    221c:	4413      	add	r3, r2
    221e:	009b      	lsls	r3, r3, #2
    2220:	440b      	add	r3, r1
    2222:	332c      	adds	r3, #44	; 0x2c
    2224:	681a      	ldr	r2, [r3, #0]
    2226:	4961      	ldr	r1, [pc, #388]	; (23ac <Clock_Ip_InitClock+0x288>)
    2228:	4613      	mov	r3, r2
    222a:	00db      	lsls	r3, r3, #3
    222c:	4413      	add	r3, r2
    222e:	440b      	add	r3, r1
    2230:	3301      	adds	r3, #1
    2232:	781b      	ldrb	r3, [r3, #0]
    2234:	461a      	mov	r2, r3
    2236:	4b62      	ldr	r3, [pc, #392]	; (23c0 <Clock_Ip_InitClock+0x29c>)
    2238:	5c9b      	ldrb	r3, [r3, r2]
    223a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    223c:	4961      	ldr	r1, [pc, #388]	; (23c4 <Clock_Ip_InitClock+0x2a0>)
    223e:	9a02      	ldr	r2, [sp, #8]
    2240:	4613      	mov	r3, r2
    2242:	009b      	lsls	r3, r3, #2
    2244:	4413      	add	r3, r2
    2246:	009b      	lsls	r3, r3, #2
    2248:	440b      	add	r3, r1
    224a:	3304      	adds	r3, #4
    224c:	6819      	ldr	r1, [r3, #0]
    224e:	9a03      	ldr	r2, [sp, #12]
    2250:	4613      	mov	r3, r2
    2252:	009b      	lsls	r3, r3, #2
    2254:	4413      	add	r3, r2
    2256:	009b      	lsls	r3, r3, #2
    2258:	3328      	adds	r3, #40	; 0x28
    225a:	9a01      	ldr	r2, [sp, #4]
    225c:	4413      	add	r3, r2
    225e:	3304      	adds	r3, #4
    2260:	4618      	mov	r0, r3
    2262:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2264:	9b03      	ldr	r3, [sp, #12]
    2266:	3301      	adds	r3, #1
    2268:	9303      	str	r3, [sp, #12]
    226a:	9b01      	ldr	r3, [sp, #4]
    226c:	7a5b      	ldrb	r3, [r3, #9]
    226e:	461a      	mov	r2, r3
    2270:	9b03      	ldr	r3, [sp, #12]
    2272:	4293      	cmp	r3, r2
    2274:	d3ce      	bcc.n	2214 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    2276:	9801      	ldr	r0, [sp, #4]
    2278:	f7ff fdb0 	bl	1ddc <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    227c:	2300      	movs	r3, #0
    227e:	9303      	str	r3, [sp, #12]
    2280:	e028      	b.n	22d4 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    2282:	9901      	ldr	r1, [sp, #4]
    2284:	9a03      	ldr	r2, [sp, #12]
    2286:	4613      	mov	r3, r2
    2288:	009b      	lsls	r3, r3, #2
    228a:	4413      	add	r3, r2
    228c:	009b      	lsls	r3, r3, #2
    228e:	440b      	add	r3, r1
    2290:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    2294:	681a      	ldr	r2, [r3, #0]
    2296:	4945      	ldr	r1, [pc, #276]	; (23ac <Clock_Ip_InitClock+0x288>)
    2298:	4613      	mov	r3, r2
    229a:	00db      	lsls	r3, r3, #3
    229c:	4413      	add	r3, r2
    229e:	440b      	add	r3, r1
    22a0:	3301      	adds	r3, #1
    22a2:	781b      	ldrb	r3, [r3, #0]
    22a4:	461a      	mov	r2, r3
    22a6:	4b48      	ldr	r3, [pc, #288]	; (23c8 <Clock_Ip_InitClock+0x2a4>)
    22a8:	5c9b      	ldrb	r3, [r3, r2]
    22aa:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    22ac:	4a47      	ldr	r2, [pc, #284]	; (23cc <Clock_Ip_InitClock+0x2a8>)
    22ae:	9b02      	ldr	r3, [sp, #8]
    22b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    22b4:	9a03      	ldr	r2, [sp, #12]
    22b6:	4613      	mov	r3, r2
    22b8:	009b      	lsls	r3, r3, #2
    22ba:	4413      	add	r3, r2
    22bc:	009b      	lsls	r3, r3, #2
    22be:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    22c2:	9a01      	ldr	r2, [sp, #4]
    22c4:	4413      	add	r3, r2
    22c6:	3304      	adds	r3, #4
    22c8:	9903      	ldr	r1, [sp, #12]
    22ca:	4618      	mov	r0, r3
    22cc:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    22ce:	9b03      	ldr	r3, [sp, #12]
    22d0:	3301      	adds	r3, #1
    22d2:	9303      	str	r3, [sp, #12]
    22d4:	9b01      	ldr	r3, [sp, #4]
    22d6:	7c5b      	ldrb	r3, [r3, #17]
    22d8:	461a      	mov	r2, r3
    22da:	9b03      	ldr	r3, [sp, #12]
    22dc:	4293      	cmp	r3, r2
    22de:	d3d0      	bcc.n	2282 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    22e0:	2300      	movs	r3, #0
    22e2:	9303      	str	r3, [sp, #12]
    22e4:	e026      	b.n	2334 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    22e6:	9901      	ldr	r1, [sp, #4]
    22e8:	9a03      	ldr	r2, [sp, #12]
    22ea:	4613      	mov	r3, r2
    22ec:	005b      	lsls	r3, r3, #1
    22ee:	4413      	add	r3, r2
    22f0:	009b      	lsls	r3, r3, #2
    22f2:	440b      	add	r3, r1
    22f4:	f503 730e 	add.w	r3, r3, #568	; 0x238
    22f8:	681a      	ldr	r2, [r3, #0]
    22fa:	492c      	ldr	r1, [pc, #176]	; (23ac <Clock_Ip_InitClock+0x288>)
    22fc:	4613      	mov	r3, r2
    22fe:	00db      	lsls	r3, r3, #3
    2300:	4413      	add	r3, r2
    2302:	440b      	add	r3, r1
    2304:	3301      	adds	r3, #1
    2306:	781b      	ldrb	r3, [r3, #0]
    2308:	461a      	mov	r2, r3
    230a:	4b31      	ldr	r3, [pc, #196]	; (23d0 <Clock_Ip_InitClock+0x2ac>)
    230c:	5c9b      	ldrb	r3, [r3, r2]
    230e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2310:	4a30      	ldr	r2, [pc, #192]	; (23d4 <Clock_Ip_InitClock+0x2b0>)
    2312:	9b02      	ldr	r3, [sp, #8]
    2314:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2318:	9a03      	ldr	r2, [sp, #12]
    231a:	4613      	mov	r3, r2
    231c:	005b      	lsls	r3, r3, #1
    231e:	4413      	add	r3, r2
    2320:	009b      	lsls	r3, r3, #2
    2322:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2326:	9a01      	ldr	r2, [sp, #4]
    2328:	4413      	add	r3, r2
    232a:	4618      	mov	r0, r3
    232c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    232e:	9b03      	ldr	r3, [sp, #12]
    2330:	3301      	adds	r3, #1
    2332:	9303      	str	r3, [sp, #12]
    2334:	9b01      	ldr	r3, [sp, #4]
    2336:	7b5b      	ldrb	r3, [r3, #13]
    2338:	461a      	mov	r2, r3
    233a:	9b03      	ldr	r3, [sp, #12]
    233c:	4293      	cmp	r3, r2
    233e:	d3d2      	bcc.n	22e6 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2340:	2300      	movs	r3, #0
    2342:	9303      	str	r3, [sp, #12]
    2344:	e026      	b.n	2394 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2346:	9901      	ldr	r1, [sp, #4]
    2348:	9a03      	ldr	r2, [sp, #12]
    234a:	4613      	mov	r3, r2
    234c:	005b      	lsls	r3, r3, #1
    234e:	4413      	add	r3, r2
    2350:	009b      	lsls	r3, r3, #2
    2352:	440b      	add	r3, r1
    2354:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2358:	681a      	ldr	r2, [r3, #0]
    235a:	4914      	ldr	r1, [pc, #80]	; (23ac <Clock_Ip_InitClock+0x288>)
    235c:	4613      	mov	r3, r2
    235e:	00db      	lsls	r3, r3, #3
    2360:	4413      	add	r3, r2
    2362:	440b      	add	r3, r1
    2364:	3301      	adds	r3, #1
    2366:	781b      	ldrb	r3, [r3, #0]
    2368:	461a      	mov	r2, r3
    236a:	4b1b      	ldr	r3, [pc, #108]	; (23d8 <Clock_Ip_InitClock+0x2b4>)
    236c:	5c9b      	ldrb	r3, [r3, r2]
    236e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    2370:	4a1a      	ldr	r2, [pc, #104]	; (23dc <Clock_Ip_InitClock+0x2b8>)
    2372:	9b02      	ldr	r3, [sp, #8]
    2374:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    2378:	9a03      	ldr	r2, [sp, #12]
    237a:	4613      	mov	r3, r2
    237c:	005b      	lsls	r3, r3, #1
    237e:	4413      	add	r3, r2
    2380:	009b      	lsls	r3, r3, #2
    2382:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    2386:	9a01      	ldr	r2, [sp, #4]
    2388:	4413      	add	r3, r2
    238a:	4618      	mov	r0, r3
    238c:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    238e:	9b03      	ldr	r3, [sp, #12]
    2390:	3301      	adds	r3, #1
    2392:	9303      	str	r3, [sp, #12]
    2394:	9b01      	ldr	r3, [sp, #4]
    2396:	7b1b      	ldrb	r3, [r3, #12]
    2398:	461a      	mov	r2, r3
    239a:	9b03      	ldr	r3, [sp, #12]
    239c:	4293      	cmp	r3, r2
    239e:	d3d2      	bcc.n	2346 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    23a0:	2300      	movs	r3, #0
    23a2:	9303      	str	r3, [sp, #12]
    23a4:	e044      	b.n	2430 <Clock_Ip_InitClock+0x30c>
    23a6:	bf00      	nop
    23a8:	1fff8b44 	.word	0x1fff8b44
    23ac:	0000a654 	.word	0x0000a654
    23b0:	0000a644 	.word	0x0000a644
    23b4:	0000ac50 	.word	0x0000ac50
    23b8:	0000a5e4 	.word	0x0000a5e4
    23bc:	0000ac14 	.word	0x0000ac14
    23c0:	0000a5d4 	.word	0x0000a5d4
    23c4:	0000aba8 	.word	0x0000aba8
    23c8:	0000a634 	.word	0x0000a634
    23cc:	0000ac88 	.word	0x0000ac88
    23d0:	0000a5c4 	.word	0x0000a5c4
    23d4:	0000aba0 	.word	0x0000aba0
    23d8:	0000a5b4 	.word	0x0000a5b4
    23dc:	0000ab64 	.word	0x0000ab64
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    23e0:	9901      	ldr	r1, [sp, #4]
    23e2:	9a03      	ldr	r2, [sp, #12]
    23e4:	4613      	mov	r3, r2
    23e6:	005b      	lsls	r3, r3, #1
    23e8:	4413      	add	r3, r2
    23ea:	009b      	lsls	r3, r3, #2
    23ec:	440b      	add	r3, r1
    23ee:	f503 730e 	add.w	r3, r3, #568	; 0x238
    23f2:	681a      	ldr	r2, [r3, #0]
    23f4:	49ac      	ldr	r1, [pc, #688]	; (26a8 <Clock_Ip_InitClock+0x584>)
    23f6:	4613      	mov	r3, r2
    23f8:	00db      	lsls	r3, r3, #3
    23fa:	4413      	add	r3, r2
    23fc:	440b      	add	r3, r1
    23fe:	3301      	adds	r3, #1
    2400:	781b      	ldrb	r3, [r3, #0]
    2402:	461a      	mov	r2, r3
    2404:	4ba9      	ldr	r3, [pc, #676]	; (26ac <Clock_Ip_InitClock+0x588>)
    2406:	5c9b      	ldrb	r3, [r3, r2]
    2408:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    240a:	4aa9      	ldr	r2, [pc, #676]	; (26b0 <Clock_Ip_InitClock+0x58c>)
    240c:	9b02      	ldr	r3, [sp, #8]
    240e:	00db      	lsls	r3, r3, #3
    2410:	4413      	add	r3, r2
    2412:	6859      	ldr	r1, [r3, #4]
    2414:	9a03      	ldr	r2, [sp, #12]
    2416:	4613      	mov	r3, r2
    2418:	005b      	lsls	r3, r3, #1
    241a:	4413      	add	r3, r2
    241c:	009b      	lsls	r3, r3, #2
    241e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2422:	9a01      	ldr	r2, [sp, #4]
    2424:	4413      	add	r3, r2
    2426:	4618      	mov	r0, r3
    2428:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    242a:	9b03      	ldr	r3, [sp, #12]
    242c:	3301      	adds	r3, #1
    242e:	9303      	str	r3, [sp, #12]
    2430:	9b01      	ldr	r3, [sp, #4]
    2432:	7b5b      	ldrb	r3, [r3, #13]
    2434:	461a      	mov	r2, r3
    2436:	9b03      	ldr	r3, [sp, #12]
    2438:	4293      	cmp	r3, r2
    243a:	d3d1      	bcc.n	23e0 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    243c:	2300      	movs	r3, #0
    243e:	9303      	str	r3, [sp, #12]
    2440:	e029      	b.n	2496 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2442:	9901      	ldr	r1, [sp, #4]
    2444:	9a03      	ldr	r2, [sp, #12]
    2446:	4613      	mov	r3, r2
    2448:	009b      	lsls	r3, r3, #2
    244a:	4413      	add	r3, r2
    244c:	00db      	lsls	r3, r3, #3
    244e:	440b      	add	r3, r1
    2450:	3340      	adds	r3, #64	; 0x40
    2452:	681a      	ldr	r2, [r3, #0]
    2454:	4994      	ldr	r1, [pc, #592]	; (26a8 <Clock_Ip_InitClock+0x584>)
    2456:	4613      	mov	r3, r2
    2458:	00db      	lsls	r3, r3, #3
    245a:	4413      	add	r3, r2
    245c:	440b      	add	r3, r1
    245e:	3301      	adds	r3, #1
    2460:	781b      	ldrb	r3, [r3, #0]
    2462:	461a      	mov	r2, r3
    2464:	4b93      	ldr	r3, [pc, #588]	; (26b4 <Clock_Ip_InitClock+0x590>)
    2466:	5c9b      	ldrb	r3, [r3, r2]
    2468:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    246a:	4993      	ldr	r1, [pc, #588]	; (26b8 <Clock_Ip_InitClock+0x594>)
    246c:	9a02      	ldr	r2, [sp, #8]
    246e:	4613      	mov	r3, r2
    2470:	009b      	lsls	r3, r3, #2
    2472:	4413      	add	r3, r2
    2474:	009b      	lsls	r3, r3, #2
    2476:	440b      	add	r3, r1
    2478:	3304      	adds	r3, #4
    247a:	6819      	ldr	r1, [r3, #0]
    247c:	9a03      	ldr	r2, [sp, #12]
    247e:	4613      	mov	r3, r2
    2480:	009b      	lsls	r3, r3, #2
    2482:	4413      	add	r3, r2
    2484:	00db      	lsls	r3, r3, #3
    2486:	3340      	adds	r3, #64	; 0x40
    2488:	9a01      	ldr	r2, [sp, #4]
    248a:	4413      	add	r3, r2
    248c:	4618      	mov	r0, r3
    248e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2490:	9b03      	ldr	r3, [sp, #12]
    2492:	3301      	adds	r3, #1
    2494:	9303      	str	r3, [sp, #12]
    2496:	9b01      	ldr	r3, [sp, #4]
    2498:	7a9b      	ldrb	r3, [r3, #10]
    249a:	461a      	mov	r2, r3
    249c:	9b03      	ldr	r3, [sp, #12]
    249e:	4293      	cmp	r3, r2
    24a0:	d3cf      	bcc.n	2442 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    24a2:	2300      	movs	r3, #0
    24a4:	9303      	str	r3, [sp, #12]
    24a6:	e029      	b.n	24fc <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    24a8:	9901      	ldr	r1, [sp, #4]
    24aa:	9a03      	ldr	r2, [sp, #12]
    24ac:	4613      	mov	r3, r2
    24ae:	009b      	lsls	r3, r3, #2
    24b0:	4413      	add	r3, r2
    24b2:	009b      	lsls	r3, r3, #2
    24b4:	440b      	add	r3, r1
    24b6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24ba:	681a      	ldr	r2, [r3, #0]
    24bc:	497a      	ldr	r1, [pc, #488]	; (26a8 <Clock_Ip_InitClock+0x584>)
    24be:	4613      	mov	r3, r2
    24c0:	00db      	lsls	r3, r3, #3
    24c2:	4413      	add	r3, r2
    24c4:	440b      	add	r3, r1
    24c6:	3301      	adds	r3, #1
    24c8:	781b      	ldrb	r3, [r3, #0]
    24ca:	461a      	mov	r2, r3
    24cc:	4b7b      	ldr	r3, [pc, #492]	; (26bc <Clock_Ip_InitClock+0x598>)
    24ce:	5c9b      	ldrb	r3, [r3, r2]
    24d0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    24d2:	4a7b      	ldr	r2, [pc, #492]	; (26c0 <Clock_Ip_InitClock+0x59c>)
    24d4:	9b02      	ldr	r3, [sp, #8]
    24d6:	011b      	lsls	r3, r3, #4
    24d8:	4413      	add	r3, r2
    24da:	3304      	adds	r3, #4
    24dc:	681c      	ldr	r4, [r3, #0]
    24de:	9a03      	ldr	r2, [sp, #12]
    24e0:	4613      	mov	r3, r2
    24e2:	009b      	lsls	r3, r3, #2
    24e4:	4413      	add	r3, r2
    24e6:	009b      	lsls	r3, r3, #2
    24e8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    24ec:	9a01      	ldr	r2, [sp, #4]
    24ee:	4413      	add	r3, r2
    24f0:	9903      	ldr	r1, [sp, #12]
    24f2:	4618      	mov	r0, r3
    24f4:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    24f6:	9b03      	ldr	r3, [sp, #12]
    24f8:	3301      	adds	r3, #1
    24fa:	9303      	str	r3, [sp, #12]
    24fc:	9b01      	ldr	r3, [sp, #4]
    24fe:	7c9b      	ldrb	r3, [r3, #18]
    2500:	461a      	mov	r2, r3
    2502:	9b03      	ldr	r3, [sp, #12]
    2504:	4293      	cmp	r3, r2
    2506:	d3cf      	bcc.n	24a8 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2508:	2300      	movs	r3, #0
    250a:	9303      	str	r3, [sp, #12]
    250c:	e02a      	b.n	2564 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    250e:	9901      	ldr	r1, [sp, #4]
    2510:	9a03      	ldr	r2, [sp, #12]
    2512:	4613      	mov	r3, r2
    2514:	009b      	lsls	r3, r3, #2
    2516:	4413      	add	r3, r2
    2518:	009b      	lsls	r3, r3, #2
    251a:	440b      	add	r3, r1
    251c:	332c      	adds	r3, #44	; 0x2c
    251e:	681a      	ldr	r2, [r3, #0]
    2520:	4961      	ldr	r1, [pc, #388]	; (26a8 <Clock_Ip_InitClock+0x584>)
    2522:	4613      	mov	r3, r2
    2524:	00db      	lsls	r3, r3, #3
    2526:	4413      	add	r3, r2
    2528:	440b      	add	r3, r1
    252a:	3301      	adds	r3, #1
    252c:	781b      	ldrb	r3, [r3, #0]
    252e:	461a      	mov	r2, r3
    2530:	4b64      	ldr	r3, [pc, #400]	; (26c4 <Clock_Ip_InitClock+0x5a0>)
    2532:	5c9b      	ldrb	r3, [r3, r2]
    2534:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    2536:	4964      	ldr	r1, [pc, #400]	; (26c8 <Clock_Ip_InitClock+0x5a4>)
    2538:	9a02      	ldr	r2, [sp, #8]
    253a:	4613      	mov	r3, r2
    253c:	009b      	lsls	r3, r3, #2
    253e:	4413      	add	r3, r2
    2540:	009b      	lsls	r3, r3, #2
    2542:	440b      	add	r3, r1
    2544:	3308      	adds	r3, #8
    2546:	6819      	ldr	r1, [r3, #0]
    2548:	9a03      	ldr	r2, [sp, #12]
    254a:	4613      	mov	r3, r2
    254c:	009b      	lsls	r3, r3, #2
    254e:	4413      	add	r3, r2
    2550:	009b      	lsls	r3, r3, #2
    2552:	3328      	adds	r3, #40	; 0x28
    2554:	9a01      	ldr	r2, [sp, #4]
    2556:	4413      	add	r3, r2
    2558:	3304      	adds	r3, #4
    255a:	4618      	mov	r0, r3
    255c:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    255e:	9b03      	ldr	r3, [sp, #12]
    2560:	3301      	adds	r3, #1
    2562:	9303      	str	r3, [sp, #12]
    2564:	9b01      	ldr	r3, [sp, #4]
    2566:	7a5b      	ldrb	r3, [r3, #9]
    2568:	461a      	mov	r2, r3
    256a:	9b03      	ldr	r3, [sp, #12]
    256c:	4293      	cmp	r3, r2
    256e:	d3ce      	bcc.n	250e <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2570:	2300      	movs	r3, #0
    2572:	9303      	str	r3, [sp, #12]
    2574:	e029      	b.n	25ca <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2576:	9901      	ldr	r1, [sp, #4]
    2578:	9a03      	ldr	r2, [sp, #12]
    257a:	4613      	mov	r3, r2
    257c:	009b      	lsls	r3, r3, #2
    257e:	4413      	add	r3, r2
    2580:	00db      	lsls	r3, r3, #3
    2582:	440b      	add	r3, r1
    2584:	3340      	adds	r3, #64	; 0x40
    2586:	681a      	ldr	r2, [r3, #0]
    2588:	4947      	ldr	r1, [pc, #284]	; (26a8 <Clock_Ip_InitClock+0x584>)
    258a:	4613      	mov	r3, r2
    258c:	00db      	lsls	r3, r3, #3
    258e:	4413      	add	r3, r2
    2590:	440b      	add	r3, r1
    2592:	3301      	adds	r3, #1
    2594:	781b      	ldrb	r3, [r3, #0]
    2596:	461a      	mov	r2, r3
    2598:	4b46      	ldr	r3, [pc, #280]	; (26b4 <Clock_Ip_InitClock+0x590>)
    259a:	5c9b      	ldrb	r3, [r3, r2]
    259c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    259e:	4946      	ldr	r1, [pc, #280]	; (26b8 <Clock_Ip_InitClock+0x594>)
    25a0:	9a02      	ldr	r2, [sp, #8]
    25a2:	4613      	mov	r3, r2
    25a4:	009b      	lsls	r3, r3, #2
    25a6:	4413      	add	r3, r2
    25a8:	009b      	lsls	r3, r3, #2
    25aa:	440b      	add	r3, r1
    25ac:	330c      	adds	r3, #12
    25ae:	6819      	ldr	r1, [r3, #0]
    25b0:	9a03      	ldr	r2, [sp, #12]
    25b2:	4613      	mov	r3, r2
    25b4:	009b      	lsls	r3, r3, #2
    25b6:	4413      	add	r3, r2
    25b8:	00db      	lsls	r3, r3, #3
    25ba:	3340      	adds	r3, #64	; 0x40
    25bc:	9a01      	ldr	r2, [sp, #4]
    25be:	4413      	add	r3, r2
    25c0:	4618      	mov	r0, r3
    25c2:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    25c4:	9b03      	ldr	r3, [sp, #12]
    25c6:	3301      	adds	r3, #1
    25c8:	9303      	str	r3, [sp, #12]
    25ca:	9b01      	ldr	r3, [sp, #4]
    25cc:	7a9b      	ldrb	r3, [r3, #10]
    25ce:	461a      	mov	r2, r3
    25d0:	9b03      	ldr	r3, [sp, #12]
    25d2:	4293      	cmp	r3, r2
    25d4:	d3cf      	bcc.n	2576 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    25d6:	2300      	movs	r3, #0
    25d8:	9303      	str	r3, [sp, #12]
    25da:	e025      	b.n	2628 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    25dc:	9a01      	ldr	r2, [sp, #4]
    25de:	9b03      	ldr	r3, [sp, #12]
    25e0:	3324      	adds	r3, #36	; 0x24
    25e2:	011b      	lsls	r3, r3, #4
    25e4:	4413      	add	r3, r2
    25e6:	3304      	adds	r3, #4
    25e8:	681a      	ldr	r2, [r3, #0]
    25ea:	492f      	ldr	r1, [pc, #188]	; (26a8 <Clock_Ip_InitClock+0x584>)
    25ec:	4613      	mov	r3, r2
    25ee:	00db      	lsls	r3, r3, #3
    25f0:	4413      	add	r3, r2
    25f2:	440b      	add	r3, r1
    25f4:	3301      	adds	r3, #1
    25f6:	781b      	ldrb	r3, [r3, #0]
    25f8:	461a      	mov	r2, r3
    25fa:	4b34      	ldr	r3, [pc, #208]	; (26cc <Clock_Ip_InitClock+0x5a8>)
    25fc:	5c9b      	ldrb	r3, [r3, r2]
    25fe:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2600:	4933      	ldr	r1, [pc, #204]	; (26d0 <Clock_Ip_InitClock+0x5ac>)
    2602:	9a02      	ldr	r2, [sp, #8]
    2604:	4613      	mov	r3, r2
    2606:	005b      	lsls	r3, r3, #1
    2608:	4413      	add	r3, r2
    260a:	009b      	lsls	r3, r3, #2
    260c:	440b      	add	r3, r1
    260e:	3304      	adds	r3, #4
    2610:	681b      	ldr	r3, [r3, #0]
    2612:	9a03      	ldr	r2, [sp, #12]
    2614:	3224      	adds	r2, #36	; 0x24
    2616:	0112      	lsls	r2, r2, #4
    2618:	9901      	ldr	r1, [sp, #4]
    261a:	440a      	add	r2, r1
    261c:	3204      	adds	r2, #4
    261e:	4610      	mov	r0, r2
    2620:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2622:	9b03      	ldr	r3, [sp, #12]
    2624:	3301      	adds	r3, #1
    2626:	9303      	str	r3, [sp, #12]
    2628:	9b01      	ldr	r3, [sp, #4]
    262a:	7b9b      	ldrb	r3, [r3, #14]
    262c:	461a      	mov	r2, r3
    262e:	9b03      	ldr	r3, [sp, #12]
    2630:	4293      	cmp	r3, r2
    2632:	d3d3      	bcc.n	25dc <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2634:	4b27      	ldr	r3, [pc, #156]	; (26d4 <Clock_Ip_InitClock+0x5b0>)
    2636:	2200      	movs	r2, #0
    2638:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    263a:	4b26      	ldr	r3, [pc, #152]	; (26d4 <Clock_Ip_InitClock+0x5b0>)
    263c:	2200      	movs	r2, #0
    263e:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2640:	4b24      	ldr	r3, [pc, #144]	; (26d4 <Clock_Ip_InitClock+0x5b0>)
    2642:	2201      	movs	r2, #1
    2644:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2646:	4b23      	ldr	r3, [pc, #140]	; (26d4 <Clock_Ip_InitClock+0x5b0>)
    2648:	2200      	movs	r2, #0
    264a:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    264c:	f000 fa9c 	bl	2b88 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2650:	2300      	movs	r3, #0
    2652:	9303      	str	r3, [sp, #12]
    2654:	e04c      	b.n	26f0 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    2656:	9a01      	ldr	r2, [sp, #4]
    2658:	9b03      	ldr	r3, [sp, #12]
    265a:	330d      	adds	r3, #13
    265c:	00db      	lsls	r3, r3, #3
    265e:	4413      	add	r3, r2
    2660:	685b      	ldr	r3, [r3, #4]
    2662:	4a1d      	ldr	r2, [pc, #116]	; (26d8 <Clock_Ip_InitClock+0x5b4>)
    2664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2668:	2b03      	cmp	r3, #3
    266a:	d03b      	beq.n	26e4 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    266c:	9b01      	ldr	r3, [sp, #4]
    266e:	9a03      	ldr	r2, [sp, #12]
    2670:	320d      	adds	r2, #13
    2672:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2676:	490c      	ldr	r1, [pc, #48]	; (26a8 <Clock_Ip_InitClock+0x584>)
    2678:	4613      	mov	r3, r2
    267a:	00db      	lsls	r3, r3, #3
    267c:	4413      	add	r3, r2
    267e:	440b      	add	r3, r1
    2680:	3301      	adds	r3, #1
    2682:	781b      	ldrb	r3, [r3, #0]
    2684:	461a      	mov	r2, r3
    2686:	4b15      	ldr	r3, [pc, #84]	; (26dc <Clock_Ip_InitClock+0x5b8>)
    2688:	5c9b      	ldrb	r3, [r3, r2]
    268a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    268c:	4a14      	ldr	r2, [pc, #80]	; (26e0 <Clock_Ip_InitClock+0x5bc>)
    268e:	9b02      	ldr	r3, [sp, #8]
    2690:	00db      	lsls	r3, r3, #3
    2692:	4413      	add	r3, r2
    2694:	685b      	ldr	r3, [r3, #4]
    2696:	9a03      	ldr	r2, [sp, #12]
    2698:	320d      	adds	r2, #13
    269a:	00d2      	lsls	r2, r2, #3
    269c:	9901      	ldr	r1, [sp, #4]
    269e:	440a      	add	r2, r1
    26a0:	4610      	mov	r0, r2
    26a2:	4798      	blx	r3
    26a4:	e021      	b.n	26ea <Clock_Ip_InitClock+0x5c6>
    26a6:	bf00      	nop
    26a8:	0000a654 	.word	0x0000a654
    26ac:	0000a5c4 	.word	0x0000a5c4
    26b0:	0000aba0 	.word	0x0000aba0
    26b4:	0000a614 	.word	0x0000a614
    26b8:	0000ac60 	.word	0x0000ac60
    26bc:	0000a644 	.word	0x0000a644
    26c0:	0000ac50 	.word	0x0000ac50
    26c4:	0000a5d4 	.word	0x0000a5d4
    26c8:	0000aba8 	.word	0x0000aba8
    26cc:	0000a604 	.word	0x0000a604
    26d0:	0000abd0 	.word	0x0000abd0
    26d4:	1fff8b4c 	.word	0x1fff8b4c
    26d8:	0000aaa0 	.word	0x0000aaa0
    26dc:	0000a624 	.word	0x0000a624
    26e0:	0000ac8c 	.word	0x0000ac8c
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    26e4:	4b3a      	ldr	r3, [pc, #232]	; (27d0 <Clock_Ip_InitClock+0x6ac>)
    26e6:	2201      	movs	r2, #1
    26e8:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    26ea:	9b03      	ldr	r3, [sp, #12]
    26ec:	3301      	adds	r3, #1
    26ee:	9303      	str	r3, [sp, #12]
    26f0:	9b01      	ldr	r3, [sp, #4]
    26f2:	7adb      	ldrb	r3, [r3, #11]
    26f4:	461a      	mov	r2, r3
    26f6:	9b03      	ldr	r3, [sp, #12]
    26f8:	4293      	cmp	r3, r2
    26fa:	d3ac      	bcc.n	2656 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    26fc:	4b34      	ldr	r3, [pc, #208]	; (27d0 <Clock_Ip_InitClock+0x6ac>)
    26fe:	781b      	ldrb	r3, [r3, #0]
    2700:	f083 0301 	eor.w	r3, r3, #1
    2704:	b2db      	uxtb	r3, r3
    2706:	2b00      	cmp	r3, #0
    2708:	d05e      	beq.n	27c8 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    270a:	2300      	movs	r3, #0
    270c:	9303      	str	r3, [sp, #12]
    270e:	e01f      	b.n	2750 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2710:	9a01      	ldr	r2, [sp, #4]
    2712:	9b03      	ldr	r3, [sp, #12]
    2714:	334e      	adds	r3, #78	; 0x4e
    2716:	00db      	lsls	r3, r3, #3
    2718:	4413      	add	r3, r2
    271a:	685a      	ldr	r2, [r3, #4]
    271c:	492d      	ldr	r1, [pc, #180]	; (27d4 <Clock_Ip_InitClock+0x6b0>)
    271e:	4613      	mov	r3, r2
    2720:	00db      	lsls	r3, r3, #3
    2722:	4413      	add	r3, r2
    2724:	440b      	add	r3, r1
    2726:	3301      	adds	r3, #1
    2728:	781b      	ldrb	r3, [r3, #0]
    272a:	461a      	mov	r2, r3
    272c:	4b2a      	ldr	r3, [pc, #168]	; (27d8 <Clock_Ip_InitClock+0x6b4>)
    272e:	5c9b      	ldrb	r3, [r3, r2]
    2730:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2732:	4a2a      	ldr	r2, [pc, #168]	; (27dc <Clock_Ip_InitClock+0x6b8>)
    2734:	9b02      	ldr	r3, [sp, #8]
    2736:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    273a:	9a03      	ldr	r2, [sp, #12]
    273c:	324e      	adds	r2, #78	; 0x4e
    273e:	00d2      	lsls	r2, r2, #3
    2740:	9901      	ldr	r1, [sp, #4]
    2742:	440a      	add	r2, r1
    2744:	3204      	adds	r2, #4
    2746:	4610      	mov	r0, r2
    2748:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    274a:	9b03      	ldr	r3, [sp, #12]
    274c:	3301      	adds	r3, #1
    274e:	9303      	str	r3, [sp, #12]
    2750:	9b01      	ldr	r3, [sp, #4]
    2752:	7c1b      	ldrb	r3, [r3, #16]
    2754:	461a      	mov	r2, r3
    2756:	9b03      	ldr	r3, [sp, #12]
    2758:	4293      	cmp	r3, r2
    275a:	d3d9      	bcc.n	2710 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    275c:	2300      	movs	r3, #0
    275e:	9303      	str	r3, [sp, #12]
    2760:	e028      	b.n	27b4 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2762:	9901      	ldr	r1, [sp, #4]
    2764:	9a03      	ldr	r2, [sp, #12]
    2766:	4613      	mov	r3, r2
    2768:	009b      	lsls	r3, r3, #2
    276a:	4413      	add	r3, r2
    276c:	009b      	lsls	r3, r3, #2
    276e:	440b      	add	r3, r1
    2770:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2774:	681a      	ldr	r2, [r3, #0]
    2776:	4917      	ldr	r1, [pc, #92]	; (27d4 <Clock_Ip_InitClock+0x6b0>)
    2778:	4613      	mov	r3, r2
    277a:	00db      	lsls	r3, r3, #3
    277c:	4413      	add	r3, r2
    277e:	440b      	add	r3, r1
    2780:	3301      	adds	r3, #1
    2782:	781b      	ldrb	r3, [r3, #0]
    2784:	461a      	mov	r2, r3
    2786:	4b16      	ldr	r3, [pc, #88]	; (27e0 <Clock_Ip_InitClock+0x6bc>)
    2788:	5c9b      	ldrb	r3, [r3, r2]
    278a:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    278c:	4a15      	ldr	r2, [pc, #84]	; (27e4 <Clock_Ip_InitClock+0x6c0>)
    278e:	9b02      	ldr	r3, [sp, #8]
    2790:	011b      	lsls	r3, r3, #4
    2792:	4413      	add	r3, r2
    2794:	330c      	adds	r3, #12
    2796:	6819      	ldr	r1, [r3, #0]
    2798:	9a03      	ldr	r2, [sp, #12]
    279a:	4613      	mov	r3, r2
    279c:	009b      	lsls	r3, r3, #2
    279e:	4413      	add	r3, r2
    27a0:	009b      	lsls	r3, r3, #2
    27a2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27a6:	9a01      	ldr	r2, [sp, #4]
    27a8:	4413      	add	r3, r2
    27aa:	4618      	mov	r0, r3
    27ac:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    27ae:	9b03      	ldr	r3, [sp, #12]
    27b0:	3301      	adds	r3, #1
    27b2:	9303      	str	r3, [sp, #12]
    27b4:	9b01      	ldr	r3, [sp, #4]
    27b6:	7c9b      	ldrb	r3, [r3, #18]
    27b8:	461a      	mov	r2, r3
    27ba:	9b03      	ldr	r3, [sp, #12]
    27bc:	4293      	cmp	r3, r2
    27be:	d3d0      	bcc.n	2762 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    27c0:	2104      	movs	r1, #4
    27c2:	9801      	ldr	r0, [sp, #4]
    27c4:	f002 ff48 	bl	5658 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    27c8:	bf00      	nop
    27ca:	b004      	add	sp, #16
    27cc:	bd10      	pop	{r4, pc}
    27ce:	bf00      	nop
    27d0:	1fff8b4c 	.word	0x1fff8b4c
    27d4:	0000a654 	.word	0x0000a654
    27d8:	0000a5f4 	.word	0x0000a5f4
    27dc:	0000abdc 	.word	0x0000abdc
    27e0:	0000a644 	.word	0x0000a644
    27e4:	0000ac50 	.word	0x0000ac50

000027e8 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    27e8:	b500      	push	{lr}
    27ea:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    27ec:	2302      	movs	r3, #2
    27ee:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    27f0:	2300      	movs	r3, #0
    27f2:	9304      	str	r3, [sp, #16]
    27f4:	e02c      	b.n	2850 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    27f6:	4a36      	ldr	r2, [pc, #216]	; (28d0 <Clock_Ip_GetPllStatus+0xe8>)
    27f8:	9b04      	ldr	r3, [sp, #16]
    27fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    27fe:	4935      	ldr	r1, [pc, #212]	; (28d4 <Clock_Ip_GetPllStatus+0xec>)
    2800:	4613      	mov	r3, r2
    2802:	00db      	lsls	r3, r3, #3
    2804:	4413      	add	r3, r2
    2806:	440b      	add	r3, r1
    2808:	3301      	adds	r3, #1
    280a:	781b      	ldrb	r3, [r3, #0]
    280c:	461a      	mov	r2, r3
    280e:	4b32      	ldr	r3, [pc, #200]	; (28d8 <Clock_Ip_GetPllStatus+0xf0>)
    2810:	5c9b      	ldrb	r3, [r3, r2]
    2812:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2814:	4931      	ldr	r1, [pc, #196]	; (28dc <Clock_Ip_GetPllStatus+0xf4>)
    2816:	9a03      	ldr	r2, [sp, #12]
    2818:	4613      	mov	r3, r2
    281a:	009b      	lsls	r3, r3, #2
    281c:	4413      	add	r3, r2
    281e:	009b      	lsls	r3, r3, #2
    2820:	440b      	add	r3, r1
    2822:	3308      	adds	r3, #8
    2824:	681b      	ldr	r3, [r3, #0]
    2826:	492a      	ldr	r1, [pc, #168]	; (28d0 <Clock_Ip_GetPllStatus+0xe8>)
    2828:	9a04      	ldr	r2, [sp, #16]
    282a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    282e:	4610      	mov	r0, r2
    2830:	4798      	blx	r3
    2832:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2834:	9b02      	ldr	r3, [sp, #8]
    2836:	2b01      	cmp	r3, #1
    2838:	d102      	bne.n	2840 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    283a:	2301      	movs	r3, #1
    283c:	9305      	str	r3, [sp, #20]
            break;
    283e:	e00d      	b.n	285c <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2840:	9b02      	ldr	r3, [sp, #8]
    2842:	2b02      	cmp	r3, #2
    2844:	d101      	bne.n	284a <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2846:	2300      	movs	r3, #0
    2848:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    284a:	9b04      	ldr	r3, [sp, #16]
    284c:	3301      	adds	r3, #1
    284e:	9304      	str	r3, [sp, #16]
    2850:	4b23      	ldr	r3, [pc, #140]	; (28e0 <Clock_Ip_GetPllStatus+0xf8>)
    2852:	789b      	ldrb	r3, [r3, #2]
    2854:	461a      	mov	r2, r3
    2856:	9b04      	ldr	r3, [sp, #16]
    2858:	4293      	cmp	r3, r2
    285a:	d3cc      	bcc.n	27f6 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    285c:	9b05      	ldr	r3, [sp, #20]
    285e:	2b00      	cmp	r3, #0
    2860:	d130      	bne.n	28c4 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2862:	2300      	movs	r3, #0
    2864:	9304      	str	r3, [sp, #16]
    2866:	e027      	b.n	28b8 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2868:	4a1e      	ldr	r2, [pc, #120]	; (28e4 <Clock_Ip_GetPllStatus+0xfc>)
    286a:	9b04      	ldr	r3, [sp, #16]
    286c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2870:	4918      	ldr	r1, [pc, #96]	; (28d4 <Clock_Ip_GetPllStatus+0xec>)
    2872:	4613      	mov	r3, r2
    2874:	00db      	lsls	r3, r3, #3
    2876:	4413      	add	r3, r2
    2878:	440b      	add	r3, r1
    287a:	3301      	adds	r3, #1
    287c:	781b      	ldrb	r3, [r3, #0]
    287e:	461a      	mov	r2, r3
    2880:	4b19      	ldr	r3, [pc, #100]	; (28e8 <Clock_Ip_GetPllStatus+0x100>)
    2882:	5c9b      	ldrb	r3, [r3, r2]
    2884:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2886:	4919      	ldr	r1, [pc, #100]	; (28ec <Clock_Ip_GetPllStatus+0x104>)
    2888:	9a03      	ldr	r2, [sp, #12]
    288a:	4613      	mov	r3, r2
    288c:	005b      	lsls	r3, r3, #1
    288e:	4413      	add	r3, r2
    2890:	009b      	lsls	r3, r3, #2
    2892:	440b      	add	r3, r1
    2894:	3308      	adds	r3, #8
    2896:	681b      	ldr	r3, [r3, #0]
    2898:	4912      	ldr	r1, [pc, #72]	; (28e4 <Clock_Ip_GetPllStatus+0xfc>)
    289a:	9a04      	ldr	r2, [sp, #16]
    289c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    28a0:	4610      	mov	r0, r2
    28a2:	4798      	blx	r3
    28a4:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    28a6:	9b01      	ldr	r3, [sp, #4]
    28a8:	2b01      	cmp	r3, #1
    28aa:	d102      	bne.n	28b2 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    28ac:	2301      	movs	r3, #1
    28ae:	9305      	str	r3, [sp, #20]
                break;
    28b0:	e008      	b.n	28c4 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    28b2:	9b04      	ldr	r3, [sp, #16]
    28b4:	3301      	adds	r3, #1
    28b6:	9304      	str	r3, [sp, #16]
    28b8:	4b09      	ldr	r3, [pc, #36]	; (28e0 <Clock_Ip_GetPllStatus+0xf8>)
    28ba:	78db      	ldrb	r3, [r3, #3]
    28bc:	461a      	mov	r2, r3
    28be:	9b04      	ldr	r3, [sp, #16]
    28c0:	4293      	cmp	r3, r2
    28c2:	d3d1      	bcc.n	2868 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    28c4:	9b05      	ldr	r3, [sp, #20]
}
    28c6:	4618      	mov	r0, r3
    28c8:	b007      	add	sp, #28
    28ca:	f85d fb04 	ldr.w	pc, [sp], #4
    28ce:	bf00      	nop
    28d0:	0000ab5c 	.word	0x0000ab5c
    28d4:	0000a654 	.word	0x0000a654
    28d8:	0000a614 	.word	0x0000a614
    28dc:	0000ac60 	.word	0x0000ac60
    28e0:	1fff8b4c 	.word	0x1fff8b4c
    28e4:	0000ab60 	.word	0x0000ab60
    28e8:	0000a604 	.word	0x0000a604
    28ec:	0000abd0 	.word	0x0000abd0

000028f0 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    28f0:	b500      	push	{lr}
    28f2:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    28f4:	4b55      	ldr	r3, [pc, #340]	; (2a4c <Clock_Ip_DistributePll+0x15c>)
    28f6:	681b      	ldr	r3, [r3, #0]
    28f8:	2b00      	cmp	r3, #0
    28fa:	f000 80a2 	beq.w	2a42 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    28fe:	2300      	movs	r3, #0
    2900:	9301      	str	r3, [sp, #4]
    2902:	e02c      	b.n	295e <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2904:	4b51      	ldr	r3, [pc, #324]	; (2a4c <Clock_Ip_DistributePll+0x15c>)
    2906:	681a      	ldr	r2, [r3, #0]
    2908:	9b01      	ldr	r3, [sp, #4]
    290a:	330d      	adds	r3, #13
    290c:	00db      	lsls	r3, r3, #3
    290e:	4413      	add	r3, r2
    2910:	685b      	ldr	r3, [r3, #4]
    2912:	4a4f      	ldr	r2, [pc, #316]	; (2a50 <Clock_Ip_DistributePll+0x160>)
    2914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2918:	2b03      	cmp	r3, #3
    291a:	d11d      	bne.n	2958 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    291c:	4b4b      	ldr	r3, [pc, #300]	; (2a4c <Clock_Ip_DistributePll+0x15c>)
    291e:	681b      	ldr	r3, [r3, #0]
    2920:	9a01      	ldr	r2, [sp, #4]
    2922:	320d      	adds	r2, #13
    2924:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2928:	494a      	ldr	r1, [pc, #296]	; (2a54 <Clock_Ip_DistributePll+0x164>)
    292a:	4613      	mov	r3, r2
    292c:	00db      	lsls	r3, r3, #3
    292e:	4413      	add	r3, r2
    2930:	440b      	add	r3, r1
    2932:	3301      	adds	r3, #1
    2934:	781b      	ldrb	r3, [r3, #0]
    2936:	461a      	mov	r2, r3
    2938:	4b47      	ldr	r3, [pc, #284]	; (2a58 <Clock_Ip_DistributePll+0x168>)
    293a:	5c9b      	ldrb	r3, [r3, r2]
    293c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    293e:	4a47      	ldr	r2, [pc, #284]	; (2a5c <Clock_Ip_DistributePll+0x16c>)
    2940:	9b00      	ldr	r3, [sp, #0]
    2942:	00db      	lsls	r3, r3, #3
    2944:	4413      	add	r3, r2
    2946:	685b      	ldr	r3, [r3, #4]
    2948:	4a40      	ldr	r2, [pc, #256]	; (2a4c <Clock_Ip_DistributePll+0x15c>)
    294a:	6811      	ldr	r1, [r2, #0]
    294c:	9a01      	ldr	r2, [sp, #4]
    294e:	320d      	adds	r2, #13
    2950:	00d2      	lsls	r2, r2, #3
    2952:	440a      	add	r2, r1
    2954:	4610      	mov	r0, r2
    2956:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2958:	9b01      	ldr	r3, [sp, #4]
    295a:	3301      	adds	r3, #1
    295c:	9301      	str	r3, [sp, #4]
    295e:	4b3b      	ldr	r3, [pc, #236]	; (2a4c <Clock_Ip_DistributePll+0x15c>)
    2960:	681b      	ldr	r3, [r3, #0]
    2962:	7adb      	ldrb	r3, [r3, #11]
    2964:	461a      	mov	r2, r3
    2966:	9b01      	ldr	r3, [sp, #4]
    2968:	4293      	cmp	r3, r2
    296a:	d3cb      	bcc.n	2904 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    296c:	4b3c      	ldr	r3, [pc, #240]	; (2a60 <Clock_Ip_DistributePll+0x170>)
    296e:	781b      	ldrb	r3, [r3, #0]
    2970:	2b00      	cmp	r3, #0
    2972:	d066      	beq.n	2a42 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2974:	2300      	movs	r3, #0
    2976:	9301      	str	r3, [sp, #4]
    2978:	e021      	b.n	29be <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    297a:	4b34      	ldr	r3, [pc, #208]	; (2a4c <Clock_Ip_DistributePll+0x15c>)
    297c:	681a      	ldr	r2, [r3, #0]
    297e:	9b01      	ldr	r3, [sp, #4]
    2980:	334e      	adds	r3, #78	; 0x4e
    2982:	00db      	lsls	r3, r3, #3
    2984:	4413      	add	r3, r2
    2986:	685a      	ldr	r2, [r3, #4]
    2988:	4932      	ldr	r1, [pc, #200]	; (2a54 <Clock_Ip_DistributePll+0x164>)
    298a:	4613      	mov	r3, r2
    298c:	00db      	lsls	r3, r3, #3
    298e:	4413      	add	r3, r2
    2990:	440b      	add	r3, r1
    2992:	3301      	adds	r3, #1
    2994:	781b      	ldrb	r3, [r3, #0]
    2996:	461a      	mov	r2, r3
    2998:	4b32      	ldr	r3, [pc, #200]	; (2a64 <Clock_Ip_DistributePll+0x174>)
    299a:	5c9b      	ldrb	r3, [r3, r2]
    299c:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    299e:	4a32      	ldr	r2, [pc, #200]	; (2a68 <Clock_Ip_DistributePll+0x178>)
    29a0:	9b00      	ldr	r3, [sp, #0]
    29a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29a6:	4a29      	ldr	r2, [pc, #164]	; (2a4c <Clock_Ip_DistributePll+0x15c>)
    29a8:	6811      	ldr	r1, [r2, #0]
    29aa:	9a01      	ldr	r2, [sp, #4]
    29ac:	324e      	adds	r2, #78	; 0x4e
    29ae:	00d2      	lsls	r2, r2, #3
    29b0:	440a      	add	r2, r1
    29b2:	3204      	adds	r2, #4
    29b4:	4610      	mov	r0, r2
    29b6:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29b8:	9b01      	ldr	r3, [sp, #4]
    29ba:	3301      	adds	r3, #1
    29bc:	9301      	str	r3, [sp, #4]
    29be:	4b23      	ldr	r3, [pc, #140]	; (2a4c <Clock_Ip_DistributePll+0x15c>)
    29c0:	681b      	ldr	r3, [r3, #0]
    29c2:	7c1b      	ldrb	r3, [r3, #16]
    29c4:	461a      	mov	r2, r3
    29c6:	9b01      	ldr	r3, [sp, #4]
    29c8:	4293      	cmp	r3, r2
    29ca:	d3d6      	bcc.n	297a <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    29cc:	2300      	movs	r3, #0
    29ce:	9301      	str	r3, [sp, #4]
    29d0:	e02a      	b.n	2a28 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    29d2:	4b1e      	ldr	r3, [pc, #120]	; (2a4c <Clock_Ip_DistributePll+0x15c>)
    29d4:	6819      	ldr	r1, [r3, #0]
    29d6:	9a01      	ldr	r2, [sp, #4]
    29d8:	4613      	mov	r3, r2
    29da:	009b      	lsls	r3, r3, #2
    29dc:	4413      	add	r3, r2
    29de:	009b      	lsls	r3, r3, #2
    29e0:	440b      	add	r3, r1
    29e2:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    29e6:	681a      	ldr	r2, [r3, #0]
    29e8:	491a      	ldr	r1, [pc, #104]	; (2a54 <Clock_Ip_DistributePll+0x164>)
    29ea:	4613      	mov	r3, r2
    29ec:	00db      	lsls	r3, r3, #3
    29ee:	4413      	add	r3, r2
    29f0:	440b      	add	r3, r1
    29f2:	3301      	adds	r3, #1
    29f4:	781b      	ldrb	r3, [r3, #0]
    29f6:	461a      	mov	r2, r3
    29f8:	4b1c      	ldr	r3, [pc, #112]	; (2a6c <Clock_Ip_DistributePll+0x17c>)
    29fa:	5c9b      	ldrb	r3, [r3, r2]
    29fc:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    29fe:	4a1c      	ldr	r2, [pc, #112]	; (2a70 <Clock_Ip_DistributePll+0x180>)
    2a00:	9b00      	ldr	r3, [sp, #0]
    2a02:	011b      	lsls	r3, r3, #4
    2a04:	4413      	add	r3, r2
    2a06:	330c      	adds	r3, #12
    2a08:	6819      	ldr	r1, [r3, #0]
    2a0a:	4b10      	ldr	r3, [pc, #64]	; (2a4c <Clock_Ip_DistributePll+0x15c>)
    2a0c:	6818      	ldr	r0, [r3, #0]
    2a0e:	9a01      	ldr	r2, [sp, #4]
    2a10:	4613      	mov	r3, r2
    2a12:	009b      	lsls	r3, r3, #2
    2a14:	4413      	add	r3, r2
    2a16:	009b      	lsls	r3, r3, #2
    2a18:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a1c:	4403      	add	r3, r0
    2a1e:	4618      	mov	r0, r3
    2a20:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2a22:	9b01      	ldr	r3, [sp, #4]
    2a24:	3301      	adds	r3, #1
    2a26:	9301      	str	r3, [sp, #4]
    2a28:	4b08      	ldr	r3, [pc, #32]	; (2a4c <Clock_Ip_DistributePll+0x15c>)
    2a2a:	681b      	ldr	r3, [r3, #0]
    2a2c:	7c9b      	ldrb	r3, [r3, #18]
    2a2e:	461a      	mov	r2, r3
    2a30:	9b01      	ldr	r3, [sp, #4]
    2a32:	4293      	cmp	r3, r2
    2a34:	d3cd      	bcc.n	29d2 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2a36:	4b05      	ldr	r3, [pc, #20]	; (2a4c <Clock_Ip_DistributePll+0x15c>)
    2a38:	681b      	ldr	r3, [r3, #0]
    2a3a:	2104      	movs	r1, #4
    2a3c:	4618      	mov	r0, r3
    2a3e:	f002 fe0b 	bl	5658 <Clock_Ip_Command>
        }
    }
}
    2a42:	bf00      	nop
    2a44:	b003      	add	sp, #12
    2a46:	f85d fb04 	ldr.w	pc, [sp], #4
    2a4a:	bf00      	nop
    2a4c:	1fff8b44 	.word	0x1fff8b44
    2a50:	0000aaa0 	.word	0x0000aaa0
    2a54:	0000a654 	.word	0x0000a654
    2a58:	0000a624 	.word	0x0000a624
    2a5c:	0000ac8c 	.word	0x0000ac8c
    2a60:	1fff8b4c 	.word	0x1fff8b4c
    2a64:	0000a5f4 	.word	0x0000a5f4
    2a68:	0000abdc 	.word	0x0000abdc
    2a6c:	0000a644 	.word	0x0000a644
    2a70:	0000ac50 	.word	0x0000ac50

00002a74 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2a74:	b500      	push	{lr}
    2a76:	b085      	sub	sp, #20
    2a78:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2a7a:	490c      	ldr	r1, [pc, #48]	; (2aac <Clock_Ip_DisableClockMonitor+0x38>)
    2a7c:	9a01      	ldr	r2, [sp, #4]
    2a7e:	4613      	mov	r3, r2
    2a80:	00db      	lsls	r3, r3, #3
    2a82:	4413      	add	r3, r2
    2a84:	440b      	add	r3, r1
    2a86:	3301      	adds	r3, #1
    2a88:	781b      	ldrb	r3, [r3, #0]
    2a8a:	461a      	mov	r2, r3
    2a8c:	4b08      	ldr	r3, [pc, #32]	; (2ab0 <Clock_Ip_DisableClockMonitor+0x3c>)
    2a8e:	5c9b      	ldrb	r3, [r3, r2]
    2a90:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2a92:	4a08      	ldr	r2, [pc, #32]	; (2ab4 <Clock_Ip_DisableClockMonitor+0x40>)
    2a94:	9b03      	ldr	r3, [sp, #12]
    2a96:	011b      	lsls	r3, r3, #4
    2a98:	4413      	add	r3, r2
    2a9a:	3308      	adds	r3, #8
    2a9c:	681b      	ldr	r3, [r3, #0]
    2a9e:	9801      	ldr	r0, [sp, #4]
    2aa0:	4798      	blx	r3
}
    2aa2:	bf00      	nop
    2aa4:	b005      	add	sp, #20
    2aa6:	f85d fb04 	ldr.w	pc, [sp], #4
    2aaa:	bf00      	nop
    2aac:	0000a654 	.word	0x0000a654
    2ab0:	0000a644 	.word	0x0000a644
    2ab4:	0000ac50 	.word	0x0000ac50

00002ab8 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2ab8:	b082      	sub	sp, #8
    2aba:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2abc:	4a02      	ldr	r2, [pc, #8]	; (2ac8 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2abe:	9b01      	ldr	r3, [sp, #4]
    2ac0:	6013      	str	r3, [r2, #0]
}
    2ac2:	bf00      	nop
    2ac4:	b002      	add	sp, #8
    2ac6:	4770      	bx	lr
    2ac8:	1fff8b14 	.word	0x1fff8b14

00002acc <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2acc:	b500      	push	{lr}
    2ace:	b085      	sub	sp, #20
    2ad0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2ad2:	490c      	ldr	r1, [pc, #48]	; (2b04 <Clock_Ip_DisableModuleClock+0x38>)
    2ad4:	9a01      	ldr	r2, [sp, #4]
    2ad6:	4613      	mov	r3, r2
    2ad8:	00db      	lsls	r3, r3, #3
    2ada:	4413      	add	r3, r2
    2adc:	440b      	add	r3, r1
    2ade:	3301      	adds	r3, #1
    2ae0:	781b      	ldrb	r3, [r3, #0]
    2ae2:	461a      	mov	r2, r3
    2ae4:	4b08      	ldr	r3, [pc, #32]	; (2b08 <Clock_Ip_DisableModuleClock+0x3c>)
    2ae6:	5c9b      	ldrb	r3, [r3, r2]
    2ae8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2aea:	4a08      	ldr	r2, [pc, #32]	; (2b0c <Clock_Ip_DisableModuleClock+0x40>)
    2aec:	9b03      	ldr	r3, [sp, #12]
    2aee:	00db      	lsls	r3, r3, #3
    2af0:	4413      	add	r3, r2
    2af2:	685b      	ldr	r3, [r3, #4]
    2af4:	2101      	movs	r1, #1
    2af6:	9801      	ldr	r0, [sp, #4]
    2af8:	4798      	blx	r3
}
    2afa:	bf00      	nop
    2afc:	b005      	add	sp, #20
    2afe:	f85d fb04 	ldr.w	pc, [sp], #4
    2b02:	bf00      	nop
    2b04:	0000a654 	.word	0x0000a654
    2b08:	0000a5f4 	.word	0x0000a5f4
    2b0c:	0000abdc 	.word	0x0000abdc

00002b10 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2b10:	b500      	push	{lr}
    2b12:	b085      	sub	sp, #20
    2b14:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2b16:	490c      	ldr	r1, [pc, #48]	; (2b48 <Clock_Ip_EnableModuleClock+0x38>)
    2b18:	9a01      	ldr	r2, [sp, #4]
    2b1a:	4613      	mov	r3, r2
    2b1c:	00db      	lsls	r3, r3, #3
    2b1e:	4413      	add	r3, r2
    2b20:	440b      	add	r3, r1
    2b22:	3301      	adds	r3, #1
    2b24:	781b      	ldrb	r3, [r3, #0]
    2b26:	461a      	mov	r2, r3
    2b28:	4b08      	ldr	r3, [pc, #32]	; (2b4c <Clock_Ip_EnableModuleClock+0x3c>)
    2b2a:	5c9b      	ldrb	r3, [r3, r2]
    2b2c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2b2e:	4a08      	ldr	r2, [pc, #32]	; (2b50 <Clock_Ip_EnableModuleClock+0x40>)
    2b30:	9b03      	ldr	r3, [sp, #12]
    2b32:	00db      	lsls	r3, r3, #3
    2b34:	4413      	add	r3, r2
    2b36:	685b      	ldr	r3, [r3, #4]
    2b38:	2100      	movs	r1, #0
    2b3a:	9801      	ldr	r0, [sp, #4]
    2b3c:	4798      	blx	r3
}
    2b3e:	bf00      	nop
    2b40:	b005      	add	sp, #20
    2b42:	f85d fb04 	ldr.w	pc, [sp], #4
    2b46:	bf00      	nop
    2b48:	0000a654 	.word	0x0000a654
    2b4c:	0000a5f4 	.word	0x0000a5f4
    2b50:	0000abdc 	.word	0x0000abdc

00002b54 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2b54:	b500      	push	{lr}
    2b56:	b083      	sub	sp, #12
    2b58:	9001      	str	r0, [sp, #4]
    2b5a:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2b5c:	4b08      	ldr	r3, [pc, #32]	; (2b80 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2b5e:	2200      	movs	r2, #0
    2b60:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2b62:	4b08      	ldr	r3, [pc, #32]	; (2b84 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2b64:	681b      	ldr	r3, [r3, #0]
    2b66:	2102      	movs	r1, #2
    2b68:	4618      	mov	r0, r3
    2b6a:	f002 fd75 	bl	5658 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2b6e:	9900      	ldr	r1, [sp, #0]
    2b70:	9801      	ldr	r0, [sp, #4]
    2b72:	f002 fc51 	bl	5418 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2b76:	bf00      	nop
    2b78:	b003      	add	sp, #12
    2b7a:	f85d fb04 	ldr.w	pc, [sp], #4
    2b7e:	bf00      	nop
    2b80:	1fff8b10 	.word	0x1fff8b10
    2b84:	1fff8b44 	.word	0x1fff8b44

00002b88 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2b88:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2b8a:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2b8e:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2b90:	4b06      	ldr	r3, [pc, #24]	; (2bac <Clock_Ip_SetWaitStates+0x24>)
    2b92:	785b      	ldrb	r3, [r3, #1]
    2b94:	2b00      	cmp	r3, #0
    2b96:	d005      	beq.n	2ba4 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2b98:	9b01      	ldr	r3, [sp, #4]
    2b9a:	3b01      	subs	r3, #1
    2b9c:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2b9e:	9b01      	ldr	r3, [sp, #4]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d1f9      	bne.n	2b98 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2ba4:	bf00      	nop
    2ba6:	b002      	add	sp, #8
    2ba8:	4770      	bx	lr
    2baa:	bf00      	nop
    2bac:	1fff8b4c 	.word	0x1fff8b4c

00002bb0 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2bb0:	b500      	push	{lr}
    2bb2:	b083      	sub	sp, #12
    2bb4:	9001      	str	r0, [sp, #4]
    2bb6:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2bb8:	4b04      	ldr	r3, [pc, #16]	; (2bcc <Clock_Ip_ReportClockErrors+0x1c>)
    2bba:	681b      	ldr	r3, [r3, #0]
    2bbc:	9900      	ldr	r1, [sp, #0]
    2bbe:	9801      	ldr	r0, [sp, #4]
    2bc0:	4798      	blx	r3
}
    2bc2:	bf00      	nop
    2bc4:	b003      	add	sp, #12
    2bc6:	f85d fb04 	ldr.w	pc, [sp], #4
    2bca:	bf00      	nop
    2bcc:	1fff8b14 	.word	0x1fff8b14

00002bd0 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2bd0:	b500      	push	{lr}
    2bd2:	b085      	sub	sp, #20
    2bd4:	9003      	str	r0, [sp, #12]
    2bd6:	9102      	str	r1, [sp, #8]
    2bd8:	9201      	str	r2, [sp, #4]
    2bda:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2bdc:	2000      	movs	r0, #0
    2bde:	f7fe ffd1 	bl	1b84 <OsIf_GetCounter>
    2be2:	4602      	mov	r2, r0
    2be4:	9b03      	ldr	r3, [sp, #12]
    2be6:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2be8:	9b02      	ldr	r3, [sp, #8]
    2bea:	2200      	movs	r2, #0
    2bec:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2bee:	2100      	movs	r1, #0
    2bf0:	9800      	ldr	r0, [sp, #0]
    2bf2:	f7ff f813 	bl	1c1c <OsIf_MicrosToTicks>
    2bf6:	4602      	mov	r2, r0
    2bf8:	9b01      	ldr	r3, [sp, #4]
    2bfa:	601a      	str	r2, [r3, #0]
}
    2bfc:	bf00      	nop
    2bfe:	b005      	add	sp, #20
    2c00:	f85d fb04 	ldr.w	pc, [sp], #4

00002c04 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2c04:	b500      	push	{lr}
    2c06:	b087      	sub	sp, #28
    2c08:	9003      	str	r0, [sp, #12]
    2c0a:	9102      	str	r1, [sp, #8]
    2c0c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2c0e:	2300      	movs	r3, #0
    2c10:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2c14:	2100      	movs	r1, #0
    2c16:	9803      	ldr	r0, [sp, #12]
    2c18:	f7fe ffcd 	bl	1bb6 <OsIf_GetElapsed>
    2c1c:	4602      	mov	r2, r0
    2c1e:	9b02      	ldr	r3, [sp, #8]
    2c20:	681b      	ldr	r3, [r3, #0]
    2c22:	441a      	add	r2, r3
    2c24:	9b02      	ldr	r3, [sp, #8]
    2c26:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2c28:	9b02      	ldr	r3, [sp, #8]
    2c2a:	681b      	ldr	r3, [r3, #0]
    2c2c:	9a01      	ldr	r2, [sp, #4]
    2c2e:	429a      	cmp	r2, r3
    2c30:	d802      	bhi.n	2c38 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2c32:	2301      	movs	r3, #1
    2c34:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2c38:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2c3c:	4618      	mov	r0, r3
    2c3e:	b007      	add	sp, #28
    2c40:	f85d fb04 	ldr.w	pc, [sp], #4

00002c44 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2c44:	b082      	sub	sp, #8
    2c46:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2c48:	bf00      	nop
    2c4a:	b002      	add	sp, #8
    2c4c:	4770      	bx	lr

00002c4e <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2c4e:	b500      	push	{lr}
    2c50:	b083      	sub	sp, #12
    2c52:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c54:	9b01      	ldr	r3, [sp, #4]
    2c56:	2b00      	cmp	r3, #0
    2c58:	d002      	beq.n	2c60 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2c5a:	9801      	ldr	r0, [sp, #4]
    2c5c:	f000 f8ad 	bl	2dba <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c60:	bf00      	nop
    2c62:	b003      	add	sp, #12
    2c64:	f85d fb04 	ldr.w	pc, [sp], #4

00002c68 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2c68:	b500      	push	{lr}
    2c6a:	b083      	sub	sp, #12
    2c6c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c6e:	9b01      	ldr	r3, [sp, #4]
    2c70:	2b00      	cmp	r3, #0
    2c72:	d002      	beq.n	2c7a <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2c74:	9801      	ldr	r0, [sp, #4]
    2c76:	f000 f8cd 	bl	2e14 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c7a:	bf00      	nop
    2c7c:	b003      	add	sp, #12
    2c7e:	f85d fb04 	ldr.w	pc, [sp], #4

00002c82 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2c82:	b500      	push	{lr}
    2c84:	b083      	sub	sp, #12
    2c86:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2c88:	9b01      	ldr	r3, [sp, #4]
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	d002      	beq.n	2c94 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2c8e:	9801      	ldr	r0, [sp, #4]
    2c90:	f000 f8ee 	bl	2e70 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2c94:	bf00      	nop
    2c96:	b003      	add	sp, #12
    2c98:	f85d fb04 	ldr.w	pc, [sp], #4

00002c9c <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2c9c:	b500      	push	{lr}
    2c9e:	b083      	sub	sp, #12
    2ca0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ca2:	9b01      	ldr	r3, [sp, #4]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d002      	beq.n	2cae <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2ca8:	9801      	ldr	r0, [sp, #4]
    2caa:	f000 f8f9 	bl	2ea0 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cae:	bf00      	nop
    2cb0:	b003      	add	sp, #12
    2cb2:	f85d fb04 	ldr.w	pc, [sp], #4

00002cb6 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2cb6:	b500      	push	{lr}
    2cb8:	b083      	sub	sp, #12
    2cba:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cbc:	9b01      	ldr	r3, [sp, #4]
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d002      	beq.n	2cc8 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2cc2:	9801      	ldr	r0, [sp, #4]
    2cc4:	f000 f904 	bl	2ed0 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cc8:	bf00      	nop
    2cca:	b003      	add	sp, #12
    2ccc:	f85d fb04 	ldr.w	pc, [sp], #4

00002cd0 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2cd0:	b500      	push	{lr}
    2cd2:	b083      	sub	sp, #12
    2cd4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cd6:	9b01      	ldr	r3, [sp, #4]
    2cd8:	2b00      	cmp	r3, #0
    2cda:	d002      	beq.n	2ce2 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2cdc:	9801      	ldr	r0, [sp, #4]
    2cde:	f000 f90f 	bl	2f00 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ce2:	bf00      	nop
    2ce4:	b003      	add	sp, #12
    2ce6:	f85d fb04 	ldr.w	pc, [sp], #4

00002cea <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2cea:	b500      	push	{lr}
    2cec:	b083      	sub	sp, #12
    2cee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cf0:	9b01      	ldr	r3, [sp, #4]
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d002      	beq.n	2cfc <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2cf6:	9801      	ldr	r0, [sp, #4]
    2cf8:	f000 f91a 	bl	2f30 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cfc:	bf00      	nop
    2cfe:	b003      	add	sp, #12
    2d00:	f85d fb04 	ldr.w	pc, [sp], #4

00002d04 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d04:	b500      	push	{lr}
    2d06:	b083      	sub	sp, #12
    2d08:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d0a:	9b01      	ldr	r3, [sp, #4]
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	d002      	beq.n	2d16 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2d10:	9801      	ldr	r0, [sp, #4]
    2d12:	f000 f925 	bl	2f60 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d16:	bf00      	nop
    2d18:	b003      	add	sp, #12
    2d1a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d1e <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2d1e:	b500      	push	{lr}
    2d20:	b083      	sub	sp, #12
    2d22:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d24:	9b01      	ldr	r3, [sp, #4]
    2d26:	2b00      	cmp	r3, #0
    2d28:	d002      	beq.n	2d30 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2d2a:	9801      	ldr	r0, [sp, #4]
    2d2c:	f000 f930 	bl	2f90 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d30:	bf00      	nop
    2d32:	b003      	add	sp, #12
    2d34:	f85d fb04 	ldr.w	pc, [sp], #4

00002d38 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2d38:	b500      	push	{lr}
    2d3a:	b083      	sub	sp, #12
    2d3c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d3e:	9b01      	ldr	r3, [sp, #4]
    2d40:	2b00      	cmp	r3, #0
    2d42:	d002      	beq.n	2d4a <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2d44:	9801      	ldr	r0, [sp, #4]
    2d46:	f000 f93b 	bl	2fc0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d4a:	bf00      	nop
    2d4c:	b003      	add	sp, #12
    2d4e:	f85d fb04 	ldr.w	pc, [sp], #4

00002d52 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d52:	b500      	push	{lr}
    2d54:	b083      	sub	sp, #12
    2d56:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d58:	9b01      	ldr	r3, [sp, #4]
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	d002      	beq.n	2d64 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2d5e:	9801      	ldr	r0, [sp, #4]
    2d60:	f000 f946 	bl	2ff0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d64:	bf00      	nop
    2d66:	b003      	add	sp, #12
    2d68:	f85d fb04 	ldr.w	pc, [sp], #4

00002d6c <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2d6c:	b500      	push	{lr}
    2d6e:	b083      	sub	sp, #12
    2d70:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d72:	9b01      	ldr	r3, [sp, #4]
    2d74:	2b00      	cmp	r3, #0
    2d76:	d002      	beq.n	2d7e <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2d78:	9801      	ldr	r0, [sp, #4]
    2d7a:	f000 f951 	bl	3020 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d7e:	bf00      	nop
    2d80:	b003      	add	sp, #12
    2d82:	f85d fb04 	ldr.w	pc, [sp], #4

00002d86 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2d86:	b500      	push	{lr}
    2d88:	b083      	sub	sp, #12
    2d8a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d8c:	9b01      	ldr	r3, [sp, #4]
    2d8e:	2b00      	cmp	r3, #0
    2d90:	d002      	beq.n	2d98 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2d92:	9801      	ldr	r0, [sp, #4]
    2d94:	f000 f95e 	bl	3054 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d98:	bf00      	nop
    2d9a:	b003      	add	sp, #12
    2d9c:	f85d fb04 	ldr.w	pc, [sp], #4

00002da0 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2da0:	b500      	push	{lr}
    2da2:	b083      	sub	sp, #12
    2da4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2da6:	9b01      	ldr	r3, [sp, #4]
    2da8:	2b00      	cmp	r3, #0
    2daa:	d002      	beq.n	2db2 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2dac:	9801      	ldr	r0, [sp, #4]
    2dae:	f000 f98b 	bl	30c8 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2db2:	bf00      	nop
    2db4:	b003      	add	sp, #12
    2db6:	f85d fb04 	ldr.w	pc, [sp], #4

00002dba <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2dba:	b086      	sub	sp, #24
    2dbc:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2dbe:	9b01      	ldr	r3, [sp, #4]
    2dc0:	681a      	ldr	r2, [r3, #0]
    2dc2:	4911      	ldr	r1, [pc, #68]	; (2e08 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2dc4:	4613      	mov	r3, r2
    2dc6:	00db      	lsls	r3, r3, #3
    2dc8:	4413      	add	r3, r2
    2dca:	440b      	add	r3, r1
    2dcc:	781b      	ldrb	r3, [r3, #0]
    2dce:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2dd0:	9b01      	ldr	r3, [sp, #4]
    2dd2:	685b      	ldr	r3, [r3, #4]
    2dd4:	4a0d      	ldr	r2, [pc, #52]	; (2e0c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2dd6:	5cd3      	ldrb	r3, [r2, r3]
    2dd8:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2dda:	4a0d      	ldr	r2, [pc, #52]	; (2e10 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2ddc:	9b05      	ldr	r3, [sp, #20]
    2dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2de2:	681b      	ldr	r3, [r3, #0]
    2de4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2de6:	9b03      	ldr	r3, [sp, #12]
    2de8:	f023 0307 	bic.w	r3, r3, #7
    2dec:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2dee:	9a03      	ldr	r2, [sp, #12]
    2df0:	9b04      	ldr	r3, [sp, #16]
    2df2:	4313      	orrs	r3, r2
    2df4:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2df6:	4a06      	ldr	r2, [pc, #24]	; (2e10 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2df8:	9b05      	ldr	r3, [sp, #20]
    2dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2dfe:	9a03      	ldr	r2, [sp, #12]
    2e00:	601a      	str	r2, [r3, #0]
}
    2e02:	bf00      	nop
    2e04:	b006      	add	sp, #24
    2e06:	4770      	bx	lr
    2e08:	0000a654 	.word	0x0000a654
    2e0c:	0000aa4c 	.word	0x0000aa4c
    2e10:	0000aa90 	.word	0x0000aa90

00002e14 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e14:	b086      	sub	sp, #24
    2e16:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2e18:	9b01      	ldr	r3, [sp, #4]
    2e1a:	681a      	ldr	r2, [r3, #0]
    2e1c:	4911      	ldr	r1, [pc, #68]	; (2e64 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2e1e:	4613      	mov	r3, r2
    2e20:	00db      	lsls	r3, r3, #3
    2e22:	4413      	add	r3, r2
    2e24:	440b      	add	r3, r1
    2e26:	781b      	ldrb	r3, [r3, #0]
    2e28:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2e2a:	9b01      	ldr	r3, [sp, #4]
    2e2c:	685b      	ldr	r3, [r3, #4]
    2e2e:	4a0e      	ldr	r2, [pc, #56]	; (2e68 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2e30:	5cd3      	ldrb	r3, [r2, r3]
    2e32:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2e34:	4a0d      	ldr	r2, [pc, #52]	; (2e6c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e36:	9b05      	ldr	r3, [sp, #20]
    2e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e3c:	681b      	ldr	r3, [r3, #0]
    2e3e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2e40:	9b03      	ldr	r3, [sp, #12]
    2e42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2e46:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2e48:	9b04      	ldr	r3, [sp, #16]
    2e4a:	021b      	lsls	r3, r3, #8
    2e4c:	9a03      	ldr	r2, [sp, #12]
    2e4e:	4313      	orrs	r3, r2
    2e50:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2e52:	4a06      	ldr	r2, [pc, #24]	; (2e6c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e54:	9b05      	ldr	r3, [sp, #20]
    2e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e5a:	9a03      	ldr	r2, [sp, #12]
    2e5c:	601a      	str	r2, [r3, #0]
}
    2e5e:	bf00      	nop
    2e60:	b006      	add	sp, #24
    2e62:	4770      	bx	lr
    2e64:	0000a654 	.word	0x0000a654
    2e68:	0000aa4c 	.word	0x0000aa4c
    2e6c:	0000aa90 	.word	0x0000aa90

00002e70 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e70:	b084      	sub	sp, #16
    2e72:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2e74:	4b09      	ldr	r3, [pc, #36]	; (2e9c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e76:	695b      	ldr	r3, [r3, #20]
    2e78:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2e7a:	9b03      	ldr	r3, [sp, #12]
    2e7c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2e80:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2e82:	9b01      	ldr	r3, [sp, #4]
    2e84:	685b      	ldr	r3, [r3, #4]
    2e86:	3b01      	subs	r3, #1
    2e88:	041b      	lsls	r3, r3, #16
    2e8a:	9a03      	ldr	r2, [sp, #12]
    2e8c:	4313      	orrs	r3, r2
    2e8e:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2e90:	4a02      	ldr	r2, [pc, #8]	; (2e9c <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2e92:	9b03      	ldr	r3, [sp, #12]
    2e94:	6153      	str	r3, [r2, #20]
}
    2e96:	bf00      	nop
    2e98:	b004      	add	sp, #16
    2e9a:	4770      	bx	lr
    2e9c:	40064000 	.word	0x40064000

00002ea0 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ea0:	b084      	sub	sp, #16
    2ea2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2ea4:	4b09      	ldr	r3, [pc, #36]	; (2ecc <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2ea6:	695b      	ldr	r3, [r3, #20]
    2ea8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2eaa:	9b03      	ldr	r3, [sp, #12]
    2eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2eb0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2eb2:	9b01      	ldr	r3, [sp, #4]
    2eb4:	685b      	ldr	r3, [r3, #4]
    2eb6:	3b01      	subs	r3, #1
    2eb8:	011b      	lsls	r3, r3, #4
    2eba:	9a03      	ldr	r2, [sp, #12]
    2ebc:	4313      	orrs	r3, r2
    2ebe:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2ec0:	4a02      	ldr	r2, [pc, #8]	; (2ecc <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2ec2:	9b03      	ldr	r3, [sp, #12]
    2ec4:	6153      	str	r3, [r2, #20]
}
    2ec6:	bf00      	nop
    2ec8:	b004      	add	sp, #16
    2eca:	4770      	bx	lr
    2ecc:	40064000 	.word	0x40064000

00002ed0 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ed0:	b084      	sub	sp, #16
    2ed2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2ed4:	4b09      	ldr	r3, [pc, #36]	; (2efc <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2ed6:	695b      	ldr	r3, [r3, #20]
    2ed8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2eda:	9b03      	ldr	r3, [sp, #12]
    2edc:	f023 030f 	bic.w	r3, r3, #15
    2ee0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2ee2:	9b01      	ldr	r3, [sp, #4]
    2ee4:	685b      	ldr	r3, [r3, #4]
    2ee6:	3b01      	subs	r3, #1
    2ee8:	9a03      	ldr	r2, [sp, #12]
    2eea:	4313      	orrs	r3, r2
    2eec:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2eee:	4a03      	ldr	r2, [pc, #12]	; (2efc <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2ef0:	9b03      	ldr	r3, [sp, #12]
    2ef2:	6153      	str	r3, [r2, #20]
}
    2ef4:	bf00      	nop
    2ef6:	b004      	add	sp, #16
    2ef8:	4770      	bx	lr
    2efa:	bf00      	nop
    2efc:	40064000 	.word	0x40064000

00002f00 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f00:	b084      	sub	sp, #16
    2f02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f04:	4b09      	ldr	r3, [pc, #36]	; (2f2c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f06:	699b      	ldr	r3, [r3, #24]
    2f08:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2f0a:	9b03      	ldr	r3, [sp, #12]
    2f0c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2f10:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2f12:	9b01      	ldr	r3, [sp, #4]
    2f14:	685b      	ldr	r3, [r3, #4]
    2f16:	3b01      	subs	r3, #1
    2f18:	041b      	lsls	r3, r3, #16
    2f1a:	9a03      	ldr	r2, [sp, #12]
    2f1c:	4313      	orrs	r3, r2
    2f1e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f20:	4a02      	ldr	r2, [pc, #8]	; (2f2c <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f22:	9b03      	ldr	r3, [sp, #12]
    2f24:	6193      	str	r3, [r2, #24]
}
    2f26:	bf00      	nop
    2f28:	b004      	add	sp, #16
    2f2a:	4770      	bx	lr
    2f2c:	40064000 	.word	0x40064000

00002f30 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f30:	b084      	sub	sp, #16
    2f32:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f34:	4b09      	ldr	r3, [pc, #36]	; (2f5c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f36:	699b      	ldr	r3, [r3, #24]
    2f38:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2f3a:	9b03      	ldr	r3, [sp, #12]
    2f3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f40:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2f42:	9b01      	ldr	r3, [sp, #4]
    2f44:	685b      	ldr	r3, [r3, #4]
    2f46:	3b01      	subs	r3, #1
    2f48:	011b      	lsls	r3, r3, #4
    2f4a:	9a03      	ldr	r2, [sp, #12]
    2f4c:	4313      	orrs	r3, r2
    2f4e:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f50:	4a02      	ldr	r2, [pc, #8]	; (2f5c <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f52:	9b03      	ldr	r3, [sp, #12]
    2f54:	6193      	str	r3, [r2, #24]
}
    2f56:	bf00      	nop
    2f58:	b004      	add	sp, #16
    2f5a:	4770      	bx	lr
    2f5c:	40064000 	.word	0x40064000

00002f60 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f60:	b084      	sub	sp, #16
    2f62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f64:	4b09      	ldr	r3, [pc, #36]	; (2f8c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f66:	699b      	ldr	r3, [r3, #24]
    2f68:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2f6a:	9b03      	ldr	r3, [sp, #12]
    2f6c:	f023 030f 	bic.w	r3, r3, #15
    2f70:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2f72:	9b01      	ldr	r3, [sp, #4]
    2f74:	685b      	ldr	r3, [r3, #4]
    2f76:	3b01      	subs	r3, #1
    2f78:	9a03      	ldr	r2, [sp, #12]
    2f7a:	4313      	orrs	r3, r2
    2f7c:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f7e:	4a03      	ldr	r2, [pc, #12]	; (2f8c <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2f80:	9b03      	ldr	r3, [sp, #12]
    2f82:	6193      	str	r3, [r2, #24]
}
    2f84:	bf00      	nop
    2f86:	b004      	add	sp, #16
    2f88:	4770      	bx	lr
    2f8a:	bf00      	nop
    2f8c:	40064000 	.word	0x40064000

00002f90 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f90:	b084      	sub	sp, #16
    2f92:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2f94:	4b09      	ldr	r3, [pc, #36]	; (2fbc <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2f96:	69db      	ldr	r3, [r3, #28]
    2f98:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2f9a:	9b03      	ldr	r3, [sp, #12]
    2f9c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2fa0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2fa2:	9b01      	ldr	r3, [sp, #4]
    2fa4:	685b      	ldr	r3, [r3, #4]
    2fa6:	3b01      	subs	r3, #1
    2fa8:	041b      	lsls	r3, r3, #16
    2faa:	9a03      	ldr	r2, [sp, #12]
    2fac:	4313      	orrs	r3, r2
    2fae:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2fb0:	4a02      	ldr	r2, [pc, #8]	; (2fbc <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2fb2:	9b03      	ldr	r3, [sp, #12]
    2fb4:	61d3      	str	r3, [r2, #28]
}
    2fb6:	bf00      	nop
    2fb8:	b004      	add	sp, #16
    2fba:	4770      	bx	lr
    2fbc:	40064000 	.word	0x40064000

00002fc0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fc0:	b084      	sub	sp, #16
    2fc2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2fc4:	4b09      	ldr	r3, [pc, #36]	; (2fec <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2fc6:	69db      	ldr	r3, [r3, #28]
    2fc8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    2fca:	9b03      	ldr	r3, [sp, #12]
    2fcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2fd0:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2fd2:	9b01      	ldr	r3, [sp, #4]
    2fd4:	685b      	ldr	r3, [r3, #4]
    2fd6:	3b01      	subs	r3, #1
    2fd8:	011b      	lsls	r3, r3, #4
    2fda:	9a03      	ldr	r2, [sp, #12]
    2fdc:	4313      	orrs	r3, r2
    2fde:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2fe0:	4a02      	ldr	r2, [pc, #8]	; (2fec <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2fe2:	9b03      	ldr	r3, [sp, #12]
    2fe4:	61d3      	str	r3, [r2, #28]
}
    2fe6:	bf00      	nop
    2fe8:	b004      	add	sp, #16
    2fea:	4770      	bx	lr
    2fec:	40064000 	.word	0x40064000

00002ff0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ff0:	b084      	sub	sp, #16
    2ff2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2ff4:	4b09      	ldr	r3, [pc, #36]	; (301c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    2ff6:	69db      	ldr	r3, [r3, #28]
    2ff8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    2ffa:	9b03      	ldr	r3, [sp, #12]
    2ffc:	f023 030f 	bic.w	r3, r3, #15
    3000:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    3002:	9b01      	ldr	r3, [sp, #4]
    3004:	685b      	ldr	r3, [r3, #4]
    3006:	3b01      	subs	r3, #1
    3008:	9a03      	ldr	r2, [sp, #12]
    300a:	4313      	orrs	r3, r2
    300c:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    300e:	4a03      	ldr	r2, [pc, #12]	; (301c <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3010:	9b03      	ldr	r3, [sp, #12]
    3012:	61d3      	str	r3, [r2, #28]
}
    3014:	bf00      	nop
    3016:	b004      	add	sp, #16
    3018:	4770      	bx	lr
    301a:	bf00      	nop
    301c:	40064000 	.word	0x40064000

00003020 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3020:	b084      	sub	sp, #16
    3022:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3024:	4b0a      	ldr	r3, [pc, #40]	; (3050 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3026:	685b      	ldr	r3, [r3, #4]
    3028:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    302a:	9b03      	ldr	r3, [sp, #12]
    302c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3030:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    3032:	9b01      	ldr	r3, [sp, #4]
    3034:	685b      	ldr	r3, [r3, #4]
    3036:	3b01      	subs	r3, #1
    3038:	021b      	lsls	r3, r3, #8
    303a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    303e:	9a03      	ldr	r2, [sp, #12]
    3040:	4313      	orrs	r3, r2
    3042:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3044:	4a02      	ldr	r2, [pc, #8]	; (3050 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3046:	9b03      	ldr	r3, [sp, #12]
    3048:	6053      	str	r3, [r2, #4]
}
    304a:	bf00      	nop
    304c:	b004      	add	sp, #16
    304e:	4770      	bx	lr
    3050:	40048000 	.word	0x40048000

00003054 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3054:	b084      	sub	sp, #16
    3056:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    3058:	4919      	ldr	r1, [pc, #100]	; (30c0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    305a:	9b01      	ldr	r3, [sp, #4]
    305c:	681a      	ldr	r2, [r3, #0]
    305e:	4819      	ldr	r0, [pc, #100]	; (30c4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    3060:	4613      	mov	r3, r2
    3062:	00db      	lsls	r3, r3, #3
    3064:	4413      	add	r3, r2
    3066:	4403      	add	r3, r0
    3068:	3305      	adds	r3, #5
    306a:	781b      	ldrb	r3, [r3, #0]
    306c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3070:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    3072:	9b03      	ldr	r3, [sp, #12]
    3074:	f023 030f 	bic.w	r3, r3, #15
    3078:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    307a:	9b01      	ldr	r3, [sp, #4]
    307c:	685b      	ldr	r3, [r3, #4]
    307e:	3b01      	subs	r3, #1
    3080:	f003 0307 	and.w	r3, r3, #7
    3084:	9a03      	ldr	r2, [sp, #12]
    3086:	4313      	orrs	r3, r2
    3088:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    308a:	9b01      	ldr	r3, [sp, #4]
    308c:	7a1b      	ldrb	r3, [r3, #8]
    308e:	3b01      	subs	r3, #1
    3090:	00db      	lsls	r3, r3, #3
    3092:	f003 0308 	and.w	r3, r3, #8
    3096:	9a03      	ldr	r2, [sp, #12]
    3098:	4313      	orrs	r3, r2
    309a:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    309c:	4908      	ldr	r1, [pc, #32]	; (30c0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    309e:	9b01      	ldr	r3, [sp, #4]
    30a0:	681a      	ldr	r2, [r3, #0]
    30a2:	4808      	ldr	r0, [pc, #32]	; (30c4 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    30a4:	4613      	mov	r3, r2
    30a6:	00db      	lsls	r3, r3, #3
    30a8:	4413      	add	r3, r2
    30aa:	4403      	add	r3, r0
    30ac:	3305      	adds	r3, #5
    30ae:	781b      	ldrb	r3, [r3, #0]
    30b0:	461a      	mov	r2, r3
    30b2:	9b03      	ldr	r3, [sp, #12]
    30b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    30b8:	bf00      	nop
    30ba:	b004      	add	sp, #16
    30bc:	4770      	bx	lr
    30be:	bf00      	nop
    30c0:	40065000 	.word	0x40065000
    30c4:	0000a654 	.word	0x0000a654

000030c8 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30c8:	b084      	sub	sp, #16
    30ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    30cc:	4b10      	ldr	r3, [pc, #64]	; (3110 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    30d0:	4a0f      	ldr	r2, [pc, #60]	; (3110 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    30d6:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    30d8:	4b0d      	ldr	r3, [pc, #52]	; (3110 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    30da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    30dc:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    30de:	9b03      	ldr	r3, [sp, #12]
    30e0:	f023 030f 	bic.w	r3, r3, #15
    30e4:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    30e6:	9b01      	ldr	r3, [sp, #4]
    30e8:	685b      	ldr	r3, [r3, #4]
    30ea:	3b01      	subs	r3, #1
    30ec:	005b      	lsls	r3, r3, #1
    30ee:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    30f2:	9b01      	ldr	r3, [sp, #4]
    30f4:	7a1b      	ldrb	r3, [r3, #8]
    30f6:	3b01      	subs	r3, #1
    30f8:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    30fc:	4313      	orrs	r3, r2
    30fe:	9a03      	ldr	r2, [sp, #12]
    3100:	4313      	orrs	r3, r2
    3102:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3104:	4a02      	ldr	r2, [pc, #8]	; (3110 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3106:	9b03      	ldr	r3, [sp, #12]
    3108:	6693      	str	r3, [r2, #104]	; 0x68
}
    310a:	bf00      	nop
    310c:	b004      	add	sp, #16
    310e:	4770      	bx	lr
    3110:	40048000 	.word	0x40048000

00003114 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3114:	b082      	sub	sp, #8
    3116:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3118:	bf00      	nop
    311a:	b002      	add	sp, #8
    311c:	4770      	bx	lr
	...

00003120 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3120:	b082      	sub	sp, #8
    3122:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3124:	bf00      	nop
    3126:	b002      	add	sp, #8
    3128:	4770      	bx	lr

0000312a <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    312a:	b082      	sub	sp, #8
    312c:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    312e:	bf00      	nop
    3130:	b002      	add	sp, #8
    3132:	4770      	bx	lr

00003134 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3134:	b500      	push	{lr}
    3136:	b083      	sub	sp, #12
    3138:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    313a:	9b01      	ldr	r3, [sp, #4]
    313c:	2b00      	cmp	r3, #0
    313e:	d002      	beq.n	3146 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3140:	9801      	ldr	r0, [sp, #4]
    3142:	f000 f86a 	bl	321a <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3146:	bf00      	nop
    3148:	b003      	add	sp, #12
    314a:	f85d fb04 	ldr.w	pc, [sp], #4

0000314e <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    314e:	b500      	push	{lr}
    3150:	b083      	sub	sp, #12
    3152:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3154:	9b01      	ldr	r3, [sp, #4]
    3156:	2b00      	cmp	r3, #0
    3158:	d002      	beq.n	3160 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    315a:	9801      	ldr	r0, [sp, #4]
    315c:	f000 f884 	bl	3268 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    3160:	bf00      	nop
    3162:	b003      	add	sp, #12
    3164:	f85d fb04 	ldr.w	pc, [sp], #4

00003168 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3168:	b500      	push	{lr}
    316a:	b089      	sub	sp, #36	; 0x24
    316c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    316e:	2300      	movs	r3, #0
    3170:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    3174:	9b01      	ldr	r3, [sp, #4]
    3176:	2b00      	cmp	r3, #0
    3178:	d031      	beq.n	31de <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    317a:	4b1b      	ldr	r3, [pc, #108]	; (31e8 <Clock_Ip_CompleteSOSC+0x80>)
    317c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3180:	f003 0301 	and.w	r3, r3, #1
    3184:	2b00      	cmp	r3, #0
    3186:	d02a      	beq.n	31de <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3188:	aa03      	add	r2, sp, #12
    318a:	a904      	add	r1, sp, #16
    318c:	a805      	add	r0, sp, #20
    318e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3192:	f7ff fd1d 	bl	2bd0 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    3196:	4b14      	ldr	r3, [pc, #80]	; (31e8 <Clock_Ip_CompleteSOSC+0x80>)
    3198:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    319c:	0e1b      	lsrs	r3, r3, #24
    319e:	f003 0301 	and.w	r3, r3, #1
    31a2:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    31a4:	9a03      	ldr	r2, [sp, #12]
    31a6:	a904      	add	r1, sp, #16
    31a8:	ab05      	add	r3, sp, #20
    31aa:	4618      	mov	r0, r3
    31ac:	f7ff fd2a 	bl	2c04 <Clock_Ip_TimeoutExpired>
    31b0:	4603      	mov	r3, r0
    31b2:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    31b6:	9b06      	ldr	r3, [sp, #24]
    31b8:	2b00      	cmp	r3, #0
    31ba:	d106      	bne.n	31ca <Clock_Ip_CompleteSOSC+0x62>
    31bc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31c0:	f083 0301 	eor.w	r3, r3, #1
    31c4:	b2db      	uxtb	r3, r3
    31c6:	2b00      	cmp	r3, #0
    31c8:	d1e5      	bne.n	3196 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    31ca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    31ce:	2b00      	cmp	r3, #0
    31d0:	d005      	beq.n	31de <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    31d2:	9b01      	ldr	r3, [sp, #4]
    31d4:	681b      	ldr	r3, [r3, #0]
    31d6:	4619      	mov	r1, r3
    31d8:	2001      	movs	r0, #1
    31da:	f7ff fce9 	bl	2bb0 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    31de:	bf00      	nop
    31e0:	b009      	add	sp, #36	; 0x24
    31e2:	f85d fb04 	ldr.w	pc, [sp], #4
    31e6:	bf00      	nop
    31e8:	40064000 	.word	0x40064000

000031ec <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    31ec:	b500      	push	{lr}
    31ee:	b083      	sub	sp, #12
    31f0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    31f2:	9801      	ldr	r0, [sp, #4]
    31f4:	f000 f8c0 	bl	3378 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    31f8:	bf00      	nop
    31fa:	b003      	add	sp, #12
    31fc:	f85d fb04 	ldr.w	pc, [sp], #4

00003200 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3200:	b500      	push	{lr}
    3202:	b083      	sub	sp, #12
    3204:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3206:	9b01      	ldr	r3, [sp, #4]
    3208:	2b00      	cmp	r3, #0
    320a:	d002      	beq.n	3212 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    320c:	9801      	ldr	r0, [sp, #4]
    320e:	f000 f8c3 	bl	3398 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3212:	bf00      	nop
    3214:	b003      	add	sp, #12
    3216:	f85d fb04 	ldr.w	pc, [sp], #4

0000321a <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    321a:	b082      	sub	sp, #8
    321c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    321e:	4b11      	ldr	r3, [pc, #68]	; (3264 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3220:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3224:	4a0f      	ldr	r2, [pc, #60]	; (3264 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3226:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    322a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    322e:	4b0d      	ldr	r3, [pc, #52]	; (3264 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3230:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3234:	4a0b      	ldr	r2, [pc, #44]	; (3264 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    323a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    323e:	4b09      	ldr	r3, [pc, #36]	; (3264 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3240:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3244:	4a07      	ldr	r2, [pc, #28]	; (3264 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3246:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    324a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    324e:	4b05      	ldr	r3, [pc, #20]	; (3264 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3250:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3254:	4a03      	ldr	r2, [pc, #12]	; (3264 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3256:	f023 0301 	bic.w	r3, r3, #1
    325a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    325e:	bf00      	nop
    3260:	b002      	add	sp, #8
    3262:	4770      	bx	lr
    3264:	40064000 	.word	0x40064000

00003268 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3268:	b082      	sub	sp, #8
    326a:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    326c:	9b01      	ldr	r3, [sp, #4]
    326e:	891b      	ldrh	r3, [r3, #8]
    3270:	2b01      	cmp	r3, #1
    3272:	d174      	bne.n	335e <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    3274:	9b01      	ldr	r3, [sp, #4]
    3276:	7bdb      	ldrb	r3, [r3, #15]
    3278:	2b00      	cmp	r3, #0
    327a:	d002      	beq.n	3282 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    327c:	2b01      	cmp	r3, #1
    327e:	d009      	beq.n	3294 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    3280:	e011      	b.n	32a6 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    3282:	4b39      	ldr	r3, [pc, #228]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3284:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3288:	4a37      	ldr	r2, [pc, #220]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    328a:	f023 0308 	bic.w	r3, r3, #8
    328e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    3292:	e008      	b.n	32a6 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    3294:	4b34      	ldr	r3, [pc, #208]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3296:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    329a:	4a33      	ldr	r2, [pc, #204]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    329c:	f043 0308 	orr.w	r3, r3, #8
    32a0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    32a4:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    32a6:	4b30      	ldr	r3, [pc, #192]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32ac:	4a2e      	ldr	r2, [pc, #184]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    32b2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    32b6:	9b01      	ldr	r3, [sp, #4]
    32b8:	685b      	ldr	r3, [r3, #4]
    32ba:	4a2c      	ldr	r2, [pc, #176]	; (336c <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    32bc:	4293      	cmp	r3, r2
    32be:	d90d      	bls.n	32dc <Clock_Ip_SetSOSC_TrustedCall+0x74>
    32c0:	9b01      	ldr	r3, [sp, #4]
    32c2:	685b      	ldr	r3, [r3, #4]
    32c4:	4a2a      	ldr	r2, [pc, #168]	; (3370 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    32c6:	4293      	cmp	r3, r2
    32c8:	d208      	bcs.n	32dc <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    32ca:	4b27      	ldr	r3, [pc, #156]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32d0:	4a25      	ldr	r2, [pc, #148]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32d2:	f043 0320 	orr.w	r3, r3, #32
    32d6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    32da:	e007      	b.n	32ec <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    32dc:	4b22      	ldr	r3, [pc, #136]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32e2:	4a21      	ldr	r2, [pc, #132]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32e4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    32e8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    32ec:	9b01      	ldr	r3, [sp, #4]
    32ee:	7b1b      	ldrb	r3, [r3, #12]
    32f0:	2b00      	cmp	r3, #0
    32f2:	d108      	bne.n	3306 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    32f4:	4b1c      	ldr	r3, [pc, #112]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32fa:	4a1b      	ldr	r2, [pc, #108]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32fc:	f043 0304 	orr.w	r3, r3, #4
    3300:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3304:	e007      	b.n	3316 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    3306:	4b18      	ldr	r3, [pc, #96]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3308:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    330c:	4a16      	ldr	r2, [pc, #88]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    330e:	f023 0304 	bic.w	r3, r3, #4
    3312:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3316:	9b01      	ldr	r3, [sp, #4]
    3318:	7c1b      	ldrb	r3, [r3, #16]
    331a:	2b02      	cmp	r3, #2
    331c:	d011      	beq.n	3342 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    331e:	2b02      	cmp	r3, #2
    3320:	dc14      	bgt.n	334c <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    3322:	2b00      	cmp	r3, #0
    3324:	d002      	beq.n	332c <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3326:	2b01      	cmp	r3, #1
    3328:	d005      	beq.n	3336 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    332a:	e00f      	b.n	334c <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    332c:	4b0e      	ldr	r3, [pc, #56]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    332e:	2201      	movs	r2, #1
    3330:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3334:	e014      	b.n	3360 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3336:	4b0c      	ldr	r3, [pc, #48]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3338:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    333c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3340:	e00e      	b.n	3360 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3342:	4b09      	ldr	r3, [pc, #36]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3344:	4a0b      	ldr	r2, [pc, #44]	; (3374 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3346:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    334a:	e009      	b.n	3360 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    334c:	4b06      	ldr	r3, [pc, #24]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    334e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3352:	4a05      	ldr	r2, [pc, #20]	; (3368 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3354:	f043 0301 	orr.w	r3, r3, #1
    3358:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    335c:	e000      	b.n	3360 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    335e:	bf00      	nop
}
    3360:	bf00      	nop
    3362:	b002      	add	sp, #8
    3364:	4770      	bx	lr
    3366:	bf00      	nop
    3368:	40064000 	.word	0x40064000
    336c:	003d08ff 	.word	0x003d08ff
    3370:	007a1200 	.word	0x007a1200
    3374:	00030001 	.word	0x00030001

00003378 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    3378:	b082      	sub	sp, #8
    337a:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    337c:	4b05      	ldr	r3, [pc, #20]	; (3394 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    337e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3382:	4a04      	ldr	r2, [pc, #16]	; (3394 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    3384:	f023 0301 	bic.w	r3, r3, #1
    3388:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    338c:	bf00      	nop
    338e:	b002      	add	sp, #8
    3390:	4770      	bx	lr
    3392:	bf00      	nop
    3394:	40064000 	.word	0x40064000

00003398 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3398:	b082      	sub	sp, #8
    339a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    339c:	9b01      	ldr	r3, [sp, #4]
    339e:	891b      	ldrh	r3, [r3, #8]
    33a0:	2b01      	cmp	r3, #1
    33a2:	d107      	bne.n	33b4 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    33a4:	4b05      	ldr	r3, [pc, #20]	; (33bc <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    33a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33aa:	4a04      	ldr	r2, [pc, #16]	; (33bc <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    33ac:	f043 0301 	orr.w	r3, r3, #1
    33b0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    33b4:	bf00      	nop
    33b6:	b002      	add	sp, #8
    33b8:	4770      	bx	lr
    33ba:	bf00      	nop
    33bc:	40064000 	.word	0x40064000

000033c0 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    33c0:	b082      	sub	sp, #8
    33c2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33c4:	bf00      	nop
    33c6:	b002      	add	sp, #8
    33c8:	4770      	bx	lr

000033ca <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    33ca:	b082      	sub	sp, #8
    33cc:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    33ce:	2300      	movs	r3, #0
}
    33d0:	4618      	mov	r0, r3
    33d2:	b002      	add	sp, #8
    33d4:	4770      	bx	lr

000033d6 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    33d6:	b082      	sub	sp, #8
    33d8:	9001      	str	r0, [sp, #4]
    33da:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    33dc:	bf00      	nop
    33de:	b002      	add	sp, #8
    33e0:	4770      	bx	lr
	...

000033e4 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    33e4:	b082      	sub	sp, #8
    33e6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    33e8:	bf00      	nop
    33ea:	b002      	add	sp, #8
    33ec:	4770      	bx	lr

000033ee <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    33ee:	b082      	sub	sp, #8
    33f0:	9001      	str	r0, [sp, #4]
    33f2:	460b      	mov	r3, r1
    33f4:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    33f8:	bf00      	nop
    33fa:	b002      	add	sp, #8
    33fc:	4770      	bx	lr

000033fe <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    33fe:	b500      	push	{lr}
    3400:	b083      	sub	sp, #12
    3402:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3404:	9b01      	ldr	r3, [sp, #4]
    3406:	2b00      	cmp	r3, #0
    3408:	d002      	beq.n	3410 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    340a:	9801      	ldr	r0, [sp, #4]
    340c:	f000 f8e7 	bl	35de <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3410:	bf00      	nop
    3412:	b003      	add	sp, #12
    3414:	f85d fb04 	ldr.w	pc, [sp], #4

00003418 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3418:	b500      	push	{lr}
    341a:	b085      	sub	sp, #20
    341c:	9001      	str	r0, [sp, #4]
    341e:	460b      	mov	r3, r1
    3420:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3424:	9b01      	ldr	r3, [sp, #4]
    3426:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3428:	f89d 3003 	ldrb.w	r3, [sp, #3]
    342c:	2b00      	cmp	r3, #0
    342e:	d003      	beq.n	3438 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3430:	2300      	movs	r3, #0
    3432:	f8ad 300c 	strh.w	r3, [sp, #12]
    3436:	e002      	b.n	343e <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3438:	2301      	movs	r3, #1
    343a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    343e:	ab02      	add	r3, sp, #8
    3440:	4618      	mov	r0, r3
    3442:	f7ff ffdc 	bl	33fe <Clock_Ip_ClockSetSimLPO1KEnable>
}
    3446:	bf00      	nop
    3448:	b005      	add	sp, #20
    344a:	f85d fb04 	ldr.w	pc, [sp], #4

0000344e <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    344e:	b500      	push	{lr}
    3450:	b083      	sub	sp, #12
    3452:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3454:	9b01      	ldr	r3, [sp, #4]
    3456:	2b00      	cmp	r3, #0
    3458:	d002      	beq.n	3460 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    345a:	9801      	ldr	r0, [sp, #4]
    345c:	f000 f8d6 	bl	360c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3460:	bf00      	nop
    3462:	b003      	add	sp, #12
    3464:	f85d fb04 	ldr.w	pc, [sp], #4

00003468 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3468:	b500      	push	{lr}
    346a:	b085      	sub	sp, #20
    346c:	9001      	str	r0, [sp, #4]
    346e:	460b      	mov	r3, r1
    3470:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3474:	9b01      	ldr	r3, [sp, #4]
    3476:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3478:	f89d 3003 	ldrb.w	r3, [sp, #3]
    347c:	2b00      	cmp	r3, #0
    347e:	d003      	beq.n	3488 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3480:	2300      	movs	r3, #0
    3482:	f8ad 300c 	strh.w	r3, [sp, #12]
    3486:	e002      	b.n	348e <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3488:	2301      	movs	r3, #1
    348a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    348e:	ab02      	add	r3, sp, #8
    3490:	4618      	mov	r0, r3
    3492:	f7ff ffdc 	bl	344e <Clock_Ip_ClockSetSimLPO32KEnable>
}
    3496:	bf00      	nop
    3498:	b005      	add	sp, #20
    349a:	f85d fb04 	ldr.w	pc, [sp], #4

0000349e <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    349e:	b500      	push	{lr}
    34a0:	b083      	sub	sp, #12
    34a2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34a4:	9b01      	ldr	r3, [sp, #4]
    34a6:	2b00      	cmp	r3, #0
    34a8:	d002      	beq.n	34b0 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    34aa:	9801      	ldr	r0, [sp, #4]
    34ac:	f000 f8c6 	bl	363c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34b0:	bf00      	nop
    34b2:	b003      	add	sp, #12
    34b4:	f85d fb04 	ldr.w	pc, [sp], #4

000034b8 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    34b8:	b500      	push	{lr}
    34ba:	b085      	sub	sp, #20
    34bc:	9001      	str	r0, [sp, #4]
    34be:	460b      	mov	r3, r1
    34c0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34c4:	9b01      	ldr	r3, [sp, #4]
    34c6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34cc:	2b00      	cmp	r3, #0
    34ce:	d003      	beq.n	34d8 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    34d0:	2300      	movs	r3, #0
    34d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    34d6:	e002      	b.n	34de <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34d8:	2301      	movs	r3, #1
    34da:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    34de:	ab02      	add	r3, sp, #8
    34e0:	4618      	mov	r0, r3
    34e2:	f7ff ffdc 	bl	349e <Clock_Ip_ClockSetSimClkoutEnable>
}
    34e6:	bf00      	nop
    34e8:	b005      	add	sp, #20
    34ea:	f85d fb04 	ldr.w	pc, [sp], #4

000034ee <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    34ee:	b500      	push	{lr}
    34f0:	b083      	sub	sp, #12
    34f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34f4:	9b01      	ldr	r3, [sp, #4]
    34f6:	2b00      	cmp	r3, #0
    34f8:	d002      	beq.n	3500 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    34fa:	9801      	ldr	r0, [sp, #4]
    34fc:	f000 f8b6 	bl	366c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3500:	bf00      	nop
    3502:	b003      	add	sp, #12
    3504:	f85d fb04 	ldr.w	pc, [sp], #4

00003508 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3508:	b500      	push	{lr}
    350a:	b085      	sub	sp, #20
    350c:	9001      	str	r0, [sp, #4]
    350e:	460b      	mov	r3, r1
    3510:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3514:	9b01      	ldr	r3, [sp, #4]
    3516:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3518:	f89d 3003 	ldrb.w	r3, [sp, #3]
    351c:	2b00      	cmp	r3, #0
    351e:	d003      	beq.n	3528 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3520:	2300      	movs	r3, #0
    3522:	f8ad 300c 	strh.w	r3, [sp, #12]
    3526:	e002      	b.n	352e <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3528:	2301      	movs	r3, #1
    352a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    352e:	ab02      	add	r3, sp, #8
    3530:	4618      	mov	r0, r3
    3532:	f7ff ffdc 	bl	34ee <Clock_Ip_ClockSetPccCgcEnable>
}
    3536:	bf00      	nop
    3538:	b005      	add	sp, #20
    353a:	f85d fb04 	ldr.w	pc, [sp], #4

0000353e <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    353e:	b500      	push	{lr}
    3540:	b083      	sub	sp, #12
    3542:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3544:	9b01      	ldr	r3, [sp, #4]
    3546:	2b00      	cmp	r3, #0
    3548:	d002      	beq.n	3550 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    354a:	9801      	ldr	r0, [sp, #4]
    354c:	f000 f8bc 	bl	36c8 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3550:	bf00      	nop
    3552:	b003      	add	sp, #12
    3554:	f85d fb04 	ldr.w	pc, [sp], #4

00003558 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3558:	b500      	push	{lr}
    355a:	b085      	sub	sp, #20
    355c:	9001      	str	r0, [sp, #4]
    355e:	460b      	mov	r3, r1
    3560:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3564:	9b01      	ldr	r3, [sp, #4]
    3566:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3568:	f89d 3003 	ldrb.w	r3, [sp, #3]
    356c:	2b00      	cmp	r3, #0
    356e:	d003      	beq.n	3578 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3570:	2300      	movs	r3, #0
    3572:	f8ad 300c 	strh.w	r3, [sp, #12]
    3576:	e002      	b.n	357e <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3578:	2301      	movs	r3, #1
    357a:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    357e:	ab02      	add	r3, sp, #8
    3580:	4618      	mov	r0, r3
    3582:	f7ff ffdc 	bl	353e <Clock_Ip_ClockSetSimGate>
}
    3586:	bf00      	nop
    3588:	b005      	add	sp, #20
    358a:	f85d fb04 	ldr.w	pc, [sp], #4

0000358e <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    358e:	b500      	push	{lr}
    3590:	b083      	sub	sp, #12
    3592:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3594:	9b01      	ldr	r3, [sp, #4]
    3596:	2b00      	cmp	r3, #0
    3598:	d002      	beq.n	35a0 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    359a:	9801      	ldr	r0, [sp, #4]
    359c:	f000 f8c0 	bl	3720 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35a0:	bf00      	nop
    35a2:	b003      	add	sp, #12
    35a4:	f85d fb04 	ldr.w	pc, [sp], #4

000035a8 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    35a8:	b500      	push	{lr}
    35aa:	b085      	sub	sp, #20
    35ac:	9001      	str	r0, [sp, #4]
    35ae:	460b      	mov	r3, r1
    35b0:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    35b4:	9b01      	ldr	r3, [sp, #4]
    35b6:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    35b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    35bc:	2b00      	cmp	r3, #0
    35be:	d003      	beq.n	35c8 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    35c0:	2300      	movs	r3, #0
    35c2:	f8ad 300c 	strh.w	r3, [sp, #12]
    35c6:	e002      	b.n	35ce <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    35c8:	2301      	movs	r3, #1
    35ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    35ce:	ab02      	add	r3, sp, #8
    35d0:	4618      	mov	r0, r3
    35d2:	f7ff ffdc 	bl	358e <Clock_Ip_ClockSetSimTraceEnable>
}
    35d6:	bf00      	nop
    35d8:	b005      	add	sp, #20
    35da:	f85d fb04 	ldr.w	pc, [sp], #4

000035de <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    35de:	b084      	sub	sp, #16
    35e0:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    35e2:	4b09      	ldr	r3, [pc, #36]	; (3608 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    35e4:	691b      	ldr	r3, [r3, #16]
    35e6:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    35e8:	9b03      	ldr	r3, [sp, #12]
    35ea:	f023 0301 	bic.w	r3, r3, #1
    35ee:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    35f0:	9b01      	ldr	r3, [sp, #4]
    35f2:	889b      	ldrh	r3, [r3, #4]
    35f4:	461a      	mov	r2, r3
    35f6:	9b03      	ldr	r3, [sp, #12]
    35f8:	4313      	orrs	r3, r2
    35fa:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    35fc:	4a02      	ldr	r2, [pc, #8]	; (3608 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    35fe:	9b03      	ldr	r3, [sp, #12]
    3600:	6113      	str	r3, [r2, #16]
}
    3602:	bf00      	nop
    3604:	b004      	add	sp, #16
    3606:	4770      	bx	lr
    3608:	40048000 	.word	0x40048000

0000360c <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    360c:	b084      	sub	sp, #16
    360e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3610:	4b09      	ldr	r3, [pc, #36]	; (3638 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3612:	691b      	ldr	r3, [r3, #16]
    3614:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3616:	9b03      	ldr	r3, [sp, #12]
    3618:	f023 0302 	bic.w	r3, r3, #2
    361c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    361e:	9b01      	ldr	r3, [sp, #4]
    3620:	889b      	ldrh	r3, [r3, #4]
    3622:	005b      	lsls	r3, r3, #1
    3624:	9a03      	ldr	r2, [sp, #12]
    3626:	4313      	orrs	r3, r2
    3628:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    362a:	4a03      	ldr	r2, [pc, #12]	; (3638 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    362c:	9b03      	ldr	r3, [sp, #12]
    362e:	6113      	str	r3, [r2, #16]
}
    3630:	bf00      	nop
    3632:	b004      	add	sp, #16
    3634:	4770      	bx	lr
    3636:	bf00      	nop
    3638:	40048000 	.word	0x40048000

0000363c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    363c:	b084      	sub	sp, #16
    363e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3640:	4b09      	ldr	r3, [pc, #36]	; (3668 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3642:	685b      	ldr	r3, [r3, #4]
    3644:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3646:	9b03      	ldr	r3, [sp, #12]
    3648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    364c:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    364e:	9b01      	ldr	r3, [sp, #4]
    3650:	889b      	ldrh	r3, [r3, #4]
    3652:	02db      	lsls	r3, r3, #11
    3654:	9a03      	ldr	r2, [sp, #12]
    3656:	4313      	orrs	r3, r2
    3658:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    365a:	4a03      	ldr	r2, [pc, #12]	; (3668 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    365c:	9b03      	ldr	r3, [sp, #12]
    365e:	6053      	str	r3, [r2, #4]
}
    3660:	bf00      	nop
    3662:	b004      	add	sp, #16
    3664:	4770      	bx	lr
    3666:	bf00      	nop
    3668:	40048000 	.word	0x40048000

0000366c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    366c:	b084      	sub	sp, #16
    366e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3670:	4913      	ldr	r1, [pc, #76]	; (36c0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3672:	9b01      	ldr	r3, [sp, #4]
    3674:	681a      	ldr	r2, [r3, #0]
    3676:	4813      	ldr	r0, [pc, #76]	; (36c4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3678:	4613      	mov	r3, r2
    367a:	00db      	lsls	r3, r3, #3
    367c:	4413      	add	r3, r2
    367e:	4403      	add	r3, r0
    3680:	3306      	adds	r3, #6
    3682:	781b      	ldrb	r3, [r3, #0]
    3684:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3688:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    368a:	9b03      	ldr	r3, [sp, #12]
    368c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3690:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    3692:	9b01      	ldr	r3, [sp, #4]
    3694:	889b      	ldrh	r3, [r3, #4]
    3696:	079b      	lsls	r3, r3, #30
    3698:	9a03      	ldr	r2, [sp, #12]
    369a:	4313      	orrs	r3, r2
    369c:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    369e:	4908      	ldr	r1, [pc, #32]	; (36c0 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    36a0:	9b01      	ldr	r3, [sp, #4]
    36a2:	681a      	ldr	r2, [r3, #0]
    36a4:	4807      	ldr	r0, [pc, #28]	; (36c4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    36a6:	4613      	mov	r3, r2
    36a8:	00db      	lsls	r3, r3, #3
    36aa:	4413      	add	r3, r2
    36ac:	4403      	add	r3, r0
    36ae:	3306      	adds	r3, #6
    36b0:	781b      	ldrb	r3, [r3, #0]
    36b2:	461a      	mov	r2, r3
    36b4:	9b03      	ldr	r3, [sp, #12]
    36b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    36ba:	bf00      	nop
    36bc:	b004      	add	sp, #16
    36be:	4770      	bx	lr
    36c0:	40065000 	.word	0x40065000
    36c4:	0000a654 	.word	0x0000a654

000036c8 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    36c8:	b086      	sub	sp, #24
    36ca:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    36cc:	9b01      	ldr	r3, [sp, #4]
    36ce:	889b      	ldrh	r3, [r3, #4]
    36d0:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    36d2:	9b01      	ldr	r3, [sp, #4]
    36d4:	681a      	ldr	r2, [r3, #0]
    36d6:	4910      	ldr	r1, [pc, #64]	; (3718 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    36d8:	4613      	mov	r3, r2
    36da:	00db      	lsls	r3, r3, #3
    36dc:	4413      	add	r3, r2
    36de:	440b      	add	r3, r1
    36e0:	3306      	adds	r3, #6
    36e2:	781b      	ldrb	r3, [r3, #0]
    36e4:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    36e6:	4b0d      	ldr	r3, [pc, #52]	; (371c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    36e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    36ea:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    36ec:	2201      	movs	r2, #1
    36ee:	9b04      	ldr	r3, [sp, #16]
    36f0:	fa02 f303 	lsl.w	r3, r2, r3
    36f4:	43db      	mvns	r3, r3
    36f6:	9a03      	ldr	r2, [sp, #12]
    36f8:	4013      	ands	r3, r2
    36fa:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    36fc:	9a05      	ldr	r2, [sp, #20]
    36fe:	9b04      	ldr	r3, [sp, #16]
    3700:	fa02 f303 	lsl.w	r3, r2, r3
    3704:	9a03      	ldr	r2, [sp, #12]
    3706:	4313      	orrs	r3, r2
    3708:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    370a:	4a04      	ldr	r2, [pc, #16]	; (371c <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    370c:	9b03      	ldr	r3, [sp, #12]
    370e:	6413      	str	r3, [r2, #64]	; 0x40
}
    3710:	bf00      	nop
    3712:	b006      	add	sp, #24
    3714:	4770      	bx	lr
    3716:	bf00      	nop
    3718:	0000a654 	.word	0x0000a654
    371c:	40048000 	.word	0x40048000

00003720 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3720:	b084      	sub	sp, #16
    3722:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3724:	4b0a      	ldr	r3, [pc, #40]	; (3750 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3728:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    372a:	9b01      	ldr	r3, [sp, #4]
    372c:	889b      	ldrh	r3, [r3, #4]
    372e:	2b01      	cmp	r3, #1
    3730:	d104      	bne.n	373c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3732:	9b03      	ldr	r3, [sp, #12]
    3734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3738:	9303      	str	r3, [sp, #12]
    373a:	e003      	b.n	3744 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    373c:	9b03      	ldr	r3, [sp, #12]
    373e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3742:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3744:	4a02      	ldr	r2, [pc, #8]	; (3750 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3746:	9b03      	ldr	r3, [sp, #12]
    3748:	6693      	str	r3, [r2, #104]	; 0x68
}
    374a:	bf00      	nop
    374c:	b004      	add	sp, #16
    374e:	4770      	bx	lr
    3750:	40048000 	.word	0x40048000

00003754 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3754:	b082      	sub	sp, #8
    3756:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3758:	bf00      	nop
    375a:	b002      	add	sp, #8
    375c:	4770      	bx	lr

0000375e <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    375e:	b082      	sub	sp, #8
    3760:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3762:	bf00      	nop
    3764:	b002      	add	sp, #8
    3766:	4770      	bx	lr

00003768 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3768:	b500      	push	{lr}
    376a:	b083      	sub	sp, #12
    376c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    376e:	9b01      	ldr	r3, [sp, #4]
    3770:	2b00      	cmp	r3, #0
    3772:	d002      	beq.n	377a <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3774:	9801      	ldr	r0, [sp, #4]
    3776:	f000 f8d1 	bl	391c <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    377a:	bf00      	nop
    377c:	b003      	add	sp, #12
    377e:	f85d fb04 	ldr.w	pc, [sp], #4

00003782 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3782:	b500      	push	{lr}
    3784:	b083      	sub	sp, #12
    3786:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3788:	9b01      	ldr	r3, [sp, #4]
    378a:	2b00      	cmp	r3, #0
    378c:	d002      	beq.n	3794 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    378e:	9801      	ldr	r0, [sp, #4]
    3790:	f000 f950 	bl	3a34 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3794:	bf00      	nop
    3796:	b003      	add	sp, #12
    3798:	f85d fb04 	ldr.w	pc, [sp], #4

0000379c <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    379c:	b500      	push	{lr}
    379e:	b083      	sub	sp, #12
    37a0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    37a2:	9801      	ldr	r0, [sp, #4]
    37a4:	f000 f98e 	bl	3ac4 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37a8:	bf00      	nop
    37aa:	b003      	add	sp, #12
    37ac:	f85d fb04 	ldr.w	pc, [sp], #4

000037b0 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    37b0:	b500      	push	{lr}
    37b2:	b083      	sub	sp, #12
    37b4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37b6:	9b01      	ldr	r3, [sp, #4]
    37b8:	2b00      	cmp	r3, #0
    37ba:	d002      	beq.n	37c2 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    37bc:	9801      	ldr	r0, [sp, #4]
    37be:	f000 f999 	bl	3af4 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37c2:	bf00      	nop
    37c4:	b003      	add	sp, #12
    37c6:	f85d fb04 	ldr.w	pc, [sp], #4

000037ca <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    37ca:	b500      	push	{lr}
    37cc:	b083      	sub	sp, #12
    37ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37d0:	9b01      	ldr	r3, [sp, #4]
    37d2:	2b00      	cmp	r3, #0
    37d4:	d002      	beq.n	37dc <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    37d6:	9801      	ldr	r0, [sp, #4]
    37d8:	f000 f9b0 	bl	3b3c <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37dc:	bf00      	nop
    37de:	b003      	add	sp, #12
    37e0:	f85d fb04 	ldr.w	pc, [sp], #4

000037e4 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    37e4:	b500      	push	{lr}
    37e6:	b083      	sub	sp, #12
    37e8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    37ea:	9801      	ldr	r0, [sp, #4]
    37ec:	f000 f9ba 	bl	3b64 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37f0:	bf00      	nop
    37f2:	b003      	add	sp, #12
    37f4:	f85d fb04 	ldr.w	pc, [sp], #4

000037f8 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    37f8:	b500      	push	{lr}
    37fa:	b083      	sub	sp, #12
    37fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37fe:	9b01      	ldr	r3, [sp, #4]
    3800:	2b00      	cmp	r3, #0
    3802:	d002      	beq.n	380a <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3804:	9801      	ldr	r0, [sp, #4]
    3806:	f000 f9bd 	bl	3b84 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    380a:	bf00      	nop
    380c:	b003      	add	sp, #12
    380e:	f85d fb04 	ldr.w	pc, [sp], #4

00003812 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3812:	b500      	push	{lr}
    3814:	b083      	sub	sp, #12
    3816:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3818:	9b01      	ldr	r3, [sp, #4]
    381a:	2b00      	cmp	r3, #0
    381c:	d002      	beq.n	3824 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    381e:	9801      	ldr	r0, [sp, #4]
    3820:	f000 f9d4 	bl	3bcc <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3824:	bf00      	nop
    3826:	b003      	add	sp, #12
    3828:	f85d fb04 	ldr.w	pc, [sp], #4

0000382c <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    382c:	b500      	push	{lr}
    382e:	b083      	sub	sp, #12
    3830:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3832:	9801      	ldr	r0, [sp, #4]
    3834:	f000 f9de 	bl	3bf4 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3838:	bf00      	nop
    383a:	b003      	add	sp, #12
    383c:	f85d fb04 	ldr.w	pc, [sp], #4

00003840 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3840:	b500      	push	{lr}
    3842:	b089      	sub	sp, #36	; 0x24
    3844:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3846:	2300      	movs	r3, #0
    3848:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    384c:	4b20      	ldr	r3, [pc, #128]	; (38d0 <SetInputSouceSytemClock+0x90>)
    384e:	695b      	ldr	r3, [r3, #20]
    3850:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3852:	9b06      	ldr	r3, [sp, #24]
    3854:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3858:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    385a:	9b01      	ldr	r3, [sp, #4]
    385c:	061b      	lsls	r3, r3, #24
    385e:	9a06      	ldr	r2, [sp, #24]
    3860:	4313      	orrs	r3, r2
    3862:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3864:	4a1a      	ldr	r2, [pc, #104]	; (38d0 <SetInputSouceSytemClock+0x90>)
    3866:	9b06      	ldr	r3, [sp, #24]
    3868:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    386a:	aa02      	add	r2, sp, #8
    386c:	a903      	add	r1, sp, #12
    386e:	a804      	add	r0, sp, #16
    3870:	f24c 3350 	movw	r3, #50000	; 0xc350
    3874:	f7ff f9ac 	bl	2bd0 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3878:	4b15      	ldr	r3, [pc, #84]	; (38d0 <SetInputSouceSytemClock+0x90>)
    387a:	691b      	ldr	r3, [r3, #16]
    387c:	0e1b      	lsrs	r3, r3, #24
    387e:	f003 030f 	and.w	r3, r3, #15
    3882:	9a01      	ldr	r2, [sp, #4]
    3884:	429a      	cmp	r2, r3
    3886:	bf0c      	ite	eq
    3888:	2301      	moveq	r3, #1
    388a:	2300      	movne	r3, #0
    388c:	b2db      	uxtb	r3, r3
    388e:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3890:	9a02      	ldr	r2, [sp, #8]
    3892:	a903      	add	r1, sp, #12
    3894:	ab04      	add	r3, sp, #16
    3896:	4618      	mov	r0, r3
    3898:	f7ff f9b4 	bl	2c04 <Clock_Ip_TimeoutExpired>
    389c:	4603      	mov	r3, r0
    389e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    38a2:	9b05      	ldr	r3, [sp, #20]
    38a4:	2b00      	cmp	r3, #0
    38a6:	d106      	bne.n	38b6 <SetInputSouceSytemClock+0x76>
    38a8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38ac:	f083 0301 	eor.w	r3, r3, #1
    38b0:	b2db      	uxtb	r3, r3
    38b2:	2b00      	cmp	r3, #0
    38b4:	d1e0      	bne.n	3878 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    38b6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38ba:	2b00      	cmp	r3, #0
    38bc:	d003      	beq.n	38c6 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    38be:	2105      	movs	r1, #5
    38c0:	2001      	movs	r0, #1
    38c2:	f7ff f975 	bl	2bb0 <Clock_Ip_ReportClockErrors>
    }
}
    38c6:	bf00      	nop
    38c8:	b009      	add	sp, #36	; 0x24
    38ca:	f85d fb04 	ldr.w	pc, [sp], #4
    38ce:	bf00      	nop
    38d0:	40064000 	.word	0x40064000

000038d4 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    38d4:	b500      	push	{lr}
    38d6:	b083      	sub	sp, #12
    38d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38da:	9b01      	ldr	r3, [sp, #4]
    38dc:	2b00      	cmp	r3, #0
    38de:	d002      	beq.n	38e6 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    38e0:	9801      	ldr	r0, [sp, #4]
    38e2:	f000 f997 	bl	3c14 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38e6:	bf00      	nop
    38e8:	b003      	add	sp, #12
    38ea:	f85d fb04 	ldr.w	pc, [sp], #4

000038ee <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    38ee:	b500      	push	{lr}
    38f0:	b083      	sub	sp, #12
    38f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38f4:	9b01      	ldr	r3, [sp, #4]
    38f6:	2b00      	cmp	r3, #0
    38f8:	d002      	beq.n	3900 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    38fa:	9801      	ldr	r0, [sp, #4]
    38fc:	f000 fa7e 	bl	3dfc <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3900:	bf00      	nop
    3902:	b003      	add	sp, #12
    3904:	f85d fb04 	ldr.w	pc, [sp], #4

00003908 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3908:	b500      	push	{lr}
    390a:	b083      	sub	sp, #12
    390c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    390e:	9801      	ldr	r0, [sp, #4]
    3910:	f000 fab8 	bl	3e84 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3914:	bf00      	nop
    3916:	b003      	add	sp, #12
    3918:	f85d fb04 	ldr.w	pc, [sp], #4

0000391c <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    391c:	b500      	push	{lr}
    391e:	b08b      	sub	sp, #44	; 0x2c
    3920:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3922:	2300      	movs	r3, #0
    3924:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3928:	9b01      	ldr	r3, [sp, #4]
    392a:	2b00      	cmp	r3, #0
    392c:	d10b      	bne.n	3946 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    392e:	2305      	movs	r3, #5
    3930:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3932:	2301      	movs	r3, #1
    3934:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3938:	2301      	movs	r3, #1
    393a:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    393e:	2301      	movs	r3, #1
    3940:	f88d 3010 	strb.w	r3, [sp, #16]
    3944:	e00e      	b.n	3964 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3946:	9b01      	ldr	r3, [sp, #4]
    3948:	681b      	ldr	r3, [r3, #0]
    394a:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    394c:	9b01      	ldr	r3, [sp, #4]
    394e:	79db      	ldrb	r3, [r3, #7]
    3950:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3954:	9b01      	ldr	r3, [sp, #4]
    3956:	889b      	ldrh	r3, [r3, #4]
    3958:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    395c:	9b01      	ldr	r3, [sp, #4]
    395e:	7a1b      	ldrb	r3, [r3, #8]
    3960:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3964:	4b32      	ldr	r3, [pc, #200]	; (3a30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    396a:	4a31      	ldr	r2, [pc, #196]	; (3a30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    396c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3970:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3974:	4b2e      	ldr	r3, [pc, #184]	; (3a30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3976:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    397a:	4a2d      	ldr	r2, [pc, #180]	; (3a30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    397c:	f023 0301 	bic.w	r3, r3, #1
    3980:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3984:	4b2a      	ldr	r3, [pc, #168]	; (3a30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3986:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    398a:	4a29      	ldr	r2, [pc, #164]	; (3a30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    398c:	f023 0304 	bic.w	r3, r3, #4
    3990:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3994:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3998:	2b01      	cmp	r3, #1
    399a:	d144      	bne.n	3a26 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    399c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    39a0:	4a23      	ldr	r2, [pc, #140]	; (3a30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39a2:	f003 0301 	and.w	r3, r3, #1
    39a6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    39aa:	4b21      	ldr	r3, [pc, #132]	; (3a30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39b0:	4a1f      	ldr	r2, [pc, #124]	; (3a30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39b2:	f043 0301 	orr.w	r3, r3, #1
    39b6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    39ba:	4b1d      	ldr	r3, [pc, #116]	; (3a30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    39c0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    39c4:	009b      	lsls	r3, r3, #2
    39c6:	f003 0304 	and.w	r3, r3, #4
    39ca:	4919      	ldr	r1, [pc, #100]	; (3a30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39cc:	4313      	orrs	r3, r2
    39ce:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    39d2:	aa05      	add	r2, sp, #20
    39d4:	a906      	add	r1, sp, #24
    39d6:	a807      	add	r0, sp, #28
    39d8:	f24c 3350 	movw	r3, #50000	; 0xc350
    39dc:	f7ff f8f8 	bl	2bd0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    39e0:	4b13      	ldr	r3, [pc, #76]	; (3a30 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39e6:	0e1b      	lsrs	r3, r3, #24
    39e8:	f003 0301 	and.w	r3, r3, #1
    39ec:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    39ee:	9a05      	ldr	r2, [sp, #20]
    39f0:	a906      	add	r1, sp, #24
    39f2:	ab07      	add	r3, sp, #28
    39f4:	4618      	mov	r0, r3
    39f6:	f7ff f905 	bl	2c04 <Clock_Ip_TimeoutExpired>
    39fa:	4603      	mov	r3, r0
    39fc:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a00:	9b08      	ldr	r3, [sp, #32]
    3a02:	2b00      	cmp	r3, #0
    3a04:	d106      	bne.n	3a14 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3a06:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a0a:	f083 0301 	eor.w	r3, r3, #1
    3a0e:	b2db      	uxtb	r3, r3
    3a10:	2b00      	cmp	r3, #0
    3a12:	d1e5      	bne.n	39e0 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3a14:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a18:	2b00      	cmp	r3, #0
    3a1a:	d004      	beq.n	3a26 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3a1c:	9b02      	ldr	r3, [sp, #8]
    3a1e:	4619      	mov	r1, r3
    3a20:	2001      	movs	r0, #1
    3a22:	f7ff f8c5 	bl	2bb0 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3a26:	bf00      	nop
    3a28:	b00b      	add	sp, #44	; 0x2c
    3a2a:	f85d fb04 	ldr.w	pc, [sp], #4
    3a2e:	bf00      	nop
    3a30:	40064000 	.word	0x40064000

00003a34 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a34:	b500      	push	{lr}
    3a36:	b089      	sub	sp, #36	; 0x24
    3a38:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3a3a:	2300      	movs	r3, #0
    3a3c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3a40:	4b1f      	ldr	r3, [pc, #124]	; (3ac0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a46:	4a1e      	ldr	r2, [pc, #120]	; (3ac0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a48:	f043 0301 	orr.w	r3, r3, #1
    3a4c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3a50:	4b1b      	ldr	r3, [pc, #108]	; (3ac0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a56:	4a1a      	ldr	r2, [pc, #104]	; (3ac0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a58:	f043 0304 	orr.w	r3, r3, #4
    3a5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a60:	aa03      	add	r2, sp, #12
    3a62:	a904      	add	r1, sp, #16
    3a64:	a805      	add	r0, sp, #20
    3a66:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a6a:	f7ff f8b1 	bl	2bd0 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3a6e:	4b14      	ldr	r3, [pc, #80]	; (3ac0 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a74:	0e1b      	lsrs	r3, r3, #24
    3a76:	f003 0301 	and.w	r3, r3, #1
    3a7a:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a7c:	9a03      	ldr	r2, [sp, #12]
    3a7e:	a904      	add	r1, sp, #16
    3a80:	ab05      	add	r3, sp, #20
    3a82:	4618      	mov	r0, r3
    3a84:	f7ff f8be 	bl	2c04 <Clock_Ip_TimeoutExpired>
    3a88:	4603      	mov	r3, r0
    3a8a:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a8e:	9b06      	ldr	r3, [sp, #24]
    3a90:	2b00      	cmp	r3, #0
    3a92:	d106      	bne.n	3aa2 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3a94:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3a98:	f083 0301 	eor.w	r3, r3, #1
    3a9c:	b2db      	uxtb	r3, r3
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	d1e5      	bne.n	3a6e <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3aa2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	d005      	beq.n	3ab6 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3aaa:	9b01      	ldr	r3, [sp, #4]
    3aac:	681b      	ldr	r3, [r3, #0]
    3aae:	4619      	mov	r1, r3
    3ab0:	2001      	movs	r0, #1
    3ab2:	f7ff f87d 	bl	2bb0 <Clock_Ip_ReportClockErrors>
    }
}
    3ab6:	bf00      	nop
    3ab8:	b009      	add	sp, #36	; 0x24
    3aba:	f85d fb04 	ldr.w	pc, [sp], #4
    3abe:	bf00      	nop
    3ac0:	40064000 	.word	0x40064000

00003ac4 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3ac4:	b082      	sub	sp, #8
    3ac6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3ac8:	4b09      	ldr	r3, [pc, #36]	; (3af0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3aca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ace:	4a08      	ldr	r2, [pc, #32]	; (3af0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ad0:	f023 0301 	bic.w	r3, r3, #1
    3ad4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3ad8:	4b05      	ldr	r3, [pc, #20]	; (3af0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ada:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ade:	4a04      	ldr	r2, [pc, #16]	; (3af0 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3ae0:	f023 0304 	bic.w	r3, r3, #4
    3ae4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3ae8:	bf00      	nop
    3aea:	b002      	add	sp, #8
    3aec:	4770      	bx	lr
    3aee:	bf00      	nop
    3af0:	40064000 	.word	0x40064000

00003af4 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3af4:	b082      	sub	sp, #8
    3af6:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3af8:	4b0f      	ldr	r3, [pc, #60]	; (3b38 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3afa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3afe:	4a0e      	ldr	r2, [pc, #56]	; (3b38 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b08:	4b0b      	ldr	r3, [pc, #44]	; (3b38 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b0e:	4a0a      	ldr	r2, [pc, #40]	; (3b38 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b10:	f023 0304 	bic.w	r3, r3, #4
    3b14:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3b18:	4b07      	ldr	r3, [pc, #28]	; (3b38 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b1a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b1e:	9b01      	ldr	r3, [sp, #4]
    3b20:	7a1b      	ldrb	r3, [r3, #8]
    3b22:	009b      	lsls	r3, r3, #2
    3b24:	f003 0304 	and.w	r3, r3, #4
    3b28:	4903      	ldr	r1, [pc, #12]	; (3b38 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b2a:	4313      	orrs	r3, r2
    3b2c:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b30:	bf00      	nop
    3b32:	b002      	add	sp, #8
    3b34:	4770      	bx	lr
    3b36:	bf00      	nop
    3b38:	40064000 	.word	0x40064000

00003b3c <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b3c:	b082      	sub	sp, #8
    3b3e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b40:	9b01      	ldr	r3, [sp, #4]
    3b42:	889b      	ldrh	r3, [r3, #4]
    3b44:	2b01      	cmp	r3, #1
    3b46:	d107      	bne.n	3b58 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3b48:	4b05      	ldr	r3, [pc, #20]	; (3b60 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b4e:	4a04      	ldr	r2, [pc, #16]	; (3b60 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b50:	f043 0304 	orr.w	r3, r3, #4
    3b54:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3b58:	bf00      	nop
    3b5a:	b002      	add	sp, #8
    3b5c:	4770      	bx	lr
    3b5e:	bf00      	nop
    3b60:	40064000 	.word	0x40064000

00003b64 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3b64:	b082      	sub	sp, #8
    3b66:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b68:	4b05      	ldr	r3, [pc, #20]	; (3b80 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b6e:	4a04      	ldr	r2, [pc, #16]	; (3b80 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3b70:	f023 0304 	bic.w	r3, r3, #4
    3b74:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b78:	bf00      	nop
    3b7a:	b002      	add	sp, #8
    3b7c:	4770      	bx	lr
    3b7e:	bf00      	nop
    3b80:	40064000 	.word	0x40064000

00003b84 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b84:	b082      	sub	sp, #8
    3b86:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b88:	4b0f      	ldr	r3, [pc, #60]	; (3bc8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b8e:	4a0e      	ldr	r2, [pc, #56]	; (3bc8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b94:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3b98:	4b0b      	ldr	r3, [pc, #44]	; (3bc8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3b9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b9e:	4a0a      	ldr	r2, [pc, #40]	; (3bc8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3ba0:	f023 0302 	bic.w	r3, r3, #2
    3ba4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3ba8:	4b07      	ldr	r3, [pc, #28]	; (3bc8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3baa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3bae:	9b01      	ldr	r3, [sp, #4]
    3bb0:	7a5b      	ldrb	r3, [r3, #9]
    3bb2:	005b      	lsls	r3, r3, #1
    3bb4:	f003 0302 	and.w	r3, r3, #2
    3bb8:	4903      	ldr	r1, [pc, #12]	; (3bc8 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bba:	4313      	orrs	r3, r2
    3bbc:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3bc0:	bf00      	nop
    3bc2:	b002      	add	sp, #8
    3bc4:	4770      	bx	lr
    3bc6:	bf00      	nop
    3bc8:	40064000 	.word	0x40064000

00003bcc <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3bcc:	b082      	sub	sp, #8
    3bce:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3bd0:	9b01      	ldr	r3, [sp, #4]
    3bd2:	889b      	ldrh	r3, [r3, #4]
    3bd4:	2b01      	cmp	r3, #1
    3bd6:	d107      	bne.n	3be8 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3bd8:	4b05      	ldr	r3, [pc, #20]	; (3bf0 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3bda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bde:	4a04      	ldr	r2, [pc, #16]	; (3bf0 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3be0:	f043 0302 	orr.w	r3, r3, #2
    3be4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3be8:	bf00      	nop
    3bea:	b002      	add	sp, #8
    3bec:	4770      	bx	lr
    3bee:	bf00      	nop
    3bf0:	40064000 	.word	0x40064000

00003bf4 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3bf4:	b082      	sub	sp, #8
    3bf6:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3bf8:	4b05      	ldr	r3, [pc, #20]	; (3c10 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3bfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bfe:	4a04      	ldr	r2, [pc, #16]	; (3c10 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3c00:	f023 0302 	bic.w	r3, r3, #2
    3c04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3c08:	bf00      	nop
    3c0a:	b002      	add	sp, #8
    3c0c:	4770      	bx	lr
    3c0e:	bf00      	nop
    3c10:	40064000 	.word	0x40064000

00003c14 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c14:	b500      	push	{lr}
    3c16:	b08b      	sub	sp, #44	; 0x2c
    3c18:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c1a:	9b01      	ldr	r3, [sp, #4]
    3c1c:	681a      	ldr	r2, [r3, #0]
    3c1e:	4975      	ldr	r1, [pc, #468]	; (3df4 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3c20:	4613      	mov	r3, r2
    3c22:	00db      	lsls	r3, r3, #3
    3c24:	4413      	add	r3, r2
    3c26:	440b      	add	r3, r1
    3c28:	781b      	ldrb	r3, [r3, #0]
    3c2a:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3c2c:	2300      	movs	r3, #0
    3c2e:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3c32:	2300      	movs	r3, #0
    3c34:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3c38:	4b6f      	ldr	r3, [pc, #444]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c3e:	4a6e      	ldr	r2, [pc, #440]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3c44:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3c48:	4b6b      	ldr	r3, [pc, #428]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3c52:	2b00      	cmp	r3, #0
    3c54:	d07d      	beq.n	3d52 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c56:	9b01      	ldr	r3, [sp, #4]
    3c58:	79db      	ldrb	r3, [r3, #7]
    3c5a:	461a      	mov	r2, r3
    3c5c:	4b66      	ldr	r3, [pc, #408]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c5e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3c62:	f003 0303 	and.w	r3, r3, #3
    3c66:	429a      	cmp	r2, r3
    3c68:	d10b      	bne.n	3c82 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3c6a:	9b01      	ldr	r3, [sp, #4]
    3c6c:	799b      	ldrb	r3, [r3, #6]
    3c6e:	461a      	mov	r2, r3
    3c70:	4b61      	ldr	r3, [pc, #388]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c76:	08db      	lsrs	r3, r3, #3
    3c78:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3c7c:	429a      	cmp	r2, r3
    3c7e:	f000 80b4 	beq.w	3dea <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3c82:	4b5d      	ldr	r3, [pc, #372]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c88:	f003 0301 	and.w	r3, r3, #1
    3c8c:	2b00      	cmp	r3, #0
    3c8e:	d105      	bne.n	3c9c <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3c90:	2301      	movs	r3, #1
    3c92:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3c96:	2000      	movs	r0, #0
    3c98:	f7ff fd66 	bl	3768 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3c9c:	2002      	movs	r0, #2
    3c9e:	f7ff fdcf 	bl	3840 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3ca2:	4b55      	ldr	r3, [pc, #340]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ca4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ca8:	4a53      	ldr	r2, [pc, #332]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3caa:	f023 0301 	bic.w	r3, r3, #1
    3cae:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3cb2:	9b01      	ldr	r3, [sp, #4]
    3cb4:	889b      	ldrh	r3, [r3, #4]
    3cb6:	2b01      	cmp	r3, #1
    3cb8:	f040 8097 	bne.w	3dea <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3cbc:	9b01      	ldr	r3, [sp, #4]
    3cbe:	79db      	ldrb	r3, [r3, #7]
    3cc0:	4a4d      	ldr	r2, [pc, #308]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cc2:	f003 0303 	and.w	r3, r3, #3
    3cc6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3cca:	4b4b      	ldr	r3, [pc, #300]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ccc:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3cd0:	9b01      	ldr	r3, [sp, #4]
    3cd2:	799b      	ldrb	r3, [r3, #6]
    3cd4:	00db      	lsls	r3, r3, #3
    3cd6:	f003 0308 	and.w	r3, r3, #8
    3cda:	4313      	orrs	r3, r2
    3cdc:	4a46      	ldr	r2, [pc, #280]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cde:	f043 0301 	orr.w	r3, r3, #1
    3ce2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3ce6:	aa03      	add	r2, sp, #12
    3ce8:	a904      	add	r1, sp, #16
    3cea:	a805      	add	r0, sp, #20
    3cec:	f24c 3350 	movw	r3, #50000	; 0xc350
    3cf0:	f7fe ff6e 	bl	2bd0 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3cf4:	4b40      	ldr	r3, [pc, #256]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cf6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cfa:	0e1b      	lsrs	r3, r3, #24
    3cfc:	f003 0301 	and.w	r3, r3, #1
    3d00:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d02:	9a03      	ldr	r2, [sp, #12]
    3d04:	a904      	add	r1, sp, #16
    3d06:	ab05      	add	r3, sp, #20
    3d08:	4618      	mov	r0, r3
    3d0a:	f7fe ff7b 	bl	2c04 <Clock_Ip_TimeoutExpired>
    3d0e:	4603      	mov	r3, r0
    3d10:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d14:	9b06      	ldr	r3, [sp, #24]
    3d16:	2b00      	cmp	r3, #0
    3d18:	d106      	bne.n	3d28 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3d1a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d1e:	f083 0301 	eor.w	r3, r3, #1
    3d22:	b2db      	uxtb	r3, r3
    3d24:	2b00      	cmp	r3, #0
    3d26:	d1e5      	bne.n	3cf4 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3d28:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	d005      	beq.n	3d3c <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d30:	9b01      	ldr	r3, [sp, #4]
    3d32:	681b      	ldr	r3, [r3, #0]
    3d34:	4619      	mov	r1, r3
    3d36:	2001      	movs	r0, #1
    3d38:	f7fe ff3a 	bl	2bb0 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3d3c:	2003      	movs	r0, #3
    3d3e:	f7ff fd7f 	bl	3840 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3d42:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d46:	2b00      	cmp	r3, #0
    3d48:	d04f      	beq.n	3dea <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3d4a:	2002      	movs	r0, #2
    3d4c:	f7ff fd26 	bl	379c <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3d50:	e04b      	b.n	3dea <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3d52:	4b29      	ldr	r3, [pc, #164]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d54:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d58:	4a27      	ldr	r2, [pc, #156]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d5a:	f023 0301 	bic.w	r3, r3, #1
    3d5e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3d62:	9b01      	ldr	r3, [sp, #4]
    3d64:	889b      	ldrh	r3, [r3, #4]
    3d66:	2b01      	cmp	r3, #1
    3d68:	d13f      	bne.n	3dea <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3d6a:	9b01      	ldr	r3, [sp, #4]
    3d6c:	79db      	ldrb	r3, [r3, #7]
    3d6e:	4a22      	ldr	r2, [pc, #136]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d70:	f003 0303 	and.w	r3, r3, #3
    3d74:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3d78:	4b1f      	ldr	r3, [pc, #124]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d7a:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3d7e:	9b01      	ldr	r3, [sp, #4]
    3d80:	799b      	ldrb	r3, [r3, #6]
    3d82:	00db      	lsls	r3, r3, #3
    3d84:	f003 0308 	and.w	r3, r3, #8
    3d88:	4313      	orrs	r3, r2
    3d8a:	4a1b      	ldr	r2, [pc, #108]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d8c:	f043 0301 	orr.w	r3, r3, #1
    3d90:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d94:	aa03      	add	r2, sp, #12
    3d96:	a904      	add	r1, sp, #16
    3d98:	a805      	add	r0, sp, #20
    3d9a:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d9e:	f7fe ff17 	bl	2bd0 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3da2:	4b15      	ldr	r3, [pc, #84]	; (3df8 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3da4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3da8:	0e1b      	lsrs	r3, r3, #24
    3daa:	f003 0301 	and.w	r3, r3, #1
    3dae:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3db0:	9a03      	ldr	r2, [sp, #12]
    3db2:	a904      	add	r1, sp, #16
    3db4:	ab05      	add	r3, sp, #20
    3db6:	4618      	mov	r0, r3
    3db8:	f7fe ff24 	bl	2c04 <Clock_Ip_TimeoutExpired>
    3dbc:	4603      	mov	r3, r0
    3dbe:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3dc2:	9b06      	ldr	r3, [sp, #24]
    3dc4:	2b00      	cmp	r3, #0
    3dc6:	d106      	bne.n	3dd6 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3dc8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dcc:	f083 0301 	eor.w	r3, r3, #1
    3dd0:	b2db      	uxtb	r3, r3
    3dd2:	2b00      	cmp	r3, #0
    3dd4:	d1e5      	bne.n	3da2 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3dd6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d005      	beq.n	3dea <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3dde:	9b01      	ldr	r3, [sp, #4]
    3de0:	681b      	ldr	r3, [r3, #0]
    3de2:	4619      	mov	r1, r3
    3de4:	2001      	movs	r0, #1
    3de6:	f7fe fee3 	bl	2bb0 <Clock_Ip_ReportClockErrors>
}
    3dea:	bf00      	nop
    3dec:	b00b      	add	sp, #44	; 0x2c
    3dee:	f85d fb04 	ldr.w	pc, [sp], #4
    3df2:	bf00      	nop
    3df4:	0000a654 	.word	0x0000a654
    3df8:	40064000 	.word	0x40064000

00003dfc <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3dfc:	b500      	push	{lr}
    3dfe:	b089      	sub	sp, #36	; 0x24
    3e00:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3e02:	2300      	movs	r3, #0
    3e04:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3e08:	9b01      	ldr	r3, [sp, #4]
    3e0a:	889b      	ldrh	r3, [r3, #4]
    3e0c:	2b01      	cmp	r3, #1
    3e0e:	d132      	bne.n	3e76 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3e10:	4b1b      	ldr	r3, [pc, #108]	; (3e80 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e16:	4a1a      	ldr	r2, [pc, #104]	; (3e80 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e18:	f043 0301 	orr.w	r3, r3, #1
    3e1c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e20:	aa03      	add	r2, sp, #12
    3e22:	a904      	add	r1, sp, #16
    3e24:	a805      	add	r0, sp, #20
    3e26:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e2a:	f7fe fed1 	bl	2bd0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3e2e:	4b14      	ldr	r3, [pc, #80]	; (3e80 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e30:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e34:	0e1b      	lsrs	r3, r3, #24
    3e36:	f003 0301 	and.w	r3, r3, #1
    3e3a:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e3c:	9a03      	ldr	r2, [sp, #12]
    3e3e:	a904      	add	r1, sp, #16
    3e40:	ab05      	add	r3, sp, #20
    3e42:	4618      	mov	r0, r3
    3e44:	f7fe fede 	bl	2c04 <Clock_Ip_TimeoutExpired>
    3e48:	4603      	mov	r3, r0
    3e4a:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3e4e:	9b06      	ldr	r3, [sp, #24]
    3e50:	2b00      	cmp	r3, #0
    3e52:	d106      	bne.n	3e62 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3e54:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e58:	f083 0301 	eor.w	r3, r3, #1
    3e5c:	b2db      	uxtb	r3, r3
    3e5e:	2b00      	cmp	r3, #0
    3e60:	d1e5      	bne.n	3e2e <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3e62:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e66:	2b00      	cmp	r3, #0
    3e68:	d005      	beq.n	3e76 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e6a:	9b01      	ldr	r3, [sp, #4]
    3e6c:	681b      	ldr	r3, [r3, #0]
    3e6e:	4619      	mov	r1, r3
    3e70:	2001      	movs	r0, #1
    3e72:	f7fe fe9d 	bl	2bb0 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3e76:	bf00      	nop
    3e78:	b009      	add	sp, #36	; 0x24
    3e7a:	f85d fb04 	ldr.w	pc, [sp], #4
    3e7e:	bf00      	nop
    3e80:	40064000 	.word	0x40064000

00003e84 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3e84:	b082      	sub	sp, #8
    3e86:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3e88:	4b05      	ldr	r3, [pc, #20]	; (3ea0 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e8e:	4a04      	ldr	r2, [pc, #16]	; (3ea0 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3e90:	f023 0301 	bic.w	r3, r3, #1
    3e94:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3e98:	bf00      	nop
    3e9a:	b002      	add	sp, #8
    3e9c:	4770      	bx	lr
    3e9e:	bf00      	nop
    3ea0:	40064000 	.word	0x40064000

00003ea4 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3ea4:	b082      	sub	sp, #8
    3ea6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3ea8:	bf00      	nop
    3eaa:	b002      	add	sp, #8
    3eac:	4770      	bx	lr

00003eae <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3eae:	b082      	sub	sp, #8
    3eb0:	9001      	str	r0, [sp, #4]
    3eb2:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3eb4:	bf00      	nop
    3eb6:	b002      	add	sp, #8
    3eb8:	4770      	bx	lr

00003eba <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3eba:	b082      	sub	sp, #8
    3ebc:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3ebe:	bf00      	nop
    3ec0:	b002      	add	sp, #8
    3ec2:	4770      	bx	lr

00003ec4 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3ec4:	b082      	sub	sp, #8
    3ec6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3ec8:	bf00      	nop
    3eca:	b002      	add	sp, #8
    3ecc:	4770      	bx	lr

00003ece <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3ece:	b082      	sub	sp, #8
    3ed0:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3ed2:	2302      	movs	r3, #2
}
    3ed4:	4618      	mov	r0, r3
    3ed6:	b002      	add	sp, #8
    3ed8:	4770      	bx	lr

00003eda <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3eda:	b082      	sub	sp, #8
    3edc:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3ede:	bf00      	nop
    3ee0:	b002      	add	sp, #8
    3ee2:	4770      	bx	lr

00003ee4 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3ee4:	b500      	push	{lr}
    3ee6:	b083      	sub	sp, #12
    3ee8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3eea:	9b01      	ldr	r3, [sp, #4]
    3eec:	2b00      	cmp	r3, #0
    3eee:	d002      	beq.n	3ef6 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3ef0:	9801      	ldr	r0, [sp, #4]
    3ef2:	f000 f870 	bl	3fd6 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ef6:	bf00      	nop
    3ef8:	b003      	add	sp, #12
    3efa:	f85d fb04 	ldr.w	pc, [sp], #4

00003efe <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3efe:	b500      	push	{lr}
    3f00:	b083      	sub	sp, #12
    3f02:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f04:	9b01      	ldr	r3, [sp, #4]
    3f06:	2b00      	cmp	r3, #0
    3f08:	d002      	beq.n	3f10 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3f0a:	9801      	ldr	r0, [sp, #4]
    3f0c:	f000 f89a 	bl	4044 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f10:	bf00      	nop
    3f12:	b003      	add	sp, #12
    3f14:	f85d fb04 	ldr.w	pc, [sp], #4

00003f18 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3f18:	b500      	push	{lr}
    3f1a:	b089      	sub	sp, #36	; 0x24
    3f1c:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3f1e:	2301      	movs	r3, #1
    3f20:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3f22:	2300      	movs	r3, #0
    3f24:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3f28:	4b1e      	ldr	r3, [pc, #120]	; (3fa4 <Clock_Ip_CompleteSpll+0x8c>)
    3f2a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f2e:	f003 0301 	and.w	r3, r3, #1
    3f32:	2b00      	cmp	r3, #0
    3f34:	d02f      	beq.n	3f96 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f36:	aa02      	add	r2, sp, #8
    3f38:	a903      	add	r1, sp, #12
    3f3a:	a804      	add	r0, sp, #16
    3f3c:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f40:	f7fe fe46 	bl	2bd0 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3f44:	4b17      	ldr	r3, [pc, #92]	; (3fa4 <Clock_Ip_CompleteSpll+0x8c>)
    3f46:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f4a:	0e1b      	lsrs	r3, r3, #24
    3f4c:	f003 0301 	and.w	r3, r3, #1
    3f50:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f52:	9a02      	ldr	r2, [sp, #8]
    3f54:	a903      	add	r1, sp, #12
    3f56:	ab04      	add	r3, sp, #16
    3f58:	4618      	mov	r0, r3
    3f5a:	f7fe fe53 	bl	2c04 <Clock_Ip_TimeoutExpired>
    3f5e:	4603      	mov	r3, r0
    3f60:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3f64:	9b05      	ldr	r3, [sp, #20]
    3f66:	2b00      	cmp	r3, #0
    3f68:	d106      	bne.n	3f78 <Clock_Ip_CompleteSpll+0x60>
    3f6a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f6e:	f083 0301 	eor.w	r3, r3, #1
    3f72:	b2db      	uxtb	r3, r3
    3f74:	2b00      	cmp	r3, #0
    3f76:	d1e5      	bne.n	3f44 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3f78:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3f7c:	f083 0301 	eor.w	r3, r3, #1
    3f80:	b2db      	uxtb	r3, r3
    3f82:	2b00      	cmp	r3, #0
    3f84:	d002      	beq.n	3f8c <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3f86:	2302      	movs	r3, #2
    3f88:	9307      	str	r3, [sp, #28]
    3f8a:	e006      	b.n	3f9a <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3f8c:	9901      	ldr	r1, [sp, #4]
    3f8e:	2001      	movs	r0, #1
    3f90:	f7fe fe0e 	bl	2bb0 <Clock_Ip_ReportClockErrors>
    3f94:	e001      	b.n	3f9a <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3f96:	2300      	movs	r3, #0
    3f98:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3f9a:	9b07      	ldr	r3, [sp, #28]
}
    3f9c:	4618      	mov	r0, r3
    3f9e:	b009      	add	sp, #36	; 0x24
    3fa0:	f85d fb04 	ldr.w	pc, [sp], #4
    3fa4:	40064000 	.word	0x40064000

00003fa8 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3fa8:	b500      	push	{lr}
    3faa:	b083      	sub	sp, #12
    3fac:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3fae:	9801      	ldr	r0, [sp, #4]
    3fb0:	f000 f886 	bl	40c0 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3fb4:	bf00      	nop
    3fb6:	b003      	add	sp, #12
    3fb8:	f85d fb04 	ldr.w	pc, [sp], #4

00003fbc <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3fbc:	b500      	push	{lr}
    3fbe:	b083      	sub	sp, #12
    3fc0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3fc2:	9b01      	ldr	r3, [sp, #4]
    3fc4:	2b00      	cmp	r3, #0
    3fc6:	d002      	beq.n	3fce <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    3fc8:	9801      	ldr	r0, [sp, #4]
    3fca:	f000 f891 	bl	40f0 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3fce:	bf00      	nop
    3fd0:	b003      	add	sp, #12
    3fd2:	f85d fb04 	ldr.w	pc, [sp], #4

00003fd6 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3fd6:	b082      	sub	sp, #8
    3fd8:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3fda:	4b19      	ldr	r3, [pc, #100]	; (4040 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fdc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3fe0:	4a17      	ldr	r2, [pc, #92]	; (4040 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fe2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3fe6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    3fea:	4b15      	ldr	r3, [pc, #84]	; (4040 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3fec:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3ff0:	4a13      	ldr	r2, [pc, #76]	; (4040 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3ff6:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    3ffa:	4b11      	ldr	r3, [pc, #68]	; (4040 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3ffc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4000:	4a0f      	ldr	r2, [pc, #60]	; (4040 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4002:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4006:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    400a:	4b0d      	ldr	r3, [pc, #52]	; (4040 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    400c:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4010:	4a0b      	ldr	r2, [pc, #44]	; (4040 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4012:	f023 0301 	bic.w	r3, r3, #1
    4016:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    401a:	4b09      	ldr	r3, [pc, #36]	; (4040 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    401c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4020:	4a07      	ldr	r2, [pc, #28]	; (4040 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4022:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4026:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    402a:	4b05      	ldr	r3, [pc, #20]	; (4040 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    402c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4030:	4a03      	ldr	r2, [pc, #12]	; (4040 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4032:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4036:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    403a:	bf00      	nop
    403c:	b002      	add	sp, #8
    403e:	4770      	bx	lr
    4040:	40064000 	.word	0x40064000

00004044 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4044:	b082      	sub	sp, #8
    4046:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4048:	9b01      	ldr	r3, [sp, #4]
    404a:	889b      	ldrh	r3, [r3, #4]
    404c:	2b01      	cmp	r3, #1
    404e:	d12f      	bne.n	40b0 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    4050:	4b1a      	ldr	r3, [pc, #104]	; (40bc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4052:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    4056:	9b01      	ldr	r3, [sp, #4]
    4058:	7b5b      	ldrb	r3, [r3, #13]
    405a:	3b01      	subs	r3, #1
    405c:	021b      	lsls	r3, r3, #8
    405e:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    4062:	9b01      	ldr	r3, [sp, #4]
    4064:	7d1b      	ldrb	r3, [r3, #20]
    4066:	3b10      	subs	r3, #16
    4068:	041b      	lsls	r3, r3, #16
    406a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    406e:	430b      	orrs	r3, r1
    4070:	4912      	ldr	r1, [pc, #72]	; (40bc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4072:	4313      	orrs	r3, r2
    4074:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    4078:	9b01      	ldr	r3, [sp, #4]
    407a:	7fdb      	ldrb	r3, [r3, #31]
    407c:	2b02      	cmp	r3, #2
    407e:	d011      	beq.n	40a4 <Clock_Ip_SetSpll_TrustedCall+0x60>
    4080:	2b02      	cmp	r3, #2
    4082:	dc17      	bgt.n	40b4 <Clock_Ip_SetSpll_TrustedCall+0x70>
    4084:	2b00      	cmp	r3, #0
    4086:	d002      	beq.n	408e <Clock_Ip_SetSpll_TrustedCall+0x4a>
    4088:	2b01      	cmp	r3, #1
    408a:	d005      	beq.n	4098 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    408c:	e012      	b.n	40b4 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    408e:	4b0b      	ldr	r3, [pc, #44]	; (40bc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    4090:	2200      	movs	r2, #0
    4092:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4096:	e00e      	b.n	40b6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    4098:	4b08      	ldr	r3, [pc, #32]	; (40bc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    409a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    409e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40a2:	e008      	b.n	40b6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    40a4:	4b05      	ldr	r3, [pc, #20]	; (40bc <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40a6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    40aa:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40ae:	e002      	b.n	40b6 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    40b0:	bf00      	nop
    40b2:	e000      	b.n	40b6 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    40b4:	bf00      	nop
}
    40b6:	bf00      	nop
    40b8:	b002      	add	sp, #8
    40ba:	4770      	bx	lr
    40bc:	40064000 	.word	0x40064000

000040c0 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    40c0:	b082      	sub	sp, #8
    40c2:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    40c4:	4b09      	ldr	r3, [pc, #36]	; (40ec <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40c6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40ca:	4a08      	ldr	r2, [pc, #32]	; (40ec <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    40d0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    40d4:	4b05      	ldr	r3, [pc, #20]	; (40ec <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40d6:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    40da:	4a04      	ldr	r2, [pc, #16]	; (40ec <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    40dc:	f023 0301 	bic.w	r3, r3, #1
    40e0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    40e4:	bf00      	nop
    40e6:	b002      	add	sp, #8
    40e8:	4770      	bx	lr
    40ea:	bf00      	nop
    40ec:	40064000 	.word	0x40064000

000040f0 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    40f0:	b082      	sub	sp, #8
    40f2:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    40f4:	9b01      	ldr	r3, [sp, #4]
    40f6:	889b      	ldrh	r3, [r3, #4]
    40f8:	2b01      	cmp	r3, #1
    40fa:	d107      	bne.n	410c <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    40fc:	4b05      	ldr	r3, [pc, #20]	; (4114 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    40fe:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4102:	4a04      	ldr	r2, [pc, #16]	; (4114 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4104:	f043 0301 	orr.w	r3, r3, #1
    4108:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    410c:	bf00      	nop
    410e:	b002      	add	sp, #8
    4110:	4770      	bx	lr
    4112:	bf00      	nop
    4114:	40064000 	.word	0x40064000

00004118 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4118:	b082      	sub	sp, #8
    411a:	9001      	str	r0, [sp, #4]
    411c:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    411e:	bf00      	nop
    4120:	b002      	add	sp, #8
    4122:	4770      	bx	lr

00004124 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4124:	b082      	sub	sp, #8
    4126:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4128:	bf00      	nop
    412a:	b002      	add	sp, #8
    412c:	4770      	bx	lr

0000412e <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    412e:	b500      	push	{lr}
    4130:	b083      	sub	sp, #12
    4132:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4134:	9b01      	ldr	r3, [sp, #4]
    4136:	2b00      	cmp	r3, #0
    4138:	d002      	beq.n	4140 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    413a:	9801      	ldr	r0, [sp, #4]
    413c:	f000 f8ee 	bl	431c <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4140:	bf00      	nop
    4142:	b003      	add	sp, #12
    4144:	f85d fb04 	ldr.w	pc, [sp], #4

00004148 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4148:	b500      	push	{lr}
    414a:	b083      	sub	sp, #12
    414c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    414e:	9b01      	ldr	r3, [sp, #4]
    4150:	2b00      	cmp	r3, #0
    4152:	d002      	beq.n	415a <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    4154:	9801      	ldr	r0, [sp, #4]
    4156:	f000 f8ff 	bl	4358 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    415a:	bf00      	nop
    415c:	b003      	add	sp, #12
    415e:	f85d fb04 	ldr.w	pc, [sp], #4

00004162 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    4162:	b500      	push	{lr}
    4164:	b083      	sub	sp, #12
    4166:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4168:	9b01      	ldr	r3, [sp, #4]
    416a:	2b00      	cmp	r3, #0
    416c:	d002      	beq.n	4174 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    416e:	9801      	ldr	r0, [sp, #4]
    4170:	f000 f912 	bl	4398 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4174:	bf00      	nop
    4176:	b003      	add	sp, #12
    4178:	f85d fb04 	ldr.w	pc, [sp], #4

0000417c <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    417c:	b500      	push	{lr}
    417e:	b083      	sub	sp, #12
    4180:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4182:	9b01      	ldr	r3, [sp, #4]
    4184:	2b00      	cmp	r3, #0
    4186:	d002      	beq.n	418e <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    4188:	9801      	ldr	r0, [sp, #4]
    418a:	f000 f925 	bl	43d8 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    418e:	bf00      	nop
    4190:	b003      	add	sp, #12
    4192:	f85d fb04 	ldr.w	pc, [sp], #4

00004196 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4196:	b500      	push	{lr}
    4198:	b083      	sub	sp, #12
    419a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    419c:	9b01      	ldr	r3, [sp, #4]
    419e:	2b00      	cmp	r3, #0
    41a0:	d002      	beq.n	41a8 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    41a2:	9801      	ldr	r0, [sp, #4]
    41a4:	f000 f936 	bl	4414 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41a8:	bf00      	nop
    41aa:	b003      	add	sp, #12
    41ac:	f85d fb04 	ldr.w	pc, [sp], #4

000041b0 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    41b0:	b500      	push	{lr}
    41b2:	b083      	sub	sp, #12
    41b4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41b6:	9b01      	ldr	r3, [sp, #4]
    41b8:	2b00      	cmp	r3, #0
    41ba:	d002      	beq.n	41c2 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    41bc:	9801      	ldr	r0, [sp, #4]
    41be:	f000 f949 	bl	4454 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41c2:	bf00      	nop
    41c4:	b003      	add	sp, #12
    41c6:	f85d fb04 	ldr.w	pc, [sp], #4

000041ca <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    41ca:	b500      	push	{lr}
    41cc:	b083      	sub	sp, #12
    41ce:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41d0:	9b01      	ldr	r3, [sp, #4]
    41d2:	2b00      	cmp	r3, #0
    41d4:	d002      	beq.n	41dc <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    41d6:	9801      	ldr	r0, [sp, #4]
    41d8:	f000 f958 	bl	448c <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41dc:	bf00      	nop
    41de:	b003      	add	sp, #12
    41e0:	f85d fb04 	ldr.w	pc, [sp], #4

000041e4 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    41e4:	b500      	push	{lr}
    41e6:	b083      	sub	sp, #12
    41e8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ea:	9b01      	ldr	r3, [sp, #4]
    41ec:	2b00      	cmp	r3, #0
    41ee:	d002      	beq.n	41f6 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    41f0:	9801      	ldr	r0, [sp, #4]
    41f2:	f000 f969 	bl	44c8 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41f6:	bf00      	nop
    41f8:	b003      	add	sp, #12
    41fa:	f85d fb04 	ldr.w	pc, [sp], #4

000041fe <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    41fe:	b500      	push	{lr}
    4200:	b083      	sub	sp, #12
    4202:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4204:	9b01      	ldr	r3, [sp, #4]
    4206:	2b00      	cmp	r3, #0
    4208:	d002      	beq.n	4210 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    420a:	9801      	ldr	r0, [sp, #4]
    420c:	f000 f978 	bl	4500 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4210:	bf00      	nop
    4212:	b003      	add	sp, #12
    4214:	f85d fb04 	ldr.w	pc, [sp], #4

00004218 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4218:	b500      	push	{lr}
    421a:	b083      	sub	sp, #12
    421c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    421e:	9b01      	ldr	r3, [sp, #4]
    4220:	2b00      	cmp	r3, #0
    4222:	d002      	beq.n	422a <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4224:	9801      	ldr	r0, [sp, #4]
    4226:	f000 f989 	bl	453c <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    422a:	bf00      	nop
    422c:	b003      	add	sp, #12
    422e:	f85d fb04 	ldr.w	pc, [sp], #4

00004232 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4232:	b500      	push	{lr}
    4234:	b083      	sub	sp, #12
    4236:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4238:	9b01      	ldr	r3, [sp, #4]
    423a:	2b00      	cmp	r3, #0
    423c:	d002      	beq.n	4244 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    423e:	9801      	ldr	r0, [sp, #4]
    4240:	f000 f998 	bl	4574 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4244:	bf00      	nop
    4246:	b003      	add	sp, #12
    4248:	f85d fb04 	ldr.w	pc, [sp], #4

0000424c <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    424c:	b500      	push	{lr}
    424e:	b083      	sub	sp, #12
    4250:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4252:	9b01      	ldr	r3, [sp, #4]
    4254:	2b00      	cmp	r3, #0
    4256:	d002      	beq.n	425e <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    4258:	9801      	ldr	r0, [sp, #4]
    425a:	f000 f9a9 	bl	45b0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    425e:	bf00      	nop
    4260:	b003      	add	sp, #12
    4262:	f85d fb04 	ldr.w	pc, [sp], #4

00004266 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4266:	b500      	push	{lr}
    4268:	b083      	sub	sp, #12
    426a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    426c:	9b01      	ldr	r3, [sp, #4]
    426e:	2b00      	cmp	r3, #0
    4270:	d002      	beq.n	4278 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    4272:	9801      	ldr	r0, [sp, #4]
    4274:	f000 f9e6 	bl	4644 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4278:	bf00      	nop
    427a:	b003      	add	sp, #12
    427c:	f85d fb04 	ldr.w	pc, [sp], #4

00004280 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4280:	b500      	push	{lr}
    4282:	b083      	sub	sp, #12
    4284:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4286:	9b01      	ldr	r3, [sp, #4]
    4288:	2b00      	cmp	r3, #0
    428a:	d002      	beq.n	4292 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    428c:	9801      	ldr	r0, [sp, #4]
    428e:	f000 fa25 	bl	46dc <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4292:	bf00      	nop
    4294:	b003      	add	sp, #12
    4296:	f85d fb04 	ldr.w	pc, [sp], #4

0000429a <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    429a:	b500      	push	{lr}
    429c:	b083      	sub	sp, #12
    429e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42a0:	9b01      	ldr	r3, [sp, #4]
    42a2:	2b00      	cmp	r3, #0
    42a4:	d002      	beq.n	42ac <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    42a6:	9801      	ldr	r0, [sp, #4]
    42a8:	f000 fa2a 	bl	4700 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42ac:	bf00      	nop
    42ae:	b003      	add	sp, #12
    42b0:	f85d fb04 	ldr.w	pc, [sp], #4

000042b4 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    42b4:	b500      	push	{lr}
    42b6:	b083      	sub	sp, #12
    42b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42ba:	9b01      	ldr	r3, [sp, #4]
    42bc:	2b00      	cmp	r3, #0
    42be:	d002      	beq.n	42c6 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    42c0:	9801      	ldr	r0, [sp, #4]
    42c2:	f000 fa3b 	bl	473c <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42c6:	bf00      	nop
    42c8:	b003      	add	sp, #12
    42ca:	f85d fb04 	ldr.w	pc, [sp], #4

000042ce <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    42ce:	b500      	push	{lr}
    42d0:	b083      	sub	sp, #12
    42d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42d4:	9b01      	ldr	r3, [sp, #4]
    42d6:	2b00      	cmp	r3, #0
    42d8:	d002      	beq.n	42e0 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    42da:	9801      	ldr	r0, [sp, #4]
    42dc:	f000 fa56 	bl	478c <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42e0:	bf00      	nop
    42e2:	b003      	add	sp, #12
    42e4:	f85d fb04 	ldr.w	pc, [sp], #4

000042e8 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    42e8:	b500      	push	{lr}
    42ea:	b083      	sub	sp, #12
    42ec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42ee:	9b01      	ldr	r3, [sp, #4]
    42f0:	2b00      	cmp	r3, #0
    42f2:	d002      	beq.n	42fa <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    42f4:	9801      	ldr	r0, [sp, #4]
    42f6:	f000 fa79 	bl	47ec <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42fa:	bf00      	nop
    42fc:	b003      	add	sp, #12
    42fe:	f85d fb04 	ldr.w	pc, [sp], #4

00004302 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4302:	b500      	push	{lr}
    4304:	b083      	sub	sp, #12
    4306:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4308:	9b01      	ldr	r3, [sp, #4]
    430a:	2b00      	cmp	r3, #0
    430c:	d002      	beq.n	4314 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    430e:	9801      	ldr	r0, [sp, #4]
    4310:	f000 fa8a 	bl	4828 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4314:	bf00      	nop
    4316:	b003      	add	sp, #12
    4318:	f85d fb04 	ldr.w	pc, [sp], #4

0000431c <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    431c:	b084      	sub	sp, #16
    431e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4320:	4b0b      	ldr	r3, [pc, #44]	; (4350 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    4322:	795b      	ldrb	r3, [r3, #5]
    4324:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4326:	4b0b      	ldr	r3, [pc, #44]	; (4354 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4328:	695b      	ldr	r3, [r3, #20]
    432a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    432c:	9b02      	ldr	r3, [sp, #8]
    432e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4332:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4334:	9b03      	ldr	r3, [sp, #12]
    4336:	061b      	lsls	r3, r3, #24
    4338:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    433c:	9a02      	ldr	r2, [sp, #8]
    433e:	4313      	orrs	r3, r2
    4340:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4342:	4a04      	ldr	r2, [pc, #16]	; (4354 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4344:	9b02      	ldr	r3, [sp, #8]
    4346:	6153      	str	r3, [r2, #20]
}
    4348:	bf00      	nop
    434a:	b004      	add	sp, #16
    434c:	4770      	bx	lr
    434e:	bf00      	nop
    4350:	0000a9bc 	.word	0x0000a9bc
    4354:	40064000 	.word	0x40064000

00004358 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4358:	b084      	sub	sp, #16
    435a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    435c:	9b01      	ldr	r3, [sp, #4]
    435e:	685b      	ldr	r3, [r3, #4]
    4360:	4a0b      	ldr	r2, [pc, #44]	; (4390 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    4362:	5cd3      	ldrb	r3, [r2, r3]
    4364:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    4366:	4b0b      	ldr	r3, [pc, #44]	; (4394 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4368:	695b      	ldr	r3, [r3, #20]
    436a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    436c:	9b02      	ldr	r3, [sp, #8]
    436e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4372:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4374:	9b03      	ldr	r3, [sp, #12]
    4376:	061b      	lsls	r3, r3, #24
    4378:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    437c:	9a02      	ldr	r2, [sp, #8]
    437e:	4313      	orrs	r3, r2
    4380:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    4382:	4a04      	ldr	r2, [pc, #16]	; (4394 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    4384:	9b02      	ldr	r3, [sp, #8]
    4386:	6153      	str	r3, [r2, #20]
}
    4388:	bf00      	nop
    438a:	b004      	add	sp, #16
    438c:	4770      	bx	lr
    438e:	bf00      	nop
    4390:	0000a9bc 	.word	0x0000a9bc
    4394:	40064000 	.word	0x40064000

00004398 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4398:	b084      	sub	sp, #16
    439a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    439c:	9b01      	ldr	r3, [sp, #4]
    439e:	685b      	ldr	r3, [r3, #4]
    43a0:	4a0b      	ldr	r2, [pc, #44]	; (43d0 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    43a2:	5cd3      	ldrb	r3, [r2, r3]
    43a4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    43a6:	4b0b      	ldr	r3, [pc, #44]	; (43d4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    43a8:	699b      	ldr	r3, [r3, #24]
    43aa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    43ac:	9b02      	ldr	r3, [sp, #8]
    43ae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43b2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    43b4:	9b03      	ldr	r3, [sp, #12]
    43b6:	061b      	lsls	r3, r3, #24
    43b8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43bc:	9a02      	ldr	r2, [sp, #8]
    43be:	4313      	orrs	r3, r2
    43c0:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    43c2:	4a04      	ldr	r2, [pc, #16]	; (43d4 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    43c4:	9b02      	ldr	r3, [sp, #8]
    43c6:	6193      	str	r3, [r2, #24]
}
    43c8:	bf00      	nop
    43ca:	b004      	add	sp, #16
    43cc:	4770      	bx	lr
    43ce:	bf00      	nop
    43d0:	0000a9bc 	.word	0x0000a9bc
    43d4:	40064000 	.word	0x40064000

000043d8 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43d8:	b084      	sub	sp, #16
    43da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43dc:	4b0b      	ldr	r3, [pc, #44]	; (440c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    43de:	795b      	ldrb	r3, [r3, #5]
    43e0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    43e2:	4b0b      	ldr	r3, [pc, #44]	; (4410 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    43e4:	69db      	ldr	r3, [r3, #28]
    43e6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    43e8:	9b02      	ldr	r3, [sp, #8]
    43ea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43ee:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    43f0:	9b03      	ldr	r3, [sp, #12]
    43f2:	061b      	lsls	r3, r3, #24
    43f4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43f8:	9a02      	ldr	r2, [sp, #8]
    43fa:	4313      	orrs	r3, r2
    43fc:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    43fe:	4a04      	ldr	r2, [pc, #16]	; (4410 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4400:	9b02      	ldr	r3, [sp, #8]
    4402:	61d3      	str	r3, [r2, #28]
}
    4404:	bf00      	nop
    4406:	b004      	add	sp, #16
    4408:	4770      	bx	lr
    440a:	bf00      	nop
    440c:	0000a9bc 	.word	0x0000a9bc
    4410:	40064000 	.word	0x40064000

00004414 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4414:	b084      	sub	sp, #16
    4416:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4418:	9b01      	ldr	r3, [sp, #4]
    441a:	685b      	ldr	r3, [r3, #4]
    441c:	4a0b      	ldr	r2, [pc, #44]	; (444c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    441e:	5cd3      	ldrb	r3, [r2, r3]
    4420:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4422:	4b0b      	ldr	r3, [pc, #44]	; (4450 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4424:	69db      	ldr	r3, [r3, #28]
    4426:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4428:	9b02      	ldr	r3, [sp, #8]
    442a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    442e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4430:	9b03      	ldr	r3, [sp, #12]
    4432:	061b      	lsls	r3, r3, #24
    4434:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4438:	9a02      	ldr	r2, [sp, #8]
    443a:	4313      	orrs	r3, r2
    443c:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    443e:	4a04      	ldr	r2, [pc, #16]	; (4450 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4440:	9b02      	ldr	r3, [sp, #8]
    4442:	61d3      	str	r3, [r2, #28]
}
    4444:	bf00      	nop
    4446:	b004      	add	sp, #16
    4448:	4770      	bx	lr
    444a:	bf00      	nop
    444c:	0000a9bc 	.word	0x0000a9bc
    4450:	40064000 	.word	0x40064000

00004454 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4454:	b084      	sub	sp, #16
    4456:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4458:	4b0a      	ldr	r3, [pc, #40]	; (4484 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    445a:	7b9b      	ldrb	r3, [r3, #14]
    445c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    445e:	4b0a      	ldr	r3, [pc, #40]	; (4488 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4460:	691b      	ldr	r3, [r3, #16]
    4462:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4464:	9b02      	ldr	r3, [sp, #8]
    4466:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    446a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    446c:	9b03      	ldr	r3, [sp, #12]
    446e:	011b      	lsls	r3, r3, #4
    4470:	9a02      	ldr	r2, [sp, #8]
    4472:	4313      	orrs	r3, r2
    4474:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4476:	4a04      	ldr	r2, [pc, #16]	; (4488 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4478:	9b02      	ldr	r3, [sp, #8]
    447a:	6113      	str	r3, [r2, #16]
}
    447c:	bf00      	nop
    447e:	b004      	add	sp, #16
    4480:	4770      	bx	lr
    4482:	bf00      	nop
    4484:	0000a964 	.word	0x0000a964
    4488:	40048000 	.word	0x40048000

0000448c <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    448c:	b084      	sub	sp, #16
    448e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4490:	9b01      	ldr	r3, [sp, #4]
    4492:	685b      	ldr	r3, [r3, #4]
    4494:	4a0a      	ldr	r2, [pc, #40]	; (44c0 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    4496:	5cd3      	ldrb	r3, [r2, r3]
    4498:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    449a:	4b0a      	ldr	r3, [pc, #40]	; (44c4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    449c:	691b      	ldr	r3, [r3, #16]
    449e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    44a0:	9b02      	ldr	r3, [sp, #8]
    44a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    44a6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    44a8:	9b03      	ldr	r3, [sp, #12]
    44aa:	011b      	lsls	r3, r3, #4
    44ac:	9a02      	ldr	r2, [sp, #8]
    44ae:	4313      	orrs	r3, r2
    44b0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44b2:	4a04      	ldr	r2, [pc, #16]	; (44c4 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    44b4:	9b02      	ldr	r3, [sp, #8]
    44b6:	6113      	str	r3, [r2, #16]
}
    44b8:	bf00      	nop
    44ba:	b004      	add	sp, #16
    44bc:	4770      	bx	lr
    44be:	bf00      	nop
    44c0:	0000a964 	.word	0x0000a964
    44c4:	40048000 	.word	0x40048000

000044c8 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44c8:	b084      	sub	sp, #16
    44ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44cc:	4b0a      	ldr	r3, [pc, #40]	; (44f8 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    44ce:	785b      	ldrb	r3, [r3, #1]
    44d0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    44d2:	4b0a      	ldr	r3, [pc, #40]	; (44fc <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    44d4:	691b      	ldr	r3, [r3, #16]
    44d6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    44d8:	9b02      	ldr	r3, [sp, #8]
    44da:	f023 030c 	bic.w	r3, r3, #12
    44de:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    44e0:	9b03      	ldr	r3, [sp, #12]
    44e2:	009b      	lsls	r3, r3, #2
    44e4:	9a02      	ldr	r2, [sp, #8]
    44e6:	4313      	orrs	r3, r2
    44e8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44ea:	4a04      	ldr	r2, [pc, #16]	; (44fc <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    44ec:	9b02      	ldr	r3, [sp, #8]
    44ee:	6113      	str	r3, [r2, #16]
}
    44f0:	bf00      	nop
    44f2:	b004      	add	sp, #16
    44f4:	4770      	bx	lr
    44f6:	bf00      	nop
    44f8:	0000aa1c 	.word	0x0000aa1c
    44fc:	40048000 	.word	0x40048000

00004500 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4500:	b084      	sub	sp, #16
    4502:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4504:	9b01      	ldr	r3, [sp, #4]
    4506:	685b      	ldr	r3, [r3, #4]
    4508:	4a0a      	ldr	r2, [pc, #40]	; (4534 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    450a:	5cd3      	ldrb	r3, [r2, r3]
    450c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    450e:	4b0a      	ldr	r3, [pc, #40]	; (4538 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4510:	691b      	ldr	r3, [r3, #16]
    4512:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4514:	9b02      	ldr	r3, [sp, #8]
    4516:	f023 030c 	bic.w	r3, r3, #12
    451a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    451c:	9b03      	ldr	r3, [sp, #12]
    451e:	009b      	lsls	r3, r3, #2
    4520:	9a02      	ldr	r2, [sp, #8]
    4522:	4313      	orrs	r3, r2
    4524:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4526:	4a04      	ldr	r2, [pc, #16]	; (4538 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4528:	9b02      	ldr	r3, [sp, #8]
    452a:	6113      	str	r3, [r2, #16]
}
    452c:	bf00      	nop
    452e:	b004      	add	sp, #16
    4530:	4770      	bx	lr
    4532:	bf00      	nop
    4534:	0000aa1c 	.word	0x0000aa1c
    4538:	40048000 	.word	0x40048000

0000453c <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    453c:	b084      	sub	sp, #16
    453e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4540:	4b0a      	ldr	r3, [pc, #40]	; (456c <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    4542:	795b      	ldrb	r3, [r3, #5]
    4544:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    4546:	4b0a      	ldr	r3, [pc, #40]	; (4570 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4548:	6a1b      	ldr	r3, [r3, #32]
    454a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    454c:	9b02      	ldr	r3, [sp, #8]
    454e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4552:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4554:	9b03      	ldr	r3, [sp, #12]
    4556:	061b      	lsls	r3, r3, #24
    4558:	9a02      	ldr	r2, [sp, #8]
    455a:	4313      	orrs	r3, r2
    455c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    455e:	4a04      	ldr	r2, [pc, #16]	; (4570 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4560:	9b02      	ldr	r3, [sp, #8]
    4562:	6213      	str	r3, [r2, #32]
}
    4564:	bf00      	nop
    4566:	b004      	add	sp, #16
    4568:	4770      	bx	lr
    456a:	bf00      	nop
    456c:	0000a9bc 	.word	0x0000a9bc
    4570:	40064000 	.word	0x40064000

00004574 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4574:	b084      	sub	sp, #16
    4576:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4578:	9b01      	ldr	r3, [sp, #4]
    457a:	685b      	ldr	r3, [r3, #4]
    457c:	4a0a      	ldr	r2, [pc, #40]	; (45a8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    457e:	5cd3      	ldrb	r3, [r2, r3]
    4580:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    4582:	4b0a      	ldr	r3, [pc, #40]	; (45ac <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4584:	6a1b      	ldr	r3, [r3, #32]
    4586:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4588:	9b02      	ldr	r3, [sp, #8]
    458a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    458e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4590:	9b03      	ldr	r3, [sp, #12]
    4592:	061b      	lsls	r3, r3, #24
    4594:	9a02      	ldr	r2, [sp, #8]
    4596:	4313      	orrs	r3, r2
    4598:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    459a:	4a04      	ldr	r2, [pc, #16]	; (45ac <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    459c:	9b02      	ldr	r3, [sp, #8]
    459e:	6213      	str	r3, [r2, #32]
}
    45a0:	bf00      	nop
    45a2:	b004      	add	sp, #16
    45a4:	4770      	bx	lr
    45a6:	bf00      	nop
    45a8:	0000a9bc 	.word	0x0000a9bc
    45ac:	40064000 	.word	0x40064000

000045b0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45b0:	b086      	sub	sp, #24
    45b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45b4:	4b20      	ldr	r3, [pc, #128]	; (4638 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    45b6:	795b      	ldrb	r3, [r3, #5]
    45b8:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    45ba:	9b01      	ldr	r3, [sp, #4]
    45bc:	681a      	ldr	r2, [r3, #0]
    45be:	491f      	ldr	r1, [pc, #124]	; (463c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    45c0:	4613      	mov	r3, r2
    45c2:	00db      	lsls	r3, r3, #3
    45c4:	4413      	add	r3, r2
    45c6:	440b      	add	r3, r1
    45c8:	781b      	ldrb	r3, [r3, #0]
    45ca:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    45cc:	4b1c      	ldr	r3, [pc, #112]	; (4640 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    45ce:	68db      	ldr	r3, [r3, #12]
    45d0:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    45d2:	9b03      	ldr	r3, [sp, #12]
    45d4:	2b03      	cmp	r3, #3
    45d6:	d813      	bhi.n	4600 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    45d8:	9b03      	ldr	r3, [sp, #12]
    45da:	005b      	lsls	r3, r3, #1
    45dc:	3318      	adds	r3, #24
    45de:	2203      	movs	r2, #3
    45e0:	fa02 f303 	lsl.w	r3, r2, r3
    45e4:	43db      	mvns	r3, r3
    45e6:	9a05      	ldr	r2, [sp, #20]
    45e8:	4013      	ands	r3, r2
    45ea:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    45ec:	9b03      	ldr	r3, [sp, #12]
    45ee:	005b      	lsls	r3, r3, #1
    45f0:	3318      	adds	r3, #24
    45f2:	9a04      	ldr	r2, [sp, #16]
    45f4:	fa02 f303 	lsl.w	r3, r2, r3
    45f8:	9a05      	ldr	r2, [sp, #20]
    45fa:	4313      	orrs	r3, r2
    45fc:	9305      	str	r3, [sp, #20]
    45fe:	e014      	b.n	462a <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4600:	9b03      	ldr	r3, [sp, #12]
    4602:	3b04      	subs	r3, #4
    4604:	005b      	lsls	r3, r3, #1
    4606:	3310      	adds	r3, #16
    4608:	2203      	movs	r2, #3
    460a:	fa02 f303 	lsl.w	r3, r2, r3
    460e:	43db      	mvns	r3, r3
    4610:	9a05      	ldr	r2, [sp, #20]
    4612:	4013      	ands	r3, r2
    4614:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4616:	9b03      	ldr	r3, [sp, #12]
    4618:	3b04      	subs	r3, #4
    461a:	005b      	lsls	r3, r3, #1
    461c:	3310      	adds	r3, #16
    461e:	9a04      	ldr	r2, [sp, #16]
    4620:	fa02 f303 	lsl.w	r3, r2, r3
    4624:	9a05      	ldr	r2, [sp, #20]
    4626:	4313      	orrs	r3, r2
    4628:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    462a:	4a05      	ldr	r2, [pc, #20]	; (4640 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    462c:	9b05      	ldr	r3, [sp, #20]
    462e:	60d3      	str	r3, [r2, #12]
}
    4630:	bf00      	nop
    4632:	b006      	add	sp, #24
    4634:	4770      	bx	lr
    4636:	bf00      	nop
    4638:	0000a964 	.word	0x0000a964
    463c:	0000a654 	.word	0x0000a654
    4640:	40048000 	.word	0x40048000

00004644 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4644:	b086      	sub	sp, #24
    4646:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4648:	9b01      	ldr	r3, [sp, #4]
    464a:	685b      	ldr	r3, [r3, #4]
    464c:	4a20      	ldr	r2, [pc, #128]	; (46d0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    464e:	5cd3      	ldrb	r3, [r2, r3]
    4650:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4652:	9b01      	ldr	r3, [sp, #4]
    4654:	681a      	ldr	r2, [r3, #0]
    4656:	491f      	ldr	r1, [pc, #124]	; (46d4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4658:	4613      	mov	r3, r2
    465a:	00db      	lsls	r3, r3, #3
    465c:	4413      	add	r3, r2
    465e:	440b      	add	r3, r1
    4660:	781b      	ldrb	r3, [r3, #0]
    4662:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4664:	4b1c      	ldr	r3, [pc, #112]	; (46d8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4666:	68db      	ldr	r3, [r3, #12]
    4668:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    466a:	9b03      	ldr	r3, [sp, #12]
    466c:	2b03      	cmp	r3, #3
    466e:	d813      	bhi.n	4698 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4670:	9b03      	ldr	r3, [sp, #12]
    4672:	005b      	lsls	r3, r3, #1
    4674:	3318      	adds	r3, #24
    4676:	2203      	movs	r2, #3
    4678:	fa02 f303 	lsl.w	r3, r2, r3
    467c:	43db      	mvns	r3, r3
    467e:	9a05      	ldr	r2, [sp, #20]
    4680:	4013      	ands	r3, r2
    4682:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4684:	9b03      	ldr	r3, [sp, #12]
    4686:	005b      	lsls	r3, r3, #1
    4688:	3318      	adds	r3, #24
    468a:	9a04      	ldr	r2, [sp, #16]
    468c:	fa02 f303 	lsl.w	r3, r2, r3
    4690:	9a05      	ldr	r2, [sp, #20]
    4692:	4313      	orrs	r3, r2
    4694:	9305      	str	r3, [sp, #20]
    4696:	e014      	b.n	46c2 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4698:	9b03      	ldr	r3, [sp, #12]
    469a:	3b04      	subs	r3, #4
    469c:	005b      	lsls	r3, r3, #1
    469e:	3310      	adds	r3, #16
    46a0:	2203      	movs	r2, #3
    46a2:	fa02 f303 	lsl.w	r3, r2, r3
    46a6:	43db      	mvns	r3, r3
    46a8:	9a05      	ldr	r2, [sp, #20]
    46aa:	4013      	ands	r3, r2
    46ac:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    46ae:	9b03      	ldr	r3, [sp, #12]
    46b0:	3b04      	subs	r3, #4
    46b2:	005b      	lsls	r3, r3, #1
    46b4:	3310      	adds	r3, #16
    46b6:	9a04      	ldr	r2, [sp, #16]
    46b8:	fa02 f303 	lsl.w	r3, r2, r3
    46bc:	9a05      	ldr	r2, [sp, #20]
    46be:	4313      	orrs	r3, r2
    46c0:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    46c2:	4a05      	ldr	r2, [pc, #20]	; (46d8 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    46c4:	9b05      	ldr	r3, [sp, #20]
    46c6:	60d3      	str	r3, [r2, #12]
}
    46c8:	bf00      	nop
    46ca:	b006      	add	sp, #24
    46cc:	4770      	bx	lr
    46ce:	bf00      	nop
    46d0:	0000a964 	.word	0x0000a964
    46d4:	0000a654 	.word	0x0000a654
    46d8:	40048000 	.word	0x40048000

000046dc <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    46dc:	b084      	sub	sp, #16
    46de:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    46e0:	4b06      	ldr	r3, [pc, #24]	; (46fc <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    46e2:	685b      	ldr	r3, [r3, #4]
    46e4:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    46e6:	9b03      	ldr	r3, [sp, #12]
    46e8:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    46ec:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    46ee:	4a03      	ldr	r2, [pc, #12]	; (46fc <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    46f0:	9b03      	ldr	r3, [sp, #12]
    46f2:	6053      	str	r3, [r2, #4]
}
    46f4:	bf00      	nop
    46f6:	b004      	add	sp, #16
    46f8:	4770      	bx	lr
    46fa:	bf00      	nop
    46fc:	40048000 	.word	0x40048000

00004700 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4700:	b084      	sub	sp, #16
    4702:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4704:	9b01      	ldr	r3, [sp, #4]
    4706:	685b      	ldr	r3, [r3, #4]
    4708:	4a0a      	ldr	r2, [pc, #40]	; (4734 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    470a:	5cd3      	ldrb	r3, [r2, r3]
    470c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    470e:	4b0a      	ldr	r3, [pc, #40]	; (4738 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4710:	685b      	ldr	r3, [r3, #4]
    4712:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4714:	9b02      	ldr	r3, [sp, #8]
    4716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    471a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    471c:	9b03      	ldr	r3, [sp, #12]
    471e:	011b      	lsls	r3, r3, #4
    4720:	9a02      	ldr	r2, [sp, #8]
    4722:	4313      	orrs	r3, r2
    4724:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4726:	4a04      	ldr	r2, [pc, #16]	; (4738 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4728:	9b02      	ldr	r3, [sp, #8]
    472a:	6053      	str	r3, [r2, #4]
}
    472c:	bf00      	nop
    472e:	b004      	add	sp, #16
    4730:	4770      	bx	lr
    4732:	bf00      	nop
    4734:	0000a964 	.word	0x0000a964
    4738:	40048000 	.word	0x40048000

0000473c <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    473c:	b084      	sub	sp, #16
    473e:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4740:	9b01      	ldr	r3, [sp, #4]
    4742:	681a      	ldr	r2, [r3, #0]
    4744:	490f      	ldr	r1, [pc, #60]	; (4784 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4746:	4613      	mov	r3, r2
    4748:	00db      	lsls	r3, r3, #3
    474a:	4413      	add	r3, r2
    474c:	440b      	add	r3, r1
    474e:	3304      	adds	r3, #4
    4750:	781b      	ldrb	r3, [r3, #0]
    4752:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4754:	4a0c      	ldr	r2, [pc, #48]	; (4788 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4756:	9b03      	ldr	r3, [sp, #12]
    4758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    475c:	490a      	ldr	r1, [pc, #40]	; (4788 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    475e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4762:	9b03      	ldr	r3, [sp, #12]
    4764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4768:	4a07      	ldr	r2, [pc, #28]	; (4788 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    476a:	9b03      	ldr	r3, [sp, #12]
    476c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4770:	4905      	ldr	r1, [pc, #20]	; (4788 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4772:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4776:	9b03      	ldr	r3, [sp, #12]
    4778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    477c:	bf00      	nop
    477e:	b004      	add	sp, #16
    4780:	4770      	bx	lr
    4782:	bf00      	nop
    4784:	0000a654 	.word	0x0000a654
    4788:	40065000 	.word	0x40065000

0000478c <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    478c:	b086      	sub	sp, #24
    478e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4790:	9b01      	ldr	r3, [sp, #4]
    4792:	681a      	ldr	r2, [r3, #0]
    4794:	4912      	ldr	r1, [pc, #72]	; (47e0 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4796:	4613      	mov	r3, r2
    4798:	00db      	lsls	r3, r3, #3
    479a:	4413      	add	r3, r2
    479c:	440b      	add	r3, r1
    479e:	3304      	adds	r3, #4
    47a0:	781b      	ldrb	r3, [r3, #0]
    47a2:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47a4:	9b01      	ldr	r3, [sp, #4]
    47a6:	685b      	ldr	r3, [r3, #4]
    47a8:	4a0e      	ldr	r2, [pc, #56]	; (47e4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    47aa:	5cd3      	ldrb	r3, [r2, r3]
    47ac:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    47ae:	4a0e      	ldr	r2, [pc, #56]	; (47e8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    47b0:	9b05      	ldr	r3, [sp, #20]
    47b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    47b6:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    47b8:	9b03      	ldr	r3, [sp, #12]
    47ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    47be:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    47c0:	9b04      	ldr	r3, [sp, #16]
    47c2:	061b      	lsls	r3, r3, #24
    47c4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    47c8:	9a03      	ldr	r2, [sp, #12]
    47ca:	4313      	orrs	r3, r2
    47cc:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    47ce:	4906      	ldr	r1, [pc, #24]	; (47e8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    47d0:	9b05      	ldr	r3, [sp, #20]
    47d2:	9a03      	ldr	r2, [sp, #12]
    47d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    47d8:	bf00      	nop
    47da:	b006      	add	sp, #24
    47dc:	4770      	bx	lr
    47de:	bf00      	nop
    47e0:	0000a654 	.word	0x0000a654
    47e4:	0000a9ec 	.word	0x0000a9ec
    47e8:	40065000 	.word	0x40065000

000047ec <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47ec:	b084      	sub	sp, #16
    47ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47f0:	4b0b      	ldr	r3, [pc, #44]	; (4820 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    47f2:	7f1b      	ldrb	r3, [r3, #28]
    47f4:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    47f6:	4b0b      	ldr	r3, [pc, #44]	; (4824 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    47f8:	685b      	ldr	r3, [r3, #4]
    47fa:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    47fc:	9b02      	ldr	r3, [sp, #8]
    47fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4802:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4804:	9b03      	ldr	r3, [sp, #12]
    4806:	031b      	lsls	r3, r3, #12
    4808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    480c:	9a02      	ldr	r2, [sp, #8]
    480e:	4313      	orrs	r3, r2
    4810:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4812:	4a04      	ldr	r2, [pc, #16]	; (4824 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4814:	9b02      	ldr	r3, [sp, #8]
    4816:	6053      	str	r3, [r2, #4]
}
    4818:	bf00      	nop
    481a:	b004      	add	sp, #16
    481c:	4770      	bx	lr
    481e:	bf00      	nop
    4820:	0000a964 	.word	0x0000a964
    4824:	40048000 	.word	0x40048000

00004828 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4828:	b084      	sub	sp, #16
    482a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    482c:	9b01      	ldr	r3, [sp, #4]
    482e:	685b      	ldr	r3, [r3, #4]
    4830:	4a0b      	ldr	r2, [pc, #44]	; (4860 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4832:	5cd3      	ldrb	r3, [r2, r3]
    4834:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4836:	4b0b      	ldr	r3, [pc, #44]	; (4864 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4838:	685b      	ldr	r3, [r3, #4]
    483a:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    483c:	9b02      	ldr	r3, [sp, #8]
    483e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4842:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4844:	9b03      	ldr	r3, [sp, #12]
    4846:	031b      	lsls	r3, r3, #12
    4848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    484c:	9a02      	ldr	r2, [sp, #8]
    484e:	4313      	orrs	r3, r2
    4850:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4852:	4a04      	ldr	r2, [pc, #16]	; (4864 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4854:	9b02      	ldr	r3, [sp, #8]
    4856:	6053      	str	r3, [r2, #4]
}
    4858:	bf00      	nop
    485a:	b004      	add	sp, #16
    485c:	4770      	bx	lr
    485e:	bf00      	nop
    4860:	0000a964 	.word	0x0000a964
    4864:	40048000 	.word	0x40048000

00004868 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4868:	b500      	push	{lr}
    486a:	b085      	sub	sp, #20
    486c:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    486e:	2300      	movs	r3, #0
    4870:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4874:	9b01      	ldr	r3, [sp, #4]
    4876:	2b00      	cmp	r3, #0
    4878:	d037      	beq.n	48ea <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    487a:	2300      	movs	r3, #0
    487c:	9303      	str	r3, [sp, #12]
    487e:	e02b      	b.n	48d8 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4880:	4b29      	ldr	r3, [pc, #164]	; (4928 <DisableSafeClock+0xc0>)
    4882:	6819      	ldr	r1, [r3, #0]
    4884:	9a03      	ldr	r2, [sp, #12]
    4886:	4613      	mov	r3, r2
    4888:	005b      	lsls	r3, r3, #1
    488a:	4413      	add	r3, r2
    488c:	009b      	lsls	r3, r3, #2
    488e:	440b      	add	r3, r1
    4890:	3314      	adds	r3, #20
    4892:	681b      	ldr	r3, [r3, #0]
    4894:	2b05      	cmp	r3, #5
    4896:	d11c      	bne.n	48d2 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4898:	2301      	movs	r3, #1
    489a:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    489e:	4b22      	ldr	r3, [pc, #136]	; (4928 <DisableSafeClock+0xc0>)
    48a0:	6819      	ldr	r1, [r3, #0]
    48a2:	9a03      	ldr	r2, [sp, #12]
    48a4:	4613      	mov	r3, r2
    48a6:	005b      	lsls	r3, r3, #1
    48a8:	4413      	add	r3, r2
    48aa:	009b      	lsls	r3, r3, #2
    48ac:	440b      	add	r3, r1
    48ae:	3318      	adds	r3, #24
    48b0:	881b      	ldrh	r3, [r3, #0]
    48b2:	2b00      	cmp	r3, #0
    48b4:	d118      	bne.n	48e8 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    48b6:	4b1d      	ldr	r3, [pc, #116]	; (492c <DisableSafeClock+0xc4>)
    48b8:	791b      	ldrb	r3, [r3, #4]
    48ba:	4619      	mov	r1, r3
    48bc:	4a1c      	ldr	r2, [pc, #112]	; (4930 <DisableSafeClock+0xc8>)
    48be:	460b      	mov	r3, r1
    48c0:	005b      	lsls	r3, r3, #1
    48c2:	440b      	add	r3, r1
    48c4:	009b      	lsls	r3, r3, #2
    48c6:	4413      	add	r3, r2
    48c8:	3308      	adds	r3, #8
    48ca:	681b      	ldr	r3, [r3, #0]
    48cc:	2005      	movs	r0, #5
    48ce:	4798      	blx	r3
                }
                break;
    48d0:	e00a      	b.n	48e8 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    48d2:	9b03      	ldr	r3, [sp, #12]
    48d4:	3301      	adds	r3, #1
    48d6:	9303      	str	r3, [sp, #12]
    48d8:	4b13      	ldr	r3, [pc, #76]	; (4928 <DisableSafeClock+0xc0>)
    48da:	681b      	ldr	r3, [r3, #0]
    48dc:	7a1b      	ldrb	r3, [r3, #8]
    48de:	461a      	mov	r2, r3
    48e0:	9b03      	ldr	r3, [sp, #12]
    48e2:	4293      	cmp	r3, r2
    48e4:	d3cc      	bcc.n	4880 <DisableSafeClock+0x18>
    48e6:	e000      	b.n	48ea <DisableSafeClock+0x82>
                break;
    48e8:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    48ea:	f89d 300b 	ldrb.w	r3, [sp, #11]
    48ee:	f083 0301 	eor.w	r3, r3, #1
    48f2:	b2db      	uxtb	r3, r3
    48f4:	2b00      	cmp	r3, #0
    48f6:	d013      	beq.n	4920 <DisableSafeClock+0xb8>
    48f8:	4b0e      	ldr	r3, [pc, #56]	; (4934 <DisableSafeClock+0xcc>)
    48fa:	781b      	ldrb	r3, [r3, #0]
    48fc:	f083 0301 	eor.w	r3, r3, #1
    4900:	b2db      	uxtb	r3, r3
    4902:	2b00      	cmp	r3, #0
    4904:	d00c      	beq.n	4920 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4906:	4b09      	ldr	r3, [pc, #36]	; (492c <DisableSafeClock+0xc4>)
    4908:	791b      	ldrb	r3, [r3, #4]
    490a:	4619      	mov	r1, r3
    490c:	4a08      	ldr	r2, [pc, #32]	; (4930 <DisableSafeClock+0xc8>)
    490e:	460b      	mov	r3, r1
    4910:	005b      	lsls	r3, r3, #1
    4912:	440b      	add	r3, r1
    4914:	009b      	lsls	r3, r3, #2
    4916:	4413      	add	r3, r2
    4918:	3308      	adds	r3, #8
    491a:	681b      	ldr	r3, [r3, #0]
    491c:	2005      	movs	r0, #5
    491e:	4798      	blx	r3
    }
}
    4920:	bf00      	nop
    4922:	b005      	add	sp, #20
    4924:	f85d fb04 	ldr.w	pc, [sp], #4
    4928:	1fff8ba8 	.word	0x1fff8ba8
    492c:	0000a5e4 	.word	0x0000a5e4
    4930:	0000ac14 	.word	0x0000ac14
    4934:	1fff8b18 	.word	0x1fff8b18

00004938 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4938:	4b06      	ldr	r3, [pc, #24]	; (4954 <SetFircToResetValue_TrustedCall+0x1c>)
    493a:	2200      	movs	r2, #0
    493c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4940:	4b04      	ldr	r3, [pc, #16]	; (4954 <SetFircToResetValue_TrustedCall+0x1c>)
    4942:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4946:	4a03      	ldr	r2, [pc, #12]	; (4954 <SetFircToResetValue_TrustedCall+0x1c>)
    4948:	f043 0301 	orr.w	r3, r3, #1
    494c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4950:	bf00      	nop
    4952:	4770      	bx	lr
    4954:	40064000 	.word	0x40064000

00004958 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4958:	b084      	sub	sp, #16
    495a:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    495c:	2303      	movs	r3, #3
    495e:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4960:	2300      	movs	r3, #0
    4962:	9302      	str	r3, [sp, #8]
    4964:	e028      	b.n	49b8 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4966:	9b01      	ldr	r3, [sp, #4]
    4968:	9a02      	ldr	r2, [sp, #8]
    496a:	320d      	adds	r2, #13
    496c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4970:	2b28      	cmp	r3, #40	; 0x28
    4972:	d10b      	bne.n	498c <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4974:	9a01      	ldr	r2, [sp, #4]
    4976:	9b02      	ldr	r3, [sp, #8]
    4978:	330d      	adds	r3, #13
    497a:	00db      	lsls	r3, r3, #3
    497c:	4413      	add	r3, r2
    497e:	685b      	ldr	r3, [r3, #4]
    4980:	4a2b      	ldr	r2, [pc, #172]	; (4a30 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4982:	5cd3      	ldrb	r3, [r2, r3]
    4984:	011b      	lsls	r3, r3, #4
    4986:	9a03      	ldr	r2, [sp, #12]
    4988:	4313      	orrs	r3, r2
    498a:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    498c:	9b01      	ldr	r3, [sp, #4]
    498e:	9a02      	ldr	r2, [sp, #8]
    4990:	320d      	adds	r2, #13
    4992:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4996:	2b29      	cmp	r3, #41	; 0x29
    4998:	d10b      	bne.n	49b2 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    499a:	9a01      	ldr	r2, [sp, #4]
    499c:	9b02      	ldr	r3, [sp, #8]
    499e:	330d      	adds	r3, #13
    49a0:	00db      	lsls	r3, r3, #3
    49a2:	4413      	add	r3, r2
    49a4:	685b      	ldr	r3, [r3, #4]
    49a6:	4a23      	ldr	r2, [pc, #140]	; (4a34 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    49a8:	5cd3      	ldrb	r3, [r2, r3]
    49aa:	009b      	lsls	r3, r3, #2
    49ac:	9a03      	ldr	r2, [sp, #12]
    49ae:	4313      	orrs	r3, r2
    49b0:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    49b2:	9b02      	ldr	r3, [sp, #8]
    49b4:	3301      	adds	r3, #1
    49b6:	9302      	str	r3, [sp, #8]
    49b8:	9b01      	ldr	r3, [sp, #4]
    49ba:	7adb      	ldrb	r3, [r3, #11]
    49bc:	461a      	mov	r2, r3
    49be:	9b02      	ldr	r3, [sp, #8]
    49c0:	4293      	cmp	r3, r2
    49c2:	d3d0      	bcc.n	4966 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    49c4:	2300      	movs	r3, #0
    49c6:	9302      	str	r3, [sp, #8]
    49c8:	e026      	b.n	4a18 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    49ca:	9a01      	ldr	r2, [sp, #4]
    49cc:	9b02      	ldr	r3, [sp, #8]
    49ce:	334e      	adds	r3, #78	; 0x4e
    49d0:	00db      	lsls	r3, r3, #3
    49d2:	4413      	add	r3, r2
    49d4:	685b      	ldr	r3, [r3, #4]
    49d6:	2b12      	cmp	r3, #18
    49d8:	d109      	bne.n	49ee <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    49da:	9a01      	ldr	r2, [sp, #4]
    49dc:	9b02      	ldr	r3, [sp, #8]
    49de:	334e      	adds	r3, #78	; 0x4e
    49e0:	00db      	lsls	r3, r3, #3
    49e2:	4413      	add	r3, r2
    49e4:	891b      	ldrh	r3, [r3, #8]
    49e6:	005b      	lsls	r3, r3, #1
    49e8:	9a03      	ldr	r2, [sp, #12]
    49ea:	4313      	orrs	r3, r2
    49ec:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    49ee:	9a01      	ldr	r2, [sp, #4]
    49f0:	9b02      	ldr	r3, [sp, #8]
    49f2:	334e      	adds	r3, #78	; 0x4e
    49f4:	00db      	lsls	r3, r3, #3
    49f6:	4413      	add	r3, r2
    49f8:	685b      	ldr	r3, [r3, #4]
    49fa:	2b13      	cmp	r3, #19
    49fc:	d109      	bne.n	4a12 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    49fe:	9a01      	ldr	r2, [sp, #4]
    4a00:	9b02      	ldr	r3, [sp, #8]
    4a02:	334e      	adds	r3, #78	; 0x4e
    4a04:	00db      	lsls	r3, r3, #3
    4a06:	4413      	add	r3, r2
    4a08:	891b      	ldrh	r3, [r3, #8]
    4a0a:	461a      	mov	r2, r3
    4a0c:	9b03      	ldr	r3, [sp, #12]
    4a0e:	4313      	orrs	r3, r2
    4a10:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4a12:	9b02      	ldr	r3, [sp, #8]
    4a14:	3301      	adds	r3, #1
    4a16:	9302      	str	r3, [sp, #8]
    4a18:	9b01      	ldr	r3, [sp, #4]
    4a1a:	7c1b      	ldrb	r3, [r3, #16]
    4a1c:	461a      	mov	r2, r3
    4a1e:	9b02      	ldr	r3, [sp, #8]
    4a20:	4293      	cmp	r3, r2
    4a22:	d3d2      	bcc.n	49ca <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4a24:	4a04      	ldr	r2, [pc, #16]	; (4a38 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4a26:	9b03      	ldr	r3, [sp, #12]
    4a28:	6113      	str	r3, [r2, #16]
}
    4a2a:	bf00      	nop
    4a2c:	b004      	add	sp, #16
    4a2e:	4770      	bx	lr
    4a30:	0000a964 	.word	0x0000a964
    4a34:	0000aa1c 	.word	0x0000aa1c
    4a38:	40048000 	.word	0x40048000

00004a3c <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4a3c:	b500      	push	{lr}
    4a3e:	b089      	sub	sp, #36	; 0x24
    4a40:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4a42:	2300      	movs	r3, #0
    4a44:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4a48:	4a21      	ldr	r2, [pc, #132]	; (4ad0 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4a4a:	9b01      	ldr	r3, [sp, #4]
    4a4c:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4a4e:	4b21      	ldr	r3, [pc, #132]	; (4ad4 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a50:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a54:	f003 0301 	and.w	r3, r3, #1
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d12e      	bne.n	4aba <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4a5c:	4b1e      	ldr	r3, [pc, #120]	; (4ad8 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4a5e:	2200      	movs	r2, #0
    4a60:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4a62:	f7ff ff69 	bl	4938 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4a66:	aa03      	add	r2, sp, #12
    4a68:	a904      	add	r1, sp, #16
    4a6a:	a805      	add	r0, sp, #20
    4a6c:	f24c 3350 	movw	r3, #50000	; 0xc350
    4a70:	f7fe f8ae 	bl	2bd0 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4a74:	4b17      	ldr	r3, [pc, #92]	; (4ad4 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4a7a:	0e1b      	lsrs	r3, r3, #24
    4a7c:	f003 0301 	and.w	r3, r3, #1
    4a80:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4a82:	9a03      	ldr	r2, [sp, #12]
    4a84:	a904      	add	r1, sp, #16
    4a86:	ab05      	add	r3, sp, #20
    4a88:	4618      	mov	r0, r3
    4a8a:	f7fe f8bb 	bl	2c04 <Clock_Ip_TimeoutExpired>
    4a8e:	4603      	mov	r3, r0
    4a90:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4a94:	9b06      	ldr	r3, [sp, #24]
    4a96:	2b00      	cmp	r3, #0
    4a98:	d106      	bne.n	4aa8 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4a9a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4a9e:	f083 0301 	eor.w	r3, r3, #1
    4aa2:	b2db      	uxtb	r3, r3
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	d1e5      	bne.n	4a74 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4aa8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4aac:	2b00      	cmp	r3, #0
    4aae:	d007      	beq.n	4ac0 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4ab0:	2105      	movs	r1, #5
    4ab2:	2001      	movs	r0, #1
    4ab4:	f7fe f87c 	bl	2bb0 <Clock_Ip_ReportClockErrors>
    4ab8:	e002      	b.n	4ac0 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4aba:	4b07      	ldr	r3, [pc, #28]	; (4ad8 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4abc:	2201      	movs	r2, #1
    4abe:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4ac0:	9801      	ldr	r0, [sp, #4]
    4ac2:	f7ff ff49 	bl	4958 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4ac6:	bf00      	nop
    4ac8:	b009      	add	sp, #36	; 0x24
    4aca:	f85d fb04 	ldr.w	pc, [sp], #4
    4ace:	bf00      	nop
    4ad0:	1fff8ba8 	.word	0x1fff8ba8
    4ad4:	40064000 	.word	0x40064000
    4ad8:	1fff8b18 	.word	0x1fff8b18

00004adc <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4adc:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4ade:	2300      	movs	r3, #0
    4ae0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4ae2:	4b29      	ldr	r3, [pc, #164]	; (4b88 <getFircConfig+0xac>)
    4ae4:	681b      	ldr	r3, [r3, #0]
    4ae6:	2b00      	cmp	r3, #0
    4ae8:	d024      	beq.n	4b34 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4aea:	2300      	movs	r3, #0
    4aec:	9301      	str	r3, [sp, #4]
    4aee:	e01a      	b.n	4b26 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4af0:	4b25      	ldr	r3, [pc, #148]	; (4b88 <getFircConfig+0xac>)
    4af2:	6819      	ldr	r1, [r3, #0]
    4af4:	9a01      	ldr	r2, [sp, #4]
    4af6:	4613      	mov	r3, r2
    4af8:	005b      	lsls	r3, r3, #1
    4afa:	4413      	add	r3, r2
    4afc:	009b      	lsls	r3, r3, #2
    4afe:	440b      	add	r3, r1
    4b00:	3314      	adds	r3, #20
    4b02:	681b      	ldr	r3, [r3, #0]
    4b04:	2b05      	cmp	r3, #5
    4b06:	d10b      	bne.n	4b20 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4b08:	4b1f      	ldr	r3, [pc, #124]	; (4b88 <getFircConfig+0xac>)
    4b0a:	6819      	ldr	r1, [r3, #0]
    4b0c:	9a01      	ldr	r2, [sp, #4]
    4b0e:	4613      	mov	r3, r2
    4b10:	005b      	lsls	r3, r3, #1
    4b12:	4413      	add	r3, r2
    4b14:	009b      	lsls	r3, r3, #2
    4b16:	3310      	adds	r3, #16
    4b18:	440b      	add	r3, r1
    4b1a:	3304      	adds	r3, #4
    4b1c:	9300      	str	r3, [sp, #0]
                break;
    4b1e:	e009      	b.n	4b34 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b20:	9b01      	ldr	r3, [sp, #4]
    4b22:	3301      	adds	r3, #1
    4b24:	9301      	str	r3, [sp, #4]
    4b26:	4b18      	ldr	r3, [pc, #96]	; (4b88 <getFircConfig+0xac>)
    4b28:	681b      	ldr	r3, [r3, #0]
    4b2a:	7a1b      	ldrb	r3, [r3, #8]
    4b2c:	461a      	mov	r2, r3
    4b2e:	9b01      	ldr	r3, [sp, #4]
    4b30:	4293      	cmp	r3, r2
    4b32:	d3dd      	bcc.n	4af0 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b34:	9b00      	ldr	r3, [sp, #0]
    4b36:	2b00      	cmp	r3, #0
    4b38:	d121      	bne.n	4b7e <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4b3a:	4b14      	ldr	r3, [pc, #80]	; (4b8c <getFircConfig+0xb0>)
    4b3c:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4b3e:	4b13      	ldr	r3, [pc, #76]	; (4b8c <getFircConfig+0xb0>)
    4b40:	2205      	movs	r2, #5
    4b42:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4b44:	4b12      	ldr	r3, [pc, #72]	; (4b90 <getFircConfig+0xb4>)
    4b46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b4a:	b29b      	uxth	r3, r3
    4b4c:	f003 0301 	and.w	r3, r3, #1
    4b50:	b29a      	uxth	r2, r3
    4b52:	4b0e      	ldr	r3, [pc, #56]	; (4b8c <getFircConfig+0xb0>)
    4b54:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4b56:	4b0e      	ldr	r3, [pc, #56]	; (4b90 <getFircConfig+0xb4>)
    4b58:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4b5c:	b2db      	uxtb	r3, r3
    4b5e:	f003 0303 	and.w	r3, r3, #3
    4b62:	b2da      	uxtb	r2, r3
    4b64:	4b09      	ldr	r3, [pc, #36]	; (4b8c <getFircConfig+0xb0>)
    4b66:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4b68:	4b09      	ldr	r3, [pc, #36]	; (4b90 <getFircConfig+0xb4>)
    4b6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b6e:	b2db      	uxtb	r3, r3
    4b70:	10db      	asrs	r3, r3, #3
    4b72:	b2db      	uxtb	r3, r3
    4b74:	f003 0301 	and.w	r3, r3, #1
    4b78:	b2da      	uxtb	r2, r3
    4b7a:	4b04      	ldr	r3, [pc, #16]	; (4b8c <getFircConfig+0xb0>)
    4b7c:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4b7e:	9b00      	ldr	r3, [sp, #0]
}
    4b80:	4618      	mov	r0, r3
    4b82:	b002      	add	sp, #8
    4b84:	4770      	bx	lr
    4b86:	bf00      	nop
    4b88:	1fff8ba8 	.word	0x1fff8ba8
    4b8c:	1fff8c14 	.word	0x1fff8c14
    4b90:	40064000 	.word	0x40064000

00004b94 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4b94:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4b96:	2300      	movs	r3, #0
    4b98:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4b9a:	4b20      	ldr	r3, [pc, #128]	; (4c1c <getSoscConfig+0x88>)
    4b9c:	681b      	ldr	r3, [r3, #0]
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	d024      	beq.n	4bec <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4ba2:	2300      	movs	r3, #0
    4ba4:	9301      	str	r3, [sp, #4]
    4ba6:	e01a      	b.n	4bde <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4ba8:	4b1c      	ldr	r3, [pc, #112]	; (4c1c <getSoscConfig+0x88>)
    4baa:	6819      	ldr	r1, [r3, #0]
    4bac:	9a01      	ldr	r2, [sp, #4]
    4bae:	4613      	mov	r3, r2
    4bb0:	009b      	lsls	r3, r3, #2
    4bb2:	4413      	add	r3, r2
    4bb4:	009b      	lsls	r3, r3, #2
    4bb6:	440b      	add	r3, r1
    4bb8:	332c      	adds	r3, #44	; 0x2c
    4bba:	681b      	ldr	r3, [r3, #0]
    4bbc:	2b08      	cmp	r3, #8
    4bbe:	d10b      	bne.n	4bd8 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4bc0:	4b16      	ldr	r3, [pc, #88]	; (4c1c <getSoscConfig+0x88>)
    4bc2:	6819      	ldr	r1, [r3, #0]
    4bc4:	9a01      	ldr	r2, [sp, #4]
    4bc6:	4613      	mov	r3, r2
    4bc8:	009b      	lsls	r3, r3, #2
    4bca:	4413      	add	r3, r2
    4bcc:	009b      	lsls	r3, r3, #2
    4bce:	3328      	adds	r3, #40	; 0x28
    4bd0:	440b      	add	r3, r1
    4bd2:	3304      	adds	r3, #4
    4bd4:	9300      	str	r3, [sp, #0]
                break;
    4bd6:	e009      	b.n	4bec <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4bd8:	9b01      	ldr	r3, [sp, #4]
    4bda:	3301      	adds	r3, #1
    4bdc:	9301      	str	r3, [sp, #4]
    4bde:	4b0f      	ldr	r3, [pc, #60]	; (4c1c <getSoscConfig+0x88>)
    4be0:	681b      	ldr	r3, [r3, #0]
    4be2:	7a5b      	ldrb	r3, [r3, #9]
    4be4:	461a      	mov	r2, r3
    4be6:	9b01      	ldr	r3, [sp, #4]
    4be8:	4293      	cmp	r3, r2
    4bea:	d3dd      	bcc.n	4ba8 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4bec:	9b00      	ldr	r3, [sp, #0]
    4bee:	2b00      	cmp	r3, #0
    4bf0:	d110      	bne.n	4c14 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4bf2:	4b0b      	ldr	r3, [pc, #44]	; (4c20 <getSoscConfig+0x8c>)
    4bf4:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4bf6:	4b0a      	ldr	r3, [pc, #40]	; (4c20 <getSoscConfig+0x8c>)
    4bf8:	2208      	movs	r2, #8
    4bfa:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4bfc:	4b09      	ldr	r3, [pc, #36]	; (4c24 <getSoscConfig+0x90>)
    4bfe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4c02:	b29b      	uxth	r3, r3
    4c04:	f003 0301 	and.w	r3, r3, #1
    4c08:	b29a      	uxth	r2, r3
    4c0a:	4b05      	ldr	r3, [pc, #20]	; (4c20 <getSoscConfig+0x8c>)
    4c0c:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4c0e:	4b04      	ldr	r3, [pc, #16]	; (4c20 <getSoscConfig+0x8c>)
    4c10:	4a05      	ldr	r2, [pc, #20]	; (4c28 <getSoscConfig+0x94>)
    4c12:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4c14:	9b00      	ldr	r3, [sp, #0]
}
    4c16:	4618      	mov	r0, r3
    4c18:	b002      	add	sp, #8
    4c1a:	4770      	bx	lr
    4c1c:	1fff8ba8 	.word	0x1fff8ba8
    4c20:	1fff8c20 	.word	0x1fff8c20
    4c24:	40064000 	.word	0x40064000
    4c28:	02625a00 	.word	0x02625a00

00004c2c <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4c2c:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4c2e:	2300      	movs	r3, #0
    4c30:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4c32:	4b28      	ldr	r3, [pc, #160]	; (4cd4 <getSpllConfig+0xa8>)
    4c34:	681b      	ldr	r3, [r3, #0]
    4c36:	2b00      	cmp	r3, #0
    4c38:	d023      	beq.n	4c82 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c3a:	2300      	movs	r3, #0
    4c3c:	9301      	str	r3, [sp, #4]
    4c3e:	e019      	b.n	4c74 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4c40:	4b24      	ldr	r3, [pc, #144]	; (4cd4 <getSpllConfig+0xa8>)
    4c42:	6819      	ldr	r1, [r3, #0]
    4c44:	9a01      	ldr	r2, [sp, #4]
    4c46:	4613      	mov	r3, r2
    4c48:	009b      	lsls	r3, r3, #2
    4c4a:	4413      	add	r3, r2
    4c4c:	00db      	lsls	r3, r3, #3
    4c4e:	440b      	add	r3, r1
    4c50:	3340      	adds	r3, #64	; 0x40
    4c52:	681b      	ldr	r3, [r3, #0]
    4c54:	2b09      	cmp	r3, #9
    4c56:	d10a      	bne.n	4c6e <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4c58:	4b1e      	ldr	r3, [pc, #120]	; (4cd4 <getSpllConfig+0xa8>)
    4c5a:	6819      	ldr	r1, [r3, #0]
    4c5c:	9a01      	ldr	r2, [sp, #4]
    4c5e:	4613      	mov	r3, r2
    4c60:	009b      	lsls	r3, r3, #2
    4c62:	4413      	add	r3, r2
    4c64:	00db      	lsls	r3, r3, #3
    4c66:	3340      	adds	r3, #64	; 0x40
    4c68:	440b      	add	r3, r1
    4c6a:	9300      	str	r3, [sp, #0]
                break;
    4c6c:	e009      	b.n	4c82 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c6e:	9b01      	ldr	r3, [sp, #4]
    4c70:	3301      	adds	r3, #1
    4c72:	9301      	str	r3, [sp, #4]
    4c74:	4b17      	ldr	r3, [pc, #92]	; (4cd4 <getSpllConfig+0xa8>)
    4c76:	681b      	ldr	r3, [r3, #0]
    4c78:	7a9b      	ldrb	r3, [r3, #10]
    4c7a:	461a      	mov	r2, r3
    4c7c:	9b01      	ldr	r3, [sp, #4]
    4c7e:	4293      	cmp	r3, r2
    4c80:	d3de      	bcc.n	4c40 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4c82:	9b00      	ldr	r3, [sp, #0]
    4c84:	2b00      	cmp	r3, #0
    4c86:	d121      	bne.n	4ccc <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4c88:	4b13      	ldr	r3, [pc, #76]	; (4cd8 <getSpllConfig+0xac>)
    4c8a:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4c8c:	4b12      	ldr	r3, [pc, #72]	; (4cd8 <getSpllConfig+0xac>)
    4c8e:	2209      	movs	r2, #9
    4c90:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4c92:	4b12      	ldr	r3, [pc, #72]	; (4cdc <getSpllConfig+0xb0>)
    4c94:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4c98:	b29b      	uxth	r3, r3
    4c9a:	f003 0301 	and.w	r3, r3, #1
    4c9e:	b29a      	uxth	r2, r3
    4ca0:	4b0d      	ldr	r3, [pc, #52]	; (4cd8 <getSpllConfig+0xac>)
    4ca2:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4ca4:	4b0d      	ldr	r3, [pc, #52]	; (4cdc <getSpllConfig+0xb0>)
    4ca6:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4caa:	0a1b      	lsrs	r3, r3, #8
    4cac:	b2db      	uxtb	r3, r3
    4cae:	f003 0307 	and.w	r3, r3, #7
    4cb2:	b2da      	uxtb	r2, r3
    4cb4:	4b08      	ldr	r3, [pc, #32]	; (4cd8 <getSpllConfig+0xac>)
    4cb6:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4cb8:	4b08      	ldr	r3, [pc, #32]	; (4cdc <getSpllConfig+0xb0>)
    4cba:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4cbe:	0c1b      	lsrs	r3, r3, #16
    4cc0:	b2db      	uxtb	r3, r3
    4cc2:	f003 031f 	and.w	r3, r3, #31
    4cc6:	b2da      	uxtb	r2, r3
    4cc8:	4b03      	ldr	r3, [pc, #12]	; (4cd8 <getSpllConfig+0xac>)
    4cca:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4ccc:	9b00      	ldr	r3, [sp, #0]
}
    4cce:	4618      	mov	r0, r3
    4cd0:	b002      	add	sp, #8
    4cd2:	4770      	bx	lr
    4cd4:	1fff8ba8 	.word	0x1fff8ba8
    4cd8:	1fff8c34 	.word	0x1fff8c34
    4cdc:	40064000 	.word	0x40064000

00004ce0 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4ce0:	b086      	sub	sp, #24
    4ce2:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4ce4:	2300      	movs	r3, #0
    4ce6:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4ce8:	9b01      	ldr	r3, [sp, #4]
    4cea:	2b1b      	cmp	r3, #27
    4cec:	d00f      	beq.n	4d0e <getSelectorConfig+0x2e>
    4cee:	9b01      	ldr	r3, [sp, #4]
    4cf0:	2b1b      	cmp	r3, #27
    4cf2:	d80f      	bhi.n	4d14 <getSelectorConfig+0x34>
    4cf4:	9b01      	ldr	r3, [sp, #4]
    4cf6:	2b19      	cmp	r3, #25
    4cf8:	d003      	beq.n	4d02 <getSelectorConfig+0x22>
    4cfa:	9b01      	ldr	r3, [sp, #4]
    4cfc:	2b1a      	cmp	r3, #26
    4cfe:	d003      	beq.n	4d08 <getSelectorConfig+0x28>
    4d00:	e008      	b.n	4d14 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4d02:	2300      	movs	r3, #0
    4d04:	9304      	str	r3, [sp, #16]
            break;
    4d06:	e008      	b.n	4d1a <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4d08:	2301      	movs	r3, #1
    4d0a:	9304      	str	r3, [sp, #16]
            break;
    4d0c:	e005      	b.n	4d1a <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4d0e:	2302      	movs	r3, #2
    4d10:	9304      	str	r3, [sp, #16]
            break;
    4d12:	e002      	b.n	4d1a <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4d14:	2300      	movs	r3, #0
    4d16:	9304      	str	r3, [sp, #16]
            break;
    4d18:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4d1a:	4b36      	ldr	r3, [pc, #216]	; (4df4 <getSelectorConfig+0x114>)
    4d1c:	681b      	ldr	r3, [r3, #0]
    4d1e:	2b00      	cmp	r3, #0
    4d20:	d01d      	beq.n	4d5e <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d22:	2300      	movs	r3, #0
    4d24:	9303      	str	r3, [sp, #12]
    4d26:	e013      	b.n	4d50 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4d28:	4b32      	ldr	r3, [pc, #200]	; (4df4 <getSelectorConfig+0x114>)
    4d2a:	681b      	ldr	r3, [r3, #0]
    4d2c:	9a03      	ldr	r2, [sp, #12]
    4d2e:	320d      	adds	r2, #13
    4d30:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4d34:	9a01      	ldr	r2, [sp, #4]
    4d36:	429a      	cmp	r2, r3
    4d38:	d107      	bne.n	4d4a <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4d3a:	4b2e      	ldr	r3, [pc, #184]	; (4df4 <getSelectorConfig+0x114>)
    4d3c:	681a      	ldr	r2, [r3, #0]
    4d3e:	9b03      	ldr	r3, [sp, #12]
    4d40:	330d      	adds	r3, #13
    4d42:	00db      	lsls	r3, r3, #3
    4d44:	4413      	add	r3, r2
    4d46:	9305      	str	r3, [sp, #20]
                break;
    4d48:	e009      	b.n	4d5e <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d4a:	9b03      	ldr	r3, [sp, #12]
    4d4c:	3301      	adds	r3, #1
    4d4e:	9303      	str	r3, [sp, #12]
    4d50:	4b28      	ldr	r3, [pc, #160]	; (4df4 <getSelectorConfig+0x114>)
    4d52:	681b      	ldr	r3, [r3, #0]
    4d54:	7adb      	ldrb	r3, [r3, #11]
    4d56:	461a      	mov	r2, r3
    4d58:	9b03      	ldr	r3, [sp, #12]
    4d5a:	4293      	cmp	r3, r2
    4d5c:	d3e4      	bcc.n	4d28 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4d5e:	9b05      	ldr	r3, [sp, #20]
    4d60:	2b00      	cmp	r3, #0
    4d62:	d140      	bne.n	4de6 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4d64:	9b04      	ldr	r3, [sp, #16]
    4d66:	00db      	lsls	r3, r3, #3
    4d68:	4a23      	ldr	r2, [pc, #140]	; (4df8 <getSelectorConfig+0x118>)
    4d6a:	4413      	add	r3, r2
    4d6c:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4d6e:	4922      	ldr	r1, [pc, #136]	; (4df8 <getSelectorConfig+0x118>)
    4d70:	9b04      	ldr	r3, [sp, #16]
    4d72:	9a01      	ldr	r2, [sp, #4]
    4d74:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4d78:	9b01      	ldr	r3, [sp, #4]
    4d7a:	2b1b      	cmp	r3, #27
    4d7c:	d025      	beq.n	4dca <getSelectorConfig+0xea>
    4d7e:	9b01      	ldr	r3, [sp, #4]
    4d80:	2b1b      	cmp	r3, #27
    4d82:	d832      	bhi.n	4dea <getSelectorConfig+0x10a>
    4d84:	9b01      	ldr	r3, [sp, #4]
    4d86:	2b19      	cmp	r3, #25
    4d88:	d003      	beq.n	4d92 <getSelectorConfig+0xb2>
    4d8a:	9b01      	ldr	r3, [sp, #4]
    4d8c:	2b1a      	cmp	r3, #26
    4d8e:	d00e      	beq.n	4dae <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4d90:	e02b      	b.n	4dea <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4d92:	4b1a      	ldr	r3, [pc, #104]	; (4dfc <getSelectorConfig+0x11c>)
    4d94:	695b      	ldr	r3, [r3, #20]
    4d96:	0e1b      	lsrs	r3, r3, #24
    4d98:	f003 030f 	and.w	r3, r3, #15
    4d9c:	4a18      	ldr	r2, [pc, #96]	; (4e00 <getSelectorConfig+0x120>)
    4d9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4da2:	4915      	ldr	r1, [pc, #84]	; (4df8 <getSelectorConfig+0x118>)
    4da4:	9b04      	ldr	r3, [sp, #16]
    4da6:	00db      	lsls	r3, r3, #3
    4da8:	440b      	add	r3, r1
    4daa:	605a      	str	r2, [r3, #4]
                break;
    4dac:	e01e      	b.n	4dec <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4dae:	4b13      	ldr	r3, [pc, #76]	; (4dfc <getSelectorConfig+0x11c>)
    4db0:	699b      	ldr	r3, [r3, #24]
    4db2:	0e1b      	lsrs	r3, r3, #24
    4db4:	f003 030f 	and.w	r3, r3, #15
    4db8:	4a11      	ldr	r2, [pc, #68]	; (4e00 <getSelectorConfig+0x120>)
    4dba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4dbe:	490e      	ldr	r1, [pc, #56]	; (4df8 <getSelectorConfig+0x118>)
    4dc0:	9b04      	ldr	r3, [sp, #16]
    4dc2:	00db      	lsls	r3, r3, #3
    4dc4:	440b      	add	r3, r1
    4dc6:	605a      	str	r2, [r3, #4]
                break;
    4dc8:	e010      	b.n	4dec <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4dca:	4b0c      	ldr	r3, [pc, #48]	; (4dfc <getSelectorConfig+0x11c>)
    4dcc:	69db      	ldr	r3, [r3, #28]
    4dce:	0e1b      	lsrs	r3, r3, #24
    4dd0:	f003 030f 	and.w	r3, r3, #15
    4dd4:	4a0a      	ldr	r2, [pc, #40]	; (4e00 <getSelectorConfig+0x120>)
    4dd6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4dda:	4907      	ldr	r1, [pc, #28]	; (4df8 <getSelectorConfig+0x118>)
    4ddc:	9b04      	ldr	r3, [sp, #16]
    4dde:	00db      	lsls	r3, r3, #3
    4de0:	440b      	add	r3, r1
    4de2:	605a      	str	r2, [r3, #4]
                break;
    4de4:	e002      	b.n	4dec <getSelectorConfig+0x10c>
        }
    }
    4de6:	bf00      	nop
    4de8:	e000      	b.n	4dec <getSelectorConfig+0x10c>
                break;
    4dea:	bf00      	nop

    return ReturnValue;
    4dec:	9b05      	ldr	r3, [sp, #20]
}
    4dee:	4618      	mov	r0, r3
    4df0:	b006      	add	sp, #24
    4df2:	4770      	bx	lr
    4df4:	1fff8ba8 	.word	0x1fff8ba8
    4df8:	1fff8c5c 	.word	0x1fff8c5c
    4dfc:	40064000 	.word	0x40064000
    4e00:	0000ace4 	.word	0x0000ace4

00004e04 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4e04:	b086      	sub	sp, #24
    4e06:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4e08:	2300      	movs	r3, #0
    4e0a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4e0c:	2300      	movs	r3, #0
    4e0e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4e10:	9b01      	ldr	r3, [sp, #4]
    4e12:	2b1f      	cmp	r3, #31
    4e14:	d00f      	beq.n	4e36 <getCoreDividerConfig+0x32>
    4e16:	9b01      	ldr	r3, [sp, #4]
    4e18:	2b1f      	cmp	r3, #31
    4e1a:	d80f      	bhi.n	4e3c <getCoreDividerConfig+0x38>
    4e1c:	9b01      	ldr	r3, [sp, #4]
    4e1e:	2b1d      	cmp	r3, #29
    4e20:	d003      	beq.n	4e2a <getCoreDividerConfig+0x26>
    4e22:	9b01      	ldr	r3, [sp, #4]
    4e24:	2b1e      	cmp	r3, #30
    4e26:	d003      	beq.n	4e30 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e28:	e008      	b.n	4e3c <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4e2a:	2300      	movs	r3, #0
    4e2c:	9304      	str	r3, [sp, #16]
            break;
    4e2e:	e006      	b.n	4e3e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4e30:	2301      	movs	r3, #1
    4e32:	9304      	str	r3, [sp, #16]
            break;
    4e34:	e003      	b.n	4e3e <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4e36:	2302      	movs	r3, #2
    4e38:	9304      	str	r3, [sp, #16]
            break;
    4e3a:	e000      	b.n	4e3e <getCoreDividerConfig+0x3a>
                break;
    4e3c:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4e3e:	4b41      	ldr	r3, [pc, #260]	; (4f44 <getCoreDividerConfig+0x140>)
    4e40:	681b      	ldr	r3, [r3, #0]
    4e42:	2b00      	cmp	r3, #0
    4e44:	d026      	beq.n	4e94 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e46:	2300      	movs	r3, #0
    4e48:	9303      	str	r3, [sp, #12]
    4e4a:	e01c      	b.n	4e86 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4e4c:	4b3d      	ldr	r3, [pc, #244]	; (4f44 <getCoreDividerConfig+0x140>)
    4e4e:	6819      	ldr	r1, [r3, #0]
    4e50:	9a03      	ldr	r2, [sp, #12]
    4e52:	4613      	mov	r3, r2
    4e54:	005b      	lsls	r3, r3, #1
    4e56:	4413      	add	r3, r2
    4e58:	009b      	lsls	r3, r3, #2
    4e5a:	440b      	add	r3, r1
    4e5c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e60:	681b      	ldr	r3, [r3, #0]
    4e62:	9a01      	ldr	r2, [sp, #4]
    4e64:	429a      	cmp	r2, r3
    4e66:	d10b      	bne.n	4e80 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4e68:	4b36      	ldr	r3, [pc, #216]	; (4f44 <getCoreDividerConfig+0x140>)
    4e6a:	6819      	ldr	r1, [r3, #0]
    4e6c:	9a03      	ldr	r2, [sp, #12]
    4e6e:	4613      	mov	r3, r2
    4e70:	005b      	lsls	r3, r3, #1
    4e72:	4413      	add	r3, r2
    4e74:	009b      	lsls	r3, r3, #2
    4e76:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4e7a:	440b      	add	r3, r1
    4e7c:	9305      	str	r3, [sp, #20]
                break;
    4e7e:	e009      	b.n	4e94 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e80:	9b03      	ldr	r3, [sp, #12]
    4e82:	3301      	adds	r3, #1
    4e84:	9303      	str	r3, [sp, #12]
    4e86:	4b2f      	ldr	r3, [pc, #188]	; (4f44 <getCoreDividerConfig+0x140>)
    4e88:	681b      	ldr	r3, [r3, #0]
    4e8a:	7b1b      	ldrb	r3, [r3, #12]
    4e8c:	461a      	mov	r2, r3
    4e8e:	9b03      	ldr	r3, [sp, #12]
    4e90:	4293      	cmp	r3, r2
    4e92:	d3db      	bcc.n	4e4c <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4e94:	9b05      	ldr	r3, [sp, #20]
    4e96:	2b00      	cmp	r3, #0
    4e98:	d14d      	bne.n	4f36 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4e9a:	9a04      	ldr	r2, [sp, #16]
    4e9c:	4613      	mov	r3, r2
    4e9e:	005b      	lsls	r3, r3, #1
    4ea0:	4413      	add	r3, r2
    4ea2:	009b      	lsls	r3, r3, #2
    4ea4:	4a28      	ldr	r2, [pc, #160]	; (4f48 <getCoreDividerConfig+0x144>)
    4ea6:	4413      	add	r3, r2
    4ea8:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4eaa:	4927      	ldr	r1, [pc, #156]	; (4f48 <getCoreDividerConfig+0x144>)
    4eac:	9a04      	ldr	r2, [sp, #16]
    4eae:	4613      	mov	r3, r2
    4eb0:	005b      	lsls	r3, r3, #1
    4eb2:	4413      	add	r3, r2
    4eb4:	009b      	lsls	r3, r3, #2
    4eb6:	440b      	add	r3, r1
    4eb8:	9a01      	ldr	r2, [sp, #4]
    4eba:	601a      	str	r2, [r3, #0]
        switch(Name)
    4ebc:	9b01      	ldr	r3, [sp, #4]
    4ebe:	2b1f      	cmp	r3, #31
    4ec0:	d029      	beq.n	4f16 <getCoreDividerConfig+0x112>
    4ec2:	9b01      	ldr	r3, [sp, #4]
    4ec4:	2b1f      	cmp	r3, #31
    4ec6:	d838      	bhi.n	4f3a <getCoreDividerConfig+0x136>
    4ec8:	9b01      	ldr	r3, [sp, #4]
    4eca:	2b1d      	cmp	r3, #29
    4ecc:	d003      	beq.n	4ed6 <getCoreDividerConfig+0xd2>
    4ece:	9b01      	ldr	r3, [sp, #4]
    4ed0:	2b1e      	cmp	r3, #30
    4ed2:	d010      	beq.n	4ef6 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4ed4:	e031      	b.n	4f3a <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4ed6:	4b1d      	ldr	r3, [pc, #116]	; (4f4c <getCoreDividerConfig+0x148>)
    4ed8:	695b      	ldr	r3, [r3, #20]
    4eda:	0c1b      	lsrs	r3, r3, #16
    4edc:	f003 030f 	and.w	r3, r3, #15
    4ee0:	1c59      	adds	r1, r3, #1
    4ee2:	4819      	ldr	r0, [pc, #100]	; (4f48 <getCoreDividerConfig+0x144>)
    4ee4:	9a04      	ldr	r2, [sp, #16]
    4ee6:	4613      	mov	r3, r2
    4ee8:	005b      	lsls	r3, r3, #1
    4eea:	4413      	add	r3, r2
    4eec:	009b      	lsls	r3, r3, #2
    4eee:	4403      	add	r3, r0
    4ef0:	3304      	adds	r3, #4
    4ef2:	6019      	str	r1, [r3, #0]
                break;
    4ef4:	e022      	b.n	4f3c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4ef6:	4b15      	ldr	r3, [pc, #84]	; (4f4c <getCoreDividerConfig+0x148>)
    4ef8:	699b      	ldr	r3, [r3, #24]
    4efa:	0c1b      	lsrs	r3, r3, #16
    4efc:	f003 030f 	and.w	r3, r3, #15
    4f00:	1c59      	adds	r1, r3, #1
    4f02:	4811      	ldr	r0, [pc, #68]	; (4f48 <getCoreDividerConfig+0x144>)
    4f04:	9a04      	ldr	r2, [sp, #16]
    4f06:	4613      	mov	r3, r2
    4f08:	005b      	lsls	r3, r3, #1
    4f0a:	4413      	add	r3, r2
    4f0c:	009b      	lsls	r3, r3, #2
    4f0e:	4403      	add	r3, r0
    4f10:	3304      	adds	r3, #4
    4f12:	6019      	str	r1, [r3, #0]
                break;
    4f14:	e012      	b.n	4f3c <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4f16:	4b0d      	ldr	r3, [pc, #52]	; (4f4c <getCoreDividerConfig+0x148>)
    4f18:	69db      	ldr	r3, [r3, #28]
    4f1a:	0c1b      	lsrs	r3, r3, #16
    4f1c:	f003 030f 	and.w	r3, r3, #15
    4f20:	1c59      	adds	r1, r3, #1
    4f22:	4809      	ldr	r0, [pc, #36]	; (4f48 <getCoreDividerConfig+0x144>)
    4f24:	9a04      	ldr	r2, [sp, #16]
    4f26:	4613      	mov	r3, r2
    4f28:	005b      	lsls	r3, r3, #1
    4f2a:	4413      	add	r3, r2
    4f2c:	009b      	lsls	r3, r3, #2
    4f2e:	4403      	add	r3, r0
    4f30:	3304      	adds	r3, #4
    4f32:	6019      	str	r1, [r3, #0]
                break;
    4f34:	e002      	b.n	4f3c <getCoreDividerConfig+0x138>
        }
    }
    4f36:	bf00      	nop
    4f38:	e000      	b.n	4f3c <getCoreDividerConfig+0x138>
                break;
    4f3a:	bf00      	nop

    return ReturnValue;
    4f3c:	9b05      	ldr	r3, [sp, #20]
}
    4f3e:	4618      	mov	r0, r3
    4f40:	b006      	add	sp, #24
    4f42:	4770      	bx	lr
    4f44:	1fff8ba8 	.word	0x1fff8ba8
    4f48:	1fff8c74 	.word	0x1fff8c74
    4f4c:	40064000 	.word	0x40064000

00004f50 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4f50:	b086      	sub	sp, #24
    4f52:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4f54:	2300      	movs	r3, #0
    4f56:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4f58:	2300      	movs	r3, #0
    4f5a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4f5c:	9b01      	ldr	r3, [sp, #4]
    4f5e:	2b23      	cmp	r3, #35	; 0x23
    4f60:	d00f      	beq.n	4f82 <getBusDividerConfig+0x32>
    4f62:	9b01      	ldr	r3, [sp, #4]
    4f64:	2b23      	cmp	r3, #35	; 0x23
    4f66:	d80f      	bhi.n	4f88 <getBusDividerConfig+0x38>
    4f68:	9b01      	ldr	r3, [sp, #4]
    4f6a:	2b21      	cmp	r3, #33	; 0x21
    4f6c:	d003      	beq.n	4f76 <getBusDividerConfig+0x26>
    4f6e:	9b01      	ldr	r3, [sp, #4]
    4f70:	2b22      	cmp	r3, #34	; 0x22
    4f72:	d003      	beq.n	4f7c <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f74:	e008      	b.n	4f88 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4f76:	2300      	movs	r3, #0
    4f78:	9304      	str	r3, [sp, #16]
            break;
    4f7a:	e006      	b.n	4f8a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4f7c:	2301      	movs	r3, #1
    4f7e:	9304      	str	r3, [sp, #16]
            break;
    4f80:	e003      	b.n	4f8a <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4f82:	2302      	movs	r3, #2
    4f84:	9304      	str	r3, [sp, #16]
            break;
    4f86:	e000      	b.n	4f8a <getBusDividerConfig+0x3a>
                break;
    4f88:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4f8a:	4b41      	ldr	r3, [pc, #260]	; (5090 <getBusDividerConfig+0x140>)
    4f8c:	681b      	ldr	r3, [r3, #0]
    4f8e:	2b00      	cmp	r3, #0
    4f90:	d026      	beq.n	4fe0 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4f92:	2300      	movs	r3, #0
    4f94:	9303      	str	r3, [sp, #12]
    4f96:	e01c      	b.n	4fd2 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4f98:	4b3d      	ldr	r3, [pc, #244]	; (5090 <getBusDividerConfig+0x140>)
    4f9a:	6819      	ldr	r1, [r3, #0]
    4f9c:	9a03      	ldr	r2, [sp, #12]
    4f9e:	4613      	mov	r3, r2
    4fa0:	005b      	lsls	r3, r3, #1
    4fa2:	4413      	add	r3, r2
    4fa4:	009b      	lsls	r3, r3, #2
    4fa6:	440b      	add	r3, r1
    4fa8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fac:	681b      	ldr	r3, [r3, #0]
    4fae:	9a01      	ldr	r2, [sp, #4]
    4fb0:	429a      	cmp	r2, r3
    4fb2:	d10b      	bne.n	4fcc <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4fb4:	4b36      	ldr	r3, [pc, #216]	; (5090 <getBusDividerConfig+0x140>)
    4fb6:	6819      	ldr	r1, [r3, #0]
    4fb8:	9a03      	ldr	r2, [sp, #12]
    4fba:	4613      	mov	r3, r2
    4fbc:	005b      	lsls	r3, r3, #1
    4fbe:	4413      	add	r3, r2
    4fc0:	009b      	lsls	r3, r3, #2
    4fc2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4fc6:	440b      	add	r3, r1
    4fc8:	9305      	str	r3, [sp, #20]
                break;
    4fca:	e009      	b.n	4fe0 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fcc:	9b03      	ldr	r3, [sp, #12]
    4fce:	3301      	adds	r3, #1
    4fd0:	9303      	str	r3, [sp, #12]
    4fd2:	4b2f      	ldr	r3, [pc, #188]	; (5090 <getBusDividerConfig+0x140>)
    4fd4:	681b      	ldr	r3, [r3, #0]
    4fd6:	7b1b      	ldrb	r3, [r3, #12]
    4fd8:	461a      	mov	r2, r3
    4fda:	9b03      	ldr	r3, [sp, #12]
    4fdc:	4293      	cmp	r3, r2
    4fde:	d3db      	bcc.n	4f98 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4fe0:	9b05      	ldr	r3, [sp, #20]
    4fe2:	2b00      	cmp	r3, #0
    4fe4:	d14d      	bne.n	5082 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    4fe6:	9a04      	ldr	r2, [sp, #16]
    4fe8:	4613      	mov	r3, r2
    4fea:	005b      	lsls	r3, r3, #1
    4fec:	4413      	add	r3, r2
    4fee:	009b      	lsls	r3, r3, #2
    4ff0:	4a28      	ldr	r2, [pc, #160]	; (5094 <getBusDividerConfig+0x144>)
    4ff2:	4413      	add	r3, r2
    4ff4:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    4ff6:	4927      	ldr	r1, [pc, #156]	; (5094 <getBusDividerConfig+0x144>)
    4ff8:	9a04      	ldr	r2, [sp, #16]
    4ffa:	4613      	mov	r3, r2
    4ffc:	005b      	lsls	r3, r3, #1
    4ffe:	4413      	add	r3, r2
    5000:	009b      	lsls	r3, r3, #2
    5002:	440b      	add	r3, r1
    5004:	9a01      	ldr	r2, [sp, #4]
    5006:	601a      	str	r2, [r3, #0]
        switch(Name)
    5008:	9b01      	ldr	r3, [sp, #4]
    500a:	2b23      	cmp	r3, #35	; 0x23
    500c:	d029      	beq.n	5062 <getBusDividerConfig+0x112>
    500e:	9b01      	ldr	r3, [sp, #4]
    5010:	2b23      	cmp	r3, #35	; 0x23
    5012:	d838      	bhi.n	5086 <getBusDividerConfig+0x136>
    5014:	9b01      	ldr	r3, [sp, #4]
    5016:	2b21      	cmp	r3, #33	; 0x21
    5018:	d003      	beq.n	5022 <getBusDividerConfig+0xd2>
    501a:	9b01      	ldr	r3, [sp, #4]
    501c:	2b22      	cmp	r3, #34	; 0x22
    501e:	d010      	beq.n	5042 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5020:	e031      	b.n	5086 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    5022:	4b1d      	ldr	r3, [pc, #116]	; (5098 <getBusDividerConfig+0x148>)
    5024:	695b      	ldr	r3, [r3, #20]
    5026:	091b      	lsrs	r3, r3, #4
    5028:	f003 030f 	and.w	r3, r3, #15
    502c:	1c59      	adds	r1, r3, #1
    502e:	4819      	ldr	r0, [pc, #100]	; (5094 <getBusDividerConfig+0x144>)
    5030:	9a04      	ldr	r2, [sp, #16]
    5032:	4613      	mov	r3, r2
    5034:	005b      	lsls	r3, r3, #1
    5036:	4413      	add	r3, r2
    5038:	009b      	lsls	r3, r3, #2
    503a:	4403      	add	r3, r0
    503c:	3304      	adds	r3, #4
    503e:	6019      	str	r1, [r3, #0]
                break;
    5040:	e022      	b.n	5088 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    5042:	4b15      	ldr	r3, [pc, #84]	; (5098 <getBusDividerConfig+0x148>)
    5044:	699b      	ldr	r3, [r3, #24]
    5046:	091b      	lsrs	r3, r3, #4
    5048:	f003 030f 	and.w	r3, r3, #15
    504c:	1c59      	adds	r1, r3, #1
    504e:	4811      	ldr	r0, [pc, #68]	; (5094 <getBusDividerConfig+0x144>)
    5050:	9a04      	ldr	r2, [sp, #16]
    5052:	4613      	mov	r3, r2
    5054:	005b      	lsls	r3, r3, #1
    5056:	4413      	add	r3, r2
    5058:	009b      	lsls	r3, r3, #2
    505a:	4403      	add	r3, r0
    505c:	3304      	adds	r3, #4
    505e:	6019      	str	r1, [r3, #0]
                break;
    5060:	e012      	b.n	5088 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    5062:	4b0d      	ldr	r3, [pc, #52]	; (5098 <getBusDividerConfig+0x148>)
    5064:	69db      	ldr	r3, [r3, #28]
    5066:	091b      	lsrs	r3, r3, #4
    5068:	f003 030f 	and.w	r3, r3, #15
    506c:	1c59      	adds	r1, r3, #1
    506e:	4809      	ldr	r0, [pc, #36]	; (5094 <getBusDividerConfig+0x144>)
    5070:	9a04      	ldr	r2, [sp, #16]
    5072:	4613      	mov	r3, r2
    5074:	005b      	lsls	r3, r3, #1
    5076:	4413      	add	r3, r2
    5078:	009b      	lsls	r3, r3, #2
    507a:	4403      	add	r3, r0
    507c:	3304      	adds	r3, #4
    507e:	6019      	str	r1, [r3, #0]
                break;
    5080:	e002      	b.n	5088 <getBusDividerConfig+0x138>
        }
    }
    5082:	bf00      	nop
    5084:	e000      	b.n	5088 <getBusDividerConfig+0x138>
                break;
    5086:	bf00      	nop

    return ReturnValue;
    5088:	9b05      	ldr	r3, [sp, #20]
}
    508a:	4618      	mov	r0, r3
    508c:	b006      	add	sp, #24
    508e:	4770      	bx	lr
    5090:	1fff8ba8 	.word	0x1fff8ba8
    5094:	1fff8c98 	.word	0x1fff8c98
    5098:	40064000 	.word	0x40064000

0000509c <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    509c:	b086      	sub	sp, #24
    509e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    50a0:	2300      	movs	r3, #0
    50a2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    50a4:	2300      	movs	r3, #0
    50a6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    50a8:	9b01      	ldr	r3, [sp, #4]
    50aa:	2b27      	cmp	r3, #39	; 0x27
    50ac:	d00f      	beq.n	50ce <getSlowDividerConfig+0x32>
    50ae:	9b01      	ldr	r3, [sp, #4]
    50b0:	2b27      	cmp	r3, #39	; 0x27
    50b2:	d80f      	bhi.n	50d4 <getSlowDividerConfig+0x38>
    50b4:	9b01      	ldr	r3, [sp, #4]
    50b6:	2b25      	cmp	r3, #37	; 0x25
    50b8:	d003      	beq.n	50c2 <getSlowDividerConfig+0x26>
    50ba:	9b01      	ldr	r3, [sp, #4]
    50bc:	2b26      	cmp	r3, #38	; 0x26
    50be:	d003      	beq.n	50c8 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    50c0:	e008      	b.n	50d4 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    50c2:	2300      	movs	r3, #0
    50c4:	9304      	str	r3, [sp, #16]
            break;
    50c6:	e006      	b.n	50d6 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    50c8:	2301      	movs	r3, #1
    50ca:	9304      	str	r3, [sp, #16]
            break;
    50cc:	e003      	b.n	50d6 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    50ce:	2302      	movs	r3, #2
    50d0:	9304      	str	r3, [sp, #16]
            break;
    50d2:	e000      	b.n	50d6 <getSlowDividerConfig+0x3a>
                break;
    50d4:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    50d6:	4b40      	ldr	r3, [pc, #256]	; (51d8 <getSlowDividerConfig+0x13c>)
    50d8:	681b      	ldr	r3, [r3, #0]
    50da:	2b00      	cmp	r3, #0
    50dc:	d026      	beq.n	512c <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    50de:	2300      	movs	r3, #0
    50e0:	9303      	str	r3, [sp, #12]
    50e2:	e01c      	b.n	511e <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    50e4:	4b3c      	ldr	r3, [pc, #240]	; (51d8 <getSlowDividerConfig+0x13c>)
    50e6:	6819      	ldr	r1, [r3, #0]
    50e8:	9a03      	ldr	r2, [sp, #12]
    50ea:	4613      	mov	r3, r2
    50ec:	005b      	lsls	r3, r3, #1
    50ee:	4413      	add	r3, r2
    50f0:	009b      	lsls	r3, r3, #2
    50f2:	440b      	add	r3, r1
    50f4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    50f8:	681b      	ldr	r3, [r3, #0]
    50fa:	9a01      	ldr	r2, [sp, #4]
    50fc:	429a      	cmp	r2, r3
    50fe:	d10b      	bne.n	5118 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5100:	4b35      	ldr	r3, [pc, #212]	; (51d8 <getSlowDividerConfig+0x13c>)
    5102:	6819      	ldr	r1, [r3, #0]
    5104:	9a03      	ldr	r2, [sp, #12]
    5106:	4613      	mov	r3, r2
    5108:	005b      	lsls	r3, r3, #1
    510a:	4413      	add	r3, r2
    510c:	009b      	lsls	r3, r3, #2
    510e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5112:	440b      	add	r3, r1
    5114:	9305      	str	r3, [sp, #20]
                break;
    5116:	e009      	b.n	512c <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5118:	9b03      	ldr	r3, [sp, #12]
    511a:	3301      	adds	r3, #1
    511c:	9303      	str	r3, [sp, #12]
    511e:	4b2e      	ldr	r3, [pc, #184]	; (51d8 <getSlowDividerConfig+0x13c>)
    5120:	681b      	ldr	r3, [r3, #0]
    5122:	7b1b      	ldrb	r3, [r3, #12]
    5124:	461a      	mov	r2, r3
    5126:	9b03      	ldr	r3, [sp, #12]
    5128:	4293      	cmp	r3, r2
    512a:	d3db      	bcc.n	50e4 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    512c:	9b05      	ldr	r3, [sp, #20]
    512e:	2b00      	cmp	r3, #0
    5130:	d14a      	bne.n	51c8 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    5132:	9a04      	ldr	r2, [sp, #16]
    5134:	4613      	mov	r3, r2
    5136:	005b      	lsls	r3, r3, #1
    5138:	4413      	add	r3, r2
    513a:	009b      	lsls	r3, r3, #2
    513c:	4a27      	ldr	r2, [pc, #156]	; (51dc <getSlowDividerConfig+0x140>)
    513e:	4413      	add	r3, r2
    5140:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    5142:	4926      	ldr	r1, [pc, #152]	; (51dc <getSlowDividerConfig+0x140>)
    5144:	9a04      	ldr	r2, [sp, #16]
    5146:	4613      	mov	r3, r2
    5148:	005b      	lsls	r3, r3, #1
    514a:	4413      	add	r3, r2
    514c:	009b      	lsls	r3, r3, #2
    514e:	440b      	add	r3, r1
    5150:	9a01      	ldr	r2, [sp, #4]
    5152:	601a      	str	r2, [r3, #0]
        switch(Name)
    5154:	9b01      	ldr	r3, [sp, #4]
    5156:	2b27      	cmp	r3, #39	; 0x27
    5158:	d027      	beq.n	51aa <getSlowDividerConfig+0x10e>
    515a:	9b01      	ldr	r3, [sp, #4]
    515c:	2b27      	cmp	r3, #39	; 0x27
    515e:	d835      	bhi.n	51cc <getSlowDividerConfig+0x130>
    5160:	9b01      	ldr	r3, [sp, #4]
    5162:	2b25      	cmp	r3, #37	; 0x25
    5164:	d003      	beq.n	516e <getSlowDividerConfig+0xd2>
    5166:	9b01      	ldr	r3, [sp, #4]
    5168:	2b26      	cmp	r3, #38	; 0x26
    516a:	d00f      	beq.n	518c <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    516c:	e02e      	b.n	51cc <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    516e:	4b1c      	ldr	r3, [pc, #112]	; (51e0 <getSlowDividerConfig+0x144>)
    5170:	695b      	ldr	r3, [r3, #20]
    5172:	f003 030f 	and.w	r3, r3, #15
    5176:	1c59      	adds	r1, r3, #1
    5178:	4818      	ldr	r0, [pc, #96]	; (51dc <getSlowDividerConfig+0x140>)
    517a:	9a04      	ldr	r2, [sp, #16]
    517c:	4613      	mov	r3, r2
    517e:	005b      	lsls	r3, r3, #1
    5180:	4413      	add	r3, r2
    5182:	009b      	lsls	r3, r3, #2
    5184:	4403      	add	r3, r0
    5186:	3304      	adds	r3, #4
    5188:	6019      	str	r1, [r3, #0]
                break;
    518a:	e020      	b.n	51ce <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    518c:	4b14      	ldr	r3, [pc, #80]	; (51e0 <getSlowDividerConfig+0x144>)
    518e:	699b      	ldr	r3, [r3, #24]
    5190:	f003 030f 	and.w	r3, r3, #15
    5194:	1c59      	adds	r1, r3, #1
    5196:	4811      	ldr	r0, [pc, #68]	; (51dc <getSlowDividerConfig+0x140>)
    5198:	9a04      	ldr	r2, [sp, #16]
    519a:	4613      	mov	r3, r2
    519c:	005b      	lsls	r3, r3, #1
    519e:	4413      	add	r3, r2
    51a0:	009b      	lsls	r3, r3, #2
    51a2:	4403      	add	r3, r0
    51a4:	3304      	adds	r3, #4
    51a6:	6019      	str	r1, [r3, #0]
                break;
    51a8:	e011      	b.n	51ce <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    51aa:	4b0d      	ldr	r3, [pc, #52]	; (51e0 <getSlowDividerConfig+0x144>)
    51ac:	69db      	ldr	r3, [r3, #28]
    51ae:	f003 030f 	and.w	r3, r3, #15
    51b2:	1c59      	adds	r1, r3, #1
    51b4:	4809      	ldr	r0, [pc, #36]	; (51dc <getSlowDividerConfig+0x140>)
    51b6:	9a04      	ldr	r2, [sp, #16]
    51b8:	4613      	mov	r3, r2
    51ba:	005b      	lsls	r3, r3, #1
    51bc:	4413      	add	r3, r2
    51be:	009b      	lsls	r3, r3, #2
    51c0:	4403      	add	r3, r0
    51c2:	3304      	adds	r3, #4
    51c4:	6019      	str	r1, [r3, #0]
                break;
    51c6:	e002      	b.n	51ce <getSlowDividerConfig+0x132>
        }
    }
    51c8:	bf00      	nop
    51ca:	e000      	b.n	51ce <getSlowDividerConfig+0x132>
                break;
    51cc:	bf00      	nop

    return ReturnValue;
    51ce:	9b05      	ldr	r3, [sp, #20]
}
    51d0:	4618      	mov	r0, r3
    51d2:	b006      	add	sp, #24
    51d4:	4770      	bx	lr
    51d6:	bf00      	nop
    51d8:	1fff8ba8 	.word	0x1fff8ba8
    51dc:	1fff8cbc 	.word	0x1fff8cbc
    51e0:	40064000 	.word	0x40064000

000051e4 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    51e4:	b500      	push	{lr}
    51e6:	b083      	sub	sp, #12
    51e8:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    51ea:	4b64      	ldr	r3, [pc, #400]	; (537c <Clock_Ip_ClockInitializeObjects+0x198>)
    51ec:	781b      	ldrb	r3, [r3, #0]
    51ee:	f083 0301 	eor.w	r3, r3, #1
    51f2:	b2db      	uxtb	r3, r3
    51f4:	2b00      	cmp	r3, #0
    51f6:	d05b      	beq.n	52b0 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    51f8:	4b60      	ldr	r3, [pc, #384]	; (537c <Clock_Ip_ClockInitializeObjects+0x198>)
    51fa:	2201      	movs	r2, #1
    51fc:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    51fe:	4b60      	ldr	r3, [pc, #384]	; (5380 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5200:	785b      	ldrb	r3, [r3, #1]
    5202:	461a      	mov	r2, r3
    5204:	4613      	mov	r3, r2
    5206:	009b      	lsls	r3, r3, #2
    5208:	4413      	add	r3, r2
    520a:	009b      	lsls	r3, r3, #2
    520c:	4a5d      	ldr	r2, [pc, #372]	; (5384 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    520e:	4413      	add	r3, r2
    5210:	4a5d      	ldr	r2, [pc, #372]	; (5388 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    5212:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5214:	4b5d      	ldr	r3, [pc, #372]	; (538c <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5216:	785b      	ldrb	r3, [r3, #1]
    5218:	461a      	mov	r2, r3
    521a:	4613      	mov	r3, r2
    521c:	009b      	lsls	r3, r3, #2
    521e:	4413      	add	r3, r2
    5220:	009b      	lsls	r3, r3, #2
    5222:	4a5b      	ldr	r2, [pc, #364]	; (5390 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5224:	4413      	add	r3, r2
    5226:	4a5b      	ldr	r2, [pc, #364]	; (5394 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5228:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    522a:	4b5b      	ldr	r3, [pc, #364]	; (5398 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    522c:	791b      	ldrb	r3, [r3, #4]
    522e:	461a      	mov	r2, r3
    5230:	4613      	mov	r3, r2
    5232:	005b      	lsls	r3, r3, #1
    5234:	4413      	add	r3, r2
    5236:	009b      	lsls	r3, r3, #2
    5238:	4a58      	ldr	r2, [pc, #352]	; (539c <Clock_Ip_ClockInitializeObjects+0x1b8>)
    523a:	4413      	add	r3, r2
    523c:	4a58      	ldr	r2, [pc, #352]	; (53a0 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    523e:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5240:	4b58      	ldr	r3, [pc, #352]	; (53a4 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5242:	795b      	ldrb	r3, [r3, #5]
    5244:	00db      	lsls	r3, r3, #3
    5246:	4a58      	ldr	r2, [pc, #352]	; (53a8 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5248:	4413      	add	r3, r2
    524a:	4a58      	ldr	r2, [pc, #352]	; (53ac <Clock_Ip_ClockInitializeObjects+0x1c8>)
    524c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    524e:	4b55      	ldr	r3, [pc, #340]	; (53a4 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    5250:	79db      	ldrb	r3, [r3, #7]
    5252:	00db      	lsls	r3, r3, #3
    5254:	4a54      	ldr	r2, [pc, #336]	; (53a8 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5256:	4413      	add	r3, r2
    5258:	4a55      	ldr	r2, [pc, #340]	; (53b0 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    525a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    525c:	4b55      	ldr	r3, [pc, #340]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    525e:	799b      	ldrb	r3, [r3, #6]
    5260:	009b      	lsls	r3, r3, #2
    5262:	4a55      	ldr	r2, [pc, #340]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5264:	4413      	add	r3, r2
    5266:	4a55      	ldr	r2, [pc, #340]	; (53bc <Clock_Ip_ClockInitializeObjects+0x1d8>)
    5268:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    526a:	4b52      	ldr	r3, [pc, #328]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    526c:	7a1b      	ldrb	r3, [r3, #8]
    526e:	009b      	lsls	r3, r3, #2
    5270:	4a51      	ldr	r2, [pc, #324]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5272:	4413      	add	r3, r2
    5274:	4a52      	ldr	r2, [pc, #328]	; (53c0 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    5276:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    5278:	4b4e      	ldr	r3, [pc, #312]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    527a:	7a5b      	ldrb	r3, [r3, #9]
    527c:	009b      	lsls	r3, r3, #2
    527e:	4a4e      	ldr	r2, [pc, #312]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5280:	4413      	add	r3, r2
    5282:	4a50      	ldr	r2, [pc, #320]	; (53c4 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    5284:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    5286:	4b4b      	ldr	r3, [pc, #300]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5288:	7adb      	ldrb	r3, [r3, #11]
    528a:	009b      	lsls	r3, r3, #2
    528c:	4a4a      	ldr	r2, [pc, #296]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    528e:	4413      	add	r3, r2
    5290:	4a4d      	ldr	r2, [pc, #308]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    5292:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    5294:	4b47      	ldr	r3, [pc, #284]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    5296:	7b1b      	ldrb	r3, [r3, #12]
    5298:	009b      	lsls	r3, r3, #2
    529a:	4a47      	ldr	r2, [pc, #284]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    529c:	4413      	add	r3, r2
    529e:	4a4b      	ldr	r2, [pc, #300]	; (53cc <Clock_Ip_ClockInitializeObjects+0x1e8>)
    52a0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    52a2:	4b44      	ldr	r3, [pc, #272]	; (53b4 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52a4:	7b9b      	ldrb	r3, [r3, #14]
    52a6:	009b      	lsls	r3, r3, #2
    52a8:	4a43      	ldr	r2, [pc, #268]	; (53b8 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52aa:	4413      	add	r3, r2
    52ac:	4a48      	ldr	r2, [pc, #288]	; (53d0 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    52ae:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    52b0:	4b48      	ldr	r3, [pc, #288]	; (53d4 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    52b2:	781b      	ldrb	r3, [r3, #0]
    52b4:	2b00      	cmp	r3, #0
    52b6:	d002      	beq.n	52be <Clock_Ip_ClockInitializeObjects+0xda>
    52b8:	9b01      	ldr	r3, [sp, #4]
    52ba:	2b00      	cmp	r3, #0
    52bc:	d003      	beq.n	52c6 <Clock_Ip_ClockInitializeObjects+0xe2>
    52be:	4b46      	ldr	r3, [pc, #280]	; (53d8 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    52c0:	781b      	ldrb	r3, [r3, #0]
    52c2:	2b00      	cmp	r3, #0
    52c4:	d056      	beq.n	5374 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    52c6:	f7ff fc09 	bl	4adc <getFircConfig>
    52ca:	4603      	mov	r3, r0
    52cc:	4a43      	ldr	r2, [pc, #268]	; (53dc <Clock_Ip_ClockInitializeObjects+0x1f8>)
    52ce:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    52d0:	f7ff fc60 	bl	4b94 <getSoscConfig>
    52d4:	4603      	mov	r3, r0
    52d6:	4a42      	ldr	r2, [pc, #264]	; (53e0 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    52d8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    52da:	f7ff fca7 	bl	4c2c <getSpllConfig>
    52de:	4603      	mov	r3, r0
    52e0:	4a40      	ldr	r2, [pc, #256]	; (53e4 <Clock_Ip_ClockInitializeObjects+0x200>)
    52e2:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    52e4:	2019      	movs	r0, #25
    52e6:	f7ff fcfb 	bl	4ce0 <getSelectorConfig>
    52ea:	4603      	mov	r3, r0
    52ec:	4a3e      	ldr	r2, [pc, #248]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x204>)
    52ee:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    52f0:	201a      	movs	r0, #26
    52f2:	f7ff fcf5 	bl	4ce0 <getSelectorConfig>
    52f6:	4603      	mov	r3, r0
    52f8:	4a3c      	ldr	r2, [pc, #240]	; (53ec <Clock_Ip_ClockInitializeObjects+0x208>)
    52fa:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    52fc:	201b      	movs	r0, #27
    52fe:	f7ff fcef 	bl	4ce0 <getSelectorConfig>
    5302:	4603      	mov	r3, r0
    5304:	4a3a      	ldr	r2, [pc, #232]	; (53f0 <Clock_Ip_ClockInitializeObjects+0x20c>)
    5306:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5308:	201d      	movs	r0, #29
    530a:	f7ff fd7b 	bl	4e04 <getCoreDividerConfig>
    530e:	4603      	mov	r3, r0
    5310:	4a38      	ldr	r2, [pc, #224]	; (53f4 <Clock_Ip_ClockInitializeObjects+0x210>)
    5312:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5314:	201e      	movs	r0, #30
    5316:	f7ff fd75 	bl	4e04 <getCoreDividerConfig>
    531a:	4603      	mov	r3, r0
    531c:	4a36      	ldr	r2, [pc, #216]	; (53f8 <Clock_Ip_ClockInitializeObjects+0x214>)
    531e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5320:	201f      	movs	r0, #31
    5322:	f7ff fd6f 	bl	4e04 <getCoreDividerConfig>
    5326:	4603      	mov	r3, r0
    5328:	4a34      	ldr	r2, [pc, #208]	; (53fc <Clock_Ip_ClockInitializeObjects+0x218>)
    532a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    532c:	2021      	movs	r0, #33	; 0x21
    532e:	f7ff fe0f 	bl	4f50 <getBusDividerConfig>
    5332:	4603      	mov	r3, r0
    5334:	4a32      	ldr	r2, [pc, #200]	; (5400 <Clock_Ip_ClockInitializeObjects+0x21c>)
    5336:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5338:	2022      	movs	r0, #34	; 0x22
    533a:	f7ff fe09 	bl	4f50 <getBusDividerConfig>
    533e:	4603      	mov	r3, r0
    5340:	4a30      	ldr	r2, [pc, #192]	; (5404 <Clock_Ip_ClockInitializeObjects+0x220>)
    5342:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5344:	2023      	movs	r0, #35	; 0x23
    5346:	f7ff fe03 	bl	4f50 <getBusDividerConfig>
    534a:	4603      	mov	r3, r0
    534c:	4a2e      	ldr	r2, [pc, #184]	; (5408 <Clock_Ip_ClockInitializeObjects+0x224>)
    534e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    5350:	2025      	movs	r0, #37	; 0x25
    5352:	f7ff fea3 	bl	509c <getSlowDividerConfig>
    5356:	4603      	mov	r3, r0
    5358:	4a2c      	ldr	r2, [pc, #176]	; (540c <Clock_Ip_ClockInitializeObjects+0x228>)
    535a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    535c:	2026      	movs	r0, #38	; 0x26
    535e:	f7ff fe9d 	bl	509c <getSlowDividerConfig>
    5362:	4603      	mov	r3, r0
    5364:	4a2a      	ldr	r2, [pc, #168]	; (5410 <Clock_Ip_ClockInitializeObjects+0x22c>)
    5366:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    5368:	2027      	movs	r0, #39	; 0x27
    536a:	f7ff fe97 	bl	509c <getSlowDividerConfig>
    536e:	4603      	mov	r3, r0
    5370:	4a28      	ldr	r2, [pc, #160]	; (5414 <Clock_Ip_ClockInitializeObjects+0x230>)
    5372:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    5374:	bf00      	nop
    5376:	b003      	add	sp, #12
    5378:	f85d fb04 	ldr.w	pc, [sp], #4
    537c:	1fff8ce0 	.word	0x1fff8ce0
    5380:	0000a614 	.word	0x0000a614
    5384:	0000ac60 	.word	0x0000ac60
    5388:	1fff8bac 	.word	0x1fff8bac
    538c:	0000a5d4 	.word	0x0000a5d4
    5390:	0000aba8 	.word	0x0000aba8
    5394:	1fff8bb0 	.word	0x1fff8bb0
    5398:	0000a5e4 	.word	0x0000a5e4
    539c:	0000ac14 	.word	0x0000ac14
    53a0:	1fff8bb4 	.word	0x1fff8bb4
    53a4:	0000a624 	.word	0x0000a624
    53a8:	0000ac8c 	.word	0x0000ac8c
    53ac:	1fff8bb8 	.word	0x1fff8bb8
    53b0:	1fff8bf4 	.word	0x1fff8bf4
    53b4:	0000a5b4 	.word	0x0000a5b4
    53b8:	0000ab64 	.word	0x0000ab64
    53bc:	1fff8bbc 	.word	0x1fff8bbc
    53c0:	1fff8bf8 	.word	0x1fff8bf8
    53c4:	1fff8bc0 	.word	0x1fff8bc0
    53c8:	1fff8bfc 	.word	0x1fff8bfc
    53cc:	1fff8bc4 	.word	0x1fff8bc4
    53d0:	1fff8c00 	.word	0x1fff8c00
    53d4:	1fff8b19 	.word	0x1fff8b19
    53d8:	1fff8b10 	.word	0x1fff8b10
    53dc:	1fff8bc8 	.word	0x1fff8bc8
    53e0:	1fff8bcc 	.word	0x1fff8bcc
    53e4:	1fff8bd0 	.word	0x1fff8bd0
    53e8:	1fff8bd4 	.word	0x1fff8bd4
    53ec:	1fff8bd8 	.word	0x1fff8bd8
    53f0:	1fff8c04 	.word	0x1fff8c04
    53f4:	1fff8bdc 	.word	0x1fff8bdc
    53f8:	1fff8be0 	.word	0x1fff8be0
    53fc:	1fff8c08 	.word	0x1fff8c08
    5400:	1fff8be4 	.word	0x1fff8be4
    5404:	1fff8be8 	.word	0x1fff8be8
    5408:	1fff8c0c 	.word	0x1fff8c0c
    540c:	1fff8bec 	.word	0x1fff8bec
    5410:	1fff8bf0 	.word	0x1fff8bf0
    5414:	1fff8c10 	.word	0x1fff8c10

00005418 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5418:	b500      	push	{lr}
    541a:	b083      	sub	sp, #12
    541c:	9001      	str	r0, [sp, #4]
    541e:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5420:	9b01      	ldr	r3, [sp, #4]
    5422:	2b03      	cmp	r3, #3
    5424:	f000 8090 	beq.w	5548 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5428:	9b01      	ldr	r3, [sp, #4]
    542a:	2b03      	cmp	r3, #3
    542c:	f200 80d3 	bhi.w	55d6 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5430:	9b01      	ldr	r3, [sp, #4]
    5432:	2b00      	cmp	r3, #0
    5434:	d040      	beq.n	54b8 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    5436:	9b01      	ldr	r3, [sp, #4]
    5438:	3b01      	subs	r3, #1
    543a:	2b01      	cmp	r3, #1
    543c:	f200 80cb 	bhi.w	55d6 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5440:	9b00      	ldr	r3, [sp, #0]
    5442:	2b00      	cmp	r3, #0
    5444:	f040 80c9 	bne.w	55da <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5448:	4b68      	ldr	r3, [pc, #416]	; (55ec <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    544a:	2200      	movs	r2, #0
    544c:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    544e:	4b68      	ldr	r3, [pc, #416]	; (55f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	685b      	ldr	r3, [r3, #4]
    5454:	4a67      	ldr	r2, [pc, #412]	; (55f4 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    5456:	6812      	ldr	r2, [r2, #0]
    5458:	4610      	mov	r0, r2
    545a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    545c:	4b66      	ldr	r3, [pc, #408]	; (55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    545e:	681b      	ldr	r3, [r3, #0]
    5460:	681b      	ldr	r3, [r3, #0]
    5462:	4a66      	ldr	r2, [pc, #408]	; (55fc <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5464:	6812      	ldr	r2, [r2, #0]
    5466:	4610      	mov	r0, r2
    5468:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    546a:	4b65      	ldr	r3, [pc, #404]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    546c:	681b      	ldr	r3, [r3, #0]
    546e:	681b      	ldr	r3, [r3, #0]
    5470:	4a64      	ldr	r2, [pc, #400]	; (5604 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    5472:	6812      	ldr	r2, [r2, #0]
    5474:	4610      	mov	r0, r2
    5476:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5478:	4b63      	ldr	r3, [pc, #396]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    547a:	681b      	ldr	r3, [r3, #0]
    547c:	681b      	ldr	r3, [r3, #0]
    547e:	4a63      	ldr	r2, [pc, #396]	; (560c <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5480:	6812      	ldr	r2, [r2, #0]
    5482:	4610      	mov	r0, r2
    5484:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    5486:	4b62      	ldr	r3, [pc, #392]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5488:	681b      	ldr	r3, [r3, #0]
    548a:	691b      	ldr	r3, [r3, #16]
    548c:	4a61      	ldr	r2, [pc, #388]	; (5614 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    548e:	6812      	ldr	r2, [r2, #0]
    5490:	6812      	ldr	r2, [r2, #0]
    5492:	4610      	mov	r0, r2
    5494:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    5496:	4b60      	ldr	r3, [pc, #384]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5498:	681b      	ldr	r3, [r3, #0]
    549a:	68db      	ldr	r3, [r3, #12]
    549c:	4a5f      	ldr	r2, [pc, #380]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    549e:	6812      	ldr	r2, [r2, #0]
    54a0:	6812      	ldr	r2, [r2, #0]
    54a2:	4610      	mov	r0, r2
    54a4:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    54a6:	4b5e      	ldr	r3, [pc, #376]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54a8:	681b      	ldr	r3, [r3, #0]
    54aa:	689b      	ldr	r3, [r3, #8]
    54ac:	4a5d      	ldr	r2, [pc, #372]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54ae:	6812      	ldr	r2, [r2, #0]
    54b0:	6812      	ldr	r2, [r2, #0]
    54b2:	4610      	mov	r0, r2
    54b4:	4798      	blx	r3
            }
        }
        break;
    54b6:	e090      	b.n	55da <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    54b8:	9b00      	ldr	r3, [sp, #0]
    54ba:	2b02      	cmp	r3, #2
    54bc:	f040 808f 	bne.w	55de <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    54c0:	4b4a      	ldr	r3, [pc, #296]	; (55ec <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    54c2:	2201      	movs	r2, #1
    54c4:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    54c6:	4b56      	ldr	r3, [pc, #344]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54c8:	681b      	ldr	r3, [r3, #0]
    54ca:	685b      	ldr	r3, [r3, #4]
    54cc:	4a55      	ldr	r2, [pc, #340]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54ce:	6812      	ldr	r2, [r2, #0]
    54d0:	4610      	mov	r0, r2
    54d2:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    54d4:	4b50      	ldr	r3, [pc, #320]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54d6:	681b      	ldr	r3, [r3, #0]
    54d8:	691b      	ldr	r3, [r3, #16]
    54da:	4a50      	ldr	r2, [pc, #320]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54dc:	6812      	ldr	r2, [r2, #0]
    54de:	4610      	mov	r0, r2
    54e0:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    54e2:	4b4d      	ldr	r3, [pc, #308]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54e4:	681b      	ldr	r3, [r3, #0]
    54e6:	689b      	ldr	r3, [r3, #8]
    54e8:	4a4c      	ldr	r2, [pc, #304]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54ea:	6812      	ldr	r2, [r2, #0]
    54ec:	4610      	mov	r0, r2
    54ee:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    54f0:	4b47      	ldr	r3, [pc, #284]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54f2:	681b      	ldr	r3, [r3, #0]
    54f4:	68db      	ldr	r3, [r3, #12]
    54f6:	4a47      	ldr	r2, [pc, #284]	; (5614 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54f8:	6812      	ldr	r2, [r2, #0]
    54fa:	4610      	mov	r0, r2
    54fc:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    54fe:	4b44      	ldr	r3, [pc, #272]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5500:	681b      	ldr	r3, [r3, #0]
    5502:	689b      	ldr	r3, [r3, #8]
    5504:	4a43      	ldr	r2, [pc, #268]	; (5614 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5506:	6812      	ldr	r2, [r2, #0]
    5508:	6812      	ldr	r2, [r2, #0]
    550a:	4610      	mov	r0, r2
    550c:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    550e:	4b38      	ldr	r3, [pc, #224]	; (55f0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5510:	681b      	ldr	r3, [r3, #0]
    5512:	685b      	ldr	r3, [r3, #4]
    5514:	4a44      	ldr	r2, [pc, #272]	; (5628 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    5516:	6812      	ldr	r2, [r2, #0]
    5518:	4610      	mov	r0, r2
    551a:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    551c:	4b36      	ldr	r3, [pc, #216]	; (55f8 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    551e:	681b      	ldr	r3, [r3, #0]
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	4a42      	ldr	r2, [pc, #264]	; (562c <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5524:	6812      	ldr	r2, [r2, #0]
    5526:	4610      	mov	r0, r2
    5528:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    552a:	4b35      	ldr	r3, [pc, #212]	; (5600 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    552c:	681b      	ldr	r3, [r3, #0]
    552e:	681b      	ldr	r3, [r3, #0]
    5530:	4a3f      	ldr	r2, [pc, #252]	; (5630 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5532:	6812      	ldr	r2, [r2, #0]
    5534:	4610      	mov	r0, r2
    5536:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5538:	4b33      	ldr	r3, [pc, #204]	; (5608 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    553a:	681b      	ldr	r3, [r3, #0]
    553c:	681b      	ldr	r3, [r3, #0]
    553e:	4a3d      	ldr	r2, [pc, #244]	; (5634 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5540:	6812      	ldr	r2, [r2, #0]
    5542:	4610      	mov	r0, r2
    5544:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5546:	e04a      	b.n	55de <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5548:	9b00      	ldr	r3, [sp, #0]
    554a:	2b02      	cmp	r3, #2
    554c:	d149      	bne.n	55e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    554e:	4b27      	ldr	r3, [pc, #156]	; (55ec <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5550:	2201      	movs	r2, #1
    5552:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5554:	4b32      	ldr	r3, [pc, #200]	; (5620 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5556:	681b      	ldr	r3, [r3, #0]
    5558:	685b      	ldr	r3, [r3, #4]
    555a:	4a32      	ldr	r2, [pc, #200]	; (5624 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    555c:	6812      	ldr	r2, [r2, #0]
    555e:	4610      	mov	r0, r2
    5560:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5562:	4b2d      	ldr	r3, [pc, #180]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5564:	681b      	ldr	r3, [r3, #0]
    5566:	691b      	ldr	r3, [r3, #16]
    5568:	4a2c      	ldr	r2, [pc, #176]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    556a:	6812      	ldr	r2, [r2, #0]
    556c:	4610      	mov	r0, r2
    556e:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5570:	4b29      	ldr	r3, [pc, #164]	; (5618 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5572:	681b      	ldr	r3, [r3, #0]
    5574:	689b      	ldr	r3, [r3, #8]
    5576:	4a29      	ldr	r2, [pc, #164]	; (561c <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5578:	6812      	ldr	r2, [r2, #0]
    557a:	4610      	mov	r0, r2
    557c:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    557e:	4b24      	ldr	r3, [pc, #144]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5580:	681b      	ldr	r3, [r3, #0]
    5582:	68db      	ldr	r3, [r3, #12]
    5584:	4a23      	ldr	r2, [pc, #140]	; (5614 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5586:	6812      	ldr	r2, [r2, #0]
    5588:	4610      	mov	r0, r2
    558a:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    558c:	4b20      	ldr	r3, [pc, #128]	; (5610 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    558e:	681b      	ldr	r3, [r3, #0]
    5590:	689b      	ldr	r3, [r3, #8]
    5592:	4a20      	ldr	r2, [pc, #128]	; (5614 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5594:	6812      	ldr	r2, [r2, #0]
    5596:	6812      	ldr	r2, [r2, #0]
    5598:	4610      	mov	r0, r2
    559a:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    559c:	4b26      	ldr	r3, [pc, #152]	; (5638 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    559e:	681b      	ldr	r3, [r3, #0]
    55a0:	685b      	ldr	r3, [r3, #4]
    55a2:	4a26      	ldr	r2, [pc, #152]	; (563c <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    55a4:	6812      	ldr	r2, [r2, #0]
    55a6:	4610      	mov	r0, r2
    55a8:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    55aa:	4b25      	ldr	r3, [pc, #148]	; (5640 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    55ac:	681b      	ldr	r3, [r3, #0]
    55ae:	681b      	ldr	r3, [r3, #0]
    55b0:	4a24      	ldr	r2, [pc, #144]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    55b2:	6812      	ldr	r2, [r2, #0]
    55b4:	4610      	mov	r0, r2
    55b6:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    55b8:	4b23      	ldr	r3, [pc, #140]	; (5648 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    55ba:	681b      	ldr	r3, [r3, #0]
    55bc:	681b      	ldr	r3, [r3, #0]
    55be:	4a23      	ldr	r2, [pc, #140]	; (564c <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    55c0:	6812      	ldr	r2, [r2, #0]
    55c2:	4610      	mov	r0, r2
    55c4:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    55c6:	4b22      	ldr	r3, [pc, #136]	; (5650 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    55c8:	681b      	ldr	r3, [r3, #0]
    55ca:	681b      	ldr	r3, [r3, #0]
    55cc:	4a21      	ldr	r2, [pc, #132]	; (5654 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    55ce:	6812      	ldr	r2, [r2, #0]
    55d0:	4610      	mov	r0, r2
    55d2:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    55d4:	e005      	b.n	55e2 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    55d6:	bf00      	nop
    55d8:	e004      	b.n	55e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55da:	bf00      	nop
    55dc:	e002      	b.n	55e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55de:	bf00      	nop
    55e0:	e000      	b.n	55e4 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    55e2:	bf00      	nop
    }

}
    55e4:	bf00      	nop
    55e6:	b003      	add	sp, #12
    55e8:	f85d fb04 	ldr.w	pc, [sp], #4
    55ec:	1fff8b19 	.word	0x1fff8b19
    55f0:	1fff8bb8 	.word	0x1fff8bb8
    55f4:	1fff8bd8 	.word	0x1fff8bd8
    55f8:	1fff8bbc 	.word	0x1fff8bbc
    55fc:	1fff8be0 	.word	0x1fff8be0
    5600:	1fff8bc0 	.word	0x1fff8bc0
    5604:	1fff8be8 	.word	0x1fff8be8
    5608:	1fff8bc4 	.word	0x1fff8bc4
    560c:	1fff8bf0 	.word	0x1fff8bf0
    5610:	1fff8bac 	.word	0x1fff8bac
    5614:	1fff8bd0 	.word	0x1fff8bd0
    5618:	1fff8bb0 	.word	0x1fff8bb0
    561c:	1fff8bcc 	.word	0x1fff8bcc
    5620:	1fff8bb4 	.word	0x1fff8bb4
    5624:	1fff8bc8 	.word	0x1fff8bc8
    5628:	1fff8bd4 	.word	0x1fff8bd4
    562c:	1fff8bdc 	.word	0x1fff8bdc
    5630:	1fff8be4 	.word	0x1fff8be4
    5634:	1fff8bec 	.word	0x1fff8bec
    5638:	1fff8bf4 	.word	0x1fff8bf4
    563c:	1fff8c04 	.word	0x1fff8c04
    5640:	1fff8bf8 	.word	0x1fff8bf8
    5644:	1fff8c08 	.word	0x1fff8c08
    5648:	1fff8bfc 	.word	0x1fff8bfc
    564c:	1fff8c0c 	.word	0x1fff8c0c
    5650:	1fff8c00 	.word	0x1fff8c00
    5654:	1fff8c10 	.word	0x1fff8c10

00005658 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5658:	b500      	push	{lr}
    565a:	b083      	sub	sp, #12
    565c:	9001      	str	r0, [sp, #4]
    565e:	9100      	str	r1, [sp, #0]
    switch(Command)
    5660:	9b00      	ldr	r3, [sp, #0]
    5662:	2b04      	cmp	r3, #4
    5664:	d010      	beq.n	5688 <Clock_Ip_Command+0x30>
    5666:	9b00      	ldr	r3, [sp, #0]
    5668:	2b04      	cmp	r3, #4
    566a:	d811      	bhi.n	5690 <Clock_Ip_Command+0x38>
    566c:	9b00      	ldr	r3, [sp, #0]
    566e:	2b01      	cmp	r3, #1
    5670:	d006      	beq.n	5680 <Clock_Ip_Command+0x28>
    5672:	9b00      	ldr	r3, [sp, #0]
    5674:	2b02      	cmp	r3, #2
    5676:	d10b      	bne.n	5690 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5678:	9801      	ldr	r0, [sp, #4]
    567a:	f7ff fdb3 	bl	51e4 <Clock_Ip_ClockInitializeObjects>
            break;
    567e:	e008      	b.n	5692 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5680:	9801      	ldr	r0, [sp, #4]
    5682:	f7ff f9db 	bl	4a3c <Clock_Ip_SpecificPlatformInitClock>
            break;
    5686:	e004      	b.n	5692 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5688:	9801      	ldr	r0, [sp, #4]
    568a:	f7ff f8ed 	bl	4868 <DisableSafeClock>
            break;
    568e:	e000      	b.n	5692 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5690:	bf00      	nop
    }
}
    5692:	bf00      	nop
    5694:	b003      	add	sp, #12
    5696:	f85d fb04 	ldr.w	pc, [sp], #4
    569a:	bf00      	nop

0000569c <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    569c:	b500      	push	{lr}
    569e:	b085      	sub	sp, #20
    56a0:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    56a2:	4a20      	ldr	r2, [pc, #128]	; (5724 <Mcu_Init+0x88>)
    56a4:	9b01      	ldr	r3, [sp, #4]
    56a6:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    56a8:	2300      	movs	r3, #0
    56aa:	9303      	str	r3, [sp, #12]
    56ac:	e010      	b.n	56d0 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    56ae:	4b1d      	ldr	r3, [pc, #116]	; (5724 <Mcu_Init+0x88>)
    56b0:	681b      	ldr	r3, [r3, #0]
    56b2:	6919      	ldr	r1, [r3, #16]
    56b4:	9a03      	ldr	r2, [sp, #12]
    56b6:	4613      	mov	r3, r2
    56b8:	005b      	lsls	r3, r3, #1
    56ba:	4413      	add	r3, r2
    56bc:	009b      	lsls	r3, r3, #2
    56be:	440b      	add	r3, r1
    56c0:	681b      	ldr	r3, [r3, #0]
    56c2:	9a03      	ldr	r2, [sp, #12]
    56c4:	b2d1      	uxtb	r1, r2
    56c6:	4a18      	ldr	r2, [pc, #96]	; (5728 <Mcu_Init+0x8c>)
    56c8:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    56ca:	9b03      	ldr	r3, [sp, #12]
    56cc:	3301      	adds	r3, #1
    56ce:	9303      	str	r3, [sp, #12]
    56d0:	4b14      	ldr	r3, [pc, #80]	; (5724 <Mcu_Init+0x88>)
    56d2:	681b      	ldr	r3, [r3, #0]
    56d4:	689b      	ldr	r3, [r3, #8]
    56d6:	9a03      	ldr	r2, [sp, #12]
    56d8:	429a      	cmp	r2, r3
    56da:	d3e8      	bcc.n	56ae <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    56dc:	2300      	movs	r3, #0
    56de:	9303      	str	r3, [sp, #12]
    56e0:	e010      	b.n	5704 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    56e2:	4b10      	ldr	r3, [pc, #64]	; (5724 <Mcu_Init+0x88>)
    56e4:	681b      	ldr	r3, [r3, #0]
    56e6:	6959      	ldr	r1, [r3, #20]
    56e8:	9a03      	ldr	r2, [sp, #12]
    56ea:	4613      	mov	r3, r2
    56ec:	01db      	lsls	r3, r3, #7
    56ee:	1a9b      	subs	r3, r3, r2
    56f0:	00db      	lsls	r3, r3, #3
    56f2:	440b      	add	r3, r1
    56f4:	681b      	ldr	r3, [r3, #0]
    56f6:	9a03      	ldr	r2, [sp, #12]
    56f8:	b2d1      	uxtb	r1, r2
    56fa:	4a0c      	ldr	r2, [pc, #48]	; (572c <Mcu_Init+0x90>)
    56fc:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    56fe:	9b03      	ldr	r3, [sp, #12]
    5700:	3301      	adds	r3, #1
    5702:	9303      	str	r3, [sp, #12]
    5704:	4b07      	ldr	r3, [pc, #28]	; (5724 <Mcu_Init+0x88>)
    5706:	681b      	ldr	r3, [r3, #0]
    5708:	68db      	ldr	r3, [r3, #12]
    570a:	9a03      	ldr	r2, [sp, #12]
    570c:	429a      	cmp	r2, r3
    570e:	d3e8      	bcc.n	56e2 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5710:	4b04      	ldr	r3, [pc, #16]	; (5724 <Mcu_Init+0x88>)
    5712:	681b      	ldr	r3, [r3, #0]
    5714:	699b      	ldr	r3, [r3, #24]
    5716:	4618      	mov	r0, r3
    5718:	f000 f88a 	bl	5830 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    571c:	bf00      	nop
    571e:	b005      	add	sp, #20
    5720:	f85d fb04 	ldr.w	pc, [sp], #4
    5724:	1fff8cec 	.word	0x1fff8cec
    5728:	1fff8ce8 	.word	0x1fff8ce8
    572c:	1fff8ce4 	.word	0x1fff8ce4

00005730 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5730:	b084      	sub	sp, #16
    5732:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5734:	2301      	movs	r3, #1
    5736:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    573a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    573e:	4618      	mov	r0, r3
    5740:	b004      	add	sp, #16
    5742:	4770      	bx	lr

00005744 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5744:	b500      	push	{lr}
    5746:	b085      	sub	sp, #20
    5748:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    574a:	4a0e      	ldr	r2, [pc, #56]	; (5784 <Mcu_InitClock+0x40>)
    574c:	9b01      	ldr	r3, [sp, #4]
    574e:	4413      	add	r3, r2
    5750:	781b      	ldrb	r3, [r3, #0]
    5752:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5756:	4b0c      	ldr	r3, [pc, #48]	; (5788 <Mcu_InitClock+0x44>)
    5758:	681b      	ldr	r3, [r3, #0]
    575a:	6959      	ldr	r1, [r3, #20]
    575c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5760:	4613      	mov	r3, r2
    5762:	01db      	lsls	r3, r3, #7
    5764:	1a9b      	subs	r3, r3, r2
    5766:	00db      	lsls	r3, r3, #3
    5768:	440b      	add	r3, r1
    576a:	4618      	mov	r0, r3
    576c:	f000 f86a 	bl	5844 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5770:	2300      	movs	r3, #0
    5772:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5776:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    577a:	4618      	mov	r0, r3
    577c:	b005      	add	sp, #20
    577e:	f85d fb04 	ldr.w	pc, [sp], #4
    5782:	bf00      	nop
    5784:	1fff8ce4 	.word	0x1fff8ce4
    5788:	1fff8cec 	.word	0x1fff8cec

0000578c <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    578c:	b500      	push	{lr}
    578e:	b085      	sub	sp, #20
    5790:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5792:	4a0d      	ldr	r2, [pc, #52]	; (57c8 <Mcu_SetMode+0x3c>)
    5794:	9b01      	ldr	r3, [sp, #4]
    5796:	4413      	add	r3, r2
    5798:	781b      	ldrb	r3, [r3, #0]
    579a:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    579e:	f002 fedb 	bl	8558 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    57a2:	4b0a      	ldr	r3, [pc, #40]	; (57cc <Mcu_SetMode+0x40>)
    57a4:	681b      	ldr	r3, [r3, #0]
    57a6:	6919      	ldr	r1, [r3, #16]
    57a8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    57ac:	4613      	mov	r3, r2
    57ae:	005b      	lsls	r3, r3, #1
    57b0:	4413      	add	r3, r2
    57b2:	009b      	lsls	r3, r3, #2
    57b4:	440b      	add	r3, r1
    57b6:	4618      	mov	r0, r3
    57b8:	f000 f84e 	bl	5858 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    57bc:	f002 fef8 	bl	85b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    57c0:	bf00      	nop
    57c2:	b005      	add	sp, #20
    57c4:	f85d fb04 	ldr.w	pc, [sp], #4
    57c8:	1fff8ce8 	.word	0x1fff8ce8
    57cc:	1fff8cec 	.word	0x1fff8cec

000057d0 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    57d0:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    57d2:	2302      	movs	r3, #2
    57d4:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    57d6:	9b01      	ldr	r3, [sp, #4]
}
    57d8:	4618      	mov	r0, r3
    57da:	b002      	add	sp, #8
    57dc:	4770      	bx	lr

000057de <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    57de:	b500      	push	{lr}
    57e0:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    57e2:	f000 f843 	bl	586c <Mcu_Ipw_GetResetReason>
    57e6:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    57e8:	9b01      	ldr	r3, [sp, #4]
}
    57ea:	4618      	mov	r0, r3
    57ec:	b003      	add	sp, #12
    57ee:	f85d fb04 	ldr.w	pc, [sp], #4

000057f2 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    57f2:	b500      	push	{lr}
    57f4:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    57f6:	f000 f83f 	bl	5878 <Mcu_Ipw_GetResetRawValue>
    57fa:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    57fc:	9b01      	ldr	r3, [sp, #4]
}
    57fe:	4618      	mov	r0, r3
    5800:	b003      	add	sp, #12
    5802:	f85d fb04 	ldr.w	pc, [sp], #4

00005806 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5806:	b500      	push	{lr}
    5808:	b083      	sub	sp, #12
    580a:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    580c:	9801      	ldr	r0, [sp, #4]
    580e:	f000 f839 	bl	5884 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5812:	bf00      	nop
    5814:	b003      	add	sp, #12
    5816:	f85d fb04 	ldr.w	pc, [sp], #4

0000581a <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    581a:	b082      	sub	sp, #8
    581c:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    581e:	4b03      	ldr	r3, [pc, #12]	; (582c <Mcu_ClkSrcFailureNotification+0x12>)
    5820:	681b      	ldr	r3, [r3, #0]
    5822:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5824:	bf00      	nop
    5826:	b002      	add	sp, #8
    5828:	4770      	bx	lr
    582a:	bf00      	nop
    582c:	1fff8cec 	.word	0x1fff8cec

00005830 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5830:	b500      	push	{lr}
    5832:	b083      	sub	sp, #12
    5834:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5836:	9801      	ldr	r0, [sp, #4]
    5838:	f000 f882 	bl	5940 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    583c:	bf00      	nop
    583e:	b003      	add	sp, #12
    5840:	f85d fb04 	ldr.w	pc, [sp], #4

00005844 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5844:	b500      	push	{lr}
    5846:	b083      	sub	sp, #12
    5848:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    584a:	9801      	ldr	r0, [sp, #4]
    584c:	f7fc fc6a 	bl	2124 <Clock_Ip_InitClock>
}
    5850:	bf00      	nop
    5852:	b003      	add	sp, #12
    5854:	f85d fb04 	ldr.w	pc, [sp], #4

00005858 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5858:	b500      	push	{lr}
    585a:	b083      	sub	sp, #12
    585c:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    585e:	9801      	ldr	r0, [sp, #4]
    5860:	f000 f820 	bl	58a4 <Power_Ip_SetMode>
}
    5864:	bf00      	nop
    5866:	b003      	add	sp, #12
    5868:	f85d fb04 	ldr.w	pc, [sp], #4

0000586c <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    586c:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    586e:	f000 f84f 	bl	5910 <Power_Ip_GetResetReason>
    5872:	4603      	mov	r3, r0
}
    5874:	4618      	mov	r0, r3
    5876:	bd08      	pop	{r3, pc}

00005878 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5878:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    587a:	f000 f857 	bl	592c <Power_Ip_GetResetRawValue>
    587e:	4603      	mov	r3, r0
}
    5880:	4618      	mov	r0, r3
    5882:	bd08      	pop	{r3, pc}

00005884 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5884:	b500      	push	{lr}
    5886:	b083      	sub	sp, #12
    5888:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    588a:	9b01      	ldr	r3, [sp, #4]
    588c:	2b00      	cmp	r3, #0
    588e:	d102      	bne.n	5896 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5890:	f000 f86c 	bl	596c <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5894:	e001      	b.n	589a <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5896:	f000 f86e 	bl	5976 <Power_Ip_EnableSleepOnExit>
}
    589a:	bf00      	nop
    589c:	b003      	add	sp, #12
    589e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000058a4 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    58a4:	b500      	push	{lr}
    58a6:	b085      	sub	sp, #20
    58a8:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    58aa:	9b01      	ldr	r3, [sp, #4]
    58ac:	685b      	ldr	r3, [r3, #4]
    58ae:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    58b0:	9802      	ldr	r0, [sp, #8]
    58b2:	f000 f9f5 	bl	5ca0 <Power_Ip_SMC_ModeCheckEntry>
    58b6:	4603      	mov	r3, r0
    58b8:	2b00      	cmp	r3, #0
    58ba:	d002      	beq.n	58c2 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    58bc:	2301      	movs	r3, #1
    58be:	9303      	str	r3, [sp, #12]
    58c0:	e003      	b.n	58ca <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    58c2:	9801      	ldr	r0, [sp, #4]
    58c4:	f000 fa1e 	bl	5d04 <Power_Ip_SMC_ModeConfig>
    58c8:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    58ca:	9b03      	ldr	r3, [sp, #12]
    58cc:	2b01      	cmp	r3, #1
    58ce:	d103      	bne.n	58d8 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    58d0:	21ff      	movs	r1, #255	; 0xff
    58d2:	2003      	movs	r0, #3
    58d4:	f000 f8f4 	bl	5ac0 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    58d8:	bf00      	nop
    58da:	b005      	add	sp, #20
    58dc:	f85d fb04 	ldr.w	pc, [sp], #4

000058e0 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    58e0:	b084      	sub	sp, #16
    58e2:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    58e4:	230c      	movs	r3, #12
    58e6:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    58e8:	4a08      	ldr	r2, [pc, #32]	; (590c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    58ea:	9b01      	ldr	r3, [sp, #4]
    58ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58f0:	2b0e      	cmp	r3, #14
    58f2:	d805      	bhi.n	5900 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    58f4:	4a05      	ldr	r2, [pc, #20]	; (590c <Power_Ip_ConvertIntergeToResetType+0x2c>)
    58f6:	9b01      	ldr	r3, [sp, #4]
    58f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58fc:	9303      	str	r3, [sp, #12]
    58fe:	e001      	b.n	5904 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5900:	230c      	movs	r3, #12
    5902:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5904:	9b03      	ldr	r3, [sp, #12]
}
    5906:	4618      	mov	r0, r3
    5908:	b004      	add	sp, #16
    590a:	4770      	bx	lr
    590c:	0000ad00 	.word	0x0000ad00

00005910 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5910:	b500      	push	{lr}
    5912:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5914:	f000 f940 	bl	5b98 <Power_Ip_RCM_GetResetReason>
    5918:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    591a:	9801      	ldr	r0, [sp, #4]
    591c:	f7ff ffe0 	bl	58e0 <Power_Ip_ConvertIntergeToResetType>
    5920:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5922:	9b00      	ldr	r3, [sp, #0]
}
    5924:	4618      	mov	r0, r3
    5926:	b003      	add	sp, #12
    5928:	f85d fb04 	ldr.w	pc, [sp], #4

0000592c <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    592c:	b500      	push	{lr}
    592e:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5930:	f000 f98a 	bl	5c48 <Power_Ip_RCM_GetResetRawValue>
    5934:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5936:	9b01      	ldr	r3, [sp, #4]
}
    5938:	4618      	mov	r0, r3
    593a:	b003      	add	sp, #12
    593c:	f85d fb04 	ldr.w	pc, [sp], #4

00005940 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5940:	b500      	push	{lr}
    5942:	b083      	sub	sp, #12
    5944:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5946:	9b01      	ldr	r3, [sp, #4]
    5948:	681b      	ldr	r3, [r3, #0]
    594a:	4618      	mov	r0, r3
    594c:	f000 f90e 	bl	5b6c <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5950:	9b01      	ldr	r3, [sp, #4]
    5952:	685b      	ldr	r3, [r3, #4]
    5954:	4618      	mov	r0, r3
    5956:	f000 f86d 	bl	5a34 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    595a:	9b01      	ldr	r3, [sp, #4]
    595c:	689b      	ldr	r3, [r3, #8]
    595e:	4618      	mov	r0, r3
    5960:	f000 f990 	bl	5c84 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5964:	bf00      	nop
    5966:	b003      	add	sp, #12
    5968:	f85d fb04 	ldr.w	pc, [sp], #4

0000596c <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    596c:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    596e:	f000 f811 	bl	5994 <Power_Ip_CM4_DisableSleepOnExit>
}
    5972:	bf00      	nop
    5974:	bd08      	pop	{r3, pc}

00005976 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5976:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5978:	f000 f820 	bl	59bc <Power_Ip_CM4_EnableSleepOnExit>
}
    597c:	bf00      	nop
    597e:	bd08      	pop	{r3, pc}

00005980 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5980:	b082      	sub	sp, #8
    5982:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5984:	4a02      	ldr	r2, [pc, #8]	; (5990 <Power_Ip_InstallNotificationsCallback+0x10>)
    5986:	9b01      	ldr	r3, [sp, #4]
    5988:	6013      	str	r3, [r2, #0]
}
    598a:	bf00      	nop
    598c:	b002      	add	sp, #8
    598e:	4770      	bx	lr
    5990:	1fff8b1c 	.word	0x1fff8b1c

00005994 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5994:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5996:	2300      	movs	r3, #0
    5998:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    599a:	4b07      	ldr	r3, [pc, #28]	; (59b8 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    599c:	681b      	ldr	r3, [r3, #0]
    599e:	685b      	ldr	r3, [r3, #4]
    59a0:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    59a2:	9b01      	ldr	r3, [sp, #4]
    59a4:	f023 0302 	bic.w	r3, r3, #2
    59a8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59aa:	4b03      	ldr	r3, [pc, #12]	; (59b8 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    59ac:	681b      	ldr	r3, [r3, #0]
    59ae:	9a01      	ldr	r2, [sp, #4]
    59b0:	605a      	str	r2, [r3, #4]
}
    59b2:	bf00      	nop
    59b4:	b002      	add	sp, #8
    59b6:	4770      	bx	lr
    59b8:	1fff8b20 	.word	0x1fff8b20

000059bc <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    59bc:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59be:	2300      	movs	r3, #0
    59c0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59c2:	4b07      	ldr	r3, [pc, #28]	; (59e0 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    59c4:	681b      	ldr	r3, [r3, #0]
    59c6:	685b      	ldr	r3, [r3, #4]
    59c8:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    59ca:	9b01      	ldr	r3, [sp, #4]
    59cc:	f043 0302 	orr.w	r3, r3, #2
    59d0:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59d2:	4b03      	ldr	r3, [pc, #12]	; (59e0 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    59d4:	681b      	ldr	r3, [r3, #0]
    59d6:	9a01      	ldr	r2, [sp, #4]
    59d8:	605a      	str	r2, [r3, #4]
}
    59da:	bf00      	nop
    59dc:	b002      	add	sp, #8
    59de:	4770      	bx	lr
    59e0:	1fff8b20 	.word	0x1fff8b20

000059e4 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    59e4:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59e6:	2300      	movs	r3, #0
    59e8:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59ea:	4b07      	ldr	r3, [pc, #28]	; (5a08 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    59ec:	681b      	ldr	r3, [r3, #0]
    59ee:	685b      	ldr	r3, [r3, #4]
    59f0:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    59f2:	9b01      	ldr	r3, [sp, #4]
    59f4:	f043 0304 	orr.w	r3, r3, #4
    59f8:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59fa:	4b03      	ldr	r3, [pc, #12]	; (5a08 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    59fc:	681b      	ldr	r3, [r3, #0]
    59fe:	9a01      	ldr	r2, [sp, #4]
    5a00:	605a      	str	r2, [r3, #4]
}
    5a02:	bf00      	nop
    5a04:	b002      	add	sp, #8
    5a06:	4770      	bx	lr
    5a08:	1fff8b20 	.word	0x1fff8b20

00005a0c <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5a0c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5a0e:	2300      	movs	r3, #0
    5a10:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5a12:	4b07      	ldr	r3, [pc, #28]	; (5a30 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a14:	681b      	ldr	r3, [r3, #0]
    5a16:	685b      	ldr	r3, [r3, #4]
    5a18:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5a1a:	9b01      	ldr	r3, [sp, #4]
    5a1c:	f023 0304 	bic.w	r3, r3, #4
    5a20:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a22:	4b03      	ldr	r3, [pc, #12]	; (5a30 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a24:	681b      	ldr	r3, [r3, #0]
    5a26:	9a01      	ldr	r2, [sp, #4]
    5a28:	605a      	str	r2, [r3, #4]
}
    5a2a:	bf00      	nop
    5a2c:	b002      	add	sp, #8
    5a2e:	4770      	bx	lr
    5a30:	1fff8b20 	.word	0x1fff8b20

00005a34 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5a34:	b084      	sub	sp, #16
    5a36:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5a38:	4b20      	ldr	r3, [pc, #128]	; (5abc <Power_Ip_PMC_PowerInit+0x88>)
    5a3a:	781b      	ldrb	r3, [r3, #0]
    5a3c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5a40:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a44:	f003 030f 	and.w	r3, r3, #15
    5a48:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5a4c:	9b01      	ldr	r3, [sp, #4]
    5a4e:	781a      	ldrb	r2, [r3, #0]
    5a50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a54:	4313      	orrs	r3, r2
    5a56:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5a5a:	4a18      	ldr	r2, [pc, #96]	; (5abc <Power_Ip_PMC_PowerInit+0x88>)
    5a5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a60:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5a62:	4b16      	ldr	r3, [pc, #88]	; (5abc <Power_Ip_PMC_PowerInit+0x88>)
    5a64:	785b      	ldrb	r3, [r3, #1]
    5a66:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5a6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a6e:	f003 031f 	and.w	r3, r3, #31
    5a72:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5a76:	9b01      	ldr	r3, [sp, #4]
    5a78:	785a      	ldrb	r2, [r3, #1]
    5a7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a7e:	4313      	orrs	r3, r2
    5a80:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5a84:	4a0d      	ldr	r2, [pc, #52]	; (5abc <Power_Ip_PMC_PowerInit+0x88>)
    5a86:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a8a:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5a8c:	4b0b      	ldr	r3, [pc, #44]	; (5abc <Power_Ip_PMC_PowerInit+0x88>)
    5a8e:	789b      	ldrb	r3, [r3, #2]
    5a90:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5a94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5a9c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5aa0:	9b01      	ldr	r3, [sp, #4]
    5aa2:	789a      	ldrb	r2, [r3, #2]
    5aa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5aa8:	4313      	orrs	r3, r2
    5aaa:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5aae:	4a03      	ldr	r2, [pc, #12]	; (5abc <Power_Ip_PMC_PowerInit+0x88>)
    5ab0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ab4:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5ab6:	bf00      	nop
    5ab8:	b004      	add	sp, #16
    5aba:	4770      	bx	lr
    5abc:	4007d000 	.word	0x4007d000

00005ac0 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5ac0:	b500      	push	{lr}
    5ac2:	b083      	sub	sp, #12
    5ac4:	9001      	str	r0, [sp, #4]
    5ac6:	460b      	mov	r3, r1
    5ac8:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5acc:	4b05      	ldr	r3, [pc, #20]	; (5ae4 <Power_Ip_ReportPowerErrors+0x24>)
    5ace:	681b      	ldr	r3, [r3, #0]
    5ad0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5ad4:	4611      	mov	r1, r2
    5ad6:	9801      	ldr	r0, [sp, #4]
    5ad8:	4798      	blx	r3
}
    5ada:	bf00      	nop
    5adc:	b003      	add	sp, #12
    5ade:	f85d fb04 	ldr.w	pc, [sp], #4
    5ae2:	bf00      	nop
    5ae4:	1fff8b1c 	.word	0x1fff8b1c

00005ae8 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5ae8:	b082      	sub	sp, #8
    5aea:	9001      	str	r0, [sp, #4]
    5aec:	460b      	mov	r3, r1
    5aee:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5af2:	bf00      	nop
    5af4:	b002      	add	sp, #8
    5af6:	4770      	bx	lr

00005af8 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5af8:	b500      	push	{lr}
    5afa:	b085      	sub	sp, #20
    5afc:	9003      	str	r0, [sp, #12]
    5afe:	9102      	str	r1, [sp, #8]
    5b00:	9201      	str	r2, [sp, #4]
    5b02:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5b04:	2000      	movs	r0, #0
    5b06:	f7fc f83d 	bl	1b84 <OsIf_GetCounter>
    5b0a:	4602      	mov	r2, r0
    5b0c:	9b03      	ldr	r3, [sp, #12]
    5b0e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5b10:	9b02      	ldr	r3, [sp, #8]
    5b12:	2200      	movs	r2, #0
    5b14:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5b16:	2100      	movs	r1, #0
    5b18:	9800      	ldr	r0, [sp, #0]
    5b1a:	f7fc f87f 	bl	1c1c <OsIf_MicrosToTicks>
    5b1e:	4602      	mov	r2, r0
    5b20:	9b01      	ldr	r3, [sp, #4]
    5b22:	601a      	str	r2, [r3, #0]
}
    5b24:	bf00      	nop
    5b26:	b005      	add	sp, #20
    5b28:	f85d fb04 	ldr.w	pc, [sp], #4

00005b2c <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5b2c:	b500      	push	{lr}
    5b2e:	b087      	sub	sp, #28
    5b30:	9003      	str	r0, [sp, #12]
    5b32:	9102      	str	r1, [sp, #8]
    5b34:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5b36:	2300      	movs	r3, #0
    5b38:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5b3c:	2100      	movs	r1, #0
    5b3e:	9803      	ldr	r0, [sp, #12]
    5b40:	f7fc f839 	bl	1bb6 <OsIf_GetElapsed>
    5b44:	4602      	mov	r2, r0
    5b46:	9b02      	ldr	r3, [sp, #8]
    5b48:	681b      	ldr	r3, [r3, #0]
    5b4a:	441a      	add	r2, r3
    5b4c:	9b02      	ldr	r3, [sp, #8]
    5b4e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5b50:	9b02      	ldr	r3, [sp, #8]
    5b52:	681b      	ldr	r3, [r3, #0]
    5b54:	9a01      	ldr	r2, [sp, #4]
    5b56:	429a      	cmp	r2, r3
    5b58:	d802      	bhi.n	5b60 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5b5a:	2301      	movs	r3, #1
    5b5c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5b60:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5b64:	4618      	mov	r0, r3
    5b66:	b007      	add	sp, #28
    5b68:	f85d fb04 	ldr.w	pc, [sp], #4

00005b6c <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5b6c:	b082      	sub	sp, #8
    5b6e:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5b70:	9b01      	ldr	r3, [sp, #4]
    5b72:	681a      	ldr	r2, [r3, #0]
    5b74:	4907      	ldr	r1, [pc, #28]	; (5b94 <Power_Ip_RCM_ResetInit+0x28>)
    5b76:	f641 7307 	movw	r3, #7943	; 0x1f07
    5b7a:	4013      	ands	r3, r2
    5b7c:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5b7e:	9b01      	ldr	r3, [sp, #4]
    5b80:	685a      	ldr	r2, [r3, #4]
    5b82:	4904      	ldr	r1, [pc, #16]	; (5b94 <Power_Ip_RCM_ResetInit+0x28>)
    5b84:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5b88:	4013      	ands	r3, r2
    5b8a:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5b8c:	bf00      	nop
    5b8e:	b002      	add	sp, #8
    5b90:	4770      	bx	lr
    5b92:	bf00      	nop
    5b94:	4007f000 	.word	0x4007f000

00005b98 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5b98:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5b9a:	230c      	movs	r3, #12
    5b9c:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5b9e:	2300      	movs	r3, #0
    5ba0:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5ba2:	2300      	movs	r3, #0
    5ba4:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5ba6:	2300      	movs	r3, #0
    5ba8:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5baa:	4b25      	ldr	r3, [pc, #148]	; (5c40 <Power_Ip_RCM_GetResetReason+0xa8>)
    5bac:	699a      	ldr	r2, [r3, #24]
    5bae:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bb2:	4013      	ands	r3, r2
    5bb4:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5bb6:	9b03      	ldr	r3, [sp, #12]
    5bb8:	2b00      	cmp	r3, #0
    5bba:	d008      	beq.n	5bce <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5bbc:	4920      	ldr	r1, [pc, #128]	; (5c40 <Power_Ip_RCM_GetResetReason+0xa8>)
    5bbe:	9a03      	ldr	r2, [sp, #12]
    5bc0:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bc4:	4013      	ands	r3, r2
    5bc6:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5bc8:	4a1e      	ldr	r2, [pc, #120]	; (5c44 <Power_Ip_RCM_GetResetReason+0xac>)
    5bca:	9b03      	ldr	r3, [sp, #12]
    5bcc:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5bce:	4b1d      	ldr	r3, [pc, #116]	; (5c44 <Power_Ip_RCM_GetResetReason+0xac>)
    5bd0:	681b      	ldr	r3, [r3, #0]
    5bd2:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5bd4:	9a02      	ldr	r2, [sp, #8]
    5bd6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bda:	4013      	ands	r3, r2
    5bdc:	2b82      	cmp	r3, #130	; 0x82
    5bde:	d102      	bne.n	5be6 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5be0:	2305      	movs	r3, #5
    5be2:	9307      	str	r3, [sp, #28]
    5be4:	e027      	b.n	5c36 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5be6:	2300      	movs	r3, #0
    5be8:	9306      	str	r3, [sp, #24]
    5bea:	e021      	b.n	5c30 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5bec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5bf0:	9b06      	ldr	r3, [sp, #24]
    5bf2:	fa22 f303 	lsr.w	r3, r2, r3
    5bf6:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5bf8:	9a01      	ldr	r2, [sp, #4]
    5bfa:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5bfe:	4013      	ands	r3, r2
    5c00:	2b00      	cmp	r3, #0
    5c02:	d012      	beq.n	5c2a <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5c04:	9a01      	ldr	r2, [sp, #4]
    5c06:	9b02      	ldr	r3, [sp, #8]
    5c08:	4013      	ands	r3, r2
    5c0a:	2b00      	cmp	r3, #0
    5c0c:	d00a      	beq.n	5c24 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5c0e:	9b05      	ldr	r3, [sp, #20]
    5c10:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5c12:	9b04      	ldr	r3, [sp, #16]
    5c14:	3301      	adds	r3, #1
    5c16:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5c18:	9b04      	ldr	r3, [sp, #16]
    5c1a:	2b01      	cmp	r3, #1
    5c1c:	d902      	bls.n	5c24 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5c1e:	230d      	movs	r3, #13
    5c20:	9307      	str	r3, [sp, #28]
                        break;
    5c22:	e008      	b.n	5c36 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5c24:	9b05      	ldr	r3, [sp, #20]
    5c26:	3301      	adds	r3, #1
    5c28:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5c2a:	9b06      	ldr	r3, [sp, #24]
    5c2c:	3301      	adds	r3, #1
    5c2e:	9306      	str	r3, [sp, #24]
    5c30:	9b06      	ldr	r3, [sp, #24]
    5c32:	2b1f      	cmp	r3, #31
    5c34:	d9da      	bls.n	5bec <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5c36:	9b07      	ldr	r3, [sp, #28]
}
    5c38:	4618      	mov	r0, r3
    5c3a:	b008      	add	sp, #32
    5c3c:	4770      	bx	lr
    5c3e:	bf00      	nop
    5c40:	4007f000 	.word	0x4007f000
    5c44:	1fff8cf0 	.word	0x1fff8cf0

00005c48 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5c48:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5c4a:	4b0c      	ldr	r3, [pc, #48]	; (5c7c <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c4c:	699a      	ldr	r2, [r3, #24]
    5c4e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c52:	4013      	ands	r3, r2
    5c54:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5c56:	9b01      	ldr	r3, [sp, #4]
    5c58:	2b00      	cmp	r3, #0
    5c5a:	d008      	beq.n	5c6e <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5c5c:	4907      	ldr	r1, [pc, #28]	; (5c7c <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c5e:	9a01      	ldr	r2, [sp, #4]
    5c60:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c64:	4013      	ands	r3, r2
    5c66:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5c68:	4a05      	ldr	r2, [pc, #20]	; (5c80 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c6a:	9b01      	ldr	r3, [sp, #4]
    5c6c:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5c6e:	4b04      	ldr	r3, [pc, #16]	; (5c80 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5c70:	681b      	ldr	r3, [r3, #0]
    5c72:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5c74:	9b00      	ldr	r3, [sp, #0]
}
    5c76:	4618      	mov	r0, r3
    5c78:	b002      	add	sp, #8
    5c7a:	4770      	bx	lr
    5c7c:	4007f000 	.word	0x4007f000
    5c80:	1fff8cf0 	.word	0x1fff8cf0

00005c84 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5c84:	b082      	sub	sp, #8
    5c86:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5c88:	9b01      	ldr	r3, [sp, #4]
    5c8a:	681b      	ldr	r3, [r3, #0]
    5c8c:	4a03      	ldr	r2, [pc, #12]	; (5c9c <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5c8e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5c92:	6093      	str	r3, [r2, #8]
}
    5c94:	bf00      	nop
    5c96:	b002      	add	sp, #8
    5c98:	4770      	bx	lr
    5c9a:	bf00      	nop
    5c9c:	4007e000 	.word	0x4007e000

00005ca0 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5ca0:	b084      	sub	sp, #16
    5ca2:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5ca4:	2301      	movs	r3, #1
    5ca6:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5ca8:	4b15      	ldr	r3, [pc, #84]	; (5d00 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5caa:	695b      	ldr	r3, [r3, #20]
    5cac:	b2db      	uxtb	r3, r3
    5cae:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5cb0:	9b01      	ldr	r3, [sp, #4]
    5cb2:	2b02      	cmp	r3, #2
    5cb4:	d012      	beq.n	5cdc <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5cb6:	9b01      	ldr	r3, [sp, #4]
    5cb8:	2b02      	cmp	r3, #2
    5cba:	d818      	bhi.n	5cee <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5cbc:	9b01      	ldr	r3, [sp, #4]
    5cbe:	2b00      	cmp	r3, #0
    5cc0:	d003      	beq.n	5cca <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5cc2:	9b01      	ldr	r3, [sp, #4]
    5cc4:	2b01      	cmp	r3, #1
    5cc6:	d003      	beq.n	5cd0 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5cc8:	e011      	b.n	5cee <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5cca:	2300      	movs	r3, #0
    5ccc:	9303      	str	r3, [sp, #12]
            break;
    5cce:	e013      	b.n	5cf8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5cd0:	9b02      	ldr	r3, [sp, #8]
    5cd2:	2b01      	cmp	r3, #1
    5cd4:	d10d      	bne.n	5cf2 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5cd6:	2300      	movs	r3, #0
    5cd8:	9303      	str	r3, [sp, #12]
            break;
    5cda:	e00a      	b.n	5cf2 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5cdc:	9b02      	ldr	r3, [sp, #8]
    5cde:	2b01      	cmp	r3, #1
    5ce0:	d002      	beq.n	5ce8 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5ce2:	9b02      	ldr	r3, [sp, #8]
    5ce4:	2b10      	cmp	r3, #16
    5ce6:	d106      	bne.n	5cf6 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5ce8:	2300      	movs	r3, #0
    5cea:	9303      	str	r3, [sp, #12]
            break;
    5cec:	e003      	b.n	5cf6 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5cee:	bf00      	nop
    5cf0:	e002      	b.n	5cf8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5cf2:	bf00      	nop
    5cf4:	e000      	b.n	5cf8 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5cf6:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5cf8:	9b03      	ldr	r3, [sp, #12]
}
    5cfa:	4618      	mov	r0, r3
    5cfc:	b004      	add	sp, #16
    5cfe:	4770      	bx	lr
    5d00:	4007e000 	.word	0x4007e000

00005d04 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5d04:	b500      	push	{lr}
    5d06:	b08b      	sub	sp, #44	; 0x2c
    5d08:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5d0a:	2300      	movs	r3, #0
    5d0c:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5d0e:	2300      	movs	r3, #0
    5d10:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5d12:	2300      	movs	r3, #0
    5d14:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5d18:	9b01      	ldr	r3, [sp, #4]
    5d1a:	685b      	ldr	r3, [r3, #4]
    5d1c:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5d1e:	9b08      	ldr	r3, [sp, #32]
    5d20:	2b02      	cmp	r3, #2
    5d22:	d076      	beq.n	5e12 <Power_Ip_SMC_ModeConfig+0x10e>
    5d24:	9b08      	ldr	r3, [sp, #32]
    5d26:	2b02      	cmp	r3, #2
    5d28:	f200 80ab 	bhi.w	5e82 <Power_Ip_SMC_ModeConfig+0x17e>
    5d2c:	9b08      	ldr	r3, [sp, #32]
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d003      	beq.n	5d3a <Power_Ip_SMC_ModeConfig+0x36>
    5d32:	9b08      	ldr	r3, [sp, #32]
    5d34:	2b01      	cmp	r3, #1
    5d36:	d034      	beq.n	5da2 <Power_Ip_SMC_ModeConfig+0x9e>
    5d38:	e0a3      	b.n	5e82 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5d3a:	4b58      	ldr	r3, [pc, #352]	; (5e9c <Power_Ip_SMC_ModeConfig+0x198>)
    5d3c:	68db      	ldr	r3, [r3, #12]
    5d3e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d40:	9b06      	ldr	r3, [sp, #24]
    5d42:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d46:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5d48:	4a54      	ldr	r2, [pc, #336]	; (5e9c <Power_Ip_SMC_ModeConfig+0x198>)
    5d4a:	9b06      	ldr	r3, [sp, #24]
    5d4c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d4e:	aa02      	add	r2, sp, #8
    5d50:	a903      	add	r1, sp, #12
    5d52:	a804      	add	r0, sp, #16
    5d54:	f24c 3350 	movw	r3, #50000	; 0xc350
    5d58:	f7ff fece 	bl	5af8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5d5c:	9a02      	ldr	r2, [sp, #8]
    5d5e:	a903      	add	r1, sp, #12
    5d60:	ab04      	add	r3, sp, #16
    5d62:	4618      	mov	r0, r3
    5d64:	f7ff fee2 	bl	5b2c <Power_Ip_TimeoutExpired>
    5d68:	4603      	mov	r3, r0
    5d6a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5d6e:	4b4b      	ldr	r3, [pc, #300]	; (5e9c <Power_Ip_SMC_ModeConfig+0x198>)
    5d70:	695b      	ldr	r3, [r3, #20]
    5d72:	f003 0301 	and.w	r3, r3, #1
    5d76:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5d78:	9b05      	ldr	r3, [sp, #20]
    5d7a:	2b01      	cmp	r3, #1
    5d7c:	d006      	beq.n	5d8c <Power_Ip_SMC_ModeConfig+0x88>
    5d7e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d82:	f083 0301 	eor.w	r3, r3, #1
    5d86:	b2db      	uxtb	r3, r3
    5d88:	2b00      	cmp	r3, #0
    5d8a:	d1e7      	bne.n	5d5c <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5d8c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5d90:	2b00      	cmp	r3, #0
    5d92:	d079      	beq.n	5e88 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5d94:	2301      	movs	r3, #1
    5d96:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5d98:	21ff      	movs	r1, #255	; 0xff
    5d9a:	2000      	movs	r0, #0
    5d9c:	f7ff fe90 	bl	5ac0 <Power_Ip_ReportPowerErrors>
            }

            break;
    5da0:	e072      	b.n	5e88 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5da2:	4b3e      	ldr	r3, [pc, #248]	; (5e9c <Power_Ip_SMC_ModeConfig+0x198>)
    5da4:	68db      	ldr	r3, [r3, #12]
    5da6:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5da8:	9b06      	ldr	r3, [sp, #24]
    5daa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5dae:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5db0:	9b06      	ldr	r3, [sp, #24]
    5db2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5db6:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5db8:	4a38      	ldr	r2, [pc, #224]	; (5e9c <Power_Ip_SMC_ModeConfig+0x198>)
    5dba:	9b06      	ldr	r3, [sp, #24]
    5dbc:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5dbe:	aa02      	add	r2, sp, #8
    5dc0:	a903      	add	r1, sp, #12
    5dc2:	a804      	add	r0, sp, #16
    5dc4:	f24c 3350 	movw	r3, #50000	; 0xc350
    5dc8:	f7ff fe96 	bl	5af8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5dcc:	9a02      	ldr	r2, [sp, #8]
    5dce:	a903      	add	r1, sp, #12
    5dd0:	ab04      	add	r3, sp, #16
    5dd2:	4618      	mov	r0, r3
    5dd4:	f7ff feaa 	bl	5b2c <Power_Ip_TimeoutExpired>
    5dd8:	4603      	mov	r3, r0
    5dda:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5dde:	4b2f      	ldr	r3, [pc, #188]	; (5e9c <Power_Ip_SMC_ModeConfig+0x198>)
    5de0:	695b      	ldr	r3, [r3, #20]
    5de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5de6:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5de8:	9b05      	ldr	r3, [sp, #20]
    5dea:	2b80      	cmp	r3, #128	; 0x80
    5dec:	d006      	beq.n	5dfc <Power_Ip_SMC_ModeConfig+0xf8>
    5dee:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5df2:	f083 0301 	eor.w	r3, r3, #1
    5df6:	b2db      	uxtb	r3, r3
    5df8:	2b00      	cmp	r3, #0
    5dfa:	d1e7      	bne.n	5dcc <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5dfc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e00:	2b00      	cmp	r3, #0
    5e02:	d043      	beq.n	5e8c <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e04:	2301      	movs	r3, #1
    5e06:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e08:	21ff      	movs	r1, #255	; 0xff
    5e0a:	2000      	movs	r0, #0
    5e0c:	f7ff fe58 	bl	5ac0 <Power_Ip_ReportPowerErrors>
            }

            break;
    5e10:	e03c      	b.n	5e8c <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5e12:	4b22      	ldr	r3, [pc, #136]	; (5e9c <Power_Ip_SMC_ModeConfig+0x198>)
    5e14:	68db      	ldr	r3, [r3, #12]
    5e16:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5e18:	9b06      	ldr	r3, [sp, #24]
    5e1a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5e1e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5e20:	9b06      	ldr	r3, [sp, #24]
    5e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5e26:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5e28:	4a1c      	ldr	r2, [pc, #112]	; (5e9c <Power_Ip_SMC_ModeConfig+0x198>)
    5e2a:	9b06      	ldr	r3, [sp, #24]
    5e2c:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5e2e:	aa02      	add	r2, sp, #8
    5e30:	a903      	add	r1, sp, #12
    5e32:	a804      	add	r0, sp, #16
    5e34:	f24c 3350 	movw	r3, #50000	; 0xc350
    5e38:	f7ff fe5e 	bl	5af8 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5e3c:	9a02      	ldr	r2, [sp, #8]
    5e3e:	a903      	add	r1, sp, #12
    5e40:	ab04      	add	r3, sp, #16
    5e42:	4618      	mov	r0, r3
    5e44:	f7ff fe72 	bl	5b2c <Power_Ip_TimeoutExpired>
    5e48:	4603      	mov	r3, r0
    5e4a:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5e4e:	4b13      	ldr	r3, [pc, #76]	; (5e9c <Power_Ip_SMC_ModeConfig+0x198>)
    5e50:	695b      	ldr	r3, [r3, #20]
    5e52:	f003 0304 	and.w	r3, r3, #4
    5e56:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5e58:	9b05      	ldr	r3, [sp, #20]
    5e5a:	2b04      	cmp	r3, #4
    5e5c:	d006      	beq.n	5e6c <Power_Ip_SMC_ModeConfig+0x168>
    5e5e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e62:	f083 0301 	eor.w	r3, r3, #1
    5e66:	b2db      	uxtb	r3, r3
    5e68:	2b00      	cmp	r3, #0
    5e6a:	d1e7      	bne.n	5e3c <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5e6c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e70:	2b00      	cmp	r3, #0
    5e72:	d00d      	beq.n	5e90 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e74:	2301      	movs	r3, #1
    5e76:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e78:	21ff      	movs	r1, #255	; 0xff
    5e7a:	2000      	movs	r0, #0
    5e7c:	f7ff fe20 	bl	5ac0 <Power_Ip_ReportPowerErrors>
            }

            break;
    5e80:	e006      	b.n	5e90 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e82:	2301      	movs	r3, #1
    5e84:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5e86:	e004      	b.n	5e92 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e88:	bf00      	nop
    5e8a:	e002      	b.n	5e92 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e8c:	bf00      	nop
    5e8e:	e000      	b.n	5e92 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5e90:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5e94:	4618      	mov	r0, r3
    5e96:	b00b      	add	sp, #44	; 0x2c
    5e98:	f85d fb04 	ldr.w	pc, [sp], #4
    5e9c:	4007e000 	.word	0x4007e000

00005ea0 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5ea0:	b500      	push	{lr}
    5ea2:	b085      	sub	sp, #20
    5ea4:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5ea6:	9b01      	ldr	r3, [sp, #4]
    5ea8:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5eaa:	9803      	ldr	r0, [sp, #12]
    5eac:	f000 fbc8 	bl	6640 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5eb0:	4a03      	ldr	r2, [pc, #12]	; (5ec0 <Port_Init+0x20>)
    5eb2:	9b03      	ldr	r3, [sp, #12]
    5eb4:	6013      	str	r3, [r2, #0]
        }
    }
}
    5eb6:	bf00      	nop
    5eb8:	b005      	add	sp, #20
    5eba:	f85d fb04 	ldr.w	pc, [sp], #4
    5ebe:	bf00      	nop
    5ec0:	1fff8cf4 	.word	0x1fff8cf4

00005ec4 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5ec4:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5ec6:	4b03      	ldr	r3, [pc, #12]	; (5ed4 <Port_RefreshPortDirection+0x10>)
    5ec8:	681b      	ldr	r3, [r3, #0]
    5eca:	4618      	mov	r0, r3
    5ecc:	f000 fc10 	bl	66f0 <Port_Ipw_RefreshPortDirection>
    }
}
    5ed0:	bf00      	nop
    5ed2:	bd08      	pop	{r3, pc}
    5ed4:	1fff8cf4 	.word	0x1fff8cf4

00005ed8 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5ed8:	b086      	sub	sp, #24
    5eda:	9003      	str	r0, [sp, #12]
    5edc:	9102      	str	r1, [sp, #8]
    5ede:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5ee0:	23ff      	movs	r3, #255	; 0xff
    5ee2:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5ee4:	9b03      	ldr	r3, [sp, #12]
    5ee6:	4a39      	ldr	r2, [pc, #228]	; (5fcc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5ee8:	4293      	cmp	r3, r2
    5eea:	d151      	bne.n	5f90 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5eec:	9b02      	ldr	r3, [sp, #8]
    5eee:	2b10      	cmp	r3, #16
    5ef0:	d867      	bhi.n	5fc2 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5ef2:	a201      	add	r2, pc, #4	; (adr r2, 5ef8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5ef8:	00005f3d 	.word	0x00005f3d
    5efc:	00005f4b 	.word	0x00005f4b
    5f00:	00005fc3 	.word	0x00005fc3
    5f04:	00005fc3 	.word	0x00005fc3
    5f08:	00005fc3 	.word	0x00005fc3
    5f0c:	00005fc3 	.word	0x00005fc3
    5f10:	00005fc3 	.word	0x00005fc3
    5f14:	00005fc3 	.word	0x00005fc3
    5f18:	00005fc3 	.word	0x00005fc3
    5f1c:	00005fc3 	.word	0x00005fc3
    5f20:	00005fc3 	.word	0x00005fc3
    5f24:	00005fc3 	.word	0x00005fc3
    5f28:	00005fc3 	.word	0x00005fc3
    5f2c:	00005f59 	.word	0x00005f59
    5f30:	00005f67 	.word	0x00005f67
    5f34:	00005f75 	.word	0x00005f75
    5f38:	00005f83 	.word	0x00005f83
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5f3c:	2301      	movs	r3, #1
    5f3e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f40:	9a05      	ldr	r2, [sp, #20]
    5f42:	9b01      	ldr	r3, [sp, #4]
    5f44:	4313      	orrs	r3, r2
    5f46:	9305      	str	r3, [sp, #20]
                break;
    5f48:	e03c      	b.n	5fc4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5f4a:	2302      	movs	r3, #2
    5f4c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f4e:	9a05      	ldr	r2, [sp, #20]
    5f50:	9b01      	ldr	r3, [sp, #4]
    5f52:	4313      	orrs	r3, r2
    5f54:	9305      	str	r3, [sp, #20]
                break;
    5f56:	e035      	b.n	5fc4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5f58:	2304      	movs	r3, #4
    5f5a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f5c:	9a05      	ldr	r2, [sp, #20]
    5f5e:	9b01      	ldr	r3, [sp, #4]
    5f60:	4313      	orrs	r3, r2
    5f62:	9305      	str	r3, [sp, #20]
                break;
    5f64:	e02e      	b.n	5fc4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5f66:	2308      	movs	r3, #8
    5f68:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f6a:	9a05      	ldr	r2, [sp, #20]
    5f6c:	9b01      	ldr	r3, [sp, #4]
    5f6e:	4313      	orrs	r3, r2
    5f70:	9305      	str	r3, [sp, #20]
                break;
    5f72:	e027      	b.n	5fc4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5f74:	230e      	movs	r3, #14
    5f76:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f78:	9a05      	ldr	r2, [sp, #20]
    5f7a:	9b01      	ldr	r3, [sp, #4]
    5f7c:	4013      	ands	r3, r2
    5f7e:	9305      	str	r3, [sp, #20]
                break;
    5f80:	e020      	b.n	5fc4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5f82:	230d      	movs	r3, #13
    5f84:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5f86:	9a05      	ldr	r2, [sp, #20]
    5f88:	9b01      	ldr	r3, [sp, #4]
    5f8a:	4013      	ands	r3, r2
    5f8c:	9305      	str	r3, [sp, #20]
                break;
    5f8e:	e019      	b.n	5fc4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5f90:	9b03      	ldr	r3, [sp, #12]
    5f92:	4a0f      	ldr	r2, [pc, #60]	; (5fd0 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5f94:	4293      	cmp	r3, r2
    5f96:	d115      	bne.n	5fc4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5f98:	9b02      	ldr	r3, [sp, #8]
    5f9a:	2b00      	cmp	r3, #0
    5f9c:	d003      	beq.n	5fa6 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5f9e:	9b02      	ldr	r3, [sp, #8]
    5fa0:	2b01      	cmp	r3, #1
    5fa2:	d007      	beq.n	5fb4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5fa4:	e00e      	b.n	5fc4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5fa6:	230b      	movs	r3, #11
    5fa8:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5faa:	9a05      	ldr	r2, [sp, #20]
    5fac:	9b01      	ldr	r3, [sp, #4]
    5fae:	4013      	ands	r3, r2
    5fb0:	9305      	str	r3, [sp, #20]
                break;
    5fb2:	e007      	b.n	5fc4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5fb4:	2307      	movs	r3, #7
    5fb6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fb8:	9a05      	ldr	r2, [sp, #20]
    5fba:	9b01      	ldr	r3, [sp, #4]
    5fbc:	4013      	ands	r3, r2
    5fbe:	9305      	str	r3, [sp, #20]
                break;
    5fc0:	e000      	b.n	5fc4 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5fc2:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5fc4:	9b05      	ldr	r3, [sp, #20]
}
    5fc6:	4618      	mov	r0, r3
    5fc8:	b006      	add	sp, #24
    5fca:	4770      	bx	lr
    5fcc:	4004a000 	.word	0x4004a000
    5fd0:	4004b000 	.word	0x4004b000

00005fd4 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5fd4:	b500      	push	{lr}
    5fd6:	b089      	sub	sp, #36	; 0x24
    5fd8:	9003      	str	r0, [sp, #12]
    5fda:	9102      	str	r1, [sp, #8]
    5fdc:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    5fde:	9b01      	ldr	r3, [sp, #4]
    5fe0:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    5fe2:	9b01      	ldr	r3, [sp, #4]
    5fe4:	2b08      	cmp	r3, #8
    5fe6:	d121      	bne.n	602c <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    5fe8:	4b13      	ldr	r3, [pc, #76]	; (6038 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    5fea:	685b      	ldr	r3, [r3, #4]
    5fec:	f003 030f 	and.w	r3, r3, #15
    5ff0:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    5ff2:	9a06      	ldr	r2, [sp, #24]
    5ff4:	9902      	ldr	r1, [sp, #8]
    5ff6:	9803      	ldr	r0, [sp, #12]
    5ff8:	f7ff ff6e 	bl	5ed8 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    5ffc:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    5ffe:	9b05      	ldr	r3, [sp, #20]
    6000:	2bff      	cmp	r3, #255	; 0xff
    6002:	d011      	beq.n	6028 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6004:	f002 fd38 	bl	8a78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6008:	4b0b      	ldr	r3, [pc, #44]	; (6038 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    600a:	685b      	ldr	r3, [r3, #4]
    600c:	4a0a      	ldr	r2, [pc, #40]	; (6038 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    600e:	f023 030f 	bic.w	r3, r3, #15
    6012:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6014:	4b08      	ldr	r3, [pc, #32]	; (6038 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6016:	685a      	ldr	r2, [r3, #4]
    6018:	9b05      	ldr	r3, [sp, #20]
    601a:	f003 030f 	and.w	r3, r3, #15
    601e:	4906      	ldr	r1, [pc, #24]	; (6038 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6020:	4313      	orrs	r3, r2
    6022:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6024:	f002 fd54 	bl	8ad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6028:	2300      	movs	r3, #0
    602a:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    602c:	9b07      	ldr	r3, [sp, #28]
}
    602e:	4618      	mov	r0, r3
    6030:	b009      	add	sp, #36	; 0x24
    6032:	f85d fb04 	ldr.w	pc, [sp], #4
    6036:	bf00      	nop
    6038:	40048000 	.word	0x40048000

0000603c <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    603c:	b500      	push	{lr}
    603e:	b087      	sub	sp, #28
    6040:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    6042:	2300      	movs	r3, #0
    6044:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6046:	2300      	movs	r3, #0
    6048:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    604a:	2300      	movs	r3, #0
    604c:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    604e:	9b01      	ldr	r3, [sp, #4]
    6050:	68db      	ldr	r3, [r3, #12]
    6052:	2b02      	cmp	r3, #2
    6054:	d00a      	beq.n	606c <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    6056:	9b05      	ldr	r3, [sp, #20]
    6058:	f043 0302 	orr.w	r3, r3, #2
    605c:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    605e:	9b01      	ldr	r3, [sp, #4]
    6060:	68db      	ldr	r3, [r3, #12]
    6062:	f003 0301 	and.w	r3, r3, #1
    6066:	9a05      	ldr	r2, [sp, #20]
    6068:	4313      	orrs	r3, r2
    606a:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    606c:	9b01      	ldr	r3, [sp, #4]
    606e:	699b      	ldr	r3, [r3, #24]
    6070:	019b      	lsls	r3, r3, #6
    6072:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6076:	9a05      	ldr	r2, [sp, #20]
    6078:	4313      	orrs	r3, r2
    607a:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    607c:	9b01      	ldr	r3, [sp, #4]
    607e:	6a1b      	ldr	r3, [r3, #32]
    6080:	03db      	lsls	r3, r3, #15
    6082:	b29b      	uxth	r3, r3
    6084:	9a05      	ldr	r2, [sp, #20]
    6086:	4313      	orrs	r3, r2
    6088:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    608a:	9b01      	ldr	r3, [sp, #4]
    608c:	7f1b      	ldrb	r3, [r3, #28]
    608e:	2b00      	cmp	r3, #0
    6090:	d001      	beq.n	6096 <Port_Ci_Port_Ip_PinInit+0x5a>
    6092:	2310      	movs	r3, #16
    6094:	e000      	b.n	6098 <Port_Ci_Port_Ip_PinInit+0x5c>
    6096:	2300      	movs	r3, #0
    6098:	9a05      	ldr	r2, [sp, #20]
    609a:	4313      	orrs	r3, r2
    609c:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    609e:	9b01      	ldr	r3, [sp, #4]
    60a0:	691b      	ldr	r3, [r3, #16]
    60a2:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    60a4:	9b01      	ldr	r3, [sp, #4]
    60a6:	6818      	ldr	r0, [r3, #0]
    60a8:	9b01      	ldr	r3, [sp, #4]
    60aa:	689b      	ldr	r3, [r3, #8]
    60ac:	9a04      	ldr	r2, [sp, #16]
    60ae:	4619      	mov	r1, r3
    60b0:	f7ff ff90 	bl	5fd4 <Port_Ci_Port_Ip_ConfigureInterleave>
    60b4:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    60b6:	9b03      	ldr	r3, [sp, #12]
    60b8:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    60ba:	9b04      	ldr	r3, [sp, #16]
    60bc:	021b      	lsls	r3, r3, #8
    60be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    60c2:	9a05      	ldr	r2, [sp, #20]
    60c4:	4313      	orrs	r3, r2
    60c6:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    60c8:	f002 fb3c 	bl	8744 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    60cc:	9b01      	ldr	r3, [sp, #4]
    60ce:	681b      	ldr	r3, [r3, #0]
    60d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    60d4:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    60d6:	9b01      	ldr	r3, [sp, #4]
    60d8:	689b      	ldr	r3, [r3, #8]
    60da:	2201      	movs	r2, #1
    60dc:	fa02 f303 	lsl.w	r3, r2, r3
    60e0:	43db      	mvns	r3, r3
    60e2:	9a02      	ldr	r2, [sp, #8]
    60e4:	4013      	ands	r3, r2
    60e6:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    60e8:	9b01      	ldr	r3, [sp, #4]
    60ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    60ee:	2b00      	cmp	r3, #0
    60f0:	d001      	beq.n	60f6 <Port_Ci_Port_Ip_PinInit+0xba>
    60f2:	2201      	movs	r2, #1
    60f4:	e000      	b.n	60f8 <Port_Ci_Port_Ip_PinInit+0xbc>
    60f6:	2200      	movs	r2, #0
    60f8:	9b01      	ldr	r3, [sp, #4]
    60fa:	689b      	ldr	r3, [r3, #8]
    60fc:	fa02 f303 	lsl.w	r3, r2, r3
    6100:	9a02      	ldr	r2, [sp, #8]
    6102:	4313      	orrs	r3, r2
    6104:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6106:	9b01      	ldr	r3, [sp, #4]
    6108:	681b      	ldr	r3, [r3, #0]
    610a:	9a02      	ldr	r2, [sp, #8]
    610c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6110:	f002 fb44 	bl	879c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6114:	9b04      	ldr	r3, [sp, #16]
    6116:	2b01      	cmp	r3, #1
    6118:	d16d      	bne.n	61f6 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    611a:	9b01      	ldr	r3, [sp, #4]
    611c:	695b      	ldr	r3, [r3, #20]
    611e:	2b02      	cmp	r3, #2
    6120:	d138      	bne.n	6194 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    6122:	9b01      	ldr	r3, [sp, #4]
    6124:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6128:	2b01      	cmp	r3, #1
    612a:	d10f      	bne.n	614c <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    612c:	f002 fb5c 	bl	87e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6130:	9b01      	ldr	r3, [sp, #4]
    6132:	685b      	ldr	r3, [r3, #4]
    6134:	6859      	ldr	r1, [r3, #4]
    6136:	9b01      	ldr	r3, [sp, #4]
    6138:	689b      	ldr	r3, [r3, #8]
    613a:	2201      	movs	r2, #1
    613c:	409a      	lsls	r2, r3
    613e:	9b01      	ldr	r3, [sp, #4]
    6140:	685b      	ldr	r3, [r3, #4]
    6142:	430a      	orrs	r2, r1
    6144:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6146:	f002 fb7b 	bl	8840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    614a:	e013      	b.n	6174 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    614c:	9b01      	ldr	r3, [sp, #4]
    614e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6152:	2b00      	cmp	r3, #0
    6154:	d10e      	bne.n	6174 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    6156:	f002 fb99 	bl	888c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    615a:	9b01      	ldr	r3, [sp, #4]
    615c:	685b      	ldr	r3, [r3, #4]
    615e:	6899      	ldr	r1, [r3, #8]
    6160:	9b01      	ldr	r3, [sp, #4]
    6162:	689b      	ldr	r3, [r3, #8]
    6164:	2201      	movs	r2, #1
    6166:	409a      	lsls	r2, r3
    6168:	9b01      	ldr	r3, [sp, #4]
    616a:	685b      	ldr	r3, [r3, #4]
    616c:	430a      	orrs	r2, r1
    616e:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    6170:	f002 fbb8 	bl	88e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6174:	f002 fbdc 	bl	8930 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    6178:	9b01      	ldr	r3, [sp, #4]
    617a:	685b      	ldr	r3, [r3, #4]
    617c:	6959      	ldr	r1, [r3, #20]
    617e:	9b01      	ldr	r3, [sp, #4]
    6180:	689b      	ldr	r3, [r3, #8]
    6182:	2201      	movs	r2, #1
    6184:	409a      	lsls	r2, r3
    6186:	9b01      	ldr	r3, [sp, #4]
    6188:	685b      	ldr	r3, [r3, #4]
    618a:	430a      	orrs	r2, r1
    618c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    618e:	f002 fbfb 	bl	8988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    6192:	e030      	b.n	61f6 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    6194:	f002 fbcc 	bl	8930 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    6198:	9b01      	ldr	r3, [sp, #4]
    619a:	685b      	ldr	r3, [r3, #4]
    619c:	6959      	ldr	r1, [r3, #20]
    619e:	9b01      	ldr	r3, [sp, #4]
    61a0:	689b      	ldr	r3, [r3, #8]
    61a2:	2201      	movs	r2, #1
    61a4:	fa02 f303 	lsl.w	r3, r2, r3
    61a8:	43da      	mvns	r2, r3
    61aa:	9b01      	ldr	r3, [sp, #4]
    61ac:	685b      	ldr	r3, [r3, #4]
    61ae:	400a      	ands	r2, r1
    61b0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    61b2:	f002 fbe9 	bl	8988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    61b6:	f002 fc0d 	bl	89d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    61ba:	9b01      	ldr	r3, [sp, #4]
    61bc:	685b      	ldr	r3, [r3, #4]
    61be:	6999      	ldr	r1, [r3, #24]
    61c0:	9b01      	ldr	r3, [sp, #4]
    61c2:	689b      	ldr	r3, [r3, #8]
    61c4:	2201      	movs	r2, #1
    61c6:	fa02 f303 	lsl.w	r3, r2, r3
    61ca:	43da      	mvns	r2, r3
    61cc:	9b01      	ldr	r3, [sp, #4]
    61ce:	685b      	ldr	r3, [r3, #4]
    61d0:	400a      	ands	r2, r1
    61d2:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    61d4:	9b01      	ldr	r3, [sp, #4]
    61d6:	695b      	ldr	r3, [r3, #20]
    61d8:	2b03      	cmp	r3, #3
    61da:	d10a      	bne.n	61f2 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    61dc:	9b01      	ldr	r3, [sp, #4]
    61de:	685b      	ldr	r3, [r3, #4]
    61e0:	6999      	ldr	r1, [r3, #24]
    61e2:	9b01      	ldr	r3, [sp, #4]
    61e4:	689b      	ldr	r3, [r3, #8]
    61e6:	2201      	movs	r2, #1
    61e8:	409a      	lsls	r2, r3
    61ea:	9b01      	ldr	r3, [sp, #4]
    61ec:	685b      	ldr	r3, [r3, #4]
    61ee:	430a      	orrs	r2, r1
    61f0:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    61f2:	f002 fc1b 	bl	8a2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    61f6:	9b01      	ldr	r3, [sp, #4]
    61f8:	681b      	ldr	r3, [r3, #0]
    61fa:	9a01      	ldr	r2, [sp, #4]
    61fc:	6892      	ldr	r2, [r2, #8]
    61fe:	9905      	ldr	r1, [sp, #20]
    6200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6204:	bf00      	nop
    6206:	b007      	add	sp, #28
    6208:	f85d fb04 	ldr.w	pc, [sp], #4

0000620c <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    620c:	b500      	push	{lr}
    620e:	b085      	sub	sp, #20
    6210:	9001      	str	r0, [sp, #4]
    6212:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6214:	2300      	movs	r3, #0
    6216:	9303      	str	r3, [sp, #12]
    6218:	e00d      	b.n	6236 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    621a:	9a03      	ldr	r2, [sp, #12]
    621c:	4613      	mov	r3, r2
    621e:	009b      	lsls	r3, r3, #2
    6220:	4413      	add	r3, r2
    6222:	00db      	lsls	r3, r3, #3
    6224:	461a      	mov	r2, r3
    6226:	9b00      	ldr	r3, [sp, #0]
    6228:	4413      	add	r3, r2
    622a:	4618      	mov	r0, r3
    622c:	f7ff ff06 	bl	603c <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6230:	9b03      	ldr	r3, [sp, #12]
    6232:	3301      	adds	r3, #1
    6234:	9303      	str	r3, [sp, #12]
    6236:	9a03      	ldr	r2, [sp, #12]
    6238:	9b01      	ldr	r3, [sp, #4]
    623a:	429a      	cmp	r2, r3
    623c:	d3ed      	bcc.n	621a <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    623e:	2300      	movs	r3, #0
}
    6240:	4618      	mov	r0, r3
    6242:	b005      	add	sp, #20
    6244:	f85d fb04 	ldr.w	pc, [sp], #4

00006248 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6248:	b500      	push	{lr}
    624a:	b087      	sub	sp, #28
    624c:	9003      	str	r0, [sp, #12]
    624e:	9102      	str	r1, [sp, #8]
    6250:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    6252:	9a01      	ldr	r2, [sp, #4]
    6254:	9902      	ldr	r1, [sp, #8]
    6256:	9803      	ldr	r0, [sp, #12]
    6258:	f7ff febc 	bl	5fd4 <Port_Ci_Port_Ip_ConfigureInterleave>
    625c:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    625e:	f002 fc5d 	bl	8b1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    6262:	9b03      	ldr	r3, [sp, #12]
    6264:	9a02      	ldr	r2, [sp, #8]
    6266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    626a:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    626c:	9b04      	ldr	r3, [sp, #16]
    626e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    6272:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    6274:	9b05      	ldr	r3, [sp, #20]
    6276:	021b      	lsls	r3, r3, #8
    6278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    627c:	9a04      	ldr	r2, [sp, #16]
    627e:	4313      	orrs	r3, r2
    6280:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    6282:	9b03      	ldr	r3, [sp, #12]
    6284:	9a02      	ldr	r2, [sp, #8]
    6286:	9904      	ldr	r1, [sp, #16]
    6288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    628c:	f002 fc72 	bl	8b74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    6290:	bf00      	nop
    6292:	b007      	add	sp, #28
    6294:	f85d fb04 	ldr.w	pc, [sp], #4

00006298 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6298:	b500      	push	{lr}
    629a:	b083      	sub	sp, #12
    629c:	9001      	str	r0, [sp, #4]
    629e:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    62a0:	f002 fc8e 	bl	8bc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    62a4:	9b01      	ldr	r3, [sp, #4]
    62a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    62aa:	2101      	movs	r1, #1
    62ac:	9b00      	ldr	r3, [sp, #0]
    62ae:	fa01 f303 	lsl.w	r3, r1, r3
    62b2:	431a      	orrs	r2, r3
    62b4:	9b01      	ldr	r3, [sp, #4]
    62b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    62ba:	f002 fcad 	bl	8c18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    62be:	bf00      	nop
    62c0:	b003      	add	sp, #12
    62c2:	f85d fb04 	ldr.w	pc, [sp], #4

000062c6 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    62c6:	b500      	push	{lr}
    62c8:	b083      	sub	sp, #12
    62ca:	9001      	str	r0, [sp, #4]
    62cc:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    62ce:	f002 fcc9 	bl	8c64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    62d2:	9b01      	ldr	r3, [sp, #4]
    62d4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    62d8:	2101      	movs	r1, #1
    62da:	9b00      	ldr	r3, [sp, #0]
    62dc:	fa01 f303 	lsl.w	r3, r1, r3
    62e0:	43db      	mvns	r3, r3
    62e2:	401a      	ands	r2, r3
    62e4:	9b01      	ldr	r3, [sp, #4]
    62e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    62ea:	f002 fce7 	bl	8cbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    62ee:	bf00      	nop
    62f0:	b003      	add	sp, #12
    62f2:	f85d fb04 	ldr.w	pc, [sp], #4

000062f6 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    62f6:	b082      	sub	sp, #8
    62f8:	9001      	str	r0, [sp, #4]
    62fa:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    62fc:	9b00      	ldr	r3, [sp, #0]
    62fe:	785b      	ldrb	r3, [r3, #1]
    6300:	f003 0201 	and.w	r2, r3, #1
    6304:	9b01      	ldr	r3, [sp, #4]
    6306:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    630a:	9b00      	ldr	r3, [sp, #0]
    630c:	789b      	ldrb	r3, [r3, #2]
    630e:	f003 021f 	and.w	r2, r3, #31
    6312:	9b01      	ldr	r3, [sp, #4]
    6314:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6318:	bf00      	nop
    631a:	b002      	add	sp, #8
    631c:	4770      	bx	lr

0000631e <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    631e:	b086      	sub	sp, #24
    6320:	9003      	str	r0, [sp, #12]
    6322:	9301      	str	r3, [sp, #4]
    6324:	460b      	mov	r3, r1
    6326:	f8ad 300a 	strh.w	r3, [sp, #10]
    632a:	4613      	mov	r3, r2
    632c:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6330:	2300      	movs	r3, #0
    6332:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6336:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    633a:	f043 0301 	orr.w	r3, r3, #1
    633e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    6342:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6346:	f043 0302 	orr.w	r3, r3, #2
    634a:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    634e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6352:	f043 0310 	orr.w	r3, r3, #16
    6356:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    635a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    635e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6362:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    6366:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    636a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    636e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    6372:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    637a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    637e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    6382:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6386:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    638a:	4013      	ands	r3, r2
    638c:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    6390:	9b01      	ldr	r3, [sp, #4]
    6392:	2b00      	cmp	r3, #0
    6394:	d003      	beq.n	639e <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    6396:	9b01      	ldr	r3, [sp, #4]
    6398:	2b01      	cmp	r3, #1
    639a:	d00a      	beq.n	63b2 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    639c:	e013      	b.n	63c6 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    639e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    63a2:	041a      	lsls	r2, r3, #16
    63a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63a8:	431a      	orrs	r2, r3
    63aa:	9b03      	ldr	r3, [sp, #12]
    63ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    63b0:	e009      	b.n	63c6 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    63b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    63b6:	041a      	lsls	r2, r3, #16
    63b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63bc:	431a      	orrs	r2, r3
    63be:	9b03      	ldr	r3, [sp, #12]
    63c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    63c4:	bf00      	nop
    }
}
    63c6:	bf00      	nop
    63c8:	b006      	add	sp, #24
    63ca:	4770      	bx	lr

000063cc <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    63cc:	b500      	push	{lr}
    63ce:	b087      	sub	sp, #28
    63d0:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    63d2:	9b01      	ldr	r3, [sp, #4]
    63d4:	885b      	ldrh	r3, [r3, #2]
    63d6:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    63da:	9b01      	ldr	r3, [sp, #4]
    63dc:	689b      	ldr	r3, [r3, #8]
    63de:	7a1b      	ldrb	r3, [r3, #8]
    63e0:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    63e4:	9b01      	ldr	r3, [sp, #4]
    63e6:	689b      	ldr	r3, [r3, #8]
    63e8:	681b      	ldr	r3, [r3, #0]
    63ea:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    63ec:	9b01      	ldr	r3, [sp, #4]
    63ee:	689b      	ldr	r3, [r3, #8]
    63f0:	685b      	ldr	r3, [r3, #4]
    63f2:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    63f4:	2300      	movs	r3, #0
    63f6:	f8ad 3016 	strh.w	r3, [sp, #22]
    63fa:	e111      	b.n	6620 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    63fc:	9b02      	ldr	r3, [sp, #8]
    63fe:	2b02      	cmp	r3, #2
    6400:	d169      	bne.n	64d6 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6402:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6406:	2b01      	cmp	r3, #1
    6408:	d11a      	bne.n	6440 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    640a:	9b01      	ldr	r3, [sp, #4]
    640c:	685a      	ldr	r2, [r3, #4]
    640e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6412:	005b      	lsls	r3, r3, #1
    6414:	4413      	add	r3, r2
    6416:	881b      	ldrh	r3, [r3, #0]
    6418:	f003 021f 	and.w	r2, r3, #31
    641c:	9b01      	ldr	r3, [sp, #4]
    641e:	6859      	ldr	r1, [r3, #4]
    6420:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6424:	005b      	lsls	r3, r3, #1
    6426:	440b      	add	r3, r1
    6428:	881b      	ldrh	r3, [r3, #0]
    642a:	095b      	lsrs	r3, r3, #5
    642c:	b29b      	uxth	r3, r3
    642e:	4619      	mov	r1, r3
    6430:	4b81      	ldr	r3, [pc, #516]	; (6638 <Port_Ipw_Init_UnusedPins+0x26c>)
    6432:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6436:	2101      	movs	r1, #1
    6438:	fa01 f202 	lsl.w	r2, r1, r2
    643c:	605a      	str	r2, [r3, #4]
    643e:	e01d      	b.n	647c <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6440:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6444:	2b00      	cmp	r3, #0
    6446:	d119      	bne.n	647c <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6448:	9b01      	ldr	r3, [sp, #4]
    644a:	685a      	ldr	r2, [r3, #4]
    644c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6450:	005b      	lsls	r3, r3, #1
    6452:	4413      	add	r3, r2
    6454:	881b      	ldrh	r3, [r3, #0]
    6456:	f003 021f 	and.w	r2, r3, #31
    645a:	9b01      	ldr	r3, [sp, #4]
    645c:	6859      	ldr	r1, [r3, #4]
    645e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6462:	005b      	lsls	r3, r3, #1
    6464:	440b      	add	r3, r1
    6466:	881b      	ldrh	r3, [r3, #0]
    6468:	095b      	lsrs	r3, r3, #5
    646a:	b29b      	uxth	r3, r3
    646c:	4619      	mov	r1, r3
    646e:	4b72      	ldr	r3, [pc, #456]	; (6638 <Port_Ipw_Init_UnusedPins+0x26c>)
    6470:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6474:	2101      	movs	r1, #1
    6476:	fa01 f202 	lsl.w	r2, r1, r2
    647a:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    647c:	f002 fc44 	bl	8d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6480:	9b01      	ldr	r3, [sp, #4]
    6482:	685a      	ldr	r2, [r3, #4]
    6484:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6488:	005b      	lsls	r3, r3, #1
    648a:	4413      	add	r3, r2
    648c:	881b      	ldrh	r3, [r3, #0]
    648e:	095b      	lsrs	r3, r3, #5
    6490:	b29b      	uxth	r3, r3
    6492:	461a      	mov	r2, r3
    6494:	4b68      	ldr	r3, [pc, #416]	; (6638 <Port_Ipw_Init_UnusedPins+0x26c>)
    6496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    649a:	6959      	ldr	r1, [r3, #20]
    649c:	9b01      	ldr	r3, [sp, #4]
    649e:	685a      	ldr	r2, [r3, #4]
    64a0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64a4:	005b      	lsls	r3, r3, #1
    64a6:	4413      	add	r3, r2
    64a8:	881b      	ldrh	r3, [r3, #0]
    64aa:	f003 031f 	and.w	r3, r3, #31
    64ae:	2201      	movs	r2, #1
    64b0:	409a      	lsls	r2, r3
    64b2:	9b01      	ldr	r3, [sp, #4]
    64b4:	6858      	ldr	r0, [r3, #4]
    64b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ba:	005b      	lsls	r3, r3, #1
    64bc:	4403      	add	r3, r0
    64be:	881b      	ldrh	r3, [r3, #0]
    64c0:	095b      	lsrs	r3, r3, #5
    64c2:	b29b      	uxth	r3, r3
    64c4:	4618      	mov	r0, r3
    64c6:	4b5c      	ldr	r3, [pc, #368]	; (6638 <Port_Ipw_Init_UnusedPins+0x26c>)
    64c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    64cc:	430a      	orrs	r2, r1
    64ce:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    64d0:	f002 fc46 	bl	8d60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    64d4:	e086      	b.n	65e4 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    64d6:	f002 fc17 	bl	8d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    64da:	9b01      	ldr	r3, [sp, #4]
    64dc:	685a      	ldr	r2, [r3, #4]
    64de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64e2:	005b      	lsls	r3, r3, #1
    64e4:	4413      	add	r3, r2
    64e6:	881b      	ldrh	r3, [r3, #0]
    64e8:	095b      	lsrs	r3, r3, #5
    64ea:	b29b      	uxth	r3, r3
    64ec:	461a      	mov	r2, r3
    64ee:	4b52      	ldr	r3, [pc, #328]	; (6638 <Port_Ipw_Init_UnusedPins+0x26c>)
    64f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64f4:	6959      	ldr	r1, [r3, #20]
    64f6:	9b01      	ldr	r3, [sp, #4]
    64f8:	685a      	ldr	r2, [r3, #4]
    64fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64fe:	005b      	lsls	r3, r3, #1
    6500:	4413      	add	r3, r2
    6502:	881b      	ldrh	r3, [r3, #0]
    6504:	f003 031f 	and.w	r3, r3, #31
    6508:	2201      	movs	r2, #1
    650a:	fa02 f303 	lsl.w	r3, r2, r3
    650e:	43da      	mvns	r2, r3
    6510:	9b01      	ldr	r3, [sp, #4]
    6512:	6858      	ldr	r0, [r3, #4]
    6514:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6518:	005b      	lsls	r3, r3, #1
    651a:	4403      	add	r3, r0
    651c:	881b      	ldrh	r3, [r3, #0]
    651e:	095b      	lsrs	r3, r3, #5
    6520:	b29b      	uxth	r3, r3
    6522:	4618      	mov	r0, r3
    6524:	4b44      	ldr	r3, [pc, #272]	; (6638 <Port_Ipw_Init_UnusedPins+0x26c>)
    6526:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    652a:	400a      	ands	r2, r1
    652c:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    652e:	f002 fc17 	bl	8d60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6532:	f002 fc3b 	bl	8dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6536:	9b01      	ldr	r3, [sp, #4]
    6538:	685a      	ldr	r2, [r3, #4]
    653a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    653e:	005b      	lsls	r3, r3, #1
    6540:	4413      	add	r3, r2
    6542:	881b      	ldrh	r3, [r3, #0]
    6544:	095b      	lsrs	r3, r3, #5
    6546:	b29b      	uxth	r3, r3
    6548:	461a      	mov	r2, r3
    654a:	4b3b      	ldr	r3, [pc, #236]	; (6638 <Port_Ipw_Init_UnusedPins+0x26c>)
    654c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6550:	6999      	ldr	r1, [r3, #24]
    6552:	9b01      	ldr	r3, [sp, #4]
    6554:	685a      	ldr	r2, [r3, #4]
    6556:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    655a:	005b      	lsls	r3, r3, #1
    655c:	4413      	add	r3, r2
    655e:	881b      	ldrh	r3, [r3, #0]
    6560:	f003 031f 	and.w	r3, r3, #31
    6564:	2201      	movs	r2, #1
    6566:	fa02 f303 	lsl.w	r3, r2, r3
    656a:	43da      	mvns	r2, r3
    656c:	9b01      	ldr	r3, [sp, #4]
    656e:	6858      	ldr	r0, [r3, #4]
    6570:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6574:	005b      	lsls	r3, r3, #1
    6576:	4403      	add	r3, r0
    6578:	881b      	ldrh	r3, [r3, #0]
    657a:	095b      	lsrs	r3, r3, #5
    657c:	b29b      	uxth	r3, r3
    657e:	4618      	mov	r0, r3
    6580:	4b2d      	ldr	r3, [pc, #180]	; (6638 <Port_Ipw_Init_UnusedPins+0x26c>)
    6582:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6586:	400a      	ands	r2, r1
    6588:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    658a:	9b02      	ldr	r3, [sp, #8]
    658c:	2b03      	cmp	r3, #3
    658e:	d127      	bne.n	65e0 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6590:	9b01      	ldr	r3, [sp, #4]
    6592:	685a      	ldr	r2, [r3, #4]
    6594:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6598:	005b      	lsls	r3, r3, #1
    659a:	4413      	add	r3, r2
    659c:	881b      	ldrh	r3, [r3, #0]
    659e:	095b      	lsrs	r3, r3, #5
    65a0:	b29b      	uxth	r3, r3
    65a2:	461a      	mov	r2, r3
    65a4:	4b24      	ldr	r3, [pc, #144]	; (6638 <Port_Ipw_Init_UnusedPins+0x26c>)
    65a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65aa:	6999      	ldr	r1, [r3, #24]
    65ac:	9b01      	ldr	r3, [sp, #4]
    65ae:	685a      	ldr	r2, [r3, #4]
    65b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65b4:	005b      	lsls	r3, r3, #1
    65b6:	4413      	add	r3, r2
    65b8:	881b      	ldrh	r3, [r3, #0]
    65ba:	f003 031f 	and.w	r3, r3, #31
    65be:	2201      	movs	r2, #1
    65c0:	409a      	lsls	r2, r3
    65c2:	9b01      	ldr	r3, [sp, #4]
    65c4:	6858      	ldr	r0, [r3, #4]
    65c6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65ca:	005b      	lsls	r3, r3, #1
    65cc:	4403      	add	r3, r0
    65ce:	881b      	ldrh	r3, [r3, #0]
    65d0:	095b      	lsrs	r3, r3, #5
    65d2:	b29b      	uxth	r3, r3
    65d4:	4618      	mov	r0, r3
    65d6:	4b18      	ldr	r3, [pc, #96]	; (6638 <Port_Ipw_Init_UnusedPins+0x26c>)
    65d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    65dc:	430a      	orrs	r2, r1
    65de:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    65e0:	f002 fc10 	bl	8e04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    65e4:	9b01      	ldr	r3, [sp, #4]
    65e6:	685a      	ldr	r2, [r3, #4]
    65e8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65ec:	005b      	lsls	r3, r3, #1
    65ee:	4413      	add	r3, r2
    65f0:	881b      	ldrh	r3, [r3, #0]
    65f2:	095b      	lsrs	r3, r3, #5
    65f4:	b29b      	uxth	r3, r3
    65f6:	461a      	mov	r2, r3
    65f8:	4b10      	ldr	r3, [pc, #64]	; (663c <Port_Ipw_Init_UnusedPins+0x270>)
    65fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65fe:	9a01      	ldr	r2, [sp, #4]
    6600:	6851      	ldr	r1, [r2, #4]
    6602:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6606:	0052      	lsls	r2, r2, #1
    6608:	440a      	add	r2, r1
    660a:	8812      	ldrh	r2, [r2, #0]
    660c:	f002 021f 	and.w	r2, r2, #31
    6610:	9903      	ldr	r1, [sp, #12]
    6612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6616:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    661a:	3301      	adds	r3, #1
    661c:	f8ad 3016 	strh.w	r3, [sp, #22]
    6620:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6624:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6628:	429a      	cmp	r2, r3
    662a:	f4ff aee7 	bcc.w	63fc <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    662e:	bf00      	nop
    6630:	bf00      	nop
    6632:	b007      	add	sp, #28
    6634:	f85d fb04 	ldr.w	pc, [sp], #4
    6638:	0000ad50 	.word	0x0000ad50
    663c:	0000ad3c 	.word	0x0000ad3c

00006640 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6640:	b500      	push	{lr}
    6642:	b085      	sub	sp, #20
    6644:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6646:	9b01      	ldr	r3, [sp, #4]
    6648:	7c1b      	ldrb	r3, [r3, #16]
    664a:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    664e:	2300      	movs	r3, #0
    6650:	f8ad 300e 	strh.w	r3, [sp, #14]
    6654:	e035      	b.n	66c2 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6656:	9b01      	ldr	r3, [sp, #4]
    6658:	695a      	ldr	r2, [r3, #20]
    665a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    665e:	00db      	lsls	r3, r3, #3
    6660:	4413      	add	r3, r2
    6662:	781b      	ldrb	r3, [r3, #0]
    6664:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6668:	f89d 300c 	ldrb.w	r3, [sp, #12]
    666c:	4a1f      	ldr	r2, [pc, #124]	; (66ec <Port_Ipw_Init+0xac>)
    666e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6672:	9b01      	ldr	r3, [sp, #4]
    6674:	695a      	ldr	r2, [r3, #20]
    6676:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    667a:	00db      	lsls	r3, r3, #3
    667c:	4413      	add	r3, r2
    667e:	4619      	mov	r1, r3
    6680:	f7ff fe39 	bl	62f6 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6684:	f002 fd2c 	bl	90e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6688:	f89d 300c 	ldrb.w	r3, [sp, #12]
    668c:	4a17      	ldr	r2, [pc, #92]	; (66ec <Port_Ipw_Init+0xac>)
    668e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6692:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6696:	9b01      	ldr	r3, [sp, #4]
    6698:	695a      	ldr	r2, [r3, #20]
    669a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    669e:	00db      	lsls	r3, r3, #3
    66a0:	4413      	add	r3, r2
    66a2:	685a      	ldr	r2, [r3, #4]
    66a4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    66a8:	4810      	ldr	r0, [pc, #64]	; (66ec <Port_Ipw_Init+0xac>)
    66aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    66ae:	430a      	orrs	r2, r1
    66b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    66b4:	f002 fd40 	bl	9138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    66b8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66bc:	3301      	adds	r3, #1
    66be:	f8ad 300e 	strh.w	r3, [sp, #14]
    66c2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    66c6:	b29b      	uxth	r3, r3
    66c8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    66cc:	429a      	cmp	r2, r3
    66ce:	d3c2      	bcc.n	6656 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    66d0:	9b01      	ldr	r3, [sp, #4]
    66d2:	6a1b      	ldr	r3, [r3, #32]
    66d4:	4619      	mov	r1, r3
    66d6:	2005      	movs	r0, #5
    66d8:	f7ff fd98 	bl	620c <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    66dc:	9801      	ldr	r0, [sp, #4]
    66de:	f7ff fe75 	bl	63cc <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    66e2:	bf00      	nop
    66e4:	b005      	add	sp, #20
    66e6:	f85d fb04 	ldr.w	pc, [sp], #4
    66ea:	bf00      	nop
    66ec:	0000ad3c 	.word	0x0000ad3c

000066f0 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    66f0:	b500      	push	{lr}
    66f2:	b085      	sub	sp, #20
    66f4:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    66f6:	9b01      	ldr	r3, [sp, #4]
    66f8:	881b      	ldrh	r3, [r3, #0]
    66fa:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    66fe:	2300      	movs	r3, #0
    6700:	f8ad 300e 	strh.w	r3, [sp, #14]
    6704:	e0d2      	b.n	68ac <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    6706:	9b01      	ldr	r3, [sp, #4]
    6708:	68d9      	ldr	r1, [r3, #12]
    670a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    670e:	4613      	mov	r3, r2
    6710:	009b      	lsls	r3, r3, #2
    6712:	4413      	add	r3, r2
    6714:	009b      	lsls	r3, r3, #2
    6716:	440b      	add	r3, r1
    6718:	7c5b      	ldrb	r3, [r3, #17]
    671a:	f083 0301 	eor.w	r3, r3, #1
    671e:	b2db      	uxtb	r3, r3
    6720:	2b00      	cmp	r3, #0
    6722:	f000 80be 	beq.w	68a2 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    6726:	9b01      	ldr	r3, [sp, #4]
    6728:	68d9      	ldr	r1, [r3, #12]
    672a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    672e:	4613      	mov	r3, r2
    6730:	009b      	lsls	r3, r3, #2
    6732:	4413      	add	r3, r2
    6734:	009b      	lsls	r3, r3, #2
    6736:	440b      	add	r3, r1
    6738:	7c1b      	ldrb	r3, [r3, #16]
    673a:	2b00      	cmp	r3, #0
    673c:	f000 80b1 	beq.w	68a2 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6740:	9b01      	ldr	r3, [sp, #4]
    6742:	68d9      	ldr	r1, [r3, #12]
    6744:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6748:	4613      	mov	r3, r2
    674a:	009b      	lsls	r3, r3, #2
    674c:	4413      	add	r3, r2
    674e:	009b      	lsls	r3, r3, #2
    6750:	440b      	add	r3, r1
    6752:	881b      	ldrh	r3, [r3, #0]
    6754:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6758:	9b01      	ldr	r3, [sp, #4]
    675a:	68d9      	ldr	r1, [r3, #12]
    675c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6760:	4613      	mov	r3, r2
    6762:	009b      	lsls	r3, r3, #2
    6764:	4413      	add	r3, r2
    6766:	009b      	lsls	r3, r3, #2
    6768:	440b      	add	r3, r1
    676a:	68db      	ldr	r3, [r3, #12]
    676c:	2b02      	cmp	r3, #2
    676e:	d11d      	bne.n	67ac <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6770:	f002 fdfe 	bl	9370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6774:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6778:	095b      	lsrs	r3, r3, #5
    677a:	b29b      	uxth	r3, r3
    677c:	461a      	mov	r2, r3
    677e:	4b51      	ldr	r3, [pc, #324]	; (68c4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6784:	6959      	ldr	r1, [r3, #20]
    6786:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    678a:	f003 031f 	and.w	r3, r3, #31
    678e:	2201      	movs	r2, #1
    6790:	409a      	lsls	r2, r3
    6792:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6796:	095b      	lsrs	r3, r3, #5
    6798:	b29b      	uxth	r3, r3
    679a:	4618      	mov	r0, r3
    679c:	4b49      	ldr	r3, [pc, #292]	; (68c4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    679e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67a2:	430a      	orrs	r2, r1
    67a4:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    67a6:	f002 fe0f 	bl	93c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    67aa:	e07a      	b.n	68a2 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    67ac:	9b01      	ldr	r3, [sp, #4]
    67ae:	68d9      	ldr	r1, [r3, #12]
    67b0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67b4:	4613      	mov	r3, r2
    67b6:	009b      	lsls	r3, r3, #2
    67b8:	4413      	add	r3, r2
    67ba:	009b      	lsls	r3, r3, #2
    67bc:	440b      	add	r3, r1
    67be:	68db      	ldr	r3, [r3, #12]
    67c0:	2b01      	cmp	r3, #1
    67c2:	d00b      	beq.n	67dc <Port_Ipw_RefreshPortDirection+0xec>
    67c4:	9b01      	ldr	r3, [sp, #4]
    67c6:	68d9      	ldr	r1, [r3, #12]
    67c8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67cc:	4613      	mov	r3, r2
    67ce:	009b      	lsls	r3, r3, #2
    67d0:	4413      	add	r3, r2
    67d2:	009b      	lsls	r3, r3, #2
    67d4:	440b      	add	r3, r1
    67d6:	68db      	ldr	r3, [r3, #12]
    67d8:	2b03      	cmp	r3, #3
    67da:	d162      	bne.n	68a2 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    67dc:	f002 fdc8 	bl	9370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67e4:	095b      	lsrs	r3, r3, #5
    67e6:	b29b      	uxth	r3, r3
    67e8:	461a      	mov	r2, r3
    67ea:	4b36      	ldr	r3, [pc, #216]	; (68c4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67f0:	6959      	ldr	r1, [r3, #20]
    67f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67f6:	f003 031f 	and.w	r3, r3, #31
    67fa:	2201      	movs	r2, #1
    67fc:	fa02 f303 	lsl.w	r3, r2, r3
    6800:	43da      	mvns	r2, r3
    6802:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6806:	095b      	lsrs	r3, r3, #5
    6808:	b29b      	uxth	r3, r3
    680a:	4618      	mov	r0, r3
    680c:	4b2d      	ldr	r3, [pc, #180]	; (68c4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    680e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6812:	400a      	ands	r2, r1
    6814:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6816:	f002 fdd7 	bl	93c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    681a:	f002 fdfb 	bl	9414 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    681e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6822:	095b      	lsrs	r3, r3, #5
    6824:	b29b      	uxth	r3, r3
    6826:	461a      	mov	r2, r3
    6828:	4b26      	ldr	r3, [pc, #152]	; (68c4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    682a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    682e:	6999      	ldr	r1, [r3, #24]
    6830:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6834:	f003 031f 	and.w	r3, r3, #31
    6838:	2201      	movs	r2, #1
    683a:	fa02 f303 	lsl.w	r3, r2, r3
    683e:	43da      	mvns	r2, r3
    6840:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6844:	095b      	lsrs	r3, r3, #5
    6846:	b29b      	uxth	r3, r3
    6848:	4618      	mov	r0, r3
    684a:	4b1e      	ldr	r3, [pc, #120]	; (68c4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    684c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6850:	400a      	ands	r2, r1
    6852:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6854:	9b01      	ldr	r3, [sp, #4]
    6856:	68d9      	ldr	r1, [r3, #12]
    6858:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    685c:	4613      	mov	r3, r2
    685e:	009b      	lsls	r3, r3, #2
    6860:	4413      	add	r3, r2
    6862:	009b      	lsls	r3, r3, #2
    6864:	440b      	add	r3, r1
    6866:	68db      	ldr	r3, [r3, #12]
    6868:	2b03      	cmp	r3, #3
    686a:	d118      	bne.n	689e <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    686c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6870:	095b      	lsrs	r3, r3, #5
    6872:	b29b      	uxth	r3, r3
    6874:	461a      	mov	r2, r3
    6876:	4b13      	ldr	r3, [pc, #76]	; (68c4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    687c:	6999      	ldr	r1, [r3, #24]
    687e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6882:	f003 031f 	and.w	r3, r3, #31
    6886:	2201      	movs	r2, #1
    6888:	409a      	lsls	r2, r3
    688a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    688e:	095b      	lsrs	r3, r3, #5
    6890:	b29b      	uxth	r3, r3
    6892:	4618      	mov	r0, r3
    6894:	4b0b      	ldr	r3, [pc, #44]	; (68c4 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6896:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    689a:	430a      	orrs	r2, r1
    689c:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    689e:	f002 fde5 	bl	946c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    68a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    68a6:	3301      	adds	r3, #1
    68a8:	f8ad 300e 	strh.w	r3, [sp, #14]
    68ac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    68b0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    68b4:	429a      	cmp	r2, r3
    68b6:	f4ff af26 	bcc.w	6706 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    68ba:	bf00      	nop
    68bc:	bf00      	nop
    68be:	b005      	add	sp, #20
    68c0:	f85d fb04 	ldr.w	pc, [sp], #4
    68c4:	0000ad50 	.word	0x0000ad50

000068c8 <Lpspi_Ip_ChannelFinished>:
* @param[in]     Instance            Index of the hardware instance.
* @param[in]     ErrorFlag           Save the status of transfer error flags
* @return void
*/
static void Lpspi_Ip_ChannelFinished(uint8 Instance, boolean ErrorFlag)
{
    68c8:	b500      	push	{lr}
    68ca:	b085      	sub	sp, #20
    68cc:	4603      	mov	r3, r0
    68ce:	460a      	mov	r2, r1
    68d0:	f88d 3007 	strb.w	r3, [sp, #7]
    68d4:	4613      	mov	r3, r2
    68d6:	f88d 3006 	strb.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    68da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    68de:	4a12      	ldr	r2, [pc, #72]	; (6928 <Lpspi_Ip_ChannelFinished+0x60>)
    68e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    68e4:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_EventType EventState = LPSPI_IP_EVENT_FAULT;
    68e6:	2301      	movs	r3, #1
    68e8:	9303      	str	r3, [sp, #12]
    
    if(TRUE == ErrorFlag)
    68ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    68ee:	2b00      	cmp	r3, #0
    68f0:	d005      	beq.n	68fe <Lpspi_Ip_ChannelFinished+0x36>
    {
        State->Status = LPSPI_IP_FAULT;
    68f2:	9b02      	ldr	r3, [sp, #8]
    68f4:	2203      	movs	r2, #3
    68f6:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_FAULT;
    68f8:	2301      	movs	r3, #1
    68fa:	9303      	str	r3, [sp, #12]
    68fc:	e004      	b.n	6908 <Lpspi_Ip_ChannelFinished+0x40>
    }
    else
    {
        State->Status = LPSPI_IP_IDLE;
    68fe:	9b02      	ldr	r3, [sp, #8]
    6900:	2201      	movs	r2, #1
    6902:	605a      	str	r2, [r3, #4]
        EventState = LPSPI_IP_EVENT_END_TRANSFER;
    6904:	2300      	movs	r3, #0
    6906:	9303      	str	r3, [sp, #12]
    }

    if (NULL_PTR != State->Callback)
    6908:	9b02      	ldr	r3, [sp, #8]
    690a:	691b      	ldr	r3, [r3, #16]
    690c:	2b00      	cmp	r3, #0
    690e:	d006      	beq.n	691e <Lpspi_Ip_ChannelFinished+0x56>
    {
        State->Callback(Instance, EventState);
    6910:	9b02      	ldr	r3, [sp, #8]
    6912:	691b      	ldr	r3, [r3, #16]
    6914:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6918:	9903      	ldr	r1, [sp, #12]
    691a:	4610      	mov	r0, r2
    691c:	4798      	blx	r3
    }
}
    691e:	bf00      	nop
    6920:	b005      	add	sp, #20
    6922:	f85d fb04 	ldr.w	pc, [sp], #4
    6926:	bf00      	nop
    6928:	1fff8d38 	.word	0x1fff8d38

0000692c <Lpspi_Ip_TransferProcess>:
*
* @param[in]     Instance      Index of the hardware instance.
* @return void
*/
static void Lpspi_Ip_TransferProcess(uint8 Instance)
{
    692c:	b510      	push	{r4, lr}
    692e:	b092      	sub	sp, #72	; 0x48
    6930:	4603      	mov	r3, r0
    6932:	f88d 300f 	strb.w	r3, [sp, #15]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    6936:	f89d 300f 	ldrb.w	r3, [sp, #15]
    693a:	4aad      	ldr	r2, [pc, #692]	; (6bf0 <Lpspi_Ip_TransferProcess+0x2c4>)
    693c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6940:	9310      	str	r3, [sp, #64]	; 0x40
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    6942:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6946:	4aab      	ldr	r2, [pc, #684]	; (6bf4 <Lpspi_Ip_TransferProcess+0x2c8>)
    6948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    694c:	930f      	str	r3, [sp, #60]	; 0x3c
    uint32 SrStatusRegister;
    uint8 NumberOfWrites = 0u;
    694e:	2300      	movs	r3, #0
    6950:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    uint8 NumberOfReads = 0u;
    6954:	2300      	movs	r3, #0
    6956:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    boolean ErrorFlag = FALSE;
    695a:	2300      	movs	r3, #0
    695c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45

    if (LPSPI_IP_BUSY == State->Status)
    6960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6962:	685b      	ldr	r3, [r3, #4]
    6964:	2b02      	cmp	r3, #2
    6966:	f040 821e 	bne.w	6da6 <Lpspi_Ip_TransferProcess+0x47a>
    {
        /* Read Status and clear all flags. */
        SrStatusRegister = Base->SR;
    696a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    696c:	695b      	ldr	r3, [r3, #20]
    696e:	930e      	str	r3, [sp, #56]	; 0x38
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    6970:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6972:	695b      	ldr	r3, [r3, #20]
    6974:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    6978:	9b10      	ldr	r3, [sp, #64]	; 0x40
    697a:	615a      	str	r2, [r3, #20]
        
        if ((SrStatusRegister & (LPSPI_SR_REF_MASK | LPSPI_SR_TEF_MASK)) != 0u)
    697c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    697e:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
    6982:	2b00      	cmp	r3, #0
    6984:	d003      	beq.n	698e <Lpspi_Ip_TransferProcess+0x62>
        {
            /* mark error flag */
            ErrorFlag = TRUE;
    6986:	2301      	movs	r3, #1
    6988:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
    698c:	e1f6      	b.n	6d7c <Lpspi_Ip_TransferProcess+0x450>
        }
        else
        {
            /* RECEIVE */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    698e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    6992:	0c1b      	lsrs	r3, r3, #16
    6994:	b2db      	uxtb	r3, r3
    6996:	f003 0307 	and.w	r3, r3, #7
    699a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
            if (NumberOfReads != 0u)
    699e:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    69a2:	2b00      	cmp	r3, #0
    69a4:	f000 80cb 	beq.w	6b3e <Lpspi_Ip_TransferProcess+0x212>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    69a8:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
    69ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69ae:	8b1b      	ldrh	r3, [r3, #24]
    69b0:	4619      	mov	r1, r3
    69b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69b4:	8a9b      	ldrh	r3, [r3, #20]
    69b6:	1acb      	subs	r3, r1, r3
    69b8:	429a      	cmp	r2, r3
    69ba:	dd08      	ble.n	69ce <Lpspi_Ip_TransferProcess+0xa2>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    69bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69be:	8b1b      	ldrh	r3, [r3, #24]
    69c0:	b2da      	uxtb	r2, r3
    69c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69c4:	8a9b      	ldrh	r3, [r3, #20]
    69c6:	b2db      	uxtb	r3, r3
    69c8:	1ad3      	subs	r3, r2, r3
    69ca:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out and
                  CurrentTxFifoSlot was minus 1 when prepare TX channel */
                if (0u == State->RxIndex)
    69ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69d0:	8a9b      	ldrh	r3, [r3, #20]
    69d2:	2b00      	cmp	r3, #0
    69d4:	d107      	bne.n	69e6 <Lpspi_Ip_TransferProcess+0xba>
                {
                    State->CurrentTxFifoSlot += 1u;
    69d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    69dc:	3301      	adds	r3, #1
    69de:	b2da      	uxtb	r2, r3
    69e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    69e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    69ea:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    69ee:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    69f2:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    69f6:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    69fa:	4a7d      	ldr	r2, [pc, #500]	; (6bf0 <Lpspi_Ip_TransferProcess+0x2c4>)
    69fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a00:	930c      	str	r3, [sp, #48]	; 0x30
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    6a02:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    6a06:	4a7b      	ldr	r2, [pc, #492]	; (6bf4 <Lpspi_Ip_TransferProcess+0x2c8>)
    6a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a0c:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 Data = 0u;
    6a0e:	2300      	movs	r3, #0
    6a10:	930a      	str	r3, [sp, #40]	; 0x28
    uint8 Index = 0u;
    6a12:	2300      	movs	r3, #0
    6a14:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    if (NULL_PTR != State->RxBuffer)
    6a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a1a:	689b      	ldr	r3, [r3, #8]
    6a1c:	2b00      	cmp	r3, #0
    6a1e:	d069      	beq.n	6af4 <Lpspi_Ip_TransferProcess+0x1c8>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    6a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a24:	68db      	ldr	r3, [r3, #12]
    6a26:	881b      	ldrh	r3, [r3, #0]
    6a28:	2b08      	cmp	r3, #8
    6a2a:	d81e      	bhi.n	6a6a <Lpspi_Ip_TransferProcess+0x13e>
            for (Index = 0; Index < NumberOfReads; Index++)
    6a2c:	2300      	movs	r3, #0
    6a2e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6a32:	e013      	b.n	6a5c <Lpspi_Ip_TransferProcess+0x130>
                Data = Base->RDR;
    6a34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6a38:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    6a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a3c:	689b      	ldr	r3, [r3, #8]
    6a3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6a40:	8a92      	ldrh	r2, [r2, #20]
    6a42:	4611      	mov	r1, r2
    6a44:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    6a48:	440a      	add	r2, r1
    6a4a:	4413      	add	r3, r2
    6a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6a4e:	b2d2      	uxtb	r2, r2
    6a50:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    6a52:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6a56:	3301      	adds	r3, #1
    6a58:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6a5c:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    6a60:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6a64:	429a      	cmp	r2, r3
    6a66:	d8e5      	bhi.n	6a34 <Lpspi_Ip_TransferProcess+0x108>
    6a68:	e055      	b.n	6b16 <Lpspi_Ip_TransferProcess+0x1ea>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    6a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6a6e:	68db      	ldr	r3, [r3, #12]
    6a70:	881b      	ldrh	r3, [r3, #0]
    6a72:	2b10      	cmp	r3, #16
    6a74:	d81f      	bhi.n	6ab6 <Lpspi_Ip_TransferProcess+0x18a>
            for (Index = 0; Index < NumberOfReads; Index++)
    6a76:	2300      	movs	r3, #0
    6a78:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6a7c:	e014      	b.n	6aa8 <Lpspi_Ip_TransferProcess+0x17c>
                Data = Base->RDR;
    6a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6a82:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    6a84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a86:	689a      	ldr	r2, [r3, #8]
    6a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6a8a:	8a9b      	ldrh	r3, [r3, #20]
    6a8c:	4619      	mov	r1, r3
    6a8e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6a92:	440b      	add	r3, r1
    6a94:	005b      	lsls	r3, r3, #1
    6a96:	4413      	add	r3, r2
    6a98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6a9a:	b292      	uxth	r2, r2
    6a9c:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    6a9e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6aa2:	3301      	adds	r3, #1
    6aa4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6aa8:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    6aac:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6ab0:	429a      	cmp	r2, r3
    6ab2:	d8e4      	bhi.n	6a7e <Lpspi_Ip_TransferProcess+0x152>
    6ab4:	e02f      	b.n	6b16 <Lpspi_Ip_TransferProcess+0x1ea>
            for (Index = 0; Index < NumberOfReads; Index++)
    6ab6:	2300      	movs	r3, #0
    6ab8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6abc:	e013      	b.n	6ae6 <Lpspi_Ip_TransferProcess+0x1ba>
                Data = Base->RDR;
    6abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    6ac2:	930a      	str	r3, [sp, #40]	; 0x28
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    6ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6ac6:	689a      	ldr	r2, [r3, #8]
    6ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6aca:	8a9b      	ldrh	r3, [r3, #20]
    6acc:	4619      	mov	r1, r3
    6ace:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6ad2:	440b      	add	r3, r1
    6ad4:	009b      	lsls	r3, r3, #2
    6ad6:	4413      	add	r3, r2
    6ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6ada:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    6adc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6ae0:	3301      	adds	r3, #1
    6ae2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6ae6:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    6aea:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6aee:	429a      	cmp	r2, r3
    6af0:	d8e5      	bhi.n	6abe <Lpspi_Ip_TransferProcess+0x192>
    6af2:	e010      	b.n	6b16 <Lpspi_Ip_TransferProcess+0x1ea>
        for (Index = 0; Index < NumberOfReads; Index++)
    6af4:	2300      	movs	r3, #0
    6af6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6afa:	e006      	b.n	6b0a <Lpspi_Ip_TransferProcess+0x1de>
            (void)Base->RDR;
    6afc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    6b00:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6b04:	3301      	adds	r3, #1
    6b06:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    6b0a:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
    6b0e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    6b12:	429a      	cmp	r2, r3
    6b14:	d8f2      	bhi.n	6afc <Lpspi_Ip_TransferProcess+0x1d0>
    State->RxIndex += NumberOfReads;
    6b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6b18:	8a9a      	ldrh	r2, [r3, #20]
    6b1a:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    6b1e:	b29b      	uxth	r3, r3
    6b20:	4413      	add	r3, r2
    6b22:	b29a      	uxth	r2, r3
    6b24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6b26:	829a      	strh	r2, [r3, #20]
}
    6b28:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    6b2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b2c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    6b30:	f89d 3046 	ldrb.w	r3, [sp, #70]	; 0x46
    6b34:	4413      	add	r3, r2
    6b36:	b2da      	uxtb	r2, r3
    6b38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            to fill TX FIFO. At that time, another interrupt occurred and preemptive current interrupt, and the time to process that interrupt is longer than the time to transfer all frames 
            in TX FIFO. So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from that interrupt and fill TX FIFO until full and exist SPI interrupt function. 
            And if there is a interrupt occurred with higher priority of SPI interrupt and the time to process that interrupt is longer than the time to transfer all frames in TX FIFO. 
            So, RX FIFO can be overflow due to SPI interrupt function is not serviced to read RX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (State->TxDoneFlag != TRUE))
    6b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    6b44:	2b00      	cmp	r3, #0
    6b46:	f000 8119 	beq.w	6d7c <Lpspi_Ip_TransferProcess+0x450>
    6b4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    6b50:	f083 0301 	eor.w	r3, r3, #1
    6b54:	b2db      	uxtb	r3, r3
    6b56:	2b00      	cmp	r3, #0
    6b58:	f000 8110 	beq.w	6d7c <Lpspi_Ip_TransferProcess+0x450>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    6b5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b5e:	8b5a      	ldrh	r2, [r3, #26]
    6b60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b62:	8adb      	ldrh	r3, [r3, #22]
    6b64:	429a      	cmp	r2, r3
    6b66:	f000 80ca 	beq.w	6cfe <Lpspi_Ip_TransferProcess+0x3d2>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    6b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    6b70:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    6b74:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
    6b78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b7a:	8b5b      	ldrh	r3, [r3, #26]
    6b7c:	4619      	mov	r1, r3
    6b7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b80:	8adb      	ldrh	r3, [r3, #22]
    6b82:	1acb      	subs	r3, r1, r3
    6b84:	429a      	cmp	r2, r3
    6b86:	dd08      	ble.n	6b9a <Lpspi_Ip_TransferProcess+0x26e>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    6b88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b8a:	8b5b      	ldrh	r3, [r3, #26]
    6b8c:	b2da      	uxtb	r2, r3
    6b8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6b90:	8adb      	ldrh	r3, [r3, #22]
    6b92:	b2db      	uxtb	r3, r3
    6b94:	1ad3      	subs	r3, r2, r3
    6b96:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    6b9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b9e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    6ba2:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    6ba6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    6baa:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    6bae:	4a10      	ldr	r2, [pc, #64]	; (6bf0 <Lpspi_Ip_TransferProcess+0x2c4>)
    6bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bb4:	9308      	str	r3, [sp, #32]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    6bb6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    6bba:	4a0e      	ldr	r2, [pc, #56]	; (6bf4 <Lpspi_Ip_TransferProcess+0x2c8>)
    6bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bc0:	9307      	str	r3, [sp, #28]
    uint32 Data = 0u;
    6bc2:	2300      	movs	r3, #0
    6bc4:	9306      	str	r3, [sp, #24]
    uint8 Index = 0u;
    6bc6:	2300      	movs	r3, #0
    6bc8:	f88d 3017 	strb.w	r3, [sp, #23]
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    6bcc:	9b07      	ldr	r3, [sp, #28]
    6bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6bd0:	68db      	ldr	r3, [r3, #12]
    6bd2:	685b      	ldr	r3, [r3, #4]
    6bd4:	9306      	str	r3, [sp, #24]
    if (NULL_PTR != State->TxBuffer)
    6bd6:	9b07      	ldr	r3, [sp, #28]
    6bd8:	68db      	ldr	r3, [r3, #12]
    6bda:	2b00      	cmp	r3, #0
    6bdc:	d068      	beq.n	6cb0 <Lpspi_Ip_TransferProcess+0x384>
        if (State->TxFrameSize < 9u)
    6bde:	9b07      	ldr	r3, [sp, #28]
    6be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6be2:	2b08      	cmp	r3, #8
    6be4:	d822      	bhi.n	6c2c <Lpspi_Ip_TransferProcess+0x300>
            for (Index = 0; Index < NumberOfWrites; Index++)
    6be6:	2300      	movs	r3, #0
    6be8:	f88d 3017 	strb.w	r3, [sp, #23]
    6bec:	e017      	b.n	6c1e <Lpspi_Ip_TransferProcess+0x2f2>
    6bee:	bf00      	nop
    6bf0:	0000ad64 	.word	0x0000ad64
    6bf4:	1fff8d38 	.word	0x1fff8d38
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    6bf8:	9b07      	ldr	r3, [sp, #28]
    6bfa:	68db      	ldr	r3, [r3, #12]
    6bfc:	9a07      	ldr	r2, [sp, #28]
    6bfe:	8ad2      	ldrh	r2, [r2, #22]
    6c00:	4611      	mov	r1, r2
    6c02:	f89d 2017 	ldrb.w	r2, [sp, #23]
    6c06:	440a      	add	r2, r1
    6c08:	4413      	add	r3, r2
    6c0a:	781b      	ldrb	r3, [r3, #0]
    6c0c:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    6c0e:	9b08      	ldr	r3, [sp, #32]
    6c10:	9a06      	ldr	r2, [sp, #24]
    6c12:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    6c14:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c18:	3301      	adds	r3, #1
    6c1a:	f88d 3017 	strb.w	r3, [sp, #23]
    6c1e:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    6c22:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c26:	429a      	cmp	r2, r3
    6c28:	d8e6      	bhi.n	6bf8 <Lpspi_Ip_TransferProcess+0x2cc>
    6c2a:	e053      	b.n	6cd4 <Lpspi_Ip_TransferProcess+0x3a8>
        else if (State->TxFrameSize < 17u)
    6c2c:	9b07      	ldr	r3, [sp, #28]
    6c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6c30:	2b10      	cmp	r3, #16
    6c32:	d81e      	bhi.n	6c72 <Lpspi_Ip_TransferProcess+0x346>
            for (Index = 0; Index < NumberOfWrites; Index++)
    6c34:	2300      	movs	r3, #0
    6c36:	f88d 3017 	strb.w	r3, [sp, #23]
    6c3a:	e013      	b.n	6c64 <Lpspi_Ip_TransferProcess+0x338>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    6c3c:	9b07      	ldr	r3, [sp, #28]
    6c3e:	68da      	ldr	r2, [r3, #12]
    6c40:	9b07      	ldr	r3, [sp, #28]
    6c42:	8adb      	ldrh	r3, [r3, #22]
    6c44:	4619      	mov	r1, r3
    6c46:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c4a:	440b      	add	r3, r1
    6c4c:	005b      	lsls	r3, r3, #1
    6c4e:	4413      	add	r3, r2
    6c50:	881b      	ldrh	r3, [r3, #0]
    6c52:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    6c54:	9b08      	ldr	r3, [sp, #32]
    6c56:	9a06      	ldr	r2, [sp, #24]
    6c58:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    6c5a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c5e:	3301      	adds	r3, #1
    6c60:	f88d 3017 	strb.w	r3, [sp, #23]
    6c64:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    6c68:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c6c:	429a      	cmp	r2, r3
    6c6e:	d8e5      	bhi.n	6c3c <Lpspi_Ip_TransferProcess+0x310>
    6c70:	e030      	b.n	6cd4 <Lpspi_Ip_TransferProcess+0x3a8>
            for (Index = 0; Index < NumberOfWrites; Index++)
    6c72:	2300      	movs	r3, #0
    6c74:	f88d 3017 	strb.w	r3, [sp, #23]
    6c78:	e013      	b.n	6ca2 <Lpspi_Ip_TransferProcess+0x376>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    6c7a:	9b07      	ldr	r3, [sp, #28]
    6c7c:	68da      	ldr	r2, [r3, #12]
    6c7e:	9b07      	ldr	r3, [sp, #28]
    6c80:	8adb      	ldrh	r3, [r3, #22]
    6c82:	4619      	mov	r1, r3
    6c84:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c88:	440b      	add	r3, r1
    6c8a:	009b      	lsls	r3, r3, #2
    6c8c:	4413      	add	r3, r2
    6c8e:	681b      	ldr	r3, [r3, #0]
    6c90:	9306      	str	r3, [sp, #24]
                Base->TDR = Data;
    6c92:	9b08      	ldr	r3, [sp, #32]
    6c94:	9a06      	ldr	r2, [sp, #24]
    6c96:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    6c98:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6c9c:	3301      	adds	r3, #1
    6c9e:	f88d 3017 	strb.w	r3, [sp, #23]
    6ca2:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    6ca6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6caa:	429a      	cmp	r2, r3
    6cac:	d8e5      	bhi.n	6c7a <Lpspi_Ip_TransferProcess+0x34e>
    6cae:	e011      	b.n	6cd4 <Lpspi_Ip_TransferProcess+0x3a8>
        for (Index = 0; Index < NumberOfWrites; Index++)
    6cb0:	2300      	movs	r3, #0
    6cb2:	f88d 3017 	strb.w	r3, [sp, #23]
    6cb6:	e007      	b.n	6cc8 <Lpspi_Ip_TransferProcess+0x39c>
            Base->TDR = Data;
    6cb8:	9b08      	ldr	r3, [sp, #32]
    6cba:	9a06      	ldr	r2, [sp, #24]
    6cbc:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    6cbe:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6cc2:	3301      	adds	r3, #1
    6cc4:	f88d 3017 	strb.w	r3, [sp, #23]
    6cc8:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    6ccc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6cd0:	429a      	cmp	r2, r3
    6cd2:	d8f1      	bhi.n	6cb8 <Lpspi_Ip_TransferProcess+0x38c>
    State->TxIndex += NumberOfWrites;
    6cd4:	9b07      	ldr	r3, [sp, #28]
    6cd6:	8ada      	ldrh	r2, [r3, #22]
    6cd8:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    6cdc:	b29b      	uxth	r3, r3
    6cde:	4413      	add	r3, r2
    6ce0:	b29a      	uxth	r2, r3
    6ce2:	9b07      	ldr	r3, [sp, #28]
    6ce4:	82da      	strh	r2, [r3, #22]
}
    6ce6:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    6ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6cea:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    6cee:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    6cf2:	1ad3      	subs	r3, r2, r3
    6cf4:	b2da      	uxtb	r2, r3
    6cf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    6cfc:	e03e      	b.n	6d7c <Lpspi_Ip_TransferProcess+0x450>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    6cfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    6d04:	2b00      	cmp	r3, #0
    6d06:	d01c      	beq.n	6d42 <Lpspi_Ip_TransferProcess+0x416>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    6d08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6d0c:	68db      	ldr	r3, [r3, #12]
    6d0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6d10:	6b52      	ldr	r2, [r2, #52]	; 0x34
    6d12:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    6d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d16:	2200      	movs	r2, #0
    6d18:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    6d1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    6d1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d20:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    6d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d24:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    6d28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d2a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    6d2c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    6d30:	9300      	str	r3, [sp, #0]
    6d32:	4623      	mov	r3, r4
    6d34:	f000 fb7a 	bl	742c <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    6d38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d3a:	2200      	movs	r2, #0
    6d3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    6d40:	e01c      	b.n	6d7c <Lpspi_Ip_TransferProcess+0x450>
                    }
                    else
                    {
                        State->TxDoneFlag = TRUE;
    6d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d44:	2201      	movs	r2, #1
    6d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                        /* Disable TX interrupt */
                        Base->IER &= ~LPSPI_IER_TDIE_MASK;
    6d4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d4c:	699b      	ldr	r3, [r3, #24]
    6d4e:	f023 0201 	bic.w	r2, r3, #1
    6d52:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d54:	619a      	str	r2, [r3, #24]
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    6d56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d58:	7f1b      	ldrb	r3, [r3, #28]
    6d5a:	f083 0301 	eor.w	r3, r3, #1
    6d5e:	b2db      	uxtb	r3, r3
    6d60:	2b00      	cmp	r3, #0
    6d62:	d00b      	beq.n	6d7c <Lpspi_Ip_TransferProcess+0x450>
    6d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    6d6c:	2b00      	cmp	r3, #0
    6d6e:	d005      	beq.n	6d7c <Lpspi_Ip_TransferProcess+0x450>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    6d70:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    6d74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    6d78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d7a:	661a      	str	r2, [r3, #96]	; 0x60
                }
            }
        }
        
        /* End of transfer */
        if((State->RxIndex == State->ExpectedFifoReads) || (TRUE == ErrorFlag))
    6d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d7e:	8a9a      	ldrh	r2, [r3, #20]
    6d80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6d82:	8b1b      	ldrh	r3, [r3, #24]
    6d84:	429a      	cmp	r2, r3
    6d86:	d003      	beq.n	6d90 <Lpspi_Ip_TransferProcess+0x464>
    6d88:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	d00a      	beq.n	6da6 <Lpspi_Ip_TransferProcess+0x47a>
                Base->TCR |= LPSPI_TCR_RXMSK(1);
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12();
            }
            #endif
            /* Disable interrupts */
            Base->IER = 0u;
    6d90:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6d92:	2200      	movs	r2, #0
    6d94:	619a      	str	r2, [r3, #24]
            Lpspi_Ip_ChannelFinished(Instance, ErrorFlag);
    6d96:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
    6d9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6d9e:	4611      	mov	r1, r2
    6da0:	4618      	mov	r0, r3
    6da2:	f7ff fd91 	bl	68c8 <Lpspi_Ip_ChannelFinished>
        }
    }
}
    6da6:	bf00      	nop
    6da8:	b012      	add	sp, #72	; 0x48
    6daa:	bd10      	pop	{r4, pc}

00006dac <Lpspi_Ip_Init>:
    OsIf_Trusted_Call1param(Lpspi_Ip_SetUserAccess, Instance);
}
#endif /* LPSPI_IP_ENABLE_USER_MODE_SUPPORT */
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_Init(const Lpspi_Ip_ConfigType *PhyUnitConfigPtr)
{
    6dac:	b500      	push	{lr}
    6dae:	b087      	sub	sp, #28
    6db0:	9001      	str	r0, [sp, #4]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    6db2:	2300      	movs	r3, #0
    6db4:	9305      	str	r3, [sp, #20]
    uint8 Instance = 0u;
    6db6:	2300      	movs	r3, #0
    6db8:	f88d 3013 	strb.w	r3, [sp, #19]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(PhyUnitConfigPtr != NULL_PTR);
    #endif
    Instance = PhyUnitConfigPtr->Instance;
    6dbc:	9b01      	ldr	r3, [sp, #4]
    6dbe:	781b      	ldrb	r3, [r3, #0]
    6dc0:	f88d 3013 	strb.w	r3, [sp, #19]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    6dc4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6dc8:	4a23      	ldr	r2, [pc, #140]	; (6e58 <Lpspi_Ip_Init+0xac>)
    6dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dce:	9303      	str	r3, [sp, #12]
    Base = Lpspi_Ip_apxBases[Instance];
    6dd0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6dd4:	4a21      	ldr	r2, [pc, #132]	; (6e5c <Lpspi_Ip_Init+0xb0>)
    6dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dda:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State == NULL_PTR);
    #endif
    Lpspi_Ip_apxStateStructureArray[Instance] = &Lpspi_Ip_axStateStructure[PhyUnitConfigPtr->StateIndex];
    6ddc:	9b01      	ldr	r3, [sp, #4]
    6dde:	7c1b      	ldrb	r3, [r3, #16]
    6de0:	461a      	mov	r2, r3
    6de2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6de6:	0192      	lsls	r2, r2, #6
    6de8:	491d      	ldr	r1, [pc, #116]	; (6e60 <Lpspi_Ip_Init+0xb4>)
    6dea:	440a      	add	r2, r1
    6dec:	491a      	ldr	r1, [pc, #104]	; (6e58 <Lpspi_Ip_Init+0xac>)
    6dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    6df2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6df6:	4a18      	ldr	r2, [pc, #96]	; (6e58 <Lpspi_Ip_Init+0xac>)
    6df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dfc:	9303      	str	r3, [sp, #12]
    State->PhyUnitConfig = PhyUnitConfigPtr;
    6dfe:	9b03      	ldr	r3, [sp, #12]
    6e00:	9a01      	ldr	r2, [sp, #4]
    6e02:	621a      	str	r2, [r3, #32]
    /* enable in debug mode to ensure CS will be kept when CPU halts at breakpoint */
    Base->CR = PhyUnitConfigPtr->Cr | LPSPI_CR_DBGEN_MASK;
    6e04:	9b01      	ldr	r3, [sp, #4]
    6e06:	685b      	ldr	r3, [r3, #4]
    6e08:	f043 0208 	orr.w	r2, r3, #8
    6e0c:	9b02      	ldr	r3, [sp, #8]
    6e0e:	611a      	str	r2, [r3, #16]
    Base->CFGR1 = PhyUnitConfigPtr->Cfgr1;
    6e10:	9b01      	ldr	r3, [sp, #4]
    6e12:	689a      	ldr	r2, [r3, #8]
    6e14:	9b02      	ldr	r3, [sp, #8]
    6e16:	625a      	str	r2, [r3, #36]	; 0x24
    /* Set TX WATER. it will be set again in DMA mode */
    Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    6e18:	9b02      	ldr	r3, [sp, #8]
    6e1a:	2203      	movs	r2, #3
    6e1c:	659a      	str	r2, [r3, #88]	; 0x58
    #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    State->ClockMode = LPSPI_IP_NORMAL_CLOCK;
    #endif
    State->KeepCs = FALSE;
    6e1e:	9b03      	ldr	r3, [sp, #12]
    6e20:	2200      	movs	r2, #0
    6e22:	771a      	strb	r2, [r3, #28]
    State->FirstCmd = TRUE;
    6e24:	9b03      	ldr	r3, [sp, #12]
    6e26:	2201      	movs	r2, #1
    6e28:	775a      	strb	r2, [r3, #29]
    #if ((STD_ON == LPSPI_IP_DMA_USED) && (STD_ON == LPSPI_IP_ENABLE_DMAFASTTRANSFER_SUPPORT))
    Lpspi_Ip_TxDmaTcdSGInit(Instance);
    Lpspi_Ip_RxDmaTcdSGInit(Instance);
    #endif
    /* set State to idle */
    State->Status = LPSPI_IP_IDLE;
    6e2a:	9b03      	ldr	r3, [sp, #12]
    6e2c:	2201      	movs	r2, #1
    6e2e:	605a      	str	r2, [r3, #4]
    (void)Lpspi_Ip_UpdateTransferMode(Instance, PhyUnitConfigPtr->TransferMode);
    6e30:	9b01      	ldr	r3, [sp, #4]
    6e32:	68da      	ldr	r2, [r3, #12]
    6e34:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6e38:	4611      	mov	r1, r2
    6e3a:	4618      	mov	r0, r3
    6e3c:	f000 fd10 	bl	7860 <Lpspi_Ip_UpdateTransferMode>
    
    /* Enable SPI module */
    Base->CR |= LPSPI_CR_MEN_MASK;
    6e40:	9b02      	ldr	r3, [sp, #8]
    6e42:	691b      	ldr	r3, [r3, #16]
    6e44:	f043 0201 	orr.w	r2, r3, #1
    6e48:	9b02      	ldr	r3, [sp, #8]
    6e4a:	611a      	str	r2, [r3, #16]
    return Status;
    6e4c:	9b05      	ldr	r3, [sp, #20]
}
    6e4e:	4618      	mov	r0, r3
    6e50:	b007      	add	sp, #28
    6e52:	f85d fb04 	ldr.w	pc, [sp], #4
    6e56:	bf00      	nop
    6e58:	1fff8d38 	.word	0x1fff8d38
    6e5c:	0000ad64 	.word	0x0000ad64
    6e60:	1fff8cf8 	.word	0x1fff8cf8

00006e64 <Lpspi_Ip_DeInit>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_DeInit(uint8 Instance)
{
    6e64:	b086      	sub	sp, #24
    6e66:	4603      	mov	r3, r0
    6e68:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    6e6c:	2300      	movs	r3, #0
    6e6e:	9305      	str	r3, [sp, #20]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    6e70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e74:	4a11      	ldr	r2, [pc, #68]	; (6ebc <Lpspi_Ip_DeInit+0x58>)
    6e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e7a:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    6e7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e80:	4a0f      	ldr	r2, [pc, #60]	; (6ec0 <Lpspi_Ip_DeInit+0x5c>)
    6e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e86:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_BUSY == State->Status)
    6e88:	9b03      	ldr	r3, [sp, #12]
    6e8a:	685b      	ldr	r3, [r3, #4]
    6e8c:	2b02      	cmp	r3, #2
    6e8e:	d102      	bne.n	6e96 <Lpspi_Ip_DeInit+0x32>
    {
        Status = LPSPI_IP_STATUS_FAIL;
    6e90:	2301      	movs	r3, #1
    6e92:	9305      	str	r3, [sp, #20]
    6e94:	e00e      	b.n	6eb4 <Lpspi_Ip_DeInit+0x50>
    }
    else
    {
        /* Use reset hardware feature. */
        Base->CR |= LPSPI_CR_RST(1u);
    6e96:	9b04      	ldr	r3, [sp, #16]
    6e98:	691b      	ldr	r3, [r3, #16]
    6e9a:	f043 0202 	orr.w	r2, r3, #2
    6e9e:	9b04      	ldr	r3, [sp, #16]
    6ea0:	611a      	str	r2, [r3, #16]
        Base->CR = 0;
    6ea2:	9b04      	ldr	r3, [sp, #16]
    6ea4:	2200      	movs	r2, #0
    6ea6:	611a      	str	r2, [r3, #16]

        Lpspi_Ip_apxStateStructureArray[Instance] = NULL_PTR;
    6ea8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6eac:	4a04      	ldr	r2, [pc, #16]	; (6ec0 <Lpspi_Ip_DeInit+0x5c>)
    6eae:	2100      	movs	r1, #0
    6eb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    return Status;
    6eb4:	9b05      	ldr	r3, [sp, #20]
}
    6eb6:	4618      	mov	r0, r3
    6eb8:	b006      	add	sp, #24
    6eba:	4770      	bx	lr
    6ebc:	0000ad64 	.word	0x0000ad64
    6ec0:	1fff8d38 	.word	0x1fff8d38

00006ec4 <Lpspi_Ip_SyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            uint32 TimeOut
                                         )
{
    6ec4:	b510      	push	{r4, lr}
    6ec6:	b09a      	sub	sp, #104	; 0x68
    6ec8:	9005      	str	r0, [sp, #20]
    6eca:	9104      	str	r1, [sp, #16]
    6ecc:	9203      	str	r2, [sp, #12]
    6ece:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type *Base;
    Lpspi_Ip_StateStructureType *State;
    uint8 NumberOfWrites, NumberOfReads;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    6ed2:	2300      	movs	r3, #0
    6ed4:	9318      	str	r3, [sp, #96]	; 0x60
    uint32 TimeoutTicks = OsIf_MicrosToTicks(TimeOut, LPSPI_IP_TIMEOUT_METHOD);
    6ed6:	2100      	movs	r1, #0
    6ed8:	981c      	ldr	r0, [sp, #112]	; 0x70
    6eda:	f7fa fe9f 	bl	1c1c <OsIf_MicrosToTicks>
    6ede:	9015      	str	r0, [sp, #84]	; 0x54
    uint32 CurrentTicks = 0u; /* initialize current counter */
    6ee0:	2300      	movs	r3, #0
    6ee2:	9307      	str	r3, [sp, #28]
    uint32 ElapsedTicks = 0u; /* elapsed will give timeout */
    6ee4:	2300      	movs	r3, #0
    6ee6:	9317      	str	r3, [sp, #92]	; 0x5c
    uint8 Instance = 0u;
    6ee8:	2300      	movs	r3, #0
    6eea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    uint32 Cfgr1 = 0u;
    6eee:	2300      	movs	r3, #0
    6ef0:	9313      	str	r3, [sp, #76]	; 0x4c
    boolean TxDoneFlag = FALSE;
    6ef2:	2300      	movs	r3, #0
    6ef4:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    DevAssert(0u != TimeOut);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    6ef8:	9b05      	ldr	r3, [sp, #20]
    6efa:	781b      	ldrb	r3, [r3, #0]
    6efc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    6f00:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    6f04:	4a92      	ldr	r2, [pc, #584]	; (7150 <Lpspi_Ip_SyncTransmit+0x28c>)
    6f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f0a:	9312      	str	r3, [sp, #72]	; 0x48
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];    
    6f0c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    6f10:	4a90      	ldr	r2, [pc, #576]	; (7154 <Lpspi_Ip_SyncTransmit+0x290>)
    6f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f16:	9311      	str	r3, [sp, #68]	; 0x44
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08();
    6f18:	f002 ff9c 	bl	9e54 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>
    if (LPSPI_IP_BUSY == State->Status)
    6f1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f1e:	685b      	ldr	r3, [r3, #4]
    6f20:	2b02      	cmp	r3, #2
    6f22:	d104      	bne.n	6f2e <Lpspi_Ip_SyncTransmit+0x6a>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    6f24:	f002 ffc2 	bl	9eac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        Status = LPSPI_IP_STATUS_FAIL;
    6f28:	2301      	movs	r3, #1
    6f2a:	9318      	str	r3, [sp, #96]	; 0x60
    6f2c:	e276      	b.n	741c <Lpspi_Ip_SyncTransmit+0x558>
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    6f2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f30:	2202      	movs	r2, #2
    6f32:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    6f34:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f36:	9a05      	ldr	r2, [sp, #20]
    6f38:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08();
    6f3a:	f002 ffb7 	bl	9eac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>
        
        /* Disable DMA requests and all interrupts */
        Base->DER = 0u;
    6f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f40:	2200      	movs	r2, #0
    6f42:	61da      	str	r2, [r3, #28]
        Base->IER = 0u;
    6f44:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f46:	2200      	movs	r2, #0
    6f48:	619a      	str	r2, [r3, #24]
        
        /* Update State structure. */
        State->NextTransferConfigAvailable = State->KeepCs;
    6f4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f4c:	7f1a      	ldrb	r2, [r3, #28]
    6f4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    6f54:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f56:	7f5b      	ldrb	r3, [r3, #29]
    6f58:	2b00      	cmp	r3, #0
    6f5a:	d030      	beq.n	6fbe <Lpspi_Ip_SyncTransmit+0xfa>
            /* Makes sure that FIFOs will be empty before start new transfer session. 
            There is maybe a frame in RX shifter register (previous transfer is broken and CS did not de-assert).
            So use reset FIFO do not prevent the potential issue. So reset module by software reset bit should be used here */
            /* Reset FIFOs using CR[RST] bit */
            /* store CFGR1 and restore after all registers are reset */
            Cfgr1 = Base->CFGR1;
    6f5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f60:	9313      	str	r3, [sp, #76]	; 0x4c
            Base->CR |= LPSPI_CR_RST_MASK;
    6f62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f64:	691b      	ldr	r3, [r3, #16]
    6f66:	f043 0202 	orr.w	r2, r3, #2
    6f6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f6c:	611a      	str	r2, [r3, #16]
            Base->CR &= ~LPSPI_CR_RST_MASK;
    6f6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f70:	691b      	ldr	r3, [r3, #16]
    6f72:	f023 0202 	bic.w	r2, r3, #2
    6f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f78:	611a      	str	r2, [r3, #16]
            /* restore CFGR1 */
            Base->CFGR1 = Cfgr1;
    6f7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6f7e:	625a      	str	r2, [r3, #36]	; 0x24
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    6f80:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f82:	695b      	ldr	r3, [r3, #20]
    6f84:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    6f88:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f8a:	615a      	str	r2, [r3, #20]

            #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
            Base->CCR = ExternalDevice->Ccr[State->ClockMode];
            #else
            Base->CCR = ExternalDevice->Ccr;
    6f8c:	9b05      	ldr	r3, [sp, #20]
    6f8e:	685a      	ldr	r2, [r3, #4]
    6f90:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6f92:	641a      	str	r2, [r3, #64]	; 0x40
            #endif
                /* Reset current FIFO slots are available to fill at beginning of job (HLD).*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    6f94:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f96:	2204      	movs	r2, #4
    6f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    6f9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6fa0:	68db      	ldr	r3, [r3, #12]
    6fa2:	881a      	ldrh	r2, [r3, #0]
    6fa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6fa8:	68db      	ldr	r3, [r3, #12]
    6faa:	7899      	ldrb	r1, [r3, #2]
    6fac:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    6fb0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6fb4:	9300      	str	r3, [sp, #0]
    6fb6:	460b      	mov	r3, r1
    6fb8:	9904      	ldr	r1, [sp, #16]
    6fba:	f000 fa37 	bl	742c <Lpspi_TransmitTxInit>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    6fbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6fc2:	68db      	ldr	r3, [r3, #12]
    6fc4:	881a      	ldrh	r2, [r3, #0]
    6fc6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6fca:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    6fce:	9903      	ldr	r1, [sp, #12]
    6fd0:	f000 facc 	bl	756c <Lpspi_TransmitRxInit>
        /* initialize current counter */
        CurrentTicks = OsIf_GetCounter(LPSPI_IP_TIMEOUT_METHOD);
    6fd4:	2000      	movs	r0, #0
    6fd6:	f7fa fdd5 	bl	1b84 <OsIf_GetCounter>
    6fda:	4603      	mov	r3, r0
    6fdc:	9307      	str	r3, [sp, #28]
        while(State->RxIndex != State->ExpectedFifoReads)
    6fde:	e202      	b.n	73e6 <Lpspi_Ip_SyncTransmit+0x522>
        {
            /* RECEIVE DATA */
            /* The receiving should be performed first because maybe have a last frame in RX FIFO from previous channel
                , it should be read to clear RXFIFO before start a new write to TXFIFO */
            /* Read all Data available in receive HW fifo. */
            NumberOfReads = (uint8)(((Base->FSR) & LPSPI_FSR_RXCOUNT_MASK) >> LPSPI_FSR_RXCOUNT_SHIFT);
    6fe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    6fe4:	0c1b      	lsrs	r3, r3, #16
    6fe6:	b2db      	uxtb	r3, r3
    6fe8:	f003 0307 	and.w	r3, r3, #7
    6fec:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
            /* Limits to remaining frames. */
            
            if (NumberOfReads != 0u)
    6ff0:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    6ff4:	2b00      	cmp	r3, #0
    6ff6:	f000 80d2 	beq.w	719e <Lpspi_Ip_SyncTransmit+0x2da>
            {
                if (NumberOfReads > (State->ExpectedFifoReads - State->RxIndex))
    6ffa:	f89d 2066 	ldrb.w	r2, [sp, #102]	; 0x66
    6ffe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7000:	8b1b      	ldrh	r3, [r3, #24]
    7002:	4619      	mov	r1, r3
    7004:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7006:	8a9b      	ldrh	r3, [r3, #20]
    7008:	1acb      	subs	r3, r1, r3
    700a:	429a      	cmp	r2, r3
    700c:	dd08      	ble.n	7020 <Lpspi_Ip_SyncTransmit+0x15c>
                {
                    NumberOfReads = (uint8)(State->ExpectedFifoReads - State->RxIndex);
    700e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7010:	8b1b      	ldrh	r3, [r3, #24]
    7012:	b2da      	uxtb	r2, r3
    7014:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7016:	8a9b      	ldrh	r3, [r3, #20]
    7018:	b2db      	uxtb	r3, r3
    701a:	1ad3      	subs	r3, r2, r3
    701c:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
                }
                /* If these are the first frames of this channel. Current TXFIFO slot must be plus 1 because the slot of CMD have moved out */
                if (0u == State->RxIndex)
    7020:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7022:	8a9b      	ldrh	r3, [r3, #20]
    7024:	2b00      	cmp	r3, #0
    7026:	d107      	bne.n	7038 <Lpspi_Ip_SyncTransmit+0x174>
                {
                    State->CurrentTxFifoSlot += 1u;
    7028:	9b12      	ldr	r3, [sp, #72]	; 0x48
    702a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    702e:	3301      	adds	r3, #1
    7030:	b2da      	uxtb	r2, r3
    7032:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    7038:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    703c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    7040:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    7044:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    const LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    7048:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    704c:	4a41      	ldr	r2, [pc, #260]	; (7154 <Lpspi_Ip_SyncTransmit+0x290>)
    704e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7052:	930f      	str	r3, [sp, #60]	; 0x3c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    7054:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    7058:	4a3d      	ldr	r2, [pc, #244]	; (7150 <Lpspi_Ip_SyncTransmit+0x28c>)
    705a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    705e:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 Data = 0u;
    7060:	2300      	movs	r3, #0
    7062:	930d      	str	r3, [sp, #52]	; 0x34
    uint8 Index = 0u;
    7064:	2300      	movs	r3, #0
    7066:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    if (NULL_PTR != State->RxBuffer)
    706a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    706c:	689b      	ldr	r3, [r3, #8]
    706e:	2b00      	cmp	r3, #0
    7070:	d069      	beq.n	7146 <Lpspi_Ip_SyncTransmit+0x282>
        if (State->ExternalDevice->DeviceParams->FrameSize < 9u)
    7072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7076:	68db      	ldr	r3, [r3, #12]
    7078:	881b      	ldrh	r3, [r3, #0]
    707a:	2b08      	cmp	r3, #8
    707c:	d81e      	bhi.n	70bc <Lpspi_Ip_SyncTransmit+0x1f8>
            for (Index = 0; Index < NumberOfReads; Index++)
    707e:	2300      	movs	r3, #0
    7080:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    7084:	e013      	b.n	70ae <Lpspi_Ip_SyncTransmit+0x1ea>
                Data = Base->RDR;
    7086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    708a:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint8*)(&State->RxBuffer[State->RxIndex + Index])) = (uint8)Data;
    708c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    708e:	689b      	ldr	r3, [r3, #8]
    7090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7092:	8a92      	ldrh	r2, [r2, #20]
    7094:	4611      	mov	r1, r2
    7096:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
    709a:	440a      	add	r2, r1
    709c:	4413      	add	r3, r2
    709e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    70a0:	b2d2      	uxtb	r2, r2
    70a2:	701a      	strb	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    70a4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    70a8:	3301      	adds	r3, #1
    70aa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    70ae:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    70b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    70b6:	429a      	cmp	r2, r3
    70b8:	d8e5      	bhi.n	7086 <Lpspi_Ip_SyncTransmit+0x1c2>
    70ba:	e05a      	b.n	7172 <Lpspi_Ip_SyncTransmit+0x2ae>
        else if (State->ExternalDevice->DeviceParams->FrameSize < 17u)
    70bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    70be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    70c0:	68db      	ldr	r3, [r3, #12]
    70c2:	881b      	ldrh	r3, [r3, #0]
    70c4:	2b10      	cmp	r3, #16
    70c6:	d81f      	bhi.n	7108 <Lpspi_Ip_SyncTransmit+0x244>
            for (Index = 0; Index < NumberOfReads; Index++)
    70c8:	2300      	movs	r3, #0
    70ca:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    70ce:	e014      	b.n	70fa <Lpspi_Ip_SyncTransmit+0x236>
                Data = Base->RDR;
    70d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    70d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    70d4:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint16*)(&State->RxBuffer[2u * (State->RxIndex + Index)])) = (uint16)Data;
    70d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    70d8:	689a      	ldr	r2, [r3, #8]
    70da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    70dc:	8a9b      	ldrh	r3, [r3, #20]
    70de:	4619      	mov	r1, r3
    70e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    70e4:	440b      	add	r3, r1
    70e6:	005b      	lsls	r3, r3, #1
    70e8:	4413      	add	r3, r2
    70ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    70ec:	b292      	uxth	r2, r2
    70ee:	801a      	strh	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    70f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    70f4:	3301      	adds	r3, #1
    70f6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    70fa:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    70fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    7102:	429a      	cmp	r2, r3
    7104:	d8e4      	bhi.n	70d0 <Lpspi_Ip_SyncTransmit+0x20c>
    7106:	e034      	b.n	7172 <Lpspi_Ip_SyncTransmit+0x2ae>
            for (Index = 0; Index < NumberOfReads; Index++)
    7108:	2300      	movs	r3, #0
    710a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    710e:	e013      	b.n	7138 <Lpspi_Ip_SyncTransmit+0x274>
                Data = Base->RDR;
    7110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    7114:	930d      	str	r3, [sp, #52]	; 0x34
                *((uint32*)(&State->RxBuffer[4u * (State->RxIndex + Index)])) = (uint32)Data;
    7116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7118:	689a      	ldr	r2, [r3, #8]
    711a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    711c:	8a9b      	ldrh	r3, [r3, #20]
    711e:	4619      	mov	r1, r3
    7120:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    7124:	440b      	add	r3, r1
    7126:	009b      	lsls	r3, r3, #2
    7128:	4413      	add	r3, r2
    712a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    712c:	601a      	str	r2, [r3, #0]
            for (Index = 0; Index < NumberOfReads; Index++)
    712e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    7132:	3301      	adds	r3, #1
    7134:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    7138:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    713c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    7140:	429a      	cmp	r2, r3
    7142:	d8e5      	bhi.n	7110 <Lpspi_Ip_SyncTransmit+0x24c>
    7144:	e015      	b.n	7172 <Lpspi_Ip_SyncTransmit+0x2ae>
        for (Index = 0; Index < NumberOfReads; Index++)
    7146:	2300      	movs	r3, #0
    7148:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    714c:	e00b      	b.n	7166 <Lpspi_Ip_SyncTransmit+0x2a2>
    714e:	bf00      	nop
    7150:	1fff8d38 	.word	0x1fff8d38
    7154:	0000ad64 	.word	0x0000ad64
            (void)Base->RDR;
    7158:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    715a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        for (Index = 0; Index < NumberOfReads; Index++)
    715c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    7160:	3301      	adds	r3, #1
    7162:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    7166:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    716a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    716e:	429a      	cmp	r2, r3
    7170:	d8f2      	bhi.n	7158 <Lpspi_Ip_SyncTransmit+0x294>
    State->RxIndex += NumberOfReads;
    7172:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7174:	8a9a      	ldrh	r2, [r3, #20]
    7176:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    717a:	b29b      	uxth	r3, r3
    717c:	4413      	add	r3, r2
    717e:	b29a      	uxth	r2, r3
    7180:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7182:	829a      	strh	r2, [r3, #20]
}
    7184:	bf00      	nop
                }
                /* Read Data from RX FIFO */
                Lpspi_Ip_ReadDataFromFifo(Instance, NumberOfReads);
                /* Update current FIFO slots are available to fill .*/
                State->CurrentTxFifoSlot += NumberOfReads;
    7186:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7188:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    718c:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
    7190:	4413      	add	r3, r2
    7192:	b2da      	uxtb	r2, r3
    7194:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                ElapsedTicks = 0u;
    719a:	2300      	movs	r3, #0
    719c:	9317      	str	r3, [sp, #92]	; 0x5c
            /* After driver code read all frames in RX FIFO, if there are still some frames in TX FIFO, at the time before driver code check number of frames available in TX FIFO 
            to prepare to fill TX FIFO. At that time, interrupt occurred, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO. 
            So TX FIFO will be empty and some frames received in RX FIFO, then the program is returned from interrupt and fill TX FIFO until full. 
            And there is a interrupt occurred after that before read all frames in RX FIFO, and the time to process interrupt is longer than the time to transfer all frames in TX FIFO.
            State->CurrentTxFifoSlot variable is used to hanlde number of frames are "on bus transfer". They are always less than FIFO size */
            if((State->CurrentTxFifoSlot != 0u) && (TxDoneFlag != TRUE))
    719e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    71a4:	2b00      	cmp	r3, #0
    71a6:	f000 810e 	beq.w	73c6 <Lpspi_Ip_SyncTransmit+0x502>
    71aa:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
    71ae:	f083 0301 	eor.w	r3, r3, #1
    71b2:	b2db      	uxtb	r3, r3
    71b4:	2b00      	cmp	r3, #0
    71b6:	f000 8106 	beq.w	73c6 <Lpspi_Ip_SyncTransmit+0x502>
            {
                if(State->ExpectedFifoWrites != State->TxIndex)
    71ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71bc:	8b5a      	ldrh	r2, [r3, #26]
    71be:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71c0:	8adb      	ldrh	r3, [r3, #22]
    71c2:	429a      	cmp	r2, r3
    71c4:	f000 80c7 	beq.w	7356 <Lpspi_Ip_SyncTransmit+0x492>
                {
                    NumberOfWrites = State->CurrentTxFifoSlot;
    71c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    71ce:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
                    /* Limits to remaining frames. */
                    if (NumberOfWrites > (State->ExpectedFifoWrites - State->TxIndex))
    71d2:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    71d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71d8:	8b5b      	ldrh	r3, [r3, #26]
    71da:	4619      	mov	r1, r3
    71dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71de:	8adb      	ldrh	r3, [r3, #22]
    71e0:	1acb      	subs	r3, r1, r3
    71e2:	429a      	cmp	r2, r3
    71e4:	dd08      	ble.n	71f8 <Lpspi_Ip_SyncTransmit+0x334>
                    {
                        NumberOfWrites = (uint8)(State->ExpectedFifoWrites - State->TxIndex);
    71e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71e8:	8b5b      	ldrh	r3, [r3, #26]
    71ea:	b2da      	uxtb	r2, r3
    71ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    71ee:	8adb      	ldrh	r3, [r3, #22]
    71f0:	b2db      	uxtb	r3, r3
    71f2:	1ad3      	subs	r3, r2, r3
    71f4:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    71f8:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
    71fc:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    7200:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    7204:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    7208:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    720c:	4a85      	ldr	r2, [pc, #532]	; (7424 <Lpspi_Ip_SyncTransmit+0x560>)
    720e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7212:	930b      	str	r3, [sp, #44]	; 0x2c
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    7214:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    7218:	4a83      	ldr	r2, [pc, #524]	; (7428 <Lpspi_Ip_SyncTransmit+0x564>)
    721a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    721e:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 Data = 0u;
    7220:	2300      	movs	r3, #0
    7222:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Index = 0u;
    7224:	2300      	movs	r3, #0
    7226:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    Data = State->ExternalDevice->DeviceParams->DefaultData;
    722a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    722e:	68db      	ldr	r3, [r3, #12]
    7230:	685b      	ldr	r3, [r3, #4]
    7232:	9309      	str	r3, [sp, #36]	; 0x24
    if (NULL_PTR != State->TxBuffer)
    7234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7236:	68db      	ldr	r3, [r3, #12]
    7238:	2b00      	cmp	r3, #0
    723a:	d063      	beq.n	7304 <Lpspi_Ip_SyncTransmit+0x440>
        if (State->TxFrameSize < 9u)
    723c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    723e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    7240:	2b08      	cmp	r3, #8
    7242:	d81d      	bhi.n	7280 <Lpspi_Ip_SyncTransmit+0x3bc>
            for (Index = 0; Index < NumberOfWrites; Index++)
    7244:	2300      	movs	r3, #0
    7246:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    724a:	e012      	b.n	7272 <Lpspi_Ip_SyncTransmit+0x3ae>
                Data = *((const uint8*)(&State->TxBuffer[State->TxIndex + Index]));
    724c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    724e:	68db      	ldr	r3, [r3, #12]
    7250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7252:	8ad2      	ldrh	r2, [r2, #22]
    7254:	4611      	mov	r1, r2
    7256:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    725a:	440a      	add	r2, r1
    725c:	4413      	add	r3, r2
    725e:	781b      	ldrb	r3, [r3, #0]
    7260:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    7262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7264:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7266:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    7268:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    726c:	3301      	adds	r3, #1
    726e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    7272:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    7276:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    727a:	429a      	cmp	r2, r3
    727c:	d8e6      	bhi.n	724c <Lpspi_Ip_SyncTransmit+0x388>
    727e:	e053      	b.n	7328 <Lpspi_Ip_SyncTransmit+0x464>
        else if (State->TxFrameSize < 17u)
    7280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    7284:	2b10      	cmp	r3, #16
    7286:	d81e      	bhi.n	72c6 <Lpspi_Ip_SyncTransmit+0x402>
            for (Index = 0; Index < NumberOfWrites; Index++)
    7288:	2300      	movs	r3, #0
    728a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    728e:	e013      	b.n	72b8 <Lpspi_Ip_SyncTransmit+0x3f4>
                Data = *((const uint16*)(&State->TxBuffer[2u * (State->TxIndex + Index)]));
    7290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7292:	68da      	ldr	r2, [r3, #12]
    7294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7296:	8adb      	ldrh	r3, [r3, #22]
    7298:	4619      	mov	r1, r3
    729a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    729e:	440b      	add	r3, r1
    72a0:	005b      	lsls	r3, r3, #1
    72a2:	4413      	add	r3, r2
    72a4:	881b      	ldrh	r3, [r3, #0]
    72a6:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    72a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    72aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    72ac:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    72ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72b2:	3301      	adds	r3, #1
    72b4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    72b8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    72bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72c0:	429a      	cmp	r2, r3
    72c2:	d8e5      	bhi.n	7290 <Lpspi_Ip_SyncTransmit+0x3cc>
    72c4:	e030      	b.n	7328 <Lpspi_Ip_SyncTransmit+0x464>
            for (Index = 0; Index < NumberOfWrites; Index++)
    72c6:	2300      	movs	r3, #0
    72c8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    72cc:	e013      	b.n	72f6 <Lpspi_Ip_SyncTransmit+0x432>
                Data = *((const uint32*)(&State->TxBuffer[4u * (State->TxIndex + Index)]));
    72ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    72d0:	68da      	ldr	r2, [r3, #12]
    72d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    72d4:	8adb      	ldrh	r3, [r3, #22]
    72d6:	4619      	mov	r1, r3
    72d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72dc:	440b      	add	r3, r1
    72de:	009b      	lsls	r3, r3, #2
    72e0:	4413      	add	r3, r2
    72e2:	681b      	ldr	r3, [r3, #0]
    72e4:	9309      	str	r3, [sp, #36]	; 0x24
                Base->TDR = Data;
    72e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    72e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    72ea:	665a      	str	r2, [r3, #100]	; 0x64
            for (Index = 0; Index < NumberOfWrites; Index++)
    72ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72f0:	3301      	adds	r3, #1
    72f2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    72f6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    72fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    72fe:	429a      	cmp	r2, r3
    7300:	d8e5      	bhi.n	72ce <Lpspi_Ip_SyncTransmit+0x40a>
    7302:	e011      	b.n	7328 <Lpspi_Ip_SyncTransmit+0x464>
        for (Index = 0; Index < NumberOfWrites; Index++)
    7304:	2300      	movs	r3, #0
    7306:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    730a:	e007      	b.n	731c <Lpspi_Ip_SyncTransmit+0x458>
            Base->TDR = Data;
    730c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    730e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7310:	665a      	str	r2, [r3, #100]	; 0x64
        for (Index = 0; Index < NumberOfWrites; Index++)
    7312:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7316:	3301      	adds	r3, #1
    7318:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    731c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    7320:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7324:	429a      	cmp	r2, r3
    7326:	d8f1      	bhi.n	730c <Lpspi_Ip_SyncTransmit+0x448>
    State->TxIndex += NumberOfWrites;
    7328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    732a:	8ada      	ldrh	r2, [r3, #22]
    732c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    7330:	b29b      	uxth	r3, r3
    7332:	4413      	add	r3, r2
    7334:	b29a      	uxth	r2, r3
    7336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7338:	82da      	strh	r2, [r3, #22]
}
    733a:	bf00      	nop
                    }
                    /* Push Data into TX FIFO */
                    Lpspi_Ip_PushDataToFifo(Instance, NumberOfWrites);
                    State->CurrentTxFifoSlot -= NumberOfWrites;
    733c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    733e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
    7342:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    7346:	1ad3      	subs	r3, r2, r3
    7348:	b2da      	uxtb	r2, r3
    734a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    734c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                    ElapsedTicks = 0u;
    7350:	2300      	movs	r3, #0
    7352:	9317      	str	r3, [sp, #92]	; 0x5c
    7354:	e037      	b.n	73c6 <Lpspi_Ip_SyncTransmit+0x502>
                }
                else
                {
                    if(TRUE == State->NextTransferConfigAvailable)
    7356:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7358:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    735c:	2b00      	cmp	r3, #0
    735e:	d01c      	beq.n	739a <Lpspi_Ip_SyncTransmit+0x4d6>
                    {
                        /* Initialize next transfer */
                        State->ExternalDevice->DeviceParams->DefaultData = State->DefaultDataNext;
    7360:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7364:	68db      	ldr	r3, [r3, #12]
    7366:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7368:	6b52      	ldr	r2, [r2, #52]	; 0x34
    736a:	605a      	str	r2, [r3, #4]
                        State->FirstCmd = FALSE;
    736c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    736e:	2200      	movs	r2, #0
    7370:	775a      	strb	r2, [r3, #29]
                        Lpspi_TransmitTxInit(Instance, State->TxBufferNext, State->FrameSizeNext, State->LsbNext, State->LengthNext);
    7372:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7374:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7376:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7378:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    737a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    737c:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
    7380:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7382:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    7384:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    7388:	9300      	str	r3, [sp, #0]
    738a:	4623      	mov	r3, r4
    738c:	f000 f84e 	bl	742c <Lpspi_TransmitTxInit>
                        State->NextTransferConfigAvailable = FALSE;
    7390:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7392:	2200      	movs	r2, #0
    7394:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    7398:	e015      	b.n	73c6 <Lpspi_Ip_SyncTransmit+0x502>
                    }
                    else
                    {
                        TxDoneFlag = TRUE;
    739a:	2301      	movs	r3, #1
    739c:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
                        if((FALSE == State->KeepCs) && (0u != (Base->TCR & LPSPI_TCR_CONT_MASK)))
    73a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    73a2:	7f1b      	ldrb	r3, [r3, #28]
    73a4:	f083 0301 	eor.w	r3, r3, #1
    73a8:	b2db      	uxtb	r3, r3
    73aa:	2b00      	cmp	r3, #0
    73ac:	d00b      	beq.n	73c6 <Lpspi_Ip_SyncTransmit+0x502>
    73ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    73b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    73b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    73b6:	2b00      	cmp	r3, #0
    73b8:	d005      	beq.n	73c6 <Lpspi_Ip_SyncTransmit+0x502>
                        {
                            /* Clear CS */
                            Base->TCR &= ~(LPSPI_TCR_CONT_MASK | LPSPI_TCR_CONTC_MASK);
    73ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    73bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    73be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
    73c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    73c4:	661a      	str	r2, [r3, #96]	; 0x60
                        }
                    }
                }
            }
            ElapsedTicks += OsIf_GetElapsed(&CurrentTicks, LPSPI_IP_TIMEOUT_METHOD);
    73c6:	ab07      	add	r3, sp, #28
    73c8:	2100      	movs	r1, #0
    73ca:	4618      	mov	r0, r3
    73cc:	f7fa fbf3 	bl	1bb6 <OsIf_GetElapsed>
    73d0:	4602      	mov	r2, r0
    73d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    73d4:	4413      	add	r3, r2
    73d6:	9317      	str	r3, [sp, #92]	; 0x5c
            if (ElapsedTicks >= TimeoutTicks)
    73d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    73da:	9b15      	ldr	r3, [sp, #84]	; 0x54
    73dc:	429a      	cmp	r2, r3
    73de:	d302      	bcc.n	73e6 <Lpspi_Ip_SyncTransmit+0x522>
            {
                Status = LPSPI_IP_TIMEOUT;
    73e0:	2303      	movs	r3, #3
    73e2:	9318      	str	r3, [sp, #96]	; 0x60
                break;
    73e4:	e006      	b.n	73f4 <Lpspi_Ip_SyncTransmit+0x530>
        while(State->RxIndex != State->ExpectedFifoReads)
    73e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    73e8:	8a9a      	ldrh	r2, [r3, #20]
    73ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    73ec:	8b1b      	ldrh	r3, [r3, #24]
    73ee:	429a      	cmp	r2, r3
    73f0:	f47f adf6 	bne.w	6fe0 <Lpspi_Ip_SyncTransmit+0x11c>
            }
        }
        if ((LPSPI_IP_STATUS_SUCCESS != Status) || (0u == Length))
    73f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    73f6:	2b00      	cmp	r3, #0
    73f8:	d103      	bne.n	7402 <Lpspi_Ip_SyncTransmit+0x53e>
    73fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    73fe:	2b00      	cmp	r3, #0
    7400:	d109      	bne.n	7416 <Lpspi_Ip_SyncTransmit+0x552>
        {
#if (STD_OFF == LPSPI_IP_DEV_ERROR_DETECT)
            /* Return Fail status if length is 0. Error Detect is enabled, nothing need to be done here */
            if (0u == Length)
    7402:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    7406:	2b00      	cmp	r3, #0
    7408:	d101      	bne.n	740e <Lpspi_Ip_SyncTransmit+0x54a>
            {
                Status = LPSPI_IP_STATUS_FAIL;
    740a:	2301      	movs	r3, #1
    740c:	9318      	str	r3, [sp, #96]	; 0x60
            }
#endif
            State->Status = LPSPI_IP_FAULT;
    740e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7410:	2203      	movs	r2, #3
    7412:	605a      	str	r2, [r3, #4]
    7414:	e002      	b.n	741c <Lpspi_Ip_SyncTransmit+0x558>
        }
        else
        {
            State->Status = LPSPI_IP_IDLE;
    7416:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7418:	2201      	movs	r2, #1
    741a:	605a      	str	r2, [r3, #4]
        }
    }
    return Status;
    741c:	9b18      	ldr	r3, [sp, #96]	; 0x60
}
    741e:	4618      	mov	r0, r3
    7420:	b01a      	add	sp, #104	; 0x68
    7422:	bd10      	pop	{r4, pc}
    7424:	0000ad64 	.word	0x0000ad64
    7428:	1fff8d38 	.word	0x1fff8d38

0000742c <Lpspi_TransmitTxInit>:
                                 const uint8* TxBuffer,
                                 uint16 TxFrameSize,
                                 boolean TxLsb,
                                 uint16 BufLen
                                )
{
    742c:	b088      	sub	sp, #32
    742e:	9100      	str	r1, [sp, #0]
    7430:	4611      	mov	r1, r2
    7432:	461a      	mov	r2, r3
    7434:	4603      	mov	r3, r0
    7436:	f88d 3007 	strb.w	r3, [sp, #7]
    743a:	460b      	mov	r3, r1
    743c:	f8ad 3004 	strh.w	r3, [sp, #4]
    7440:	4613      	mov	r3, r2
    7442:	f88d 3006 	strb.w	r3, [sp, #6]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    7446:	f89d 3007 	ldrb.w	r3, [sp, #7]
    744a:	4a46      	ldr	r2, [pc, #280]	; (7564 <Lpspi_TransmitTxInit+0x138>)
    744c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7450:	9307      	str	r3, [sp, #28]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    7452:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7456:	4a44      	ldr	r2, [pc, #272]	; (7568 <Lpspi_TransmitTxInit+0x13c>)
    7458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    745c:	9306      	str	r3, [sp, #24]
    uint32 TransferCommand = 0u;
    745e:	2300      	movs	r3, #0
    7460:	9305      	str	r3, [sp, #20]
    uint8 LsbWriteValue = TxLsb ? 1U : 0U;
    7462:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7466:	2b00      	cmp	r3, #0
    7468:	d001      	beq.n	746e <Lpspi_TransmitTxInit+0x42>
    746a:	2301      	movs	r3, #1
    746c:	e000      	b.n	7470 <Lpspi_TransmitTxInit+0x44>
    746e:	2300      	movs	r3, #0
    7470:	f88d 3013 	strb.w	r3, [sp, #19]

    State->TxFrameSize = TxFrameSize;
    7474:	9b06      	ldr	r3, [sp, #24]
    7476:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    747a:	851a      	strh	r2, [r3, #40]	; 0x28
    State->TxLsb = TxLsb;
    747c:	9b06      	ldr	r3, [sp, #24]
    747e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    7482:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    /* Get transfer command */
#if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
    TransferCommand = State->ExternalDevice->Tcr[State->ClockMode] | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
#else
    TransferCommand = State->ExternalDevice->Tcr | LPSPI_TCR_FRAMESZ((uint32)TxFrameSize - 1u) | LPSPI_TCR_LSBF(LsbWriteValue);
    7486:	9b06      	ldr	r3, [sp, #24]
    7488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    748a:	689a      	ldr	r2, [r3, #8]
    748c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7490:	3b01      	subs	r3, #1
    7492:	f3c3 030b 	ubfx	r3, r3, #0, #12
    7496:	431a      	orrs	r2, r3
    7498:	f89d 3013 	ldrb.w	r3, [sp, #19]
    749c:	05db      	lsls	r3, r3, #23
    749e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    74a2:	4313      	orrs	r3, r2
    74a4:	9305      	str	r3, [sp, #20]
        {
            TransferCommand &= ~LPSPI_TCR_CONT_MASK;
        }
        #endif
        
        if(TRUE == State->FirstCmd)
    74a6:	9b06      	ldr	r3, [sp, #24]
    74a8:	7f5b      	ldrb	r3, [r3, #29]
    74aa:	2b00      	cmp	r3, #0
    74ac:	d003      	beq.n	74b6 <Lpspi_TransmitTxInit+0x8a>
        {
            /* Set transfer command */
            Base->TCR = TransferCommand;
    74ae:	9b07      	ldr	r3, [sp, #28]
    74b0:	9a05      	ldr	r2, [sp, #20]
    74b2:	661a      	str	r2, [r3, #96]	; 0x60
    74b4:	e00d      	b.n	74d2 <Lpspi_TransmitTxInit+0xa6>
        }
        else
        {
            if (0u != (TransferCommand & LPSPI_TCR_CONT_MASK))
    74b6:	9b05      	ldr	r3, [sp, #20]
    74b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    74bc:	2b00      	cmp	r3, #0
    74be:	d005      	beq.n	74cc <Lpspi_TransmitTxInit+0xa0>
            {
                Base->TCR = TransferCommand | LPSPI_TCR_CONTC_MASK;
    74c0:	9b05      	ldr	r3, [sp, #20]
    74c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    74c6:	9b07      	ldr	r3, [sp, #28]
    74c8:	661a      	str	r2, [r3, #96]	; 0x60
    74ca:	e002      	b.n	74d2 <Lpspi_TransmitTxInit+0xa6>
            }
            else
            {
                Base->TCR = TransferCommand;
    74cc:	9b07      	ldr	r3, [sp, #28]
    74ce:	9a05      	ldr	r2, [sp, #20]
    74d0:	661a      	str	r2, [r3, #96]	; 0x60
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        if (LPSPI_IP_FULL_DUPLEX == State->ExternalDevice->DeviceParams->TransferType)
        #endif
        {
            /* CMD will take 1 slot in TXFIFO, update current TX FIFO slot. it will be plus 1 when the first frames of channel have recieved */
            State->CurrentTxFifoSlot -= 1u;
    74d2:	9b06      	ldr	r3, [sp, #24]
    74d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    74d8:	3b01      	subs	r3, #1
    74da:	b2da      	uxtb	r2, r3
    74dc:	9b06      	ldr	r3, [sp, #24]
    74de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        }
    }
    
    /* Update State structure. */
    State->TxIndex = 0u;
    74e2:	9b06      	ldr	r3, [sp, #24]
    74e4:	2200      	movs	r2, #0
    74e6:	82da      	strh	r2, [r3, #22]
        (void)TxBuffer;
    }
    else
    #endif
    {
        State->TxBuffer = TxBuffer;
    74e8:	9b06      	ldr	r3, [sp, #24]
    74ea:	9a00      	ldr	r2, [sp, #0]
    74ec:	60da      	str	r2, [r3, #12]
    74ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    74f2:	f8ad 3010 	strh.w	r3, [sp, #16]
    74f6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    74fa:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (FrameSize < 9u)
    74fe:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7502:	2b08      	cmp	r3, #8
    7504:	d804      	bhi.n	7510 <Lpspi_TransmitTxInit+0xe4>
        Ret = Length;
    7506:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    750a:	f8ad 300c 	strh.w	r3, [sp, #12]
    750e:	e022      	b.n	7556 <Lpspi_TransmitTxInit+0x12a>
    else if (FrameSize < 17u)
    7510:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    7514:	2b10      	cmp	r3, #16
    7516:	d80c      	bhi.n	7532 <Lpspi_TransmitTxInit+0x106>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    7518:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    751c:	085b      	lsrs	r3, r3, #1
    751e:	b29a      	uxth	r2, r3
    7520:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7524:	f003 0301 	and.w	r3, r3, #1
    7528:	b29b      	uxth	r3, r3
    752a:	4413      	add	r3, r2
    752c:	f8ad 300c 	strh.w	r3, [sp, #12]
    7530:	e011      	b.n	7556 <Lpspi_TransmitTxInit+0x12a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    7532:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    7536:	089b      	lsrs	r3, r3, #2
    7538:	b29a      	uxth	r2, r3
    753a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    753e:	f003 0303 	and.w	r3, r3, #3
    7542:	b29b      	uxth	r3, r3
    7544:	2b00      	cmp	r3, #0
    7546:	bf14      	ite	ne
    7548:	2301      	movne	r3, #1
    754a:	2300      	moveq	r3, #0
    754c:	b2db      	uxtb	r3, r3
    754e:	b29b      	uxth	r3, r3
    7550:	4413      	add	r3, r2
    7552:	f8ad 300c 	strh.w	r3, [sp, #12]
    return Ret;
    7556:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    }

    State->ExpectedFifoWrites = Lpspi_Ip_GetWordsFromLength(BufLen, TxFrameSize);
    755a:	9b06      	ldr	r3, [sp, #24]
    755c:	835a      	strh	r2, [r3, #26]
}
    755e:	bf00      	nop
    7560:	b008      	add	sp, #32
    7562:	4770      	bx	lr
    7564:	0000ad64 	.word	0x0000ad64
    7568:	1fff8d38 	.word	0x1fff8d38

0000756c <Lpspi_TransmitRxInit>:
static void Lpspi_TransmitRxInit(uint8 Instance,
                                      uint8* RxBuffer,
                                      uint16 RxFrameSize,
                                      uint16 BufLen
                                     )
{
    756c:	b088      	sub	sp, #32
    756e:	9102      	str	r1, [sp, #8]
    7570:	4611      	mov	r1, r2
    7572:	461a      	mov	r2, r3
    7574:	4603      	mov	r3, r0
    7576:	f88d 300f 	strb.w	r3, [sp, #15]
    757a:	460b      	mov	r3, r1
    757c:	f8ad 300c 	strh.w	r3, [sp, #12]
    7580:	4613      	mov	r3, r2
    7582:	f8ad 3006 	strh.w	r3, [sp, #6]
    Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    7586:	f89d 300f 	ldrb.w	r3, [sp, #15]
    758a:	4a22      	ldr	r2, [pc, #136]	; (7614 <Lpspi_TransmitRxInit+0xa8>)
    758c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7590:	9307      	str	r3, [sp, #28]
    
    /* Update State structure. */
    State->RxIndex = 0u;
    7592:	9b07      	ldr	r3, [sp, #28]
    7594:	2200      	movs	r2, #0
    7596:	829a      	strh	r2, [r3, #20]
        (void)RxBuffer; 
    }
    else
    #endif        
    {
        State->RxBuffer = RxBuffer; 
    7598:	9b07      	ldr	r3, [sp, #28]
    759a:	9a02      	ldr	r2, [sp, #8]
    759c:	609a      	str	r2, [r3, #8]
    759e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    75a2:	f8ad 301a 	strh.w	r3, [sp, #26]
    75a6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    75aa:	f8ad 3018 	strh.w	r3, [sp, #24]
    if (FrameSize < 9u)
    75ae:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    75b2:	2b08      	cmp	r3, #8
    75b4:	d804      	bhi.n	75c0 <Lpspi_TransmitRxInit+0x54>
        Ret = Length;
    75b6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    75be:	e022      	b.n	7606 <Lpspi_TransmitRxInit+0x9a>
    else if (FrameSize < 17u)
    75c0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    75c4:	2b10      	cmp	r3, #16
    75c6:	d80c      	bhi.n	75e2 <Lpspi_TransmitRxInit+0x76>
        Ret = (uint16)(Length / 2u) + (uint16)(Length % 2U);
    75c8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75cc:	085b      	lsrs	r3, r3, #1
    75ce:	b29a      	uxth	r2, r3
    75d0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75d4:	f003 0301 	and.w	r3, r3, #1
    75d8:	b29b      	uxth	r3, r3
    75da:	4413      	add	r3, r2
    75dc:	f8ad 3016 	strh.w	r3, [sp, #22]
    75e0:	e011      	b.n	7606 <Lpspi_TransmitRxInit+0x9a>
        Ret = (uint16)(Length / 4u) + (uint16)(((Length % 4U) == 0U) ? 0U : 1U);
    75e2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75e6:	089b      	lsrs	r3, r3, #2
    75e8:	b29a      	uxth	r2, r3
    75ea:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    75ee:	f003 0303 	and.w	r3, r3, #3
    75f2:	b29b      	uxth	r3, r3
    75f4:	2b00      	cmp	r3, #0
    75f6:	bf14      	ite	ne
    75f8:	2301      	movne	r3, #1
    75fa:	2300      	moveq	r3, #0
    75fc:	b2db      	uxtb	r3, r3
    75fe:	b29b      	uxth	r3, r3
    7600:	4413      	add	r3, r2
    7602:	f8ad 3016 	strh.w	r3, [sp, #22]
    return Ret;
    7606:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    }

    State->ExpectedFifoReads = Lpspi_Ip_GetWordsFromLength(BufLen, RxFrameSize);
    760a:	9b07      	ldr	r3, [sp, #28]
    760c:	831a      	strh	r2, [r3, #24]
}
    760e:	bf00      	nop
    7610:	b008      	add	sp, #32
    7612:	4770      	bx	lr
    7614:	1fff8d38 	.word	0x1fff8d38

00007618 <Lpspi_Ip_AsyncTransmit>:
                                            const uint8 *TxBuffer,
                                            uint8 *RxBuffer,
                                            uint16 Length,
                                            Lpspi_Ip_CallbackType EndCallback
                                          )
{
    7618:	b500      	push	{lr}
    761a:	b08b      	sub	sp, #44	; 0x2c
    761c:	9005      	str	r0, [sp, #20]
    761e:	9104      	str	r1, [sp, #16]
    7620:	9203      	str	r2, [sp, #12]
    7622:	f8ad 300a 	strh.w	r3, [sp, #10]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    7626:	2300      	movs	r3, #0
    7628:	9309      	str	r3, [sp, #36]	; 0x24
    uint8 Instance = 0u;
    762a:	2300      	movs	r3, #0
    762c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(ExternalDevice != NULL_PTR);
    DevAssert(0u != Length);
    Lpspi_Ip_CheckValidParameters(ExternalDevice, Length);
    #endif
    Instance = ExternalDevice->Instance;
    7630:	9b05      	ldr	r3, [sp, #20]
    7632:	781b      	ldrb	r3, [r3, #0]
    7634:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    7638:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    763c:	4a3d      	ldr	r2, [pc, #244]	; (7734 <Lpspi_Ip_AsyncTransmit+0x11c>)
    763e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7642:	9307      	str	r3, [sp, #28]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(State != NULL_PTR);
    #endif
    
    Base = Lpspi_Ip_apxBases[Instance];
    7644:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    7648:	4a3b      	ldr	r2, [pc, #236]	; (7738 <Lpspi_Ip_AsyncTransmit+0x120>)
    764a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    764e:	9306      	str	r3, [sp, #24]
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09();
    7650:	f002 fc52 	bl	9ef8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>
    if (LPSPI_IP_BUSY == State->Status)
    7654:	9b07      	ldr	r3, [sp, #28]
    7656:	685b      	ldr	r3, [r3, #4]
    7658:	2b02      	cmp	r3, #2
    765a:	d104      	bne.n	7666 <Lpspi_Ip_AsyncTransmit+0x4e>
    {
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    765c:	f002 fc78 	bl	9f50 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        Status = LPSPI_IP_STATUS_FAIL;
    7660:	2301      	movs	r3, #1
    7662:	9309      	str	r3, [sp, #36]	; 0x24
    7664:	e061      	b.n	772a <Lpspi_Ip_AsyncTransmit+0x112>
        #if (STD_ON == LPSPI_IP_HALF_DUPLEX_MODE_SUPPORT)
        /* Clear some bits which support for half duplex mode at previous transfer */
        Base->CFGR1 &= ~(LPSPI_CFGR1_PCSCFG_MASK | LPSPI_CFGR1_OUTCFG_MASK | LPSPI_CFGR1_PINCFG_MASK);
        #endif
        /* Mark the hardware as busy. */
        State->Status = LPSPI_IP_BUSY;
    7666:	9b07      	ldr	r3, [sp, #28]
    7668:	2202      	movs	r2, #2
    766a:	605a      	str	r2, [r3, #4]
        State->ExternalDevice = ExternalDevice;
    766c:	9b07      	ldr	r3, [sp, #28]
    766e:	9a05      	ldr	r2, [sp, #20]
    7670:	625a      	str	r2, [r3, #36]	; 0x24
        SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09();
    7672:	f002 fc6d 	bl	9f50 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>
        
        /* Update State structure. */
        State->Callback = EndCallback;
    7676:	9b07      	ldr	r3, [sp, #28]
    7678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    767a:	611a      	str	r2, [r3, #16]
        State->NextTransferConfigAvailable = State->KeepCs;
    767c:	9b07      	ldr	r3, [sp, #28]
    767e:	7f1a      	ldrb	r2, [r3, #28]
    7680:	9b07      	ldr	r3, [sp, #28]
    7682:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Reset TX done flag */
        State->TxDoneFlag = FALSE;
    7686:	9b07      	ldr	r3, [sp, #28]
    7688:	2200      	movs	r2, #0
    768a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        
        /* Set clock configuration */
        if(TRUE == State->FirstCmd)
    768e:	9b07      	ldr	r3, [sp, #28]
    7690:	7f5b      	ldrb	r3, [r3, #29]
    7692:	2b00      	cmp	r3, #0
    7694:	d028      	beq.n	76e8 <Lpspi_Ip_AsyncTransmit+0xd0>
        {
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11();
    7696:	f002 fcd3 	bl	a040 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>
            /* Make sure that FIFOs will be empty before start new transfer session */
            Base->CR |= LPSPI_CR_RTF_MASK|LPSPI_CR_RRF_MASK;
    769a:	9b06      	ldr	r3, [sp, #24]
    769c:	691b      	ldr	r3, [r3, #16]
    769e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
    76a2:	9b06      	ldr	r3, [sp, #24]
    76a4:	611a      	str	r2, [r3, #16]
            /* clear all flags */
            Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    76a6:	9b06      	ldr	r3, [sp, #24]
    76a8:	695b      	ldr	r3, [r3, #20]
    76aa:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    76ae:	9b06      	ldr	r3, [sp, #24]
    76b0:	615a      	str	r2, [r3, #20]
            #endif
            {
                #if (STD_ON == LPSPI_IP_DUAL_CLOCK_MODE)
                Base->CCR = ExternalDevice->Ccr[State->ClockMode];
                #else
                Base->CCR = ExternalDevice->Ccr;
    76b2:	9b05      	ldr	r3, [sp, #20]
    76b4:	685a      	ldr	r2, [r3, #4]
    76b6:	9b06      	ldr	r3, [sp, #24]
    76b8:	641a      	str	r2, [r3, #64]	; 0x40
                #endif
            }
            /* Update current FIFO slots are available to fill .*/
            State->CurrentTxFifoSlot = LPSPI_IP_FIFO_SIZE_U8;
    76ba:	9b07      	ldr	r3, [sp, #28]
    76bc:	2204      	movs	r2, #4
    76be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            /* In setting up Transmit command register, the RXMSK is also cleared */
            Lpspi_TransmitTxInit(Instance, (const uint8*)TxBuffer, State->ExternalDevice->DeviceParams->FrameSize, State->ExternalDevice->DeviceParams->Lsb, Length);
    76c2:	9b07      	ldr	r3, [sp, #28]
    76c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76c6:	68db      	ldr	r3, [r3, #12]
    76c8:	881a      	ldrh	r2, [r3, #0]
    76ca:	9b07      	ldr	r3, [sp, #28]
    76cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76ce:	68db      	ldr	r3, [r3, #12]
    76d0:	7899      	ldrb	r1, [r3, #2]
    76d2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    76d6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    76da:	9300      	str	r3, [sp, #0]
    76dc:	460b      	mov	r3, r1
    76de:	9904      	ldr	r1, [sp, #16]
    76e0:	f7ff fea4 	bl	742c <Lpspi_TransmitTxInit>
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11();
    76e4:	f002 fcd8 	bl	a098 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>
        }
        Lpspi_TransmitRxInit(Instance, RxBuffer, State->ExternalDevice->DeviceParams->FrameSize, Length);
    76e8:	9b07      	ldr	r3, [sp, #28]
    76ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76ec:	68db      	ldr	r3, [r3, #12]
    76ee:	881a      	ldrh	r2, [r3, #0]
    76f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    76f4:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    76f8:	9903      	ldr	r1, [sp, #12]
    76fa:	f7ff ff37 	bl	756c <Lpspi_TransmitRxInit>
            }
            else
            #endif
            {
                /* Set TX water */
                Base->FCR = LPSPI_FCR_TXWATER((uint32)LPSPI_IP_FIFO_SIZE_U8 - (uint32)1u);
    76fe:	9b06      	ldr	r3, [sp, #24]
    7700:	2203      	movs	r2, #3
    7702:	659a      	str	r2, [r3, #88]	; 0x58
            }
            
            /* Disable DMA requests */
            Base->DER = 0u;
    7704:	9b06      	ldr	r3, [sp, #24]
    7706:	2200      	movs	r2, #0
    7708:	61da      	str	r2, [r3, #28]
            switch (State->TransferMode)
    770a:	9b07      	ldr	r3, [sp, #28]
    770c:	681b      	ldr	r3, [r3, #0]
    770e:	2b00      	cmp	r3, #0
    7710:	d002      	beq.n	7718 <Lpspi_Ip_AsyncTransmit+0x100>
    7712:	2b01      	cmp	r3, #1
    7714:	d004      	beq.n	7720 <Lpspi_Ip_AsyncTransmit+0x108>
                case LPSPI_IP_INTERRUPT:
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
                    break;
                default:
                    /* Nothing to do */
                    break;
    7716:	e008      	b.n	772a <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = 0u;
    7718:	9b06      	ldr	r3, [sp, #24]
    771a:	2200      	movs	r2, #0
    771c:	619a      	str	r2, [r3, #24]
                    break;
    771e:	e004      	b.n	772a <Lpspi_Ip_AsyncTransmit+0x112>
                    Base->IER = LPSPI_IER_RDIE_MASK | LPSPI_IER_TDIE_MASK | LPSPI_IER_REIE_MASK | LPSPI_IER_TEIE_MASK;
    7720:	9b06      	ldr	r3, [sp, #24]
    7722:	f641 0203 	movw	r2, #6147	; 0x1803
    7726:	619a      	str	r2, [r3, #24]
                    break;
    7728:	bf00      	nop
            /* Enable DMA request. */
            Base->DER = LPSPI_DER_RDDE_MASK | LPSPI_DER_TDDE_MASK;
        }
        #endif
    }
    return Status;
    772a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    772c:	4618      	mov	r0, r3
    772e:	b00b      	add	sp, #44	; 0x2c
    7730:	f85d fb04 	ldr.w	pc, [sp], #4
    7734:	1fff8d38 	.word	0x1fff8d38
    7738:	0000ad64 	.word	0x0000ad64

0000773c <Lpspi_Ip_ManageBuffers>:
}
#endif
#endif

void Lpspi_Ip_ManageBuffers(uint8 Instance)
{
    773c:	b500      	push	{lr}
    773e:	b085      	sub	sp, #20
    7740:	4603      	mov	r3, r0
    7742:	f88d 3007 	strb.w	r3, [sp, #7]
    #endif

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    7746:	f89d 3007 	ldrb.w	r3, [sp, #7]
    774a:	4a14      	ldr	r2, [pc, #80]	; (779c <Lpspi_Ip_ManageBuffers+0x60>)
    774c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7750:	9303      	str	r3, [sp, #12]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    7752:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7756:	4a12      	ldr	r2, [pc, #72]	; (77a0 <Lpspi_Ip_ManageBuffers+0x64>)
    7758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    775c:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    if (LPSPI_IP_POLLING == State->TransferMode)
    775e:	9b02      	ldr	r3, [sp, #8]
    7760:	681b      	ldr	r3, [r3, #0]
    7762:	2b00      	cmp	r3, #0
    7764:	d115      	bne.n	7792 <Lpspi_Ip_ManageBuffers+0x56>
                - Receive: Both TDF (push CDM) and DRF (receive data) are set.
               In half duplex Slave mode:
                - Transmit: TDF is set only, RDF will never be set by RX FIFO have masked.
                - Receive: Both TDF and RDF are set. But only process for RDF to receive data. In this case, State->CurrentTxFifoSlot will be set to 0 */
            if(
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    7766:	9b03      	ldr	r3, [sp, #12]
    7768:	695b      	ldr	r3, [r3, #20]
    776a:	f003 0302 	and.w	r3, r3, #2
            if(
    776e:	2b00      	cmp	r3, #0
    7770:	d10a      	bne.n	7788 <Lpspi_Ip_ManageBuffers+0x4c>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    7772:	9b03      	ldr	r3, [sp, #12]
    7774:	695b      	ldr	r3, [r3, #20]
    7776:	f003 0301 	and.w	r3, r3, #1
                (0u != (Base->SR & LPSPI_SR_RDF_MASK)) ||
    777a:	2b00      	cmp	r3, #0
    777c:	d009      	beq.n	7792 <Lpspi_Ip_ManageBuffers+0x56>
                ((0u != (Base->SR & LPSPI_SR_TDF_MASK)) && (0u!= State->CurrentTxFifoSlot))
    777e:	9b02      	ldr	r3, [sp, #8]
    7780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    7784:	2b00      	cmp	r3, #0
    7786:	d004      	beq.n	7792 <Lpspi_Ip_ManageBuffers+0x56>
                    Lpspi_Ip_TransferProcessHalfDuplex(Instance);
                }
                else
                #endif
                {
                    Lpspi_Ip_TransferProcess(Instance); 
    7788:	f89d 3007 	ldrb.w	r3, [sp, #7]
    778c:	4618      	mov	r0, r3
    778e:	f7ff f8cd 	bl	692c <Lpspi_Ip_TransferProcess>
                Lpspi_Ip_IrqTxDmaHandler(Instance);
            }
        }
        #endif
    }
}
    7792:	bf00      	nop
    7794:	b005      	add	sp, #20
    7796:	f85d fb04 	ldr.w	pc, [sp], #4
    779a:	bf00      	nop
    779c:	0000ad64 	.word	0x0000ad64
    77a0:	1fff8d38 	.word	0x1fff8d38

000077a4 <Lpspi_Ip_UpdateFrameSize>:
/*================================================================================================*/
Lpspi_Ip_StatusType Lpspi_Ip_UpdateFrameSize(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint16 FrameSize)
{
    77a4:	b084      	sub	sp, #16
    77a6:	9001      	str	r0, [sp, #4]
    77a8:	460b      	mov	r3, r1
    77aa:	f8ad 3002 	strh.w	r3, [sp, #2]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    77ae:	2300      	movs	r3, #0
    77b0:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    DevAssert(LPSPI_IP_FRAMESIZE_MAX_U16 >= FrameSize);
    DevAssert(LPSPI_IP_FRAMESIZE_MIN_U16 <= FrameSize);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    77b2:	9b01      	ldr	r3, [sp, #4]
    77b4:	781b      	ldrb	r3, [r3, #0]
    77b6:	461a      	mov	r2, r3
    77b8:	4b09      	ldr	r3, [pc, #36]	; (77e0 <Lpspi_Ip_UpdateFrameSize+0x3c>)
    77ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77be:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Frame size can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    77c0:	9b02      	ldr	r3, [sp, #8]
    77c2:	685b      	ldr	r3, [r3, #4]
    77c4:	2b02      	cmp	r3, #2
    77c6:	d005      	beq.n	77d4 <Lpspi_Ip_UpdateFrameSize+0x30>
    {
        ExternalDevice->DeviceParams->FrameSize = FrameSize;
    77c8:	9b01      	ldr	r3, [sp, #4]
    77ca:	68db      	ldr	r3, [r3, #12]
    77cc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    77d0:	801a      	strh	r2, [r3, #0]
    77d2:	e001      	b.n	77d8 <Lpspi_Ip_UpdateFrameSize+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    77d4:	2301      	movs	r3, #1
    77d6:	9303      	str	r3, [sp, #12]
    }
    return Status;
    77d8:	9b03      	ldr	r3, [sp, #12]
}
    77da:	4618      	mov	r0, r3
    77dc:	b004      	add	sp, #16
    77de:	4770      	bx	lr
    77e0:	1fff8d38 	.word	0x1fff8d38

000077e4 <Lpspi_Ip_UpdateLsb>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateLsb(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, boolean Lsb)
{
    77e4:	b084      	sub	sp, #16
    77e6:	9001      	str	r0, [sp, #4]
    77e8:	460b      	mov	r3, r1
    77ea:	f88d 3003 	strb.w	r3, [sp, #3]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    77ee:	2300      	movs	r3, #0
    77f0:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    77f2:	9b01      	ldr	r3, [sp, #4]
    77f4:	781b      	ldrb	r3, [r3, #0]
    77f6:	461a      	mov	r2, r3
    77f8:	4b09      	ldr	r3, [pc, #36]	; (7820 <Lpspi_Ip_UpdateLsb+0x3c>)
    77fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    77fe:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    7800:	9b02      	ldr	r3, [sp, #8]
    7802:	685b      	ldr	r3, [r3, #4]
    7804:	2b02      	cmp	r3, #2
    7806:	d005      	beq.n	7814 <Lpspi_Ip_UpdateLsb+0x30>
    {
        ExternalDevice->DeviceParams->Lsb = Lsb;
    7808:	9b01      	ldr	r3, [sp, #4]
    780a:	68db      	ldr	r3, [r3, #12]
    780c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7810:	709a      	strb	r2, [r3, #2]
    7812:	e001      	b.n	7818 <Lpspi_Ip_UpdateLsb+0x34>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    7814:	2301      	movs	r3, #1
    7816:	9303      	str	r3, [sp, #12]
    }
    return Status;
    7818:	9b03      	ldr	r3, [sp, #12]
}
    781a:	4618      	mov	r0, r3
    781c:	b004      	add	sp, #16
    781e:	4770      	bx	lr
    7820:	1fff8d38 	.word	0x1fff8d38

00007824 <Lpspi_Ip_UpdateDefaultTransmitData>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateDefaultTransmitData(const Lpspi_Ip_ExternalDeviceType *ExternalDevice, uint32 DefaultData)
{
    7824:	b084      	sub	sp, #16
    7826:	9001      	str	r0, [sp, #4]
    7828:	9100      	str	r1, [sp, #0]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    782a:	2300      	movs	r3, #0
    782c:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != ExternalDevice);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[ExternalDevice->Instance];
    782e:	9b01      	ldr	r3, [sp, #4]
    7830:	781b      	ldrb	r3, [r3, #0]
    7832:	461a      	mov	r2, r3
    7834:	4b09      	ldr	r3, [pc, #36]	; (785c <Lpspi_Ip_UpdateDefaultTransmitData+0x38>)
    7836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    783a:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Bite order can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    783c:	9b02      	ldr	r3, [sp, #8]
    783e:	685b      	ldr	r3, [r3, #4]
    7840:	2b02      	cmp	r3, #2
    7842:	d004      	beq.n	784e <Lpspi_Ip_UpdateDefaultTransmitData+0x2a>
    {
        ExternalDevice->DeviceParams->DefaultData = DefaultData;
    7844:	9b01      	ldr	r3, [sp, #4]
    7846:	68db      	ldr	r3, [r3, #12]
    7848:	9a00      	ldr	r2, [sp, #0]
    784a:	605a      	str	r2, [r3, #4]
    784c:	e001      	b.n	7852 <Lpspi_Ip_UpdateDefaultTransmitData+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    784e:	2301      	movs	r3, #1
    7850:	9303      	str	r3, [sp, #12]
    }
    return Status;
    7852:	9b03      	ldr	r3, [sp, #12]
}
    7854:	4618      	mov	r0, r3
    7856:	b004      	add	sp, #16
    7858:	4770      	bx	lr
    785a:	bf00      	nop
    785c:	1fff8d38 	.word	0x1fff8d38

00007860 <Lpspi_Ip_UpdateTransferMode>:

Lpspi_Ip_StatusType Lpspi_Ip_UpdateTransferMode(uint8 Instance, Lpspi_Ip_ModeType Mode)
{
    7860:	b084      	sub	sp, #16
    7862:	4603      	mov	r3, r0
    7864:	9100      	str	r1, [sp, #0]
    7866:	f88d 3007 	strb.w	r3, [sp, #7]
    Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_StatusType Status = LPSPI_IP_STATUS_SUCCESS;
    786a:	2300      	movs	r3, #0
    786c:	9303      	str	r3, [sp, #12]

    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    786e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7872:	4a09      	ldr	r2, [pc, #36]	; (7898 <Lpspi_Ip_UpdateTransferMode+0x38>)
    7874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7878:	9302      	str	r3, [sp, #8]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    /* Transfer mode can be changed when no transfers are in progress. */
    if (State->Status != LPSPI_IP_BUSY)
    787a:	9b02      	ldr	r3, [sp, #8]
    787c:	685b      	ldr	r3, [r3, #4]
    787e:	2b02      	cmp	r3, #2
    7880:	d003      	beq.n	788a <Lpspi_Ip_UpdateTransferMode+0x2a>
    {
        State->TransferMode = Mode;
    7882:	9b02      	ldr	r3, [sp, #8]
    7884:	9a00      	ldr	r2, [sp, #0]
    7886:	601a      	str	r2, [r3, #0]
    7888:	e001      	b.n	788e <Lpspi_Ip_UpdateTransferMode+0x2e>
    }
    else
    {
        Status = LPSPI_IP_STATUS_FAIL;
    788a:	2301      	movs	r3, #1
    788c:	9303      	str	r3, [sp, #12]
    }
    return Status;
    788e:	9b03      	ldr	r3, [sp, #12]
}
    7890:	4618      	mov	r0, r3
    7892:	b004      	add	sp, #16
    7894:	4770      	bx	lr
    7896:	bf00      	nop
    7898:	1fff8d38 	.word	0x1fff8d38

0000789c <Lpspi_Ip_Cancel>:

void Lpspi_Ip_Cancel(uint8 Instance)
{
    789c:	b500      	push	{lr}
    789e:	b087      	sub	sp, #28
    78a0:	4603      	mov	r3, r0
    78a2:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base;
    Lpspi_Ip_StateStructureType* State;
    uint32 Cfgr1 = 0u;
    78a6:	2300      	movs	r3, #0
    78a8:	9305      	str	r3, [sp, #20]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    Base = Lpspi_Ip_apxBases[Instance];
    78aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78ae:	4a18      	ldr	r2, [pc, #96]	; (7910 <Lpspi_Ip_Cancel+0x74>)
    78b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78b4:	9304      	str	r3, [sp, #16]
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    78b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78ba:	4a16      	ldr	r2, [pc, #88]	; (7914 <Lpspi_Ip_Cancel+0x78>)
    78bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    78c0:	9303      	str	r3, [sp, #12]
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(NULL_PTR != State);
    #endif
    SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10();
    78c2:	f002 fb6b 	bl	9f9c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>
    if (LPSPI_IP_BUSY == State->Status)
    78c6:	9b03      	ldr	r3, [sp, #12]
    78c8:	685b      	ldr	r3, [r3, #4]
    78ca:	2b02      	cmp	r3, #2
    78cc:	d11a      	bne.n	7904 <Lpspi_Ip_Cancel+0x68>
    {
        /* Mask Rx to discard received data */
        Base->TCR |= LPSPI_TCR_RXMSK(1);
    78ce:	9b04      	ldr	r3, [sp, #16]
    78d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    78d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
    78d6:	9b04      	ldr	r3, [sp, #16]
    78d8:	661a      	str	r2, [r3, #96]	; 0x60
        /* store CFGR1 and restore after all registers are reset */
        Cfgr1 = Base->CFGR1;
    78da:	9b04      	ldr	r3, [sp, #16]
    78dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    78de:	9305      	str	r3, [sp, #20]
        /* Disable interrupts and DMA requests. */
        /* Clear FIFO */
        /* RTF and RRF will not clear shifter, so RST must be used to ensure old Data in shifter will also be cleared. */
        Base->CR |= LPSPI_CR_RST_MASK;
    78e0:	9b04      	ldr	r3, [sp, #16]
    78e2:	691b      	ldr	r3, [r3, #16]
    78e4:	f043 0202 	orr.w	r2, r3, #2
    78e8:	9b04      	ldr	r3, [sp, #16]
    78ea:	611a      	str	r2, [r3, #16]
        Base->CR &= ~LPSPI_CR_RST_MASK;
    78ec:	9b04      	ldr	r3, [sp, #16]
    78ee:	691b      	ldr	r3, [r3, #16]
    78f0:	f023 0202 	bic.w	r2, r3, #2
    78f4:	9b04      	ldr	r3, [sp, #16]
    78f6:	611a      	str	r2, [r3, #16]
        /* restore CFGR1 */
        Base->CFGR1 = Cfgr1;
    78f8:	9b04      	ldr	r3, [sp, #16]
    78fa:	9a05      	ldr	r2, [sp, #20]
    78fc:	625a      	str	r2, [r3, #36]	; 0x24
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->RxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            (void)Dma_Ip_SetLogicChannelCommand(State->PhyUnitConfig->TxDmaChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
        }
        #endif
        /* set State to idle */
        State->Status = LPSPI_IP_IDLE;
    78fe:	9b03      	ldr	r3, [sp, #12]
    7900:	2201      	movs	r2, #1
    7902:	605a      	str	r2, [r3, #4]
    }
    SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10();
    7904:	f002 fb76 	bl	9ff4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>
}
    7908:	bf00      	nop
    790a:	b007      	add	sp, #28
    790c:	f85d fb04 	ldr.w	pc, [sp], #4
    7910:	0000ad64 	.word	0x0000ad64
    7914:	1fff8d38 	.word	0x1fff8d38

00007918 <Lpspi_Ip_IrqHandler>:
* @param[in]     Instance            Instance of the hardware unit.
*
* @implements Lpspi_Ip_IrqHandler_Activity
*/
void Lpspi_Ip_IrqHandler(uint8 Instance)
{
    7918:	b500      	push	{lr}
    791a:	b087      	sub	sp, #28
    791c:	4603      	mov	r3, r0
    791e:	f88d 3007 	strb.w	r3, [sp, #7]
    LPSPI_Type* Base = Lpspi_Ip_apxBases[Instance];
    7922:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7926:	4a18      	ldr	r2, [pc, #96]	; (7988 <Lpspi_Ip_IrqHandler+0x70>)
    7928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    792c:	9305      	str	r3, [sp, #20]
    const Lpspi_Ip_StateStructureType* State = Lpspi_Ip_apxStateStructureArray[Instance];
    792e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7932:	4a16      	ldr	r2, [pc, #88]	; (798c <Lpspi_Ip_IrqHandler+0x74>)
    7934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7938:	9304      	str	r3, [sp, #16]
    uint32 IrqFlags = 0u;
    793a:	2300      	movs	r3, #0
    793c:	9303      	str	r3, [sp, #12]

    if (NULL_PTR != State)
    793e:	9b04      	ldr	r3, [sp, #16]
    7940:	2b00      	cmp	r3, #0
    7942:	d016      	beq.n	7972 <Lpspi_Ip_IrqHandler+0x5a>
    {
        /* the driver has been initialized */
        IrqFlags = Base->SR & (LPSPI_SR_TDF_MASK | LPSPI_SR_RDF_MASK | LPSPI_SR_TEF_MASK | LPSPI_SR_REF_MASK);
    7944:	9b05      	ldr	r3, [sp, #20]
    7946:	695a      	ldr	r2, [r3, #20]
    7948:	f641 0303 	movw	r3, #6147	; 0x1803
    794c:	4013      	ands	r3, r2
    794e:	9303      	str	r3, [sp, #12]
        IrqFlags &= Base->IER & (LPSPI_IER_TDIE_MASK | LPSPI_IER_RDIE_MASK | LPSPI_IER_TEIE_MASK | LPSPI_IER_REIE_MASK);
    7950:	9b05      	ldr	r3, [sp, #20]
    7952:	699a      	ldr	r2, [r3, #24]
    7954:	f641 0303 	movw	r3, #6147	; 0x1803
    7958:	4013      	ands	r3, r2
    795a:	9a03      	ldr	r2, [sp, #12]
    795c:	4013      	ands	r3, r2
    795e:	9303      	str	r3, [sp, #12]
        if (0u != IrqFlags)
    7960:	9b03      	ldr	r3, [sp, #12]
    7962:	2b00      	cmp	r3, #0
    7964:	d00b      	beq.n	797e <Lpspi_Ip_IrqHandler+0x66>
                Lpspi_Ip_TransferProcessHalfDuplex(Instance);    
            }
            else
            #endif
            {
                Lpspi_Ip_TransferProcess(Instance); 
    7966:	f89d 3007 	ldrb.w	r3, [sp, #7]
    796a:	4618      	mov	r0, r3
    796c:	f7fe ffde 	bl	692c <Lpspi_Ip_TransferProcess>
    {
        /* the driver has not been initialized */
        /* clear all flags */
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    }
}
    7970:	e005      	b.n	797e <Lpspi_Ip_IrqHandler+0x66>
        Base->SR &= LPSPI_IP_SR_W1C_MASK_U32;
    7972:	9b05      	ldr	r3, [sp, #20]
    7974:	695b      	ldr	r3, [r3, #20]
    7976:	f403 527c 	and.w	r2, r3, #16128	; 0x3f00
    797a:	9b05      	ldr	r3, [sp, #20]
    797c:	615a      	str	r2, [r3, #20]
}
    797e:	bf00      	nop
    7980:	b007      	add	sp, #28
    7982:	f85d fb04 	ldr.w	pc, [sp], #4
    7986:	bf00      	nop
    7988:	0000ad64 	.word	0x0000ad64
    798c:	1fff8d38 	.word	0x1fff8d38

00007990 <Lpspi_Ip_GetStatus>:
* @param[in]        Instance - SPI peripheral instance number.
*
* @return           Lpspi_Ip_HwStatusType
*/
Lpspi_Ip_HwStatusType Lpspi_Ip_GetStatus(uint8 Instance)
{
    7990:	b084      	sub	sp, #16
    7992:	4603      	mov	r3, r0
    7994:	f88d 3007 	strb.w	r3, [sp, #7]
    const Lpspi_Ip_StateStructureType* State;
    Lpspi_Ip_HwStatusType Status = LPSPI_IP_UNINIT;
    7998:	2300      	movs	r3, #0
    799a:	9303      	str	r3, [sp, #12]
    
    #if (STD_ON == LPSPI_IP_DEV_ERROR_DETECT)
    DevAssert(Instance < LPSPI_INSTANCE_COUNT);
    #endif
    State = Lpspi_Ip_apxStateStructureArray[Instance];
    799c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    79a0:	4a06      	ldr	r2, [pc, #24]	; (79bc <Lpspi_Ip_GetStatus+0x2c>)
    79a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79a6:	9302      	str	r3, [sp, #8]
    if (State != NULL_PTR)
    79a8:	9b02      	ldr	r3, [sp, #8]
    79aa:	2b00      	cmp	r3, #0
    79ac:	d002      	beq.n	79b4 <Lpspi_Ip_GetStatus+0x24>
    {
        Status = State->Status;
    79ae:	9b02      	ldr	r3, [sp, #8]
    79b0:	685b      	ldr	r3, [r3, #4]
    79b2:	9303      	str	r3, [sp, #12]
    }
    
    return Status;
    79b4:	9b03      	ldr	r3, [sp, #12]
}
    79b6:	4618      	mov	r0, r3
    79b8:	b004      	add	sp, #16
    79ba:	4770      	bx	lr
    79bc:	1fff8d38 	.word	0x1fff8d38

000079c0 <Spi_CheckInit>:
static inline Std_ReturnType Spi_CheckInit
    ( 
        const Spi_ConfigType *ConfigPtr,
        uint32 SpiCoreID
    )
{
    79c0:	b086      	sub	sp, #24
    79c2:	9001      	str	r0, [sp, #4]
    79c4:	9100      	str	r1, [sp, #0]
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    79c6:	2300      	movs	r3, #0
    79c8:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 Sequence;
#endif

#if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
    /* Configuration sizes must be checked for Post Build & Link Time configurations */
    Channel  = (uint32)(ConfigPtr->SpiMaxChannel);
    79cc:	9b01      	ldr	r3, [sp, #4]
    79ce:	789b      	ldrb	r3, [r3, #2]
    79d0:	9304      	str	r3, [sp, #16]
    Job      = (uint32)(ConfigPtr->SpiMaxJob);
    79d2:	9b01      	ldr	r3, [sp, #4]
    79d4:	889b      	ldrh	r3, [r3, #4]
    79d6:	9303      	str	r3, [sp, #12]
    Sequence = (uint32)(ConfigPtr->SpiMaxSequence);
    79d8:	9b01      	ldr	r3, [sp, #4]
    79da:	799b      	ldrb	r3, [r3, #6]
    79dc:	9302      	str	r3, [sp, #8]

    if ((Channel >= SPI_MAX_CHANNEL) || (Job >= SPI_MAX_JOB) || (Sequence >= SPI_MAX_SEQUENCE))
    79de:	9b04      	ldr	r3, [sp, #16]
    79e0:	2b01      	cmp	r3, #1
    79e2:	d805      	bhi.n	79f0 <Spi_CheckInit+0x30>
    79e4:	9b03      	ldr	r3, [sp, #12]
    79e6:	2b01      	cmp	r3, #1
    79e8:	d802      	bhi.n	79f0 <Spi_CheckInit+0x30>
    79ea:	9b02      	ldr	r3, [sp, #8]
    79ec:	2b00      	cmp	r3, #0
    79ee:	d002      	beq.n	79f6 <Spi_CheckInit+0x36>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    79f0:	2301      	movs	r3, #1
    79f2:	f88d 3017 	strb.w	r3, [sp, #23]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_CONFIG_OUT_OF_RANGE);
#endif
    }
    if (SpiCoreID != ConfigPtr->SpiCoreUse)
    79f6:	9b01      	ldr	r3, [sp, #4]
    79f8:	689b      	ldr	r3, [r3, #8]
    79fa:	9a00      	ldr	r2, [sp, #0]
    79fc:	429a      	cmp	r2, r3
    79fe:	d002      	beq.n	7a06 <Spi_CheckInit+0x46>
    {
        CheckStatus = (Std_ReturnType)E_NOT_OK;
    7a00:	2301      	movs	r3, #1
    7a02:	f88d 3017 	strb.w	r3, [sp, #23]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_INIT_ID,SPI_E_INVALID_POINTER);
#endif
    }
#endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */

    return CheckStatus;
    7a06:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7a0a:	4618      	mov	r0, r3
    7a0c:	b006      	add	sp, #24
    7a0e:	4770      	bx	lr

00007a10 <Spi_SyncJobsTranfer>:
static Std_ReturnType Spi_SyncJobsTranfer
    (
        const Spi_SequenceConfigType *SequenceConfig,
        uint32 SpiCoreID
    )
{
    7a10:	b500      	push	{lr}
    7a12:	b089      	sub	sp, #36	; 0x24
    7a14:	9001      	str	r0, [sp, #4]
    7a16:	9100      	str	r1, [sp, #0]
    Spi_JobType JobsCount;
    const Spi_JobType *JobIndexList;
    Spi_JobType Job;
    Spi_JobStateType *JobState;
    const Spi_JobConfigType *JobConfig;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    7a18:	2300      	movs	r3, #0
    7a1a:	f88d 3017 	strb.w	r3, [sp, #23]
    
    /* Get the number of jobs in the sequence */
    JobsCount = SequenceConfig->NumJobs;
    7a1e:	9b01      	ldr	r3, [sp, #4]
    7a20:	881b      	ldrh	r3, [r3, #0]
    7a22:	f8ad 301e 	strh.w	r3, [sp, #30]
    JobIndexList = SequenceConfig->JobIndexList;
    7a26:	9b01      	ldr	r3, [sp, #4]
    7a28:	689b      	ldr	r3, [r3, #8]
    7a2a:	9306      	str	r3, [sp, #24]
    while (0u < JobsCount)
    7a2c:	e072      	b.n	7b14 <Spi_SyncJobsTranfer+0x104>
    {
        /* Get the job id */
        Job = *JobIndexList;
    7a2e:	9b06      	ldr	r3, [sp, #24]
    7a30:	881b      	ldrh	r3, [r3, #0]
    7a32:	f8ad 3014 	strh.w	r3, [sp, #20]
        /* Set the job status as pending */
        JobState = &Spi_axSpiJobState[Job];
    7a36:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a3a:	009b      	lsls	r3, r3, #2
    7a3c:	4a3a      	ldr	r2, [pc, #232]	; (7b28 <Spi_SyncJobsTranfer+0x118>)
    7a3e:	4413      	add	r3, r2
    7a40:	9304      	str	r3, [sp, #16]
        JobState->Result = SPI_JOB_PENDING;
    7a42:	9b04      	ldr	r3, [sp, #16]
    7a44:	2201      	movs	r2, #1
    7a46:	601a      	str	r2, [r3, #0]
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    7a48:	4a38      	ldr	r2, [pc, #224]	; (7b2c <Spi_SyncJobsTranfer+0x11c>)
    7a4a:	9b00      	ldr	r3, [sp, #0]
    7a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a50:	691a      	ldr	r2, [r3, #16]
    7a52:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    7a56:	009b      	lsls	r3, r3, #2
    7a58:	4413      	add	r3, r2
    7a5a:	681b      	ldr	r3, [r3, #0]
    7a5c:	9303      	str	r3, [sp, #12]
        
        /* start job notification to assert the non-cs pin,
        when non-cs pin is used as chipselect*/
        if (NULL_PTR != JobConfig->StartNotification)
    7a5e:	9b03      	ldr	r3, [sp, #12]
    7a60:	68db      	ldr	r3, [r3, #12]
    7a62:	2b00      	cmp	r3, #0
    7a64:	d002      	beq.n	7a6c <Spi_SyncJobsTranfer+0x5c>
        {
            JobConfig->StartNotification();
    7a66:	9b03      	ldr	r3, [sp, #12]
    7a68:	68db      	ldr	r3, [r3, #12]
    7a6a:	4798      	blx	r3
        else
        {
            /* Do nothing */
        }
        /* Mark HWUnit as busy */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_BUSY;
    7a6c:	9b03      	ldr	r3, [sp, #12]
    7a6e:	7f1b      	ldrb	r3, [r3, #28]
    7a70:	4619      	mov	r1, r3
    7a72:	4b2f      	ldr	r3, [pc, #188]	; (7b30 <Spi_SyncJobsTranfer+0x120>)
    7a74:	2202      	movs	r2, #2
    7a76:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        Status = Spi_Ipw_SyncTransmit(JobConfig, SpiCoreID);
    7a7a:	9900      	ldr	r1, [sp, #0]
    7a7c:	9803      	ldr	r0, [sp, #12]
    7a7e:	f000 fc5f 	bl	8340 <Spi_Ipw_SyncTransmit>
    7a82:	4603      	mov	r3, r0
    7a84:	f88d 3017 	strb.w	r3, [sp, #23]
        
        /* release HWUnit */
        Spi_axSpiHwUnitQueueArray[JobConfig->HWUnit].Status = SPI_IDLE;
    7a88:	9b03      	ldr	r3, [sp, #12]
    7a8a:	7f1b      	ldrb	r3, [r3, #28]
    7a8c:	4619      	mov	r1, r3
    7a8e:	4b28      	ldr	r3, [pc, #160]	; (7b30 <Spi_SyncJobsTranfer+0x120>)
    7a90:	2201      	movs	r2, #1
    7a92:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        
        if ((Std_ReturnType)E_OK == Status)
    7a96:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7a9a:	2b00      	cmp	r3, #0
    7a9c:	d10a      	bne.n	7ab4 <Spi_SyncJobsTranfer+0xa4>
        {
            /* Job is done set the status as OK */
            JobState->Result = SPI_JOB_OK;
    7a9e:	9b04      	ldr	r3, [sp, #16]
    7aa0:	2200      	movs	r2, #0
    7aa2:	601a      	str	r2, [r3, #0]
            /* Perform job EndNotification (if there is one) */
            if (NULL_PTR != JobConfig->EndNotification)
    7aa4:	9b03      	ldr	r3, [sp, #12]
    7aa6:	689b      	ldr	r3, [r3, #8]
    7aa8:	2b00      	cmp	r3, #0
    7aaa:	d02b      	beq.n	7b04 <Spi_SyncJobsTranfer+0xf4>
            {
                JobConfig->EndNotification();
    7aac:	9b03      	ldr	r3, [sp, #12]
    7aae:	689b      	ldr	r3, [r3, #8]
    7ab0:	4798      	blx	r3
    7ab2:	e027      	b.n	7b04 <Spi_SyncJobsTranfer+0xf4>
            /* transmission failed */
            /* set the remaining job status (including the current one) as FAILED */
            do
            {
                /* Set the job status as FAILED */
                Spi_axSpiJobState[*JobIndexList].Result = SPI_JOB_FAILED;
    7ab4:	9b06      	ldr	r3, [sp, #24]
    7ab6:	881b      	ldrh	r3, [r3, #0]
    7ab8:	4619      	mov	r1, r3
    7aba:	4b1b      	ldr	r3, [pc, #108]	; (7b28 <Spi_SyncJobsTranfer+0x118>)
    7abc:	2202      	movs	r2, #2
    7abe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                /* Update pointer position for JobConfig */
                JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[*JobIndexList].JobCfg;
    7ac2:	4a1a      	ldr	r2, [pc, #104]	; (7b2c <Spi_SyncJobsTranfer+0x11c>)
    7ac4:	9b00      	ldr	r3, [sp, #0]
    7ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7aca:	691a      	ldr	r2, [r3, #16]
    7acc:	9b06      	ldr	r3, [sp, #24]
    7ace:	881b      	ldrh	r3, [r3, #0]
    7ad0:	009b      	lsls	r3, r3, #2
    7ad2:	4413      	add	r3, r2
    7ad4:	681b      	ldr	r3, [r3, #0]
    7ad6:	9303      	str	r3, [sp, #12]
                /* Perform job EndNotification (if there is one) */
                if (NULL_PTR != JobConfig->EndNotification)
    7ad8:	9b03      	ldr	r3, [sp, #12]
    7ada:	689b      	ldr	r3, [r3, #8]
    7adc:	2b00      	cmp	r3, #0
    7ade:	d002      	beq.n	7ae6 <Spi_SyncJobsTranfer+0xd6>
                {
                    JobConfig->EndNotification();
    7ae0:	9b03      	ldr	r3, [sp, #12]
    7ae2:	689b      	ldr	r3, [r3, #8]
    7ae4:	4798      	blx	r3
                }
                else
                {
                    /* Do nothing */
                }
                JobIndexList++;
    7ae6:	9b06      	ldr	r3, [sp, #24]
    7ae8:	3302      	adds	r3, #2
    7aea:	9306      	str	r3, [sp, #24]
                JobsCount--;
    7aec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7af0:	3b01      	subs	r3, #1
    7af2:	f8ad 301e 	strh.w	r3, [sp, #30]
            } while (0u < JobsCount);
    7af6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7afa:	2b00      	cmp	r3, #0
    7afc:	d1da      	bne.n	7ab4 <Spi_SyncJobsTranfer+0xa4>
            JobsCount = 1u;  /* needed to end correctly the outer loop */
    7afe:	2301      	movs	r3, #1
    7b00:	f8ad 301e 	strh.w	r3, [sp, #30]
        }
        /* iterate to next job in sequence */
        JobIndexList++;
    7b04:	9b06      	ldr	r3, [sp, #24]
    7b06:	3302      	adds	r3, #2
    7b08:	9306      	str	r3, [sp, #24]
        JobsCount--;
    7b0a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7b0e:	3b01      	subs	r3, #1
    7b10:	f8ad 301e 	strh.w	r3, [sp, #30]
    while (0u < JobsCount)
    7b14:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7b18:	2b00      	cmp	r3, #0
    7b1a:	d188      	bne.n	7a2e <Spi_SyncJobsTranfer+0x1e>
    } /* while (JobsCount > 0u) */
    return Status;
    7b1c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    7b20:	4618      	mov	r0, r3
    7b22:	b009      	add	sp, #36	; 0x24
    7b24:	f85d fb04 	ldr.w	pc, [sp], #4
    7b28:	1fff8d54 	.word	0x1fff8d54
    7b2c:	1fff8d4c 	.word	0x1fff8d4c
    7b30:	1fff8d44 	.word	0x1fff8d44

00007b34 <Spi_InitChannelsJobsSeqsState>:
*/
static void Spi_InitChannelsJobsSeqsState
    (
        uint32 SpiCoreID      
    )
{
    7b34:	b088      	sub	sp, #32
    7b36:	9001      	str	r0, [sp, #4]
#endif
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_JobConfigType *JobConfig;
    const Spi_SequenceConfigType *SequenceConfig;
    
    for (Channel = 0u;
    7b38:	2300      	movs	r3, #0
    7b3a:	9307      	str	r3, [sp, #28]
    7b3c:	e034      	b.n	7ba8 <Spi_InitChannelsJobsSeqsState+0x74>
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
        Channel++)
    {
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    7b3e:	4a4a      	ldr	r2, [pc, #296]	; (7c68 <Spi_InitChannelsJobsSeqsState+0x134>)
    7b40:	9b01      	ldr	r3, [sp, #4]
    7b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b46:	68da      	ldr	r2, [r3, #12]
    7b48:	9b07      	ldr	r3, [sp, #28]
    7b4a:	009b      	lsls	r3, r3, #2
    7b4c:	4413      	add	r3, r2
    7b4e:	681b      	ldr	r3, [r3, #0]
    7b50:	9302      	str	r3, [sp, #8]
        /* Check which channel has assigned for current core */
        if((NULL_PTR != ChannelConfig) && (SpiCoreID == ChannelConfig->SpiCoreUse))
    7b52:	9b02      	ldr	r3, [sp, #8]
    7b54:	2b00      	cmp	r3, #0
    7b56:	d024      	beq.n	7ba2 <Spi_InitChannelsJobsSeqsState+0x6e>
    7b58:	9b02      	ldr	r3, [sp, #8]
    7b5a:	695b      	ldr	r3, [r3, #20]
    7b5c:	9a01      	ldr	r2, [sp, #4]
    7b5e:	429a      	cmp	r2, r3
    7b60:	d11f      	bne.n	7ba2 <Spi_InitChannelsJobsSeqsState+0x6e>
        {
            /* Check if configured buffers are External (EB) */
            if (EB == ChannelConfig->BufferType)
    7b62:	9b02      	ldr	r3, [sp, #8]
    7b64:	681b      	ldr	r3, [r3, #0]
    7b66:	2b01      	cmp	r3, #1
    7b68:	d10e      	bne.n	7b88 <Spi_InitChannelsJobsSeqsState+0x54>
            {
                /* Initialize all buffers */
                ChannelConfig->BufferDescriptor->ExternalBufferTX = NULL_PTR;
    7b6a:	9b02      	ldr	r3, [sp, #8]
    7b6c:	691b      	ldr	r3, [r3, #16]
    7b6e:	2200      	movs	r2, #0
    7b70:	601a      	str	r2, [r3, #0]
                ChannelConfig->BufferDescriptor->BufferRX = NULL_PTR;
    7b72:	9b02      	ldr	r3, [sp, #8]
    7b74:	691b      	ldr	r3, [r3, #16]
    7b76:	2200      	movs	r2, #0
    7b78:	609a      	str	r2, [r3, #8]
    
                /* Channel length is zero for unconfigured external buffers */
                Spi_axSpiChannelState[Channel].Length = (Spi_NumberOfDataType) 0;
    7b7a:	4a3c      	ldr	r2, [pc, #240]	; (7c6c <Spi_InitChannelsJobsSeqsState+0x138>)
    7b7c:	9b07      	ldr	r3, [sp, #28]
    7b7e:	009b      	lsls	r3, r3, #2
    7b80:	4413      	add	r3, r2
    7b82:	2200      	movs	r2, #0
    7b84:	805a      	strh	r2, [r3, #2]
    7b86:	e007      	b.n	7b98 <Spi_InitChannelsJobsSeqsState+0x64>
            }
            else
            {
                /* Setup channel length according to configuration */
                Spi_axSpiChannelState[Channel].Length = ChannelConfig->Length;
    7b88:	9b02      	ldr	r3, [sp, #8]
    7b8a:	8999      	ldrh	r1, [r3, #12]
    7b8c:	4a37      	ldr	r2, [pc, #220]	; (7c6c <Spi_InitChannelsJobsSeqsState+0x138>)
    7b8e:	9b07      	ldr	r3, [sp, #28]
    7b90:	009b      	lsls	r3, r3, #2
    7b92:	4413      	add	r3, r2
    7b94:	460a      	mov	r2, r1
    7b96:	805a      	strh	r2, [r3, #2]
            }
            Spi_axSpiChannelState[Channel].Flags = SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    7b98:	4a34      	ldr	r2, [pc, #208]	; (7c6c <Spi_InitChannelsJobsSeqsState+0x138>)
    7b9a:	9b07      	ldr	r3, [sp, #28]
    7b9c:	2101      	movs	r1, #1
    7b9e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
        Channel++)
    7ba2:	9b07      	ldr	r3, [sp, #28]
    7ba4:	3301      	adds	r3, #1
    7ba6:	9307      	str	r3, [sp, #28]
        Channel <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxChannel);
    7ba8:	4a2f      	ldr	r2, [pc, #188]	; (7c68 <Spi_InitChannelsJobsSeqsState+0x134>)
    7baa:	9b01      	ldr	r3, [sp, #4]
    7bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bb0:	789b      	ldrb	r3, [r3, #2]
    7bb2:	461a      	mov	r2, r3
    for (Channel = 0u;
    7bb4:	9b07      	ldr	r3, [sp, #28]
    7bb6:	4293      	cmp	r3, r2
    7bb8:	d9c1      	bls.n	7b3e <Spi_InitChannelsJobsSeqsState+0xa>
        }
    }
    
    /* initialize job results */
    for (Job = 0u;
    7bba:	2300      	movs	r3, #0
    7bbc:	9306      	str	r3, [sp, #24]
    7bbe:	e019      	b.n	7bf4 <Spi_InitChannelsJobsSeqsState+0xc0>
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
        Job++)
    {
        JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    7bc0:	4a29      	ldr	r2, [pc, #164]	; (7c68 <Spi_InitChannelsJobsSeqsState+0x134>)
    7bc2:	9b01      	ldr	r3, [sp, #4]
    7bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bc8:	691a      	ldr	r2, [r3, #16]
    7bca:	9b06      	ldr	r3, [sp, #24]
    7bcc:	009b      	lsls	r3, r3, #2
    7bce:	4413      	add	r3, r2
    7bd0:	681b      	ldr	r3, [r3, #0]
    7bd2:	9303      	str	r3, [sp, #12]
        if((NULL_PTR != JobConfig) && (SpiCoreID == JobConfig->SpiCoreUse))
    7bd4:	9b03      	ldr	r3, [sp, #12]
    7bd6:	2b00      	cmp	r3, #0
    7bd8:	d009      	beq.n	7bee <Spi_InitChannelsJobsSeqsState+0xba>
    7bda:	9b03      	ldr	r3, [sp, #12]
    7bdc:	695b      	ldr	r3, [r3, #20]
    7bde:	9a01      	ldr	r2, [sp, #4]
    7be0:	429a      	cmp	r2, r3
    7be2:	d104      	bne.n	7bee <Spi_InitChannelsJobsSeqsState+0xba>
        {
            Spi_axSpiJobState[Job].Result = SPI_JOB_OK;
    7be4:	4a22      	ldr	r2, [pc, #136]	; (7c70 <Spi_InitChannelsJobsSeqsState+0x13c>)
    7be6:	9b06      	ldr	r3, [sp, #24]
    7be8:	2100      	movs	r1, #0
    7bea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Job++)
    7bee:	9b06      	ldr	r3, [sp, #24]
    7bf0:	3301      	adds	r3, #1
    7bf2:	9306      	str	r3, [sp, #24]
        Job <= (uint32)( Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxJob);
    7bf4:	4a1c      	ldr	r2, [pc, #112]	; (7c68 <Spi_InitChannelsJobsSeqsState+0x134>)
    7bf6:	9b01      	ldr	r3, [sp, #4]
    7bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bfc:	889b      	ldrh	r3, [r3, #4]
    7bfe:	461a      	mov	r2, r3
    for (Job = 0u;
    7c00:	9b06      	ldr	r3, [sp, #24]
    7c02:	4293      	cmp	r3, r2
    7c04:	d9dc      	bls.n	7bc0 <Spi_InitChannelsJobsSeqsState+0x8c>
            Spi_axSpiJobState[Job].AsyncCrtSequenceState = NULL_PTR;
        #endif
        }
    }
    
    for (Sequence = 0u;
    7c06:	2300      	movs	r3, #0
    7c08:	9305      	str	r3, [sp, #20]
    7c0a:	e01f      	b.n	7c4c <Spi_InitChannelsJobsSeqsState+0x118>
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
        Sequence++)
    {
        SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    7c0c:	4a16      	ldr	r2, [pc, #88]	; (7c68 <Spi_InitChannelsJobsSeqsState+0x134>)
    7c0e:	9b01      	ldr	r3, [sp, #4]
    7c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c14:	695a      	ldr	r2, [r3, #20]
    7c16:	9b05      	ldr	r3, [sp, #20]
    7c18:	009b      	lsls	r3, r3, #2
    7c1a:	4413      	add	r3, r2
    7c1c:	681b      	ldr	r3, [r3, #0]
    7c1e:	9304      	str	r3, [sp, #16]
        if ((NULL_PTR != SequenceConfig) && (SpiCoreID == SequenceConfig->SpiCoreUse))
    7c20:	9b04      	ldr	r3, [sp, #16]
    7c22:	2b00      	cmp	r3, #0
    7c24:	d00f      	beq.n	7c46 <Spi_InitChannelsJobsSeqsState+0x112>
    7c26:	9b04      	ldr	r3, [sp, #16]
    7c28:	685b      	ldr	r3, [r3, #4]
    7c2a:	9a01      	ldr	r2, [sp, #4]
    7c2c:	429a      	cmp	r2, r3
    7c2e:	d10a      	bne.n	7c46 <Spi_InitChannelsJobsSeqsState+0x112>
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
            Spi_axSpiSequenceState[Sequence].Sequence = SequenceConfig;
            #endif
    
            /* initialize sequence results */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_OK;
    7c30:	4a10      	ldr	r2, [pc, #64]	; (7c74 <Spi_InitChannelsJobsSeqsState+0x140>)
    7c32:	9b05      	ldr	r3, [sp, #20]
    7c34:	2100      	movs	r1, #0
    7c36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* SPI135: Spi_SyncTransmit() must fail if an other sync transmission
                    is ongoing.*/
            /* mark all HW units as used by the sync transmission, in order to
                force the mutual exclusion of Spi_SyncTransmit() calls */
    
            Spi_au32SpiSeqUsedHWUnits[Sequence] = 0xFFFFFFFFU;
    7c3a:	4a0f      	ldr	r2, [pc, #60]	; (7c78 <Spi_InitChannelsJobsSeqsState+0x144>)
    7c3c:	9b05      	ldr	r3, [sp, #20]
    7c3e:	f04f 31ff 	mov.w	r1, #4294967295
    7c42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        Sequence++)
    7c46:	9b05      	ldr	r3, [sp, #20]
    7c48:	3301      	adds	r3, #1
    7c4a:	9305      	str	r3, [sp, #20]
        Sequence <= (uint32)(Spi_apxSpiConfigPtr[SpiCoreID]->SpiMaxSequence);
    7c4c:	4a06      	ldr	r2, [pc, #24]	; (7c68 <Spi_InitChannelsJobsSeqsState+0x134>)
    7c4e:	9b01      	ldr	r3, [sp, #4]
    7c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c54:	799b      	ldrb	r3, [r3, #6]
    7c56:	461a      	mov	r2, r3
    for (Sequence = 0u;
    7c58:	9b05      	ldr	r3, [sp, #20]
    7c5a:	4293      	cmp	r3, r2
    7c5c:	d9d6      	bls.n	7c0c <Spi_InitChannelsJobsSeqsState+0xd8>
        else
        {
            /* Do nothing */
        }
    }
}
    7c5e:	bf00      	nop
    7c60:	bf00      	nop
    7c62:	b008      	add	sp, #32
    7c64:	4770      	bx	lr
    7c66:	bf00      	nop
    7c68:	1fff8d4c 	.word	0x1fff8d4c
    7c6c:	1fff8d5c 	.word	0x1fff8d5c
    7c70:	1fff8d54 	.word	0x1fff8d54
    7c74:	1fff8d50 	.word	0x1fff8d50
    7c78:	1fff8d64 	.word	0x1fff8d64

00007c7c <Spi_GetStatusAsyncCheckHwBusy>:
*/
static Spi_StatusType Spi_GetStatusAsyncCheckHwBusy
    (
        uint32 SpiCoreID
    )
{
    7c7c:	b084      	sub	sp, #16
    7c7e:	9001      	str	r0, [sp, #4]
    Spi_StatusType StatusFlag = SPI_IDLE;
    7c80:	2301      	movs	r3, #1
    7c82:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    7c84:	2300      	movs	r3, #0
    7c86:	f88d 300b 	strb.w	r3, [sp, #11]
    7c8a:	e028      	b.n	7cde <Spi_GetStatusAsyncCheckHwBusy+0x62>
    {
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7c8c:	4a18      	ldr	r2, [pc, #96]	; (7cf0 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    7c8e:	9b01      	ldr	r3, [sp, #4]
    7c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c94:	69da      	ldr	r2, [r3, #28]
    7c96:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c9a:	009b      	lsls	r3, r3, #2
    7c9c:	4413      	add	r3, r2
    7c9e:	681b      	ldr	r3, [r3, #0]
    7ca0:	2b00      	cmp	r3, #0
    7ca2:	d017      	beq.n	7cd4 <Spi_GetStatusAsyncCheckHwBusy+0x58>
            (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    7ca4:	4a12      	ldr	r2, [pc, #72]	; (7cf0 <Spi_GetStatusAsyncCheckHwBusy+0x74>)
    7ca6:	9b01      	ldr	r3, [sp, #4]
    7ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7cac:	69da      	ldr	r2, [r3, #28]
    7cae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7cb2:	009b      	lsls	r3, r3, #2
    7cb4:	4413      	add	r3, r2
    7cb6:	681b      	ldr	r3, [r3, #0]
    7cb8:	689b      	ldr	r3, [r3, #8]
        if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7cba:	9a01      	ldr	r2, [sp, #4]
    7cbc:	429a      	cmp	r2, r3
    7cbe:	d109      	bne.n	7cd4 <Spi_GetStatusAsyncCheckHwBusy+0x58>
           )
        {
            if (SPI_BUSY == Spi_axSpiHwUnitQueueArray[HWUnit].Status)
    7cc0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7cc4:	4a0b      	ldr	r2, [pc, #44]	; (7cf4 <Spi_GetStatusAsyncCheckHwBusy+0x78>)
    7cc6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    7cca:	2b02      	cmp	r3, #2
    7ccc:	d102      	bne.n	7cd4 <Spi_GetStatusAsyncCheckHwBusy+0x58>
            {
                StatusFlag = SPI_BUSY;
    7cce:	2302      	movs	r3, #2
    7cd0:	9303      	str	r3, [sp, #12]
                break;
    7cd2:	e008      	b.n	7ce6 <Spi_GetStatusAsyncCheckHwBusy+0x6a>
    for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    7cd4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7cd8:	3301      	adds	r3, #1
    7cda:	f88d 300b 	strb.w	r3, [sp, #11]
    7cde:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7ce2:	2b00      	cmp	r3, #0
    7ce4:	d0d2      	beq.n	7c8c <Spi_GetStatusAsyncCheckHwBusy+0x10>
        else
        {
            /* Do nothing */
        }
    }
    return StatusFlag;
    7ce6:	9b03      	ldr	r3, [sp, #12]
}
    7ce8:	4618      	mov	r0, r3
    7cea:	b004      	add	sp, #16
    7cec:	4770      	bx	lr
    7cee:	bf00      	nop
    7cf0:	1fff8d4c 	.word	0x1fff8d4c
    7cf4:	1fff8d44 	.word	0x1fff8d44

00007cf8 <Spi_GetVersionInfo>:
/** @implements Spi_GetVersionInfo_Activity */
void Spi_GetVersionInfo 
    (
        Std_VersionInfoType *versioninfo
    )
{
    7cf8:	b082      	sub	sp, #8
    7cfa:	9001      	str	r0, [sp, #4]
        (void)Det_ReportError((uint16)SPI_MODULE_ID,(uint8)0,SPI_GETVERSIONINFO_ID,SPI_E_PARAM_POINTER);
    }
    else
    {
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
    versioninfo->vendorID = (uint16)SPI_VENDOR_ID;
    7cfc:	9b01      	ldr	r3, [sp, #4]
    7cfe:	222b      	movs	r2, #43	; 0x2b
    7d00:	801a      	strh	r2, [r3, #0]
    versioninfo->moduleID = (uint8)SPI_MODULE_ID;
    7d02:	9b01      	ldr	r3, [sp, #4]
    7d04:	2253      	movs	r2, #83	; 0x53
    7d06:	805a      	strh	r2, [r3, #2]
    versioninfo->sw_major_version = (uint8)SPI_SW_MAJOR_VERSION;
    7d08:	9b01      	ldr	r3, [sp, #4]
    7d0a:	2202      	movs	r2, #2
    7d0c:	711a      	strb	r2, [r3, #4]
    versioninfo->sw_minor_version = (uint8)SPI_SW_MINOR_VERSION;
    7d0e:	9b01      	ldr	r3, [sp, #4]
    7d10:	2200      	movs	r2, #0
    7d12:	715a      	strb	r2, [r3, #5]
    versioninfo->sw_patch_version = (uint8)SPI_SW_PATCH_VERSION;
    7d14:	9b01      	ldr	r3, [sp, #4]
    7d16:	2200      	movs	r2, #0
    7d18:	719a      	strb	r2, [r3, #6]
#if(SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /* SPI_DEV_ERROR_DETECT == STD_ON */
}
    7d1a:	bf00      	nop
    7d1c:	b002      	add	sp, #8
    7d1e:	4770      	bx	lr

00007d20 <Spi_Init>:
/** @implements Spi_Init_Activity */
void Spi_Init
    (
        const Spi_ConfigType *ConfigPtr
    )
{
    7d20:	b500      	push	{lr}
    7d22:	b085      	sub	sp, #20
    7d24:	9001      	str	r0, [sp, #4]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    Std_ReturnType CheckStatus = (Std_ReturnType)E_OK;
    7d26:	2300      	movs	r3, #0
    7d28:	f88d 300e 	strb.w	r3, [sp, #14]

    SpiCoreID = Spi_GetCoreID;
    7d2c:	2300      	movs	r3, #0
    7d2e:	9302      	str	r3, [sp, #8]
    CheckStatus = Spi_InitCheckDemError(SpiCoreID, ConfigPtr);
    if ((Std_ReturnType)E_OK == CheckStatus) 
    {
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/

    CheckStatus = Spi_CheckInit(ConfigPtr, SpiCoreID);
    7d30:	9902      	ldr	r1, [sp, #8]
    7d32:	9801      	ldr	r0, [sp, #4]
    7d34:	f7ff fe44 	bl	79c0 <Spi_CheckInit>
    7d38:	4603      	mov	r3, r0
    7d3a:	f88d 300e 	strb.w	r3, [sp, #14]

    if((Std_ReturnType)E_OK == CheckStatus )
    7d3e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7d42:	2b00      	cmp	r3, #0
    7d44:	d144      	bne.n	7dd0 <Spi_Init+0xb0>
    {
    #if (SPI_PRECOMPILE_SUPPORT == STD_OFF)
        Spi_apxSpiConfigPtr[SpiCoreID] = ConfigPtr;
    7d46:	4924      	ldr	r1, [pc, #144]	; (7dd8 <Spi_Init+0xb8>)
    7d48:	9b02      	ldr	r3, [sp, #8]
    7d4a:	9a01      	ldr	r2, [sp, #4]
    7d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    #else /* (SPI_CONFIG_VARIANT == SPI_VARIANT_PRECOMPILE) */
        Spi_apxSpiConfigPtr[SpiCoreID] = Spi_PBCfgVariantPredefined[SpiCoreID];
    #endif /* (SPI_PRECOMPILE_SUPPORT == STD_OFF) */
    /* Initiate Channels, Jobs, Sequences state */
    Spi_InitChannelsJobsSeqsState(SpiCoreID);
    7d50:	9802      	ldr	r0, [sp, #8]
    7d52:	f7ff feef 	bl	7b34 <Spi_InitChannelsJobsSeqsState>
        
        /* initialize all physical HWUnits */
        for (HWUnit = (Spi_HWUnitType) 0;
    7d56:	2300      	movs	r3, #0
    7d58:	f88d 300f 	strb.w	r3, [sp, #15]
    7d5c:	e034      	b.n	7dc8 <Spi_Init+0xa8>
            HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
            HWUnit++)
        {
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7d5e:	4a1e      	ldr	r2, [pc, #120]	; (7dd8 <Spi_Init+0xb8>)
    7d60:	9b02      	ldr	r3, [sp, #8]
    7d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d66:	69da      	ldr	r2, [r3, #28]
    7d68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d6c:	009b      	lsls	r3, r3, #2
    7d6e:	4413      	add	r3, r2
    7d70:	681b      	ldr	r3, [r3, #0]
    7d72:	2b00      	cmp	r3, #0
    7d74:	d023      	beq.n	7dbe <Spi_Init+0x9e>
               (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    7d76:	4a18      	ldr	r2, [pc, #96]	; (7dd8 <Spi_Init+0xb8>)
    7d78:	9b02      	ldr	r3, [sp, #8]
    7d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d7e:	69da      	ldr	r2, [r3, #28]
    7d80:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d84:	009b      	lsls	r3, r3, #2
    7d86:	4413      	add	r3, r2
    7d88:	681b      	ldr	r3, [r3, #0]
    7d8a:	689b      	ldr	r3, [r3, #8]
            if((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7d8c:	9a02      	ldr	r2, [sp, #8]
    7d8e:	429a      	cmp	r2, r3
    7d90:	d115      	bne.n	7dbe <Spi_Init+0x9e>
              )
            {
                Spi_Ipw_Init(HWUnit, Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig);
    7d92:	4a11      	ldr	r2, [pc, #68]	; (7dd8 <Spi_Init+0xb8>)
    7d94:	9b02      	ldr	r3, [sp, #8]
    7d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d9a:	69da      	ldr	r2, [r3, #28]
    7d9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7da0:	009b      	lsls	r3, r3, #2
    7da2:	4413      	add	r3, r2
    7da4:	681a      	ldr	r2, [r3, #0]
    7da6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7daa:	4611      	mov	r1, r2
    7dac:	4618      	mov	r0, r3
    7dae:	f000 fa8c 	bl	82ca <Spi_Ipw_Init>

#if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
                /* initialize the Job lists => no scheduled job for the unit */
                Spi_InitJobsList(HWUnit);
#endif
                Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_IDLE;
    7db2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7db6:	4a09      	ldr	r2, [pc, #36]	; (7ddc <Spi_Init+0xbc>)
    7db8:	2101      	movs	r1, #1
    7dba:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
            HWUnit++)
    7dbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7dc2:	3301      	adds	r3, #1
    7dc4:	f88d 300f 	strb.w	r3, [sp, #15]
        for (HWUnit = (Spi_HWUnitType) 0;
    7dc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7dcc:	2b00      	cmp	r3, #0
    7dce:	d0c6      	beq.n	7d5e <Spi_Init+0x3e>
    }

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif /*(SPI_DEV_ERROR_DETECT == STD_ON)*/
}
    7dd0:	bf00      	nop
    7dd2:	b005      	add	sp, #20
    7dd4:	f85d fb04 	ldr.w	pc, [sp], #4
    7dd8:	1fff8d4c 	.word	0x1fff8d4c
    7ddc:	1fff8d44 	.word	0x1fff8d44

00007de0 <Spi_DeInit>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_DeInit_Activity
*/
Std_ReturnType Spi_DeInit(void)
{
    7de0:	b500      	push	{lr}
    7de2:	b083      	sub	sp, #12
    Std_ReturnType TempExit = (Std_ReturnType)E_OK;
    7de4:	2300      	movs	r3, #0
    7de6:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;

    SpiCoreID = Spi_GetCoreID;
    7dea:	2300      	movs	r3, #0
    7dec:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Check if Spi Status is Busy */
        if (SPI_BUSY == Spi_GetStatus())
    7dee:	f000 f8b1 	bl	7f54 <Spi_GetStatus>
    7df2:	4603      	mov	r3, r0
    7df4:	2b02      	cmp	r3, #2
    7df6:	d103      	bne.n	7e00 <Spi_DeInit+0x20>
        {
            TempExit = E_NOT_OK;
    7df8:	2301      	movs	r3, #1
    7dfa:	f88d 3007 	strb.w	r3, [sp, #7]
    7dfe:	e037      	b.n	7e70 <Spi_DeInit+0x90>
        }
        else
        {
            /* De-initialize all physical HWUnits */
            for (HWUnit = (Spi_HWUnitType) 0;
    7e00:	2300      	movs	r3, #0
    7e02:	f88d 3006 	strb.w	r3, [sp, #6]
    7e06:	e02a      	b.n	7e5e <Spi_DeInit+0x7e>
                 HWUnit < (Spi_HWUnitType) SPI_MAX_HWUNIT;
                 HWUnit++)
            {
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7e08:	4a1c      	ldr	r2, [pc, #112]	; (7e7c <Spi_DeInit+0x9c>)
    7e0a:	9b00      	ldr	r3, [sp, #0]
    7e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e10:	69da      	ldr	r2, [r3, #28]
    7e12:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e16:	009b      	lsls	r3, r3, #2
    7e18:	4413      	add	r3, r2
    7e1a:	681b      	ldr	r3, [r3, #0]
    7e1c:	2b00      	cmp	r3, #0
    7e1e:	d019      	beq.n	7e54 <Spi_DeInit+0x74>
                    (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    7e20:	4a16      	ldr	r2, [pc, #88]	; (7e7c <Spi_DeInit+0x9c>)
    7e22:	9b00      	ldr	r3, [sp, #0]
    7e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7e28:	69da      	ldr	r2, [r3, #28]
    7e2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e2e:	009b      	lsls	r3, r3, #2
    7e30:	4413      	add	r3, r2
    7e32:	681b      	ldr	r3, [r3, #0]
    7e34:	689b      	ldr	r3, [r3, #8]
                if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7e36:	9a00      	ldr	r2, [sp, #0]
    7e38:	429a      	cmp	r2, r3
    7e3a:	d10b      	bne.n	7e54 <Spi_DeInit+0x74>
                   )
                {
                    Spi_Ipw_DeInit(HWUnit, SpiCoreID);
    7e3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e40:	9900      	ldr	r1, [sp, #0]
    7e42:	4618      	mov	r0, r3
    7e44:	f000 fa54 	bl	82f0 <Spi_Ipw_DeInit>
    
                    Spi_axSpiHwUnitQueueArray[HWUnit].Status = SPI_UNINIT;
    7e48:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e4c:	4a0c      	ldr	r2, [pc, #48]	; (7e80 <Spi_DeInit+0xa0>)
    7e4e:	2100      	movs	r1, #0
    7e50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
                 HWUnit++)
    7e54:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e58:	3301      	adds	r3, #1
    7e5a:	f88d 3006 	strb.w	r3, [sp, #6]
            for (HWUnit = (Spi_HWUnitType) 0;
    7e5e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e62:	2b00      	cmp	r3, #0
    7e64:	d0d0      	beq.n	7e08 <Spi_DeInit+0x28>
                {
                    /* Do nothing */
                }
            }
            /* Reset configuration pointer */
            Spi_apxSpiConfigPtr[SpiCoreID] = NULL_PTR;
    7e66:	4a05      	ldr	r2, [pc, #20]	; (7e7c <Spi_DeInit+0x9c>)
    7e68:	9b00      	ldr	r3, [sp, #0]
    7e6a:	2100      	movs	r1, #0
    7e6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return TempExit;
    7e70:	f89d 3007 	ldrb.w	r3, [sp, #7]
}
    7e74:	4618      	mov	r0, r3
    7e76:	b003      	add	sp, #12
    7e78:	f85d fb04 	ldr.w	pc, [sp], #4
    7e7c:	1fff8d4c 	.word	0x1fff8d4c
    7e80:	1fff8d44 	.word	0x1fff8d44

00007e84 <Spi_SetupEB>:
        Spi_ChannelType Channel,
        const Spi_DataBufferType  *SrcDataBufferPtr,
        Spi_DataBufferType *DesDataBufferPtr,
        Spi_NumberOfDataType Length
    )
{
    7e84:	b500      	push	{lr}
    7e86:	b089      	sub	sp, #36	; 0x24
    7e88:	9102      	str	r1, [sp, #8]
    7e8a:	9201      	str	r2, [sp, #4]
    7e8c:	461a      	mov	r2, r3
    7e8e:	4603      	mov	r3, r0
    7e90:	f88d 300f 	strb.w	r3, [sp, #15]
    7e94:	4613      	mov	r3, r2
    7e96:	f8ad 300c 	strh.w	r3, [sp, #12]
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    7e9a:	2300      	movs	r3, #0
    7e9c:	f88d 301f 	strb.w	r3, [sp, #31]
    Spi_ChannelStateType *ChannelState;
    const Spi_ChannelConfigType *ChannelConfig;
    uint32 SpiCoreID;

    /* get current coreID */
    SpiCoreID = Spi_GetCoreID;
    7ea0:	2300      	movs	r3, #0
    7ea2:	9306      	str	r3, [sp, #24]
        Status = (Std_ReturnType)E_NOT_OK;
    }
    else
    {
#endif
        ChannelState = &Spi_axSpiChannelState[Channel];
    7ea4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ea8:	009b      	lsls	r3, r3, #2
    7eaa:	4a28      	ldr	r2, [pc, #160]	; (7f4c <Spi_SetupEB+0xc8>)
    7eac:	4413      	add	r3, r2
    7eae:	9305      	str	r3, [sp, #20]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[Channel].ChannelCfg;
    7eb0:	4a27      	ldr	r2, [pc, #156]	; (7f50 <Spi_SetupEB+0xcc>)
    7eb2:	9b06      	ldr	r3, [sp, #24]
    7eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7eb8:	68da      	ldr	r2, [r3, #12]
    7eba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ebe:	009b      	lsls	r3, r3, #2
    7ec0:	4413      	add	r3, r2
    7ec2:	681b      	ldr	r3, [r3, #0]
    7ec4:	9304      	str	r3, [sp, #16]
        /* exit early if this is the wrong buffer type */
        if (IB == ChannelConfig->BufferType)
    7ec6:	9b04      	ldr	r3, [sp, #16]
    7ec8:	681b      	ldr	r3, [r3, #0]
    7eca:	2b00      	cmp	r3, #0
    7ecc:	d103      	bne.n	7ed6 <Spi_SetupEB+0x52>
        {
            /* Call Det_ReportError */
#if (SPI_DEV_ERROR_DETECT == STD_ON)
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_SETUPEB_ID,SPI_E_PARAM_CHANNEL);
#endif
            Status = (Std_ReturnType)E_NOT_OK;
    7ece:	2301      	movs	r3, #1
    7ed0:	f88d 301f 	strb.w	r3, [sp, #31]
    7ed4:	e033      	b.n	7f3e <Spi_SetupEB+0xba>
            /* Length and Framesize - aren't compatible */
            /* If 8 < Framesize =< 16: Length must be divisible by 2 */
            /* If 16 < Framesize =< 32: Length must be divisible by 4 */
            Status = Spi_SetupEbCheckLength(ChannelConfig, Length);
#endif
            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05();
    7ed6:	f001 fec7 	bl	9c68 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>
            /* save the new parameters */
            ChannelConfig->BufferDescriptor->ExternalBufferTX = SrcDataBufferPtr;
    7eda:	9b04      	ldr	r3, [sp, #16]
    7edc:	691b      	ldr	r3, [r3, #16]
    7ede:	9a02      	ldr	r2, [sp, #8]
    7ee0:	601a      	str	r2, [r3, #0]
            ChannelConfig->BufferDescriptor->BufferRX = DesDataBufferPtr;
    7ee2:	9b04      	ldr	r3, [sp, #16]
    7ee4:	691b      	ldr	r3, [r3, #16]
    7ee6:	9a01      	ldr	r2, [sp, #4]
    7ee8:	609a      	str	r2, [r3, #8]

            ChannelState->Length = Length;
    7eea:	9b05      	ldr	r3, [sp, #20]
    7eec:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    7ef0:	805a      	strh	r2, [r3, #2]

            /* if source data pointer is zero, transmit default value */
            if (NULL_PTR == SrcDataBufferPtr)
    7ef2:	9b02      	ldr	r3, [sp, #8]
    7ef4:	2b00      	cmp	r3, #0
    7ef6:	d107      	bne.n	7f08 <Spi_SetupEB+0x84>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_TX_DEFAULT_U8;
    7ef8:	9b05      	ldr	r3, [sp, #20]
    7efa:	781b      	ldrb	r3, [r3, #0]
    7efc:	f043 0301 	orr.w	r3, r3, #1
    7f00:	b2da      	uxtb	r2, r3
    7f02:	9b05      	ldr	r3, [sp, #20]
    7f04:	701a      	strb	r2, [r3, #0]
    7f06:	e006      	b.n	7f16 <Spi_SetupEB+0x92>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_TX_DEFAULT_U8);
    7f08:	9b05      	ldr	r3, [sp, #20]
    7f0a:	781b      	ldrb	r3, [r3, #0]
    7f0c:	f023 0301 	bic.w	r3, r3, #1
    7f10:	b2da      	uxtb	r2, r3
    7f12:	9b05      	ldr	r3, [sp, #20]
    7f14:	701a      	strb	r2, [r3, #0]
            }

            /* if destination data pointer is zero, discard receiving data */
            if (NULL_PTR == DesDataBufferPtr)
    7f16:	9b01      	ldr	r3, [sp, #4]
    7f18:	2b00      	cmp	r3, #0
    7f1a:	d107      	bne.n	7f2c <Spi_SetupEB+0xa8>
            {
                ChannelState->Flags |= SPI_CHANNEL_FLAG_RX_DISCARD_U8;
    7f1c:	9b05      	ldr	r3, [sp, #20]
    7f1e:	781b      	ldrb	r3, [r3, #0]
    7f20:	f043 0302 	orr.w	r3, r3, #2
    7f24:	b2da      	uxtb	r2, r3
    7f26:	9b05      	ldr	r3, [sp, #20]
    7f28:	701a      	strb	r2, [r3, #0]
    7f2a:	e006      	b.n	7f3a <Spi_SetupEB+0xb6>
            }
            else
            {
                ChannelState->Flags &= (uint8) (~SPI_CHANNEL_FLAG_RX_DISCARD_U8);
    7f2c:	9b05      	ldr	r3, [sp, #20]
    7f2e:	781b      	ldrb	r3, [r3, #0]
    7f30:	f023 0302 	bic.w	r3, r3, #2
    7f34:	b2da      	uxtb	r2, r3
    7f36:	9b05      	ldr	r3, [sp, #20]
    7f38:	701a      	strb	r2, [r3, #0]
            }
            SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05();
    7f3a:	f001 fec1 	bl	9cc0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>
        }
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return Status;
    7f3e:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    7f42:	4618      	mov	r0, r3
    7f44:	b009      	add	sp, #36	; 0x24
    7f46:	f85d fb04 	ldr.w	pc, [sp], #4
    7f4a:	bf00      	nop
    7f4c:	1fff8d5c 	.word	0x1fff8d5c
    7f50:	1fff8d4c 	.word	0x1fff8d4c

00007f54 <Spi_GetStatus>:
*       if SPI_DEV_ERROR_DETECT is STD_ON.
*
* @implements Spi_GetStatus_Activity
*/
Spi_StatusType Spi_GetStatus(void)
{
    7f54:	b500      	push	{lr}
    7f56:	b085      	sub	sp, #20
    Spi_StatusType StatusFlag = SPI_IDLE;
    7f58:	2301      	movs	r3, #1
    7f5a:	9303      	str	r3, [sp, #12]
    Spi_HWUnitType HWUnit;
    uint32 SpiCoreID;
    
    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    7f5c:	2300      	movs	r3, #0
    7f5e:	9301      	str	r3, [sp, #4]

    if (NULL_PTR == Spi_apxSpiConfigPtr[SpiCoreID])
    7f60:	4a22      	ldr	r2, [pc, #136]	; (7fec <Spi_GetStatus+0x98>)
    7f62:	9b01      	ldr	r3, [sp, #4]
    7f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f68:	2b00      	cmp	r3, #0
    7f6a:	d102      	bne.n	7f72 <Spi_GetStatus+0x1e>
        /* If Development Error Detection is enabled, report error if not */
        /* initialized */
        /* Call Det_ReportError */
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSTATUS_ID,SPI_E_UNINIT);
#endif
        StatusFlag = SPI_UNINIT;
    7f6c:	2300      	movs	r3, #0
    7f6e:	9303      	str	r3, [sp, #12]
    7f70:	e037      	b.n	7fe2 <Spi_GetStatus+0x8e>
    }
    else
    {
        /* The SPI Handler Driver software module shall be busy when any
           HWUnit is busy */
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    7f72:	2300      	movs	r3, #0
    7f74:	f88d 300b 	strb.w	r3, [sp, #11]
    7f78:	e028      	b.n	7fcc <Spi_GetStatus+0x78>
        {
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7f7a:	4a1c      	ldr	r2, [pc, #112]	; (7fec <Spi_GetStatus+0x98>)
    7f7c:	9b01      	ldr	r3, [sp, #4]
    7f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f82:	69da      	ldr	r2, [r3, #28]
    7f84:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7f88:	009b      	lsls	r3, r3, #2
    7f8a:	4413      	add	r3, r2
    7f8c:	681b      	ldr	r3, [r3, #0]
    7f8e:	2b00      	cmp	r3, #0
    7f90:	d017      	beq.n	7fc2 <Spi_GetStatus+0x6e>
                (SpiCoreID == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->SpiCoreUse)
    7f92:	4a16      	ldr	r2, [pc, #88]	; (7fec <Spi_GetStatus+0x98>)
    7f94:	9b01      	ldr	r3, [sp, #4]
    7f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f9a:	69da      	ldr	r2, [r3, #28]
    7f9c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7fa0:	009b      	lsls	r3, r3, #2
    7fa2:	4413      	add	r3, r2
    7fa4:	681b      	ldr	r3, [r3, #0]
    7fa6:	689b      	ldr	r3, [r3, #8]
            if ((NULL_PTR != Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig) &&
    7fa8:	9a01      	ldr	r2, [sp, #4]
    7faa:	429a      	cmp	r2, r3
    7fac:	d109      	bne.n	7fc2 <Spi_GetStatus+0x6e>
               )
            {
                if (1u == Spi_au32SpiBusySyncHWUnitsStatus[HWUnit])
    7fae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7fb2:	4a0f      	ldr	r2, [pc, #60]	; (7ff0 <Spi_GetStatus+0x9c>)
    7fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fb8:	2b01      	cmp	r3, #1
    7fba:	d102      	bne.n	7fc2 <Spi_GetStatus+0x6e>
                {
                    StatusFlag = SPI_BUSY;
    7fbc:	2302      	movs	r3, #2
    7fbe:	9303      	str	r3, [sp, #12]
                    break;
    7fc0:	e008      	b.n	7fd4 <Spi_GetStatus+0x80>
        for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    7fc2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7fc6:	3301      	adds	r3, #1
    7fc8:	f88d 300b 	strb.w	r3, [sp, #11]
    7fcc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7fd0:	2b00      	cmp	r3, #0
    7fd2:	d0d2      	beq.n	7f7a <Spi_GetStatus+0x26>
            {
                /* Do nothing */
            }
        }
        /* check for busy HWUnit in async transmissions */
        if (SPI_BUSY != StatusFlag)
    7fd4:	9b03      	ldr	r3, [sp, #12]
    7fd6:	2b02      	cmp	r3, #2
    7fd8:	d003      	beq.n	7fe2 <Spi_GetStatus+0x8e>
        {
            /* Note: Checking for IsSync attribute for HWUnit is not really needed
                 It is preferable to skip this check in order to have a more compact code
            */
            StatusFlag = Spi_GetStatusAsyncCheckHwBusy(SpiCoreID);
    7fda:	9801      	ldr	r0, [sp, #4]
    7fdc:	f7ff fe4e 	bl	7c7c <Spi_GetStatusAsyncCheckHwBusy>
    7fe0:	9003      	str	r0, [sp, #12]
        else
        {
            /* Do notthing */
        }
    }
    return StatusFlag;
    7fe2:	9b03      	ldr	r3, [sp, #12]
}
    7fe4:	4618      	mov	r0, r3
    7fe6:	b005      	add	sp, #20
    7fe8:	f85d fb04 	ldr.w	pc, [sp], #4
    7fec:	1fff8d4c 	.word	0x1fff8d4c
    7ff0:	1fff8d68 	.word	0x1fff8d68

00007ff4 <Spi_GetJobResult>:
/** @implements Spi_GetJobResult_Activity */
Spi_JobResultType Spi_GetJobResult
    (
        Spi_JobType Job
    )
{
    7ff4:	b084      	sub	sp, #16
    7ff6:	4603      	mov	r3, r0
    7ff8:	f8ad 3006 	strh.w	r3, [sp, #6]
        (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETJOBRESULT_ID,SPI_E_PARAM_CONFIG);
    }
    else
    {
#endif
        JobResult = Spi_axSpiJobState[Job].Result;
    7ffc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8000:	4a03      	ldr	r2, [pc, #12]	; (8010 <Spi_GetJobResult+0x1c>)
    8002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8006:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif

    return JobResult;
    8008:	9b03      	ldr	r3, [sp, #12]
}
    800a:	4618      	mov	r0, r3
    800c:	b004      	add	sp, #16
    800e:	4770      	bx	lr
    8010:	1fff8d54 	.word	0x1fff8d54

00008014 <Spi_GetSequenceResult>:
/** @implements Spi_GetSequenceResult_Activity */
Spi_SeqResultType Spi_GetSequenceResult
    (
        Spi_SequenceType Sequence
    )
{
    8014:	b084      	sub	sp, #16
    8016:	4603      	mov	r3, r0
    8018:	f88d 3007 	strb.w	r3, [sp, #7]
            (void)Det_ReportError((uint16) SPI_MODULE_ID,(uint8) 0,SPI_GETSEQUENCERESULT_ID,SPI_E_PARAM_CONFIG);
        }
        else
        {
#endif
           SequenceResult = Spi_axSpiSequenceState[Sequence].Result;
    801c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8020:	4a03      	ldr	r2, [pc, #12]	; (8030 <Spi_GetSequenceResult+0x1c>)
    8022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8026:	9303      	str	r3, [sp, #12]
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif

    return SequenceResult;
    8028:	9b03      	ldr	r3, [sp, #12]
}
    802a:	4618      	mov	r0, r3
    802c:	b004      	add	sp, #16
    802e:	4770      	bx	lr
    8030:	1fff8d50 	.word	0x1fff8d50

00008034 <Spi_SyncTransmit>:
/** @implements Spi_SyncTransmit_Activity */
Std_ReturnType Spi_SyncTransmit
    (
        Spi_SequenceType Sequence
    )
{
    8034:	b500      	push	{lr}
    8036:	b08b      	sub	sp, #44	; 0x2c
    8038:	4603      	mov	r3, r0
    803a:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_SequenceStateType *SequenceState;
    Std_ReturnType Status = (Std_ReturnType)E_OK;
    803e:	2300      	movs	r3, #0
    8040:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    Spi_JobType Job;
    const Spi_JobConfigType *JobConfig;
    uint32 SpiCoreID;

    /* Get current coreID */
    SpiCoreID = Spi_GetCoreID;
    8044:	2300      	movs	r3, #0
    8046:	9308      	str	r3, [sp, #32]
        Status = Spi_SynctransmitCheckJobsIsValid(SequenceConfig, SpiCoreID);

        if ((Std_ReturnType)E_NOT_OK != Status)
        {
#endif /* (SPI_DEV_ERROR_DETECT == STD_ON) */
            SequenceConfig = Spi_apxSpiConfigPtr[SpiCoreID]->SequenceConfig[Sequence].SeqConfig;
    8048:	4a60      	ldr	r2, [pc, #384]	; (81cc <Spi_SyncTransmit+0x198>)
    804a:	9b08      	ldr	r3, [sp, #32]
    804c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8050:	695a      	ldr	r2, [r3, #20]
    8052:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8056:	009b      	lsls	r3, r3, #2
    8058:	4413      	add	r3, r2
    805a:	681b      	ldr	r3, [r3, #0]
    805c:	9307      	str	r3, [sp, #28]
            /* Get the number of jobs in the sequence */
            NumJobsInSequence = SequenceConfig->NumJobs;
    805e:	9b07      	ldr	r3, [sp, #28]
    8060:	881b      	ldrh	r3, [r3, #0]
    8062:	f8ad 301a 	strh.w	r3, [sp, #26]

            SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06();
    8066:	f001 fe51 	bl	9d0c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>
            /* check if there are HW units already running */
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    806a:	2300      	movs	r3, #0
    806c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    8070:	e017      	b.n	80a2 <Spi_SyncTransmit+0x6e>
            {
                if (0u != ((Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] << HWUnit) & Spi_au32SpiSeqUsedHWUnits[Sequence]))
    8072:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8076:	4a56      	ldr	r2, [pc, #344]	; (81d0 <Spi_SyncTransmit+0x19c>)
    8078:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    807c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8080:	409a      	lsls	r2, r3
    8082:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8086:	4953      	ldr	r1, [pc, #332]	; (81d4 <Spi_SyncTransmit+0x1a0>)
    8088:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    808c:	4013      	ands	r3, r2
    808e:	2b00      	cmp	r3, #0
    8090:	d002      	beq.n	8098 <Spi_SyncTransmit+0x64>
                {
                    Status = (Std_ReturnType)E_NOT_OK;
    8092:	2301      	movs	r3, #1
    8094:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            for (HWUnit = 0u; HWUnit < (Spi_HWUnitType)SPI_MAX_HWUNIT; HWUnit++)
    8098:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    809c:	3301      	adds	r3, #1
    809e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    80a2:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    80a6:	2b00      	cmp	r3, #0
    80a8:	d0e3      	beq.n	8072 <Spi_SyncTransmit+0x3e>
                {
                    /* Do notthing */
                }
            }
            
            if ((Std_ReturnType)E_NOT_OK != Status)
    80aa:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    80ae:	2b01      	cmp	r3, #1
    80b0:	f000 8083 	beq.w	81ba <Spi_SyncTransmit+0x186>
            {
                /* Set the sequence as pending */
                SequenceState = &Spi_axSpiSequenceState[Sequence];
    80b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80b8:	009b      	lsls	r3, r3, #2
    80ba:	4a47      	ldr	r2, [pc, #284]	; (81d8 <Spi_SyncTransmit+0x1a4>)
    80bc:	4413      	add	r3, r2
    80be:	9305      	str	r3, [sp, #20]
                SequenceState->Result = SPI_SEQ_PENDING;
    80c0:	9b05      	ldr	r3, [sp, #20]
    80c2:	2201      	movs	r2, #1
    80c4:	601a      	str	r2, [r3, #0]
                /* set used HW units as busy */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    80c6:	2300      	movs	r3, #0
    80c8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    80cc:	e022      	b.n	8114 <Spi_SyncTransmit+0xe0>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    80ce:	9b07      	ldr	r3, [sp, #28]
    80d0:	689a      	ldr	r2, [r3, #8]
    80d2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    80d6:	005b      	lsls	r3, r3, #1
    80d8:	4413      	add	r3, r2
    80da:	881b      	ldrh	r3, [r3, #0]
    80dc:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    80e0:	4a3a      	ldr	r2, [pc, #232]	; (81cc <Spi_SyncTransmit+0x198>)
    80e2:	9b08      	ldr	r3, [sp, #32]
    80e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    80e8:	691a      	ldr	r2, [r3, #16]
    80ea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    80ee:	009b      	lsls	r3, r3, #2
    80f0:	4413      	add	r3, r2
    80f2:	681b      	ldr	r3, [r3, #0]
    80f4:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    80f6:	9b03      	ldr	r3, [sp, #12]
    80f8:	7f1b      	ldrb	r3, [r3, #28]
    80fa:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 1u;
    80fe:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8102:	4a33      	ldr	r2, [pc, #204]	; (81d0 <Spi_SyncTransmit+0x19c>)
    8104:	2101      	movs	r1, #1
    8106:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    810a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    810e:	3301      	adds	r3, #1
    8110:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    8114:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    8118:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    811c:	429a      	cmp	r2, r3
    811e:	d3d6      	bcc.n	80ce <Spi_SyncTransmit+0x9a>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    8120:	f001 fe20 	bl	9d64 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
                /* Transmit Jobs */
                Status = Spi_SyncJobsTranfer(SequenceConfig, SpiCoreID);
    8124:	9908      	ldr	r1, [sp, #32]
    8126:	9807      	ldr	r0, [sp, #28]
    8128:	f7ff fc72 	bl	7a10 <Spi_SyncJobsTranfer>
    812c:	4603      	mov	r3, r0
    812e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                
                if ((Std_ReturnType)E_OK == Status)
    8132:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    8136:	2b00      	cmp	r3, #0
    8138:	d103      	bne.n	8142 <Spi_SyncTransmit+0x10e>
                {
                    /* Set the sequence as OK */
                    SequenceState->Result = SPI_SEQ_OK;
    813a:	9b05      	ldr	r3, [sp, #20]
    813c:	2200      	movs	r2, #0
    813e:	601a      	str	r2, [r3, #0]
    8140:	e002      	b.n	8148 <Spi_SyncTransmit+0x114>
#endif
                }
                else
                {
                    /* Set the sequence as FAILED */
                    SequenceState->Result = SPI_SEQ_FAILED;
    8142:	9b05      	ldr	r3, [sp, #20]
    8144:	2202      	movs	r2, #2
    8146:	601a      	str	r2, [r3, #0]
                    /* Report to DEM */
                    Spi_DemReportStatus(SpiCoreID, DEM_EVENT_STATUS_FAILED);
#endif
                }
                
                SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07();
    8148:	f001 fe32 	bl	9db0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>
                /* set used HW units as idle */
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    814c:	2300      	movs	r3, #0
    814e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    8152:	e022      	b.n	819a <Spi_SyncTransmit+0x166>
                {
                    /* Get the job id */
                    Job = SequenceConfig->JobIndexList[JobIndex];
    8154:	9b07      	ldr	r3, [sp, #28]
    8156:	689a      	ldr	r2, [r3, #8]
    8158:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    815c:	005b      	lsls	r3, r3, #1
    815e:	4413      	add	r3, r2
    8160:	881b      	ldrh	r3, [r3, #0]
    8162:	f8ad 3012 	strh.w	r3, [sp, #18]
                    JobConfig = Spi_apxSpiConfigPtr[SpiCoreID]->JobConfig[Job].JobCfg;
    8166:	4a19      	ldr	r2, [pc, #100]	; (81cc <Spi_SyncTransmit+0x198>)
    8168:	9b08      	ldr	r3, [sp, #32]
    816a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    816e:	691a      	ldr	r2, [r3, #16]
    8170:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    8174:	009b      	lsls	r3, r3, #2
    8176:	4413      	add	r3, r2
    8178:	681b      	ldr	r3, [r3, #0]
    817a:	9303      	str	r3, [sp, #12]
                    /* Logical Spi HWUnit */
                    HWUnit = JobConfig->HWUnit;
    817c:	9b03      	ldr	r3, [sp, #12]
    817e:	7f1b      	ldrb	r3, [r3, #28]
    8180:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
                    Spi_au32SpiBusySyncHWUnitsStatus[HWUnit] = 0u;
    8184:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    8188:	4a11      	ldr	r2, [pc, #68]	; (81d0 <Spi_SyncTransmit+0x19c>)
    818a:	2100      	movs	r1, #0
    818c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                for (JobIndex = 0u; JobIndex < NumJobsInSequence; JobIndex++)
    8190:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8194:	3301      	adds	r3, #1
    8196:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    819a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    819e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    81a2:	429a      	cmp	r2, r3
    81a4:	d3d6      	bcc.n	8154 <Spi_SyncTransmit+0x120>
                }
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07();
    81a6:	f001 fe2f 	bl	9e08 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>
                
                /* End Sequence Notification */
                if (NULL_PTR != SequenceConfig->EndNotification)
    81aa:	9b07      	ldr	r3, [sp, #28]
    81ac:	68db      	ldr	r3, [r3, #12]
    81ae:	2b00      	cmp	r3, #0
    81b0:	d005      	beq.n	81be <Spi_SyncTransmit+0x18a>
                {
                    SequenceConfig->EndNotification();
    81b2:	9b07      	ldr	r3, [sp, #28]
    81b4:	68db      	ldr	r3, [r3, #12]
    81b6:	4798      	blx	r3
    81b8:	e001      	b.n	81be <Spi_SyncTransmit+0x18a>
                    /* Do nothing */
                }
            }
            else
            {
                SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06();
    81ba:	f001 fdd3 	bl	9d64 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>
            /* Do nothing */
        }
    }
#endif

    return Status;
    81be:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    81c2:	4618      	mov	r0, r3
    81c4:	b00b      	add	sp, #44	; 0x2c
    81c6:	f85d fb04 	ldr.w	pc, [sp], #4
    81ca:	bf00      	nop
    81cc:	1fff8d4c 	.word	0x1fff8d4c
    81d0:	1fff8d68 	.word	0x1fff8d68
    81d4:	1fff8d64 	.word	0x1fff8d64
    81d8:	1fff8d50 	.word	0x1fff8d50

000081dc <Spi_GetHWUnitStatus>:
/** @implements Spi_GetHWUnitStatus_Activity */
Spi_StatusType Spi_GetHWUnitStatus
    (
        Spi_HWUnitType HWUnit
    )
{
    81dc:	b084      	sub	sp, #16
    81de:	4603      	mov	r3, r0
    81e0:	f88d 3007 	strb.w	r3, [sp, #7]
    Spi_StatusType Status = SPI_UNINIT;
    81e4:	2300      	movs	r3, #0
    81e6:	9303      	str	r3, [sp, #12]
        /* Do nothing */
    }
    else
    {
#endif
        Status = Spi_axSpiHwUnitQueueArray[HWUnit].Status;
    81e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    81ec:	4a03      	ldr	r2, [pc, #12]	; (81fc <Spi_GetHWUnitStatus+0x20>)
    81ee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    81f2:	9303      	str	r3, [sp, #12]

#if (SPI_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return Status;
    81f4:	9b03      	ldr	r3, [sp, #12]
}
    81f6:	4618      	mov	r0, r3
    81f8:	b004      	add	sp, #16
    81fa:	4770      	bx	lr
    81fc:	1fff8d44 	.word	0x1fff8d44

00008200 <Spi_Cancel>:
*       undefined state due to cancelling a sequence transmission.
*
*/
/**  @implements Spi_Cancel_Activity */
void Spi_Cancel(Spi_SequenceType Sequence)
{
    8200:	b082      	sub	sp, #8
    8202:	4603      	mov	r3, r0
    8204:	f88d 3007 	strb.w	r3, [sp, #7]
        }
        else
        {
#endif
            /* Set sequence state to Cancel */
            Spi_axSpiSequenceState[Sequence].Result = SPI_SEQ_CANCELLED;
    8208:	f89d 3007 	ldrb.w	r3, [sp, #7]
    820c:	4a03      	ldr	r2, [pc, #12]	; (821c <Spi_Cancel+0x1c>)
    820e:	2103      	movs	r1, #3
    8210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            #endif
#if (SPI_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif
}
    8214:	bf00      	nop
    8216:	b002      	add	sp, #8
    8218:	4770      	bx	lr
    821a:	bf00      	nop
    821c:	1fff8d50 	.word	0x1fff8d50

00008220 <Spi_MainFunction_Handling>:
                /*Do nothing */
            }
        }
    }
#endif /* #if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2) ) */
}
    8220:	bf00      	nop
    8222:	4770      	bx	lr

00008224 <Spi_Ipw_SyncTransmitProcess>:
        const Spi_JobConfigType *JobConfig,
        const Spi_ChannelConfigType *ChannelConfig,
        Spi_DataBufferType *RxBuffer,
        const Spi_DataBufferType *TxBuffer
    )
{
    8224:	b500      	push	{lr}
    8226:	b08d      	sub	sp, #52	; 0x34
    8228:	9005      	str	r0, [sp, #20]
    822a:	9104      	str	r1, [sp, #16]
    822c:	9203      	str	r2, [sp, #12]
    822e:	9302      	str	r3, [sp, #8]
    Lpspi_Ip_StatusType Lpspi_spiStatus = LPSPI_IP_STATUS_SUCCESS;
    8230:	2300      	movs	r3, #0
    8232:	930b      	str	r3, [sp, #44]	; 0x2c
    const Lpspi_Ip_ExternalDeviceType* LpspiExternalDevice;
#if (SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)
    Flexio_Spi_Ip_StatusType Flexio_spiStatus = FLEXIO_SPI_IP_STATUS_SUCCESS;
    const Flexio_Spi_Ip_ExternalDeviceType* Flexio_SpiExternalDevice;
#endif
    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    8234:	2300      	movs	r3, #0
    8236:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    Spi_NumberOfDataType NumberOfBytes;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    823a:	9b05      	ldr	r3, [sp, #20]
    823c:	6a1b      	ldr	r3, [r3, #32]
    823e:	681b      	ldr	r3, [r3, #0]
    8240:	681b      	ldr	r3, [r3, #0]
    8242:	9309      	str	r3, [sp, #36]	; 0x24
        HalfDuplexMode = LPSPI_IP_FULL_DUPLEX;
        HalfDuplexModeSupport = FALSE;
    }
#endif
    
    NumberOfBytes = ChannelConfig->ChannelState->Length;
    8244:	9b04      	ldr	r3, [sp, #16]
    8246:	699b      	ldr	r3, [r3, #24]
    8248:	885b      	ldrh	r3, [r3, #2]
    824a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    if (SPI_OVER_LPSPI == IpType)
    824e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8250:	2b00      	cmp	r3, #0
    8252:	d12e      	bne.n	82b2 <Spi_Ipw_SyncTransmitProcess+0x8e>
    {
        LpspiExternalDevice = JobConfig->ExternalDeviceConfig->ExDeviceConfig->ExternalDeviceConfig.LpspiExternalDeviceConfig;
    8254:	9b05      	ldr	r3, [sp, #20]
    8256:	6a1b      	ldr	r3, [r3, #32]
    8258:	681b      	ldr	r3, [r3, #0]
    825a:	689b      	ldr	r3, [r3, #8]
    825c:	9307      	str	r3, [sp, #28]
        Lpspi_spiStatus = Lpspi_Ip_UpdateDefaultTransmitData(LpspiExternalDevice, ChannelConfig->DefaultTransmitValue);
    825e:	9b04      	ldr	r3, [sp, #16]
    8260:	689b      	ldr	r3, [r3, #8]
    8262:	4619      	mov	r1, r3
    8264:	9807      	ldr	r0, [sp, #28]
    8266:	f7ff fadd 	bl	7824 <Lpspi_Ip_UpdateDefaultTransmitData>
    826a:	900b      	str	r0, [sp, #44]	; 0x2c
        if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    826c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    826e:	2b00      	cmp	r3, #0
    8270:	d11f      	bne.n	82b2 <Spi_Ipw_SyncTransmitProcess+0x8e>
        {
            Lpspi_spiStatus = Lpspi_Ip_UpdateFrameSize(LpspiExternalDevice, ChannelConfig->FrameSize);
    8272:	9b04      	ldr	r3, [sp, #16]
    8274:	791b      	ldrb	r3, [r3, #4]
    8276:	b29b      	uxth	r3, r3
    8278:	4619      	mov	r1, r3
    827a:	9807      	ldr	r0, [sp, #28]
    827c:	f7ff fa92 	bl	77a4 <Lpspi_Ip_UpdateFrameSize>
    8280:	900b      	str	r0, [sp, #44]	; 0x2c
            if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    8282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8284:	2b00      	cmp	r3, #0
    8286:	d114      	bne.n	82b2 <Spi_Ipw_SyncTransmitProcess+0x8e>
            {
                Lpspi_spiStatus = Lpspi_Ip_UpdateLsb(LpspiExternalDevice, ChannelConfig->Lsb);
    8288:	9b04      	ldr	r3, [sp, #16]
    828a:	795b      	ldrb	r3, [r3, #5]
    828c:	4619      	mov	r1, r3
    828e:	9807      	ldr	r0, [sp, #28]
    8290:	f7ff faa8 	bl	77e4 <Lpspi_Ip_UpdateLsb>
    8294:	900b      	str	r0, [sp, #44]	; 0x2c
                if (LPSPI_IP_STATUS_SUCCESS == Lpspi_spiStatus)
    8296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8298:	2b00      	cmp	r3, #0
    829a:	d10a      	bne.n	82b2 <Spi_Ipw_SyncTransmitProcess+0x8e>
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmitHalfDuplex(LpspiExternalDevice, Buffer, NumberOfBytes, HalfDuplexMode, SPI_TIMEOUT_COUNTER_U32);
                    }
                    else
                    #endif
                    {
                        Lpspi_spiStatus = Lpspi_Ip_SyncTransmit(LpspiExternalDevice, (const uint8*)TxBuffer, RxBuffer, NumberOfBytes, SPI_TIMEOUT_COUNTER_U32);
    829c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
    82a0:	f24c 3250 	movw	r2, #50000	; 0xc350
    82a4:	9200      	str	r2, [sp, #0]
    82a6:	9a03      	ldr	r2, [sp, #12]
    82a8:	9902      	ldr	r1, [sp, #8]
    82aa:	9807      	ldr	r0, [sp, #28]
    82ac:	f7fe fe0a 	bl	6ec4 <Lpspi_Ip_SyncTransmit>
    82b0:	900b      	str	r0, [sp, #44]	; 0x2c
            }
        }
    }
    if( (LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus) || (FLEXIO_SPI_IP_STATUS_SUCCESS != Flexio_spiStatus))
#else
    if(LPSPI_IP_STATUS_SUCCESS != Lpspi_spiStatus)
    82b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82b4:	2b00      	cmp	r3, #0
    82b6:	d002      	beq.n	82be <Spi_Ipw_SyncTransmitProcess+0x9a>
#endif /*(SPI_IPW_SPI_FLEXIO_ENABLE == STD_ON)*/
    {
        Ipw_Status = (Std_ReturnType)E_NOT_OK;
    82b8:	2301      	movs	r3, #1
    82ba:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    }
    return Ipw_Status;
    82be:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
}
    82c2:	4618      	mov	r0, r3
    82c4:	b00d      	add	sp, #52	; 0x34
    82c6:	f85d fb04 	ldr.w	pc, [sp], #4

000082ca <Spi_Ipw_Init>:
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
/* Spi_Ipw_Init */
void Spi_Ipw_Init(const Spi_HWUnitType HWUnitId, const Spi_HWUnitConfigType *HWUnit)
{
    82ca:	b500      	push	{lr}
    82cc:	b083      	sub	sp, #12
    82ce:	4603      	mov	r3, r0
    82d0:	9100      	str	r1, [sp, #0]
    82d2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == HWUnit->IpType)
    82d6:	9b00      	ldr	r3, [sp, #0]
    82d8:	681b      	ldr	r3, [r3, #0]
    82da:	2b00      	cmp	r3, #0
    82dc:	d104      	bne.n	82e8 <Spi_Ipw_Init+0x1e>
    #if ((SPI_LEVEL_DELIVERED == SPI_LEVEL1) || (SPI_LEVEL_DELIVERED == SPI_LEVEL2))
        Spi_Ipw_au8LpspiHWUnitMapping[HWUnit->Instance] = HWUnitId;
    #else
        (void)HWUnitId;
    #endif
        (void)Lpspi_Ip_Init(HWUnit->IpConfig.LpspiIpConfig);
    82de:	9b00      	ldr	r3, [sp, #0]
    82e0:	68db      	ldr	r3, [r3, #12]
    82e2:	4618      	mov	r0, r3
    82e4:	f7fe fd62 	bl	6dac <Lpspi_Ip_Init>
        (void)HWUnitId;
    #endif
        (void)Flexio_Spi_Ip_Init(HWUnit->IpConfig.FlexioSpiIpConfig);
    }
#endif
}
    82e8:	bf00      	nop
    82ea:	b003      	add	sp, #12
    82ec:	f85d fb04 	ldr.w	pc, [sp], #4

000082f0 <Spi_Ipw_DeInit>:

/* Spi_Ipw_DeInit */
void Spi_Ipw_DeInit(Spi_HWUnitType HWUnit, uint32 SpiCoreID)
{
    82f0:	b500      	push	{lr}
    82f2:	b083      	sub	sp, #12
    82f4:	4603      	mov	r3, r0
    82f6:	9100      	str	r1, [sp, #0]
    82f8:	f88d 3007 	strb.w	r3, [sp, #7]
    if (SPI_OVER_LPSPI == Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->IpType)
    82fc:	4a0f      	ldr	r2, [pc, #60]	; (833c <Spi_Ipw_DeInit+0x4c>)
    82fe:	9b00      	ldr	r3, [sp, #0]
    8300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8304:	69da      	ldr	r2, [r3, #28]
    8306:	f89d 3007 	ldrb.w	r3, [sp, #7]
    830a:	009b      	lsls	r3, r3, #2
    830c:	4413      	add	r3, r2
    830e:	681b      	ldr	r3, [r3, #0]
    8310:	681b      	ldr	r3, [r3, #0]
    8312:	2b00      	cmp	r3, #0
    8314:	d10d      	bne.n	8332 <Spi_Ipw_DeInit+0x42>
    {
        (void)Lpspi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    8316:	4a09      	ldr	r2, [pc, #36]	; (833c <Spi_Ipw_DeInit+0x4c>)
    8318:	9b00      	ldr	r3, [sp, #0]
    831a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    831e:	69da      	ldr	r2, [r3, #28]
    8320:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8324:	009b      	lsls	r3, r3, #2
    8326:	4413      	add	r3, r2
    8328:	681b      	ldr	r3, [r3, #0]
    832a:	791b      	ldrb	r3, [r3, #4]
    832c:	4618      	mov	r0, r3
    832e:	f7fe fd99 	bl	6e64 <Lpspi_Ip_DeInit>
    else
    {
        (void)Flexio_Spi_Ip_DeInit(Spi_apxSpiConfigPtr[SpiCoreID]->HWUnitConfig[HWUnit].PhyUnitConfig->Instance);
    }
#endif
}
    8332:	bf00      	nop
    8334:	b003      	add	sp, #12
    8336:	f85d fb04 	ldr.w	pc, [sp], #4
    833a:	bf00      	nop
    833c:	1fff8d4c 	.word	0x1fff8d4c

00008340 <Spi_Ipw_SyncTransmit>:

/* Spi_Ipw_SyncTransmit */
#if ( (SPI_LEVEL_DELIVERED == SPI_LEVEL2) || (SPI_LEVEL_DELIVERED == SPI_LEVEL0) )
Std_ReturnType Spi_Ipw_SyncTransmit(const Spi_JobConfigType *JobConfig, uint32 SpiCoreID)
{
    8340:	b500      	push	{lr}
    8342:	b08b      	sub	sp, #44	; 0x2c
    8344:	9001      	str	r0, [sp, #4]
    8346:	9100      	str	r1, [sp, #0]

    Std_ReturnType Ipw_Status = (Std_ReturnType)E_OK;
    8348:	2300      	movs	r3, #0
    834a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    const Spi_ChannelConfigType *ChannelConfig;
    const Spi_ChannelConfigType *NextChannelConfig;
    Spi_ChannelType ChannelID;
    Spi_ChannelType NumChannelsInJob;
    Spi_ChannelType ChannelIndex;
    Spi_Ipw_SupportedIpsType IpType = JobConfig->ExternalDeviceConfig->ExDeviceConfig->IpType;
    834e:	9b01      	ldr	r3, [sp, #4]
    8350:	6a1b      	ldr	r3, [r3, #32]
    8352:	681b      	ldr	r3, [r3, #0]
    8354:	681b      	ldr	r3, [r3, #0]
    8356:	9306      	str	r3, [sp, #24]
    
    NumChannelsInJob = JobConfig->NumChannels;
    8358:	9b01      	ldr	r3, [sp, #4]
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	f88d 3017 	strb.w	r3, [sp, #23]
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    8360:	2300      	movs	r3, #0
    8362:	f88d 301f 	strb.w	r3, [sp, #31]
    8366:	e0e6      	b.n	8536 <Spi_Ipw_SyncTransmit+0x1f6>
    {
        ChannelID = JobConfig->ChannelIndexList[ChannelIndex];
    8368:	9b01      	ldr	r3, [sp, #4]
    836a:	685a      	ldr	r2, [r3, #4]
    836c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8370:	4413      	add	r3, r2
    8372:	781b      	ldrb	r3, [r3, #0]
    8374:	f88d 3016 	strb.w	r3, [sp, #22]
        ChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[ChannelID].ChannelCfg;
    8378:	4a75      	ldr	r2, [pc, #468]	; (8550 <Spi_Ipw_SyncTransmit+0x210>)
    837a:	9b00      	ldr	r3, [sp, #0]
    837c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8380:	68da      	ldr	r2, [r3, #12]
    8382:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8386:	009b      	lsls	r3, r3, #2
    8388:	4413      	add	r3, r2
    838a:	681b      	ldr	r3, [r3, #0]
    838c:	9304      	str	r3, [sp, #16]
        RxBuffer = ChannelConfig->BufferDescriptor->BufferRX;
    838e:	9b04      	ldr	r3, [sp, #16]
    8390:	691b      	ldr	r3, [r3, #16]
    8392:	689b      	ldr	r3, [r3, #8]
    8394:	9303      	str	r3, [sp, #12]
        if(0u != (ChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    8396:	9b04      	ldr	r3, [sp, #16]
    8398:	699b      	ldr	r3, [r3, #24]
    839a:	781b      	ldrb	r3, [r3, #0]
    839c:	f003 0301 	and.w	r3, r3, #1
    83a0:	2b00      	cmp	r3, #0
    83a2:	d002      	beq.n	83aa <Spi_Ipw_SyncTransmit+0x6a>
        {
            TxBuffer = NULL_PTR;
    83a4:	2300      	movs	r3, #0
    83a6:	9308      	str	r3, [sp, #32]
    83a8:	e00c      	b.n	83c4 <Spi_Ipw_SyncTransmit+0x84>
        }
        else
        {
            if(EB == ChannelConfig->BufferType)
    83aa:	9b04      	ldr	r3, [sp, #16]
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	2b01      	cmp	r3, #1
    83b0:	d104      	bne.n	83bc <Spi_Ipw_SyncTransmit+0x7c>
            {
                TxBuffer = ChannelConfig->BufferDescriptor->ExternalBufferTX;
    83b2:	9b04      	ldr	r3, [sp, #16]
    83b4:	691b      	ldr	r3, [r3, #16]
    83b6:	681b      	ldr	r3, [r3, #0]
    83b8:	9308      	str	r3, [sp, #32]
    83ba:	e003      	b.n	83c4 <Spi_Ipw_SyncTransmit+0x84>
            }
            else
            {
                TxBuffer = (const uint8*)(ChannelConfig->BufferDescriptor->InternalBufferTX);
    83bc:	9b04      	ldr	r3, [sp, #16]
    83be:	691b      	ldr	r3, [r3, #16]
    83c0:	685b      	ldr	r3, [r3, #4]
    83c2:	9308      	str	r3, [sp, #32]
            }
        }
        
        if (SPI_OVER_LPSPI == IpType)
    83c4:	9b06      	ldr	r3, [sp, #24]
    83c6:	2b00      	cmp	r3, #0
    83c8:	f040 80a7 	bne.w	851a <Spi_Ipw_SyncTransmit+0x1da>
        {
            if(ChannelIndex == (NumChannelsInJob - 1u))
    83cc:	f89d 201f 	ldrb.w	r2, [sp, #31]
    83d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    83d4:	3b01      	subs	r3, #1
    83d6:	429a      	cmp	r2, r3
    83d8:	d10a      	bne.n	83f0 <Spi_Ipw_SyncTransmit+0xb0>
            {
                /* Clear CS after current channel */
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = FALSE;
    83da:	9b01      	ldr	r3, [sp, #4]
    83dc:	6a1b      	ldr	r3, [r3, #32]
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	791b      	ldrb	r3, [r3, #4]
    83e2:	461a      	mov	r2, r3
    83e4:	4b5b      	ldr	r3, [pc, #364]	; (8554 <Spi_Ipw_SyncTransmit+0x214>)
    83e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    83ea:	2200      	movs	r2, #0
    83ec:	771a      	strb	r2, [r3, #28]
    83ee:	e07b      	b.n	84e8 <Spi_Ipw_SyncTransmit+0x1a8>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->KeepCs = TRUE;
    83f0:	9b01      	ldr	r3, [sp, #4]
    83f2:	6a1b      	ldr	r3, [r3, #32]
    83f4:	681b      	ldr	r3, [r3, #0]
    83f6:	791b      	ldrb	r3, [r3, #4]
    83f8:	461a      	mov	r2, r3
    83fa:	4b56      	ldr	r3, [pc, #344]	; (8554 <Spi_Ipw_SyncTransmit+0x214>)
    83fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8400:	2201      	movs	r2, #1
    8402:	771a      	strb	r2, [r3, #28]
                MCAL_DATA_SYNC_BARRIER();
    8404:	f3bf 8f4f 	dsb	sy
                /* update data for next transfer */
                NextChannelConfig = Spi_apxSpiConfigPtr[SpiCoreID]->ChannelConfig[JobConfig->ChannelIndexList[ChannelIndex + 1u]].ChannelCfg;
    8408:	4a51      	ldr	r2, [pc, #324]	; (8550 <Spi_Ipw_SyncTransmit+0x210>)
    840a:	9b00      	ldr	r3, [sp, #0]
    840c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8410:	68da      	ldr	r2, [r3, #12]
    8412:	9b01      	ldr	r3, [sp, #4]
    8414:	6859      	ldr	r1, [r3, #4]
    8416:	f89d 301f 	ldrb.w	r3, [sp, #31]
    841a:	3301      	adds	r3, #1
    841c:	440b      	add	r3, r1
    841e:	781b      	ldrb	r3, [r3, #0]
    8420:	009b      	lsls	r3, r3, #2
    8422:	4413      	add	r3, r2
    8424:	681b      	ldr	r3, [r3, #0]
    8426:	9302      	str	r3, [sp, #8]
                MCAL_DATA_SYNC_BARRIER();
    8428:	f3bf 8f4f 	dsb	sy
                if(0u != (NextChannelConfig->ChannelState->Flags & SPI_CHANNEL_FLAG_TX_DEFAULT_U8))
    842c:	9b02      	ldr	r3, [sp, #8]
    842e:	699b      	ldr	r3, [r3, #24]
    8430:	781b      	ldrb	r3, [r3, #0]
    8432:	f003 0301 	and.w	r3, r3, #1
    8436:	2b00      	cmp	r3, #0
    8438:	d00a      	beq.n	8450 <Spi_Ipw_SyncTransmit+0x110>
                {
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NULL_PTR;
    843a:	9b01      	ldr	r3, [sp, #4]
    843c:	6a1b      	ldr	r3, [r3, #32]
    843e:	681b      	ldr	r3, [r3, #0]
    8440:	791b      	ldrb	r3, [r3, #4]
    8442:	461a      	mov	r2, r3
    8444:	4b43      	ldr	r3, [pc, #268]	; (8554 <Spi_Ipw_SyncTransmit+0x214>)
    8446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    844a:	2200      	movs	r2, #0
    844c:	62da      	str	r2, [r3, #44]	; 0x2c
    844e:	e01c      	b.n	848a <Spi_Ipw_SyncTransmit+0x14a>
                }
                else
                {
                    if(EB == NextChannelConfig->BufferType)
    8450:	9b02      	ldr	r3, [sp, #8]
    8452:	681b      	ldr	r3, [r3, #0]
    8454:	2b01      	cmp	r3, #1
    8456:	d10c      	bne.n	8472 <Spi_Ipw_SyncTransmit+0x132>
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->ExternalBufferTX;
    8458:	9b02      	ldr	r3, [sp, #8]
    845a:	691a      	ldr	r2, [r3, #16]
    845c:	9b01      	ldr	r3, [sp, #4]
    845e:	6a1b      	ldr	r3, [r3, #32]
    8460:	681b      	ldr	r3, [r3, #0]
    8462:	791b      	ldrb	r3, [r3, #4]
    8464:	4619      	mov	r1, r3
    8466:	4b3b      	ldr	r3, [pc, #236]	; (8554 <Spi_Ipw_SyncTransmit+0x214>)
    8468:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    846c:	6812      	ldr	r2, [r2, #0]
    846e:	62da      	str	r2, [r3, #44]	; 0x2c
    8470:	e00b      	b.n	848a <Spi_Ipw_SyncTransmit+0x14a>
                    }
                    else
                    {
                        Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->TxBufferNext = NextChannelConfig->BufferDescriptor->InternalBufferTX;
    8472:	9b02      	ldr	r3, [sp, #8]
    8474:	691a      	ldr	r2, [r3, #16]
    8476:	9b01      	ldr	r3, [sp, #4]
    8478:	6a1b      	ldr	r3, [r3, #32]
    847a:	681b      	ldr	r3, [r3, #0]
    847c:	791b      	ldrb	r3, [r3, #4]
    847e:	4619      	mov	r1, r3
    8480:	4b34      	ldr	r3, [pc, #208]	; (8554 <Spi_Ipw_SyncTransmit+0x214>)
    8482:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    8486:	6852      	ldr	r2, [r2, #4]
    8488:	62da      	str	r2, [r3, #44]	; 0x2c
                    }
                }
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FrameSizeNext = NextChannelConfig->FrameSize;
    848a:	9b02      	ldr	r3, [sp, #8]
    848c:	791a      	ldrb	r2, [r3, #4]
    848e:	9b01      	ldr	r3, [sp, #4]
    8490:	6a1b      	ldr	r3, [r3, #32]
    8492:	681b      	ldr	r3, [r3, #0]
    8494:	791b      	ldrb	r3, [r3, #4]
    8496:	4619      	mov	r1, r3
    8498:	4b2e      	ldr	r3, [pc, #184]	; (8554 <Spi_Ipw_SyncTransmit+0x214>)
    849a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    849e:	b292      	uxth	r2, r2
    84a0:	861a      	strh	r2, [r3, #48]	; 0x30
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LsbNext = NextChannelConfig->Lsb;
    84a2:	9b01      	ldr	r3, [sp, #4]
    84a4:	6a1b      	ldr	r3, [r3, #32]
    84a6:	681b      	ldr	r3, [r3, #0]
    84a8:	791b      	ldrb	r3, [r3, #4]
    84aa:	461a      	mov	r2, r3
    84ac:	4b29      	ldr	r3, [pc, #164]	; (8554 <Spi_Ipw_SyncTransmit+0x214>)
    84ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    84b2:	9a02      	ldr	r2, [sp, #8]
    84b4:	7952      	ldrb	r2, [r2, #5]
    84b6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->DefaultDataNext = NextChannelConfig->DefaultTransmitValue;
    84ba:	9b01      	ldr	r3, [sp, #4]
    84bc:	6a1b      	ldr	r3, [r3, #32]
    84be:	681b      	ldr	r3, [r3, #0]
    84c0:	791b      	ldrb	r3, [r3, #4]
    84c2:	461a      	mov	r2, r3
    84c4:	4b23      	ldr	r3, [pc, #140]	; (8554 <Spi_Ipw_SyncTransmit+0x214>)
    84c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    84ca:	9a02      	ldr	r2, [sp, #8]
    84cc:	6892      	ldr	r2, [r2, #8]
    84ce:	635a      	str	r2, [r3, #52]	; 0x34
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->LengthNext = NextChannelConfig->ChannelState->Length;
    84d0:	9b02      	ldr	r3, [sp, #8]
    84d2:	699a      	ldr	r2, [r3, #24]
    84d4:	9b01      	ldr	r3, [sp, #4]
    84d6:	6a1b      	ldr	r3, [r3, #32]
    84d8:	681b      	ldr	r3, [r3, #0]
    84da:	791b      	ldrb	r3, [r3, #4]
    84dc:	4619      	mov	r1, r3
    84de:	4b1d      	ldr	r3, [pc, #116]	; (8554 <Spi_Ipw_SyncTransmit+0x214>)
    84e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    84e4:	8852      	ldrh	r2, [r2, #2]
    84e6:	871a      	strh	r2, [r3, #56]	; 0x38
                    Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->NextChannelIsRX = FALSE;
                }
                #endif
            }
            
            if(0u == ChannelIndex)
    84e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    84ec:	2b00      	cmp	r3, #0
    84ee:	d10a      	bne.n	8506 <Spi_Ipw_SyncTransmit+0x1c6>
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = TRUE;
    84f0:	9b01      	ldr	r3, [sp, #4]
    84f2:	6a1b      	ldr	r3, [r3, #32]
    84f4:	681b      	ldr	r3, [r3, #0]
    84f6:	791b      	ldrb	r3, [r3, #4]
    84f8:	461a      	mov	r2, r3
    84fa:	4b16      	ldr	r3, [pc, #88]	; (8554 <Spi_Ipw_SyncTransmit+0x214>)
    84fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8500:	2201      	movs	r2, #1
    8502:	775a      	strb	r2, [r3, #29]
    8504:	e009      	b.n	851a <Spi_Ipw_SyncTransmit+0x1da>
            }
            else
            {
                Lpspi_Ip_apxStateStructureArray[JobConfig->ExternalDeviceConfig->ExDeviceConfig->Instance]->FirstCmd = FALSE;
    8506:	9b01      	ldr	r3, [sp, #4]
    8508:	6a1b      	ldr	r3, [r3, #32]
    850a:	681b      	ldr	r3, [r3, #0]
    850c:	791b      	ldrb	r3, [r3, #4]
    850e:	461a      	mov	r2, r3
    8510:	4b10      	ldr	r3, [pc, #64]	; (8554 <Spi_Ipw_SyncTransmit+0x214>)
    8512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8516:	2200      	movs	r2, #0
    8518:	775a      	strb	r2, [r3, #29]
            }
        }
        Ipw_Status = Spi_Ipw_SyncTransmitProcess(JobConfig, ChannelConfig, RxBuffer, (const uint8*)TxBuffer);
    851a:	9b08      	ldr	r3, [sp, #32]
    851c:	9a03      	ldr	r2, [sp, #12]
    851e:	9904      	ldr	r1, [sp, #16]
    8520:	9801      	ldr	r0, [sp, #4]
    8522:	f7ff fe7f 	bl	8224 <Spi_Ipw_SyncTransmitProcess>
    8526:	4603      	mov	r3, r0
    8528:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    for (ChannelIndex = (Spi_ChannelType)0; ChannelIndex < NumChannelsInJob; ChannelIndex++)
    852c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8530:	3301      	adds	r3, #1
    8532:	f88d 301f 	strb.w	r3, [sp, #31]
    8536:	f89d 201f 	ldrb.w	r2, [sp, #31]
    853a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    853e:	429a      	cmp	r2, r3
    8540:	f4ff af12 	bcc.w	8368 <Spi_Ipw_SyncTransmit+0x28>
    }
    return Ipw_Status;
    8544:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
}
    8548:	4618      	mov	r0, r3
    854a:	b00b      	add	sp, #44	; 0x2c
    854c:	f85d fb04 	ldr.w	pc, [sp], #4
    8550:	1fff8d4c 	.word	0x1fff8d4c
    8554:	1fff8d38 	.word	0x1fff8d38

00008558 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    8558:	b500      	push	{lr}
    855a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    855c:	f7f8 fb52 	bl	c04 <Sys_GetCoreID>
    8560:	4603      	mov	r3, r0
    8562:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    8564:	4a10      	ldr	r2, [pc, #64]	; (85a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8566:	9b01      	ldr	r3, [sp, #4]
    8568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    856c:	2b00      	cmp	r3, #0
    856e:	d10d      	bne.n	858c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8570:	f7f8 fa66 	bl	a40 <Mcu_schm_read_msr>
    8574:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8576:	9b00      	ldr	r3, [sp, #0]
    8578:	f003 0301 	and.w	r3, r3, #1
    857c:	2b00      	cmp	r3, #0
    857e:	d100      	bne.n	8582 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8580:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    8582:	490a      	ldr	r1, [pc, #40]	; (85ac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    8584:	9b01      	ldr	r3, [sp, #4]
    8586:	9a00      	ldr	r2, [sp, #0]
    8588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    858c:	4a06      	ldr	r2, [pc, #24]	; (85a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    858e:	9b01      	ldr	r3, [sp, #4]
    8590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8594:	1c5a      	adds	r2, r3, #1
    8596:	4904      	ldr	r1, [pc, #16]	; (85a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    8598:	9b01      	ldr	r3, [sp, #4]
    859a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    859e:	bf00      	nop
    85a0:	b003      	add	sp, #12
    85a2:	f85d fb04 	ldr.w	pc, [sp], #4
    85a6:	bf00      	nop
    85a8:	1fff8d70 	.word	0x1fff8d70
    85ac:	1fff8d6c 	.word	0x1fff8d6c

000085b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    85b0:	b500      	push	{lr}
    85b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    85b4:	f7f8 fb26 	bl	c04 <Sys_GetCoreID>
    85b8:	4603      	mov	r3, r0
    85ba:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    85bc:	4a0d      	ldr	r2, [pc, #52]	; (85f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    85be:	9b01      	ldr	r3, [sp, #4]
    85c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85c4:	1e5a      	subs	r2, r3, #1
    85c6:	490b      	ldr	r1, [pc, #44]	; (85f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    85c8:	9b01      	ldr	r3, [sp, #4]
    85ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    85ce:	4a0a      	ldr	r2, [pc, #40]	; (85f8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    85d0:	9b01      	ldr	r3, [sp, #4]
    85d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85d6:	f003 0301 	and.w	r3, r3, #1
    85da:	2b00      	cmp	r3, #0
    85dc:	d106      	bne.n	85ec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    85de:	4a05      	ldr	r2, [pc, #20]	; (85f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    85e0:	9b01      	ldr	r3, [sp, #4]
    85e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    85e6:	2b00      	cmp	r3, #0
    85e8:	d100      	bne.n	85ec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    85ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    85ec:	bf00      	nop
    85ee:	b003      	add	sp, #12
    85f0:	f85d fb04 	ldr.w	pc, [sp], #4
    85f4:	1fff8d70 	.word	0x1fff8d70
    85f8:	1fff8d6c 	.word	0x1fff8d6c

000085fc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    85fc:	b500      	push	{lr}
    85fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8600:	f7f8 fb00 	bl	c04 <Sys_GetCoreID>
    8604:	4603      	mov	r3, r0
    8606:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    8608:	4a10      	ldr	r2, [pc, #64]	; (864c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    860a:	9b01      	ldr	r3, [sp, #4]
    860c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8610:	2b00      	cmp	r3, #0
    8612:	d10d      	bne.n	8630 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8614:	f7f8 fa14 	bl	a40 <Mcu_schm_read_msr>
    8618:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    861a:	9b00      	ldr	r3, [sp, #0]
    861c:	f003 0301 	and.w	r3, r3, #1
    8620:	2b00      	cmp	r3, #0
    8622:	d100      	bne.n	8626 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8624:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    8626:	490a      	ldr	r1, [pc, #40]	; (8650 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    8628:	9b01      	ldr	r3, [sp, #4]
    862a:	9a00      	ldr	r2, [sp, #0]
    862c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    8630:	4a06      	ldr	r2, [pc, #24]	; (864c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    8632:	9b01      	ldr	r3, [sp, #4]
    8634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8638:	1c5a      	adds	r2, r3, #1
    863a:	4904      	ldr	r1, [pc, #16]	; (864c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    863c:	9b01      	ldr	r3, [sp, #4]
    863e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8642:	bf00      	nop
    8644:	b003      	add	sp, #12
    8646:	f85d fb04 	ldr.w	pc, [sp], #4
    864a:	bf00      	nop
    864c:	1fff8d78 	.word	0x1fff8d78
    8650:	1fff8d74 	.word	0x1fff8d74

00008654 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    8654:	b500      	push	{lr}
    8656:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8658:	f7f8 fad4 	bl	c04 <Sys_GetCoreID>
    865c:	4603      	mov	r3, r0
    865e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    8660:	4a0d      	ldr	r2, [pc, #52]	; (8698 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8662:	9b01      	ldr	r3, [sp, #4]
    8664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8668:	1e5a      	subs	r2, r3, #1
    866a:	490b      	ldr	r1, [pc, #44]	; (8698 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    866c:	9b01      	ldr	r3, [sp, #4]
    866e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    8672:	4a0a      	ldr	r2, [pc, #40]	; (869c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    8674:	9b01      	ldr	r3, [sp, #4]
    8676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    867a:	f003 0301 	and.w	r3, r3, #1
    867e:	2b00      	cmp	r3, #0
    8680:	d106      	bne.n	8690 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    8682:	4a05      	ldr	r2, [pc, #20]	; (8698 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    8684:	9b01      	ldr	r3, [sp, #4]
    8686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    868a:	2b00      	cmp	r3, #0
    868c:	d100      	bne.n	8690 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    868e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8690:	bf00      	nop
    8692:	b003      	add	sp, #12
    8694:	f85d fb04 	ldr.w	pc, [sp], #4
    8698:	1fff8d78 	.word	0x1fff8d78
    869c:	1fff8d74 	.word	0x1fff8d74

000086a0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    86a0:	b500      	push	{lr}
    86a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    86a4:	f7f8 faae 	bl	c04 <Sys_GetCoreID>
    86a8:	4603      	mov	r3, r0
    86aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    86ac:	4a10      	ldr	r2, [pc, #64]	; (86f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    86ae:	9b01      	ldr	r3, [sp, #4]
    86b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86b4:	2b00      	cmp	r3, #0
    86b6:	d10d      	bne.n	86d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    86b8:	f7f8 f9c2 	bl	a40 <Mcu_schm_read_msr>
    86bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    86be:	9b00      	ldr	r3, [sp, #0]
    86c0:	f003 0301 	and.w	r3, r3, #1
    86c4:	2b00      	cmp	r3, #0
    86c6:	d100      	bne.n	86ca <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    86c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    86ca:	490a      	ldr	r1, [pc, #40]	; (86f4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    86cc:	9b01      	ldr	r3, [sp, #4]
    86ce:	9a00      	ldr	r2, [sp, #0]
    86d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    86d4:	4a06      	ldr	r2, [pc, #24]	; (86f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    86d6:	9b01      	ldr	r3, [sp, #4]
    86d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    86dc:	1c5a      	adds	r2, r3, #1
    86de:	4904      	ldr	r1, [pc, #16]	; (86f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    86e0:	9b01      	ldr	r3, [sp, #4]
    86e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    86e6:	bf00      	nop
    86e8:	b003      	add	sp, #12
    86ea:	f85d fb04 	ldr.w	pc, [sp], #4
    86ee:	bf00      	nop
    86f0:	1fff8d80 	.word	0x1fff8d80
    86f4:	1fff8d7c 	.word	0x1fff8d7c

000086f8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    86f8:	b500      	push	{lr}
    86fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    86fc:	f7f8 fa82 	bl	c04 <Sys_GetCoreID>
    8700:	4603      	mov	r3, r0
    8702:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    8704:	4a0d      	ldr	r2, [pc, #52]	; (873c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8706:	9b01      	ldr	r3, [sp, #4]
    8708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    870c:	1e5a      	subs	r2, r3, #1
    870e:	490b      	ldr	r1, [pc, #44]	; (873c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8710:	9b01      	ldr	r3, [sp, #4]
    8712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    8716:	4a0a      	ldr	r2, [pc, #40]	; (8740 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    8718:	9b01      	ldr	r3, [sp, #4]
    871a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    871e:	f003 0301 	and.w	r3, r3, #1
    8722:	2b00      	cmp	r3, #0
    8724:	d106      	bne.n	8734 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    8726:	4a05      	ldr	r2, [pc, #20]	; (873c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    8728:	9b01      	ldr	r3, [sp, #4]
    872a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    872e:	2b00      	cmp	r3, #0
    8730:	d100      	bne.n	8734 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8732:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8734:	bf00      	nop
    8736:	b003      	add	sp, #12
    8738:	f85d fb04 	ldr.w	pc, [sp], #4
    873c:	1fff8d80 	.word	0x1fff8d80
    8740:	1fff8d7c 	.word	0x1fff8d7c

00008744 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    8744:	b500      	push	{lr}
    8746:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8748:	f7f8 fa5c 	bl	c04 <Sys_GetCoreID>
    874c:	4603      	mov	r3, r0
    874e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    8750:	4a10      	ldr	r2, [pc, #64]	; (8794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8752:	9b01      	ldr	r3, [sp, #4]
    8754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8758:	2b00      	cmp	r3, #0
    875a:	d10d      	bne.n	8778 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    875c:	f7f8 f979 	bl	a52 <Port_schm_read_msr>
    8760:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8762:	9b00      	ldr	r3, [sp, #0]
    8764:	f003 0301 	and.w	r3, r3, #1
    8768:	2b00      	cmp	r3, #0
    876a:	d100      	bne.n	876e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    876c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    876e:	490a      	ldr	r1, [pc, #40]	; (8798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    8770:	9b01      	ldr	r3, [sp, #4]
    8772:	9a00      	ldr	r2, [sp, #0]
    8774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    8778:	4a06      	ldr	r2, [pc, #24]	; (8794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    877a:	9b01      	ldr	r3, [sp, #4]
    877c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8780:	1c5a      	adds	r2, r3, #1
    8782:	4904      	ldr	r1, [pc, #16]	; (8794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    8784:	9b01      	ldr	r3, [sp, #4]
    8786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    878a:	bf00      	nop
    878c:	b003      	add	sp, #12
    878e:	f85d fb04 	ldr.w	pc, [sp], #4
    8792:	bf00      	nop
    8794:	1fff8d88 	.word	0x1fff8d88
    8798:	1fff8d84 	.word	0x1fff8d84

0000879c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    879c:	b500      	push	{lr}
    879e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    87a0:	f7f8 fa30 	bl	c04 <Sys_GetCoreID>
    87a4:	4603      	mov	r3, r0
    87a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    87a8:	4a0d      	ldr	r2, [pc, #52]	; (87e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    87aa:	9b01      	ldr	r3, [sp, #4]
    87ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87b0:	1e5a      	subs	r2, r3, #1
    87b2:	490b      	ldr	r1, [pc, #44]	; (87e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    87b4:	9b01      	ldr	r3, [sp, #4]
    87b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    87ba:	4a0a      	ldr	r2, [pc, #40]	; (87e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    87bc:	9b01      	ldr	r3, [sp, #4]
    87be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87c2:	f003 0301 	and.w	r3, r3, #1
    87c6:	2b00      	cmp	r3, #0
    87c8:	d106      	bne.n	87d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    87ca:	4a05      	ldr	r2, [pc, #20]	; (87e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    87cc:	9b01      	ldr	r3, [sp, #4]
    87ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87d2:	2b00      	cmp	r3, #0
    87d4:	d100      	bne.n	87d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    87d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    87d8:	bf00      	nop
    87da:	b003      	add	sp, #12
    87dc:	f85d fb04 	ldr.w	pc, [sp], #4
    87e0:	1fff8d88 	.word	0x1fff8d88
    87e4:	1fff8d84 	.word	0x1fff8d84

000087e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    87e8:	b500      	push	{lr}
    87ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    87ec:	f7f8 fa0a 	bl	c04 <Sys_GetCoreID>
    87f0:	4603      	mov	r3, r0
    87f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    87f4:	4a10      	ldr	r2, [pc, #64]	; (8838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    87f6:	9b01      	ldr	r3, [sp, #4]
    87f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87fc:	2b00      	cmp	r3, #0
    87fe:	d10d      	bne.n	881c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8800:	f7f8 f927 	bl	a52 <Port_schm_read_msr>
    8804:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8806:	9b00      	ldr	r3, [sp, #0]
    8808:	f003 0301 	and.w	r3, r3, #1
    880c:	2b00      	cmp	r3, #0
    880e:	d100      	bne.n	8812 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8810:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    8812:	490a      	ldr	r1, [pc, #40]	; (883c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    8814:	9b01      	ldr	r3, [sp, #4]
    8816:	9a00      	ldr	r2, [sp, #0]
    8818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    881c:	4a06      	ldr	r2, [pc, #24]	; (8838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    881e:	9b01      	ldr	r3, [sp, #4]
    8820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8824:	1c5a      	adds	r2, r3, #1
    8826:	4904      	ldr	r1, [pc, #16]	; (8838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    8828:	9b01      	ldr	r3, [sp, #4]
    882a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    882e:	bf00      	nop
    8830:	b003      	add	sp, #12
    8832:	f85d fb04 	ldr.w	pc, [sp], #4
    8836:	bf00      	nop
    8838:	1fff8d90 	.word	0x1fff8d90
    883c:	1fff8d8c 	.word	0x1fff8d8c

00008840 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    8840:	b500      	push	{lr}
    8842:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8844:	f7f8 f9de 	bl	c04 <Sys_GetCoreID>
    8848:	4603      	mov	r3, r0
    884a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    884c:	4a0d      	ldr	r2, [pc, #52]	; (8884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    884e:	9b01      	ldr	r3, [sp, #4]
    8850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8854:	1e5a      	subs	r2, r3, #1
    8856:	490b      	ldr	r1, [pc, #44]	; (8884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8858:	9b01      	ldr	r3, [sp, #4]
    885a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    885e:	4a0a      	ldr	r2, [pc, #40]	; (8888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    8860:	9b01      	ldr	r3, [sp, #4]
    8862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8866:	f003 0301 	and.w	r3, r3, #1
    886a:	2b00      	cmp	r3, #0
    886c:	d106      	bne.n	887c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    886e:	4a05      	ldr	r2, [pc, #20]	; (8884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    8870:	9b01      	ldr	r3, [sp, #4]
    8872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8876:	2b00      	cmp	r3, #0
    8878:	d100      	bne.n	887c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    887a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    887c:	bf00      	nop
    887e:	b003      	add	sp, #12
    8880:	f85d fb04 	ldr.w	pc, [sp], #4
    8884:	1fff8d90 	.word	0x1fff8d90
    8888:	1fff8d8c 	.word	0x1fff8d8c

0000888c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    888c:	b500      	push	{lr}
    888e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8890:	f7f8 f9b8 	bl	c04 <Sys_GetCoreID>
    8894:	4603      	mov	r3, r0
    8896:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    8898:	4a10      	ldr	r2, [pc, #64]	; (88dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    889a:	9b01      	ldr	r3, [sp, #4]
    889c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88a0:	2b00      	cmp	r3, #0
    88a2:	d10d      	bne.n	88c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    88a4:	f7f8 f8d5 	bl	a52 <Port_schm_read_msr>
    88a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    88aa:	9b00      	ldr	r3, [sp, #0]
    88ac:	f003 0301 	and.w	r3, r3, #1
    88b0:	2b00      	cmp	r3, #0
    88b2:	d100      	bne.n	88b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    88b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    88b6:	490a      	ldr	r1, [pc, #40]	; (88e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    88b8:	9b01      	ldr	r3, [sp, #4]
    88ba:	9a00      	ldr	r2, [sp, #0]
    88bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    88c0:	4a06      	ldr	r2, [pc, #24]	; (88dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    88c2:	9b01      	ldr	r3, [sp, #4]
    88c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88c8:	1c5a      	adds	r2, r3, #1
    88ca:	4904      	ldr	r1, [pc, #16]	; (88dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    88cc:	9b01      	ldr	r3, [sp, #4]
    88ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    88d2:	bf00      	nop
    88d4:	b003      	add	sp, #12
    88d6:	f85d fb04 	ldr.w	pc, [sp], #4
    88da:	bf00      	nop
    88dc:	1fff8d98 	.word	0x1fff8d98
    88e0:	1fff8d94 	.word	0x1fff8d94

000088e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    88e4:	b500      	push	{lr}
    88e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    88e8:	f7f8 f98c 	bl	c04 <Sys_GetCoreID>
    88ec:	4603      	mov	r3, r0
    88ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    88f0:	4a0d      	ldr	r2, [pc, #52]	; (8928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    88f2:	9b01      	ldr	r3, [sp, #4]
    88f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    88f8:	1e5a      	subs	r2, r3, #1
    88fa:	490b      	ldr	r1, [pc, #44]	; (8928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    88fc:	9b01      	ldr	r3, [sp, #4]
    88fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    8902:	4a0a      	ldr	r2, [pc, #40]	; (892c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    8904:	9b01      	ldr	r3, [sp, #4]
    8906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    890a:	f003 0301 	and.w	r3, r3, #1
    890e:	2b00      	cmp	r3, #0
    8910:	d106      	bne.n	8920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    8912:	4a05      	ldr	r2, [pc, #20]	; (8928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    8914:	9b01      	ldr	r3, [sp, #4]
    8916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    891a:	2b00      	cmp	r3, #0
    891c:	d100      	bne.n	8920 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    891e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8920:	bf00      	nop
    8922:	b003      	add	sp, #12
    8924:	f85d fb04 	ldr.w	pc, [sp], #4
    8928:	1fff8d98 	.word	0x1fff8d98
    892c:	1fff8d94 	.word	0x1fff8d94

00008930 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    8930:	b500      	push	{lr}
    8932:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8934:	f7f8 f966 	bl	c04 <Sys_GetCoreID>
    8938:	4603      	mov	r3, r0
    893a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    893c:	4a10      	ldr	r2, [pc, #64]	; (8980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    893e:	9b01      	ldr	r3, [sp, #4]
    8940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8944:	2b00      	cmp	r3, #0
    8946:	d10d      	bne.n	8964 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8948:	f7f8 f883 	bl	a52 <Port_schm_read_msr>
    894c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    894e:	9b00      	ldr	r3, [sp, #0]
    8950:	f003 0301 	and.w	r3, r3, #1
    8954:	2b00      	cmp	r3, #0
    8956:	d100      	bne.n	895a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8958:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    895a:	490a      	ldr	r1, [pc, #40]	; (8984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    895c:	9b01      	ldr	r3, [sp, #4]
    895e:	9a00      	ldr	r2, [sp, #0]
    8960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    8964:	4a06      	ldr	r2, [pc, #24]	; (8980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8966:	9b01      	ldr	r3, [sp, #4]
    8968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    896c:	1c5a      	adds	r2, r3, #1
    896e:	4904      	ldr	r1, [pc, #16]	; (8980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    8970:	9b01      	ldr	r3, [sp, #4]
    8972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8976:	bf00      	nop
    8978:	b003      	add	sp, #12
    897a:	f85d fb04 	ldr.w	pc, [sp], #4
    897e:	bf00      	nop
    8980:	1fff8da0 	.word	0x1fff8da0
    8984:	1fff8d9c 	.word	0x1fff8d9c

00008988 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    8988:	b500      	push	{lr}
    898a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    898c:	f7f8 f93a 	bl	c04 <Sys_GetCoreID>
    8990:	4603      	mov	r3, r0
    8992:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    8994:	4a0d      	ldr	r2, [pc, #52]	; (89cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    8996:	9b01      	ldr	r3, [sp, #4]
    8998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    899c:	1e5a      	subs	r2, r3, #1
    899e:	490b      	ldr	r1, [pc, #44]	; (89cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    89a0:	9b01      	ldr	r3, [sp, #4]
    89a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    89a6:	4a0a      	ldr	r2, [pc, #40]	; (89d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    89a8:	9b01      	ldr	r3, [sp, #4]
    89aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89ae:	f003 0301 	and.w	r3, r3, #1
    89b2:	2b00      	cmp	r3, #0
    89b4:	d106      	bne.n	89c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    89b6:	4a05      	ldr	r2, [pc, #20]	; (89cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    89b8:	9b01      	ldr	r3, [sp, #4]
    89ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89be:	2b00      	cmp	r3, #0
    89c0:	d100      	bne.n	89c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    89c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    89c4:	bf00      	nop
    89c6:	b003      	add	sp, #12
    89c8:	f85d fb04 	ldr.w	pc, [sp], #4
    89cc:	1fff8da0 	.word	0x1fff8da0
    89d0:	1fff8d9c 	.word	0x1fff8d9c

000089d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    89d4:	b500      	push	{lr}
    89d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    89d8:	f7f8 f914 	bl	c04 <Sys_GetCoreID>
    89dc:	4603      	mov	r3, r0
    89de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    89e0:	4a10      	ldr	r2, [pc, #64]	; (8a24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    89e2:	9b01      	ldr	r3, [sp, #4]
    89e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89e8:	2b00      	cmp	r3, #0
    89ea:	d10d      	bne.n	8a08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    89ec:	f7f8 f831 	bl	a52 <Port_schm_read_msr>
    89f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    89f2:	9b00      	ldr	r3, [sp, #0]
    89f4:	f003 0301 	and.w	r3, r3, #1
    89f8:	2b00      	cmp	r3, #0
    89fa:	d100      	bne.n	89fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    89fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    89fe:	490a      	ldr	r1, [pc, #40]	; (8a28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    8a00:	9b01      	ldr	r3, [sp, #4]
    8a02:	9a00      	ldr	r2, [sp, #0]
    8a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    8a08:	4a06      	ldr	r2, [pc, #24]	; (8a24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    8a0a:	9b01      	ldr	r3, [sp, #4]
    8a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a10:	1c5a      	adds	r2, r3, #1
    8a12:	4904      	ldr	r1, [pc, #16]	; (8a24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    8a14:	9b01      	ldr	r3, [sp, #4]
    8a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8a1a:	bf00      	nop
    8a1c:	b003      	add	sp, #12
    8a1e:	f85d fb04 	ldr.w	pc, [sp], #4
    8a22:	bf00      	nop
    8a24:	1fff8da8 	.word	0x1fff8da8
    8a28:	1fff8da4 	.word	0x1fff8da4

00008a2c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    8a2c:	b500      	push	{lr}
    8a2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a30:	f7f8 f8e8 	bl	c04 <Sys_GetCoreID>
    8a34:	4603      	mov	r3, r0
    8a36:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    8a38:	4a0d      	ldr	r2, [pc, #52]	; (8a70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    8a3a:	9b01      	ldr	r3, [sp, #4]
    8a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a40:	1e5a      	subs	r2, r3, #1
    8a42:	490b      	ldr	r1, [pc, #44]	; (8a70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    8a44:	9b01      	ldr	r3, [sp, #4]
    8a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    8a4a:	4a0a      	ldr	r2, [pc, #40]	; (8a74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    8a4c:	9b01      	ldr	r3, [sp, #4]
    8a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a52:	f003 0301 	and.w	r3, r3, #1
    8a56:	2b00      	cmp	r3, #0
    8a58:	d106      	bne.n	8a68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    8a5a:	4a05      	ldr	r2, [pc, #20]	; (8a70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    8a5c:	9b01      	ldr	r3, [sp, #4]
    8a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a62:	2b00      	cmp	r3, #0
    8a64:	d100      	bne.n	8a68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8a66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8a68:	bf00      	nop
    8a6a:	b003      	add	sp, #12
    8a6c:	f85d fb04 	ldr.w	pc, [sp], #4
    8a70:	1fff8da8 	.word	0x1fff8da8
    8a74:	1fff8da4 	.word	0x1fff8da4

00008a78 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    8a78:	b500      	push	{lr}
    8a7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8a7c:	f7f8 f8c2 	bl	c04 <Sys_GetCoreID>
    8a80:	4603      	mov	r3, r0
    8a82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    8a84:	4a10      	ldr	r2, [pc, #64]	; (8ac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    8a86:	9b01      	ldr	r3, [sp, #4]
    8a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a8c:	2b00      	cmp	r3, #0
    8a8e:	d10d      	bne.n	8aac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8a90:	f7f7 ffdf 	bl	a52 <Port_schm_read_msr>
    8a94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8a96:	9b00      	ldr	r3, [sp, #0]
    8a98:	f003 0301 	and.w	r3, r3, #1
    8a9c:	2b00      	cmp	r3, #0
    8a9e:	d100      	bne.n	8aa2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8aa0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    8aa2:	490a      	ldr	r1, [pc, #40]	; (8acc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    8aa4:	9b01      	ldr	r3, [sp, #4]
    8aa6:	9a00      	ldr	r2, [sp, #0]
    8aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    8aac:	4a06      	ldr	r2, [pc, #24]	; (8ac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    8aae:	9b01      	ldr	r3, [sp, #4]
    8ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ab4:	1c5a      	adds	r2, r3, #1
    8ab6:	4904      	ldr	r1, [pc, #16]	; (8ac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    8ab8:	9b01      	ldr	r3, [sp, #4]
    8aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8abe:	bf00      	nop
    8ac0:	b003      	add	sp, #12
    8ac2:	f85d fb04 	ldr.w	pc, [sp], #4
    8ac6:	bf00      	nop
    8ac8:	1fff8db0 	.word	0x1fff8db0
    8acc:	1fff8dac 	.word	0x1fff8dac

00008ad0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    8ad0:	b500      	push	{lr}
    8ad2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ad4:	f7f8 f896 	bl	c04 <Sys_GetCoreID>
    8ad8:	4603      	mov	r3, r0
    8ada:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    8adc:	4a0d      	ldr	r2, [pc, #52]	; (8b14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    8ade:	9b01      	ldr	r3, [sp, #4]
    8ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ae4:	1e5a      	subs	r2, r3, #1
    8ae6:	490b      	ldr	r1, [pc, #44]	; (8b14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    8ae8:	9b01      	ldr	r3, [sp, #4]
    8aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    8aee:	4a0a      	ldr	r2, [pc, #40]	; (8b18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    8af0:	9b01      	ldr	r3, [sp, #4]
    8af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8af6:	f003 0301 	and.w	r3, r3, #1
    8afa:	2b00      	cmp	r3, #0
    8afc:	d106      	bne.n	8b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    8afe:	4a05      	ldr	r2, [pc, #20]	; (8b14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    8b00:	9b01      	ldr	r3, [sp, #4]
    8b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b06:	2b00      	cmp	r3, #0
    8b08:	d100      	bne.n	8b0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8b0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8b0c:	bf00      	nop
    8b0e:	b003      	add	sp, #12
    8b10:	f85d fb04 	ldr.w	pc, [sp], #4
    8b14:	1fff8db0 	.word	0x1fff8db0
    8b18:	1fff8dac 	.word	0x1fff8dac

00008b1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    8b1c:	b500      	push	{lr}
    8b1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b20:	f7f8 f870 	bl	c04 <Sys_GetCoreID>
    8b24:	4603      	mov	r3, r0
    8b26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    8b28:	4a10      	ldr	r2, [pc, #64]	; (8b6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    8b2a:	9b01      	ldr	r3, [sp, #4]
    8b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b30:	2b00      	cmp	r3, #0
    8b32:	d10d      	bne.n	8b50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8b34:	f7f7 ff8d 	bl	a52 <Port_schm_read_msr>
    8b38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8b3a:	9b00      	ldr	r3, [sp, #0]
    8b3c:	f003 0301 	and.w	r3, r3, #1
    8b40:	2b00      	cmp	r3, #0
    8b42:	d100      	bne.n	8b46 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8b44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    8b46:	490a      	ldr	r1, [pc, #40]	; (8b70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    8b48:	9b01      	ldr	r3, [sp, #4]
    8b4a:	9a00      	ldr	r2, [sp, #0]
    8b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    8b50:	4a06      	ldr	r2, [pc, #24]	; (8b6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    8b52:	9b01      	ldr	r3, [sp, #4]
    8b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b58:	1c5a      	adds	r2, r3, #1
    8b5a:	4904      	ldr	r1, [pc, #16]	; (8b6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    8b5c:	9b01      	ldr	r3, [sp, #4]
    8b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8b62:	bf00      	nop
    8b64:	b003      	add	sp, #12
    8b66:	f85d fb04 	ldr.w	pc, [sp], #4
    8b6a:	bf00      	nop
    8b6c:	1fff8db8 	.word	0x1fff8db8
    8b70:	1fff8db4 	.word	0x1fff8db4

00008b74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    8b74:	b500      	push	{lr}
    8b76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8b78:	f7f8 f844 	bl	c04 <Sys_GetCoreID>
    8b7c:	4603      	mov	r3, r0
    8b7e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    8b80:	4a0d      	ldr	r2, [pc, #52]	; (8bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    8b82:	9b01      	ldr	r3, [sp, #4]
    8b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b88:	1e5a      	subs	r2, r3, #1
    8b8a:	490b      	ldr	r1, [pc, #44]	; (8bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    8b8c:	9b01      	ldr	r3, [sp, #4]
    8b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    8b92:	4a0a      	ldr	r2, [pc, #40]	; (8bbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    8b94:	9b01      	ldr	r3, [sp, #4]
    8b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b9a:	f003 0301 	and.w	r3, r3, #1
    8b9e:	2b00      	cmp	r3, #0
    8ba0:	d106      	bne.n	8bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    8ba2:	4a05      	ldr	r2, [pc, #20]	; (8bb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    8ba4:	9b01      	ldr	r3, [sp, #4]
    8ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8baa:	2b00      	cmp	r3, #0
    8bac:	d100      	bne.n	8bb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8bae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8bb0:	bf00      	nop
    8bb2:	b003      	add	sp, #12
    8bb4:	f85d fb04 	ldr.w	pc, [sp], #4
    8bb8:	1fff8db8 	.word	0x1fff8db8
    8bbc:	1fff8db4 	.word	0x1fff8db4

00008bc0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    8bc0:	b500      	push	{lr}
    8bc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8bc4:	f7f8 f81e 	bl	c04 <Sys_GetCoreID>
    8bc8:	4603      	mov	r3, r0
    8bca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    8bcc:	4a10      	ldr	r2, [pc, #64]	; (8c10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    8bce:	9b01      	ldr	r3, [sp, #4]
    8bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bd4:	2b00      	cmp	r3, #0
    8bd6:	d10d      	bne.n	8bf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8bd8:	f7f7 ff3b 	bl	a52 <Port_schm_read_msr>
    8bdc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8bde:	9b00      	ldr	r3, [sp, #0]
    8be0:	f003 0301 	and.w	r3, r3, #1
    8be4:	2b00      	cmp	r3, #0
    8be6:	d100      	bne.n	8bea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8be8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    8bea:	490a      	ldr	r1, [pc, #40]	; (8c14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    8bec:	9b01      	ldr	r3, [sp, #4]
    8bee:	9a00      	ldr	r2, [sp, #0]
    8bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    8bf4:	4a06      	ldr	r2, [pc, #24]	; (8c10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    8bf6:	9b01      	ldr	r3, [sp, #4]
    8bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8bfc:	1c5a      	adds	r2, r3, #1
    8bfe:	4904      	ldr	r1, [pc, #16]	; (8c10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    8c00:	9b01      	ldr	r3, [sp, #4]
    8c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8c06:	bf00      	nop
    8c08:	b003      	add	sp, #12
    8c0a:	f85d fb04 	ldr.w	pc, [sp], #4
    8c0e:	bf00      	nop
    8c10:	1fff8dc0 	.word	0x1fff8dc0
    8c14:	1fff8dbc 	.word	0x1fff8dbc

00008c18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    8c18:	b500      	push	{lr}
    8c1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c1c:	f7f7 fff2 	bl	c04 <Sys_GetCoreID>
    8c20:	4603      	mov	r3, r0
    8c22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    8c24:	4a0d      	ldr	r2, [pc, #52]	; (8c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    8c26:	9b01      	ldr	r3, [sp, #4]
    8c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c2c:	1e5a      	subs	r2, r3, #1
    8c2e:	490b      	ldr	r1, [pc, #44]	; (8c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    8c30:	9b01      	ldr	r3, [sp, #4]
    8c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    8c36:	4a0a      	ldr	r2, [pc, #40]	; (8c60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    8c38:	9b01      	ldr	r3, [sp, #4]
    8c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c3e:	f003 0301 	and.w	r3, r3, #1
    8c42:	2b00      	cmp	r3, #0
    8c44:	d106      	bne.n	8c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    8c46:	4a05      	ldr	r2, [pc, #20]	; (8c5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    8c48:	9b01      	ldr	r3, [sp, #4]
    8c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c4e:	2b00      	cmp	r3, #0
    8c50:	d100      	bne.n	8c54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8c52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8c54:	bf00      	nop
    8c56:	b003      	add	sp, #12
    8c58:	f85d fb04 	ldr.w	pc, [sp], #4
    8c5c:	1fff8dc0 	.word	0x1fff8dc0
    8c60:	1fff8dbc 	.word	0x1fff8dbc

00008c64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    8c64:	b500      	push	{lr}
    8c66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8c68:	f7f7 ffcc 	bl	c04 <Sys_GetCoreID>
    8c6c:	4603      	mov	r3, r0
    8c6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    8c70:	4a10      	ldr	r2, [pc, #64]	; (8cb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    8c72:	9b01      	ldr	r3, [sp, #4]
    8c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c78:	2b00      	cmp	r3, #0
    8c7a:	d10d      	bne.n	8c98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8c7c:	f7f7 fee9 	bl	a52 <Port_schm_read_msr>
    8c80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8c82:	9b00      	ldr	r3, [sp, #0]
    8c84:	f003 0301 	and.w	r3, r3, #1
    8c88:	2b00      	cmp	r3, #0
    8c8a:	d100      	bne.n	8c8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8c8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    8c8e:	490a      	ldr	r1, [pc, #40]	; (8cb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    8c90:	9b01      	ldr	r3, [sp, #4]
    8c92:	9a00      	ldr	r2, [sp, #0]
    8c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    8c98:	4a06      	ldr	r2, [pc, #24]	; (8cb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    8c9a:	9b01      	ldr	r3, [sp, #4]
    8c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ca0:	1c5a      	adds	r2, r3, #1
    8ca2:	4904      	ldr	r1, [pc, #16]	; (8cb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    8ca4:	9b01      	ldr	r3, [sp, #4]
    8ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8caa:	bf00      	nop
    8cac:	b003      	add	sp, #12
    8cae:	f85d fb04 	ldr.w	pc, [sp], #4
    8cb2:	bf00      	nop
    8cb4:	1fff8dc8 	.word	0x1fff8dc8
    8cb8:	1fff8dc4 	.word	0x1fff8dc4

00008cbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    8cbc:	b500      	push	{lr}
    8cbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8cc0:	f7f7 ffa0 	bl	c04 <Sys_GetCoreID>
    8cc4:	4603      	mov	r3, r0
    8cc6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    8cc8:	4a0d      	ldr	r2, [pc, #52]	; (8d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    8cca:	9b01      	ldr	r3, [sp, #4]
    8ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cd0:	1e5a      	subs	r2, r3, #1
    8cd2:	490b      	ldr	r1, [pc, #44]	; (8d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    8cd4:	9b01      	ldr	r3, [sp, #4]
    8cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    8cda:	4a0a      	ldr	r2, [pc, #40]	; (8d04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    8cdc:	9b01      	ldr	r3, [sp, #4]
    8cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ce2:	f003 0301 	and.w	r3, r3, #1
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	d106      	bne.n	8cf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    8cea:	4a05      	ldr	r2, [pc, #20]	; (8d00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    8cec:	9b01      	ldr	r3, [sp, #4]
    8cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cf2:	2b00      	cmp	r3, #0
    8cf4:	d100      	bne.n	8cf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8cf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8cf8:	bf00      	nop
    8cfa:	b003      	add	sp, #12
    8cfc:	f85d fb04 	ldr.w	pc, [sp], #4
    8d00:	1fff8dc8 	.word	0x1fff8dc8
    8d04:	1fff8dc4 	.word	0x1fff8dc4

00008d08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    8d08:	b500      	push	{lr}
    8d0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d0c:	f7f7 ff7a 	bl	c04 <Sys_GetCoreID>
    8d10:	4603      	mov	r3, r0
    8d12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    8d14:	4a10      	ldr	r2, [pc, #64]	; (8d58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    8d16:	9b01      	ldr	r3, [sp, #4]
    8d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d1c:	2b00      	cmp	r3, #0
    8d1e:	d10d      	bne.n	8d3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8d20:	f7f7 fe97 	bl	a52 <Port_schm_read_msr>
    8d24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8d26:	9b00      	ldr	r3, [sp, #0]
    8d28:	f003 0301 	and.w	r3, r3, #1
    8d2c:	2b00      	cmp	r3, #0
    8d2e:	d100      	bne.n	8d32 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8d30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    8d32:	490a      	ldr	r1, [pc, #40]	; (8d5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    8d34:	9b01      	ldr	r3, [sp, #4]
    8d36:	9a00      	ldr	r2, [sp, #0]
    8d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    8d3c:	4a06      	ldr	r2, [pc, #24]	; (8d58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    8d3e:	9b01      	ldr	r3, [sp, #4]
    8d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d44:	1c5a      	adds	r2, r3, #1
    8d46:	4904      	ldr	r1, [pc, #16]	; (8d58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    8d48:	9b01      	ldr	r3, [sp, #4]
    8d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8d4e:	bf00      	nop
    8d50:	b003      	add	sp, #12
    8d52:	f85d fb04 	ldr.w	pc, [sp], #4
    8d56:	bf00      	nop
    8d58:	1fff8dd0 	.word	0x1fff8dd0
    8d5c:	1fff8dcc 	.word	0x1fff8dcc

00008d60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    8d60:	b500      	push	{lr}
    8d62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8d64:	f7f7 ff4e 	bl	c04 <Sys_GetCoreID>
    8d68:	4603      	mov	r3, r0
    8d6a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    8d6c:	4a0d      	ldr	r2, [pc, #52]	; (8da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    8d6e:	9b01      	ldr	r3, [sp, #4]
    8d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d74:	1e5a      	subs	r2, r3, #1
    8d76:	490b      	ldr	r1, [pc, #44]	; (8da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    8d78:	9b01      	ldr	r3, [sp, #4]
    8d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    8d7e:	4a0a      	ldr	r2, [pc, #40]	; (8da8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    8d80:	9b01      	ldr	r3, [sp, #4]
    8d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d86:	f003 0301 	and.w	r3, r3, #1
    8d8a:	2b00      	cmp	r3, #0
    8d8c:	d106      	bne.n	8d9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    8d8e:	4a05      	ldr	r2, [pc, #20]	; (8da4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    8d90:	9b01      	ldr	r3, [sp, #4]
    8d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d96:	2b00      	cmp	r3, #0
    8d98:	d100      	bne.n	8d9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8d9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8d9c:	bf00      	nop
    8d9e:	b003      	add	sp, #12
    8da0:	f85d fb04 	ldr.w	pc, [sp], #4
    8da4:	1fff8dd0 	.word	0x1fff8dd0
    8da8:	1fff8dcc 	.word	0x1fff8dcc

00008dac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    8dac:	b500      	push	{lr}
    8dae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8db0:	f7f7 ff28 	bl	c04 <Sys_GetCoreID>
    8db4:	4603      	mov	r3, r0
    8db6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    8db8:	4a10      	ldr	r2, [pc, #64]	; (8dfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    8dba:	9b01      	ldr	r3, [sp, #4]
    8dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dc0:	2b00      	cmp	r3, #0
    8dc2:	d10d      	bne.n	8de0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8dc4:	f7f7 fe45 	bl	a52 <Port_schm_read_msr>
    8dc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8dca:	9b00      	ldr	r3, [sp, #0]
    8dcc:	f003 0301 	and.w	r3, r3, #1
    8dd0:	2b00      	cmp	r3, #0
    8dd2:	d100      	bne.n	8dd6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8dd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    8dd6:	490a      	ldr	r1, [pc, #40]	; (8e00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    8dd8:	9b01      	ldr	r3, [sp, #4]
    8dda:	9a00      	ldr	r2, [sp, #0]
    8ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    8de0:	4a06      	ldr	r2, [pc, #24]	; (8dfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    8de2:	9b01      	ldr	r3, [sp, #4]
    8de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8de8:	1c5a      	adds	r2, r3, #1
    8dea:	4904      	ldr	r1, [pc, #16]	; (8dfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    8dec:	9b01      	ldr	r3, [sp, #4]
    8dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8df2:	bf00      	nop
    8df4:	b003      	add	sp, #12
    8df6:	f85d fb04 	ldr.w	pc, [sp], #4
    8dfa:	bf00      	nop
    8dfc:	1fff8dd8 	.word	0x1fff8dd8
    8e00:	1fff8dd4 	.word	0x1fff8dd4

00008e04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    8e04:	b500      	push	{lr}
    8e06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e08:	f7f7 fefc 	bl	c04 <Sys_GetCoreID>
    8e0c:	4603      	mov	r3, r0
    8e0e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    8e10:	4a0d      	ldr	r2, [pc, #52]	; (8e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    8e12:	9b01      	ldr	r3, [sp, #4]
    8e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e18:	1e5a      	subs	r2, r3, #1
    8e1a:	490b      	ldr	r1, [pc, #44]	; (8e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    8e1c:	9b01      	ldr	r3, [sp, #4]
    8e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    8e22:	4a0a      	ldr	r2, [pc, #40]	; (8e4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    8e24:	9b01      	ldr	r3, [sp, #4]
    8e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e2a:	f003 0301 	and.w	r3, r3, #1
    8e2e:	2b00      	cmp	r3, #0
    8e30:	d106      	bne.n	8e40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    8e32:	4a05      	ldr	r2, [pc, #20]	; (8e48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    8e34:	9b01      	ldr	r3, [sp, #4]
    8e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e3a:	2b00      	cmp	r3, #0
    8e3c:	d100      	bne.n	8e40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8e3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8e40:	bf00      	nop
    8e42:	b003      	add	sp, #12
    8e44:	f85d fb04 	ldr.w	pc, [sp], #4
    8e48:	1fff8dd8 	.word	0x1fff8dd8
    8e4c:	1fff8dd4 	.word	0x1fff8dd4

00008e50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    8e50:	b500      	push	{lr}
    8e52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8e54:	f7f7 fed6 	bl	c04 <Sys_GetCoreID>
    8e58:	4603      	mov	r3, r0
    8e5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    8e5c:	4a10      	ldr	r2, [pc, #64]	; (8ea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    8e5e:	9b01      	ldr	r3, [sp, #4]
    8e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e64:	2b00      	cmp	r3, #0
    8e66:	d10d      	bne.n	8e84 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8e68:	f7f7 fdf3 	bl	a52 <Port_schm_read_msr>
    8e6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8e6e:	9b00      	ldr	r3, [sp, #0]
    8e70:	f003 0301 	and.w	r3, r3, #1
    8e74:	2b00      	cmp	r3, #0
    8e76:	d100      	bne.n	8e7a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8e78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    8e7a:	490a      	ldr	r1, [pc, #40]	; (8ea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    8e7c:	9b01      	ldr	r3, [sp, #4]
    8e7e:	9a00      	ldr	r2, [sp, #0]
    8e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    8e84:	4a06      	ldr	r2, [pc, #24]	; (8ea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    8e86:	9b01      	ldr	r3, [sp, #4]
    8e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e8c:	1c5a      	adds	r2, r3, #1
    8e8e:	4904      	ldr	r1, [pc, #16]	; (8ea0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    8e90:	9b01      	ldr	r3, [sp, #4]
    8e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8e96:	bf00      	nop
    8e98:	b003      	add	sp, #12
    8e9a:	f85d fb04 	ldr.w	pc, [sp], #4
    8e9e:	bf00      	nop
    8ea0:	1fff8de0 	.word	0x1fff8de0
    8ea4:	1fff8ddc 	.word	0x1fff8ddc

00008ea8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    8ea8:	b500      	push	{lr}
    8eaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8eac:	f7f7 feaa 	bl	c04 <Sys_GetCoreID>
    8eb0:	4603      	mov	r3, r0
    8eb2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    8eb4:	4a0d      	ldr	r2, [pc, #52]	; (8eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    8eb6:	9b01      	ldr	r3, [sp, #4]
    8eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ebc:	1e5a      	subs	r2, r3, #1
    8ebe:	490b      	ldr	r1, [pc, #44]	; (8eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    8ec0:	9b01      	ldr	r3, [sp, #4]
    8ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    8ec6:	4a0a      	ldr	r2, [pc, #40]	; (8ef0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    8ec8:	9b01      	ldr	r3, [sp, #4]
    8eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ece:	f003 0301 	and.w	r3, r3, #1
    8ed2:	2b00      	cmp	r3, #0
    8ed4:	d106      	bne.n	8ee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    8ed6:	4a05      	ldr	r2, [pc, #20]	; (8eec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    8ed8:	9b01      	ldr	r3, [sp, #4]
    8eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ede:	2b00      	cmp	r3, #0
    8ee0:	d100      	bne.n	8ee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8ee2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8ee4:	bf00      	nop
    8ee6:	b003      	add	sp, #12
    8ee8:	f85d fb04 	ldr.w	pc, [sp], #4
    8eec:	1fff8de0 	.word	0x1fff8de0
    8ef0:	1fff8ddc 	.word	0x1fff8ddc

00008ef4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    8ef4:	b500      	push	{lr}
    8ef6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ef8:	f7f7 fe84 	bl	c04 <Sys_GetCoreID>
    8efc:	4603      	mov	r3, r0
    8efe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    8f00:	4a10      	ldr	r2, [pc, #64]	; (8f44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    8f02:	9b01      	ldr	r3, [sp, #4]
    8f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f08:	2b00      	cmp	r3, #0
    8f0a:	d10d      	bne.n	8f28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8f0c:	f7f7 fda1 	bl	a52 <Port_schm_read_msr>
    8f10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8f12:	9b00      	ldr	r3, [sp, #0]
    8f14:	f003 0301 	and.w	r3, r3, #1
    8f18:	2b00      	cmp	r3, #0
    8f1a:	d100      	bne.n	8f1e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8f1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    8f1e:	490a      	ldr	r1, [pc, #40]	; (8f48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    8f20:	9b01      	ldr	r3, [sp, #4]
    8f22:	9a00      	ldr	r2, [sp, #0]
    8f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    8f28:	4a06      	ldr	r2, [pc, #24]	; (8f44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    8f2a:	9b01      	ldr	r3, [sp, #4]
    8f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f30:	1c5a      	adds	r2, r3, #1
    8f32:	4904      	ldr	r1, [pc, #16]	; (8f44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    8f34:	9b01      	ldr	r3, [sp, #4]
    8f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8f3a:	bf00      	nop
    8f3c:	b003      	add	sp, #12
    8f3e:	f85d fb04 	ldr.w	pc, [sp], #4
    8f42:	bf00      	nop
    8f44:	1fff8de8 	.word	0x1fff8de8
    8f48:	1fff8de4 	.word	0x1fff8de4

00008f4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    8f4c:	b500      	push	{lr}
    8f4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f50:	f7f7 fe58 	bl	c04 <Sys_GetCoreID>
    8f54:	4603      	mov	r3, r0
    8f56:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    8f58:	4a0d      	ldr	r2, [pc, #52]	; (8f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    8f5a:	9b01      	ldr	r3, [sp, #4]
    8f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f60:	1e5a      	subs	r2, r3, #1
    8f62:	490b      	ldr	r1, [pc, #44]	; (8f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    8f64:	9b01      	ldr	r3, [sp, #4]
    8f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    8f6a:	4a0a      	ldr	r2, [pc, #40]	; (8f94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    8f6c:	9b01      	ldr	r3, [sp, #4]
    8f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f72:	f003 0301 	and.w	r3, r3, #1
    8f76:	2b00      	cmp	r3, #0
    8f78:	d106      	bne.n	8f88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    8f7a:	4a05      	ldr	r2, [pc, #20]	; (8f90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    8f7c:	9b01      	ldr	r3, [sp, #4]
    8f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f82:	2b00      	cmp	r3, #0
    8f84:	d100      	bne.n	8f88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    8f86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    8f88:	bf00      	nop
    8f8a:	b003      	add	sp, #12
    8f8c:	f85d fb04 	ldr.w	pc, [sp], #4
    8f90:	1fff8de8 	.word	0x1fff8de8
    8f94:	1fff8de4 	.word	0x1fff8de4

00008f98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    8f98:	b500      	push	{lr}
    8f9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8f9c:	f7f7 fe32 	bl	c04 <Sys_GetCoreID>
    8fa0:	4603      	mov	r3, r0
    8fa2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    8fa4:	4a10      	ldr	r2, [pc, #64]	; (8fe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    8fa6:	9b01      	ldr	r3, [sp, #4]
    8fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fac:	2b00      	cmp	r3, #0
    8fae:	d10d      	bne.n	8fcc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    8fb0:	f7f7 fd4f 	bl	a52 <Port_schm_read_msr>
    8fb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    8fb6:	9b00      	ldr	r3, [sp, #0]
    8fb8:	f003 0301 	and.w	r3, r3, #1
    8fbc:	2b00      	cmp	r3, #0
    8fbe:	d100      	bne.n	8fc2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    8fc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    8fc2:	490a      	ldr	r1, [pc, #40]	; (8fec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    8fc4:	9b01      	ldr	r3, [sp, #4]
    8fc6:	9a00      	ldr	r2, [sp, #0]
    8fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    8fcc:	4a06      	ldr	r2, [pc, #24]	; (8fe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    8fce:	9b01      	ldr	r3, [sp, #4]
    8fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fd4:	1c5a      	adds	r2, r3, #1
    8fd6:	4904      	ldr	r1, [pc, #16]	; (8fe8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    8fd8:	9b01      	ldr	r3, [sp, #4]
    8fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    8fde:	bf00      	nop
    8fe0:	b003      	add	sp, #12
    8fe2:	f85d fb04 	ldr.w	pc, [sp], #4
    8fe6:	bf00      	nop
    8fe8:	1fff8df0 	.word	0x1fff8df0
    8fec:	1fff8dec 	.word	0x1fff8dec

00008ff0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    8ff0:	b500      	push	{lr}
    8ff2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    8ff4:	f7f7 fe06 	bl	c04 <Sys_GetCoreID>
    8ff8:	4603      	mov	r3, r0
    8ffa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    8ffc:	4a0d      	ldr	r2, [pc, #52]	; (9034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    8ffe:	9b01      	ldr	r3, [sp, #4]
    9000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9004:	1e5a      	subs	r2, r3, #1
    9006:	490b      	ldr	r1, [pc, #44]	; (9034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    9008:	9b01      	ldr	r3, [sp, #4]
    900a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    900e:	4a0a      	ldr	r2, [pc, #40]	; (9038 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    9010:	9b01      	ldr	r3, [sp, #4]
    9012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9016:	f003 0301 	and.w	r3, r3, #1
    901a:	2b00      	cmp	r3, #0
    901c:	d106      	bne.n	902c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    901e:	4a05      	ldr	r2, [pc, #20]	; (9034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    9020:	9b01      	ldr	r3, [sp, #4]
    9022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9026:	2b00      	cmp	r3, #0
    9028:	d100      	bne.n	902c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    902a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    902c:	bf00      	nop
    902e:	b003      	add	sp, #12
    9030:	f85d fb04 	ldr.w	pc, [sp], #4
    9034:	1fff8df0 	.word	0x1fff8df0
    9038:	1fff8dec 	.word	0x1fff8dec

0000903c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    903c:	b500      	push	{lr}
    903e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9040:	f7f7 fde0 	bl	c04 <Sys_GetCoreID>
    9044:	4603      	mov	r3, r0
    9046:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    9048:	4a10      	ldr	r2, [pc, #64]	; (908c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    904a:	9b01      	ldr	r3, [sp, #4]
    904c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9050:	2b00      	cmp	r3, #0
    9052:	d10d      	bne.n	9070 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9054:	f7f7 fcfd 	bl	a52 <Port_schm_read_msr>
    9058:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    905a:	9b00      	ldr	r3, [sp, #0]
    905c:	f003 0301 	and.w	r3, r3, #1
    9060:	2b00      	cmp	r3, #0
    9062:	d100      	bne.n	9066 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9064:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    9066:	490a      	ldr	r1, [pc, #40]	; (9090 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    9068:	9b01      	ldr	r3, [sp, #4]
    906a:	9a00      	ldr	r2, [sp, #0]
    906c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    9070:	4a06      	ldr	r2, [pc, #24]	; (908c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    9072:	9b01      	ldr	r3, [sp, #4]
    9074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9078:	1c5a      	adds	r2, r3, #1
    907a:	4904      	ldr	r1, [pc, #16]	; (908c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    907c:	9b01      	ldr	r3, [sp, #4]
    907e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9082:	bf00      	nop
    9084:	b003      	add	sp, #12
    9086:	f85d fb04 	ldr.w	pc, [sp], #4
    908a:	bf00      	nop
    908c:	1fff8df8 	.word	0x1fff8df8
    9090:	1fff8df4 	.word	0x1fff8df4

00009094 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    9094:	b500      	push	{lr}
    9096:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9098:	f7f7 fdb4 	bl	c04 <Sys_GetCoreID>
    909c:	4603      	mov	r3, r0
    909e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    90a0:	4a0d      	ldr	r2, [pc, #52]	; (90d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    90a2:	9b01      	ldr	r3, [sp, #4]
    90a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90a8:	1e5a      	subs	r2, r3, #1
    90aa:	490b      	ldr	r1, [pc, #44]	; (90d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    90ac:	9b01      	ldr	r3, [sp, #4]
    90ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    90b2:	4a0a      	ldr	r2, [pc, #40]	; (90dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    90b4:	9b01      	ldr	r3, [sp, #4]
    90b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90ba:	f003 0301 	and.w	r3, r3, #1
    90be:	2b00      	cmp	r3, #0
    90c0:	d106      	bne.n	90d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    90c2:	4a05      	ldr	r2, [pc, #20]	; (90d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    90c4:	9b01      	ldr	r3, [sp, #4]
    90c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90ca:	2b00      	cmp	r3, #0
    90cc:	d100      	bne.n	90d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    90ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    90d0:	bf00      	nop
    90d2:	b003      	add	sp, #12
    90d4:	f85d fb04 	ldr.w	pc, [sp], #4
    90d8:	1fff8df8 	.word	0x1fff8df8
    90dc:	1fff8df4 	.word	0x1fff8df4

000090e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    90e0:	b500      	push	{lr}
    90e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    90e4:	f7f7 fd8e 	bl	c04 <Sys_GetCoreID>
    90e8:	4603      	mov	r3, r0
    90ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    90ec:	4a10      	ldr	r2, [pc, #64]	; (9130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    90ee:	9b01      	ldr	r3, [sp, #4]
    90f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90f4:	2b00      	cmp	r3, #0
    90f6:	d10d      	bne.n	9114 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    90f8:	f7f7 fcab 	bl	a52 <Port_schm_read_msr>
    90fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    90fe:	9b00      	ldr	r3, [sp, #0]
    9100:	f003 0301 	and.w	r3, r3, #1
    9104:	2b00      	cmp	r3, #0
    9106:	d100      	bne.n	910a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9108:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    910a:	490a      	ldr	r1, [pc, #40]	; (9134 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    910c:	9b01      	ldr	r3, [sp, #4]
    910e:	9a00      	ldr	r2, [sp, #0]
    9110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    9114:	4a06      	ldr	r2, [pc, #24]	; (9130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    9116:	9b01      	ldr	r3, [sp, #4]
    9118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    911c:	1c5a      	adds	r2, r3, #1
    911e:	4904      	ldr	r1, [pc, #16]	; (9130 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    9120:	9b01      	ldr	r3, [sp, #4]
    9122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9126:	bf00      	nop
    9128:	b003      	add	sp, #12
    912a:	f85d fb04 	ldr.w	pc, [sp], #4
    912e:	bf00      	nop
    9130:	1fff8e00 	.word	0x1fff8e00
    9134:	1fff8dfc 	.word	0x1fff8dfc

00009138 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    9138:	b500      	push	{lr}
    913a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    913c:	f7f7 fd62 	bl	c04 <Sys_GetCoreID>
    9140:	4603      	mov	r3, r0
    9142:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    9144:	4a0d      	ldr	r2, [pc, #52]	; (917c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9146:	9b01      	ldr	r3, [sp, #4]
    9148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    914c:	1e5a      	subs	r2, r3, #1
    914e:	490b      	ldr	r1, [pc, #44]	; (917c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9150:	9b01      	ldr	r3, [sp, #4]
    9152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    9156:	4a0a      	ldr	r2, [pc, #40]	; (9180 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    9158:	9b01      	ldr	r3, [sp, #4]
    915a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    915e:	f003 0301 	and.w	r3, r3, #1
    9162:	2b00      	cmp	r3, #0
    9164:	d106      	bne.n	9174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    9166:	4a05      	ldr	r2, [pc, #20]	; (917c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    9168:	9b01      	ldr	r3, [sp, #4]
    916a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    916e:	2b00      	cmp	r3, #0
    9170:	d100      	bne.n	9174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9172:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9174:	bf00      	nop
    9176:	b003      	add	sp, #12
    9178:	f85d fb04 	ldr.w	pc, [sp], #4
    917c:	1fff8e00 	.word	0x1fff8e00
    9180:	1fff8dfc 	.word	0x1fff8dfc

00009184 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    9184:	b500      	push	{lr}
    9186:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9188:	f7f7 fd3c 	bl	c04 <Sys_GetCoreID>
    918c:	4603      	mov	r3, r0
    918e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    9190:	4a10      	ldr	r2, [pc, #64]	; (91d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    9192:	9b01      	ldr	r3, [sp, #4]
    9194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9198:	2b00      	cmp	r3, #0
    919a:	d10d      	bne.n	91b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    919c:	f7f7 fc59 	bl	a52 <Port_schm_read_msr>
    91a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    91a2:	9b00      	ldr	r3, [sp, #0]
    91a4:	f003 0301 	and.w	r3, r3, #1
    91a8:	2b00      	cmp	r3, #0
    91aa:	d100      	bne.n	91ae <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    91ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    91ae:	490a      	ldr	r1, [pc, #40]	; (91d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    91b0:	9b01      	ldr	r3, [sp, #4]
    91b2:	9a00      	ldr	r2, [sp, #0]
    91b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    91b8:	4a06      	ldr	r2, [pc, #24]	; (91d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    91ba:	9b01      	ldr	r3, [sp, #4]
    91bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91c0:	1c5a      	adds	r2, r3, #1
    91c2:	4904      	ldr	r1, [pc, #16]	; (91d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    91c4:	9b01      	ldr	r3, [sp, #4]
    91c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    91ca:	bf00      	nop
    91cc:	b003      	add	sp, #12
    91ce:	f85d fb04 	ldr.w	pc, [sp], #4
    91d2:	bf00      	nop
    91d4:	1fff8e08 	.word	0x1fff8e08
    91d8:	1fff8e04 	.word	0x1fff8e04

000091dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    91dc:	b500      	push	{lr}
    91de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    91e0:	f7f7 fd10 	bl	c04 <Sys_GetCoreID>
    91e4:	4603      	mov	r3, r0
    91e6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    91e8:	4a0d      	ldr	r2, [pc, #52]	; (9220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    91ea:	9b01      	ldr	r3, [sp, #4]
    91ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91f0:	1e5a      	subs	r2, r3, #1
    91f2:	490b      	ldr	r1, [pc, #44]	; (9220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    91f4:	9b01      	ldr	r3, [sp, #4]
    91f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    91fa:	4a0a      	ldr	r2, [pc, #40]	; (9224 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    91fc:	9b01      	ldr	r3, [sp, #4]
    91fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9202:	f003 0301 	and.w	r3, r3, #1
    9206:	2b00      	cmp	r3, #0
    9208:	d106      	bne.n	9218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    920a:	4a05      	ldr	r2, [pc, #20]	; (9220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    920c:	9b01      	ldr	r3, [sp, #4]
    920e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9212:	2b00      	cmp	r3, #0
    9214:	d100      	bne.n	9218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9216:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9218:	bf00      	nop
    921a:	b003      	add	sp, #12
    921c:	f85d fb04 	ldr.w	pc, [sp], #4
    9220:	1fff8e08 	.word	0x1fff8e08
    9224:	1fff8e04 	.word	0x1fff8e04

00009228 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    9228:	b500      	push	{lr}
    922a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    922c:	f7f7 fcea 	bl	c04 <Sys_GetCoreID>
    9230:	4603      	mov	r3, r0
    9232:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    9234:	4a10      	ldr	r2, [pc, #64]	; (9278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    9236:	9b01      	ldr	r3, [sp, #4]
    9238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    923c:	2b00      	cmp	r3, #0
    923e:	d10d      	bne.n	925c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9240:	f7f7 fc07 	bl	a52 <Port_schm_read_msr>
    9244:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9246:	9b00      	ldr	r3, [sp, #0]
    9248:	f003 0301 	and.w	r3, r3, #1
    924c:	2b00      	cmp	r3, #0
    924e:	d100      	bne.n	9252 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9250:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    9252:	490a      	ldr	r1, [pc, #40]	; (927c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    9254:	9b01      	ldr	r3, [sp, #4]
    9256:	9a00      	ldr	r2, [sp, #0]
    9258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    925c:	4a06      	ldr	r2, [pc, #24]	; (9278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    925e:	9b01      	ldr	r3, [sp, #4]
    9260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9264:	1c5a      	adds	r2, r3, #1
    9266:	4904      	ldr	r1, [pc, #16]	; (9278 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    9268:	9b01      	ldr	r3, [sp, #4]
    926a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    926e:	bf00      	nop
    9270:	b003      	add	sp, #12
    9272:	f85d fb04 	ldr.w	pc, [sp], #4
    9276:	bf00      	nop
    9278:	1fff8e10 	.word	0x1fff8e10
    927c:	1fff8e0c 	.word	0x1fff8e0c

00009280 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    9280:	b500      	push	{lr}
    9282:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9284:	f7f7 fcbe 	bl	c04 <Sys_GetCoreID>
    9288:	4603      	mov	r3, r0
    928a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    928c:	4a0d      	ldr	r2, [pc, #52]	; (92c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    928e:	9b01      	ldr	r3, [sp, #4]
    9290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9294:	1e5a      	subs	r2, r3, #1
    9296:	490b      	ldr	r1, [pc, #44]	; (92c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    9298:	9b01      	ldr	r3, [sp, #4]
    929a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    929e:	4a0a      	ldr	r2, [pc, #40]	; (92c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    92a0:	9b01      	ldr	r3, [sp, #4]
    92a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92a6:	f003 0301 	and.w	r3, r3, #1
    92aa:	2b00      	cmp	r3, #0
    92ac:	d106      	bne.n	92bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    92ae:	4a05      	ldr	r2, [pc, #20]	; (92c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    92b0:	9b01      	ldr	r3, [sp, #4]
    92b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92b6:	2b00      	cmp	r3, #0
    92b8:	d100      	bne.n	92bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    92ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    92bc:	bf00      	nop
    92be:	b003      	add	sp, #12
    92c0:	f85d fb04 	ldr.w	pc, [sp], #4
    92c4:	1fff8e10 	.word	0x1fff8e10
    92c8:	1fff8e0c 	.word	0x1fff8e0c

000092cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    92cc:	b500      	push	{lr}
    92ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    92d0:	f7f7 fc98 	bl	c04 <Sys_GetCoreID>
    92d4:	4603      	mov	r3, r0
    92d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    92d8:	4a10      	ldr	r2, [pc, #64]	; (931c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    92da:	9b01      	ldr	r3, [sp, #4]
    92dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92e0:	2b00      	cmp	r3, #0
    92e2:	d10d      	bne.n	9300 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    92e4:	f7f7 fbb5 	bl	a52 <Port_schm_read_msr>
    92e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    92ea:	9b00      	ldr	r3, [sp, #0]
    92ec:	f003 0301 	and.w	r3, r3, #1
    92f0:	2b00      	cmp	r3, #0
    92f2:	d100      	bne.n	92f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    92f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    92f6:	490a      	ldr	r1, [pc, #40]	; (9320 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    92f8:	9b01      	ldr	r3, [sp, #4]
    92fa:	9a00      	ldr	r2, [sp, #0]
    92fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    9300:	4a06      	ldr	r2, [pc, #24]	; (931c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    9302:	9b01      	ldr	r3, [sp, #4]
    9304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9308:	1c5a      	adds	r2, r3, #1
    930a:	4904      	ldr	r1, [pc, #16]	; (931c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    930c:	9b01      	ldr	r3, [sp, #4]
    930e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9312:	bf00      	nop
    9314:	b003      	add	sp, #12
    9316:	f85d fb04 	ldr.w	pc, [sp], #4
    931a:	bf00      	nop
    931c:	1fff8e18 	.word	0x1fff8e18
    9320:	1fff8e14 	.word	0x1fff8e14

00009324 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    9324:	b500      	push	{lr}
    9326:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9328:	f7f7 fc6c 	bl	c04 <Sys_GetCoreID>
    932c:	4603      	mov	r3, r0
    932e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    9330:	4a0d      	ldr	r2, [pc, #52]	; (9368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    9332:	9b01      	ldr	r3, [sp, #4]
    9334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9338:	1e5a      	subs	r2, r3, #1
    933a:	490b      	ldr	r1, [pc, #44]	; (9368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    933c:	9b01      	ldr	r3, [sp, #4]
    933e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    9342:	4a0a      	ldr	r2, [pc, #40]	; (936c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    9344:	9b01      	ldr	r3, [sp, #4]
    9346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    934a:	f003 0301 	and.w	r3, r3, #1
    934e:	2b00      	cmp	r3, #0
    9350:	d106      	bne.n	9360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    9352:	4a05      	ldr	r2, [pc, #20]	; (9368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    9354:	9b01      	ldr	r3, [sp, #4]
    9356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    935a:	2b00      	cmp	r3, #0
    935c:	d100      	bne.n	9360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    935e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9360:	bf00      	nop
    9362:	b003      	add	sp, #12
    9364:	f85d fb04 	ldr.w	pc, [sp], #4
    9368:	1fff8e18 	.word	0x1fff8e18
    936c:	1fff8e14 	.word	0x1fff8e14

00009370 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    9370:	b500      	push	{lr}
    9372:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9374:	f7f7 fc46 	bl	c04 <Sys_GetCoreID>
    9378:	4603      	mov	r3, r0
    937a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    937c:	4a10      	ldr	r2, [pc, #64]	; (93c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    937e:	9b01      	ldr	r3, [sp, #4]
    9380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9384:	2b00      	cmp	r3, #0
    9386:	d10d      	bne.n	93a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9388:	f7f7 fb63 	bl	a52 <Port_schm_read_msr>
    938c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    938e:	9b00      	ldr	r3, [sp, #0]
    9390:	f003 0301 	and.w	r3, r3, #1
    9394:	2b00      	cmp	r3, #0
    9396:	d100      	bne.n	939a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9398:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    939a:	490a      	ldr	r1, [pc, #40]	; (93c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    939c:	9b01      	ldr	r3, [sp, #4]
    939e:	9a00      	ldr	r2, [sp, #0]
    93a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    93a4:	4a06      	ldr	r2, [pc, #24]	; (93c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    93a6:	9b01      	ldr	r3, [sp, #4]
    93a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93ac:	1c5a      	adds	r2, r3, #1
    93ae:	4904      	ldr	r1, [pc, #16]	; (93c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    93b0:	9b01      	ldr	r3, [sp, #4]
    93b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    93b6:	bf00      	nop
    93b8:	b003      	add	sp, #12
    93ba:	f85d fb04 	ldr.w	pc, [sp], #4
    93be:	bf00      	nop
    93c0:	1fff8e20 	.word	0x1fff8e20
    93c4:	1fff8e1c 	.word	0x1fff8e1c

000093c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    93c8:	b500      	push	{lr}
    93ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    93cc:	f7f7 fc1a 	bl	c04 <Sys_GetCoreID>
    93d0:	4603      	mov	r3, r0
    93d2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    93d4:	4a0d      	ldr	r2, [pc, #52]	; (940c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    93d6:	9b01      	ldr	r3, [sp, #4]
    93d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93dc:	1e5a      	subs	r2, r3, #1
    93de:	490b      	ldr	r1, [pc, #44]	; (940c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    93e0:	9b01      	ldr	r3, [sp, #4]
    93e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    93e6:	4a0a      	ldr	r2, [pc, #40]	; (9410 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    93e8:	9b01      	ldr	r3, [sp, #4]
    93ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93ee:	f003 0301 	and.w	r3, r3, #1
    93f2:	2b00      	cmp	r3, #0
    93f4:	d106      	bne.n	9404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    93f6:	4a05      	ldr	r2, [pc, #20]	; (940c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    93f8:	9b01      	ldr	r3, [sp, #4]
    93fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    93fe:	2b00      	cmp	r3, #0
    9400:	d100      	bne.n	9404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9402:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9404:	bf00      	nop
    9406:	b003      	add	sp, #12
    9408:	f85d fb04 	ldr.w	pc, [sp], #4
    940c:	1fff8e20 	.word	0x1fff8e20
    9410:	1fff8e1c 	.word	0x1fff8e1c

00009414 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    9414:	b500      	push	{lr}
    9416:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9418:	f7f7 fbf4 	bl	c04 <Sys_GetCoreID>
    941c:	4603      	mov	r3, r0
    941e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    9420:	4a10      	ldr	r2, [pc, #64]	; (9464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9422:	9b01      	ldr	r3, [sp, #4]
    9424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9428:	2b00      	cmp	r3, #0
    942a:	d10d      	bne.n	9448 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    942c:	f7f7 fb11 	bl	a52 <Port_schm_read_msr>
    9430:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9432:	9b00      	ldr	r3, [sp, #0]
    9434:	f003 0301 	and.w	r3, r3, #1
    9438:	2b00      	cmp	r3, #0
    943a:	d100      	bne.n	943e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    943c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    943e:	490a      	ldr	r1, [pc, #40]	; (9468 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    9440:	9b01      	ldr	r3, [sp, #4]
    9442:	9a00      	ldr	r2, [sp, #0]
    9444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    9448:	4a06      	ldr	r2, [pc, #24]	; (9464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    944a:	9b01      	ldr	r3, [sp, #4]
    944c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9450:	1c5a      	adds	r2, r3, #1
    9452:	4904      	ldr	r1, [pc, #16]	; (9464 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    9454:	9b01      	ldr	r3, [sp, #4]
    9456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    945a:	bf00      	nop
    945c:	b003      	add	sp, #12
    945e:	f85d fb04 	ldr.w	pc, [sp], #4
    9462:	bf00      	nop
    9464:	1fff8e28 	.word	0x1fff8e28
    9468:	1fff8e24 	.word	0x1fff8e24

0000946c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    946c:	b500      	push	{lr}
    946e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9470:	f7f7 fbc8 	bl	c04 <Sys_GetCoreID>
    9474:	4603      	mov	r3, r0
    9476:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    9478:	4a0d      	ldr	r2, [pc, #52]	; (94b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    947a:	9b01      	ldr	r3, [sp, #4]
    947c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9480:	1e5a      	subs	r2, r3, #1
    9482:	490b      	ldr	r1, [pc, #44]	; (94b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    9484:	9b01      	ldr	r3, [sp, #4]
    9486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    948a:	4a0a      	ldr	r2, [pc, #40]	; (94b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    948c:	9b01      	ldr	r3, [sp, #4]
    948e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9492:	f003 0301 	and.w	r3, r3, #1
    9496:	2b00      	cmp	r3, #0
    9498:	d106      	bne.n	94a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    949a:	4a05      	ldr	r2, [pc, #20]	; (94b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    949c:	9b01      	ldr	r3, [sp, #4]
    949e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94a2:	2b00      	cmp	r3, #0
    94a4:	d100      	bne.n	94a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    94a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    94a8:	bf00      	nop
    94aa:	b003      	add	sp, #12
    94ac:	f85d fb04 	ldr.w	pc, [sp], #4
    94b0:	1fff8e28 	.word	0x1fff8e28
    94b4:	1fff8e24 	.word	0x1fff8e24

000094b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    94b8:	b500      	push	{lr}
    94ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    94bc:	f7f7 fba2 	bl	c04 <Sys_GetCoreID>
    94c0:	4603      	mov	r3, r0
    94c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    94c4:	4a10      	ldr	r2, [pc, #64]	; (9508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    94c6:	9b01      	ldr	r3, [sp, #4]
    94c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94cc:	2b00      	cmp	r3, #0
    94ce:	d10d      	bne.n	94ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    94d0:	f7f7 fabf 	bl	a52 <Port_schm_read_msr>
    94d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    94d6:	9b00      	ldr	r3, [sp, #0]
    94d8:	f003 0301 	and.w	r3, r3, #1
    94dc:	2b00      	cmp	r3, #0
    94de:	d100      	bne.n	94e2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    94e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    94e2:	490a      	ldr	r1, [pc, #40]	; (950c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    94e4:	9b01      	ldr	r3, [sp, #4]
    94e6:	9a00      	ldr	r2, [sp, #0]
    94e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    94ec:	4a06      	ldr	r2, [pc, #24]	; (9508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    94ee:	9b01      	ldr	r3, [sp, #4]
    94f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94f4:	1c5a      	adds	r2, r3, #1
    94f6:	4904      	ldr	r1, [pc, #16]	; (9508 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    94f8:	9b01      	ldr	r3, [sp, #4]
    94fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    94fe:	bf00      	nop
    9500:	b003      	add	sp, #12
    9502:	f85d fb04 	ldr.w	pc, [sp], #4
    9506:	bf00      	nop
    9508:	1fff8e30 	.word	0x1fff8e30
    950c:	1fff8e2c 	.word	0x1fff8e2c

00009510 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    9510:	b500      	push	{lr}
    9512:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9514:	f7f7 fb76 	bl	c04 <Sys_GetCoreID>
    9518:	4603      	mov	r3, r0
    951a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    951c:	4a0d      	ldr	r2, [pc, #52]	; (9554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    951e:	9b01      	ldr	r3, [sp, #4]
    9520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9524:	1e5a      	subs	r2, r3, #1
    9526:	490b      	ldr	r1, [pc, #44]	; (9554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9528:	9b01      	ldr	r3, [sp, #4]
    952a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    952e:	4a0a      	ldr	r2, [pc, #40]	; (9558 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    9530:	9b01      	ldr	r3, [sp, #4]
    9532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9536:	f003 0301 	and.w	r3, r3, #1
    953a:	2b00      	cmp	r3, #0
    953c:	d106      	bne.n	954c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    953e:	4a05      	ldr	r2, [pc, #20]	; (9554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    9540:	9b01      	ldr	r3, [sp, #4]
    9542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9546:	2b00      	cmp	r3, #0
    9548:	d100      	bne.n	954c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    954a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    954c:	bf00      	nop
    954e:	b003      	add	sp, #12
    9550:	f85d fb04 	ldr.w	pc, [sp], #4
    9554:	1fff8e30 	.word	0x1fff8e30
    9558:	1fff8e2c 	.word	0x1fff8e2c

0000955c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    955c:	b500      	push	{lr}
    955e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9560:	f7f7 fb50 	bl	c04 <Sys_GetCoreID>
    9564:	4603      	mov	r3, r0
    9566:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    9568:	4a10      	ldr	r2, [pc, #64]	; (95ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    956a:	9b01      	ldr	r3, [sp, #4]
    956c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9570:	2b00      	cmp	r3, #0
    9572:	d10d      	bne.n	9590 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9574:	f7f7 fa6d 	bl	a52 <Port_schm_read_msr>
    9578:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    957a:	9b00      	ldr	r3, [sp, #0]
    957c:	f003 0301 	and.w	r3, r3, #1
    9580:	2b00      	cmp	r3, #0
    9582:	d100      	bne.n	9586 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9584:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    9586:	490a      	ldr	r1, [pc, #40]	; (95b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    9588:	9b01      	ldr	r3, [sp, #4]
    958a:	9a00      	ldr	r2, [sp, #0]
    958c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    9590:	4a06      	ldr	r2, [pc, #24]	; (95ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    9592:	9b01      	ldr	r3, [sp, #4]
    9594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9598:	1c5a      	adds	r2, r3, #1
    959a:	4904      	ldr	r1, [pc, #16]	; (95ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    959c:	9b01      	ldr	r3, [sp, #4]
    959e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    95a2:	bf00      	nop
    95a4:	b003      	add	sp, #12
    95a6:	f85d fb04 	ldr.w	pc, [sp], #4
    95aa:	bf00      	nop
    95ac:	1fff8e38 	.word	0x1fff8e38
    95b0:	1fff8e34 	.word	0x1fff8e34

000095b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    95b4:	b500      	push	{lr}
    95b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    95b8:	f7f7 fb24 	bl	c04 <Sys_GetCoreID>
    95bc:	4603      	mov	r3, r0
    95be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    95c0:	4a0d      	ldr	r2, [pc, #52]	; (95f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    95c2:	9b01      	ldr	r3, [sp, #4]
    95c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95c8:	1e5a      	subs	r2, r3, #1
    95ca:	490b      	ldr	r1, [pc, #44]	; (95f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    95cc:	9b01      	ldr	r3, [sp, #4]
    95ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    95d2:	4a0a      	ldr	r2, [pc, #40]	; (95fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    95d4:	9b01      	ldr	r3, [sp, #4]
    95d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95da:	f003 0301 	and.w	r3, r3, #1
    95de:	2b00      	cmp	r3, #0
    95e0:	d106      	bne.n	95f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    95e2:	4a05      	ldr	r2, [pc, #20]	; (95f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    95e4:	9b01      	ldr	r3, [sp, #4]
    95e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95ea:	2b00      	cmp	r3, #0
    95ec:	d100      	bne.n	95f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    95ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    95f0:	bf00      	nop
    95f2:	b003      	add	sp, #12
    95f4:	f85d fb04 	ldr.w	pc, [sp], #4
    95f8:	1fff8e38 	.word	0x1fff8e38
    95fc:	1fff8e34 	.word	0x1fff8e34

00009600 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    9600:	b500      	push	{lr}
    9602:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9604:	f7f7 fafe 	bl	c04 <Sys_GetCoreID>
    9608:	4603      	mov	r3, r0
    960a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    960c:	4a10      	ldr	r2, [pc, #64]	; (9650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    960e:	9b01      	ldr	r3, [sp, #4]
    9610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9614:	2b00      	cmp	r3, #0
    9616:	d10d      	bne.n	9634 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9618:	f7f7 fa1b 	bl	a52 <Port_schm_read_msr>
    961c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    961e:	9b00      	ldr	r3, [sp, #0]
    9620:	f003 0301 	and.w	r3, r3, #1
    9624:	2b00      	cmp	r3, #0
    9626:	d100      	bne.n	962a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9628:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    962a:	490a      	ldr	r1, [pc, #40]	; (9654 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    962c:	9b01      	ldr	r3, [sp, #4]
    962e:	9a00      	ldr	r2, [sp, #0]
    9630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    9634:	4a06      	ldr	r2, [pc, #24]	; (9650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9636:	9b01      	ldr	r3, [sp, #4]
    9638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    963c:	1c5a      	adds	r2, r3, #1
    963e:	4904      	ldr	r1, [pc, #16]	; (9650 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    9640:	9b01      	ldr	r3, [sp, #4]
    9642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9646:	bf00      	nop
    9648:	b003      	add	sp, #12
    964a:	f85d fb04 	ldr.w	pc, [sp], #4
    964e:	bf00      	nop
    9650:	1fff8e40 	.word	0x1fff8e40
    9654:	1fff8e3c 	.word	0x1fff8e3c

00009658 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    9658:	b500      	push	{lr}
    965a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    965c:	f7f7 fad2 	bl	c04 <Sys_GetCoreID>
    9660:	4603      	mov	r3, r0
    9662:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    9664:	4a0d      	ldr	r2, [pc, #52]	; (969c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9666:	9b01      	ldr	r3, [sp, #4]
    9668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    966c:	1e5a      	subs	r2, r3, #1
    966e:	490b      	ldr	r1, [pc, #44]	; (969c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9670:	9b01      	ldr	r3, [sp, #4]
    9672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    9676:	4a0a      	ldr	r2, [pc, #40]	; (96a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    9678:	9b01      	ldr	r3, [sp, #4]
    967a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    967e:	f003 0301 	and.w	r3, r3, #1
    9682:	2b00      	cmp	r3, #0
    9684:	d106      	bne.n	9694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    9686:	4a05      	ldr	r2, [pc, #20]	; (969c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    9688:	9b01      	ldr	r3, [sp, #4]
    968a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    968e:	2b00      	cmp	r3, #0
    9690:	d100      	bne.n	9694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9692:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9694:	bf00      	nop
    9696:	b003      	add	sp, #12
    9698:	f85d fb04 	ldr.w	pc, [sp], #4
    969c:	1fff8e40 	.word	0x1fff8e40
    96a0:	1fff8e3c 	.word	0x1fff8e3c

000096a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    96a4:	b500      	push	{lr}
    96a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    96a8:	f7f7 faac 	bl	c04 <Sys_GetCoreID>
    96ac:	4603      	mov	r3, r0
    96ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    96b0:	4a10      	ldr	r2, [pc, #64]	; (96f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    96b2:	9b01      	ldr	r3, [sp, #4]
    96b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96b8:	2b00      	cmp	r3, #0
    96ba:	d10d      	bne.n	96d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    96bc:	f7f7 f9c9 	bl	a52 <Port_schm_read_msr>
    96c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    96c2:	9b00      	ldr	r3, [sp, #0]
    96c4:	f003 0301 	and.w	r3, r3, #1
    96c8:	2b00      	cmp	r3, #0
    96ca:	d100      	bne.n	96ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    96cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    96ce:	490a      	ldr	r1, [pc, #40]	; (96f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    96d0:	9b01      	ldr	r3, [sp, #4]
    96d2:	9a00      	ldr	r2, [sp, #0]
    96d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    96d8:	4a06      	ldr	r2, [pc, #24]	; (96f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    96da:	9b01      	ldr	r3, [sp, #4]
    96dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96e0:	1c5a      	adds	r2, r3, #1
    96e2:	4904      	ldr	r1, [pc, #16]	; (96f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    96e4:	9b01      	ldr	r3, [sp, #4]
    96e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    96ea:	bf00      	nop
    96ec:	b003      	add	sp, #12
    96ee:	f85d fb04 	ldr.w	pc, [sp], #4
    96f2:	bf00      	nop
    96f4:	1fff8e48 	.word	0x1fff8e48
    96f8:	1fff8e44 	.word	0x1fff8e44

000096fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    96fc:	b500      	push	{lr}
    96fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9700:	f7f7 fa80 	bl	c04 <Sys_GetCoreID>
    9704:	4603      	mov	r3, r0
    9706:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    9708:	4a0d      	ldr	r2, [pc, #52]	; (9740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    970a:	9b01      	ldr	r3, [sp, #4]
    970c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9710:	1e5a      	subs	r2, r3, #1
    9712:	490b      	ldr	r1, [pc, #44]	; (9740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    9714:	9b01      	ldr	r3, [sp, #4]
    9716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    971a:	4a0a      	ldr	r2, [pc, #40]	; (9744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    971c:	9b01      	ldr	r3, [sp, #4]
    971e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9722:	f003 0301 	and.w	r3, r3, #1
    9726:	2b00      	cmp	r3, #0
    9728:	d106      	bne.n	9738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    972a:	4a05      	ldr	r2, [pc, #20]	; (9740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    972c:	9b01      	ldr	r3, [sp, #4]
    972e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9732:	2b00      	cmp	r3, #0
    9734:	d100      	bne.n	9738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9736:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9738:	bf00      	nop
    973a:	b003      	add	sp, #12
    973c:	f85d fb04 	ldr.w	pc, [sp], #4
    9740:	1fff8e48 	.word	0x1fff8e48
    9744:	1fff8e44 	.word	0x1fff8e44

00009748 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    9748:	b500      	push	{lr}
    974a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    974c:	f7f7 fa5a 	bl	c04 <Sys_GetCoreID>
    9750:	4603      	mov	r3, r0
    9752:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    9754:	4a10      	ldr	r2, [pc, #64]	; (9798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9756:	9b01      	ldr	r3, [sp, #4]
    9758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    975c:	2b00      	cmp	r3, #0
    975e:	d10d      	bne.n	977c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9760:	f7f7 f977 	bl	a52 <Port_schm_read_msr>
    9764:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9766:	9b00      	ldr	r3, [sp, #0]
    9768:	f003 0301 	and.w	r3, r3, #1
    976c:	2b00      	cmp	r3, #0
    976e:	d100      	bne.n	9772 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9770:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    9772:	490a      	ldr	r1, [pc, #40]	; (979c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    9774:	9b01      	ldr	r3, [sp, #4]
    9776:	9a00      	ldr	r2, [sp, #0]
    9778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    977c:	4a06      	ldr	r2, [pc, #24]	; (9798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    977e:	9b01      	ldr	r3, [sp, #4]
    9780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9784:	1c5a      	adds	r2, r3, #1
    9786:	4904      	ldr	r1, [pc, #16]	; (9798 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    9788:	9b01      	ldr	r3, [sp, #4]
    978a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    978e:	bf00      	nop
    9790:	b003      	add	sp, #12
    9792:	f85d fb04 	ldr.w	pc, [sp], #4
    9796:	bf00      	nop
    9798:	1fff8e50 	.word	0x1fff8e50
    979c:	1fff8e4c 	.word	0x1fff8e4c

000097a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    97a0:	b500      	push	{lr}
    97a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    97a4:	f7f7 fa2e 	bl	c04 <Sys_GetCoreID>
    97a8:	4603      	mov	r3, r0
    97aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    97ac:	4a0d      	ldr	r2, [pc, #52]	; (97e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    97ae:	9b01      	ldr	r3, [sp, #4]
    97b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97b4:	1e5a      	subs	r2, r3, #1
    97b6:	490b      	ldr	r1, [pc, #44]	; (97e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    97b8:	9b01      	ldr	r3, [sp, #4]
    97ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    97be:	4a0a      	ldr	r2, [pc, #40]	; (97e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    97c0:	9b01      	ldr	r3, [sp, #4]
    97c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97c6:	f003 0301 	and.w	r3, r3, #1
    97ca:	2b00      	cmp	r3, #0
    97cc:	d106      	bne.n	97dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    97ce:	4a05      	ldr	r2, [pc, #20]	; (97e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    97d0:	9b01      	ldr	r3, [sp, #4]
    97d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97d6:	2b00      	cmp	r3, #0
    97d8:	d100      	bne.n	97dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    97da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    97dc:	bf00      	nop
    97de:	b003      	add	sp, #12
    97e0:	f85d fb04 	ldr.w	pc, [sp], #4
    97e4:	1fff8e50 	.word	0x1fff8e50
    97e8:	1fff8e4c 	.word	0x1fff8e4c

000097ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    97ec:	b500      	push	{lr}
    97ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    97f0:	f7f7 fa08 	bl	c04 <Sys_GetCoreID>
    97f4:	4603      	mov	r3, r0
    97f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    97f8:	4a10      	ldr	r2, [pc, #64]	; (983c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    97fa:	9b01      	ldr	r3, [sp, #4]
    97fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9800:	2b00      	cmp	r3, #0
    9802:	d10d      	bne.n	9820 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9804:	f7f7 f925 	bl	a52 <Port_schm_read_msr>
    9808:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    980a:	9b00      	ldr	r3, [sp, #0]
    980c:	f003 0301 	and.w	r3, r3, #1
    9810:	2b00      	cmp	r3, #0
    9812:	d100      	bne.n	9816 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9814:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    9816:	490a      	ldr	r1, [pc, #40]	; (9840 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    9818:	9b01      	ldr	r3, [sp, #4]
    981a:	9a00      	ldr	r2, [sp, #0]
    981c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    9820:	4a06      	ldr	r2, [pc, #24]	; (983c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    9822:	9b01      	ldr	r3, [sp, #4]
    9824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9828:	1c5a      	adds	r2, r3, #1
    982a:	4904      	ldr	r1, [pc, #16]	; (983c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    982c:	9b01      	ldr	r3, [sp, #4]
    982e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9832:	bf00      	nop
    9834:	b003      	add	sp, #12
    9836:	f85d fb04 	ldr.w	pc, [sp], #4
    983a:	bf00      	nop
    983c:	1fff8e58 	.word	0x1fff8e58
    9840:	1fff8e54 	.word	0x1fff8e54

00009844 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    9844:	b500      	push	{lr}
    9846:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9848:	f7f7 f9dc 	bl	c04 <Sys_GetCoreID>
    984c:	4603      	mov	r3, r0
    984e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    9850:	4a0d      	ldr	r2, [pc, #52]	; (9888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9852:	9b01      	ldr	r3, [sp, #4]
    9854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9858:	1e5a      	subs	r2, r3, #1
    985a:	490b      	ldr	r1, [pc, #44]	; (9888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    985c:	9b01      	ldr	r3, [sp, #4]
    985e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    9862:	4a0a      	ldr	r2, [pc, #40]	; (988c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    9864:	9b01      	ldr	r3, [sp, #4]
    9866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    986a:	f003 0301 	and.w	r3, r3, #1
    986e:	2b00      	cmp	r3, #0
    9870:	d106      	bne.n	9880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    9872:	4a05      	ldr	r2, [pc, #20]	; (9888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    9874:	9b01      	ldr	r3, [sp, #4]
    9876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    987a:	2b00      	cmp	r3, #0
    987c:	d100      	bne.n	9880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    987e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9880:	bf00      	nop
    9882:	b003      	add	sp, #12
    9884:	f85d fb04 	ldr.w	pc, [sp], #4
    9888:	1fff8e58 	.word	0x1fff8e58
    988c:	1fff8e54 	.word	0x1fff8e54

00009890 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    9890:	b500      	push	{lr}
    9892:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9894:	f7f7 f9b6 	bl	c04 <Sys_GetCoreID>
    9898:	4603      	mov	r3, r0
    989a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    989c:	4a10      	ldr	r2, [pc, #64]	; (98e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    989e:	9b01      	ldr	r3, [sp, #4]
    98a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98a4:	2b00      	cmp	r3, #0
    98a6:	d10d      	bne.n	98c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    98a8:	f7f7 f8d3 	bl	a52 <Port_schm_read_msr>
    98ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    98ae:	9b00      	ldr	r3, [sp, #0]
    98b0:	f003 0301 	and.w	r3, r3, #1
    98b4:	2b00      	cmp	r3, #0
    98b6:	d100      	bne.n	98ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    98b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    98ba:	490a      	ldr	r1, [pc, #40]	; (98e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    98bc:	9b01      	ldr	r3, [sp, #4]
    98be:	9a00      	ldr	r2, [sp, #0]
    98c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    98c4:	4a06      	ldr	r2, [pc, #24]	; (98e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    98c6:	9b01      	ldr	r3, [sp, #4]
    98c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98cc:	1c5a      	adds	r2, r3, #1
    98ce:	4904      	ldr	r1, [pc, #16]	; (98e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    98d0:	9b01      	ldr	r3, [sp, #4]
    98d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    98d6:	bf00      	nop
    98d8:	b003      	add	sp, #12
    98da:	f85d fb04 	ldr.w	pc, [sp], #4
    98de:	bf00      	nop
    98e0:	1fff8e60 	.word	0x1fff8e60
    98e4:	1fff8e5c 	.word	0x1fff8e5c

000098e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    98e8:	b500      	push	{lr}
    98ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    98ec:	f7f7 f98a 	bl	c04 <Sys_GetCoreID>
    98f0:	4603      	mov	r3, r0
    98f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    98f4:	4a0d      	ldr	r2, [pc, #52]	; (992c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    98f6:	9b01      	ldr	r3, [sp, #4]
    98f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98fc:	1e5a      	subs	r2, r3, #1
    98fe:	490b      	ldr	r1, [pc, #44]	; (992c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9900:	9b01      	ldr	r3, [sp, #4]
    9902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    9906:	4a0a      	ldr	r2, [pc, #40]	; (9930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    9908:	9b01      	ldr	r3, [sp, #4]
    990a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    990e:	f003 0301 	and.w	r3, r3, #1
    9912:	2b00      	cmp	r3, #0
    9914:	d106      	bne.n	9924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    9916:	4a05      	ldr	r2, [pc, #20]	; (992c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    9918:	9b01      	ldr	r3, [sp, #4]
    991a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    991e:	2b00      	cmp	r3, #0
    9920:	d100      	bne.n	9924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9922:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9924:	bf00      	nop
    9926:	b003      	add	sp, #12
    9928:	f85d fb04 	ldr.w	pc, [sp], #4
    992c:	1fff8e60 	.word	0x1fff8e60
    9930:	1fff8e5c 	.word	0x1fff8e5c

00009934 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
    9934:	b500      	push	{lr}
    9936:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9938:	f7f7 f964 	bl	c04 <Sys_GetCoreID>
    993c:	4603      	mov	r3, r0
    993e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId])
    9940:	4a10      	ldr	r2, [pc, #64]	; (9984 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
    9942:	9b01      	ldr	r3, [sp, #4]
    9944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9948:	2b00      	cmp	r3, #0
    994a:	d10d      	bne.n	9968 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    994c:	f7f7 f88a 	bl	a64 <Spi_schm_read_msr>
    9950:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9952:	9b00      	ldr	r3, [sp, #0]
    9954:	f003 0301 	and.w	r3, r3, #1
    9958:	2b00      	cmp	r3, #0
    995a:	d100      	bne.n	995e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    995c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    995e:	490a      	ldr	r1, [pc, #40]	; (9988 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x54>)
    9960:	9b01      	ldr	r3, [sp, #4]
    9962:	9a00      	ldr	r2, [sp, #0]
    9964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]++;
    9968:	4a06      	ldr	r2, [pc, #24]	; (9984 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
    996a:	9b01      	ldr	r3, [sp, #4]
    996c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9970:	1c5a      	adds	r2, r3, #1
    9972:	4904      	ldr	r1, [pc, #16]	; (9984 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_00+0x50>)
    9974:	9b01      	ldr	r3, [sp, #4]
    9976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    997a:	bf00      	nop
    997c:	b003      	add	sp, #12
    997e:	f85d fb04 	ldr.w	pc, [sp], #4
    9982:	bf00      	nop
    9984:	1fff8e68 	.word	0x1fff8e68
    9988:	1fff8e64 	.word	0x1fff8e64

0000998c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00(void)
{
    998c:	b500      	push	{lr}
    998e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9990:	f7f7 f938 	bl	c04 <Sys_GetCoreID>
    9994:	4603      	mov	r3, r0
    9996:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]--;
    9998:	4a0d      	ldr	r2, [pc, #52]	; (99d0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
    999a:	9b01      	ldr	r3, [sp, #4]
    999c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99a0:	1e5a      	subs	r2, r3, #1
    99a2:	490b      	ldr	r1, [pc, #44]	; (99d0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
    99a4:	9b01      	ldr	r3, [sp, #4]
    99a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    99aa:	4a0a      	ldr	r2, [pc, #40]	; (99d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x48>)
    99ac:	9b01      	ldr	r3, [sp, #4]
    99ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99b2:	f003 0301 	and.w	r3, r3, #1
    99b6:	2b00      	cmp	r3, #0
    99b8:	d106      	bne.n	99c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
    99ba:	4a05      	ldr	r2, [pc, #20]	; (99d0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x44>)
    99bc:	9b01      	ldr	r3, [sp, #4]
    99be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99c2:	2b00      	cmp	r3, #0
    99c4:	d100      	bne.n	99c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    99c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    99c8:	bf00      	nop
    99ca:	b003      	add	sp, #12
    99cc:	f85d fb04 	ldr.w	pc, [sp], #4
    99d0:	1fff8e68 	.word	0x1fff8e68
    99d4:	1fff8e64 	.word	0x1fff8e64

000099d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
    99d8:	b500      	push	{lr}
    99da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    99dc:	f7f7 f912 	bl	c04 <Sys_GetCoreID>
    99e0:	4603      	mov	r3, r0
    99e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId])
    99e4:	4a10      	ldr	r2, [pc, #64]	; (9a28 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
    99e6:	9b01      	ldr	r3, [sp, #4]
    99e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ec:	2b00      	cmp	r3, #0
    99ee:	d10d      	bne.n	9a0c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    99f0:	f7f7 f838 	bl	a64 <Spi_schm_read_msr>
    99f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    99f6:	9b00      	ldr	r3, [sp, #0]
    99f8:	f003 0301 	and.w	r3, r3, #1
    99fc:	2b00      	cmp	r3, #0
    99fe:	d100      	bne.n	9a02 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9a00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    9a02:	490a      	ldr	r1, [pc, #40]	; (9a2c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x54>)
    9a04:	9b01      	ldr	r3, [sp, #4]
    9a06:	9a00      	ldr	r2, [sp, #0]
    9a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]++;
    9a0c:	4a06      	ldr	r2, [pc, #24]	; (9a28 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
    9a0e:	9b01      	ldr	r3, [sp, #4]
    9a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a14:	1c5a      	adds	r2, r3, #1
    9a16:	4904      	ldr	r1, [pc, #16]	; (9a28 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_01+0x50>)
    9a18:	9b01      	ldr	r3, [sp, #4]
    9a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9a1e:	bf00      	nop
    9a20:	b003      	add	sp, #12
    9a22:	f85d fb04 	ldr.w	pc, [sp], #4
    9a26:	bf00      	nop
    9a28:	1fff8e70 	.word	0x1fff8e70
    9a2c:	1fff8e6c 	.word	0x1fff8e6c

00009a30 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01(void)
{
    9a30:	b500      	push	{lr}
    9a32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a34:	f7f7 f8e6 	bl	c04 <Sys_GetCoreID>
    9a38:	4603      	mov	r3, r0
    9a3a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]--;
    9a3c:	4a0d      	ldr	r2, [pc, #52]	; (9a74 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
    9a3e:	9b01      	ldr	r3, [sp, #4]
    9a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a44:	1e5a      	subs	r2, r3, #1
    9a46:	490b      	ldr	r1, [pc, #44]	; (9a74 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
    9a48:	9b01      	ldr	r3, [sp, #4]
    9a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    9a4e:	4a0a      	ldr	r2, [pc, #40]	; (9a78 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x48>)
    9a50:	9b01      	ldr	r3, [sp, #4]
    9a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a56:	f003 0301 	and.w	r3, r3, #1
    9a5a:	2b00      	cmp	r3, #0
    9a5c:	d106      	bne.n	9a6c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
    9a5e:	4a05      	ldr	r2, [pc, #20]	; (9a74 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x44>)
    9a60:	9b01      	ldr	r3, [sp, #4]
    9a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a66:	2b00      	cmp	r3, #0
    9a68:	d100      	bne.n	9a6c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9a6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9a6c:	bf00      	nop
    9a6e:	b003      	add	sp, #12
    9a70:	f85d fb04 	ldr.w	pc, [sp], #4
    9a74:	1fff8e70 	.word	0x1fff8e70
    9a78:	1fff8e6c 	.word	0x1fff8e6c

00009a7c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
    9a7c:	b500      	push	{lr}
    9a7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9a80:	f7f7 f8c0 	bl	c04 <Sys_GetCoreID>
    9a84:	4603      	mov	r3, r0
    9a86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId])
    9a88:	4a10      	ldr	r2, [pc, #64]	; (9acc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
    9a8a:	9b01      	ldr	r3, [sp, #4]
    9a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a90:	2b00      	cmp	r3, #0
    9a92:	d10d      	bne.n	9ab0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9a94:	f7f6 ffe6 	bl	a64 <Spi_schm_read_msr>
    9a98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9a9a:	9b00      	ldr	r3, [sp, #0]
    9a9c:	f003 0301 	and.w	r3, r3, #1
    9aa0:	2b00      	cmp	r3, #0
    9aa2:	d100      	bne.n	9aa6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9aa4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    9aa6:	490a      	ldr	r1, [pc, #40]	; (9ad0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x54>)
    9aa8:	9b01      	ldr	r3, [sp, #4]
    9aaa:	9a00      	ldr	r2, [sp, #0]
    9aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]++;
    9ab0:	4a06      	ldr	r2, [pc, #24]	; (9acc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
    9ab2:	9b01      	ldr	r3, [sp, #4]
    9ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ab8:	1c5a      	adds	r2, r3, #1
    9aba:	4904      	ldr	r1, [pc, #16]	; (9acc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_02+0x50>)
    9abc:	9b01      	ldr	r3, [sp, #4]
    9abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9ac2:	bf00      	nop
    9ac4:	b003      	add	sp, #12
    9ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    9aca:	bf00      	nop
    9acc:	1fff8e78 	.word	0x1fff8e78
    9ad0:	1fff8e74 	.word	0x1fff8e74

00009ad4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02(void)
{
    9ad4:	b500      	push	{lr}
    9ad6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ad8:	f7f7 f894 	bl	c04 <Sys_GetCoreID>
    9adc:	4603      	mov	r3, r0
    9ade:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]--;
    9ae0:	4a0d      	ldr	r2, [pc, #52]	; (9b18 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
    9ae2:	9b01      	ldr	r3, [sp, #4]
    9ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ae8:	1e5a      	subs	r2, r3, #1
    9aea:	490b      	ldr	r1, [pc, #44]	; (9b18 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
    9aec:	9b01      	ldr	r3, [sp, #4]
    9aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    9af2:	4a0a      	ldr	r2, [pc, #40]	; (9b1c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x48>)
    9af4:	9b01      	ldr	r3, [sp, #4]
    9af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9afa:	f003 0301 	and.w	r3, r3, #1
    9afe:	2b00      	cmp	r3, #0
    9b00:	d106      	bne.n	9b10 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
    9b02:	4a05      	ldr	r2, [pc, #20]	; (9b18 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x44>)
    9b04:	9b01      	ldr	r3, [sp, #4]
    9b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b0a:	2b00      	cmp	r3, #0
    9b0c:	d100      	bne.n	9b10 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9b0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9b10:	bf00      	nop
    9b12:	b003      	add	sp, #12
    9b14:	f85d fb04 	ldr.w	pc, [sp], #4
    9b18:	1fff8e78 	.word	0x1fff8e78
    9b1c:	1fff8e74 	.word	0x1fff8e74

00009b20 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
    9b20:	b500      	push	{lr}
    9b22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b24:	f7f7 f86e 	bl	c04 <Sys_GetCoreID>
    9b28:	4603      	mov	r3, r0
    9b2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId])
    9b2c:	4a10      	ldr	r2, [pc, #64]	; (9b70 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
    9b2e:	9b01      	ldr	r3, [sp, #4]
    9b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b34:	2b00      	cmp	r3, #0
    9b36:	d10d      	bne.n	9b54 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9b38:	f7f6 ff94 	bl	a64 <Spi_schm_read_msr>
    9b3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9b3e:	9b00      	ldr	r3, [sp, #0]
    9b40:	f003 0301 	and.w	r3, r3, #1
    9b44:	2b00      	cmp	r3, #0
    9b46:	d100      	bne.n	9b4a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9b48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    9b4a:	490a      	ldr	r1, [pc, #40]	; (9b74 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x54>)
    9b4c:	9b01      	ldr	r3, [sp, #4]
    9b4e:	9a00      	ldr	r2, [sp, #0]
    9b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]++;
    9b54:	4a06      	ldr	r2, [pc, #24]	; (9b70 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
    9b56:	9b01      	ldr	r3, [sp, #4]
    9b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b5c:	1c5a      	adds	r2, r3, #1
    9b5e:	4904      	ldr	r1, [pc, #16]	; (9b70 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_03+0x50>)
    9b60:	9b01      	ldr	r3, [sp, #4]
    9b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9b66:	bf00      	nop
    9b68:	b003      	add	sp, #12
    9b6a:	f85d fb04 	ldr.w	pc, [sp], #4
    9b6e:	bf00      	nop
    9b70:	1fff8e80 	.word	0x1fff8e80
    9b74:	1fff8e7c 	.word	0x1fff8e7c

00009b78 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03(void)
{
    9b78:	b500      	push	{lr}
    9b7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9b7c:	f7f7 f842 	bl	c04 <Sys_GetCoreID>
    9b80:	4603      	mov	r3, r0
    9b82:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]--;
    9b84:	4a0d      	ldr	r2, [pc, #52]	; (9bbc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
    9b86:	9b01      	ldr	r3, [sp, #4]
    9b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b8c:	1e5a      	subs	r2, r3, #1
    9b8e:	490b      	ldr	r1, [pc, #44]	; (9bbc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
    9b90:	9b01      	ldr	r3, [sp, #4]
    9b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    9b96:	4a0a      	ldr	r2, [pc, #40]	; (9bc0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x48>)
    9b98:	9b01      	ldr	r3, [sp, #4]
    9b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b9e:	f003 0301 	and.w	r3, r3, #1
    9ba2:	2b00      	cmp	r3, #0
    9ba4:	d106      	bne.n	9bb4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
    9ba6:	4a05      	ldr	r2, [pc, #20]	; (9bbc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x44>)
    9ba8:	9b01      	ldr	r3, [sp, #4]
    9baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bae:	2b00      	cmp	r3, #0
    9bb0:	d100      	bne.n	9bb4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9bb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9bb4:	bf00      	nop
    9bb6:	b003      	add	sp, #12
    9bb8:	f85d fb04 	ldr.w	pc, [sp], #4
    9bbc:	1fff8e80 	.word	0x1fff8e80
    9bc0:	1fff8e7c 	.word	0x1fff8e7c

00009bc4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
    9bc4:	b500      	push	{lr}
    9bc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9bc8:	f7f7 f81c 	bl	c04 <Sys_GetCoreID>
    9bcc:	4603      	mov	r3, r0
    9bce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId])
    9bd0:	4a10      	ldr	r2, [pc, #64]	; (9c14 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
    9bd2:	9b01      	ldr	r3, [sp, #4]
    9bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bd8:	2b00      	cmp	r3, #0
    9bda:	d10d      	bne.n	9bf8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9bdc:	f7f6 ff42 	bl	a64 <Spi_schm_read_msr>
    9be0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9be2:	9b00      	ldr	r3, [sp, #0]
    9be4:	f003 0301 	and.w	r3, r3, #1
    9be8:	2b00      	cmp	r3, #0
    9bea:	d100      	bne.n	9bee <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9bec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    9bee:	490a      	ldr	r1, [pc, #40]	; (9c18 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x54>)
    9bf0:	9b01      	ldr	r3, [sp, #4]
    9bf2:	9a00      	ldr	r2, [sp, #0]
    9bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]++;
    9bf8:	4a06      	ldr	r2, [pc, #24]	; (9c14 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
    9bfa:	9b01      	ldr	r3, [sp, #4]
    9bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c00:	1c5a      	adds	r2, r3, #1
    9c02:	4904      	ldr	r1, [pc, #16]	; (9c14 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_04+0x50>)
    9c04:	9b01      	ldr	r3, [sp, #4]
    9c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9c0a:	bf00      	nop
    9c0c:	b003      	add	sp, #12
    9c0e:	f85d fb04 	ldr.w	pc, [sp], #4
    9c12:	bf00      	nop
    9c14:	1fff8e88 	.word	0x1fff8e88
    9c18:	1fff8e84 	.word	0x1fff8e84

00009c1c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04(void)
{
    9c1c:	b500      	push	{lr}
    9c1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c20:	f7f6 fff0 	bl	c04 <Sys_GetCoreID>
    9c24:	4603      	mov	r3, r0
    9c26:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]--;
    9c28:	4a0d      	ldr	r2, [pc, #52]	; (9c60 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
    9c2a:	9b01      	ldr	r3, [sp, #4]
    9c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c30:	1e5a      	subs	r2, r3, #1
    9c32:	490b      	ldr	r1, [pc, #44]	; (9c60 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
    9c34:	9b01      	ldr	r3, [sp, #4]
    9c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    9c3a:	4a0a      	ldr	r2, [pc, #40]	; (9c64 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x48>)
    9c3c:	9b01      	ldr	r3, [sp, #4]
    9c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c42:	f003 0301 	and.w	r3, r3, #1
    9c46:	2b00      	cmp	r3, #0
    9c48:	d106      	bne.n	9c58 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
    9c4a:	4a05      	ldr	r2, [pc, #20]	; (9c60 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x44>)
    9c4c:	9b01      	ldr	r3, [sp, #4]
    9c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c52:	2b00      	cmp	r3, #0
    9c54:	d100      	bne.n	9c58 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9c56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9c58:	bf00      	nop
    9c5a:	b003      	add	sp, #12
    9c5c:	f85d fb04 	ldr.w	pc, [sp], #4
    9c60:	1fff8e88 	.word	0x1fff8e88
    9c64:	1fff8e84 	.word	0x1fff8e84

00009c68 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
    9c68:	b500      	push	{lr}
    9c6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9c6c:	f7f6 ffca 	bl	c04 <Sys_GetCoreID>
    9c70:	4603      	mov	r3, r0
    9c72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId])
    9c74:	4a10      	ldr	r2, [pc, #64]	; (9cb8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
    9c76:	9b01      	ldr	r3, [sp, #4]
    9c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c7c:	2b00      	cmp	r3, #0
    9c7e:	d10d      	bne.n	9c9c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9c80:	f7f6 fef0 	bl	a64 <Spi_schm_read_msr>
    9c84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9c86:	9b00      	ldr	r3, [sp, #0]
    9c88:	f003 0301 	and.w	r3, r3, #1
    9c8c:	2b00      	cmp	r3, #0
    9c8e:	d100      	bne.n	9c92 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9c90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    9c92:	490a      	ldr	r1, [pc, #40]	; (9cbc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x54>)
    9c94:	9b01      	ldr	r3, [sp, #4]
    9c96:	9a00      	ldr	r2, [sp, #0]
    9c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]++;
    9c9c:	4a06      	ldr	r2, [pc, #24]	; (9cb8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
    9c9e:	9b01      	ldr	r3, [sp, #4]
    9ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ca4:	1c5a      	adds	r2, r3, #1
    9ca6:	4904      	ldr	r1, [pc, #16]	; (9cb8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_05+0x50>)
    9ca8:	9b01      	ldr	r3, [sp, #4]
    9caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9cae:	bf00      	nop
    9cb0:	b003      	add	sp, #12
    9cb2:	f85d fb04 	ldr.w	pc, [sp], #4
    9cb6:	bf00      	nop
    9cb8:	1fff8e90 	.word	0x1fff8e90
    9cbc:	1fff8e8c 	.word	0x1fff8e8c

00009cc0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05(void)
{
    9cc0:	b500      	push	{lr}
    9cc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9cc4:	f7f6 ff9e 	bl	c04 <Sys_GetCoreID>
    9cc8:	4603      	mov	r3, r0
    9cca:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]--;
    9ccc:	4a0d      	ldr	r2, [pc, #52]	; (9d04 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
    9cce:	9b01      	ldr	r3, [sp, #4]
    9cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cd4:	1e5a      	subs	r2, r3, #1
    9cd6:	490b      	ldr	r1, [pc, #44]	; (9d04 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
    9cd8:	9b01      	ldr	r3, [sp, #4]
    9cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    9cde:	4a0a      	ldr	r2, [pc, #40]	; (9d08 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x48>)
    9ce0:	9b01      	ldr	r3, [sp, #4]
    9ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ce6:	f003 0301 	and.w	r3, r3, #1
    9cea:	2b00      	cmp	r3, #0
    9cec:	d106      	bne.n	9cfc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
    9cee:	4a05      	ldr	r2, [pc, #20]	; (9d04 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x44>)
    9cf0:	9b01      	ldr	r3, [sp, #4]
    9cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cf6:	2b00      	cmp	r3, #0
    9cf8:	d100      	bne.n	9cfc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9cfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9cfc:	bf00      	nop
    9cfe:	b003      	add	sp, #12
    9d00:	f85d fb04 	ldr.w	pc, [sp], #4
    9d04:	1fff8e90 	.word	0x1fff8e90
    9d08:	1fff8e8c 	.word	0x1fff8e8c

00009d0c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
    9d0c:	b500      	push	{lr}
    9d0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d10:	f7f6 ff78 	bl	c04 <Sys_GetCoreID>
    9d14:	4603      	mov	r3, r0
    9d16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId])
    9d18:	4a10      	ldr	r2, [pc, #64]	; (9d5c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
    9d1a:	9b01      	ldr	r3, [sp, #4]
    9d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d20:	2b00      	cmp	r3, #0
    9d22:	d10d      	bne.n	9d40 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9d24:	f7f6 fe9e 	bl	a64 <Spi_schm_read_msr>
    9d28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9d2a:	9b00      	ldr	r3, [sp, #0]
    9d2c:	f003 0301 	and.w	r3, r3, #1
    9d30:	2b00      	cmp	r3, #0
    9d32:	d100      	bne.n	9d36 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9d34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    9d36:	490a      	ldr	r1, [pc, #40]	; (9d60 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x54>)
    9d38:	9b01      	ldr	r3, [sp, #4]
    9d3a:	9a00      	ldr	r2, [sp, #0]
    9d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]++;
    9d40:	4a06      	ldr	r2, [pc, #24]	; (9d5c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
    9d42:	9b01      	ldr	r3, [sp, #4]
    9d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d48:	1c5a      	adds	r2, r3, #1
    9d4a:	4904      	ldr	r1, [pc, #16]	; (9d5c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_06+0x50>)
    9d4c:	9b01      	ldr	r3, [sp, #4]
    9d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9d52:	bf00      	nop
    9d54:	b003      	add	sp, #12
    9d56:	f85d fb04 	ldr.w	pc, [sp], #4
    9d5a:	bf00      	nop
    9d5c:	1fff8e98 	.word	0x1fff8e98
    9d60:	1fff8e94 	.word	0x1fff8e94

00009d64 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06(void)
{
    9d64:	b500      	push	{lr}
    9d66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9d68:	f7f6 ff4c 	bl	c04 <Sys_GetCoreID>
    9d6c:	4603      	mov	r3, r0
    9d6e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]--;
    9d70:	4a0d      	ldr	r2, [pc, #52]	; (9da8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
    9d72:	9b01      	ldr	r3, [sp, #4]
    9d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d78:	1e5a      	subs	r2, r3, #1
    9d7a:	490b      	ldr	r1, [pc, #44]	; (9da8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
    9d7c:	9b01      	ldr	r3, [sp, #4]
    9d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    9d82:	4a0a      	ldr	r2, [pc, #40]	; (9dac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x48>)
    9d84:	9b01      	ldr	r3, [sp, #4]
    9d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d8a:	f003 0301 	and.w	r3, r3, #1
    9d8e:	2b00      	cmp	r3, #0
    9d90:	d106      	bne.n	9da0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
    9d92:	4a05      	ldr	r2, [pc, #20]	; (9da8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x44>)
    9d94:	9b01      	ldr	r3, [sp, #4]
    9d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d9a:	2b00      	cmp	r3, #0
    9d9c:	d100      	bne.n	9da0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9d9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9da0:	bf00      	nop
    9da2:	b003      	add	sp, #12
    9da4:	f85d fb04 	ldr.w	pc, [sp], #4
    9da8:	1fff8e98 	.word	0x1fff8e98
    9dac:	1fff8e94 	.word	0x1fff8e94

00009db0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
    9db0:	b500      	push	{lr}
    9db2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9db4:	f7f6 ff26 	bl	c04 <Sys_GetCoreID>
    9db8:	4603      	mov	r3, r0
    9dba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId])
    9dbc:	4a10      	ldr	r2, [pc, #64]	; (9e00 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
    9dbe:	9b01      	ldr	r3, [sp, #4]
    9dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dc4:	2b00      	cmp	r3, #0
    9dc6:	d10d      	bne.n	9de4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9dc8:	f7f6 fe4c 	bl	a64 <Spi_schm_read_msr>
    9dcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9dce:	9b00      	ldr	r3, [sp, #0]
    9dd0:	f003 0301 	and.w	r3, r3, #1
    9dd4:	2b00      	cmp	r3, #0
    9dd6:	d100      	bne.n	9dda <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9dd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    9dda:	490a      	ldr	r1, [pc, #40]	; (9e04 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x54>)
    9ddc:	9b01      	ldr	r3, [sp, #4]
    9dde:	9a00      	ldr	r2, [sp, #0]
    9de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]++;
    9de4:	4a06      	ldr	r2, [pc, #24]	; (9e00 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
    9de6:	9b01      	ldr	r3, [sp, #4]
    9de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9dec:	1c5a      	adds	r2, r3, #1
    9dee:	4904      	ldr	r1, [pc, #16]	; (9e00 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_07+0x50>)
    9df0:	9b01      	ldr	r3, [sp, #4]
    9df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9df6:	bf00      	nop
    9df8:	b003      	add	sp, #12
    9dfa:	f85d fb04 	ldr.w	pc, [sp], #4
    9dfe:	bf00      	nop
    9e00:	1fff8ea0 	.word	0x1fff8ea0
    9e04:	1fff8e9c 	.word	0x1fff8e9c

00009e08 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07(void)
{
    9e08:	b500      	push	{lr}
    9e0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e0c:	f7f6 fefa 	bl	c04 <Sys_GetCoreID>
    9e10:	4603      	mov	r3, r0
    9e12:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]--;
    9e14:	4a0d      	ldr	r2, [pc, #52]	; (9e4c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
    9e16:	9b01      	ldr	r3, [sp, #4]
    9e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e1c:	1e5a      	subs	r2, r3, #1
    9e1e:	490b      	ldr	r1, [pc, #44]	; (9e4c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
    9e20:	9b01      	ldr	r3, [sp, #4]
    9e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    9e26:	4a0a      	ldr	r2, [pc, #40]	; (9e50 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x48>)
    9e28:	9b01      	ldr	r3, [sp, #4]
    9e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e2e:	f003 0301 	and.w	r3, r3, #1
    9e32:	2b00      	cmp	r3, #0
    9e34:	d106      	bne.n	9e44 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
    9e36:	4a05      	ldr	r2, [pc, #20]	; (9e4c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x44>)
    9e38:	9b01      	ldr	r3, [sp, #4]
    9e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e3e:	2b00      	cmp	r3, #0
    9e40:	d100      	bne.n	9e44 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9e42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9e44:	bf00      	nop
    9e46:	b003      	add	sp, #12
    9e48:	f85d fb04 	ldr.w	pc, [sp], #4
    9e4c:	1fff8ea0 	.word	0x1fff8ea0
    9e50:	1fff8e9c 	.word	0x1fff8e9c

00009e54 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
    9e54:	b500      	push	{lr}
    9e56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9e58:	f7f6 fed4 	bl	c04 <Sys_GetCoreID>
    9e5c:	4603      	mov	r3, r0
    9e5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId])
    9e60:	4a10      	ldr	r2, [pc, #64]	; (9ea4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
    9e62:	9b01      	ldr	r3, [sp, #4]
    9e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e68:	2b00      	cmp	r3, #0
    9e6a:	d10d      	bne.n	9e88 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9e6c:	f7f6 fdfa 	bl	a64 <Spi_schm_read_msr>
    9e70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9e72:	9b00      	ldr	r3, [sp, #0]
    9e74:	f003 0301 	and.w	r3, r3, #1
    9e78:	2b00      	cmp	r3, #0
    9e7a:	d100      	bne.n	9e7e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9e7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    9e7e:	490a      	ldr	r1, [pc, #40]	; (9ea8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x54>)
    9e80:	9b01      	ldr	r3, [sp, #4]
    9e82:	9a00      	ldr	r2, [sp, #0]
    9e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]++;
    9e88:	4a06      	ldr	r2, [pc, #24]	; (9ea4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
    9e8a:	9b01      	ldr	r3, [sp, #4]
    9e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e90:	1c5a      	adds	r2, r3, #1
    9e92:	4904      	ldr	r1, [pc, #16]	; (9ea4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_08+0x50>)
    9e94:	9b01      	ldr	r3, [sp, #4]
    9e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9e9a:	bf00      	nop
    9e9c:	b003      	add	sp, #12
    9e9e:	f85d fb04 	ldr.w	pc, [sp], #4
    9ea2:	bf00      	nop
    9ea4:	1fff8ea8 	.word	0x1fff8ea8
    9ea8:	1fff8ea4 	.word	0x1fff8ea4

00009eac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08(void)
{
    9eac:	b500      	push	{lr}
    9eae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9eb0:	f7f6 fea8 	bl	c04 <Sys_GetCoreID>
    9eb4:	4603      	mov	r3, r0
    9eb6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]--;
    9eb8:	4a0d      	ldr	r2, [pc, #52]	; (9ef0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
    9eba:	9b01      	ldr	r3, [sp, #4]
    9ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ec0:	1e5a      	subs	r2, r3, #1
    9ec2:	490b      	ldr	r1, [pc, #44]	; (9ef0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
    9ec4:	9b01      	ldr	r3, [sp, #4]
    9ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    9eca:	4a0a      	ldr	r2, [pc, #40]	; (9ef4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x48>)
    9ecc:	9b01      	ldr	r3, [sp, #4]
    9ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ed2:	f003 0301 	and.w	r3, r3, #1
    9ed6:	2b00      	cmp	r3, #0
    9ed8:	d106      	bne.n	9ee8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
    9eda:	4a05      	ldr	r2, [pc, #20]	; (9ef0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x44>)
    9edc:	9b01      	ldr	r3, [sp, #4]
    9ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ee2:	2b00      	cmp	r3, #0
    9ee4:	d100      	bne.n	9ee8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9ee6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9ee8:	bf00      	nop
    9eea:	b003      	add	sp, #12
    9eec:	f85d fb04 	ldr.w	pc, [sp], #4
    9ef0:	1fff8ea8 	.word	0x1fff8ea8
    9ef4:	1fff8ea4 	.word	0x1fff8ea4

00009ef8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
    9ef8:	b500      	push	{lr}
    9efa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9efc:	f7f6 fe82 	bl	c04 <Sys_GetCoreID>
    9f00:	4603      	mov	r3, r0
    9f02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId])
    9f04:	4a10      	ldr	r2, [pc, #64]	; (9f48 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
    9f06:	9b01      	ldr	r3, [sp, #4]
    9f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f0c:	2b00      	cmp	r3, #0
    9f0e:	d10d      	bne.n	9f2c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9f10:	f7f6 fda8 	bl	a64 <Spi_schm_read_msr>
    9f14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9f16:	9b00      	ldr	r3, [sp, #0]
    9f18:	f003 0301 	and.w	r3, r3, #1
    9f1c:	2b00      	cmp	r3, #0
    9f1e:	d100      	bne.n	9f22 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9f20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    9f22:	490a      	ldr	r1, [pc, #40]	; (9f4c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x54>)
    9f24:	9b01      	ldr	r3, [sp, #4]
    9f26:	9a00      	ldr	r2, [sp, #0]
    9f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]++;
    9f2c:	4a06      	ldr	r2, [pc, #24]	; (9f48 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
    9f2e:	9b01      	ldr	r3, [sp, #4]
    9f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f34:	1c5a      	adds	r2, r3, #1
    9f36:	4904      	ldr	r1, [pc, #16]	; (9f48 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_09+0x50>)
    9f38:	9b01      	ldr	r3, [sp, #4]
    9f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9f3e:	bf00      	nop
    9f40:	b003      	add	sp, #12
    9f42:	f85d fb04 	ldr.w	pc, [sp], #4
    9f46:	bf00      	nop
    9f48:	1fff8eb0 	.word	0x1fff8eb0
    9f4c:	1fff8eac 	.word	0x1fff8eac

00009f50 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09(void)
{
    9f50:	b500      	push	{lr}
    9f52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9f54:	f7f6 fe56 	bl	c04 <Sys_GetCoreID>
    9f58:	4603      	mov	r3, r0
    9f5a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]--;
    9f5c:	4a0d      	ldr	r2, [pc, #52]	; (9f94 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
    9f5e:	9b01      	ldr	r3, [sp, #4]
    9f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f64:	1e5a      	subs	r2, r3, #1
    9f66:	490b      	ldr	r1, [pc, #44]	; (9f94 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
    9f68:	9b01      	ldr	r3, [sp, #4]
    9f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    9f6e:	4a0a      	ldr	r2, [pc, #40]	; (9f98 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x48>)
    9f70:	9b01      	ldr	r3, [sp, #4]
    9f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f76:	f003 0301 	and.w	r3, r3, #1
    9f7a:	2b00      	cmp	r3, #0
    9f7c:	d106      	bne.n	9f8c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
    9f7e:	4a05      	ldr	r2, [pc, #20]	; (9f94 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x44>)
    9f80:	9b01      	ldr	r3, [sp, #4]
    9f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f86:	2b00      	cmp	r3, #0
    9f88:	d100      	bne.n	9f8c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    9f8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    9f8c:	bf00      	nop
    9f8e:	b003      	add	sp, #12
    9f90:	f85d fb04 	ldr.w	pc, [sp], #4
    9f94:	1fff8eb0 	.word	0x1fff8eb0
    9f98:	1fff8eac 	.word	0x1fff8eac

00009f9c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
    9f9c:	b500      	push	{lr}
    9f9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9fa0:	f7f6 fe30 	bl	c04 <Sys_GetCoreID>
    9fa4:	4603      	mov	r3, r0
    9fa6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId])
    9fa8:	4a10      	ldr	r2, [pc, #64]	; (9fec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
    9faa:	9b01      	ldr	r3, [sp, #4]
    9fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fb0:	2b00      	cmp	r3, #0
    9fb2:	d10d      	bne.n	9fd0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    9fb4:	f7f6 fd56 	bl	a64 <Spi_schm_read_msr>
    9fb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    9fba:	9b00      	ldr	r3, [sp, #0]
    9fbc:	f003 0301 	and.w	r3, r3, #1
    9fc0:	2b00      	cmp	r3, #0
    9fc2:	d100      	bne.n	9fc6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    9fc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    9fc6:	490a      	ldr	r1, [pc, #40]	; (9ff0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x54>)
    9fc8:	9b01      	ldr	r3, [sp, #4]
    9fca:	9a00      	ldr	r2, [sp, #0]
    9fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]++;
    9fd0:	4a06      	ldr	r2, [pc, #24]	; (9fec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
    9fd2:	9b01      	ldr	r3, [sp, #4]
    9fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fd8:	1c5a      	adds	r2, r3, #1
    9fda:	4904      	ldr	r1, [pc, #16]	; (9fec <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_10+0x50>)
    9fdc:	9b01      	ldr	r3, [sp, #4]
    9fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9fe2:	bf00      	nop
    9fe4:	b003      	add	sp, #12
    9fe6:	f85d fb04 	ldr.w	pc, [sp], #4
    9fea:	bf00      	nop
    9fec:	1fff8eb8 	.word	0x1fff8eb8
    9ff0:	1fff8eb4 	.word	0x1fff8eb4

00009ff4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10(void)
{
    9ff4:	b500      	push	{lr}
    9ff6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    9ff8:	f7f6 fe04 	bl	c04 <Sys_GetCoreID>
    9ffc:	4603      	mov	r3, r0
    9ffe:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]--;
    a000:	4a0d      	ldr	r2, [pc, #52]	; (a038 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
    a002:	9b01      	ldr	r3, [sp, #4]
    a004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a008:	1e5a      	subs	r2, r3, #1
    a00a:	490b      	ldr	r1, [pc, #44]	; (a038 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
    a00c:	9b01      	ldr	r3, [sp, #4]
    a00e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    a012:	4a0a      	ldr	r2, [pc, #40]	; (a03c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x48>)
    a014:	9b01      	ldr	r3, [sp, #4]
    a016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a01a:	f003 0301 	and.w	r3, r3, #1
    a01e:	2b00      	cmp	r3, #0
    a020:	d106      	bne.n	a030 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
    a022:	4a05      	ldr	r2, [pc, #20]	; (a038 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x44>)
    a024:	9b01      	ldr	r3, [sp, #4]
    a026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a02a:	2b00      	cmp	r3, #0
    a02c:	d100      	bne.n	a030 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a02e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a030:	bf00      	nop
    a032:	b003      	add	sp, #12
    a034:	f85d fb04 	ldr.w	pc, [sp], #4
    a038:	1fff8eb8 	.word	0x1fff8eb8
    a03c:	1fff8eb4 	.word	0x1fff8eb4

0000a040 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
    a040:	b500      	push	{lr}
    a042:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a044:	f7f6 fdde 	bl	c04 <Sys_GetCoreID>
    a048:	4603      	mov	r3, r0
    a04a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId])
    a04c:	4a10      	ldr	r2, [pc, #64]	; (a090 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
    a04e:	9b01      	ldr	r3, [sp, #4]
    a050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a054:	2b00      	cmp	r3, #0
    a056:	d10d      	bne.n	a074 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a058:	f7f6 fd04 	bl	a64 <Spi_schm_read_msr>
    a05c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a05e:	9b00      	ldr	r3, [sp, #0]
    a060:	f003 0301 	and.w	r3, r3, #1
    a064:	2b00      	cmp	r3, #0
    a066:	d100      	bne.n	a06a <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a068:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    a06a:	490a      	ldr	r1, [pc, #40]	; (a094 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x54>)
    a06c:	9b01      	ldr	r3, [sp, #4]
    a06e:	9a00      	ldr	r2, [sp, #0]
    a070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]++;
    a074:	4a06      	ldr	r2, [pc, #24]	; (a090 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
    a076:	9b01      	ldr	r3, [sp, #4]
    a078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a07c:	1c5a      	adds	r2, r3, #1
    a07e:	4904      	ldr	r1, [pc, #16]	; (a090 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_11+0x50>)
    a080:	9b01      	ldr	r3, [sp, #4]
    a082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a086:	bf00      	nop
    a088:	b003      	add	sp, #12
    a08a:	f85d fb04 	ldr.w	pc, [sp], #4
    a08e:	bf00      	nop
    a090:	1fff8ec0 	.word	0x1fff8ec0
    a094:	1fff8ebc 	.word	0x1fff8ebc

0000a098 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11(void)
{
    a098:	b500      	push	{lr}
    a09a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a09c:	f7f6 fdb2 	bl	c04 <Sys_GetCoreID>
    a0a0:	4603      	mov	r3, r0
    a0a2:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]--;
    a0a4:	4a0d      	ldr	r2, [pc, #52]	; (a0dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
    a0a6:	9b01      	ldr	r3, [sp, #4]
    a0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0ac:	1e5a      	subs	r2, r3, #1
    a0ae:	490b      	ldr	r1, [pc, #44]	; (a0dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
    a0b0:	9b01      	ldr	r3, [sp, #4]
    a0b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    a0b6:	4a0a      	ldr	r2, [pc, #40]	; (a0e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x48>)
    a0b8:	9b01      	ldr	r3, [sp, #4]
    a0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0be:	f003 0301 	and.w	r3, r3, #1
    a0c2:	2b00      	cmp	r3, #0
    a0c4:	d106      	bne.n	a0d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
    a0c6:	4a05      	ldr	r2, [pc, #20]	; (a0dc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x44>)
    a0c8:	9b01      	ldr	r3, [sp, #4]
    a0ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0ce:	2b00      	cmp	r3, #0
    a0d0:	d100      	bne.n	a0d4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a0d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a0d4:	bf00      	nop
    a0d6:	b003      	add	sp, #12
    a0d8:	f85d fb04 	ldr.w	pc, [sp], #4
    a0dc:	1fff8ec0 	.word	0x1fff8ec0
    a0e0:	1fff8ebc 	.word	0x1fff8ebc

0000a0e4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
    a0e4:	b500      	push	{lr}
    a0e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a0e8:	f7f6 fd8c 	bl	c04 <Sys_GetCoreID>
    a0ec:	4603      	mov	r3, r0
    a0ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId])
    a0f0:	4a10      	ldr	r2, [pc, #64]	; (a134 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
    a0f2:	9b01      	ldr	r3, [sp, #4]
    a0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0f8:	2b00      	cmp	r3, #0
    a0fa:	d10d      	bne.n	a118 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a0fc:	f7f6 fcb2 	bl	a64 <Spi_schm_read_msr>
    a100:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a102:	9b00      	ldr	r3, [sp, #0]
    a104:	f003 0301 	and.w	r3, r3, #1
    a108:	2b00      	cmp	r3, #0
    a10a:	d100      	bne.n	a10e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a10c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    a10e:	490a      	ldr	r1, [pc, #40]	; (a138 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x54>)
    a110:	9b01      	ldr	r3, [sp, #4]
    a112:	9a00      	ldr	r2, [sp, #0]
    a114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]++;
    a118:	4a06      	ldr	r2, [pc, #24]	; (a134 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
    a11a:	9b01      	ldr	r3, [sp, #4]
    a11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a120:	1c5a      	adds	r2, r3, #1
    a122:	4904      	ldr	r1, [pc, #16]	; (a134 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_12+0x50>)
    a124:	9b01      	ldr	r3, [sp, #4]
    a126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a12a:	bf00      	nop
    a12c:	b003      	add	sp, #12
    a12e:	f85d fb04 	ldr.w	pc, [sp], #4
    a132:	bf00      	nop
    a134:	1fff8ec8 	.word	0x1fff8ec8
    a138:	1fff8ec4 	.word	0x1fff8ec4

0000a13c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12(void)
{
    a13c:	b500      	push	{lr}
    a13e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a140:	f7f6 fd60 	bl	c04 <Sys_GetCoreID>
    a144:	4603      	mov	r3, r0
    a146:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]--;
    a148:	4a0d      	ldr	r2, [pc, #52]	; (a180 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
    a14a:	9b01      	ldr	r3, [sp, #4]
    a14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a150:	1e5a      	subs	r2, r3, #1
    a152:	490b      	ldr	r1, [pc, #44]	; (a180 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
    a154:	9b01      	ldr	r3, [sp, #4]
    a156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    a15a:	4a0a      	ldr	r2, [pc, #40]	; (a184 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x48>)
    a15c:	9b01      	ldr	r3, [sp, #4]
    a15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a162:	f003 0301 	and.w	r3, r3, #1
    a166:	2b00      	cmp	r3, #0
    a168:	d106      	bne.n	a178 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
    a16a:	4a05      	ldr	r2, [pc, #20]	; (a180 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x44>)
    a16c:	9b01      	ldr	r3, [sp, #4]
    a16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a172:	2b00      	cmp	r3, #0
    a174:	d100      	bne.n	a178 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a176:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a178:	bf00      	nop
    a17a:	b003      	add	sp, #12
    a17c:	f85d fb04 	ldr.w	pc, [sp], #4
    a180:	1fff8ec8 	.word	0x1fff8ec8
    a184:	1fff8ec4 	.word	0x1fff8ec4

0000a188 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
    a188:	b500      	push	{lr}
    a18a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a18c:	f7f6 fd3a 	bl	c04 <Sys_GetCoreID>
    a190:	4603      	mov	r3, r0
    a192:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId])
    a194:	4a10      	ldr	r2, [pc, #64]	; (a1d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
    a196:	9b01      	ldr	r3, [sp, #4]
    a198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a19c:	2b00      	cmp	r3, #0
    a19e:	d10d      	bne.n	a1bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a1a0:	f7f6 fc60 	bl	a64 <Spi_schm_read_msr>
    a1a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a1a6:	9b00      	ldr	r3, [sp, #0]
    a1a8:	f003 0301 	and.w	r3, r3, #1
    a1ac:	2b00      	cmp	r3, #0
    a1ae:	d100      	bne.n	a1b2 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a1b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    a1b2:	490a      	ldr	r1, [pc, #40]	; (a1dc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x54>)
    a1b4:	9b01      	ldr	r3, [sp, #4]
    a1b6:	9a00      	ldr	r2, [sp, #0]
    a1b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]++;
    a1bc:	4a06      	ldr	r2, [pc, #24]	; (a1d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
    a1be:	9b01      	ldr	r3, [sp, #4]
    a1c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1c4:	1c5a      	adds	r2, r3, #1
    a1c6:	4904      	ldr	r1, [pc, #16]	; (a1d8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_13+0x50>)
    a1c8:	9b01      	ldr	r3, [sp, #4]
    a1ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a1ce:	bf00      	nop
    a1d0:	b003      	add	sp, #12
    a1d2:	f85d fb04 	ldr.w	pc, [sp], #4
    a1d6:	bf00      	nop
    a1d8:	1fff8ed0 	.word	0x1fff8ed0
    a1dc:	1fff8ecc 	.word	0x1fff8ecc

0000a1e0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13(void)
{
    a1e0:	b500      	push	{lr}
    a1e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a1e4:	f7f6 fd0e 	bl	c04 <Sys_GetCoreID>
    a1e8:	4603      	mov	r3, r0
    a1ea:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]--;
    a1ec:	4a0d      	ldr	r2, [pc, #52]	; (a224 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
    a1ee:	9b01      	ldr	r3, [sp, #4]
    a1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1f4:	1e5a      	subs	r2, r3, #1
    a1f6:	490b      	ldr	r1, [pc, #44]	; (a224 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
    a1f8:	9b01      	ldr	r3, [sp, #4]
    a1fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    a1fe:	4a0a      	ldr	r2, [pc, #40]	; (a228 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x48>)
    a200:	9b01      	ldr	r3, [sp, #4]
    a202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a206:	f003 0301 	and.w	r3, r3, #1
    a20a:	2b00      	cmp	r3, #0
    a20c:	d106      	bne.n	a21c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
    a20e:	4a05      	ldr	r2, [pc, #20]	; (a224 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x44>)
    a210:	9b01      	ldr	r3, [sp, #4]
    a212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a216:	2b00      	cmp	r3, #0
    a218:	d100      	bne.n	a21c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a21a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a21c:	bf00      	nop
    a21e:	b003      	add	sp, #12
    a220:	f85d fb04 	ldr.w	pc, [sp], #4
    a224:	1fff8ed0 	.word	0x1fff8ed0
    a228:	1fff8ecc 	.word	0x1fff8ecc

0000a22c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
    a22c:	b500      	push	{lr}
    a22e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a230:	f7f6 fce8 	bl	c04 <Sys_GetCoreID>
    a234:	4603      	mov	r3, r0
    a236:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId])
    a238:	4a10      	ldr	r2, [pc, #64]	; (a27c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
    a23a:	9b01      	ldr	r3, [sp, #4]
    a23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a240:	2b00      	cmp	r3, #0
    a242:	d10d      	bne.n	a260 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a244:	f7f6 fc0e 	bl	a64 <Spi_schm_read_msr>
    a248:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a24a:	9b00      	ldr	r3, [sp, #0]
    a24c:	f003 0301 	and.w	r3, r3, #1
    a250:	2b00      	cmp	r3, #0
    a252:	d100      	bne.n	a256 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a254:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    a256:	490a      	ldr	r1, [pc, #40]	; (a280 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x54>)
    a258:	9b01      	ldr	r3, [sp, #4]
    a25a:	9a00      	ldr	r2, [sp, #0]
    a25c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]++;
    a260:	4a06      	ldr	r2, [pc, #24]	; (a27c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
    a262:	9b01      	ldr	r3, [sp, #4]
    a264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a268:	1c5a      	adds	r2, r3, #1
    a26a:	4904      	ldr	r1, [pc, #16]	; (a27c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_14+0x50>)
    a26c:	9b01      	ldr	r3, [sp, #4]
    a26e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a272:	bf00      	nop
    a274:	b003      	add	sp, #12
    a276:	f85d fb04 	ldr.w	pc, [sp], #4
    a27a:	bf00      	nop
    a27c:	1fff8ed8 	.word	0x1fff8ed8
    a280:	1fff8ed4 	.word	0x1fff8ed4

0000a284 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14(void)
{
    a284:	b500      	push	{lr}
    a286:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a288:	f7f6 fcbc 	bl	c04 <Sys_GetCoreID>
    a28c:	4603      	mov	r3, r0
    a28e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]--;
    a290:	4a0d      	ldr	r2, [pc, #52]	; (a2c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
    a292:	9b01      	ldr	r3, [sp, #4]
    a294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a298:	1e5a      	subs	r2, r3, #1
    a29a:	490b      	ldr	r1, [pc, #44]	; (a2c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
    a29c:	9b01      	ldr	r3, [sp, #4]
    a29e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    a2a2:	4a0a      	ldr	r2, [pc, #40]	; (a2cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x48>)
    a2a4:	9b01      	ldr	r3, [sp, #4]
    a2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2aa:	f003 0301 	and.w	r3, r3, #1
    a2ae:	2b00      	cmp	r3, #0
    a2b0:	d106      	bne.n	a2c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
    a2b2:	4a05      	ldr	r2, [pc, #20]	; (a2c8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x44>)
    a2b4:	9b01      	ldr	r3, [sp, #4]
    a2b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2ba:	2b00      	cmp	r3, #0
    a2bc:	d100      	bne.n	a2c0 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a2be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a2c0:	bf00      	nop
    a2c2:	b003      	add	sp, #12
    a2c4:	f85d fb04 	ldr.w	pc, [sp], #4
    a2c8:	1fff8ed8 	.word	0x1fff8ed8
    a2cc:	1fff8ed4 	.word	0x1fff8ed4

0000a2d0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
    a2d0:	b500      	push	{lr}
    a2d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a2d4:	f7f6 fc96 	bl	c04 <Sys_GetCoreID>
    a2d8:	4603      	mov	r3, r0
    a2da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId])
    a2dc:	4a10      	ldr	r2, [pc, #64]	; (a320 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
    a2de:	9b01      	ldr	r3, [sp, #4]
    a2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2e4:	2b00      	cmp	r3, #0
    a2e6:	d10d      	bne.n	a304 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a2e8:	f7f6 fbbc 	bl	a64 <Spi_schm_read_msr>
    a2ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a2ee:	9b00      	ldr	r3, [sp, #0]
    a2f0:	f003 0301 	and.w	r3, r3, #1
    a2f4:	2b00      	cmp	r3, #0
    a2f6:	d100      	bne.n	a2fa <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a2f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    a2fa:	490a      	ldr	r1, [pc, #40]	; (a324 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x54>)
    a2fc:	9b01      	ldr	r3, [sp, #4]
    a2fe:	9a00      	ldr	r2, [sp, #0]
    a300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]++;
    a304:	4a06      	ldr	r2, [pc, #24]	; (a320 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
    a306:	9b01      	ldr	r3, [sp, #4]
    a308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a30c:	1c5a      	adds	r2, r3, #1
    a30e:	4904      	ldr	r1, [pc, #16]	; (a320 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_15+0x50>)
    a310:	9b01      	ldr	r3, [sp, #4]
    a312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a316:	bf00      	nop
    a318:	b003      	add	sp, #12
    a31a:	f85d fb04 	ldr.w	pc, [sp], #4
    a31e:	bf00      	nop
    a320:	1fff8ee0 	.word	0x1fff8ee0
    a324:	1fff8edc 	.word	0x1fff8edc

0000a328 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15(void)
{
    a328:	b500      	push	{lr}
    a32a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a32c:	f7f6 fc6a 	bl	c04 <Sys_GetCoreID>
    a330:	4603      	mov	r3, r0
    a332:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]--;
    a334:	4a0d      	ldr	r2, [pc, #52]	; (a36c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
    a336:	9b01      	ldr	r3, [sp, #4]
    a338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a33c:	1e5a      	subs	r2, r3, #1
    a33e:	490b      	ldr	r1, [pc, #44]	; (a36c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
    a340:	9b01      	ldr	r3, [sp, #4]
    a342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    a346:	4a0a      	ldr	r2, [pc, #40]	; (a370 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x48>)
    a348:	9b01      	ldr	r3, [sp, #4]
    a34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a34e:	f003 0301 	and.w	r3, r3, #1
    a352:	2b00      	cmp	r3, #0
    a354:	d106      	bne.n	a364 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
    a356:	4a05      	ldr	r2, [pc, #20]	; (a36c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x44>)
    a358:	9b01      	ldr	r3, [sp, #4]
    a35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a35e:	2b00      	cmp	r3, #0
    a360:	d100      	bne.n	a364 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a362:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a364:	bf00      	nop
    a366:	b003      	add	sp, #12
    a368:	f85d fb04 	ldr.w	pc, [sp], #4
    a36c:	1fff8ee0 	.word	0x1fff8ee0
    a370:	1fff8edc 	.word	0x1fff8edc

0000a374 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
    a374:	b500      	push	{lr}
    a376:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a378:	f7f6 fc44 	bl	c04 <Sys_GetCoreID>
    a37c:	4603      	mov	r3, r0
    a37e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId])
    a380:	4a10      	ldr	r2, [pc, #64]	; (a3c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
    a382:	9b01      	ldr	r3, [sp, #4]
    a384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a388:	2b00      	cmp	r3, #0
    a38a:	d10d      	bne.n	a3a8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a38c:	f7f6 fb6a 	bl	a64 <Spi_schm_read_msr>
    a390:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a392:	9b00      	ldr	r3, [sp, #0]
    a394:	f003 0301 	and.w	r3, r3, #1
    a398:	2b00      	cmp	r3, #0
    a39a:	d100      	bne.n	a39e <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a39c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    a39e:	490a      	ldr	r1, [pc, #40]	; (a3c8 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x54>)
    a3a0:	9b01      	ldr	r3, [sp, #4]
    a3a2:	9a00      	ldr	r2, [sp, #0]
    a3a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]++;
    a3a8:	4a06      	ldr	r2, [pc, #24]	; (a3c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
    a3aa:	9b01      	ldr	r3, [sp, #4]
    a3ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3b0:	1c5a      	adds	r2, r3, #1
    a3b2:	4904      	ldr	r1, [pc, #16]	; (a3c4 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_16+0x50>)
    a3b4:	9b01      	ldr	r3, [sp, #4]
    a3b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a3ba:	bf00      	nop
    a3bc:	b003      	add	sp, #12
    a3be:	f85d fb04 	ldr.w	pc, [sp], #4
    a3c2:	bf00      	nop
    a3c4:	1fff8ee8 	.word	0x1fff8ee8
    a3c8:	1fff8ee4 	.word	0x1fff8ee4

0000a3cc <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16(void)
{
    a3cc:	b500      	push	{lr}
    a3ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a3d0:	f7f6 fc18 	bl	c04 <Sys_GetCoreID>
    a3d4:	4603      	mov	r3, r0
    a3d6:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]--;
    a3d8:	4a0d      	ldr	r2, [pc, #52]	; (a410 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
    a3da:	9b01      	ldr	r3, [sp, #4]
    a3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3e0:	1e5a      	subs	r2, r3, #1
    a3e2:	490b      	ldr	r1, [pc, #44]	; (a410 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
    a3e4:	9b01      	ldr	r3, [sp, #4]
    a3e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    a3ea:	4a0a      	ldr	r2, [pc, #40]	; (a414 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x48>)
    a3ec:	9b01      	ldr	r3, [sp, #4]
    a3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3f2:	f003 0301 	and.w	r3, r3, #1
    a3f6:	2b00      	cmp	r3, #0
    a3f8:	d106      	bne.n	a408 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
    a3fa:	4a05      	ldr	r2, [pc, #20]	; (a410 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x44>)
    a3fc:	9b01      	ldr	r3, [sp, #4]
    a3fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a402:	2b00      	cmp	r3, #0
    a404:	d100      	bne.n	a408 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a406:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a408:	bf00      	nop
    a40a:	b003      	add	sp, #12
    a40c:	f85d fb04 	ldr.w	pc, [sp], #4
    a410:	1fff8ee8 	.word	0x1fff8ee8
    a414:	1fff8ee4 	.word	0x1fff8ee4

0000a418 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
    a418:	b500      	push	{lr}
    a41a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a41c:	f7f6 fbf2 	bl	c04 <Sys_GetCoreID>
    a420:	4603      	mov	r3, r0
    a422:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId])
    a424:	4a10      	ldr	r2, [pc, #64]	; (a468 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
    a426:	9b01      	ldr	r3, [sp, #4]
    a428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a42c:	2b00      	cmp	r3, #0
    a42e:	d10d      	bne.n	a44c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a430:	f7f6 fb18 	bl	a64 <Spi_schm_read_msr>
    a434:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a436:	9b00      	ldr	r3, [sp, #0]
    a438:	f003 0301 	and.w	r3, r3, #1
    a43c:	2b00      	cmp	r3, #0
    a43e:	d100      	bne.n	a442 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a440:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    a442:	490a      	ldr	r1, [pc, #40]	; (a46c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x54>)
    a444:	9b01      	ldr	r3, [sp, #4]
    a446:	9a00      	ldr	r2, [sp, #0]
    a448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]++;
    a44c:	4a06      	ldr	r2, [pc, #24]	; (a468 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
    a44e:	9b01      	ldr	r3, [sp, #4]
    a450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a454:	1c5a      	adds	r2, r3, #1
    a456:	4904      	ldr	r1, [pc, #16]	; (a468 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_17+0x50>)
    a458:	9b01      	ldr	r3, [sp, #4]
    a45a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a45e:	bf00      	nop
    a460:	b003      	add	sp, #12
    a462:	f85d fb04 	ldr.w	pc, [sp], #4
    a466:	bf00      	nop
    a468:	1fff8ef0 	.word	0x1fff8ef0
    a46c:	1fff8eec 	.word	0x1fff8eec

0000a470 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17(void)
{
    a470:	b500      	push	{lr}
    a472:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a474:	f7f6 fbc6 	bl	c04 <Sys_GetCoreID>
    a478:	4603      	mov	r3, r0
    a47a:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]--;
    a47c:	4a0d      	ldr	r2, [pc, #52]	; (a4b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
    a47e:	9b01      	ldr	r3, [sp, #4]
    a480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a484:	1e5a      	subs	r2, r3, #1
    a486:	490b      	ldr	r1, [pc, #44]	; (a4b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
    a488:	9b01      	ldr	r3, [sp, #4]
    a48a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    a48e:	4a0a      	ldr	r2, [pc, #40]	; (a4b8 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x48>)
    a490:	9b01      	ldr	r3, [sp, #4]
    a492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a496:	f003 0301 	and.w	r3, r3, #1
    a49a:	2b00      	cmp	r3, #0
    a49c:	d106      	bne.n	a4ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
    a49e:	4a05      	ldr	r2, [pc, #20]	; (a4b4 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x44>)
    a4a0:	9b01      	ldr	r3, [sp, #4]
    a4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4a6:	2b00      	cmp	r3, #0
    a4a8:	d100      	bne.n	a4ac <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a4aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a4ac:	bf00      	nop
    a4ae:	b003      	add	sp, #12
    a4b0:	f85d fb04 	ldr.w	pc, [sp], #4
    a4b4:	1fff8ef0 	.word	0x1fff8ef0
    a4b8:	1fff8eec 	.word	0x1fff8eec

0000a4bc <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
    a4bc:	b500      	push	{lr}
    a4be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a4c0:	f7f6 fba0 	bl	c04 <Sys_GetCoreID>
    a4c4:	4603      	mov	r3, r0
    a4c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId])
    a4c8:	4a10      	ldr	r2, [pc, #64]	; (a50c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
    a4ca:	9b01      	ldr	r3, [sp, #4]
    a4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4d0:	2b00      	cmp	r3, #0
    a4d2:	d10d      	bne.n	a4f0 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Spi_schm_read_msr);
#else
        msr = Spi_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a4d4:	f7f6 fac6 	bl	a64 <Spi_schm_read_msr>
    a4d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    a4da:	9b00      	ldr	r3, [sp, #0]
    a4dc:	f003 0301 	and.w	r3, r3, #1
    a4e0:	2b00      	cmp	r3, #0
    a4e2:	d100      	bne.n	a4e6 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    a4e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_SPI_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    a4e6:	490a      	ldr	r1, [pc, #40]	; (a510 <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x54>)
    a4e8:	9b01      	ldr	r3, [sp, #4]
    a4ea:	9a00      	ldr	r2, [sp, #0]
    a4ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]++;
    a4f0:	4a06      	ldr	r2, [pc, #24]	; (a50c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
    a4f2:	9b01      	ldr	r3, [sp, #4]
    a4f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4f8:	1c5a      	adds	r2, r3, #1
    a4fa:	4904      	ldr	r1, [pc, #16]	; (a50c <SchM_Enter_Spi_SPI_EXCLUSIVE_AREA_18+0x50>)
    a4fc:	9b01      	ldr	r3, [sp, #4]
    a4fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a502:	bf00      	nop
    a504:	b003      	add	sp, #12
    a506:	f85d fb04 	ldr.w	pc, [sp], #4
    a50a:	bf00      	nop
    a50c:	1fff8ef8 	.word	0x1fff8ef8
    a510:	1fff8ef4 	.word	0x1fff8ef4

0000a514 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18>:

void SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18(void)
{
    a514:	b500      	push	{lr}
    a516:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a518:	f7f6 fb74 	bl	c04 <Sys_GetCoreID>
    a51c:	4603      	mov	r3, r0
    a51e:	9301      	str	r3, [sp, #4]

    reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]--;
    a520:	4a0d      	ldr	r2, [pc, #52]	; (a558 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
    a522:	9b01      	ldr	r3, [sp, #4]
    a524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a528:	1e5a      	subs	r2, r3, #1
    a52a:	490b      	ldr	r1, [pc, #44]	; (a558 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
    a52c:	9b01      	ldr	r3, [sp, #4]
    a52e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_SPI_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_SPI_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    a532:	4a0a      	ldr	r2, [pc, #40]	; (a55c <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x48>)
    a534:	9b01      	ldr	r3, [sp, #4]
    a536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a53a:	f003 0301 	and.w	r3, r3, #1
    a53e:	2b00      	cmp	r3, #0
    a540:	d106      	bne.n	a550 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
    a542:	4a05      	ldr	r2, [pc, #20]	; (a558 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x44>)
    a544:	9b01      	ldr	r3, [sp, #4]
    a546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a54a:	2b00      	cmp	r3, #0
    a54c:	d100      	bne.n	a550 <SchM_Exit_Spi_SPI_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    a54e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    a550:	bf00      	nop
    a552:	b003      	add	sp, #12
    a554:	f85d fb04 	ldr.w	pc, [sp], #4
    a558:	1fff8ef8 	.word	0x1fff8ef8
    a55c:	1fff8ef4 	.word	0x1fff8ef4

0000a560 <Fls_ACEraseRomEnd>:
    a560:	61746144 	.word	0x61746144
    a564:	61657220 	.word	0x61657220
    a568:	72662064 	.word	0x72662064
    a56c:	65206d6f 	.word	0x65206d6f
    a570:	6f727065 	.word	0x6f727065
    a574:	3a31206d 	.word	0x3a31206d
    a578:	25783020 	.word	0x25783020
    a57c:	00000a78 	.word	0x00000a78
    a580:	61746144 	.word	0x61746144
    a584:	61657220 	.word	0x61657220
    a588:	72662064 	.word	0x72662064
    a58c:	65206d6f 	.word	0x65206d6f
    a590:	6f727065 	.word	0x6f727065
    a594:	3a32206d 	.word	0x3a32206d
    a598:	25783020 	.word	0x25783020
    a59c:	00000a78 	.word	0x00000a78
    a5a0:	6d726554 	.word	0x6d726554
    a5a4:	6c616e69 	.word	0x6c616e69
    a5a8:	00000000 	.word	0x00000000
    a5ac:	4c554e28 	.word	0x4c554e28
    a5b0:	0000294c 	.word	0x0000294c

0000a5b4 <Clock_Ip_au8DividerCallbackIndex>:
    a5b4:	0e0d0c00 06030201 0a070409 000b0805     ................

0000a5c4 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000a5d4 <Clock_Ip_au8XoscCallbackIndex>:
    a5d4:	00000100 00000000 00000000 00000000     ................

0000a5e4 <Clock_Ip_au8IrcoscCallbackIndex>:
    a5e4:	03020100 00000004 00000000 00000000     ................

0000a5f4 <Clock_Ip_au8GateCallbackIndex>:
    a5f4:	06010200 01040301 00000500 00000000     ................

0000a604 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000a614 <Clock_Ip_au8PllCallbackIndex>:
    a614:	00000100 00000000 00000000 00000000     ................

0000a624 <Clock_Ip_au8SelectorCallbackIndex>:
    a624:	0a090800 03020109 07060504 00000000     ................

0000a634 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000a644 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000a654 <Clock_Ip_au8ClockFeatures>:
	...
    a664:	01000000 00000000 00000000 00000002     ................
    a674:	00000000 00000300 00000000 00040000     ................
    a684:	00000000 05000000 00000000 00000000     ................
    a694:	00000006 00000000 00000100 00000000     ................
    a6a4:	00010000 00000000 04000000 00000000     ................
    a6b4:	00000000 00000005 00000001 00000401     ................
    a6c4:	00000200 00050100 00030000 04020000     ................
    a6d4:	04000000 02000000 00000005 00000005     ................
    a6e4:	00000403 00000600 00050300 00070000     ................
    a6f4:	05000000 00000000 00000000 00000006     ................
	...
    a734:	00050000 00000000 06000000 00000100     ................
    a744:	00000000 00030007 00000000 00000000     ................
    a754:	00000000 00060000 00000000 07000000     ................
    a764:	00000100 00000000 00030008 00000000     ................
	...
    a77c:	00090000 00000000 0a000000 00000100     ................
    a78c:	00000000 0003000b 00000000 00000000     ................
    a79c:	00000000 000c0000 00000000 0d000000     ................
    a7ac:	00000100 00000000 0003000e 00000000     ................
    a7bc:	00000800 00000000 00090000 00000000     ................
    a7cc:	0a000000 00000000 00000000 0000000b     ................
    a7dc:	00000000 00000b01 00000000 000b0200     ................
    a7ec:	00000000 0b030000 00000000 00000000     ................
	...
    a804:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    a814:	01000000 00000000 00000000 00000007     ................
    a824:	00007300 00000700 00320000 00090000     .s........2.....
    a834:	02000000 07000000 00000000 00000021     ............!...
    a844:	00000009 00000400 00000900 00030000     ................
    a854:	00070000 61000000 07000000 00000000     .......a........
    a864:	00000024 00000007 00002500 00000700     $........%......
    a874:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    a884:	00000000 00000020 38000004 00003800     .... ......8.8..
    a894:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    a8a4:	04000000 00260000 00000026 66000004     ......&.&......f
    a8b4:	00006600 00000400 00370037 00040000     .f......7.7.....
    a8c4:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    a8d4:	2e000004 00002e00 00000200 00404040     ............@@@.
    a8e4:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    a8f4:	0000006b 6c000004 00006c00 00000900     k......l.l......
    a904:	00010000 00090000 00000000 07000000     ................
    a914:	00000000 00000036 00000007 00003100     ....6........1..
    a924:	00000700 00490000 00070000 4a000000     ......I........J
    a934:	07000000 00000000 0000004b 00000007     ........K.......
    a944:	00004c00 00000700 004d0000 00070000     .L........M.....
    a954:	3d000000 03000000 00000000 00000000     ...=............

0000a964 <Clock_Ip_au16SelectorEntryHardwareValue>:
    a964:	01010a03 01010001 04040002 02000603     ................
    a974:	00010810 02020100 00000000 00000007     ................
    a984:	00000009 00000000 00000c0e 00000000     ................
	...

0000a9bc <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    a9bc:	00020000 00000300 00000601 00000000     ................
	...

0000a9ec <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    a9ec:	00000700 00000000 02020000 01010303     ................
    a9fc:	03020606 00000000 00000000 00000000     ................
	...

0000aa1c <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    aa1c:	00000001 00000000 02020000 01010303     ................
    aa2c:	03020606 00000000 00000000 00000000     ................
	...

0000aa4c <Clock_Ip_au8DividerValueHardwareValue>:
    aa4c:	00020100 00000003 00000004 00000000     ................
    aa5c:	00000005 00000000 00000000 00000000     ................
    aa6c:	00000006 00000000 00000000 00000000     ................
	...
    aa8c:	00000007                                ....

0000aa90 <Clock_Ip_apxScgPeriphAsyncDivs>:
    aa90:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000aaa0 <Clock_Ip_aeSourceTypeClockName>:
    aaa0:	00000000 00000001 00000001 00000001     ................
    aab0:	00000001 00000001 00000001 00000001     ................
    aac0:	00000002 00000003 00000001 00000001     ................
    aad0:	00000001 00000001 00000002 00000002     ................
    aae0:	00000003 00000003 00000001 00000001     ................
    aaf0:	00000004 00000004 00000004 00000004     ................
	...

0000ab5c <Clock_Ip_aeHwPllName>:
    ab5c:	00000009                                ....

0000ab60 <Clock_Ip_aeHwDfsName>:
    ab60:	00000057                                W...

0000ab64 <Clock_Ip_axDividerCallbacks>:
    ab64:	00002c45 00002c4f 00002c69 00002c83     E,..O,..i,...,..
    ab74:	00002c9d 00002cb7 00002cd1 00002ceb     .,...,...,...,..
    ab84:	00002d05 00002d1f 00002d39 00002d53     .-...-..9-..S-..
    ab94:	00002d6d 00002d87 00002da1              m-...-...-..

0000aba0 <Clock_Ip_axDividerTriggerCallbacks>:
    aba0:	00003115 00003115                       .1...1..

0000aba8 <Clock_Ip_axExtOscCallbacks>:
    aba8:	00003121 00003121 00003121 0000312b     !1..!1..!1..+1..
    abb8:	00003121 00003135 0000314f 00003169     !1..51..O1..i1..
    abc8:	000031ed 00003201                       .1...2..

0000abd0 <Clock_Ip_axFracDivCallbacks>:
    abd0:	000033c1 000033c1 000033cb              .3...3...3..

0000abdc <Clock_Ip_axGateCallbacks>:
    abdc:	000033e5 000033ef 000034ef 00003509     .3...3...4...5..
    abec:	0000349f 000034b9 0000344f 00003469     .4...4..O4..i4..
    abfc:	000033ff 00003419 0000353f 00003559     .3...4..?5..Y5..
    ac0c:	0000358f 000035a9                       .5...5..

0000ac14 <Clock_Ip_axIntOscCallbacks>:
    ac14:	00003755 00003755 0000375f 00003769     U7..U7.._7..i7..
    ac24:	00003783 0000379d 000037b1 000037cb     .7...7...7...7..
    ac34:	000037e5 000037f9 00003813 0000382d     .7...7...8..-8..
    ac44:	000038d5 000038ef 00003909              .8...8...9..

0000ac50 <Clock_Ip_axCmuCallbacks>:
    ac50:	00003ea5 00003eaf 00003ebb 00003ea5     .>...>...>...>..

0000ac60 <Clock_Ip_axPllCallbacks>:
    ac60:	00003ec5 00003ec5 00003ecf 00003ec5     .>...>...>...>..
    ac70:	00003edb 00003ee5 00003eff 00003f19     .>...>...>...?..
    ac80:	00003fbd 00003fa9                       .?...?..

0000ac88 <Clock_Ip_axPcfsCallbacks>:
    ac88:	00004119                                .A..

0000ac8c <Clock_Ip_axSelectorCallbacks>:
    ac8c:	00004125 00004125 0000412f 00004149     %A..%A../A..IA..
    ac9c:	00004125 00004163 0000417d 00004197     %A..cA..}A...A..
    acac:	000041b1 000041cb 000041e5 000041ff     .A...A...A...A..
    acbc:	00004219 00004233 0000424d 00004267     .B..3B..MB..gB..
    accc:	00004281 0000429b 000042b5 000042cf     .B...B...B...B..
    acdc:	000042e9 00004303                       .B...C..

0000ace4 <ClockSource>:
    ace4:	00000000 00000008 00000002 00000005     ................
	...
    acfc:	00000009                                ....

0000ad00 <ResetReasonArray>:
    ad00:	00000000 00000001 00000002 00000003     ................
    ad10:	00000004 00000005 00000006 00000007     ................
    ad20:	00000008 00000009 0000000a 0000000b     ................
    ad30:	0000000c 0000000d 0000000e              ............

0000ad3c <Port_au32PortCiPortBaseAddr>:
    ad3c:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    ad4c:	4004d000                                ...@

0000ad50 <Port_au32PortCiGpioBaseAddr>:
    ad50:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    ad60:	400ff100                                ...@

0000ad64 <Lpspi_Ip_apxBases>:
    ad64:	4002c000 4002d000 4002e000              ...@...@...@

0000ad70 <Mcu_aClockConfigPB>:
	...
    ad78:	1c000101 04000010 01000029 00000005     ........).......
    ad88:	00000001 00000000 00000057 00000000     ........W.......
    ad98:	00000000 00000008 007a1200 00000001     ..........z.....
    ada8:	00000001 00000000 00000057 00000000     ........W.......
    adb8:	00000057 00000000 00000000 00000000     W...............
	...
    add8:	00000019 00000005 0000001a 00000002     ................
    ade8:	0000001b 00000005 0000002a 00000005     ........*.......
    adf8:	00000028 0000000e 00000029 00000001     (.......).......
    ae08:	00000056 0000001c 00000032 0000002a     V.......2...*...
    ae18:	0000002b 00000014 0000002c 00000014     +.......,.......
    ae28:	0000002d 00000014 0000002e 00000014     -...............
    ae38:	0000003f 00000000 00000040 00000000     ?.......@.......
    ae48:	00000041 00000000 00000042 00000000     A.......B.......
    ae58:	00000031 00000000 00000045 0000000d     1.......E.......
    ae68:	00000046 00000000 00000047 00000000     F.......G.......
    ae78:	00000044 00000000 00000030 00000000     D.......0.......
    ae88:	0000003d 00000000 00000043 00000000     =.......C.......
    ae98:	00000049 00000000 0000004a 00000000     I.......J.......
    aea8:	0000004b 00000000 00000048 00000000     K.......H.......
    aeb8:	0000000c 00000001 00000000 0000000d     ................
    aec8:	00000002 00000000 0000000e 00000001     ................
    aed8:	00000000 0000000f 00000001 00000000     ................
    aee8:	0000001d 00000001 00000000 0000001e     ................
    aef8:	00000008 00000000 0000001f 00000001     ................
    af08:	00000000 00000021 00000001 00000000     ....!...........
    af18:	00000022 00000002 00000000 00000023     "...........#...
    af28:	00000001 00000000 00000025 00000003     ........%.......
    af38:	00000000 00000026 00000004 00000000     ....&...........
    af48:	00000027 00000002 00000000 00000032     '...........2...
    af58:	00000001 00000000 00000048 00000001     ........H.......
    af68:	00000001 00000056 00000001 00000001     ....V...........
    af78:	00000057 00000000 00000000 00000057     W...........W...
	...
    af90:	00000057 00000000 00000000 00000057     W...........W...
	...
    afa8:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    afc4:	00000014 00007d00 00000015 00007d00     .....}.......}..
    afd4:	00000016 00007d00 00000017 00008000     .....}..........
    afe4:	00000012 00000001 00000013 00000001     ................
    aff4:	00000030 00000000 00000031 00000000     0.......1.......
    b004:	00000032 00000000 00000033 00000000     2.......3.......
    b014:	00000034 00000000 00000035 00000001     4.......5.......
    b024:	00000036 00000000 00000037 00000001     6.......7.......
    b034:	00000038 00000001 00000039 00000000     8.......9.......
    b044:	0000003a 00000000 0000003b 00000000     :.......;.......
    b054:	0000003c 00000000 0000003d 00000000     <.......=.......
    b064:	0000003e 00000000 0000003f 00000000     >.......?.......
    b074:	00000040 00000000 00000041 00000000     @.......A.......
    b084:	00000042 00000000 00000043 00000000     B.......C.......
    b094:	00000044 00000000 00000045 00000001     D.......E.......
    b0a4:	00000046 00000000 00000047 00000000     F.......G.......
    b0b4:	00000048 00000000 00000049 00000000     H.......I.......
    b0c4:	0000004a 00000000 0000004b 00000000     J.......K.......
    b0d4:	0000004c 00000001 0000004d 00000001     L.......M.......
    b0e4:	0000004e 00000000 0000004f 00000000     N.......O.......
    b0f4:	00000050 00000001 00000051 00000001     P.......Q.......
    b104:	00000052 00000001 00000053 00000001     R.......S.......
    b114:	00000054 00000001 00000055 00000000     T.......U.......
    b124:	00000056 00000001 00000057 00000000     V.......W.......
    b134:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0000b168 <Lpspi_Ip_DeviceAttributes_SpiExternalDevice_0>:
    b168:	00000000 2f2f2e2e 00200000 1fff8b24     ......//.. .$...

0000b178 <Lpspi_Ip_DeviceAttributes_SpiExternalDevice_1>:
    b178:	00000000 2f2f2e2e 01200000 1fff8b2c     ......//.. .,...

0000b188 <Lpspi_Ip_PhyUnitConfig_SpiPhyUnit_0>:
	...
    b190:	03000001 00000000 00000000              ............

0000b19c <Mcu_Config>:
    b19c:	0000005a 00000000 00000001 00000001     Z...............
    b1ac:	0000b3f8 0000ad70 0000b404              ....p.......

0000b1b8 <OsIf_xPredefinedConfig>:
    b1b8:	00000000 02dc6c00                       .....l..

0000b1c0 <OsIf_apxPredefinedConfig>:
    b1c0:	0000b1b8                                ....

0000b1c4 <Platform_uConfiguration>:
    b1c4:	0000b1cc                                ....

0000b1c8 <Platform_Config>:
    b1c8:	0000b1c4                                ....

0000b1cc <ipwConfig>:
	...

0000b1d4 <g_pin_mux_InitConfigArr>:
    b1d4:	4004a000 00000000 00000004 00000002     ...@............
    b1e4:	00000003 00000002 00000000 00000000     ................
	...
    b1fc:	4004a000 00000000 00000003 00000002     ...@............
    b20c:	00000003 00000001 00000000 00000000     ................
	...
    b224:	4004a000 00000000 00000002 00000002     ...@............
    b234:	00000003 00000001 00000000 00000000     ................
	...
    b24c:	4004a000 00000000 00000005 00000002     ...@............
    b25c:	00000003 00000001 00000000 00000000     ................
	...
    b274:	4004a000 00000000 00000000 00000002     ...@............
    b284:	00000003 00000001 00000000 00000000     ................
	...

0000b29c <au8Port_PartitionList>:
    b29c:	00000001                                ....

0000b2a0 <au32Port_PinToPartitionMap>:
    b2a0:	00000001 00000001 00000001 00000001     ................
    b2b0:	00000001                                ....

0000b2b4 <Port_au16NoUnUsedPadsArrayDefault>:
    b2b4:	00010000 00030002 00070006 00090008     ................
    b2c4:	000c000b 000e000d 0010000f 00210011     ..............!.
    b2d4:	00270026 00290028 002b002a 002d002c     &.'.(.).*.+.,.-.
    b2e4:	002f002e 00310030 00410040 00430042     ../.0.1.@.A.B.C.
    b2f4:	00470046 00490048 004b004a 004d004c     F.G.H.I.J.K.L.M.
    b304:	004f004e 00510050 00610060 00630062     N.O.P.Q.`.a.b.c.
    b314:	00650064 00670066 00690068 006b006a     d.e.f.g.h.i.j.k.
    b324:	006d006c 006f006e 00710070 00810080     l.m.n.o.p.q.....
    b334:	00830082 00850084 00870086 00890088     ................
    b344:	008b008a 008d008c 008f008e 00000090     ................

0000b354 <Port_UnUsedPin>:
    b354:	00000100 00000001 00000000              ............

0000b360 <Port_aPinConfigDefault>:
    b360:	00000024 00000300 00000000 00000002     $...............
    b370:	00010000 00000023 00000300 00000000     ....#...........
    b380:	00000001 00010000 00000022 00000300     ........".......
    b390:	00000000 00000001 00010000 00000025     ............%...
    b3a0:	00000300 00000000 00000001 00010000     ................
    b3b0:	00000020 00000300 00000000 00000001      ...............
    b3c0:	00010000                                ....

0000b3c4 <Port_Config>:
    b3c4:	004f0005 0000b2b4 0000b354 0000b360     ..O.....T...`...
	...
    b3dc:	0000b2a0 0000b29c 0000b1d4              ............

0000b3e8 <Power_Ip_RCM_ConfigPB>:
	...

0000b3f0 <Power_Ip_PMC_ConfigPB>:
    b3f0:	00000000                                ....

0000b3f4 <Power_Ip_SMC_ConfigPB>:
    b3f4:	00000000                                ....

0000b3f8 <Power_Ip_aModeConfigPB>:
	...

0000b404 <Power_Ip_HwIPsConfigPB>:
    b404:	0000b3e8 0000b3f0 0000b3f4              ............

0000b410 <Spi_ExternalDeviceConfig_SpiExternalDevice_0>:
	...
    b418:	0000b168 00000000                       h.......

0000b420 <Spi_ExternalDeviceConfig_SpiExternalDevice_1>:
	...
    b428:	0000b178 00000000                       x.......

0000b430 <Spi_aExternalDeviceConfigList>:
    b430:	0000b410 0000b420                       .... ...

0000b438 <Spi_HwUnitConfig_SpiPhyUnit_0>:
	...
    b444:	0000b188 00000001                       ........

0000b44c <Spi_aHwUnitConfigList>:
    b44c:	0000b438                                8...

0000b450 <Spi_ChannelConfig_SpiChannel_0>:
    b450:	00000001 00000008 00000001 00000004     ................
    b460:	1fff8f00 00000000 1fff8d5c              ........\...

0000b46c <Spi_ChannelConfig_SpiChannel_1>:
    b46c:	00000001 00000008 00000001 00000004     ................
    b47c:	1fff8f0c 00000000 1fff8d60              ........`...

0000b488 <Spi_aChannelConfigList>:
    b488:	0000b450 0000b46c                       P...l...

0000b490 <Spi_SpiJob_0_ChannelAssignment>:
    b490:	00000000                                ....

0000b494 <Spi_SpiJob_1_ChannelAssignment>:
    b494:	00000001                                ....

0000b498 <Spi_JobConfig_SpiJob_0>:
    b498:	00000001 0000b490 00000000 00000000     ................
	...
    b4b0:	1fff8d54 00000000 0000b430              T.......0...

0000b4bc <Spi_JobConfig_SpiJob_1>:
    b4bc:	00000001 0000b494 00000000 00000000     ................
	...
    b4d4:	1fff8d58 00000100 0000b434              X.......4...

0000b4e0 <Spi_aJobConfigList>:
    b4e0:	0000b498 0000b4bc                       ........

0000b4e8 <Spi_SpiSequence_0_JobAssignment>:
    b4e8:	00010000                                ....

0000b4ec <Spi_SequenceConfig_SpiSequence_0>:
    b4ec:	00000002 00000000 0000b4e8 00000000     ................
    b4fc:	00000000                                ....

0000b500 <Spi_aSequenceConfigList>:
    b500:	0000b4ec                                ....

0000b504 <Spi_Config>:
    b504:	00010002 00000001 00000000 0000b488     ................
    b514:	0000b4e0 0000b500 0000b430 0000b44c     ........0...L...

0000b524 <_aInitStr.0>:
    b524:	00000000 54540000 45522052 53454747     ......TTR REGGES
    b534:	00000000                                ....

0000b538 <_aV2C.0>:
    b538:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0000b548 <__INIT_TABLE>:
    b548:	00000002 	.word	0x00000002
    b54c:	1fff8b10 	.word	0x1fff8b10
    b550:	0000b570 	.word	0x0000b570
    b554:	0000b594 	.word	0x0000b594
    b558:	1fff8800 	.word	0x1fff8800
    b55c:	00000000 	.word	0x00000000
    b560:	00000310 	.word	0x00000310

0000b564 <__ZERO_TABLE>:
    b564:	00000001 	.word	0x00000001
    b568:	1fff8b40 	.word	0x1fff8b40
    b56c:	1fff93d0 	.word	0x1fff93d0
