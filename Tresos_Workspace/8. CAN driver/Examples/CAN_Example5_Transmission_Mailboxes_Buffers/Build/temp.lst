
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000c17 	.word	0x00000c17
  10:	00000c19 	.word	0x00000c19
  14:	00000c1b 	.word	0x00000c1b
  18:	00000c1d 	.word	0x00000c1d
	...
  2c:	00000c1f 	.word	0x00000c1f
  30:	00000c21 	.word	0x00000c21
  34:	00000000 	.word	0x00000000
  38:	00000c23 	.word	0x00000c23
  3c:	00000c25 	.word	0x00000c25
  40:	00000c27 	.word	0x00000c27
  44:	00000c27 	.word	0x00000c27
  48:	00000c27 	.word	0x00000c27
  4c:	00000c27 	.word	0x00000c27
  50:	00000c27 	.word	0x00000c27
  54:	00000c27 	.word	0x00000c27
  58:	00000c27 	.word	0x00000c27
  5c:	00000c27 	.word	0x00000c27
  60:	00000c27 	.word	0x00000c27
  64:	00000c27 	.word	0x00000c27
  68:	00000c27 	.word	0x00000c27
  6c:	00000c27 	.word	0x00000c27
  70:	00000c27 	.word	0x00000c27
  74:	00000c27 	.word	0x00000c27
  78:	00000c27 	.word	0x00000c27
  7c:	00000c27 	.word	0x00000c27
  80:	00000c27 	.word	0x00000c27
  84:	00000c27 	.word	0x00000c27
  88:	00000c27 	.word	0x00000c27
  8c:	00000c27 	.word	0x00000c27
  90:	00000c27 	.word	0x00000c27
  94:	00000c27 	.word	0x00000c27
  98:	00000c27 	.word	0x00000c27
  9c:	00000c27 	.word	0x00000c27
  a0:	00000c27 	.word	0x00000c27
  a4:	00000c27 	.word	0x00000c27
  a8:	00000c27 	.word	0x00000c27
  ac:	00000c27 	.word	0x00000c27
  b0:	00000c27 	.word	0x00000c27
  b4:	00000c27 	.word	0x00000c27
  b8:	00000c27 	.word	0x00000c27
  bc:	00000c27 	.word	0x00000c27
  c0:	00000c27 	.word	0x00000c27
  c4:	00000c27 	.word	0x00000c27
  c8:	00000c27 	.word	0x00000c27
  cc:	00000c27 	.word	0x00000c27
  d0:	00000c27 	.word	0x00000c27
  d4:	00000c27 	.word	0x00000c27
  d8:	00000c27 	.word	0x00000c27
  dc:	00000c27 	.word	0x00000c27
  e0:	00000c27 	.word	0x00000c27
  e4:	00000c27 	.word	0x00000c27
  e8:	00000c27 	.word	0x00000c27
  ec:	00000c27 	.word	0x00000c27
  f0:	00000c27 	.word	0x00000c27
  f4:	00000c27 	.word	0x00000c27
  f8:	00000c27 	.word	0x00000c27
  fc:	00000c27 	.word	0x00000c27
 100:	00000c27 	.word	0x00000c27
 104:	00000c27 	.word	0x00000c27
 108:	00000c27 	.word	0x00000c27
 10c:	00000c27 	.word	0x00000c27
 110:	00000c27 	.word	0x00000c27
 114:	00000c27 	.word	0x00000c27
 118:	00000c27 	.word	0x00000c27
 11c:	00000c27 	.word	0x00000c27
 120:	00000c27 	.word	0x00000c27
 124:	00000c27 	.word	0x00000c27
 128:	00000c27 	.word	0x00000c27
 12c:	00000c27 	.word	0x00000c27
 130:	00000c27 	.word	0x00000c27
 134:	00000c27 	.word	0x00000c27
 138:	00000c27 	.word	0x00000c27
 13c:	00000c27 	.word	0x00000c27
 140:	00000c27 	.word	0x00000c27
 144:	00000c27 	.word	0x00000c27
 148:	00000c27 	.word	0x00000c27
 14c:	00000c27 	.word	0x00000c27
 150:	00000c27 	.word	0x00000c27
 154:	00000c27 	.word	0x00000c27
 158:	00000c27 	.word	0x00000c27
 15c:	00000c27 	.word	0x00000c27
 160:	00000c27 	.word	0x00000c27
 164:	00000c27 	.word	0x00000c27
 168:	00000c27 	.word	0x00000c27
 16c:	00000c27 	.word	0x00000c27
 170:	00000c27 	.word	0x00000c27
 174:	00000c27 	.word	0x00000c27
 178:	00000c27 	.word	0x00000c27
 17c:	00000c27 	.word	0x00000c27
 180:	00000c27 	.word	0x00000c27
 184:	00000c27 	.word	0x00000c27
 188:	00000c27 	.word	0x00000c27
 18c:	00000c27 	.word	0x00000c27
 190:	00000c27 	.word	0x00000c27
 194:	00000c27 	.word	0x00000c27
 198:	00000c27 	.word	0x00000c27
 19c:	00000c27 	.word	0x00000c27
 1a0:	00000c27 	.word	0x00000c27
 1a4:	00000c27 	.word	0x00000c27
 1a8:	00000c27 	.word	0x00000c27
 1ac:	00000c27 	.word	0x00000c27
 1b0:	00000c27 	.word	0x00000c27
 1b4:	00000c27 	.word	0x00000c27
 1b8:	00000c27 	.word	0x00000c27
 1bc:	00000c27 	.word	0x00000c27
 1c0:	00000c27 	.word	0x00000c27
 1c4:	00000c27 	.word	0x00000c27
 1c8:	00000c27 	.word	0x00000c27
 1cc:	00000c27 	.word	0x00000c27
 1d0:	00000c27 	.word	0x00000c27
 1d4:	00000c27 	.word	0x00000c27
 1d8:	00000c27 	.word	0x00000c27
 1dc:	00000c27 	.word	0x00000c27
 1e0:	00000c27 	.word	0x00000c27
 1e4:	00000c27 	.word	0x00000c27
 1e8:	00000c27 	.word	0x00000c27
 1ec:	00000c27 	.word	0x00000c27
 1f0:	00000c27 	.word	0x00000c27
 1f4:	00000c27 	.word	0x00000c27
 1f8:	00000c27 	.word	0x00000c27
 1fc:	00000c27 	.word	0x00000c27
 200:	00000c27 	.word	0x00000c27
 204:	00000c27 	.word	0x00000c27
 208:	00000c27 	.word	0x00000c27
 20c:	00000c27 	.word	0x00000c27
 210:	00000c27 	.word	0x00000c27
 214:	00000c27 	.word	0x00000c27
 218:	00000c27 	.word	0x00000c27
 21c:	00000c27 	.word	0x00000c27
 220:	00000c27 	.word	0x00000c27
 224:	00000c27 	.word	0x00000c27
 228:	00000c27 	.word	0x00000c27
 22c:	00000c27 	.word	0x00000c27
 230:	00000c27 	.word	0x00000c27
 234:	00000c27 	.word	0x00000c27
 238:	00000c27 	.word	0x00000c27
 23c:	00000c27 	.word	0x00000c27
 240:	00000c27 	.word	0x00000c27
 244:	00000c27 	.word	0x00000c27
 248:	00000c27 	.word	0x00000c27
 24c:	00000c27 	.word	0x00000c27
 250:	00000c27 	.word	0x00000c27
 254:	00000c27 	.word	0x00000c27
 258:	00000c27 	.word	0x00000c27
 25c:	00000c27 	.word	0x00000c27
 260:	00000c27 	.word	0x00000c27
 264:	00000c27 	.word	0x00000c27
 268:	00000c27 	.word	0x00000c27
 26c:	00000c27 	.word	0x00000c27
 270:	00000c27 	.word	0x00000c27
 274:	00000c27 	.word	0x00000c27
 278:	00000c27 	.word	0x00000c27
 27c:	00000c27 	.word	0x00000c27
 280:	00000c27 	.word	0x00000c27
 284:	00000c27 	.word	0x00000c27
 288:	00000c27 	.word	0x00000c27
 28c:	00000c27 	.word	0x00000c27
 290:	00000c27 	.word	0x00000c27
 294:	00000c27 	.word	0x00000c27
 298:	00000c27 	.word	0x00000c27
 29c:	00000c27 	.word	0x00000c27
 2a0:	00000c27 	.word	0x00000c27
 2a4:	00000c27 	.word	0x00000c27
 2a8:	00000c27 	.word	0x00000c27
 2ac:	00000c27 	.word	0x00000c27
 2b0:	00000c27 	.word	0x00000c27
 2b4:	00000c27 	.word	0x00000c27
 2b8:	00000c27 	.word	0x00000c27
 2bc:	00000c27 	.word	0x00000c27
 2c0:	00000c27 	.word	0x00000c27
 2c4:	00000c27 	.word	0x00000c27
 2c8:	00000c27 	.word	0x00000c27
 2cc:	00000c27 	.word	0x00000c27
 2d0:	00000c27 	.word	0x00000c27
 2d4:	00000c27 	.word	0x00000c27
 2d8:	00000c27 	.word	0x00000c27
 2dc:	00000c27 	.word	0x00000c27
 2e0:	00000c27 	.word	0x00000c27
 2e4:	00000c27 	.word	0x00000c27
 2e8:	00000c27 	.word	0x00000c27
 2ec:	00000c27 	.word	0x00000c27
 2f0:	00000c27 	.word	0x00000c27
 2f4:	00000c27 	.word	0x00000c27
 2f8:	00000c27 	.word	0x00000c27
 2fc:	00000c27 	.word	0x00000c27
 300:	00000c27 	.word	0x00000c27
 304:	00000c27 	.word	0x00000c27
 308:	00000c27 	.word	0x00000c27
 30c:	00000c27 	.word	0x00000c27

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 faff 	bl	a84 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fbbe 	bl	c0c <startup_go_to_user_mode>
     490:	f000 fa66 	bl	960 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff9184 	.word	0x1fff9184

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fb09 	bl	bb0 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__BSS_SRAM_SIZE+0x1e>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__BSS_SRAM_SIZE+0x5a>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__BSS_SRAM_SIZE+0x20c>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__BSS_SRAM_SIZE+0x20c>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__BSS_SRAM_SIZE+0x8>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__BSS_SRAM_SIZE+0x210>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__BSS_SRAM_SIZE+0x210>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__BSS_SRAM_SIZE+0x1a>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__BSS_SRAM_SIZE+0x34>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__BSS_SRAM_SIZE+0x206>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__BSS_SRAM_SIZE+0xd0>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__BSS_SRAM_SIZE+0x46>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__BSS_SRAM_SIZE+0x244>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__BSS_SRAM_SIZE+0x1a>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__BSS_SRAM_SIZE+0x1a>
     6ba:	b902      	cbnz	r2, 6be <__BSS_SRAM_SIZE+0x5e>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__BSS_SRAM_SIZE+0x184>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__BSS_SRAM_SIZE+0x9e>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__BSS_SRAM_SIZE+0x9c>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__BSS_SRAM_SIZE+0x23c>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__BSS_SRAM_SIZE+0xc8>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__BSS_SRAM_SIZE+0xc6>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__BSS_SRAM_SIZE+0x236>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__BSS_SRAM_SIZE+0x10>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__BSS_SRAM_SIZE+0x128>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__BSS_SRAM_SIZE+0x232>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__BSS_SRAM_SIZE+0x232>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__BSS_SRAM_SIZE+0x150>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__BSS_SRAM_SIZE+0x22a>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__BSS_SRAM_SIZE+0x22a>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__BSS_SRAM_SIZE+0x218>
     7c4:	d056      	beq.n	874 <__BSS_SRAM_SIZE+0x214>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__BSS_SRAM_SIZE+0x248>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__BSS_SRAM_SIZE+0x1a>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__BSS_SRAM_SIZE+0x1d0>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__BSS_SRAM_SIZE+0x22e>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__BSS_SRAM_SIZE+0x22e>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__BSS_SRAM_SIZE+0x1fe>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__BSS_SRAM_SIZE+0x226>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__BSS_SRAM_SIZE+0x226>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__BSS_SRAM_SIZE+0x76>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__BSS_SRAM_SIZE+0x1a>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__BSS_SRAM_SIZE+0x8>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__BSS_SRAM_SIZE+0x166>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__BSS_SRAM_SIZE+0x166>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__BSS_SRAM_SIZE+0x1fe>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__BSS_SRAM_SIZE+0x150>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__BSS_SRAM_SIZE+0x1d0>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__BSS_SRAM_SIZE+0x128>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__BSS_SRAM_SIZE+0xc8>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__BSS_SRAM_SIZE+0x9e>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__BSS_SRAM_SIZE+0x50>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__BSS_SRAM_SIZE+0x1a>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void EcuM_Init( void );

/*this is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f000 fc8c 	bl	11e0 <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f000 fc3c 	bl	1148 <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do{
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f000 fc4c 	bl	117a <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }
    while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <CanIf_ControllerBusOff>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerBusOff(uint8 ControllerId)
{
     8fc:	b082      	sub	sp, #8
     8fe:	4603      	mov	r3, r0
     900:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
     904:	bf00      	nop
     906:	b002      	add	sp, #8
     908:	4770      	bx	lr

0000090a <CanIf_ControllerModeIndication>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerModeIndication(uint8 ControllerId, Can_ControllerStateType ControllerMode )
{
     90a:	b082      	sub	sp, #8
     90c:	4603      	mov	r3, r0
     90e:	9100      	str	r1, [sp, #0]
     910:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)ControllerMode;
}
     914:	bf00      	nop
     916:	b002      	add	sp, #8
     918:	4770      	bx	lr
	...

0000091c <CanIf_TxConfirmation>:

/*CanIf callback function implementation to set the flag when a message is transmited
this function is called by the interrupt function three times, once every message has
been transmitterd. In reality this function is already implemented in CanIf layer*/
void CanIf_TxConfirmation( PduIdType CanTxPduId )
{
     91c:	b082      	sub	sp, #8
     91e:	4603      	mov	r3, r0
     920:	f8ad 3006 	strh.w	r3, [sp, #6]
    static uint8 counter = 0;
    counter++;
     924:	4b09      	ldr	r3, [pc, #36]	; (94c <CanIf_TxConfirmation+0x30>)
     926:	781b      	ldrb	r3, [r3, #0]
     928:	3301      	adds	r3, #1
     92a:	b2da      	uxtb	r2, r3
     92c:	4b07      	ldr	r3, [pc, #28]	; (94c <CanIf_TxConfirmation+0x30>)
     92e:	701a      	strb	r2, [r3, #0]
    if(counter == 3)
     930:	4b06      	ldr	r3, [pc, #24]	; (94c <CanIf_TxConfirmation+0x30>)
     932:	781b      	ldrb	r3, [r3, #0]
     934:	2b03      	cmp	r3, #3
     936:	d105      	bne.n	944 <CanIf_TxConfirmation+0x28>
    {
        counter = 0;
     938:	4b04      	ldr	r3, [pc, #16]	; (94c <CanIf_TxConfirmation+0x30>)
     93a:	2200      	movs	r2, #0
     93c:	701a      	strb	r2, [r3, #0]
        CanIf_bTxFlag = TRUE;
     93e:	4b04      	ldr	r3, [pc, #16]	; (950 <CanIf_TxConfirmation+0x34>)
     940:	2201      	movs	r2, #1
     942:	701a      	strb	r2, [r3, #0]
    }
    (void)CanTxPduId;
}
     944:	bf00      	nop
     946:	b002      	add	sp, #8
     948:	4770      	bx	lr
     94a:	bf00      	nop
     94c:	1fff8b31 	.word	0x1fff8b31
     950:	1fff8b30 	.word	0x1fff8b30

00000954 <CanIf_RxIndication>:

/*CanIf callback function implementation to set the flag when a message is received
this function is called by the CAN interrupt.
In reality this function is already implemented in CanIf layer*/
void CanIf_RxIndication(const Can_HwType* Mailbox, const PduInfoType* PduInfoPtr )
{
     954:	b082      	sub	sp, #8
     956:	9001      	str	r0, [sp, #4]
     958:	9100      	str	r1, [sp, #0]
    (void)Mailbox;
    /*the received message is store in PduInfoPtr->SduDataPtr*/
    (void)PduInfoPtr;
}
     95a:	bf00      	nop
     95c:	b002      	add	sp, #8
     95e:	4770      	bx	lr

00000960 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     960:	b500      	push	{lr}
     962:	b08b      	sub	sp, #44	; 0x2c
    EcuM_Init();
     964:	f000 f854 	bl	a10 <EcuM_Init>
    Can_PduType PduInfo1;
    Can_PduType PduInfo2;
    Can_PduType PduInfo3;

    /*Start the CAN controller and make it active in the CAN bus network*/
    Can_43_FLEXCAN_SetControllerMode( CanController_0, CAN_CS_STARTED );
     968:	2101      	movs	r1, #1
     96a:	2000      	movs	r0, #0
     96c:	f005 fbea 	bl	6144 <Can_43_FLEXCAN_SetControllerMode>

    /*Fill the first PDU structure with the information to be transmitted*/
    PduInfo1.id = 0x123u;
     970:	f240 1323 	movw	r3, #291	; 0x123
     974:	9307      	str	r3, [sp, #28]
    PduInfo1.swPduHandle = 0u;
     976:	2300      	movs	r3, #0
     978:	f8ad 3020 	strh.w	r3, [sp, #32]
    PduInfo1.length = 8u;
     97c:	2308      	movs	r3, #8
     97e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    PduInfo1.sdu = Can_au8Sdu8bytes;
     982:	4b21      	ldr	r3, [pc, #132]	; (a08 <main+0xa8>)
     984:	9309      	str	r3, [sp, #36]	; 0x24
    /*Fill the second PDU structure with the information to be transmitted*/
    PduInfo2.id = 0x133u;
     986:	f240 1333 	movw	r3, #307	; 0x133
     98a:	9304      	str	r3, [sp, #16]
    PduInfo2.swPduHandle = 1u;
     98c:	2301      	movs	r3, #1
     98e:	f8ad 3014 	strh.w	r3, [sp, #20]
    PduInfo2.length = 8u;
     992:	2308      	movs	r3, #8
     994:	f88d 3016 	strb.w	r3, [sp, #22]
    PduInfo2.sdu = Can_au8Sdu8bytes;
     998:	4b1b      	ldr	r3, [pc, #108]	; (a08 <main+0xa8>)
     99a:	9306      	str	r3, [sp, #24]
    /*Fill the third PDU structure with the information to be transmitted*/
    PduInfo3.id = 0x143u;
     99c:	f240 1343 	movw	r3, #323	; 0x143
     9a0:	9301      	str	r3, [sp, #4]
    PduInfo3.swPduHandle = 2u;
     9a2:	2302      	movs	r3, #2
     9a4:	f8ad 3008 	strh.w	r3, [sp, #8]
    PduInfo3.length = 8u;
     9a8:	2308      	movs	r3, #8
     9aa:	f88d 300a 	strb.w	r3, [sp, #10]
    PduInfo3.sdu = Can_au8Sdu8bytes;
     9ae:	4b16      	ldr	r3, [pc, #88]	; (a08 <main+0xa8>)
     9b0:	9303      	str	r3, [sp, #12]

    while( 1u )
    {
        /*Set the three messages to be transmitted, all messages will be
        transmitted by the CAN interrupt*/
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo1 );
     9b2:	ab07      	add	r3, sp, #28
     9b4:	4619      	mov	r1, r3
     9b6:	2000      	movs	r0, #0
     9b8:	f005 fd86 	bl	64c8 <Can_43_FLEXCAN_Write>
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo2 );
     9bc:	ab04      	add	r3, sp, #16
     9be:	4619      	mov	r1, r3
     9c0:	2000      	movs	r0, #0
     9c2:	f005 fd81 	bl	64c8 <Can_43_FLEXCAN_Write>
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo3 );
     9c6:	ab01      	add	r3, sp, #4
     9c8:	4619      	mov	r1, r3
     9ca:	2000      	movs	r0, #0
     9cc:	f005 fd7c 	bl	64c8 <Can_43_FLEXCAN_Write>

        /*wait until the CAN interrupt transmit message, waiting is not the
        suitable way, but good enough for ilustration purposes, flag is 
        updated by the callback function CanIf_TxConfirmation*/
        while( CanIf_bTxFlag == FALSE );
     9d0:	bf00      	nop
     9d2:	4b0e      	ldr	r3, [pc, #56]	; (a0c <main+0xac>)
     9d4:	781b      	ldrb	r3, [r3, #0]
     9d6:	f083 0301 	eor.w	r3, r3, #1
     9da:	b2db      	uxtb	r3, r3
     9dc:	2b00      	cmp	r3, #0
     9de:	d1f8      	bne.n	9d2 <main+0x72>
        /*Clear the Tx flag*/
        CanIf_bTxFlag = FALSE;
     9e0:	4b0a      	ldr	r3, [pc, #40]	; (a0c <main+0xac>)
     9e2:	2200      	movs	r2, #0
     9e4:	701a      	strb	r2, [r3, #0]

        /*increase some values just for ilustration purposes*/
        Can_au8Sdu8bytes[0]++;
     9e6:	4b08      	ldr	r3, [pc, #32]	; (a08 <main+0xa8>)
     9e8:	781b      	ldrb	r3, [r3, #0]
     9ea:	3301      	adds	r3, #1
     9ec:	b2da      	uxtb	r2, r3
     9ee:	4b06      	ldr	r3, [pc, #24]	; (a08 <main+0xa8>)
     9f0:	701a      	strb	r2, [r3, #0]
        Can_au8Sdu8bytes[7]++;
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <main+0xa8>)
     9f4:	79db      	ldrb	r3, [r3, #7]
     9f6:	3301      	adds	r3, #1
     9f8:	b2da      	uxtb	r2, r3
     9fa:	4b03      	ldr	r3, [pc, #12]	; (a08 <main+0xa8>)
     9fc:	71da      	strb	r2, [r3, #7]
        
        Delay( 5000u );
     9fe:	f241 3088 	movw	r0, #5000	; 0x1388
     a02:	f7ff ff55 	bl	8b0 <Delay>
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo1 );
     a06:	e7d4      	b.n	9b2 <main+0x52>
     a08:	1fff8b10 	.word	0x1fff8b10
     a0c:	1fff8b30 	.word	0x1fff8b30

00000a10 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     a10:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     a12:	480b      	ldr	r0, [pc, #44]	; (a40 <EcuM_Init+0x30>)
     a14:	f004 f924 	bl	4c60 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     a18:	2000      	movs	r0, #0
     a1a:	f004 f975 	bl	4d08 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     a1e:	2000      	movs	r0, #0
     a20:	f004 f996 	bl	4d50 <Mcu_SetMode>
    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     a24:	2000      	movs	r0, #0
     a26:	f000 fb86 	bl	1136 <OsIf_Init>
    
    /*enable and setup interrupts in use by the Can Driver*/
    Platform_Init( NULL_PTR );
     a2a:	2000      	movs	r0, #0
     a2c:	f000 fa80 	bl	f30 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration*/
    Port_Init( &Port_Config );
     a30:	4804      	ldr	r0, [pc, #16]	; (a44 <EcuM_Init+0x34>)
     a32:	f004 fd17 	bl	5464 <Port_Init>

    /*init the FlexCAN2 with the paramters set in Tresos WITHOUT loop back mode*/
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );
     a36:	4804      	ldr	r0, [pc, #16]	; (a48 <EcuM_Init+0x38>)
     a38:	f005 fb16 	bl	6068 <Can_43_FLEXCAN_Init>
}
     a3c:	bf00      	nop
     a3e:	bd08      	pop	{r3, pc}
     a40:	0000ebe8 	.word	0x0000ebe8
     a44:	0000ed94 	.word	0x0000ed94
     a48:	0000e75c 	.word	0x0000e75c

00000a4c <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     a4c:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a4e:	f3ef 8310 	mrs	r3, PRIMASK
     a52:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a54:	4623      	mov	r3, r4
}
     a56:	4618      	mov	r0, r3
     a58:	f85d 4b04 	ldr.w	r4, [sp], #4
     a5c:	4770      	bx	lr

00000a5e <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a5e:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a60:	f3ef 8310 	mrs	r3, PRIMASK
     a64:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a66:	4623      	mov	r3, r4
}
     a68:	4618      	mov	r0, r3
     a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
     a6e:	4770      	bx	lr

00000a70 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     a70:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a72:	f3ef 8310 	mrs	r3, PRIMASK
     a76:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a78:	4623      	mov	r3, r4
}
     a7a:	4618      	mov	r0, r3
     a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
     a80:	4770      	bx	lr
	...

00000a84 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a84:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a86:	2300      	movs	r3, #0
     a88:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a8a:	2300      	movs	r3, #0
     a8c:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a8e:	2300      	movs	r3, #0
     a90:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a92:	2300      	movs	r3, #0
     a94:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a96:	4b44      	ldr	r3, [pc, #272]	; (ba8 <init_data_bss+0x124>)
     a98:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a9a:	4b44      	ldr	r3, [pc, #272]	; (bac <init_data_bss+0x128>)
     a9c:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a9e:	9b05      	ldr	r3, [sp, #20]
     aa0:	681b      	ldr	r3, [r3, #0]
     aa2:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     aa4:	9b05      	ldr	r3, [sp, #20]
     aa6:	3304      	adds	r3, #4
     aa8:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     aaa:	9b05      	ldr	r3, [sp, #20]
     aac:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     aae:	2300      	movs	r3, #0
     ab0:	9309      	str	r3, [sp, #36]	; 0x24
     ab2:	e03d      	b.n	b30 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ab6:	4613      	mov	r3, r2
     ab8:	005b      	lsls	r3, r3, #1
     aba:	4413      	add	r3, r2
     abc:	009b      	lsls	r3, r3, #2
     abe:	461a      	mov	r2, r3
     ac0:	9b03      	ldr	r3, [sp, #12]
     ac2:	4413      	add	r3, r2
     ac4:	685b      	ldr	r3, [r3, #4]
     ac6:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aca:	4613      	mov	r3, r2
     acc:	005b      	lsls	r3, r3, #1
     ace:	4413      	add	r3, r2
     ad0:	009b      	lsls	r3, r3, #2
     ad2:	461a      	mov	r2, r3
     ad4:	9b03      	ldr	r3, [sp, #12]
     ad6:	4413      	add	r3, r2
     ad8:	681b      	ldr	r3, [r3, #0]
     ada:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ade:	4613      	mov	r3, r2
     ae0:	005b      	lsls	r3, r3, #1
     ae2:	4413      	add	r3, r2
     ae4:	009b      	lsls	r3, r3, #2
     ae6:	461a      	mov	r2, r3
     ae8:	9b03      	ldr	r3, [sp, #12]
     aea:	4413      	add	r3, r2
     aec:	689b      	ldr	r3, [r3, #8]
     aee:	4619      	mov	r1, r3
     af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     af2:	4613      	mov	r3, r2
     af4:	005b      	lsls	r3, r3, #1
     af6:	4413      	add	r3, r2
     af8:	009b      	lsls	r3, r3, #2
     afa:	461a      	mov	r2, r3
     afc:	9b03      	ldr	r3, [sp, #12]
     afe:	4413      	add	r3, r2
     b00:	685b      	ldr	r3, [r3, #4]
     b02:	1acb      	subs	r3, r1, r3
     b04:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b06:	2300      	movs	r3, #0
     b08:	9308      	str	r3, [sp, #32]
     b0a:	e00a      	b.n	b22 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     b0c:	9a00      	ldr	r2, [sp, #0]
     b0e:	9b08      	ldr	r3, [sp, #32]
     b10:	441a      	add	r2, r3
     b12:	9901      	ldr	r1, [sp, #4]
     b14:	9b08      	ldr	r3, [sp, #32]
     b16:	440b      	add	r3, r1
     b18:	7812      	ldrb	r2, [r2, #0]
     b1a:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b1c:	9b08      	ldr	r3, [sp, #32]
     b1e:	3301      	adds	r3, #1
     b20:	9308      	str	r3, [sp, #32]
     b22:	9a08      	ldr	r2, [sp, #32]
     b24:	9b06      	ldr	r3, [sp, #24]
     b26:	429a      	cmp	r2, r3
     b28:	d3f0      	bcc.n	b0c <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b2c:	3301      	adds	r3, #1
     b2e:	9309      	str	r3, [sp, #36]	; 0x24
     b30:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b32:	9b07      	ldr	r3, [sp, #28]
     b34:	429a      	cmp	r2, r3
     b36:	d3bd      	bcc.n	ab4 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     b38:	9b04      	ldr	r3, [sp, #16]
     b3a:	681b      	ldr	r3, [r3, #0]
     b3c:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b3e:	9b04      	ldr	r3, [sp, #16]
     b40:	3304      	adds	r3, #4
     b42:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b44:	9b04      	ldr	r3, [sp, #16]
     b46:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b48:	2300      	movs	r3, #0
     b4a:	9309      	str	r3, [sp, #36]	; 0x24
     b4c:	e024      	b.n	b98 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b50:	00db      	lsls	r3, r3, #3
     b52:	9a02      	ldr	r2, [sp, #8]
     b54:	4413      	add	r3, r2
     b56:	681b      	ldr	r3, [r3, #0]
     b58:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b5c:	00db      	lsls	r3, r3, #3
     b5e:	9a02      	ldr	r2, [sp, #8]
     b60:	4413      	add	r3, r2
     b62:	685b      	ldr	r3, [r3, #4]
     b64:	4619      	mov	r1, r3
     b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b68:	00db      	lsls	r3, r3, #3
     b6a:	9a02      	ldr	r2, [sp, #8]
     b6c:	4413      	add	r3, r2
     b6e:	681b      	ldr	r3, [r3, #0]
     b70:	1acb      	subs	r3, r1, r3
     b72:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b74:	2300      	movs	r3, #0
     b76:	9308      	str	r3, [sp, #32]
     b78:	e007      	b.n	b8a <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b7a:	9a01      	ldr	r2, [sp, #4]
     b7c:	9b08      	ldr	r3, [sp, #32]
     b7e:	4413      	add	r3, r2
     b80:	2200      	movs	r2, #0
     b82:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b84:	9b08      	ldr	r3, [sp, #32]
     b86:	3301      	adds	r3, #1
     b88:	9308      	str	r3, [sp, #32]
     b8a:	9a08      	ldr	r2, [sp, #32]
     b8c:	9b06      	ldr	r3, [sp, #24]
     b8e:	429a      	cmp	r2, r3
     b90:	d3f3      	bcc.n	b7a <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b94:	3301      	adds	r3, #1
     b96:	9309      	str	r3, [sp, #36]	; 0x24
     b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b9a:	9b07      	ldr	r3, [sp, #28]
     b9c:	429a      	cmp	r2, r3
     b9e:	d3d6      	bcc.n	b4e <init_data_bss+0xca>
        }
    }
}
     ba0:	bf00      	nop
     ba2:	bf00      	nop
     ba4:	b00a      	add	sp, #40	; 0x28
     ba6:	4770      	bx	lr
     ba8:	0000ede0 	.word	0x0000ede0
     bac:	0000edfc 	.word	0x0000edfc

00000bb0 <sys_m4_cache_init>:
{
     bb0:	b084      	sub	sp, #16
     bb2:	4603      	mov	r3, r0
     bb4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     bb8:	2300      	movs	r3, #0
     bba:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     bbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bc2:	2b00      	cmp	r3, #0
     bc4:	d118      	bne.n	bf8 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     bc6:	4b10      	ldr	r3, [pc, #64]	; (c08 <sys_m4_cache_init+0x58>)
     bc8:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     bcc:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     bce:	4b0e      	ldr	r3, [pc, #56]	; (c08 <sys_m4_cache_init+0x58>)
     bd0:	681b      	ldr	r3, [r3, #0]
     bd2:	4a0d      	ldr	r2, [pc, #52]	; (c08 <sys_m4_cache_init+0x58>)
     bd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     bd8:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     bda:	bf00      	nop
     bdc:	4b0a      	ldr	r3, [pc, #40]	; (c08 <sys_m4_cache_init+0x58>)
     bde:	681b      	ldr	r3, [r3, #0]
     be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     be8:	d0f8      	beq.n	bdc <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     bea:	4b07      	ldr	r3, [pc, #28]	; (c08 <sys_m4_cache_init+0x58>)
     bec:	681b      	ldr	r3, [r3, #0]
     bee:	4a06      	ldr	r2, [pc, #24]	; (c08 <sys_m4_cache_init+0x58>)
     bf0:	f043 0301 	orr.w	r3, r3, #1
     bf4:	6013      	str	r3, [r2, #0]
     bf6:	e002      	b.n	bfe <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     bf8:	2301      	movs	r3, #1
     bfa:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     bfe:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     c02:	4618      	mov	r0, r3
     c04:	b004      	add	sp, #16
     c06:	4770      	bx	lr
     c08:	e0082000 	.word	0xe0082000

00000c0c <startup_go_to_user_mode>:
}
     c0c:	bf00      	nop
     c0e:	4770      	bx	lr

00000c10 <Sys_GetCoreID>:
    return 0U;
     c10:	2300      	movs	r3, #0
}
     c12:	4618      	mov	r0, r3
     c14:	4770      	bx	lr

00000c16 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     c16:	e7fe      	b.n	c16 <HardFault_Handler>

00000c18 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     c18:	e7fe      	b.n	c18 <MemManage_Handler>

00000c1a <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     c1a:	e7fe      	b.n	c1a <BusFault_Handler>

00000c1c <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     c1c:	e7fe      	b.n	c1c <UsageFault_Handler>

00000c1e <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     c1e:	e7fe      	b.n	c1e <SVC_Handler>

00000c20 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     c20:	e7fe      	b.n	c20 <DebugMon_Handler>

00000c22 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     c22:	e7fe      	b.n	c22 <PendSV_Handler>

00000c24 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     c24:	e7fe      	b.n	c24 <SysTick_Handler>

00000c26 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     c26:	e7fe      	b.n	c26 <undefined_handler>

00000c28 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     c28:	b086      	sub	sp, #24
     c2a:	9003      	str	r0, [sp, #12]
     c2c:	9102      	str	r1, [sp, #8]
     c2e:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
     c30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     c34:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
     c38:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
     c3a:	9b01      	ldr	r3, [sp, #4]
     c3c:	2b00      	cmp	r3, #0
     c3e:	d007      	beq.n	c50 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
     c40:	9b03      	ldr	r3, [sp, #12]
     c42:	3310      	adds	r3, #16
     c44:	009b      	lsls	r3, r3, #2
     c46:	9a05      	ldr	r2, [sp, #20]
     c48:	4413      	add	r3, r2
     c4a:	681a      	ldr	r2, [r3, #0]
     c4c:	9b01      	ldr	r3, [sp, #4]
     c4e:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
     c50:	9b03      	ldr	r3, [sp, #12]
     c52:	3310      	adds	r3, #16
     c54:	009b      	lsls	r3, r3, #2
     c56:	9a05      	ldr	r2, [sp, #20]
     c58:	4413      	add	r3, r2
     c5a:	9a02      	ldr	r2, [sp, #8]
     c5c:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
     c5e:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
     c62:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
     c66:	bf00      	nop
     c68:	b006      	add	sp, #24
     c6a:	4770      	bx	lr

00000c6c <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c6c:	b082      	sub	sp, #8
     c6e:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c70:	9b01      	ldr	r3, [sp, #4]
     c72:	f003 021f 	and.w	r2, r3, #31
     c76:	4905      	ldr	r1, [pc, #20]	; (c8c <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
     c78:	9b01      	ldr	r3, [sp, #4]
     c7a:	095b      	lsrs	r3, r3, #5
     c7c:	2001      	movs	r0, #1
     c7e:	fa00 f202 	lsl.w	r2, r0, r2
     c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     c86:	bf00      	nop
     c88:	b002      	add	sp, #8
     c8a:	4770      	bx	lr
     c8c:	e000e100 	.word	0xe000e100

00000c90 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
     c90:	b082      	sub	sp, #8
     c92:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     c94:	9b01      	ldr	r3, [sp, #4]
     c96:	f003 021f 	and.w	r2, r3, #31
     c9a:	4906      	ldr	r1, [pc, #24]	; (cb4 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
     c9c:	9b01      	ldr	r3, [sp, #4]
     c9e:	095b      	lsrs	r3, r3, #5
     ca0:	2001      	movs	r0, #1
     ca2:	fa00 f202 	lsl.w	r2, r0, r2
     ca6:	3320      	adds	r3, #32
     ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
     cac:	bf00      	nop
     cae:	b002      	add	sp, #8
     cb0:	4770      	bx	lr
     cb2:	bf00      	nop
     cb4:	e000e100 	.word	0xe000e100

00000cb8 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     cb8:	b084      	sub	sp, #16
     cba:	9001      	str	r0, [sp, #4]
     cbc:	460b      	mov	r3, r1
     cbe:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     cc2:	2304      	movs	r3, #4
     cc4:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
     cc8:	f89d 2003 	ldrb.w	r2, [sp, #3]
     ccc:	f89d 300f 	ldrb.w	r3, [sp, #15]
     cd0:	fa02 f103 	lsl.w	r1, r2, r3
     cd4:	4a04      	ldr	r2, [pc, #16]	; (ce8 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
     cd6:	9b01      	ldr	r3, [sp, #4]
     cd8:	b2c9      	uxtb	r1, r1
     cda:	4413      	add	r3, r2
     cdc:	460a      	mov	r2, r1
     cde:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
     ce2:	bf00      	nop
     ce4:	b004      	add	sp, #16
     ce6:	4770      	bx	lr
     ce8:	e000e100 	.word	0xe000e100

00000cec <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
     cec:	b084      	sub	sp, #16
     cee:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
     cf0:	2304      	movs	r3, #4
     cf2:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
     cf6:	4a09      	ldr	r2, [pc, #36]	; (d1c <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
     cf8:	9b01      	ldr	r3, [sp, #4]
     cfa:	4413      	add	r3, r2
     cfc:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
     d00:	b2db      	uxtb	r3, r3
     d02:	461a      	mov	r2, r3
     d04:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d08:	fa42 f303 	asr.w	r3, r2, r3
     d0c:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
     d10:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
     d14:	4618      	mov	r0, r3
     d16:	b004      	add	sp, #16
     d18:	4770      	bx	lr
     d1a:	bf00      	nop
     d1c:	e000e100 	.word	0xe000e100

00000d20 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
     d20:	b082      	sub	sp, #8
     d22:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
     d24:	9b01      	ldr	r3, [sp, #4]
     d26:	f003 021f 	and.w	r2, r3, #31
     d2a:	4906      	ldr	r1, [pc, #24]	; (d44 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
     d2c:	9b01      	ldr	r3, [sp, #4]
     d2e:	095b      	lsrs	r3, r3, #5
     d30:	2001      	movs	r0, #1
     d32:	fa00 f202 	lsl.w	r2, r0, r2
     d36:	3360      	adds	r3, #96	; 0x60
     d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
     d3c:	bf00      	nop
     d3e:	b002      	add	sp, #8
     d40:	4770      	bx	lr
     d42:	bf00      	nop
     d44:	e000e100 	.word	0xe000e100

00000d48 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
     d48:	b500      	push	{lr}
     d4a:	b085      	sub	sp, #20
     d4c:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     d4e:	2300      	movs	r3, #0
     d50:	9303      	str	r3, [sp, #12]
     d52:	e05d      	b.n	e10 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     d54:	9b01      	ldr	r3, [sp, #4]
     d56:	6859      	ldr	r1, [r3, #4]
     d58:	9a03      	ldr	r2, [sp, #12]
     d5a:	4613      	mov	r3, r2
     d5c:	005b      	lsls	r3, r3, #1
     d5e:	4413      	add	r3, r2
     d60:	009b      	lsls	r3, r3, #2
     d62:	440b      	add	r3, r1
     d64:	681b      	ldr	r3, [r3, #0]
     d66:	4618      	mov	r0, r3
     d68:	f000 f899 	bl	e9e <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d6c:	9b01      	ldr	r3, [sp, #4]
     d6e:	6859      	ldr	r1, [r3, #4]
     d70:	9a03      	ldr	r2, [sp, #12]
     d72:	4613      	mov	r3, r2
     d74:	005b      	lsls	r3, r3, #1
     d76:	4413      	add	r3, r2
     d78:	009b      	lsls	r3, r3, #2
     d7a:	440b      	add	r3, r1
     d7c:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
     d7e:	9b01      	ldr	r3, [sp, #4]
     d80:	6859      	ldr	r1, [r3, #4]
     d82:	9a03      	ldr	r2, [sp, #12]
     d84:	4613      	mov	r3, r2
     d86:	005b      	lsls	r3, r3, #1
     d88:	4413      	add	r3, r2
     d8a:	009b      	lsls	r3, r3, #2
     d8c:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d8e:	795b      	ldrb	r3, [r3, #5]
     d90:	4619      	mov	r1, r3
     d92:	f000 f869 	bl	e68 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     d96:	9b01      	ldr	r3, [sp, #4]
     d98:	6859      	ldr	r1, [r3, #4]
     d9a:	9a03      	ldr	r2, [sp, #12]
     d9c:	4613      	mov	r3, r2
     d9e:	005b      	lsls	r3, r3, #1
     da0:	4413      	add	r3, r2
     da2:	009b      	lsls	r3, r3, #2
     da4:	440b      	add	r3, r1
     da6:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
     da8:	9b01      	ldr	r3, [sp, #4]
     daa:	6859      	ldr	r1, [r3, #4]
     dac:	9a03      	ldr	r2, [sp, #12]
     dae:	4613      	mov	r3, r2
     db0:	005b      	lsls	r3, r3, #1
     db2:	4413      	add	r3, r2
     db4:	009b      	lsls	r3, r3, #2
     db6:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
     db8:	689b      	ldr	r3, [r3, #8]
     dba:	2200      	movs	r2, #0
     dbc:	4619      	mov	r1, r3
     dbe:	f000 f831 	bl	e24 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
     dc2:	9b01      	ldr	r3, [sp, #4]
     dc4:	6859      	ldr	r1, [r3, #4]
     dc6:	9a03      	ldr	r2, [sp, #12]
     dc8:	4613      	mov	r3, r2
     dca:	005b      	lsls	r3, r3, #1
     dcc:	4413      	add	r3, r2
     dce:	009b      	lsls	r3, r3, #2
     dd0:	440b      	add	r3, r1
     dd2:	791b      	ldrb	r3, [r3, #4]
     dd4:	2b00      	cmp	r3, #0
     dd6:	d00c      	beq.n	df2 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     dd8:	9b01      	ldr	r3, [sp, #4]
     dda:	6859      	ldr	r1, [r3, #4]
     ddc:	9a03      	ldr	r2, [sp, #12]
     dde:	4613      	mov	r3, r2
     de0:	005b      	lsls	r3, r3, #1
     de2:	4413      	add	r3, r2
     de4:	009b      	lsls	r3, r3, #2
     de6:	440b      	add	r3, r1
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	4618      	mov	r0, r3
     dec:	f000 f828 	bl	e40 <IntCtrl_Ip_EnableIrq>
     df0:	e00b      	b.n	e0a <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
     df2:	9b01      	ldr	r3, [sp, #4]
     df4:	6859      	ldr	r1, [r3, #4]
     df6:	9a03      	ldr	r2, [sp, #12]
     df8:	4613      	mov	r3, r2
     dfa:	005b      	lsls	r3, r3, #1
     dfc:	4413      	add	r3, r2
     dfe:	009b      	lsls	r3, r3, #2
     e00:	440b      	add	r3, r1
     e02:	681b      	ldr	r3, [r3, #0]
     e04:	4618      	mov	r0, r3
     e06:	f000 f825 	bl	e54 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
     e0a:	9b03      	ldr	r3, [sp, #12]
     e0c:	3301      	adds	r3, #1
     e0e:	9303      	str	r3, [sp, #12]
     e10:	9b01      	ldr	r3, [sp, #4]
     e12:	681b      	ldr	r3, [r3, #0]
     e14:	9a03      	ldr	r2, [sp, #12]
     e16:	429a      	cmp	r2, r3
     e18:	d39c      	bcc.n	d54 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
     e1a:	2300      	movs	r3, #0
}
     e1c:	4618      	mov	r0, r3
     e1e:	b005      	add	sp, #20
     e20:	f85d fb04 	ldr.w	pc, [sp], #4

00000e24 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     e24:	b500      	push	{lr}
     e26:	b085      	sub	sp, #20
     e28:	9003      	str	r0, [sp, #12]
     e2a:	9102      	str	r1, [sp, #8]
     e2c:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
     e2e:	9a01      	ldr	r2, [sp, #4]
     e30:	9902      	ldr	r1, [sp, #8]
     e32:	9803      	ldr	r0, [sp, #12]
     e34:	f7ff fef8 	bl	c28 <IntCtrl_Ip_InstallHandlerPrivileged>
}
     e38:	bf00      	nop
     e3a:	b005      	add	sp, #20
     e3c:	f85d fb04 	ldr.w	pc, [sp], #4

00000e40 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
     e40:	b500      	push	{lr}
     e42:	b083      	sub	sp, #12
     e44:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
     e46:	9801      	ldr	r0, [sp, #4]
     e48:	f7ff ff10 	bl	c6c <IntCtrl_Ip_EnableIrqPrivileged>
}
     e4c:	bf00      	nop
     e4e:	b003      	add	sp, #12
     e50:	f85d fb04 	ldr.w	pc, [sp], #4

00000e54 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
     e54:	b500      	push	{lr}
     e56:	b083      	sub	sp, #12
     e58:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
     e5a:	9801      	ldr	r0, [sp, #4]
     e5c:	f7ff ff18 	bl	c90 <IntCtrl_Ip_DisableIrqPrivileged>
}
     e60:	bf00      	nop
     e62:	b003      	add	sp, #12
     e64:	f85d fb04 	ldr.w	pc, [sp], #4

00000e68 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     e68:	b500      	push	{lr}
     e6a:	b083      	sub	sp, #12
     e6c:	9001      	str	r0, [sp, #4]
     e6e:	460b      	mov	r3, r1
     e70:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
     e74:	f89d 3003 	ldrb.w	r3, [sp, #3]
     e78:	4619      	mov	r1, r3
     e7a:	9801      	ldr	r0, [sp, #4]
     e7c:	f7ff ff1c 	bl	cb8 <IntCtrl_Ip_SetPriorityPrivileged>
}
     e80:	bf00      	nop
     e82:	b003      	add	sp, #12
     e84:	f85d fb04 	ldr.w	pc, [sp], #4

00000e88 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
     e88:	b500      	push	{lr}
     e8a:	b083      	sub	sp, #12
     e8c:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
     e8e:	9801      	ldr	r0, [sp, #4]
     e90:	f7ff ff2c 	bl	cec <IntCtrl_Ip_GetPriorityPrivileged>
     e94:	4603      	mov	r3, r0
}
     e96:	4618      	mov	r0, r3
     e98:	b003      	add	sp, #12
     e9a:	f85d fb04 	ldr.w	pc, [sp], #4

00000e9e <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
     e9e:	b500      	push	{lr}
     ea0:	b083      	sub	sp, #12
     ea2:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
     ea4:	9801      	ldr	r0, [sp, #4]
     ea6:	f7ff ff3b 	bl	d20 <IntCtrl_Ip_ClearPendingPrivileged>
}
     eaa:	bf00      	nop
     eac:	b003      	add	sp, #12
     eae:	f85d fb04 	ldr.w	pc, [sp], #4
     eb2:	bf00      	nop

00000eb4 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     eb4:	b500      	push	{lr}
     eb6:	b083      	sub	sp, #12
     eb8:	9001      	str	r0, [sp, #4]
     eba:	460b      	mov	r3, r1
     ebc:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
     ec0:	f89d 3003 	ldrb.w	r3, [sp, #3]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d003      	beq.n	ed0 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
     ec8:	9801      	ldr	r0, [sp, #4]
     eca:	f7ff ffb9 	bl	e40 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
     ece:	e002      	b.n	ed6 <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
     ed0:	9801      	ldr	r0, [sp, #4]
     ed2:	f7ff ffbf 	bl	e54 <IntCtrl_Ip_DisableIrq>
}
     ed6:	bf00      	nop
     ed8:	b003      	add	sp, #12
     eda:	f85d fb04 	ldr.w	pc, [sp], #4

00000ede <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     ede:	b500      	push	{lr}
     ee0:	b083      	sub	sp, #12
     ee2:	9001      	str	r0, [sp, #4]
     ee4:	460b      	mov	r3, r1
     ee6:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
     eea:	f89d 3003 	ldrb.w	r3, [sp, #3]
     eee:	4619      	mov	r1, r3
     ef0:	9801      	ldr	r0, [sp, #4]
     ef2:	f7ff ffb9 	bl	e68 <IntCtrl_Ip_SetPriority>
}
     ef6:	bf00      	nop
     ef8:	b003      	add	sp, #12
     efa:	f85d fb04 	ldr.w	pc, [sp], #4

00000efe <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
     efe:	b500      	push	{lr}
     f00:	b083      	sub	sp, #12
     f02:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
     f04:	9801      	ldr	r0, [sp, #4]
     f06:	f7ff ffbf 	bl	e88 <IntCtrl_Ip_GetPriority>
     f0a:	4603      	mov	r3, r0
}
     f0c:	4618      	mov	r0, r3
     f0e:	b003      	add	sp, #12
     f10:	f85d fb04 	ldr.w	pc, [sp], #4

00000f14 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
     f14:	b500      	push	{lr}
     f16:	b085      	sub	sp, #20
     f18:	9003      	str	r0, [sp, #12]
     f1a:	9102      	str	r1, [sp, #8]
     f1c:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     f1e:	9a01      	ldr	r2, [sp, #4]
     f20:	9902      	ldr	r1, [sp, #8]
     f22:	9803      	ldr	r0, [sp, #12]
     f24:	f7ff ff7e 	bl	e24 <IntCtrl_Ip_InstallHandler>
}
     f28:	bf00      	nop
     f2a:	b005      	add	sp, #20
     f2c:	f85d fb04 	ldr.w	pc, [sp], #4

00000f30 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
     f30:	b500      	push	{lr}
     f32:	b085      	sub	sp, #20
     f34:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
     f36:	2300      	movs	r3, #0
     f38:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
     f3c:	f89d 300f 	ldrb.w	r3, [sp, #15]
     f40:	4a05      	ldr	r2, [pc, #20]	; (f58 <Platform_Init+0x28>)
     f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     f46:	681b      	ldr	r3, [r3, #0]
     f48:	4618      	mov	r0, r3
     f4a:	f000 f8c7 	bl	10dc <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
     f4e:	bf00      	nop
     f50:	b005      	add	sp, #20
     f52:	f85d fb04 	ldr.w	pc, [sp], #4
     f56:	bf00      	nop
     f58:	0000ec14 	.word	0x0000ec14

00000f5c <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
     f5c:	b500      	push	{lr}
     f5e:	b085      	sub	sp, #20
     f60:	9001      	str	r0, [sp, #4]
     f62:	460b      	mov	r3, r1
     f64:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f68:	2300      	movs	r3, #0
     f6a:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
     f6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f72:	4619      	mov	r1, r3
     f74:	9801      	ldr	r0, [sp, #4]
     f76:	f7ff ff9d 	bl	eb4 <Platform_Ipw_SetIrq>
    }
    return RetValue;
     f7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     f7e:	4618      	mov	r0, r3
     f80:	b005      	add	sp, #20
     f82:	f85d fb04 	ldr.w	pc, [sp], #4

00000f86 <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
     f86:	b500      	push	{lr}
     f88:	b085      	sub	sp, #20
     f8a:	9001      	str	r0, [sp, #4]
     f8c:	460b      	mov	r3, r1
     f8e:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     f92:	2300      	movs	r3, #0
     f94:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
     f98:	f89d 3003 	ldrb.w	r3, [sp, #3]
     f9c:	4619      	mov	r1, r3
     f9e:	9801      	ldr	r0, [sp, #4]
     fa0:	f7ff ff9d 	bl	ede <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
     fa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     fa8:	4618      	mov	r0, r3
     faa:	b005      	add	sp, #20
     fac:	f85d fb04 	ldr.w	pc, [sp], #4

00000fb0 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
     fb0:	b500      	push	{lr}
     fb2:	b085      	sub	sp, #20
     fb4:	9001      	str	r0, [sp, #4]
     fb6:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     fb8:	2300      	movs	r3, #0
     fba:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
     fbe:	9801      	ldr	r0, [sp, #4]
     fc0:	f7ff ff9d 	bl	efe <Platform_Ipw_GetIrqPriority>
     fc4:	4603      	mov	r3, r0
     fc6:	461a      	mov	r2, r3
     fc8:	9b00      	ldr	r3, [sp, #0]
     fca:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
     fcc:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     fd0:	4618      	mov	r0, r3
     fd2:	b005      	add	sp, #20
     fd4:	f85d fb04 	ldr.w	pc, [sp], #4

00000fd8 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
     fd8:	b500      	push	{lr}
     fda:	b087      	sub	sp, #28
     fdc:	9003      	str	r0, [sp, #12]
     fde:	9102      	str	r1, [sp, #8]
     fe0:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
     fe2:	2300      	movs	r3, #0
     fe4:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
     fe8:	9a01      	ldr	r2, [sp, #4]
     fea:	9902      	ldr	r1, [sp, #8]
     fec:	9803      	ldr	r0, [sp, #12]
     fee:	f7ff ff91 	bl	f14 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
     ff2:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
     ff6:	4618      	mov	r0, r3
     ff8:	b007      	add	sp, #28
     ffa:	f85d fb04 	ldr.w	pc, [sp], #4
     ffe:	bf00      	nop

00001000 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1000:	b500      	push	{lr}
    1002:	b085      	sub	sp, #20
    1004:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1006:	2300      	movs	r3, #0
    1008:	9303      	str	r3, [sp, #12]
    100a:	e05d      	b.n	10c8 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    100c:	9b01      	ldr	r3, [sp, #4]
    100e:	6859      	ldr	r1, [r3, #4]
    1010:	9a03      	ldr	r2, [sp, #12]
    1012:	4613      	mov	r3, r2
    1014:	005b      	lsls	r3, r3, #1
    1016:	4413      	add	r3, r2
    1018:	009b      	lsls	r3, r3, #2
    101a:	440b      	add	r3, r1
    101c:	681b      	ldr	r3, [r3, #0]
    101e:	4618      	mov	r0, r3
    1020:	f7ff ff3d 	bl	e9e <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1024:	9b01      	ldr	r3, [sp, #4]
    1026:	6859      	ldr	r1, [r3, #4]
    1028:	9a03      	ldr	r2, [sp, #12]
    102a:	4613      	mov	r3, r2
    102c:	005b      	lsls	r3, r3, #1
    102e:	4413      	add	r3, r2
    1030:	009b      	lsls	r3, r3, #2
    1032:	440b      	add	r3, r1
    1034:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1036:	9b01      	ldr	r3, [sp, #4]
    1038:	6859      	ldr	r1, [r3, #4]
    103a:	9a03      	ldr	r2, [sp, #12]
    103c:	4613      	mov	r3, r2
    103e:	005b      	lsls	r3, r3, #1
    1040:	4413      	add	r3, r2
    1042:	009b      	lsls	r3, r3, #2
    1044:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1046:	795b      	ldrb	r3, [r3, #5]
    1048:	4619      	mov	r1, r3
    104a:	f7ff ff0d 	bl	e68 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    104e:	9b01      	ldr	r3, [sp, #4]
    1050:	6859      	ldr	r1, [r3, #4]
    1052:	9a03      	ldr	r2, [sp, #12]
    1054:	4613      	mov	r3, r2
    1056:	005b      	lsls	r3, r3, #1
    1058:	4413      	add	r3, r2
    105a:	009b      	lsls	r3, r3, #2
    105c:	440b      	add	r3, r1
    105e:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1060:	9b01      	ldr	r3, [sp, #4]
    1062:	6859      	ldr	r1, [r3, #4]
    1064:	9a03      	ldr	r2, [sp, #12]
    1066:	4613      	mov	r3, r2
    1068:	005b      	lsls	r3, r3, #1
    106a:	4413      	add	r3, r2
    106c:	009b      	lsls	r3, r3, #2
    106e:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1070:	689b      	ldr	r3, [r3, #8]
    1072:	2200      	movs	r2, #0
    1074:	4619      	mov	r1, r3
    1076:	f7ff fed5 	bl	e24 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    107a:	9b01      	ldr	r3, [sp, #4]
    107c:	6859      	ldr	r1, [r3, #4]
    107e:	9a03      	ldr	r2, [sp, #12]
    1080:	4613      	mov	r3, r2
    1082:	005b      	lsls	r3, r3, #1
    1084:	4413      	add	r3, r2
    1086:	009b      	lsls	r3, r3, #2
    1088:	440b      	add	r3, r1
    108a:	791b      	ldrb	r3, [r3, #4]
    108c:	2b00      	cmp	r3, #0
    108e:	d00c      	beq.n	10aa <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1090:	9b01      	ldr	r3, [sp, #4]
    1092:	6859      	ldr	r1, [r3, #4]
    1094:	9a03      	ldr	r2, [sp, #12]
    1096:	4613      	mov	r3, r2
    1098:	005b      	lsls	r3, r3, #1
    109a:	4413      	add	r3, r2
    109c:	009b      	lsls	r3, r3, #2
    109e:	440b      	add	r3, r1
    10a0:	681b      	ldr	r3, [r3, #0]
    10a2:	4618      	mov	r0, r3
    10a4:	f7ff fecc 	bl	e40 <IntCtrl_Ip_EnableIrq>
    10a8:	e00b      	b.n	10c2 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    10aa:	9b01      	ldr	r3, [sp, #4]
    10ac:	6859      	ldr	r1, [r3, #4]
    10ae:	9a03      	ldr	r2, [sp, #12]
    10b0:	4613      	mov	r3, r2
    10b2:	005b      	lsls	r3, r3, #1
    10b4:	4413      	add	r3, r2
    10b6:	009b      	lsls	r3, r3, #2
    10b8:	440b      	add	r3, r1
    10ba:	681b      	ldr	r3, [r3, #0]
    10bc:	4618      	mov	r0, r3
    10be:	f7ff fec9 	bl	e54 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    10c2:	9b03      	ldr	r3, [sp, #12]
    10c4:	3301      	adds	r3, #1
    10c6:	9303      	str	r3, [sp, #12]
    10c8:	9b01      	ldr	r3, [sp, #4]
    10ca:	681b      	ldr	r3, [r3, #0]
    10cc:	9a03      	ldr	r2, [sp, #12]
    10ce:	429a      	cmp	r2, r3
    10d0:	d39c      	bcc.n	100c <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    10d2:	2300      	movs	r3, #0
}
    10d4:	4618      	mov	r0, r3
    10d6:	b005      	add	sp, #20
    10d8:	f85d fb04 	ldr.w	pc, [sp], #4

000010dc <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    10dc:	b500      	push	{lr}
    10de:	b085      	sub	sp, #20
    10e0:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    10e2:	2300      	movs	r3, #0
    10e4:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    10e8:	9b01      	ldr	r3, [sp, #4]
    10ea:	681b      	ldr	r3, [r3, #0]
    10ec:	2b00      	cmp	r3, #0
    10ee:	d007      	beq.n	1100 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    10f0:	9b01      	ldr	r3, [sp, #4]
    10f2:	681b      	ldr	r3, [r3, #0]
    10f4:	4618      	mov	r0, r3
    10f6:	f7ff ff83 	bl	1000 <Platform_Ipw_InitIntCtrl>
    10fa:	4603      	mov	r3, r0
    10fc:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1100:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1104:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1106:	bf00      	nop
    1108:	b005      	add	sp, #20
    110a:	f85d fb04 	ldr.w	pc, [sp], #4

0000110e <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    110e:	2300      	movs	r3, #0
}
    1110:	4618      	mov	r0, r3
    1112:	4770      	bx	lr

00001114 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1114:	b082      	sub	sp, #8
    1116:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1118:	2301      	movs	r3, #1
}
    111a:	4618      	mov	r0, r3
    111c:	b002      	add	sp, #8
    111e:	4770      	bx	lr

00001120 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1120:	b082      	sub	sp, #8
    1122:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1124:	bf00      	nop
    1126:	b002      	add	sp, #8
    1128:	4770      	bx	lr

0000112a <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    112a:	b082      	sub	sp, #8
    112c:	9001      	str	r0, [sp, #4]
    return Micros;
    112e:	9b01      	ldr	r3, [sp, #4]
}
    1130:	4618      	mov	r0, r3
    1132:	b002      	add	sp, #8
    1134:	4770      	bx	lr

00001136 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1136:	b500      	push	{lr}
    1138:	b083      	sub	sp, #12
    113a:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    113c:	f000 f86c 	bl	1218 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1140:	bf00      	nop
    1142:	b003      	add	sp, #12
    1144:	f85d fb04 	ldr.w	pc, [sp], #4

00001148 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1148:	b500      	push	{lr}
    114a:	b085      	sub	sp, #20
    114c:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    114e:	2300      	movs	r3, #0
    1150:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1152:	9b01      	ldr	r3, [sp, #4]
    1154:	2b00      	cmp	r3, #0
    1156:	d003      	beq.n	1160 <OsIf_GetCounter+0x18>
    1158:	9b01      	ldr	r3, [sp, #4]
    115a:	2b01      	cmp	r3, #1
    115c:	d004      	beq.n	1168 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    115e:	e007      	b.n	1170 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1160:	f7ff ffd5 	bl	110e <OsIf_Timer_Dummy_GetCounter>
    1164:	9003      	str	r0, [sp, #12]
            break;
    1166:	e003      	b.n	1170 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1168:	f000 f872 	bl	1250 <OsIf_Timer_System_GetCounter>
    116c:	9003      	str	r0, [sp, #12]
            break;
    116e:	bf00      	nop
    }

    return Value;
    1170:	9b03      	ldr	r3, [sp, #12]
}
    1172:	4618      	mov	r0, r3
    1174:	b005      	add	sp, #20
    1176:	f85d fb04 	ldr.w	pc, [sp], #4

0000117a <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    117a:	b500      	push	{lr}
    117c:	b085      	sub	sp, #20
    117e:	9001      	str	r0, [sp, #4]
    1180:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1182:	2300      	movs	r3, #0
    1184:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1186:	9b00      	ldr	r3, [sp, #0]
    1188:	2b00      	cmp	r3, #0
    118a:	d003      	beq.n	1194 <OsIf_GetElapsed+0x1a>
    118c:	9b00      	ldr	r3, [sp, #0]
    118e:	2b01      	cmp	r3, #1
    1190:	d005      	beq.n	119e <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1192:	e009      	b.n	11a8 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1194:	9801      	ldr	r0, [sp, #4]
    1196:	f7ff ffbd 	bl	1114 <OsIf_Timer_Dummy_GetElapsed>
    119a:	9003      	str	r0, [sp, #12]
            break;
    119c:	e004      	b.n	11a8 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    119e:	9801      	ldr	r0, [sp, #4]
    11a0:	f000 f864 	bl	126c <OsIf_Timer_System_GetElapsed>
    11a4:	9003      	str	r0, [sp, #12]
            break;
    11a6:	bf00      	nop
    }

    return Value;
    11a8:	9b03      	ldr	r3, [sp, #12]
}
    11aa:	4618      	mov	r0, r3
    11ac:	b005      	add	sp, #20
    11ae:	f85d fb04 	ldr.w	pc, [sp], #4

000011b2 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    11b2:	b500      	push	{lr}
    11b4:	b083      	sub	sp, #12
    11b6:	9001      	str	r0, [sp, #4]
    11b8:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    11ba:	9b00      	ldr	r3, [sp, #0]
    11bc:	2b00      	cmp	r3, #0
    11be:	d003      	beq.n	11c8 <OsIf_SetTimerFrequency+0x16>
    11c0:	9b00      	ldr	r3, [sp, #0]
    11c2:	2b01      	cmp	r3, #1
    11c4:	d004      	beq.n	11d0 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    11c6:	e007      	b.n	11d8 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    11c8:	9801      	ldr	r0, [sp, #4]
    11ca:	f7ff ffa9 	bl	1120 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    11ce:	e003      	b.n	11d8 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    11d0:	9801      	ldr	r0, [sp, #4]
    11d2:	f000 f85b 	bl	128c <OsIf_Timer_System_SetTimerFrequency>
            break;
    11d6:	bf00      	nop
    }
}
    11d8:	bf00      	nop
    11da:	b003      	add	sp, #12
    11dc:	f85d fb04 	ldr.w	pc, [sp], #4

000011e0 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    11e0:	b500      	push	{lr}
    11e2:	b085      	sub	sp, #20
    11e4:	9001      	str	r0, [sp, #4]
    11e6:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    11e8:	2300      	movs	r3, #0
    11ea:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    11ec:	9b00      	ldr	r3, [sp, #0]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d003      	beq.n	11fa <OsIf_MicrosToTicks+0x1a>
    11f2:	9b00      	ldr	r3, [sp, #0]
    11f4:	2b01      	cmp	r3, #1
    11f6:	d005      	beq.n	1204 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    11f8:	e009      	b.n	120e <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    11fa:	9801      	ldr	r0, [sp, #4]
    11fc:	f7ff ff95 	bl	112a <OsIf_Timer_Dummy_MicrosToTicks>
    1200:	9003      	str	r0, [sp, #12]
            break;
    1202:	e004      	b.n	120e <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1204:	9801      	ldr	r0, [sp, #4]
    1206:	f000 f84f 	bl	12a8 <OsIf_Timer_System_MicrosToTicks>
    120a:	9003      	str	r0, [sp, #12]
            break;
    120c:	bf00      	nop
    }

    return Value;
    120e:	9b03      	ldr	r3, [sp, #12]
}
    1210:	4618      	mov	r0, r3
    1212:	b005      	add	sp, #20
    1214:	f85d fb04 	ldr.w	pc, [sp], #4

00001218 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1218:	b500      	push	{lr}
    121a:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    121c:	2300      	movs	r3, #0
    121e:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1220:	4a09      	ldr	r2, [pc, #36]	; (1248 <OsIf_Timer_System_Init+0x30>)
    1222:	9b01      	ldr	r3, [sp, #4]
    1224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1228:	685a      	ldr	r2, [r3, #4]
    122a:	4908      	ldr	r1, [pc, #32]	; (124c <OsIf_Timer_System_Init+0x34>)
    122c:	9b01      	ldr	r3, [sp, #4]
    122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1232:	4a06      	ldr	r2, [pc, #24]	; (124c <OsIf_Timer_System_Init+0x34>)
    1234:	9b01      	ldr	r3, [sp, #4]
    1236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    123a:	4618      	mov	r0, r3
    123c:	f000 f868 	bl	1310 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1240:	bf00      	nop
    1242:	b003      	add	sp, #12
    1244:	f85d fb04 	ldr.w	pc, [sp], #4
    1248:	0000ec0c 	.word	0x0000ec0c
    124c:	1fff8b34 	.word	0x1fff8b34

00001250 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1250:	b500      	push	{lr}
    1252:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1254:	2300      	movs	r3, #0
    1256:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1258:	2300      	movs	r3, #0
    125a:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    125c:	f000 f86c 	bl	1338 <OsIf_Timer_System_Internal_GetCounter>
    1260:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1262:	9b01      	ldr	r3, [sp, #4]
}
    1264:	4618      	mov	r0, r3
    1266:	b003      	add	sp, #12
    1268:	f85d fb04 	ldr.w	pc, [sp], #4

0000126c <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    126c:	b500      	push	{lr}
    126e:	b085      	sub	sp, #20
    1270:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1272:	2300      	movs	r3, #0
    1274:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1276:	2300      	movs	r3, #0
    1278:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    127a:	9801      	ldr	r0, [sp, #4]
    127c:	f000 f864 	bl	1348 <OsIf_Timer_System_Internal_GetElapsed>
    1280:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1282:	9b03      	ldr	r3, [sp, #12]
}
    1284:	4618      	mov	r0, r3
    1286:	b005      	add	sp, #20
    1288:	f85d fb04 	ldr.w	pc, [sp], #4

0000128c <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    128c:	b084      	sub	sp, #16
    128e:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1290:	2300      	movs	r3, #0
    1292:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1294:	4903      	ldr	r1, [pc, #12]	; (12a4 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1296:	9b03      	ldr	r3, [sp, #12]
    1298:	9a01      	ldr	r2, [sp, #4]
    129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    129e:	bf00      	nop
    12a0:	b004      	add	sp, #16
    12a2:	4770      	bx	lr
    12a4:	1fff8b34 	.word	0x1fff8b34

000012a8 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    12a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    12aa:	b087      	sub	sp, #28
    12ac:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    12ae:	2100      	movs	r1, #0
    12b0:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    12b2:	2100      	movs	r1, #0
    12b4:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    12b6:	9901      	ldr	r1, [sp, #4]
    12b8:	2000      	movs	r0, #0
    12ba:	460e      	mov	r6, r1
    12bc:	4607      	mov	r7, r0
    12be:	4812      	ldr	r0, [pc, #72]	; (1308 <OsIf_Timer_System_MicrosToTicks+0x60>)
    12c0:	9904      	ldr	r1, [sp, #16]
    12c2:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    12c6:	2000      	movs	r0, #0
    12c8:	460c      	mov	r4, r1
    12ca:	4605      	mov	r5, r0
    12cc:	fb04 f007 	mul.w	r0, r4, r7
    12d0:	fb06 f105 	mul.w	r1, r6, r5
    12d4:	4401      	add	r1, r0
    12d6:	fba6 2304 	umull	r2, r3, r6, r4
    12da:	4419      	add	r1, r3
    12dc:	460b      	mov	r3, r1
    12de:	e9cd 2302 	strd	r2, r3, [sp, #8]
    12e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    12e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    12ea:	4a08      	ldr	r2, [pc, #32]	; (130c <OsIf_Timer_System_MicrosToTicks+0x64>)
    12ec:	f04f 0300 	mov.w	r3, #0
    12f0:	f7ff f958 	bl	5a4 <__aeabi_uldivmod>
    12f4:	4602      	mov	r2, r0
    12f6:	460b      	mov	r3, r1
    12f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    12fc:	9b02      	ldr	r3, [sp, #8]
    12fe:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1300:	9b05      	ldr	r3, [sp, #20]
}
    1302:	4618      	mov	r0, r3
    1304:	b007      	add	sp, #28
    1306:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1308:	1fff8b34 	.word	0x1fff8b34
    130c:	000f4240 	.word	0x000f4240

00001310 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1310:	b082      	sub	sp, #8
    1312:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1314:	4b07      	ldr	r3, [pc, #28]	; (1334 <OsIf_Timer_System_Internal_Init+0x24>)
    1316:	2200      	movs	r2, #0
    1318:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    131a:	4b06      	ldr	r3, [pc, #24]	; (1334 <OsIf_Timer_System_Internal_Init+0x24>)
    131c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1320:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1322:	4b04      	ldr	r3, [pc, #16]	; (1334 <OsIf_Timer_System_Internal_Init+0x24>)
    1324:	2200      	movs	r2, #0
    1326:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1328:	4b02      	ldr	r3, [pc, #8]	; (1334 <OsIf_Timer_System_Internal_Init+0x24>)
    132a:	2205      	movs	r2, #5
    132c:	601a      	str	r2, [r3, #0]
}
    132e:	bf00      	nop
    1330:	b002      	add	sp, #8
    1332:	4770      	bx	lr
    1334:	e000e010 	.word	0xe000e010

00001338 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1338:	4b02      	ldr	r3, [pc, #8]	; (1344 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    133a:	689b      	ldr	r3, [r3, #8]
    133c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1340:	4618      	mov	r0, r3
    1342:	4770      	bx	lr
    1344:	e000e010 	.word	0xe000e010

00001348 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1348:	b084      	sub	sp, #16
    134a:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    134c:	4b10      	ldr	r3, [pc, #64]	; (1390 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    134e:	689b      	ldr	r3, [r3, #8]
    1350:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1354:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1356:	2300      	movs	r3, #0
    1358:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    135a:	9b01      	ldr	r3, [sp, #4]
    135c:	681b      	ldr	r3, [r3, #0]
    135e:	9a02      	ldr	r2, [sp, #8]
    1360:	429a      	cmp	r2, r3
    1362:	d909      	bls.n	1378 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1364:	9b01      	ldr	r3, [sp, #4]
    1366:	681a      	ldr	r2, [r3, #0]
    1368:	9b02      	ldr	r3, [sp, #8]
    136a:	1ad3      	subs	r3, r2, r3
    136c:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1370:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1374:	9303      	str	r3, [sp, #12]
    1376:	e004      	b.n	1382 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1378:	9b01      	ldr	r3, [sp, #4]
    137a:	681a      	ldr	r2, [r3, #0]
    137c:	9b02      	ldr	r3, [sp, #8]
    137e:	1ad3      	subs	r3, r2, r3
    1380:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1382:	9b01      	ldr	r3, [sp, #4]
    1384:	9a02      	ldr	r2, [sp, #8]
    1386:	601a      	str	r2, [r3, #0]

    return dif;
    1388:	9b03      	ldr	r3, [sp, #12]
}
    138a:	4618      	mov	r0, r3
    138c:	b004      	add	sp, #16
    138e:	4770      	bx	lr
    1390:	e000e010 	.word	0xe000e010

00001394 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1394:	b082      	sub	sp, #8
    1396:	9001      	str	r0, [sp, #4]
    1398:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    139a:	bf00      	nop
    139c:	b002      	add	sp, #8
    139e:	4770      	bx	lr

000013a0 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    13a0:	b500      	push	{lr}
    13a2:	b085      	sub	sp, #20
    13a4:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    13a6:	4b24      	ldr	r3, [pc, #144]	; (1438 <Clock_Ip_UpdateDriverContext+0x98>)
    13a8:	2201      	movs	r2, #1
    13aa:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    13ac:	4b23      	ldr	r3, [pc, #140]	; (143c <Clock_Ip_UpdateDriverContext+0x9c>)
    13ae:	681b      	ldr	r3, [r3, #0]
    13b0:	2102      	movs	r1, #2
    13b2:	4618      	mov	r0, r3
    13b4:	f003 fc32 	bl	4c1c <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    13b8:	2300      	movs	r3, #0
    13ba:	f88d 300f 	strb.w	r3, [sp, #15]
    13be:	e015      	b.n	13ec <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    13c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13c4:	9a01      	ldr	r2, [sp, #4]
    13c6:	334a      	adds	r3, #74	; 0x4a
    13c8:	00db      	lsls	r3, r3, #3
    13ca:	4413      	add	r3, r2
    13cc:	6858      	ldr	r0, [r3, #4]
    13ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13d2:	9a01      	ldr	r2, [sp, #4]
    13d4:	334a      	adds	r3, #74	; 0x4a
    13d6:	00db      	lsls	r3, r3, #3
    13d8:	4413      	add	r3, r2
    13da:	689b      	ldr	r3, [r3, #8]
    13dc:	4619      	mov	r1, r3
    13de:	f001 fadc 	bl	299a <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    13e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    13e6:	3301      	adds	r3, #1
    13e8:	f88d 300f 	strb.w	r3, [sp, #15]
    13ec:	9b01      	ldr	r3, [sp, #4]
    13ee:	7bdb      	ldrb	r3, [r3, #15]
    13f0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    13f4:	429a      	cmp	r2, r3
    13f6:	d3e3      	bcc.n	13c0 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    13f8:	f000 f824 	bl	1444 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    13fc:	2301      	movs	r3, #1
    13fe:	f88d 300f 	strb.w	r3, [sp, #15]
    1402:	e00e      	b.n	1422 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1404:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1408:	9b01      	ldr	r3, [sp, #4]
    140a:	327e      	adds	r2, #126	; 0x7e
    140c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1410:	490b      	ldr	r1, [pc, #44]	; (1440 <Clock_Ip_UpdateDriverContext+0xa0>)
    1412:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1416:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1418:	f89d 300f 	ldrb.w	r3, [sp, #15]
    141c:	3301      	adds	r3, #1
    141e:	f88d 300f 	strb.w	r3, [sp, #15]
    1422:	9b01      	ldr	r3, [sp, #4]
    1424:	7cdb      	ldrb	r3, [r3, #19]
    1426:	f89d 200f 	ldrb.w	r2, [sp, #15]
    142a:	429a      	cmp	r2, r3
    142c:	d3ea      	bcc.n	1404 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    142e:	bf00      	nop
    1430:	bf00      	nop
    1432:	b005      	add	sp, #20
    1434:	f85d fb04 	ldr.w	pc, [sp], #4
    1438:	1fff8b18 	.word	0x1fff8b18
    143c:	1fff8b38 	.word	0x1fff8b38
    1440:	1fff8b44 	.word	0x1fff8b44

00001444 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1444:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1446:	4b23      	ldr	r3, [pc, #140]	; (14d4 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1448:	781b      	ldrb	r3, [r3, #0]
    144a:	f083 0301 	eor.w	r3, r3, #1
    144e:	b2db      	uxtb	r3, r3
    1450:	2b00      	cmp	r3, #0
    1452:	d03d      	beq.n	14d0 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1454:	4b1f      	ldr	r3, [pc, #124]	; (14d4 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1456:	2201      	movs	r2, #1
    1458:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    145a:	4b1f      	ldr	r3, [pc, #124]	; (14d8 <Clock_Ip_CallEmptyCallbacks+0x94>)
    145c:	685b      	ldr	r3, [r3, #4]
    145e:	2100      	movs	r1, #0
    1460:	2000      	movs	r0, #0
    1462:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1464:	4b1c      	ldr	r3, [pc, #112]	; (14d8 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1466:	689b      	ldr	r3, [r3, #8]
    1468:	2057      	movs	r0, #87	; 0x57
    146a:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    146c:	4b1b      	ldr	r3, [pc, #108]	; (14dc <Clock_Ip_CallEmptyCallbacks+0x98>)
    146e:	681b      	ldr	r3, [r3, #0]
    1470:	2000      	movs	r0, #0
    1472:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1474:	4b1a      	ldr	r3, [pc, #104]	; (14e0 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	2000      	movs	r0, #0
    147a:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    147c:	4b19      	ldr	r3, [pc, #100]	; (14e4 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    147e:	681b      	ldr	r3, [r3, #0]
    1480:	2000      	movs	r0, #0
    1482:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1484:	4b18      	ldr	r3, [pc, #96]	; (14e8 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1486:	685b      	ldr	r3, [r3, #4]
    1488:	2000      	movs	r0, #0
    148a:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    148c:	4b16      	ldr	r3, [pc, #88]	; (14e8 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    148e:	689b      	ldr	r3, [r3, #8]
    1490:	2057      	movs	r0, #87	; 0x57
    1492:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1494:	4b15      	ldr	r3, [pc, #84]	; (14ec <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1496:	681b      	ldr	r3, [r3, #0]
    1498:	2000      	movs	r0, #0
    149a:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    149c:	4b13      	ldr	r3, [pc, #76]	; (14ec <Clock_Ip_CallEmptyCallbacks+0xa8>)
    149e:	685b      	ldr	r3, [r3, #4]
    14a0:	2100      	movs	r1, #0
    14a2:	2057      	movs	r0, #87	; 0x57
    14a4:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    14a6:	4b12      	ldr	r3, [pc, #72]	; (14f0 <Clock_Ip_CallEmptyCallbacks+0xac>)
    14a8:	681b      	ldr	r3, [r3, #0]
    14aa:	2000      	movs	r0, #0
    14ac:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    14ae:	4b11      	ldr	r3, [pc, #68]	; (14f4 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    14b0:	685b      	ldr	r3, [r3, #4]
    14b2:	2000      	movs	r0, #0
    14b4:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    14b6:	4b0f      	ldr	r3, [pc, #60]	; (14f4 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    14b8:	689b      	ldr	r3, [r3, #8]
    14ba:	2057      	movs	r0, #87	; 0x57
    14bc:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    14be:	4b0e      	ldr	r3, [pc, #56]	; (14f8 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    14c0:	685b      	ldr	r3, [r3, #4]
    14c2:	2000      	movs	r0, #0
    14c4:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    14c6:	4b0d      	ldr	r3, [pc, #52]	; (14fc <Clock_Ip_CallEmptyCallbacks+0xb8>)
    14c8:	681b      	ldr	r3, [r3, #0]
    14ca:	2100      	movs	r1, #0
    14cc:	2000      	movs	r0, #0
    14ce:	4798      	blx	r3
    }
}
    14d0:	bf00      	nop
    14d2:	bd08      	pop	{r3, pc}
    14d4:	1fff8b3c 	.word	0x1fff8b3c
    14d8:	0000e550 	.word	0x0000e550
    14dc:	0000e464 	.word	0x0000e464
    14e0:	0000e4a0 	.word	0x0000e4a0
    14e4:	0000e4a8 	.word	0x0000e4a8
    14e8:	0000e4d0 	.word	0x0000e4d0
    14ec:	0000e4dc 	.word	0x0000e4dc
    14f0:	0000e514 	.word	0x0000e514
    14f4:	0000e560 	.word	0x0000e560
    14f8:	0000e58c 	.word	0x0000e58c
    14fc:	0000e588 	.word	0x0000e588

00001500 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1500:	b500      	push	{lr}
    1502:	b085      	sub	sp, #20
    1504:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1506:	9b01      	ldr	r3, [sp, #4]
    1508:	7adb      	ldrb	r3, [r3, #11]
    150a:	9303      	str	r3, [sp, #12]
    150c:	e01f      	b.n	154e <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    150e:	9b03      	ldr	r3, [sp, #12]
    1510:	1e5a      	subs	r2, r3, #1
    1512:	9b01      	ldr	r3, [sp, #4]
    1514:	320d      	adds	r2, #13
    1516:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    151a:	495a      	ldr	r1, [pc, #360]	; (1684 <Clock_Ip_ResetClockConfiguration+0x184>)
    151c:	4613      	mov	r3, r2
    151e:	00db      	lsls	r3, r3, #3
    1520:	4413      	add	r3, r2
    1522:	440b      	add	r3, r1
    1524:	3301      	adds	r3, #1
    1526:	781b      	ldrb	r3, [r3, #0]
    1528:	461a      	mov	r2, r3
    152a:	4b57      	ldr	r3, [pc, #348]	; (1688 <Clock_Ip_ResetClockConfiguration+0x188>)
    152c:	5c9b      	ldrb	r3, [r3, r2]
    152e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1530:	4a56      	ldr	r2, [pc, #344]	; (168c <Clock_Ip_ResetClockConfiguration+0x18c>)
    1532:	9b02      	ldr	r3, [sp, #8]
    1534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1538:	9a03      	ldr	r2, [sp, #12]
    153a:	3a01      	subs	r2, #1
    153c:	320d      	adds	r2, #13
    153e:	00d2      	lsls	r2, r2, #3
    1540:	9901      	ldr	r1, [sp, #4]
    1542:	440a      	add	r2, r1
    1544:	4610      	mov	r0, r2
    1546:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1548:	9b03      	ldr	r3, [sp, #12]
    154a:	3b01      	subs	r3, #1
    154c:	9303      	str	r3, [sp, #12]
    154e:	9b03      	ldr	r3, [sp, #12]
    1550:	2b00      	cmp	r3, #0
    1552:	d1dc      	bne.n	150e <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1554:	9b01      	ldr	r3, [sp, #4]
    1556:	7b9b      	ldrb	r3, [r3, #14]
    1558:	9303      	str	r3, [sp, #12]
    155a:	e026      	b.n	15aa <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    155c:	9b03      	ldr	r3, [sp, #12]
    155e:	3b01      	subs	r3, #1
    1560:	9a01      	ldr	r2, [sp, #4]
    1562:	3324      	adds	r3, #36	; 0x24
    1564:	011b      	lsls	r3, r3, #4
    1566:	4413      	add	r3, r2
    1568:	3304      	adds	r3, #4
    156a:	681a      	ldr	r2, [r3, #0]
    156c:	4945      	ldr	r1, [pc, #276]	; (1684 <Clock_Ip_ResetClockConfiguration+0x184>)
    156e:	4613      	mov	r3, r2
    1570:	00db      	lsls	r3, r3, #3
    1572:	4413      	add	r3, r2
    1574:	440b      	add	r3, r1
    1576:	3301      	adds	r3, #1
    1578:	781b      	ldrb	r3, [r3, #0]
    157a:	461a      	mov	r2, r3
    157c:	4b44      	ldr	r3, [pc, #272]	; (1690 <Clock_Ip_ResetClockConfiguration+0x190>)
    157e:	5c9b      	ldrb	r3, [r3, r2]
    1580:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1582:	4944      	ldr	r1, [pc, #272]	; (1694 <Clock_Ip_ResetClockConfiguration+0x194>)
    1584:	9a02      	ldr	r2, [sp, #8]
    1586:	4613      	mov	r3, r2
    1588:	005b      	lsls	r3, r3, #1
    158a:	4413      	add	r3, r2
    158c:	009b      	lsls	r3, r3, #2
    158e:	440b      	add	r3, r1
    1590:	681b      	ldr	r3, [r3, #0]
    1592:	9a03      	ldr	r2, [sp, #12]
    1594:	3a01      	subs	r2, #1
    1596:	3224      	adds	r2, #36	; 0x24
    1598:	0112      	lsls	r2, r2, #4
    159a:	9901      	ldr	r1, [sp, #4]
    159c:	440a      	add	r2, r1
    159e:	3204      	adds	r2, #4
    15a0:	4610      	mov	r0, r2
    15a2:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    15a4:	9b03      	ldr	r3, [sp, #12]
    15a6:	3b01      	subs	r3, #1
    15a8:	9303      	str	r3, [sp, #12]
    15aa:	9b03      	ldr	r3, [sp, #12]
    15ac:	2b00      	cmp	r3, #0
    15ae:	d1d5      	bne.n	155c <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    15b0:	9b01      	ldr	r3, [sp, #4]
    15b2:	7a9b      	ldrb	r3, [r3, #10]
    15b4:	9303      	str	r3, [sp, #12]
    15b6:	e02a      	b.n	160e <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    15b8:	9b03      	ldr	r3, [sp, #12]
    15ba:	1e5a      	subs	r2, r3, #1
    15bc:	9901      	ldr	r1, [sp, #4]
    15be:	4613      	mov	r3, r2
    15c0:	009b      	lsls	r3, r3, #2
    15c2:	4413      	add	r3, r2
    15c4:	00db      	lsls	r3, r3, #3
    15c6:	440b      	add	r3, r1
    15c8:	3340      	adds	r3, #64	; 0x40
    15ca:	681a      	ldr	r2, [r3, #0]
    15cc:	492d      	ldr	r1, [pc, #180]	; (1684 <Clock_Ip_ResetClockConfiguration+0x184>)
    15ce:	4613      	mov	r3, r2
    15d0:	00db      	lsls	r3, r3, #3
    15d2:	4413      	add	r3, r2
    15d4:	440b      	add	r3, r1
    15d6:	3301      	adds	r3, #1
    15d8:	781b      	ldrb	r3, [r3, #0]
    15da:	461a      	mov	r2, r3
    15dc:	4b2e      	ldr	r3, [pc, #184]	; (1698 <Clock_Ip_ResetClockConfiguration+0x198>)
    15de:	5c9b      	ldrb	r3, [r3, r2]
    15e0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    15e2:	492e      	ldr	r1, [pc, #184]	; (169c <Clock_Ip_ResetClockConfiguration+0x19c>)
    15e4:	9a02      	ldr	r2, [sp, #8]
    15e6:	4613      	mov	r3, r2
    15e8:	009b      	lsls	r3, r3, #2
    15ea:	4413      	add	r3, r2
    15ec:	009b      	lsls	r3, r3, #2
    15ee:	440b      	add	r3, r1
    15f0:	6819      	ldr	r1, [r3, #0]
    15f2:	9b03      	ldr	r3, [sp, #12]
    15f4:	1e5a      	subs	r2, r3, #1
    15f6:	4613      	mov	r3, r2
    15f8:	009b      	lsls	r3, r3, #2
    15fa:	4413      	add	r3, r2
    15fc:	00db      	lsls	r3, r3, #3
    15fe:	3340      	adds	r3, #64	; 0x40
    1600:	9a01      	ldr	r2, [sp, #4]
    1602:	4413      	add	r3, r2
    1604:	4618      	mov	r0, r3
    1606:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1608:	9b03      	ldr	r3, [sp, #12]
    160a:	3b01      	subs	r3, #1
    160c:	9303      	str	r3, [sp, #12]
    160e:	9b03      	ldr	r3, [sp, #12]
    1610:	2b00      	cmp	r3, #0
    1612:	d1d1      	bne.n	15b8 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    1614:	9b01      	ldr	r3, [sp, #4]
    1616:	7a5b      	ldrb	r3, [r3, #9]
    1618:	9303      	str	r3, [sp, #12]
    161a:	e02b      	b.n	1674 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    161c:	9b03      	ldr	r3, [sp, #12]
    161e:	1e5a      	subs	r2, r3, #1
    1620:	9901      	ldr	r1, [sp, #4]
    1622:	4613      	mov	r3, r2
    1624:	009b      	lsls	r3, r3, #2
    1626:	4413      	add	r3, r2
    1628:	009b      	lsls	r3, r3, #2
    162a:	440b      	add	r3, r1
    162c:	332c      	adds	r3, #44	; 0x2c
    162e:	681a      	ldr	r2, [r3, #0]
    1630:	4914      	ldr	r1, [pc, #80]	; (1684 <Clock_Ip_ResetClockConfiguration+0x184>)
    1632:	4613      	mov	r3, r2
    1634:	00db      	lsls	r3, r3, #3
    1636:	4413      	add	r3, r2
    1638:	440b      	add	r3, r1
    163a:	3301      	adds	r3, #1
    163c:	781b      	ldrb	r3, [r3, #0]
    163e:	461a      	mov	r2, r3
    1640:	4b17      	ldr	r3, [pc, #92]	; (16a0 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1642:	5c9b      	ldrb	r3, [r3, r2]
    1644:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1646:	4917      	ldr	r1, [pc, #92]	; (16a4 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1648:	9a02      	ldr	r2, [sp, #8]
    164a:	4613      	mov	r3, r2
    164c:	009b      	lsls	r3, r3, #2
    164e:	4413      	add	r3, r2
    1650:	009b      	lsls	r3, r3, #2
    1652:	440b      	add	r3, r1
    1654:	6819      	ldr	r1, [r3, #0]
    1656:	9b03      	ldr	r3, [sp, #12]
    1658:	1e5a      	subs	r2, r3, #1
    165a:	4613      	mov	r3, r2
    165c:	009b      	lsls	r3, r3, #2
    165e:	4413      	add	r3, r2
    1660:	009b      	lsls	r3, r3, #2
    1662:	3328      	adds	r3, #40	; 0x28
    1664:	9a01      	ldr	r2, [sp, #4]
    1666:	4413      	add	r3, r2
    1668:	3304      	adds	r3, #4
    166a:	4618      	mov	r0, r3
    166c:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    166e:	9b03      	ldr	r3, [sp, #12]
    1670:	3b01      	subs	r3, #1
    1672:	9303      	str	r3, [sp, #12]
    1674:	9b03      	ldr	r3, [sp, #12]
    1676:	2b00      	cmp	r3, #0
    1678:	d1d0      	bne.n	161c <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    167a:	bf00      	nop
    167c:	bf00      	nop
    167e:	b005      	add	sp, #20
    1680:	f85d fb04 	ldr.w	pc, [sp], #4
    1684:	0000df54 	.word	0x0000df54
    1688:	0000df24 	.word	0x0000df24
    168c:	0000e58c 	.word	0x0000e58c
    1690:	0000df04 	.word	0x0000df04
    1694:	0000e4d0 	.word	0x0000e4d0
    1698:	0000df14 	.word	0x0000df14
    169c:	0000e560 	.word	0x0000e560
    16a0:	0000ded4 	.word	0x0000ded4
    16a4:	0000e4a8 	.word	0x0000e4a8

000016a8 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    16a8:	b500      	push	{lr}
    16aa:	b085      	sub	sp, #20
    16ac:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    16ae:	2301      	movs	r3, #1
    16b0:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    16b2:	9801      	ldr	r0, [sp, #4]
    16b4:	f000 f818 	bl	16e8 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    16b8:	4b0a      	ldr	r3, [pc, #40]	; (16e4 <Clock_Ip_Init+0x3c>)
    16ba:	781b      	ldrb	r3, [r3, #0]
    16bc:	2b00      	cmp	r3, #0
    16be:	d00a      	beq.n	16d6 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    16c0:	f000 fb74 	bl	1dac <Clock_Ip_GetPllStatus>
    16c4:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    16c6:	9b02      	ldr	r3, [sp, #8]
    16c8:	2b00      	cmp	r3, #0
    16ca:	d106      	bne.n	16da <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    16cc:	f000 fbf2 	bl	1eb4 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    16d0:	2300      	movs	r3, #0
    16d2:	9303      	str	r3, [sp, #12]
    16d4:	e001      	b.n	16da <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    16d6:	2300      	movs	r3, #0
    16d8:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    16da:	9b03      	ldr	r3, [sp, #12]
}
    16dc:	4618      	mov	r0, r3
    16de:	b005      	add	sp, #20
    16e0:	f85d fb04 	ldr.w	pc, [sp], #4
    16e4:	1fff8b40 	.word	0x1fff8b40

000016e8 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    16e8:	b510      	push	{r4, lr}
    16ea:	b084      	sub	sp, #16
    16ec:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    16ee:	4a9f      	ldr	r2, [pc, #636]	; (196c <Clock_Ip_InitClock+0x284>)
    16f0:	9b01      	ldr	r3, [sp, #4]
    16f2:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    16f4:	2101      	movs	r1, #1
    16f6:	9801      	ldr	r0, [sp, #4]
    16f8:	f003 fa90 	bl	4c1c <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    16fc:	4b9b      	ldr	r3, [pc, #620]	; (196c <Clock_Ip_InitClock+0x284>)
    16fe:	681b      	ldr	r3, [r3, #0]
    1700:	2b00      	cmp	r3, #0
    1702:	d030      	beq.n	1766 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1704:	2300      	movs	r3, #0
    1706:	9303      	str	r3, [sp, #12]
    1708:	e027      	b.n	175a <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    170a:	9901      	ldr	r1, [sp, #4]
    170c:	9a03      	ldr	r2, [sp, #12]
    170e:	4613      	mov	r3, r2
    1710:	009b      	lsls	r3, r3, #2
    1712:	4413      	add	r3, r2
    1714:	009b      	lsls	r3, r3, #2
    1716:	440b      	add	r3, r1
    1718:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    171c:	681a      	ldr	r2, [r3, #0]
    171e:	4994      	ldr	r1, [pc, #592]	; (1970 <Clock_Ip_InitClock+0x288>)
    1720:	4613      	mov	r3, r2
    1722:	00db      	lsls	r3, r3, #3
    1724:	4413      	add	r3, r2
    1726:	440b      	add	r3, r1
    1728:	3301      	adds	r3, #1
    172a:	781b      	ldrb	r3, [r3, #0]
    172c:	461a      	mov	r2, r3
    172e:	4b91      	ldr	r3, [pc, #580]	; (1974 <Clock_Ip_InitClock+0x28c>)
    1730:	5c9b      	ldrb	r3, [r3, r2]
    1732:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    1734:	4a90      	ldr	r2, [pc, #576]	; (1978 <Clock_Ip_InitClock+0x290>)
    1736:	9b02      	ldr	r3, [sp, #8]
    1738:	011b      	lsls	r3, r3, #4
    173a:	4413      	add	r3, r2
    173c:	6819      	ldr	r1, [r3, #0]
    173e:	9a03      	ldr	r2, [sp, #12]
    1740:	4613      	mov	r3, r2
    1742:	009b      	lsls	r3, r3, #2
    1744:	4413      	add	r3, r2
    1746:	009b      	lsls	r3, r3, #2
    1748:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    174c:	9a01      	ldr	r2, [sp, #4]
    174e:	4413      	add	r3, r2
    1750:	4618      	mov	r0, r3
    1752:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1754:	9b03      	ldr	r3, [sp, #12]
    1756:	3301      	adds	r3, #1
    1758:	9303      	str	r3, [sp, #12]
    175a:	9b01      	ldr	r3, [sp, #4]
    175c:	7c9b      	ldrb	r3, [r3, #18]
    175e:	461a      	mov	r2, r3
    1760:	9b03      	ldr	r3, [sp, #12]
    1762:	4293      	cmp	r3, r2
    1764:	d3d1      	bcc.n	170a <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1766:	9801      	ldr	r0, [sp, #4]
    1768:	f7ff feca 	bl	1500 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    176c:	2300      	movs	r3, #0
    176e:	9303      	str	r3, [sp, #12]
    1770:	e029      	b.n	17c6 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1772:	9901      	ldr	r1, [sp, #4]
    1774:	9a03      	ldr	r2, [sp, #12]
    1776:	4613      	mov	r3, r2
    1778:	005b      	lsls	r3, r3, #1
    177a:	4413      	add	r3, r2
    177c:	009b      	lsls	r3, r3, #2
    177e:	440b      	add	r3, r1
    1780:	3314      	adds	r3, #20
    1782:	681a      	ldr	r2, [r3, #0]
    1784:	497a      	ldr	r1, [pc, #488]	; (1970 <Clock_Ip_InitClock+0x288>)
    1786:	4613      	mov	r3, r2
    1788:	00db      	lsls	r3, r3, #3
    178a:	4413      	add	r3, r2
    178c:	440b      	add	r3, r1
    178e:	3301      	adds	r3, #1
    1790:	781b      	ldrb	r3, [r3, #0]
    1792:	461a      	mov	r2, r3
    1794:	4b79      	ldr	r3, [pc, #484]	; (197c <Clock_Ip_InitClock+0x294>)
    1796:	5c9b      	ldrb	r3, [r3, r2]
    1798:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    179a:	4979      	ldr	r1, [pc, #484]	; (1980 <Clock_Ip_InitClock+0x298>)
    179c:	9a02      	ldr	r2, [sp, #8]
    179e:	4613      	mov	r3, r2
    17a0:	005b      	lsls	r3, r3, #1
    17a2:	4413      	add	r3, r2
    17a4:	009b      	lsls	r3, r3, #2
    17a6:	440b      	add	r3, r1
    17a8:	6819      	ldr	r1, [r3, #0]
    17aa:	9a03      	ldr	r2, [sp, #12]
    17ac:	4613      	mov	r3, r2
    17ae:	005b      	lsls	r3, r3, #1
    17b0:	4413      	add	r3, r2
    17b2:	009b      	lsls	r3, r3, #2
    17b4:	3310      	adds	r3, #16
    17b6:	9a01      	ldr	r2, [sp, #4]
    17b8:	4413      	add	r3, r2
    17ba:	3304      	adds	r3, #4
    17bc:	4618      	mov	r0, r3
    17be:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    17c0:	9b03      	ldr	r3, [sp, #12]
    17c2:	3301      	adds	r3, #1
    17c4:	9303      	str	r3, [sp, #12]
    17c6:	9b01      	ldr	r3, [sp, #4]
    17c8:	7a1b      	ldrb	r3, [r3, #8]
    17ca:	461a      	mov	r2, r3
    17cc:	9b03      	ldr	r3, [sp, #12]
    17ce:	4293      	cmp	r3, r2
    17d0:	d3cf      	bcc.n	1772 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    17d2:	2300      	movs	r3, #0
    17d4:	9303      	str	r3, [sp, #12]
    17d6:	e02a      	b.n	182e <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    17d8:	9901      	ldr	r1, [sp, #4]
    17da:	9a03      	ldr	r2, [sp, #12]
    17dc:	4613      	mov	r3, r2
    17de:	009b      	lsls	r3, r3, #2
    17e0:	4413      	add	r3, r2
    17e2:	009b      	lsls	r3, r3, #2
    17e4:	440b      	add	r3, r1
    17e6:	332c      	adds	r3, #44	; 0x2c
    17e8:	681a      	ldr	r2, [r3, #0]
    17ea:	4961      	ldr	r1, [pc, #388]	; (1970 <Clock_Ip_InitClock+0x288>)
    17ec:	4613      	mov	r3, r2
    17ee:	00db      	lsls	r3, r3, #3
    17f0:	4413      	add	r3, r2
    17f2:	440b      	add	r3, r1
    17f4:	3301      	adds	r3, #1
    17f6:	781b      	ldrb	r3, [r3, #0]
    17f8:	461a      	mov	r2, r3
    17fa:	4b62      	ldr	r3, [pc, #392]	; (1984 <Clock_Ip_InitClock+0x29c>)
    17fc:	5c9b      	ldrb	r3, [r3, r2]
    17fe:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    1800:	4961      	ldr	r1, [pc, #388]	; (1988 <Clock_Ip_InitClock+0x2a0>)
    1802:	9a02      	ldr	r2, [sp, #8]
    1804:	4613      	mov	r3, r2
    1806:	009b      	lsls	r3, r3, #2
    1808:	4413      	add	r3, r2
    180a:	009b      	lsls	r3, r3, #2
    180c:	440b      	add	r3, r1
    180e:	3304      	adds	r3, #4
    1810:	6819      	ldr	r1, [r3, #0]
    1812:	9a03      	ldr	r2, [sp, #12]
    1814:	4613      	mov	r3, r2
    1816:	009b      	lsls	r3, r3, #2
    1818:	4413      	add	r3, r2
    181a:	009b      	lsls	r3, r3, #2
    181c:	3328      	adds	r3, #40	; 0x28
    181e:	9a01      	ldr	r2, [sp, #4]
    1820:	4413      	add	r3, r2
    1822:	3304      	adds	r3, #4
    1824:	4618      	mov	r0, r3
    1826:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    1828:	9b03      	ldr	r3, [sp, #12]
    182a:	3301      	adds	r3, #1
    182c:	9303      	str	r3, [sp, #12]
    182e:	9b01      	ldr	r3, [sp, #4]
    1830:	7a5b      	ldrb	r3, [r3, #9]
    1832:	461a      	mov	r2, r3
    1834:	9b03      	ldr	r3, [sp, #12]
    1836:	4293      	cmp	r3, r2
    1838:	d3ce      	bcc.n	17d8 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    183a:	9801      	ldr	r0, [sp, #4]
    183c:	f7ff fdb0 	bl	13a0 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1840:	2300      	movs	r3, #0
    1842:	9303      	str	r3, [sp, #12]
    1844:	e028      	b.n	1898 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1846:	9901      	ldr	r1, [sp, #4]
    1848:	9a03      	ldr	r2, [sp, #12]
    184a:	4613      	mov	r3, r2
    184c:	009b      	lsls	r3, r3, #2
    184e:	4413      	add	r3, r2
    1850:	009b      	lsls	r3, r3, #2
    1852:	440b      	add	r3, r1
    1854:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1858:	681a      	ldr	r2, [r3, #0]
    185a:	4945      	ldr	r1, [pc, #276]	; (1970 <Clock_Ip_InitClock+0x288>)
    185c:	4613      	mov	r3, r2
    185e:	00db      	lsls	r3, r3, #3
    1860:	4413      	add	r3, r2
    1862:	440b      	add	r3, r1
    1864:	3301      	adds	r3, #1
    1866:	781b      	ldrb	r3, [r3, #0]
    1868:	461a      	mov	r2, r3
    186a:	4b48      	ldr	r3, [pc, #288]	; (198c <Clock_Ip_InitClock+0x2a4>)
    186c:	5c9b      	ldrb	r3, [r3, r2]
    186e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1870:	4a47      	ldr	r2, [pc, #284]	; (1990 <Clock_Ip_InitClock+0x2a8>)
    1872:	9b02      	ldr	r3, [sp, #8]
    1874:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1878:	9a03      	ldr	r2, [sp, #12]
    187a:	4613      	mov	r3, r2
    187c:	009b      	lsls	r3, r3, #2
    187e:	4413      	add	r3, r2
    1880:	009b      	lsls	r3, r3, #2
    1882:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1886:	9a01      	ldr	r2, [sp, #4]
    1888:	4413      	add	r3, r2
    188a:	3304      	adds	r3, #4
    188c:	9903      	ldr	r1, [sp, #12]
    188e:	4618      	mov	r0, r3
    1890:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1892:	9b03      	ldr	r3, [sp, #12]
    1894:	3301      	adds	r3, #1
    1896:	9303      	str	r3, [sp, #12]
    1898:	9b01      	ldr	r3, [sp, #4]
    189a:	7c5b      	ldrb	r3, [r3, #17]
    189c:	461a      	mov	r2, r3
    189e:	9b03      	ldr	r3, [sp, #12]
    18a0:	4293      	cmp	r3, r2
    18a2:	d3d0      	bcc.n	1846 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    18a4:	2300      	movs	r3, #0
    18a6:	9303      	str	r3, [sp, #12]
    18a8:	e026      	b.n	18f8 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    18aa:	9901      	ldr	r1, [sp, #4]
    18ac:	9a03      	ldr	r2, [sp, #12]
    18ae:	4613      	mov	r3, r2
    18b0:	005b      	lsls	r3, r3, #1
    18b2:	4413      	add	r3, r2
    18b4:	009b      	lsls	r3, r3, #2
    18b6:	440b      	add	r3, r1
    18b8:	f503 730e 	add.w	r3, r3, #568	; 0x238
    18bc:	681a      	ldr	r2, [r3, #0]
    18be:	492c      	ldr	r1, [pc, #176]	; (1970 <Clock_Ip_InitClock+0x288>)
    18c0:	4613      	mov	r3, r2
    18c2:	00db      	lsls	r3, r3, #3
    18c4:	4413      	add	r3, r2
    18c6:	440b      	add	r3, r1
    18c8:	3301      	adds	r3, #1
    18ca:	781b      	ldrb	r3, [r3, #0]
    18cc:	461a      	mov	r2, r3
    18ce:	4b31      	ldr	r3, [pc, #196]	; (1994 <Clock_Ip_InitClock+0x2ac>)
    18d0:	5c9b      	ldrb	r3, [r3, r2]
    18d2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    18d4:	4a30      	ldr	r2, [pc, #192]	; (1998 <Clock_Ip_InitClock+0x2b0>)
    18d6:	9b02      	ldr	r3, [sp, #8]
    18d8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    18dc:	9a03      	ldr	r2, [sp, #12]
    18de:	4613      	mov	r3, r2
    18e0:	005b      	lsls	r3, r3, #1
    18e2:	4413      	add	r3, r2
    18e4:	009b      	lsls	r3, r3, #2
    18e6:	f503 730e 	add.w	r3, r3, #568	; 0x238
    18ea:	9a01      	ldr	r2, [sp, #4]
    18ec:	4413      	add	r3, r2
    18ee:	4618      	mov	r0, r3
    18f0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    18f2:	9b03      	ldr	r3, [sp, #12]
    18f4:	3301      	adds	r3, #1
    18f6:	9303      	str	r3, [sp, #12]
    18f8:	9b01      	ldr	r3, [sp, #4]
    18fa:	7b5b      	ldrb	r3, [r3, #13]
    18fc:	461a      	mov	r2, r3
    18fe:	9b03      	ldr	r3, [sp, #12]
    1900:	4293      	cmp	r3, r2
    1902:	d3d2      	bcc.n	18aa <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1904:	2300      	movs	r3, #0
    1906:	9303      	str	r3, [sp, #12]
    1908:	e026      	b.n	1958 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    190a:	9901      	ldr	r1, [sp, #4]
    190c:	9a03      	ldr	r2, [sp, #12]
    190e:	4613      	mov	r3, r2
    1910:	005b      	lsls	r3, r3, #1
    1912:	4413      	add	r3, r2
    1914:	009b      	lsls	r3, r3, #2
    1916:	440b      	add	r3, r1
    1918:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    191c:	681a      	ldr	r2, [r3, #0]
    191e:	4914      	ldr	r1, [pc, #80]	; (1970 <Clock_Ip_InitClock+0x288>)
    1920:	4613      	mov	r3, r2
    1922:	00db      	lsls	r3, r3, #3
    1924:	4413      	add	r3, r2
    1926:	440b      	add	r3, r1
    1928:	3301      	adds	r3, #1
    192a:	781b      	ldrb	r3, [r3, #0]
    192c:	461a      	mov	r2, r3
    192e:	4b1b      	ldr	r3, [pc, #108]	; (199c <Clock_Ip_InitClock+0x2b4>)
    1930:	5c9b      	ldrb	r3, [r3, r2]
    1932:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    1934:	4a1a      	ldr	r2, [pc, #104]	; (19a0 <Clock_Ip_InitClock+0x2b8>)
    1936:	9b02      	ldr	r3, [sp, #8]
    1938:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    193c:	9a03      	ldr	r2, [sp, #12]
    193e:	4613      	mov	r3, r2
    1940:	005b      	lsls	r3, r3, #1
    1942:	4413      	add	r3, r2
    1944:	009b      	lsls	r3, r3, #2
    1946:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    194a:	9a01      	ldr	r2, [sp, #4]
    194c:	4413      	add	r3, r2
    194e:	4618      	mov	r0, r3
    1950:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1952:	9b03      	ldr	r3, [sp, #12]
    1954:	3301      	adds	r3, #1
    1956:	9303      	str	r3, [sp, #12]
    1958:	9b01      	ldr	r3, [sp, #4]
    195a:	7b1b      	ldrb	r3, [r3, #12]
    195c:	461a      	mov	r2, r3
    195e:	9b03      	ldr	r3, [sp, #12]
    1960:	4293      	cmp	r3, r2
    1962:	d3d2      	bcc.n	190a <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1964:	2300      	movs	r3, #0
    1966:	9303      	str	r3, [sp, #12]
    1968:	e044      	b.n	19f4 <Clock_Ip_InitClock+0x30c>
    196a:	bf00      	nop
    196c:	1fff8b38 	.word	0x1fff8b38
    1970:	0000df54 	.word	0x0000df54
    1974:	0000df44 	.word	0x0000df44
    1978:	0000e550 	.word	0x0000e550
    197c:	0000dee4 	.word	0x0000dee4
    1980:	0000e514 	.word	0x0000e514
    1984:	0000ded4 	.word	0x0000ded4
    1988:	0000e4a8 	.word	0x0000e4a8
    198c:	0000df34 	.word	0x0000df34
    1990:	0000e588 	.word	0x0000e588
    1994:	0000dec4 	.word	0x0000dec4
    1998:	0000e4a0 	.word	0x0000e4a0
    199c:	0000deb4 	.word	0x0000deb4
    19a0:	0000e464 	.word	0x0000e464
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    19a4:	9901      	ldr	r1, [sp, #4]
    19a6:	9a03      	ldr	r2, [sp, #12]
    19a8:	4613      	mov	r3, r2
    19aa:	005b      	lsls	r3, r3, #1
    19ac:	4413      	add	r3, r2
    19ae:	009b      	lsls	r3, r3, #2
    19b0:	440b      	add	r3, r1
    19b2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    19b6:	681a      	ldr	r2, [r3, #0]
    19b8:	49ac      	ldr	r1, [pc, #688]	; (1c6c <Clock_Ip_InitClock+0x584>)
    19ba:	4613      	mov	r3, r2
    19bc:	00db      	lsls	r3, r3, #3
    19be:	4413      	add	r3, r2
    19c0:	440b      	add	r3, r1
    19c2:	3301      	adds	r3, #1
    19c4:	781b      	ldrb	r3, [r3, #0]
    19c6:	461a      	mov	r2, r3
    19c8:	4ba9      	ldr	r3, [pc, #676]	; (1c70 <Clock_Ip_InitClock+0x588>)
    19ca:	5c9b      	ldrb	r3, [r3, r2]
    19cc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    19ce:	4aa9      	ldr	r2, [pc, #676]	; (1c74 <Clock_Ip_InitClock+0x58c>)
    19d0:	9b02      	ldr	r3, [sp, #8]
    19d2:	00db      	lsls	r3, r3, #3
    19d4:	4413      	add	r3, r2
    19d6:	6859      	ldr	r1, [r3, #4]
    19d8:	9a03      	ldr	r2, [sp, #12]
    19da:	4613      	mov	r3, r2
    19dc:	005b      	lsls	r3, r3, #1
    19de:	4413      	add	r3, r2
    19e0:	009b      	lsls	r3, r3, #2
    19e2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    19e6:	9a01      	ldr	r2, [sp, #4]
    19e8:	4413      	add	r3, r2
    19ea:	4618      	mov	r0, r3
    19ec:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    19ee:	9b03      	ldr	r3, [sp, #12]
    19f0:	3301      	adds	r3, #1
    19f2:	9303      	str	r3, [sp, #12]
    19f4:	9b01      	ldr	r3, [sp, #4]
    19f6:	7b5b      	ldrb	r3, [r3, #13]
    19f8:	461a      	mov	r2, r3
    19fa:	9b03      	ldr	r3, [sp, #12]
    19fc:	4293      	cmp	r3, r2
    19fe:	d3d1      	bcc.n	19a4 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1a00:	2300      	movs	r3, #0
    1a02:	9303      	str	r3, [sp, #12]
    1a04:	e029      	b.n	1a5a <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1a06:	9901      	ldr	r1, [sp, #4]
    1a08:	9a03      	ldr	r2, [sp, #12]
    1a0a:	4613      	mov	r3, r2
    1a0c:	009b      	lsls	r3, r3, #2
    1a0e:	4413      	add	r3, r2
    1a10:	00db      	lsls	r3, r3, #3
    1a12:	440b      	add	r3, r1
    1a14:	3340      	adds	r3, #64	; 0x40
    1a16:	681a      	ldr	r2, [r3, #0]
    1a18:	4994      	ldr	r1, [pc, #592]	; (1c6c <Clock_Ip_InitClock+0x584>)
    1a1a:	4613      	mov	r3, r2
    1a1c:	00db      	lsls	r3, r3, #3
    1a1e:	4413      	add	r3, r2
    1a20:	440b      	add	r3, r1
    1a22:	3301      	adds	r3, #1
    1a24:	781b      	ldrb	r3, [r3, #0]
    1a26:	461a      	mov	r2, r3
    1a28:	4b93      	ldr	r3, [pc, #588]	; (1c78 <Clock_Ip_InitClock+0x590>)
    1a2a:	5c9b      	ldrb	r3, [r3, r2]
    1a2c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    1a2e:	4993      	ldr	r1, [pc, #588]	; (1c7c <Clock_Ip_InitClock+0x594>)
    1a30:	9a02      	ldr	r2, [sp, #8]
    1a32:	4613      	mov	r3, r2
    1a34:	009b      	lsls	r3, r3, #2
    1a36:	4413      	add	r3, r2
    1a38:	009b      	lsls	r3, r3, #2
    1a3a:	440b      	add	r3, r1
    1a3c:	3304      	adds	r3, #4
    1a3e:	6819      	ldr	r1, [r3, #0]
    1a40:	9a03      	ldr	r2, [sp, #12]
    1a42:	4613      	mov	r3, r2
    1a44:	009b      	lsls	r3, r3, #2
    1a46:	4413      	add	r3, r2
    1a48:	00db      	lsls	r3, r3, #3
    1a4a:	3340      	adds	r3, #64	; 0x40
    1a4c:	9a01      	ldr	r2, [sp, #4]
    1a4e:	4413      	add	r3, r2
    1a50:	4618      	mov	r0, r3
    1a52:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1a54:	9b03      	ldr	r3, [sp, #12]
    1a56:	3301      	adds	r3, #1
    1a58:	9303      	str	r3, [sp, #12]
    1a5a:	9b01      	ldr	r3, [sp, #4]
    1a5c:	7a9b      	ldrb	r3, [r3, #10]
    1a5e:	461a      	mov	r2, r3
    1a60:	9b03      	ldr	r3, [sp, #12]
    1a62:	4293      	cmp	r3, r2
    1a64:	d3cf      	bcc.n	1a06 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1a66:	2300      	movs	r3, #0
    1a68:	9303      	str	r3, [sp, #12]
    1a6a:	e029      	b.n	1ac0 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1a6c:	9901      	ldr	r1, [sp, #4]
    1a6e:	9a03      	ldr	r2, [sp, #12]
    1a70:	4613      	mov	r3, r2
    1a72:	009b      	lsls	r3, r3, #2
    1a74:	4413      	add	r3, r2
    1a76:	009b      	lsls	r3, r3, #2
    1a78:	440b      	add	r3, r1
    1a7a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a7e:	681a      	ldr	r2, [r3, #0]
    1a80:	497a      	ldr	r1, [pc, #488]	; (1c6c <Clock_Ip_InitClock+0x584>)
    1a82:	4613      	mov	r3, r2
    1a84:	00db      	lsls	r3, r3, #3
    1a86:	4413      	add	r3, r2
    1a88:	440b      	add	r3, r1
    1a8a:	3301      	adds	r3, #1
    1a8c:	781b      	ldrb	r3, [r3, #0]
    1a8e:	461a      	mov	r2, r3
    1a90:	4b7b      	ldr	r3, [pc, #492]	; (1c80 <Clock_Ip_InitClock+0x598>)
    1a92:	5c9b      	ldrb	r3, [r3, r2]
    1a94:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1a96:	4a7b      	ldr	r2, [pc, #492]	; (1c84 <Clock_Ip_InitClock+0x59c>)
    1a98:	9b02      	ldr	r3, [sp, #8]
    1a9a:	011b      	lsls	r3, r3, #4
    1a9c:	4413      	add	r3, r2
    1a9e:	3304      	adds	r3, #4
    1aa0:	681c      	ldr	r4, [r3, #0]
    1aa2:	9a03      	ldr	r2, [sp, #12]
    1aa4:	4613      	mov	r3, r2
    1aa6:	009b      	lsls	r3, r3, #2
    1aa8:	4413      	add	r3, r2
    1aaa:	009b      	lsls	r3, r3, #2
    1aac:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1ab0:	9a01      	ldr	r2, [sp, #4]
    1ab2:	4413      	add	r3, r2
    1ab4:	9903      	ldr	r1, [sp, #12]
    1ab6:	4618      	mov	r0, r3
    1ab8:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1aba:	9b03      	ldr	r3, [sp, #12]
    1abc:	3301      	adds	r3, #1
    1abe:	9303      	str	r3, [sp, #12]
    1ac0:	9b01      	ldr	r3, [sp, #4]
    1ac2:	7c9b      	ldrb	r3, [r3, #18]
    1ac4:	461a      	mov	r2, r3
    1ac6:	9b03      	ldr	r3, [sp, #12]
    1ac8:	4293      	cmp	r3, r2
    1aca:	d3cf      	bcc.n	1a6c <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1acc:	2300      	movs	r3, #0
    1ace:	9303      	str	r3, [sp, #12]
    1ad0:	e02a      	b.n	1b28 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1ad2:	9901      	ldr	r1, [sp, #4]
    1ad4:	9a03      	ldr	r2, [sp, #12]
    1ad6:	4613      	mov	r3, r2
    1ad8:	009b      	lsls	r3, r3, #2
    1ada:	4413      	add	r3, r2
    1adc:	009b      	lsls	r3, r3, #2
    1ade:	440b      	add	r3, r1
    1ae0:	332c      	adds	r3, #44	; 0x2c
    1ae2:	681a      	ldr	r2, [r3, #0]
    1ae4:	4961      	ldr	r1, [pc, #388]	; (1c6c <Clock_Ip_InitClock+0x584>)
    1ae6:	4613      	mov	r3, r2
    1ae8:	00db      	lsls	r3, r3, #3
    1aea:	4413      	add	r3, r2
    1aec:	440b      	add	r3, r1
    1aee:	3301      	adds	r3, #1
    1af0:	781b      	ldrb	r3, [r3, #0]
    1af2:	461a      	mov	r2, r3
    1af4:	4b64      	ldr	r3, [pc, #400]	; (1c88 <Clock_Ip_InitClock+0x5a0>)
    1af6:	5c9b      	ldrb	r3, [r3, r2]
    1af8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    1afa:	4964      	ldr	r1, [pc, #400]	; (1c8c <Clock_Ip_InitClock+0x5a4>)
    1afc:	9a02      	ldr	r2, [sp, #8]
    1afe:	4613      	mov	r3, r2
    1b00:	009b      	lsls	r3, r3, #2
    1b02:	4413      	add	r3, r2
    1b04:	009b      	lsls	r3, r3, #2
    1b06:	440b      	add	r3, r1
    1b08:	3308      	adds	r3, #8
    1b0a:	6819      	ldr	r1, [r3, #0]
    1b0c:	9a03      	ldr	r2, [sp, #12]
    1b0e:	4613      	mov	r3, r2
    1b10:	009b      	lsls	r3, r3, #2
    1b12:	4413      	add	r3, r2
    1b14:	009b      	lsls	r3, r3, #2
    1b16:	3328      	adds	r3, #40	; 0x28
    1b18:	9a01      	ldr	r2, [sp, #4]
    1b1a:	4413      	add	r3, r2
    1b1c:	3304      	adds	r3, #4
    1b1e:	4618      	mov	r0, r3
    1b20:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    1b22:	9b03      	ldr	r3, [sp, #12]
    1b24:	3301      	adds	r3, #1
    1b26:	9303      	str	r3, [sp, #12]
    1b28:	9b01      	ldr	r3, [sp, #4]
    1b2a:	7a5b      	ldrb	r3, [r3, #9]
    1b2c:	461a      	mov	r2, r3
    1b2e:	9b03      	ldr	r3, [sp, #12]
    1b30:	4293      	cmp	r3, r2
    1b32:	d3ce      	bcc.n	1ad2 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1b34:	2300      	movs	r3, #0
    1b36:	9303      	str	r3, [sp, #12]
    1b38:	e029      	b.n	1b8e <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    1b3a:	9901      	ldr	r1, [sp, #4]
    1b3c:	9a03      	ldr	r2, [sp, #12]
    1b3e:	4613      	mov	r3, r2
    1b40:	009b      	lsls	r3, r3, #2
    1b42:	4413      	add	r3, r2
    1b44:	00db      	lsls	r3, r3, #3
    1b46:	440b      	add	r3, r1
    1b48:	3340      	adds	r3, #64	; 0x40
    1b4a:	681a      	ldr	r2, [r3, #0]
    1b4c:	4947      	ldr	r1, [pc, #284]	; (1c6c <Clock_Ip_InitClock+0x584>)
    1b4e:	4613      	mov	r3, r2
    1b50:	00db      	lsls	r3, r3, #3
    1b52:	4413      	add	r3, r2
    1b54:	440b      	add	r3, r1
    1b56:	3301      	adds	r3, #1
    1b58:	781b      	ldrb	r3, [r3, #0]
    1b5a:	461a      	mov	r2, r3
    1b5c:	4b46      	ldr	r3, [pc, #280]	; (1c78 <Clock_Ip_InitClock+0x590>)
    1b5e:	5c9b      	ldrb	r3, [r3, r2]
    1b60:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1b62:	4946      	ldr	r1, [pc, #280]	; (1c7c <Clock_Ip_InitClock+0x594>)
    1b64:	9a02      	ldr	r2, [sp, #8]
    1b66:	4613      	mov	r3, r2
    1b68:	009b      	lsls	r3, r3, #2
    1b6a:	4413      	add	r3, r2
    1b6c:	009b      	lsls	r3, r3, #2
    1b6e:	440b      	add	r3, r1
    1b70:	330c      	adds	r3, #12
    1b72:	6819      	ldr	r1, [r3, #0]
    1b74:	9a03      	ldr	r2, [sp, #12]
    1b76:	4613      	mov	r3, r2
    1b78:	009b      	lsls	r3, r3, #2
    1b7a:	4413      	add	r3, r2
    1b7c:	00db      	lsls	r3, r3, #3
    1b7e:	3340      	adds	r3, #64	; 0x40
    1b80:	9a01      	ldr	r2, [sp, #4]
    1b82:	4413      	add	r3, r2
    1b84:	4618      	mov	r0, r3
    1b86:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1b88:	9b03      	ldr	r3, [sp, #12]
    1b8a:	3301      	adds	r3, #1
    1b8c:	9303      	str	r3, [sp, #12]
    1b8e:	9b01      	ldr	r3, [sp, #4]
    1b90:	7a9b      	ldrb	r3, [r3, #10]
    1b92:	461a      	mov	r2, r3
    1b94:	9b03      	ldr	r3, [sp, #12]
    1b96:	4293      	cmp	r3, r2
    1b98:	d3cf      	bcc.n	1b3a <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1b9a:	2300      	movs	r3, #0
    1b9c:	9303      	str	r3, [sp, #12]
    1b9e:	e025      	b.n	1bec <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1ba0:	9a01      	ldr	r2, [sp, #4]
    1ba2:	9b03      	ldr	r3, [sp, #12]
    1ba4:	3324      	adds	r3, #36	; 0x24
    1ba6:	011b      	lsls	r3, r3, #4
    1ba8:	4413      	add	r3, r2
    1baa:	3304      	adds	r3, #4
    1bac:	681a      	ldr	r2, [r3, #0]
    1bae:	492f      	ldr	r1, [pc, #188]	; (1c6c <Clock_Ip_InitClock+0x584>)
    1bb0:	4613      	mov	r3, r2
    1bb2:	00db      	lsls	r3, r3, #3
    1bb4:	4413      	add	r3, r2
    1bb6:	440b      	add	r3, r1
    1bb8:	3301      	adds	r3, #1
    1bba:	781b      	ldrb	r3, [r3, #0]
    1bbc:	461a      	mov	r2, r3
    1bbe:	4b34      	ldr	r3, [pc, #208]	; (1c90 <Clock_Ip_InitClock+0x5a8>)
    1bc0:	5c9b      	ldrb	r3, [r3, r2]
    1bc2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1bc4:	4933      	ldr	r1, [pc, #204]	; (1c94 <Clock_Ip_InitClock+0x5ac>)
    1bc6:	9a02      	ldr	r2, [sp, #8]
    1bc8:	4613      	mov	r3, r2
    1bca:	005b      	lsls	r3, r3, #1
    1bcc:	4413      	add	r3, r2
    1bce:	009b      	lsls	r3, r3, #2
    1bd0:	440b      	add	r3, r1
    1bd2:	3304      	adds	r3, #4
    1bd4:	681b      	ldr	r3, [r3, #0]
    1bd6:	9a03      	ldr	r2, [sp, #12]
    1bd8:	3224      	adds	r2, #36	; 0x24
    1bda:	0112      	lsls	r2, r2, #4
    1bdc:	9901      	ldr	r1, [sp, #4]
    1bde:	440a      	add	r2, r1
    1be0:	3204      	adds	r2, #4
    1be2:	4610      	mov	r0, r2
    1be4:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    1be6:	9b03      	ldr	r3, [sp, #12]
    1be8:	3301      	adds	r3, #1
    1bea:	9303      	str	r3, [sp, #12]
    1bec:	9b01      	ldr	r3, [sp, #4]
    1bee:	7b9b      	ldrb	r3, [r3, #14]
    1bf0:	461a      	mov	r2, r3
    1bf2:	9b03      	ldr	r3, [sp, #12]
    1bf4:	4293      	cmp	r3, r2
    1bf6:	d3d3      	bcc.n	1ba0 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    1bf8:	4b27      	ldr	r3, [pc, #156]	; (1c98 <Clock_Ip_InitClock+0x5b0>)
    1bfa:	2200      	movs	r2, #0
    1bfc:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    1bfe:	4b26      	ldr	r3, [pc, #152]	; (1c98 <Clock_Ip_InitClock+0x5b0>)
    1c00:	2200      	movs	r2, #0
    1c02:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    1c04:	4b24      	ldr	r3, [pc, #144]	; (1c98 <Clock_Ip_InitClock+0x5b0>)
    1c06:	2201      	movs	r2, #1
    1c08:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    1c0a:	4b23      	ldr	r3, [pc, #140]	; (1c98 <Clock_Ip_InitClock+0x5b0>)
    1c0c:	2200      	movs	r2, #0
    1c0e:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    1c10:	f000 fa9c 	bl	214c <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1c14:	2300      	movs	r3, #0
    1c16:	9303      	str	r3, [sp, #12]
    1c18:	e04c      	b.n	1cb4 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    1c1a:	9a01      	ldr	r2, [sp, #4]
    1c1c:	9b03      	ldr	r3, [sp, #12]
    1c1e:	330d      	adds	r3, #13
    1c20:	00db      	lsls	r3, r3, #3
    1c22:	4413      	add	r3, r2
    1c24:	685b      	ldr	r3, [r3, #4]
    1c26:	4a1d      	ldr	r2, [pc, #116]	; (1c9c <Clock_Ip_InitClock+0x5b4>)
    1c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1c2c:	2b03      	cmp	r3, #3
    1c2e:	d03b      	beq.n	1ca8 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1c30:	9b01      	ldr	r3, [sp, #4]
    1c32:	9a03      	ldr	r2, [sp, #12]
    1c34:	320d      	adds	r2, #13
    1c36:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1c3a:	490c      	ldr	r1, [pc, #48]	; (1c6c <Clock_Ip_InitClock+0x584>)
    1c3c:	4613      	mov	r3, r2
    1c3e:	00db      	lsls	r3, r3, #3
    1c40:	4413      	add	r3, r2
    1c42:	440b      	add	r3, r1
    1c44:	3301      	adds	r3, #1
    1c46:	781b      	ldrb	r3, [r3, #0]
    1c48:	461a      	mov	r2, r3
    1c4a:	4b15      	ldr	r3, [pc, #84]	; (1ca0 <Clock_Ip_InitClock+0x5b8>)
    1c4c:	5c9b      	ldrb	r3, [r3, r2]
    1c4e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1c50:	4a14      	ldr	r2, [pc, #80]	; (1ca4 <Clock_Ip_InitClock+0x5bc>)
    1c52:	9b02      	ldr	r3, [sp, #8]
    1c54:	00db      	lsls	r3, r3, #3
    1c56:	4413      	add	r3, r2
    1c58:	685b      	ldr	r3, [r3, #4]
    1c5a:	9a03      	ldr	r2, [sp, #12]
    1c5c:	320d      	adds	r2, #13
    1c5e:	00d2      	lsls	r2, r2, #3
    1c60:	9901      	ldr	r1, [sp, #4]
    1c62:	440a      	add	r2, r1
    1c64:	4610      	mov	r0, r2
    1c66:	4798      	blx	r3
    1c68:	e021      	b.n	1cae <Clock_Ip_InitClock+0x5c6>
    1c6a:	bf00      	nop
    1c6c:	0000df54 	.word	0x0000df54
    1c70:	0000dec4 	.word	0x0000dec4
    1c74:	0000e4a0 	.word	0x0000e4a0
    1c78:	0000df14 	.word	0x0000df14
    1c7c:	0000e560 	.word	0x0000e560
    1c80:	0000df44 	.word	0x0000df44
    1c84:	0000e550 	.word	0x0000e550
    1c88:	0000ded4 	.word	0x0000ded4
    1c8c:	0000e4a8 	.word	0x0000e4a8
    1c90:	0000df04 	.word	0x0000df04
    1c94:	0000e4d0 	.word	0x0000e4d0
    1c98:	1fff8b40 	.word	0x1fff8b40
    1c9c:	0000e3a0 	.word	0x0000e3a0
    1ca0:	0000df24 	.word	0x0000df24
    1ca4:	0000e58c 	.word	0x0000e58c
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1ca8:	4b3a      	ldr	r3, [pc, #232]	; (1d94 <Clock_Ip_InitClock+0x6ac>)
    1caa:	2201      	movs	r2, #1
    1cac:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    1cae:	9b03      	ldr	r3, [sp, #12]
    1cb0:	3301      	adds	r3, #1
    1cb2:	9303      	str	r3, [sp, #12]
    1cb4:	9b01      	ldr	r3, [sp, #4]
    1cb6:	7adb      	ldrb	r3, [r3, #11]
    1cb8:	461a      	mov	r2, r3
    1cba:	9b03      	ldr	r3, [sp, #12]
    1cbc:	4293      	cmp	r3, r2
    1cbe:	d3ac      	bcc.n	1c1a <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1cc0:	4b34      	ldr	r3, [pc, #208]	; (1d94 <Clock_Ip_InitClock+0x6ac>)
    1cc2:	781b      	ldrb	r3, [r3, #0]
    1cc4:	f083 0301 	eor.w	r3, r3, #1
    1cc8:	b2db      	uxtb	r3, r3
    1cca:	2b00      	cmp	r3, #0
    1ccc:	d05e      	beq.n	1d8c <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1cce:	2300      	movs	r3, #0
    1cd0:	9303      	str	r3, [sp, #12]
    1cd2:	e01f      	b.n	1d14 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1cd4:	9a01      	ldr	r2, [sp, #4]
    1cd6:	9b03      	ldr	r3, [sp, #12]
    1cd8:	334e      	adds	r3, #78	; 0x4e
    1cda:	00db      	lsls	r3, r3, #3
    1cdc:	4413      	add	r3, r2
    1cde:	685a      	ldr	r2, [r3, #4]
    1ce0:	492d      	ldr	r1, [pc, #180]	; (1d98 <Clock_Ip_InitClock+0x6b0>)
    1ce2:	4613      	mov	r3, r2
    1ce4:	00db      	lsls	r3, r3, #3
    1ce6:	4413      	add	r3, r2
    1ce8:	440b      	add	r3, r1
    1cea:	3301      	adds	r3, #1
    1cec:	781b      	ldrb	r3, [r3, #0]
    1cee:	461a      	mov	r2, r3
    1cf0:	4b2a      	ldr	r3, [pc, #168]	; (1d9c <Clock_Ip_InitClock+0x6b4>)
    1cf2:	5c9b      	ldrb	r3, [r3, r2]
    1cf4:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    1cf6:	4a2a      	ldr	r2, [pc, #168]	; (1da0 <Clock_Ip_InitClock+0x6b8>)
    1cf8:	9b02      	ldr	r3, [sp, #8]
    1cfa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1cfe:	9a03      	ldr	r2, [sp, #12]
    1d00:	324e      	adds	r2, #78	; 0x4e
    1d02:	00d2      	lsls	r2, r2, #3
    1d04:	9901      	ldr	r1, [sp, #4]
    1d06:	440a      	add	r2, r1
    1d08:	3204      	adds	r2, #4
    1d0a:	4610      	mov	r0, r2
    1d0c:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1d0e:	9b03      	ldr	r3, [sp, #12]
    1d10:	3301      	adds	r3, #1
    1d12:	9303      	str	r3, [sp, #12]
    1d14:	9b01      	ldr	r3, [sp, #4]
    1d16:	7c1b      	ldrb	r3, [r3, #16]
    1d18:	461a      	mov	r2, r3
    1d1a:	9b03      	ldr	r3, [sp, #12]
    1d1c:	4293      	cmp	r3, r2
    1d1e:	d3d9      	bcc.n	1cd4 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1d20:	2300      	movs	r3, #0
    1d22:	9303      	str	r3, [sp, #12]
    1d24:	e028      	b.n	1d78 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1d26:	9901      	ldr	r1, [sp, #4]
    1d28:	9a03      	ldr	r2, [sp, #12]
    1d2a:	4613      	mov	r3, r2
    1d2c:	009b      	lsls	r3, r3, #2
    1d2e:	4413      	add	r3, r2
    1d30:	009b      	lsls	r3, r3, #2
    1d32:	440b      	add	r3, r1
    1d34:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1d38:	681a      	ldr	r2, [r3, #0]
    1d3a:	4917      	ldr	r1, [pc, #92]	; (1d98 <Clock_Ip_InitClock+0x6b0>)
    1d3c:	4613      	mov	r3, r2
    1d3e:	00db      	lsls	r3, r3, #3
    1d40:	4413      	add	r3, r2
    1d42:	440b      	add	r3, r1
    1d44:	3301      	adds	r3, #1
    1d46:	781b      	ldrb	r3, [r3, #0]
    1d48:	461a      	mov	r2, r3
    1d4a:	4b16      	ldr	r3, [pc, #88]	; (1da4 <Clock_Ip_InitClock+0x6bc>)
    1d4c:	5c9b      	ldrb	r3, [r3, r2]
    1d4e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1d50:	4a15      	ldr	r2, [pc, #84]	; (1da8 <Clock_Ip_InitClock+0x6c0>)
    1d52:	9b02      	ldr	r3, [sp, #8]
    1d54:	011b      	lsls	r3, r3, #4
    1d56:	4413      	add	r3, r2
    1d58:	330c      	adds	r3, #12
    1d5a:	6819      	ldr	r1, [r3, #0]
    1d5c:	9a03      	ldr	r2, [sp, #12]
    1d5e:	4613      	mov	r3, r2
    1d60:	009b      	lsls	r3, r3, #2
    1d62:	4413      	add	r3, r2
    1d64:	009b      	lsls	r3, r3, #2
    1d66:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1d6a:	9a01      	ldr	r2, [sp, #4]
    1d6c:	4413      	add	r3, r2
    1d6e:	4618      	mov	r0, r3
    1d70:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1d72:	9b03      	ldr	r3, [sp, #12]
    1d74:	3301      	adds	r3, #1
    1d76:	9303      	str	r3, [sp, #12]
    1d78:	9b01      	ldr	r3, [sp, #4]
    1d7a:	7c9b      	ldrb	r3, [r3, #18]
    1d7c:	461a      	mov	r2, r3
    1d7e:	9b03      	ldr	r3, [sp, #12]
    1d80:	4293      	cmp	r3, r2
    1d82:	d3d0      	bcc.n	1d26 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1d84:	2104      	movs	r1, #4
    1d86:	9801      	ldr	r0, [sp, #4]
    1d88:	f002 ff48 	bl	4c1c <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    1d8c:	bf00      	nop
    1d8e:	b004      	add	sp, #16
    1d90:	bd10      	pop	{r4, pc}
    1d92:	bf00      	nop
    1d94:	1fff8b40 	.word	0x1fff8b40
    1d98:	0000df54 	.word	0x0000df54
    1d9c:	0000def4 	.word	0x0000def4
    1da0:	0000e4dc 	.word	0x0000e4dc
    1da4:	0000df44 	.word	0x0000df44
    1da8:	0000e550 	.word	0x0000e550

00001dac <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    1dac:	b500      	push	{lr}
    1dae:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1db0:	2302      	movs	r3, #2
    1db2:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1db4:	2300      	movs	r3, #0
    1db6:	9304      	str	r3, [sp, #16]
    1db8:	e02c      	b.n	1e14 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    1dba:	4a36      	ldr	r2, [pc, #216]	; (1e94 <Clock_Ip_GetPllStatus+0xe8>)
    1dbc:	9b04      	ldr	r3, [sp, #16]
    1dbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1dc2:	4935      	ldr	r1, [pc, #212]	; (1e98 <Clock_Ip_GetPllStatus+0xec>)
    1dc4:	4613      	mov	r3, r2
    1dc6:	00db      	lsls	r3, r3, #3
    1dc8:	4413      	add	r3, r2
    1dca:	440b      	add	r3, r1
    1dcc:	3301      	adds	r3, #1
    1dce:	781b      	ldrb	r3, [r3, #0]
    1dd0:	461a      	mov	r2, r3
    1dd2:	4b32      	ldr	r3, [pc, #200]	; (1e9c <Clock_Ip_GetPllStatus+0xf0>)
    1dd4:	5c9b      	ldrb	r3, [r3, r2]
    1dd6:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    1dd8:	4931      	ldr	r1, [pc, #196]	; (1ea0 <Clock_Ip_GetPllStatus+0xf4>)
    1dda:	9a03      	ldr	r2, [sp, #12]
    1ddc:	4613      	mov	r3, r2
    1dde:	009b      	lsls	r3, r3, #2
    1de0:	4413      	add	r3, r2
    1de2:	009b      	lsls	r3, r3, #2
    1de4:	440b      	add	r3, r1
    1de6:	3308      	adds	r3, #8
    1de8:	681b      	ldr	r3, [r3, #0]
    1dea:	492a      	ldr	r1, [pc, #168]	; (1e94 <Clock_Ip_GetPllStatus+0xe8>)
    1dec:	9a04      	ldr	r2, [sp, #16]
    1dee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1df2:	4610      	mov	r0, r2
    1df4:	4798      	blx	r3
    1df6:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    1df8:	9b02      	ldr	r3, [sp, #8]
    1dfa:	2b01      	cmp	r3, #1
    1dfc:	d102      	bne.n	1e04 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    1dfe:	2301      	movs	r3, #1
    1e00:	9305      	str	r3, [sp, #20]
            break;
    1e02:	e00d      	b.n	1e20 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    1e04:	9b02      	ldr	r3, [sp, #8]
    1e06:	2b02      	cmp	r3, #2
    1e08:	d101      	bne.n	1e0e <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    1e0a:	2300      	movs	r3, #0
    1e0c:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1e0e:	9b04      	ldr	r3, [sp, #16]
    1e10:	3301      	adds	r3, #1
    1e12:	9304      	str	r3, [sp, #16]
    1e14:	4b23      	ldr	r3, [pc, #140]	; (1ea4 <Clock_Ip_GetPllStatus+0xf8>)
    1e16:	789b      	ldrb	r3, [r3, #2]
    1e18:	461a      	mov	r2, r3
    1e1a:	9b04      	ldr	r3, [sp, #16]
    1e1c:	4293      	cmp	r3, r2
    1e1e:	d3cc      	bcc.n	1dba <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    1e20:	9b05      	ldr	r3, [sp, #20]
    1e22:	2b00      	cmp	r3, #0
    1e24:	d130      	bne.n	1e88 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1e26:	2300      	movs	r3, #0
    1e28:	9304      	str	r3, [sp, #16]
    1e2a:	e027      	b.n	1e7c <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    1e2c:	4a1e      	ldr	r2, [pc, #120]	; (1ea8 <Clock_Ip_GetPllStatus+0xfc>)
    1e2e:	9b04      	ldr	r3, [sp, #16]
    1e30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1e34:	4918      	ldr	r1, [pc, #96]	; (1e98 <Clock_Ip_GetPllStatus+0xec>)
    1e36:	4613      	mov	r3, r2
    1e38:	00db      	lsls	r3, r3, #3
    1e3a:	4413      	add	r3, r2
    1e3c:	440b      	add	r3, r1
    1e3e:	3301      	adds	r3, #1
    1e40:	781b      	ldrb	r3, [r3, #0]
    1e42:	461a      	mov	r2, r3
    1e44:	4b19      	ldr	r3, [pc, #100]	; (1eac <Clock_Ip_GetPllStatus+0x100>)
    1e46:	5c9b      	ldrb	r3, [r3, r2]
    1e48:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    1e4a:	4919      	ldr	r1, [pc, #100]	; (1eb0 <Clock_Ip_GetPllStatus+0x104>)
    1e4c:	9a03      	ldr	r2, [sp, #12]
    1e4e:	4613      	mov	r3, r2
    1e50:	005b      	lsls	r3, r3, #1
    1e52:	4413      	add	r3, r2
    1e54:	009b      	lsls	r3, r3, #2
    1e56:	440b      	add	r3, r1
    1e58:	3308      	adds	r3, #8
    1e5a:	681b      	ldr	r3, [r3, #0]
    1e5c:	4912      	ldr	r1, [pc, #72]	; (1ea8 <Clock_Ip_GetPllStatus+0xfc>)
    1e5e:	9a04      	ldr	r2, [sp, #16]
    1e60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1e64:	4610      	mov	r0, r2
    1e66:	4798      	blx	r3
    1e68:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    1e6a:	9b01      	ldr	r3, [sp, #4]
    1e6c:	2b01      	cmp	r3, #1
    1e6e:	d102      	bne.n	1e76 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1e70:	2301      	movs	r3, #1
    1e72:	9305      	str	r3, [sp, #20]
                break;
    1e74:	e008      	b.n	1e88 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1e76:	9b04      	ldr	r3, [sp, #16]
    1e78:	3301      	adds	r3, #1
    1e7a:	9304      	str	r3, [sp, #16]
    1e7c:	4b09      	ldr	r3, [pc, #36]	; (1ea4 <Clock_Ip_GetPllStatus+0xf8>)
    1e7e:	78db      	ldrb	r3, [r3, #3]
    1e80:	461a      	mov	r2, r3
    1e82:	9b04      	ldr	r3, [sp, #16]
    1e84:	4293      	cmp	r3, r2
    1e86:	d3d1      	bcc.n	1e2c <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1e88:	9b05      	ldr	r3, [sp, #20]
}
    1e8a:	4618      	mov	r0, r3
    1e8c:	b007      	add	sp, #28
    1e8e:	f85d fb04 	ldr.w	pc, [sp], #4
    1e92:	bf00      	nop
    1e94:	0000e45c 	.word	0x0000e45c
    1e98:	0000df54 	.word	0x0000df54
    1e9c:	0000df14 	.word	0x0000df14
    1ea0:	0000e560 	.word	0x0000e560
    1ea4:	1fff8b40 	.word	0x1fff8b40
    1ea8:	0000e460 	.word	0x0000e460
    1eac:	0000df04 	.word	0x0000df04
    1eb0:	0000e4d0 	.word	0x0000e4d0

00001eb4 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1eb4:	b500      	push	{lr}
    1eb6:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1eb8:	4b55      	ldr	r3, [pc, #340]	; (2010 <Clock_Ip_DistributePll+0x15c>)
    1eba:	681b      	ldr	r3, [r3, #0]
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	f000 80a2 	beq.w	2006 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1ec2:	2300      	movs	r3, #0
    1ec4:	9301      	str	r3, [sp, #4]
    1ec6:	e02c      	b.n	1f22 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1ec8:	4b51      	ldr	r3, [pc, #324]	; (2010 <Clock_Ip_DistributePll+0x15c>)
    1eca:	681a      	ldr	r2, [r3, #0]
    1ecc:	9b01      	ldr	r3, [sp, #4]
    1ece:	330d      	adds	r3, #13
    1ed0:	00db      	lsls	r3, r3, #3
    1ed2:	4413      	add	r3, r2
    1ed4:	685b      	ldr	r3, [r3, #4]
    1ed6:	4a4f      	ldr	r2, [pc, #316]	; (2014 <Clock_Ip_DistributePll+0x160>)
    1ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1edc:	2b03      	cmp	r3, #3
    1ede:	d11d      	bne.n	1f1c <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1ee0:	4b4b      	ldr	r3, [pc, #300]	; (2010 <Clock_Ip_DistributePll+0x15c>)
    1ee2:	681b      	ldr	r3, [r3, #0]
    1ee4:	9a01      	ldr	r2, [sp, #4]
    1ee6:	320d      	adds	r2, #13
    1ee8:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1eec:	494a      	ldr	r1, [pc, #296]	; (2018 <Clock_Ip_DistributePll+0x164>)
    1eee:	4613      	mov	r3, r2
    1ef0:	00db      	lsls	r3, r3, #3
    1ef2:	4413      	add	r3, r2
    1ef4:	440b      	add	r3, r1
    1ef6:	3301      	adds	r3, #1
    1ef8:	781b      	ldrb	r3, [r3, #0]
    1efa:	461a      	mov	r2, r3
    1efc:	4b47      	ldr	r3, [pc, #284]	; (201c <Clock_Ip_DistributePll+0x168>)
    1efe:	5c9b      	ldrb	r3, [r3, r2]
    1f00:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    1f02:	4a47      	ldr	r2, [pc, #284]	; (2020 <Clock_Ip_DistributePll+0x16c>)
    1f04:	9b00      	ldr	r3, [sp, #0]
    1f06:	00db      	lsls	r3, r3, #3
    1f08:	4413      	add	r3, r2
    1f0a:	685b      	ldr	r3, [r3, #4]
    1f0c:	4a40      	ldr	r2, [pc, #256]	; (2010 <Clock_Ip_DistributePll+0x15c>)
    1f0e:	6811      	ldr	r1, [r2, #0]
    1f10:	9a01      	ldr	r2, [sp, #4]
    1f12:	320d      	adds	r2, #13
    1f14:	00d2      	lsls	r2, r2, #3
    1f16:	440a      	add	r2, r1
    1f18:	4610      	mov	r0, r2
    1f1a:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1f1c:	9b01      	ldr	r3, [sp, #4]
    1f1e:	3301      	adds	r3, #1
    1f20:	9301      	str	r3, [sp, #4]
    1f22:	4b3b      	ldr	r3, [pc, #236]	; (2010 <Clock_Ip_DistributePll+0x15c>)
    1f24:	681b      	ldr	r3, [r3, #0]
    1f26:	7adb      	ldrb	r3, [r3, #11]
    1f28:	461a      	mov	r2, r3
    1f2a:	9b01      	ldr	r3, [sp, #4]
    1f2c:	4293      	cmp	r3, r2
    1f2e:	d3cb      	bcc.n	1ec8 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1f30:	4b3c      	ldr	r3, [pc, #240]	; (2024 <Clock_Ip_DistributePll+0x170>)
    1f32:	781b      	ldrb	r3, [r3, #0]
    1f34:	2b00      	cmp	r3, #0
    1f36:	d066      	beq.n	2006 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1f38:	2300      	movs	r3, #0
    1f3a:	9301      	str	r3, [sp, #4]
    1f3c:	e021      	b.n	1f82 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1f3e:	4b34      	ldr	r3, [pc, #208]	; (2010 <Clock_Ip_DistributePll+0x15c>)
    1f40:	681a      	ldr	r2, [r3, #0]
    1f42:	9b01      	ldr	r3, [sp, #4]
    1f44:	334e      	adds	r3, #78	; 0x4e
    1f46:	00db      	lsls	r3, r3, #3
    1f48:	4413      	add	r3, r2
    1f4a:	685a      	ldr	r2, [r3, #4]
    1f4c:	4932      	ldr	r1, [pc, #200]	; (2018 <Clock_Ip_DistributePll+0x164>)
    1f4e:	4613      	mov	r3, r2
    1f50:	00db      	lsls	r3, r3, #3
    1f52:	4413      	add	r3, r2
    1f54:	440b      	add	r3, r1
    1f56:	3301      	adds	r3, #1
    1f58:	781b      	ldrb	r3, [r3, #0]
    1f5a:	461a      	mov	r2, r3
    1f5c:	4b32      	ldr	r3, [pc, #200]	; (2028 <Clock_Ip_DistributePll+0x174>)
    1f5e:	5c9b      	ldrb	r3, [r3, r2]
    1f60:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    1f62:	4a32      	ldr	r2, [pc, #200]	; (202c <Clock_Ip_DistributePll+0x178>)
    1f64:	9b00      	ldr	r3, [sp, #0]
    1f66:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1f6a:	4a29      	ldr	r2, [pc, #164]	; (2010 <Clock_Ip_DistributePll+0x15c>)
    1f6c:	6811      	ldr	r1, [r2, #0]
    1f6e:	9a01      	ldr	r2, [sp, #4]
    1f70:	324e      	adds	r2, #78	; 0x4e
    1f72:	00d2      	lsls	r2, r2, #3
    1f74:	440a      	add	r2, r1
    1f76:	3204      	adds	r2, #4
    1f78:	4610      	mov	r0, r2
    1f7a:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1f7c:	9b01      	ldr	r3, [sp, #4]
    1f7e:	3301      	adds	r3, #1
    1f80:	9301      	str	r3, [sp, #4]
    1f82:	4b23      	ldr	r3, [pc, #140]	; (2010 <Clock_Ip_DistributePll+0x15c>)
    1f84:	681b      	ldr	r3, [r3, #0]
    1f86:	7c1b      	ldrb	r3, [r3, #16]
    1f88:	461a      	mov	r2, r3
    1f8a:	9b01      	ldr	r3, [sp, #4]
    1f8c:	4293      	cmp	r3, r2
    1f8e:	d3d6      	bcc.n	1f3e <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1f90:	2300      	movs	r3, #0
    1f92:	9301      	str	r3, [sp, #4]
    1f94:	e02a      	b.n	1fec <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1f96:	4b1e      	ldr	r3, [pc, #120]	; (2010 <Clock_Ip_DistributePll+0x15c>)
    1f98:	6819      	ldr	r1, [r3, #0]
    1f9a:	9a01      	ldr	r2, [sp, #4]
    1f9c:	4613      	mov	r3, r2
    1f9e:	009b      	lsls	r3, r3, #2
    1fa0:	4413      	add	r3, r2
    1fa2:	009b      	lsls	r3, r3, #2
    1fa4:	440b      	add	r3, r1
    1fa6:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1faa:	681a      	ldr	r2, [r3, #0]
    1fac:	491a      	ldr	r1, [pc, #104]	; (2018 <Clock_Ip_DistributePll+0x164>)
    1fae:	4613      	mov	r3, r2
    1fb0:	00db      	lsls	r3, r3, #3
    1fb2:	4413      	add	r3, r2
    1fb4:	440b      	add	r3, r1
    1fb6:	3301      	adds	r3, #1
    1fb8:	781b      	ldrb	r3, [r3, #0]
    1fba:	461a      	mov	r2, r3
    1fbc:	4b1c      	ldr	r3, [pc, #112]	; (2030 <Clock_Ip_DistributePll+0x17c>)
    1fbe:	5c9b      	ldrb	r3, [r3, r2]
    1fc0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    1fc2:	4a1c      	ldr	r2, [pc, #112]	; (2034 <Clock_Ip_DistributePll+0x180>)
    1fc4:	9b00      	ldr	r3, [sp, #0]
    1fc6:	011b      	lsls	r3, r3, #4
    1fc8:	4413      	add	r3, r2
    1fca:	330c      	adds	r3, #12
    1fcc:	6819      	ldr	r1, [r3, #0]
    1fce:	4b10      	ldr	r3, [pc, #64]	; (2010 <Clock_Ip_DistributePll+0x15c>)
    1fd0:	6818      	ldr	r0, [r3, #0]
    1fd2:	9a01      	ldr	r2, [sp, #4]
    1fd4:	4613      	mov	r3, r2
    1fd6:	009b      	lsls	r3, r3, #2
    1fd8:	4413      	add	r3, r2
    1fda:	009b      	lsls	r3, r3, #2
    1fdc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1fe0:	4403      	add	r3, r0
    1fe2:	4618      	mov	r0, r3
    1fe4:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1fe6:	9b01      	ldr	r3, [sp, #4]
    1fe8:	3301      	adds	r3, #1
    1fea:	9301      	str	r3, [sp, #4]
    1fec:	4b08      	ldr	r3, [pc, #32]	; (2010 <Clock_Ip_DistributePll+0x15c>)
    1fee:	681b      	ldr	r3, [r3, #0]
    1ff0:	7c9b      	ldrb	r3, [r3, #18]
    1ff2:	461a      	mov	r2, r3
    1ff4:	9b01      	ldr	r3, [sp, #4]
    1ff6:	4293      	cmp	r3, r2
    1ff8:	d3cd      	bcc.n	1f96 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1ffa:	4b05      	ldr	r3, [pc, #20]	; (2010 <Clock_Ip_DistributePll+0x15c>)
    1ffc:	681b      	ldr	r3, [r3, #0]
    1ffe:	2104      	movs	r1, #4
    2000:	4618      	mov	r0, r3
    2002:	f002 fe0b 	bl	4c1c <Clock_Ip_Command>
        }
    }
}
    2006:	bf00      	nop
    2008:	b003      	add	sp, #12
    200a:	f85d fb04 	ldr.w	pc, [sp], #4
    200e:	bf00      	nop
    2010:	1fff8b38 	.word	0x1fff8b38
    2014:	0000e3a0 	.word	0x0000e3a0
    2018:	0000df54 	.word	0x0000df54
    201c:	0000df24 	.word	0x0000df24
    2020:	0000e58c 	.word	0x0000e58c
    2024:	1fff8b40 	.word	0x1fff8b40
    2028:	0000def4 	.word	0x0000def4
    202c:	0000e4dc 	.word	0x0000e4dc
    2030:	0000df44 	.word	0x0000df44
    2034:	0000e550 	.word	0x0000e550

00002038 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2038:	b500      	push	{lr}
    203a:	b085      	sub	sp, #20
    203c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    203e:	490c      	ldr	r1, [pc, #48]	; (2070 <Clock_Ip_DisableClockMonitor+0x38>)
    2040:	9a01      	ldr	r2, [sp, #4]
    2042:	4613      	mov	r3, r2
    2044:	00db      	lsls	r3, r3, #3
    2046:	4413      	add	r3, r2
    2048:	440b      	add	r3, r1
    204a:	3301      	adds	r3, #1
    204c:	781b      	ldrb	r3, [r3, #0]
    204e:	461a      	mov	r2, r3
    2050:	4b08      	ldr	r3, [pc, #32]	; (2074 <Clock_Ip_DisableClockMonitor+0x3c>)
    2052:	5c9b      	ldrb	r3, [r3, r2]
    2054:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2056:	4a08      	ldr	r2, [pc, #32]	; (2078 <Clock_Ip_DisableClockMonitor+0x40>)
    2058:	9b03      	ldr	r3, [sp, #12]
    205a:	011b      	lsls	r3, r3, #4
    205c:	4413      	add	r3, r2
    205e:	3308      	adds	r3, #8
    2060:	681b      	ldr	r3, [r3, #0]
    2062:	9801      	ldr	r0, [sp, #4]
    2064:	4798      	blx	r3
}
    2066:	bf00      	nop
    2068:	b005      	add	sp, #20
    206a:	f85d fb04 	ldr.w	pc, [sp], #4
    206e:	bf00      	nop
    2070:	0000df54 	.word	0x0000df54
    2074:	0000df44 	.word	0x0000df44
    2078:	0000e550 	.word	0x0000e550

0000207c <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    207c:	b082      	sub	sp, #8
    207e:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2080:	4a02      	ldr	r2, [pc, #8]	; (208c <Clock_Ip_InstallNotificationsCallback+0x10>)
    2082:	9b01      	ldr	r3, [sp, #4]
    2084:	6013      	str	r3, [r2, #0]
}
    2086:	bf00      	nop
    2088:	b002      	add	sp, #8
    208a:	4770      	bx	lr
    208c:	1fff8b1c 	.word	0x1fff8b1c

00002090 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2090:	b500      	push	{lr}
    2092:	b085      	sub	sp, #20
    2094:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2096:	490c      	ldr	r1, [pc, #48]	; (20c8 <Clock_Ip_DisableModuleClock+0x38>)
    2098:	9a01      	ldr	r2, [sp, #4]
    209a:	4613      	mov	r3, r2
    209c:	00db      	lsls	r3, r3, #3
    209e:	4413      	add	r3, r2
    20a0:	440b      	add	r3, r1
    20a2:	3301      	adds	r3, #1
    20a4:	781b      	ldrb	r3, [r3, #0]
    20a6:	461a      	mov	r2, r3
    20a8:	4b08      	ldr	r3, [pc, #32]	; (20cc <Clock_Ip_DisableModuleClock+0x3c>)
    20aa:	5c9b      	ldrb	r3, [r3, r2]
    20ac:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    20ae:	4a08      	ldr	r2, [pc, #32]	; (20d0 <Clock_Ip_DisableModuleClock+0x40>)
    20b0:	9b03      	ldr	r3, [sp, #12]
    20b2:	00db      	lsls	r3, r3, #3
    20b4:	4413      	add	r3, r2
    20b6:	685b      	ldr	r3, [r3, #4]
    20b8:	2101      	movs	r1, #1
    20ba:	9801      	ldr	r0, [sp, #4]
    20bc:	4798      	blx	r3
}
    20be:	bf00      	nop
    20c0:	b005      	add	sp, #20
    20c2:	f85d fb04 	ldr.w	pc, [sp], #4
    20c6:	bf00      	nop
    20c8:	0000df54 	.word	0x0000df54
    20cc:	0000def4 	.word	0x0000def4
    20d0:	0000e4dc 	.word	0x0000e4dc

000020d4 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    20d4:	b500      	push	{lr}
    20d6:	b085      	sub	sp, #20
    20d8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    20da:	490c      	ldr	r1, [pc, #48]	; (210c <Clock_Ip_EnableModuleClock+0x38>)
    20dc:	9a01      	ldr	r2, [sp, #4]
    20de:	4613      	mov	r3, r2
    20e0:	00db      	lsls	r3, r3, #3
    20e2:	4413      	add	r3, r2
    20e4:	440b      	add	r3, r1
    20e6:	3301      	adds	r3, #1
    20e8:	781b      	ldrb	r3, [r3, #0]
    20ea:	461a      	mov	r2, r3
    20ec:	4b08      	ldr	r3, [pc, #32]	; (2110 <Clock_Ip_EnableModuleClock+0x3c>)
    20ee:	5c9b      	ldrb	r3, [r3, r2]
    20f0:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    20f2:	4a08      	ldr	r2, [pc, #32]	; (2114 <Clock_Ip_EnableModuleClock+0x40>)
    20f4:	9b03      	ldr	r3, [sp, #12]
    20f6:	00db      	lsls	r3, r3, #3
    20f8:	4413      	add	r3, r2
    20fa:	685b      	ldr	r3, [r3, #4]
    20fc:	2100      	movs	r1, #0
    20fe:	9801      	ldr	r0, [sp, #4]
    2100:	4798      	blx	r3
}
    2102:	bf00      	nop
    2104:	b005      	add	sp, #20
    2106:	f85d fb04 	ldr.w	pc, [sp], #4
    210a:	bf00      	nop
    210c:	0000df54 	.word	0x0000df54
    2110:	0000def4 	.word	0x0000def4
    2114:	0000e4dc 	.word	0x0000e4dc

00002118 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2118:	b500      	push	{lr}
    211a:	b083      	sub	sp, #12
    211c:	9001      	str	r0, [sp, #4]
    211e:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2120:	4b08      	ldr	r3, [pc, #32]	; (2144 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2122:	2200      	movs	r2, #0
    2124:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2126:	4b08      	ldr	r3, [pc, #32]	; (2148 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2128:	681b      	ldr	r3, [r3, #0]
    212a:	2102      	movs	r1, #2
    212c:	4618      	mov	r0, r3
    212e:	f002 fd75 	bl	4c1c <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2132:	9900      	ldr	r1, [sp, #0]
    2134:	9801      	ldr	r0, [sp, #4]
    2136:	f002 fc51 	bl	49dc <Clock_Ip_ClockPowerModeChangeNotification>
}
    213a:	bf00      	nop
    213c:	b003      	add	sp, #12
    213e:	f85d fb04 	ldr.w	pc, [sp], #4
    2142:	bf00      	nop
    2144:	1fff8b18 	.word	0x1fff8b18
    2148:	1fff8b38 	.word	0x1fff8b38

0000214c <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    214c:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    214e:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2152:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2154:	4b06      	ldr	r3, [pc, #24]	; (2170 <Clock_Ip_SetWaitStates+0x24>)
    2156:	785b      	ldrb	r3, [r3, #1]
    2158:	2b00      	cmp	r3, #0
    215a:	d005      	beq.n	2168 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    215c:	9b01      	ldr	r3, [sp, #4]
    215e:	3b01      	subs	r3, #1
    2160:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2162:	9b01      	ldr	r3, [sp, #4]
    2164:	2b00      	cmp	r3, #0
    2166:	d1f9      	bne.n	215c <Clock_Ip_SetWaitStates+0x10>
    }
}
    2168:	bf00      	nop
    216a:	b002      	add	sp, #8
    216c:	4770      	bx	lr
    216e:	bf00      	nop
    2170:	1fff8b40 	.word	0x1fff8b40

00002174 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2174:	b500      	push	{lr}
    2176:	b083      	sub	sp, #12
    2178:	9001      	str	r0, [sp, #4]
    217a:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    217c:	4b04      	ldr	r3, [pc, #16]	; (2190 <Clock_Ip_ReportClockErrors+0x1c>)
    217e:	681b      	ldr	r3, [r3, #0]
    2180:	9900      	ldr	r1, [sp, #0]
    2182:	9801      	ldr	r0, [sp, #4]
    2184:	4798      	blx	r3
}
    2186:	bf00      	nop
    2188:	b003      	add	sp, #12
    218a:	f85d fb04 	ldr.w	pc, [sp], #4
    218e:	bf00      	nop
    2190:	1fff8b1c 	.word	0x1fff8b1c

00002194 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2194:	b500      	push	{lr}
    2196:	b085      	sub	sp, #20
    2198:	9003      	str	r0, [sp, #12]
    219a:	9102      	str	r1, [sp, #8]
    219c:	9201      	str	r2, [sp, #4]
    219e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    21a0:	2000      	movs	r0, #0
    21a2:	f7fe ffd1 	bl	1148 <OsIf_GetCounter>
    21a6:	4602      	mov	r2, r0
    21a8:	9b03      	ldr	r3, [sp, #12]
    21aa:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    21ac:	9b02      	ldr	r3, [sp, #8]
    21ae:	2200      	movs	r2, #0
    21b0:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    21b2:	2100      	movs	r1, #0
    21b4:	9800      	ldr	r0, [sp, #0]
    21b6:	f7ff f813 	bl	11e0 <OsIf_MicrosToTicks>
    21ba:	4602      	mov	r2, r0
    21bc:	9b01      	ldr	r3, [sp, #4]
    21be:	601a      	str	r2, [r3, #0]
}
    21c0:	bf00      	nop
    21c2:	b005      	add	sp, #20
    21c4:	f85d fb04 	ldr.w	pc, [sp], #4

000021c8 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    21c8:	b500      	push	{lr}
    21ca:	b087      	sub	sp, #28
    21cc:	9003      	str	r0, [sp, #12]
    21ce:	9102      	str	r1, [sp, #8]
    21d0:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    21d2:	2300      	movs	r3, #0
    21d4:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    21d8:	2100      	movs	r1, #0
    21da:	9803      	ldr	r0, [sp, #12]
    21dc:	f7fe ffcd 	bl	117a <OsIf_GetElapsed>
    21e0:	4602      	mov	r2, r0
    21e2:	9b02      	ldr	r3, [sp, #8]
    21e4:	681b      	ldr	r3, [r3, #0]
    21e6:	441a      	add	r2, r3
    21e8:	9b02      	ldr	r3, [sp, #8]
    21ea:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    21ec:	9b02      	ldr	r3, [sp, #8]
    21ee:	681b      	ldr	r3, [r3, #0]
    21f0:	9a01      	ldr	r2, [sp, #4]
    21f2:	429a      	cmp	r2, r3
    21f4:	d802      	bhi.n	21fc <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    21f6:	2301      	movs	r3, #1
    21f8:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    21fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2200:	4618      	mov	r0, r3
    2202:	b007      	add	sp, #28
    2204:	f85d fb04 	ldr.w	pc, [sp], #4

00002208 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2208:	b082      	sub	sp, #8
    220a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    220c:	bf00      	nop
    220e:	b002      	add	sp, #8
    2210:	4770      	bx	lr

00002212 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2212:	b500      	push	{lr}
    2214:	b083      	sub	sp, #12
    2216:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2218:	9b01      	ldr	r3, [sp, #4]
    221a:	2b00      	cmp	r3, #0
    221c:	d002      	beq.n	2224 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    221e:	9801      	ldr	r0, [sp, #4]
    2220:	f000 f8ad 	bl	237e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2224:	bf00      	nop
    2226:	b003      	add	sp, #12
    2228:	f85d fb04 	ldr.w	pc, [sp], #4

0000222c <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    222c:	b500      	push	{lr}
    222e:	b083      	sub	sp, #12
    2230:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2232:	9b01      	ldr	r3, [sp, #4]
    2234:	2b00      	cmp	r3, #0
    2236:	d002      	beq.n	223e <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2238:	9801      	ldr	r0, [sp, #4]
    223a:	f000 f8cd 	bl	23d8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    223e:	bf00      	nop
    2240:	b003      	add	sp, #12
    2242:	f85d fb04 	ldr.w	pc, [sp], #4

00002246 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2246:	b500      	push	{lr}
    2248:	b083      	sub	sp, #12
    224a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    224c:	9b01      	ldr	r3, [sp, #4]
    224e:	2b00      	cmp	r3, #0
    2250:	d002      	beq.n	2258 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2252:	9801      	ldr	r0, [sp, #4]
    2254:	f000 f8ee 	bl	2434 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2258:	bf00      	nop
    225a:	b003      	add	sp, #12
    225c:	f85d fb04 	ldr.w	pc, [sp], #4

00002260 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2260:	b500      	push	{lr}
    2262:	b083      	sub	sp, #12
    2264:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2266:	9b01      	ldr	r3, [sp, #4]
    2268:	2b00      	cmp	r3, #0
    226a:	d002      	beq.n	2272 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    226c:	9801      	ldr	r0, [sp, #4]
    226e:	f000 f8f9 	bl	2464 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2272:	bf00      	nop
    2274:	b003      	add	sp, #12
    2276:	f85d fb04 	ldr.w	pc, [sp], #4

0000227a <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    227a:	b500      	push	{lr}
    227c:	b083      	sub	sp, #12
    227e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2280:	9b01      	ldr	r3, [sp, #4]
    2282:	2b00      	cmp	r3, #0
    2284:	d002      	beq.n	228c <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2286:	9801      	ldr	r0, [sp, #4]
    2288:	f000 f904 	bl	2494 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    228c:	bf00      	nop
    228e:	b003      	add	sp, #12
    2290:	f85d fb04 	ldr.w	pc, [sp], #4

00002294 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2294:	b500      	push	{lr}
    2296:	b083      	sub	sp, #12
    2298:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    229a:	9b01      	ldr	r3, [sp, #4]
    229c:	2b00      	cmp	r3, #0
    229e:	d002      	beq.n	22a6 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    22a0:	9801      	ldr	r0, [sp, #4]
    22a2:	f000 f90f 	bl	24c4 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22a6:	bf00      	nop
    22a8:	b003      	add	sp, #12
    22aa:	f85d fb04 	ldr.w	pc, [sp], #4

000022ae <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    22ae:	b500      	push	{lr}
    22b0:	b083      	sub	sp, #12
    22b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22b4:	9b01      	ldr	r3, [sp, #4]
    22b6:	2b00      	cmp	r3, #0
    22b8:	d002      	beq.n	22c0 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    22ba:	9801      	ldr	r0, [sp, #4]
    22bc:	f000 f91a 	bl	24f4 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22c0:	bf00      	nop
    22c2:	b003      	add	sp, #12
    22c4:	f85d fb04 	ldr.w	pc, [sp], #4

000022c8 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    22c8:	b500      	push	{lr}
    22ca:	b083      	sub	sp, #12
    22cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22ce:	9b01      	ldr	r3, [sp, #4]
    22d0:	2b00      	cmp	r3, #0
    22d2:	d002      	beq.n	22da <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    22d4:	9801      	ldr	r0, [sp, #4]
    22d6:	f000 f925 	bl	2524 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22da:	bf00      	nop
    22dc:	b003      	add	sp, #12
    22de:	f85d fb04 	ldr.w	pc, [sp], #4

000022e2 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    22e2:	b500      	push	{lr}
    22e4:	b083      	sub	sp, #12
    22e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    22e8:	9b01      	ldr	r3, [sp, #4]
    22ea:	2b00      	cmp	r3, #0
    22ec:	d002      	beq.n	22f4 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    22ee:	9801      	ldr	r0, [sp, #4]
    22f0:	f000 f930 	bl	2554 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22f4:	bf00      	nop
    22f6:	b003      	add	sp, #12
    22f8:	f85d fb04 	ldr.w	pc, [sp], #4

000022fc <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    22fc:	b500      	push	{lr}
    22fe:	b083      	sub	sp, #12
    2300:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2302:	9b01      	ldr	r3, [sp, #4]
    2304:	2b00      	cmp	r3, #0
    2306:	d002      	beq.n	230e <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2308:	9801      	ldr	r0, [sp, #4]
    230a:	f000 f93b 	bl	2584 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    230e:	bf00      	nop
    2310:	b003      	add	sp, #12
    2312:	f85d fb04 	ldr.w	pc, [sp], #4

00002316 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2316:	b500      	push	{lr}
    2318:	b083      	sub	sp, #12
    231a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    231c:	9b01      	ldr	r3, [sp, #4]
    231e:	2b00      	cmp	r3, #0
    2320:	d002      	beq.n	2328 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2322:	9801      	ldr	r0, [sp, #4]
    2324:	f000 f946 	bl	25b4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2328:	bf00      	nop
    232a:	b003      	add	sp, #12
    232c:	f85d fb04 	ldr.w	pc, [sp], #4

00002330 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2330:	b500      	push	{lr}
    2332:	b083      	sub	sp, #12
    2334:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2336:	9b01      	ldr	r3, [sp, #4]
    2338:	2b00      	cmp	r3, #0
    233a:	d002      	beq.n	2342 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    233c:	9801      	ldr	r0, [sp, #4]
    233e:	f000 f951 	bl	25e4 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2342:	bf00      	nop
    2344:	b003      	add	sp, #12
    2346:	f85d fb04 	ldr.w	pc, [sp], #4

0000234a <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    234a:	b500      	push	{lr}
    234c:	b083      	sub	sp, #12
    234e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2350:	9b01      	ldr	r3, [sp, #4]
    2352:	2b00      	cmp	r3, #0
    2354:	d002      	beq.n	235c <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2356:	9801      	ldr	r0, [sp, #4]
    2358:	f000 f95e 	bl	2618 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    235c:	bf00      	nop
    235e:	b003      	add	sp, #12
    2360:	f85d fb04 	ldr.w	pc, [sp], #4

00002364 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2364:	b500      	push	{lr}
    2366:	b083      	sub	sp, #12
    2368:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    236a:	9b01      	ldr	r3, [sp, #4]
    236c:	2b00      	cmp	r3, #0
    236e:	d002      	beq.n	2376 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2370:	9801      	ldr	r0, [sp, #4]
    2372:	f000 f98b 	bl	268c <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2376:	bf00      	nop
    2378:	b003      	add	sp, #12
    237a:	f85d fb04 	ldr.w	pc, [sp], #4

0000237e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    237e:	b086      	sub	sp, #24
    2380:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2382:	9b01      	ldr	r3, [sp, #4]
    2384:	681a      	ldr	r2, [r3, #0]
    2386:	4911      	ldr	r1, [pc, #68]	; (23cc <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2388:	4613      	mov	r3, r2
    238a:	00db      	lsls	r3, r3, #3
    238c:	4413      	add	r3, r2
    238e:	440b      	add	r3, r1
    2390:	781b      	ldrb	r3, [r3, #0]
    2392:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2394:	9b01      	ldr	r3, [sp, #4]
    2396:	685b      	ldr	r3, [r3, #4]
    2398:	4a0d      	ldr	r2, [pc, #52]	; (23d0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    239a:	5cd3      	ldrb	r3, [r2, r3]
    239c:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    239e:	4a0d      	ldr	r2, [pc, #52]	; (23d4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    23a0:	9b05      	ldr	r3, [sp, #20]
    23a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23a6:	681b      	ldr	r3, [r3, #0]
    23a8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    23aa:	9b03      	ldr	r3, [sp, #12]
    23ac:	f023 0307 	bic.w	r3, r3, #7
    23b0:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    23b2:	9a03      	ldr	r2, [sp, #12]
    23b4:	9b04      	ldr	r3, [sp, #16]
    23b6:	4313      	orrs	r3, r2
    23b8:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    23ba:	4a06      	ldr	r2, [pc, #24]	; (23d4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    23bc:	9b05      	ldr	r3, [sp, #20]
    23be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    23c2:	9a03      	ldr	r2, [sp, #12]
    23c4:	601a      	str	r2, [r3, #0]
}
    23c6:	bf00      	nop
    23c8:	b006      	add	sp, #24
    23ca:	4770      	bx	lr
    23cc:	0000df54 	.word	0x0000df54
    23d0:	0000e34c 	.word	0x0000e34c
    23d4:	0000e390 	.word	0x0000e390

000023d8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    23d8:	b086      	sub	sp, #24
    23da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    23dc:	9b01      	ldr	r3, [sp, #4]
    23de:	681a      	ldr	r2, [r3, #0]
    23e0:	4911      	ldr	r1, [pc, #68]	; (2428 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    23e2:	4613      	mov	r3, r2
    23e4:	00db      	lsls	r3, r3, #3
    23e6:	4413      	add	r3, r2
    23e8:	440b      	add	r3, r1
    23ea:	781b      	ldrb	r3, [r3, #0]
    23ec:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    23ee:	9b01      	ldr	r3, [sp, #4]
    23f0:	685b      	ldr	r3, [r3, #4]
    23f2:	4a0e      	ldr	r2, [pc, #56]	; (242c <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    23f4:	5cd3      	ldrb	r3, [r2, r3]
    23f6:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    23f8:	4a0d      	ldr	r2, [pc, #52]	; (2430 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    23fa:	9b05      	ldr	r3, [sp, #20]
    23fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2400:	681b      	ldr	r3, [r3, #0]
    2402:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2404:	9b03      	ldr	r3, [sp, #12]
    2406:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    240a:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    240c:	9b04      	ldr	r3, [sp, #16]
    240e:	021b      	lsls	r3, r3, #8
    2410:	9a03      	ldr	r2, [sp, #12]
    2412:	4313      	orrs	r3, r2
    2414:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2416:	4a06      	ldr	r2, [pc, #24]	; (2430 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2418:	9b05      	ldr	r3, [sp, #20]
    241a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    241e:	9a03      	ldr	r2, [sp, #12]
    2420:	601a      	str	r2, [r3, #0]
}
    2422:	bf00      	nop
    2424:	b006      	add	sp, #24
    2426:	4770      	bx	lr
    2428:	0000df54 	.word	0x0000df54
    242c:	0000e34c 	.word	0x0000e34c
    2430:	0000e390 	.word	0x0000e390

00002434 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2434:	b084      	sub	sp, #16
    2436:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2438:	4b09      	ldr	r3, [pc, #36]	; (2460 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    243a:	695b      	ldr	r3, [r3, #20]
    243c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    243e:	9b03      	ldr	r3, [sp, #12]
    2440:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2444:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2446:	9b01      	ldr	r3, [sp, #4]
    2448:	685b      	ldr	r3, [r3, #4]
    244a:	3b01      	subs	r3, #1
    244c:	041b      	lsls	r3, r3, #16
    244e:	9a03      	ldr	r2, [sp, #12]
    2450:	4313      	orrs	r3, r2
    2452:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2454:	4a02      	ldr	r2, [pc, #8]	; (2460 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2456:	9b03      	ldr	r3, [sp, #12]
    2458:	6153      	str	r3, [r2, #20]
}
    245a:	bf00      	nop
    245c:	b004      	add	sp, #16
    245e:	4770      	bx	lr
    2460:	40064000 	.word	0x40064000

00002464 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2464:	b084      	sub	sp, #16
    2466:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2468:	4b09      	ldr	r3, [pc, #36]	; (2490 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    246a:	695b      	ldr	r3, [r3, #20]
    246c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    246e:	9b03      	ldr	r3, [sp, #12]
    2470:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2474:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2476:	9b01      	ldr	r3, [sp, #4]
    2478:	685b      	ldr	r3, [r3, #4]
    247a:	3b01      	subs	r3, #1
    247c:	011b      	lsls	r3, r3, #4
    247e:	9a03      	ldr	r2, [sp, #12]
    2480:	4313      	orrs	r3, r2
    2482:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2484:	4a02      	ldr	r2, [pc, #8]	; (2490 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2486:	9b03      	ldr	r3, [sp, #12]
    2488:	6153      	str	r3, [r2, #20]
}
    248a:	bf00      	nop
    248c:	b004      	add	sp, #16
    248e:	4770      	bx	lr
    2490:	40064000 	.word	0x40064000

00002494 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2494:	b084      	sub	sp, #16
    2496:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2498:	4b09      	ldr	r3, [pc, #36]	; (24c0 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    249a:	695b      	ldr	r3, [r3, #20]
    249c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    249e:	9b03      	ldr	r3, [sp, #12]
    24a0:	f023 030f 	bic.w	r3, r3, #15
    24a4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    24a6:	9b01      	ldr	r3, [sp, #4]
    24a8:	685b      	ldr	r3, [r3, #4]
    24aa:	3b01      	subs	r3, #1
    24ac:	9a03      	ldr	r2, [sp, #12]
    24ae:	4313      	orrs	r3, r2
    24b0:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    24b2:	4a03      	ldr	r2, [pc, #12]	; (24c0 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    24b4:	9b03      	ldr	r3, [sp, #12]
    24b6:	6153      	str	r3, [r2, #20]
}
    24b8:	bf00      	nop
    24ba:	b004      	add	sp, #16
    24bc:	4770      	bx	lr
    24be:	bf00      	nop
    24c0:	40064000 	.word	0x40064000

000024c4 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24c4:	b084      	sub	sp, #16
    24c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24c8:	4b09      	ldr	r3, [pc, #36]	; (24f0 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    24ca:	699b      	ldr	r3, [r3, #24]
    24cc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    24ce:	9b03      	ldr	r3, [sp, #12]
    24d0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    24d4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    24d6:	9b01      	ldr	r3, [sp, #4]
    24d8:	685b      	ldr	r3, [r3, #4]
    24da:	3b01      	subs	r3, #1
    24dc:	041b      	lsls	r3, r3, #16
    24de:	9a03      	ldr	r2, [sp, #12]
    24e0:	4313      	orrs	r3, r2
    24e2:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    24e4:	4a02      	ldr	r2, [pc, #8]	; (24f0 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    24e6:	9b03      	ldr	r3, [sp, #12]
    24e8:	6193      	str	r3, [r2, #24]
}
    24ea:	bf00      	nop
    24ec:	b004      	add	sp, #16
    24ee:	4770      	bx	lr
    24f0:	40064000 	.word	0x40064000

000024f4 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    24f4:	b084      	sub	sp, #16
    24f6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    24f8:	4b09      	ldr	r3, [pc, #36]	; (2520 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    24fa:	699b      	ldr	r3, [r3, #24]
    24fc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    24fe:	9b03      	ldr	r3, [sp, #12]
    2500:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2504:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2506:	9b01      	ldr	r3, [sp, #4]
    2508:	685b      	ldr	r3, [r3, #4]
    250a:	3b01      	subs	r3, #1
    250c:	011b      	lsls	r3, r3, #4
    250e:	9a03      	ldr	r2, [sp, #12]
    2510:	4313      	orrs	r3, r2
    2512:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2514:	4a02      	ldr	r2, [pc, #8]	; (2520 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2516:	9b03      	ldr	r3, [sp, #12]
    2518:	6193      	str	r3, [r2, #24]
}
    251a:	bf00      	nop
    251c:	b004      	add	sp, #16
    251e:	4770      	bx	lr
    2520:	40064000 	.word	0x40064000

00002524 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2524:	b084      	sub	sp, #16
    2526:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2528:	4b09      	ldr	r3, [pc, #36]	; (2550 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    252a:	699b      	ldr	r3, [r3, #24]
    252c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    252e:	9b03      	ldr	r3, [sp, #12]
    2530:	f023 030f 	bic.w	r3, r3, #15
    2534:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2536:	9b01      	ldr	r3, [sp, #4]
    2538:	685b      	ldr	r3, [r3, #4]
    253a:	3b01      	subs	r3, #1
    253c:	9a03      	ldr	r2, [sp, #12]
    253e:	4313      	orrs	r3, r2
    2540:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2542:	4a03      	ldr	r2, [pc, #12]	; (2550 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2544:	9b03      	ldr	r3, [sp, #12]
    2546:	6193      	str	r3, [r2, #24]
}
    2548:	bf00      	nop
    254a:	b004      	add	sp, #16
    254c:	4770      	bx	lr
    254e:	bf00      	nop
    2550:	40064000 	.word	0x40064000

00002554 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2554:	b084      	sub	sp, #16
    2556:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2558:	4b09      	ldr	r3, [pc, #36]	; (2580 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    255a:	69db      	ldr	r3, [r3, #28]
    255c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    255e:	9b03      	ldr	r3, [sp, #12]
    2560:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2564:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2566:	9b01      	ldr	r3, [sp, #4]
    2568:	685b      	ldr	r3, [r3, #4]
    256a:	3b01      	subs	r3, #1
    256c:	041b      	lsls	r3, r3, #16
    256e:	9a03      	ldr	r2, [sp, #12]
    2570:	4313      	orrs	r3, r2
    2572:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2574:	4a02      	ldr	r2, [pc, #8]	; (2580 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2576:	9b03      	ldr	r3, [sp, #12]
    2578:	61d3      	str	r3, [r2, #28]
}
    257a:	bf00      	nop
    257c:	b004      	add	sp, #16
    257e:	4770      	bx	lr
    2580:	40064000 	.word	0x40064000

00002584 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2584:	b084      	sub	sp, #16
    2586:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2588:	4b09      	ldr	r3, [pc, #36]	; (25b0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    258a:	69db      	ldr	r3, [r3, #28]
    258c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    258e:	9b03      	ldr	r3, [sp, #12]
    2590:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2594:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2596:	9b01      	ldr	r3, [sp, #4]
    2598:	685b      	ldr	r3, [r3, #4]
    259a:	3b01      	subs	r3, #1
    259c:	011b      	lsls	r3, r3, #4
    259e:	9a03      	ldr	r2, [sp, #12]
    25a0:	4313      	orrs	r3, r2
    25a2:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    25a4:	4a02      	ldr	r2, [pc, #8]	; (25b0 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    25a6:	9b03      	ldr	r3, [sp, #12]
    25a8:	61d3      	str	r3, [r2, #28]
}
    25aa:	bf00      	nop
    25ac:	b004      	add	sp, #16
    25ae:	4770      	bx	lr
    25b0:	40064000 	.word	0x40064000

000025b4 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    25b4:	b084      	sub	sp, #16
    25b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    25b8:	4b09      	ldr	r3, [pc, #36]	; (25e0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    25ba:	69db      	ldr	r3, [r3, #28]
    25bc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    25be:	9b03      	ldr	r3, [sp, #12]
    25c0:	f023 030f 	bic.w	r3, r3, #15
    25c4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    25c6:	9b01      	ldr	r3, [sp, #4]
    25c8:	685b      	ldr	r3, [r3, #4]
    25ca:	3b01      	subs	r3, #1
    25cc:	9a03      	ldr	r2, [sp, #12]
    25ce:	4313      	orrs	r3, r2
    25d0:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    25d2:	4a03      	ldr	r2, [pc, #12]	; (25e0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    25d4:	9b03      	ldr	r3, [sp, #12]
    25d6:	61d3      	str	r3, [r2, #28]
}
    25d8:	bf00      	nop
    25da:	b004      	add	sp, #16
    25dc:	4770      	bx	lr
    25de:	bf00      	nop
    25e0:	40064000 	.word	0x40064000

000025e4 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    25e4:	b084      	sub	sp, #16
    25e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    25e8:	4b0a      	ldr	r3, [pc, #40]	; (2614 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    25ea:	685b      	ldr	r3, [r3, #4]
    25ec:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    25ee:	9b03      	ldr	r3, [sp, #12]
    25f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    25f4:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    25f6:	9b01      	ldr	r3, [sp, #4]
    25f8:	685b      	ldr	r3, [r3, #4]
    25fa:	3b01      	subs	r3, #1
    25fc:	021b      	lsls	r3, r3, #8
    25fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2602:	9a03      	ldr	r2, [sp, #12]
    2604:	4313      	orrs	r3, r2
    2606:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2608:	4a02      	ldr	r2, [pc, #8]	; (2614 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    260a:	9b03      	ldr	r3, [sp, #12]
    260c:	6053      	str	r3, [r2, #4]
}
    260e:	bf00      	nop
    2610:	b004      	add	sp, #16
    2612:	4770      	bx	lr
    2614:	40048000 	.word	0x40048000

00002618 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2618:	b084      	sub	sp, #16
    261a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    261c:	4919      	ldr	r1, [pc, #100]	; (2684 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    261e:	9b01      	ldr	r3, [sp, #4]
    2620:	681a      	ldr	r2, [r3, #0]
    2622:	4819      	ldr	r0, [pc, #100]	; (2688 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2624:	4613      	mov	r3, r2
    2626:	00db      	lsls	r3, r3, #3
    2628:	4413      	add	r3, r2
    262a:	4403      	add	r3, r0
    262c:	3305      	adds	r3, #5
    262e:	781b      	ldrb	r3, [r3, #0]
    2630:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2634:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2636:	9b03      	ldr	r3, [sp, #12]
    2638:	f023 030f 	bic.w	r3, r3, #15
    263c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    263e:	9b01      	ldr	r3, [sp, #4]
    2640:	685b      	ldr	r3, [r3, #4]
    2642:	3b01      	subs	r3, #1
    2644:	f003 0307 	and.w	r3, r3, #7
    2648:	9a03      	ldr	r2, [sp, #12]
    264a:	4313      	orrs	r3, r2
    264c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    264e:	9b01      	ldr	r3, [sp, #4]
    2650:	7a1b      	ldrb	r3, [r3, #8]
    2652:	3b01      	subs	r3, #1
    2654:	00db      	lsls	r3, r3, #3
    2656:	f003 0308 	and.w	r3, r3, #8
    265a:	9a03      	ldr	r2, [sp, #12]
    265c:	4313      	orrs	r3, r2
    265e:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2660:	4908      	ldr	r1, [pc, #32]	; (2684 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2662:	9b01      	ldr	r3, [sp, #4]
    2664:	681a      	ldr	r2, [r3, #0]
    2666:	4808      	ldr	r0, [pc, #32]	; (2688 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2668:	4613      	mov	r3, r2
    266a:	00db      	lsls	r3, r3, #3
    266c:	4413      	add	r3, r2
    266e:	4403      	add	r3, r0
    2670:	3305      	adds	r3, #5
    2672:	781b      	ldrb	r3, [r3, #0]
    2674:	461a      	mov	r2, r3
    2676:	9b03      	ldr	r3, [sp, #12]
    2678:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    267c:	bf00      	nop
    267e:	b004      	add	sp, #16
    2680:	4770      	bx	lr
    2682:	bf00      	nop
    2684:	40065000 	.word	0x40065000
    2688:	0000df54 	.word	0x0000df54

0000268c <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    268c:	b084      	sub	sp, #16
    268e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2690:	4b10      	ldr	r3, [pc, #64]	; (26d4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2694:	4a0f      	ldr	r2, [pc, #60]	; (26d4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    269a:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    269c:	4b0d      	ldr	r3, [pc, #52]	; (26d4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    269e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    26a0:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    26a2:	9b03      	ldr	r3, [sp, #12]
    26a4:	f023 030f 	bic.w	r3, r3, #15
    26a8:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    26aa:	9b01      	ldr	r3, [sp, #4]
    26ac:	685b      	ldr	r3, [r3, #4]
    26ae:	3b01      	subs	r3, #1
    26b0:	005b      	lsls	r3, r3, #1
    26b2:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    26b6:	9b01      	ldr	r3, [sp, #4]
    26b8:	7a1b      	ldrb	r3, [r3, #8]
    26ba:	3b01      	subs	r3, #1
    26bc:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    26c0:	4313      	orrs	r3, r2
    26c2:	9a03      	ldr	r2, [sp, #12]
    26c4:	4313      	orrs	r3, r2
    26c6:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    26c8:	4a02      	ldr	r2, [pc, #8]	; (26d4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    26ca:	9b03      	ldr	r3, [sp, #12]
    26cc:	6693      	str	r3, [r2, #104]	; 0x68
}
    26ce:	bf00      	nop
    26d0:	b004      	add	sp, #16
    26d2:	4770      	bx	lr
    26d4:	40048000 	.word	0x40048000

000026d8 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    26d8:	b082      	sub	sp, #8
    26da:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    26dc:	bf00      	nop
    26de:	b002      	add	sp, #8
    26e0:	4770      	bx	lr
	...

000026e4 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    26e4:	b082      	sub	sp, #8
    26e6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    26e8:	bf00      	nop
    26ea:	b002      	add	sp, #8
    26ec:	4770      	bx	lr

000026ee <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    26ee:	b082      	sub	sp, #8
    26f0:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    26f2:	bf00      	nop
    26f4:	b002      	add	sp, #8
    26f6:	4770      	bx	lr

000026f8 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    26f8:	b500      	push	{lr}
    26fa:	b083      	sub	sp, #12
    26fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    26fe:	9b01      	ldr	r3, [sp, #4]
    2700:	2b00      	cmp	r3, #0
    2702:	d002      	beq.n	270a <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    2704:	9801      	ldr	r0, [sp, #4]
    2706:	f000 f86a 	bl	27de <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    270a:	bf00      	nop
    270c:	b003      	add	sp, #12
    270e:	f85d fb04 	ldr.w	pc, [sp], #4

00002712 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2712:	b500      	push	{lr}
    2714:	b083      	sub	sp, #12
    2716:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2718:	9b01      	ldr	r3, [sp, #4]
    271a:	2b00      	cmp	r3, #0
    271c:	d002      	beq.n	2724 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    271e:	9801      	ldr	r0, [sp, #4]
    2720:	f000 f884 	bl	282c <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    2724:	bf00      	nop
    2726:	b003      	add	sp, #12
    2728:	f85d fb04 	ldr.w	pc, [sp], #4

0000272c <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    272c:	b500      	push	{lr}
    272e:	b089      	sub	sp, #36	; 0x24
    2730:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2732:	2300      	movs	r3, #0
    2734:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2738:	9b01      	ldr	r3, [sp, #4]
    273a:	2b00      	cmp	r3, #0
    273c:	d031      	beq.n	27a2 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    273e:	4b1b      	ldr	r3, [pc, #108]	; (27ac <Clock_Ip_CompleteSOSC+0x80>)
    2740:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2744:	f003 0301 	and.w	r3, r3, #1
    2748:	2b00      	cmp	r3, #0
    274a:	d02a      	beq.n	27a2 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    274c:	aa03      	add	r2, sp, #12
    274e:	a904      	add	r1, sp, #16
    2750:	a805      	add	r0, sp, #20
    2752:	f24c 3350 	movw	r3, #50000	; 0xc350
    2756:	f7ff fd1d 	bl	2194 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    275a:	4b14      	ldr	r3, [pc, #80]	; (27ac <Clock_Ip_CompleteSOSC+0x80>)
    275c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2760:	0e1b      	lsrs	r3, r3, #24
    2762:	f003 0301 	and.w	r3, r3, #1
    2766:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2768:	9a03      	ldr	r2, [sp, #12]
    276a:	a904      	add	r1, sp, #16
    276c:	ab05      	add	r3, sp, #20
    276e:	4618      	mov	r0, r3
    2770:	f7ff fd2a 	bl	21c8 <Clock_Ip_TimeoutExpired>
    2774:	4603      	mov	r3, r0
    2776:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    277a:	9b06      	ldr	r3, [sp, #24]
    277c:	2b00      	cmp	r3, #0
    277e:	d106      	bne.n	278e <Clock_Ip_CompleteSOSC+0x62>
    2780:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2784:	f083 0301 	eor.w	r3, r3, #1
    2788:	b2db      	uxtb	r3, r3
    278a:	2b00      	cmp	r3, #0
    278c:	d1e5      	bne.n	275a <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    278e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2792:	2b00      	cmp	r3, #0
    2794:	d005      	beq.n	27a2 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2796:	9b01      	ldr	r3, [sp, #4]
    2798:	681b      	ldr	r3, [r3, #0]
    279a:	4619      	mov	r1, r3
    279c:	2001      	movs	r0, #1
    279e:	f7ff fce9 	bl	2174 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    27a2:	bf00      	nop
    27a4:	b009      	add	sp, #36	; 0x24
    27a6:	f85d fb04 	ldr.w	pc, [sp], #4
    27aa:	bf00      	nop
    27ac:	40064000 	.word	0x40064000

000027b0 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    27b0:	b500      	push	{lr}
    27b2:	b083      	sub	sp, #12
    27b4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    27b6:	9801      	ldr	r0, [sp, #4]
    27b8:	f000 f8c0 	bl	293c <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    27bc:	bf00      	nop
    27be:	b003      	add	sp, #12
    27c0:	f85d fb04 	ldr.w	pc, [sp], #4

000027c4 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    27c4:	b500      	push	{lr}
    27c6:	b083      	sub	sp, #12
    27c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    27ca:	9b01      	ldr	r3, [sp, #4]
    27cc:	2b00      	cmp	r3, #0
    27ce:	d002      	beq.n	27d6 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    27d0:	9801      	ldr	r0, [sp, #4]
    27d2:	f000 f8c3 	bl	295c <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    27d6:	bf00      	nop
    27d8:	b003      	add	sp, #12
    27da:	f85d fb04 	ldr.w	pc, [sp], #4

000027de <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    27de:	b082      	sub	sp, #8
    27e0:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    27e2:	4b11      	ldr	r3, [pc, #68]	; (2828 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27e8:	4a0f      	ldr	r2, [pc, #60]	; (2828 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    27ee:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    27f2:	4b0d      	ldr	r3, [pc, #52]	; (2828 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    27f8:	4a0b      	ldr	r2, [pc, #44]	; (2828 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    27fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    27fe:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    2802:	4b09      	ldr	r3, [pc, #36]	; (2828 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2804:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2808:	4a07      	ldr	r2, [pc, #28]	; (2828 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    280a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    280e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    2812:	4b05      	ldr	r3, [pc, #20]	; (2828 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    2814:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2818:	4a03      	ldr	r2, [pc, #12]	; (2828 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    281a:	f023 0301 	bic.w	r3, r3, #1
    281e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2822:	bf00      	nop
    2824:	b002      	add	sp, #8
    2826:	4770      	bx	lr
    2828:	40064000 	.word	0x40064000

0000282c <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    282c:	b082      	sub	sp, #8
    282e:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    2830:	9b01      	ldr	r3, [sp, #4]
    2832:	891b      	ldrh	r3, [r3, #8]
    2834:	2b01      	cmp	r3, #1
    2836:	d174      	bne.n	2922 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2838:	9b01      	ldr	r3, [sp, #4]
    283a:	7bdb      	ldrb	r3, [r3, #15]
    283c:	2b00      	cmp	r3, #0
    283e:	d002      	beq.n	2846 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    2840:	2b01      	cmp	r3, #1
    2842:	d009      	beq.n	2858 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2844:	e011      	b.n	286a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2846:	4b39      	ldr	r3, [pc, #228]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2848:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    284c:	4a37      	ldr	r2, [pc, #220]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    284e:	f023 0308 	bic.w	r3, r3, #8
    2852:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2856:	e008      	b.n	286a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2858:	4b34      	ldr	r3, [pc, #208]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    285a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    285e:	4a33      	ldr	r2, [pc, #204]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2860:	f043 0308 	orr.w	r3, r3, #8
    2864:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2868:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    286a:	4b30      	ldr	r3, [pc, #192]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    286c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2870:	4a2e      	ldr	r2, [pc, #184]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2872:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2876:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    287a:	9b01      	ldr	r3, [sp, #4]
    287c:	685b      	ldr	r3, [r3, #4]
    287e:	4a2c      	ldr	r2, [pc, #176]	; (2930 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2880:	4293      	cmp	r3, r2
    2882:	d90d      	bls.n	28a0 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2884:	9b01      	ldr	r3, [sp, #4]
    2886:	685b      	ldr	r3, [r3, #4]
    2888:	4a2a      	ldr	r2, [pc, #168]	; (2934 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    288a:	4293      	cmp	r3, r2
    288c:	d208      	bcs.n	28a0 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    288e:	4b27      	ldr	r3, [pc, #156]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2890:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2894:	4a25      	ldr	r2, [pc, #148]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2896:	f043 0320 	orr.w	r3, r3, #32
    289a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    289e:	e007      	b.n	28b0 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    28a0:	4b22      	ldr	r3, [pc, #136]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    28a6:	4a21      	ldr	r2, [pc, #132]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28a8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    28ac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    28b0:	9b01      	ldr	r3, [sp, #4]
    28b2:	7b1b      	ldrb	r3, [r3, #12]
    28b4:	2b00      	cmp	r3, #0
    28b6:	d108      	bne.n	28ca <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    28b8:	4b1c      	ldr	r3, [pc, #112]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    28be:	4a1b      	ldr	r2, [pc, #108]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28c0:	f043 0304 	orr.w	r3, r3, #4
    28c4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    28c8:	e007      	b.n	28da <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    28ca:	4b18      	ldr	r3, [pc, #96]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    28d0:	4a16      	ldr	r2, [pc, #88]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28d2:	f023 0304 	bic.w	r3, r3, #4
    28d6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    28da:	9b01      	ldr	r3, [sp, #4]
    28dc:	7c1b      	ldrb	r3, [r3, #16]
    28de:	2b02      	cmp	r3, #2
    28e0:	d011      	beq.n	2906 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    28e2:	2b02      	cmp	r3, #2
    28e4:	dc14      	bgt.n	2910 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    28e6:	2b00      	cmp	r3, #0
    28e8:	d002      	beq.n	28f0 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    28ea:	2b01      	cmp	r3, #1
    28ec:	d005      	beq.n	28fa <Clock_Ip_SetSOSC_TrustedCall+0xce>
    28ee:	e00f      	b.n	2910 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28f0:	4b0e      	ldr	r3, [pc, #56]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28f2:	2201      	movs	r2, #1
    28f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    28f8:	e014      	b.n	2924 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    28fa:	4b0c      	ldr	r3, [pc, #48]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    28fc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    2900:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    2904:	e00e      	b.n	2924 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    2906:	4b09      	ldr	r3, [pc, #36]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2908:	4a0b      	ldr	r2, [pc, #44]	; (2938 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    290a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    290e:	e009      	b.n	2924 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2910:	4b06      	ldr	r3, [pc, #24]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2912:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2916:	4a05      	ldr	r2, [pc, #20]	; (292c <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2918:	f043 0301 	orr.w	r3, r3, #1
    291c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    2920:	e000      	b.n	2924 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    2922:	bf00      	nop
}
    2924:	bf00      	nop
    2926:	b002      	add	sp, #8
    2928:	4770      	bx	lr
    292a:	bf00      	nop
    292c:	40064000 	.word	0x40064000
    2930:	003d08ff 	.word	0x003d08ff
    2934:	007a1200 	.word	0x007a1200
    2938:	00030001 	.word	0x00030001

0000293c <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    293c:	b082      	sub	sp, #8
    293e:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    2940:	4b05      	ldr	r3, [pc, #20]	; (2958 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2942:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2946:	4a04      	ldr	r2, [pc, #16]	; (2958 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2948:	f023 0301 	bic.w	r3, r3, #1
    294c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2950:	bf00      	nop
    2952:	b002      	add	sp, #8
    2954:	4770      	bx	lr
    2956:	bf00      	nop
    2958:	40064000 	.word	0x40064000

0000295c <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    295c:	b082      	sub	sp, #8
    295e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2960:	9b01      	ldr	r3, [sp, #4]
    2962:	891b      	ldrh	r3, [r3, #8]
    2964:	2b01      	cmp	r3, #1
    2966:	d107      	bne.n	2978 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2968:	4b05      	ldr	r3, [pc, #20]	; (2980 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    296a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    296e:	4a04      	ldr	r2, [pc, #16]	; (2980 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2970:	f043 0301 	orr.w	r3, r3, #1
    2974:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2978:	bf00      	nop
    297a:	b002      	add	sp, #8
    297c:	4770      	bx	lr
    297e:	bf00      	nop
    2980:	40064000 	.word	0x40064000

00002984 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2984:	b082      	sub	sp, #8
    2986:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2988:	bf00      	nop
    298a:	b002      	add	sp, #8
    298c:	4770      	bx	lr

0000298e <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    298e:	b082      	sub	sp, #8
    2990:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    2992:	2300      	movs	r3, #0
}
    2994:	4618      	mov	r0, r3
    2996:	b002      	add	sp, #8
    2998:	4770      	bx	lr

0000299a <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    299a:	b082      	sub	sp, #8
    299c:	9001      	str	r0, [sp, #4]
    299e:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    29a0:	bf00      	nop
    29a2:	b002      	add	sp, #8
    29a4:	4770      	bx	lr
	...

000029a8 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    29a8:	b082      	sub	sp, #8
    29aa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    29ac:	bf00      	nop
    29ae:	b002      	add	sp, #8
    29b0:	4770      	bx	lr

000029b2 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    29b2:	b082      	sub	sp, #8
    29b4:	9001      	str	r0, [sp, #4]
    29b6:	460b      	mov	r3, r1
    29b8:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    29bc:	bf00      	nop
    29be:	b002      	add	sp, #8
    29c0:	4770      	bx	lr

000029c2 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    29c2:	b500      	push	{lr}
    29c4:	b083      	sub	sp, #12
    29c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    29c8:	9b01      	ldr	r3, [sp, #4]
    29ca:	2b00      	cmp	r3, #0
    29cc:	d002      	beq.n	29d4 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    29ce:	9801      	ldr	r0, [sp, #4]
    29d0:	f000 f8e7 	bl	2ba2 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    29d4:	bf00      	nop
    29d6:	b003      	add	sp, #12
    29d8:	f85d fb04 	ldr.w	pc, [sp], #4

000029dc <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    29dc:	b500      	push	{lr}
    29de:	b085      	sub	sp, #20
    29e0:	9001      	str	r0, [sp, #4]
    29e2:	460b      	mov	r3, r1
    29e4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    29e8:	9b01      	ldr	r3, [sp, #4]
    29ea:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    29ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
    29f0:	2b00      	cmp	r3, #0
    29f2:	d003      	beq.n	29fc <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    29f4:	2300      	movs	r3, #0
    29f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    29fa:	e002      	b.n	2a02 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    29fc:	2301      	movs	r3, #1
    29fe:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    2a02:	ab02      	add	r3, sp, #8
    2a04:	4618      	mov	r0, r3
    2a06:	f7ff ffdc 	bl	29c2 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    2a0a:	bf00      	nop
    2a0c:	b005      	add	sp, #20
    2a0e:	f85d fb04 	ldr.w	pc, [sp], #4

00002a12 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    2a12:	b500      	push	{lr}
    2a14:	b083      	sub	sp, #12
    2a16:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a18:	9b01      	ldr	r3, [sp, #4]
    2a1a:	2b00      	cmp	r3, #0
    2a1c:	d002      	beq.n	2a24 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    2a1e:	9801      	ldr	r0, [sp, #4]
    2a20:	f000 f8d6 	bl	2bd0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a24:	bf00      	nop
    2a26:	b003      	add	sp, #12
    2a28:	f85d fb04 	ldr.w	pc, [sp], #4

00002a2c <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a2c:	b500      	push	{lr}
    2a2e:	b085      	sub	sp, #20
    2a30:	9001      	str	r0, [sp, #4]
    2a32:	460b      	mov	r3, r1
    2a34:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a38:	9b01      	ldr	r3, [sp, #4]
    2a3a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a3c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a40:	2b00      	cmp	r3, #0
    2a42:	d003      	beq.n	2a4c <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2a44:	2300      	movs	r3, #0
    2a46:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a4a:	e002      	b.n	2a52 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a4c:	2301      	movs	r3, #1
    2a4e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2a52:	ab02      	add	r3, sp, #8
    2a54:	4618      	mov	r0, r3
    2a56:	f7ff ffdc 	bl	2a12 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    2a5a:	bf00      	nop
    2a5c:	b005      	add	sp, #20
    2a5e:	f85d fb04 	ldr.w	pc, [sp], #4

00002a62 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2a62:	b500      	push	{lr}
    2a64:	b083      	sub	sp, #12
    2a66:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2a68:	9b01      	ldr	r3, [sp, #4]
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	d002      	beq.n	2a74 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    2a6e:	9801      	ldr	r0, [sp, #4]
    2a70:	f000 f8c6 	bl	2c00 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2a74:	bf00      	nop
    2a76:	b003      	add	sp, #12
    2a78:	f85d fb04 	ldr.w	pc, [sp], #4

00002a7c <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2a7c:	b500      	push	{lr}
    2a7e:	b085      	sub	sp, #20
    2a80:	9001      	str	r0, [sp, #4]
    2a82:	460b      	mov	r3, r1
    2a84:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2a88:	9b01      	ldr	r3, [sp, #4]
    2a8a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2a8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2a90:	2b00      	cmp	r3, #0
    2a92:	d003      	beq.n	2a9c <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2a94:	2300      	movs	r3, #0
    2a96:	f8ad 300c 	strh.w	r3, [sp, #12]
    2a9a:	e002      	b.n	2aa2 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2a9c:	2301      	movs	r3, #1
    2a9e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2aa2:	ab02      	add	r3, sp, #8
    2aa4:	4618      	mov	r0, r3
    2aa6:	f7ff ffdc 	bl	2a62 <Clock_Ip_ClockSetSimClkoutEnable>
}
    2aaa:	bf00      	nop
    2aac:	b005      	add	sp, #20
    2aae:	f85d fb04 	ldr.w	pc, [sp], #4

00002ab2 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2ab2:	b500      	push	{lr}
    2ab4:	b083      	sub	sp, #12
    2ab6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ab8:	9b01      	ldr	r3, [sp, #4]
    2aba:	2b00      	cmp	r3, #0
    2abc:	d002      	beq.n	2ac4 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    2abe:	9801      	ldr	r0, [sp, #4]
    2ac0:	f000 f8b6 	bl	2c30 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ac4:	bf00      	nop
    2ac6:	b003      	add	sp, #12
    2ac8:	f85d fb04 	ldr.w	pc, [sp], #4

00002acc <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2acc:	b500      	push	{lr}
    2ace:	b085      	sub	sp, #20
    2ad0:	9001      	str	r0, [sp, #4]
    2ad2:	460b      	mov	r3, r1
    2ad4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2ad8:	9b01      	ldr	r3, [sp, #4]
    2ada:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2adc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d003      	beq.n	2aec <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    2ae4:	2300      	movs	r3, #0
    2ae6:	f8ad 300c 	strh.w	r3, [sp, #12]
    2aea:	e002      	b.n	2af2 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2aec:	2301      	movs	r3, #1
    2aee:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    2af2:	ab02      	add	r3, sp, #8
    2af4:	4618      	mov	r0, r3
    2af6:	f7ff ffdc 	bl	2ab2 <Clock_Ip_ClockSetPccCgcEnable>
}
    2afa:	bf00      	nop
    2afc:	b005      	add	sp, #20
    2afe:	f85d fb04 	ldr.w	pc, [sp], #4

00002b02 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    2b02:	b500      	push	{lr}
    2b04:	b083      	sub	sp, #12
    2b06:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b08:	9b01      	ldr	r3, [sp, #4]
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	d002      	beq.n	2b14 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    2b0e:	9801      	ldr	r0, [sp, #4]
    2b10:	f000 f8bc 	bl	2c8c <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b14:	bf00      	nop
    2b16:	b003      	add	sp, #12
    2b18:	f85d fb04 	ldr.w	pc, [sp], #4

00002b1c <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b1c:	b500      	push	{lr}
    2b1e:	b085      	sub	sp, #20
    2b20:	9001      	str	r0, [sp, #4]
    2b22:	460b      	mov	r3, r1
    2b24:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b28:	9b01      	ldr	r3, [sp, #4]
    2b2a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b30:	2b00      	cmp	r3, #0
    2b32:	d003      	beq.n	2b3c <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2b34:	2300      	movs	r3, #0
    2b36:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b3a:	e002      	b.n	2b42 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b3c:	2301      	movs	r3, #1
    2b3e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2b42:	ab02      	add	r3, sp, #8
    2b44:	4618      	mov	r0, r3
    2b46:	f7ff ffdc 	bl	2b02 <Clock_Ip_ClockSetSimGate>
}
    2b4a:	bf00      	nop
    2b4c:	b005      	add	sp, #20
    2b4e:	f85d fb04 	ldr.w	pc, [sp], #4

00002b52 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2b52:	b500      	push	{lr}
    2b54:	b083      	sub	sp, #12
    2b56:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2b58:	9b01      	ldr	r3, [sp, #4]
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d002      	beq.n	2b64 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    2b5e:	9801      	ldr	r0, [sp, #4]
    2b60:	f000 f8c0 	bl	2ce4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2b64:	bf00      	nop
    2b66:	b003      	add	sp, #12
    2b68:	f85d fb04 	ldr.w	pc, [sp], #4

00002b6c <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    2b6c:	b500      	push	{lr}
    2b6e:	b085      	sub	sp, #20
    2b70:	9001      	str	r0, [sp, #4]
    2b72:	460b      	mov	r3, r1
    2b74:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2b78:	9b01      	ldr	r3, [sp, #4]
    2b7a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    2b7c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2b80:	2b00      	cmp	r3, #0
    2b82:	d003      	beq.n	2b8c <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2b84:	2300      	movs	r3, #0
    2b86:	f8ad 300c 	strh.w	r3, [sp, #12]
    2b8a:	e002      	b.n	2b92 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    2b8c:	2301      	movs	r3, #1
    2b8e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2b92:	ab02      	add	r3, sp, #8
    2b94:	4618      	mov	r0, r3
    2b96:	f7ff ffdc 	bl	2b52 <Clock_Ip_ClockSetSimTraceEnable>
}
    2b9a:	bf00      	nop
    2b9c:	b005      	add	sp, #20
    2b9e:	f85d fb04 	ldr.w	pc, [sp], #4

00002ba2 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2ba2:	b084      	sub	sp, #16
    2ba4:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2ba6:	4b09      	ldr	r3, [pc, #36]	; (2bcc <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2ba8:	691b      	ldr	r3, [r3, #16]
    2baa:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    2bac:	9b03      	ldr	r3, [sp, #12]
    2bae:	f023 0301 	bic.w	r3, r3, #1
    2bb2:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2bb4:	9b01      	ldr	r3, [sp, #4]
    2bb6:	889b      	ldrh	r3, [r3, #4]
    2bb8:	461a      	mov	r2, r3
    2bba:	9b03      	ldr	r3, [sp, #12]
    2bbc:	4313      	orrs	r3, r2
    2bbe:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2bc0:	4a02      	ldr	r2, [pc, #8]	; (2bcc <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2bc2:	9b03      	ldr	r3, [sp, #12]
    2bc4:	6113      	str	r3, [r2, #16]
}
    2bc6:	bf00      	nop
    2bc8:	b004      	add	sp, #16
    2bca:	4770      	bx	lr
    2bcc:	40048000 	.word	0x40048000

00002bd0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2bd0:	b084      	sub	sp, #16
    2bd2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2bd4:	4b09      	ldr	r3, [pc, #36]	; (2bfc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2bd6:	691b      	ldr	r3, [r3, #16]
    2bd8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    2bda:	9b03      	ldr	r3, [sp, #12]
    2bdc:	f023 0302 	bic.w	r3, r3, #2
    2be0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    2be2:	9b01      	ldr	r3, [sp, #4]
    2be4:	889b      	ldrh	r3, [r3, #4]
    2be6:	005b      	lsls	r3, r3, #1
    2be8:	9a03      	ldr	r2, [sp, #12]
    2bea:	4313      	orrs	r3, r2
    2bec:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2bee:	4a03      	ldr	r2, [pc, #12]	; (2bfc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    2bf0:	9b03      	ldr	r3, [sp, #12]
    2bf2:	6113      	str	r3, [r2, #16]
}
    2bf4:	bf00      	nop
    2bf6:	b004      	add	sp, #16
    2bf8:	4770      	bx	lr
    2bfa:	bf00      	nop
    2bfc:	40048000 	.word	0x40048000

00002c00 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c00:	b084      	sub	sp, #16
    2c02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    2c04:	4b09      	ldr	r3, [pc, #36]	; (2c2c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2c06:	685b      	ldr	r3, [r3, #4]
    2c08:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    2c0a:	9b03      	ldr	r3, [sp, #12]
    2c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2c10:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    2c12:	9b01      	ldr	r3, [sp, #4]
    2c14:	889b      	ldrh	r3, [r3, #4]
    2c16:	02db      	lsls	r3, r3, #11
    2c18:	9a03      	ldr	r2, [sp, #12]
    2c1a:	4313      	orrs	r3, r2
    2c1c:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    2c1e:	4a03      	ldr	r2, [pc, #12]	; (2c2c <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    2c20:	9b03      	ldr	r3, [sp, #12]
    2c22:	6053      	str	r3, [r2, #4]
}
    2c24:	bf00      	nop
    2c26:	b004      	add	sp, #16
    2c28:	4770      	bx	lr
    2c2a:	bf00      	nop
    2c2c:	40048000 	.word	0x40048000

00002c30 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c30:	b084      	sub	sp, #16
    2c32:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2c34:	4913      	ldr	r1, [pc, #76]	; (2c84 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2c36:	9b01      	ldr	r3, [sp, #4]
    2c38:	681a      	ldr	r2, [r3, #0]
    2c3a:	4813      	ldr	r0, [pc, #76]	; (2c88 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2c3c:	4613      	mov	r3, r2
    2c3e:	00db      	lsls	r3, r3, #3
    2c40:	4413      	add	r3, r2
    2c42:	4403      	add	r3, r0
    2c44:	3306      	adds	r3, #6
    2c46:	781b      	ldrb	r3, [r3, #0]
    2c48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2c4c:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    2c4e:	9b03      	ldr	r3, [sp, #12]
    2c50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2c54:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2c56:	9b01      	ldr	r3, [sp, #4]
    2c58:	889b      	ldrh	r3, [r3, #4]
    2c5a:	079b      	lsls	r3, r3, #30
    2c5c:	9a03      	ldr	r2, [sp, #12]
    2c5e:	4313      	orrs	r3, r2
    2c60:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2c62:	4908      	ldr	r1, [pc, #32]	; (2c84 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2c64:	9b01      	ldr	r3, [sp, #4]
    2c66:	681a      	ldr	r2, [r3, #0]
    2c68:	4807      	ldr	r0, [pc, #28]	; (2c88 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    2c6a:	4613      	mov	r3, r2
    2c6c:	00db      	lsls	r3, r3, #3
    2c6e:	4413      	add	r3, r2
    2c70:	4403      	add	r3, r0
    2c72:	3306      	adds	r3, #6
    2c74:	781b      	ldrb	r3, [r3, #0]
    2c76:	461a      	mov	r2, r3
    2c78:	9b03      	ldr	r3, [sp, #12]
    2c7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    2c7e:	bf00      	nop
    2c80:	b004      	add	sp, #16
    2c82:	4770      	bx	lr
    2c84:	40065000 	.word	0x40065000
    2c88:	0000df54 	.word	0x0000df54

00002c8c <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2c8c:	b086      	sub	sp, #24
    2c8e:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2c90:	9b01      	ldr	r3, [sp, #4]
    2c92:	889b      	ldrh	r3, [r3, #4]
    2c94:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2c96:	9b01      	ldr	r3, [sp, #4]
    2c98:	681a      	ldr	r2, [r3, #0]
    2c9a:	4910      	ldr	r1, [pc, #64]	; (2cdc <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    2c9c:	4613      	mov	r3, r2
    2c9e:	00db      	lsls	r3, r3, #3
    2ca0:	4413      	add	r3, r2
    2ca2:	440b      	add	r3, r1
    2ca4:	3306      	adds	r3, #6
    2ca6:	781b      	ldrb	r3, [r3, #0]
    2ca8:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    2caa:	4b0d      	ldr	r3, [pc, #52]	; (2ce0 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2cae:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2cb0:	2201      	movs	r2, #1
    2cb2:	9b04      	ldr	r3, [sp, #16]
    2cb4:	fa02 f303 	lsl.w	r3, r2, r3
    2cb8:	43db      	mvns	r3, r3
    2cba:	9a03      	ldr	r2, [sp, #12]
    2cbc:	4013      	ands	r3, r2
    2cbe:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2cc0:	9a05      	ldr	r2, [sp, #20]
    2cc2:	9b04      	ldr	r3, [sp, #16]
    2cc4:	fa02 f303 	lsl.w	r3, r2, r3
    2cc8:	9a03      	ldr	r2, [sp, #12]
    2cca:	4313      	orrs	r3, r2
    2ccc:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    2cce:	4a04      	ldr	r2, [pc, #16]	; (2ce0 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    2cd0:	9b03      	ldr	r3, [sp, #12]
    2cd2:	6413      	str	r3, [r2, #64]	; 0x40
}
    2cd4:	bf00      	nop
    2cd6:	b006      	add	sp, #24
    2cd8:	4770      	bx	lr
    2cda:	bf00      	nop
    2cdc:	0000df54 	.word	0x0000df54
    2ce0:	40048000 	.word	0x40048000

00002ce4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2ce4:	b084      	sub	sp, #16
    2ce6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    2ce8:	4b0a      	ldr	r3, [pc, #40]	; (2d14 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2cec:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    2cee:	9b01      	ldr	r3, [sp, #4]
    2cf0:	889b      	ldrh	r3, [r3, #4]
    2cf2:	2b01      	cmp	r3, #1
    2cf4:	d104      	bne.n	2d00 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    2cf6:	9b03      	ldr	r3, [sp, #12]
    2cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2cfc:	9303      	str	r3, [sp, #12]
    2cfe:	e003      	b.n	2d08 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2d00:	9b03      	ldr	r3, [sp, #12]
    2d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    2d06:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    2d08:	4a02      	ldr	r2, [pc, #8]	; (2d14 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    2d0a:	9b03      	ldr	r3, [sp, #12]
    2d0c:	6693      	str	r3, [r2, #104]	; 0x68
}
    2d0e:	bf00      	nop
    2d10:	b004      	add	sp, #16
    2d12:	4770      	bx	lr
    2d14:	40048000 	.word	0x40048000

00002d18 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    2d18:	b082      	sub	sp, #8
    2d1a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2d1c:	bf00      	nop
    2d1e:	b002      	add	sp, #8
    2d20:	4770      	bx	lr

00002d22 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    2d22:	b082      	sub	sp, #8
    2d24:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2d26:	bf00      	nop
    2d28:	b002      	add	sp, #8
    2d2a:	4770      	bx	lr

00002d2c <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2d2c:	b500      	push	{lr}
    2d2e:	b083      	sub	sp, #12
    2d30:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d32:	9b01      	ldr	r3, [sp, #4]
    2d34:	2b00      	cmp	r3, #0
    2d36:	d002      	beq.n	2d3e <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2d38:	9801      	ldr	r0, [sp, #4]
    2d3a:	f000 f8d1 	bl	2ee0 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d3e:	bf00      	nop
    2d40:	b003      	add	sp, #12
    2d42:	f85d fb04 	ldr.w	pc, [sp], #4

00002d46 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2d46:	b500      	push	{lr}
    2d48:	b083      	sub	sp, #12
    2d4a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d4c:	9b01      	ldr	r3, [sp, #4]
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d002      	beq.n	2d58 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2d52:	9801      	ldr	r0, [sp, #4]
    2d54:	f000 f950 	bl	2ff8 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d58:	bf00      	nop
    2d5a:	b003      	add	sp, #12
    2d5c:	f85d fb04 	ldr.w	pc, [sp], #4

00002d60 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2d60:	b500      	push	{lr}
    2d62:	b083      	sub	sp, #12
    2d64:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2d66:	9801      	ldr	r0, [sp, #4]
    2d68:	f000 f98e 	bl	3088 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2d6c:	bf00      	nop
    2d6e:	b003      	add	sp, #12
    2d70:	f85d fb04 	ldr.w	pc, [sp], #4

00002d74 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d74:	b500      	push	{lr}
    2d76:	b083      	sub	sp, #12
    2d78:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d7a:	9b01      	ldr	r3, [sp, #4]
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	d002      	beq.n	2d86 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2d80:	9801      	ldr	r0, [sp, #4]
    2d82:	f000 f999 	bl	30b8 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d86:	bf00      	nop
    2d88:	b003      	add	sp, #12
    2d8a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d8e <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2d8e:	b500      	push	{lr}
    2d90:	b083      	sub	sp, #12
    2d92:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d94:	9b01      	ldr	r3, [sp, #4]
    2d96:	2b00      	cmp	r3, #0
    2d98:	d002      	beq.n	2da0 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    2d9a:	9801      	ldr	r0, [sp, #4]
    2d9c:	f000 f9b0 	bl	3100 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2da0:	bf00      	nop
    2da2:	b003      	add	sp, #12
    2da4:	f85d fb04 	ldr.w	pc, [sp], #4

00002da8 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2da8:	b500      	push	{lr}
    2daa:	b083      	sub	sp, #12
    2dac:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    2dae:	9801      	ldr	r0, [sp, #4]
    2db0:	f000 f9ba 	bl	3128 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2db4:	bf00      	nop
    2db6:	b003      	add	sp, #12
    2db8:	f85d fb04 	ldr.w	pc, [sp], #4

00002dbc <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2dbc:	b500      	push	{lr}
    2dbe:	b083      	sub	sp, #12
    2dc0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dc2:	9b01      	ldr	r3, [sp, #4]
    2dc4:	2b00      	cmp	r3, #0
    2dc6:	d002      	beq.n	2dce <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2dc8:	9801      	ldr	r0, [sp, #4]
    2dca:	f000 f9bd 	bl	3148 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dce:	bf00      	nop
    2dd0:	b003      	add	sp, #12
    2dd2:	f85d fb04 	ldr.w	pc, [sp], #4

00002dd6 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    2dd6:	b500      	push	{lr}
    2dd8:	b083      	sub	sp, #12
    2dda:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ddc:	9b01      	ldr	r3, [sp, #4]
    2dde:	2b00      	cmp	r3, #0
    2de0:	d002      	beq.n	2de8 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    2de2:	9801      	ldr	r0, [sp, #4]
    2de4:	f000 f9d4 	bl	3190 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2de8:	bf00      	nop
    2dea:	b003      	add	sp, #12
    2dec:	f85d fb04 	ldr.w	pc, [sp], #4

00002df0 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    2df0:	b500      	push	{lr}
    2df2:	b083      	sub	sp, #12
    2df4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    2df6:	9801      	ldr	r0, [sp, #4]
    2df8:	f000 f9de 	bl	31b8 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2dfc:	bf00      	nop
    2dfe:	b003      	add	sp, #12
    2e00:	f85d fb04 	ldr.w	pc, [sp], #4

00002e04 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    2e04:	b500      	push	{lr}
    2e06:	b089      	sub	sp, #36	; 0x24
    2e08:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    2e0a:	2300      	movs	r3, #0
    2e0c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    2e10:	4b20      	ldr	r3, [pc, #128]	; (2e94 <SetInputSouceSytemClock+0x90>)
    2e12:	695b      	ldr	r3, [r3, #20]
    2e14:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    2e16:	9b06      	ldr	r3, [sp, #24]
    2e18:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2e1c:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    2e1e:	9b01      	ldr	r3, [sp, #4]
    2e20:	061b      	lsls	r3, r3, #24
    2e22:	9a06      	ldr	r2, [sp, #24]
    2e24:	4313      	orrs	r3, r2
    2e26:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    2e28:	4a1a      	ldr	r2, [pc, #104]	; (2e94 <SetInputSouceSytemClock+0x90>)
    2e2a:	9b06      	ldr	r3, [sp, #24]
    2e2c:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2e2e:	aa02      	add	r2, sp, #8
    2e30:	a903      	add	r1, sp, #12
    2e32:	a804      	add	r0, sp, #16
    2e34:	f24c 3350 	movw	r3, #50000	; 0xc350
    2e38:	f7ff f9ac 	bl	2194 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    2e3c:	4b15      	ldr	r3, [pc, #84]	; (2e94 <SetInputSouceSytemClock+0x90>)
    2e3e:	691b      	ldr	r3, [r3, #16]
    2e40:	0e1b      	lsrs	r3, r3, #24
    2e42:	f003 030f 	and.w	r3, r3, #15
    2e46:	9a01      	ldr	r2, [sp, #4]
    2e48:	429a      	cmp	r2, r3
    2e4a:	bf0c      	ite	eq
    2e4c:	2301      	moveq	r3, #1
    2e4e:	2300      	movne	r3, #0
    2e50:	b2db      	uxtb	r3, r3
    2e52:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2e54:	9a02      	ldr	r2, [sp, #8]
    2e56:	a903      	add	r1, sp, #12
    2e58:	ab04      	add	r3, sp, #16
    2e5a:	4618      	mov	r0, r3
    2e5c:	f7ff f9b4 	bl	21c8 <Clock_Ip_TimeoutExpired>
    2e60:	4603      	mov	r3, r0
    2e62:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2e66:	9b05      	ldr	r3, [sp, #20]
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d106      	bne.n	2e7a <SetInputSouceSytemClock+0x76>
    2e6c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e70:	f083 0301 	eor.w	r3, r3, #1
    2e74:	b2db      	uxtb	r3, r3
    2e76:	2b00      	cmp	r3, #0
    2e78:	d1e0      	bne.n	2e3c <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    2e7a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d003      	beq.n	2e8a <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2e82:	2105      	movs	r1, #5
    2e84:	2001      	movs	r0, #1
    2e86:	f7ff f975 	bl	2174 <Clock_Ip_ReportClockErrors>
    }
}
    2e8a:	bf00      	nop
    2e8c:	b009      	add	sp, #36	; 0x24
    2e8e:	f85d fb04 	ldr.w	pc, [sp], #4
    2e92:	bf00      	nop
    2e94:	40064000 	.word	0x40064000

00002e98 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2e98:	b500      	push	{lr}
    2e9a:	b083      	sub	sp, #12
    2e9c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2e9e:	9b01      	ldr	r3, [sp, #4]
    2ea0:	2b00      	cmp	r3, #0
    2ea2:	d002      	beq.n	2eaa <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2ea4:	9801      	ldr	r0, [sp, #4]
    2ea6:	f000 f997 	bl	31d8 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2eaa:	bf00      	nop
    2eac:	b003      	add	sp, #12
    2eae:	f85d fb04 	ldr.w	pc, [sp], #4

00002eb2 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2eb2:	b500      	push	{lr}
    2eb4:	b083      	sub	sp, #12
    2eb6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2eb8:	9b01      	ldr	r3, [sp, #4]
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d002      	beq.n	2ec4 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    2ebe:	9801      	ldr	r0, [sp, #4]
    2ec0:	f000 fa7e 	bl	33c0 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ec4:	bf00      	nop
    2ec6:	b003      	add	sp, #12
    2ec8:	f85d fb04 	ldr.w	pc, [sp], #4

00002ecc <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    2ecc:	b500      	push	{lr}
    2ece:	b083      	sub	sp, #12
    2ed0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    2ed2:	9801      	ldr	r0, [sp, #4]
    2ed4:	f000 fab8 	bl	3448 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2ed8:	bf00      	nop
    2eda:	b003      	add	sp, #12
    2edc:	f85d fb04 	ldr.w	pc, [sp], #4

00002ee0 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2ee0:	b500      	push	{lr}
    2ee2:	b08b      	sub	sp, #44	; 0x2c
    2ee4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2ee6:	2300      	movs	r3, #0
    2ee8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    2eec:	9b01      	ldr	r3, [sp, #4]
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d10b      	bne.n	2f0a <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    2ef2:	2305      	movs	r3, #5
    2ef4:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    2ef6:	2301      	movs	r3, #1
    2ef8:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    2efc:	2301      	movs	r3, #1
    2efe:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    2f02:	2301      	movs	r3, #1
    2f04:	f88d 3010 	strb.w	r3, [sp, #16]
    2f08:	e00e      	b.n	2f28 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    2f0a:	9b01      	ldr	r3, [sp, #4]
    2f0c:	681b      	ldr	r3, [r3, #0]
    2f0e:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    2f10:	9b01      	ldr	r3, [sp, #4]
    2f12:	79db      	ldrb	r3, [r3, #7]
    2f14:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    2f18:	9b01      	ldr	r3, [sp, #4]
    2f1a:	889b      	ldrh	r3, [r3, #4]
    2f1c:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    2f20:	9b01      	ldr	r3, [sp, #4]
    2f22:	7a1b      	ldrb	r3, [r3, #8]
    2f24:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2f28:	4b32      	ldr	r3, [pc, #200]	; (2ff4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f2e:	4a31      	ldr	r2, [pc, #196]	; (2ff4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2f34:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2f38:	4b2e      	ldr	r3, [pc, #184]	; (2ff4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f3e:	4a2d      	ldr	r2, [pc, #180]	; (2ff4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f40:	f023 0301 	bic.w	r3, r3, #1
    2f44:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2f48:	4b2a      	ldr	r3, [pc, #168]	; (2ff4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f4e:	4a29      	ldr	r2, [pc, #164]	; (2ff4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f50:	f023 0304 	bic.w	r3, r3, #4
    2f54:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2f58:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2f5c:	2b01      	cmp	r3, #1
    2f5e:	d144      	bne.n	2fea <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    2f60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2f64:	4a23      	ldr	r2, [pc, #140]	; (2ff4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f66:	f003 0301 	and.w	r3, r3, #1
    2f6a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2f6e:	4b21      	ldr	r3, [pc, #132]	; (2ff4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2f74:	4a1f      	ldr	r2, [pc, #124]	; (2ff4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f76:	f043 0301 	orr.w	r3, r3, #1
    2f7a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    2f7e:	4b1d      	ldr	r3, [pc, #116]	; (2ff4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f80:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2f84:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2f88:	009b      	lsls	r3, r3, #2
    2f8a:	f003 0304 	and.w	r3, r3, #4
    2f8e:	4919      	ldr	r1, [pc, #100]	; (2ff4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2f90:	4313      	orrs	r3, r2
    2f92:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2f96:	aa05      	add	r2, sp, #20
    2f98:	a906      	add	r1, sp, #24
    2f9a:	a807      	add	r0, sp, #28
    2f9c:	f24c 3350 	movw	r3, #50000	; 0xc350
    2fa0:	f7ff f8f8 	bl	2194 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2fa4:	4b13      	ldr	r3, [pc, #76]	; (2ff4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2fa6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2faa:	0e1b      	lsrs	r3, r3, #24
    2fac:	f003 0301 	and.w	r3, r3, #1
    2fb0:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2fb2:	9a05      	ldr	r2, [sp, #20]
    2fb4:	a906      	add	r1, sp, #24
    2fb6:	ab07      	add	r3, sp, #28
    2fb8:	4618      	mov	r0, r3
    2fba:	f7ff f905 	bl	21c8 <Clock_Ip_TimeoutExpired>
    2fbe:	4603      	mov	r3, r0
    2fc0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2fc4:	9b08      	ldr	r3, [sp, #32]
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d106      	bne.n	2fd8 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    2fca:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2fce:	f083 0301 	eor.w	r3, r3, #1
    2fd2:	b2db      	uxtb	r3, r3
    2fd4:	2b00      	cmp	r3, #0
    2fd6:	d1e5      	bne.n	2fa4 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    2fd8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d004      	beq.n	2fea <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    2fe0:	9b02      	ldr	r3, [sp, #8]
    2fe2:	4619      	mov	r1, r3
    2fe4:	2001      	movs	r0, #1
    2fe6:	f7ff f8c5 	bl	2174 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2fea:	bf00      	nop
    2fec:	b00b      	add	sp, #44	; 0x2c
    2fee:	f85d fb04 	ldr.w	pc, [sp], #4
    2ff2:	bf00      	nop
    2ff4:	40064000 	.word	0x40064000

00002ff8 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2ff8:	b500      	push	{lr}
    2ffa:	b089      	sub	sp, #36	; 0x24
    2ffc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2ffe:	2300      	movs	r3, #0
    3000:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3004:	4b1f      	ldr	r3, [pc, #124]	; (3084 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3006:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    300a:	4a1e      	ldr	r2, [pc, #120]	; (3084 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    300c:	f043 0301 	orr.w	r3, r3, #1
    3010:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3014:	4b1b      	ldr	r3, [pc, #108]	; (3084 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3016:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    301a:	4a1a      	ldr	r2, [pc, #104]	; (3084 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    301c:	f043 0304 	orr.w	r3, r3, #4
    3020:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3024:	aa03      	add	r2, sp, #12
    3026:	a904      	add	r1, sp, #16
    3028:	a805      	add	r0, sp, #20
    302a:	f24c 3350 	movw	r3, #50000	; 0xc350
    302e:	f7ff f8b1 	bl	2194 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3032:	4b14      	ldr	r3, [pc, #80]	; (3084 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3034:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3038:	0e1b      	lsrs	r3, r3, #24
    303a:	f003 0301 	and.w	r3, r3, #1
    303e:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3040:	9a03      	ldr	r2, [sp, #12]
    3042:	a904      	add	r1, sp, #16
    3044:	ab05      	add	r3, sp, #20
    3046:	4618      	mov	r0, r3
    3048:	f7ff f8be 	bl	21c8 <Clock_Ip_TimeoutExpired>
    304c:	4603      	mov	r3, r0
    304e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3052:	9b06      	ldr	r3, [sp, #24]
    3054:	2b00      	cmp	r3, #0
    3056:	d106      	bne.n	3066 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3058:	f89d 301f 	ldrb.w	r3, [sp, #31]
    305c:	f083 0301 	eor.w	r3, r3, #1
    3060:	b2db      	uxtb	r3, r3
    3062:	2b00      	cmp	r3, #0
    3064:	d1e5      	bne.n	3032 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3066:	f89d 301f 	ldrb.w	r3, [sp, #31]
    306a:	2b00      	cmp	r3, #0
    306c:	d005      	beq.n	307a <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    306e:	9b01      	ldr	r3, [sp, #4]
    3070:	681b      	ldr	r3, [r3, #0]
    3072:	4619      	mov	r1, r3
    3074:	2001      	movs	r0, #1
    3076:	f7ff f87d 	bl	2174 <Clock_Ip_ReportClockErrors>
    }
}
    307a:	bf00      	nop
    307c:	b009      	add	sp, #36	; 0x24
    307e:	f85d fb04 	ldr.w	pc, [sp], #4
    3082:	bf00      	nop
    3084:	40064000 	.word	0x40064000

00003088 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3088:	b082      	sub	sp, #8
    308a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    308c:	4b09      	ldr	r3, [pc, #36]	; (30b4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    308e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3092:	4a08      	ldr	r2, [pc, #32]	; (30b4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3094:	f023 0301 	bic.w	r3, r3, #1
    3098:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    309c:	4b05      	ldr	r3, [pc, #20]	; (30b4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    309e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30a2:	4a04      	ldr	r2, [pc, #16]	; (30b4 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    30a4:	f023 0304 	bic.w	r3, r3, #4
    30a8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    30ac:	bf00      	nop
    30ae:	b002      	add	sp, #8
    30b0:	4770      	bx	lr
    30b2:	bf00      	nop
    30b4:	40064000 	.word	0x40064000

000030b8 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    30b8:	b082      	sub	sp, #8
    30ba:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    30bc:	4b0f      	ldr	r3, [pc, #60]	; (30fc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30c2:	4a0e      	ldr	r2, [pc, #56]	; (30fc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    30c8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    30cc:	4b0b      	ldr	r3, [pc, #44]	; (30fc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    30d2:	4a0a      	ldr	r2, [pc, #40]	; (30fc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30d4:	f023 0304 	bic.w	r3, r3, #4
    30d8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    30dc:	4b07      	ldr	r3, [pc, #28]	; (30fc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30de:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    30e2:	9b01      	ldr	r3, [sp, #4]
    30e4:	7a1b      	ldrb	r3, [r3, #8]
    30e6:	009b      	lsls	r3, r3, #2
    30e8:	f003 0304 	and.w	r3, r3, #4
    30ec:	4903      	ldr	r1, [pc, #12]	; (30fc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    30ee:	4313      	orrs	r3, r2
    30f0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    30f4:	bf00      	nop
    30f6:	b002      	add	sp, #8
    30f8:	4770      	bx	lr
    30fa:	bf00      	nop
    30fc:	40064000 	.word	0x40064000

00003100 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3100:	b082      	sub	sp, #8
    3102:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3104:	9b01      	ldr	r3, [sp, #4]
    3106:	889b      	ldrh	r3, [r3, #4]
    3108:	2b01      	cmp	r3, #1
    310a:	d107      	bne.n	311c <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    310c:	4b05      	ldr	r3, [pc, #20]	; (3124 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    310e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3112:	4a04      	ldr	r2, [pc, #16]	; (3124 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3114:	f043 0304 	orr.w	r3, r3, #4
    3118:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    311c:	bf00      	nop
    311e:	b002      	add	sp, #8
    3120:	4770      	bx	lr
    3122:	bf00      	nop
    3124:	40064000 	.word	0x40064000

00003128 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3128:	b082      	sub	sp, #8
    312a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    312c:	4b05      	ldr	r3, [pc, #20]	; (3144 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    312e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3132:	4a04      	ldr	r2, [pc, #16]	; (3144 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3134:	f023 0304 	bic.w	r3, r3, #4
    3138:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    313c:	bf00      	nop
    313e:	b002      	add	sp, #8
    3140:	4770      	bx	lr
    3142:	bf00      	nop
    3144:	40064000 	.word	0x40064000

00003148 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3148:	b082      	sub	sp, #8
    314a:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    314c:	4b0f      	ldr	r3, [pc, #60]	; (318c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    314e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3152:	4a0e      	ldr	r2, [pc, #56]	; (318c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3154:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3158:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    315c:	4b0b      	ldr	r3, [pc, #44]	; (318c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    315e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3162:	4a0a      	ldr	r2, [pc, #40]	; (318c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3164:	f023 0302 	bic.w	r3, r3, #2
    3168:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    316c:	4b07      	ldr	r3, [pc, #28]	; (318c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    316e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3172:	9b01      	ldr	r3, [sp, #4]
    3174:	7a5b      	ldrb	r3, [r3, #9]
    3176:	005b      	lsls	r3, r3, #1
    3178:	f003 0302 	and.w	r3, r3, #2
    317c:	4903      	ldr	r1, [pc, #12]	; (318c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    317e:	4313      	orrs	r3, r2
    3180:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3184:	bf00      	nop
    3186:	b002      	add	sp, #8
    3188:	4770      	bx	lr
    318a:	bf00      	nop
    318c:	40064000 	.word	0x40064000

00003190 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3190:	b082      	sub	sp, #8
    3192:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3194:	9b01      	ldr	r3, [sp, #4]
    3196:	889b      	ldrh	r3, [r3, #4]
    3198:	2b01      	cmp	r3, #1
    319a:	d107      	bne.n	31ac <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    319c:	4b05      	ldr	r3, [pc, #20]	; (31b4 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    319e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31a2:	4a04      	ldr	r2, [pc, #16]	; (31b4 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    31a4:	f043 0302 	orr.w	r3, r3, #2
    31a8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    31ac:	bf00      	nop
    31ae:	b002      	add	sp, #8
    31b0:	4770      	bx	lr
    31b2:	bf00      	nop
    31b4:	40064000 	.word	0x40064000

000031b8 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    31b8:	b082      	sub	sp, #8
    31ba:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    31bc:	4b05      	ldr	r3, [pc, #20]	; (31d4 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    31be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    31c2:	4a04      	ldr	r2, [pc, #16]	; (31d4 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    31c4:	f023 0302 	bic.w	r3, r3, #2
    31c8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    31cc:	bf00      	nop
    31ce:	b002      	add	sp, #8
    31d0:	4770      	bx	lr
    31d2:	bf00      	nop
    31d4:	40064000 	.word	0x40064000

000031d8 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    31d8:	b500      	push	{lr}
    31da:	b08b      	sub	sp, #44	; 0x2c
    31dc:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    31de:	9b01      	ldr	r3, [sp, #4]
    31e0:	681a      	ldr	r2, [r3, #0]
    31e2:	4975      	ldr	r1, [pc, #468]	; (33b8 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    31e4:	4613      	mov	r3, r2
    31e6:	00db      	lsls	r3, r3, #3
    31e8:	4413      	add	r3, r2
    31ea:	440b      	add	r3, r1
    31ec:	781b      	ldrb	r3, [r3, #0]
    31ee:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    31f0:	2300      	movs	r3, #0
    31f2:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    31f6:	2300      	movs	r3, #0
    31f8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    31fc:	4b6f      	ldr	r3, [pc, #444]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    31fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3202:	4a6e      	ldr	r2, [pc, #440]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3204:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3208:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    320c:	4b6b      	ldr	r3, [pc, #428]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    320e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3216:	2b00      	cmp	r3, #0
    3218:	d07d      	beq.n	3316 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    321a:	9b01      	ldr	r3, [sp, #4]
    321c:	79db      	ldrb	r3, [r3, #7]
    321e:	461a      	mov	r2, r3
    3220:	4b66      	ldr	r3, [pc, #408]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3222:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3226:	f003 0303 	and.w	r3, r3, #3
    322a:	429a      	cmp	r2, r3
    322c:	d10b      	bne.n	3246 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    322e:	9b01      	ldr	r3, [sp, #4]
    3230:	799b      	ldrb	r3, [r3, #6]
    3232:	461a      	mov	r2, r3
    3234:	4b61      	ldr	r3, [pc, #388]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3236:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    323a:	08db      	lsrs	r3, r3, #3
    323c:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3240:	429a      	cmp	r2, r3
    3242:	f000 80b4 	beq.w	33ae <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3246:	4b5d      	ldr	r3, [pc, #372]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3248:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    324c:	f003 0301 	and.w	r3, r3, #1
    3250:	2b00      	cmp	r3, #0
    3252:	d105      	bne.n	3260 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3254:	2301      	movs	r3, #1
    3256:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    325a:	2000      	movs	r0, #0
    325c:	f7ff fd66 	bl	2d2c <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3260:	2002      	movs	r0, #2
    3262:	f7ff fdcf 	bl	2e04 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3266:	4b55      	ldr	r3, [pc, #340]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3268:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    326c:	4a53      	ldr	r2, [pc, #332]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    326e:	f023 0301 	bic.w	r3, r3, #1
    3272:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3276:	9b01      	ldr	r3, [sp, #4]
    3278:	889b      	ldrh	r3, [r3, #4]
    327a:	2b01      	cmp	r3, #1
    327c:	f040 8097 	bne.w	33ae <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3280:	9b01      	ldr	r3, [sp, #4]
    3282:	79db      	ldrb	r3, [r3, #7]
    3284:	4a4d      	ldr	r2, [pc, #308]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3286:	f003 0303 	and.w	r3, r3, #3
    328a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    328e:	4b4b      	ldr	r3, [pc, #300]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3290:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3294:	9b01      	ldr	r3, [sp, #4]
    3296:	799b      	ldrb	r3, [r3, #6]
    3298:	00db      	lsls	r3, r3, #3
    329a:	f003 0308 	and.w	r3, r3, #8
    329e:	4313      	orrs	r3, r2
    32a0:	4a46      	ldr	r2, [pc, #280]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32a2:	f043 0301 	orr.w	r3, r3, #1
    32a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    32aa:	aa03      	add	r2, sp, #12
    32ac:	a904      	add	r1, sp, #16
    32ae:	a805      	add	r0, sp, #20
    32b0:	f24c 3350 	movw	r3, #50000	; 0xc350
    32b4:	f7fe ff6e 	bl	2194 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    32b8:	4b40      	ldr	r3, [pc, #256]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    32ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    32be:	0e1b      	lsrs	r3, r3, #24
    32c0:	f003 0301 	and.w	r3, r3, #1
    32c4:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    32c6:	9a03      	ldr	r2, [sp, #12]
    32c8:	a904      	add	r1, sp, #16
    32ca:	ab05      	add	r3, sp, #20
    32cc:	4618      	mov	r0, r3
    32ce:	f7fe ff7b 	bl	21c8 <Clock_Ip_TimeoutExpired>
    32d2:	4603      	mov	r3, r0
    32d4:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    32d8:	9b06      	ldr	r3, [sp, #24]
    32da:	2b00      	cmp	r3, #0
    32dc:	d106      	bne.n	32ec <Clock_Ip_SetFirc_TrustedCall+0x114>
    32de:	f89d 301f 	ldrb.w	r3, [sp, #31]
    32e2:	f083 0301 	eor.w	r3, r3, #1
    32e6:	b2db      	uxtb	r3, r3
    32e8:	2b00      	cmp	r3, #0
    32ea:	d1e5      	bne.n	32b8 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    32ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    32f0:	2b00      	cmp	r3, #0
    32f2:	d005      	beq.n	3300 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    32f4:	9b01      	ldr	r3, [sp, #4]
    32f6:	681b      	ldr	r3, [r3, #0]
    32f8:	4619      	mov	r1, r3
    32fa:	2001      	movs	r0, #1
    32fc:	f7fe ff3a 	bl	2174 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3300:	2003      	movs	r0, #3
    3302:	f7ff fd7f 	bl	2e04 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3306:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    330a:	2b00      	cmp	r3, #0
    330c:	d04f      	beq.n	33ae <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    330e:	2002      	movs	r0, #2
    3310:	f7ff fd26 	bl	2d60 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3314:	e04b      	b.n	33ae <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3316:	4b29      	ldr	r3, [pc, #164]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3318:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    331c:	4a27      	ldr	r2, [pc, #156]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    331e:	f023 0301 	bic.w	r3, r3, #1
    3322:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3326:	9b01      	ldr	r3, [sp, #4]
    3328:	889b      	ldrh	r3, [r3, #4]
    332a:	2b01      	cmp	r3, #1
    332c:	d13f      	bne.n	33ae <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    332e:	9b01      	ldr	r3, [sp, #4]
    3330:	79db      	ldrb	r3, [r3, #7]
    3332:	4a22      	ldr	r2, [pc, #136]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3334:	f003 0303 	and.w	r3, r3, #3
    3338:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    333c:	4b1f      	ldr	r3, [pc, #124]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    333e:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3342:	9b01      	ldr	r3, [sp, #4]
    3344:	799b      	ldrb	r3, [r3, #6]
    3346:	00db      	lsls	r3, r3, #3
    3348:	f003 0308 	and.w	r3, r3, #8
    334c:	4313      	orrs	r3, r2
    334e:	4a1b      	ldr	r2, [pc, #108]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3350:	f043 0301 	orr.w	r3, r3, #1
    3354:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3358:	aa03      	add	r2, sp, #12
    335a:	a904      	add	r1, sp, #16
    335c:	a805      	add	r0, sp, #20
    335e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3362:	f7fe ff17 	bl	2194 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3366:	4b15      	ldr	r3, [pc, #84]	; (33bc <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3368:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    336c:	0e1b      	lsrs	r3, r3, #24
    336e:	f003 0301 	and.w	r3, r3, #1
    3372:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3374:	9a03      	ldr	r2, [sp, #12]
    3376:	a904      	add	r1, sp, #16
    3378:	ab05      	add	r3, sp, #20
    337a:	4618      	mov	r0, r3
    337c:	f7fe ff24 	bl	21c8 <Clock_Ip_TimeoutExpired>
    3380:	4603      	mov	r3, r0
    3382:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3386:	9b06      	ldr	r3, [sp, #24]
    3388:	2b00      	cmp	r3, #0
    338a:	d106      	bne.n	339a <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    338c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3390:	f083 0301 	eor.w	r3, r3, #1
    3394:	b2db      	uxtb	r3, r3
    3396:	2b00      	cmp	r3, #0
    3398:	d1e5      	bne.n	3366 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    339a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    339e:	2b00      	cmp	r3, #0
    33a0:	d005      	beq.n	33ae <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    33a2:	9b01      	ldr	r3, [sp, #4]
    33a4:	681b      	ldr	r3, [r3, #0]
    33a6:	4619      	mov	r1, r3
    33a8:	2001      	movs	r0, #1
    33aa:	f7fe fee3 	bl	2174 <Clock_Ip_ReportClockErrors>
}
    33ae:	bf00      	nop
    33b0:	b00b      	add	sp, #44	; 0x2c
    33b2:	f85d fb04 	ldr.w	pc, [sp], #4
    33b6:	bf00      	nop
    33b8:	0000df54 	.word	0x0000df54
    33bc:	40064000 	.word	0x40064000

000033c0 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    33c0:	b500      	push	{lr}
    33c2:	b089      	sub	sp, #36	; 0x24
    33c4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    33c6:	2300      	movs	r3, #0
    33c8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    33cc:	9b01      	ldr	r3, [sp, #4]
    33ce:	889b      	ldrh	r3, [r3, #4]
    33d0:	2b01      	cmp	r3, #1
    33d2:	d132      	bne.n	343a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    33d4:	4b1b      	ldr	r3, [pc, #108]	; (3444 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    33d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33da:	4a1a      	ldr	r2, [pc, #104]	; (3444 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    33dc:	f043 0301 	orr.w	r3, r3, #1
    33e0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    33e4:	aa03      	add	r2, sp, #12
    33e6:	a904      	add	r1, sp, #16
    33e8:	a805      	add	r0, sp, #20
    33ea:	f24c 3350 	movw	r3, #50000	; 0xc350
    33ee:	f7fe fed1 	bl	2194 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    33f2:	4b14      	ldr	r3, [pc, #80]	; (3444 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    33f4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    33f8:	0e1b      	lsrs	r3, r3, #24
    33fa:	f003 0301 	and.w	r3, r3, #1
    33fe:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3400:	9a03      	ldr	r2, [sp, #12]
    3402:	a904      	add	r1, sp, #16
    3404:	ab05      	add	r3, sp, #20
    3406:	4618      	mov	r0, r3
    3408:	f7fe fede 	bl	21c8 <Clock_Ip_TimeoutExpired>
    340c:	4603      	mov	r3, r0
    340e:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3412:	9b06      	ldr	r3, [sp, #24]
    3414:	2b00      	cmp	r3, #0
    3416:	d106      	bne.n	3426 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3418:	f89d 301f 	ldrb.w	r3, [sp, #31]
    341c:	f083 0301 	eor.w	r3, r3, #1
    3420:	b2db      	uxtb	r3, r3
    3422:	2b00      	cmp	r3, #0
    3424:	d1e5      	bne.n	33f2 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3426:	f89d 301f 	ldrb.w	r3, [sp, #31]
    342a:	2b00      	cmp	r3, #0
    342c:	d005      	beq.n	343a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    342e:	9b01      	ldr	r3, [sp, #4]
    3430:	681b      	ldr	r3, [r3, #0]
    3432:	4619      	mov	r1, r3
    3434:	2001      	movs	r0, #1
    3436:	f7fe fe9d 	bl	2174 <Clock_Ip_ReportClockErrors>
        }
    }
}
    343a:	bf00      	nop
    343c:	b009      	add	sp, #36	; 0x24
    343e:	f85d fb04 	ldr.w	pc, [sp], #4
    3442:	bf00      	nop
    3444:	40064000 	.word	0x40064000

00003448 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3448:	b082      	sub	sp, #8
    344a:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    344c:	4b05      	ldr	r3, [pc, #20]	; (3464 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    344e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3452:	4a04      	ldr	r2, [pc, #16]	; (3464 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3454:	f023 0301 	bic.w	r3, r3, #1
    3458:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    345c:	bf00      	nop
    345e:	b002      	add	sp, #8
    3460:	4770      	bx	lr
    3462:	bf00      	nop
    3464:	40064000 	.word	0x40064000

00003468 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3468:	b082      	sub	sp, #8
    346a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    346c:	bf00      	nop
    346e:	b002      	add	sp, #8
    3470:	4770      	bx	lr

00003472 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3472:	b082      	sub	sp, #8
    3474:	9001      	str	r0, [sp, #4]
    3476:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3478:	bf00      	nop
    347a:	b002      	add	sp, #8
    347c:	4770      	bx	lr

0000347e <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    347e:	b082      	sub	sp, #8
    3480:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3482:	bf00      	nop
    3484:	b002      	add	sp, #8
    3486:	4770      	bx	lr

00003488 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3488:	b082      	sub	sp, #8
    348a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    348c:	bf00      	nop
    348e:	b002      	add	sp, #8
    3490:	4770      	bx	lr

00003492 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3492:	b082      	sub	sp, #8
    3494:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3496:	2302      	movs	r3, #2
}
    3498:	4618      	mov	r0, r3
    349a:	b002      	add	sp, #8
    349c:	4770      	bx	lr

0000349e <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    349e:	b082      	sub	sp, #8
    34a0:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    34a2:	bf00      	nop
    34a4:	b002      	add	sp, #8
    34a6:	4770      	bx	lr

000034a8 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    34a8:	b500      	push	{lr}
    34aa:	b083      	sub	sp, #12
    34ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34ae:	9b01      	ldr	r3, [sp, #4]
    34b0:	2b00      	cmp	r3, #0
    34b2:	d002      	beq.n	34ba <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    34b4:	9801      	ldr	r0, [sp, #4]
    34b6:	f000 f870 	bl	359a <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34ba:	bf00      	nop
    34bc:	b003      	add	sp, #12
    34be:	f85d fb04 	ldr.w	pc, [sp], #4

000034c2 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    34c2:	b500      	push	{lr}
    34c4:	b083      	sub	sp, #12
    34c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34c8:	9b01      	ldr	r3, [sp, #4]
    34ca:	2b00      	cmp	r3, #0
    34cc:	d002      	beq.n	34d4 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    34ce:	9801      	ldr	r0, [sp, #4]
    34d0:	f000 f89a 	bl	3608 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34d4:	bf00      	nop
    34d6:	b003      	add	sp, #12
    34d8:	f85d fb04 	ldr.w	pc, [sp], #4

000034dc <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    34dc:	b500      	push	{lr}
    34de:	b089      	sub	sp, #36	; 0x24
    34e0:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    34e2:	2301      	movs	r3, #1
    34e4:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    34e6:	2300      	movs	r3, #0
    34e8:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    34ec:	4b1e      	ldr	r3, [pc, #120]	; (3568 <Clock_Ip_CompleteSpll+0x8c>)
    34ee:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    34f2:	f003 0301 	and.w	r3, r3, #1
    34f6:	2b00      	cmp	r3, #0
    34f8:	d02f      	beq.n	355a <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    34fa:	aa02      	add	r2, sp, #8
    34fc:	a903      	add	r1, sp, #12
    34fe:	a804      	add	r0, sp, #16
    3500:	f24c 3350 	movw	r3, #50000	; 0xc350
    3504:	f7fe fe46 	bl	2194 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3508:	4b17      	ldr	r3, [pc, #92]	; (3568 <Clock_Ip_CompleteSpll+0x8c>)
    350a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    350e:	0e1b      	lsrs	r3, r3, #24
    3510:	f003 0301 	and.w	r3, r3, #1
    3514:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3516:	9a02      	ldr	r2, [sp, #8]
    3518:	a903      	add	r1, sp, #12
    351a:	ab04      	add	r3, sp, #16
    351c:	4618      	mov	r0, r3
    351e:	f7fe fe53 	bl	21c8 <Clock_Ip_TimeoutExpired>
    3522:	4603      	mov	r3, r0
    3524:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3528:	9b05      	ldr	r3, [sp, #20]
    352a:	2b00      	cmp	r3, #0
    352c:	d106      	bne.n	353c <Clock_Ip_CompleteSpll+0x60>
    352e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3532:	f083 0301 	eor.w	r3, r3, #1
    3536:	b2db      	uxtb	r3, r3
    3538:	2b00      	cmp	r3, #0
    353a:	d1e5      	bne.n	3508 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    353c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3540:	f083 0301 	eor.w	r3, r3, #1
    3544:	b2db      	uxtb	r3, r3
    3546:	2b00      	cmp	r3, #0
    3548:	d002      	beq.n	3550 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    354a:	2302      	movs	r3, #2
    354c:	9307      	str	r3, [sp, #28]
    354e:	e006      	b.n	355e <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3550:	9901      	ldr	r1, [sp, #4]
    3552:	2001      	movs	r0, #1
    3554:	f7fe fe0e 	bl	2174 <Clock_Ip_ReportClockErrors>
    3558:	e001      	b.n	355e <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    355a:	2300      	movs	r3, #0
    355c:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    355e:	9b07      	ldr	r3, [sp, #28]
}
    3560:	4618      	mov	r0, r3
    3562:	b009      	add	sp, #36	; 0x24
    3564:	f85d fb04 	ldr.w	pc, [sp], #4
    3568:	40064000 	.word	0x40064000

0000356c <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    356c:	b500      	push	{lr}
    356e:	b083      	sub	sp, #12
    3570:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3572:	9801      	ldr	r0, [sp, #4]
    3574:	f000 f886 	bl	3684 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3578:	bf00      	nop
    357a:	b003      	add	sp, #12
    357c:	f85d fb04 	ldr.w	pc, [sp], #4

00003580 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3580:	b500      	push	{lr}
    3582:	b083      	sub	sp, #12
    3584:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3586:	9b01      	ldr	r3, [sp, #4]
    3588:	2b00      	cmp	r3, #0
    358a:	d002      	beq.n	3592 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    358c:	9801      	ldr	r0, [sp, #4]
    358e:	f000 f891 	bl	36b4 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3592:	bf00      	nop
    3594:	b003      	add	sp, #12
    3596:	f85d fb04 	ldr.w	pc, [sp], #4

0000359a <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    359a:	b082      	sub	sp, #8
    359c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    359e:	4b19      	ldr	r3, [pc, #100]	; (3604 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35a0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    35a4:	4a17      	ldr	r2, [pc, #92]	; (3604 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    35aa:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    35ae:	4b15      	ldr	r3, [pc, #84]	; (3604 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35b0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    35b4:	4a13      	ldr	r2, [pc, #76]	; (3604 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    35ba:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    35be:	4b11      	ldr	r3, [pc, #68]	; (3604 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35c0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    35c4:	4a0f      	ldr	r2, [pc, #60]	; (3604 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    35ca:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    35ce:	4b0d      	ldr	r3, [pc, #52]	; (3604 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35d0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    35d4:	4a0b      	ldr	r2, [pc, #44]	; (3604 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35d6:	f023 0301 	bic.w	r3, r3, #1
    35da:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    35de:	4b09      	ldr	r3, [pc, #36]	; (3604 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35e0:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    35e4:	4a07      	ldr	r2, [pc, #28]	; (3604 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    35ea:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    35ee:	4b05      	ldr	r3, [pc, #20]	; (3604 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35f0:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    35f4:	4a03      	ldr	r2, [pc, #12]	; (3604 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    35f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    35fa:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    35fe:	bf00      	nop
    3600:	b002      	add	sp, #8
    3602:	4770      	bx	lr
    3604:	40064000 	.word	0x40064000

00003608 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3608:	b082      	sub	sp, #8
    360a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    360c:	9b01      	ldr	r3, [sp, #4]
    360e:	889b      	ldrh	r3, [r3, #4]
    3610:	2b01      	cmp	r3, #1
    3612:	d12f      	bne.n	3674 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3614:	4b1a      	ldr	r3, [pc, #104]	; (3680 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3616:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    361a:	9b01      	ldr	r3, [sp, #4]
    361c:	7b5b      	ldrb	r3, [r3, #13]
    361e:	3b01      	subs	r3, #1
    3620:	021b      	lsls	r3, r3, #8
    3622:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    3626:	9b01      	ldr	r3, [sp, #4]
    3628:	7d1b      	ldrb	r3, [r3, #20]
    362a:	3b10      	subs	r3, #16
    362c:	041b      	lsls	r3, r3, #16
    362e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3632:	430b      	orrs	r3, r1
    3634:	4912      	ldr	r1, [pc, #72]	; (3680 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3636:	4313      	orrs	r3, r2
    3638:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    363c:	9b01      	ldr	r3, [sp, #4]
    363e:	7fdb      	ldrb	r3, [r3, #31]
    3640:	2b02      	cmp	r3, #2
    3642:	d011      	beq.n	3668 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3644:	2b02      	cmp	r3, #2
    3646:	dc17      	bgt.n	3678 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3648:	2b00      	cmp	r3, #0
    364a:	d002      	beq.n	3652 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    364c:	2b01      	cmp	r3, #1
    364e:	d005      	beq.n	365c <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3650:	e012      	b.n	3678 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    3652:	4b0b      	ldr	r3, [pc, #44]	; (3680 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3654:	2200      	movs	r2, #0
    3656:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    365a:	e00e      	b.n	367a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    365c:	4b08      	ldr	r3, [pc, #32]	; (3680 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    365e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3662:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3666:	e008      	b.n	367a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3668:	4b05      	ldr	r3, [pc, #20]	; (3680 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    366a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    366e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3672:	e002      	b.n	367a <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3674:	bf00      	nop
    3676:	e000      	b.n	367a <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3678:	bf00      	nop
}
    367a:	bf00      	nop
    367c:	b002      	add	sp, #8
    367e:	4770      	bx	lr
    3680:	40064000 	.word	0x40064000

00003684 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3684:	b082      	sub	sp, #8
    3686:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3688:	4b09      	ldr	r3, [pc, #36]	; (36b0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    368a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    368e:	4a08      	ldr	r2, [pc, #32]	; (36b0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3690:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3694:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3698:	4b05      	ldr	r3, [pc, #20]	; (36b0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    369a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    369e:	4a04      	ldr	r2, [pc, #16]	; (36b0 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    36a0:	f023 0301 	bic.w	r3, r3, #1
    36a4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    36a8:	bf00      	nop
    36aa:	b002      	add	sp, #8
    36ac:	4770      	bx	lr
    36ae:	bf00      	nop
    36b0:	40064000 	.word	0x40064000

000036b4 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    36b4:	b082      	sub	sp, #8
    36b6:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    36b8:	9b01      	ldr	r3, [sp, #4]
    36ba:	889b      	ldrh	r3, [r3, #4]
    36bc:	2b01      	cmp	r3, #1
    36be:	d107      	bne.n	36d0 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    36c0:	4b05      	ldr	r3, [pc, #20]	; (36d8 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    36c2:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    36c6:	4a04      	ldr	r2, [pc, #16]	; (36d8 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    36c8:	f043 0301 	orr.w	r3, r3, #1
    36cc:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    36d0:	bf00      	nop
    36d2:	b002      	add	sp, #8
    36d4:	4770      	bx	lr
    36d6:	bf00      	nop
    36d8:	40064000 	.word	0x40064000

000036dc <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    36dc:	b082      	sub	sp, #8
    36de:	9001      	str	r0, [sp, #4]
    36e0:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    36e2:	bf00      	nop
    36e4:	b002      	add	sp, #8
    36e6:	4770      	bx	lr

000036e8 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    36e8:	b082      	sub	sp, #8
    36ea:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    36ec:	bf00      	nop
    36ee:	b002      	add	sp, #8
    36f0:	4770      	bx	lr

000036f2 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    36f2:	b500      	push	{lr}
    36f4:	b083      	sub	sp, #12
    36f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    36f8:	9b01      	ldr	r3, [sp, #4]
    36fa:	2b00      	cmp	r3, #0
    36fc:	d002      	beq.n	3704 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    36fe:	9801      	ldr	r0, [sp, #4]
    3700:	f000 f8ee 	bl	38e0 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3704:	bf00      	nop
    3706:	b003      	add	sp, #12
    3708:	f85d fb04 	ldr.w	pc, [sp], #4

0000370c <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    370c:	b500      	push	{lr}
    370e:	b083      	sub	sp, #12
    3710:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3712:	9b01      	ldr	r3, [sp, #4]
    3714:	2b00      	cmp	r3, #0
    3716:	d002      	beq.n	371e <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    3718:	9801      	ldr	r0, [sp, #4]
    371a:	f000 f8ff 	bl	391c <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    371e:	bf00      	nop
    3720:	b003      	add	sp, #12
    3722:	f85d fb04 	ldr.w	pc, [sp], #4

00003726 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    3726:	b500      	push	{lr}
    3728:	b083      	sub	sp, #12
    372a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    372c:	9b01      	ldr	r3, [sp, #4]
    372e:	2b00      	cmp	r3, #0
    3730:	d002      	beq.n	3738 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    3732:	9801      	ldr	r0, [sp, #4]
    3734:	f000 f912 	bl	395c <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3738:	bf00      	nop
    373a:	b003      	add	sp, #12
    373c:	f85d fb04 	ldr.w	pc, [sp], #4

00003740 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3740:	b500      	push	{lr}
    3742:	b083      	sub	sp, #12
    3744:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3746:	9b01      	ldr	r3, [sp, #4]
    3748:	2b00      	cmp	r3, #0
    374a:	d002      	beq.n	3752 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    374c:	9801      	ldr	r0, [sp, #4]
    374e:	f000 f925 	bl	399c <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3752:	bf00      	nop
    3754:	b003      	add	sp, #12
    3756:	f85d fb04 	ldr.w	pc, [sp], #4

0000375a <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    375a:	b500      	push	{lr}
    375c:	b083      	sub	sp, #12
    375e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3760:	9b01      	ldr	r3, [sp, #4]
    3762:	2b00      	cmp	r3, #0
    3764:	d002      	beq.n	376c <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3766:	9801      	ldr	r0, [sp, #4]
    3768:	f000 f936 	bl	39d8 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    376c:	bf00      	nop
    376e:	b003      	add	sp, #12
    3770:	f85d fb04 	ldr.w	pc, [sp], #4

00003774 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3774:	b500      	push	{lr}
    3776:	b083      	sub	sp, #12
    3778:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    377a:	9b01      	ldr	r3, [sp, #4]
    377c:	2b00      	cmp	r3, #0
    377e:	d002      	beq.n	3786 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3780:	9801      	ldr	r0, [sp, #4]
    3782:	f000 f949 	bl	3a18 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3786:	bf00      	nop
    3788:	b003      	add	sp, #12
    378a:	f85d fb04 	ldr.w	pc, [sp], #4

0000378e <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    378e:	b500      	push	{lr}
    3790:	b083      	sub	sp, #12
    3792:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3794:	9b01      	ldr	r3, [sp, #4]
    3796:	2b00      	cmp	r3, #0
    3798:	d002      	beq.n	37a0 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    379a:	9801      	ldr	r0, [sp, #4]
    379c:	f000 f958 	bl	3a50 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37a0:	bf00      	nop
    37a2:	b003      	add	sp, #12
    37a4:	f85d fb04 	ldr.w	pc, [sp], #4

000037a8 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    37a8:	b500      	push	{lr}
    37aa:	b083      	sub	sp, #12
    37ac:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37ae:	9b01      	ldr	r3, [sp, #4]
    37b0:	2b00      	cmp	r3, #0
    37b2:	d002      	beq.n	37ba <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    37b4:	9801      	ldr	r0, [sp, #4]
    37b6:	f000 f969 	bl	3a8c <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37ba:	bf00      	nop
    37bc:	b003      	add	sp, #12
    37be:	f85d fb04 	ldr.w	pc, [sp], #4

000037c2 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    37c2:	b500      	push	{lr}
    37c4:	b083      	sub	sp, #12
    37c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37c8:	9b01      	ldr	r3, [sp, #4]
    37ca:	2b00      	cmp	r3, #0
    37cc:	d002      	beq.n	37d4 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    37ce:	9801      	ldr	r0, [sp, #4]
    37d0:	f000 f978 	bl	3ac4 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37d4:	bf00      	nop
    37d6:	b003      	add	sp, #12
    37d8:	f85d fb04 	ldr.w	pc, [sp], #4

000037dc <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    37dc:	b500      	push	{lr}
    37de:	b083      	sub	sp, #12
    37e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37e2:	9b01      	ldr	r3, [sp, #4]
    37e4:	2b00      	cmp	r3, #0
    37e6:	d002      	beq.n	37ee <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    37e8:	9801      	ldr	r0, [sp, #4]
    37ea:	f000 f989 	bl	3b00 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37ee:	bf00      	nop
    37f0:	b003      	add	sp, #12
    37f2:	f85d fb04 	ldr.w	pc, [sp], #4

000037f6 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    37f6:	b500      	push	{lr}
    37f8:	b083      	sub	sp, #12
    37fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37fc:	9b01      	ldr	r3, [sp, #4]
    37fe:	2b00      	cmp	r3, #0
    3800:	d002      	beq.n	3808 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    3802:	9801      	ldr	r0, [sp, #4]
    3804:	f000 f998 	bl	3b38 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3808:	bf00      	nop
    380a:	b003      	add	sp, #12
    380c:	f85d fb04 	ldr.w	pc, [sp], #4

00003810 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    3810:	b500      	push	{lr}
    3812:	b083      	sub	sp, #12
    3814:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3816:	9b01      	ldr	r3, [sp, #4]
    3818:	2b00      	cmp	r3, #0
    381a:	d002      	beq.n	3822 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    381c:	9801      	ldr	r0, [sp, #4]
    381e:	f000 f9a9 	bl	3b74 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3822:	bf00      	nop
    3824:	b003      	add	sp, #12
    3826:	f85d fb04 	ldr.w	pc, [sp], #4

0000382a <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    382a:	b500      	push	{lr}
    382c:	b083      	sub	sp, #12
    382e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3830:	9b01      	ldr	r3, [sp, #4]
    3832:	2b00      	cmp	r3, #0
    3834:	d002      	beq.n	383c <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    3836:	9801      	ldr	r0, [sp, #4]
    3838:	f000 f9e6 	bl	3c08 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    383c:	bf00      	nop
    383e:	b003      	add	sp, #12
    3840:	f85d fb04 	ldr.w	pc, [sp], #4

00003844 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3844:	b500      	push	{lr}
    3846:	b083      	sub	sp, #12
    3848:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    384a:	9b01      	ldr	r3, [sp, #4]
    384c:	2b00      	cmp	r3, #0
    384e:	d002      	beq.n	3856 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    3850:	9801      	ldr	r0, [sp, #4]
    3852:	f000 fa25 	bl	3ca0 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3856:	bf00      	nop
    3858:	b003      	add	sp, #12
    385a:	f85d fb04 	ldr.w	pc, [sp], #4

0000385e <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    385e:	b500      	push	{lr}
    3860:	b083      	sub	sp, #12
    3862:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3864:	9b01      	ldr	r3, [sp, #4]
    3866:	2b00      	cmp	r3, #0
    3868:	d002      	beq.n	3870 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    386a:	9801      	ldr	r0, [sp, #4]
    386c:	f000 fa2a 	bl	3cc4 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3870:	bf00      	nop
    3872:	b003      	add	sp, #12
    3874:	f85d fb04 	ldr.w	pc, [sp], #4

00003878 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3878:	b500      	push	{lr}
    387a:	b083      	sub	sp, #12
    387c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    387e:	9b01      	ldr	r3, [sp, #4]
    3880:	2b00      	cmp	r3, #0
    3882:	d002      	beq.n	388a <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    3884:	9801      	ldr	r0, [sp, #4]
    3886:	f000 fa3b 	bl	3d00 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    388a:	bf00      	nop
    388c:	b003      	add	sp, #12
    388e:	f85d fb04 	ldr.w	pc, [sp], #4

00003892 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3892:	b500      	push	{lr}
    3894:	b083      	sub	sp, #12
    3896:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3898:	9b01      	ldr	r3, [sp, #4]
    389a:	2b00      	cmp	r3, #0
    389c:	d002      	beq.n	38a4 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    389e:	9801      	ldr	r0, [sp, #4]
    38a0:	f000 fa56 	bl	3d50 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38a4:	bf00      	nop
    38a6:	b003      	add	sp, #12
    38a8:	f85d fb04 	ldr.w	pc, [sp], #4

000038ac <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    38ac:	b500      	push	{lr}
    38ae:	b083      	sub	sp, #12
    38b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38b2:	9b01      	ldr	r3, [sp, #4]
    38b4:	2b00      	cmp	r3, #0
    38b6:	d002      	beq.n	38be <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    38b8:	9801      	ldr	r0, [sp, #4]
    38ba:	f000 fa79 	bl	3db0 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38be:	bf00      	nop
    38c0:	b003      	add	sp, #12
    38c2:	f85d fb04 	ldr.w	pc, [sp], #4

000038c6 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    38c6:	b500      	push	{lr}
    38c8:	b083      	sub	sp, #12
    38ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    38cc:	9b01      	ldr	r3, [sp, #4]
    38ce:	2b00      	cmp	r3, #0
    38d0:	d002      	beq.n	38d8 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    38d2:	9801      	ldr	r0, [sp, #4]
    38d4:	f000 fa8a 	bl	3dec <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    38d8:	bf00      	nop
    38da:	b003      	add	sp, #12
    38dc:	f85d fb04 	ldr.w	pc, [sp], #4

000038e0 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    38e0:	b084      	sub	sp, #16
    38e2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    38e4:	4b0b      	ldr	r3, [pc, #44]	; (3914 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    38e6:	795b      	ldrb	r3, [r3, #5]
    38e8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    38ea:	4b0b      	ldr	r3, [pc, #44]	; (3918 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    38ec:	695b      	ldr	r3, [r3, #20]
    38ee:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    38f0:	9b02      	ldr	r3, [sp, #8]
    38f2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    38f6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    38f8:	9b03      	ldr	r3, [sp, #12]
    38fa:	061b      	lsls	r3, r3, #24
    38fc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3900:	9a02      	ldr	r2, [sp, #8]
    3902:	4313      	orrs	r3, r2
    3904:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3906:	4a04      	ldr	r2, [pc, #16]	; (3918 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    3908:	9b02      	ldr	r3, [sp, #8]
    390a:	6153      	str	r3, [r2, #20]
}
    390c:	bf00      	nop
    390e:	b004      	add	sp, #16
    3910:	4770      	bx	lr
    3912:	bf00      	nop
    3914:	0000e2bc 	.word	0x0000e2bc
    3918:	40064000 	.word	0x40064000

0000391c <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    391c:	b084      	sub	sp, #16
    391e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3920:	9b01      	ldr	r3, [sp, #4]
    3922:	685b      	ldr	r3, [r3, #4]
    3924:	4a0b      	ldr	r2, [pc, #44]	; (3954 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    3926:	5cd3      	ldrb	r3, [r2, r3]
    3928:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    392a:	4b0b      	ldr	r3, [pc, #44]	; (3958 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    392c:	695b      	ldr	r3, [r3, #20]
    392e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3930:	9b02      	ldr	r3, [sp, #8]
    3932:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3936:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3938:	9b03      	ldr	r3, [sp, #12]
    393a:	061b      	lsls	r3, r3, #24
    393c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3940:	9a02      	ldr	r2, [sp, #8]
    3942:	4313      	orrs	r3, r2
    3944:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3946:	4a04      	ldr	r2, [pc, #16]	; (3958 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3948:	9b02      	ldr	r3, [sp, #8]
    394a:	6153      	str	r3, [r2, #20]
}
    394c:	bf00      	nop
    394e:	b004      	add	sp, #16
    3950:	4770      	bx	lr
    3952:	bf00      	nop
    3954:	0000e2bc 	.word	0x0000e2bc
    3958:	40064000 	.word	0x40064000

0000395c <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    395c:	b084      	sub	sp, #16
    395e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3960:	9b01      	ldr	r3, [sp, #4]
    3962:	685b      	ldr	r3, [r3, #4]
    3964:	4a0b      	ldr	r2, [pc, #44]	; (3994 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3966:	5cd3      	ldrb	r3, [r2, r3]
    3968:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    396a:	4b0b      	ldr	r3, [pc, #44]	; (3998 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    396c:	699b      	ldr	r3, [r3, #24]
    396e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3970:	9b02      	ldr	r3, [sp, #8]
    3972:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3976:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3978:	9b03      	ldr	r3, [sp, #12]
    397a:	061b      	lsls	r3, r3, #24
    397c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3980:	9a02      	ldr	r2, [sp, #8]
    3982:	4313      	orrs	r3, r2
    3984:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    3986:	4a04      	ldr	r2, [pc, #16]	; (3998 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3988:	9b02      	ldr	r3, [sp, #8]
    398a:	6193      	str	r3, [r2, #24]
}
    398c:	bf00      	nop
    398e:	b004      	add	sp, #16
    3990:	4770      	bx	lr
    3992:	bf00      	nop
    3994:	0000e2bc 	.word	0x0000e2bc
    3998:	40064000 	.word	0x40064000

0000399c <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    399c:	b084      	sub	sp, #16
    399e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39a0:	4b0b      	ldr	r3, [pc, #44]	; (39d0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    39a2:	795b      	ldrb	r3, [r3, #5]
    39a4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    39a6:	4b0b      	ldr	r3, [pc, #44]	; (39d4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    39a8:	69db      	ldr	r3, [r3, #28]
    39aa:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    39ac:	9b02      	ldr	r3, [sp, #8]
    39ae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    39b2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    39b4:	9b03      	ldr	r3, [sp, #12]
    39b6:	061b      	lsls	r3, r3, #24
    39b8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    39bc:	9a02      	ldr	r2, [sp, #8]
    39be:	4313      	orrs	r3, r2
    39c0:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    39c2:	4a04      	ldr	r2, [pc, #16]	; (39d4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    39c4:	9b02      	ldr	r3, [sp, #8]
    39c6:	61d3      	str	r3, [r2, #28]
}
    39c8:	bf00      	nop
    39ca:	b004      	add	sp, #16
    39cc:	4770      	bx	lr
    39ce:	bf00      	nop
    39d0:	0000e2bc 	.word	0x0000e2bc
    39d4:	40064000 	.word	0x40064000

000039d8 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    39d8:	b084      	sub	sp, #16
    39da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    39dc:	9b01      	ldr	r3, [sp, #4]
    39de:	685b      	ldr	r3, [r3, #4]
    39e0:	4a0b      	ldr	r2, [pc, #44]	; (3a10 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    39e2:	5cd3      	ldrb	r3, [r2, r3]
    39e4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    39e6:	4b0b      	ldr	r3, [pc, #44]	; (3a14 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    39e8:	69db      	ldr	r3, [r3, #28]
    39ea:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    39ec:	9b02      	ldr	r3, [sp, #8]
    39ee:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    39f2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    39f4:	9b03      	ldr	r3, [sp, #12]
    39f6:	061b      	lsls	r3, r3, #24
    39f8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    39fc:	9a02      	ldr	r2, [sp, #8]
    39fe:	4313      	orrs	r3, r2
    3a00:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3a02:	4a04      	ldr	r2, [pc, #16]	; (3a14 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    3a04:	9b02      	ldr	r3, [sp, #8]
    3a06:	61d3      	str	r3, [r2, #28]
}
    3a08:	bf00      	nop
    3a0a:	b004      	add	sp, #16
    3a0c:	4770      	bx	lr
    3a0e:	bf00      	nop
    3a10:	0000e2bc 	.word	0x0000e2bc
    3a14:	40064000 	.word	0x40064000

00003a18 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a18:	b084      	sub	sp, #16
    3a1a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a1c:	4b0a      	ldr	r3, [pc, #40]	; (3a48 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    3a1e:	7b9b      	ldrb	r3, [r3, #14]
    3a20:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a22:	4b0a      	ldr	r3, [pc, #40]	; (3a4c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3a24:	691b      	ldr	r3, [r3, #16]
    3a26:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3a28:	9b02      	ldr	r3, [sp, #8]
    3a2a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3a2e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3a30:	9b03      	ldr	r3, [sp, #12]
    3a32:	011b      	lsls	r3, r3, #4
    3a34:	9a02      	ldr	r2, [sp, #8]
    3a36:	4313      	orrs	r3, r2
    3a38:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a3a:	4a04      	ldr	r2, [pc, #16]	; (3a4c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    3a3c:	9b02      	ldr	r3, [sp, #8]
    3a3e:	6113      	str	r3, [r2, #16]
}
    3a40:	bf00      	nop
    3a42:	b004      	add	sp, #16
    3a44:	4770      	bx	lr
    3a46:	bf00      	nop
    3a48:	0000e264 	.word	0x0000e264
    3a4c:	40048000 	.word	0x40048000

00003a50 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a50:	b084      	sub	sp, #16
    3a52:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a54:	9b01      	ldr	r3, [sp, #4]
    3a56:	685b      	ldr	r3, [r3, #4]
    3a58:	4a0a      	ldr	r2, [pc, #40]	; (3a84 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    3a5a:	5cd3      	ldrb	r3, [r2, r3]
    3a5c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    3a5e:	4b0a      	ldr	r3, [pc, #40]	; (3a88 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a60:	691b      	ldr	r3, [r3, #16]
    3a62:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3a64:	9b02      	ldr	r3, [sp, #8]
    3a66:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    3a6a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3a6c:	9b03      	ldr	r3, [sp, #12]
    3a6e:	011b      	lsls	r3, r3, #4
    3a70:	9a02      	ldr	r2, [sp, #8]
    3a72:	4313      	orrs	r3, r2
    3a74:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3a76:	4a04      	ldr	r2, [pc, #16]	; (3a88 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3a78:	9b02      	ldr	r3, [sp, #8]
    3a7a:	6113      	str	r3, [r2, #16]
}
    3a7c:	bf00      	nop
    3a7e:	b004      	add	sp, #16
    3a80:	4770      	bx	lr
    3a82:	bf00      	nop
    3a84:	0000e264 	.word	0x0000e264
    3a88:	40048000 	.word	0x40048000

00003a8c <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3a8c:	b084      	sub	sp, #16
    3a8e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3a90:	4b0a      	ldr	r3, [pc, #40]	; (3abc <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3a92:	785b      	ldrb	r3, [r3, #1]
    3a94:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3a96:	4b0a      	ldr	r3, [pc, #40]	; (3ac0 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3a98:	691b      	ldr	r3, [r3, #16]
    3a9a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3a9c:	9b02      	ldr	r3, [sp, #8]
    3a9e:	f023 030c 	bic.w	r3, r3, #12
    3aa2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3aa4:	9b03      	ldr	r3, [sp, #12]
    3aa6:	009b      	lsls	r3, r3, #2
    3aa8:	9a02      	ldr	r2, [sp, #8]
    3aaa:	4313      	orrs	r3, r2
    3aac:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3aae:	4a04      	ldr	r2, [pc, #16]	; (3ac0 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3ab0:	9b02      	ldr	r3, [sp, #8]
    3ab2:	6113      	str	r3, [r2, #16]
}
    3ab4:	bf00      	nop
    3ab6:	b004      	add	sp, #16
    3ab8:	4770      	bx	lr
    3aba:	bf00      	nop
    3abc:	0000e31c 	.word	0x0000e31c
    3ac0:	40048000 	.word	0x40048000

00003ac4 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ac4:	b084      	sub	sp, #16
    3ac6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3ac8:	9b01      	ldr	r3, [sp, #4]
    3aca:	685b      	ldr	r3, [r3, #4]
    3acc:	4a0a      	ldr	r2, [pc, #40]	; (3af8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    3ace:	5cd3      	ldrb	r3, [r2, r3]
    3ad0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3ad2:	4b0a      	ldr	r3, [pc, #40]	; (3afc <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3ad4:	691b      	ldr	r3, [r3, #16]
    3ad6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    3ad8:	9b02      	ldr	r3, [sp, #8]
    3ada:	f023 030c 	bic.w	r3, r3, #12
    3ade:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3ae0:	9b03      	ldr	r3, [sp, #12]
    3ae2:	009b      	lsls	r3, r3, #2
    3ae4:	9a02      	ldr	r2, [sp, #8]
    3ae6:	4313      	orrs	r3, r2
    3ae8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3aea:	4a04      	ldr	r2, [pc, #16]	; (3afc <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    3aec:	9b02      	ldr	r3, [sp, #8]
    3aee:	6113      	str	r3, [r2, #16]
}
    3af0:	bf00      	nop
    3af2:	b004      	add	sp, #16
    3af4:	4770      	bx	lr
    3af6:	bf00      	nop
    3af8:	0000e31c 	.word	0x0000e31c
    3afc:	40048000 	.word	0x40048000

00003b00 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b00:	b084      	sub	sp, #16
    3b02:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b04:	4b0a      	ldr	r3, [pc, #40]	; (3b30 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    3b06:	795b      	ldrb	r3, [r3, #5]
    3b08:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    3b0a:	4b0a      	ldr	r3, [pc, #40]	; (3b34 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3b0c:	6a1b      	ldr	r3, [r3, #32]
    3b0e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3b10:	9b02      	ldr	r3, [sp, #8]
    3b12:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3b16:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3b18:	9b03      	ldr	r3, [sp, #12]
    3b1a:	061b      	lsls	r3, r3, #24
    3b1c:	9a02      	ldr	r2, [sp, #8]
    3b1e:	4313      	orrs	r3, r2
    3b20:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3b22:	4a04      	ldr	r2, [pc, #16]	; (3b34 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    3b24:	9b02      	ldr	r3, [sp, #8]
    3b26:	6213      	str	r3, [r2, #32]
}
    3b28:	bf00      	nop
    3b2a:	b004      	add	sp, #16
    3b2c:	4770      	bx	lr
    3b2e:	bf00      	nop
    3b30:	0000e2bc 	.word	0x0000e2bc
    3b34:	40064000 	.word	0x40064000

00003b38 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b38:	b084      	sub	sp, #16
    3b3a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b3c:	9b01      	ldr	r3, [sp, #4]
    3b3e:	685b      	ldr	r3, [r3, #4]
    3b40:	4a0a      	ldr	r2, [pc, #40]	; (3b6c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3b42:	5cd3      	ldrb	r3, [r2, r3]
    3b44:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3b46:	4b0a      	ldr	r3, [pc, #40]	; (3b70 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3b48:	6a1b      	ldr	r3, [r3, #32]
    3b4a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    3b4c:	9b02      	ldr	r3, [sp, #8]
    3b4e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3b52:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3b54:	9b03      	ldr	r3, [sp, #12]
    3b56:	061b      	lsls	r3, r3, #24
    3b58:	9a02      	ldr	r2, [sp, #8]
    3b5a:	4313      	orrs	r3, r2
    3b5c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    3b5e:	4a04      	ldr	r2, [pc, #16]	; (3b70 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3b60:	9b02      	ldr	r3, [sp, #8]
    3b62:	6213      	str	r3, [r2, #32]
}
    3b64:	bf00      	nop
    3b66:	b004      	add	sp, #16
    3b68:	4770      	bx	lr
    3b6a:	bf00      	nop
    3b6c:	0000e2bc 	.word	0x0000e2bc
    3b70:	40064000 	.word	0x40064000

00003b74 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3b74:	b086      	sub	sp, #24
    3b76:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3b78:	4b20      	ldr	r3, [pc, #128]	; (3bfc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    3b7a:	795b      	ldrb	r3, [r3, #5]
    3b7c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3b7e:	9b01      	ldr	r3, [sp, #4]
    3b80:	681a      	ldr	r2, [r3, #0]
    3b82:	491f      	ldr	r1, [pc, #124]	; (3c00 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3b84:	4613      	mov	r3, r2
    3b86:	00db      	lsls	r3, r3, #3
    3b88:	4413      	add	r3, r2
    3b8a:	440b      	add	r3, r1
    3b8c:	781b      	ldrb	r3, [r3, #0]
    3b8e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3b90:	4b1c      	ldr	r3, [pc, #112]	; (3c04 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3b92:	68db      	ldr	r3, [r3, #12]
    3b94:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3b96:	9b03      	ldr	r3, [sp, #12]
    3b98:	2b03      	cmp	r3, #3
    3b9a:	d813      	bhi.n	3bc4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3b9c:	9b03      	ldr	r3, [sp, #12]
    3b9e:	005b      	lsls	r3, r3, #1
    3ba0:	3318      	adds	r3, #24
    3ba2:	2203      	movs	r2, #3
    3ba4:	fa02 f303 	lsl.w	r3, r2, r3
    3ba8:	43db      	mvns	r3, r3
    3baa:	9a05      	ldr	r2, [sp, #20]
    3bac:	4013      	ands	r3, r2
    3bae:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3bb0:	9b03      	ldr	r3, [sp, #12]
    3bb2:	005b      	lsls	r3, r3, #1
    3bb4:	3318      	adds	r3, #24
    3bb6:	9a04      	ldr	r2, [sp, #16]
    3bb8:	fa02 f303 	lsl.w	r3, r2, r3
    3bbc:	9a05      	ldr	r2, [sp, #20]
    3bbe:	4313      	orrs	r3, r2
    3bc0:	9305      	str	r3, [sp, #20]
    3bc2:	e014      	b.n	3bee <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3bc4:	9b03      	ldr	r3, [sp, #12]
    3bc6:	3b04      	subs	r3, #4
    3bc8:	005b      	lsls	r3, r3, #1
    3bca:	3310      	adds	r3, #16
    3bcc:	2203      	movs	r2, #3
    3bce:	fa02 f303 	lsl.w	r3, r2, r3
    3bd2:	43db      	mvns	r3, r3
    3bd4:	9a05      	ldr	r2, [sp, #20]
    3bd6:	4013      	ands	r3, r2
    3bd8:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3bda:	9b03      	ldr	r3, [sp, #12]
    3bdc:	3b04      	subs	r3, #4
    3bde:	005b      	lsls	r3, r3, #1
    3be0:	3310      	adds	r3, #16
    3be2:	9a04      	ldr	r2, [sp, #16]
    3be4:	fa02 f303 	lsl.w	r3, r2, r3
    3be8:	9a05      	ldr	r2, [sp, #20]
    3bea:	4313      	orrs	r3, r2
    3bec:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3bee:	4a05      	ldr	r2, [pc, #20]	; (3c04 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3bf0:	9b05      	ldr	r3, [sp, #20]
    3bf2:	60d3      	str	r3, [r2, #12]
}
    3bf4:	bf00      	nop
    3bf6:	b006      	add	sp, #24
    3bf8:	4770      	bx	lr
    3bfa:	bf00      	nop
    3bfc:	0000e264 	.word	0x0000e264
    3c00:	0000df54 	.word	0x0000df54
    3c04:	40048000 	.word	0x40048000

00003c08 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3c08:	b086      	sub	sp, #24
    3c0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3c0c:	9b01      	ldr	r3, [sp, #4]
    3c0e:	685b      	ldr	r3, [r3, #4]
    3c10:	4a20      	ldr	r2, [pc, #128]	; (3c94 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    3c12:	5cd3      	ldrb	r3, [r2, r3]
    3c14:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c16:	9b01      	ldr	r3, [sp, #4]
    3c18:	681a      	ldr	r2, [r3, #0]
    3c1a:	491f      	ldr	r1, [pc, #124]	; (3c98 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    3c1c:	4613      	mov	r3, r2
    3c1e:	00db      	lsls	r3, r3, #3
    3c20:	4413      	add	r3, r2
    3c22:	440b      	add	r3, r1
    3c24:	781b      	ldrb	r3, [r3, #0]
    3c26:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3c28:	4b1c      	ldr	r3, [pc, #112]	; (3c9c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3c2a:	68db      	ldr	r3, [r3, #12]
    3c2c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3c2e:	9b03      	ldr	r3, [sp, #12]
    3c30:	2b03      	cmp	r3, #3
    3c32:	d813      	bhi.n	3c5c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3c34:	9b03      	ldr	r3, [sp, #12]
    3c36:	005b      	lsls	r3, r3, #1
    3c38:	3318      	adds	r3, #24
    3c3a:	2203      	movs	r2, #3
    3c3c:	fa02 f303 	lsl.w	r3, r2, r3
    3c40:	43db      	mvns	r3, r3
    3c42:	9a05      	ldr	r2, [sp, #20]
    3c44:	4013      	ands	r3, r2
    3c46:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3c48:	9b03      	ldr	r3, [sp, #12]
    3c4a:	005b      	lsls	r3, r3, #1
    3c4c:	3318      	adds	r3, #24
    3c4e:	9a04      	ldr	r2, [sp, #16]
    3c50:	fa02 f303 	lsl.w	r3, r2, r3
    3c54:	9a05      	ldr	r2, [sp, #20]
    3c56:	4313      	orrs	r3, r2
    3c58:	9305      	str	r3, [sp, #20]
    3c5a:	e014      	b.n	3c86 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3c5c:	9b03      	ldr	r3, [sp, #12]
    3c5e:	3b04      	subs	r3, #4
    3c60:	005b      	lsls	r3, r3, #1
    3c62:	3310      	adds	r3, #16
    3c64:	2203      	movs	r2, #3
    3c66:	fa02 f303 	lsl.w	r3, r2, r3
    3c6a:	43db      	mvns	r3, r3
    3c6c:	9a05      	ldr	r2, [sp, #20]
    3c6e:	4013      	ands	r3, r2
    3c70:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3c72:	9b03      	ldr	r3, [sp, #12]
    3c74:	3b04      	subs	r3, #4
    3c76:	005b      	lsls	r3, r3, #1
    3c78:	3310      	adds	r3, #16
    3c7a:	9a04      	ldr	r2, [sp, #16]
    3c7c:	fa02 f303 	lsl.w	r3, r2, r3
    3c80:	9a05      	ldr	r2, [sp, #20]
    3c82:	4313      	orrs	r3, r2
    3c84:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3c86:	4a05      	ldr	r2, [pc, #20]	; (3c9c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3c88:	9b05      	ldr	r3, [sp, #20]
    3c8a:	60d3      	str	r3, [r2, #12]
}
    3c8c:	bf00      	nop
    3c8e:	b006      	add	sp, #24
    3c90:	4770      	bx	lr
    3c92:	bf00      	nop
    3c94:	0000e264 	.word	0x0000e264
    3c98:	0000df54 	.word	0x0000df54
    3c9c:	40048000 	.word	0x40048000

00003ca0 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3ca0:	b084      	sub	sp, #16
    3ca2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3ca4:	4b06      	ldr	r3, [pc, #24]	; (3cc0 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3ca6:	685b      	ldr	r3, [r3, #4]
    3ca8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    3caa:	9b03      	ldr	r3, [sp, #12]
    3cac:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3cb0:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3cb2:	4a03      	ldr	r2, [pc, #12]	; (3cc0 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3cb4:	9b03      	ldr	r3, [sp, #12]
    3cb6:	6053      	str	r3, [r2, #4]
}
    3cb8:	bf00      	nop
    3cba:	b004      	add	sp, #16
    3cbc:	4770      	bx	lr
    3cbe:	bf00      	nop
    3cc0:	40048000 	.word	0x40048000

00003cc4 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3cc4:	b084      	sub	sp, #16
    3cc6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3cc8:	9b01      	ldr	r3, [sp, #4]
    3cca:	685b      	ldr	r3, [r3, #4]
    3ccc:	4a0a      	ldr	r2, [pc, #40]	; (3cf8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    3cce:	5cd3      	ldrb	r3, [r2, r3]
    3cd0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    3cd2:	4b0a      	ldr	r3, [pc, #40]	; (3cfc <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3cd4:	685b      	ldr	r3, [r3, #4]
    3cd6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    3cd8:	9b02      	ldr	r3, [sp, #8]
    3cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3cde:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    3ce0:	9b03      	ldr	r3, [sp, #12]
    3ce2:	011b      	lsls	r3, r3, #4
    3ce4:	9a02      	ldr	r2, [sp, #8]
    3ce6:	4313      	orrs	r3, r2
    3ce8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    3cea:	4a04      	ldr	r2, [pc, #16]	; (3cfc <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    3cec:	9b02      	ldr	r3, [sp, #8]
    3cee:	6053      	str	r3, [r2, #4]
}
    3cf0:	bf00      	nop
    3cf2:	b004      	add	sp, #16
    3cf4:	4770      	bx	lr
    3cf6:	bf00      	nop
    3cf8:	0000e264 	.word	0x0000e264
    3cfc:	40048000 	.word	0x40048000

00003d00 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d00:	b084      	sub	sp, #16
    3d02:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3d04:	9b01      	ldr	r3, [sp, #4]
    3d06:	681a      	ldr	r2, [r3, #0]
    3d08:	490f      	ldr	r1, [pc, #60]	; (3d48 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    3d0a:	4613      	mov	r3, r2
    3d0c:	00db      	lsls	r3, r3, #3
    3d0e:	4413      	add	r3, r2
    3d10:	440b      	add	r3, r1
    3d12:	3304      	adds	r3, #4
    3d14:	781b      	ldrb	r3, [r3, #0]
    3d16:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    3d18:	4a0c      	ldr	r2, [pc, #48]	; (3d4c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3d1a:	9b03      	ldr	r3, [sp, #12]
    3d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d20:	490a      	ldr	r1, [pc, #40]	; (3d4c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3d22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    3d26:	9b03      	ldr	r3, [sp, #12]
    3d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    3d2c:	4a07      	ldr	r2, [pc, #28]	; (3d4c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3d2e:	9b03      	ldr	r3, [sp, #12]
    3d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d34:	4905      	ldr	r1, [pc, #20]	; (3d4c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3d36:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    3d3a:	9b03      	ldr	r3, [sp, #12]
    3d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3d40:	bf00      	nop
    3d42:	b004      	add	sp, #16
    3d44:	4770      	bx	lr
    3d46:	bf00      	nop
    3d48:	0000df54 	.word	0x0000df54
    3d4c:	40065000 	.word	0x40065000

00003d50 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3d50:	b086      	sub	sp, #24
    3d52:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3d54:	9b01      	ldr	r3, [sp, #4]
    3d56:	681a      	ldr	r2, [r3, #0]
    3d58:	4912      	ldr	r1, [pc, #72]	; (3da4 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    3d5a:	4613      	mov	r3, r2
    3d5c:	00db      	lsls	r3, r3, #3
    3d5e:	4413      	add	r3, r2
    3d60:	440b      	add	r3, r1
    3d62:	3304      	adds	r3, #4
    3d64:	781b      	ldrb	r3, [r3, #0]
    3d66:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3d68:	9b01      	ldr	r3, [sp, #4]
    3d6a:	685b      	ldr	r3, [r3, #4]
    3d6c:	4a0e      	ldr	r2, [pc, #56]	; (3da8 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    3d6e:	5cd3      	ldrb	r3, [r2, r3]
    3d70:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3d72:	4a0e      	ldr	r2, [pc, #56]	; (3dac <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d74:	9b05      	ldr	r3, [sp, #20]
    3d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3d7a:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    3d7c:	9b03      	ldr	r3, [sp, #12]
    3d7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3d82:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3d84:	9b04      	ldr	r3, [sp, #16]
    3d86:	061b      	lsls	r3, r3, #24
    3d88:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    3d8c:	9a03      	ldr	r2, [sp, #12]
    3d8e:	4313      	orrs	r3, r2
    3d90:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3d92:	4906      	ldr	r1, [pc, #24]	; (3dac <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3d94:	9b05      	ldr	r3, [sp, #20]
    3d96:	9a03      	ldr	r2, [sp, #12]
    3d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3d9c:	bf00      	nop
    3d9e:	b006      	add	sp, #24
    3da0:	4770      	bx	lr
    3da2:	bf00      	nop
    3da4:	0000df54 	.word	0x0000df54
    3da8:	0000e2ec 	.word	0x0000e2ec
    3dac:	40065000 	.word	0x40065000

00003db0 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3db0:	b084      	sub	sp, #16
    3db2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3db4:	4b0b      	ldr	r3, [pc, #44]	; (3de4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3db6:	7f1b      	ldrb	r3, [r3, #28]
    3db8:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    3dba:	4b0b      	ldr	r3, [pc, #44]	; (3de8 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3dbc:	685b      	ldr	r3, [r3, #4]
    3dbe:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3dc0:	9b02      	ldr	r3, [sp, #8]
    3dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3dc6:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3dc8:	9b03      	ldr	r3, [sp, #12]
    3dca:	031b      	lsls	r3, r3, #12
    3dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3dd0:	9a02      	ldr	r2, [sp, #8]
    3dd2:	4313      	orrs	r3, r2
    3dd4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3dd6:	4a04      	ldr	r2, [pc, #16]	; (3de8 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    3dd8:	9b02      	ldr	r3, [sp, #8]
    3dda:	6053      	str	r3, [r2, #4]
}
    3ddc:	bf00      	nop
    3dde:	b004      	add	sp, #16
    3de0:	4770      	bx	lr
    3de2:	bf00      	nop
    3de4:	0000e264 	.word	0x0000e264
    3de8:	40048000 	.word	0x40048000

00003dec <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3dec:	b084      	sub	sp, #16
    3dee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3df0:	9b01      	ldr	r3, [sp, #4]
    3df2:	685b      	ldr	r3, [r3, #4]
    3df4:	4a0b      	ldr	r2, [pc, #44]	; (3e24 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    3df6:	5cd3      	ldrb	r3, [r2, r3]
    3df8:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    3dfa:	4b0b      	ldr	r3, [pc, #44]	; (3e28 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3dfc:	685b      	ldr	r3, [r3, #4]
    3dfe:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3e00:	9b02      	ldr	r3, [sp, #8]
    3e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3e06:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3e08:	9b03      	ldr	r3, [sp, #12]
    3e0a:	031b      	lsls	r3, r3, #12
    3e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3e10:	9a02      	ldr	r2, [sp, #8]
    3e12:	4313      	orrs	r3, r2
    3e14:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    3e16:	4a04      	ldr	r2, [pc, #16]	; (3e28 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    3e18:	9b02      	ldr	r3, [sp, #8]
    3e1a:	6053      	str	r3, [r2, #4]
}
    3e1c:	bf00      	nop
    3e1e:	b004      	add	sp, #16
    3e20:	4770      	bx	lr
    3e22:	bf00      	nop
    3e24:	0000e264 	.word	0x0000e264
    3e28:	40048000 	.word	0x40048000

00003e2c <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    3e2c:	b500      	push	{lr}
    3e2e:	b085      	sub	sp, #20
    3e30:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3e32:	2300      	movs	r3, #0
    3e34:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3e38:	9b01      	ldr	r3, [sp, #4]
    3e3a:	2b00      	cmp	r3, #0
    3e3c:	d037      	beq.n	3eae <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3e3e:	2300      	movs	r3, #0
    3e40:	9303      	str	r3, [sp, #12]
    3e42:	e02b      	b.n	3e9c <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3e44:	4b29      	ldr	r3, [pc, #164]	; (3eec <DisableSafeClock+0xc0>)
    3e46:	6819      	ldr	r1, [r3, #0]
    3e48:	9a03      	ldr	r2, [sp, #12]
    3e4a:	4613      	mov	r3, r2
    3e4c:	005b      	lsls	r3, r3, #1
    3e4e:	4413      	add	r3, r2
    3e50:	009b      	lsls	r3, r3, #2
    3e52:	440b      	add	r3, r1
    3e54:	3314      	adds	r3, #20
    3e56:	681b      	ldr	r3, [r3, #0]
    3e58:	2b05      	cmp	r3, #5
    3e5a:	d11c      	bne.n	3e96 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    3e5c:	2301      	movs	r3, #1
    3e5e:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3e62:	4b22      	ldr	r3, [pc, #136]	; (3eec <DisableSafeClock+0xc0>)
    3e64:	6819      	ldr	r1, [r3, #0]
    3e66:	9a03      	ldr	r2, [sp, #12]
    3e68:	4613      	mov	r3, r2
    3e6a:	005b      	lsls	r3, r3, #1
    3e6c:	4413      	add	r3, r2
    3e6e:	009b      	lsls	r3, r3, #2
    3e70:	440b      	add	r3, r1
    3e72:	3318      	adds	r3, #24
    3e74:	881b      	ldrh	r3, [r3, #0]
    3e76:	2b00      	cmp	r3, #0
    3e78:	d118      	bne.n	3eac <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3e7a:	4b1d      	ldr	r3, [pc, #116]	; (3ef0 <DisableSafeClock+0xc4>)
    3e7c:	791b      	ldrb	r3, [r3, #4]
    3e7e:	4619      	mov	r1, r3
    3e80:	4a1c      	ldr	r2, [pc, #112]	; (3ef4 <DisableSafeClock+0xc8>)
    3e82:	460b      	mov	r3, r1
    3e84:	005b      	lsls	r3, r3, #1
    3e86:	440b      	add	r3, r1
    3e88:	009b      	lsls	r3, r3, #2
    3e8a:	4413      	add	r3, r2
    3e8c:	3308      	adds	r3, #8
    3e8e:	681b      	ldr	r3, [r3, #0]
    3e90:	2005      	movs	r0, #5
    3e92:	4798      	blx	r3
                }
                break;
    3e94:	e00a      	b.n	3eac <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3e96:	9b03      	ldr	r3, [sp, #12]
    3e98:	3301      	adds	r3, #1
    3e9a:	9303      	str	r3, [sp, #12]
    3e9c:	4b13      	ldr	r3, [pc, #76]	; (3eec <DisableSafeClock+0xc0>)
    3e9e:	681b      	ldr	r3, [r3, #0]
    3ea0:	7a1b      	ldrb	r3, [r3, #8]
    3ea2:	461a      	mov	r2, r3
    3ea4:	9b03      	ldr	r3, [sp, #12]
    3ea6:	4293      	cmp	r3, r2
    3ea8:	d3cc      	bcc.n	3e44 <DisableSafeClock+0x18>
    3eaa:	e000      	b.n	3eae <DisableSafeClock+0x82>
                break;
    3eac:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    3eae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3eb2:	f083 0301 	eor.w	r3, r3, #1
    3eb6:	b2db      	uxtb	r3, r3
    3eb8:	2b00      	cmp	r3, #0
    3eba:	d013      	beq.n	3ee4 <DisableSafeClock+0xb8>
    3ebc:	4b0e      	ldr	r3, [pc, #56]	; (3ef8 <DisableSafeClock+0xcc>)
    3ebe:	781b      	ldrb	r3, [r3, #0]
    3ec0:	f083 0301 	eor.w	r3, r3, #1
    3ec4:	b2db      	uxtb	r3, r3
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d00c      	beq.n	3ee4 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    3eca:	4b09      	ldr	r3, [pc, #36]	; (3ef0 <DisableSafeClock+0xc4>)
    3ecc:	791b      	ldrb	r3, [r3, #4]
    3ece:	4619      	mov	r1, r3
    3ed0:	4a08      	ldr	r2, [pc, #32]	; (3ef4 <DisableSafeClock+0xc8>)
    3ed2:	460b      	mov	r3, r1
    3ed4:	005b      	lsls	r3, r3, #1
    3ed6:	440b      	add	r3, r1
    3ed8:	009b      	lsls	r3, r3, #2
    3eda:	4413      	add	r3, r2
    3edc:	3308      	adds	r3, #8
    3ede:	681b      	ldr	r3, [r3, #0]
    3ee0:	2005      	movs	r0, #5
    3ee2:	4798      	blx	r3
    }
}
    3ee4:	bf00      	nop
    3ee6:	b005      	add	sp, #20
    3ee8:	f85d fb04 	ldr.w	pc, [sp], #4
    3eec:	1fff8b9c 	.word	0x1fff8b9c
    3ef0:	0000dee4 	.word	0x0000dee4
    3ef4:	0000e514 	.word	0x0000e514
    3ef8:	1fff8b20 	.word	0x1fff8b20

00003efc <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    3efc:	4b06      	ldr	r3, [pc, #24]	; (3f18 <SetFircToResetValue_TrustedCall+0x1c>)
    3efe:	2200      	movs	r2, #0
    3f00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    3f04:	4b04      	ldr	r3, [pc, #16]	; (3f18 <SetFircToResetValue_TrustedCall+0x1c>)
    3f06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3f0a:	4a03      	ldr	r2, [pc, #12]	; (3f18 <SetFircToResetValue_TrustedCall+0x1c>)
    3f0c:	f043 0301 	orr.w	r3, r3, #1
    3f10:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3f14:	bf00      	nop
    3f16:	4770      	bx	lr
    3f18:	40064000 	.word	0x40064000

00003f1c <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    3f1c:	b084      	sub	sp, #16
    3f1e:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    3f20:	2303      	movs	r3, #3
    3f22:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3f24:	2300      	movs	r3, #0
    3f26:	9302      	str	r3, [sp, #8]
    3f28:	e028      	b.n	3f7c <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    3f2a:	9b01      	ldr	r3, [sp, #4]
    3f2c:	9a02      	ldr	r2, [sp, #8]
    3f2e:	320d      	adds	r2, #13
    3f30:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3f34:	2b28      	cmp	r3, #40	; 0x28
    3f36:	d10b      	bne.n	3f50 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3f38:	9a01      	ldr	r2, [sp, #4]
    3f3a:	9b02      	ldr	r3, [sp, #8]
    3f3c:	330d      	adds	r3, #13
    3f3e:	00db      	lsls	r3, r3, #3
    3f40:	4413      	add	r3, r2
    3f42:	685b      	ldr	r3, [r3, #4]
    3f44:	4a2b      	ldr	r2, [pc, #172]	; (3ff4 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3f46:	5cd3      	ldrb	r3, [r2, r3]
    3f48:	011b      	lsls	r3, r3, #4
    3f4a:	9a03      	ldr	r2, [sp, #12]
    3f4c:	4313      	orrs	r3, r2
    3f4e:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    3f50:	9b01      	ldr	r3, [sp, #4]
    3f52:	9a02      	ldr	r2, [sp, #8]
    3f54:	320d      	adds	r2, #13
    3f56:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3f5a:	2b29      	cmp	r3, #41	; 0x29
    3f5c:	d10b      	bne.n	3f76 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3f5e:	9a01      	ldr	r2, [sp, #4]
    3f60:	9b02      	ldr	r3, [sp, #8]
    3f62:	330d      	adds	r3, #13
    3f64:	00db      	lsls	r3, r3, #3
    3f66:	4413      	add	r3, r2
    3f68:	685b      	ldr	r3, [r3, #4]
    3f6a:	4a23      	ldr	r2, [pc, #140]	; (3ff8 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3f6c:	5cd3      	ldrb	r3, [r2, r3]
    3f6e:	009b      	lsls	r3, r3, #2
    3f70:	9a03      	ldr	r2, [sp, #12]
    3f72:	4313      	orrs	r3, r2
    3f74:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3f76:	9b02      	ldr	r3, [sp, #8]
    3f78:	3301      	adds	r3, #1
    3f7a:	9302      	str	r3, [sp, #8]
    3f7c:	9b01      	ldr	r3, [sp, #4]
    3f7e:	7adb      	ldrb	r3, [r3, #11]
    3f80:	461a      	mov	r2, r3
    3f82:	9b02      	ldr	r3, [sp, #8]
    3f84:	4293      	cmp	r3, r2
    3f86:	d3d0      	bcc.n	3f2a <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3f88:	2300      	movs	r3, #0
    3f8a:	9302      	str	r3, [sp, #8]
    3f8c:	e026      	b.n	3fdc <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    3f8e:	9a01      	ldr	r2, [sp, #4]
    3f90:	9b02      	ldr	r3, [sp, #8]
    3f92:	334e      	adds	r3, #78	; 0x4e
    3f94:	00db      	lsls	r3, r3, #3
    3f96:	4413      	add	r3, r2
    3f98:	685b      	ldr	r3, [r3, #4]
    3f9a:	2b12      	cmp	r3, #18
    3f9c:	d109      	bne.n	3fb2 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3f9e:	9a01      	ldr	r2, [sp, #4]
    3fa0:	9b02      	ldr	r3, [sp, #8]
    3fa2:	334e      	adds	r3, #78	; 0x4e
    3fa4:	00db      	lsls	r3, r3, #3
    3fa6:	4413      	add	r3, r2
    3fa8:	891b      	ldrh	r3, [r3, #8]
    3faa:	005b      	lsls	r3, r3, #1
    3fac:	9a03      	ldr	r2, [sp, #12]
    3fae:	4313      	orrs	r3, r2
    3fb0:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    3fb2:	9a01      	ldr	r2, [sp, #4]
    3fb4:	9b02      	ldr	r3, [sp, #8]
    3fb6:	334e      	adds	r3, #78	; 0x4e
    3fb8:	00db      	lsls	r3, r3, #3
    3fba:	4413      	add	r3, r2
    3fbc:	685b      	ldr	r3, [r3, #4]
    3fbe:	2b13      	cmp	r3, #19
    3fc0:	d109      	bne.n	3fd6 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3fc2:	9a01      	ldr	r2, [sp, #4]
    3fc4:	9b02      	ldr	r3, [sp, #8]
    3fc6:	334e      	adds	r3, #78	; 0x4e
    3fc8:	00db      	lsls	r3, r3, #3
    3fca:	4413      	add	r3, r2
    3fcc:	891b      	ldrh	r3, [r3, #8]
    3fce:	461a      	mov	r2, r3
    3fd0:	9b03      	ldr	r3, [sp, #12]
    3fd2:	4313      	orrs	r3, r2
    3fd4:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3fd6:	9b02      	ldr	r3, [sp, #8]
    3fd8:	3301      	adds	r3, #1
    3fda:	9302      	str	r3, [sp, #8]
    3fdc:	9b01      	ldr	r3, [sp, #4]
    3fde:	7c1b      	ldrb	r3, [r3, #16]
    3fe0:	461a      	mov	r2, r3
    3fe2:	9b02      	ldr	r3, [sp, #8]
    3fe4:	4293      	cmp	r3, r2
    3fe6:	d3d2      	bcc.n	3f8e <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    3fe8:	4a04      	ldr	r2, [pc, #16]	; (3ffc <SetSimLpoclksRegister_TrustedCall+0xe0>)
    3fea:	9b03      	ldr	r3, [sp, #12]
    3fec:	6113      	str	r3, [r2, #16]
}
    3fee:	bf00      	nop
    3ff0:	b004      	add	sp, #16
    3ff2:	4770      	bx	lr
    3ff4:	0000e264 	.word	0x0000e264
    3ff8:	0000e31c 	.word	0x0000e31c
    3ffc:	40048000 	.word	0x40048000

00004000 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4000:	b500      	push	{lr}
    4002:	b089      	sub	sp, #36	; 0x24
    4004:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4006:	2300      	movs	r3, #0
    4008:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    400c:	4a21      	ldr	r2, [pc, #132]	; (4094 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    400e:	9b01      	ldr	r3, [sp, #4]
    4010:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4012:	4b21      	ldr	r3, [pc, #132]	; (4098 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4014:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4018:	f003 0301 	and.w	r3, r3, #1
    401c:	2b00      	cmp	r3, #0
    401e:	d12e      	bne.n	407e <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4020:	4b1e      	ldr	r3, [pc, #120]	; (409c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4022:	2200      	movs	r2, #0
    4024:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4026:	f7ff ff69 	bl	3efc <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    402a:	aa03      	add	r2, sp, #12
    402c:	a904      	add	r1, sp, #16
    402e:	a805      	add	r0, sp, #20
    4030:	f24c 3350 	movw	r3, #50000	; 0xc350
    4034:	f7fe f8ae 	bl	2194 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4038:	4b17      	ldr	r3, [pc, #92]	; (4098 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    403a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    403e:	0e1b      	lsrs	r3, r3, #24
    4040:	f003 0301 	and.w	r3, r3, #1
    4044:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4046:	9a03      	ldr	r2, [sp, #12]
    4048:	a904      	add	r1, sp, #16
    404a:	ab05      	add	r3, sp, #20
    404c:	4618      	mov	r0, r3
    404e:	f7fe f8bb 	bl	21c8 <Clock_Ip_TimeoutExpired>
    4052:	4603      	mov	r3, r0
    4054:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4058:	9b06      	ldr	r3, [sp, #24]
    405a:	2b00      	cmp	r3, #0
    405c:	d106      	bne.n	406c <Clock_Ip_SpecificPlatformInitClock+0x6c>
    405e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4062:	f083 0301 	eor.w	r3, r3, #1
    4066:	b2db      	uxtb	r3, r3
    4068:	2b00      	cmp	r3, #0
    406a:	d1e5      	bne.n	4038 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    406c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4070:	2b00      	cmp	r3, #0
    4072:	d007      	beq.n	4084 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4074:	2105      	movs	r1, #5
    4076:	2001      	movs	r0, #1
    4078:	f7fe f87c 	bl	2174 <Clock_Ip_ReportClockErrors>
    407c:	e002      	b.n	4084 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    407e:	4b07      	ldr	r3, [pc, #28]	; (409c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4080:	2201      	movs	r2, #1
    4082:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4084:	9801      	ldr	r0, [sp, #4]
    4086:	f7ff ff49 	bl	3f1c <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    408a:	bf00      	nop
    408c:	b009      	add	sp, #36	; 0x24
    408e:	f85d fb04 	ldr.w	pc, [sp], #4
    4092:	bf00      	nop
    4094:	1fff8b9c 	.word	0x1fff8b9c
    4098:	40064000 	.word	0x40064000
    409c:	1fff8b20 	.word	0x1fff8b20

000040a0 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    40a0:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    40a2:	2300      	movs	r3, #0
    40a4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    40a6:	4b29      	ldr	r3, [pc, #164]	; (414c <getFircConfig+0xac>)
    40a8:	681b      	ldr	r3, [r3, #0]
    40aa:	2b00      	cmp	r3, #0
    40ac:	d024      	beq.n	40f8 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    40ae:	2300      	movs	r3, #0
    40b0:	9301      	str	r3, [sp, #4]
    40b2:	e01a      	b.n	40ea <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    40b4:	4b25      	ldr	r3, [pc, #148]	; (414c <getFircConfig+0xac>)
    40b6:	6819      	ldr	r1, [r3, #0]
    40b8:	9a01      	ldr	r2, [sp, #4]
    40ba:	4613      	mov	r3, r2
    40bc:	005b      	lsls	r3, r3, #1
    40be:	4413      	add	r3, r2
    40c0:	009b      	lsls	r3, r3, #2
    40c2:	440b      	add	r3, r1
    40c4:	3314      	adds	r3, #20
    40c6:	681b      	ldr	r3, [r3, #0]
    40c8:	2b05      	cmp	r3, #5
    40ca:	d10b      	bne.n	40e4 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    40cc:	4b1f      	ldr	r3, [pc, #124]	; (414c <getFircConfig+0xac>)
    40ce:	6819      	ldr	r1, [r3, #0]
    40d0:	9a01      	ldr	r2, [sp, #4]
    40d2:	4613      	mov	r3, r2
    40d4:	005b      	lsls	r3, r3, #1
    40d6:	4413      	add	r3, r2
    40d8:	009b      	lsls	r3, r3, #2
    40da:	3310      	adds	r3, #16
    40dc:	440b      	add	r3, r1
    40de:	3304      	adds	r3, #4
    40e0:	9300      	str	r3, [sp, #0]
                break;
    40e2:	e009      	b.n	40f8 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    40e4:	9b01      	ldr	r3, [sp, #4]
    40e6:	3301      	adds	r3, #1
    40e8:	9301      	str	r3, [sp, #4]
    40ea:	4b18      	ldr	r3, [pc, #96]	; (414c <getFircConfig+0xac>)
    40ec:	681b      	ldr	r3, [r3, #0]
    40ee:	7a1b      	ldrb	r3, [r3, #8]
    40f0:	461a      	mov	r2, r3
    40f2:	9b01      	ldr	r3, [sp, #4]
    40f4:	4293      	cmp	r3, r2
    40f6:	d3dd      	bcc.n	40b4 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    40f8:	9b00      	ldr	r3, [sp, #0]
    40fa:	2b00      	cmp	r3, #0
    40fc:	d121      	bne.n	4142 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    40fe:	4b14      	ldr	r3, [pc, #80]	; (4150 <getFircConfig+0xb0>)
    4100:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4102:	4b13      	ldr	r3, [pc, #76]	; (4150 <getFircConfig+0xb0>)
    4104:	2205      	movs	r2, #5
    4106:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4108:	4b12      	ldr	r3, [pc, #72]	; (4154 <getFircConfig+0xb4>)
    410a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    410e:	b29b      	uxth	r3, r3
    4110:	f003 0301 	and.w	r3, r3, #1
    4114:	b29a      	uxth	r2, r3
    4116:	4b0e      	ldr	r3, [pc, #56]	; (4150 <getFircConfig+0xb0>)
    4118:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    411a:	4b0e      	ldr	r3, [pc, #56]	; (4154 <getFircConfig+0xb4>)
    411c:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4120:	b2db      	uxtb	r3, r3
    4122:	f003 0303 	and.w	r3, r3, #3
    4126:	b2da      	uxtb	r2, r3
    4128:	4b09      	ldr	r3, [pc, #36]	; (4150 <getFircConfig+0xb0>)
    412a:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    412c:	4b09      	ldr	r3, [pc, #36]	; (4154 <getFircConfig+0xb4>)
    412e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4132:	b2db      	uxtb	r3, r3
    4134:	10db      	asrs	r3, r3, #3
    4136:	b2db      	uxtb	r3, r3
    4138:	f003 0301 	and.w	r3, r3, #1
    413c:	b2da      	uxtb	r2, r3
    413e:	4b04      	ldr	r3, [pc, #16]	; (4150 <getFircConfig+0xb0>)
    4140:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4142:	9b00      	ldr	r3, [sp, #0]
}
    4144:	4618      	mov	r0, r3
    4146:	b002      	add	sp, #8
    4148:	4770      	bx	lr
    414a:	bf00      	nop
    414c:	1fff8b9c 	.word	0x1fff8b9c
    4150:	1fff8c08 	.word	0x1fff8c08
    4154:	40064000 	.word	0x40064000

00004158 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4158:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    415a:	2300      	movs	r3, #0
    415c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    415e:	4b20      	ldr	r3, [pc, #128]	; (41e0 <getSoscConfig+0x88>)
    4160:	681b      	ldr	r3, [r3, #0]
    4162:	2b00      	cmp	r3, #0
    4164:	d024      	beq.n	41b0 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4166:	2300      	movs	r3, #0
    4168:	9301      	str	r3, [sp, #4]
    416a:	e01a      	b.n	41a2 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    416c:	4b1c      	ldr	r3, [pc, #112]	; (41e0 <getSoscConfig+0x88>)
    416e:	6819      	ldr	r1, [r3, #0]
    4170:	9a01      	ldr	r2, [sp, #4]
    4172:	4613      	mov	r3, r2
    4174:	009b      	lsls	r3, r3, #2
    4176:	4413      	add	r3, r2
    4178:	009b      	lsls	r3, r3, #2
    417a:	440b      	add	r3, r1
    417c:	332c      	adds	r3, #44	; 0x2c
    417e:	681b      	ldr	r3, [r3, #0]
    4180:	2b08      	cmp	r3, #8
    4182:	d10b      	bne.n	419c <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4184:	4b16      	ldr	r3, [pc, #88]	; (41e0 <getSoscConfig+0x88>)
    4186:	6819      	ldr	r1, [r3, #0]
    4188:	9a01      	ldr	r2, [sp, #4]
    418a:	4613      	mov	r3, r2
    418c:	009b      	lsls	r3, r3, #2
    418e:	4413      	add	r3, r2
    4190:	009b      	lsls	r3, r3, #2
    4192:	3328      	adds	r3, #40	; 0x28
    4194:	440b      	add	r3, r1
    4196:	3304      	adds	r3, #4
    4198:	9300      	str	r3, [sp, #0]
                break;
    419a:	e009      	b.n	41b0 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    419c:	9b01      	ldr	r3, [sp, #4]
    419e:	3301      	adds	r3, #1
    41a0:	9301      	str	r3, [sp, #4]
    41a2:	4b0f      	ldr	r3, [pc, #60]	; (41e0 <getSoscConfig+0x88>)
    41a4:	681b      	ldr	r3, [r3, #0]
    41a6:	7a5b      	ldrb	r3, [r3, #9]
    41a8:	461a      	mov	r2, r3
    41aa:	9b01      	ldr	r3, [sp, #4]
    41ac:	4293      	cmp	r3, r2
    41ae:	d3dd      	bcc.n	416c <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    41b0:	9b00      	ldr	r3, [sp, #0]
    41b2:	2b00      	cmp	r3, #0
    41b4:	d110      	bne.n	41d8 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    41b6:	4b0b      	ldr	r3, [pc, #44]	; (41e4 <getSoscConfig+0x8c>)
    41b8:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    41ba:	4b0a      	ldr	r3, [pc, #40]	; (41e4 <getSoscConfig+0x8c>)
    41bc:	2208      	movs	r2, #8
    41be:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    41c0:	4b09      	ldr	r3, [pc, #36]	; (41e8 <getSoscConfig+0x90>)
    41c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    41c6:	b29b      	uxth	r3, r3
    41c8:	f003 0301 	and.w	r3, r3, #1
    41cc:	b29a      	uxth	r2, r3
    41ce:	4b05      	ldr	r3, [pc, #20]	; (41e4 <getSoscConfig+0x8c>)
    41d0:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    41d2:	4b04      	ldr	r3, [pc, #16]	; (41e4 <getSoscConfig+0x8c>)
    41d4:	4a05      	ldr	r2, [pc, #20]	; (41ec <getSoscConfig+0x94>)
    41d6:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    41d8:	9b00      	ldr	r3, [sp, #0]
}
    41da:	4618      	mov	r0, r3
    41dc:	b002      	add	sp, #8
    41de:	4770      	bx	lr
    41e0:	1fff8b9c 	.word	0x1fff8b9c
    41e4:	1fff8c14 	.word	0x1fff8c14
    41e8:	40064000 	.word	0x40064000
    41ec:	02625a00 	.word	0x02625a00

000041f0 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    41f0:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    41f2:	2300      	movs	r3, #0
    41f4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    41f6:	4b28      	ldr	r3, [pc, #160]	; (4298 <getSpllConfig+0xa8>)
    41f8:	681b      	ldr	r3, [r3, #0]
    41fa:	2b00      	cmp	r3, #0
    41fc:	d023      	beq.n	4246 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    41fe:	2300      	movs	r3, #0
    4200:	9301      	str	r3, [sp, #4]
    4202:	e019      	b.n	4238 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4204:	4b24      	ldr	r3, [pc, #144]	; (4298 <getSpllConfig+0xa8>)
    4206:	6819      	ldr	r1, [r3, #0]
    4208:	9a01      	ldr	r2, [sp, #4]
    420a:	4613      	mov	r3, r2
    420c:	009b      	lsls	r3, r3, #2
    420e:	4413      	add	r3, r2
    4210:	00db      	lsls	r3, r3, #3
    4212:	440b      	add	r3, r1
    4214:	3340      	adds	r3, #64	; 0x40
    4216:	681b      	ldr	r3, [r3, #0]
    4218:	2b09      	cmp	r3, #9
    421a:	d10a      	bne.n	4232 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    421c:	4b1e      	ldr	r3, [pc, #120]	; (4298 <getSpllConfig+0xa8>)
    421e:	6819      	ldr	r1, [r3, #0]
    4220:	9a01      	ldr	r2, [sp, #4]
    4222:	4613      	mov	r3, r2
    4224:	009b      	lsls	r3, r3, #2
    4226:	4413      	add	r3, r2
    4228:	00db      	lsls	r3, r3, #3
    422a:	3340      	adds	r3, #64	; 0x40
    422c:	440b      	add	r3, r1
    422e:	9300      	str	r3, [sp, #0]
                break;
    4230:	e009      	b.n	4246 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4232:	9b01      	ldr	r3, [sp, #4]
    4234:	3301      	adds	r3, #1
    4236:	9301      	str	r3, [sp, #4]
    4238:	4b17      	ldr	r3, [pc, #92]	; (4298 <getSpllConfig+0xa8>)
    423a:	681b      	ldr	r3, [r3, #0]
    423c:	7a9b      	ldrb	r3, [r3, #10]
    423e:	461a      	mov	r2, r3
    4240:	9b01      	ldr	r3, [sp, #4]
    4242:	4293      	cmp	r3, r2
    4244:	d3de      	bcc.n	4204 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4246:	9b00      	ldr	r3, [sp, #0]
    4248:	2b00      	cmp	r3, #0
    424a:	d121      	bne.n	4290 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    424c:	4b13      	ldr	r3, [pc, #76]	; (429c <getSpllConfig+0xac>)
    424e:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4250:	4b12      	ldr	r3, [pc, #72]	; (429c <getSpllConfig+0xac>)
    4252:	2209      	movs	r2, #9
    4254:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4256:	4b12      	ldr	r3, [pc, #72]	; (42a0 <getSpllConfig+0xb0>)
    4258:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    425c:	b29b      	uxth	r3, r3
    425e:	f003 0301 	and.w	r3, r3, #1
    4262:	b29a      	uxth	r2, r3
    4264:	4b0d      	ldr	r3, [pc, #52]	; (429c <getSpllConfig+0xac>)
    4266:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4268:	4b0d      	ldr	r3, [pc, #52]	; (42a0 <getSpllConfig+0xb0>)
    426a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    426e:	0a1b      	lsrs	r3, r3, #8
    4270:	b2db      	uxtb	r3, r3
    4272:	f003 0307 	and.w	r3, r3, #7
    4276:	b2da      	uxtb	r2, r3
    4278:	4b08      	ldr	r3, [pc, #32]	; (429c <getSpllConfig+0xac>)
    427a:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    427c:	4b08      	ldr	r3, [pc, #32]	; (42a0 <getSpllConfig+0xb0>)
    427e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4282:	0c1b      	lsrs	r3, r3, #16
    4284:	b2db      	uxtb	r3, r3
    4286:	f003 031f 	and.w	r3, r3, #31
    428a:	b2da      	uxtb	r2, r3
    428c:	4b03      	ldr	r3, [pc, #12]	; (429c <getSpllConfig+0xac>)
    428e:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4290:	9b00      	ldr	r3, [sp, #0]
}
    4292:	4618      	mov	r0, r3
    4294:	b002      	add	sp, #8
    4296:	4770      	bx	lr
    4298:	1fff8b9c 	.word	0x1fff8b9c
    429c:	1fff8c28 	.word	0x1fff8c28
    42a0:	40064000 	.word	0x40064000

000042a4 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    42a4:	b086      	sub	sp, #24
    42a6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    42a8:	2300      	movs	r3, #0
    42aa:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    42ac:	9b01      	ldr	r3, [sp, #4]
    42ae:	2b1b      	cmp	r3, #27
    42b0:	d00f      	beq.n	42d2 <getSelectorConfig+0x2e>
    42b2:	9b01      	ldr	r3, [sp, #4]
    42b4:	2b1b      	cmp	r3, #27
    42b6:	d80f      	bhi.n	42d8 <getSelectorConfig+0x34>
    42b8:	9b01      	ldr	r3, [sp, #4]
    42ba:	2b19      	cmp	r3, #25
    42bc:	d003      	beq.n	42c6 <getSelectorConfig+0x22>
    42be:	9b01      	ldr	r3, [sp, #4]
    42c0:	2b1a      	cmp	r3, #26
    42c2:	d003      	beq.n	42cc <getSelectorConfig+0x28>
    42c4:	e008      	b.n	42d8 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    42c6:	2300      	movs	r3, #0
    42c8:	9304      	str	r3, [sp, #16]
            break;
    42ca:	e008      	b.n	42de <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    42cc:	2301      	movs	r3, #1
    42ce:	9304      	str	r3, [sp, #16]
            break;
    42d0:	e005      	b.n	42de <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    42d2:	2302      	movs	r3, #2
    42d4:	9304      	str	r3, [sp, #16]
            break;
    42d6:	e002      	b.n	42de <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    42d8:	2300      	movs	r3, #0
    42da:	9304      	str	r3, [sp, #16]
            break;
    42dc:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    42de:	4b36      	ldr	r3, [pc, #216]	; (43b8 <getSelectorConfig+0x114>)
    42e0:	681b      	ldr	r3, [r3, #0]
    42e2:	2b00      	cmp	r3, #0
    42e4:	d01d      	beq.n	4322 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    42e6:	2300      	movs	r3, #0
    42e8:	9303      	str	r3, [sp, #12]
    42ea:	e013      	b.n	4314 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    42ec:	4b32      	ldr	r3, [pc, #200]	; (43b8 <getSelectorConfig+0x114>)
    42ee:	681b      	ldr	r3, [r3, #0]
    42f0:	9a03      	ldr	r2, [sp, #12]
    42f2:	320d      	adds	r2, #13
    42f4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    42f8:	9a01      	ldr	r2, [sp, #4]
    42fa:	429a      	cmp	r2, r3
    42fc:	d107      	bne.n	430e <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    42fe:	4b2e      	ldr	r3, [pc, #184]	; (43b8 <getSelectorConfig+0x114>)
    4300:	681a      	ldr	r2, [r3, #0]
    4302:	9b03      	ldr	r3, [sp, #12]
    4304:	330d      	adds	r3, #13
    4306:	00db      	lsls	r3, r3, #3
    4308:	4413      	add	r3, r2
    430a:	9305      	str	r3, [sp, #20]
                break;
    430c:	e009      	b.n	4322 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    430e:	9b03      	ldr	r3, [sp, #12]
    4310:	3301      	adds	r3, #1
    4312:	9303      	str	r3, [sp, #12]
    4314:	4b28      	ldr	r3, [pc, #160]	; (43b8 <getSelectorConfig+0x114>)
    4316:	681b      	ldr	r3, [r3, #0]
    4318:	7adb      	ldrb	r3, [r3, #11]
    431a:	461a      	mov	r2, r3
    431c:	9b03      	ldr	r3, [sp, #12]
    431e:	4293      	cmp	r3, r2
    4320:	d3e4      	bcc.n	42ec <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4322:	9b05      	ldr	r3, [sp, #20]
    4324:	2b00      	cmp	r3, #0
    4326:	d140      	bne.n	43aa <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4328:	9b04      	ldr	r3, [sp, #16]
    432a:	00db      	lsls	r3, r3, #3
    432c:	4a23      	ldr	r2, [pc, #140]	; (43bc <getSelectorConfig+0x118>)
    432e:	4413      	add	r3, r2
    4330:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4332:	4922      	ldr	r1, [pc, #136]	; (43bc <getSelectorConfig+0x118>)
    4334:	9b04      	ldr	r3, [sp, #16]
    4336:	9a01      	ldr	r2, [sp, #4]
    4338:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    433c:	9b01      	ldr	r3, [sp, #4]
    433e:	2b1b      	cmp	r3, #27
    4340:	d025      	beq.n	438e <getSelectorConfig+0xea>
    4342:	9b01      	ldr	r3, [sp, #4]
    4344:	2b1b      	cmp	r3, #27
    4346:	d832      	bhi.n	43ae <getSelectorConfig+0x10a>
    4348:	9b01      	ldr	r3, [sp, #4]
    434a:	2b19      	cmp	r3, #25
    434c:	d003      	beq.n	4356 <getSelectorConfig+0xb2>
    434e:	9b01      	ldr	r3, [sp, #4]
    4350:	2b1a      	cmp	r3, #26
    4352:	d00e      	beq.n	4372 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4354:	e02b      	b.n	43ae <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4356:	4b1a      	ldr	r3, [pc, #104]	; (43c0 <getSelectorConfig+0x11c>)
    4358:	695b      	ldr	r3, [r3, #20]
    435a:	0e1b      	lsrs	r3, r3, #24
    435c:	f003 030f 	and.w	r3, r3, #15
    4360:	4a18      	ldr	r2, [pc, #96]	; (43c4 <getSelectorConfig+0x120>)
    4362:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4366:	4915      	ldr	r1, [pc, #84]	; (43bc <getSelectorConfig+0x118>)
    4368:	9b04      	ldr	r3, [sp, #16]
    436a:	00db      	lsls	r3, r3, #3
    436c:	440b      	add	r3, r1
    436e:	605a      	str	r2, [r3, #4]
                break;
    4370:	e01e      	b.n	43b0 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4372:	4b13      	ldr	r3, [pc, #76]	; (43c0 <getSelectorConfig+0x11c>)
    4374:	699b      	ldr	r3, [r3, #24]
    4376:	0e1b      	lsrs	r3, r3, #24
    4378:	f003 030f 	and.w	r3, r3, #15
    437c:	4a11      	ldr	r2, [pc, #68]	; (43c4 <getSelectorConfig+0x120>)
    437e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4382:	490e      	ldr	r1, [pc, #56]	; (43bc <getSelectorConfig+0x118>)
    4384:	9b04      	ldr	r3, [sp, #16]
    4386:	00db      	lsls	r3, r3, #3
    4388:	440b      	add	r3, r1
    438a:	605a      	str	r2, [r3, #4]
                break;
    438c:	e010      	b.n	43b0 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    438e:	4b0c      	ldr	r3, [pc, #48]	; (43c0 <getSelectorConfig+0x11c>)
    4390:	69db      	ldr	r3, [r3, #28]
    4392:	0e1b      	lsrs	r3, r3, #24
    4394:	f003 030f 	and.w	r3, r3, #15
    4398:	4a0a      	ldr	r2, [pc, #40]	; (43c4 <getSelectorConfig+0x120>)
    439a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    439e:	4907      	ldr	r1, [pc, #28]	; (43bc <getSelectorConfig+0x118>)
    43a0:	9b04      	ldr	r3, [sp, #16]
    43a2:	00db      	lsls	r3, r3, #3
    43a4:	440b      	add	r3, r1
    43a6:	605a      	str	r2, [r3, #4]
                break;
    43a8:	e002      	b.n	43b0 <getSelectorConfig+0x10c>
        }
    }
    43aa:	bf00      	nop
    43ac:	e000      	b.n	43b0 <getSelectorConfig+0x10c>
                break;
    43ae:	bf00      	nop

    return ReturnValue;
    43b0:	9b05      	ldr	r3, [sp, #20]
}
    43b2:	4618      	mov	r0, r3
    43b4:	b006      	add	sp, #24
    43b6:	4770      	bx	lr
    43b8:	1fff8b9c 	.word	0x1fff8b9c
    43bc:	1fff8c50 	.word	0x1fff8c50
    43c0:	40064000 	.word	0x40064000
    43c4:	0000e5e4 	.word	0x0000e5e4

000043c8 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    43c8:	b086      	sub	sp, #24
    43ca:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    43cc:	2300      	movs	r3, #0
    43ce:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    43d0:	2300      	movs	r3, #0
    43d2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    43d4:	9b01      	ldr	r3, [sp, #4]
    43d6:	2b1f      	cmp	r3, #31
    43d8:	d00f      	beq.n	43fa <getCoreDividerConfig+0x32>
    43da:	9b01      	ldr	r3, [sp, #4]
    43dc:	2b1f      	cmp	r3, #31
    43de:	d80f      	bhi.n	4400 <getCoreDividerConfig+0x38>
    43e0:	9b01      	ldr	r3, [sp, #4]
    43e2:	2b1d      	cmp	r3, #29
    43e4:	d003      	beq.n	43ee <getCoreDividerConfig+0x26>
    43e6:	9b01      	ldr	r3, [sp, #4]
    43e8:	2b1e      	cmp	r3, #30
    43ea:	d003      	beq.n	43f4 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    43ec:	e008      	b.n	4400 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    43ee:	2300      	movs	r3, #0
    43f0:	9304      	str	r3, [sp, #16]
            break;
    43f2:	e006      	b.n	4402 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    43f4:	2301      	movs	r3, #1
    43f6:	9304      	str	r3, [sp, #16]
            break;
    43f8:	e003      	b.n	4402 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    43fa:	2302      	movs	r3, #2
    43fc:	9304      	str	r3, [sp, #16]
            break;
    43fe:	e000      	b.n	4402 <getCoreDividerConfig+0x3a>
                break;
    4400:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4402:	4b41      	ldr	r3, [pc, #260]	; (4508 <getCoreDividerConfig+0x140>)
    4404:	681b      	ldr	r3, [r3, #0]
    4406:	2b00      	cmp	r3, #0
    4408:	d026      	beq.n	4458 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    440a:	2300      	movs	r3, #0
    440c:	9303      	str	r3, [sp, #12]
    440e:	e01c      	b.n	444a <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4410:	4b3d      	ldr	r3, [pc, #244]	; (4508 <getCoreDividerConfig+0x140>)
    4412:	6819      	ldr	r1, [r3, #0]
    4414:	9a03      	ldr	r2, [sp, #12]
    4416:	4613      	mov	r3, r2
    4418:	005b      	lsls	r3, r3, #1
    441a:	4413      	add	r3, r2
    441c:	009b      	lsls	r3, r3, #2
    441e:	440b      	add	r3, r1
    4420:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4424:	681b      	ldr	r3, [r3, #0]
    4426:	9a01      	ldr	r2, [sp, #4]
    4428:	429a      	cmp	r2, r3
    442a:	d10b      	bne.n	4444 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    442c:	4b36      	ldr	r3, [pc, #216]	; (4508 <getCoreDividerConfig+0x140>)
    442e:	6819      	ldr	r1, [r3, #0]
    4430:	9a03      	ldr	r2, [sp, #12]
    4432:	4613      	mov	r3, r2
    4434:	005b      	lsls	r3, r3, #1
    4436:	4413      	add	r3, r2
    4438:	009b      	lsls	r3, r3, #2
    443a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    443e:	440b      	add	r3, r1
    4440:	9305      	str	r3, [sp, #20]
                break;
    4442:	e009      	b.n	4458 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4444:	9b03      	ldr	r3, [sp, #12]
    4446:	3301      	adds	r3, #1
    4448:	9303      	str	r3, [sp, #12]
    444a:	4b2f      	ldr	r3, [pc, #188]	; (4508 <getCoreDividerConfig+0x140>)
    444c:	681b      	ldr	r3, [r3, #0]
    444e:	7b1b      	ldrb	r3, [r3, #12]
    4450:	461a      	mov	r2, r3
    4452:	9b03      	ldr	r3, [sp, #12]
    4454:	4293      	cmp	r3, r2
    4456:	d3db      	bcc.n	4410 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4458:	9b05      	ldr	r3, [sp, #20]
    445a:	2b00      	cmp	r3, #0
    445c:	d14d      	bne.n	44fa <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    445e:	9a04      	ldr	r2, [sp, #16]
    4460:	4613      	mov	r3, r2
    4462:	005b      	lsls	r3, r3, #1
    4464:	4413      	add	r3, r2
    4466:	009b      	lsls	r3, r3, #2
    4468:	4a28      	ldr	r2, [pc, #160]	; (450c <getCoreDividerConfig+0x144>)
    446a:	4413      	add	r3, r2
    446c:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    446e:	4927      	ldr	r1, [pc, #156]	; (450c <getCoreDividerConfig+0x144>)
    4470:	9a04      	ldr	r2, [sp, #16]
    4472:	4613      	mov	r3, r2
    4474:	005b      	lsls	r3, r3, #1
    4476:	4413      	add	r3, r2
    4478:	009b      	lsls	r3, r3, #2
    447a:	440b      	add	r3, r1
    447c:	9a01      	ldr	r2, [sp, #4]
    447e:	601a      	str	r2, [r3, #0]
        switch(Name)
    4480:	9b01      	ldr	r3, [sp, #4]
    4482:	2b1f      	cmp	r3, #31
    4484:	d029      	beq.n	44da <getCoreDividerConfig+0x112>
    4486:	9b01      	ldr	r3, [sp, #4]
    4488:	2b1f      	cmp	r3, #31
    448a:	d838      	bhi.n	44fe <getCoreDividerConfig+0x136>
    448c:	9b01      	ldr	r3, [sp, #4]
    448e:	2b1d      	cmp	r3, #29
    4490:	d003      	beq.n	449a <getCoreDividerConfig+0xd2>
    4492:	9b01      	ldr	r3, [sp, #4]
    4494:	2b1e      	cmp	r3, #30
    4496:	d010      	beq.n	44ba <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4498:	e031      	b.n	44fe <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    449a:	4b1d      	ldr	r3, [pc, #116]	; (4510 <getCoreDividerConfig+0x148>)
    449c:	695b      	ldr	r3, [r3, #20]
    449e:	0c1b      	lsrs	r3, r3, #16
    44a0:	f003 030f 	and.w	r3, r3, #15
    44a4:	1c59      	adds	r1, r3, #1
    44a6:	4819      	ldr	r0, [pc, #100]	; (450c <getCoreDividerConfig+0x144>)
    44a8:	9a04      	ldr	r2, [sp, #16]
    44aa:	4613      	mov	r3, r2
    44ac:	005b      	lsls	r3, r3, #1
    44ae:	4413      	add	r3, r2
    44b0:	009b      	lsls	r3, r3, #2
    44b2:	4403      	add	r3, r0
    44b4:	3304      	adds	r3, #4
    44b6:	6019      	str	r1, [r3, #0]
                break;
    44b8:	e022      	b.n	4500 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    44ba:	4b15      	ldr	r3, [pc, #84]	; (4510 <getCoreDividerConfig+0x148>)
    44bc:	699b      	ldr	r3, [r3, #24]
    44be:	0c1b      	lsrs	r3, r3, #16
    44c0:	f003 030f 	and.w	r3, r3, #15
    44c4:	1c59      	adds	r1, r3, #1
    44c6:	4811      	ldr	r0, [pc, #68]	; (450c <getCoreDividerConfig+0x144>)
    44c8:	9a04      	ldr	r2, [sp, #16]
    44ca:	4613      	mov	r3, r2
    44cc:	005b      	lsls	r3, r3, #1
    44ce:	4413      	add	r3, r2
    44d0:	009b      	lsls	r3, r3, #2
    44d2:	4403      	add	r3, r0
    44d4:	3304      	adds	r3, #4
    44d6:	6019      	str	r1, [r3, #0]
                break;
    44d8:	e012      	b.n	4500 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    44da:	4b0d      	ldr	r3, [pc, #52]	; (4510 <getCoreDividerConfig+0x148>)
    44dc:	69db      	ldr	r3, [r3, #28]
    44de:	0c1b      	lsrs	r3, r3, #16
    44e0:	f003 030f 	and.w	r3, r3, #15
    44e4:	1c59      	adds	r1, r3, #1
    44e6:	4809      	ldr	r0, [pc, #36]	; (450c <getCoreDividerConfig+0x144>)
    44e8:	9a04      	ldr	r2, [sp, #16]
    44ea:	4613      	mov	r3, r2
    44ec:	005b      	lsls	r3, r3, #1
    44ee:	4413      	add	r3, r2
    44f0:	009b      	lsls	r3, r3, #2
    44f2:	4403      	add	r3, r0
    44f4:	3304      	adds	r3, #4
    44f6:	6019      	str	r1, [r3, #0]
                break;
    44f8:	e002      	b.n	4500 <getCoreDividerConfig+0x138>
        }
    }
    44fa:	bf00      	nop
    44fc:	e000      	b.n	4500 <getCoreDividerConfig+0x138>
                break;
    44fe:	bf00      	nop

    return ReturnValue;
    4500:	9b05      	ldr	r3, [sp, #20]
}
    4502:	4618      	mov	r0, r3
    4504:	b006      	add	sp, #24
    4506:	4770      	bx	lr
    4508:	1fff8b9c 	.word	0x1fff8b9c
    450c:	1fff8c68 	.word	0x1fff8c68
    4510:	40064000 	.word	0x40064000

00004514 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4514:	b086      	sub	sp, #24
    4516:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4518:	2300      	movs	r3, #0
    451a:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    451c:	2300      	movs	r3, #0
    451e:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4520:	9b01      	ldr	r3, [sp, #4]
    4522:	2b23      	cmp	r3, #35	; 0x23
    4524:	d00f      	beq.n	4546 <getBusDividerConfig+0x32>
    4526:	9b01      	ldr	r3, [sp, #4]
    4528:	2b23      	cmp	r3, #35	; 0x23
    452a:	d80f      	bhi.n	454c <getBusDividerConfig+0x38>
    452c:	9b01      	ldr	r3, [sp, #4]
    452e:	2b21      	cmp	r3, #33	; 0x21
    4530:	d003      	beq.n	453a <getBusDividerConfig+0x26>
    4532:	9b01      	ldr	r3, [sp, #4]
    4534:	2b22      	cmp	r3, #34	; 0x22
    4536:	d003      	beq.n	4540 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4538:	e008      	b.n	454c <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    453a:	2300      	movs	r3, #0
    453c:	9304      	str	r3, [sp, #16]
            break;
    453e:	e006      	b.n	454e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4540:	2301      	movs	r3, #1
    4542:	9304      	str	r3, [sp, #16]
            break;
    4544:	e003      	b.n	454e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4546:	2302      	movs	r3, #2
    4548:	9304      	str	r3, [sp, #16]
            break;
    454a:	e000      	b.n	454e <getBusDividerConfig+0x3a>
                break;
    454c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    454e:	4b41      	ldr	r3, [pc, #260]	; (4654 <getBusDividerConfig+0x140>)
    4550:	681b      	ldr	r3, [r3, #0]
    4552:	2b00      	cmp	r3, #0
    4554:	d026      	beq.n	45a4 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4556:	2300      	movs	r3, #0
    4558:	9303      	str	r3, [sp, #12]
    455a:	e01c      	b.n	4596 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    455c:	4b3d      	ldr	r3, [pc, #244]	; (4654 <getBusDividerConfig+0x140>)
    455e:	6819      	ldr	r1, [r3, #0]
    4560:	9a03      	ldr	r2, [sp, #12]
    4562:	4613      	mov	r3, r2
    4564:	005b      	lsls	r3, r3, #1
    4566:	4413      	add	r3, r2
    4568:	009b      	lsls	r3, r3, #2
    456a:	440b      	add	r3, r1
    456c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	9a01      	ldr	r2, [sp, #4]
    4574:	429a      	cmp	r2, r3
    4576:	d10b      	bne.n	4590 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4578:	4b36      	ldr	r3, [pc, #216]	; (4654 <getBusDividerConfig+0x140>)
    457a:	6819      	ldr	r1, [r3, #0]
    457c:	9a03      	ldr	r2, [sp, #12]
    457e:	4613      	mov	r3, r2
    4580:	005b      	lsls	r3, r3, #1
    4582:	4413      	add	r3, r2
    4584:	009b      	lsls	r3, r3, #2
    4586:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    458a:	440b      	add	r3, r1
    458c:	9305      	str	r3, [sp, #20]
                break;
    458e:	e009      	b.n	45a4 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4590:	9b03      	ldr	r3, [sp, #12]
    4592:	3301      	adds	r3, #1
    4594:	9303      	str	r3, [sp, #12]
    4596:	4b2f      	ldr	r3, [pc, #188]	; (4654 <getBusDividerConfig+0x140>)
    4598:	681b      	ldr	r3, [r3, #0]
    459a:	7b1b      	ldrb	r3, [r3, #12]
    459c:	461a      	mov	r2, r3
    459e:	9b03      	ldr	r3, [sp, #12]
    45a0:	4293      	cmp	r3, r2
    45a2:	d3db      	bcc.n	455c <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    45a4:	9b05      	ldr	r3, [sp, #20]
    45a6:	2b00      	cmp	r3, #0
    45a8:	d14d      	bne.n	4646 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    45aa:	9a04      	ldr	r2, [sp, #16]
    45ac:	4613      	mov	r3, r2
    45ae:	005b      	lsls	r3, r3, #1
    45b0:	4413      	add	r3, r2
    45b2:	009b      	lsls	r3, r3, #2
    45b4:	4a28      	ldr	r2, [pc, #160]	; (4658 <getBusDividerConfig+0x144>)
    45b6:	4413      	add	r3, r2
    45b8:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    45ba:	4927      	ldr	r1, [pc, #156]	; (4658 <getBusDividerConfig+0x144>)
    45bc:	9a04      	ldr	r2, [sp, #16]
    45be:	4613      	mov	r3, r2
    45c0:	005b      	lsls	r3, r3, #1
    45c2:	4413      	add	r3, r2
    45c4:	009b      	lsls	r3, r3, #2
    45c6:	440b      	add	r3, r1
    45c8:	9a01      	ldr	r2, [sp, #4]
    45ca:	601a      	str	r2, [r3, #0]
        switch(Name)
    45cc:	9b01      	ldr	r3, [sp, #4]
    45ce:	2b23      	cmp	r3, #35	; 0x23
    45d0:	d029      	beq.n	4626 <getBusDividerConfig+0x112>
    45d2:	9b01      	ldr	r3, [sp, #4]
    45d4:	2b23      	cmp	r3, #35	; 0x23
    45d6:	d838      	bhi.n	464a <getBusDividerConfig+0x136>
    45d8:	9b01      	ldr	r3, [sp, #4]
    45da:	2b21      	cmp	r3, #33	; 0x21
    45dc:	d003      	beq.n	45e6 <getBusDividerConfig+0xd2>
    45de:	9b01      	ldr	r3, [sp, #4]
    45e0:	2b22      	cmp	r3, #34	; 0x22
    45e2:	d010      	beq.n	4606 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    45e4:	e031      	b.n	464a <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    45e6:	4b1d      	ldr	r3, [pc, #116]	; (465c <getBusDividerConfig+0x148>)
    45e8:	695b      	ldr	r3, [r3, #20]
    45ea:	091b      	lsrs	r3, r3, #4
    45ec:	f003 030f 	and.w	r3, r3, #15
    45f0:	1c59      	adds	r1, r3, #1
    45f2:	4819      	ldr	r0, [pc, #100]	; (4658 <getBusDividerConfig+0x144>)
    45f4:	9a04      	ldr	r2, [sp, #16]
    45f6:	4613      	mov	r3, r2
    45f8:	005b      	lsls	r3, r3, #1
    45fa:	4413      	add	r3, r2
    45fc:	009b      	lsls	r3, r3, #2
    45fe:	4403      	add	r3, r0
    4600:	3304      	adds	r3, #4
    4602:	6019      	str	r1, [r3, #0]
                break;
    4604:	e022      	b.n	464c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    4606:	4b15      	ldr	r3, [pc, #84]	; (465c <getBusDividerConfig+0x148>)
    4608:	699b      	ldr	r3, [r3, #24]
    460a:	091b      	lsrs	r3, r3, #4
    460c:	f003 030f 	and.w	r3, r3, #15
    4610:	1c59      	adds	r1, r3, #1
    4612:	4811      	ldr	r0, [pc, #68]	; (4658 <getBusDividerConfig+0x144>)
    4614:	9a04      	ldr	r2, [sp, #16]
    4616:	4613      	mov	r3, r2
    4618:	005b      	lsls	r3, r3, #1
    461a:	4413      	add	r3, r2
    461c:	009b      	lsls	r3, r3, #2
    461e:	4403      	add	r3, r0
    4620:	3304      	adds	r3, #4
    4622:	6019      	str	r1, [r3, #0]
                break;
    4624:	e012      	b.n	464c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    4626:	4b0d      	ldr	r3, [pc, #52]	; (465c <getBusDividerConfig+0x148>)
    4628:	69db      	ldr	r3, [r3, #28]
    462a:	091b      	lsrs	r3, r3, #4
    462c:	f003 030f 	and.w	r3, r3, #15
    4630:	1c59      	adds	r1, r3, #1
    4632:	4809      	ldr	r0, [pc, #36]	; (4658 <getBusDividerConfig+0x144>)
    4634:	9a04      	ldr	r2, [sp, #16]
    4636:	4613      	mov	r3, r2
    4638:	005b      	lsls	r3, r3, #1
    463a:	4413      	add	r3, r2
    463c:	009b      	lsls	r3, r3, #2
    463e:	4403      	add	r3, r0
    4640:	3304      	adds	r3, #4
    4642:	6019      	str	r1, [r3, #0]
                break;
    4644:	e002      	b.n	464c <getBusDividerConfig+0x138>
        }
    }
    4646:	bf00      	nop
    4648:	e000      	b.n	464c <getBusDividerConfig+0x138>
                break;
    464a:	bf00      	nop

    return ReturnValue;
    464c:	9b05      	ldr	r3, [sp, #20]
}
    464e:	4618      	mov	r0, r3
    4650:	b006      	add	sp, #24
    4652:	4770      	bx	lr
    4654:	1fff8b9c 	.word	0x1fff8b9c
    4658:	1fff8c8c 	.word	0x1fff8c8c
    465c:	40064000 	.word	0x40064000

00004660 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4660:	b086      	sub	sp, #24
    4662:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4664:	2300      	movs	r3, #0
    4666:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4668:	2300      	movs	r3, #0
    466a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    466c:	9b01      	ldr	r3, [sp, #4]
    466e:	2b27      	cmp	r3, #39	; 0x27
    4670:	d00f      	beq.n	4692 <getSlowDividerConfig+0x32>
    4672:	9b01      	ldr	r3, [sp, #4]
    4674:	2b27      	cmp	r3, #39	; 0x27
    4676:	d80f      	bhi.n	4698 <getSlowDividerConfig+0x38>
    4678:	9b01      	ldr	r3, [sp, #4]
    467a:	2b25      	cmp	r3, #37	; 0x25
    467c:	d003      	beq.n	4686 <getSlowDividerConfig+0x26>
    467e:	9b01      	ldr	r3, [sp, #4]
    4680:	2b26      	cmp	r3, #38	; 0x26
    4682:	d003      	beq.n	468c <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4684:	e008      	b.n	4698 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4686:	2300      	movs	r3, #0
    4688:	9304      	str	r3, [sp, #16]
            break;
    468a:	e006      	b.n	469a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    468c:	2301      	movs	r3, #1
    468e:	9304      	str	r3, [sp, #16]
            break;
    4690:	e003      	b.n	469a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4692:	2302      	movs	r3, #2
    4694:	9304      	str	r3, [sp, #16]
            break;
    4696:	e000      	b.n	469a <getSlowDividerConfig+0x3a>
                break;
    4698:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    469a:	4b40      	ldr	r3, [pc, #256]	; (479c <getSlowDividerConfig+0x13c>)
    469c:	681b      	ldr	r3, [r3, #0]
    469e:	2b00      	cmp	r3, #0
    46a0:	d026      	beq.n	46f0 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    46a2:	2300      	movs	r3, #0
    46a4:	9303      	str	r3, [sp, #12]
    46a6:	e01c      	b.n	46e2 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    46a8:	4b3c      	ldr	r3, [pc, #240]	; (479c <getSlowDividerConfig+0x13c>)
    46aa:	6819      	ldr	r1, [r3, #0]
    46ac:	9a03      	ldr	r2, [sp, #12]
    46ae:	4613      	mov	r3, r2
    46b0:	005b      	lsls	r3, r3, #1
    46b2:	4413      	add	r3, r2
    46b4:	009b      	lsls	r3, r3, #2
    46b6:	440b      	add	r3, r1
    46b8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    46bc:	681b      	ldr	r3, [r3, #0]
    46be:	9a01      	ldr	r2, [sp, #4]
    46c0:	429a      	cmp	r2, r3
    46c2:	d10b      	bne.n	46dc <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    46c4:	4b35      	ldr	r3, [pc, #212]	; (479c <getSlowDividerConfig+0x13c>)
    46c6:	6819      	ldr	r1, [r3, #0]
    46c8:	9a03      	ldr	r2, [sp, #12]
    46ca:	4613      	mov	r3, r2
    46cc:	005b      	lsls	r3, r3, #1
    46ce:	4413      	add	r3, r2
    46d0:	009b      	lsls	r3, r3, #2
    46d2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    46d6:	440b      	add	r3, r1
    46d8:	9305      	str	r3, [sp, #20]
                break;
    46da:	e009      	b.n	46f0 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    46dc:	9b03      	ldr	r3, [sp, #12]
    46de:	3301      	adds	r3, #1
    46e0:	9303      	str	r3, [sp, #12]
    46e2:	4b2e      	ldr	r3, [pc, #184]	; (479c <getSlowDividerConfig+0x13c>)
    46e4:	681b      	ldr	r3, [r3, #0]
    46e6:	7b1b      	ldrb	r3, [r3, #12]
    46e8:	461a      	mov	r2, r3
    46ea:	9b03      	ldr	r3, [sp, #12]
    46ec:	4293      	cmp	r3, r2
    46ee:	d3db      	bcc.n	46a8 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    46f0:	9b05      	ldr	r3, [sp, #20]
    46f2:	2b00      	cmp	r3, #0
    46f4:	d14a      	bne.n	478c <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    46f6:	9a04      	ldr	r2, [sp, #16]
    46f8:	4613      	mov	r3, r2
    46fa:	005b      	lsls	r3, r3, #1
    46fc:	4413      	add	r3, r2
    46fe:	009b      	lsls	r3, r3, #2
    4700:	4a27      	ldr	r2, [pc, #156]	; (47a0 <getSlowDividerConfig+0x140>)
    4702:	4413      	add	r3, r2
    4704:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    4706:	4926      	ldr	r1, [pc, #152]	; (47a0 <getSlowDividerConfig+0x140>)
    4708:	9a04      	ldr	r2, [sp, #16]
    470a:	4613      	mov	r3, r2
    470c:	005b      	lsls	r3, r3, #1
    470e:	4413      	add	r3, r2
    4710:	009b      	lsls	r3, r3, #2
    4712:	440b      	add	r3, r1
    4714:	9a01      	ldr	r2, [sp, #4]
    4716:	601a      	str	r2, [r3, #0]
        switch(Name)
    4718:	9b01      	ldr	r3, [sp, #4]
    471a:	2b27      	cmp	r3, #39	; 0x27
    471c:	d027      	beq.n	476e <getSlowDividerConfig+0x10e>
    471e:	9b01      	ldr	r3, [sp, #4]
    4720:	2b27      	cmp	r3, #39	; 0x27
    4722:	d835      	bhi.n	4790 <getSlowDividerConfig+0x130>
    4724:	9b01      	ldr	r3, [sp, #4]
    4726:	2b25      	cmp	r3, #37	; 0x25
    4728:	d003      	beq.n	4732 <getSlowDividerConfig+0xd2>
    472a:	9b01      	ldr	r3, [sp, #4]
    472c:	2b26      	cmp	r3, #38	; 0x26
    472e:	d00f      	beq.n	4750 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4730:	e02e      	b.n	4790 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    4732:	4b1c      	ldr	r3, [pc, #112]	; (47a4 <getSlowDividerConfig+0x144>)
    4734:	695b      	ldr	r3, [r3, #20]
    4736:	f003 030f 	and.w	r3, r3, #15
    473a:	1c59      	adds	r1, r3, #1
    473c:	4818      	ldr	r0, [pc, #96]	; (47a0 <getSlowDividerConfig+0x140>)
    473e:	9a04      	ldr	r2, [sp, #16]
    4740:	4613      	mov	r3, r2
    4742:	005b      	lsls	r3, r3, #1
    4744:	4413      	add	r3, r2
    4746:	009b      	lsls	r3, r3, #2
    4748:	4403      	add	r3, r0
    474a:	3304      	adds	r3, #4
    474c:	6019      	str	r1, [r3, #0]
                break;
    474e:	e020      	b.n	4792 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    4750:	4b14      	ldr	r3, [pc, #80]	; (47a4 <getSlowDividerConfig+0x144>)
    4752:	699b      	ldr	r3, [r3, #24]
    4754:	f003 030f 	and.w	r3, r3, #15
    4758:	1c59      	adds	r1, r3, #1
    475a:	4811      	ldr	r0, [pc, #68]	; (47a0 <getSlowDividerConfig+0x140>)
    475c:	9a04      	ldr	r2, [sp, #16]
    475e:	4613      	mov	r3, r2
    4760:	005b      	lsls	r3, r3, #1
    4762:	4413      	add	r3, r2
    4764:	009b      	lsls	r3, r3, #2
    4766:	4403      	add	r3, r0
    4768:	3304      	adds	r3, #4
    476a:	6019      	str	r1, [r3, #0]
                break;
    476c:	e011      	b.n	4792 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    476e:	4b0d      	ldr	r3, [pc, #52]	; (47a4 <getSlowDividerConfig+0x144>)
    4770:	69db      	ldr	r3, [r3, #28]
    4772:	f003 030f 	and.w	r3, r3, #15
    4776:	1c59      	adds	r1, r3, #1
    4778:	4809      	ldr	r0, [pc, #36]	; (47a0 <getSlowDividerConfig+0x140>)
    477a:	9a04      	ldr	r2, [sp, #16]
    477c:	4613      	mov	r3, r2
    477e:	005b      	lsls	r3, r3, #1
    4780:	4413      	add	r3, r2
    4782:	009b      	lsls	r3, r3, #2
    4784:	4403      	add	r3, r0
    4786:	3304      	adds	r3, #4
    4788:	6019      	str	r1, [r3, #0]
                break;
    478a:	e002      	b.n	4792 <getSlowDividerConfig+0x132>
        }
    }
    478c:	bf00      	nop
    478e:	e000      	b.n	4792 <getSlowDividerConfig+0x132>
                break;
    4790:	bf00      	nop

    return ReturnValue;
    4792:	9b05      	ldr	r3, [sp, #20]
}
    4794:	4618      	mov	r0, r3
    4796:	b006      	add	sp, #24
    4798:	4770      	bx	lr
    479a:	bf00      	nop
    479c:	1fff8b9c 	.word	0x1fff8b9c
    47a0:	1fff8cb0 	.word	0x1fff8cb0
    47a4:	40064000 	.word	0x40064000

000047a8 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    47a8:	b500      	push	{lr}
    47aa:	b083      	sub	sp, #12
    47ac:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    47ae:	4b64      	ldr	r3, [pc, #400]	; (4940 <Clock_Ip_ClockInitializeObjects+0x198>)
    47b0:	781b      	ldrb	r3, [r3, #0]
    47b2:	f083 0301 	eor.w	r3, r3, #1
    47b6:	b2db      	uxtb	r3, r3
    47b8:	2b00      	cmp	r3, #0
    47ba:	d05b      	beq.n	4874 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    47bc:	4b60      	ldr	r3, [pc, #384]	; (4940 <Clock_Ip_ClockInitializeObjects+0x198>)
    47be:	2201      	movs	r2, #1
    47c0:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    47c2:	4b60      	ldr	r3, [pc, #384]	; (4944 <Clock_Ip_ClockInitializeObjects+0x19c>)
    47c4:	785b      	ldrb	r3, [r3, #1]
    47c6:	461a      	mov	r2, r3
    47c8:	4613      	mov	r3, r2
    47ca:	009b      	lsls	r3, r3, #2
    47cc:	4413      	add	r3, r2
    47ce:	009b      	lsls	r3, r3, #2
    47d0:	4a5d      	ldr	r2, [pc, #372]	; (4948 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    47d2:	4413      	add	r3, r2
    47d4:	4a5d      	ldr	r2, [pc, #372]	; (494c <Clock_Ip_ClockInitializeObjects+0x1a4>)
    47d6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    47d8:	4b5d      	ldr	r3, [pc, #372]	; (4950 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    47da:	785b      	ldrb	r3, [r3, #1]
    47dc:	461a      	mov	r2, r3
    47de:	4613      	mov	r3, r2
    47e0:	009b      	lsls	r3, r3, #2
    47e2:	4413      	add	r3, r2
    47e4:	009b      	lsls	r3, r3, #2
    47e6:	4a5b      	ldr	r2, [pc, #364]	; (4954 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    47e8:	4413      	add	r3, r2
    47ea:	4a5b      	ldr	r2, [pc, #364]	; (4958 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    47ec:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    47ee:	4b5b      	ldr	r3, [pc, #364]	; (495c <Clock_Ip_ClockInitializeObjects+0x1b4>)
    47f0:	791b      	ldrb	r3, [r3, #4]
    47f2:	461a      	mov	r2, r3
    47f4:	4613      	mov	r3, r2
    47f6:	005b      	lsls	r3, r3, #1
    47f8:	4413      	add	r3, r2
    47fa:	009b      	lsls	r3, r3, #2
    47fc:	4a58      	ldr	r2, [pc, #352]	; (4960 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    47fe:	4413      	add	r3, r2
    4800:	4a58      	ldr	r2, [pc, #352]	; (4964 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    4802:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    4804:	4b58      	ldr	r3, [pc, #352]	; (4968 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4806:	795b      	ldrb	r3, [r3, #5]
    4808:	00db      	lsls	r3, r3, #3
    480a:	4a58      	ldr	r2, [pc, #352]	; (496c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    480c:	4413      	add	r3, r2
    480e:	4a58      	ldr	r2, [pc, #352]	; (4970 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    4810:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    4812:	4b55      	ldr	r3, [pc, #340]	; (4968 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    4814:	79db      	ldrb	r3, [r3, #7]
    4816:	00db      	lsls	r3, r3, #3
    4818:	4a54      	ldr	r2, [pc, #336]	; (496c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    481a:	4413      	add	r3, r2
    481c:	4a55      	ldr	r2, [pc, #340]	; (4974 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    481e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    4820:	4b55      	ldr	r3, [pc, #340]	; (4978 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4822:	799b      	ldrb	r3, [r3, #6]
    4824:	009b      	lsls	r3, r3, #2
    4826:	4a55      	ldr	r2, [pc, #340]	; (497c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4828:	4413      	add	r3, r2
    482a:	4a55      	ldr	r2, [pc, #340]	; (4980 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    482c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    482e:	4b52      	ldr	r3, [pc, #328]	; (4978 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4830:	7a1b      	ldrb	r3, [r3, #8]
    4832:	009b      	lsls	r3, r3, #2
    4834:	4a51      	ldr	r2, [pc, #324]	; (497c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4836:	4413      	add	r3, r2
    4838:	4a52      	ldr	r2, [pc, #328]	; (4984 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    483a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    483c:	4b4e      	ldr	r3, [pc, #312]	; (4978 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    483e:	7a5b      	ldrb	r3, [r3, #9]
    4840:	009b      	lsls	r3, r3, #2
    4842:	4a4e      	ldr	r2, [pc, #312]	; (497c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4844:	4413      	add	r3, r2
    4846:	4a50      	ldr	r2, [pc, #320]	; (4988 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4848:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    484a:	4b4b      	ldr	r3, [pc, #300]	; (4978 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    484c:	7adb      	ldrb	r3, [r3, #11]
    484e:	009b      	lsls	r3, r3, #2
    4850:	4a4a      	ldr	r2, [pc, #296]	; (497c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4852:	4413      	add	r3, r2
    4854:	4a4d      	ldr	r2, [pc, #308]	; (498c <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4856:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4858:	4b47      	ldr	r3, [pc, #284]	; (4978 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    485a:	7b1b      	ldrb	r3, [r3, #12]
    485c:	009b      	lsls	r3, r3, #2
    485e:	4a47      	ldr	r2, [pc, #284]	; (497c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4860:	4413      	add	r3, r2
    4862:	4a4b      	ldr	r2, [pc, #300]	; (4990 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4864:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4866:	4b44      	ldr	r3, [pc, #272]	; (4978 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4868:	7b9b      	ldrb	r3, [r3, #14]
    486a:	009b      	lsls	r3, r3, #2
    486c:	4a43      	ldr	r2, [pc, #268]	; (497c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    486e:	4413      	add	r3, r2
    4870:	4a48      	ldr	r2, [pc, #288]	; (4994 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    4872:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4874:	4b48      	ldr	r3, [pc, #288]	; (4998 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4876:	781b      	ldrb	r3, [r3, #0]
    4878:	2b00      	cmp	r3, #0
    487a:	d002      	beq.n	4882 <Clock_Ip_ClockInitializeObjects+0xda>
    487c:	9b01      	ldr	r3, [sp, #4]
    487e:	2b00      	cmp	r3, #0
    4880:	d003      	beq.n	488a <Clock_Ip_ClockInitializeObjects+0xe2>
    4882:	4b46      	ldr	r3, [pc, #280]	; (499c <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4884:	781b      	ldrb	r3, [r3, #0]
    4886:	2b00      	cmp	r3, #0
    4888:	d056      	beq.n	4938 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    488a:	f7ff fc09 	bl	40a0 <getFircConfig>
    488e:	4603      	mov	r3, r0
    4890:	4a43      	ldr	r2, [pc, #268]	; (49a0 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    4892:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    4894:	f7ff fc60 	bl	4158 <getSoscConfig>
    4898:	4603      	mov	r3, r0
    489a:	4a42      	ldr	r2, [pc, #264]	; (49a4 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    489c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    489e:	f7ff fca7 	bl	41f0 <getSpllConfig>
    48a2:	4603      	mov	r3, r0
    48a4:	4a40      	ldr	r2, [pc, #256]	; (49a8 <Clock_Ip_ClockInitializeObjects+0x200>)
    48a6:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    48a8:	2019      	movs	r0, #25
    48aa:	f7ff fcfb 	bl	42a4 <getSelectorConfig>
    48ae:	4603      	mov	r3, r0
    48b0:	4a3e      	ldr	r2, [pc, #248]	; (49ac <Clock_Ip_ClockInitializeObjects+0x204>)
    48b2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    48b4:	201a      	movs	r0, #26
    48b6:	f7ff fcf5 	bl	42a4 <getSelectorConfig>
    48ba:	4603      	mov	r3, r0
    48bc:	4a3c      	ldr	r2, [pc, #240]	; (49b0 <Clock_Ip_ClockInitializeObjects+0x208>)
    48be:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    48c0:	201b      	movs	r0, #27
    48c2:	f7ff fcef 	bl	42a4 <getSelectorConfig>
    48c6:	4603      	mov	r3, r0
    48c8:	4a3a      	ldr	r2, [pc, #232]	; (49b4 <Clock_Ip_ClockInitializeObjects+0x20c>)
    48ca:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    48cc:	201d      	movs	r0, #29
    48ce:	f7ff fd7b 	bl	43c8 <getCoreDividerConfig>
    48d2:	4603      	mov	r3, r0
    48d4:	4a38      	ldr	r2, [pc, #224]	; (49b8 <Clock_Ip_ClockInitializeObjects+0x210>)
    48d6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    48d8:	201e      	movs	r0, #30
    48da:	f7ff fd75 	bl	43c8 <getCoreDividerConfig>
    48de:	4603      	mov	r3, r0
    48e0:	4a36      	ldr	r2, [pc, #216]	; (49bc <Clock_Ip_ClockInitializeObjects+0x214>)
    48e2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    48e4:	201f      	movs	r0, #31
    48e6:	f7ff fd6f 	bl	43c8 <getCoreDividerConfig>
    48ea:	4603      	mov	r3, r0
    48ec:	4a34      	ldr	r2, [pc, #208]	; (49c0 <Clock_Ip_ClockInitializeObjects+0x218>)
    48ee:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    48f0:	2021      	movs	r0, #33	; 0x21
    48f2:	f7ff fe0f 	bl	4514 <getBusDividerConfig>
    48f6:	4603      	mov	r3, r0
    48f8:	4a32      	ldr	r2, [pc, #200]	; (49c4 <Clock_Ip_ClockInitializeObjects+0x21c>)
    48fa:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    48fc:	2022      	movs	r0, #34	; 0x22
    48fe:	f7ff fe09 	bl	4514 <getBusDividerConfig>
    4902:	4603      	mov	r3, r0
    4904:	4a30      	ldr	r2, [pc, #192]	; (49c8 <Clock_Ip_ClockInitializeObjects+0x220>)
    4906:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    4908:	2023      	movs	r0, #35	; 0x23
    490a:	f7ff fe03 	bl	4514 <getBusDividerConfig>
    490e:	4603      	mov	r3, r0
    4910:	4a2e      	ldr	r2, [pc, #184]	; (49cc <Clock_Ip_ClockInitializeObjects+0x224>)
    4912:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    4914:	2025      	movs	r0, #37	; 0x25
    4916:	f7ff fea3 	bl	4660 <getSlowDividerConfig>
    491a:	4603      	mov	r3, r0
    491c:	4a2c      	ldr	r2, [pc, #176]	; (49d0 <Clock_Ip_ClockInitializeObjects+0x228>)
    491e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    4920:	2026      	movs	r0, #38	; 0x26
    4922:	f7ff fe9d 	bl	4660 <getSlowDividerConfig>
    4926:	4603      	mov	r3, r0
    4928:	4a2a      	ldr	r2, [pc, #168]	; (49d4 <Clock_Ip_ClockInitializeObjects+0x22c>)
    492a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    492c:	2027      	movs	r0, #39	; 0x27
    492e:	f7ff fe97 	bl	4660 <getSlowDividerConfig>
    4932:	4603      	mov	r3, r0
    4934:	4a28      	ldr	r2, [pc, #160]	; (49d8 <Clock_Ip_ClockInitializeObjects+0x230>)
    4936:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    4938:	bf00      	nop
    493a:	b003      	add	sp, #12
    493c:	f85d fb04 	ldr.w	pc, [sp], #4
    4940:	1fff8cd4 	.word	0x1fff8cd4
    4944:	0000df14 	.word	0x0000df14
    4948:	0000e560 	.word	0x0000e560
    494c:	1fff8ba0 	.word	0x1fff8ba0
    4950:	0000ded4 	.word	0x0000ded4
    4954:	0000e4a8 	.word	0x0000e4a8
    4958:	1fff8ba4 	.word	0x1fff8ba4
    495c:	0000dee4 	.word	0x0000dee4
    4960:	0000e514 	.word	0x0000e514
    4964:	1fff8ba8 	.word	0x1fff8ba8
    4968:	0000df24 	.word	0x0000df24
    496c:	0000e58c 	.word	0x0000e58c
    4970:	1fff8bac 	.word	0x1fff8bac
    4974:	1fff8be8 	.word	0x1fff8be8
    4978:	0000deb4 	.word	0x0000deb4
    497c:	0000e464 	.word	0x0000e464
    4980:	1fff8bb0 	.word	0x1fff8bb0
    4984:	1fff8bec 	.word	0x1fff8bec
    4988:	1fff8bb4 	.word	0x1fff8bb4
    498c:	1fff8bf0 	.word	0x1fff8bf0
    4990:	1fff8bb8 	.word	0x1fff8bb8
    4994:	1fff8bf4 	.word	0x1fff8bf4
    4998:	1fff8b21 	.word	0x1fff8b21
    499c:	1fff8b18 	.word	0x1fff8b18
    49a0:	1fff8bbc 	.word	0x1fff8bbc
    49a4:	1fff8bc0 	.word	0x1fff8bc0
    49a8:	1fff8bc4 	.word	0x1fff8bc4
    49ac:	1fff8bc8 	.word	0x1fff8bc8
    49b0:	1fff8bcc 	.word	0x1fff8bcc
    49b4:	1fff8bf8 	.word	0x1fff8bf8
    49b8:	1fff8bd0 	.word	0x1fff8bd0
    49bc:	1fff8bd4 	.word	0x1fff8bd4
    49c0:	1fff8bfc 	.word	0x1fff8bfc
    49c4:	1fff8bd8 	.word	0x1fff8bd8
    49c8:	1fff8bdc 	.word	0x1fff8bdc
    49cc:	1fff8c00 	.word	0x1fff8c00
    49d0:	1fff8be0 	.word	0x1fff8be0
    49d4:	1fff8be4 	.word	0x1fff8be4
    49d8:	1fff8c04 	.word	0x1fff8c04

000049dc <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    49dc:	b500      	push	{lr}
    49de:	b083      	sub	sp, #12
    49e0:	9001      	str	r0, [sp, #4]
    49e2:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    49e4:	9b01      	ldr	r3, [sp, #4]
    49e6:	2b03      	cmp	r3, #3
    49e8:	f000 8090 	beq.w	4b0c <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    49ec:	9b01      	ldr	r3, [sp, #4]
    49ee:	2b03      	cmp	r3, #3
    49f0:	f200 80d3 	bhi.w	4b9a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    49f4:	9b01      	ldr	r3, [sp, #4]
    49f6:	2b00      	cmp	r3, #0
    49f8:	d040      	beq.n	4a7c <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    49fa:	9b01      	ldr	r3, [sp, #4]
    49fc:	3b01      	subs	r3, #1
    49fe:	2b01      	cmp	r3, #1
    4a00:	f200 80cb 	bhi.w	4b9a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    4a04:	9b00      	ldr	r3, [sp, #0]
    4a06:	2b00      	cmp	r3, #0
    4a08:	f040 80c9 	bne.w	4b9e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    4a0c:	4b68      	ldr	r3, [pc, #416]	; (4bb0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4a0e:	2200      	movs	r2, #0
    4a10:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    4a12:	4b68      	ldr	r3, [pc, #416]	; (4bb4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4a14:	681b      	ldr	r3, [r3, #0]
    4a16:	685b      	ldr	r3, [r3, #4]
    4a18:	4a67      	ldr	r2, [pc, #412]	; (4bb8 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    4a1a:	6812      	ldr	r2, [r2, #0]
    4a1c:	4610      	mov	r0, r2
    4a1e:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    4a20:	4b66      	ldr	r3, [pc, #408]	; (4bbc <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4a22:	681b      	ldr	r3, [r3, #0]
    4a24:	681b      	ldr	r3, [r3, #0]
    4a26:	4a66      	ldr	r2, [pc, #408]	; (4bc0 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    4a28:	6812      	ldr	r2, [r2, #0]
    4a2a:	4610      	mov	r0, r2
    4a2c:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    4a2e:	4b65      	ldr	r3, [pc, #404]	; (4bc4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4a30:	681b      	ldr	r3, [r3, #0]
    4a32:	681b      	ldr	r3, [r3, #0]
    4a34:	4a64      	ldr	r2, [pc, #400]	; (4bc8 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4a36:	6812      	ldr	r2, [r2, #0]
    4a38:	4610      	mov	r0, r2
    4a3a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    4a3c:	4b63      	ldr	r3, [pc, #396]	; (4bcc <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4a3e:	681b      	ldr	r3, [r3, #0]
    4a40:	681b      	ldr	r3, [r3, #0]
    4a42:	4a63      	ldr	r2, [pc, #396]	; (4bd0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4a44:	6812      	ldr	r2, [r2, #0]
    4a46:	4610      	mov	r0, r2
    4a48:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    4a4a:	4b62      	ldr	r3, [pc, #392]	; (4bd4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4a4c:	681b      	ldr	r3, [r3, #0]
    4a4e:	691b      	ldr	r3, [r3, #16]
    4a50:	4a61      	ldr	r2, [pc, #388]	; (4bd8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4a52:	6812      	ldr	r2, [r2, #0]
    4a54:	6812      	ldr	r2, [r2, #0]
    4a56:	4610      	mov	r0, r2
    4a58:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    4a5a:	4b60      	ldr	r3, [pc, #384]	; (4bdc <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a5c:	681b      	ldr	r3, [r3, #0]
    4a5e:	68db      	ldr	r3, [r3, #12]
    4a60:	4a5f      	ldr	r2, [pc, #380]	; (4be0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4a62:	6812      	ldr	r2, [r2, #0]
    4a64:	6812      	ldr	r2, [r2, #0]
    4a66:	4610      	mov	r0, r2
    4a68:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    4a6a:	4b5e      	ldr	r3, [pc, #376]	; (4be4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a6c:	681b      	ldr	r3, [r3, #0]
    4a6e:	689b      	ldr	r3, [r3, #8]
    4a70:	4a5d      	ldr	r2, [pc, #372]	; (4be8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a72:	6812      	ldr	r2, [r2, #0]
    4a74:	6812      	ldr	r2, [r2, #0]
    4a76:	4610      	mov	r0, r2
    4a78:	4798      	blx	r3
            }
        }
        break;
    4a7a:	e090      	b.n	4b9e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4a7c:	9b00      	ldr	r3, [sp, #0]
    4a7e:	2b02      	cmp	r3, #2
    4a80:	f040 808f 	bne.w	4ba2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4a84:	4b4a      	ldr	r3, [pc, #296]	; (4bb0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4a86:	2201      	movs	r2, #1
    4a88:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4a8a:	4b56      	ldr	r3, [pc, #344]	; (4be4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4a8c:	681b      	ldr	r3, [r3, #0]
    4a8e:	685b      	ldr	r3, [r3, #4]
    4a90:	4a55      	ldr	r2, [pc, #340]	; (4be8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4a92:	6812      	ldr	r2, [r2, #0]
    4a94:	4610      	mov	r0, r2
    4a96:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4a98:	4b50      	ldr	r3, [pc, #320]	; (4bdc <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4a9a:	681b      	ldr	r3, [r3, #0]
    4a9c:	691b      	ldr	r3, [r3, #16]
    4a9e:	4a50      	ldr	r2, [pc, #320]	; (4be0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4aa0:	6812      	ldr	r2, [r2, #0]
    4aa2:	4610      	mov	r0, r2
    4aa4:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4aa6:	4b4d      	ldr	r3, [pc, #308]	; (4bdc <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4aa8:	681b      	ldr	r3, [r3, #0]
    4aaa:	689b      	ldr	r3, [r3, #8]
    4aac:	4a4c      	ldr	r2, [pc, #304]	; (4be0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4aae:	6812      	ldr	r2, [r2, #0]
    4ab0:	4610      	mov	r0, r2
    4ab2:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4ab4:	4b47      	ldr	r3, [pc, #284]	; (4bd4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4ab6:	681b      	ldr	r3, [r3, #0]
    4ab8:	68db      	ldr	r3, [r3, #12]
    4aba:	4a47      	ldr	r2, [pc, #284]	; (4bd8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4abc:	6812      	ldr	r2, [r2, #0]
    4abe:	4610      	mov	r0, r2
    4ac0:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4ac2:	4b44      	ldr	r3, [pc, #272]	; (4bd4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4ac4:	681b      	ldr	r3, [r3, #0]
    4ac6:	689b      	ldr	r3, [r3, #8]
    4ac8:	4a43      	ldr	r2, [pc, #268]	; (4bd8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4aca:	6812      	ldr	r2, [r2, #0]
    4acc:	6812      	ldr	r2, [r2, #0]
    4ace:	4610      	mov	r0, r2
    4ad0:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    4ad2:	4b38      	ldr	r3, [pc, #224]	; (4bb4 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    4ad4:	681b      	ldr	r3, [r3, #0]
    4ad6:	685b      	ldr	r3, [r3, #4]
    4ad8:	4a44      	ldr	r2, [pc, #272]	; (4bec <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    4ada:	6812      	ldr	r2, [r2, #0]
    4adc:	4610      	mov	r0, r2
    4ade:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    4ae0:	4b36      	ldr	r3, [pc, #216]	; (4bbc <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    4ae2:	681b      	ldr	r3, [r3, #0]
    4ae4:	681b      	ldr	r3, [r3, #0]
    4ae6:	4a42      	ldr	r2, [pc, #264]	; (4bf0 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    4ae8:	6812      	ldr	r2, [r2, #0]
    4aea:	4610      	mov	r0, r2
    4aec:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    4aee:	4b35      	ldr	r3, [pc, #212]	; (4bc4 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4af0:	681b      	ldr	r3, [r3, #0]
    4af2:	681b      	ldr	r3, [r3, #0]
    4af4:	4a3f      	ldr	r2, [pc, #252]	; (4bf4 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    4af6:	6812      	ldr	r2, [r2, #0]
    4af8:	4610      	mov	r0, r2
    4afa:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    4afc:	4b33      	ldr	r3, [pc, #204]	; (4bcc <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    4afe:	681b      	ldr	r3, [r3, #0]
    4b00:	681b      	ldr	r3, [r3, #0]
    4b02:	4a3d      	ldr	r2, [pc, #244]	; (4bf8 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    4b04:	6812      	ldr	r2, [r2, #0]
    4b06:	4610      	mov	r0, r2
    4b08:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4b0a:	e04a      	b.n	4ba2 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    4b0c:	9b00      	ldr	r3, [sp, #0]
    4b0e:	2b02      	cmp	r3, #2
    4b10:	d149      	bne.n	4ba6 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4b12:	4b27      	ldr	r3, [pc, #156]	; (4bb0 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4b14:	2201      	movs	r2, #1
    4b16:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    4b18:	4b32      	ldr	r3, [pc, #200]	; (4be4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    4b1a:	681b      	ldr	r3, [r3, #0]
    4b1c:	685b      	ldr	r3, [r3, #4]
    4b1e:	4a32      	ldr	r2, [pc, #200]	; (4be8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4b20:	6812      	ldr	r2, [r2, #0]
    4b22:	4610      	mov	r0, r2
    4b24:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4b26:	4b2d      	ldr	r3, [pc, #180]	; (4bdc <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4b28:	681b      	ldr	r3, [r3, #0]
    4b2a:	691b      	ldr	r3, [r3, #16]
    4b2c:	4a2c      	ldr	r2, [pc, #176]	; (4be0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4b2e:	6812      	ldr	r2, [r2, #0]
    4b30:	4610      	mov	r0, r2
    4b32:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4b34:	4b29      	ldr	r3, [pc, #164]	; (4bdc <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4b36:	681b      	ldr	r3, [r3, #0]
    4b38:	689b      	ldr	r3, [r3, #8]
    4b3a:	4a29      	ldr	r2, [pc, #164]	; (4be0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4b3c:	6812      	ldr	r2, [r2, #0]
    4b3e:	4610      	mov	r0, r2
    4b40:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4b42:	4b24      	ldr	r3, [pc, #144]	; (4bd4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b44:	681b      	ldr	r3, [r3, #0]
    4b46:	68db      	ldr	r3, [r3, #12]
    4b48:	4a23      	ldr	r2, [pc, #140]	; (4bd8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b4a:	6812      	ldr	r2, [r2, #0]
    4b4c:	4610      	mov	r0, r2
    4b4e:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4b50:	4b20      	ldr	r3, [pc, #128]	; (4bd4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4b52:	681b      	ldr	r3, [r3, #0]
    4b54:	689b      	ldr	r3, [r3, #8]
    4b56:	4a20      	ldr	r2, [pc, #128]	; (4bd8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4b58:	6812      	ldr	r2, [r2, #0]
    4b5a:	6812      	ldr	r2, [r2, #0]
    4b5c:	4610      	mov	r0, r2
    4b5e:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4b60:	4b26      	ldr	r3, [pc, #152]	; (4bfc <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4b62:	681b      	ldr	r3, [r3, #0]
    4b64:	685b      	ldr	r3, [r3, #4]
    4b66:	4a26      	ldr	r2, [pc, #152]	; (4c00 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4b68:	6812      	ldr	r2, [r2, #0]
    4b6a:	4610      	mov	r0, r2
    4b6c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    4b6e:	4b25      	ldr	r3, [pc, #148]	; (4c04 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4b70:	681b      	ldr	r3, [r3, #0]
    4b72:	681b      	ldr	r3, [r3, #0]
    4b74:	4a24      	ldr	r2, [pc, #144]	; (4c08 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4b76:	6812      	ldr	r2, [r2, #0]
    4b78:	4610      	mov	r0, r2
    4b7a:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    4b7c:	4b23      	ldr	r3, [pc, #140]	; (4c0c <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    4b7e:	681b      	ldr	r3, [r3, #0]
    4b80:	681b      	ldr	r3, [r3, #0]
    4b82:	4a23      	ldr	r2, [pc, #140]	; (4c10 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4b84:	6812      	ldr	r2, [r2, #0]
    4b86:	4610      	mov	r0, r2
    4b88:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    4b8a:	4b22      	ldr	r3, [pc, #136]	; (4c14 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    4b8c:	681b      	ldr	r3, [r3, #0]
    4b8e:	681b      	ldr	r3, [r3, #0]
    4b90:	4a21      	ldr	r2, [pc, #132]	; (4c18 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4b92:	6812      	ldr	r2, [r2, #0]
    4b94:	4610      	mov	r0, r2
    4b96:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4b98:	e005      	b.n	4ba6 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    4b9a:	bf00      	nop
    4b9c:	e004      	b.n	4ba8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4b9e:	bf00      	nop
    4ba0:	e002      	b.n	4ba8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4ba2:	bf00      	nop
    4ba4:	e000      	b.n	4ba8 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4ba6:	bf00      	nop
    }

}
    4ba8:	bf00      	nop
    4baa:	b003      	add	sp, #12
    4bac:	f85d fb04 	ldr.w	pc, [sp], #4
    4bb0:	1fff8b21 	.word	0x1fff8b21
    4bb4:	1fff8bac 	.word	0x1fff8bac
    4bb8:	1fff8bcc 	.word	0x1fff8bcc
    4bbc:	1fff8bb0 	.word	0x1fff8bb0
    4bc0:	1fff8bd4 	.word	0x1fff8bd4
    4bc4:	1fff8bb4 	.word	0x1fff8bb4
    4bc8:	1fff8bdc 	.word	0x1fff8bdc
    4bcc:	1fff8bb8 	.word	0x1fff8bb8
    4bd0:	1fff8be4 	.word	0x1fff8be4
    4bd4:	1fff8ba0 	.word	0x1fff8ba0
    4bd8:	1fff8bc4 	.word	0x1fff8bc4
    4bdc:	1fff8ba4 	.word	0x1fff8ba4
    4be0:	1fff8bc0 	.word	0x1fff8bc0
    4be4:	1fff8ba8 	.word	0x1fff8ba8
    4be8:	1fff8bbc 	.word	0x1fff8bbc
    4bec:	1fff8bc8 	.word	0x1fff8bc8
    4bf0:	1fff8bd0 	.word	0x1fff8bd0
    4bf4:	1fff8bd8 	.word	0x1fff8bd8
    4bf8:	1fff8be0 	.word	0x1fff8be0
    4bfc:	1fff8be8 	.word	0x1fff8be8
    4c00:	1fff8bf8 	.word	0x1fff8bf8
    4c04:	1fff8bec 	.word	0x1fff8bec
    4c08:	1fff8bfc 	.word	0x1fff8bfc
    4c0c:	1fff8bf0 	.word	0x1fff8bf0
    4c10:	1fff8c00 	.word	0x1fff8c00
    4c14:	1fff8bf4 	.word	0x1fff8bf4
    4c18:	1fff8c04 	.word	0x1fff8c04

00004c1c <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    4c1c:	b500      	push	{lr}
    4c1e:	b083      	sub	sp, #12
    4c20:	9001      	str	r0, [sp, #4]
    4c22:	9100      	str	r1, [sp, #0]
    switch(Command)
    4c24:	9b00      	ldr	r3, [sp, #0]
    4c26:	2b04      	cmp	r3, #4
    4c28:	d010      	beq.n	4c4c <Clock_Ip_Command+0x30>
    4c2a:	9b00      	ldr	r3, [sp, #0]
    4c2c:	2b04      	cmp	r3, #4
    4c2e:	d811      	bhi.n	4c54 <Clock_Ip_Command+0x38>
    4c30:	9b00      	ldr	r3, [sp, #0]
    4c32:	2b01      	cmp	r3, #1
    4c34:	d006      	beq.n	4c44 <Clock_Ip_Command+0x28>
    4c36:	9b00      	ldr	r3, [sp, #0]
    4c38:	2b02      	cmp	r3, #2
    4c3a:	d10b      	bne.n	4c54 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    4c3c:	9801      	ldr	r0, [sp, #4]
    4c3e:	f7ff fdb3 	bl	47a8 <Clock_Ip_ClockInitializeObjects>
            break;
    4c42:	e008      	b.n	4c56 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4c44:	9801      	ldr	r0, [sp, #4]
    4c46:	f7ff f9db 	bl	4000 <Clock_Ip_SpecificPlatformInitClock>
            break;
    4c4a:	e004      	b.n	4c56 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    4c4c:	9801      	ldr	r0, [sp, #4]
    4c4e:	f7ff f8ed 	bl	3e2c <DisableSafeClock>
            break;
    4c52:	e000      	b.n	4c56 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4c54:	bf00      	nop
    }
}
    4c56:	bf00      	nop
    4c58:	b003      	add	sp, #12
    4c5a:	f85d fb04 	ldr.w	pc, [sp], #4
    4c5e:	bf00      	nop

00004c60 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4c60:	b500      	push	{lr}
    4c62:	b085      	sub	sp, #20
    4c64:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4c66:	4a20      	ldr	r2, [pc, #128]	; (4ce8 <Mcu_Init+0x88>)
    4c68:	9b01      	ldr	r3, [sp, #4]
    4c6a:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c6c:	2300      	movs	r3, #0
    4c6e:	9303      	str	r3, [sp, #12]
    4c70:	e010      	b.n	4c94 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4c72:	4b1d      	ldr	r3, [pc, #116]	; (4ce8 <Mcu_Init+0x88>)
    4c74:	681b      	ldr	r3, [r3, #0]
    4c76:	6919      	ldr	r1, [r3, #16]
    4c78:	9a03      	ldr	r2, [sp, #12]
    4c7a:	4613      	mov	r3, r2
    4c7c:	005b      	lsls	r3, r3, #1
    4c7e:	4413      	add	r3, r2
    4c80:	009b      	lsls	r3, r3, #2
    4c82:	440b      	add	r3, r1
    4c84:	681b      	ldr	r3, [r3, #0]
    4c86:	9a03      	ldr	r2, [sp, #12]
    4c88:	b2d1      	uxtb	r1, r2
    4c8a:	4a18      	ldr	r2, [pc, #96]	; (4cec <Mcu_Init+0x8c>)
    4c8c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    4c8e:	9b03      	ldr	r3, [sp, #12]
    4c90:	3301      	adds	r3, #1
    4c92:	9303      	str	r3, [sp, #12]
    4c94:	4b14      	ldr	r3, [pc, #80]	; (4ce8 <Mcu_Init+0x88>)
    4c96:	681b      	ldr	r3, [r3, #0]
    4c98:	689b      	ldr	r3, [r3, #8]
    4c9a:	9a03      	ldr	r2, [sp, #12]
    4c9c:	429a      	cmp	r2, r3
    4c9e:	d3e8      	bcc.n	4c72 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4ca0:	2300      	movs	r3, #0
    4ca2:	9303      	str	r3, [sp, #12]
    4ca4:	e010      	b.n	4cc8 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4ca6:	4b10      	ldr	r3, [pc, #64]	; (4ce8 <Mcu_Init+0x88>)
    4ca8:	681b      	ldr	r3, [r3, #0]
    4caa:	6959      	ldr	r1, [r3, #20]
    4cac:	9a03      	ldr	r2, [sp, #12]
    4cae:	4613      	mov	r3, r2
    4cb0:	01db      	lsls	r3, r3, #7
    4cb2:	1a9b      	subs	r3, r3, r2
    4cb4:	00db      	lsls	r3, r3, #3
    4cb6:	440b      	add	r3, r1
    4cb8:	681b      	ldr	r3, [r3, #0]
    4cba:	9a03      	ldr	r2, [sp, #12]
    4cbc:	b2d1      	uxtb	r1, r2
    4cbe:	4a0c      	ldr	r2, [pc, #48]	; (4cf0 <Mcu_Init+0x90>)
    4cc0:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4cc2:	9b03      	ldr	r3, [sp, #12]
    4cc4:	3301      	adds	r3, #1
    4cc6:	9303      	str	r3, [sp, #12]
    4cc8:	4b07      	ldr	r3, [pc, #28]	; (4ce8 <Mcu_Init+0x88>)
    4cca:	681b      	ldr	r3, [r3, #0]
    4ccc:	68db      	ldr	r3, [r3, #12]
    4cce:	9a03      	ldr	r2, [sp, #12]
    4cd0:	429a      	cmp	r2, r3
    4cd2:	d3e8      	bcc.n	4ca6 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    4cd4:	4b04      	ldr	r3, [pc, #16]	; (4ce8 <Mcu_Init+0x88>)
    4cd6:	681b      	ldr	r3, [r3, #0]
    4cd8:	699b      	ldr	r3, [r3, #24]
    4cda:	4618      	mov	r0, r3
    4cdc:	f000 f88a 	bl	4df4 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4ce0:	bf00      	nop
    4ce2:	b005      	add	sp, #20
    4ce4:	f85d fb04 	ldr.w	pc, [sp], #4
    4ce8:	1fff8ce0 	.word	0x1fff8ce0
    4cec:	1fff8cdc 	.word	0x1fff8cdc
    4cf0:	1fff8cd8 	.word	0x1fff8cd8

00004cf4 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    4cf4:	b084      	sub	sp, #16
    4cf6:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    4cf8:	2301      	movs	r3, #1
    4cfa:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    4cfe:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4d02:	4618      	mov	r0, r3
    4d04:	b004      	add	sp, #16
    4d06:	4770      	bx	lr

00004d08 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    4d08:	b500      	push	{lr}
    4d0a:	b085      	sub	sp, #20
    4d0c:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    4d0e:	4a0e      	ldr	r2, [pc, #56]	; (4d48 <Mcu_InitClock+0x40>)
    4d10:	9b01      	ldr	r3, [sp, #4]
    4d12:	4413      	add	r3, r2
    4d14:	781b      	ldrb	r3, [r3, #0]
    4d16:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    4d1a:	4b0c      	ldr	r3, [pc, #48]	; (4d4c <Mcu_InitClock+0x44>)
    4d1c:	681b      	ldr	r3, [r3, #0]
    4d1e:	6959      	ldr	r1, [r3, #20]
    4d20:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4d24:	4613      	mov	r3, r2
    4d26:	01db      	lsls	r3, r3, #7
    4d28:	1a9b      	subs	r3, r3, r2
    4d2a:	00db      	lsls	r3, r3, #3
    4d2c:	440b      	add	r3, r1
    4d2e:	4618      	mov	r0, r3
    4d30:	f000 f86a 	bl	4e08 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4d34:	2300      	movs	r3, #0
    4d36:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    4d3a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    4d3e:	4618      	mov	r0, r3
    4d40:	b005      	add	sp, #20
    4d42:	f85d fb04 	ldr.w	pc, [sp], #4
    4d46:	bf00      	nop
    4d48:	1fff8cd8 	.word	0x1fff8cd8
    4d4c:	1fff8ce0 	.word	0x1fff8ce0

00004d50 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4d50:	b500      	push	{lr}
    4d52:	b085      	sub	sp, #20
    4d54:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4d56:	4a0d      	ldr	r2, [pc, #52]	; (4d8c <Mcu_SetMode+0x3c>)
    4d58:	9b01      	ldr	r3, [sp, #4]
    4d5a:	4413      	add	r3, r2
    4d5c:	781b      	ldrb	r3, [r3, #0]
    4d5e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d62:	f007 fe07 	bl	c974 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4d66:	4b0a      	ldr	r3, [pc, #40]	; (4d90 <Mcu_SetMode+0x40>)
    4d68:	681b      	ldr	r3, [r3, #0]
    4d6a:	6919      	ldr	r1, [r3, #16]
    4d6c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4d70:	4613      	mov	r3, r2
    4d72:	005b      	lsls	r3, r3, #1
    4d74:	4413      	add	r3, r2
    4d76:	009b      	lsls	r3, r3, #2
    4d78:	440b      	add	r3, r1
    4d7a:	4618      	mov	r0, r3
    4d7c:	f000 f84e 	bl	4e1c <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4d80:	f007 fe24 	bl	c9cc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4d84:	bf00      	nop
    4d86:	b005      	add	sp, #20
    4d88:	f85d fb04 	ldr.w	pc, [sp], #4
    4d8c:	1fff8cdc 	.word	0x1fff8cdc
    4d90:	1fff8ce0 	.word	0x1fff8ce0

00004d94 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4d94:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4d96:	2302      	movs	r3, #2
    4d98:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    4d9a:	9b01      	ldr	r3, [sp, #4]
}
    4d9c:	4618      	mov	r0, r3
    4d9e:	b002      	add	sp, #8
    4da0:	4770      	bx	lr

00004da2 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4da2:	b500      	push	{lr}
    4da4:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4da6:	f000 f843 	bl	4e30 <Mcu_Ipw_GetResetReason>
    4daa:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    4dac:	9b01      	ldr	r3, [sp, #4]
}
    4dae:	4618      	mov	r0, r3
    4db0:	b003      	add	sp, #12
    4db2:	f85d fb04 	ldr.w	pc, [sp], #4

00004db6 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4db6:	b500      	push	{lr}
    4db8:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    4dba:	f000 f83f 	bl	4e3c <Mcu_Ipw_GetResetRawValue>
    4dbe:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4dc0:	9b01      	ldr	r3, [sp, #4]
}
    4dc2:	4618      	mov	r0, r3
    4dc4:	b003      	add	sp, #12
    4dc6:	f85d fb04 	ldr.w	pc, [sp], #4

00004dca <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4dca:	b500      	push	{lr}
    4dcc:	b083      	sub	sp, #12
    4dce:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    4dd0:	9801      	ldr	r0, [sp, #4]
    4dd2:	f000 f839 	bl	4e48 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    4dd6:	bf00      	nop
    4dd8:	b003      	add	sp, #12
    4dda:	f85d fb04 	ldr.w	pc, [sp], #4

00004dde <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    4dde:	b082      	sub	sp, #8
    4de0:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    4de2:	4b03      	ldr	r3, [pc, #12]	; (4df0 <Mcu_ClkSrcFailureNotification+0x12>)
    4de4:	681b      	ldr	r3, [r3, #0]
    4de6:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    4de8:	bf00      	nop
    4dea:	b002      	add	sp, #8
    4dec:	4770      	bx	lr
    4dee:	bf00      	nop
    4df0:	1fff8ce0 	.word	0x1fff8ce0

00004df4 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    4df4:	b500      	push	{lr}
    4df6:	b083      	sub	sp, #12
    4df8:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    4dfa:	9801      	ldr	r0, [sp, #4]
    4dfc:	f000 f882 	bl	4f04 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    4e00:	bf00      	nop
    4e02:	b003      	add	sp, #12
    4e04:	f85d fb04 	ldr.w	pc, [sp], #4

00004e08 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    4e08:	b500      	push	{lr}
    4e0a:	b083      	sub	sp, #12
    4e0c:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    4e0e:	9801      	ldr	r0, [sp, #4]
    4e10:	f7fc fc6a 	bl	16e8 <Clock_Ip_InitClock>
}
    4e14:	bf00      	nop
    4e16:	b003      	add	sp, #12
    4e18:	f85d fb04 	ldr.w	pc, [sp], #4

00004e1c <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    4e1c:	b500      	push	{lr}
    4e1e:	b083      	sub	sp, #12
    4e20:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    4e22:	9801      	ldr	r0, [sp, #4]
    4e24:	f000 f820 	bl	4e68 <Power_Ip_SetMode>
}
    4e28:	bf00      	nop
    4e2a:	b003      	add	sp, #12
    4e2c:	f85d fb04 	ldr.w	pc, [sp], #4

00004e30 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4e30:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4e32:	f000 f84f 	bl	4ed4 <Power_Ip_GetResetReason>
    4e36:	4603      	mov	r3, r0
}
    4e38:	4618      	mov	r0, r3
    4e3a:	bd08      	pop	{r3, pc}

00004e3c <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    4e3c:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    4e3e:	f000 f857 	bl	4ef0 <Power_Ip_GetResetRawValue>
    4e42:	4603      	mov	r3, r0
}
    4e44:	4618      	mov	r0, r3
    4e46:	bd08      	pop	{r3, pc}

00004e48 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4e48:	b500      	push	{lr}
    4e4a:	b083      	sub	sp, #12
    4e4c:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    4e4e:	9b01      	ldr	r3, [sp, #4]
    4e50:	2b00      	cmp	r3, #0
    4e52:	d102      	bne.n	4e5a <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4e54:	f000 f86c 	bl	4f30 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4e58:	e001      	b.n	4e5e <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    4e5a:	f000 f86e 	bl	4f3a <Power_Ip_EnableSleepOnExit>
}
    4e5e:	bf00      	nop
    4e60:	b003      	add	sp, #12
    4e62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004e68 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4e68:	b500      	push	{lr}
    4e6a:	b085      	sub	sp, #20
    4e6c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    4e6e:	9b01      	ldr	r3, [sp, #4]
    4e70:	685b      	ldr	r3, [r3, #4]
    4e72:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4e74:	9802      	ldr	r0, [sp, #8]
    4e76:	f000 f9f5 	bl	5264 <Power_Ip_SMC_ModeCheckEntry>
    4e7a:	4603      	mov	r3, r0
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d002      	beq.n	4e86 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e80:	2301      	movs	r3, #1
    4e82:	9303      	str	r3, [sp, #12]
    4e84:	e003      	b.n	4e8e <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4e86:	9801      	ldr	r0, [sp, #4]
    4e88:	f000 fa1e 	bl	52c8 <Power_Ip_SMC_ModeConfig>
    4e8c:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    4e8e:	9b03      	ldr	r3, [sp, #12]
    4e90:	2b01      	cmp	r3, #1
    4e92:	d103      	bne.n	4e9c <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e94:	21ff      	movs	r1, #255	; 0xff
    4e96:	2003      	movs	r0, #3
    4e98:	f000 f8f4 	bl	5084 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    4e9c:	bf00      	nop
    4e9e:	b005      	add	sp, #20
    4ea0:	f85d fb04 	ldr.w	pc, [sp], #4

00004ea4 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4ea4:	b084      	sub	sp, #16
    4ea6:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4ea8:	230c      	movs	r3, #12
    4eaa:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    4eac:	4a08      	ldr	r2, [pc, #32]	; (4ed0 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4eae:	9b01      	ldr	r3, [sp, #4]
    4eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4eb4:	2b0e      	cmp	r3, #14
    4eb6:	d805      	bhi.n	4ec4 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4eb8:	4a05      	ldr	r2, [pc, #20]	; (4ed0 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    4eba:	9b01      	ldr	r3, [sp, #4]
    4ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4ec0:	9303      	str	r3, [sp, #12]
    4ec2:	e001      	b.n	4ec8 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4ec4:	230c      	movs	r3, #12
    4ec6:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4ec8:	9b03      	ldr	r3, [sp, #12]
}
    4eca:	4618      	mov	r0, r3
    4ecc:	b004      	add	sp, #16
    4ece:	4770      	bx	lr
    4ed0:	0000e600 	.word	0x0000e600

00004ed4 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    4ed4:	b500      	push	{lr}
    4ed6:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    4ed8:	f000 f940 	bl	515c <Power_Ip_RCM_GetResetReason>
    4edc:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    4ede:	9801      	ldr	r0, [sp, #4]
    4ee0:	f7ff ffe0 	bl	4ea4 <Power_Ip_ConvertIntergeToResetType>
    4ee4:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    4ee6:	9b00      	ldr	r3, [sp, #0]
}
    4ee8:	4618      	mov	r0, r3
    4eea:	b003      	add	sp, #12
    4eec:	f85d fb04 	ldr.w	pc, [sp], #4

00004ef0 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    4ef0:	b500      	push	{lr}
    4ef2:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    4ef4:	f000 f98a 	bl	520c <Power_Ip_RCM_GetResetRawValue>
    4ef8:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    4efa:	9b01      	ldr	r3, [sp, #4]
}
    4efc:	4618      	mov	r0, r3
    4efe:	b003      	add	sp, #12
    4f00:	f85d fb04 	ldr.w	pc, [sp], #4

00004f04 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    4f04:	b500      	push	{lr}
    4f06:	b083      	sub	sp, #12
    4f08:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    4f0a:	9b01      	ldr	r3, [sp, #4]
    4f0c:	681b      	ldr	r3, [r3, #0]
    4f0e:	4618      	mov	r0, r3
    4f10:	f000 f90e 	bl	5130 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    4f14:	9b01      	ldr	r3, [sp, #4]
    4f16:	685b      	ldr	r3, [r3, #4]
    4f18:	4618      	mov	r0, r3
    4f1a:	f000 f86d 	bl	4ff8 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    4f1e:	9b01      	ldr	r3, [sp, #4]
    4f20:	689b      	ldr	r3, [r3, #8]
    4f22:	4618      	mov	r0, r3
    4f24:	f000 f990 	bl	5248 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    4f28:	bf00      	nop
    4f2a:	b003      	add	sp, #12
    4f2c:	f85d fb04 	ldr.w	pc, [sp], #4

00004f30 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4f30:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4f32:	f000 f811 	bl	4f58 <Power_Ip_CM4_DisableSleepOnExit>
}
    4f36:	bf00      	nop
    4f38:	bd08      	pop	{r3, pc}

00004f3a <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4f3a:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4f3c:	f000 f820 	bl	4f80 <Power_Ip_CM4_EnableSleepOnExit>
}
    4f40:	bf00      	nop
    4f42:	bd08      	pop	{r3, pc}

00004f44 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4f44:	b082      	sub	sp, #8
    4f46:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4f48:	4a02      	ldr	r2, [pc, #8]	; (4f54 <Power_Ip_InstallNotificationsCallback+0x10>)
    4f4a:	9b01      	ldr	r3, [sp, #4]
    4f4c:	6013      	str	r3, [r2, #0]
}
    4f4e:	bf00      	nop
    4f50:	b002      	add	sp, #8
    4f52:	4770      	bx	lr
    4f54:	1fff8b24 	.word	0x1fff8b24

00004f58 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4f58:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f5a:	2300      	movs	r3, #0
    4f5c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f5e:	4b07      	ldr	r3, [pc, #28]	; (4f7c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f60:	681b      	ldr	r3, [r3, #0]
    4f62:	685b      	ldr	r3, [r3, #4]
    4f64:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    4f66:	9b01      	ldr	r3, [sp, #4]
    4f68:	f023 0302 	bic.w	r3, r3, #2
    4f6c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f6e:	4b03      	ldr	r3, [pc, #12]	; (4f7c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4f70:	681b      	ldr	r3, [r3, #0]
    4f72:	9a01      	ldr	r2, [sp, #4]
    4f74:	605a      	str	r2, [r3, #4]
}
    4f76:	bf00      	nop
    4f78:	b002      	add	sp, #8
    4f7a:	4770      	bx	lr
    4f7c:	1fff8b28 	.word	0x1fff8b28

00004f80 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    4f80:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4f82:	2300      	movs	r3, #0
    4f84:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4f86:	4b07      	ldr	r3, [pc, #28]	; (4fa4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f88:	681b      	ldr	r3, [r3, #0]
    4f8a:	685b      	ldr	r3, [r3, #4]
    4f8c:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    4f8e:	9b01      	ldr	r3, [sp, #4]
    4f90:	f043 0302 	orr.w	r3, r3, #2
    4f94:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4f96:	4b03      	ldr	r3, [pc, #12]	; (4fa4 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4f98:	681b      	ldr	r3, [r3, #0]
    4f9a:	9a01      	ldr	r2, [sp, #4]
    4f9c:	605a      	str	r2, [r3, #4]
}
    4f9e:	bf00      	nop
    4fa0:	b002      	add	sp, #8
    4fa2:	4770      	bx	lr
    4fa4:	1fff8b28 	.word	0x1fff8b28

00004fa8 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    4fa8:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4faa:	2300      	movs	r3, #0
    4fac:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4fae:	4b07      	ldr	r3, [pc, #28]	; (4fcc <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4fb0:	681b      	ldr	r3, [r3, #0]
    4fb2:	685b      	ldr	r3, [r3, #4]
    4fb4:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    4fb6:	9b01      	ldr	r3, [sp, #4]
    4fb8:	f043 0304 	orr.w	r3, r3, #4
    4fbc:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4fbe:	4b03      	ldr	r3, [pc, #12]	; (4fcc <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4fc0:	681b      	ldr	r3, [r3, #0]
    4fc2:	9a01      	ldr	r2, [sp, #4]
    4fc4:	605a      	str	r2, [r3, #4]
}
    4fc6:	bf00      	nop
    4fc8:	b002      	add	sp, #8
    4fca:	4770      	bx	lr
    4fcc:	1fff8b28 	.word	0x1fff8b28

00004fd0 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    4fd0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4fd2:	2300      	movs	r3, #0
    4fd4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4fd6:	4b07      	ldr	r3, [pc, #28]	; (4ff4 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4fd8:	681b      	ldr	r3, [r3, #0]
    4fda:	685b      	ldr	r3, [r3, #4]
    4fdc:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    4fde:	9b01      	ldr	r3, [sp, #4]
    4fe0:	f023 0304 	bic.w	r3, r3, #4
    4fe4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4fe6:	4b03      	ldr	r3, [pc, #12]	; (4ff4 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4fe8:	681b      	ldr	r3, [r3, #0]
    4fea:	9a01      	ldr	r2, [sp, #4]
    4fec:	605a      	str	r2, [r3, #4]
}
    4fee:	bf00      	nop
    4ff0:	b002      	add	sp, #8
    4ff2:	4770      	bx	lr
    4ff4:	1fff8b28 	.word	0x1fff8b28

00004ff8 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    4ff8:	b084      	sub	sp, #16
    4ffa:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    4ffc:	4b20      	ldr	r3, [pc, #128]	; (5080 <Power_Ip_PMC_PowerInit+0x88>)
    4ffe:	781b      	ldrb	r3, [r3, #0]
    5000:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5004:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5008:	f003 030f 	and.w	r3, r3, #15
    500c:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5010:	9b01      	ldr	r3, [sp, #4]
    5012:	781a      	ldrb	r2, [r3, #0]
    5014:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5018:	4313      	orrs	r3, r2
    501a:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    501e:	4a18      	ldr	r2, [pc, #96]	; (5080 <Power_Ip_PMC_PowerInit+0x88>)
    5020:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5024:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5026:	4b16      	ldr	r3, [pc, #88]	; (5080 <Power_Ip_PMC_PowerInit+0x88>)
    5028:	785b      	ldrb	r3, [r3, #1]
    502a:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    502e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5032:	f003 031f 	and.w	r3, r3, #31
    5036:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    503a:	9b01      	ldr	r3, [sp, #4]
    503c:	785a      	ldrb	r2, [r3, #1]
    503e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5042:	4313      	orrs	r3, r2
    5044:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5048:	4a0d      	ldr	r2, [pc, #52]	; (5080 <Power_Ip_PMC_PowerInit+0x88>)
    504a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    504e:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5050:	4b0b      	ldr	r3, [pc, #44]	; (5080 <Power_Ip_PMC_PowerInit+0x88>)
    5052:	789b      	ldrb	r3, [r3, #2]
    5054:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5058:	f89d 300f 	ldrb.w	r3, [sp, #15]
    505c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5060:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5064:	9b01      	ldr	r3, [sp, #4]
    5066:	789a      	ldrb	r2, [r3, #2]
    5068:	f89d 300f 	ldrb.w	r3, [sp, #15]
    506c:	4313      	orrs	r3, r2
    506e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5072:	4a03      	ldr	r2, [pc, #12]	; (5080 <Power_Ip_PMC_PowerInit+0x88>)
    5074:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5078:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    507a:	bf00      	nop
    507c:	b004      	add	sp, #16
    507e:	4770      	bx	lr
    5080:	4007d000 	.word	0x4007d000

00005084 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5084:	b500      	push	{lr}
    5086:	b083      	sub	sp, #12
    5088:	9001      	str	r0, [sp, #4]
    508a:	460b      	mov	r3, r1
    508c:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5090:	4b05      	ldr	r3, [pc, #20]	; (50a8 <Power_Ip_ReportPowerErrors+0x24>)
    5092:	681b      	ldr	r3, [r3, #0]
    5094:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5098:	4611      	mov	r1, r2
    509a:	9801      	ldr	r0, [sp, #4]
    509c:	4798      	blx	r3
}
    509e:	bf00      	nop
    50a0:	b003      	add	sp, #12
    50a2:	f85d fb04 	ldr.w	pc, [sp], #4
    50a6:	bf00      	nop
    50a8:	1fff8b24 	.word	0x1fff8b24

000050ac <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    50ac:	b082      	sub	sp, #8
    50ae:	9001      	str	r0, [sp, #4]
    50b0:	460b      	mov	r3, r1
    50b2:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    50b6:	bf00      	nop
    50b8:	b002      	add	sp, #8
    50ba:	4770      	bx	lr

000050bc <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    50bc:	b500      	push	{lr}
    50be:	b085      	sub	sp, #20
    50c0:	9003      	str	r0, [sp, #12]
    50c2:	9102      	str	r1, [sp, #8]
    50c4:	9201      	str	r2, [sp, #4]
    50c6:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    50c8:	2000      	movs	r0, #0
    50ca:	f7fc f83d 	bl	1148 <OsIf_GetCounter>
    50ce:	4602      	mov	r2, r0
    50d0:	9b03      	ldr	r3, [sp, #12]
    50d2:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    50d4:	9b02      	ldr	r3, [sp, #8]
    50d6:	2200      	movs	r2, #0
    50d8:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    50da:	2100      	movs	r1, #0
    50dc:	9800      	ldr	r0, [sp, #0]
    50de:	f7fc f87f 	bl	11e0 <OsIf_MicrosToTicks>
    50e2:	4602      	mov	r2, r0
    50e4:	9b01      	ldr	r3, [sp, #4]
    50e6:	601a      	str	r2, [r3, #0]
}
    50e8:	bf00      	nop
    50ea:	b005      	add	sp, #20
    50ec:	f85d fb04 	ldr.w	pc, [sp], #4

000050f0 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    50f0:	b500      	push	{lr}
    50f2:	b087      	sub	sp, #28
    50f4:	9003      	str	r0, [sp, #12]
    50f6:	9102      	str	r1, [sp, #8]
    50f8:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    50fa:	2300      	movs	r3, #0
    50fc:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5100:	2100      	movs	r1, #0
    5102:	9803      	ldr	r0, [sp, #12]
    5104:	f7fc f839 	bl	117a <OsIf_GetElapsed>
    5108:	4602      	mov	r2, r0
    510a:	9b02      	ldr	r3, [sp, #8]
    510c:	681b      	ldr	r3, [r3, #0]
    510e:	441a      	add	r2, r3
    5110:	9b02      	ldr	r3, [sp, #8]
    5112:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5114:	9b02      	ldr	r3, [sp, #8]
    5116:	681b      	ldr	r3, [r3, #0]
    5118:	9a01      	ldr	r2, [sp, #4]
    511a:	429a      	cmp	r2, r3
    511c:	d802      	bhi.n	5124 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    511e:	2301      	movs	r3, #1
    5120:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5124:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5128:	4618      	mov	r0, r3
    512a:	b007      	add	sp, #28
    512c:	f85d fb04 	ldr.w	pc, [sp], #4

00005130 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5130:	b082      	sub	sp, #8
    5132:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5134:	9b01      	ldr	r3, [sp, #4]
    5136:	681a      	ldr	r2, [r3, #0]
    5138:	4907      	ldr	r1, [pc, #28]	; (5158 <Power_Ip_RCM_ResetInit+0x28>)
    513a:	f641 7307 	movw	r3, #7943	; 0x1f07
    513e:	4013      	ands	r3, r2
    5140:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5142:	9b01      	ldr	r3, [sp, #4]
    5144:	685a      	ldr	r2, [r3, #4]
    5146:	4904      	ldr	r1, [pc, #16]	; (5158 <Power_Ip_RCM_ResetInit+0x28>)
    5148:	f642 73ff 	movw	r3, #12287	; 0x2fff
    514c:	4013      	ands	r3, r2
    514e:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5150:	bf00      	nop
    5152:	b002      	add	sp, #8
    5154:	4770      	bx	lr
    5156:	bf00      	nop
    5158:	4007f000 	.word	0x4007f000

0000515c <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    515c:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    515e:	230c      	movs	r3, #12
    5160:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5162:	2300      	movs	r3, #0
    5164:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5166:	2300      	movs	r3, #0
    5168:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    516a:	2300      	movs	r3, #0
    516c:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    516e:	4b25      	ldr	r3, [pc, #148]	; (5204 <Power_Ip_RCM_GetResetReason+0xa8>)
    5170:	699a      	ldr	r2, [r3, #24]
    5172:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5176:	4013      	ands	r3, r2
    5178:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    517a:	9b03      	ldr	r3, [sp, #12]
    517c:	2b00      	cmp	r3, #0
    517e:	d008      	beq.n	5192 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5180:	4920      	ldr	r1, [pc, #128]	; (5204 <Power_Ip_RCM_GetResetReason+0xa8>)
    5182:	9a03      	ldr	r2, [sp, #12]
    5184:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5188:	4013      	ands	r3, r2
    518a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    518c:	4a1e      	ldr	r2, [pc, #120]	; (5208 <Power_Ip_RCM_GetResetReason+0xac>)
    518e:	9b03      	ldr	r3, [sp, #12]
    5190:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5192:	4b1d      	ldr	r3, [pc, #116]	; (5208 <Power_Ip_RCM_GetResetReason+0xac>)
    5194:	681b      	ldr	r3, [r3, #0]
    5196:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5198:	9a02      	ldr	r2, [sp, #8]
    519a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    519e:	4013      	ands	r3, r2
    51a0:	2b82      	cmp	r3, #130	; 0x82
    51a2:	d102      	bne.n	51aa <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    51a4:	2305      	movs	r3, #5
    51a6:	9307      	str	r3, [sp, #28]
    51a8:	e027      	b.n	51fa <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    51aa:	2300      	movs	r3, #0
    51ac:	9306      	str	r3, [sp, #24]
    51ae:	e021      	b.n	51f4 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    51b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    51b4:	9b06      	ldr	r3, [sp, #24]
    51b6:	fa22 f303 	lsr.w	r3, r2, r3
    51ba:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    51bc:	9a01      	ldr	r2, [sp, #4]
    51be:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    51c2:	4013      	ands	r3, r2
    51c4:	2b00      	cmp	r3, #0
    51c6:	d012      	beq.n	51ee <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    51c8:	9a01      	ldr	r2, [sp, #4]
    51ca:	9b02      	ldr	r3, [sp, #8]
    51cc:	4013      	ands	r3, r2
    51ce:	2b00      	cmp	r3, #0
    51d0:	d00a      	beq.n	51e8 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    51d2:	9b05      	ldr	r3, [sp, #20]
    51d4:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    51d6:	9b04      	ldr	r3, [sp, #16]
    51d8:	3301      	adds	r3, #1
    51da:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    51dc:	9b04      	ldr	r3, [sp, #16]
    51de:	2b01      	cmp	r3, #1
    51e0:	d902      	bls.n	51e8 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    51e2:	230d      	movs	r3, #13
    51e4:	9307      	str	r3, [sp, #28]
                        break;
    51e6:	e008      	b.n	51fa <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    51e8:	9b05      	ldr	r3, [sp, #20]
    51ea:	3301      	adds	r3, #1
    51ec:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    51ee:	9b06      	ldr	r3, [sp, #24]
    51f0:	3301      	adds	r3, #1
    51f2:	9306      	str	r3, [sp, #24]
    51f4:	9b06      	ldr	r3, [sp, #24]
    51f6:	2b1f      	cmp	r3, #31
    51f8:	d9da      	bls.n	51b0 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    51fa:	9b07      	ldr	r3, [sp, #28]
}
    51fc:	4618      	mov	r0, r3
    51fe:	b008      	add	sp, #32
    5200:	4770      	bx	lr
    5202:	bf00      	nop
    5204:	4007f000 	.word	0x4007f000
    5208:	1fff8ce4 	.word	0x1fff8ce4

0000520c <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    520c:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    520e:	4b0c      	ldr	r3, [pc, #48]	; (5240 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5210:	699a      	ldr	r2, [r3, #24]
    5212:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5216:	4013      	ands	r3, r2
    5218:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    521a:	9b01      	ldr	r3, [sp, #4]
    521c:	2b00      	cmp	r3, #0
    521e:	d008      	beq.n	5232 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5220:	4907      	ldr	r1, [pc, #28]	; (5240 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5222:	9a01      	ldr	r2, [sp, #4]
    5224:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5228:	4013      	ands	r3, r2
    522a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    522c:	4a05      	ldr	r2, [pc, #20]	; (5244 <Power_Ip_RCM_GetResetRawValue+0x38>)
    522e:	9b01      	ldr	r3, [sp, #4]
    5230:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5232:	4b04      	ldr	r3, [pc, #16]	; (5244 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5234:	681b      	ldr	r3, [r3, #0]
    5236:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5238:	9b00      	ldr	r3, [sp, #0]
}
    523a:	4618      	mov	r0, r3
    523c:	b002      	add	sp, #8
    523e:	4770      	bx	lr
    5240:	4007f000 	.word	0x4007f000
    5244:	1fff8ce4 	.word	0x1fff8ce4

00005248 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5248:	b082      	sub	sp, #8
    524a:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    524c:	9b01      	ldr	r3, [sp, #4]
    524e:	681b      	ldr	r3, [r3, #0]
    5250:	4a03      	ldr	r2, [pc, #12]	; (5260 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5252:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5256:	6093      	str	r3, [r2, #8]
}
    5258:	bf00      	nop
    525a:	b002      	add	sp, #8
    525c:	4770      	bx	lr
    525e:	bf00      	nop
    5260:	4007e000 	.word	0x4007e000

00005264 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5264:	b084      	sub	sp, #16
    5266:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5268:	2301      	movs	r3, #1
    526a:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    526c:	4b15      	ldr	r3, [pc, #84]	; (52c4 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    526e:	695b      	ldr	r3, [r3, #20]
    5270:	b2db      	uxtb	r3, r3
    5272:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5274:	9b01      	ldr	r3, [sp, #4]
    5276:	2b02      	cmp	r3, #2
    5278:	d012      	beq.n	52a0 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    527a:	9b01      	ldr	r3, [sp, #4]
    527c:	2b02      	cmp	r3, #2
    527e:	d818      	bhi.n	52b2 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5280:	9b01      	ldr	r3, [sp, #4]
    5282:	2b00      	cmp	r3, #0
    5284:	d003      	beq.n	528e <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5286:	9b01      	ldr	r3, [sp, #4]
    5288:	2b01      	cmp	r3, #1
    528a:	d003      	beq.n	5294 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    528c:	e011      	b.n	52b2 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    528e:	2300      	movs	r3, #0
    5290:	9303      	str	r3, [sp, #12]
            break;
    5292:	e013      	b.n	52bc <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5294:	9b02      	ldr	r3, [sp, #8]
    5296:	2b01      	cmp	r3, #1
    5298:	d10d      	bne.n	52b6 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    529a:	2300      	movs	r3, #0
    529c:	9303      	str	r3, [sp, #12]
            break;
    529e:	e00a      	b.n	52b6 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    52a0:	9b02      	ldr	r3, [sp, #8]
    52a2:	2b01      	cmp	r3, #1
    52a4:	d002      	beq.n	52ac <Power_Ip_SMC_ModeCheckEntry+0x48>
    52a6:	9b02      	ldr	r3, [sp, #8]
    52a8:	2b10      	cmp	r3, #16
    52aa:	d106      	bne.n	52ba <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    52ac:	2300      	movs	r3, #0
    52ae:	9303      	str	r3, [sp, #12]
            break;
    52b0:	e003      	b.n	52ba <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    52b2:	bf00      	nop
    52b4:	e002      	b.n	52bc <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    52b6:	bf00      	nop
    52b8:	e000      	b.n	52bc <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    52ba:	bf00      	nop
        }
    }

    return PowerModeCheck;
    52bc:	9b03      	ldr	r3, [sp, #12]
}
    52be:	4618      	mov	r0, r3
    52c0:	b004      	add	sp, #16
    52c2:	4770      	bx	lr
    52c4:	4007e000 	.word	0x4007e000

000052c8 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    52c8:	b500      	push	{lr}
    52ca:	b08b      	sub	sp, #44	; 0x2c
    52cc:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    52ce:	2300      	movs	r3, #0
    52d0:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    52d2:	2300      	movs	r3, #0
    52d4:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    52d6:	2300      	movs	r3, #0
    52d8:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    52dc:	9b01      	ldr	r3, [sp, #4]
    52de:	685b      	ldr	r3, [r3, #4]
    52e0:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    52e2:	9b08      	ldr	r3, [sp, #32]
    52e4:	2b02      	cmp	r3, #2
    52e6:	d076      	beq.n	53d6 <Power_Ip_SMC_ModeConfig+0x10e>
    52e8:	9b08      	ldr	r3, [sp, #32]
    52ea:	2b02      	cmp	r3, #2
    52ec:	f200 80ab 	bhi.w	5446 <Power_Ip_SMC_ModeConfig+0x17e>
    52f0:	9b08      	ldr	r3, [sp, #32]
    52f2:	2b00      	cmp	r3, #0
    52f4:	d003      	beq.n	52fe <Power_Ip_SMC_ModeConfig+0x36>
    52f6:	9b08      	ldr	r3, [sp, #32]
    52f8:	2b01      	cmp	r3, #1
    52fa:	d034      	beq.n	5366 <Power_Ip_SMC_ModeConfig+0x9e>
    52fc:	e0a3      	b.n	5446 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    52fe:	4b58      	ldr	r3, [pc, #352]	; (5460 <Power_Ip_SMC_ModeConfig+0x198>)
    5300:	68db      	ldr	r3, [r3, #12]
    5302:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5304:	9b06      	ldr	r3, [sp, #24]
    5306:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    530a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    530c:	4a54      	ldr	r2, [pc, #336]	; (5460 <Power_Ip_SMC_ModeConfig+0x198>)
    530e:	9b06      	ldr	r3, [sp, #24]
    5310:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5312:	aa02      	add	r2, sp, #8
    5314:	a903      	add	r1, sp, #12
    5316:	a804      	add	r0, sp, #16
    5318:	f24c 3350 	movw	r3, #50000	; 0xc350
    531c:	f7ff fece 	bl	50bc <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5320:	9a02      	ldr	r2, [sp, #8]
    5322:	a903      	add	r1, sp, #12
    5324:	ab04      	add	r3, sp, #16
    5326:	4618      	mov	r0, r3
    5328:	f7ff fee2 	bl	50f0 <Power_Ip_TimeoutExpired>
    532c:	4603      	mov	r3, r0
    532e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5332:	4b4b      	ldr	r3, [pc, #300]	; (5460 <Power_Ip_SMC_ModeConfig+0x198>)
    5334:	695b      	ldr	r3, [r3, #20]
    5336:	f003 0301 	and.w	r3, r3, #1
    533a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    533c:	9b05      	ldr	r3, [sp, #20]
    533e:	2b01      	cmp	r3, #1
    5340:	d006      	beq.n	5350 <Power_Ip_SMC_ModeConfig+0x88>
    5342:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5346:	f083 0301 	eor.w	r3, r3, #1
    534a:	b2db      	uxtb	r3, r3
    534c:	2b00      	cmp	r3, #0
    534e:	d1e7      	bne.n	5320 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5350:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5354:	2b00      	cmp	r3, #0
    5356:	d079      	beq.n	544c <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5358:	2301      	movs	r3, #1
    535a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    535c:	21ff      	movs	r1, #255	; 0xff
    535e:	2000      	movs	r0, #0
    5360:	f7ff fe90 	bl	5084 <Power_Ip_ReportPowerErrors>
            }

            break;
    5364:	e072      	b.n	544c <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5366:	4b3e      	ldr	r3, [pc, #248]	; (5460 <Power_Ip_SMC_ModeConfig+0x198>)
    5368:	68db      	ldr	r3, [r3, #12]
    536a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    536c:	9b06      	ldr	r3, [sp, #24]
    536e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5372:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5374:	9b06      	ldr	r3, [sp, #24]
    5376:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    537a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    537c:	4a38      	ldr	r2, [pc, #224]	; (5460 <Power_Ip_SMC_ModeConfig+0x198>)
    537e:	9b06      	ldr	r3, [sp, #24]
    5380:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5382:	aa02      	add	r2, sp, #8
    5384:	a903      	add	r1, sp, #12
    5386:	a804      	add	r0, sp, #16
    5388:	f24c 3350 	movw	r3, #50000	; 0xc350
    538c:	f7ff fe96 	bl	50bc <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5390:	9a02      	ldr	r2, [sp, #8]
    5392:	a903      	add	r1, sp, #12
    5394:	ab04      	add	r3, sp, #16
    5396:	4618      	mov	r0, r3
    5398:	f7ff feaa 	bl	50f0 <Power_Ip_TimeoutExpired>
    539c:	4603      	mov	r3, r0
    539e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    53a2:	4b2f      	ldr	r3, [pc, #188]	; (5460 <Power_Ip_SMC_ModeConfig+0x198>)
    53a4:	695b      	ldr	r3, [r3, #20]
    53a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    53aa:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    53ac:	9b05      	ldr	r3, [sp, #20]
    53ae:	2b80      	cmp	r3, #128	; 0x80
    53b0:	d006      	beq.n	53c0 <Power_Ip_SMC_ModeConfig+0xf8>
    53b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53b6:	f083 0301 	eor.w	r3, r3, #1
    53ba:	b2db      	uxtb	r3, r3
    53bc:	2b00      	cmp	r3, #0
    53be:	d1e7      	bne.n	5390 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    53c0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    53c4:	2b00      	cmp	r3, #0
    53c6:	d043      	beq.n	5450 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    53c8:	2301      	movs	r3, #1
    53ca:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    53cc:	21ff      	movs	r1, #255	; 0xff
    53ce:	2000      	movs	r0, #0
    53d0:	f7ff fe58 	bl	5084 <Power_Ip_ReportPowerErrors>
            }

            break;
    53d4:	e03c      	b.n	5450 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    53d6:	4b22      	ldr	r3, [pc, #136]	; (5460 <Power_Ip_SMC_ModeConfig+0x198>)
    53d8:	68db      	ldr	r3, [r3, #12]
    53da:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    53dc:	9b06      	ldr	r3, [sp, #24]
    53de:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    53e2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    53e4:	9b06      	ldr	r3, [sp, #24]
    53e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    53ea:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    53ec:	4a1c      	ldr	r2, [pc, #112]	; (5460 <Power_Ip_SMC_ModeConfig+0x198>)
    53ee:	9b06      	ldr	r3, [sp, #24]
    53f0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    53f2:	aa02      	add	r2, sp, #8
    53f4:	a903      	add	r1, sp, #12
    53f6:	a804      	add	r0, sp, #16
    53f8:	f24c 3350 	movw	r3, #50000	; 0xc350
    53fc:	f7ff fe5e 	bl	50bc <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5400:	9a02      	ldr	r2, [sp, #8]
    5402:	a903      	add	r1, sp, #12
    5404:	ab04      	add	r3, sp, #16
    5406:	4618      	mov	r0, r3
    5408:	f7ff fe72 	bl	50f0 <Power_Ip_TimeoutExpired>
    540c:	4603      	mov	r3, r0
    540e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5412:	4b13      	ldr	r3, [pc, #76]	; (5460 <Power_Ip_SMC_ModeConfig+0x198>)
    5414:	695b      	ldr	r3, [r3, #20]
    5416:	f003 0304 	and.w	r3, r3, #4
    541a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    541c:	9b05      	ldr	r3, [sp, #20]
    541e:	2b04      	cmp	r3, #4
    5420:	d006      	beq.n	5430 <Power_Ip_SMC_ModeConfig+0x168>
    5422:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5426:	f083 0301 	eor.w	r3, r3, #1
    542a:	b2db      	uxtb	r3, r3
    542c:	2b00      	cmp	r3, #0
    542e:	d1e7      	bne.n	5400 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5430:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5434:	2b00      	cmp	r3, #0
    5436:	d00d      	beq.n	5454 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5438:	2301      	movs	r3, #1
    543a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    543c:	21ff      	movs	r1, #255	; 0xff
    543e:	2000      	movs	r0, #0
    5440:	f7ff fe20 	bl	5084 <Power_Ip_ReportPowerErrors>
            }

            break;
    5444:	e006      	b.n	5454 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5446:	2301      	movs	r3, #1
    5448:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    544a:	e004      	b.n	5456 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    544c:	bf00      	nop
    544e:	e002      	b.n	5456 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5450:	bf00      	nop
    5452:	e000      	b.n	5456 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5454:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5456:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5458:	4618      	mov	r0, r3
    545a:	b00b      	add	sp, #44	; 0x2c
    545c:	f85d fb04 	ldr.w	pc, [sp], #4
    5460:	4007e000 	.word	0x4007e000

00005464 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5464:	b500      	push	{lr}
    5466:	b085      	sub	sp, #20
    5468:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    546a:	9b01      	ldr	r3, [sp, #4]
    546c:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    546e:	9803      	ldr	r0, [sp, #12]
    5470:	f000 fbc8 	bl	5c04 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5474:	4a03      	ldr	r2, [pc, #12]	; (5484 <Port_Init+0x20>)
    5476:	9b03      	ldr	r3, [sp, #12]
    5478:	6013      	str	r3, [r2, #0]
        }
    }
}
    547a:	bf00      	nop
    547c:	b005      	add	sp, #20
    547e:	f85d fb04 	ldr.w	pc, [sp], #4
    5482:	bf00      	nop
    5484:	1fff8ce8 	.word	0x1fff8ce8

00005488 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5488:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    548a:	4b03      	ldr	r3, [pc, #12]	; (5498 <Port_RefreshPortDirection+0x10>)
    548c:	681b      	ldr	r3, [r3, #0]
    548e:	4618      	mov	r0, r3
    5490:	f000 fc10 	bl	5cb4 <Port_Ipw_RefreshPortDirection>
    }
}
    5494:	bf00      	nop
    5496:	bd08      	pop	{r3, pc}
    5498:	1fff8ce8 	.word	0x1fff8ce8

0000549c <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    549c:	b086      	sub	sp, #24
    549e:	9003      	str	r0, [sp, #12]
    54a0:	9102      	str	r1, [sp, #8]
    54a2:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    54a4:	23ff      	movs	r3, #255	; 0xff
    54a6:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    54a8:	9b03      	ldr	r3, [sp, #12]
    54aa:	4a39      	ldr	r2, [pc, #228]	; (5590 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    54ac:	4293      	cmp	r3, r2
    54ae:	d151      	bne.n	5554 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    54b0:	9b02      	ldr	r3, [sp, #8]
    54b2:	2b10      	cmp	r3, #16
    54b4:	d867      	bhi.n	5586 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    54b6:	a201      	add	r2, pc, #4	; (adr r2, 54bc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    54b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    54bc:	00005501 	.word	0x00005501
    54c0:	0000550f 	.word	0x0000550f
    54c4:	00005587 	.word	0x00005587
    54c8:	00005587 	.word	0x00005587
    54cc:	00005587 	.word	0x00005587
    54d0:	00005587 	.word	0x00005587
    54d4:	00005587 	.word	0x00005587
    54d8:	00005587 	.word	0x00005587
    54dc:	00005587 	.word	0x00005587
    54e0:	00005587 	.word	0x00005587
    54e4:	00005587 	.word	0x00005587
    54e8:	00005587 	.word	0x00005587
    54ec:	00005587 	.word	0x00005587
    54f0:	0000551d 	.word	0x0000551d
    54f4:	0000552b 	.word	0x0000552b
    54f8:	00005539 	.word	0x00005539
    54fc:	00005547 	.word	0x00005547
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5500:	2301      	movs	r3, #1
    5502:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5504:	9a05      	ldr	r2, [sp, #20]
    5506:	9b01      	ldr	r3, [sp, #4]
    5508:	4313      	orrs	r3, r2
    550a:	9305      	str	r3, [sp, #20]
                break;
    550c:	e03c      	b.n	5588 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    550e:	2302      	movs	r3, #2
    5510:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5512:	9a05      	ldr	r2, [sp, #20]
    5514:	9b01      	ldr	r3, [sp, #4]
    5516:	4313      	orrs	r3, r2
    5518:	9305      	str	r3, [sp, #20]
                break;
    551a:	e035      	b.n	5588 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    551c:	2304      	movs	r3, #4
    551e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5520:	9a05      	ldr	r2, [sp, #20]
    5522:	9b01      	ldr	r3, [sp, #4]
    5524:	4313      	orrs	r3, r2
    5526:	9305      	str	r3, [sp, #20]
                break;
    5528:	e02e      	b.n	5588 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    552a:	2308      	movs	r3, #8
    552c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    552e:	9a05      	ldr	r2, [sp, #20]
    5530:	9b01      	ldr	r3, [sp, #4]
    5532:	4313      	orrs	r3, r2
    5534:	9305      	str	r3, [sp, #20]
                break;
    5536:	e027      	b.n	5588 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5538:	230e      	movs	r3, #14
    553a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    553c:	9a05      	ldr	r2, [sp, #20]
    553e:	9b01      	ldr	r3, [sp, #4]
    5540:	4013      	ands	r3, r2
    5542:	9305      	str	r3, [sp, #20]
                break;
    5544:	e020      	b.n	5588 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5546:	230d      	movs	r3, #13
    5548:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    554a:	9a05      	ldr	r2, [sp, #20]
    554c:	9b01      	ldr	r3, [sp, #4]
    554e:	4013      	ands	r3, r2
    5550:	9305      	str	r3, [sp, #20]
                break;
    5552:	e019      	b.n	5588 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5554:	9b03      	ldr	r3, [sp, #12]
    5556:	4a0f      	ldr	r2, [pc, #60]	; (5594 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5558:	4293      	cmp	r3, r2
    555a:	d115      	bne.n	5588 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    555c:	9b02      	ldr	r3, [sp, #8]
    555e:	2b00      	cmp	r3, #0
    5560:	d003      	beq.n	556a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5562:	9b02      	ldr	r3, [sp, #8]
    5564:	2b01      	cmp	r3, #1
    5566:	d007      	beq.n	5578 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5568:	e00e      	b.n	5588 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    556a:	230b      	movs	r3, #11
    556c:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    556e:	9a05      	ldr	r2, [sp, #20]
    5570:	9b01      	ldr	r3, [sp, #4]
    5572:	4013      	ands	r3, r2
    5574:	9305      	str	r3, [sp, #20]
                break;
    5576:	e007      	b.n	5588 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    5578:	2307      	movs	r3, #7
    557a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    557c:	9a05      	ldr	r2, [sp, #20]
    557e:	9b01      	ldr	r3, [sp, #4]
    5580:	4013      	ands	r3, r2
    5582:	9305      	str	r3, [sp, #20]
                break;
    5584:	e000      	b.n	5588 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    5586:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    5588:	9b05      	ldr	r3, [sp, #20]
}
    558a:	4618      	mov	r0, r3
    558c:	b006      	add	sp, #24
    558e:	4770      	bx	lr
    5590:	4004a000 	.word	0x4004a000
    5594:	4004b000 	.word	0x4004b000

00005598 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    5598:	b500      	push	{lr}
    559a:	b089      	sub	sp, #36	; 0x24
    559c:	9003      	str	r0, [sp, #12]
    559e:	9102      	str	r1, [sp, #8]
    55a0:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    55a2:	9b01      	ldr	r3, [sp, #4]
    55a4:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    55a6:	9b01      	ldr	r3, [sp, #4]
    55a8:	2b08      	cmp	r3, #8
    55aa:	d121      	bne.n	55f0 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    55ac:	4b13      	ldr	r3, [pc, #76]	; (55fc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    55ae:	685b      	ldr	r3, [r3, #4]
    55b0:	f003 030f 	and.w	r3, r3, #15
    55b4:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    55b6:	9a06      	ldr	r2, [sp, #24]
    55b8:	9902      	ldr	r1, [sp, #8]
    55ba:	9803      	ldr	r0, [sp, #12]
    55bc:	f7ff ff6e 	bl	549c <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    55c0:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    55c2:	9b05      	ldr	r3, [sp, #20]
    55c4:	2bff      	cmp	r3, #255	; 0xff
    55c6:	d011      	beq.n	55ec <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    55c8:	f007 fc64 	bl	ce94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    55cc:	4b0b      	ldr	r3, [pc, #44]	; (55fc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    55ce:	685b      	ldr	r3, [r3, #4]
    55d0:	4a0a      	ldr	r2, [pc, #40]	; (55fc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    55d2:	f023 030f 	bic.w	r3, r3, #15
    55d6:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    55d8:	4b08      	ldr	r3, [pc, #32]	; (55fc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    55da:	685a      	ldr	r2, [r3, #4]
    55dc:	9b05      	ldr	r3, [sp, #20]
    55de:	f003 030f 	and.w	r3, r3, #15
    55e2:	4906      	ldr	r1, [pc, #24]	; (55fc <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    55e4:	4313      	orrs	r3, r2
    55e6:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    55e8:	f007 fc80 	bl	ceec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    55ec:	2300      	movs	r3, #0
    55ee:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    55f0:	9b07      	ldr	r3, [sp, #28]
}
    55f2:	4618      	mov	r0, r3
    55f4:	b009      	add	sp, #36	; 0x24
    55f6:	f85d fb04 	ldr.w	pc, [sp], #4
    55fa:	bf00      	nop
    55fc:	40048000 	.word	0x40048000

00005600 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    5600:	b500      	push	{lr}
    5602:	b087      	sub	sp, #28
    5604:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    5606:	2300      	movs	r3, #0
    5608:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    560a:	2300      	movs	r3, #0
    560c:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    560e:	2300      	movs	r3, #0
    5610:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    5612:	9b01      	ldr	r3, [sp, #4]
    5614:	68db      	ldr	r3, [r3, #12]
    5616:	2b02      	cmp	r3, #2
    5618:	d00a      	beq.n	5630 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    561a:	9b05      	ldr	r3, [sp, #20]
    561c:	f043 0302 	orr.w	r3, r3, #2
    5620:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    5622:	9b01      	ldr	r3, [sp, #4]
    5624:	68db      	ldr	r3, [r3, #12]
    5626:	f003 0301 	and.w	r3, r3, #1
    562a:	9a05      	ldr	r2, [sp, #20]
    562c:	4313      	orrs	r3, r2
    562e:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    5630:	9b01      	ldr	r3, [sp, #4]
    5632:	699b      	ldr	r3, [r3, #24]
    5634:	019b      	lsls	r3, r3, #6
    5636:	f003 0340 	and.w	r3, r3, #64	; 0x40
    563a:	9a05      	ldr	r2, [sp, #20]
    563c:	4313      	orrs	r3, r2
    563e:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    5640:	9b01      	ldr	r3, [sp, #4]
    5642:	6a1b      	ldr	r3, [r3, #32]
    5644:	03db      	lsls	r3, r3, #15
    5646:	b29b      	uxth	r3, r3
    5648:	9a05      	ldr	r2, [sp, #20]
    564a:	4313      	orrs	r3, r2
    564c:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    564e:	9b01      	ldr	r3, [sp, #4]
    5650:	7f1b      	ldrb	r3, [r3, #28]
    5652:	2b00      	cmp	r3, #0
    5654:	d001      	beq.n	565a <Port_Ci_Port_Ip_PinInit+0x5a>
    5656:	2310      	movs	r3, #16
    5658:	e000      	b.n	565c <Port_Ci_Port_Ip_PinInit+0x5c>
    565a:	2300      	movs	r3, #0
    565c:	9a05      	ldr	r2, [sp, #20]
    565e:	4313      	orrs	r3, r2
    5660:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    5662:	9b01      	ldr	r3, [sp, #4]
    5664:	691b      	ldr	r3, [r3, #16]
    5666:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    5668:	9b01      	ldr	r3, [sp, #4]
    566a:	6818      	ldr	r0, [r3, #0]
    566c:	9b01      	ldr	r3, [sp, #4]
    566e:	689b      	ldr	r3, [r3, #8]
    5670:	9a04      	ldr	r2, [sp, #16]
    5672:	4619      	mov	r1, r3
    5674:	f7ff ff90 	bl	5598 <Port_Ci_Port_Ip_ConfigureInterleave>
    5678:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    567a:	9b03      	ldr	r3, [sp, #12]
    567c:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    567e:	9b04      	ldr	r3, [sp, #16]
    5680:	021b      	lsls	r3, r3, #8
    5682:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5686:	9a05      	ldr	r2, [sp, #20]
    5688:	4313      	orrs	r3, r2
    568a:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    568c:	f007 fa68 	bl	cb60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    5690:	9b01      	ldr	r3, [sp, #4]
    5692:	681b      	ldr	r3, [r3, #0]
    5694:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    5698:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    569a:	9b01      	ldr	r3, [sp, #4]
    569c:	689b      	ldr	r3, [r3, #8]
    569e:	2201      	movs	r2, #1
    56a0:	fa02 f303 	lsl.w	r3, r2, r3
    56a4:	43db      	mvns	r3, r3
    56a6:	9a02      	ldr	r2, [sp, #8]
    56a8:	4013      	ands	r3, r2
    56aa:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    56ac:	9b01      	ldr	r3, [sp, #4]
    56ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    56b2:	2b00      	cmp	r3, #0
    56b4:	d001      	beq.n	56ba <Port_Ci_Port_Ip_PinInit+0xba>
    56b6:	2201      	movs	r2, #1
    56b8:	e000      	b.n	56bc <Port_Ci_Port_Ip_PinInit+0xbc>
    56ba:	2200      	movs	r2, #0
    56bc:	9b01      	ldr	r3, [sp, #4]
    56be:	689b      	ldr	r3, [r3, #8]
    56c0:	fa02 f303 	lsl.w	r3, r2, r3
    56c4:	9a02      	ldr	r2, [sp, #8]
    56c6:	4313      	orrs	r3, r2
    56c8:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    56ca:	9b01      	ldr	r3, [sp, #4]
    56cc:	681b      	ldr	r3, [r3, #0]
    56ce:	9a02      	ldr	r2, [sp, #8]
    56d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    56d4:	f007 fa70 	bl	cbb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    56d8:	9b04      	ldr	r3, [sp, #16]
    56da:	2b01      	cmp	r3, #1
    56dc:	d16d      	bne.n	57ba <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    56de:	9b01      	ldr	r3, [sp, #4]
    56e0:	695b      	ldr	r3, [r3, #20]
    56e2:	2b02      	cmp	r3, #2
    56e4:	d138      	bne.n	5758 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    56e6:	9b01      	ldr	r3, [sp, #4]
    56e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    56ec:	2b01      	cmp	r3, #1
    56ee:	d10f      	bne.n	5710 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    56f0:	f007 fa88 	bl	cc04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    56f4:	9b01      	ldr	r3, [sp, #4]
    56f6:	685b      	ldr	r3, [r3, #4]
    56f8:	6859      	ldr	r1, [r3, #4]
    56fa:	9b01      	ldr	r3, [sp, #4]
    56fc:	689b      	ldr	r3, [r3, #8]
    56fe:	2201      	movs	r2, #1
    5700:	409a      	lsls	r2, r3
    5702:	9b01      	ldr	r3, [sp, #4]
    5704:	685b      	ldr	r3, [r3, #4]
    5706:	430a      	orrs	r2, r1
    5708:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    570a:	f007 faa7 	bl	cc5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    570e:	e013      	b.n	5738 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    5710:	9b01      	ldr	r3, [sp, #4]
    5712:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5716:	2b00      	cmp	r3, #0
    5718:	d10e      	bne.n	5738 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    571a:	f007 fac5 	bl	cca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    571e:	9b01      	ldr	r3, [sp, #4]
    5720:	685b      	ldr	r3, [r3, #4]
    5722:	6899      	ldr	r1, [r3, #8]
    5724:	9b01      	ldr	r3, [sp, #4]
    5726:	689b      	ldr	r3, [r3, #8]
    5728:	2201      	movs	r2, #1
    572a:	409a      	lsls	r2, r3
    572c:	9b01      	ldr	r3, [sp, #4]
    572e:	685b      	ldr	r3, [r3, #4]
    5730:	430a      	orrs	r2, r1
    5732:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    5734:	f007 fae4 	bl	cd00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5738:	f007 fb08 	bl	cd4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    573c:	9b01      	ldr	r3, [sp, #4]
    573e:	685b      	ldr	r3, [r3, #4]
    5740:	6959      	ldr	r1, [r3, #20]
    5742:	9b01      	ldr	r3, [sp, #4]
    5744:	689b      	ldr	r3, [r3, #8]
    5746:	2201      	movs	r2, #1
    5748:	409a      	lsls	r2, r3
    574a:	9b01      	ldr	r3, [sp, #4]
    574c:	685b      	ldr	r3, [r3, #4]
    574e:	430a      	orrs	r2, r1
    5750:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5752:	f007 fb27 	bl	cda4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    5756:	e030      	b.n	57ba <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    5758:	f007 faf8 	bl	cd4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    575c:	9b01      	ldr	r3, [sp, #4]
    575e:	685b      	ldr	r3, [r3, #4]
    5760:	6959      	ldr	r1, [r3, #20]
    5762:	9b01      	ldr	r3, [sp, #4]
    5764:	689b      	ldr	r3, [r3, #8]
    5766:	2201      	movs	r2, #1
    5768:	fa02 f303 	lsl.w	r3, r2, r3
    576c:	43da      	mvns	r2, r3
    576e:	9b01      	ldr	r3, [sp, #4]
    5770:	685b      	ldr	r3, [r3, #4]
    5772:	400a      	ands	r2, r1
    5774:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    5776:	f007 fb15 	bl	cda4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    577a:	f007 fb39 	bl	cdf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    577e:	9b01      	ldr	r3, [sp, #4]
    5780:	685b      	ldr	r3, [r3, #4]
    5782:	6999      	ldr	r1, [r3, #24]
    5784:	9b01      	ldr	r3, [sp, #4]
    5786:	689b      	ldr	r3, [r3, #8]
    5788:	2201      	movs	r2, #1
    578a:	fa02 f303 	lsl.w	r3, r2, r3
    578e:	43da      	mvns	r2, r3
    5790:	9b01      	ldr	r3, [sp, #4]
    5792:	685b      	ldr	r3, [r3, #4]
    5794:	400a      	ands	r2, r1
    5796:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    5798:	9b01      	ldr	r3, [sp, #4]
    579a:	695b      	ldr	r3, [r3, #20]
    579c:	2b03      	cmp	r3, #3
    579e:	d10a      	bne.n	57b6 <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    57a0:	9b01      	ldr	r3, [sp, #4]
    57a2:	685b      	ldr	r3, [r3, #4]
    57a4:	6999      	ldr	r1, [r3, #24]
    57a6:	9b01      	ldr	r3, [sp, #4]
    57a8:	689b      	ldr	r3, [r3, #8]
    57aa:	2201      	movs	r2, #1
    57ac:	409a      	lsls	r2, r3
    57ae:	9b01      	ldr	r3, [sp, #4]
    57b0:	685b      	ldr	r3, [r3, #4]
    57b2:	430a      	orrs	r2, r1
    57b4:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    57b6:	f007 fb47 	bl	ce48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    57ba:	9b01      	ldr	r3, [sp, #4]
    57bc:	681b      	ldr	r3, [r3, #0]
    57be:	9a01      	ldr	r2, [sp, #4]
    57c0:	6892      	ldr	r2, [r2, #8]
    57c2:	9905      	ldr	r1, [sp, #20]
    57c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    57c8:	bf00      	nop
    57ca:	b007      	add	sp, #28
    57cc:	f85d fb04 	ldr.w	pc, [sp], #4

000057d0 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    57d0:	b500      	push	{lr}
    57d2:	b085      	sub	sp, #20
    57d4:	9001      	str	r0, [sp, #4]
    57d6:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    57d8:	2300      	movs	r3, #0
    57da:	9303      	str	r3, [sp, #12]
    57dc:	e00d      	b.n	57fa <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    57de:	9a03      	ldr	r2, [sp, #12]
    57e0:	4613      	mov	r3, r2
    57e2:	009b      	lsls	r3, r3, #2
    57e4:	4413      	add	r3, r2
    57e6:	00db      	lsls	r3, r3, #3
    57e8:	461a      	mov	r2, r3
    57ea:	9b00      	ldr	r3, [sp, #0]
    57ec:	4413      	add	r3, r2
    57ee:	4618      	mov	r0, r3
    57f0:	f7ff ff06 	bl	5600 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    57f4:	9b03      	ldr	r3, [sp, #12]
    57f6:	3301      	adds	r3, #1
    57f8:	9303      	str	r3, [sp, #12]
    57fa:	9a03      	ldr	r2, [sp, #12]
    57fc:	9b01      	ldr	r3, [sp, #4]
    57fe:	429a      	cmp	r2, r3
    5800:	d3ed      	bcc.n	57de <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    5802:	2300      	movs	r3, #0
}
    5804:	4618      	mov	r0, r3
    5806:	b005      	add	sp, #20
    5808:	f85d fb04 	ldr.w	pc, [sp], #4

0000580c <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    580c:	b500      	push	{lr}
    580e:	b087      	sub	sp, #28
    5810:	9003      	str	r0, [sp, #12]
    5812:	9102      	str	r1, [sp, #8]
    5814:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    5816:	9a01      	ldr	r2, [sp, #4]
    5818:	9902      	ldr	r1, [sp, #8]
    581a:	9803      	ldr	r0, [sp, #12]
    581c:	f7ff febc 	bl	5598 <Port_Ci_Port_Ip_ConfigureInterleave>
    5820:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    5822:	f007 fb89 	bl	cf38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    5826:	9b03      	ldr	r3, [sp, #12]
    5828:	9a02      	ldr	r2, [sp, #8]
    582a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    582e:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    5830:	9b04      	ldr	r3, [sp, #16]
    5832:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    5836:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    5838:	9b05      	ldr	r3, [sp, #20]
    583a:	021b      	lsls	r3, r3, #8
    583c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5840:	9a04      	ldr	r2, [sp, #16]
    5842:	4313      	orrs	r3, r2
    5844:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    5846:	9b03      	ldr	r3, [sp, #12]
    5848:	9a02      	ldr	r2, [sp, #8]
    584a:	9904      	ldr	r1, [sp, #16]
    584c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    5850:	f007 fb9e 	bl	cf90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    5854:	bf00      	nop
    5856:	b007      	add	sp, #28
    5858:	f85d fb04 	ldr.w	pc, [sp], #4

0000585c <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    585c:	b500      	push	{lr}
    585e:	b083      	sub	sp, #12
    5860:	9001      	str	r0, [sp, #4]
    5862:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    5864:	f007 fbba 	bl	cfdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    5868:	9b01      	ldr	r3, [sp, #4]
    586a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    586e:	2101      	movs	r1, #1
    5870:	9b00      	ldr	r3, [sp, #0]
    5872:	fa01 f303 	lsl.w	r3, r1, r3
    5876:	431a      	orrs	r2, r3
    5878:	9b01      	ldr	r3, [sp, #4]
    587a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    587e:	f007 fbd9 	bl	d034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    5882:	bf00      	nop
    5884:	b003      	add	sp, #12
    5886:	f85d fb04 	ldr.w	pc, [sp], #4

0000588a <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    588a:	b500      	push	{lr}
    588c:	b083      	sub	sp, #12
    588e:	9001      	str	r0, [sp, #4]
    5890:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    5892:	f007 fbf5 	bl	d080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    5896:	9b01      	ldr	r3, [sp, #4]
    5898:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    589c:	2101      	movs	r1, #1
    589e:	9b00      	ldr	r3, [sp, #0]
    58a0:	fa01 f303 	lsl.w	r3, r1, r3
    58a4:	43db      	mvns	r3, r3
    58a6:	401a      	ands	r2, r3
    58a8:	9b01      	ldr	r3, [sp, #4]
    58aa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    58ae:	f007 fc13 	bl	d0d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    58b2:	bf00      	nop
    58b4:	b003      	add	sp, #12
    58b6:	f85d fb04 	ldr.w	pc, [sp], #4

000058ba <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    58ba:	b082      	sub	sp, #8
    58bc:	9001      	str	r0, [sp, #4]
    58be:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    58c0:	9b00      	ldr	r3, [sp, #0]
    58c2:	785b      	ldrb	r3, [r3, #1]
    58c4:	f003 0201 	and.w	r2, r3, #1
    58c8:	9b01      	ldr	r3, [sp, #4]
    58ca:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    58ce:	9b00      	ldr	r3, [sp, #0]
    58d0:	789b      	ldrb	r3, [r3, #2]
    58d2:	f003 021f 	and.w	r2, r3, #31
    58d6:	9b01      	ldr	r3, [sp, #4]
    58d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    58dc:	bf00      	nop
    58de:	b002      	add	sp, #8
    58e0:	4770      	bx	lr

000058e2 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    58e2:	b086      	sub	sp, #24
    58e4:	9003      	str	r0, [sp, #12]
    58e6:	9301      	str	r3, [sp, #4]
    58e8:	460b      	mov	r3, r1
    58ea:	f8ad 300a 	strh.w	r3, [sp, #10]
    58ee:	4613      	mov	r3, r2
    58f0:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    58f4:	2300      	movs	r3, #0
    58f6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    58fa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    58fe:	f043 0301 	orr.w	r3, r3, #1
    5902:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    5906:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    590a:	f043 0302 	orr.w	r3, r3, #2
    590e:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    5912:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5916:	f043 0310 	orr.w	r3, r3, #16
    591a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    591e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5926:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    592a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    592e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    5932:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    5936:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    593a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    593e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    5942:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    5946:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    594a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    594e:	4013      	ands	r3, r2
    5950:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    5954:	9b01      	ldr	r3, [sp, #4]
    5956:	2b00      	cmp	r3, #0
    5958:	d003      	beq.n	5962 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    595a:	9b01      	ldr	r3, [sp, #4]
    595c:	2b01      	cmp	r3, #1
    595e:	d00a      	beq.n	5976 <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    5960:	e013      	b.n	598a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    5962:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5966:	041a      	lsls	r2, r3, #16
    5968:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    596c:	431a      	orrs	r2, r3
    596e:	9b03      	ldr	r3, [sp, #12]
    5970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    5974:	e009      	b.n	598a <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    5976:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    597a:	041a      	lsls	r2, r3, #16
    597c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5980:	431a      	orrs	r2, r3
    5982:	9b03      	ldr	r3, [sp, #12]
    5984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    5988:	bf00      	nop
    }
}
    598a:	bf00      	nop
    598c:	b006      	add	sp, #24
    598e:	4770      	bx	lr

00005990 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    5990:	b500      	push	{lr}
    5992:	b087      	sub	sp, #28
    5994:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    5996:	9b01      	ldr	r3, [sp, #4]
    5998:	885b      	ldrh	r3, [r3, #2]
    599a:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    599e:	9b01      	ldr	r3, [sp, #4]
    59a0:	689b      	ldr	r3, [r3, #8]
    59a2:	7a1b      	ldrb	r3, [r3, #8]
    59a4:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    59a8:	9b01      	ldr	r3, [sp, #4]
    59aa:	689b      	ldr	r3, [r3, #8]
    59ac:	681b      	ldr	r3, [r3, #0]
    59ae:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    59b0:	9b01      	ldr	r3, [sp, #4]
    59b2:	689b      	ldr	r3, [r3, #8]
    59b4:	685b      	ldr	r3, [r3, #4]
    59b6:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    59b8:	2300      	movs	r3, #0
    59ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    59be:	e111      	b.n	5be4 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    59c0:	9b02      	ldr	r3, [sp, #8]
    59c2:	2b02      	cmp	r3, #2
    59c4:	d169      	bne.n	5a9a <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    59c6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    59ca:	2b01      	cmp	r3, #1
    59cc:	d11a      	bne.n	5a04 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    59ce:	9b01      	ldr	r3, [sp, #4]
    59d0:	685a      	ldr	r2, [r3, #4]
    59d2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59d6:	005b      	lsls	r3, r3, #1
    59d8:	4413      	add	r3, r2
    59da:	881b      	ldrh	r3, [r3, #0]
    59dc:	f003 021f 	and.w	r2, r3, #31
    59e0:	9b01      	ldr	r3, [sp, #4]
    59e2:	6859      	ldr	r1, [r3, #4]
    59e4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    59e8:	005b      	lsls	r3, r3, #1
    59ea:	440b      	add	r3, r1
    59ec:	881b      	ldrh	r3, [r3, #0]
    59ee:	095b      	lsrs	r3, r3, #5
    59f0:	b29b      	uxth	r3, r3
    59f2:	4619      	mov	r1, r3
    59f4:	4b81      	ldr	r3, [pc, #516]	; (5bfc <Port_Ipw_Init_UnusedPins+0x26c>)
    59f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    59fa:	2101      	movs	r1, #1
    59fc:	fa01 f202 	lsl.w	r2, r1, r2
    5a00:	605a      	str	r2, [r3, #4]
    5a02:	e01d      	b.n	5a40 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    5a04:	f89d 3013 	ldrb.w	r3, [sp, #19]
    5a08:	2b00      	cmp	r3, #0
    5a0a:	d119      	bne.n	5a40 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5a0c:	9b01      	ldr	r3, [sp, #4]
    5a0e:	685a      	ldr	r2, [r3, #4]
    5a10:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a14:	005b      	lsls	r3, r3, #1
    5a16:	4413      	add	r3, r2
    5a18:	881b      	ldrh	r3, [r3, #0]
    5a1a:	f003 021f 	and.w	r2, r3, #31
    5a1e:	9b01      	ldr	r3, [sp, #4]
    5a20:	6859      	ldr	r1, [r3, #4]
    5a22:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a26:	005b      	lsls	r3, r3, #1
    5a28:	440b      	add	r3, r1
    5a2a:	881b      	ldrh	r3, [r3, #0]
    5a2c:	095b      	lsrs	r3, r3, #5
    5a2e:	b29b      	uxth	r3, r3
    5a30:	4619      	mov	r1, r3
    5a32:	4b72      	ldr	r3, [pc, #456]	; (5bfc <Port_Ipw_Init_UnusedPins+0x26c>)
    5a34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5a38:	2101      	movs	r1, #1
    5a3a:	fa01 f202 	lsl.w	r2, r1, r2
    5a3e:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5a40:	f007 fb70 	bl	d124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5a44:	9b01      	ldr	r3, [sp, #4]
    5a46:	685a      	ldr	r2, [r3, #4]
    5a48:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a4c:	005b      	lsls	r3, r3, #1
    5a4e:	4413      	add	r3, r2
    5a50:	881b      	ldrh	r3, [r3, #0]
    5a52:	095b      	lsrs	r3, r3, #5
    5a54:	b29b      	uxth	r3, r3
    5a56:	461a      	mov	r2, r3
    5a58:	4b68      	ldr	r3, [pc, #416]	; (5bfc <Port_Ipw_Init_UnusedPins+0x26c>)
    5a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5a5e:	6959      	ldr	r1, [r3, #20]
    5a60:	9b01      	ldr	r3, [sp, #4]
    5a62:	685a      	ldr	r2, [r3, #4]
    5a64:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a68:	005b      	lsls	r3, r3, #1
    5a6a:	4413      	add	r3, r2
    5a6c:	881b      	ldrh	r3, [r3, #0]
    5a6e:	f003 031f 	and.w	r3, r3, #31
    5a72:	2201      	movs	r2, #1
    5a74:	409a      	lsls	r2, r3
    5a76:	9b01      	ldr	r3, [sp, #4]
    5a78:	6858      	ldr	r0, [r3, #4]
    5a7a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5a7e:	005b      	lsls	r3, r3, #1
    5a80:	4403      	add	r3, r0
    5a82:	881b      	ldrh	r3, [r3, #0]
    5a84:	095b      	lsrs	r3, r3, #5
    5a86:	b29b      	uxth	r3, r3
    5a88:	4618      	mov	r0, r3
    5a8a:	4b5c      	ldr	r3, [pc, #368]	; (5bfc <Port_Ipw_Init_UnusedPins+0x26c>)
    5a8c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5a90:	430a      	orrs	r2, r1
    5a92:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5a94:	f007 fb72 	bl	d17c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    5a98:	e086      	b.n	5ba8 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    5a9a:	f007 fb43 	bl	d124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    5a9e:	9b01      	ldr	r3, [sp, #4]
    5aa0:	685a      	ldr	r2, [r3, #4]
    5aa2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5aa6:	005b      	lsls	r3, r3, #1
    5aa8:	4413      	add	r3, r2
    5aaa:	881b      	ldrh	r3, [r3, #0]
    5aac:	095b      	lsrs	r3, r3, #5
    5aae:	b29b      	uxth	r3, r3
    5ab0:	461a      	mov	r2, r3
    5ab2:	4b52      	ldr	r3, [pc, #328]	; (5bfc <Port_Ipw_Init_UnusedPins+0x26c>)
    5ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5ab8:	6959      	ldr	r1, [r3, #20]
    5aba:	9b01      	ldr	r3, [sp, #4]
    5abc:	685a      	ldr	r2, [r3, #4]
    5abe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5ac2:	005b      	lsls	r3, r3, #1
    5ac4:	4413      	add	r3, r2
    5ac6:	881b      	ldrh	r3, [r3, #0]
    5ac8:	f003 031f 	and.w	r3, r3, #31
    5acc:	2201      	movs	r2, #1
    5ace:	fa02 f303 	lsl.w	r3, r2, r3
    5ad2:	43da      	mvns	r2, r3
    5ad4:	9b01      	ldr	r3, [sp, #4]
    5ad6:	6858      	ldr	r0, [r3, #4]
    5ad8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5adc:	005b      	lsls	r3, r3, #1
    5ade:	4403      	add	r3, r0
    5ae0:	881b      	ldrh	r3, [r3, #0]
    5ae2:	095b      	lsrs	r3, r3, #5
    5ae4:	b29b      	uxth	r3, r3
    5ae6:	4618      	mov	r0, r3
    5ae8:	4b44      	ldr	r3, [pc, #272]	; (5bfc <Port_Ipw_Init_UnusedPins+0x26c>)
    5aea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5aee:	400a      	ands	r2, r1
    5af0:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    5af2:	f007 fb43 	bl	d17c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    5af6:	f007 fb67 	bl	d1c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5afa:	9b01      	ldr	r3, [sp, #4]
    5afc:	685a      	ldr	r2, [r3, #4]
    5afe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b02:	005b      	lsls	r3, r3, #1
    5b04:	4413      	add	r3, r2
    5b06:	881b      	ldrh	r3, [r3, #0]
    5b08:	095b      	lsrs	r3, r3, #5
    5b0a:	b29b      	uxth	r3, r3
    5b0c:	461a      	mov	r2, r3
    5b0e:	4b3b      	ldr	r3, [pc, #236]	; (5bfc <Port_Ipw_Init_UnusedPins+0x26c>)
    5b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b14:	6999      	ldr	r1, [r3, #24]
    5b16:	9b01      	ldr	r3, [sp, #4]
    5b18:	685a      	ldr	r2, [r3, #4]
    5b1a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b1e:	005b      	lsls	r3, r3, #1
    5b20:	4413      	add	r3, r2
    5b22:	881b      	ldrh	r3, [r3, #0]
    5b24:	f003 031f 	and.w	r3, r3, #31
    5b28:	2201      	movs	r2, #1
    5b2a:	fa02 f303 	lsl.w	r3, r2, r3
    5b2e:	43da      	mvns	r2, r3
    5b30:	9b01      	ldr	r3, [sp, #4]
    5b32:	6858      	ldr	r0, [r3, #4]
    5b34:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b38:	005b      	lsls	r3, r3, #1
    5b3a:	4403      	add	r3, r0
    5b3c:	881b      	ldrh	r3, [r3, #0]
    5b3e:	095b      	lsrs	r3, r3, #5
    5b40:	b29b      	uxth	r3, r3
    5b42:	4618      	mov	r0, r3
    5b44:	4b2d      	ldr	r3, [pc, #180]	; (5bfc <Port_Ipw_Init_UnusedPins+0x26c>)
    5b46:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5b4a:	400a      	ands	r2, r1
    5b4c:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    5b4e:	9b02      	ldr	r3, [sp, #8]
    5b50:	2b03      	cmp	r3, #3
    5b52:	d127      	bne.n	5ba4 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    5b54:	9b01      	ldr	r3, [sp, #4]
    5b56:	685a      	ldr	r2, [r3, #4]
    5b58:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b5c:	005b      	lsls	r3, r3, #1
    5b5e:	4413      	add	r3, r2
    5b60:	881b      	ldrh	r3, [r3, #0]
    5b62:	095b      	lsrs	r3, r3, #5
    5b64:	b29b      	uxth	r3, r3
    5b66:	461a      	mov	r2, r3
    5b68:	4b24      	ldr	r3, [pc, #144]	; (5bfc <Port_Ipw_Init_UnusedPins+0x26c>)
    5b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5b6e:	6999      	ldr	r1, [r3, #24]
    5b70:	9b01      	ldr	r3, [sp, #4]
    5b72:	685a      	ldr	r2, [r3, #4]
    5b74:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b78:	005b      	lsls	r3, r3, #1
    5b7a:	4413      	add	r3, r2
    5b7c:	881b      	ldrh	r3, [r3, #0]
    5b7e:	f003 031f 	and.w	r3, r3, #31
    5b82:	2201      	movs	r2, #1
    5b84:	409a      	lsls	r2, r3
    5b86:	9b01      	ldr	r3, [sp, #4]
    5b88:	6858      	ldr	r0, [r3, #4]
    5b8a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5b8e:	005b      	lsls	r3, r3, #1
    5b90:	4403      	add	r3, r0
    5b92:	881b      	ldrh	r3, [r3, #0]
    5b94:	095b      	lsrs	r3, r3, #5
    5b96:	b29b      	uxth	r3, r3
    5b98:	4618      	mov	r0, r3
    5b9a:	4b18      	ldr	r3, [pc, #96]	; (5bfc <Port_Ipw_Init_UnusedPins+0x26c>)
    5b9c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5ba0:	430a      	orrs	r2, r1
    5ba2:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    5ba4:	f007 fb3c 	bl	d220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    5ba8:	9b01      	ldr	r3, [sp, #4]
    5baa:	685a      	ldr	r2, [r3, #4]
    5bac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5bb0:	005b      	lsls	r3, r3, #1
    5bb2:	4413      	add	r3, r2
    5bb4:	881b      	ldrh	r3, [r3, #0]
    5bb6:	095b      	lsrs	r3, r3, #5
    5bb8:	b29b      	uxth	r3, r3
    5bba:	461a      	mov	r2, r3
    5bbc:	4b10      	ldr	r3, [pc, #64]	; (5c00 <Port_Ipw_Init_UnusedPins+0x270>)
    5bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5bc2:	9a01      	ldr	r2, [sp, #4]
    5bc4:	6851      	ldr	r1, [r2, #4]
    5bc6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5bca:	0052      	lsls	r2, r2, #1
    5bcc:	440a      	add	r2, r1
    5bce:	8812      	ldrh	r2, [r2, #0]
    5bd0:	f002 021f 	and.w	r2, r2, #31
    5bd4:	9903      	ldr	r1, [sp, #12]
    5bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    5bda:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    5bde:	3301      	adds	r3, #1
    5be0:	f8ad 3016 	strh.w	r3, [sp, #22]
    5be4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    5be8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    5bec:	429a      	cmp	r2, r3
    5bee:	f4ff aee7 	bcc.w	59c0 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    5bf2:	bf00      	nop
    5bf4:	bf00      	nop
    5bf6:	b007      	add	sp, #28
    5bf8:	f85d fb04 	ldr.w	pc, [sp], #4
    5bfc:	0000e650 	.word	0x0000e650
    5c00:	0000e63c 	.word	0x0000e63c

00005c04 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    5c04:	b500      	push	{lr}
    5c06:	b085      	sub	sp, #20
    5c08:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    5c0a:	9b01      	ldr	r3, [sp, #4]
    5c0c:	7c1b      	ldrb	r3, [r3, #16]
    5c0e:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5c12:	2300      	movs	r3, #0
    5c14:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c18:	e035      	b.n	5c86 <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    5c1a:	9b01      	ldr	r3, [sp, #4]
    5c1c:	695a      	ldr	r2, [r3, #20]
    5c1e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c22:	00db      	lsls	r3, r3, #3
    5c24:	4413      	add	r3, r2
    5c26:	781b      	ldrb	r3, [r3, #0]
    5c28:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    5c2c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c30:	4a1f      	ldr	r2, [pc, #124]	; (5cb0 <Port_Ipw_Init+0xac>)
    5c32:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    5c36:	9b01      	ldr	r3, [sp, #4]
    5c38:	695a      	ldr	r2, [r3, #20]
    5c3a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c3e:	00db      	lsls	r3, r3, #3
    5c40:	4413      	add	r3, r2
    5c42:	4619      	mov	r1, r3
    5c44:	f7ff fe39 	bl	58ba <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    5c48:	f007 fc58 	bl	d4fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    5c4c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c50:	4a17      	ldr	r2, [pc, #92]	; (5cb0 <Port_Ipw_Init+0xac>)
    5c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5c56:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    5c5a:	9b01      	ldr	r3, [sp, #4]
    5c5c:	695a      	ldr	r2, [r3, #20]
    5c5e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c62:	00db      	lsls	r3, r3, #3
    5c64:	4413      	add	r3, r2
    5c66:	685a      	ldr	r2, [r3, #4]
    5c68:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5c6c:	4810      	ldr	r0, [pc, #64]	; (5cb0 <Port_Ipw_Init+0xac>)
    5c6e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5c72:	430a      	orrs	r2, r1
    5c74:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    5c78:	f007 fc6c 	bl	d554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    5c7c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5c80:	3301      	adds	r3, #1
    5c82:	f8ad 300e 	strh.w	r3, [sp, #14]
    5c86:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5c8a:	b29b      	uxth	r3, r3
    5c8c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5c90:	429a      	cmp	r2, r3
    5c92:	d3c2      	bcc.n	5c1a <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    5c94:	9b01      	ldr	r3, [sp, #4]
    5c96:	6a1b      	ldr	r3, [r3, #32]
    5c98:	4619      	mov	r1, r3
    5c9a:	2003      	movs	r0, #3
    5c9c:	f7ff fd98 	bl	57d0 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    5ca0:	9801      	ldr	r0, [sp, #4]
    5ca2:	f7ff fe75 	bl	5990 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    5ca6:	bf00      	nop
    5ca8:	b005      	add	sp, #20
    5caa:	f85d fb04 	ldr.w	pc, [sp], #4
    5cae:	bf00      	nop
    5cb0:	0000e63c 	.word	0x0000e63c

00005cb4 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    5cb4:	b500      	push	{lr}
    5cb6:	b085      	sub	sp, #20
    5cb8:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    5cba:	9b01      	ldr	r3, [sp, #4]
    5cbc:	881b      	ldrh	r3, [r3, #0]
    5cbe:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5cc2:	2300      	movs	r3, #0
    5cc4:	f8ad 300e 	strh.w	r3, [sp, #14]
    5cc8:	e0d2      	b.n	5e70 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    5cca:	9b01      	ldr	r3, [sp, #4]
    5ccc:	68d9      	ldr	r1, [r3, #12]
    5cce:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cd2:	4613      	mov	r3, r2
    5cd4:	009b      	lsls	r3, r3, #2
    5cd6:	4413      	add	r3, r2
    5cd8:	009b      	lsls	r3, r3, #2
    5cda:	440b      	add	r3, r1
    5cdc:	7c5b      	ldrb	r3, [r3, #17]
    5cde:	f083 0301 	eor.w	r3, r3, #1
    5ce2:	b2db      	uxtb	r3, r3
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	f000 80be 	beq.w	5e66 <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    5cea:	9b01      	ldr	r3, [sp, #4]
    5cec:	68d9      	ldr	r1, [r3, #12]
    5cee:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5cf2:	4613      	mov	r3, r2
    5cf4:	009b      	lsls	r3, r3, #2
    5cf6:	4413      	add	r3, r2
    5cf8:	009b      	lsls	r3, r3, #2
    5cfa:	440b      	add	r3, r1
    5cfc:	7c1b      	ldrb	r3, [r3, #16]
    5cfe:	2b00      	cmp	r3, #0
    5d00:	f000 80b1 	beq.w	5e66 <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    5d04:	9b01      	ldr	r3, [sp, #4]
    5d06:	68d9      	ldr	r1, [r3, #12]
    5d08:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d0c:	4613      	mov	r3, r2
    5d0e:	009b      	lsls	r3, r3, #2
    5d10:	4413      	add	r3, r2
    5d12:	009b      	lsls	r3, r3, #2
    5d14:	440b      	add	r3, r1
    5d16:	881b      	ldrh	r3, [r3, #0]
    5d18:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5d1c:	9b01      	ldr	r3, [sp, #4]
    5d1e:	68d9      	ldr	r1, [r3, #12]
    5d20:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d24:	4613      	mov	r3, r2
    5d26:	009b      	lsls	r3, r3, #2
    5d28:	4413      	add	r3, r2
    5d2a:	009b      	lsls	r3, r3, #2
    5d2c:	440b      	add	r3, r1
    5d2e:	68db      	ldr	r3, [r3, #12]
    5d30:	2b02      	cmp	r3, #2
    5d32:	d11d      	bne.n	5d70 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5d34:	f007 fd2a 	bl	d78c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5d38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d3c:	095b      	lsrs	r3, r3, #5
    5d3e:	b29b      	uxth	r3, r3
    5d40:	461a      	mov	r2, r3
    5d42:	4b51      	ldr	r3, [pc, #324]	; (5e88 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5d48:	6959      	ldr	r1, [r3, #20]
    5d4a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d4e:	f003 031f 	and.w	r3, r3, #31
    5d52:	2201      	movs	r2, #1
    5d54:	409a      	lsls	r2, r3
    5d56:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5d5a:	095b      	lsrs	r3, r3, #5
    5d5c:	b29b      	uxth	r3, r3
    5d5e:	4618      	mov	r0, r3
    5d60:	4b49      	ldr	r3, [pc, #292]	; (5e88 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5d62:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5d66:	430a      	orrs	r2, r1
    5d68:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5d6a:	f007 fd3b 	bl	d7e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    5d6e:	e07a      	b.n	5e66 <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    5d70:	9b01      	ldr	r3, [sp, #4]
    5d72:	68d9      	ldr	r1, [r3, #12]
    5d74:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d78:	4613      	mov	r3, r2
    5d7a:	009b      	lsls	r3, r3, #2
    5d7c:	4413      	add	r3, r2
    5d7e:	009b      	lsls	r3, r3, #2
    5d80:	440b      	add	r3, r1
    5d82:	68db      	ldr	r3, [r3, #12]
    5d84:	2b01      	cmp	r3, #1
    5d86:	d00b      	beq.n	5da0 <Port_Ipw_RefreshPortDirection+0xec>
    5d88:	9b01      	ldr	r3, [sp, #4]
    5d8a:	68d9      	ldr	r1, [r3, #12]
    5d8c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5d90:	4613      	mov	r3, r2
    5d92:	009b      	lsls	r3, r3, #2
    5d94:	4413      	add	r3, r2
    5d96:	009b      	lsls	r3, r3, #2
    5d98:	440b      	add	r3, r1
    5d9a:	68db      	ldr	r3, [r3, #12]
    5d9c:	2b03      	cmp	r3, #3
    5d9e:	d162      	bne.n	5e66 <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    5da0:	f007 fcf4 	bl	d78c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5da4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5da8:	095b      	lsrs	r3, r3, #5
    5daa:	b29b      	uxth	r3, r3
    5dac:	461a      	mov	r2, r3
    5dae:	4b36      	ldr	r3, [pc, #216]	; (5e88 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5db4:	6959      	ldr	r1, [r3, #20]
    5db6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dba:	f003 031f 	and.w	r3, r3, #31
    5dbe:	2201      	movs	r2, #1
    5dc0:	fa02 f303 	lsl.w	r3, r2, r3
    5dc4:	43da      	mvns	r2, r3
    5dc6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5dca:	095b      	lsrs	r3, r3, #5
    5dcc:	b29b      	uxth	r3, r3
    5dce:	4618      	mov	r0, r3
    5dd0:	4b2d      	ldr	r3, [pc, #180]	; (5e88 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5dd2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5dd6:	400a      	ands	r2, r1
    5dd8:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    5dda:	f007 fd03 	bl	d7e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    5dde:	f007 fd27 	bl	d830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5de2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5de6:	095b      	lsrs	r3, r3, #5
    5de8:	b29b      	uxth	r3, r3
    5dea:	461a      	mov	r2, r3
    5dec:	4b26      	ldr	r3, [pc, #152]	; (5e88 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5df2:	6999      	ldr	r1, [r3, #24]
    5df4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5df8:	f003 031f 	and.w	r3, r3, #31
    5dfc:	2201      	movs	r2, #1
    5dfe:	fa02 f303 	lsl.w	r3, r2, r3
    5e02:	43da      	mvns	r2, r3
    5e04:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e08:	095b      	lsrs	r3, r3, #5
    5e0a:	b29b      	uxth	r3, r3
    5e0c:	4618      	mov	r0, r3
    5e0e:	4b1e      	ldr	r3, [pc, #120]	; (5e88 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e10:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e14:	400a      	ands	r2, r1
    5e16:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    5e18:	9b01      	ldr	r3, [sp, #4]
    5e1a:	68d9      	ldr	r1, [r3, #12]
    5e1c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e20:	4613      	mov	r3, r2
    5e22:	009b      	lsls	r3, r3, #2
    5e24:	4413      	add	r3, r2
    5e26:	009b      	lsls	r3, r3, #2
    5e28:	440b      	add	r3, r1
    5e2a:	68db      	ldr	r3, [r3, #12]
    5e2c:	2b03      	cmp	r3, #3
    5e2e:	d118      	bne.n	5e62 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    5e30:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e34:	095b      	lsrs	r3, r3, #5
    5e36:	b29b      	uxth	r3, r3
    5e38:	461a      	mov	r2, r3
    5e3a:	4b13      	ldr	r3, [pc, #76]	; (5e88 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5e40:	6999      	ldr	r1, [r3, #24]
    5e42:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e46:	f003 031f 	and.w	r3, r3, #31
    5e4a:	2201      	movs	r2, #1
    5e4c:	409a      	lsls	r2, r3
    5e4e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    5e52:	095b      	lsrs	r3, r3, #5
    5e54:	b29b      	uxth	r3, r3
    5e56:	4618      	mov	r0, r3
    5e58:	4b0b      	ldr	r3, [pc, #44]	; (5e88 <Port_Ipw_RefreshPortDirection+0x1d4>)
    5e5a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5e5e:	430a      	orrs	r2, r1
    5e60:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    5e62:	f007 fd11 	bl	d888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    5e66:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5e6a:	3301      	adds	r3, #1
    5e6c:	f8ad 300e 	strh.w	r3, [sp, #14]
    5e70:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5e74:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5e78:	429a      	cmp	r2, r3
    5e7a:	f4ff af26 	bcc.w	5cca <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    5e7e:	bf00      	nop
    5e80:	bf00      	nop
    5e82:	b005      	add	sp, #20
    5e84:	f85d fb04 	ldr.w	pc, [sp], #4
    5e88:	0000e650 	.word	0x0000e650

00005e8c <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    5e8c:	b084      	sub	sp, #16
    5e8e:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    5e90:	2300      	movs	r3, #0
    5e92:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    5e96:	2300      	movs	r3, #0
    5e98:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5e9c:	2300      	movs	r3, #0
    5e9e:	f88d 300e 	strb.w	r3, [sp, #14]
    5ea2:	e01b      	b.n	5edc <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    5ea4:	4a12      	ldr	r2, [pc, #72]	; (5ef0 <Can_IsControllersBusy+0x64>)
    5ea6:	9b01      	ldr	r3, [sp, #4]
    5ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5eac:	695a      	ldr	r2, [r3, #20]
    5eae:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5eb2:	009b      	lsls	r3, r3, #2
    5eb4:	4413      	add	r3, r2
    5eb6:	681b      	ldr	r3, [r3, #0]
    5eb8:	2b00      	cmp	r3, #0
    5eba:	d00a      	beq.n	5ed2 <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    5ebc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5ec0:	4a0c      	ldr	r2, [pc, #48]	; (5ef4 <Can_IsControllersBusy+0x68>)
    5ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	d003      	beq.n	5ed2 <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    5eca:	2301      	movs	r3, #1
    5ecc:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    5ed0:	e008      	b.n	5ee4 <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5ed2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5ed6:	3301      	adds	r3, #1
    5ed8:	f88d 300e 	strb.w	r3, [sp, #14]
    5edc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d0df      	beq.n	5ea4 <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    5ee4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5ee8:	4618      	mov	r0, r3
    5eea:	b004      	add	sp, #16
    5eec:	4770      	bx	lr
    5eee:	bf00      	nop
    5ef0:	1fff8cf4 	.word	0x1fff8cf4
    5ef4:	1fff8cf0 	.word	0x1fff8cf0

00005ef8 <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    5ef8:	b500      	push	{lr}
    5efa:	b085      	sub	sp, #20
    5efc:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    5efe:	2300      	movs	r3, #0
    5f00:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    5f04:	2300      	movs	r3, #0
    5f06:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5f0a:	2300      	movs	r3, #0
    5f0c:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5f0e:	2300      	movs	r3, #0
    5f10:	f88d 300e 	strb.w	r3, [sp, #14]
    5f14:	e035      	b.n	5f82 <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    5f16:	4a30      	ldr	r2, [pc, #192]	; (5fd8 <Can_InitControllers+0xe0>)
    5f18:	9b01      	ldr	r3, [sp, #4]
    5f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f1e:	695a      	ldr	r2, [r3, #20]
    5f20:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f24:	009b      	lsls	r3, r3, #2
    5f26:	4413      	add	r3, r2
    5f28:	681b      	ldr	r3, [r3, #0]
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	d024      	beq.n	5f78 <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    5f2e:	4a2a      	ldr	r2, [pc, #168]	; (5fd8 <Can_InitControllers+0xe0>)
    5f30:	9b01      	ldr	r3, [sp, #4]
    5f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f36:	695a      	ldr	r2, [r3, #20]
    5f38:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f3c:	009b      	lsls	r3, r3, #2
    5f3e:	4413      	add	r3, r2
    5f40:	681b      	ldr	r3, [r3, #0]
    5f42:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    5f44:	9b02      	ldr	r3, [sp, #8]
    5f46:	7a1b      	ldrb	r3, [r3, #8]
    5f48:	2b00      	cmp	r3, #0
    5f4a:	d015      	beq.n	5f78 <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    5f4c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f50:	4a22      	ldr	r2, [pc, #136]	; (5fdc <Can_InitControllers+0xe4>)
    5f52:	2100      	movs	r1, #0
    5f54:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    5f56:	9802      	ldr	r0, [sp, #8]
    5f58:	f000 ff78 	bl	6e4c <Can_43_FLEXCAN_Ipw_Init>
    5f5c:	4603      	mov	r3, r0
    5f5e:	2b00      	cmp	r3, #0
    5f60:	d106      	bne.n	5f70 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    5f62:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f66:	4a1e      	ldr	r2, [pc, #120]	; (5fe0 <Can_InitControllers+0xe8>)
    5f68:	2102      	movs	r1, #2
    5f6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    5f6e:	e003      	b.n	5f78 <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    5f70:	2301      	movs	r3, #1
    5f72:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    5f76:	e008      	b.n	5f8a <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5f78:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f7c:	3301      	adds	r3, #1
    5f7e:	f88d 300e 	strb.w	r3, [sp, #14]
    5f82:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5f86:	2b00      	cmp	r3, #0
    5f88:	d0c5      	beq.n	5f16 <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    5f8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5f8e:	2b00      	cmp	r3, #0
    5f90:	d01e      	beq.n	5fd0 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5f92:	2300      	movs	r3, #0
    5f94:	f88d 300e 	strb.w	r3, [sp, #14]
    5f98:	e016      	b.n	5fc8 <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    5f9a:	4a0f      	ldr	r2, [pc, #60]	; (5fd8 <Can_InitControllers+0xe0>)
    5f9c:	9b01      	ldr	r3, [sp, #4]
    5f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5fa2:	695a      	ldr	r2, [r3, #20]
    5fa4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5fa8:	009b      	lsls	r3, r3, #2
    5faa:	4413      	add	r3, r2
    5fac:	681b      	ldr	r3, [r3, #0]
    5fae:	2b00      	cmp	r3, #0
    5fb0:	d005      	beq.n	5fbe <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    5fb2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5fb6:	4a0a      	ldr	r2, [pc, #40]	; (5fe0 <Can_InitControllers+0xe8>)
    5fb8:	2100      	movs	r1, #0
    5fba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5fbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5fc2:	3301      	adds	r3, #1
    5fc4:	f88d 300e 	strb.w	r3, [sp, #14]
    5fc8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5fcc:	2b00      	cmp	r3, #0
    5fce:	d0e4      	beq.n	5f9a <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    5fd0:	bf00      	nop
    5fd2:	b005      	add	sp, #20
    5fd4:	f85d fb04 	ldr.w	pc, [sp], #4
    5fd8:	1fff8cf4 	.word	0x1fff8cf4
    5fdc:	1fff8cec 	.word	0x1fff8cec
    5fe0:	1fff8cf0 	.word	0x1fff8cf0

00005fe4 <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    5fe4:	b500      	push	{lr}
    5fe6:	b085      	sub	sp, #20
    5fe8:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    5fea:	2300      	movs	r3, #0
    5fec:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5ff0:	2300      	movs	r3, #0
    5ff2:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5ff4:	2300      	movs	r3, #0
    5ff6:	f88d 300f 	strb.w	r3, [sp, #15]
    5ffa:	e028      	b.n	604e <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    5ffc:	4a18      	ldr	r2, [pc, #96]	; (6060 <Can_DeInitControllers+0x7c>)
    5ffe:	9b01      	ldr	r3, [sp, #4]
    6000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6004:	695a      	ldr	r2, [r3, #20]
    6006:	f89d 300f 	ldrb.w	r3, [sp, #15]
    600a:	009b      	lsls	r3, r3, #2
    600c:	4413      	add	r3, r2
    600e:	681b      	ldr	r3, [r3, #0]
    6010:	2b00      	cmp	r3, #0
    6012:	d017      	beq.n	6044 <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    6014:	4a12      	ldr	r2, [pc, #72]	; (6060 <Can_DeInitControllers+0x7c>)
    6016:	9b01      	ldr	r3, [sp, #4]
    6018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    601c:	695a      	ldr	r2, [r3, #20]
    601e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6022:	009b      	lsls	r3, r3, #2
    6024:	4413      	add	r3, r2
    6026:	681b      	ldr	r3, [r3, #0]
    6028:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    602a:	9b02      	ldr	r3, [sp, #8]
    602c:	7a1b      	ldrb	r3, [r3, #8]
    602e:	2b00      	cmp	r3, #0
    6030:	d008      	beq.n	6044 <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    6032:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6036:	4a0b      	ldr	r2, [pc, #44]	; (6064 <Can_DeInitControllers+0x80>)
    6038:	2100      	movs	r1, #0
    603a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    603e:	9802      	ldr	r0, [sp, #8]
    6040:	f001 f80a 	bl	7058 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6044:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6048:	3301      	adds	r3, #1
    604a:	f88d 300f 	strb.w	r3, [sp, #15]
    604e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6052:	2b00      	cmp	r3, #0
    6054:	d0d2      	beq.n	5ffc <Can_DeInitControllers+0x18>
            }
        }
    }
}
    6056:	bf00      	nop
    6058:	bf00      	nop
    605a:	b005      	add	sp, #20
    605c:	f85d fb04 	ldr.w	pc, [sp], #4
    6060:	1fff8cf4 	.word	0x1fff8cf4
    6064:	1fff8cf0 	.word	0x1fff8cf0

00006068 <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    6068:	b500      	push	{lr}
    606a:	b085      	sub	sp, #20
    606c:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    606e:	2300      	movs	r3, #0
    6070:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    6072:	2300      	movs	r3, #0
    6074:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    6078:	2300      	movs	r3, #0
    607a:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    607c:	490c      	ldr	r1, [pc, #48]	; (60b0 <Can_43_FLEXCAN_Init+0x48>)
    607e:	9b03      	ldr	r3, [sp, #12]
    6080:	9a01      	ldr	r2, [sp, #4]
    6082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    6086:	9803      	ldr	r0, [sp, #12]
    6088:	f7ff ff00 	bl	5e8c <Can_IsControllersBusy>
    608c:	4603      	mov	r3, r0
    608e:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    6092:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6096:	f083 0301 	eor.w	r3, r3, #1
    609a:	b2db      	uxtb	r3, r3
    609c:	2b00      	cmp	r3, #0
    609e:	d002      	beq.n	60a6 <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    60a0:	9803      	ldr	r0, [sp, #12]
    60a2:	f7ff ff29 	bl	5ef8 <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    60a6:	bf00      	nop
    60a8:	b005      	add	sp, #20
    60aa:	f85d fb04 	ldr.w	pc, [sp], #4
    60ae:	bf00      	nop
    60b0:	1fff8cf4 	.word	0x1fff8cf4

000060b4 <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    60b4:	b500      	push	{lr}
    60b6:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    60b8:	2300      	movs	r3, #0
    60ba:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    60be:	2300      	movs	r3, #0
    60c0:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    60c4:	2300      	movs	r3, #0
    60c6:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    60c8:	2300      	movs	r3, #0
    60ca:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    60cc:	2300      	movs	r3, #0
    60ce:	f88d 3007 	strb.w	r3, [sp, #7]
    60d2:	e01b      	b.n	610c <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    60d4:	4a19      	ldr	r2, [pc, #100]	; (613c <Can_43_FLEXCAN_DeInit+0x88>)
    60d6:	9b00      	ldr	r3, [sp, #0]
    60d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60dc:	695a      	ldr	r2, [r3, #20]
    60de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    60e2:	009b      	lsls	r3, r3, #2
    60e4:	4413      	add	r3, r2
    60e6:	681b      	ldr	r3, [r3, #0]
    60e8:	2b00      	cmp	r3, #0
    60ea:	d00a      	beq.n	6102 <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    60ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    60f0:	4a13      	ldr	r2, [pc, #76]	; (6140 <Can_43_FLEXCAN_DeInit+0x8c>)
    60f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    60f6:	2b01      	cmp	r3, #1
    60f8:	d103      	bne.n	6102 <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    60fa:	2301      	movs	r3, #1
    60fc:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    6100:	e008      	b.n	6114 <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6102:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6106:	3301      	adds	r3, #1
    6108:	f88d 3007 	strb.w	r3, [sp, #7]
    610c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6110:	2b00      	cmp	r3, #0
    6112:	d0df      	beq.n	60d4 <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    6114:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6118:	f083 0301 	eor.w	r3, r3, #1
    611c:	b2db      	uxtb	r3, r3
    611e:	2b00      	cmp	r3, #0
    6120:	d007      	beq.n	6132 <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    6122:	9800      	ldr	r0, [sp, #0]
    6124:	f7ff ff5e 	bl	5fe4 <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    6128:	4a04      	ldr	r2, [pc, #16]	; (613c <Can_43_FLEXCAN_DeInit+0x88>)
    612a:	9b00      	ldr	r3, [sp, #0]
    612c:	2100      	movs	r1, #0
    612e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    6132:	bf00      	nop
    6134:	b003      	add	sp, #12
    6136:	f85d fb04 	ldr.w	pc, [sp], #4
    613a:	bf00      	nop
    613c:	1fff8cf4 	.word	0x1fff8cf4
    6140:	1fff8cf0 	.word	0x1fff8cf0

00006144 <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    6144:	b500      	push	{lr}
    6146:	b087      	sub	sp, #28
    6148:	4603      	mov	r3, r0
    614a:	9100      	str	r1, [sp, #0]
    614c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6150:	2301      	movs	r3, #1
    6152:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    6156:	2300      	movs	r3, #0
    6158:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    615a:	2300      	movs	r3, #0
    615c:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    615e:	2300      	movs	r3, #0
    6160:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    6162:	4a47      	ldr	r2, [pc, #284]	; (6280 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    6164:	9b04      	ldr	r3, [sp, #16]
    6166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    616a:	695a      	ldr	r2, [r3, #20]
    616c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6170:	009b      	lsls	r3, r3, #2
    6172:	4413      	add	r3, r2
    6174:	681b      	ldr	r3, [r3, #0]
    6176:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    6178:	9b00      	ldr	r3, [sp, #0]
    617a:	2b03      	cmp	r3, #3
    617c:	d05d      	beq.n	623a <Can_43_FLEXCAN_SetControllerMode+0xf6>
    617e:	9b00      	ldr	r3, [sp, #0]
    6180:	2b03      	cmp	r3, #3
    6182:	d874      	bhi.n	626e <Can_43_FLEXCAN_SetControllerMode+0x12a>
    6184:	9b00      	ldr	r3, [sp, #0]
    6186:	2b01      	cmp	r3, #1
    6188:	d003      	beq.n	6192 <Can_43_FLEXCAN_SetControllerMode+0x4e>
    618a:	9b00      	ldr	r3, [sp, #0]
    618c:	2b02      	cmp	r3, #2
    618e:	d01d      	beq.n	61cc <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    6190:	e06d      	b.n	626e <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    6192:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6196:	4a3b      	ldr	r2, [pc, #236]	; (6284 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    619c:	2b02      	cmp	r3, #2
    619e:	d168      	bne.n	6272 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    61a0:	9803      	ldr	r0, [sp, #12]
    61a2:	f000 ff93 	bl	70cc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    61a6:	4603      	mov	r3, r0
    61a8:	2b00      	cmp	r3, #0
    61aa:	d162      	bne.n	6272 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    61ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    61b0:	4a34      	ldr	r2, [pc, #208]	; (6284 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    61b2:	2101      	movs	r1, #1
    61b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    61b8:	9b03      	ldr	r3, [sp, #12]
    61ba:	781b      	ldrb	r3, [r3, #0]
    61bc:	2101      	movs	r1, #1
    61be:	4618      	mov	r0, r3
    61c0:	f7fa fba3 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    61c4:	2300      	movs	r3, #0
    61c6:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    61ca:	e052      	b.n	6272 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    61cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    61d0:	4a2c      	ldr	r2, [pc, #176]	; (6284 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    61d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    61d6:	2b01      	cmp	r3, #1
    61d8:	d005      	beq.n	61e6 <Can_43_FLEXCAN_SetControllerMode+0xa2>
    61da:	2b00      	cmp	r3, #0
    61dc:	d029      	beq.n	6232 <Can_43_FLEXCAN_SetControllerMode+0xee>
    61de:	3b02      	subs	r3, #2
    61e0:	2b01      	cmp	r3, #1
    61e2:	d826      	bhi.n	6232 <Can_43_FLEXCAN_SetControllerMode+0xee>
    61e4:	e015      	b.n	6212 <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    61e6:	9803      	ldr	r0, [sp, #12]
    61e8:	f000 ffde 	bl	71a8 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    61ec:	4603      	mov	r3, r0
    61ee:	2b00      	cmp	r3, #0
    61f0:	d121      	bne.n	6236 <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    61f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    61f6:	4a23      	ldr	r2, [pc, #140]	; (6284 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    61f8:	2102      	movs	r1, #2
    61fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    61fe:	9b03      	ldr	r3, [sp, #12]
    6200:	781b      	ldrb	r3, [r3, #0]
    6202:	2102      	movs	r1, #2
    6204:	4618      	mov	r0, r3
    6206:	f7fa fb80 	bl	90a <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    620a:	2300      	movs	r3, #0
    620c:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    6210:	e011      	b.n	6236 <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    6212:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6216:	4a1b      	ldr	r2, [pc, #108]	; (6284 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6218:	2102      	movs	r1, #2
    621a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    621e:	9b03      	ldr	r3, [sp, #12]
    6220:	781b      	ldrb	r3, [r3, #0]
    6222:	2102      	movs	r1, #2
    6224:	4618      	mov	r0, r3
    6226:	f7fa fb70 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    622a:	2300      	movs	r3, #0
    622c:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    6230:	e002      	b.n	6238 <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    6232:	bf00      	nop
    6234:	e01e      	b.n	6274 <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    6236:	bf00      	nop
                        break;
    6238:	e01c      	b.n	6274 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    623a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    623e:	4a11      	ldr	r2, [pc, #68]	; (6284 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6244:	3b02      	subs	r3, #2
    6246:	2b01      	cmp	r3, #1
    6248:	d80f      	bhi.n	626a <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    624a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    624e:	4a0d      	ldr	r2, [pc, #52]	; (6284 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6250:	2103      	movs	r1, #3
    6252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    6256:	9b03      	ldr	r3, [sp, #12]
    6258:	781b      	ldrb	r3, [r3, #0]
    625a:	2103      	movs	r1, #3
    625c:	4618      	mov	r0, r3
    625e:	f7fa fb54 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    6262:	2300      	movs	r3, #0
    6264:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    6268:	e000      	b.n	626c <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    626a:	bf00      	nop
                        break;
    626c:	e002      	b.n	6274 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    626e:	bf00      	nop
    6270:	e000      	b.n	6274 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    6272:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    6274:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6278:	4618      	mov	r0, r3
    627a:	b007      	add	sp, #28
    627c:	f85d fb04 	ldr.w	pc, [sp], #4
    6280:	1fff8cf4 	.word	0x1fff8cf4
    6284:	1fff8cf0 	.word	0x1fff8cf0

00006288 <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    6288:	b500      	push	{lr}
    628a:	b085      	sub	sp, #20
    628c:	4603      	mov	r3, r0
    628e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    6292:	2300      	movs	r3, #0
    6294:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6296:	2300      	movs	r3, #0
    6298:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    629a:	2300      	movs	r3, #0
    629c:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    629e:	4a10      	ldr	r2, [pc, #64]	; (62e0 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    62a0:	9b03      	ldr	r3, [sp, #12]
    62a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    62a6:	695a      	ldr	r2, [r3, #20]
    62a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62ac:	009b      	lsls	r3, r3, #2
    62ae:	4413      	add	r3, r2
    62b0:	681b      	ldr	r3, [r3, #0]
    62b2:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    62b4:	f005 fca4 	bl	bc00 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    62b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62bc:	4a09      	ldr	r2, [pc, #36]	; (62e4 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    62be:	5cd2      	ldrb	r2, [r2, r3]
    62c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62c4:	3201      	adds	r2, #1
    62c6:	b2d1      	uxtb	r1, r2
    62c8:	4a06      	ldr	r2, [pc, #24]	; (62e4 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    62ca:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    62cc:	f005 fcc4 	bl	bc58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    62d0:	9802      	ldr	r0, [sp, #8]
    62d2:	f000 ffe7 	bl	72a4 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    62d6:	bf00      	nop
    62d8:	b005      	add	sp, #20
    62da:	f85d fb04 	ldr.w	pc, [sp], #4
    62de:	bf00      	nop
    62e0:	1fff8cf4 	.word	0x1fff8cf4
    62e4:	1fff8cec 	.word	0x1fff8cec

000062e8 <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    62e8:	b500      	push	{lr}
    62ea:	b085      	sub	sp, #20
    62ec:	4603      	mov	r3, r0
    62ee:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    62f2:	2300      	movs	r3, #0
    62f4:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    62f6:	2300      	movs	r3, #0
    62f8:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    62fa:	2300      	movs	r3, #0
    62fc:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    62fe:	4a16      	ldr	r2, [pc, #88]	; (6358 <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    6300:	9b03      	ldr	r3, [sp, #12]
    6302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6306:	695a      	ldr	r2, [r3, #20]
    6308:	f89d 3007 	ldrb.w	r3, [sp, #7]
    630c:	009b      	lsls	r3, r3, #2
    630e:	4413      	add	r3, r2
    6310:	681b      	ldr	r3, [r3, #0]
    6312:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    6314:	f005 fcc6 	bl	bca4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    6318:	f89d 3007 	ldrb.w	r3, [sp, #7]
    631c:	4a0f      	ldr	r2, [pc, #60]	; (635c <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    631e:	5cd3      	ldrb	r3, [r2, r3]
    6320:	2b00      	cmp	r3, #0
    6322:	d009      	beq.n	6338 <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    6324:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6328:	4a0c      	ldr	r2, [pc, #48]	; (635c <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    632a:	5cd2      	ldrb	r2, [r2, r3]
    632c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6330:	3a01      	subs	r2, #1
    6332:	b2d1      	uxtb	r1, r2
    6334:	4a09      	ldr	r2, [pc, #36]	; (635c <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    6336:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    6338:	f005 fce0 	bl	bcfc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    633c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6340:	4a06      	ldr	r2, [pc, #24]	; (635c <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    6342:	5cd3      	ldrb	r3, [r2, r3]
    6344:	2b00      	cmp	r3, #0
    6346:	d102      	bne.n	634e <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    6348:	9802      	ldr	r0, [sp, #8]
    634a:	f000 ffd5 	bl	72f8 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    634e:	bf00      	nop
    6350:	b005      	add	sp, #20
    6352:	f85d fb04 	ldr.w	pc, [sp], #4
    6356:	bf00      	nop
    6358:	1fff8cf4 	.word	0x1fff8cf4
    635c:	1fff8cec 	.word	0x1fff8cec

00006360 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    6360:	b500      	push	{lr}
    6362:	b087      	sub	sp, #28
    6364:	4603      	mov	r3, r0
    6366:	9100      	str	r1, [sp, #0]
    6368:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    636c:	2301      	movs	r3, #1
    636e:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    6372:	2300      	movs	r3, #0
    6374:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    6378:	2300      	movs	r3, #0
    637a:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    637c:	2300      	movs	r3, #0
    637e:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6380:	2300      	movs	r3, #0
    6382:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    6384:	4a18      	ldr	r2, [pc, #96]	; (63e8 <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    6386:	9b04      	ldr	r3, [sp, #16]
    6388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    638c:	695a      	ldr	r2, [r3, #20]
    638e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6392:	009b      	lsls	r3, r3, #2
    6394:	4413      	add	r3, r2
    6396:	681b      	ldr	r3, [r3, #0]
    6398:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    639a:	f10d 030b 	add.w	r3, sp, #11
    639e:	4619      	mov	r1, r3
    63a0:	9803      	ldr	r0, [sp, #12]
    63a2:	f000 ffd5 	bl	7350 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    63a6:	4603      	mov	r3, r0
    63a8:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    63ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
    63b0:	2b00      	cmp	r3, #0
    63b2:	d112      	bne.n	63da <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    63b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    63b8:	2b00      	cmp	r3, #0
    63ba:	d002      	beq.n	63c2 <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    63bc:	2b01      	cmp	r3, #1
    63be:	d004      	beq.n	63ca <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    63c0:	e007      	b.n	63d2 <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    63c2:	9b00      	ldr	r3, [sp, #0]
    63c4:	2200      	movs	r2, #0
    63c6:	601a      	str	r2, [r3, #0]
                                break;
    63c8:	e008      	b.n	63dc <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    63ca:	9b00      	ldr	r3, [sp, #0]
    63cc:	2201      	movs	r2, #1
    63ce:	601a      	str	r2, [r3, #0]
                                break;
    63d0:	e004      	b.n	63dc <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    63d2:	9b00      	ldr	r3, [sp, #0]
    63d4:	2202      	movs	r2, #2
    63d6:	601a      	str	r2, [r3, #0]
                                break;
    63d8:	e000      	b.n	63dc <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    63da:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    63dc:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    63e0:	4618      	mov	r0, r3
    63e2:	b007      	add	sp, #28
    63e4:	f85d fb04 	ldr.w	pc, [sp], #4
    63e8:	1fff8cf4 	.word	0x1fff8cf4

000063ec <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    63ec:	b084      	sub	sp, #16
    63ee:	4603      	mov	r3, r0
    63f0:	9100      	str	r1, [sp, #0]
    63f2:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    63f6:	2301      	movs	r3, #1
    63f8:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    63fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6400:	4a06      	ldr	r2, [pc, #24]	; (641c <Can_43_FLEXCAN_GetControllerMode+0x30>)
    6402:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6406:	9b00      	ldr	r3, [sp, #0]
    6408:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    640a:	2300      	movs	r3, #0
    640c:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    6410:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6414:	4618      	mov	r0, r3
    6416:	b004      	add	sp, #16
    6418:	4770      	bx	lr
    641a:	bf00      	nop
    641c:	1fff8cf0 	.word	0x1fff8cf0

00006420 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    6420:	b500      	push	{lr}
    6422:	b087      	sub	sp, #28
    6424:	4603      	mov	r3, r0
    6426:	9100      	str	r1, [sp, #0]
    6428:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    642c:	2301      	movs	r3, #1
    642e:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    6432:	2300      	movs	r3, #0
    6434:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6436:	2300      	movs	r3, #0
    6438:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    643a:	2300      	movs	r3, #0
    643c:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    643e:	4a0c      	ldr	r2, [pc, #48]	; (6470 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    6440:	9b04      	ldr	r3, [sp, #16]
    6442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6446:	695a      	ldr	r2, [r3, #20]
    6448:	f89d 3007 	ldrb.w	r3, [sp, #7]
    644c:	009b      	lsls	r3, r3, #2
    644e:	4413      	add	r3, r2
    6450:	681b      	ldr	r3, [r3, #0]
    6452:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    6454:	9900      	ldr	r1, [sp, #0]
    6456:	9803      	ldr	r0, [sp, #12]
    6458:	f000 ffa5 	bl	73a6 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    645c:	4603      	mov	r3, r0
    645e:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    6462:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6466:	4618      	mov	r0, r3
    6468:	b007      	add	sp, #28
    646a:	f85d fb04 	ldr.w	pc, [sp], #4
    646e:	bf00      	nop
    6470:	1fff8cf4 	.word	0x1fff8cf4

00006474 <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    6474:	b500      	push	{lr}
    6476:	b087      	sub	sp, #28
    6478:	4603      	mov	r3, r0
    647a:	9100      	str	r1, [sp, #0]
    647c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6480:	2301      	movs	r3, #1
    6482:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    6486:	2300      	movs	r3, #0
    6488:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    648a:	2300      	movs	r3, #0
    648c:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    648e:	2300      	movs	r3, #0
    6490:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    6492:	4a0c      	ldr	r2, [pc, #48]	; (64c4 <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    6494:	9b04      	ldr	r3, [sp, #16]
    6496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    649a:	695a      	ldr	r2, [r3, #20]
    649c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    64a0:	009b      	lsls	r3, r3, #2
    64a2:	4413      	add	r3, r2
    64a4:	681b      	ldr	r3, [r3, #0]
    64a6:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    64a8:	9900      	ldr	r1, [sp, #0]
    64aa:	9803      	ldr	r0, [sp, #12]
    64ac:	f000 ff69 	bl	7382 <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    64b0:	4603      	mov	r3, r0
    64b2:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    64b6:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    64ba:	4618      	mov	r0, r3
    64bc:	b007      	add	sp, #28
    64be:	f85d fb04 	ldr.w	pc, [sp], #4
    64c2:	bf00      	nop
    64c4:	1fff8cf4 	.word	0x1fff8cf4

000064c8 <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    64c8:	b500      	push	{lr}
    64ca:	b089      	sub	sp, #36	; 0x24
    64cc:	4603      	mov	r3, r0
    64ce:	9100      	str	r1, [sp, #0]
    64d0:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    64d4:	2301      	movs	r3, #1
    64d6:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    64da:	2300      	movs	r3, #0
    64dc:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    64e0:	2300      	movs	r3, #0
    64e2:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    64e4:	2300      	movs	r3, #0
    64e6:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    64ea:	2300      	movs	r3, #0
    64ec:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    64ee:	2300      	movs	r3, #0
    64f0:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    64f2:	2300      	movs	r3, #0
    64f4:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    64f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    64fa:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    64fe:	4a1d      	ldr	r2, [pc, #116]	; (6574 <Can_43_FLEXCAN_Write+0xac>)
    6500:	9b06      	ldr	r3, [sp, #24]
    6502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6506:	68da      	ldr	r2, [r3, #12]
    6508:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    650c:	4413      	add	r3, r2
    650e:	781b      	ldrb	r3, [r3, #0]
    6510:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    6514:	4a17      	ldr	r2, [pc, #92]	; (6574 <Can_43_FLEXCAN_Write+0xac>)
    6516:	9b06      	ldr	r3, [sp, #24]
    6518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    651c:	695a      	ldr	r2, [r3, #20]
    651e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    6522:	009b      	lsls	r3, r3, #2
    6524:	4413      	add	r3, r2
    6526:	681b      	ldr	r3, [r3, #0]
    6528:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    652a:	9b04      	ldr	r3, [sp, #16]
    652c:	2b00      	cmp	r3, #0
    652e:	d01b      	beq.n	6568 <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    6530:	4a10      	ldr	r2, [pc, #64]	; (6574 <Can_43_FLEXCAN_Write+0xac>)
    6532:	9b06      	ldr	r3, [sp, #24]
    6534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6538:	6919      	ldr	r1, [r3, #16]
    653a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    653e:	4613      	mov	r3, r2
    6540:	00db      	lsls	r3, r3, #3
    6542:	4413      	add	r3, r2
    6544:	009b      	lsls	r3, r3, #2
    6546:	440b      	add	r3, r1
    6548:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    654a:	f89d 301e 	ldrb.w	r3, [sp, #30]
    654e:	4a0a      	ldr	r2, [pc, #40]	; (6578 <Can_43_FLEXCAN_Write+0xb0>)
    6550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6554:	2b01      	cmp	r3, #1
    6556:	d107      	bne.n	6568 <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    6558:	9a00      	ldr	r2, [sp, #0]
    655a:	9903      	ldr	r1, [sp, #12]
    655c:	9804      	ldr	r0, [sp, #16]
    655e:	f000 ff34 	bl	73ca <Can_43_FLEXCAN_Ipw_Write>
    6562:	4603      	mov	r3, r0
    6564:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    6568:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    656c:	4618      	mov	r0, r3
    656e:	b009      	add	sp, #36	; 0x24
    6570:	f85d fb04 	ldr.w	pc, [sp], #4
    6574:	1fff8cf4 	.word	0x1fff8cf4
    6578:	1fff8cf0 	.word	0x1fff8cf0

0000657c <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    657c:	bf00      	nop
    657e:	4770      	bx	lr

00006580 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    6580:	bf00      	nop
    6582:	4770      	bx	lr

00006584 <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    6584:	bf00      	nop
    6586:	4770      	bx	lr

00006588 <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    6588:	b500      	push	{lr}
    658a:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    658c:	2300      	movs	r3, #0
    658e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    6592:	2300      	movs	r3, #0
    6594:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6596:	2300      	movs	r3, #0
    6598:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    659a:	2300      	movs	r3, #0
    659c:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    659e:	4a17      	ldr	r2, [pc, #92]	; (65fc <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    65a0:	9b02      	ldr	r3, [sp, #8]
    65a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65a6:	2b00      	cmp	r3, #0
    65a8:	d024      	beq.n	65f4 <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    65aa:	e01f      	b.n	65ec <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    65ac:	4a13      	ldr	r2, [pc, #76]	; (65fc <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    65ae:	9b02      	ldr	r3, [sp, #8]
    65b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    65b4:	695a      	ldr	r2, [r3, #20]
    65b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    65ba:	009b      	lsls	r3, r3, #2
    65bc:	4413      	add	r3, r2
    65be:	681b      	ldr	r3, [r3, #0]
    65c0:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    65c2:	9b01      	ldr	r3, [sp, #4]
    65c4:	2b00      	cmp	r3, #0
    65c6:	d00c      	beq.n	65e2 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    65c8:	9b01      	ldr	r3, [sp, #4]
    65ca:	7a1b      	ldrb	r3, [r3, #8]
    65cc:	2b00      	cmp	r3, #0
    65ce:	d008      	beq.n	65e2 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    65d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    65d4:	009b      	lsls	r3, r3, #2
    65d6:	4a0a      	ldr	r2, [pc, #40]	; (6600 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    65d8:	4413      	add	r3, r2
    65da:	4619      	mov	r1, r3
    65dc:	9801      	ldr	r0, [sp, #4]
    65de:	f000 fff4 	bl	75ca <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    65e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    65e6:	3301      	adds	r3, #1
    65e8:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    65ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    65f0:	2b00      	cmp	r3, #0
    65f2:	d0db      	beq.n	65ac <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    65f4:	bf00      	nop
    65f6:	b005      	add	sp, #20
    65f8:	f85d fb04 	ldr.w	pc, [sp], #4
    65fc:	1fff8cf4 	.word	0x1fff8cf4
    6600:	1fff8cf0 	.word	0x1fff8cf0

00006604 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    6604:	b500      	push	{lr}
    6606:	b087      	sub	sp, #28
    6608:	4603      	mov	r3, r0
    660a:	9200      	str	r2, [sp, #0]
    660c:	f88d 3007 	strb.w	r3, [sp, #7]
    6610:	460b      	mov	r3, r1
    6612:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    6616:	2300      	movs	r3, #0
    6618:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    661c:	2300      	movs	r3, #0
    661e:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6620:	2300      	movs	r3, #0
    6622:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    6624:	2300      	movs	r3, #0
    6626:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    6628:	4a16      	ldr	r2, [pc, #88]	; (6684 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    662a:	9b04      	ldr	r3, [sp, #16]
    662c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6630:	2b00      	cmp	r3, #0
    6632:	d022      	beq.n	667a <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    6634:	4a13      	ldr	r2, [pc, #76]	; (6684 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    6636:	9b04      	ldr	r3, [sp, #16]
    6638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    663c:	689a      	ldr	r2, [r3, #8]
    663e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6642:	4413      	add	r3, r2
    6644:	781b      	ldrb	r3, [r3, #0]
    6646:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    664a:	4a0e      	ldr	r2, [pc, #56]	; (6684 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    664c:	9b04      	ldr	r3, [sp, #16]
    664e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6652:	695a      	ldr	r2, [r3, #20]
    6654:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6658:	009b      	lsls	r3, r3, #2
    665a:	4413      	add	r3, r2
    665c:	681b      	ldr	r3, [r3, #0]
    665e:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    6660:	9b03      	ldr	r3, [sp, #12]
    6662:	2b00      	cmp	r3, #0
    6664:	d009      	beq.n	667a <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    6666:	4a07      	ldr	r2, [pc, #28]	; (6684 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    6668:	9b04      	ldr	r3, [sp, #16]
    666a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    666e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6672:	9b00      	ldr	r3, [sp, #0]
    6674:	9803      	ldr	r0, [sp, #12]
    6676:	f000 ffde 	bl	7636 <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    667a:	bf00      	nop
    667c:	b007      	add	sp, #28
    667e:	f85d fb04 	ldr.w	pc, [sp], #4
    6682:	bf00      	nop
    6684:	1fff8cf4 	.word	0x1fff8cf4

00006688 <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    6688:	b500      	push	{lr}
    668a:	b087      	sub	sp, #28
    668c:	4603      	mov	r3, r0
    668e:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    6692:	2300      	movs	r3, #0
    6694:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    6698:	2300      	movs	r3, #0
    669a:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    669c:	2300      	movs	r3, #0
    669e:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    66a0:	2300      	movs	r3, #0
    66a2:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    66a4:	4a19      	ldr	r2, [pc, #100]	; (670c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    66a6:	9b04      	ldr	r3, [sp, #16]
    66a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66ac:	2b00      	cmp	r3, #0
    66ae:	d029      	beq.n	6704 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    66b0:	4a16      	ldr	r2, [pc, #88]	; (670c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    66b2:	9b04      	ldr	r3, [sp, #16]
    66b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66b8:	689a      	ldr	r2, [r3, #8]
    66ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    66be:	4413      	add	r3, r2
    66c0:	781b      	ldrb	r3, [r3, #0]
    66c2:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    66c6:	4a11      	ldr	r2, [pc, #68]	; (670c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    66c8:	9b04      	ldr	r3, [sp, #16]
    66ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66ce:	695a      	ldr	r2, [r3, #20]
    66d0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    66d4:	009b      	lsls	r3, r3, #2
    66d6:	4413      	add	r3, r2
    66d8:	681b      	ldr	r3, [r3, #0]
    66da:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    66dc:	9b03      	ldr	r3, [sp, #12]
    66de:	2b00      	cmp	r3, #0
    66e0:	d010      	beq.n	6704 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    66e2:	9803      	ldr	r0, [sp, #12]
    66e4:	f000 fd60 	bl	71a8 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    66e8:	4603      	mov	r3, r0
    66ea:	2b00      	cmp	r3, #0
    66ec:	d10a      	bne.n	6704 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    66ee:	f89d 3017 	ldrb.w	r3, [sp, #23]
    66f2:	4a07      	ldr	r2, [pc, #28]	; (6710 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    66f4:	2102      	movs	r1, #2
    66f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    66fa:	9b03      	ldr	r3, [sp, #12]
    66fc:	781b      	ldrb	r3, [r3, #0]
    66fe:	4618      	mov	r0, r3
    6700:	f7fa f8fc 	bl	8fc <CanIf_ControllerBusOff>
            }
        }
    }
}
    6704:	bf00      	nop
    6706:	b007      	add	sp, #28
    6708:	f85d fb04 	ldr.w	pc, [sp], #4
    670c:	1fff8cf4 	.word	0x1fff8cf4
    6710:	1fff8cf0 	.word	0x1fff8cf0

00006714 <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    6714:	b500      	push	{lr}
    6716:	b085      	sub	sp, #20
    6718:	9003      	str	r0, [sp, #12]
    671a:	9102      	str	r1, [sp, #8]
    671c:	9201      	str	r2, [sp, #4]
    671e:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    6720:	9b01      	ldr	r3, [sp, #4]
    6722:	685a      	ldr	r2, [r3, #4]
    6724:	9b03      	ldr	r3, [sp, #12]
    6726:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    6728:	9b01      	ldr	r3, [sp, #4]
    672a:	681b      	ldr	r3, [r3, #0]
    672c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    6730:	2b00      	cmp	r3, #0
    6732:	d005      	beq.n	6740 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    6734:	9b03      	ldr	r3, [sp, #12]
    6736:	681b      	ldr	r3, [r3, #0]
    6738:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    673c:	9b03      	ldr	r3, [sp, #12]
    673e:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    6740:	9b06      	ldr	r3, [sp, #24]
    6742:	699b      	ldr	r3, [r3, #24]
    6744:	2b00      	cmp	r3, #0
    6746:	d10c      	bne.n	6762 <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    6748:	9b01      	ldr	r3, [sp, #4]
    674a:	681b      	ldr	r3, [r3, #0]
    674c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    6750:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    6754:	d105      	bne.n	6762 <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    6756:	2301      	movs	r3, #1
    6758:	2208      	movs	r2, #8
    675a:	2100      	movs	r1, #0
    675c:	2050      	movs	r0, #80	; 0x50
    675e:	f007 fb33 	bl	ddc8 <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    6762:	9b06      	ldr	r3, [sp, #24]
    6764:	699b      	ldr	r3, [r3, #24]
    6766:	2b01      	cmp	r3, #1
    6768:	d009      	beq.n	677e <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    676a:	9b01      	ldr	r3, [sp, #4]
    676c:	681b      	ldr	r3, [r3, #0]
    676e:	2b00      	cmp	r3, #0
    6770:	da05      	bge.n	677e <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    6772:	9b03      	ldr	r3, [sp, #12]
    6774:	681b      	ldr	r3, [r3, #0]
    6776:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    677a:	9b03      	ldr	r3, [sp, #12]
    677c:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    677e:	9b06      	ldr	r3, [sp, #24]
    6780:	7c1a      	ldrb	r2, [r3, #16]
    6782:	9b01      	ldr	r3, [sp, #4]
    6784:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    6788:	429a      	cmp	r2, r3
    678a:	d805      	bhi.n	6798 <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    678c:	9b06      	ldr	r3, [sp, #24]
    678e:	7c1b      	ldrb	r3, [r3, #16]
    6790:	461a      	mov	r2, r3
    6792:	9b02      	ldr	r3, [sp, #8]
    6794:	609a      	str	r2, [r3, #8]
    6796:	e005      	b.n	67a4 <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    6798:	9b01      	ldr	r3, [sp, #4]
    679a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    679e:	461a      	mov	r2, r3
    67a0:	9b02      	ldr	r3, [sp, #8]
    67a2:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    67a4:	9b06      	ldr	r3, [sp, #24]
    67a6:	881a      	ldrh	r2, [r3, #0]
    67a8:	9b03      	ldr	r3, [sp, #12]
    67aa:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    67ac:	9b00      	ldr	r3, [sp, #0]
    67ae:	781a      	ldrb	r2, [r3, #0]
    67b0:	9b03      	ldr	r3, [sp, #12]
    67b2:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    67b4:	9b01      	ldr	r3, [sp, #4]
    67b6:	f103 0208 	add.w	r2, r3, #8
    67ba:	9b02      	ldr	r3, [sp, #8]
    67bc:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    67be:	9902      	ldr	r1, [sp, #8]
    67c0:	9803      	ldr	r0, [sp, #12]
    67c2:	f7fa f8c7 	bl	954 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    67c6:	bf00      	nop
    67c8:	b005      	add	sp, #20
    67ca:	f85d fb04 	ldr.w	pc, [sp], #4

000067ce <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    67ce:	b500      	push	{lr}
    67d0:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    67d4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    67d8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    67dc:	6018      	str	r0, [r3, #0]
    67de:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    67e2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    67e6:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    67e8:	2300      	movs	r3, #0
    67ea:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    67ee:	2300      	movs	r3, #0
    67f0:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    67f4:	2300      	movs	r3, #0
    67f6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    67fa:	2300      	movs	r3, #0
    67fc:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    6800:	2300      	movs	r3, #0
    6802:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    6806:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    680a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    680e:	681b      	ldr	r3, [r3, #0]
    6810:	7c9b      	ldrb	r3, [r3, #18]
    6812:	089b      	lsrs	r3, r3, #2
    6814:	b2db      	uxtb	r3, r3
    6816:	3306      	adds	r3, #6
    6818:	2b20      	cmp	r3, #32
    681a:	d80b      	bhi.n	6834 <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    681c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6820:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6824:	681b      	ldr	r3, [r3, #0]
    6826:	7c9b      	ldrb	r3, [r3, #18]
    6828:	089b      	lsrs	r3, r3, #2
    682a:	b2db      	uxtb	r3, r3
    682c:	3306      	adds	r3, #6
    682e:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    6832:	e002      	b.n	683a <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    6834:	2320      	movs	r3, #32
    6836:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    683a:	2300      	movs	r3, #0
    683c:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    6840:	e169      	b.n	6b16 <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    6842:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6846:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    684a:	681b      	ldr	r3, [r3, #0]
    684c:	691b      	ldr	r3, [r3, #16]
    684e:	2b00      	cmp	r3, #0
    6850:	d13a      	bne.n	68c8 <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    6852:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6856:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    685a:	681b      	ldr	r3, [r3, #0]
    685c:	7c9b      	ldrb	r3, [r3, #18]
    685e:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    6862:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    6866:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    686a:	2300      	movs	r3, #0
    686c:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    6870:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6874:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6878:	681b      	ldr	r3, [r3, #0]
    687a:	689b      	ldr	r3, [r3, #8]
    687c:	2b00      	cmp	r3, #0
    687e:	d011      	beq.n	68a4 <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    6880:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6884:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6888:	681b      	ldr	r3, [r3, #0]
    688a:	695a      	ldr	r2, [r3, #20]
    688c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6890:	00db      	lsls	r3, r3, #3
    6892:	4413      	add	r3, r2
    6894:	685b      	ldr	r3, [r3, #4]
    6896:	005b      	lsls	r3, r3, #1
    6898:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    689c:	4313      	orrs	r3, r2
    689e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    68a2:	e126      	b.n	6af2 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    68a4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    68a8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    68ac:	681b      	ldr	r3, [r3, #0]
    68ae:	695a      	ldr	r2, [r3, #20]
    68b0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    68b4:	00db      	lsls	r3, r3, #3
    68b6:	4413      	add	r3, r2
    68b8:	685b      	ldr	r3, [r3, #4]
    68ba:	04db      	lsls	r3, r3, #19
    68bc:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    68c0:	4313      	orrs	r3, r2
    68c2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    68c6:	e114      	b.n	6af2 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    68c8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    68cc:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    68d0:	681b      	ldr	r3, [r3, #0]
    68d2:	691b      	ldr	r3, [r3, #16]
    68d4:	2b01      	cmp	r3, #1
    68d6:	d160      	bne.n	699a <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    68d8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    68dc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    68e0:	681b      	ldr	r3, [r3, #0]
    68e2:	7c9b      	ldrb	r3, [r3, #18]
    68e4:	005b      	lsls	r3, r3, #1
    68e6:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    68ea:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    68ee:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    68f2:	2301      	movs	r3, #1
    68f4:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    68f8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    68fc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6900:	681b      	ldr	r3, [r3, #0]
    6902:	689b      	ldr	r3, [r3, #8]
    6904:	2b00      	cmp	r3, #0
    6906:	d024      	beq.n	6952 <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    6908:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    690c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6910:	681b      	ldr	r3, [r3, #0]
    6912:	695a      	ldr	r2, [r3, #20]
    6914:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6918:	011b      	lsls	r3, r3, #4
    691a:	4413      	add	r3, r2
    691c:	685b      	ldr	r3, [r3, #4]
    691e:	0bdb      	lsrs	r3, r3, #15
    6920:	041b      	lsls	r3, r3, #16
    6922:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6926:	4313      	orrs	r3, r2
    6928:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    692c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6930:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6934:	681b      	ldr	r3, [r3, #0]
    6936:	695a      	ldr	r2, [r3, #20]
    6938:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    693c:	011b      	lsls	r3, r3, #4
    693e:	3308      	adds	r3, #8
    6940:	4413      	add	r3, r2
    6942:	685b      	ldr	r3, [r3, #4]
    6944:	0bdb      	lsrs	r3, r3, #15
    6946:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    694a:	4313      	orrs	r3, r2
    694c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    6950:	e0cf      	b.n	6af2 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    6952:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6956:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    695a:	681b      	ldr	r3, [r3, #0]
    695c:	695a      	ldr	r2, [r3, #20]
    695e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6962:	011b      	lsls	r3, r3, #4
    6964:	4413      	add	r3, r2
    6966:	685b      	ldr	r3, [r3, #4]
    6968:	04db      	lsls	r3, r3, #19
    696a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    696e:	4313      	orrs	r3, r2
    6970:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    6974:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6978:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    697c:	681b      	ldr	r3, [r3, #0]
    697e:	695a      	ldr	r2, [r3, #20]
    6980:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6984:	011b      	lsls	r3, r3, #4
    6986:	3308      	adds	r3, #8
    6988:	4413      	add	r3, r2
    698a:	685b      	ldr	r3, [r3, #4]
    698c:	00db      	lsls	r3, r3, #3
    698e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6992:	4313      	orrs	r3, r2
    6994:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    6998:	e0ab      	b.n	6af2 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    699a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    699e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    69a2:	681b      	ldr	r3, [r3, #0]
    69a4:	7c9b      	ldrb	r3, [r3, #18]
    69a6:	009b      	lsls	r3, r3, #2
    69a8:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    69ac:	2300      	movs	r3, #0
    69ae:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    69b2:	2302      	movs	r3, #2
    69b4:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    69b8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    69bc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    69c0:	681b      	ldr	r3, [r3, #0]
    69c2:	689b      	ldr	r3, [r3, #8]
    69c4:	2b00      	cmp	r3, #0
    69c6:	d04a      	beq.n	6a5e <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    69c8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    69cc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    69d0:	681b      	ldr	r3, [r3, #0]
    69d2:	695a      	ldr	r2, [r3, #20]
    69d4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    69d8:	015b      	lsls	r3, r3, #5
    69da:	4413      	add	r3, r2
    69dc:	685b      	ldr	r3, [r3, #4]
    69de:	0d5b      	lsrs	r3, r3, #21
    69e0:	061b      	lsls	r3, r3, #24
    69e2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    69e6:	4313      	orrs	r3, r2
    69e8:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    69ec:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    69f0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    69f4:	681b      	ldr	r3, [r3, #0]
    69f6:	695a      	ldr	r2, [r3, #20]
    69f8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    69fc:	015b      	lsls	r3, r3, #5
    69fe:	3308      	adds	r3, #8
    6a00:	4413      	add	r3, r2
    6a02:	685b      	ldr	r3, [r3, #4]
    6a04:	0d5b      	lsrs	r3, r3, #21
    6a06:	041b      	lsls	r3, r3, #16
    6a08:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6a0c:	4313      	orrs	r3, r2
    6a0e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    6a12:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6a16:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6a1a:	681b      	ldr	r3, [r3, #0]
    6a1c:	695a      	ldr	r2, [r3, #20]
    6a1e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6a22:	015b      	lsls	r3, r3, #5
    6a24:	3310      	adds	r3, #16
    6a26:	4413      	add	r3, r2
    6a28:	685b      	ldr	r3, [r3, #4]
    6a2a:	0d5b      	lsrs	r3, r3, #21
    6a2c:	021b      	lsls	r3, r3, #8
    6a2e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6a32:	4313      	orrs	r3, r2
    6a34:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    6a38:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6a3c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6a40:	681b      	ldr	r3, [r3, #0]
    6a42:	695a      	ldr	r2, [r3, #20]
    6a44:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6a48:	015b      	lsls	r3, r3, #5
    6a4a:	3318      	adds	r3, #24
    6a4c:	4413      	add	r3, r2
    6a4e:	685b      	ldr	r3, [r3, #4]
    6a50:	0d5b      	lsrs	r3, r3, #21
    6a52:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6a56:	4313      	orrs	r3, r2
    6a58:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    6a5c:	e049      	b.n	6af2 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    6a5e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6a62:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6a66:	681b      	ldr	r3, [r3, #0]
    6a68:	695a      	ldr	r2, [r3, #20]
    6a6a:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6a6e:	015b      	lsls	r3, r3, #5
    6a70:	4413      	add	r3, r2
    6a72:	685b      	ldr	r3, [r3, #4]
    6a74:	08db      	lsrs	r3, r3, #3
    6a76:	061b      	lsls	r3, r3, #24
    6a78:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6a7c:	4313      	orrs	r3, r2
    6a7e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    6a82:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6a86:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6a8a:	681b      	ldr	r3, [r3, #0]
    6a8c:	695a      	ldr	r2, [r3, #20]
    6a8e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6a92:	015b      	lsls	r3, r3, #5
    6a94:	3308      	adds	r3, #8
    6a96:	4413      	add	r3, r2
    6a98:	685b      	ldr	r3, [r3, #4]
    6a9a:	08db      	lsrs	r3, r3, #3
    6a9c:	041b      	lsls	r3, r3, #16
    6a9e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6aa2:	4313      	orrs	r3, r2
    6aa4:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    6aa8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6aac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6ab0:	681b      	ldr	r3, [r3, #0]
    6ab2:	695a      	ldr	r2, [r3, #20]
    6ab4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6ab8:	015b      	lsls	r3, r3, #5
    6aba:	3310      	adds	r3, #16
    6abc:	4413      	add	r3, r2
    6abe:	685b      	ldr	r3, [r3, #4]
    6ac0:	08db      	lsrs	r3, r3, #3
    6ac2:	021b      	lsls	r3, r3, #8
    6ac4:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6ac8:	4313      	orrs	r3, r2
    6aca:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    6ace:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6ad2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6ad6:	681b      	ldr	r3, [r3, #0]
    6ad8:	695a      	ldr	r2, [r3, #20]
    6ada:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6ade:	015b      	lsls	r3, r3, #5
    6ae0:	3318      	adds	r3, #24
    6ae2:	4413      	add	r3, r2
    6ae4:	685b      	ldr	r3, [r3, #4]
    6ae6:	08db      	lsrs	r3, r3, #3
    6ae8:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6aec:	4313      	orrs	r3, r2
    6aee:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    6af2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6af6:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    6afa:	681b      	ldr	r3, [r3, #0]
    6afc:	789b      	ldrb	r3, [r3, #2]
    6afe:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    6b02:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    6b06:	4618      	mov	r0, r3
    6b08:	f002 fd0e 	bl	9528 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    6b0c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6b10:	3301      	adds	r3, #1
    6b12:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    6b16:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    6b1a:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    6b1e:	429a      	cmp	r2, r3
    6b20:	d20a      	bcs.n	6b38 <Can_Ipw_InitLegacyFifoFilter+0x36a>
    6b22:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6b26:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6b2a:	681b      	ldr	r3, [r3, #0]
    6b2c:	7c9b      	ldrb	r3, [r3, #18]
    6b2e:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    6b32:	429a      	cmp	r2, r3
    6b34:	f4ff ae85 	bcc.w	6842 <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    6b38:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6b3c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    6b40:	681b      	ldr	r3, [r3, #0]
    6b42:	789a      	ldrb	r2, [r3, #2]
    6b44:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6b48:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    6b4c:	681b      	ldr	r3, [r3, #0]
    6b4e:	68db      	ldr	r3, [r3, #12]
    6b50:	4619      	mov	r1, r3
    6b52:	4610      	mov	r0, r2
    6b54:	f002 fd36 	bl	95c4 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    6b58:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    6b5c:	2b00      	cmp	r3, #0
    6b5e:	d054      	beq.n	6c0a <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    6b60:	2300      	movs	r3, #0
    6b62:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    6b66:	e03e      	b.n	6be6 <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    6b68:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6b6c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6b70:	681b      	ldr	r3, [r3, #0]
    6b72:	695a      	ldr	r2, [r3, #20]
    6b74:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6b78:	00db      	lsls	r3, r3, #3
    6b7a:	441a      	add	r2, r3
    6b7c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6b80:	6812      	ldr	r2, [r2, #0]
    6b82:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    6b86:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    6b8a:	00db      	lsls	r3, r3, #3
    6b8c:	440b      	add	r3, r1
    6b8e:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    6b90:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6b94:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    6b98:	681b      	ldr	r3, [r3, #0]
    6b9a:	689b      	ldr	r3, [r3, #8]
    6b9c:	2b00      	cmp	r3, #0
    6b9e:	d00a      	beq.n	6bb6 <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    6ba0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6ba4:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    6ba8:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    6bac:	00db      	lsls	r3, r3, #3
    6bae:	4413      	add	r3, r2
    6bb0:	2201      	movs	r2, #1
    6bb2:	705a      	strb	r2, [r3, #1]
    6bb4:	e009      	b.n	6bca <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    6bb6:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6bba:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    6bbe:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    6bc2:	00db      	lsls	r3, r3, #3
    6bc4:	4413      	add	r3, r2
    6bc6:	2200      	movs	r2, #0
    6bc8:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    6bca:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    6bce:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6bd2:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    6bd6:	2100      	movs	r1, #0
    6bd8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    6bdc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    6be0:	3301      	adds	r3, #1
    6be2:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    6be6:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    6bea:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    6bee:	429a      	cmp	r2, r3
    6bf0:	d3ba      	bcc.n	6b68 <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    6bf2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    6bf6:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    6bfa:	681b      	ldr	r3, [r3, #0]
    6bfc:	789b      	ldrb	r3, [r3, #2]
    6bfe:	aa02      	add	r2, sp, #8
    6c00:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    6c04:	4618      	mov	r0, r3
    6c06:	f002 f872 	bl	8cee <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    6c0a:	bf00      	nop
    6c0c:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    6c10:	f85d fb04 	ldr.w	pc, [sp], #4

00006c14 <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    6c14:	b510      	push	{r4, lr}
    6c16:	b084      	sub	sp, #16
    6c18:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
#else
    uint16 BaudRateConfigID = ControllerConfig->Can_u16DefaultBaudrateID;
    6c1a:	9b01      	ldr	r3, [sp, #4]
    6c1c:	8b9b      	ldrh	r3, [r3, #28]
    6c1e:	f8ad 300e 	strh.w	r3, [sp, #14]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    6c22:	9b01      	ldr	r3, [sp, #4]
    6c24:	6a1a      	ldr	r2, [r3, #32]
    6c26:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6c2a:	2116      	movs	r1, #22
    6c2c:	fb01 f303 	mul.w	r3, r1, r3
    6c30:	4413      	add	r3, r2
    6c32:	785b      	ldrb	r3, [r3, #1]
    6c34:	2b00      	cmp	r3, #0
    6c36:	d016      	beq.n	6c66 <Can_Ipw_InitBaudrate+0x52>
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    6c38:	9b01      	ldr	r3, [sp, #4]
    6c3a:	7898      	ldrb	r0, [r3, #2]
    6c3c:	9b01      	ldr	r3, [sp, #4]
    6c3e:	6a1a      	ldr	r2, [r3, #32]
    6c40:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6c44:	2116      	movs	r1, #22
    6c46:	fb01 f303 	mul.w	r3, r1, r3
    6c4a:	4413      	add	r3, r2
    6c4c:	7cd9      	ldrb	r1, [r3, #19]
    6c4e:	9b01      	ldr	r3, [sp, #4]
    6c50:	6a1a      	ldr	r2, [r3, #32]
    6c52:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6c56:	2416      	movs	r4, #22
    6c58:	fb04 f303 	mul.w	r3, r4, r3
    6c5c:	4413      	add	r3, r2
    6c5e:	7d1b      	ldrb	r3, [r3, #20]
    6c60:	461a      	mov	r2, r3
    6c62:	f003 f829 	bl	9cb8 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    6c66:	9b01      	ldr	r3, [sp, #4]
    6c68:	7898      	ldrb	r0, [r3, #2]
    6c6a:	9b01      	ldr	r3, [sp, #4]
    6c6c:	6a1a      	ldr	r2, [r3, #32]
    6c6e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6c72:	2116      	movs	r1, #22
    6c74:	fb01 f303 	mul.w	r3, r1, r3
    6c78:	4413      	add	r3, r2
    6c7a:	7c9b      	ldrb	r3, [r3, #18]
    6c7c:	4619      	mov	r1, r3
    6c7e:	f003 f86f 	bl	9d60 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    6c82:	bf00      	nop
    6c84:	b004      	add	sp, #16
    6c86:	bd10      	pop	{r4, pc}

00006c88 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    6c88:	b500      	push	{lr}
    6c8a:	b087      	sub	sp, #28
    6c8c:	9003      	str	r0, [sp, #12]
    6c8e:	9102      	str	r1, [sp, #8]
    6c90:	4613      	mov	r3, r2
    6c92:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    6c96:	2300      	movs	r3, #0
    6c98:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    6c9c:	9b03      	ldr	r3, [sp, #12]
    6c9e:	785b      	ldrb	r3, [r3, #1]
    6ca0:	461a      	mov	r2, r3
    6ca2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ca6:	491c      	ldr	r1, [pc, #112]	; (6d18 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    6ca8:	0152      	lsls	r2, r2, #5
    6caa:	4413      	add	r3, r2
    6cac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6cb0:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    6cb4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6cbc:	4293      	cmp	r3, r2
    6cbe:	d027      	beq.n	6d10 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    6cc0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6cc4:	4613      	mov	r3, r2
    6cc6:	00db      	lsls	r3, r3, #3
    6cc8:	4413      	add	r3, r2
    6cca:	009b      	lsls	r3, r3, #2
    6ccc:	461a      	mov	r2, r3
    6cce:	9b02      	ldr	r3, [sp, #8]
    6cd0:	4413      	add	r3, r2
    6cd2:	7b1b      	ldrb	r3, [r3, #12]
    6cd4:	f083 0301 	eor.w	r3, r3, #1
    6cd8:	b2db      	uxtb	r3, r3
    6cda:	2b00      	cmp	r3, #0
    6cdc:	d018      	beq.n	6d10 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    6cde:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6ce2:	4613      	mov	r3, r2
    6ce4:	00db      	lsls	r3, r3, #3
    6ce6:	4413      	add	r3, r2
    6ce8:	009b      	lsls	r3, r3, #2
    6cea:	461a      	mov	r2, r3
    6cec:	9b02      	ldr	r3, [sp, #8]
    6cee:	4413      	add	r3, r2
    6cf0:	699b      	ldr	r3, [r3, #24]
    6cf2:	2b03      	cmp	r3, #3
    6cf4:	d10c      	bne.n	6d10 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    6cf6:	9b03      	ldr	r3, [sp, #12]
    6cf8:	785b      	ldrb	r3, [r3, #1]
    6cfa:	461a      	mov	r2, r3
    6cfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d00:	4906      	ldr	r1, [pc, #24]	; (6d1c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    6d02:	0152      	lsls	r2, r2, #5
    6d04:	4413      	add	r3, r2
    6d06:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6d0a:	4618      	mov	r0, r3
    6d0c:	f7f9 fe06 	bl	91c <CanIf_TxConfirmation>
            }
        }
    }
    6d10:	bf00      	nop
    6d12:	b007      	add	sp, #28
    6d14:	f85d fb04 	ldr.w	pc, [sp], #4
    6d18:	1fff8f58 	.word	0x1fff8f58
    6d1c:	1fff8f18 	.word	0x1fff8f18

00006d20 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    6d20:	b500      	push	{lr}
    6d22:	b08f      	sub	sp, #60	; 0x3c
    6d24:	9005      	str	r0, [sp, #20]
    6d26:	9104      	str	r1, [sp, #16]
    6d28:	4613      	mov	r3, r2
    6d2a:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    6d2e:	2300      	movs	r3, #0
    6d30:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    6d34:	2300      	movs	r3, #0
    6d36:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    6d38:	2300      	movs	r3, #0
    6d3a:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    6d3c:	9b05      	ldr	r3, [sp, #20]
    6d3e:	785b      	ldrb	r3, [r3, #1]
    6d40:	461a      	mov	r2, r3
    6d42:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6d46:	493f      	ldr	r1, [pc, #252]	; (6e44 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x124>)
    6d48:	0152      	lsls	r2, r2, #5
    6d4a:	4413      	add	r3, r2
    6d4c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6d50:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    6d54:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    6d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6d5c:	4293      	cmp	r3, r2
    6d5e:	d06c      	beq.n	6e3a <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
    6d60:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    6d64:	4613      	mov	r3, r2
    6d66:	00db      	lsls	r3, r3, #3
    6d68:	4413      	add	r3, r2
    6d6a:	009b      	lsls	r3, r3, #2
    6d6c:	461a      	mov	r2, r3
    6d6e:	9b04      	ldr	r3, [sp, #16]
    6d70:	4413      	add	r3, r2
    6d72:	7b1b      	ldrb	r3, [r3, #12]
    6d74:	f083 0301 	eor.w	r3, r3, #1
    6d78:	b2db      	uxtb	r3, r3
    6d7a:	2b00      	cmp	r3, #0
    6d7c:	d05d      	beq.n	6e3a <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    6d7e:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    6d82:	4613      	mov	r3, r2
    6d84:	00db      	lsls	r3, r3, #3
    6d86:	4413      	add	r3, r2
    6d88:	009b      	lsls	r3, r3, #2
    6d8a:	461a      	mov	r2, r3
    6d8c:	9b04      	ldr	r3, [sp, #16]
    6d8e:	4413      	add	r3, r2
    6d90:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    6d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6d94:	699b      	ldr	r3, [r3, #24]
    6d96:	2b00      	cmp	r3, #0
    6d98:	d118      	bne.n	6dcc <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xac>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    6d9a:	4a2b      	ldr	r2, [pc, #172]	; (6e48 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    6d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6d9e:	7f1b      	ldrb	r3, [r3, #28]
    6da0:	011b      	lsls	r3, r3, #4
    6da2:	4413      	add	r3, r2
    6da4:	681b      	ldr	r3, [r3, #0]
    6da6:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    6da8:	a906      	add	r1, sp, #24
    6daa:	a809      	add	r0, sp, #36	; 0x24
    6dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6dae:	9300      	str	r3, [sp, #0]
    6db0:	9b05      	ldr	r3, [sp, #20]
    6db2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6db4:	f7ff fcae 	bl	6714 <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    6db8:	9b05      	ldr	r3, [sp, #20]
    6dba:	7898      	ldrb	r0, [r3, #2]
    6dbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6dbe:	7f19      	ldrb	r1, [r3, #28]
    6dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6dc2:	7b1b      	ldrb	r3, [r3, #12]
    6dc4:	2200      	movs	r2, #0
    6dc6:	f001 fe61 	bl	8a8c <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    6dca:	e036      	b.n	6e3a <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    6dcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6dce:	699b      	ldr	r3, [r3, #24]
    6dd0:	2b01      	cmp	r3, #1
    6dd2:	d132      	bne.n	6e3a <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                if ((uint8)7U == u8MbIdx)
    6dd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6dd8:	2b07      	cmp	r3, #7
    6dda:	d10d      	bne.n	6df8 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xd8>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    6ddc:	2301      	movs	r3, #1
    6dde:	2208      	movs	r2, #8
    6de0:	2100      	movs	r1, #0
    6de2:	2050      	movs	r0, #80	; 0x50
    6de4:	f006 fff0 	bl	ddc8 <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    6de8:	9b05      	ldr	r3, [sp, #20]
    6dea:	699b      	ldr	r3, [r3, #24]
    6dec:	2b00      	cmp	r3, #0
    6dee:	d024      	beq.n	6e3a <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    6df0:	9b05      	ldr	r3, [sp, #20]
    6df2:	699b      	ldr	r3, [r3, #24]
    6df4:	4798      	blx	r3
    }
    6df6:	e020      	b.n	6e3a <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                else if ((uint8)6U == u8MbIdx)
    6df8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6dfc:	2b06      	cmp	r3, #6
    6dfe:	d107      	bne.n	6e10 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xf0>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    6e00:	9b05      	ldr	r3, [sp, #20]
    6e02:	695b      	ldr	r3, [r3, #20]
    6e04:	2b00      	cmp	r3, #0
    6e06:	d018      	beq.n	6e3a <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    6e08:	9b05      	ldr	r3, [sp, #20]
    6e0a:	695b      	ldr	r3, [r3, #20]
    6e0c:	4798      	blx	r3
    }
    6e0e:	e014      	b.n	6e3a <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    6e10:	4a0d      	ldr	r2, [pc, #52]	; (6e48 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    6e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6e14:	7f1b      	ldrb	r3, [r3, #28]
    6e16:	011b      	lsls	r3, r3, #4
    6e18:	4413      	add	r3, r2
    6e1a:	681b      	ldr	r3, [r3, #0]
    6e1c:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    6e1e:	a906      	add	r1, sp, #24
    6e20:	a809      	add	r0, sp, #36	; 0x24
    6e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6e24:	9300      	str	r3, [sp, #0]
    6e26:	9b05      	ldr	r3, [sp, #20]
    6e28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6e2a:	f7ff fc73 	bl	6714 <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    6e2e:	9b05      	ldr	r3, [sp, #20]
    6e30:	789b      	ldrb	r3, [r3, #2]
    6e32:	2100      	movs	r1, #0
    6e34:	4618      	mov	r0, r3
    6e36:	f001 ff27 	bl	8c88 <FlexCAN_Ip_RxFifo>
    }
    6e3a:	bf00      	nop
    6e3c:	b00f      	add	sp, #60	; 0x3c
    6e3e:	f85d fb04 	ldr.w	pc, [sp], #4
    6e42:	bf00      	nop
    6e44:	1fff8f58 	.word	0x1fff8f58
    6e48:	1fff8cf8 	.word	0x1fff8cf8

00006e4c <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    6e4c:	b510      	push	{r4, lr}
    6e4e:	b084      	sub	sp, #16
    6e50:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    6e52:	2301      	movs	r3, #1
    6e54:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    6e58:	2300      	movs	r3, #0
    6e5a:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    6e5e:	2300      	movs	r3, #0
    6e60:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    6e64:	2300      	movs	r3, #0
    6e66:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    6e68:	2300      	movs	r3, #0
    6e6a:	f88d 300d 	strb.w	r3, [sp, #13]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    6e6e:	9b01      	ldr	r3, [sp, #4]
    6e70:	7898      	ldrb	r0, [r3, #2]
    6e72:	4976      	ldr	r1, [pc, #472]	; (704c <Can_43_FLEXCAN_Ipw_Init+0x200>)
    6e74:	9b01      	ldr	r3, [sp, #4]
    6e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6e78:	681b      	ldr	r3, [r3, #0]
    6e7a:	461a      	mov	r2, r3
    6e7c:	f001 fcfa 	bl	8874 <FlexCAN_Ip_Init_Privileged>
    6e80:	4603      	mov	r3, r0
    6e82:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    6e86:	9b01      	ldr	r3, [sp, #4]
    6e88:	785b      	ldrb	r3, [r3, #1]
    6e8a:	461a      	mov	r2, r3
    6e8c:	4b70      	ldr	r3, [pc, #448]	; (7050 <Can_43_FLEXCAN_Ipw_Init+0x204>)
    6e8e:	2101      	movs	r1, #1
    6e90:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    6e92:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6e96:	2b00      	cmp	r3, #0
    6e98:	d13b      	bne.n	6f12 <Can_43_FLEXCAN_Ipw_Init+0xc6>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    6e9a:	9b01      	ldr	r3, [sp, #4]
    6e9c:	789b      	ldrb	r3, [r3, #2]
    6e9e:	4618      	mov	r0, r3
    6ea0:	f003 f81c 	bl	9edc <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    6ea4:	9b01      	ldr	r3, [sp, #4]
    6ea6:	6a1a      	ldr	r2, [r3, #32]
    6ea8:	9b01      	ldr	r3, [sp, #4]
    6eaa:	8b9b      	ldrh	r3, [r3, #28]
    6eac:	4619      	mov	r1, r3
    6eae:	2316      	movs	r3, #22
    6eb0:	fb01 f303 	mul.w	r3, r1, r3
    6eb4:	4413      	add	r3, r2
    6eb6:	785b      	ldrb	r3, [r3, #1]
    6eb8:	2b00      	cmp	r3, #0
    6eba:	d018      	beq.n	6eee <Can_43_FLEXCAN_Ipw_Init+0xa2>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    6ebc:	9b01      	ldr	r3, [sp, #4]
    6ebe:	7898      	ldrb	r0, [r3, #2]
    6ec0:	9b01      	ldr	r3, [sp, #4]
    6ec2:	6a1a      	ldr	r2, [r3, #32]
    6ec4:	9b01      	ldr	r3, [sp, #4]
    6ec6:	8b9b      	ldrh	r3, [r3, #28]
    6ec8:	4619      	mov	r1, r3
    6eca:	2316      	movs	r3, #22
    6ecc:	fb01 f303 	mul.w	r3, r1, r3
    6ed0:	4413      	add	r3, r2
    6ed2:	7cd9      	ldrb	r1, [r3, #19]
    6ed4:	9b01      	ldr	r3, [sp, #4]
    6ed6:	6a1a      	ldr	r2, [r3, #32]
    6ed8:	9b01      	ldr	r3, [sp, #4]
    6eda:	8b9b      	ldrh	r3, [r3, #28]
    6edc:	461c      	mov	r4, r3
    6ede:	2316      	movs	r3, #22
    6ee0:	fb04 f303 	mul.w	r3, r4, r3
    6ee4:	4413      	add	r3, r2
    6ee6:	7d1b      	ldrb	r3, [r3, #20]
    6ee8:	461a      	mov	r2, r3
    6eea:	f002 fee5 	bl	9cb8 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    6eee:	9b01      	ldr	r3, [sp, #4]
    6ef0:	7898      	ldrb	r0, [r3, #2]
    6ef2:	9b01      	ldr	r3, [sp, #4]
    6ef4:	6a1a      	ldr	r2, [r3, #32]
    6ef6:	9b01      	ldr	r3, [sp, #4]
    6ef8:	8b9b      	ldrh	r3, [r3, #28]
    6efa:	4619      	mov	r1, r3
    6efc:	2316      	movs	r3, #22
    6efe:	fb01 f303 	mul.w	r3, r1, r3
    6f02:	4413      	add	r3, r2
    6f04:	7c9b      	ldrb	r3, [r3, #18]
    6f06:	4619      	mov	r1, r3
    6f08:	f002 ff2a 	bl	9d60 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    6f0c:	9801      	ldr	r0, [sp, #4]
    6f0e:	f000 fb05 	bl	751c <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    6f12:	2300      	movs	r3, #0
    6f14:	f88d 300d 	strb.w	r3, [sp, #13]
    6f18:	e010      	b.n	6f3c <Can_43_FLEXCAN_Ipw_Init+0xf0>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    6f1a:	9b01      	ldr	r3, [sp, #4]
    6f1c:	785b      	ldrb	r3, [r3, #1]
    6f1e:	461a      	mov	r2, r3
    6f20:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6f24:	494b      	ldr	r1, [pc, #300]	; (7054 <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6f26:	0152      	lsls	r2, r2, #5
    6f28:	4413      	add	r3, r2
    6f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6f2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    6f32:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6f36:	3301      	adds	r3, #1
    6f38:	f88d 300d 	strb.w	r3, [sp, #13]
    6f3c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6f40:	2b1f      	cmp	r3, #31
    6f42:	d9ea      	bls.n	6f1a <Can_43_FLEXCAN_Ipw_Init+0xce>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    6f44:	2300      	movs	r3, #0
    6f46:	f88d 300f 	strb.w	r3, [sp, #15]
    6f4a:	e06b      	b.n	7024 <Can_43_FLEXCAN_Ipw_Init+0x1d8>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    6f4c:	9b01      	ldr	r3, [sp, #4]
    6f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6f50:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f54:	009b      	lsls	r3, r3, #2
    6f56:	4413      	add	r3, r2
    6f58:	681b      	ldr	r3, [r3, #0]
    6f5a:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    6f5c:	9b02      	ldr	r3, [sp, #8]
    6f5e:	699b      	ldr	r3, [r3, #24]
    6f60:	2b03      	cmp	r3, #3
    6f62:	d006      	beq.n	6f72 <Can_43_FLEXCAN_Ipw_Init+0x126>
    6f64:	2b03      	cmp	r3, #3
    6f66:	d857      	bhi.n	7018 <Can_43_FLEXCAN_Ipw_Init+0x1cc>
    6f68:	2b00      	cmp	r3, #0
    6f6a:	d023      	beq.n	6fb4 <Can_43_FLEXCAN_Ipw_Init+0x168>
    6f6c:	2b01      	cmp	r3, #1
    6f6e:	d02f      	beq.n	6fd0 <Can_43_FLEXCAN_Ipw_Init+0x184>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    6f70:	e052      	b.n	7018 <Can_43_FLEXCAN_Ipw_Init+0x1cc>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    6f72:	2300      	movs	r3, #0
    6f74:	f88d 300e 	strb.w	r3, [sp, #14]
    6f78:	e015      	b.n	6fa6 <Can_43_FLEXCAN_Ipw_Init+0x15a>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    6f7a:	9b01      	ldr	r3, [sp, #4]
    6f7c:	785b      	ldrb	r3, [r3, #1]
    6f7e:	461c      	mov	r4, r3
    6f80:	9b02      	ldr	r3, [sp, #8]
    6f82:	7f1b      	ldrb	r3, [r3, #28]
    6f84:	461a      	mov	r2, r3
    6f86:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6f8a:	4413      	add	r3, r2
    6f8c:	9a02      	ldr	r2, [sp, #8]
    6f8e:	8810      	ldrh	r0, [r2, #0]
    6f90:	4930      	ldr	r1, [pc, #192]	; (7054 <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6f92:	0162      	lsls	r2, r4, #5
    6f94:	4413      	add	r3, r2
    6f96:	4602      	mov	r2, r0
    6f98:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    6f9c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6fa0:	3301      	adds	r3, #1
    6fa2:	f88d 300e 	strb.w	r3, [sp, #14]
    6fa6:	9b02      	ldr	r3, [sp, #8]
    6fa8:	7b9b      	ldrb	r3, [r3, #14]
    6faa:	f89d 200e 	ldrb.w	r2, [sp, #14]
    6fae:	429a      	cmp	r2, r3
    6fb0:	d3e3      	bcc.n	6f7a <Can_43_FLEXCAN_Ipw_Init+0x12e>
                break;
    6fb2:	e032      	b.n	701a <Can_43_FLEXCAN_Ipw_Init+0x1ce>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    6fb4:	9b01      	ldr	r3, [sp, #4]
    6fb6:	785b      	ldrb	r3, [r3, #1]
    6fb8:	461c      	mov	r4, r3
    6fba:	9b02      	ldr	r3, [sp, #8]
    6fbc:	7f1b      	ldrb	r3, [r3, #28]
    6fbe:	4618      	mov	r0, r3
    6fc0:	9b02      	ldr	r3, [sp, #8]
    6fc2:	8819      	ldrh	r1, [r3, #0]
    6fc4:	4a23      	ldr	r2, [pc, #140]	; (7054 <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6fc6:	0163      	lsls	r3, r4, #5
    6fc8:	4403      	add	r3, r0
    6fca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    6fce:	e024      	b.n	701a <Can_43_FLEXCAN_Ipw_Init+0x1ce>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    6fd0:	9b01      	ldr	r3, [sp, #4]
    6fd2:	785b      	ldrb	r3, [r3, #1]
    6fd4:	461c      	mov	r4, r3
    6fd6:	9b02      	ldr	r3, [sp, #8]
    6fd8:	7f1b      	ldrb	r3, [r3, #28]
    6fda:	4618      	mov	r0, r3
    6fdc:	9b02      	ldr	r3, [sp, #8]
    6fde:	8819      	ldrh	r1, [r3, #0]
    6fe0:	4a1c      	ldr	r2, [pc, #112]	; (7054 <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6fe2:	0163      	lsls	r3, r4, #5
    6fe4:	4403      	add	r3, r0
    6fe6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    6fea:	9b01      	ldr	r3, [sp, #4]
    6fec:	785b      	ldrb	r3, [r3, #1]
    6fee:	4618      	mov	r0, r3
    6ff0:	9b02      	ldr	r3, [sp, #8]
    6ff2:	8819      	ldrh	r1, [r3, #0]
    6ff4:	4a17      	ldr	r2, [pc, #92]	; (7054 <Can_43_FLEXCAN_Ipw_Init+0x208>)
    6ff6:	0183      	lsls	r3, r0, #6
    6ff8:	4413      	add	r3, r2
    6ffa:	330c      	adds	r3, #12
    6ffc:	460a      	mov	r2, r1
    6ffe:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    7000:	9b01      	ldr	r3, [sp, #4]
    7002:	785b      	ldrb	r3, [r3, #1]
    7004:	4618      	mov	r0, r3
    7006:	9b02      	ldr	r3, [sp, #8]
    7008:	8819      	ldrh	r1, [r3, #0]
    700a:	4a12      	ldr	r2, [pc, #72]	; (7054 <Can_43_FLEXCAN_Ipw_Init+0x208>)
    700c:	0183      	lsls	r3, r0, #6
    700e:	4413      	add	r3, r2
    7010:	330e      	adds	r3, #14
    7012:	460a      	mov	r2, r1
    7014:	801a      	strh	r2, [r3, #0]
                break;
    7016:	e000      	b.n	701a <Can_43_FLEXCAN_Ipw_Init+0x1ce>
                break;
    7018:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    701a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    701e:	3301      	adds	r3, #1
    7020:	f88d 300f 	strb.w	r3, [sp, #15]
    7024:	9b01      	ldr	r3, [sp, #4]
    7026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    702a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    702e:	429a      	cmp	r2, r3
    7030:	d38c      	bcc.n	6f4c <Can_43_FLEXCAN_Ipw_Init+0x100>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    7032:	9b01      	ldr	r3, [sp, #4]
    7034:	789b      	ldrb	r3, [r3, #2]
    7036:	4618      	mov	r0, r3
    7038:	f002 fca0 	bl	997c <FlexCAN_Ip_SetStopMode_Privileged>
    703c:	4603      	mov	r3, r0
    703e:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    7042:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    7046:	4618      	mov	r0, r3
    7048:	b004      	add	sp, #16
    704a:	bd10      	pop	{r4, pc}
    704c:	1fff8cf8 	.word	0x1fff8cf8
    7050:	1fff8f98 	.word	0x1fff8f98
    7054:	1fff8f58 	.word	0x1fff8f58

00007058 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7058:	b500      	push	{lr}
    705a:	b083      	sub	sp, #12
    705c:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    705e:	9b01      	ldr	r3, [sp, #4]
    7060:	789b      	ldrb	r3, [r3, #2]
    7062:	4618      	mov	r0, r3
    7064:	f002 faf6 	bl	9654 <FlexCAN_Ip_Deinit_Privileged>
}
    7068:	bf00      	nop
    706a:	b003      	add	sp, #12
    706c:	f85d fb04 	ldr.w	pc, [sp], #4

00007070 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7070:	b500      	push	{lr}
    7072:	b085      	sub	sp, #20
    7074:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    7076:	2300      	movs	r3, #0
    7078:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    707a:	9b01      	ldr	r3, [sp, #4]
    707c:	785b      	ldrb	r3, [r3, #1]
    707e:	461a      	mov	r2, r3
    7080:	4b11      	ldr	r3, [pc, #68]	; (70c8 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    7082:	5c9b      	ldrb	r3, [r3, r2]
    7084:	2b00      	cmp	r3, #0
    7086:	d012      	beq.n	70ae <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    7088:	9b01      	ldr	r3, [sp, #4]
    708a:	7a5b      	ldrb	r3, [r3, #9]
    708c:	f083 0301 	eor.w	r3, r3, #1
    7090:	b2db      	uxtb	r3, r3
    7092:	2b00      	cmp	r3, #0
    7094:	d006      	beq.n	70a4 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    7096:	9b01      	ldr	r3, [sp, #4]
    7098:	789b      	ldrb	r3, [r3, #2]
    709a:	2201      	movs	r2, #1
    709c:	2104      	movs	r1, #4
    709e:	4618      	mov	r0, r3
    70a0:	f002 ff48 	bl	9f34 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    70a4:	9b01      	ldr	r3, [sp, #4]
    70a6:	789b      	ldrb	r3, [r3, #2]
    70a8:	4618      	mov	r0, r3
    70aa:	f002 fee9 	bl	9e80 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    70ae:	9b01      	ldr	r3, [sp, #4]
    70b0:	789b      	ldrb	r3, [r3, #2]
    70b2:	4618      	mov	r0, r3
    70b4:	f002 fc42 	bl	993c <FlexCAN_Ip_SetStartMode_Privileged>
    70b8:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    70ba:	9b03      	ldr	r3, [sp, #12]
    70bc:	b2db      	uxtb	r3, r3
}
    70be:	4618      	mov	r0, r3
    70c0:	b005      	add	sp, #20
    70c2:	f85d fb04 	ldr.w	pc, [sp], #4
    70c6:	bf00      	nop
    70c8:	1fff8f98 	.word	0x1fff8f98

000070cc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    70cc:	b500      	push	{lr}
    70ce:	b087      	sub	sp, #28
    70d0:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    70d2:	2300      	movs	r3, #0
    70d4:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    70d8:	2300      	movs	r3, #0
    70da:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    70dc:	9b01      	ldr	r3, [sp, #4]
    70de:	7898      	ldrb	r0, [r3, #2]
    70e0:	4930      	ldr	r1, [pc, #192]	; (71a4 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd8>)
    70e2:	9b01      	ldr	r3, [sp, #4]
    70e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    70e6:	681b      	ldr	r3, [r3, #0]
    70e8:	461a      	mov	r2, r3
    70ea:	f001 fbc3 	bl	8874 <FlexCAN_Ip_Init_Privileged>
    70ee:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    70f0:	9b04      	ldr	r3, [sp, #16]
    70f2:	2b00      	cmp	r3, #0
    70f4:	d14f      	bne.n	7196 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xca>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    70f6:	9b01      	ldr	r3, [sp, #4]
    70f8:	789b      	ldrb	r3, [r3, #2]
    70fa:	4618      	mov	r0, r3
    70fc:	f002 feee 	bl	9edc <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    7100:	9801      	ldr	r0, [sp, #4]
    7102:	f7ff fd87 	bl	6c14 <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    7106:	9801      	ldr	r0, [sp, #4]
    7108:	f000 fa08 	bl	751c <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    710c:	2300      	movs	r3, #0
    710e:	f88d 3017 	strb.w	r3, [sp, #23]
    7112:	e02f      	b.n	7174 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    7114:	9b01      	ldr	r3, [sp, #4]
    7116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7118:	f89d 3017 	ldrb.w	r3, [sp, #23]
    711c:	009b      	lsls	r3, r3, #2
    711e:	4413      	add	r3, r2
    7120:	681b      	ldr	r3, [r3, #0]
    7122:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    7124:	9b03      	ldr	r3, [sp, #12]
    7126:	7b1b      	ldrb	r3, [r3, #12]
    7128:	f083 0301 	eor.w	r3, r3, #1
    712c:	b2db      	uxtb	r3, r3
    712e:	2b00      	cmp	r3, #0
    7130:	d018      	beq.n	7164 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x98>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    7132:	9b03      	ldr	r3, [sp, #12]
    7134:	699b      	ldr	r3, [r3, #24]
    7136:	2b00      	cmp	r3, #0
    7138:	d003      	beq.n	7142 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x76>
    713a:	3b01      	subs	r3, #1
    713c:	2b01      	cmp	r3, #1
    713e:	d813      	bhi.n	7168 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9c>
    7140:	e009      	b.n	7156 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x8a>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    7142:	9b01      	ldr	r3, [sp, #4]
    7144:	7898      	ldrb	r0, [r3, #2]
    7146:	9b03      	ldr	r3, [sp, #12]
    7148:	7f19      	ldrb	r1, [r3, #28]
    714a:	9b03      	ldr	r3, [sp, #12]
    714c:	7b1b      	ldrb	r3, [r3, #12]
    714e:	2200      	movs	r2, #0
    7150:	f001 fc9c 	bl	8a8c <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    7154:	e009      	b.n	716a <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    7156:	9b01      	ldr	r3, [sp, #4]
    7158:	789b      	ldrb	r3, [r3, #2]
    715a:	2100      	movs	r1, #0
    715c:	4618      	mov	r0, r3
    715e:	f001 fd93 	bl	8c88 <FlexCAN_Ip_RxFifo>
                        }
                        break;
    7162:	e002      	b.n	716a <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    7164:	bf00      	nop
    7166:	e000      	b.n	716a <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                        break;
    7168:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    716a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    716e:	3301      	adds	r3, #1
    7170:	f88d 3017 	strb.w	r3, [sp, #23]
    7174:	9b01      	ldr	r3, [sp, #4]
    7176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    717a:	f89d 2017 	ldrb.w	r2, [sp, #23]
    717e:	429a      	cmp	r2, r3
    7180:	d3c8      	bcc.n	7114 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x48>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    7182:	9801      	ldr	r0, [sp, #4]
    7184:	f7ff ff74 	bl	7070 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    7188:	4603      	mov	r3, r0
    718a:	2b00      	cmp	r3, #0
    718c:	bf14      	ite	ne
    718e:	2301      	movne	r3, #1
    7190:	2300      	moveq	r3, #0
    7192:	b2db      	uxtb	r3, r3
    7194:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    7196:	9b04      	ldr	r3, [sp, #16]
    7198:	b2db      	uxtb	r3, r3
}
    719a:	4618      	mov	r0, r3
    719c:	b007      	add	sp, #28
    719e:	f85d fb04 	ldr.w	pc, [sp], #4
    71a2:	bf00      	nop
    71a4:	1fff8cf8 	.word	0x1fff8cf8

000071a8 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    71a8:	b500      	push	{lr}
    71aa:	b085      	sub	sp, #20
    71ac:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    71ae:	2300      	movs	r3, #0
    71b0:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    71b4:	2300      	movs	r3, #0
    71b6:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    71ba:	9b01      	ldr	r3, [sp, #4]
    71bc:	789b      	ldrb	r3, [r3, #2]
    71be:	4618      	mov	r0, r3
    71c0:	f002 f986 	bl	94d0 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    71c4:	4603      	mov	r3, r0
    71c6:	2b00      	cmp	r3, #0
    71c8:	d160      	bne.n	728c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    71ca:	9b01      	ldr	r3, [sp, #4]
    71cc:	785b      	ldrb	r3, [r3, #1]
    71ce:	461a      	mov	r2, r3
    71d0:	4b33      	ldr	r3, [pc, #204]	; (72a0 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    71d2:	5c9b      	ldrb	r3, [r3, r2]
    71d4:	2b00      	cmp	r3, #0
    71d6:	d012      	beq.n	71fe <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    71d8:	9b01      	ldr	r3, [sp, #4]
    71da:	789b      	ldrb	r3, [r3, #2]
    71dc:	4618      	mov	r0, r3
    71de:	f002 fe7d 	bl	9edc <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    71e2:	9b01      	ldr	r3, [sp, #4]
    71e4:	7a5b      	ldrb	r3, [r3, #9]
    71e6:	f083 0301 	eor.w	r3, r3, #1
    71ea:	b2db      	uxtb	r3, r3
    71ec:	2b00      	cmp	r3, #0
    71ee:	d006      	beq.n	71fe <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    71f0:	9b01      	ldr	r3, [sp, #4]
    71f2:	789b      	ldrb	r3, [r3, #2]
    71f4:	2200      	movs	r2, #0
    71f6:	2104      	movs	r1, #4
    71f8:	4618      	mov	r0, r3
    71fa:	f002 fe9b 	bl	9f34 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    71fe:	2300      	movs	r3, #0
    7200:	f88d 300e 	strb.w	r3, [sp, #14]
    7204:	e032      	b.n	726c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    7206:	9b01      	ldr	r3, [sp, #4]
    7208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    720a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    720e:	009b      	lsls	r3, r3, #2
    7210:	4413      	add	r3, r2
    7212:	681b      	ldr	r3, [r3, #0]
    7214:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    7216:	9b02      	ldr	r3, [sp, #8]
    7218:	699b      	ldr	r3, [r3, #24]
    721a:	2b03      	cmp	r3, #3
    721c:	d119      	bne.n	7252 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    721e:	2300      	movs	r3, #0
    7220:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    7224:	9b01      	ldr	r3, [sp, #4]
    7226:	7898      	ldrb	r0, [r3, #2]
    7228:	9b02      	ldr	r3, [sp, #8]
    722a:	7f1a      	ldrb	r2, [r3, #28]
    722c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7230:	4413      	add	r3, r2
    7232:	b2db      	uxtb	r3, r3
    7234:	4619      	mov	r1, r3
    7236:	f002 ff03 	bl	a040 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    723a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    723e:	3301      	adds	r3, #1
    7240:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    7244:	9b02      	ldr	r3, [sp, #8]
    7246:	7b9b      	ldrb	r3, [r3, #14]
    7248:	f89d 200d 	ldrb.w	r2, [sp, #13]
    724c:	429a      	cmp	r2, r3
    724e:	d3e9      	bcc.n	7224 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    7250:	e007      	b.n	7262 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    7252:	9b01      	ldr	r3, [sp, #4]
    7254:	789a      	ldrb	r2, [r3, #2]
    7256:	9b02      	ldr	r3, [sp, #8]
    7258:	7f1b      	ldrb	r3, [r3, #28]
    725a:	4619      	mov	r1, r3
    725c:	4610      	mov	r0, r2
    725e:	f002 feef 	bl	a040 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7262:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7266:	3301      	adds	r3, #1
    7268:	f88d 300e 	strb.w	r3, [sp, #14]
    726c:	9b01      	ldr	r3, [sp, #4]
    726e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    7272:	f89d 200e 	ldrb.w	r2, [sp, #14]
    7276:	429a      	cmp	r2, r3
    7278:	d3c5      	bcc.n	7206 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    727a:	9b01      	ldr	r3, [sp, #4]
    727c:	789b      	ldrb	r3, [r3, #2]
    727e:	4618      	mov	r0, r3
    7280:	f002 fb7c 	bl	997c <FlexCAN_Ip_SetStopMode_Privileged>
    7284:	4603      	mov	r3, r0
    7286:	f88d 300f 	strb.w	r3, [sp, #15]
    728a:	e002      	b.n	7292 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    728c:	2301      	movs	r3, #1
    728e:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    7292:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7296:	4618      	mov	r0, r3
    7298:	b005      	add	sp, #20
    729a:	f85d fb04 	ldr.w	pc, [sp], #4
    729e:	bf00      	nop
    72a0:	1fff8f98 	.word	0x1fff8f98

000072a4 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    72a4:	b500      	push	{lr}
    72a6:	b083      	sub	sp, #12
    72a8:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    72aa:	9b01      	ldr	r3, [sp, #4]
    72ac:	785b      	ldrb	r3, [r3, #1]
    72ae:	461a      	mov	r2, r3
    72b0:	4b10      	ldr	r3, [pc, #64]	; (72f4 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    72b2:	5c9b      	ldrb	r3, [r3, r2]
    72b4:	2b00      	cmp	r3, #0
    72b6:	d018      	beq.n	72ea <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    72b8:	9b01      	ldr	r3, [sp, #4]
    72ba:	789b      	ldrb	r3, [r3, #2]
    72bc:	4618      	mov	r0, r3
    72be:	f002 fe0d 	bl	9edc <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    72c2:	9b01      	ldr	r3, [sp, #4]
    72c4:	785b      	ldrb	r3, [r3, #1]
    72c6:	461a      	mov	r2, r3
    72c8:	4b0a      	ldr	r3, [pc, #40]	; (72f4 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    72ca:	2100      	movs	r1, #0
    72cc:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    72ce:	9b01      	ldr	r3, [sp, #4]
    72d0:	7a5b      	ldrb	r3, [r3, #9]
    72d2:	f083 0301 	eor.w	r3, r3, #1
    72d6:	b2db      	uxtb	r3, r3
    72d8:	2b00      	cmp	r3, #0
    72da:	d006      	beq.n	72ea <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    72dc:	9b01      	ldr	r3, [sp, #4]
    72de:	789b      	ldrb	r3, [r3, #2]
    72e0:	2200      	movs	r2, #0
    72e2:	2104      	movs	r1, #4
    72e4:	4618      	mov	r0, r3
    72e6:	f002 fe25 	bl	9f34 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    72ea:	bf00      	nop
    72ec:	b003      	add	sp, #12
    72ee:	f85d fb04 	ldr.w	pc, [sp], #4
    72f2:	bf00      	nop
    72f4:	1fff8f98 	.word	0x1fff8f98

000072f8 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    72f8:	b500      	push	{lr}
    72fa:	b083      	sub	sp, #12
    72fc:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    72fe:	9b01      	ldr	r3, [sp, #4]
    7300:	785b      	ldrb	r3, [r3, #1]
    7302:	461a      	mov	r2, r3
    7304:	4b11      	ldr	r3, [pc, #68]	; (734c <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    7306:	5c9b      	ldrb	r3, [r3, r2]
    7308:	f083 0301 	eor.w	r3, r3, #1
    730c:	b2db      	uxtb	r3, r3
    730e:	2b00      	cmp	r3, #0
    7310:	d018      	beq.n	7344 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    7312:	9b01      	ldr	r3, [sp, #4]
    7314:	789b      	ldrb	r3, [r3, #2]
    7316:	4618      	mov	r0, r3
    7318:	f002 fdb2 	bl	9e80 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    731c:	9b01      	ldr	r3, [sp, #4]
    731e:	7a5b      	ldrb	r3, [r3, #9]
    7320:	f083 0301 	eor.w	r3, r3, #1
    7324:	b2db      	uxtb	r3, r3
    7326:	2b00      	cmp	r3, #0
    7328:	d006      	beq.n	7338 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    732a:	9b01      	ldr	r3, [sp, #4]
    732c:	789b      	ldrb	r3, [r3, #2]
    732e:	2201      	movs	r2, #1
    7330:	2104      	movs	r1, #4
    7332:	4618      	mov	r0, r3
    7334:	f002 fdfe 	bl	9f34 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    7338:	9b01      	ldr	r3, [sp, #4]
    733a:	785b      	ldrb	r3, [r3, #1]
    733c:	461a      	mov	r2, r3
    733e:	4b03      	ldr	r3, [pc, #12]	; (734c <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    7340:	2101      	movs	r1, #1
    7342:	5499      	strb	r1, [r3, r2]
    }
}
    7344:	bf00      	nop
    7346:	b003      	add	sp, #12
    7348:	f85d fb04 	ldr.w	pc, [sp], #4
    734c:	1fff8f98 	.word	0x1fff8f98

00007350 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    7350:	b500      	push	{lr}
    7352:	b085      	sub	sp, #20
    7354:	9001      	str	r0, [sp, #4]
    7356:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    7358:	2300      	movs	r3, #0
    735a:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    735c:	9b01      	ldr	r3, [sp, #4]
    735e:	789b      	ldrb	r3, [r3, #2]
    7360:	4618      	mov	r0, r3
    7362:	f001 fe81 	bl	9068 <FlexCAN_Ip_GetErrorStatus>
    7366:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    7368:	9b03      	ldr	r3, [sp, #12]
    736a:	091b      	lsrs	r3, r3, #4
    736c:	b2db      	uxtb	r3, r3
    736e:	f003 0303 	and.w	r3, r3, #3
    7372:	b2da      	uxtb	r2, r3
    7374:	9b00      	ldr	r3, [sp, #0]
    7376:	701a      	strb	r2, [r3, #0]
    return E_OK;
    7378:	2300      	movs	r3, #0
}
    737a:	4618      	mov	r0, r3
    737c:	b005      	add	sp, #20
    737e:	f85d fb04 	ldr.w	pc, [sp], #4

00007382 <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    7382:	b500      	push	{lr}
    7384:	b083      	sub	sp, #12
    7386:	9001      	str	r0, [sp, #4]
    7388:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    738a:	9b01      	ldr	r3, [sp, #4]
    738c:	789b      	ldrb	r3, [r3, #2]
    738e:	4618      	mov	r0, r3
    7390:	f001 fe7c 	bl	908c <FlexCAN_Ip_GetControllerTxErrorCounter>
    7394:	4603      	mov	r3, r0
    7396:	461a      	mov	r2, r3
    7398:	9b00      	ldr	r3, [sp, #0]
    739a:	701a      	strb	r2, [r3, #0]
     return E_OK;
    739c:	2300      	movs	r3, #0
}
    739e:	4618      	mov	r0, r3
    73a0:	b003      	add	sp, #12
    73a2:	f85d fb04 	ldr.w	pc, [sp], #4

000073a6 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    73a6:	b500      	push	{lr}
    73a8:	b083      	sub	sp, #12
    73aa:	9001      	str	r0, [sp, #4]
    73ac:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    73ae:	9b01      	ldr	r3, [sp, #4]
    73b0:	789b      	ldrb	r3, [r3, #2]
    73b2:	4618      	mov	r0, r3
    73b4:	f001 fe7c 	bl	90b0 <FlexCAN_Ip_GetControllerRxErrorCounter>
    73b8:	4603      	mov	r3, r0
    73ba:	461a      	mov	r2, r3
    73bc:	9b00      	ldr	r3, [sp, #0]
    73be:	701a      	strb	r2, [r3, #0]
    return E_OK;
    73c0:	2300      	movs	r3, #0
}
    73c2:	4618      	mov	r0, r3
    73c4:	b003      	add	sp, #12
    73c6:	f85d fb04 	ldr.w	pc, [sp], #4

000073ca <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    73ca:	b510      	push	{r4, lr}
    73cc:	b08c      	sub	sp, #48	; 0x30
    73ce:	9005      	str	r0, [sp, #20]
    73d0:	9104      	str	r1, [sp, #16]
    73d2:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    73d4:	2301      	movs	r3, #1
    73d6:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    73d8:	2300      	movs	r3, #0
    73da:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    73de:	2300      	movs	r3, #0
    73e0:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    73e2:	2300      	movs	r3, #0
    73e4:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    73e6:	2300      	movs	r3, #0
    73e8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    73ec:	2300      	movs	r3, #0
    73ee:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    73f2:	2300      	movs	r3, #0
    73f4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    73f8:	2300      	movs	r3, #0
    73fa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    73fe:	2300      	movs	r3, #0
    7400:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    7404:	9b04      	ldr	r3, [sp, #16]
    7406:	699b      	ldr	r3, [r3, #24]
    7408:	2b03      	cmp	r3, #3
    740a:	d173      	bne.n	74f4 <Can_43_FLEXCAN_Ipw_Write+0x12a>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    740c:	9b03      	ldr	r3, [sp, #12]
    740e:	681b      	ldr	r3, [r3, #0]
    7410:	0fdb      	lsrs	r3, r3, #31
    7412:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    7414:	9b04      	ldr	r3, [sp, #16]
    7416:	7c1a      	ldrb	r2, [r3, #16]
    7418:	9b03      	ldr	r3, [sp, #12]
    741a:	799b      	ldrb	r3, [r3, #6]
    741c:	429a      	cmp	r2, r3
    741e:	d803      	bhi.n	7428 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    7420:	9b04      	ldr	r3, [sp, #16]
    7422:	7c1b      	ldrb	r3, [r3, #16]
    7424:	9307      	str	r3, [sp, #28]
    7426:	e002      	b.n	742e <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    7428:	9b03      	ldr	r3, [sp, #12]
    742a:	799b      	ldrb	r3, [r3, #6]
    742c:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    742e:	9b04      	ldr	r3, [sp, #16]
    7430:	7c5b      	ldrb	r3, [r3, #17]
    7432:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    7436:	9b03      	ldr	r3, [sp, #12]
    7438:	681b      	ldr	r3, [r3, #0]
    743a:	0f9b      	lsrs	r3, r3, #30
    743c:	f003 0301 	and.w	r3, r3, #1
    7440:	2b00      	cmp	r3, #0
    7442:	bf14      	ite	ne
    7444:	2301      	movne	r3, #1
    7446:	2300      	moveq	r3, #0
    7448:	b2db      	uxtb	r3, r3
    744a:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    744e:	9b05      	ldr	r3, [sp, #20]
    7450:	6a1a      	ldr	r2, [r3, #32]
    7452:	9b05      	ldr	r3, [sp, #20]
    7454:	8b9b      	ldrh	r3, [r3, #28]
    7456:	4619      	mov	r1, r3
    7458:	2316      	movs	r3, #22
    745a:	fb01 f303 	mul.w	r3, r1, r3
    745e:	4413      	add	r3, r2
    7460:	781b      	ldrb	r3, [r3, #0]
    7462:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #endif
#endif
        DataInfo.is_remote = FALSE;
    7466:	2300      	movs	r3, #0
    7468:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    746c:	9b04      	ldr	r3, [sp, #16]
    746e:	7b1b      	ldrb	r3, [r3, #12]
    7470:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    7474:	9b05      	ldr	r3, [sp, #20]
    7476:	7898      	ldrb	r0, [r3, #2]
    7478:	9b04      	ldr	r3, [sp, #16]
    747a:	7f1a      	ldrb	r2, [r3, #28]
    747c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    7480:	4413      	add	r3, r2
    7482:	b2db      	uxtb	r3, r3
    7484:	4619      	mov	r1, r3
    7486:	f001 fcdd 	bl	8e44 <FlexCAN_Ip_GetTransferStatus>
    748a:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    748c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    748e:	2b00      	cmp	r3, #0
    7490:	d122      	bne.n	74d8 <Can_43_FLEXCAN_Ipw_Write+0x10e>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    7492:	9b05      	ldr	r3, [sp, #20]
    7494:	785b      	ldrb	r3, [r3, #1]
    7496:	461c      	mov	r4, r3
    7498:	9b04      	ldr	r3, [sp, #16]
    749a:	7f1b      	ldrb	r3, [r3, #28]
    749c:	461a      	mov	r2, r3
    749e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    74a2:	4413      	add	r3, r2
    74a4:	9a03      	ldr	r2, [sp, #12]
    74a6:	8890      	ldrh	r0, [r2, #4]
    74a8:	491b      	ldr	r1, [pc, #108]	; (7518 <Can_43_FLEXCAN_Ipw_Write+0x14e>)
    74aa:	0162      	lsls	r2, r4, #5
    74ac:	4413      	add	r3, r2
    74ae:	4602      	mov	r2, r0
    74b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    74b4:	9b05      	ldr	r3, [sp, #20]
    74b6:	7898      	ldrb	r0, [r3, #2]
    74b8:	9b04      	ldr	r3, [sp, #16]
    74ba:	7f1a      	ldrb	r2, [r3, #28]
    74bc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    74c0:	4413      	add	r3, r2
    74c2:	b2d9      	uxtb	r1, r3
    74c4:	9b03      	ldr	r3, [sp, #12]
    74c6:	681c      	ldr	r4, [r3, #0]
    74c8:	9b03      	ldr	r3, [sp, #12]
    74ca:	689b      	ldr	r3, [r3, #8]
    74cc:	aa06      	add	r2, sp, #24
    74ce:	9300      	str	r3, [sp, #0]
    74d0:	4623      	mov	r3, r4
    74d2:	f001 fa4b 	bl	896c <FlexCAN_Ip_Send>
    74d6:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    74d8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    74dc:	3301      	adds	r3, #1
    74de:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    74e2:	9b04      	ldr	r3, [sp, #16]
    74e4:	7b9b      	ldrb	r3, [r3, #14]
    74e6:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    74ea:	429a      	cmp	r2, r3
    74ec:	d202      	bcs.n	74f4 <Can_43_FLEXCAN_Ipw_Write+0x12a>
    74ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    74f0:	2b02      	cmp	r3, #2
    74f2:	d0bf      	beq.n	7474 <Can_43_FLEXCAN_Ipw_Write+0xaa>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    74f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    74f6:	2b00      	cmp	r3, #0
    74f8:	d004      	beq.n	7504 <Can_43_FLEXCAN_Ipw_Write+0x13a>
    74fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    74fc:	2b02      	cmp	r3, #2
    74fe:	d001      	beq.n	7504 <Can_43_FLEXCAN_Ipw_Write+0x13a>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    7500:	2301      	movs	r3, #1
    7502:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    7504:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7506:	2b02      	cmp	r3, #2
    7508:	d002      	beq.n	7510 <Can_43_FLEXCAN_Ipw_Write+0x146>
    750a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    750c:	b2db      	uxtb	r3, r3
    750e:	e000      	b.n	7512 <Can_43_FLEXCAN_Ipw_Write+0x148>
    7510:	2302      	movs	r3, #2
}
    7512:	4618      	mov	r0, r3
    7514:	b00c      	add	sp, #48	; 0x30
    7516:	bd10      	pop	{r4, pc}
    7518:	1fff8f18 	.word	0x1fff8f18

0000751c <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    751c:	b500      	push	{lr}
    751e:	b089      	sub	sp, #36	; 0x24
    7520:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    7522:	2300      	movs	r3, #0
    7524:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    7528:	9b01      	ldr	r3, [sp, #4]
    752a:	789b      	ldrb	r3, [r3, #2]
    752c:	2101      	movs	r1, #1
    752e:	4618      	mov	r0, r3
    7530:	f002 fa42 	bl	99b8 <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7534:	2300      	movs	r3, #0
    7536:	f88d 301f 	strb.w	r3, [sp, #31]
    753a:	e03a      	b.n	75b2 <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    753c:	9b01      	ldr	r3, [sp, #4]
    753e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7540:	f89d 301f 	ldrb.w	r3, [sp, #31]
    7544:	009b      	lsls	r3, r3, #2
    7546:	4413      	add	r3, r2
    7548:	681b      	ldr	r3, [r3, #0]
    754a:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    754c:	9b06      	ldr	r3, [sp, #24]
    754e:	699b      	ldr	r3, [r3, #24]
    7550:	2b00      	cmp	r3, #0
    7552:	d121      	bne.n	7598 <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    7554:	2300      	movs	r3, #0
    7556:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    755a:	2300      	movs	r3, #0
    755c:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    755e:	9b06      	ldr	r3, [sp, #24]
    7560:	689b      	ldr	r3, [r3, #8]
    7562:	2b00      	cmp	r3, #0
    7564:	d002      	beq.n	756c <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    7566:	2301      	movs	r3, #1
    7568:	9302      	str	r3, [sp, #8]
    756a:	e001      	b.n	7570 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    756c:	2300      	movs	r3, #0
    756e:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    7570:	9b01      	ldr	r3, [sp, #4]
    7572:	7898      	ldrb	r0, [r3, #2]
    7574:	9b06      	ldr	r3, [sp, #24]
    7576:	7f19      	ldrb	r1, [r3, #28]
    7578:	9b06      	ldr	r3, [sp, #24]
    757a:	695b      	ldr	r3, [r3, #20]
    757c:	681b      	ldr	r3, [r3, #0]
    757e:	aa02      	add	r2, sp, #8
    7580:	f001 fa40 	bl	8a04 <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    7584:	9b01      	ldr	r3, [sp, #4]
    7586:	7898      	ldrb	r0, [r3, #2]
    7588:	9b06      	ldr	r3, [sp, #24]
    758a:	7f19      	ldrb	r1, [r3, #28]
    758c:	9b06      	ldr	r3, [sp, #24]
    758e:	695b      	ldr	r3, [r3, #20]
    7590:	685b      	ldr	r3, [r3, #4]
    7592:	461a      	mov	r2, r3
    7594:	f001 ffc8 	bl	9528 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    7598:	9b06      	ldr	r3, [sp, #24]
    759a:	699b      	ldr	r3, [r3, #24]
    759c:	2b01      	cmp	r3, #1
    759e:	d103      	bne.n	75a8 <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    75a0:	9906      	ldr	r1, [sp, #24]
    75a2:	9801      	ldr	r0, [sp, #4]
    75a4:	f7ff f913 	bl	67ce <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    75a8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    75ac:	3301      	adds	r3, #1
    75ae:	f88d 301f 	strb.w	r3, [sp, #31]
    75b2:	9b01      	ldr	r3, [sp, #4]
    75b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    75b8:	f89d 201f 	ldrb.w	r2, [sp, #31]
    75bc:	429a      	cmp	r2, r3
    75be:	d3bd      	bcc.n	753c <Can_Ipw_InitRx+0x20>
        }
    }
}
    75c0:	bf00      	nop
    75c2:	bf00      	nop
    75c4:	b009      	add	sp, #36	; 0x24
    75c6:	f85d fb04 	ldr.w	pc, [sp], #4

000075ca <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    75ca:	b500      	push	{lr}
    75cc:	b083      	sub	sp, #12
    75ce:	9001      	str	r0, [sp, #4]
    75d0:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    75d2:	9b00      	ldr	r3, [sp, #0]
    75d4:	681b      	ldr	r3, [r3, #0]
    75d6:	2b01      	cmp	r3, #1
    75d8:	d114      	bne.n	7604 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    75da:	9b01      	ldr	r3, [sp, #4]
    75dc:	789b      	ldrb	r3, [r3, #2]
    75de:	4618      	mov	r0, r3
    75e0:	f002 f994 	bl	990c <FlexCAN_Ip_GetStartMode_Privileged>
    75e4:	4603      	mov	r3, r0
    75e6:	f083 0301 	eor.w	r3, r3, #1
    75ea:	b2db      	uxtb	r3, r3
    75ec:	2b00      	cmp	r3, #0
    75ee:	d01e      	beq.n	762e <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    75f0:	9b00      	ldr	r3, [sp, #0]
    75f2:	2202      	movs	r2, #2
    75f4:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    75f6:	9b01      	ldr	r3, [sp, #4]
    75f8:	781b      	ldrb	r3, [r3, #0]
    75fa:	2102      	movs	r1, #2
    75fc:	4618      	mov	r0, r3
    75fe:	f7f9 f984 	bl	90a <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    7602:	e014      	b.n	762e <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    7604:	9b00      	ldr	r3, [sp, #0]
    7606:	681b      	ldr	r3, [r3, #0]
    7608:	2b02      	cmp	r3, #2
    760a:	d110      	bne.n	762e <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    760c:	9b01      	ldr	r3, [sp, #4]
    760e:	789b      	ldrb	r3, [r3, #2]
    7610:	4618      	mov	r0, r3
    7612:	f002 f97b 	bl	990c <FlexCAN_Ip_GetStartMode_Privileged>
    7616:	4603      	mov	r3, r0
    7618:	2b00      	cmp	r3, #0
    761a:	d008      	beq.n	762e <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    761c:	9b00      	ldr	r3, [sp, #0]
    761e:	2201      	movs	r2, #1
    7620:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    7622:	9b01      	ldr	r3, [sp, #4]
    7624:	781b      	ldrb	r3, [r3, #0]
    7626:	2101      	movs	r1, #1
    7628:	4618      	mov	r0, r3
    762a:	f7f9 f96e 	bl	90a <CanIf_ControllerModeIndication>
}
    762e:	bf00      	nop
    7630:	b003      	add	sp, #12
    7632:	f85d fb04 	ldr.w	pc, [sp], #4

00007636 <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    7636:	b500      	push	{lr}
    7638:	b085      	sub	sp, #20
    763a:	9003      	str	r0, [sp, #12]
    763c:	9102      	str	r1, [sp, #8]
    763e:	9300      	str	r3, [sp, #0]
    7640:	4613      	mov	r3, r2
    7642:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    7646:	9b00      	ldr	r3, [sp, #0]
    7648:	2b03      	cmp	r3, #3
    764a:	d009      	beq.n	7660 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    764c:	9b00      	ldr	r3, [sp, #0]
    764e:	2b03      	cmp	r3, #3
    7650:	d821      	bhi.n	7696 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    7652:	9b00      	ldr	r3, [sp, #0]
    7654:	2b00      	cmp	r3, #0
    7656:	d00c      	beq.n	7672 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    7658:	9b00      	ldr	r3, [sp, #0]
    765a:	2b01      	cmp	r3, #1
    765c:	d012      	beq.n	7684 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    765e:	e01a      	b.n	7696 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    7660:	9b02      	ldr	r3, [sp, #8]
    7662:	691b      	ldr	r3, [r3, #16]
    7664:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7668:	4619      	mov	r1, r3
    766a:	9803      	ldr	r0, [sp, #12]
    766c:	f7ff fb0c 	bl	6c88 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    7670:	e012      	b.n	7698 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    7672:	9b02      	ldr	r3, [sp, #8]
    7674:	691b      	ldr	r3, [r3, #16]
    7676:	f89d 2007 	ldrb.w	r2, [sp, #7]
    767a:	4619      	mov	r1, r3
    767c:	9803      	ldr	r0, [sp, #12]
    767e:	f7ff fb4f 	bl	6d20 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    7682:	e009      	b.n	7698 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    7684:	9b02      	ldr	r3, [sp, #8]
    7686:	691b      	ldr	r3, [r3, #16]
    7688:	f89d 2007 	ldrb.w	r2, [sp, #7]
    768c:	4619      	mov	r1, r3
    768e:	9803      	ldr	r0, [sp, #12]
    7690:	f7ff fb46 	bl	6d20 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    7694:	e000      	b.n	7698 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    7696:	bf00      	nop
            }
        }
    }
    7698:	bf00      	nop
    769a:	b005      	add	sp, #20
    769c:	f85d fb04 	ldr.w	pc, [sp], #4

000076a0 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    76a0:	b500      	push	{lr}
    76a2:	b085      	sub	sp, #20
    76a4:	9102      	str	r1, [sp, #8]
    76a6:	9201      	str	r2, [sp, #4]
    76a8:	9300      	str	r3, [sp, #0]
    76aa:	4603      	mov	r3, r0
    76ac:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    76b0:	9a00      	ldr	r2, [sp, #0]
    76b2:	9b01      	ldr	r3, [sp, #4]
    76b4:	011b      	lsls	r3, r3, #4
    76b6:	4413      	add	r3, r2
    76b8:	3308      	adds	r3, #8
    76ba:	781b      	ldrb	r3, [r3, #0]
    76bc:	f083 0301 	eor.w	r3, r3, #1
    76c0:	b2db      	uxtb	r3, r3
    76c2:	2b00      	cmp	r3, #0
    76c4:	d03b      	beq.n	773e <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    76c6:	9b02      	ldr	r3, [sp, #8]
    76c8:	2b04      	cmp	r3, #4
    76ca:	d83a      	bhi.n	7742 <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    76cc:	a201      	add	r2, pc, #4	; (adr r2, 76d4 <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    76ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    76d2:	bf00      	nop
    76d4:	000076fb 	.word	0x000076fb
    76d8:	0000770d 	.word	0x0000770d
    76dc:	0000771f 	.word	0x0000771f
    76e0:	0000772f 	.word	0x0000772f
    76e4:	000076e9 	.word	0x000076e9
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    76e8:	9b01      	ldr	r3, [sp, #4]
    76ea:	b2d9      	uxtb	r1, r3
    76ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    76f0:	2203      	movs	r2, #3
    76f2:	4618      	mov	r0, r3
    76f4:	f7fe ff86 	bl	6604 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    76f8:	e024      	b.n	7744 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    76fa:	9b01      	ldr	r3, [sp, #4]
    76fc:	b2d9      	uxtb	r1, r3
    76fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7702:	2200      	movs	r2, #0
    7704:	4618      	mov	r0, r3
    7706:	f7fe ff7d 	bl	6604 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    770a:	e01b      	b.n	7744 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    770c:	9b01      	ldr	r3, [sp, #4]
    770e:	b2d9      	uxtb	r1, r3
    7710:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7714:	2201      	movs	r2, #1
    7716:	4618      	mov	r0, r3
    7718:	f7fe ff74 	bl	6604 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    771c:	e012      	b.n	7744 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    771e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7722:	2201      	movs	r2, #1
    7724:	2106      	movs	r1, #6
    7726:	4618      	mov	r0, r3
    7728:	f7fe ff6c 	bl	6604 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    772c:	e00a      	b.n	7744 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    772e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7732:	2201      	movs	r2, #1
    7734:	2107      	movs	r1, #7
    7736:	4618      	mov	r0, r3
    7738:	f7fe ff64 	bl	6604 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    773c:	e002      	b.n	7744 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    773e:	bf00      	nop
    7740:	e000      	b.n	7744 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    7742:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    7744:	bf00      	nop
    7746:	b005      	add	sp, #20
    7748:	f85d fb04 	ldr.w	pc, [sp], #4

0000774c <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    774c:	b500      	push	{lr}
    774e:	b085      	sub	sp, #20
    7750:	9102      	str	r1, [sp, #8]
    7752:	9201      	str	r2, [sp, #4]
    7754:	9300      	str	r3, [sp, #0]
    7756:	4603      	mov	r3, r0
    7758:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    775c:	9b02      	ldr	r3, [sp, #8]
    775e:	2b07      	cmp	r3, #7
    7760:	d105      	bne.n	776e <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    7762:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7766:	4618      	mov	r0, r3
    7768:	f7fe ff8e 	bl	6688 <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    776c:	e000      	b.n	7770 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    776e:	bf00      	nop
        }
    }
}
    7770:	bf00      	nop
    7772:	b005      	add	sp, #20
    7774:	f85d fb04 	ldr.w	pc, [sp], #4

00007778 <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    7778:	b082      	sub	sp, #8
    777a:	9001      	str	r0, [sp, #4]
    777c:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    777e:	9b01      	ldr	r3, [sp, #4]
    7780:	9a00      	ldr	r2, [sp, #0]
    7782:	649a      	str	r2, [r3, #72]	; 0x48
}
    7784:	bf00      	nop
    7786:	b002      	add	sp, #8
    7788:	4770      	bx	lr

0000778a <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    778a:	b084      	sub	sp, #16
    778c:	9001      	str	r0, [sp, #4]
    778e:	460b      	mov	r3, r1
    7790:	f88d 3003 	strb.w	r3, [sp, #3]
    7794:	4613      	mov	r3, r2
    7796:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    779a:	9b01      	ldr	r3, [sp, #4]
    779c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    77a0:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    77a2:	9b03      	ldr	r3, [sp, #12]
    77a4:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    77a8:	9303      	str	r3, [sp, #12]

    if (enable)
    77aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    77ae:	2b00      	cmp	r3, #0
    77b0:	d00b      	beq.n	77ca <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    77b2:	9b03      	ldr	r3, [sp, #12]
    77b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    77b8:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    77ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
    77be:	021b      	lsls	r3, r3, #8
    77c0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    77c4:	9a03      	ldr	r2, [sp, #12]
    77c6:	4313      	orrs	r3, r2
    77c8:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    77ca:	9b01      	ldr	r3, [sp, #4]
    77cc:	9a03      	ldr	r2, [sp, #12]
    77ce:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    77d2:	bf00      	nop
    77d4:	b004      	add	sp, #16
    77d6:	4770      	bx	lr

000077d8 <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    77d8:	b082      	sub	sp, #8
    77da:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    77dc:	9b01      	ldr	r3, [sp, #4]
    77de:	681b      	ldr	r3, [r3, #0]
    77e0:	43db      	mvns	r3, r3
    77e2:	0fdb      	lsrs	r3, r3, #31
    77e4:	b2db      	uxtb	r3, r3
}
    77e6:	4618      	mov	r0, r3
    77e8:	b002      	add	sp, #8
    77ea:	4770      	bx	lr

000077ec <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    77ec:	b082      	sub	sp, #8
    77ee:	9001      	str	r0, [sp, #4]
    77f0:	460b      	mov	r3, r1
    77f2:	f88d 3003 	strb.w	r3, [sp, #3]
    77f6:	4613      	mov	r3, r2
    77f8:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    77fc:	9b01      	ldr	r3, [sp, #4]
    77fe:	681b      	ldr	r3, [r3, #0]
    7800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    7804:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7808:	2a00      	cmp	r2, #0
    780a:	d002      	beq.n	7812 <FlexCAN_SetFDEnabled+0x26>
    780c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7810:	e000      	b.n	7814 <FlexCAN_SetFDEnabled+0x28>
    7812:	2200      	movs	r2, #0
    7814:	431a      	orrs	r2, r3
    7816:	9b01      	ldr	r3, [sp, #4]
    7818:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    781a:	9b01      	ldr	r3, [sp, #4]
    781c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    7820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    7824:	f89d 2002 	ldrb.w	r2, [sp, #2]
    7828:	2a00      	cmp	r2, #0
    782a:	d002      	beq.n	7832 <FlexCAN_SetFDEnabled+0x46>
    782c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7830:	e000      	b.n	7834 <FlexCAN_SetFDEnabled+0x48>
    7832:	2200      	movs	r2, #0
    7834:	431a      	orrs	r2, r3
    7836:	9b01      	ldr	r3, [sp, #4]
    7838:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    783c:	9b01      	ldr	r3, [sp, #4]
    783e:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    7842:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    7846:	9b01      	ldr	r3, [sp, #4]
    7848:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    784c:	bf00      	nop
    784e:	b002      	add	sp, #8
    7850:	4770      	bx	lr

00007852 <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    7852:	b082      	sub	sp, #8
    7854:	9001      	str	r0, [sp, #4]
    7856:	460b      	mov	r3, r1
    7858:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    785c:	9b01      	ldr	r3, [sp, #4]
    785e:	685b      	ldr	r3, [r3, #4]
    7860:	f023 0308 	bic.w	r3, r3, #8
    7864:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7868:	2a00      	cmp	r2, #0
    786a:	d001      	beq.n	7870 <FlexCAN_SetListenOnlyMode+0x1e>
    786c:	2208      	movs	r2, #8
    786e:	e000      	b.n	7872 <FlexCAN_SetListenOnlyMode+0x20>
    7870:	2200      	movs	r2, #0
    7872:	431a      	orrs	r2, r3
    7874:	9b01      	ldr	r3, [sp, #4]
    7876:	605a      	str	r2, [r3, #4]
}
    7878:	bf00      	nop
    787a:	b002      	add	sp, #8
    787c:	4770      	bx	lr

0000787e <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    787e:	b082      	sub	sp, #8
    7880:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    7882:	9b01      	ldr	r3, [sp, #4]
    7884:	689b      	ldr	r3, [r3, #8]
}
    7886:	bf00      	nop
    7888:	b002      	add	sp, #8
    788a:	4770      	bx	lr

0000788c <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    788c:	b084      	sub	sp, #16
    788e:	9001      	str	r0, [sp, #4]
    7890:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    7892:	9b00      	ldr	r3, [sp, #0]
    7894:	f003 031f 	and.w	r3, r3, #31
    7898:	2201      	movs	r2, #1
    789a:	fa02 f303 	lsl.w	r3, r2, r3
    789e:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    78a0:	9b00      	ldr	r3, [sp, #0]
    78a2:	2b1f      	cmp	r3, #31
    78a4:	d802      	bhi.n	78ac <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    78a6:	9b01      	ldr	r3, [sp, #4]
    78a8:	9a03      	ldr	r2, [sp, #12]
    78aa:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    78ac:	bf00      	nop
    78ae:	b004      	add	sp, #16
    78b0:	4770      	bx	lr

000078b2 <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    78b2:	b084      	sub	sp, #16
    78b4:	9001      	str	r0, [sp, #4]
    78b6:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    78b8:	2300      	movs	r3, #0
    78ba:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    78bc:	9b00      	ldr	r3, [sp, #0]
    78be:	2b1f      	cmp	r3, #31
    78c0:	d80e      	bhi.n	78e0 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    78c2:	9b01      	ldr	r3, [sp, #4]
    78c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    78c6:	9b00      	ldr	r3, [sp, #0]
    78c8:	f003 031f 	and.w	r3, r3, #31
    78cc:	2101      	movs	r1, #1
    78ce:	fa01 f303 	lsl.w	r3, r1, r3
    78d2:	401a      	ands	r2, r3
    78d4:	9b00      	ldr	r3, [sp, #0]
    78d6:	f003 031f 	and.w	r3, r3, #31
    78da:	fa22 f303 	lsr.w	r3, r2, r3
    78de:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    78e0:	9b03      	ldr	r3, [sp, #12]
    78e2:	b2db      	uxtb	r3, r3
}
    78e4:	4618      	mov	r0, r3
    78e6:	b004      	add	sp, #16
    78e8:	4770      	bx	lr

000078ea <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    78ea:	b082      	sub	sp, #8
    78ec:	9001      	str	r0, [sp, #4]
    78ee:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    78f0:	9b01      	ldr	r3, [sp, #4]
    78f2:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    78f6:	4b15      	ldr	r3, [pc, #84]	; (794c <FlexCAN_SetFDTimeSegments+0x62>)
    78f8:	4013      	ands	r3, r2
    78fa:	9a01      	ldr	r2, [sp, #4]
    78fc:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    7900:	9b01      	ldr	r3, [sp, #4]
    7902:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    7906:	9b00      	ldr	r3, [sp, #0]
    7908:	681b      	ldr	r3, [r3, #0]
    790a:	029b      	lsls	r3, r3, #10
    790c:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    7910:	9b00      	ldr	r3, [sp, #0]
    7912:	689b      	ldr	r3, [r3, #8]
    7914:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    7918:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    791a:	9b00      	ldr	r3, [sp, #0]
    791c:	685b      	ldr	r3, [r3, #4]
    791e:	015b      	lsls	r3, r3, #5
    7920:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    7922:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    7924:	9b00      	ldr	r3, [sp, #0]
    7926:	68db      	ldr	r3, [r3, #12]
    7928:	0518      	lsls	r0, r3, #20
    792a:	4b09      	ldr	r3, [pc, #36]	; (7950 <FlexCAN_SetFDTimeSegments+0x66>)
    792c:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    792e:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    7930:	9b00      	ldr	r3, [sp, #0]
    7932:	691b      	ldr	r3, [r3, #16]
    7934:	041b      	lsls	r3, r3, #16
    7936:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    793a:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    793c:	431a      	orrs	r2, r3
    793e:	9b01      	ldr	r3, [sp, #4]
    7940:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    7944:	bf00      	nop
    7946:	b002      	add	sp, #8
    7948:	4770      	bx	lr
    794a:	bf00      	nop
    794c:	c0088318 	.word	0xc0088318
    7950:	3ff00000 	.word	0x3ff00000

00007954 <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    7954:	b082      	sub	sp, #8
    7956:	9001      	str	r0, [sp, #4]
    7958:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    795a:	9b01      	ldr	r3, [sp, #4]
    795c:	685a      	ldr	r2, [r3, #4]
    795e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    7962:	4013      	ands	r3, r2
    7964:	9a01      	ldr	r2, [sp, #4]
    7966:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    7968:	9b01      	ldr	r3, [sp, #4]
    796a:	685a      	ldr	r2, [r3, #4]
    796c:	9b00      	ldr	r3, [sp, #0]
    796e:	681b      	ldr	r3, [r3, #0]
    7970:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    7974:	9b00      	ldr	r3, [sp, #0]
    7976:	689b      	ldr	r3, [r3, #8]
    7978:	041b      	lsls	r3, r3, #16
    797a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    797e:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    7980:	9b00      	ldr	r3, [sp, #0]
    7982:	685b      	ldr	r3, [r3, #4]
    7984:	04db      	lsls	r3, r3, #19
    7986:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    798a:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    798c:	9b00      	ldr	r3, [sp, #0]
    798e:	68db      	ldr	r3, [r3, #12]
    7990:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    7992:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    7994:	9b00      	ldr	r3, [sp, #0]
    7996:	691b      	ldr	r3, [r3, #16]
    7998:	059b      	lsls	r3, r3, #22
    799a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    799e:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    79a0:	431a      	orrs	r2, r3
    79a2:	9b01      	ldr	r3, [sp, #4]
    79a4:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    79a6:	bf00      	nop
    79a8:	b002      	add	sp, #8
    79aa:	4770      	bx	lr

000079ac <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    79ac:	b082      	sub	sp, #8
    79ae:	9001      	str	r0, [sp, #4]
    79b0:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    79b2:	9b01      	ldr	r3, [sp, #4]
    79b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    79b6:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    79ba:	9b01      	ldr	r3, [sp, #4]
    79bc:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    79be:	9b01      	ldr	r3, [sp, #4]
    79c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    79c2:	9b00      	ldr	r3, [sp, #0]
    79c4:	681b      	ldr	r3, [r3, #0]
    79c6:	029b      	lsls	r3, r3, #10
    79c8:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    79ca:	9b00      	ldr	r3, [sp, #0]
    79cc:	689b      	ldr	r3, [r3, #8]
    79ce:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    79d2:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    79d4:	9b00      	ldr	r3, [sp, #0]
    79d6:	685b      	ldr	r3, [r3, #4]
    79d8:	015b      	lsls	r3, r3, #5
    79da:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    79de:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    79e0:	9b00      	ldr	r3, [sp, #0]
    79e2:	68db      	ldr	r3, [r3, #12]
    79e4:	0558      	lsls	r0, r3, #21
    79e6:	4b07      	ldr	r3, [pc, #28]	; (7a04 <FlexCAN_SetExtendedTimeSegments+0x58>)
    79e8:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    79ea:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    79ec:	9b00      	ldr	r3, [sp, #0]
    79ee:	691b      	ldr	r3, [r3, #16]
    79f0:	041b      	lsls	r3, r3, #16
    79f2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    79f6:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    79f8:	431a      	orrs	r2, r3
    79fa:	9b01      	ldr	r3, [sp, #4]
    79fc:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    79fe:	bf00      	nop
    7a00:	b002      	add	sp, #8
    7a02:	4770      	bx	lr
    7a04:	7fe00000 	.word	0x7fe00000

00007a08 <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    7a08:	b082      	sub	sp, #8
    7a0a:	9001      	str	r0, [sp, #4]
    7a0c:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    7a0e:	9b01      	ldr	r3, [sp, #4]
    7a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7a12:	0d5b      	lsrs	r3, r3, #21
    7a14:	f3c3 0209 	ubfx	r2, r3, #0, #10
    7a18:	9b00      	ldr	r3, [sp, #0]
    7a1a:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    7a1c:	9b01      	ldr	r3, [sp, #4]
    7a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7a20:	0a9b      	lsrs	r3, r3, #10
    7a22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    7a26:	9b00      	ldr	r3, [sp, #0]
    7a28:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    7a2a:	9b01      	ldr	r3, [sp, #4]
    7a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7a2e:	095b      	lsrs	r3, r3, #5
    7a30:	f003 021f 	and.w	r2, r3, #31
    7a34:	9b00      	ldr	r3, [sp, #0]
    7a36:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    7a38:	9b01      	ldr	r3, [sp, #4]
    7a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7a3c:	f003 021f 	and.w	r2, r3, #31
    7a40:	9b00      	ldr	r3, [sp, #0]
    7a42:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    7a44:	9b01      	ldr	r3, [sp, #4]
    7a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7a48:	0c1b      	lsrs	r3, r3, #16
    7a4a:	f003 021f 	and.w	r2, r3, #31
    7a4e:	9b00      	ldr	r3, [sp, #0]
    7a50:	611a      	str	r2, [r3, #16]
}
    7a52:	bf00      	nop
    7a54:	b002      	add	sp, #8
    7a56:	4770      	bx	lr

00007a58 <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    7a58:	b082      	sub	sp, #8
    7a5a:	9001      	str	r0, [sp, #4]
    7a5c:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    7a5e:	9b01      	ldr	r3, [sp, #4]
    7a60:	685b      	ldr	r3, [r3, #4]
    7a62:	0e1b      	lsrs	r3, r3, #24
    7a64:	b2da      	uxtb	r2, r3
    7a66:	9b00      	ldr	r3, [sp, #0]
    7a68:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    7a6a:	9b01      	ldr	r3, [sp, #4]
    7a6c:	685b      	ldr	r3, [r3, #4]
    7a6e:	f003 0207 	and.w	r2, r3, #7
    7a72:	9b00      	ldr	r3, [sp, #0]
    7a74:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    7a76:	9b01      	ldr	r3, [sp, #4]
    7a78:	685b      	ldr	r3, [r3, #4]
    7a7a:	0cdb      	lsrs	r3, r3, #19
    7a7c:	f003 0207 	and.w	r2, r3, #7
    7a80:	9b00      	ldr	r3, [sp, #0]
    7a82:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    7a84:	9b01      	ldr	r3, [sp, #4]
    7a86:	685b      	ldr	r3, [r3, #4]
    7a88:	0c1b      	lsrs	r3, r3, #16
    7a8a:	f003 0207 	and.w	r2, r3, #7
    7a8e:	9b00      	ldr	r3, [sp, #0]
    7a90:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    7a92:	9b01      	ldr	r3, [sp, #4]
    7a94:	685b      	ldr	r3, [r3, #4]
    7a96:	0d9b      	lsrs	r3, r3, #22
    7a98:	f003 0203 	and.w	r2, r3, #3
    7a9c:	9b00      	ldr	r3, [sp, #0]
    7a9e:	611a      	str	r2, [r3, #16]
}
    7aa0:	bf00      	nop
    7aa2:	b002      	add	sp, #8
    7aa4:	4770      	bx	lr

00007aa6 <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    7aa6:	b082      	sub	sp, #8
    7aa8:	9001      	str	r0, [sp, #4]
    7aaa:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    7aac:	9b01      	ldr	r3, [sp, #4]
    7aae:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7ab2:	0d1b      	lsrs	r3, r3, #20
    7ab4:	f3c3 0209 	ubfx	r2, r3, #0, #10
    7ab8:	9b00      	ldr	r3, [sp, #0]
    7aba:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    7abc:	9b01      	ldr	r3, [sp, #4]
    7abe:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7ac2:	0a9b      	lsrs	r3, r3, #10
    7ac4:	f003 021f 	and.w	r2, r3, #31
    7ac8:	9b00      	ldr	r3, [sp, #0]
    7aca:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    7acc:	9b01      	ldr	r3, [sp, #4]
    7ace:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7ad2:	095b      	lsrs	r3, r3, #5
    7ad4:	f003 0207 	and.w	r2, r3, #7
    7ad8:	9b00      	ldr	r3, [sp, #0]
    7ada:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    7adc:	9b01      	ldr	r3, [sp, #4]
    7ade:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7ae2:	f003 0207 	and.w	r2, r3, #7
    7ae6:	9b00      	ldr	r3, [sp, #0]
    7ae8:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    7aea:	9b01      	ldr	r3, [sp, #4]
    7aec:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    7af0:	0c1b      	lsrs	r3, r3, #16
    7af2:	f003 0207 	and.w	r2, r3, #7
    7af6:	9b00      	ldr	r3, [sp, #0]
    7af8:	611a      	str	r2, [r3, #16]
}
    7afa:	bf00      	nop
    7afc:	b002      	add	sp, #8
    7afe:	4770      	bx	lr

00007b00 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    7b00:	b082      	sub	sp, #8
    7b02:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    7b04:	9b01      	ldr	r3, [sp, #4]
    7b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7b08:	0fdb      	lsrs	r3, r3, #31
    7b0a:	b2db      	uxtb	r3, r3
}
    7b0c:	4618      	mov	r0, r3
    7b0e:	b002      	add	sp, #8
    7b10:	4770      	bx	lr

00007b12 <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    7b12:	b082      	sub	sp, #8
    7b14:	9001      	str	r0, [sp, #4]
    7b16:	460b      	mov	r3, r1
    7b18:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    7b1c:	9b01      	ldr	r3, [sp, #4]
    7b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    7b20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    7b24:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7b28:	2a00      	cmp	r2, #0
    7b2a:	d002      	beq.n	7b32 <FlexCAN_EnableExtCbt+0x20>
    7b2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7b30:	e000      	b.n	7b34 <FlexCAN_EnableExtCbt+0x22>
    7b32:	2200      	movs	r2, #0
    7b34:	431a      	orrs	r2, r3
    7b36:	9b01      	ldr	r3, [sp, #4]
    7b38:	651a      	str	r2, [r3, #80]	; 0x50
}
    7b3a:	bf00      	nop
    7b3c:	b002      	add	sp, #8
    7b3e:	4770      	bx	lr

00007b40 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    7b40:	b082      	sub	sp, #8
    7b42:	9001      	str	r0, [sp, #4]
    7b44:	460b      	mov	r3, r1
    7b46:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    7b4a:	9b01      	ldr	r3, [sp, #4]
    7b4c:	681b      	ldr	r3, [r3, #0]
    7b4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    7b52:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7b56:	2a00      	cmp	r2, #0
    7b58:	d001      	beq.n	7b5e <FlexCAN_SetSelfReception+0x1e>
    7b5a:	2200      	movs	r2, #0
    7b5c:	e001      	b.n	7b62 <FlexCAN_SetSelfReception+0x22>
    7b5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7b62:	431a      	orrs	r2, r3
    7b64:	9b01      	ldr	r3, [sp, #4]
    7b66:	601a      	str	r2, [r3, #0]
}
    7b68:	bf00      	nop
    7b6a:	b002      	add	sp, #8
    7b6c:	4770      	bx	lr

00007b6e <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    7b6e:	b082      	sub	sp, #8
    7b70:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    7b72:	9b01      	ldr	r3, [sp, #4]
    7b74:	681b      	ldr	r3, [r3, #0]
    7b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    7b7a:	2b00      	cmp	r3, #0
    7b7c:	bf14      	ite	ne
    7b7e:	2301      	movne	r3, #1
    7b80:	2300      	moveq	r3, #0
    7b82:	b2db      	uxtb	r3, r3
}
    7b84:	4618      	mov	r0, r3
    7b86:	b002      	add	sp, #8
    7b88:	4770      	bx	lr

00007b8a <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    7b8a:	b082      	sub	sp, #8
    7b8c:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    7b8e:	9b01      	ldr	r3, [sp, #4]
    7b90:	685b      	ldr	r3, [r3, #4]
    7b92:	f003 0308 	and.w	r3, r3, #8
    7b96:	2b00      	cmp	r3, #0
    7b98:	bf14      	ite	ne
    7b9a:	2301      	movne	r3, #1
    7b9c:	2300      	moveq	r3, #0
    7b9e:	b2db      	uxtb	r3, r3
}
    7ba0:	4618      	mov	r0, r3
    7ba2:	b002      	add	sp, #8
    7ba4:	4770      	bx	lr

00007ba6 <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    7ba6:	b082      	sub	sp, #8
    7ba8:	4603      	mov	r3, r0
    7baa:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    7bae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7bb2:	3301      	adds	r3, #1
    7bb4:	00db      	lsls	r3, r3, #3
    7bb6:	089b      	lsrs	r3, r3, #2
    7bb8:	3305      	adds	r3, #5
}
    7bba:	4618      	mov	r0, r3
    7bbc:	b002      	add	sp, #8
    7bbe:	4770      	bx	lr

00007bc0 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    7bc0:	b082      	sub	sp, #8
    7bc2:	9001      	str	r0, [sp, #4]
    7bc4:	460b      	mov	r3, r1
    7bc6:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    7bca:	9b01      	ldr	r3, [sp, #4]
    7bcc:	685b      	ldr	r3, [r3, #4]
    7bce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    7bd2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    7bd6:	2a00      	cmp	r2, #0
    7bd8:	d002      	beq.n	7be0 <FlexCAN_SetClkSrc+0x20>
    7bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    7bde:	e000      	b.n	7be2 <FlexCAN_SetClkSrc+0x22>
    7be0:	2200      	movs	r2, #0
    7be2:	431a      	orrs	r2, r3
    7be4:	9b01      	ldr	r3, [sp, #4]
    7be6:	605a      	str	r2, [r3, #4]
}
    7be8:	bf00      	nop
    7bea:	b002      	add	sp, #8
    7bec:	4770      	bx	lr

00007bee <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    7bee:	b084      	sub	sp, #16
    7bf0:	9001      	str	r0, [sp, #4]
    7bf2:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    7bf4:	2300      	movs	r3, #0
    7bf6:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    7bfa:	9b00      	ldr	r3, [sp, #0]
    7bfc:	2b1f      	cmp	r3, #31
    7bfe:	d810      	bhi.n	7c22 <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    7c00:	9b01      	ldr	r3, [sp, #4]
    7c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7c04:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    7c06:	9b01      	ldr	r3, [sp, #4]
    7c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    7c0a:	9b02      	ldr	r3, [sp, #8]
    7c0c:	401a      	ands	r2, r3
    7c0e:	9b00      	ldr	r3, [sp, #0]
    7c10:	f003 031f 	and.w	r3, r3, #31
    7c14:	fa22 f303 	lsr.w	r3, r2, r3
    7c18:	b2db      	uxtb	r3, r3
    7c1a:	f003 0301 	and.w	r3, r3, #1
    7c1e:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    7c22:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    7c26:	4618      	mov	r0, r3
    7c28:	b004      	add	sp, #16
    7c2a:	4770      	bx	lr

00007c2c <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    7c2c:	b082      	sub	sp, #8
    7c2e:	9001      	str	r0, [sp, #4]
    7c30:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    7c32:	9b01      	ldr	r3, [sp, #4]
    7c34:	9a00      	ldr	r2, [sp, #0]
    7c36:	611a      	str	r2, [r3, #16]
}
    7c38:	bf00      	nop
    7c3a:	b002      	add	sp, #8
    7c3c:	4770      	bx	lr

00007c3e <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    7c3e:	b084      	sub	sp, #16
    7c40:	9003      	str	r0, [sp, #12]
    7c42:	9102      	str	r1, [sp, #8]
    7c44:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    7c46:	9b03      	ldr	r3, [sp, #12]
    7c48:	9a02      	ldr	r2, [sp, #8]
    7c4a:	f502 7208 	add.w	r2, r2, #544	; 0x220
    7c4e:	9901      	ldr	r1, [sp, #4]
    7c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    7c54:	bf00      	nop
    7c56:	b004      	add	sp, #16
    7c58:	4770      	bx	lr

00007c5a <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    7c5a:	b082      	sub	sp, #8
    7c5c:	9001      	str	r0, [sp, #4]
    7c5e:	460b      	mov	r3, r1
    7c60:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    7c64:	9b01      	ldr	r3, [sp, #4]
    7c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7c68:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    7c6c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7c70:	04db      	lsls	r3, r3, #19
    7c72:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    7c76:	431a      	orrs	r2, r3
    7c78:	9b01      	ldr	r3, [sp, #4]
    7c7a:	635a      	str	r2, [r3, #52]	; 0x34
}
    7c7c:	bf00      	nop
    7c7e:	b002      	add	sp, #8
    7c80:	4770      	bx	lr

00007c82 <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    7c82:	b082      	sub	sp, #8
    7c84:	9001      	str	r0, [sp, #4]
    7c86:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    7c88:	9b00      	ldr	r3, [sp, #0]
    7c8a:	2b00      	cmp	r3, #0
    7c8c:	d106      	bne.n	7c9c <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    7c8e:	9b01      	ldr	r3, [sp, #4]
    7c90:	681b      	ldr	r3, [r3, #0]
    7c92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    7c96:	9b01      	ldr	r3, [sp, #4]
    7c98:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    7c9a:	e005      	b.n	7ca8 <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    7c9c:	9b01      	ldr	r3, [sp, #4]
    7c9e:	681b      	ldr	r3, [r3, #0]
    7ca0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    7ca4:	9b01      	ldr	r3, [sp, #4]
    7ca6:	601a      	str	r2, [r3, #0]
}
    7ca8:	bf00      	nop
    7caa:	b002      	add	sp, #8
    7cac:	4770      	bx	lr

00007cae <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    7cae:	b500      	push	{lr}
    7cb0:	b083      	sub	sp, #12
    7cb2:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    7cb4:	9801      	ldr	r0, [sp, #4]
    7cb6:	f002 ff85 	bl	abc4 <FlexCAN_IsFDAvailable>
    7cba:	4603      	mov	r3, r0
    7cbc:	2b00      	cmp	r3, #0
    7cbe:	d007      	beq.n	7cd0 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    7cc0:	9b01      	ldr	r3, [sp, #4]
    7cc2:	2200      	movs	r2, #0
    7cc4:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    7cc8:	9b01      	ldr	r3, [sp, #4]
    7cca:	4a12      	ldr	r2, [pc, #72]	; (7d14 <FlexCAN_SetRegDefaultVal+0x66>)
    7ccc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    7cd0:	9b01      	ldr	r3, [sp, #4]
    7cd2:	f04f 32ff 	mov.w	r2, #4294967295
    7cd6:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    7cd8:	9b01      	ldr	r3, [sp, #4]
    7cda:	2200      	movs	r2, #0
    7cdc:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    7cde:	9b01      	ldr	r3, [sp, #4]
    7ce0:	2200      	movs	r2, #0
    7ce2:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    7ce4:	9b01      	ldr	r3, [sp, #4]
    7ce6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    7cea:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    7cec:	9b01      	ldr	r3, [sp, #4]
    7cee:	4a0a      	ldr	r2, [pc, #40]	; (7d18 <FlexCAN_SetRegDefaultVal+0x6a>)
    7cf0:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    7cf2:	9b01      	ldr	r3, [sp, #4]
    7cf4:	2200      	movs	r2, #0
    7cf6:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    7cf8:	9b01      	ldr	r3, [sp, #4]
    7cfa:	2200      	movs	r2, #0
    7cfc:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    7cfe:	9b01      	ldr	r3, [sp, #4]
    7d00:	2200      	movs	r2, #0
    7d02:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    7d04:	9b01      	ldr	r3, [sp, #4]
    7d06:	4a05      	ldr	r2, [pc, #20]	; (7d1c <FlexCAN_SetRegDefaultVal+0x6e>)
    7d08:	601a      	str	r2, [r3, #0]
}
    7d0a:	bf00      	nop
    7d0c:	b003      	add	sp, #12
    7d0e:	f85d fb04 	ldr.w	pc, [sp], #4
    7d12:	bf00      	nop
    7d14:	80004100 	.word	0x80004100
    7d18:	0003b006 	.word	0x0003b006
    7d1c:	d890000f 	.word	0xd890000f

00007d20 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    7d20:	b500      	push	{lr}
    7d22:	b085      	sub	sp, #20
    7d24:	9001      	str	r0, [sp, #4]
    7d26:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    7d28:	2300      	movs	r3, #0
    7d2a:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    7d2c:	9b00      	ldr	r3, [sp, #0]
    7d2e:	7a1b      	ldrb	r3, [r3, #8]
    7d30:	2b00      	cmp	r3, #0
    7d32:	d006      	beq.n	7d42 <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    7d34:	9b00      	ldr	r3, [sp, #0]
    7d36:	685b      	ldr	r3, [r3, #4]
    7d38:	4619      	mov	r1, r3
    7d3a:	9801      	ldr	r0, [sp, #4]
    7d3c:	f002 fefe 	bl	ab3c <FlexCAN_EnableRxFifo>
    7d40:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    7d42:	9b03      	ldr	r3, [sp, #12]
}
    7d44:	4618      	mov	r0, r3
    7d46:	b005      	add	sp, #20
    7d48:	f85d fb04 	ldr.w	pc, [sp], #4

00007d4c <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    7d4c:	b500      	push	{lr}
    7d4e:	b085      	sub	sp, #20
    7d50:	9001      	str	r0, [sp, #4]
    7d52:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    7d54:	2300      	movs	r3, #0
    7d56:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    7d58:	9b00      	ldr	r3, [sp, #0]
    7d5a:	68db      	ldr	r3, [r3, #12]
    7d5c:	2b02      	cmp	r3, #2
    7d5e:	d003      	beq.n	7d68 <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    7d60:	2100      	movs	r1, #0
    7d62:	9801      	ldr	r0, [sp, #4]
    7d64:	f7ff feec 	bl	7b40 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    7d68:	9900      	ldr	r1, [sp, #0]
    7d6a:	9801      	ldr	r0, [sp, #4]
    7d6c:	f7ff ffd8 	bl	7d20 <FlexCAN_InitRxFifo>
    7d70:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    7d72:	9b03      	ldr	r3, [sp, #12]
    7d74:	2b00      	cmp	r3, #0
    7d76:	d006      	beq.n	7d86 <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    7d78:	9801      	ldr	r0, [sp, #4]
    7d7a:	f002 fd03 	bl	a784 <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    7d7e:	9801      	ldr	r0, [sp, #4]
    7d80:	f002 fdca 	bl	a918 <FlexCAN_Disable>
    7d84:	e00b      	b.n	7d9e <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    7d86:	9b00      	ldr	r3, [sp, #0]
    7d88:	3314      	adds	r3, #20
    7d8a:	4619      	mov	r1, r3
    7d8c:	9801      	ldr	r0, [sp, #4]
    7d8e:	f002 ff3b 	bl	ac08 <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    7d92:	9b00      	ldr	r3, [sp, #0]
    7d94:	681b      	ldr	r3, [r3, #0]
    7d96:	4619      	mov	r1, r3
    7d98:	9801      	ldr	r0, [sp, #4]
    7d9a:	f003 fab7 	bl	b30c <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    7d9e:	9b03      	ldr	r3, [sp, #12]
}
    7da0:	4618      	mov	r0, r3
    7da2:	b005      	add	sp, #20
    7da4:	f85d fb04 	ldr.w	pc, [sp], #4

00007da8 <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    7da8:	b500      	push	{lr}
    7daa:	b087      	sub	sp, #28
    7dac:	4603      	mov	r3, r0
    7dae:	9102      	str	r1, [sp, #8]
    7db0:	9201      	str	r2, [sp, #4]
    7db2:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    7db6:	2300      	movs	r3, #0
    7db8:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    7dba:	9802      	ldr	r0, [sp, #8]
    7dbc:	f7ff fd0c 	bl	77d8 <FlexCAN_IsEnabled>
    7dc0:	4603      	mov	r3, r0
    7dc2:	2b00      	cmp	r3, #0
    7dc4:	d00a      	beq.n	7ddc <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    7dc6:	9802      	ldr	r0, [sp, #8]
    7dc8:	f002 fcdc 	bl	a784 <FlexCAN_EnterFreezeMode>
    7dcc:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    7dce:	9b05      	ldr	r3, [sp, #20]
    7dd0:	2b00      	cmp	r3, #0
    7dd2:	d103      	bne.n	7ddc <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    7dd4:	9802      	ldr	r0, [sp, #8]
    7dd6:	f002 fd9f 	bl	a918 <FlexCAN_Disable>
    7dda:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    7ddc:	9b05      	ldr	r3, [sp, #20]
    7dde:	2b00      	cmp	r3, #0
    7de0:	d137      	bne.n	7e52 <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    7de2:	9b01      	ldr	r3, [sp, #4]
    7de4:	7e5b      	ldrb	r3, [r3, #25]
    7de6:	4619      	mov	r1, r3
    7de8:	9802      	ldr	r0, [sp, #8]
    7dea:	f7ff fee9 	bl	7bc0 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    7dee:	9b02      	ldr	r3, [sp, #8]
    7df0:	681b      	ldr	r3, [r3, #0]
    7df2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    7df6:	9b02      	ldr	r3, [sp, #8]
    7df8:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    7dfa:	9802      	ldr	r0, [sp, #8]
    7dfc:	f002 fe28 	bl	aa50 <FlexCAN_Init>
    7e00:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    7e02:	9b05      	ldr	r3, [sp, #20]
    7e04:	2b00      	cmp	r3, #0
    7e06:	d006      	beq.n	7e16 <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    7e08:	9802      	ldr	r0, [sp, #8]
    7e0a:	f002 fcbb 	bl	a784 <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    7e0e:	9802      	ldr	r0, [sp, #8]
    7e10:	f002 fd82 	bl	a918 <FlexCAN_Disable>
    7e14:	e01d      	b.n	7e52 <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    7e16:	9802      	ldr	r0, [sp, #8]
    7e18:	f002 fed4 	bl	abc4 <FlexCAN_IsFDAvailable>
    7e1c:	4603      	mov	r3, r0
    7e1e:	2b00      	cmp	r3, #0
    7e20:	d007      	beq.n	7e32 <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    7e22:	9b01      	ldr	r3, [sp, #4]
    7e24:	7e19      	ldrb	r1, [r3, #24]
    7e26:	9b01      	ldr	r3, [sp, #4]
    7e28:	7edb      	ldrb	r3, [r3, #27]
    7e2a:	461a      	mov	r2, r3
    7e2c:	9802      	ldr	r0, [sp, #8]
    7e2e:	f7ff fcdd 	bl	77ec <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    7e32:	9b01      	ldr	r3, [sp, #4]
    7e34:	691b      	ldr	r3, [r3, #16]
    7e36:	4619      	mov	r1, r3
    7e38:	9802      	ldr	r0, [sp, #8]
    7e3a:	f003 fdeb 	bl	ba14 <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    7e3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e42:	4618      	mov	r0, r3
    7e44:	f003 fe56 	bl	baf4 <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    7e48:	9901      	ldr	r1, [sp, #4]
    7e4a:	9802      	ldr	r0, [sp, #8]
    7e4c:	f7ff ff7e 	bl	7d4c <FlexCAN_InitCtroll>
    7e50:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    7e52:	9b05      	ldr	r3, [sp, #20]
}
    7e54:	4618      	mov	r0, r3
    7e56:	b007      	add	sp, #28
    7e58:	f85d fb04 	ldr.w	pc, [sp], #4

00007e5c <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    7e5c:	b500      	push	{lr}
    7e5e:	b083      	sub	sp, #12
    7e60:	9001      	str	r0, [sp, #4]
    7e62:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    7e64:	9b00      	ldr	r3, [sp, #0]
    7e66:	7e1b      	ldrb	r3, [r3, #24]
    7e68:	4619      	mov	r1, r3
    7e6a:	9801      	ldr	r0, [sp, #4]
    7e6c:	f7ff fe51 	bl	7b12 <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    7e70:	9b00      	ldr	r3, [sp, #0]
    7e72:	7e1b      	ldrb	r3, [r3, #24]
    7e74:	2b00      	cmp	r3, #0
    7e76:	d00c      	beq.n	7e92 <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    7e78:	9b00      	ldr	r3, [sp, #0]
    7e7a:	331c      	adds	r3, #28
    7e7c:	4619      	mov	r1, r3
    7e7e:	9801      	ldr	r0, [sp, #4]
    7e80:	f7ff fd94 	bl	79ac <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    7e84:	9b00      	ldr	r3, [sp, #0]
    7e86:	3330      	adds	r3, #48	; 0x30
    7e88:	4619      	mov	r1, r3
    7e8a:	9801      	ldr	r0, [sp, #4]
    7e8c:	f7ff fd2d 	bl	78ea <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    7e90:	e005      	b.n	7e9e <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    7e92:	9b00      	ldr	r3, [sp, #0]
    7e94:	331c      	adds	r3, #28
    7e96:	4619      	mov	r1, r3
    7e98:	9801      	ldr	r0, [sp, #4]
    7e9a:	f7ff fd5b 	bl	7954 <FlexCAN_SetTimeSegments>
}
    7e9e:	bf00      	nop
    7ea0:	b003      	add	sp, #12
    7ea2:	f85d fb04 	ldr.w	pc, [sp], #4

00007ea6 <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    7ea6:	b500      	push	{lr}
    7ea8:	b08d      	sub	sp, #52	; 0x34
    7eaa:	4603      	mov	r3, r0
    7eac:	9102      	str	r1, [sp, #8]
    7eae:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    7eb2:	2300      	movs	r3, #0
    7eb4:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    7eb6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7eba:	4a46      	ldr	r2, [pc, #280]	; (7fd4 <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    7ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ec0:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    7ec2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ec6:	4a44      	ldr	r2, [pc, #272]	; (7fd8 <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    7ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7ecc:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    7ece:	2300      	movs	r3, #0
    7ed0:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    7ed2:	2300      	movs	r3, #0
    7ed4:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7ed6:	9b02      	ldr	r3, [sp, #8]
    7ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7edc:	fb02 f303 	mul.w	r3, r2, r3
    7ee0:	2100      	movs	r1, #0
    7ee2:	4618      	mov	r0, r3
    7ee4:	f7f9 f97c 	bl	11e0 <OsIf_MicrosToTicks>
    7ee8:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    7eea:	2300      	movs	r3, #0
    7eec:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7eee:	2000      	movs	r0, #0
    7ef0:	f7f9 f92a 	bl	1148 <OsIf_GetCounter>
    7ef4:	4603      	mov	r3, r0
    7ef6:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    7ef8:	e02a      	b.n	7f50 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    7efa:	9b08      	ldr	r3, [sp, #32]
    7efc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    7f00:	2b01      	cmp	r3, #1
    7f02:	d115      	bne.n	7f30 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    7f04:	2307      	movs	r3, #7
    7f06:	9309      	str	r3, [sp, #36]	; 0x24
    7f08:	e00f      	b.n	7f2a <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    7f0a:	9909      	ldr	r1, [sp, #36]	; 0x24
    7f0c:	9807      	ldr	r0, [sp, #28]
    7f0e:	f7ff fcd0 	bl	78b2 <FlexCAN_GetBuffStatusFlag>
    7f12:	4603      	mov	r3, r0
    7f14:	2b00      	cmp	r3, #0
    7f16:	d005      	beq.n	7f24 <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    7f18:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
    7f1e:	4618      	mov	r0, r3
    7f20:	f000 fb06 	bl	8530 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    7f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f26:	3b01      	subs	r3, #1
    7f28:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    7f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7f2c:	2b04      	cmp	r3, #4
    7f2e:	d8ec      	bhi.n	7f0a <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7f30:	ab05      	add	r3, sp, #20
    7f32:	2100      	movs	r1, #0
    7f34:	4618      	mov	r0, r3
    7f36:	f7f9 f920 	bl	117a <OsIf_GetElapsed>
    7f3a:	4602      	mov	r2, r0
    7f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7f3e:	4413      	add	r3, r2
    7f40:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    7f42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7f44:	9b06      	ldr	r3, [sp, #24]
    7f46:	429a      	cmp	r2, r3
    7f48:	d302      	bcc.n	7f50 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    7f4a:	2303      	movs	r3, #3
    7f4c:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    7f4e:	e003      	b.n	7f58 <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    7f50:	9b08      	ldr	r3, [sp, #32]
    7f52:	685b      	ldr	r3, [r3, #4]
    7f54:	2b01      	cmp	r3, #1
    7f56:	d0d0      	beq.n	7efa <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    7f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7f5a:	2b03      	cmp	r3, #3
    7f5c:	d125      	bne.n	7faa <FlexCAN_ProccessLegacyRxFIFO+0x104>
    7f5e:	9b08      	ldr	r3, [sp, #32]
    7f60:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    7f64:	2b01      	cmp	r3, #1
    7f66:	d020      	beq.n	7faa <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    7f68:	9b08      	ldr	r3, [sp, #32]
    7f6a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7f6e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7f72:	9300      	str	r3, [sp, #0]
    7f74:	2300      	movs	r3, #0
    7f76:	2205      	movs	r2, #5
    7f78:	9807      	ldr	r0, [sp, #28]
    7f7a:	f002 feef 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    7f7e:	9b08      	ldr	r3, [sp, #32]
    7f80:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7f84:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7f88:	9300      	str	r3, [sp, #0]
    7f8a:	2300      	movs	r3, #0
    7f8c:	2206      	movs	r2, #6
    7f8e:	9807      	ldr	r0, [sp, #28]
    7f90:	f002 fee4 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    7f94:	9b08      	ldr	r3, [sp, #32]
    7f96:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7f9a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7f9e:	9300      	str	r3, [sp, #0]
    7fa0:	2300      	movs	r3, #0
    7fa2:	2207      	movs	r2, #7
    7fa4:	9807      	ldr	r0, [sp, #28]
    7fa6:	f002 fed9 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    7faa:	9b08      	ldr	r3, [sp, #32]
    7fac:	685b      	ldr	r3, [r3, #4]
    7fae:	2b00      	cmp	r3, #0
    7fb0:	d005      	beq.n	7fbe <FlexCAN_ProccessLegacyRxFIFO+0x118>
    7fb2:	2b01      	cmp	r3, #1
    7fb4:	d106      	bne.n	7fc4 <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    7fb6:	9b08      	ldr	r3, [sp, #32]
    7fb8:	2200      	movs	r2, #0
    7fba:	605a      	str	r2, [r3, #4]
                break;
    7fbc:	e005      	b.n	7fca <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    7fbe:	2300      	movs	r3, #0
    7fc0:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    7fc2:	e002      	b.n	7fca <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    7fc4:	2301      	movs	r3, #1
    7fc6:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    7fc8:	bf00      	nop
        }

    return eResult;
    7fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    7fcc:	4618      	mov	r0, r3
    7fce:	b00d      	add	sp, #52	; 0x34
    7fd0:	f85d fb04 	ldr.w	pc, [sp], #4
    7fd4:	1fff8f9c 	.word	0x1fff8f9c
    7fd8:	0000e664 	.word	0x0000e664

00007fdc <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    7fdc:	b084      	sub	sp, #16
    7fde:	9200      	str	r2, [sp, #0]
    7fe0:	461a      	mov	r2, r3
    7fe2:	4603      	mov	r3, r0
    7fe4:	f88d 3007 	strb.w	r3, [sp, #7]
    7fe8:	460b      	mov	r3, r1
    7fea:	f88d 3006 	strb.w	r3, [sp, #6]
    7fee:	4613      	mov	r3, r2
    7ff0:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    7ff4:	2300      	movs	r3, #0
    7ff6:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    7ff8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ffc:	4a15      	ldr	r2, [pc, #84]	; (8054 <FlexCAN_StartRxMessageBufferData+0x78>)
    7ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8002:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    8004:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8008:	9a02      	ldr	r2, [sp, #8]
    800a:	011b      	lsls	r3, r3, #4
    800c:	4413      	add	r3, r2
    800e:	3304      	adds	r3, #4
    8010:	681b      	ldr	r3, [r3, #0]
    8012:	2b00      	cmp	r3, #0
    8014:	d002      	beq.n	801c <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    8016:	2302      	movs	r3, #2
    8018:	9303      	str	r3, [sp, #12]
    801a:	e017      	b.n	804c <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    801c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8020:	9a02      	ldr	r2, [sp, #8]
    8022:	011b      	lsls	r3, r3, #4
    8024:	4413      	add	r3, r2
    8026:	3304      	adds	r3, #4
    8028:	2201      	movs	r2, #1
    802a:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    802c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8030:	9a02      	ldr	r2, [sp, #8]
    8032:	011b      	lsls	r3, r3, #4
    8034:	4413      	add	r3, r2
    8036:	9a00      	ldr	r2, [sp, #0]
    8038:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    803a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    803e:	9a02      	ldr	r2, [sp, #8]
    8040:	011b      	lsls	r3, r3, #4
    8042:	4413      	add	r3, r2
    8044:	3308      	adds	r3, #8
    8046:	f89d 2005 	ldrb.w	r2, [sp, #5]
    804a:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    804c:	9b03      	ldr	r3, [sp, #12]
}
    804e:	4618      	mov	r0, r3
    8050:	b004      	add	sp, #16
    8052:	4770      	bx	lr
    8054:	1fff8f9c 	.word	0x1fff8f9c

00008058 <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    8058:	b500      	push	{lr}
    805a:	b08f      	sub	sp, #60	; 0x3c
    805c:	9204      	str	r2, [sp, #16]
    805e:	9303      	str	r3, [sp, #12]
    8060:	4603      	mov	r3, r0
    8062:	f88d 3017 	strb.w	r3, [sp, #23]
    8066:	460b      	mov	r3, r1
    8068:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    806c:	2300      	movs	r3, #0
    806e:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    8070:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8074:	4a38      	ldr	r2, [pc, #224]	; (8158 <FlexCAN_StartSendData+0x100>)
    8076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    807a:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    807c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8080:	4a36      	ldr	r2, [pc, #216]	; (815c <FlexCAN_StartSendData+0x104>)
    8082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8086:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    8088:	2300      	movs	r3, #0
    808a:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    808c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8092:	011b      	lsls	r3, r3, #4
    8094:	4413      	add	r3, r2
    8096:	3304      	adds	r3, #4
    8098:	681b      	ldr	r3, [r3, #0]
    809a:	2b00      	cmp	r3, #0
    809c:	d002      	beq.n	80a4 <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    809e:	2302      	movs	r3, #2
    80a0:	930d      	str	r3, [sp, #52]	; 0x34
    80a2:	e053      	b.n	814c <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    80a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    80a8:	4619      	mov	r1, r3
    80aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    80ac:	f7ff fbee 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    80b0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    80b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    80b6:	011b      	lsls	r3, r3, #4
    80b8:	4413      	add	r3, r2
    80ba:	3304      	adds	r3, #4
    80bc:	2202      	movs	r2, #2
    80be:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    80c0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    80c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    80c6:	011b      	lsls	r3, r3, #4
    80c8:	4413      	add	r3, r2
    80ca:	330c      	adds	r3, #12
    80cc:	2200      	movs	r2, #0
    80ce:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    80d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    80d4:	9a04      	ldr	r2, [sp, #16]
    80d6:	7b11      	ldrb	r1, [r2, #12]
    80d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    80da:	011b      	lsls	r3, r3, #4
    80dc:	4413      	add	r3, r2
    80de:	3308      	adds	r3, #8
    80e0:	460a      	mov	r2, r1
    80e2:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    80e4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    80e8:	9a04      	ldr	r2, [sp, #16]
    80ea:	7ad1      	ldrb	r1, [r2, #11]
    80ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    80ee:	011b      	lsls	r3, r3, #4
    80f0:	4413      	add	r3, r2
    80f2:	3309      	adds	r3, #9
    80f4:	460a      	mov	r2, r1
    80f6:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    80f8:	9b04      	ldr	r3, [sp, #16]
    80fa:	685b      	ldr	r3, [r3, #4]
    80fc:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    80fe:	9b04      	ldr	r3, [sp, #16]
    8100:	681b      	ldr	r3, [r3, #0]
    8102:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    8104:	9b04      	ldr	r3, [sp, #16]
    8106:	7a1b      	ldrb	r3, [r3, #8]
    8108:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    810c:	9b04      	ldr	r3, [sp, #16]
    810e:	7a5b      	ldrb	r3, [r3, #9]
    8110:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    8114:	9b04      	ldr	r3, [sp, #16]
    8116:	7a9b      	ldrb	r3, [r3, #10]
    8118:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    811c:	9b04      	ldr	r3, [sp, #16]
    811e:	7adb      	ldrb	r3, [r3, #11]
    8120:	2b00      	cmp	r3, #0
    8122:	d002      	beq.n	812a <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    8124:	231c      	movs	r3, #28
    8126:	9306      	str	r3, [sp, #24]
    8128:	e001      	b.n	812e <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    812a:	230c      	movs	r3, #12
    812c:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    812e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8132:	4619      	mov	r1, r3
    8134:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8136:	f002 fa89 	bl	a64c <FlexCAN_GetMsgBuffRegion>
    813a:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    813c:	a906      	add	r1, sp, #24
    813e:	2300      	movs	r3, #0
    8140:	9300      	str	r3, [sp, #0]
    8142:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8144:	9a03      	ldr	r2, [sp, #12]
    8146:	980a      	ldr	r0, [sp, #40]	; 0x28
    8148:	f002 ffd2 	bl	b0f0 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    814c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    814e:	4618      	mov	r0, r3
    8150:	b00f      	add	sp, #60	; 0x3c
    8152:	f85d fb04 	ldr.w	pc, [sp], #4
    8156:	bf00      	nop
    8158:	1fff8f9c 	.word	0x1fff8f9c
    815c:	0000e664 	.word	0x0000e664

00008160 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    8160:	b500      	push	{lr}
    8162:	b089      	sub	sp, #36	; 0x24
    8164:	4603      	mov	r3, r0
    8166:	9102      	str	r1, [sp, #8]
    8168:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    816c:	2300      	movs	r3, #0
    816e:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    8170:	2300      	movs	r3, #0
    8172:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8174:	2300      	movs	r3, #0
    8176:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    8178:	f89d 300f 	ldrb.w	r3, [sp, #15]
    817c:	4a26      	ldr	r2, [pc, #152]	; (8218 <FlexCAN_StartRxMessageFifoData+0xb8>)
    817e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8182:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    8184:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8188:	4a24      	ldr	r2, [pc, #144]	; (821c <FlexCAN_StartRxMessageFifoData+0xbc>)
    818a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    818e:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    8190:	9b05      	ldr	r3, [sp, #20]
    8192:	685b      	ldr	r3, [r3, #4]
    8194:	2b01      	cmp	r3, #1
    8196:	d102      	bne.n	819e <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    8198:	2302      	movs	r3, #2
    819a:	9307      	str	r3, [sp, #28]
    819c:	e036      	b.n	820c <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    819e:	9b05      	ldr	r3, [sp, #20]
    81a0:	2201      	movs	r2, #1
    81a2:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    81a4:	9b05      	ldr	r3, [sp, #20]
    81a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    81aa:	2b01      	cmp	r3, #1
    81ac:	d102      	bne.n	81b4 <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    81ae:	9b05      	ldr	r3, [sp, #20]
    81b0:	2201      	movs	r2, #1
    81b2:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    81b4:	9b05      	ldr	r3, [sp, #20]
    81b6:	9a02      	ldr	r2, [sp, #8]
    81b8:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    81ba:	9b05      	ldr	r3, [sp, #20]
    81bc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    81c0:	2b00      	cmp	r3, #0
    81c2:	d123      	bne.n	820c <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    81c4:	9b05      	ldr	r3, [sp, #20]
    81c6:	2200      	movs	r2, #0
    81c8:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    81ca:	9b05      	ldr	r3, [sp, #20]
    81cc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    81d0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    81d4:	9300      	str	r3, [sp, #0]
    81d6:	2301      	movs	r3, #1
    81d8:	2206      	movs	r2, #6
    81da:	9806      	ldr	r0, [sp, #24]
    81dc:	f002 fdbe 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    81e0:	9b05      	ldr	r3, [sp, #20]
    81e2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    81e6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    81ea:	9300      	str	r3, [sp, #0]
    81ec:	2301      	movs	r3, #1
    81ee:	2207      	movs	r2, #7
    81f0:	9806      	ldr	r0, [sp, #24]
    81f2:	f002 fdb3 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    81f6:	9b05      	ldr	r3, [sp, #20]
    81f8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    81fc:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8200:	9300      	str	r3, [sp, #0]
    8202:	2301      	movs	r3, #1
    8204:	2205      	movs	r2, #5
    8206:	9806      	ldr	r0, [sp, #24]
    8208:	f002 fda8 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    820c:	9b07      	ldr	r3, [sp, #28]
}
    820e:	4618      	mov	r0, r3
    8210:	b009      	add	sp, #36	; 0x24
    8212:	f85d fb04 	ldr.w	pc, [sp], #4
    8216:	bf00      	nop
    8218:	0000e664 	.word	0x0000e664
    821c:	1fff8f9c 	.word	0x1fff8f9c

00008220 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    8220:	b510      	push	{r4, lr}
    8222:	b09e      	sub	sp, #120	; 0x78
    8224:	4603      	mov	r3, r0
    8226:	9102      	str	r1, [sp, #8]
    8228:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    822c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8230:	4a70      	ldr	r2, [pc, #448]	; (83f4 <FlexCAN_IRQHandlerRxMB+0x1d4>)
    8232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8236:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8238:	f89d 300f 	ldrb.w	r3, [sp, #15]
    823c:	4a6e      	ldr	r2, [pc, #440]	; (83f8 <FlexCAN_IRQHandlerRxMB+0x1d8>)
    823e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8242:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    8244:	2300      	movs	r3, #0
    8246:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    824a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    824c:	9b02      	ldr	r3, [sp, #8]
    824e:	011b      	lsls	r3, r3, #4
    8250:	4413      	add	r3, r2
    8252:	681b      	ldr	r3, [r3, #0]
    8254:	2b00      	cmp	r3, #0
    8256:	d105      	bne.n	8264 <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    8258:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    825a:	9b02      	ldr	r3, [sp, #8]
    825c:	011b      	lsls	r3, r3, #4
    825e:	4413      	add	r3, r2
    8260:	aa05      	add	r2, sp, #20
    8262:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    8264:	2300      	movs	r3, #0
    8266:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    826a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    826c:	9b02      	ldr	r3, [sp, #8]
    826e:	011b      	lsls	r3, r3, #4
    8270:	4413      	add	r3, r2
    8272:	3308      	adds	r3, #8
    8274:	781b      	ldrb	r3, [r3, #0]
    8276:	2b00      	cmp	r3, #0
    8278:	d008      	beq.n	828c <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    827a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    827c:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    8280:	2b00      	cmp	r3, #0
    8282:	d003      	beq.n	828c <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    8284:	2301      	movs	r3, #1
    8286:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    828a:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    828c:	9902      	ldr	r1, [sp, #8]
    828e:	981c      	ldr	r0, [sp, #112]	; 0x70
    8290:	f002 fd55 	bl	ad3e <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    8294:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8296:	9b02      	ldr	r3, [sp, #8]
    8298:	011b      	lsls	r3, r3, #4
    829a:	4413      	add	r3, r2
    829c:	681b      	ldr	r3, [r3, #0]
    829e:	461a      	mov	r2, r3
    82a0:	9902      	ldr	r1, [sp, #8]
    82a2:	981c      	ldr	r0, [sp, #112]	; 0x70
    82a4:	f002 fe7a 	bl	af9c <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    82a8:	9902      	ldr	r1, [sp, #8]
    82aa:	981c      	ldr	r0, [sp, #112]	; 0x70
    82ac:	f7ff faee 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    82b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    82b2:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    82b6:	2b00      	cmp	r3, #0
    82b8:	d032      	beq.n	8320 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    82ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    82bc:	9b02      	ldr	r3, [sp, #8]
    82be:	011b      	lsls	r3, r3, #4
    82c0:	4413      	add	r3, r2
    82c2:	681b      	ldr	r3, [r3, #0]
    82c4:	681b      	ldr	r3, [r3, #0]
    82c6:	0e1b      	lsrs	r3, r3, #24
    82c8:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    82cc:	2b02      	cmp	r3, #2
    82ce:	d027      	beq.n	8320 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    82d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    82d2:	9b02      	ldr	r3, [sp, #8]
    82d4:	011b      	lsls	r3, r3, #4
    82d6:	4413      	add	r3, r2
    82d8:	681b      	ldr	r3, [r3, #0]
    82da:	681b      	ldr	r3, [r3, #0]
    82dc:	0e1b      	lsrs	r3, r3, #24
    82de:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    82e2:	2b04      	cmp	r3, #4
    82e4:	d01c      	beq.n	8320 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    82e6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    82e8:	9b02      	ldr	r3, [sp, #8]
    82ea:	011b      	lsls	r3, r3, #4
    82ec:	4413      	add	r3, r2
    82ee:	681b      	ldr	r3, [r3, #0]
    82f0:	681b      	ldr	r3, [r3, #0]
    82f2:	0e1b      	lsrs	r3, r3, #24
    82f4:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    82f8:	2b06      	cmp	r3, #6
    82fa:	d011      	beq.n	8320 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    82fc:	9902      	ldr	r1, [sp, #8]
    82fe:	981c      	ldr	r0, [sp, #112]	; 0x70
    8300:	f002 f9a4 	bl	a64c <FlexCAN_GetMsgBuffRegion>
    8304:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    8306:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8308:	681b      	ldr	r3, [r3, #0]
    830a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    830e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8310:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    8312:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8314:	681b      	ldr	r3, [r3, #0]
    8316:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    831a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    831c:	601a      	str	r2, [r3, #0]
    {
    831e:	e002      	b.n	8326 <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    8320:	981c      	ldr	r0, [sp, #112]	; 0x70
    8322:	f7ff faac 	bl	787e <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    8326:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    832a:	2b00      	cmp	r3, #0
    832c:	d000      	beq.n	8330 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    832e:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    8330:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8332:	9b02      	ldr	r3, [sp, #8]
    8334:	011b      	lsls	r3, r3, #4
    8336:	4413      	add	r3, r2
    8338:	3304      	adds	r3, #4
    833a:	2200      	movs	r2, #0
    833c:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    833e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8340:	9b02      	ldr	r3, [sp, #8]
    8342:	011b      	lsls	r3, r3, #4
    8344:	4413      	add	r3, r2
    8346:	3308      	adds	r3, #8
    8348:	781b      	ldrb	r3, [r3, #0]
    834a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    834e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8350:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    8354:	2b00      	cmp	r3, #0
    8356:	d008      	beq.n	836a <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    8358:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    835a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    835e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8362:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    8364:	9a02      	ldr	r2, [sp, #8]
    8366:	2100      	movs	r1, #0
    8368:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    836a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    836c:	9b02      	ldr	r3, [sp, #8]
    836e:	011b      	lsls	r3, r3, #4
    8370:	4413      	add	r3, r2
    8372:	3304      	adds	r3, #4
    8374:	681b      	ldr	r3, [r3, #0]
    8376:	2b00      	cmp	r3, #0
    8378:	d11e      	bne.n	83b8 <FlexCAN_IRQHandlerRxMB+0x198>
    837a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    837c:	9b02      	ldr	r3, [sp, #8]
    837e:	011b      	lsls	r3, r3, #4
    8380:	4413      	add	r3, r2
    8382:	3308      	adds	r3, #8
    8384:	781b      	ldrb	r3, [r3, #0]
    8386:	f083 0301 	eor.w	r3, r3, #1
    838a:	b2db      	uxtb	r3, r3
    838c:	2b00      	cmp	r3, #0
    838e:	d013      	beq.n	83b8 <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    8390:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    8392:	9b02      	ldr	r3, [sp, #8]
    8394:	011b      	lsls	r3, r3, #4
    8396:	4413      	add	r3, r2
    8398:	3308      	adds	r3, #8
    839a:	2201      	movs	r2, #1
    839c:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    839e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    83a0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    83a4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    83a8:	9300      	str	r3, [sp, #0]
    83aa:	2300      	movs	r3, #0
    83ac:	9a02      	ldr	r2, [sp, #8]
    83ae:	981c      	ldr	r0, [sp, #112]	; 0x70
    83b0:	f002 fcd4 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
    83b4:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    83b6:	e019      	b.n	83ec <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    83b8:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    83bc:	f083 0301 	eor.w	r3, r3, #1
    83c0:	b2db      	uxtb	r3, r3
    83c2:	2b00      	cmp	r3, #0
    83c4:	d012      	beq.n	83ec <FlexCAN_IRQHandlerRxMB+0x1cc>
    83c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    83c8:	9b02      	ldr	r3, [sp, #8]
    83ca:	011b      	lsls	r3, r3, #4
    83cc:	4413      	add	r3, r2
    83ce:	3308      	adds	r3, #8
    83d0:	781b      	ldrb	r3, [r3, #0]
    83d2:	2b00      	cmp	r3, #0
    83d4:	d00a      	beq.n	83ec <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    83d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    83d8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    83dc:	f89d 100f 	ldrb.w	r1, [sp, #15]
    83e0:	9300      	str	r3, [sp, #0]
    83e2:	2300      	movs	r3, #0
    83e4:	9a02      	ldr	r2, [sp, #8]
    83e6:	981c      	ldr	r0, [sp, #112]	; 0x70
    83e8:	f002 fcb8 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
}
    83ec:	bf00      	nop
    83ee:	b01e      	add	sp, #120	; 0x78
    83f0:	bd10      	pop	{r4, pc}
    83f2:	bf00      	nop
    83f4:	0000e664 	.word	0x0000e664
    83f8:	1fff8f9c 	.word	0x1fff8f9c

000083fc <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    83fc:	b510      	push	{r4, lr}
    83fe:	b09a      	sub	sp, #104	; 0x68
    8400:	4603      	mov	r3, r0
    8402:	9102      	str	r1, [sp, #8]
    8404:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    8408:	f89d 300f 	ldrb.w	r3, [sp, #15]
    840c:	4a46      	ldr	r2, [pc, #280]	; (8528 <FlexCAN_IRQHandlerTxMB+0x12c>)
    840e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8412:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    8414:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8418:	4a44      	ldr	r2, [pc, #272]	; (852c <FlexCAN_IRQHandlerTxMB+0x130>)
    841a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    841e:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    8420:	2300      	movs	r3, #0
    8422:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    8424:	2300      	movs	r3, #0
    8426:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    8428:	9a18      	ldr	r2, [sp, #96]	; 0x60
    842a:	9b02      	ldr	r3, [sp, #8]
    842c:	011b      	lsls	r3, r3, #4
    842e:	4413      	add	r3, r2
    8430:	3309      	adds	r3, #9
    8432:	781b      	ldrb	r3, [r3, #0]
    8434:	2b00      	cmp	r3, #0
    8436:	d01e      	beq.n	8476 <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    8438:	9902      	ldr	r1, [sp, #8]
    843a:	9819      	ldr	r0, [sp, #100]	; 0x64
    843c:	f002 fc7f 	bl	ad3e <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    8440:	ab04      	add	r3, sp, #16
    8442:	461a      	mov	r2, r3
    8444:	9902      	ldr	r1, [sp, #8]
    8446:	9819      	ldr	r0, [sp, #100]	; 0x64
    8448:	f002 fda8 	bl	af9c <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    844c:	9819      	ldr	r0, [sp, #100]	; 0x64
    844e:	f7ff fa16 	bl	787e <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    8452:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    8454:	9918      	ldr	r1, [sp, #96]	; 0x60
    8456:	9b02      	ldr	r3, [sp, #8]
    8458:	011b      	lsls	r3, r3, #4
    845a:	440b      	add	r3, r1
    845c:	330c      	adds	r3, #12
    845e:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    8460:	9b04      	ldr	r3, [sp, #16]
    8462:	0e1b      	lsrs	r3, r3, #24
    8464:	f003 030f 	and.w	r3, r3, #15
    8468:	2b04      	cmp	r3, #4
    846a:	d116      	bne.n	849a <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    846c:	9902      	ldr	r1, [sp, #8]
    846e:	9819      	ldr	r0, [sp, #100]	; 0x64
    8470:	f7ff fa0c 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
    8474:	e011      	b.n	849a <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    8476:	9902      	ldr	r1, [sp, #8]
    8478:	9819      	ldr	r0, [sp, #100]	; 0x64
    847a:	f002 fd7b 	bl	af74 <FlexCAN_GetMsgBuffTimestamp>
    847e:	4601      	mov	r1, r0
    8480:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8482:	9b02      	ldr	r3, [sp, #8]
    8484:	011b      	lsls	r3, r3, #4
    8486:	4413      	add	r3, r2
    8488:	330c      	adds	r3, #12
    848a:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    848c:	9819      	ldr	r0, [sp, #100]	; 0x64
    848e:	f7ff f9f6 	bl	787e <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    8492:	9902      	ldr	r1, [sp, #8]
    8494:	9819      	ldr	r0, [sp, #100]	; 0x64
    8496:	f7ff f9f9 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    849a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    849c:	9b02      	ldr	r3, [sp, #8]
    849e:	011b      	lsls	r3, r3, #4
    84a0:	4413      	add	r3, r2
    84a2:	3304      	adds	r3, #4
    84a4:	2200      	movs	r2, #0
    84a6:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    84a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    84aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    84ae:	2b00      	cmp	r3, #0
    84b0:	d008      	beq.n	84c4 <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    84b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    84b4:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    84b8:	f89d 000f 	ldrb.w	r0, [sp, #15]
    84bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
    84be:	9a02      	ldr	r2, [sp, #8]
    84c0:	2104      	movs	r1, #4
    84c2:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    84c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    84c6:	9b02      	ldr	r3, [sp, #8]
    84c8:	011b      	lsls	r3, r3, #4
    84ca:	4413      	add	r3, r2
    84cc:	3304      	adds	r3, #4
    84ce:	681b      	ldr	r3, [r3, #0]
    84d0:	2b00      	cmp	r3, #0
    84d2:	d112      	bne.n	84fa <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    84d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    84d6:	9b02      	ldr	r3, [sp, #8]
    84d8:	011b      	lsls	r3, r3, #4
    84da:	4413      	add	r3, r2
    84dc:	3308      	adds	r3, #8
    84de:	2201      	movs	r2, #1
    84e0:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    84e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    84e4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    84e8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    84ec:	9300      	str	r3, [sp, #0]
    84ee:	2300      	movs	r3, #0
    84f0:	9a02      	ldr	r2, [sp, #8]
    84f2:	9819      	ldr	r0, [sp, #100]	; 0x64
    84f4:	f002 fc32 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    84f8:	e012      	b.n	8520 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    84fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
    84fc:	9b02      	ldr	r3, [sp, #8]
    84fe:	011b      	lsls	r3, r3, #4
    8500:	4413      	add	r3, r2
    8502:	3308      	adds	r3, #8
    8504:	781b      	ldrb	r3, [r3, #0]
    8506:	2b00      	cmp	r3, #0
    8508:	d00a      	beq.n	8520 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    850a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    850c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8510:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8514:	9300      	str	r3, [sp, #0]
    8516:	2300      	movs	r3, #0
    8518:	9a02      	ldr	r2, [sp, #8]
    851a:	9819      	ldr	r0, [sp, #100]	; 0x64
    851c:	f002 fc1e 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
}
    8520:	bf00      	nop
    8522:	b01a      	add	sp, #104	; 0x68
    8524:	bd10      	pop	{r4, pc}
    8526:	bf00      	nop
    8528:	0000e664 	.word	0x0000e664
    852c:	1fff8f9c 	.word	0x1fff8f9c

00008530 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    8530:	b510      	push	{r4, lr}
    8532:	b098      	sub	sp, #96	; 0x60
    8534:	4603      	mov	r3, r0
    8536:	9100      	str	r1, [sp, #0]
    8538:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    853c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8540:	4a3c      	ldr	r2, [pc, #240]	; (8634 <FlexCAN_IRQHandlerRxFIFO+0x104>)
    8542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8546:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8548:	f89d 3007 	ldrb.w	r3, [sp, #7]
    854c:	4a3a      	ldr	r2, [pc, #232]	; (8638 <FlexCAN_IRQHandlerRxFIFO+0x108>)
    854e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8552:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    8554:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8556:	681b      	ldr	r3, [r3, #0]
    8558:	2b00      	cmp	r3, #0
    855a:	d102      	bne.n	8562 <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    855c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    855e:	aa02      	add	r2, sp, #8
    8560:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    8562:	9b00      	ldr	r3, [sp, #0]
    8564:	2b07      	cmp	r3, #7
    8566:	d048      	beq.n	85fa <FlexCAN_IRQHandlerRxFIFO+0xca>
    8568:	9b00      	ldr	r3, [sp, #0]
    856a:	2b07      	cmp	r3, #7
    856c:	d858      	bhi.n	8620 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    856e:	9b00      	ldr	r3, [sp, #0]
    8570:	2b05      	cmp	r3, #5
    8572:	d003      	beq.n	857c <FlexCAN_IRQHandlerRxFIFO+0x4c>
    8574:	9b00      	ldr	r3, [sp, #0]
    8576:	2b06      	cmp	r3, #6
    8578:	d02c      	beq.n	85d4 <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    857a:	e051      	b.n	8620 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    857c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    857e:	685b      	ldr	r3, [r3, #4]
    8580:	2b01      	cmp	r3, #1
    8582:	d14f      	bne.n	8624 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    8584:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8586:	681b      	ldr	r3, [r3, #0]
    8588:	4619      	mov	r1, r3
    858a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    858c:	f003 f98d 	bl	b8aa <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8590:	9900      	ldr	r1, [sp, #0]
    8592:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8594:	f7ff f97a 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    8598:	9b16      	ldr	r3, [sp, #88]	; 0x58
    859a:	2200      	movs	r2, #0
    859c:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    859e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    85a4:	2b00      	cmp	r3, #0
    85a6:	d008      	beq.n	85ba <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    85a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85aa:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    85ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
    85b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85b4:	2200      	movs	r2, #0
    85b6:	2101      	movs	r1, #1
    85b8:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    85ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85bc:	685b      	ldr	r3, [r3, #4]
    85be:	2b00      	cmp	r3, #0
    85c0:	d130      	bne.n	8624 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    85c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85c4:	2201      	movs	r2, #1
    85c6:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    85c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    85cc:	4618      	mov	r0, r3
    85ce:	f000 fc61 	bl	8e94 <FlexCAN_CompleteRxMessageFifoData>
            break;
    85d2:	e027      	b.n	8624 <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    85d4:	9900      	ldr	r1, [sp, #0]
    85d6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    85d8:	f7ff f958 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    85dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    85e2:	2b00      	cmp	r3, #0
    85e4:	d020      	beq.n	8628 <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    85e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85e8:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    85ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
    85f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    85f2:	2200      	movs	r2, #0
    85f4:	2102      	movs	r1, #2
    85f6:	47a0      	blx	r4
            break;
    85f8:	e016      	b.n	8628 <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    85fa:	9900      	ldr	r1, [sp, #0]
    85fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
    85fe:	f7ff f945 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    8602:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8604:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    8608:	2b00      	cmp	r3, #0
    860a:	d00f      	beq.n	862c <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    860c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    860e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    8612:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8616:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8618:	2200      	movs	r2, #0
    861a:	2103      	movs	r1, #3
    861c:	47a0      	blx	r4
            break;
    861e:	e005      	b.n	862c <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    8620:	bf00      	nop
    8622:	e004      	b.n	862e <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    8624:	bf00      	nop
    8626:	e002      	b.n	862e <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    8628:	bf00      	nop
    862a:	e000      	b.n	862e <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    862c:	bf00      	nop
    }
}
    862e:	bf00      	nop
    8630:	b018      	add	sp, #96	; 0x60
    8632:	bd10      	pop	{r4, pc}
    8634:	0000e664 	.word	0x0000e664
    8638:	1fff8f9c 	.word	0x1fff8f9c

0000863c <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    863c:	b500      	push	{lr}
    863e:	b08b      	sub	sp, #44	; 0x2c
    8640:	4603      	mov	r3, r0
    8642:	460a      	mov	r2, r1
    8644:	f88d 3007 	strb.w	r3, [sp, #7]
    8648:	4613      	mov	r3, r2
    864a:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    864e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8652:	4a3c      	ldr	r2, [pc, #240]	; (8744 <FlexCAN_AbortTxTransfer+0x108>)
    8654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8658:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    865a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    865e:	4a3a      	ldr	r2, [pc, #232]	; (8748 <FlexCAN_AbortTxTransfer+0x10c>)
    8660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8664:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8666:	2300      	movs	r3, #0
    8668:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    866a:	2300      	movs	r3, #0
    866c:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    866e:	2300      	movs	r3, #0
    8670:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    8672:	2300      	movs	r3, #0
    8674:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    8676:	2300      	movs	r3, #0
    8678:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    867a:	2300      	movs	r3, #0
    867c:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    867e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8682:	4619      	mov	r1, r3
    8684:	9807      	ldr	r0, [sp, #28]
    8686:	f001 ffe1 	bl	a64c <FlexCAN_GetMsgBuffRegion>
    868a:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    868c:	9b03      	ldr	r3, [sp, #12]
    868e:	681b      	ldr	r3, [r3, #0]
    8690:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    8692:	9b05      	ldr	r3, [sp, #20]
    8694:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    8698:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    869a:	9b05      	ldr	r3, [sp, #20]
    869c:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    86a0:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    86a2:	9b03      	ldr	r3, [sp, #12]
    86a4:	9a05      	ldr	r2, [sp, #20]
    86a6:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    86a8:	2100      	movs	r1, #0
    86aa:	4828      	ldr	r0, [pc, #160]	; (874c <FlexCAN_AbortTxTransfer+0x110>)
    86ac:	f7f8 fd98 	bl	11e0 <OsIf_MicrosToTicks>
    86b0:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    86b2:	2000      	movs	r0, #0
    86b4:	f7f8 fd48 	bl	1148 <OsIf_GetCounter>
    86b8:	4603      	mov	r3, r0
    86ba:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    86bc:	e00f      	b.n	86de <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    86be:	ab02      	add	r3, sp, #8
    86c0:	2100      	movs	r1, #0
    86c2:	4618      	mov	r0, r3
    86c4:	f7f8 fd59 	bl	117a <OsIf_GetElapsed>
    86c8:	4602      	mov	r2, r0
    86ca:	9b08      	ldr	r3, [sp, #32]
    86cc:	4413      	add	r3, r2
    86ce:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    86d0:	9a08      	ldr	r2, [sp, #32]
    86d2:	9b04      	ldr	r3, [sp, #16]
    86d4:	429a      	cmp	r2, r3
    86d6:	d302      	bcc.n	86de <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    86d8:	2303      	movs	r3, #3
    86da:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    86dc:	e008      	b.n	86f0 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    86de:	f89d 3006 	ldrb.w	r3, [sp, #6]
    86e2:	4619      	mov	r1, r3
    86e4:	9807      	ldr	r0, [sp, #28]
    86e6:	f7ff f8e4 	bl	78b2 <FlexCAN_GetBuffStatusFlag>
    86ea:	4603      	mov	r3, r0
    86ec:	2b00      	cmp	r3, #0
    86ee:	d0e6      	beq.n	86be <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    86f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    86f2:	2b03      	cmp	r3, #3
    86f4:	d012      	beq.n	871c <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    86f6:	9b03      	ldr	r3, [sp, #12]
    86f8:	681b      	ldr	r3, [r3, #0]
    86fa:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    86fc:	9b05      	ldr	r3, [sp, #20]
    86fe:	0e1b      	lsrs	r3, r3, #24
    8700:	f003 030f 	and.w	r3, r3, #15
    8704:	2b08      	cmp	r3, #8
    8706:	d101      	bne.n	870c <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    8708:	2305      	movs	r3, #5
    870a:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    870c:	9b05      	ldr	r3, [sp, #20]
    870e:	0e1b      	lsrs	r3, r3, #24
    8710:	f003 030f 	and.w	r3, r3, #15
    8714:	2b09      	cmp	r3, #9
    8716:	d101      	bne.n	871c <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    8718:	2300      	movs	r3, #0
    871a:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    871c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8720:	4619      	mov	r1, r3
    8722:	9807      	ldr	r0, [sp, #28]
    8724:	f7ff f8b2 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    8728:	f89d 3006 	ldrb.w	r3, [sp, #6]
    872c:	9a06      	ldr	r2, [sp, #24]
    872e:	011b      	lsls	r3, r3, #4
    8730:	4413      	add	r3, r2
    8732:	3304      	adds	r3, #4
    8734:	2200      	movs	r2, #0
    8736:	601a      	str	r2, [r3, #0]

    return result;
    8738:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    873a:	4618      	mov	r0, r3
    873c:	b00b      	add	sp, #44	; 0x2c
    873e:	f85d fb04 	ldr.w	pc, [sp], #4
    8742:	bf00      	nop
    8744:	0000e664 	.word	0x0000e664
    8748:	1fff8f9c 	.word	0x1fff8f9c
    874c:	000f4240 	.word	0x000f4240

00008750 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    8750:	b500      	push	{lr}
    8752:	b089      	sub	sp, #36	; 0x24
    8754:	4603      	mov	r3, r0
    8756:	460a      	mov	r2, r1
    8758:	f88d 3007 	strb.w	r3, [sp, #7]
    875c:	4613      	mov	r3, r2
    875e:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    8762:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8766:	4a41      	ldr	r2, [pc, #260]	; (886c <FlexCAN_AbortRxTransfer+0x11c>)
    8768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    876c:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    876e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8772:	4a3f      	ldr	r2, [pc, #252]	; (8870 <FlexCAN_AbortRxTransfer+0x120>)
    8774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8778:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    877a:	2300      	movs	r3, #0
    877c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    8780:	2300      	movs	r3, #0
    8782:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    8784:	2300      	movs	r3, #0
    8786:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    8788:	2300      	movs	r3, #0
    878a:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    878c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8790:	9a06      	ldr	r2, [sp, #24]
    8792:	011b      	lsls	r3, r3, #4
    8794:	4413      	add	r3, r2
    8796:	3304      	adds	r3, #4
    8798:	2200      	movs	r2, #0
    879a:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    879c:	9b06      	ldr	r3, [sp, #24]
    879e:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    87a2:	2b00      	cmp	r3, #0
    87a4:	d03c      	beq.n	8820 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    87a6:	9b07      	ldr	r3, [sp, #28]
    87a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    87aa:	0e1b      	lsrs	r3, r3, #24
    87ac:	b2db      	uxtb	r3, r3
    87ae:	f003 030f 	and.w	r3, r3, #15
    87b2:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    87b6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    87ba:	4618      	mov	r0, r3
    87bc:	f7ff f9f3 	bl	7ba6 <RxFifoOcuppiedLastMsgBuff>
    87c0:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    87c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    87c6:	9a04      	ldr	r2, [sp, #16]
    87c8:	429a      	cmp	r2, r3
    87ca:	d21b      	bcs.n	8804 <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    87cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    87d0:	4619      	mov	r1, r3
    87d2:	9807      	ldr	r0, [sp, #28]
    87d4:	f001 ff3a 	bl	a64c <FlexCAN_GetMsgBuffRegion>
    87d8:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    87da:	9b02      	ldr	r3, [sp, #8]
    87dc:	681b      	ldr	r3, [r3, #0]
    87de:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    87e0:	9b03      	ldr	r3, [sp, #12]
    87e2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    87e6:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    87e8:	9b02      	ldr	r3, [sp, #8]
    87ea:	9a03      	ldr	r2, [sp, #12]
    87ec:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    87ee:	9b03      	ldr	r3, [sp, #12]
    87f0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    87f4:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    87f6:	9b03      	ldr	r3, [sp, #12]
    87f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    87fc:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    87fe:	9b02      	ldr	r3, [sp, #8]
    8800:	9a03      	ldr	r2, [sp, #12]
    8802:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    8804:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8808:	2b00      	cmp	r3, #0
    880a:	d125      	bne.n	8858 <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    880c:	9b06      	ldr	r3, [sp, #24]
    880e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8812:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8816:	2205      	movs	r2, #5
    8818:	9807      	ldr	r0, [sp, #28]
    881a:	f002 faf5 	bl	ae08 <FLEXCAN_ClearMsgBuffIntCmd>
    881e:	e01b      	b.n	8858 <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    8820:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8824:	4619      	mov	r1, r3
    8826:	9807      	ldr	r0, [sp, #28]
    8828:	f001 ff10 	bl	a64c <FlexCAN_GetMsgBuffRegion>
    882c:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    882e:	9b02      	ldr	r3, [sp, #8]
    8830:	681b      	ldr	r3, [r3, #0]
    8832:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    8834:	9b03      	ldr	r3, [sp, #12]
    8836:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    883a:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    883c:	9b02      	ldr	r3, [sp, #8]
    883e:	9a03      	ldr	r2, [sp, #12]
    8840:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    8842:	9b03      	ldr	r3, [sp, #12]
    8844:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    8848:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    884a:	9b03      	ldr	r3, [sp, #12]
    884c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    8850:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    8852:	9b02      	ldr	r3, [sp, #8]
    8854:	9a03      	ldr	r2, [sp, #12]
    8856:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    8858:	f89d 3006 	ldrb.w	r3, [sp, #6]
    885c:	4619      	mov	r1, r3
    885e:	9807      	ldr	r0, [sp, #28]
    8860:	f7ff f814 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    8864:	bf00      	nop
    8866:	b009      	add	sp, #36	; 0x24
    8868:	f85d fb04 	ldr.w	pc, [sp], #4
    886c:	0000e664 	.word	0x0000e664
    8870:	1fff8f9c 	.word	0x1fff8f9c

00008874 <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    8874:	b500      	push	{lr}
    8876:	b089      	sub	sp, #36	; 0x24
    8878:	4603      	mov	r3, r0
    887a:	9102      	str	r1, [sp, #8]
    887c:	9201      	str	r2, [sp, #4]
    887e:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8882:	2300      	movs	r3, #0
    8884:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    8886:	f89d 300f 	ldrb.w	r3, [sp, #15]
    888a:	4a36      	ldr	r2, [pc, #216]	; (8964 <FlexCAN_Ip_Init_Privileged+0xf0>)
    888c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8890:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    8892:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8896:	9a01      	ldr	r2, [sp, #4]
    8898:	9905      	ldr	r1, [sp, #20]
    889a:	4618      	mov	r0, r3
    889c:	f7ff fa84 	bl	7da8 <FlexCAN_InitController>
    88a0:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    88a2:	9b06      	ldr	r3, [sp, #24]
    88a4:	2b00      	cmp	r3, #0
    88a6:	d158      	bne.n	895a <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    88a8:	9901      	ldr	r1, [sp, #4]
    88aa:	9805      	ldr	r0, [sp, #20]
    88ac:	f7ff fad6 	bl	7e5c <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    88b0:	9b01      	ldr	r3, [sp, #4]
    88b2:	68db      	ldr	r3, [r3, #12]
    88b4:	4619      	mov	r1, r3
    88b6:	9805      	ldr	r0, [sp, #20]
    88b8:	f002 fdb8 	bl	b42c <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    88bc:	2300      	movs	r3, #0
    88be:	9307      	str	r3, [sp, #28]
    88c0:	e01d      	b.n	88fe <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    88c2:	9a02      	ldr	r2, [sp, #8]
    88c4:	9b07      	ldr	r3, [sp, #28]
    88c6:	011b      	lsls	r3, r3, #4
    88c8:	4413      	add	r3, r2
    88ca:	3308      	adds	r3, #8
    88cc:	2201      	movs	r2, #1
    88ce:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    88d0:	9a02      	ldr	r2, [sp, #8]
    88d2:	9b07      	ldr	r3, [sp, #28]
    88d4:	011b      	lsls	r3, r3, #4
    88d6:	4413      	add	r3, r2
    88d8:	2200      	movs	r2, #0
    88da:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    88dc:	9a02      	ldr	r2, [sp, #8]
    88de:	9b07      	ldr	r3, [sp, #28]
    88e0:	011b      	lsls	r3, r3, #4
    88e2:	4413      	add	r3, r2
    88e4:	3304      	adds	r3, #4
    88e6:	2200      	movs	r2, #0
    88e8:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    88ea:	9a02      	ldr	r2, [sp, #8]
    88ec:	9b07      	ldr	r3, [sp, #28]
    88ee:	011b      	lsls	r3, r3, #4
    88f0:	4413      	add	r3, r2
    88f2:	330c      	adds	r3, #12
    88f4:	2200      	movs	r2, #0
    88f6:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    88f8:	9b07      	ldr	r3, [sp, #28]
    88fa:	3301      	adds	r3, #1
    88fc:	9307      	str	r3, [sp, #28]
    88fe:	9b07      	ldr	r3, [sp, #28]
    8900:	2b1f      	cmp	r3, #31
    8902:	d9de      	bls.n	88c2 <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    8904:	9b01      	ldr	r3, [sp, #4]
    8906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    8908:	9b02      	ldr	r3, [sp, #8]
    890a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    890e:	9b01      	ldr	r3, [sp, #4]
    8910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    8912:	9b02      	ldr	r3, [sp, #8]
    8914:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    8918:	9b02      	ldr	r3, [sp, #8]
    891a:	2200      	movs	r2, #0
    891c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    8920:	9b01      	ldr	r3, [sp, #4]
    8922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    8924:	9b02      	ldr	r3, [sp, #8]
    8926:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    892a:	9b02      	ldr	r3, [sp, #8]
    892c:	2200      	movs	r2, #0
    892e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    8932:	9b01      	ldr	r3, [sp, #4]
    8934:	7a1a      	ldrb	r2, [r3, #8]
    8936:	9b02      	ldr	r3, [sp, #8]
    8938:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    893c:	9b01      	ldr	r3, [sp, #4]
    893e:	681a      	ldr	r2, [r3, #0]
    8940:	9b02      	ldr	r3, [sp, #8]
    8942:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    8946:	9b02      	ldr	r3, [sp, #8]
    8948:	2201      	movs	r2, #1
    894a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    894e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8952:	4905      	ldr	r1, [pc, #20]	; (8968 <FlexCAN_Ip_Init_Privileged+0xf4>)
    8954:	9a02      	ldr	r2, [sp, #8]
    8956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    895a:	9b06      	ldr	r3, [sp, #24]
}
    895c:	4618      	mov	r0, r3
    895e:	b009      	add	sp, #36	; 0x24
    8960:	f85d fb04 	ldr.w	pc, [sp], #4
    8964:	0000e664 	.word	0x0000e664
    8968:	1fff8f9c 	.word	0x1fff8f9c

0000896c <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    896c:	b500      	push	{lr}
    896e:	b08b      	sub	sp, #44	; 0x2c
    8970:	9204      	str	r2, [sp, #16]
    8972:	9303      	str	r3, [sp, #12]
    8974:	4603      	mov	r3, r0
    8976:	f88d 3017 	strb.w	r3, [sp, #23]
    897a:	460b      	mov	r3, r1
    897c:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    8980:	2301      	movs	r3, #1
    8982:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8984:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8988:	4a1c      	ldr	r2, [pc, #112]	; (89fc <FlexCAN_Ip_Send+0x90>)
    898a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    898e:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8990:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8994:	4a1a      	ldr	r2, [pc, #104]	; (8a00 <FlexCAN_Ip_Send+0x94>)
    8996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    899a:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    899c:	9808      	ldr	r0, [sp, #32]
    899e:	f7ff f8f4 	bl	7b8a <FlexCAN_IsListenOnlyModeEnabled>
    89a2:	4603      	mov	r3, r0
    89a4:	f083 0301 	eor.w	r3, r3, #1
    89a8:	b2db      	uxtb	r3, r3
    89aa:	2b00      	cmp	r3, #0
    89ac:	d021      	beq.n	89f2 <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    89ae:	f89d 1016 	ldrb.w	r1, [sp, #22]
    89b2:	f89d 0017 	ldrb.w	r0, [sp, #23]
    89b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    89b8:	9300      	str	r3, [sp, #0]
    89ba:	9b03      	ldr	r3, [sp, #12]
    89bc:	9a04      	ldr	r2, [sp, #16]
    89be:	f7ff fb4b 	bl	8058 <FlexCAN_StartSendData>
    89c2:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    89c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    89c6:	2b00      	cmp	r3, #0
    89c8:	d113      	bne.n	89f2 <FlexCAN_Ip_Send+0x86>
    89ca:	9b04      	ldr	r3, [sp, #16]
    89cc:	7b1b      	ldrb	r3, [r3, #12]
    89ce:	f083 0301 	eor.w	r3, r3, #1
    89d2:	b2db      	uxtb	r3, r3
    89d4:	2b00      	cmp	r3, #0
    89d6:	d00c      	beq.n	89f2 <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    89d8:	f89d 2016 	ldrb.w	r2, [sp, #22]
    89dc:	9b07      	ldr	r3, [sp, #28]
    89de:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    89e2:	f89d 1017 	ldrb.w	r1, [sp, #23]
    89e6:	9300      	str	r3, [sp, #0]
    89e8:	2301      	movs	r3, #1
    89ea:	9808      	ldr	r0, [sp, #32]
    89ec:	f002 f9b6 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
    89f0:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    89f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    89f4:	4618      	mov	r0, r3
    89f6:	b00b      	add	sp, #44	; 0x2c
    89f8:	f85d fb04 	ldr.w	pc, [sp], #4
    89fc:	0000e664 	.word	0x0000e664
    8a00:	1fff8f9c 	.word	0x1fff8f9c

00008a04 <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    8a04:	b500      	push	{lr}
    8a06:	b08b      	sub	sp, #44	; 0x2c
    8a08:	9202      	str	r2, [sp, #8]
    8a0a:	9301      	str	r3, [sp, #4]
    8a0c:	4603      	mov	r3, r0
    8a0e:	f88d 300f 	strb.w	r3, [sp, #15]
    8a12:	460b      	mov	r3, r1
    8a14:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8a18:	2300      	movs	r3, #0
    8a1a:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8a1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8a20:	4a19      	ldr	r2, [pc, #100]	; (8a88 <FlexCAN_Ip_ConfigRxMb+0x84>)
    8a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a26:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8a28:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a2c:	4619      	mov	r1, r3
    8a2e:	9808      	ldr	r0, [sp, #32]
    8a30:	f7fe ff2c 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    8a34:	9b02      	ldr	r3, [sp, #8]
    8a36:	685b      	ldr	r3, [r3, #4]
    8a38:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    8a3a:	9b02      	ldr	r3, [sp, #8]
    8a3c:	681b      	ldr	r3, [r3, #0]
    8a3e:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    8a40:	9b02      	ldr	r3, [sp, #8]
    8a42:	7a1b      	ldrb	r3, [r3, #8]
    8a44:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    8a48:	230f      	movs	r3, #15
    8a4a:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    8a4c:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8a50:	aa04      	add	r2, sp, #16
    8a52:	9b01      	ldr	r3, [sp, #4]
    8a54:	9808      	ldr	r0, [sp, #32]
    8a56:	f002 fa25 	bl	aea4 <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    8a5a:	2300      	movs	r3, #0
    8a5c:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    8a5e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8a62:	aa04      	add	r2, sp, #16
    8a64:	9b01      	ldr	r3, [sp, #4]
    8a66:	9808      	ldr	r0, [sp, #32]
    8a68:	f002 fa1c 	bl	aea4 <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    8a6c:	2304      	movs	r3, #4
    8a6e:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    8a70:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8a74:	aa04      	add	r2, sp, #16
    8a76:	9b01      	ldr	r3, [sp, #4]
    8a78:	9808      	ldr	r0, [sp, #32]
    8a7a:	f002 fa13 	bl	aea4 <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    8a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    8a80:	4618      	mov	r0, r3
    8a82:	b00b      	add	sp, #44	; 0x2c
    8a84:	f85d fb04 	ldr.w	pc, [sp], #4
    8a88:	0000e664 	.word	0x0000e664

00008a8c <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    8a8c:	b500      	push	{lr}
    8a8e:	b089      	sub	sp, #36	; 0x24
    8a90:	9202      	str	r2, [sp, #8]
    8a92:	461a      	mov	r2, r3
    8a94:	4603      	mov	r3, r0
    8a96:	f88d 300f 	strb.w	r3, [sp, #15]
    8a9a:	460b      	mov	r3, r1
    8a9c:	f88d 300e 	strb.w	r3, [sp, #14]
    8aa0:	4613      	mov	r3, r2
    8aa2:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8aa6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8aaa:	4a18      	ldr	r2, [pc, #96]	; (8b0c <FlexCAN_Ip_Receive+0x80>)
    8aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ab0:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8ab2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ab6:	4a16      	ldr	r2, [pc, #88]	; (8b10 <FlexCAN_Ip_Receive+0x84>)
    8ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8abc:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    8abe:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8ac2:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8ac6:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8aca:	9a02      	ldr	r2, [sp, #8]
    8acc:	f7ff fa86 	bl	7fdc <FlexCAN_StartRxMessageBufferData>
    8ad0:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    8ad2:	9b07      	ldr	r3, [sp, #28]
    8ad4:	2b00      	cmp	r3, #0
    8ad6:	d113      	bne.n	8b00 <FlexCAN_Ip_Receive+0x74>
    8ad8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8adc:	f083 0301 	eor.w	r3, r3, #1
    8ae0:	b2db      	uxtb	r3, r3
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	d00c      	beq.n	8b00 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    8ae6:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8aea:	9b05      	ldr	r3, [sp, #20]
    8aec:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8af0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8af4:	9300      	str	r3, [sp, #0]
    8af6:	2301      	movs	r3, #1
    8af8:	9806      	ldr	r0, [sp, #24]
    8afa:	f002 f92f 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
    8afe:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    8b00:	9b07      	ldr	r3, [sp, #28]
}
    8b02:	4618      	mov	r0, r3
    8b04:	b009      	add	sp, #36	; 0x24
    8b06:	f85d fb04 	ldr.w	pc, [sp], #4
    8b0a:	bf00      	nop
    8b0c:	0000e664 	.word	0x0000e664
    8b10:	1fff8f9c 	.word	0x1fff8f9c

00008b14 <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    8b14:	b500      	push	{lr}
    8b16:	b08b      	sub	sp, #44	; 0x2c
    8b18:	9202      	str	r2, [sp, #8]
    8b1a:	461a      	mov	r2, r3
    8b1c:	4603      	mov	r3, r0
    8b1e:	f88d 300f 	strb.w	r3, [sp, #15]
    8b22:	460b      	mov	r3, r1
    8b24:	f88d 300e 	strb.w	r3, [sp, #14]
    8b28:	4613      	mov	r3, r2
    8b2a:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    8b2e:	2300      	movs	r3, #0
    8b30:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    8b32:	2300      	movs	r3, #0
    8b34:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8b36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8b38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8b3c:	fb02 f303 	mul.w	r3, r2, r3
    8b40:	2100      	movs	r1, #0
    8b42:	4618      	mov	r0, r3
    8b44:	f7f8 fb4c 	bl	11e0 <OsIf_MicrosToTicks>
    8b48:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8b4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b4e:	4a4c      	ldr	r2, [pc, #304]	; (8c80 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    8b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b54:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8b56:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8b5a:	4a4a      	ldr	r2, [pc, #296]	; (8c84 <FlexCAN_Ip_ReceiveBlocking+0x170>)
    8b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b60:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    8b62:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8b66:	f89d 100e 	ldrb.w	r1, [sp, #14]
    8b6a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    8b6e:	9a02      	ldr	r2, [sp, #8]
    8b70:	f7ff fa34 	bl	7fdc <FlexCAN_StartRxMessageBufferData>
    8b74:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    8b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8b78:	2b00      	cmp	r3, #0
    8b7a:	d113      	bne.n	8ba4 <FlexCAN_Ip_ReceiveBlocking+0x90>
    8b7c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8b80:	f083 0301 	eor.w	r3, r3, #1
    8b84:	b2db      	uxtb	r3, r3
    8b86:	2b00      	cmp	r3, #0
    8b88:	d00c      	beq.n	8ba4 <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    8b8a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8b8e:	9b06      	ldr	r3, [sp, #24]
    8b90:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8b94:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8b98:	9300      	str	r3, [sp, #0]
    8b9a:	2301      	movs	r3, #1
    8b9c:	9805      	ldr	r0, [sp, #20]
    8b9e:	f002 f8dd 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
    8ba2:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    8ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d133      	bne.n	8c12 <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8baa:	2000      	movs	r0, #0
    8bac:	f7f8 facc 	bl	1148 <OsIf_GetCounter>
    8bb0:	4603      	mov	r3, r0
    8bb2:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    8bb4:	e024      	b.n	8c00 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    8bb6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8bba:	2b00      	cmp	r3, #0
    8bbc:	d010      	beq.n	8be0 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    8bbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8bc2:	4619      	mov	r1, r3
    8bc4:	9805      	ldr	r0, [sp, #20]
    8bc6:	f7fe fe74 	bl	78b2 <FlexCAN_GetBuffStatusFlag>
    8bca:	4603      	mov	r3, r0
    8bcc:	2b00      	cmp	r3, #0
    8bce:	d007      	beq.n	8be0 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    8bd0:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8bd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8bd8:	4611      	mov	r1, r2
    8bda:	4618      	mov	r0, r3
    8bdc:	f7ff fb20 	bl	8220 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8be0:	ab04      	add	r3, sp, #16
    8be2:	2100      	movs	r1, #0
    8be4:	4618      	mov	r0, r3
    8be6:	f7f8 fac8 	bl	117a <OsIf_GetElapsed>
    8bea:	4602      	mov	r2, r0
    8bec:	9b08      	ldr	r3, [sp, #32]
    8bee:	4413      	add	r3, r2
    8bf0:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    8bf2:	9a08      	ldr	r2, [sp, #32]
    8bf4:	9b07      	ldr	r3, [sp, #28]
    8bf6:	429a      	cmp	r2, r3
    8bf8:	d302      	bcc.n	8c00 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    8bfa:	2303      	movs	r3, #3
    8bfc:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    8bfe:	e008      	b.n	8c12 <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    8c00:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8c04:	9a06      	ldr	r2, [sp, #24]
    8c06:	011b      	lsls	r3, r3, #4
    8c08:	4413      	add	r3, r2
    8c0a:	3304      	adds	r3, #4
    8c0c:	681b      	ldr	r3, [r3, #0]
    8c0e:	2b01      	cmp	r3, #1
    8c10:	d0d1      	beq.n	8bb6 <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    8c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8c14:	2b03      	cmp	r3, #3
    8c16:	d112      	bne.n	8c3e <FlexCAN_Ip_ReceiveBlocking+0x12a>
    8c18:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8c1c:	f083 0301 	eor.w	r3, r3, #1
    8c20:	b2db      	uxtb	r3, r3
    8c22:	2b00      	cmp	r3, #0
    8c24:	d00b      	beq.n	8c3e <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    8c26:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8c2a:	9b06      	ldr	r3, [sp, #24]
    8c2c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8c30:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8c34:	9300      	str	r3, [sp, #0]
    8c36:	2300      	movs	r3, #0
    8c38:	9805      	ldr	r0, [sp, #20]
    8c3a:	f002 f88f 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    8c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8c40:	2b04      	cmp	r3, #4
    8c42:	d018      	beq.n	8c76 <FlexCAN_Ip_ReceiveBlocking+0x162>
    8c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8c46:	2b02      	cmp	r3, #2
    8c48:	d015      	beq.n	8c76 <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    8c4a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8c4e:	9a06      	ldr	r2, [sp, #24]
    8c50:	011b      	lsls	r3, r3, #4
    8c52:	4413      	add	r3, r2
    8c54:	3304      	adds	r3, #4
    8c56:	681b      	ldr	r3, [r3, #0]
    8c58:	2b00      	cmp	r3, #0
    8c5a:	d102      	bne.n	8c62 <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    8c5c:	2300      	movs	r3, #0
    8c5e:	9309      	str	r3, [sp, #36]	; 0x24
    8c60:	e009      	b.n	8c76 <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    8c62:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8c66:	9a06      	ldr	r2, [sp, #24]
    8c68:	011b      	lsls	r3, r3, #4
    8c6a:	4413      	add	r3, r2
    8c6c:	3304      	adds	r3, #4
    8c6e:	2200      	movs	r2, #0
    8c70:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    8c72:	2303      	movs	r3, #3
    8c74:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    8c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    8c78:	4618      	mov	r0, r3
    8c7a:	b00b      	add	sp, #44	; 0x2c
    8c7c:	f85d fb04 	ldr.w	pc, [sp], #4
    8c80:	1fff8f9c 	.word	0x1fff8f9c
    8c84:	0000e664 	.word	0x0000e664

00008c88 <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    8c88:	b500      	push	{lr}
    8c8a:	b085      	sub	sp, #20
    8c8c:	4603      	mov	r3, r0
    8c8e:	9100      	str	r1, [sp, #0]
    8c90:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8c94:	2300      	movs	r3, #0
    8c96:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    8c98:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c9c:	9900      	ldr	r1, [sp, #0]
    8c9e:	4618      	mov	r0, r3
    8ca0:	f7ff fa5e 	bl	8160 <FlexCAN_StartRxMessageFifoData>
    8ca4:	9003      	str	r0, [sp, #12]
    }
    return result;
    8ca6:	9b03      	ldr	r3, [sp, #12]
}
    8ca8:	4618      	mov	r0, r3
    8caa:	b005      	add	sp, #20
    8cac:	f85d fb04 	ldr.w	pc, [sp], #4

00008cb0 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    8cb0:	b500      	push	{lr}
    8cb2:	b087      	sub	sp, #28
    8cb4:	4603      	mov	r3, r0
    8cb6:	9102      	str	r1, [sp, #8]
    8cb8:	9201      	str	r2, [sp, #4]
    8cba:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8cbe:	2300      	movs	r3, #0
    8cc0:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    8cc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8cc6:	9902      	ldr	r1, [sp, #8]
    8cc8:	4618      	mov	r0, r3
    8cca:	f7ff fa49 	bl	8160 <FlexCAN_StartRxMessageFifoData>
    8cce:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    8cd0:	9b05      	ldr	r3, [sp, #20]
    8cd2:	2b00      	cmp	r3, #0
    8cd4:	d106      	bne.n	8ce4 <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    8cd6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8cda:	9901      	ldr	r1, [sp, #4]
    8cdc:	4618      	mov	r0, r3
    8cde:	f7ff f8e2 	bl	7ea6 <FlexCAN_ProccessLegacyRxFIFO>
    8ce2:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    8ce4:	9b05      	ldr	r3, [sp, #20]
}
    8ce6:	4618      	mov	r0, r3
    8ce8:	b007      	add	sp, #28
    8cea:	f85d fb04 	ldr.w	pc, [sp], #4

00008cee <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    8cee:	b500      	push	{lr}
    8cf0:	b089      	sub	sp, #36	; 0x24
    8cf2:	4603      	mov	r3, r0
    8cf4:	9102      	str	r1, [sp, #8]
    8cf6:	9201      	str	r2, [sp, #4]
    8cf8:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8cfc:	2300      	movs	r3, #0
    8cfe:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    8d00:	2300      	movs	r3, #0
    8d02:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8d04:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8d08:	4a1c      	ldr	r2, [pc, #112]	; (8d7c <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    8d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d0e:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    8d10:	9805      	ldr	r0, [sp, #20]
    8d12:	f7fe fd61 	bl	77d8 <FlexCAN_IsEnabled>
    8d16:	4603      	mov	r3, r0
    8d18:	2b00      	cmp	r3, #0
    8d1a:	bf14      	ite	ne
    8d1c:	2301      	movne	r3, #1
    8d1e:	2300      	moveq	r3, #0
    8d20:	b2db      	uxtb	r3, r3
    8d22:	f083 0301 	eor.w	r3, r3, #1
    8d26:	b2db      	uxtb	r3, r3
    8d28:	f88d 3013 	strb.w	r3, [sp, #19]
    8d2c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8d30:	f003 0301 	and.w	r3, r3, #1
    8d34:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    8d38:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8d3c:	2b00      	cmp	r3, #0
    8d3e:	d003      	beq.n	8d48 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    8d40:	9805      	ldr	r0, [sp, #20]
    8d42:	f001 fd6b 	bl	a81c <FlexCAN_Enable>
    8d46:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    8d48:	9b07      	ldr	r3, [sp, #28]
    8d4a:	2b00      	cmp	r3, #0
    8d4c:	d104      	bne.n	8d58 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    8d4e:	9a01      	ldr	r2, [sp, #4]
    8d50:	9902      	ldr	r1, [sp, #8]
    8d52:	9805      	ldr	r0, [sp, #20]
    8d54:	f002 fba5 	bl	b4a2 <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    8d58:	f89d 3013 	ldrb.w	r3, [sp, #19]
    8d5c:	2b00      	cmp	r3, #0
    8d5e:	d008      	beq.n	8d72 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    8d60:	9805      	ldr	r0, [sp, #20]
    8d62:	f001 fdd9 	bl	a918 <FlexCAN_Disable>
    8d66:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    8d68:	9b06      	ldr	r3, [sp, #24]
    8d6a:	2b00      	cmp	r3, #0
    8d6c:	d001      	beq.n	8d72 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    8d6e:	9b06      	ldr	r3, [sp, #24]
    8d70:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    8d72:	9b07      	ldr	r3, [sp, #28]
}
    8d74:	4618      	mov	r0, r3
    8d76:	b009      	add	sp, #36	; 0x24
    8d78:	f85d fb04 	ldr.w	pc, [sp], #4
    8d7c:	0000e664 	.word	0x0000e664

00008d80 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    8d80:	b500      	push	{lr}
    8d82:	b08f      	sub	sp, #60	; 0x3c
    8d84:	9204      	str	r2, [sp, #16]
    8d86:	9303      	str	r3, [sp, #12]
    8d88:	4603      	mov	r3, r0
    8d8a:	f88d 3017 	strb.w	r3, [sp, #23]
    8d8e:	460b      	mov	r3, r1
    8d90:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8d94:	2300      	movs	r3, #0
    8d96:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8d98:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8d9c:	4a27      	ldr	r2, [pc, #156]	; (8e3c <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    8d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8da2:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    8da4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8da8:	4a25      	ldr	r2, [pc, #148]	; (8e40 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    8daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dae:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    8db0:	2300      	movs	r3, #0
    8db2:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    8db4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8db6:	2b00      	cmp	r3, #0
    8db8:	d13a      	bne.n	8e30 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    8dba:	9b04      	ldr	r3, [sp, #16]
    8dbc:	685b      	ldr	r3, [r3, #4]
    8dbe:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    8dc0:	9b04      	ldr	r3, [sp, #16]
    8dc2:	681b      	ldr	r3, [r3, #0]
    8dc4:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    8dc6:	230a      	movs	r3, #10
    8dc8:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    8dca:	2300      	movs	r3, #0
    8dcc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    8dd0:	2300      	movs	r3, #0
    8dd2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    8dd6:	2300      	movs	r3, #0
    8dd8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    8ddc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8de0:	4619      	mov	r1, r3
    8de2:	980c      	ldr	r0, [sp, #48]	; 0x30
    8de4:	f7fe fd52 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    8de8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8dec:	4619      	mov	r1, r3
    8dee:	980c      	ldr	r0, [sp, #48]	; 0x30
    8df0:	f001 fc2c 	bl	a64c <FlexCAN_GetMsgBuffRegion>
    8df4:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    8df6:	9b04      	ldr	r3, [sp, #16]
    8df8:	7adb      	ldrb	r3, [r3, #11]
    8dfa:	a906      	add	r1, sp, #24
    8dfc:	9300      	str	r3, [sp, #0]
    8dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8e00:	9a03      	ldr	r2, [sp, #12]
    8e02:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e04:	f002 f974 	bl	b0f0 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    8e08:	9b04      	ldr	r3, [sp, #16]
    8e0a:	7b1b      	ldrb	r3, [r3, #12]
    8e0c:	f083 0301 	eor.w	r3, r3, #1
    8e10:	b2db      	uxtb	r3, r3
    8e12:	2b00      	cmp	r3, #0
    8e14:	d00c      	beq.n	8e30 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    8e16:	f89d 2016 	ldrb.w	r2, [sp, #22]
    8e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e1c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8e20:	f89d 1017 	ldrb.w	r1, [sp, #23]
    8e24:	9300      	str	r3, [sp, #0]
    8e26:	2301      	movs	r3, #1
    8e28:	980c      	ldr	r0, [sp, #48]	; 0x30
    8e2a:	f001 ff97 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
    8e2e:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    8e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    8e32:	4618      	mov	r0, r3
    8e34:	b00f      	add	sp, #60	; 0x3c
    8e36:	f85d fb04 	ldr.w	pc, [sp], #4
    8e3a:	bf00      	nop
    8e3c:	0000e664 	.word	0x0000e664
    8e40:	1fff8f9c 	.word	0x1fff8f9c

00008e44 <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    8e44:	b084      	sub	sp, #16
    8e46:	4603      	mov	r3, r0
    8e48:	460a      	mov	r2, r1
    8e4a:	f88d 3007 	strb.w	r3, [sp, #7]
    8e4e:	4613      	mov	r3, r2
    8e50:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8e54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8e58:	4a0d      	ldr	r2, [pc, #52]	; (8e90 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    8e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e5e:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    8e60:	2301      	movs	r3, #1
    8e62:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    8e64:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e68:	2b1f      	cmp	r3, #31
    8e6a:	d80d      	bhi.n	8e88 <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    8e6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e70:	9a02      	ldr	r2, [sp, #8]
    8e72:	011b      	lsls	r3, r3, #4
    8e74:	4413      	add	r3, r2
    8e76:	3304      	adds	r3, #4
    8e78:	681b      	ldr	r3, [r3, #0]
    8e7a:	2b00      	cmp	r3, #0
    8e7c:	d102      	bne.n	8e84 <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    8e7e:	2300      	movs	r3, #0
    8e80:	9303      	str	r3, [sp, #12]
    8e82:	e001      	b.n	8e88 <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    8e84:	2302      	movs	r3, #2
    8e86:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    8e88:	9b03      	ldr	r3, [sp, #12]
}
    8e8a:	4618      	mov	r0, r3
    8e8c:	b004      	add	sp, #16
    8e8e:	4770      	bx	lr
    8e90:	1fff8f9c 	.word	0x1fff8f9c

00008e94 <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    8e94:	b500      	push	{lr}
    8e96:	b087      	sub	sp, #28
    8e98:	4603      	mov	r3, r0
    8e9a:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8e9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ea2:	4a1d      	ldr	r2, [pc, #116]	; (8f18 <FlexCAN_CompleteRxMessageFifoData+0x84>)
    8ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ea8:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8eaa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8eae:	4a1b      	ldr	r2, [pc, #108]	; (8f1c <FlexCAN_CompleteRxMessageFifoData+0x88>)
    8eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8eb4:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    8eb6:	9b04      	ldr	r3, [sp, #16]
    8eb8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    8ebc:	2b00      	cmp	r3, #0
    8ebe:	d120      	bne.n	8f02 <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    8ec0:	9b04      	ldr	r3, [sp, #16]
    8ec2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8ec6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8eca:	9300      	str	r3, [sp, #0]
    8ecc:	2300      	movs	r3, #0
    8ece:	2205      	movs	r2, #5
    8ed0:	9805      	ldr	r0, [sp, #20]
    8ed2:	f001 ff43 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    8ed6:	9b04      	ldr	r3, [sp, #16]
    8ed8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8edc:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8ee0:	9300      	str	r3, [sp, #0]
    8ee2:	2300      	movs	r3, #0
    8ee4:	2206      	movs	r2, #6
    8ee6:	9805      	ldr	r0, [sp, #20]
    8ee8:	f001 ff38 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    8eec:	9b04      	ldr	r3, [sp, #16]
    8eee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8ef2:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8ef6:	9300      	str	r3, [sp, #0]
    8ef8:	2300      	movs	r3, #0
    8efa:	2207      	movs	r2, #7
    8efc:	9805      	ldr	r0, [sp, #20]
    8efe:	f001 ff2d 	bl	ad5c <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    8f02:	9b04      	ldr	r3, [sp, #16]
    8f04:	2200      	movs	r2, #0
    8f06:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    8f08:	9b04      	ldr	r3, [sp, #16]
    8f0a:	2200      	movs	r2, #0
    8f0c:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    8f0e:	bf00      	nop
    8f10:	b007      	add	sp, #28
    8f12:	f85d fb04 	ldr.w	pc, [sp], #4
    8f16:	bf00      	nop
    8f18:	0000e664 	.word	0x0000e664
    8f1c:	1fff8f9c 	.word	0x1fff8f9c

00008f20 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    8f20:	b500      	push	{lr}
    8f22:	b08b      	sub	sp, #44	; 0x2c
    8f24:	4603      	mov	r3, r0
    8f26:	9102      	str	r1, [sp, #8]
    8f28:	9201      	str	r2, [sp, #4]
    8f2a:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    8f2e:	2300      	movs	r3, #0
    8f30:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    8f32:	2300      	movs	r3, #0
    8f34:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8f36:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f3a:	4a3f      	ldr	r2, [pc, #252]	; (9038 <FlexCAN_IRQHandler+0x118>)
    8f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f40:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8f42:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f46:	4a3d      	ldr	r2, [pc, #244]	; (903c <FlexCAN_IRQHandler+0x11c>)
    8f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f4c:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    8f4e:	9b01      	ldr	r3, [sp, #4]
    8f50:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    8f52:	9b05      	ldr	r3, [sp, #20]
    8f54:	2b00      	cmp	r3, #0
    8f56:	d05c      	beq.n	9012 <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    8f58:	9907      	ldr	r1, [sp, #28]
    8f5a:	9806      	ldr	r0, [sp, #24]
    8f5c:	f7fe fe47 	bl	7bee <FlexCAN_GetMsgBuffIntStatusFlag>
    8f60:	4603      	mov	r3, r0
    8f62:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    8f64:	e008      	b.n	8f78 <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    8f66:	9b07      	ldr	r3, [sp, #28]
    8f68:	3b01      	subs	r3, #1
    8f6a:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    8f6c:	9907      	ldr	r1, [sp, #28]
    8f6e:	9806      	ldr	r0, [sp, #24]
    8f70:	f7fe fe3d 	bl	7bee <FlexCAN_GetMsgBuffIntStatusFlag>
    8f74:	4603      	mov	r3, r0
    8f76:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    8f78:	9b08      	ldr	r3, [sp, #32]
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	d103      	bne.n	8f86 <FlexCAN_IRQHandler+0x66>
    8f7e:	9a07      	ldr	r2, [sp, #28]
    8f80:	9b02      	ldr	r3, [sp, #8]
    8f82:	429a      	cmp	r2, r3
    8f84:	d8ef      	bhi.n	8f66 <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    8f86:	9b08      	ldr	r3, [sp, #32]
    8f88:	2b00      	cmp	r3, #0
    8f8a:	d050      	beq.n	902e <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    8f8c:	9b07      	ldr	r3, [sp, #28]
    8f8e:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    8f90:	9b05      	ldr	r3, [sp, #20]
    8f92:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    8f96:	2b00      	cmp	r3, #0
    8f98:	d00b      	beq.n	8fb2 <FlexCAN_IRQHandler+0x92>
    8f9a:	9b07      	ldr	r3, [sp, #28]
    8f9c:	2b07      	cmp	r3, #7
    8f9e:	d808      	bhi.n	8fb2 <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    8fa0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8fa4:	9907      	ldr	r1, [sp, #28]
    8fa6:	4618      	mov	r0, r3
    8fa8:	f7ff fac2 	bl	8530 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    8fac:	2300      	movs	r3, #0
    8fae:	9309      	str	r3, [sp, #36]	; 0x24
    8fb0:	e00d      	b.n	8fce <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    8fb2:	9a05      	ldr	r2, [sp, #20]
    8fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8fb6:	011b      	lsls	r3, r3, #4
    8fb8:	4413      	add	r3, r2
    8fba:	3304      	adds	r3, #4
    8fbc:	681b      	ldr	r3, [r3, #0]
    8fbe:	2b01      	cmp	r3, #1
    8fc0:	d105      	bne.n	8fce <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    8fc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8fc6:	9907      	ldr	r1, [sp, #28]
    8fc8:	4618      	mov	r0, r3
    8fca:	f7ff f929 	bl	8220 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    8fce:	9a05      	ldr	r2, [sp, #20]
    8fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8fd2:	011b      	lsls	r3, r3, #4
    8fd4:	4413      	add	r3, r2
    8fd6:	3304      	adds	r3, #4
    8fd8:	681b      	ldr	r3, [r3, #0]
    8fda:	2b02      	cmp	r3, #2
    8fdc:	d105      	bne.n	8fea <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    8fde:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8fe2:	9907      	ldr	r1, [sp, #28]
    8fe4:	4618      	mov	r0, r3
    8fe6:	f7ff fa09 	bl	83fc <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    8fea:	9907      	ldr	r1, [sp, #28]
    8fec:	9806      	ldr	r0, [sp, #24]
    8fee:	f7fe fdfe 	bl	7bee <FlexCAN_GetMsgBuffIntStatusFlag>
    8ff2:	4603      	mov	r3, r0
    8ff4:	2b00      	cmp	r3, #0
    8ff6:	d01a      	beq.n	902e <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    8ff8:	9a05      	ldr	r2, [sp, #20]
    8ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8ffc:	011b      	lsls	r3, r3, #4
    8ffe:	4413      	add	r3, r2
    9000:	3304      	adds	r3, #4
    9002:	681b      	ldr	r3, [r3, #0]
    9004:	2b00      	cmp	r3, #0
    9006:	d112      	bne.n	902e <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9008:	9907      	ldr	r1, [sp, #28]
    900a:	9806      	ldr	r0, [sp, #24]
    900c:	f7fe fc3e 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    9010:	e00d      	b.n	902e <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    9012:	9b02      	ldr	r3, [sp, #8]
    9014:	9307      	str	r3, [sp, #28]
    9016:	e006      	b.n	9026 <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9018:	9907      	ldr	r1, [sp, #28]
    901a:	9806      	ldr	r0, [sp, #24]
    901c:	f7fe fc36 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    9020:	9b07      	ldr	r3, [sp, #28]
    9022:	3301      	adds	r3, #1
    9024:	9307      	str	r3, [sp, #28]
    9026:	9a07      	ldr	r2, [sp, #28]
    9028:	9b01      	ldr	r3, [sp, #4]
    902a:	429a      	cmp	r2, r3
    902c:	d9f4      	bls.n	9018 <FlexCAN_IRQHandler+0xf8>
}
    902e:	bf00      	nop
    9030:	b00b      	add	sp, #44	; 0x2c
    9032:	f85d fb04 	ldr.w	pc, [sp], #4
    9036:	bf00      	nop
    9038:	0000e664 	.word	0x0000e664
    903c:	1fff8f9c 	.word	0x1fff8f9c

00009040 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    9040:	b084      	sub	sp, #16
    9042:	4603      	mov	r3, r0
    9044:	9100      	str	r1, [sp, #0]
    9046:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    904a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    904e:	4a05      	ldr	r2, [pc, #20]	; (9064 <FlexCAN_Ip_ClearErrorStatus+0x24>)
    9050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9054:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    9056:	9b03      	ldr	r3, [sp, #12]
    9058:	9a00      	ldr	r2, [sp, #0]
    905a:	621a      	str	r2, [r3, #32]
}
    905c:	bf00      	nop
    905e:	b004      	add	sp, #16
    9060:	4770      	bx	lr
    9062:	bf00      	nop
    9064:	0000e664 	.word	0x0000e664

00009068 <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    9068:	b084      	sub	sp, #16
    906a:	4603      	mov	r3, r0
    906c:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9070:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9074:	4a04      	ldr	r2, [pc, #16]	; (9088 <FlexCAN_Ip_GetErrorStatus+0x20>)
    9076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    907a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    907c:	9b03      	ldr	r3, [sp, #12]
    907e:	6a1b      	ldr	r3, [r3, #32]
}
    9080:	4618      	mov	r0, r3
    9082:	b004      	add	sp, #16
    9084:	4770      	bx	lr
    9086:	bf00      	nop
    9088:	0000e664 	.word	0x0000e664

0000908c <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    908c:	b084      	sub	sp, #16
    908e:	4603      	mov	r3, r0
    9090:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9094:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9098:	4a04      	ldr	r2, [pc, #16]	; (90ac <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    909a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    909e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    90a0:	9b03      	ldr	r3, [sp, #12]
    90a2:	69db      	ldr	r3, [r3, #28]
    90a4:	b2db      	uxtb	r3, r3
}
    90a6:	4618      	mov	r0, r3
    90a8:	b004      	add	sp, #16
    90aa:	4770      	bx	lr
    90ac:	0000e664 	.word	0x0000e664

000090b0 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    90b0:	b084      	sub	sp, #16
    90b2:	4603      	mov	r3, r0
    90b4:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    90b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    90bc:	4a05      	ldr	r2, [pc, #20]	; (90d4 <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    90be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90c2:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    90c4:	9b03      	ldr	r3, [sp, #12]
    90c6:	69db      	ldr	r3, [r3, #28]
    90c8:	0a1b      	lsrs	r3, r3, #8
    90ca:	b2db      	uxtb	r3, r3
}
    90cc:	4618      	mov	r0, r3
    90ce:	b004      	add	sp, #16
    90d0:	4770      	bx	lr
    90d2:	bf00      	nop
    90d4:	0000e664 	.word	0x0000e664

000090d8 <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    90d8:	b510      	push	{r4, lr}
    90da:	b086      	sub	sp, #24
    90dc:	4603      	mov	r3, r0
    90de:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    90e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    90e6:	4a29      	ldr	r2, [pc, #164]	; (918c <FlexCAN_Error_IRQHandler+0xb4>)
    90e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90ec:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    90ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    90f2:	4a27      	ldr	r2, [pc, #156]	; (9190 <FlexCAN_Error_IRQHandler+0xb8>)
    90f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90f8:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    90fa:	2300      	movs	r3, #0
    90fc:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    90fe:	9b03      	ldr	r3, [sp, #12]
    9100:	2b00      	cmp	r3, #0
    9102:	d03d      	beq.n	9180 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    9104:	9b04      	ldr	r3, [sp, #16]
    9106:	6a1b      	ldr	r3, [r3, #32]
    9108:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    910a:	9b05      	ldr	r3, [sp, #20]
    910c:	f003 0302 	and.w	r3, r3, #2
    9110:	2b00      	cmp	r3, #0
    9112:	d019      	beq.n	9148 <FlexCAN_Error_IRQHandler+0x70>
    9114:	9b04      	ldr	r3, [sp, #16]
    9116:	685b      	ldr	r3, [r3, #4]
    9118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    911c:	2b00      	cmp	r3, #0
    911e:	d013      	beq.n	9148 <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    9120:	9b04      	ldr	r3, [sp, #16]
    9122:	2202      	movs	r2, #2
    9124:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    9126:	9b03      	ldr	r3, [sp, #12]
    9128:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    912c:	2b00      	cmp	r3, #0
    912e:	d00b      	beq.n	9148 <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    9130:	9b03      	ldr	r3, [sp, #12]
    9132:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    9136:	f89d 0007 	ldrb.w	r0, [sp, #7]
    913a:	9b03      	ldr	r3, [sp, #12]
    913c:	9a05      	ldr	r2, [sp, #20]
    913e:	2105      	movs	r1, #5
    9140:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    9142:	9b04      	ldr	r3, [sp, #16]
    9144:	6a1b      	ldr	r3, [r3, #32]
    9146:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    9148:	9b05      	ldr	r3, [sp, #20]
    914a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    914e:	2b00      	cmp	r3, #0
    9150:	d019      	beq.n	9186 <FlexCAN_Error_IRQHandler+0xae>
    9152:	9b04      	ldr	r3, [sp, #16]
    9154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9156:	2b00      	cmp	r3, #0
    9158:	da15      	bge.n	9186 <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    915a:	9b04      	ldr	r3, [sp, #16]
    915c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    9160:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    9162:	9b03      	ldr	r3, [sp, #12]
    9164:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    9168:	2b00      	cmp	r3, #0
    916a:	d00c      	beq.n	9186 <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    916c:	9b03      	ldr	r3, [sp, #12]
    916e:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    9172:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9176:	9b03      	ldr	r3, [sp, #12]
    9178:	9a05      	ldr	r2, [sp, #20]
    917a:	2106      	movs	r1, #6
    917c:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    917e:	e002      	b.n	9186 <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    9180:	9b04      	ldr	r3, [sp, #16]
    9182:	4a04      	ldr	r2, [pc, #16]	; (9194 <FlexCAN_Error_IRQHandler+0xbc>)
    9184:	621a      	str	r2, [r3, #32]
}
    9186:	bf00      	nop
    9188:	b006      	add	sp, #24
    918a:	bd10      	pop	{r4, pc}
    918c:	0000e664 	.word	0x0000e664
    9190:	1fff8f9c 	.word	0x1fff8f9c
    9194:	00300002 	.word	0x00300002

00009198 <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    9198:	b510      	push	{r4, lr}
    919a:	b086      	sub	sp, #24
    919c:	4603      	mov	r3, r0
    919e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    91a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91a6:	4a3a      	ldr	r2, [pc, #232]	; (9290 <FlexCAN_BusOff_IRQHandler+0xf8>)
    91a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91ac:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    91ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91b2:	4a38      	ldr	r2, [pc, #224]	; (9294 <FlexCAN_BusOff_IRQHandler+0xfc>)
    91b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91b8:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    91ba:	2300      	movs	r3, #0
    91bc:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    91be:	9b03      	ldr	r3, [sp, #12]
    91c0:	2b00      	cmp	r3, #0
    91c2:	d05f      	beq.n	9284 <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    91c4:	9b04      	ldr	r3, [sp, #16]
    91c6:	6a1b      	ldr	r3, [r3, #32]
    91c8:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    91ca:	9b05      	ldr	r3, [sp, #20]
    91cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    91d0:	2b00      	cmp	r3, #0
    91d2:	d01a      	beq.n	920a <FlexCAN_BusOff_IRQHandler+0x72>
    91d4:	9b04      	ldr	r3, [sp, #16]
    91d6:	685b      	ldr	r3, [r3, #4]
    91d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    91dc:	2b00      	cmp	r3, #0
    91de:	d014      	beq.n	920a <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    91e0:	9b04      	ldr	r3, [sp, #16]
    91e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    91e6:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    91e8:	9b03      	ldr	r3, [sp, #12]
    91ea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    91ee:	2b00      	cmp	r3, #0
    91f0:	d00b      	beq.n	920a <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    91f2:	9b03      	ldr	r3, [sp, #12]
    91f4:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    91f8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    91fc:	9b03      	ldr	r3, [sp, #12]
    91fe:	9a05      	ldr	r2, [sp, #20]
    9200:	2109      	movs	r1, #9
    9202:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    9204:	9b04      	ldr	r3, [sp, #16]
    9206:	6a1b      	ldr	r3, [r3, #32]
    9208:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    920a:	9b05      	ldr	r3, [sp, #20]
    920c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    9210:	2b00      	cmp	r3, #0
    9212:	d01a      	beq.n	924a <FlexCAN_BusOff_IRQHandler+0xb2>
    9214:	9b04      	ldr	r3, [sp, #16]
    9216:	685b      	ldr	r3, [r3, #4]
    9218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    921c:	2b00      	cmp	r3, #0
    921e:	d014      	beq.n	924a <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    9220:	9b04      	ldr	r3, [sp, #16]
    9222:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9226:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    9228:	9b03      	ldr	r3, [sp, #12]
    922a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    922e:	2b00      	cmp	r3, #0
    9230:	d00b      	beq.n	924a <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    9232:	9b03      	ldr	r3, [sp, #12]
    9234:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    9238:	f89d 0007 	ldrb.w	r0, [sp, #7]
    923c:	9b03      	ldr	r3, [sp, #12]
    923e:	9a05      	ldr	r2, [sp, #20]
    9240:	2108      	movs	r1, #8
    9242:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    9244:	9b04      	ldr	r3, [sp, #16]
    9246:	6a1b      	ldr	r3, [r3, #32]
    9248:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    924a:	9b05      	ldr	r3, [sp, #20]
    924c:	f003 0304 	and.w	r3, r3, #4
    9250:	2b00      	cmp	r3, #0
    9252:	d01a      	beq.n	928a <FlexCAN_BusOff_IRQHandler+0xf2>
    9254:	9b04      	ldr	r3, [sp, #16]
    9256:	685b      	ldr	r3, [r3, #4]
    9258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    925c:	2b00      	cmp	r3, #0
    925e:	d014      	beq.n	928a <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    9260:	9b04      	ldr	r3, [sp, #16]
    9262:	2204      	movs	r2, #4
    9264:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    9266:	9b03      	ldr	r3, [sp, #12]
    9268:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    926c:	2b00      	cmp	r3, #0
    926e:	d00c      	beq.n	928a <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    9270:	9b03      	ldr	r3, [sp, #12]
    9272:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    9276:	f89d 0007 	ldrb.w	r0, [sp, #7]
    927a:	9b03      	ldr	r3, [sp, #12]
    927c:	9a05      	ldr	r2, [sp, #20]
    927e:	2107      	movs	r1, #7
    9280:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    9282:	e002      	b.n	928a <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    9284:	9b04      	ldr	r3, [sp, #16]
    9286:	4a04      	ldr	r2, [pc, #16]	; (9298 <FlexCAN_BusOff_IRQHandler+0x100>)
    9288:	621a      	str	r2, [r3, #32]
}
    928a:	bf00      	nop
    928c:	b006      	add	sp, #24
    928e:	bd10      	pop	{r4, pc}
    9290:	0000e664 	.word	0x0000e664
    9294:	1fff8f9c 	.word	0x1fff8f9c
    9298:	000b0004 	.word	0x000b0004

0000929c <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    929c:	b500      	push	{lr}
    929e:	b091      	sub	sp, #68	; 0x44
    92a0:	9204      	str	r2, [sp, #16]
    92a2:	9303      	str	r3, [sp, #12]
    92a4:	4603      	mov	r3, r0
    92a6:	f88d 3017 	strb.w	r3, [sp, #23]
    92aa:	460b      	mov	r3, r1
    92ac:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    92b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    92b4:	4a5f      	ldr	r2, [pc, #380]	; (9434 <FlexCAN_Ip_SendBlocking+0x198>)
    92b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92ba:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    92bc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    92c0:	4a5d      	ldr	r2, [pc, #372]	; (9438 <FlexCAN_Ip_SendBlocking+0x19c>)
    92c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    92c6:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    92c8:	2300      	movs	r3, #0
    92ca:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    92cc:	2300      	movs	r3, #0
    92ce:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    92d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    92d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    92d6:	fb02 f303 	mul.w	r3, r2, r3
    92da:	2100      	movs	r1, #0
    92dc:	4618      	mov	r0, r3
    92de:	f7f7 ff7f 	bl	11e0 <OsIf_MicrosToTicks>
    92e2:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    92e4:	2300      	movs	r3, #0
    92e6:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    92e8:	2300      	movs	r3, #0
    92ea:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    92ec:	2300      	movs	r3, #0
    92ee:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    92f0:	f89d 1016 	ldrb.w	r1, [sp, #22]
    92f4:	f89d 0017 	ldrb.w	r0, [sp, #23]
    92f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    92fa:	9300      	str	r3, [sp, #0]
    92fc:	9b03      	ldr	r3, [sp, #12]
    92fe:	9a04      	ldr	r2, [sp, #16]
    9300:	f7fe feaa 	bl	8058 <FlexCAN_StartSendData>
    9304:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    9306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9308:	2b00      	cmp	r3, #0
    930a:	f040 808d 	bne.w	9428 <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    930e:	2000      	movs	r0, #0
    9310:	f7f7 ff1a 	bl	1148 <OsIf_GetCounter>
    9314:	4603      	mov	r3, r0
    9316:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    9318:	e00f      	b.n	933a <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    931a:	ab07      	add	r3, sp, #28
    931c:	2100      	movs	r1, #0
    931e:	4618      	mov	r0, r3
    9320:	f7f7 ff2b 	bl	117a <OsIf_GetElapsed>
    9324:	4602      	mov	r2, r0
    9326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9328:	4413      	add	r3, r2
    932a:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    932c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    932e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9330:	429a      	cmp	r2, r3
    9332:	d302      	bcc.n	933a <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    9334:	2303      	movs	r3, #3
    9336:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    9338:	e008      	b.n	934c <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    933a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    933e:	4619      	mov	r1, r3
    9340:	980d      	ldr	r0, [sp, #52]	; 0x34
    9342:	f7fe fab6 	bl	78b2 <FlexCAN_GetBuffStatusFlag>
    9346:	4603      	mov	r3, r0
    9348:	2b01      	cmp	r3, #1
    934a:	d1e6      	bne.n	931a <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    934c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    934e:	2b03      	cmp	r3, #3
    9350:	d15c      	bne.n	940c <FlexCAN_Ip_SendBlocking+0x170>
    9352:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9356:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9358:	011b      	lsls	r3, r3, #4
    935a:	4413      	add	r3, r2
    935c:	3304      	adds	r3, #4
    935e:	681b      	ldr	r3, [r3, #0]
    9360:	2b00      	cmp	r3, #0
    9362:	d053      	beq.n	940c <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9364:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9368:	4619      	mov	r1, r3
    936a:	980d      	ldr	r0, [sp, #52]	; 0x34
    936c:	f7fe fa8e 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    9370:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9374:	4619      	mov	r1, r3
    9376:	980d      	ldr	r0, [sp, #52]	; 0x34
    9378:	f001 f968 	bl	a64c <FlexCAN_GetMsgBuffRegion>
    937c:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    937e:	9b08      	ldr	r3, [sp, #32]
    9380:	681b      	ldr	r3, [r3, #0]
    9382:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    9384:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9386:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    938a:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    938c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    938e:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    9392:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    9394:	9b08      	ldr	r3, [sp, #32]
    9396:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9398:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    939a:	2100      	movs	r1, #0
    939c:	4827      	ldr	r0, [pc, #156]	; (943c <FlexCAN_Ip_SendBlocking+0x1a0>)
    939e:	f7f7 ff1f 	bl	11e0 <OsIf_MicrosToTicks>
    93a2:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    93a4:	2000      	movs	r0, #0
    93a6:	f7f7 fecf 	bl	1148 <OsIf_GetCounter>
    93aa:	4603      	mov	r3, r0
    93ac:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    93ae:	2300      	movs	r3, #0
    93b0:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    93b2:	e00f      	b.n	93d4 <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    93b4:	ab07      	add	r3, sp, #28
    93b6:	2100      	movs	r1, #0
    93b8:	4618      	mov	r0, r3
    93ba:	f7f7 fede 	bl	117a <OsIf_GetElapsed>
    93be:	4602      	mov	r2, r0
    93c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93c2:	4413      	add	r3, r2
    93c4:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    93c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    93c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    93ca:	429a      	cmp	r2, r3
    93cc:	d302      	bcc.n	93d4 <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    93ce:	2303      	movs	r3, #3
    93d0:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    93d2:	e008      	b.n	93e6 <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    93d4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    93d8:	4619      	mov	r1, r3
    93da:	980d      	ldr	r0, [sp, #52]	; 0x34
    93dc:	f7fe fa69 	bl	78b2 <FlexCAN_GetBuffStatusFlag>
    93e0:	4603      	mov	r3, r0
    93e2:	2b00      	cmp	r3, #0
    93e4:	d0e6      	beq.n	93b4 <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    93e6:	9b08      	ldr	r3, [sp, #32]
    93e8:	681b      	ldr	r3, [r3, #0]
    93ea:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    93ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    93ee:	0e1b      	lsrs	r3, r3, #24
    93f0:	f003 030f 	and.w	r3, r3, #15
    93f4:	2b08      	cmp	r3, #8
    93f6:	d101      	bne.n	93fc <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    93f8:	2300      	movs	r3, #0
    93fa:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    93fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    93fe:	0e1b      	lsrs	r3, r3, #24
    9400:	f003 030f 	and.w	r3, r3, #15
    9404:	2b09      	cmp	r3, #9
    9406:	d101      	bne.n	940c <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    9408:	2303      	movs	r3, #3
    940a:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    940c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9410:	4619      	mov	r1, r3
    9412:	980d      	ldr	r0, [sp, #52]	; 0x34
    9414:	f7fe fa3a 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9418:	f89d 3016 	ldrb.w	r3, [sp, #22]
    941c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    941e:	011b      	lsls	r3, r3, #4
    9420:	4413      	add	r3, r2
    9422:	3304      	adds	r3, #4
    9424:	2200      	movs	r2, #0
    9426:	601a      	str	r2, [r3, #0]
    }
    return result;
    9428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    942a:	4618      	mov	r0, r3
    942c:	b011      	add	sp, #68	; 0x44
    942e:	f85d fb04 	ldr.w	pc, [sp], #4
    9432:	bf00      	nop
    9434:	0000e664 	.word	0x0000e664
    9438:	1fff8f9c 	.word	0x1fff8f9c
    943c:	000f4240 	.word	0x000f4240

00009440 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    9440:	b500      	push	{lr}
    9442:	b087      	sub	sp, #28
    9444:	4603      	mov	r3, r0
    9446:	9100      	str	r1, [sp, #0]
    9448:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    944c:	2300      	movs	r3, #0
    944e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9450:	2300      	movs	r3, #0
    9452:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9454:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9458:	4a1c      	ldr	r2, [pc, #112]	; (94cc <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    945a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    945e:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9460:	9803      	ldr	r0, [sp, #12]
    9462:	f7fe f9b9 	bl	77d8 <FlexCAN_IsEnabled>
    9466:	4603      	mov	r3, r0
    9468:	2b00      	cmp	r3, #0
    946a:	bf14      	ite	ne
    946c:	2301      	movne	r3, #1
    946e:	2300      	moveq	r3, #0
    9470:	b2db      	uxtb	r3, r3
    9472:	f083 0301 	eor.w	r3, r3, #1
    9476:	b2db      	uxtb	r3, r3
    9478:	f88d 300b 	strb.w	r3, [sp, #11]
    947c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9480:	f003 0301 	and.w	r3, r3, #1
    9484:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    9488:	f89d 300b 	ldrb.w	r3, [sp, #11]
    948c:	2b00      	cmp	r3, #0
    948e:	d003      	beq.n	9498 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    9490:	9803      	ldr	r0, [sp, #12]
    9492:	f001 f9c3 	bl	a81c <FlexCAN_Enable>
    9496:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    9498:	9b05      	ldr	r3, [sp, #20]
    949a:	2b00      	cmp	r3, #0
    949c:	d103      	bne.n	94a6 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    949e:	9900      	ldr	r1, [sp, #0]
    94a0:	9803      	ldr	r0, [sp, #12]
    94a2:	f7fe fbc3 	bl	7c2c <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    94a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    94aa:	2b00      	cmp	r3, #0
    94ac:	d008      	beq.n	94c0 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    94ae:	9803      	ldr	r0, [sp, #12]
    94b0:	f001 fa32 	bl	a918 <FlexCAN_Disable>
    94b4:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    94b6:	9b04      	ldr	r3, [sp, #16]
    94b8:	2b00      	cmp	r3, #0
    94ba:	d001      	beq.n	94c0 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    94bc:	9b04      	ldr	r3, [sp, #16]
    94be:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    94c0:	9b05      	ldr	r3, [sp, #20]
}
    94c2:	4618      	mov	r0, r3
    94c4:	b007      	add	sp, #28
    94c6:	f85d fb04 	ldr.w	pc, [sp], #4
    94ca:	bf00      	nop
    94cc:	0000e664 	.word	0x0000e664

000094d0 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    94d0:	b500      	push	{lr}
    94d2:	b085      	sub	sp, #20
    94d4:	4603      	mov	r3, r0
    94d6:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    94da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    94de:	4a06      	ldr	r2, [pc, #24]	; (94f8 <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    94e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    94e4:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    94e6:	9803      	ldr	r0, [sp, #12]
    94e8:	f001 f94c 	bl	a784 <FlexCAN_EnterFreezeMode>
    94ec:	4603      	mov	r3, r0
}
    94ee:	4618      	mov	r0, r3
    94f0:	b005      	add	sp, #20
    94f2:	f85d fb04 	ldr.w	pc, [sp], #4
    94f6:	bf00      	nop
    94f8:	0000e664 	.word	0x0000e664

000094fc <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    94fc:	b500      	push	{lr}
    94fe:	b085      	sub	sp, #20
    9500:	4603      	mov	r3, r0
    9502:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9506:	f89d 3007 	ldrb.w	r3, [sp, #7]
    950a:	4a06      	ldr	r2, [pc, #24]	; (9524 <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    950c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9510:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    9512:	9803      	ldr	r0, [sp, #12]
    9514:	f001 f9be 	bl	a894 <FlexCAN_ExitFreezeMode>
    9518:	4603      	mov	r3, r0
}
    951a:	4618      	mov	r0, r3
    951c:	b005      	add	sp, #20
    951e:	f85d fb04 	ldr.w	pc, [sp], #4
    9522:	bf00      	nop
    9524:	0000e664 	.word	0x0000e664

00009528 <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    9528:	b500      	push	{lr}
    952a:	b087      	sub	sp, #28
    952c:	4603      	mov	r3, r0
    952e:	9200      	str	r2, [sp, #0]
    9530:	f88d 3007 	strb.w	r3, [sp, #7]
    9534:	460b      	mov	r3, r1
    9536:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    953a:	2300      	movs	r3, #0
    953c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    953e:	2300      	movs	r3, #0
    9540:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9542:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9546:	4a1e      	ldr	r2, [pc, #120]	; (95c0 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    9548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    954c:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    954e:	9803      	ldr	r0, [sp, #12]
    9550:	f7fe f942 	bl	77d8 <FlexCAN_IsEnabled>
    9554:	4603      	mov	r3, r0
    9556:	2b00      	cmp	r3, #0
    9558:	bf14      	ite	ne
    955a:	2301      	movne	r3, #1
    955c:	2300      	moveq	r3, #0
    955e:	b2db      	uxtb	r3, r3
    9560:	f083 0301 	eor.w	r3, r3, #1
    9564:	b2db      	uxtb	r3, r3
    9566:	f88d 300b 	strb.w	r3, [sp, #11]
    956a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    956e:	f003 0301 	and.w	r3, r3, #1
    9572:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    9576:	f89d 300b 	ldrb.w	r3, [sp, #11]
    957a:	2b00      	cmp	r3, #0
    957c:	d003      	beq.n	9586 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    957e:	9803      	ldr	r0, [sp, #12]
    9580:	f001 f94c 	bl	a81c <FlexCAN_Enable>
    9584:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    9586:	9b05      	ldr	r3, [sp, #20]
    9588:	2b00      	cmp	r3, #0
    958a:	d106      	bne.n	959a <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    958c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9590:	9a00      	ldr	r2, [sp, #0]
    9592:	4619      	mov	r1, r3
    9594:	9803      	ldr	r0, [sp, #12]
    9596:	f7fe fb52 	bl	7c3e <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    959a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    959e:	2b00      	cmp	r3, #0
    95a0:	d008      	beq.n	95b4 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    95a2:	9803      	ldr	r0, [sp, #12]
    95a4:	f001 f9b8 	bl	a918 <FlexCAN_Disable>
    95a8:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    95aa:	9b04      	ldr	r3, [sp, #16]
    95ac:	2b00      	cmp	r3, #0
    95ae:	d001      	beq.n	95b4 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    95b0:	9b04      	ldr	r3, [sp, #16]
    95b2:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    95b4:	9b05      	ldr	r3, [sp, #20]
}
    95b6:	4618      	mov	r0, r3
    95b8:	b007      	add	sp, #28
    95ba:	f85d fb04 	ldr.w	pc, [sp], #4
    95be:	bf00      	nop
    95c0:	0000e664 	.word	0x0000e664

000095c4 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    95c4:	b500      	push	{lr}
    95c6:	b087      	sub	sp, #28
    95c8:	4603      	mov	r3, r0
    95ca:	9100      	str	r1, [sp, #0]
    95cc:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    95d0:	2300      	movs	r3, #0
    95d2:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    95d4:	2300      	movs	r3, #0
    95d6:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    95d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    95dc:	4a1c      	ldr	r2, [pc, #112]	; (9650 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    95de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95e2:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    95e4:	9803      	ldr	r0, [sp, #12]
    95e6:	f7fe f8f7 	bl	77d8 <FlexCAN_IsEnabled>
    95ea:	4603      	mov	r3, r0
    95ec:	2b00      	cmp	r3, #0
    95ee:	bf14      	ite	ne
    95f0:	2301      	movne	r3, #1
    95f2:	2300      	moveq	r3, #0
    95f4:	b2db      	uxtb	r3, r3
    95f6:	f083 0301 	eor.w	r3, r3, #1
    95fa:	b2db      	uxtb	r3, r3
    95fc:	f88d 300b 	strb.w	r3, [sp, #11]
    9600:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9604:	f003 0301 	and.w	r3, r3, #1
    9608:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    960c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9610:	2b00      	cmp	r3, #0
    9612:	d003      	beq.n	961c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    9614:	9803      	ldr	r0, [sp, #12]
    9616:	f001 f901 	bl	a81c <FlexCAN_Enable>
    961a:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    961c:	9b05      	ldr	r3, [sp, #20]
    961e:	2b00      	cmp	r3, #0
    9620:	d103      	bne.n	962a <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    9622:	9900      	ldr	r1, [sp, #0]
    9624:	9803      	ldr	r0, [sp, #12]
    9626:	f7fe f8a7 	bl	7778 <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    962a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    962e:	2b00      	cmp	r3, #0
    9630:	d008      	beq.n	9644 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    9632:	9803      	ldr	r0, [sp, #12]
    9634:	f001 f970 	bl	a918 <FlexCAN_Disable>
    9638:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    963a:	9b04      	ldr	r3, [sp, #16]
    963c:	2b00      	cmp	r3, #0
    963e:	d001      	beq.n	9644 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    9640:	9b04      	ldr	r3, [sp, #16]
    9642:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9644:	9b05      	ldr	r3, [sp, #20]
}
    9646:	4618      	mov	r0, r3
    9648:	b007      	add	sp, #28
    964a:	f85d fb04 	ldr.w	pc, [sp], #4
    964e:	bf00      	nop
    9650:	0000e664 	.word	0x0000e664

00009654 <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    9654:	b500      	push	{lr}
    9656:	b085      	sub	sp, #20
    9658:	4603      	mov	r3, r0
    965a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    965e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9662:	4a0e      	ldr	r2, [pc, #56]	; (969c <FlexCAN_Ip_Deinit_Privileged+0x48>)
    9664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9668:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    966a:	9803      	ldr	r0, [sp, #12]
    966c:	f001 f88a 	bl	a784 <FlexCAN_EnterFreezeMode>
    9670:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    9672:	9b02      	ldr	r3, [sp, #8]
    9674:	2b00      	cmp	r3, #0
    9676:	d10b      	bne.n	9690 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    9678:	9803      	ldr	r0, [sp, #12]
    967a:	f7fe fb18 	bl	7cae <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    967e:	9803      	ldr	r0, [sp, #12]
    9680:	f001 f94a 	bl	a918 <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    9684:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9688:	4a05      	ldr	r2, [pc, #20]	; (96a0 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    968a:	2100      	movs	r1, #0
    968c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    9690:	9b02      	ldr	r3, [sp, #8]
}
    9692:	4618      	mov	r0, r3
    9694:	b005      	add	sp, #20
    9696:	f85d fb04 	ldr.w	pc, [sp], #4
    969a:	bf00      	nop
    969c:	0000e664 	.word	0x0000e664
    96a0:	1fff8f9c 	.word	0x1fff8f9c

000096a4 <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    96a4:	b500      	push	{lr}
    96a6:	b085      	sub	sp, #20
    96a8:	4603      	mov	r3, r0
    96aa:	460a      	mov	r2, r1
    96ac:	f88d 3007 	strb.w	r3, [sp, #7]
    96b0:	4613      	mov	r3, r2
    96b2:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    96b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    96ba:	4a22      	ldr	r2, [pc, #136]	; (9744 <FlexCAN_Ip_MainFunctionRead+0xa0>)
    96bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96c0:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    96c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    96c6:	4a20      	ldr	r2, [pc, #128]	; (9748 <FlexCAN_Ip_MainFunctionRead+0xa4>)
    96c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    96cc:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    96ce:	9b02      	ldr	r3, [sp, #8]
    96d0:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    96d4:	2b00      	cmp	r3, #0
    96d6:	d015      	beq.n	9704 <FlexCAN_Ip_MainFunctionRead+0x60>
    96d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    96dc:	2b07      	cmp	r3, #7
    96de:	d811      	bhi.n	9704 <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    96e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    96e4:	2b00      	cmp	r3, #0
    96e6:	d128      	bne.n	973a <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    96e8:	2105      	movs	r1, #5
    96ea:	9803      	ldr	r0, [sp, #12]
    96ec:	f7fe f8e1 	bl	78b2 <FlexCAN_GetBuffStatusFlag>
    96f0:	4603      	mov	r3, r0
    96f2:	2b00      	cmp	r3, #0
    96f4:	d021      	beq.n	973a <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    96f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    96fa:	2105      	movs	r1, #5
    96fc:	4618      	mov	r0, r3
    96fe:	f7fe ff17 	bl	8530 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    9702:	e01a      	b.n	973a <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    9704:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9708:	4619      	mov	r1, r3
    970a:	9803      	ldr	r0, [sp, #12]
    970c:	f7fe f8d1 	bl	78b2 <FlexCAN_GetBuffStatusFlag>
    9710:	4603      	mov	r3, r0
    9712:	2b00      	cmp	r3, #0
    9714:	d012      	beq.n	973c <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    9716:	f89d 3006 	ldrb.w	r3, [sp, #6]
    971a:	9a02      	ldr	r2, [sp, #8]
    971c:	011b      	lsls	r3, r3, #4
    971e:	4413      	add	r3, r2
    9720:	3304      	adds	r3, #4
    9722:	681b      	ldr	r3, [r3, #0]
    9724:	2b01      	cmp	r3, #1
    9726:	d109      	bne.n	973c <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    9728:	f89d 2006 	ldrb.w	r2, [sp, #6]
    972c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9730:	4611      	mov	r1, r2
    9732:	4618      	mov	r0, r3
    9734:	f7fe fd74 	bl	8220 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    9738:	e000      	b.n	973c <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    973a:	bf00      	nop
}
    973c:	bf00      	nop
    973e:	b005      	add	sp, #20
    9740:	f85d fb04 	ldr.w	pc, [sp], #4
    9744:	0000e664 	.word	0x0000e664
    9748:	1fff8f9c 	.word	0x1fff8f9c

0000974c <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    974c:	b510      	push	{r4, lr}
    974e:	b086      	sub	sp, #24
    9750:	4603      	mov	r3, r0
    9752:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    9756:	2301      	movs	r3, #1
    9758:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    975a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    975e:	4a15      	ldr	r2, [pc, #84]	; (97b4 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    9760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9764:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9766:	f89d 3007 	ldrb.w	r3, [sp, #7]
    976a:	4a13      	ldr	r2, [pc, #76]	; (97b8 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    976c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9770:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    9772:	2300      	movs	r3, #0
    9774:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    9776:	9b04      	ldr	r3, [sp, #16]
    9778:	6a1b      	ldr	r3, [r3, #32]
    977a:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    977c:	9b02      	ldr	r3, [sp, #8]
    977e:	f003 0304 	and.w	r3, r3, #4
    9782:	2b00      	cmp	r3, #0
    9784:	d012      	beq.n	97ac <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    9786:	9b03      	ldr	r3, [sp, #12]
    9788:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    978c:	2b00      	cmp	r3, #0
    978e:	d008      	beq.n	97a2 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    9790:	9b03      	ldr	r3, [sp, #12]
    9792:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    9796:	f89d 0007 	ldrb.w	r0, [sp, #7]
    979a:	9b03      	ldr	r3, [sp, #12]
    979c:	9a02      	ldr	r2, [sp, #8]
    979e:	2107      	movs	r1, #7
    97a0:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    97a2:	9b04      	ldr	r3, [sp, #16]
    97a4:	2204      	movs	r2, #4
    97a6:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    97a8:	2300      	movs	r3, #0
    97aa:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    97ac:	9b05      	ldr	r3, [sp, #20]
}
    97ae:	4618      	mov	r0, r3
    97b0:	b006      	add	sp, #24
    97b2:	bd10      	pop	{r4, pc}
    97b4:	0000e664 	.word	0x0000e664
    97b8:	1fff8f9c 	.word	0x1fff8f9c

000097bc <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    97bc:	b510      	push	{r4, lr}
    97be:	b098      	sub	sp, #96	; 0x60
    97c0:	4603      	mov	r3, r0
    97c2:	460a      	mov	r2, r1
    97c4:	f88d 3007 	strb.w	r3, [sp, #7]
    97c8:	4613      	mov	r3, r2
    97ca:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    97ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    97d2:	4a3f      	ldr	r2, [pc, #252]	; (98d0 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    97d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97d8:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    97da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    97de:	4a3d      	ldr	r2, [pc, #244]	; (98d4 <FlexCAN_Ip_MainFunctionWrite+0x118>)
    97e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97e4:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    97e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97ea:	4619      	mov	r1, r3
    97ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
    97ee:	f7fe f860 	bl	78b2 <FlexCAN_GetBuffStatusFlag>
    97f2:	4603      	mov	r3, r0
    97f4:	2b00      	cmp	r3, #0
    97f6:	d068      	beq.n	98ca <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    97f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    97fe:	011b      	lsls	r3, r3, #4
    9800:	4413      	add	r3, r2
    9802:	3304      	adds	r3, #4
    9804:	681b      	ldr	r3, [r3, #0]
    9806:	2b02      	cmp	r3, #2
    9808:	d15f      	bne.n	98ca <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    980a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    980e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9810:	011b      	lsls	r3, r3, #4
    9812:	4413      	add	r3, r2
    9814:	3309      	adds	r3, #9
    9816:	781b      	ldrb	r3, [r3, #0]
    9818:	2b00      	cmp	r3, #0
    981a:	d028      	beq.n	986e <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    981c:	2300      	movs	r3, #0
    981e:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    9820:	2300      	movs	r3, #0
    9822:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    9824:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9828:	4619      	mov	r1, r3
    982a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    982c:	f001 fa87 	bl	ad3e <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    9830:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9834:	aa02      	add	r2, sp, #8
    9836:	4619      	mov	r1, r3
    9838:	9817      	ldr	r0, [sp, #92]	; 0x5c
    983a:	f001 fbaf 	bl	af9c <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    983e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9840:	f7fe f81d 	bl	787e <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    9844:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9848:	9a15      	ldr	r2, [sp, #84]	; 0x54
    984a:	9916      	ldr	r1, [sp, #88]	; 0x58
    984c:	011b      	lsls	r3, r3, #4
    984e:	440b      	add	r3, r1
    9850:	330c      	adds	r3, #12
    9852:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    9854:	9b02      	ldr	r3, [sp, #8]
    9856:	0e1b      	lsrs	r3, r3, #24
    9858:	f003 030f 	and.w	r3, r3, #15
    985c:	2b04      	cmp	r3, #4
    985e:	d11d      	bne.n	989c <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9860:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9864:	4619      	mov	r1, r3
    9866:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9868:	f7fe f810 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
    986c:	e016      	b.n	989c <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    986e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9872:	f89d 4006 	ldrb.w	r4, [sp, #6]
    9876:	4619      	mov	r1, r3
    9878:	9817      	ldr	r0, [sp, #92]	; 0x5c
    987a:	f001 fb7b 	bl	af74 <FlexCAN_GetMsgBuffTimestamp>
    987e:	4601      	mov	r1, r0
    9880:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9882:	0123      	lsls	r3, r4, #4
    9884:	4413      	add	r3, r2
    9886:	330c      	adds	r3, #12
    9888:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    988a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    988c:	f7fd fff7 	bl	787e <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9890:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9894:	4619      	mov	r1, r3
    9896:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9898:	f7fd fff8 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    989c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    98a0:	9a16      	ldr	r2, [sp, #88]	; 0x58
    98a2:	011b      	lsls	r3, r3, #4
    98a4:	4413      	add	r3, r2
    98a6:	3304      	adds	r3, #4
    98a8:	2200      	movs	r2, #0
    98aa:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    98ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
    98ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    98b2:	2b00      	cmp	r3, #0
    98b4:	d009      	beq.n	98ca <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    98b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    98b8:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    98bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
    98c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    98c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    98c6:	2104      	movs	r1, #4
    98c8:	47a0      	blx	r4
            }
        }
    }
}
    98ca:	bf00      	nop
    98cc:	b018      	add	sp, #96	; 0x60
    98ce:	bd10      	pop	{r4, pc}
    98d0:	0000e664 	.word	0x0000e664
    98d4:	1fff8f9c 	.word	0x1fff8f9c

000098d8 <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    98d8:	b084      	sub	sp, #16
    98da:	4603      	mov	r3, r0
    98dc:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    98e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    98e4:	4a08      	ldr	r2, [pc, #32]	; (9908 <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    98e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    98ea:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    98ec:	9b03      	ldr	r3, [sp, #12]
    98ee:	681b      	ldr	r3, [r3, #0]
    98f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    98f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    98f8:	bf0c      	ite	eq
    98fa:	2301      	moveq	r3, #1
    98fc:	2300      	movne	r3, #0
    98fe:	b2db      	uxtb	r3, r3
}
    9900:	4618      	mov	r0, r3
    9902:	b004      	add	sp, #16
    9904:	4770      	bx	lr
    9906:	bf00      	nop
    9908:	0000e664 	.word	0x0000e664

0000990c <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    990c:	b084      	sub	sp, #16
    990e:	4603      	mov	r3, r0
    9910:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9914:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9918:	4a07      	ldr	r2, [pc, #28]	; (9938 <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    991a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    991e:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    9920:	9b03      	ldr	r3, [sp, #12]
    9922:	681b      	ldr	r3, [r3, #0]
    9924:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    9928:	2b00      	cmp	r3, #0
    992a:	bf0c      	ite	eq
    992c:	2301      	moveq	r3, #1
    992e:	2300      	movne	r3, #0
    9930:	b2db      	uxtb	r3, r3
}
    9932:	4618      	mov	r0, r3
    9934:	b004      	add	sp, #16
    9936:	4770      	bx	lr
    9938:	0000e664 	.word	0x0000e664

0000993c <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    993c:	b500      	push	{lr}
    993e:	b085      	sub	sp, #20
    9940:	4603      	mov	r3, r0
    9942:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9946:	f89d 3007 	ldrb.w	r3, [sp, #7]
    994a:	4a0b      	ldr	r2, [pc, #44]	; (9978 <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    994c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9950:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    9952:	f002 fb93 	bl	c07c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    9956:	9b03      	ldr	r3, [sp, #12]
    9958:	681b      	ldr	r3, [r3, #0]
    995a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    995e:	9b03      	ldr	r3, [sp, #12]
    9960:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    9962:	f002 fbb7 	bl	c0d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    9966:	9803      	ldr	r0, [sp, #12]
    9968:	f000 ff94 	bl	a894 <FlexCAN_ExitFreezeMode>
    996c:	4603      	mov	r3, r0
}
    996e:	4618      	mov	r0, r3
    9970:	b005      	add	sp, #20
    9972:	f85d fb04 	ldr.w	pc, [sp], #4
    9976:	bf00      	nop
    9978:	0000e664 	.word	0x0000e664

0000997c <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    997c:	b500      	push	{lr}
    997e:	b085      	sub	sp, #20
    9980:	4603      	mov	r3, r0
    9982:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9986:	f89d 3007 	ldrb.w	r3, [sp, #7]
    998a:	4a0a      	ldr	r2, [pc, #40]	; (99b4 <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    998c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9990:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    9992:	9802      	ldr	r0, [sp, #8]
    9994:	f000 fef6 	bl	a784 <FlexCAN_EnterFreezeMode>
    9998:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    999a:	9b03      	ldr	r3, [sp, #12]
    999c:	2b00      	cmp	r3, #0
    999e:	d103      	bne.n	99a8 <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    99a0:	9802      	ldr	r0, [sp, #8]
    99a2:	f000 ffb9 	bl	a918 <FlexCAN_Disable>
    99a6:	9003      	str	r0, [sp, #12]
    }
    return status;
    99a8:	9b03      	ldr	r3, [sp, #12]
}
    99aa:	4618      	mov	r0, r3
    99ac:	b005      	add	sp, #20
    99ae:	f85d fb04 	ldr.w	pc, [sp], #4
    99b2:	bf00      	nop
    99b4:	0000e664 	.word	0x0000e664

000099b8 <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    99b8:	b500      	push	{lr}
    99ba:	b087      	sub	sp, #28
    99bc:	4603      	mov	r3, r0
    99be:	9100      	str	r1, [sp, #0]
    99c0:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    99c4:	2300      	movs	r3, #0
    99c6:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    99c8:	2300      	movs	r3, #0
    99ca:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    99cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99d0:	4a1e      	ldr	r2, [pc, #120]	; (9a4c <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    99d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99d6:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    99d8:	9803      	ldr	r0, [sp, #12]
    99da:	f7fd fefd 	bl	77d8 <FlexCAN_IsEnabled>
    99de:	4603      	mov	r3, r0
    99e0:	2b00      	cmp	r3, #0
    99e2:	bf14      	ite	ne
    99e4:	2301      	movne	r3, #1
    99e6:	2300      	moveq	r3, #0
    99e8:	b2db      	uxtb	r3, r3
    99ea:	f083 0301 	eor.w	r3, r3, #1
    99ee:	b2db      	uxtb	r3, r3
    99f0:	f88d 300b 	strb.w	r3, [sp, #11]
    99f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    99f8:	f003 0301 	and.w	r3, r3, #1
    99fc:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    9a00:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a04:	2b00      	cmp	r3, #0
    9a06:	d003      	beq.n	9a10 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    9a08:	9803      	ldr	r0, [sp, #12]
    9a0a:	f000 ff07 	bl	a81c <FlexCAN_Enable>
    9a0e:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    9a10:	9b05      	ldr	r3, [sp, #20]
    9a12:	2b00      	cmp	r3, #0
    9a14:	d107      	bne.n	9a26 <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    9a16:	f002 fb83 	bl	c120 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    9a1a:	9900      	ldr	r1, [sp, #0]
    9a1c:	9803      	ldr	r0, [sp, #12]
    9a1e:	f7fe f930 	bl	7c82 <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    9a22:	f002 fba9 	bl	c178 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    9a26:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a2a:	2b00      	cmp	r3, #0
    9a2c:	d008      	beq.n	9a40 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    9a2e:	9803      	ldr	r0, [sp, #12]
    9a30:	f000 ff72 	bl	a918 <FlexCAN_Disable>
    9a34:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9a36:	9b04      	ldr	r3, [sp, #16]
    9a38:	2b00      	cmp	r3, #0
    9a3a:	d001      	beq.n	9a40 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    9a3c:	9b04      	ldr	r3, [sp, #16]
    9a3e:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9a40:	9b05      	ldr	r3, [sp, #20]
}
    9a42:	4618      	mov	r0, r3
    9a44:	b007      	add	sp, #28
    9a46:	f85d fb04 	ldr.w	pc, [sp], #4
    9a4a:	bf00      	nop
    9a4c:	0000e664 	.word	0x0000e664

00009a50 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    9a50:	b500      	push	{lr}
    9a52:	b087      	sub	sp, #28
    9a54:	4603      	mov	r3, r0
    9a56:	9100      	str	r1, [sp, #0]
    9a58:	f88d 3007 	strb.w	r3, [sp, #7]
    9a5c:	4613      	mov	r3, r2
    9a5e:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9a62:	2300      	movs	r3, #0
    9a64:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9a66:	2300      	movs	r3, #0
    9a68:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9a6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a6e:	4a1c      	ldr	r2, [pc, #112]	; (9ae0 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    9a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a74:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    9a76:	9b03      	ldr	r3, [sp, #12]
    9a78:	681b      	ldr	r3, [r3, #0]
    9a7a:	0fdb      	lsrs	r3, r3, #31
    9a7c:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    9a80:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9a84:	2b00      	cmp	r3, #0
    9a86:	d003      	beq.n	9a90 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    9a88:	9803      	ldr	r0, [sp, #12]
    9a8a:	f000 fec7 	bl	a81c <FlexCAN_Enable>
    9a8e:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    9a90:	9b05      	ldr	r3, [sp, #20]
    9a92:	2b00      	cmp	r3, #0
    9a94:	d112      	bne.n	9abc <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    9a96:	f002 fd2f 	bl	c4f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    9a9a:	9803      	ldr	r0, [sp, #12]
    9a9c:	f7fe f830 	bl	7b00 <FlexCAN_IsExCbtEnabled>
    9aa0:	4603      	mov	r3, r0
    9aa2:	2b00      	cmp	r3, #0
    9aa4:	d004      	beq.n	9ab0 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    9aa6:	9900      	ldr	r1, [sp, #0]
    9aa8:	9803      	ldr	r0, [sp, #12]
    9aaa:	f7fd ff7f 	bl	79ac <FlexCAN_SetExtendedTimeSegments>
    9aae:	e003      	b.n	9ab8 <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    9ab0:	9900      	ldr	r1, [sp, #0]
    9ab2:	9803      	ldr	r0, [sp, #12]
    9ab4:	f7fd ff4e 	bl	7954 <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    9ab8:	f002 fd4a 	bl	c550 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    9abc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9ac0:	2b00      	cmp	r3, #0
    9ac2:	d008      	beq.n	9ad6 <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    9ac4:	9803      	ldr	r0, [sp, #12]
    9ac6:	f000 ff27 	bl	a918 <FlexCAN_Disable>
    9aca:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9acc:	9b04      	ldr	r3, [sp, #16]
    9ace:	2b00      	cmp	r3, #0
    9ad0:	d001      	beq.n	9ad6 <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    9ad2:	9b04      	ldr	r3, [sp, #16]
    9ad4:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9ad6:	9b05      	ldr	r3, [sp, #20]
}
    9ad8:	4618      	mov	r0, r3
    9ada:	b007      	add	sp, #28
    9adc:	f85d fb04 	ldr.w	pc, [sp], #4
    9ae0:	0000e664 	.word	0x0000e664

00009ae4 <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    9ae4:	b500      	push	{lr}
    9ae6:	b085      	sub	sp, #20
    9ae8:	4603      	mov	r3, r0
    9aea:	9100      	str	r1, [sp, #0]
    9aec:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9af0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9af4:	4a0d      	ldr	r2, [pc, #52]	; (9b2c <FlexCAN_Ip_GetBitrate+0x48>)
    9af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9afa:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    9afc:	2300      	movs	r3, #0
    9afe:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    9b02:	9803      	ldr	r0, [sp, #12]
    9b04:	f7fd fffc 	bl	7b00 <FlexCAN_IsExCbtEnabled>
    9b08:	4603      	mov	r3, r0
    9b0a:	2b00      	cmp	r3, #0
    9b0c:	d004      	beq.n	9b18 <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    9b0e:	9900      	ldr	r1, [sp, #0]
    9b10:	9803      	ldr	r0, [sp, #12]
    9b12:	f7fd ff79 	bl	7a08 <FlexCAN_GetExtendedTimeSegments>
    9b16:	e003      	b.n	9b20 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    9b18:	9900      	ldr	r1, [sp, #0]
    9b1a:	9803      	ldr	r0, [sp, #12]
    9b1c:	f7fd ff9c 	bl	7a58 <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    9b20:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    9b24:	4618      	mov	r0, r3
    9b26:	b005      	add	sp, #20
    9b28:	f85d fb04 	ldr.w	pc, [sp], #4
    9b2c:	0000e664 	.word	0x0000e664

00009b30 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    9b30:	b500      	push	{lr}
    9b32:	b085      	sub	sp, #20
    9b34:	4603      	mov	r3, r0
    9b36:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9b3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b3e:	4a0a      	ldr	r2, [pc, #40]	; (9b68 <FlexCAN_Ip_ClearTDCFail+0x38>)
    9b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b44:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    9b46:	f002 fb3d 	bl	c1c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    9b4a:	9b03      	ldr	r3, [sp, #12]
    9b4c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    9b50:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    9b54:	9b03      	ldr	r3, [sp, #12]
    9b56:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    9b5a:	f002 fb5f 	bl	c21c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    9b5e:	bf00      	nop
    9b60:	b005      	add	sp, #20
    9b62:	f85d fb04 	ldr.w	pc, [sp], #4
    9b66:	bf00      	nop
    9b68:	0000e664 	.word	0x0000e664

00009b6c <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    9b6c:	b084      	sub	sp, #16
    9b6e:	4603      	mov	r3, r0
    9b70:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    9b74:	2300      	movs	r3, #0
    9b76:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9b7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9b7e:	4a0a      	ldr	r2, [pc, #40]	; (9ba8 <FlexCAN_Ip_GetTDCFail+0x3c>)
    9b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b84:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    9b86:	9b02      	ldr	r3, [sp, #8]
    9b88:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    9b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    9b94:	bf0c      	ite	eq
    9b96:	2301      	moveq	r3, #1
    9b98:	2300      	movne	r3, #0
    9b9a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    9b9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9ba2:	4618      	mov	r0, r3
    9ba4:	b004      	add	sp, #16
    9ba6:	4770      	bx	lr
    9ba8:	0000e664 	.word	0x0000e664

00009bac <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    9bac:	b084      	sub	sp, #16
    9bae:	4603      	mov	r3, r0
    9bb0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    9bb4:	2300      	movs	r3, #0
    9bb6:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9bba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9bbe:	4a08      	ldr	r2, [pc, #32]	; (9be0 <FlexCAN_Ip_GetTDCValue+0x34>)
    9bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bc4:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    9bc6:	9b02      	ldr	r3, [sp, #8]
    9bc8:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    9bcc:	b2db      	uxtb	r3, r3
    9bce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9bd2:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    9bd6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    9bda:	4618      	mov	r0, r3
    9bdc:	b004      	add	sp, #16
    9bde:	4770      	bx	lr
    9be0:	0000e664 	.word	0x0000e664

00009be4 <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    9be4:	b500      	push	{lr}
    9be6:	b087      	sub	sp, #28
    9be8:	4603      	mov	r3, r0
    9bea:	9100      	str	r1, [sp, #0]
    9bec:	f88d 3007 	strb.w	r3, [sp, #7]
    9bf0:	4613      	mov	r3, r2
    9bf2:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9bf6:	2300      	movs	r3, #0
    9bf8:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9bfa:	2300      	movs	r3, #0
    9bfc:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9bfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c02:	4a1e      	ldr	r2, [pc, #120]	; (9c7c <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    9c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c08:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    9c0a:	9803      	ldr	r0, [sp, #12]
    9c0c:	f7fd ffaf 	bl	7b6e <FlexCAN_IsFDEnabled>
    9c10:	4603      	mov	r3, r0
    9c12:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    9c16:	9b03      	ldr	r3, [sp, #12]
    9c18:	681b      	ldr	r3, [r3, #0]
    9c1a:	0fdb      	lsrs	r3, r3, #31
    9c1c:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    9c20:	f89d 300a 	ldrb.w	r3, [sp, #10]
    9c24:	2b00      	cmp	r3, #0
    9c26:	d003      	beq.n	9c30 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    9c28:	9803      	ldr	r0, [sp, #12]
    9c2a:	f000 fdf7 	bl	a81c <FlexCAN_Enable>
    9c2e:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    9c30:	9b05      	ldr	r3, [sp, #20]
    9c32:	2b00      	cmp	r3, #0
    9c34:	d10f      	bne.n	9c56 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    9c36:	f002 fcb1 	bl	c59c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    9c3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
    9c3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9c42:	4619      	mov	r1, r3
    9c44:	9803      	ldr	r0, [sp, #12]
    9c46:	f7fd fdd1 	bl	77ec <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    9c4a:	9900      	ldr	r1, [sp, #0]
    9c4c:	9803      	ldr	r0, [sp, #12]
    9c4e:	f7fd fe4c 	bl	78ea <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    9c52:	f002 fccf 	bl	c5f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    9c56:	f89d 300a 	ldrb.w	r3, [sp, #10]
    9c5a:	2b00      	cmp	r3, #0
    9c5c:	d008      	beq.n	9c70 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    9c5e:	9803      	ldr	r0, [sp, #12]
    9c60:	f000 fe5a 	bl	a918 <FlexCAN_Disable>
    9c64:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9c66:	9b04      	ldr	r3, [sp, #16]
    9c68:	2b00      	cmp	r3, #0
    9c6a:	d001      	beq.n	9c70 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    9c6c:	9b04      	ldr	r3, [sp, #16]
    9c6e:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9c70:	9b05      	ldr	r3, [sp, #20]
}
    9c72:	4618      	mov	r0, r3
    9c74:	b007      	add	sp, #28
    9c76:	f85d fb04 	ldr.w	pc, [sp], #4
    9c7a:	bf00      	nop
    9c7c:	0000e664 	.word	0x0000e664

00009c80 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    9c80:	b500      	push	{lr}
    9c82:	b085      	sub	sp, #20
    9c84:	4603      	mov	r3, r0
    9c86:	9100      	str	r1, [sp, #0]
    9c88:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9c8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c90:	4a08      	ldr	r2, [pc, #32]	; (9cb4 <FlexCAN_Ip_GetBitrateFD+0x34>)
    9c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c96:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    9c98:	2300      	movs	r3, #0
    9c9a:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    9c9e:	9900      	ldr	r1, [sp, #0]
    9ca0:	9803      	ldr	r0, [sp, #12]
    9ca2:	f7fd ff00 	bl	7aa6 <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    9ca6:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    9caa:	4618      	mov	r0, r3
    9cac:	b005      	add	sp, #20
    9cae:	f85d fb04 	ldr.w	pc, [sp], #4
    9cb2:	bf00      	nop
    9cb4:	0000e664 	.word	0x0000e664

00009cb8 <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    9cb8:	b500      	push	{lr}
    9cba:	b087      	sub	sp, #28
    9cbc:	4603      	mov	r3, r0
    9cbe:	f88d 3007 	strb.w	r3, [sp, #7]
    9cc2:	460b      	mov	r3, r1
    9cc4:	f88d 3006 	strb.w	r3, [sp, #6]
    9cc8:	4613      	mov	r3, r2
    9cca:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9cce:	2300      	movs	r3, #0
    9cd0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9cd2:	2300      	movs	r3, #0
    9cd4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9cd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9cda:	4a20      	ldr	r2, [pc, #128]	; (9d5c <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    9cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ce0:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9ce2:	9803      	ldr	r0, [sp, #12]
    9ce4:	f7fd fd78 	bl	77d8 <FlexCAN_IsEnabled>
    9ce8:	4603      	mov	r3, r0
    9cea:	2b00      	cmp	r3, #0
    9cec:	bf14      	ite	ne
    9cee:	2301      	movne	r3, #1
    9cf0:	2300      	moveq	r3, #0
    9cf2:	b2db      	uxtb	r3, r3
    9cf4:	f083 0301 	eor.w	r3, r3, #1
    9cf8:	b2db      	uxtb	r3, r3
    9cfa:	f88d 300b 	strb.w	r3, [sp, #11]
    9cfe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d02:	f003 0301 	and.w	r3, r3, #1
    9d06:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    9d0a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d0e:	2b00      	cmp	r3, #0
    9d10:	d003      	beq.n	9d1a <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    9d12:	9803      	ldr	r0, [sp, #12]
    9d14:	f000 fd82 	bl	a81c <FlexCAN_Enable>
    9d18:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    9d1a:	9b05      	ldr	r3, [sp, #20]
    9d1c:	2b00      	cmp	r3, #0
    9d1e:	d10b      	bne.n	9d38 <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    9d20:	f002 fc8e 	bl	c640 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    9d24:	f89d 2005 	ldrb.w	r2, [sp, #5]
    9d28:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9d2c:	4619      	mov	r1, r3
    9d2e:	9803      	ldr	r0, [sp, #12]
    9d30:	f7fd fd2b 	bl	778a <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    9d34:	f002 fcb0 	bl	c698 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    9d38:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9d3c:	2b00      	cmp	r3, #0
    9d3e:	d008      	beq.n	9d52 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    9d40:	9803      	ldr	r0, [sp, #12]
    9d42:	f000 fde9 	bl	a918 <FlexCAN_Disable>
    9d46:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9d48:	9b04      	ldr	r3, [sp, #16]
    9d4a:	2b00      	cmp	r3, #0
    9d4c:	d001      	beq.n	9d52 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    9d4e:	9b04      	ldr	r3, [sp, #16]
    9d50:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    9d52:	9b05      	ldr	r3, [sp, #20]
}
    9d54:	4618      	mov	r0, r3
    9d56:	b007      	add	sp, #28
    9d58:	f85d fb04 	ldr.w	pc, [sp], #4
    9d5c:	0000e664 	.word	0x0000e664

00009d60 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    9d60:	b500      	push	{lr}
    9d62:	b087      	sub	sp, #28
    9d64:	4603      	mov	r3, r0
    9d66:	460a      	mov	r2, r1
    9d68:	f88d 3007 	strb.w	r3, [sp, #7]
    9d6c:	4613      	mov	r3, r2
    9d6e:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9d72:	2300      	movs	r3, #0
    9d74:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9d76:	2300      	movs	r3, #0
    9d78:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9d7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d7e:	4a1f      	ldr	r2, [pc, #124]	; (9dfc <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    9d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d84:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9d86:	9803      	ldr	r0, [sp, #12]
    9d88:	f7fd fd26 	bl	77d8 <FlexCAN_IsEnabled>
    9d8c:	4603      	mov	r3, r0
    9d8e:	2b00      	cmp	r3, #0
    9d90:	bf14      	ite	ne
    9d92:	2301      	movne	r3, #1
    9d94:	2300      	moveq	r3, #0
    9d96:	b2db      	uxtb	r3, r3
    9d98:	f083 0301 	eor.w	r3, r3, #1
    9d9c:	b2db      	uxtb	r3, r3
    9d9e:	f88d 300b 	strb.w	r3, [sp, #11]
    9da2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9da6:	f003 0301 	and.w	r3, r3, #1
    9daa:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    9dae:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9db2:	2b00      	cmp	r3, #0
    9db4:	d003      	beq.n	9dbe <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    9db6:	9803      	ldr	r0, [sp, #12]
    9db8:	f000 fd30 	bl	a81c <FlexCAN_Enable>
    9dbc:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    9dbe:	9b05      	ldr	r3, [sp, #20]
    9dc0:	2b00      	cmp	r3, #0
    9dc2:	d109      	bne.n	9dd8 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    9dc4:	f002 fc8e 	bl	c6e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    9dc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9dcc:	4619      	mov	r1, r3
    9dce:	9803      	ldr	r0, [sp, #12]
    9dd0:	f7fd ff43 	bl	7c5a <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    9dd4:	f002 fcb2 	bl	c73c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    9dd8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9ddc:	2b00      	cmp	r3, #0
    9dde:	d008      	beq.n	9df2 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    9de0:	9803      	ldr	r0, [sp, #12]
    9de2:	f000 fd99 	bl	a918 <FlexCAN_Disable>
    9de6:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9de8:	9b04      	ldr	r3, [sp, #16]
    9dea:	2b00      	cmp	r3, #0
    9dec:	d001      	beq.n	9df2 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    9dee:	9b04      	ldr	r3, [sp, #16]
    9df0:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9df2:	9b05      	ldr	r3, [sp, #20]
}
    9df4:	4618      	mov	r0, r3
    9df6:	b007      	add	sp, #28
    9df8:	f85d fb04 	ldr.w	pc, [sp], #4
    9dfc:	0000e664 	.word	0x0000e664

00009e00 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    9e00:	b500      	push	{lr}
    9e02:	b085      	sub	sp, #20
    9e04:	4603      	mov	r3, r0
    9e06:	460a      	mov	r2, r1
    9e08:	f88d 3007 	strb.w	r3, [sp, #7]
    9e0c:	4613      	mov	r3, r2
    9e0e:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9e12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e16:	4a0b      	ldr	r2, [pc, #44]	; (9e44 <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    9e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e1c:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    9e1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9e22:	4619      	mov	r1, r3
    9e24:	9803      	ldr	r0, [sp, #12]
    9e26:	f7fd fd44 	bl	78b2 <FlexCAN_GetBuffStatusFlag>
    9e2a:	4603      	mov	r3, r0
    9e2c:	2b01      	cmp	r3, #1
    9e2e:	bf0c      	ite	eq
    9e30:	2301      	moveq	r3, #1
    9e32:	2300      	movne	r3, #0
    9e34:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    9e38:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    9e3c:	4618      	mov	r0, r3
    9e3e:	b005      	add	sp, #20
    9e40:	f85d fb04 	ldr.w	pc, [sp], #4
    9e44:	0000e664 	.word	0x0000e664

00009e48 <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    9e48:	b500      	push	{lr}
    9e4a:	b085      	sub	sp, #20
    9e4c:	4603      	mov	r3, r0
    9e4e:	460a      	mov	r2, r1
    9e50:	f88d 3007 	strb.w	r3, [sp, #7]
    9e54:	4613      	mov	r3, r2
    9e56:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9e5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e5e:	4a07      	ldr	r2, [pc, #28]	; (9e7c <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    9e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e64:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    9e66:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9e6a:	4619      	mov	r1, r3
    9e6c:	9803      	ldr	r0, [sp, #12]
    9e6e:	f7fd fd0d 	bl	788c <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    9e72:	bf00      	nop
    9e74:	b005      	add	sp, #20
    9e76:	f85d fb04 	ldr.w	pc, [sp], #4
    9e7a:	bf00      	nop
    9e7c:	0000e664 	.word	0x0000e664

00009e80 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    9e80:	b500      	push	{lr}
    9e82:	b087      	sub	sp, #28
    9e84:	4603      	mov	r3, r0
    9e86:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9e8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e8e:	4a11      	ldr	r2, [pc, #68]	; (9ed4 <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    9e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e94:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    9e96:	2301      	movs	r3, #1
    9e98:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9e9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e9e:	4a0e      	ldr	r2, [pc, #56]	; (9ed8 <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    9ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ea4:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    9ea6:	9804      	ldr	r0, [sp, #16]
    9ea8:	f7fd fc96 	bl	77d8 <FlexCAN_IsEnabled>
    9eac:	4603      	mov	r3, r0
    9eae:	2b00      	cmp	r3, #0
    9eb0:	d00b      	beq.n	9eca <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    9eb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9eb6:	4619      	mov	r1, r3
    9eb8:	9804      	ldr	r0, [sp, #16]
    9eba:	f000 ffe1 	bl	ae80 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    9ebe:	9b03      	ldr	r3, [sp, #12]
    9ec0:	2201      	movs	r2, #1
    9ec2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    9ec6:	2300      	movs	r3, #0
    9ec8:	9305      	str	r3, [sp, #20]
    }

    return result;
    9eca:	9b05      	ldr	r3, [sp, #20]
}
    9ecc:	4618      	mov	r0, r3
    9ece:	b007      	add	sp, #28
    9ed0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ed4:	0000e664 	.word	0x0000e664
    9ed8:	1fff8f9c 	.word	0x1fff8f9c

00009edc <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    9edc:	b500      	push	{lr}
    9ede:	b087      	sub	sp, #28
    9ee0:	4603      	mov	r3, r0
    9ee2:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9ee6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9eea:	4a10      	ldr	r2, [pc, #64]	; (9f2c <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    9eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ef0:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    9ef2:	2301      	movs	r3, #1
    9ef4:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9ef6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9efa:	4a0d      	ldr	r2, [pc, #52]	; (9f30 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    9efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f00:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    9f02:	9804      	ldr	r0, [sp, #16]
    9f04:	f7fd fc68 	bl	77d8 <FlexCAN_IsEnabled>
    9f08:	4603      	mov	r3, r0
    9f0a:	2b00      	cmp	r3, #0
    9f0c:	d008      	beq.n	9f20 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    9f0e:	9804      	ldr	r0, [sp, #16]
    9f10:	f000 ffae 	bl	ae70 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    9f14:	9b03      	ldr	r3, [sp, #12]
    9f16:	2200      	movs	r2, #0
    9f18:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    9f1c:	2300      	movs	r3, #0
    9f1e:	9305      	str	r3, [sp, #20]
    }

    return result;
    9f20:	9b05      	ldr	r3, [sp, #20]
}
    9f22:	4618      	mov	r0, r3
    9f24:	b007      	add	sp, #28
    9f26:	f85d fb04 	ldr.w	pc, [sp], #4
    9f2a:	bf00      	nop
    9f2c:	0000e664 	.word	0x0000e664
    9f30:	1fff8f9c 	.word	0x1fff8f9c

00009f34 <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    9f34:	b500      	push	{lr}
    9f36:	b087      	sub	sp, #28
    9f38:	4603      	mov	r3, r0
    9f3a:	9100      	str	r1, [sp, #0]
    9f3c:	f88d 3007 	strb.w	r3, [sp, #7]
    9f40:	4613      	mov	r3, r2
    9f42:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9f46:	2300      	movs	r3, #0
    9f48:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9f4a:	2300      	movs	r3, #0
    9f4c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9f4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f52:	4a3a      	ldr	r2, [pc, #232]	; (a03c <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    9f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f58:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9f5a:	9803      	ldr	r0, [sp, #12]
    9f5c:	f7fd fc3c 	bl	77d8 <FlexCAN_IsEnabled>
    9f60:	4603      	mov	r3, r0
    9f62:	2b00      	cmp	r3, #0
    9f64:	bf14      	ite	ne
    9f66:	2301      	movne	r3, #1
    9f68:	2300      	moveq	r3, #0
    9f6a:	b2db      	uxtb	r3, r3
    9f6c:	f083 0301 	eor.w	r3, r3, #1
    9f70:	b2db      	uxtb	r3, r3
    9f72:	f88d 300b 	strb.w	r3, [sp, #11]
    9f76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9f7a:	f003 0301 	and.w	r3, r3, #1
    9f7e:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    9f82:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9f86:	2b00      	cmp	r3, #0
    9f88:	d003      	beq.n	9f92 <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    9f8a:	9803      	ldr	r0, [sp, #12]
    9f8c:	f000 fc46 	bl	a81c <FlexCAN_Enable>
    9f90:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    9f92:	9b05      	ldr	r3, [sp, #20]
    9f94:	2b00      	cmp	r3, #0
    9f96:	d13c      	bne.n	a012 <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    9f98:	9b00      	ldr	r3, [sp, #0]
    9f9a:	2b04      	cmp	r3, #4
    9f9c:	d83b      	bhi.n	a016 <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    9f9e:	a201      	add	r2, pc, #4	; (adr r2, 9fa4 <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    9fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9fa4:	00009fef 	.word	0x00009fef
    9fa8:	0000a001 	.word	0x0000a001
    9fac:	00009fcb 	.word	0x00009fcb
    9fb0:	00009fdd 	.word	0x00009fdd
    9fb4:	00009fb9 	.word	0x00009fb9
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    9fb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fbc:	461a      	mov	r2, r3
    9fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9fc2:	9803      	ldr	r0, [sp, #12]
    9fc4:	f000 fce8 	bl	a998 <FlexCAN_SetErrIntCmd>
                break;
    9fc8:	e026      	b.n	a018 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    9fca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fce:	461a      	mov	r2, r3
    9fd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    9fd4:	9803      	ldr	r0, [sp, #12]
    9fd6:	f000 fcdf 	bl	a998 <FlexCAN_SetErrIntCmd>
                break;
    9fda:	e01d      	b.n	a018 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    9fdc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fe0:	461a      	mov	r2, r3
    9fe2:	f244 0101 	movw	r1, #16385	; 0x4001
    9fe6:	9803      	ldr	r0, [sp, #12]
    9fe8:	f000 fcd6 	bl	a998 <FlexCAN_SetErrIntCmd>
                break;
    9fec:	e014      	b.n	a018 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    9fee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ff2:	461a      	mov	r2, r3
    9ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    9ff8:	9803      	ldr	r0, [sp, #12]
    9ffa:	f000 fccd 	bl	a998 <FlexCAN_SetErrIntCmd>
                }
                break;
    9ffe:	e00b      	b.n	a018 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    a000:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a004:	461a      	mov	r2, r3
    a006:	f44f 6100 	mov.w	r1, #2048	; 0x800
    a00a:	9803      	ldr	r0, [sp, #12]
    a00c:	f000 fcc4 	bl	a998 <FlexCAN_SetErrIntCmd>
                }
                break;
    a010:	e002      	b.n	a018 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    a012:	bf00      	nop
    a014:	e000      	b.n	a018 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    a016:	bf00      	nop

    if (TRUE == disabled)
    a018:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a01c:	2b00      	cmp	r3, #0
    a01e:	d008      	beq.n	a032 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    a020:	9803      	ldr	r0, [sp, #12]
    a022:	f000 fc79 	bl	a918 <FlexCAN_Disable>
    a026:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a028:	9b04      	ldr	r3, [sp, #16]
    a02a:	2b00      	cmp	r3, #0
    a02c:	d001      	beq.n	a032 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    a02e:	9b04      	ldr	r3, [sp, #16]
    a030:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a032:	9b05      	ldr	r3, [sp, #20]
}
    a034:	4618      	mov	r0, r3
    a036:	b007      	add	sp, #28
    a038:	f85d fb04 	ldr.w	pc, [sp], #4
    a03c:	0000e664 	.word	0x0000e664

0000a040 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    a040:	b500      	push	{lr}
    a042:	b087      	sub	sp, #28
    a044:	4603      	mov	r3, r0
    a046:	460a      	mov	r2, r1
    a048:	f88d 3007 	strb.w	r3, [sp, #7]
    a04c:	4613      	mov	r3, r2
    a04e:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    a052:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a056:	4a27      	ldr	r2, [pc, #156]	; (a0f4 <FlexCAN_Ip_AbortTransfer+0xb4>)
    a058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a05c:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    a05e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a062:	4a25      	ldr	r2, [pc, #148]	; (a0f8 <FlexCAN_Ip_AbortTransfer+0xb8>)
    a064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a068:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a06a:	2300      	movs	r3, #0
    a06c:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    a06e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a072:	2b1f      	cmp	r3, #31
    a074:	d838      	bhi.n	a0e8 <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    a076:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a07a:	9a03      	ldr	r2, [sp, #12]
    a07c:	011b      	lsls	r3, r3, #4
    a07e:	4413      	add	r3, r2
    a080:	3304      	adds	r3, #4
    a082:	681b      	ldr	r3, [r3, #0]
    a084:	2b00      	cmp	r3, #0
    a086:	d102      	bne.n	a08e <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    a088:	2305      	movs	r3, #5
    a08a:	9305      	str	r3, [sp, #20]
    a08c:	e02c      	b.n	a0e8 <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    a08e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a092:	9b03      	ldr	r3, [sp, #12]
    a094:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a098:	f89d 1007 	ldrb.w	r1, [sp, #7]
    a09c:	9804      	ldr	r0, [sp, #16]
    a09e:	f000 feb3 	bl	ae08 <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    a0a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a0a6:	9a03      	ldr	r2, [sp, #12]
    a0a8:	011b      	lsls	r3, r3, #4
    a0aa:	4413      	add	r3, r2
    a0ac:	3304      	adds	r3, #4
    a0ae:	681b      	ldr	r3, [r3, #0]
    a0b0:	2b02      	cmp	r3, #2
    a0b2:	d108      	bne.n	a0c6 <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    a0b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a0b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a0bc:	4611      	mov	r1, r2
    a0be:	4618      	mov	r0, r3
    a0c0:	f7fe fabc 	bl	863c <FlexCAN_AbortTxTransfer>
    a0c4:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    a0c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a0ca:	9a03      	ldr	r2, [sp, #12]
    a0cc:	011b      	lsls	r3, r3, #4
    a0ce:	4413      	add	r3, r2
    a0d0:	3304      	adds	r3, #4
    a0d2:	681b      	ldr	r3, [r3, #0]
    a0d4:	2b01      	cmp	r3, #1
    a0d6:	d107      	bne.n	a0e8 <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    a0d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a0dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a0e0:	4611      	mov	r1, r2
    a0e2:	4618      	mov	r0, r3
    a0e4:	f7fe fb34 	bl	8750 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    a0e8:	9b05      	ldr	r3, [sp, #20]
}
    a0ea:	4618      	mov	r0, r3
    a0ec:	b007      	add	sp, #28
    a0ee:	f85d fb04 	ldr.w	pc, [sp], #4
    a0f2:	bf00      	nop
    a0f4:	0000e664 	.word	0x0000e664
    a0f8:	1fff8f9c 	.word	0x1fff8f9c

0000a0fc <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    a0fc:	b500      	push	{lr}
    a0fe:	b087      	sub	sp, #28
    a100:	4603      	mov	r3, r0
    a102:	9100      	str	r1, [sp, #0]
    a104:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a108:	2300      	movs	r3, #0
    a10a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a10c:	2300      	movs	r3, #0
    a10e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a110:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a114:	4a1b      	ldr	r2, [pc, #108]	; (a184 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    a116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a11a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a11c:	9803      	ldr	r0, [sp, #12]
    a11e:	f7fd fb5b 	bl	77d8 <FlexCAN_IsEnabled>
    a122:	4603      	mov	r3, r0
    a124:	2b00      	cmp	r3, #0
    a126:	bf14      	ite	ne
    a128:	2301      	movne	r3, #1
    a12a:	2300      	moveq	r3, #0
    a12c:	b2db      	uxtb	r3, r3
    a12e:	f083 0301 	eor.w	r3, r3, #1
    a132:	b2db      	uxtb	r3, r3
    a134:	f88d 300b 	strb.w	r3, [sp, #11]
    a138:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a13c:	f003 0301 	and.w	r3, r3, #1
    a140:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a144:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a148:	2b00      	cmp	r3, #0
    a14a:	d003      	beq.n	a154 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a14c:	9803      	ldr	r0, [sp, #12]
    a14e:	f000 fb65 	bl	a81c <FlexCAN_Enable>
    a152:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a154:	9b05      	ldr	r3, [sp, #20]
    a156:	2b00      	cmp	r3, #0
    a158:	d102      	bne.n	a160 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    a15a:	9b03      	ldr	r3, [sp, #12]
    a15c:	9a00      	ldr	r2, [sp, #0]
    a15e:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    a160:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a164:	2b00      	cmp	r3, #0
    a166:	d008      	beq.n	a17a <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    a168:	9803      	ldr	r0, [sp, #12]
    a16a:	f000 fbd5 	bl	a918 <FlexCAN_Disable>
    a16e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a170:	9b04      	ldr	r3, [sp, #16]
    a172:	2b00      	cmp	r3, #0
    a174:	d001      	beq.n	a17a <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    a176:	9b04      	ldr	r3, [sp, #16]
    a178:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a17a:	9b05      	ldr	r3, [sp, #20]
}
    a17c:	4618      	mov	r0, r3
    a17e:	b007      	add	sp, #28
    a180:	f85d fb04 	ldr.w	pc, [sp], #4
    a184:	0000e664 	.word	0x0000e664

0000a188 <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    a188:	b500      	push	{lr}
    a18a:	b087      	sub	sp, #28
    a18c:	4603      	mov	r3, r0
    a18e:	9100      	str	r1, [sp, #0]
    a190:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a194:	2300      	movs	r3, #0
    a196:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a198:	2300      	movs	r3, #0
    a19a:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a19c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a1a0:	4a1b      	ldr	r2, [pc, #108]	; (a210 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    a1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1a6:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a1a8:	9803      	ldr	r0, [sp, #12]
    a1aa:	f7fd fb15 	bl	77d8 <FlexCAN_IsEnabled>
    a1ae:	4603      	mov	r3, r0
    a1b0:	2b00      	cmp	r3, #0
    a1b2:	bf14      	ite	ne
    a1b4:	2301      	movne	r3, #1
    a1b6:	2300      	moveq	r3, #0
    a1b8:	b2db      	uxtb	r3, r3
    a1ba:	f083 0301 	eor.w	r3, r3, #1
    a1be:	b2db      	uxtb	r3, r3
    a1c0:	f88d 300b 	strb.w	r3, [sp, #11]
    a1c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a1c8:	f003 0301 	and.w	r3, r3, #1
    a1cc:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a1d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a1d4:	2b00      	cmp	r3, #0
    a1d6:	d003      	beq.n	a1e0 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a1d8:	9803      	ldr	r0, [sp, #12]
    a1da:	f000 fb1f 	bl	a81c <FlexCAN_Enable>
    a1de:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a1e0:	9b05      	ldr	r3, [sp, #20]
    a1e2:	2b00      	cmp	r3, #0
    a1e4:	d102      	bne.n	a1ec <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    a1e6:	9b03      	ldr	r3, [sp, #12]
    a1e8:	9a00      	ldr	r2, [sp, #0]
    a1ea:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    a1ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a1f0:	2b00      	cmp	r3, #0
    a1f2:	d008      	beq.n	a206 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    a1f4:	9803      	ldr	r0, [sp, #12]
    a1f6:	f000 fb8f 	bl	a918 <FlexCAN_Disable>
    a1fa:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a1fc:	9b04      	ldr	r3, [sp, #16]
    a1fe:	2b00      	cmp	r3, #0
    a200:	d001      	beq.n	a206 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    a202:	9b04      	ldr	r3, [sp, #16]
    a204:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a206:	9b05      	ldr	r3, [sp, #20]
}
    a208:	4618      	mov	r0, r3
    a20a:	b007      	add	sp, #28
    a20c:	f85d fb04 	ldr.w	pc, [sp], #4
    a210:	0000e664 	.word	0x0000e664

0000a214 <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    a214:	b500      	push	{lr}
    a216:	b087      	sub	sp, #28
    a218:	4603      	mov	r3, r0
    a21a:	460a      	mov	r2, r1
    a21c:	f88d 3007 	strb.w	r3, [sp, #7]
    a220:	4613      	mov	r3, r2
    a222:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a226:	2300      	movs	r3, #0
    a228:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a22a:	2300      	movs	r3, #0
    a22c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a22e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a232:	4a1f      	ldr	r2, [pc, #124]	; (a2b0 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    a234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a238:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a23a:	9803      	ldr	r0, [sp, #12]
    a23c:	f7fd facc 	bl	77d8 <FlexCAN_IsEnabled>
    a240:	4603      	mov	r3, r0
    a242:	2b00      	cmp	r3, #0
    a244:	bf14      	ite	ne
    a246:	2301      	movne	r3, #1
    a248:	2300      	moveq	r3, #0
    a24a:	b2db      	uxtb	r3, r3
    a24c:	f083 0301 	eor.w	r3, r3, #1
    a250:	b2db      	uxtb	r3, r3
    a252:	f88d 300b 	strb.w	r3, [sp, #11]
    a256:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a25a:	f003 0301 	and.w	r3, r3, #1
    a25e:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a262:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a266:	2b00      	cmp	r3, #0
    a268:	d003      	beq.n	a272 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    a26a:	9803      	ldr	r0, [sp, #12]
    a26c:	f000 fad6 	bl	a81c <FlexCAN_Enable>
    a270:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a272:	9b05      	ldr	r3, [sp, #20]
    a274:	2b00      	cmp	r3, #0
    a276:	d109      	bne.n	a28c <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    a278:	f001 fff6 	bl	c268 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    a27c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a280:	4619      	mov	r1, r3
    a282:	9803      	ldr	r0, [sp, #12]
    a284:	f7fd fae5 	bl	7852 <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    a288:	f002 f81a 	bl	c2c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    a28c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a290:	2b00      	cmp	r3, #0
    a292:	d008      	beq.n	a2a6 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    a294:	9803      	ldr	r0, [sp, #12]
    a296:	f000 fb3f 	bl	a918 <FlexCAN_Disable>
    a29a:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a29c:	9b04      	ldr	r3, [sp, #16]
    a29e:	2b00      	cmp	r3, #0
    a2a0:	d001      	beq.n	a2a6 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    a2a2:	9b04      	ldr	r3, [sp, #16]
    a2a4:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a2a6:	9b05      	ldr	r3, [sp, #20]
}
    a2a8:	4618      	mov	r0, r3
    a2aa:	b007      	add	sp, #28
    a2ac:	f85d fb04 	ldr.w	pc, [sp], #4
    a2b0:	0000e664 	.word	0x0000e664

0000a2b4 <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    a2b4:	b500      	push	{lr}
    a2b6:	b085      	sub	sp, #20
    a2b8:	4603      	mov	r3, r0
    a2ba:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a2be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2c2:	4a06      	ldr	r2, [pc, #24]	; (a2dc <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    a2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2c8:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    a2ca:	9803      	ldr	r0, [sp, #12]
    a2cc:	f7fd fc5d 	bl	7b8a <FlexCAN_IsListenOnlyModeEnabled>
    a2d0:	4603      	mov	r3, r0
}
    a2d2:	4618      	mov	r0, r3
    a2d4:	b005      	add	sp, #20
    a2d6:	f85d fb04 	ldr.w	pc, [sp], #4
    a2da:	bf00      	nop
    a2dc:	0000e664 	.word	0x0000e664

0000a2e0 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    a2e0:	b500      	push	{lr}
    a2e2:	b089      	sub	sp, #36	; 0x24
    a2e4:	4603      	mov	r3, r0
    a2e6:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    a2ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2ee:	4a27      	ldr	r2, [pc, #156]	; (a38c <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    a2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2f4:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    a2f6:	2300      	movs	r3, #0
    a2f8:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    a2fa:	2300      	movs	r3, #0
    a2fc:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a2fe:	2100      	movs	r1, #0
    a300:	4823      	ldr	r0, [pc, #140]	; (a390 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    a302:	f7f6 ff6d 	bl	11e0 <OsIf_MicrosToTicks>
    a306:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    a308:	2301      	movs	r3, #1
    a30a:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    a30c:	9b05      	ldr	r3, [sp, #20]
    a30e:	685b      	ldr	r3, [r3, #4]
    a310:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a314:	2b00      	cmp	r3, #0
    a316:	d033      	beq.n	a380 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    a318:	2300      	movs	r3, #0
    a31a:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    a31c:	9b05      	ldr	r3, [sp, #20]
    a31e:	6a1b      	ldr	r3, [r3, #32]
    a320:	f003 0320 	and.w	r3, r3, #32
    a324:	2b00      	cmp	r3, #0
    a326:	d02b      	beq.n	a380 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    a328:	f002 fad2 	bl	c8d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    a32c:	9b05      	ldr	r3, [sp, #20]
    a32e:	685b      	ldr	r3, [r3, #4]
    a330:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    a334:	9b05      	ldr	r3, [sp, #20]
    a336:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    a338:	9b05      	ldr	r3, [sp, #20]
    a33a:	685b      	ldr	r3, [r3, #4]
    a33c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    a340:	9b05      	ldr	r3, [sp, #20]
    a342:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    a344:	f002 faf0 	bl	c928 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a348:	2000      	movs	r0, #0
    a34a:	f7f6 fefd 	bl	1148 <OsIf_GetCounter>
    a34e:	4603      	mov	r3, r0
    a350:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    a352:	e00f      	b.n	a374 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a354:	ab03      	add	r3, sp, #12
    a356:	2100      	movs	r1, #0
    a358:	4618      	mov	r0, r3
    a35a:	f7f6 ff0e 	bl	117a <OsIf_GetElapsed>
    a35e:	4602      	mov	r2, r0
    a360:	9b07      	ldr	r3, [sp, #28]
    a362:	4413      	add	r3, r2
    a364:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    a366:	9a07      	ldr	r2, [sp, #28]
    a368:	9b04      	ldr	r3, [sp, #16]
    a36a:	429a      	cmp	r2, r3
    a36c:	d302      	bcc.n	a374 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    a36e:	2303      	movs	r3, #3
    a370:	9306      	str	r3, [sp, #24]
                    break;
    a372:	e005      	b.n	a380 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    a374:	9b05      	ldr	r3, [sp, #20]
    a376:	6a1b      	ldr	r3, [r3, #32]
    a378:	f003 0320 	and.w	r3, r3, #32
    a37c:	2b00      	cmp	r3, #0
    a37e:	d1e9      	bne.n	a354 <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    a380:	9b06      	ldr	r3, [sp, #24]
}
    a382:	4618      	mov	r0, r3
    a384:	b009      	add	sp, #36	; 0x24
    a386:	f85d fb04 	ldr.w	pc, [sp], #4
    a38a:	bf00      	nop
    a38c:	0000e664 	.word	0x0000e664
    a390:	000f4240 	.word	0x000f4240

0000a394 <FlexCAN_SetSelfReception>:
{
    a394:	b082      	sub	sp, #8
    a396:	9001      	str	r0, [sp, #4]
    a398:	460b      	mov	r3, r1
    a39a:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    a39e:	9b01      	ldr	r3, [sp, #4]
    a3a0:	681b      	ldr	r3, [r3, #0]
    a3a2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    a3a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a3aa:	2a00      	cmp	r2, #0
    a3ac:	d001      	beq.n	a3b2 <FlexCAN_SetSelfReception+0x1e>
    a3ae:	2200      	movs	r2, #0
    a3b0:	e001      	b.n	a3b6 <FlexCAN_SetSelfReception+0x22>
    a3b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a3b6:	431a      	orrs	r2, r3
    a3b8:	9b01      	ldr	r3, [sp, #4]
    a3ba:	601a      	str	r2, [r3, #0]
}
    a3bc:	bf00      	nop
    a3be:	b002      	add	sp, #8
    a3c0:	4770      	bx	lr

0000a3c2 <FlexCAN_IsFDEnabled>:
{
    a3c2:	b082      	sub	sp, #8
    a3c4:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    a3c6:	9b01      	ldr	r3, [sp, #4]
    a3c8:	681b      	ldr	r3, [r3, #0]
    a3ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a3ce:	2b00      	cmp	r3, #0
    a3d0:	bf14      	ite	ne
    a3d2:	2301      	movne	r3, #1
    a3d4:	2300      	moveq	r3, #0
    a3d6:	b2db      	uxtb	r3, r3
}
    a3d8:	4618      	mov	r0, r3
    a3da:	b002      	add	sp, #8
    a3dc:	4770      	bx	lr

0000a3de <FlexCAN_SetIsoCan>:
{
    a3de:	b082      	sub	sp, #8
    a3e0:	9001      	str	r0, [sp, #4]
    a3e2:	460b      	mov	r3, r1
    a3e4:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    a3e8:	9b01      	ldr	r3, [sp, #4]
    a3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a3ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    a3f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a3f4:	2a00      	cmp	r2, #0
    a3f6:	d002      	beq.n	a3fe <FlexCAN_SetIsoCan+0x20>
    a3f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    a3fc:	e000      	b.n	a400 <FlexCAN_SetIsoCan+0x22>
    a3fe:	2200      	movs	r2, #0
    a400:	431a      	orrs	r2, r3
    a402:	9b01      	ldr	r3, [sp, #4]
    a404:	635a      	str	r2, [r3, #52]	; 0x34
}
    a406:	bf00      	nop
    a408:	b002      	add	sp, #8
    a40a:	4770      	bx	lr

0000a40c <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    a40c:	b082      	sub	sp, #8
    a40e:	9001      	str	r0, [sp, #4]
    a410:	460b      	mov	r3, r1
    a412:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    a416:	9b01      	ldr	r3, [sp, #4]
    a418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a41a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    a41e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a422:	2a00      	cmp	r2, #0
    a424:	d002      	beq.n	a42c <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    a426:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a42a:	e000      	b.n	a42e <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    a42c:	2200      	movs	r2, #0
    a42e:	431a      	orrs	r2, r3
    a430:	9b01      	ldr	r3, [sp, #4]
    a432:	635a      	str	r2, [r3, #52]	; 0x34
}
    a434:	bf00      	nop
    a436:	b002      	add	sp, #8
    a438:	4770      	bx	lr

0000a43a <FlexCAN_SetProtocolException>:
{
    a43a:	b082      	sub	sp, #8
    a43c:	9001      	str	r0, [sp, #4]
    a43e:	460b      	mov	r3, r1
    a440:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    a444:	9b01      	ldr	r3, [sp, #4]
    a446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    a44c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a450:	2a00      	cmp	r2, #0
    a452:	d002      	beq.n	a45a <FlexCAN_SetProtocolException+0x20>
    a454:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a458:	e000      	b.n	a45c <FlexCAN_SetProtocolException+0x22>
    a45a:	2200      	movs	r2, #0
    a45c:	431a      	orrs	r2, r3
    a45e:	9b01      	ldr	r3, [sp, #4]
    a460:	635a      	str	r2, [r3, #52]	; 0x34
}
    a462:	bf00      	nop
    a464:	b002      	add	sp, #8
    a466:	4770      	bx	lr

0000a468 <FlexCAN_SetRemoteReqStore>:
{
    a468:	b082      	sub	sp, #8
    a46a:	9001      	str	r0, [sp, #4]
    a46c:	460b      	mov	r3, r1
    a46e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    a472:	9b01      	ldr	r3, [sp, #4]
    a474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a476:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    a47a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a47e:	2a00      	cmp	r2, #0
    a480:	d002      	beq.n	a488 <FlexCAN_SetRemoteReqStore+0x20>
    a482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a486:	e000      	b.n	a48a <FlexCAN_SetRemoteReqStore+0x22>
    a488:	2200      	movs	r2, #0
    a48a:	431a      	orrs	r2, r3
    a48c:	9b01      	ldr	r3, [sp, #4]
    a48e:	635a      	str	r2, [r3, #52]	; 0x34
}
    a490:	bf00      	nop
    a492:	b002      	add	sp, #8
    a494:	4770      	bx	lr

0000a496 <FlexCAN_SetBusOffAutorecovery>:
{
    a496:	b082      	sub	sp, #8
    a498:	9001      	str	r0, [sp, #4]
    a49a:	460b      	mov	r3, r1
    a49c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    a4a0:	9b01      	ldr	r3, [sp, #4]
    a4a2:	685b      	ldr	r3, [r3, #4]
    a4a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    a4a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a4ac:	2a00      	cmp	r2, #0
    a4ae:	d001      	beq.n	a4b4 <FlexCAN_SetBusOffAutorecovery+0x1e>
    a4b0:	2200      	movs	r2, #0
    a4b2:	e000      	b.n	a4b6 <FlexCAN_SetBusOffAutorecovery+0x20>
    a4b4:	2240      	movs	r2, #64	; 0x40
    a4b6:	431a      	orrs	r2, r3
    a4b8:	9b01      	ldr	r3, [sp, #4]
    a4ba:	605a      	str	r2, [r3, #4]
}
    a4bc:	bf00      	nop
    a4be:	b002      	add	sp, #8
    a4c0:	4770      	bx	lr

0000a4c2 <FlexCAN_SetEdgeFilter>:
{
    a4c2:	b082      	sub	sp, #8
    a4c4:	9001      	str	r0, [sp, #4]
    a4c6:	460b      	mov	r3, r1
    a4c8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    a4cc:	9b01      	ldr	r3, [sp, #4]
    a4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a4d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    a4d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a4d8:	2a00      	cmp	r2, #0
    a4da:	d001      	beq.n	a4e0 <FlexCAN_SetEdgeFilter+0x1e>
    a4dc:	2200      	movs	r2, #0
    a4de:	e001      	b.n	a4e4 <FlexCAN_SetEdgeFilter+0x22>
    a4e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a4e4:	431a      	orrs	r2, r3
    a4e6:	9b01      	ldr	r3, [sp, #4]
    a4e8:	635a      	str	r2, [r3, #52]	; 0x34
}
    a4ea:	bf00      	nop
    a4ec:	b002      	add	sp, #8
    a4ee:	4770      	bx	lr

0000a4f0 <FlexCAN_CanBitSampling>:
{
    a4f0:	b082      	sub	sp, #8
    a4f2:	9001      	str	r0, [sp, #4]
    a4f4:	460b      	mov	r3, r1
    a4f6:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    a4fa:	9b01      	ldr	r3, [sp, #4]
    a4fc:	685b      	ldr	r3, [r3, #4]
    a4fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    a502:	f89d 2003 	ldrb.w	r2, [sp, #3]
    a506:	2a00      	cmp	r2, #0
    a508:	d001      	beq.n	a50e <FlexCAN_CanBitSampling+0x1e>
    a50a:	2280      	movs	r2, #128	; 0x80
    a50c:	e000      	b.n	a510 <FlexCAN_CanBitSampling+0x20>
    a50e:	2200      	movs	r2, #0
    a510:	431a      	orrs	r2, r3
    a512:	9b01      	ldr	r3, [sp, #4]
    a514:	605a      	str	r2, [r3, #4]
}
    a516:	bf00      	nop
    a518:	b002      	add	sp, #8
    a51a:	4770      	bx	lr

0000a51c <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    a51c:	b084      	sub	sp, #16
    a51e:	4603      	mov	r3, r0
    a520:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    a524:	23ff      	movs	r3, #255	; 0xff
    a526:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    a528:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a52c:	2b40      	cmp	r3, #64	; 0x40
    a52e:	d804      	bhi.n	a53a <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    a530:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a534:	4a03      	ldr	r2, [pc, #12]	; (a544 <FlexCAN_ComputeDLCValue+0x28>)
    a536:	5cd3      	ldrb	r3, [r2, r3]
    a538:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    a53a:	9b03      	ldr	r3, [sp, #12]
    a53c:	b2db      	uxtb	r3, r3
}
    a53e:	4618      	mov	r0, r3
    a540:	b004      	add	sp, #16
    a542:	4770      	bx	lr
    a544:	0000e670 	.word	0x0000e670

0000a548 <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    a548:	b500      	push	{lr}
    a54a:	b087      	sub	sp, #28
    a54c:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    a54e:	9801      	ldr	r0, [sp, #4]
    a550:	f000 f8f6 	bl	a740 <FlexCAN_GetMaxMbNum>
    a554:	4603      	mov	r3, r0
    a556:	009b      	lsls	r3, r3, #2
    a558:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    a55a:	9801      	ldr	r0, [sp, #4]
    a55c:	f000 f8f0 	bl	a740 <FlexCAN_GetMaxMbNum>
    a560:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    a562:	9b01      	ldr	r3, [sp, #4]
    a564:	3380      	adds	r3, #128	; 0x80
    a566:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    a568:	2300      	movs	r3, #0
    a56a:	9305      	str	r3, [sp, #20]
    a56c:	e008      	b.n	a580 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    a56e:	9b05      	ldr	r3, [sp, #20]
    a570:	009b      	lsls	r3, r3, #2
    a572:	9a02      	ldr	r2, [sp, #8]
    a574:	4413      	add	r3, r2
    a576:	2200      	movs	r2, #0
    a578:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    a57a:	9b05      	ldr	r3, [sp, #20]
    a57c:	3301      	adds	r3, #1
    a57e:	9305      	str	r3, [sp, #20]
    a580:	9a05      	ldr	r2, [sp, #20]
    a582:	9b04      	ldr	r3, [sp, #16]
    a584:	429a      	cmp	r2, r3
    a586:	d3f2      	bcc.n	a56e <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    a588:	9b01      	ldr	r3, [sp, #4]
    a58a:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    a58e:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    a590:	2300      	movs	r3, #0
    a592:	9305      	str	r3, [sp, #20]
    a594:	e008      	b.n	a5a8 <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    a596:	9b05      	ldr	r3, [sp, #20]
    a598:	009b      	lsls	r3, r3, #2
    a59a:	9a02      	ldr	r2, [sp, #8]
    a59c:	4413      	add	r3, r2
    a59e:	2200      	movs	r2, #0
    a5a0:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    a5a2:	9b05      	ldr	r3, [sp, #20]
    a5a4:	3301      	adds	r3, #1
    a5a6:	9305      	str	r3, [sp, #20]
    a5a8:	9a05      	ldr	r2, [sp, #20]
    a5aa:	9b03      	ldr	r3, [sp, #12]
    a5ac:	429a      	cmp	r2, r3
    a5ae:	d3f2      	bcc.n	a596 <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    a5b0:	bf00      	nop
    a5b2:	bf00      	nop
    a5b4:	b007      	add	sp, #28
    a5b6:	f85d fb04 	ldr.w	pc, [sp], #4

0000a5ba <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    a5ba:	b084      	sub	sp, #16
    a5bc:	4603      	mov	r3, r0
    a5be:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    a5c2:	2308      	movs	r3, #8
    a5c4:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    a5c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5cc:	2b08      	cmp	r3, #8
    a5ce:	d804      	bhi.n	a5da <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    a5d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5d4:	f88d 300f 	strb.w	r3, [sp, #15]
    a5d8:	e033      	b.n	a642 <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    a5da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5de:	3b09      	subs	r3, #9
    a5e0:	2b06      	cmp	r3, #6
    a5e2:	d82d      	bhi.n	a640 <FlexCAN_ComputePayloadSize+0x86>
    a5e4:	a201      	add	r2, pc, #4	; (adr r2, a5ec <FlexCAN_ComputePayloadSize+0x32>)
    a5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a5ea:	bf00      	nop
    a5ec:	0000a609 	.word	0x0000a609
    a5f0:	0000a611 	.word	0x0000a611
    a5f4:	0000a619 	.word	0x0000a619
    a5f8:	0000a621 	.word	0x0000a621
    a5fc:	0000a629 	.word	0x0000a629
    a600:	0000a631 	.word	0x0000a631
    a604:	0000a639 	.word	0x0000a639
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    a608:	230c      	movs	r3, #12
    a60a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a60e:	e018      	b.n	a642 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    a610:	2310      	movs	r3, #16
    a612:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a616:	e014      	b.n	a642 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    a618:	2314      	movs	r3, #20
    a61a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a61e:	e010      	b.n	a642 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    a620:	2318      	movs	r3, #24
    a622:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a626:	e00c      	b.n	a642 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    a628:	2320      	movs	r3, #32
    a62a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a62e:	e008      	b.n	a642 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    a630:	2330      	movs	r3, #48	; 0x30
    a632:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a636:	e004      	b.n	a642 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    a638:	2340      	movs	r3, #64	; 0x40
    a63a:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    a63e:	e000      	b.n	a642 <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    a640:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    a642:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a646:	4618      	mov	r0, r3
    a648:	b004      	add	sp, #16
    a64a:	4770      	bx	lr

0000a64c <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    a64c:	b500      	push	{lr}
    a64e:	b08b      	sub	sp, #44	; 0x2c
    a650:	9001      	str	r0, [sp, #4]
    a652:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    a654:	2308      	movs	r3, #8
    a656:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    a65a:	2300      	movs	r3, #0
    a65c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    a660:	f44f 7300 	mov.w	r3, #512	; 0x200
    a664:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    a666:	2300      	movs	r3, #0
    a668:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    a66c:	9b00      	ldr	r3, [sp, #0]
    a66e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    a672:	2300      	movs	r3, #0
    a674:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    a678:	2300      	movs	r3, #0
    a67a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    a67e:	2300      	movs	r3, #0
    a680:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    a682:	2300      	movs	r3, #0
    a684:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    a688:	9b01      	ldr	r3, [sp, #4]
    a68a:	3380      	adds	r3, #128	; 0x80
    a68c:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    a68e:	2300      	movs	r3, #0
    a690:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    a692:	2300      	movs	r3, #0
    a694:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    a698:	e02d      	b.n	a6f6 <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    a69a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    a69e:	4619      	mov	r1, r3
    a6a0:	9801      	ldr	r0, [sp, #4]
    a6a2:	f000 fad1 	bl	ac48 <FlexCAN_GetPayloadSize>
    a6a6:	4603      	mov	r3, r0
    a6a8:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    a6ac:	f89d 2017 	ldrb.w	r2, [sp, #23]
    a6b0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    a6b4:	4413      	add	r3, r2
    a6b6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    a6ba:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    a6be:	9a07      	ldr	r2, [sp, #28]
    a6c0:	fbb2 f3f3 	udiv	r3, r2, r3
    a6c4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    a6c8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    a6cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a6d0:	429a      	cmp	r2, r3
    a6d2:	d815      	bhi.n	a700 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    a6d4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    a6d8:	3380      	adds	r3, #128	; 0x80
    a6da:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    a6de:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    a6e2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    a6e6:	1ad3      	subs	r3, r2, r3
    a6e8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    a6ec:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    a6f0:	3301      	adds	r3, #1
    a6f2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    a6f6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    a6fa:	2b00      	cmp	r3, #0
    a6fc:	d0cd      	beq.n	a69a <FlexCAN_GetMsgBuffRegion+0x4e>
    a6fe:	e000      	b.n	a702 <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    a700:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    a702:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    a706:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a70a:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    a70e:	fbb3 f0f2 	udiv	r0, r3, r2
    a712:	fb00 f202 	mul.w	r2, r0, r2
    a716:	1a9b      	subs	r3, r3, r2
    a718:	b2db      	uxtb	r3, r3
    a71a:	461a      	mov	r2, r3
    a71c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    a720:	089b      	lsrs	r3, r3, #2
    a722:	b2db      	uxtb	r3, r3
    a724:	fb02 f303 	mul.w	r3, r2, r3
    a728:	440b      	add	r3, r1
    a72a:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    a72c:	9b06      	ldr	r3, [sp, #24]
    a72e:	009b      	lsls	r3, r3, #2
    a730:	9a04      	ldr	r2, [sp, #16]
    a732:	4413      	add	r3, r2
    a734:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    a736:	9b03      	ldr	r3, [sp, #12]
}
    a738:	4618      	mov	r0, r3
    a73a:	b00b      	add	sp, #44	; 0x2c
    a73c:	f85d fb04 	ldr.w	pc, [sp], #4

0000a740 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    a740:	b084      	sub	sp, #16
    a742:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    a744:	2300      	movs	r3, #0
    a746:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    a748:	2300      	movs	r3, #0
    a74a:	9303      	str	r3, [sp, #12]
    a74c:	e00e      	b.n	a76c <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    a74e:	4a0b      	ldr	r2, [pc, #44]	; (a77c <FlexCAN_GetMaxMbNum+0x3c>)
    a750:	9b03      	ldr	r3, [sp, #12]
    a752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a756:	9a01      	ldr	r2, [sp, #4]
    a758:	429a      	cmp	r2, r3
    a75a:	d104      	bne.n	a766 <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    a75c:	4a08      	ldr	r2, [pc, #32]	; (a780 <FlexCAN_GetMaxMbNum+0x40>)
    a75e:	9b03      	ldr	r3, [sp, #12]
    a760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a764:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    a766:	9b03      	ldr	r3, [sp, #12]
    a768:	3301      	adds	r3, #1
    a76a:	9303      	str	r3, [sp, #12]
    a76c:	9b03      	ldr	r3, [sp, #12]
    a76e:	2b02      	cmp	r3, #2
    a770:	d9ed      	bls.n	a74e <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    a772:	9b02      	ldr	r3, [sp, #8]
}
    a774:	4618      	mov	r0, r3
    a776:	b004      	add	sp, #16
    a778:	4770      	bx	lr
    a77a:	bf00      	nop
    a77c:	0000e6b4 	.word	0x0000e6b4
    a780:	0000e6c0 	.word	0x0000e6c0

0000a784 <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    a784:	b500      	push	{lr}
    a786:	b087      	sub	sp, #28
    a788:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    a78a:	2300      	movs	r3, #0
    a78c:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    a78e:	2300      	movs	r3, #0
    a790:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a792:	2100      	movs	r1, #0
    a794:	4820      	ldr	r0, [pc, #128]	; (a818 <FlexCAN_EnterFreezeMode+0x94>)
    a796:	f7f6 fd23 	bl	11e0 <OsIf_MicrosToTicks>
    a79a:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    a79c:	2300      	movs	r3, #0
    a79e:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    a7a0:	f001 fad2 	bl	bd48 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    a7a4:	9b01      	ldr	r3, [sp, #4]
    a7a6:	681b      	ldr	r3, [r3, #0]
    a7a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    a7ac:	9b01      	ldr	r3, [sp, #4]
    a7ae:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    a7b0:	9b01      	ldr	r3, [sp, #4]
    a7b2:	681b      	ldr	r3, [r3, #0]
    a7b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    a7b8:	9b01      	ldr	r3, [sp, #4]
    a7ba:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    a7bc:	9b01      	ldr	r3, [sp, #4]
    a7be:	681b      	ldr	r3, [r3, #0]
    a7c0:	2b00      	cmp	r3, #0
    a7c2:	da05      	bge.n	a7d0 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    a7c4:	9b01      	ldr	r3, [sp, #4]
    a7c6:	681b      	ldr	r3, [r3, #0]
    a7c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    a7cc:	9b01      	ldr	r3, [sp, #4]
    a7ce:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    a7d0:	f001 fae6 	bl	bda0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a7d4:	2000      	movs	r0, #0
    a7d6:	f7f6 fcb7 	bl	1148 <OsIf_GetCounter>
    a7da:	4603      	mov	r3, r0
    a7dc:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    a7de:	e00f      	b.n	a800 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a7e0:	ab02      	add	r3, sp, #8
    a7e2:	2100      	movs	r1, #0
    a7e4:	4618      	mov	r0, r3
    a7e6:	f7f6 fcc8 	bl	117a <OsIf_GetElapsed>
    a7ea:	4602      	mov	r2, r0
    a7ec:	9b05      	ldr	r3, [sp, #20]
    a7ee:	4413      	add	r3, r2
    a7f0:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    a7f2:	9a05      	ldr	r2, [sp, #20]
    a7f4:	9b03      	ldr	r3, [sp, #12]
    a7f6:	429a      	cmp	r2, r3
    a7f8:	d302      	bcc.n	a800 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    a7fa:	2303      	movs	r3, #3
    a7fc:	9304      	str	r3, [sp, #16]
            break;
    a7fe:	e005      	b.n	a80c <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    a800:	9b01      	ldr	r3, [sp, #4]
    a802:	681b      	ldr	r3, [r3, #0]
    a804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a808:	2b00      	cmp	r3, #0
    a80a:	d0e9      	beq.n	a7e0 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    a80c:	9b04      	ldr	r3, [sp, #16]
}
    a80e:	4618      	mov	r0, r3
    a810:	b007      	add	sp, #28
    a812:	f85d fb04 	ldr.w	pc, [sp], #4
    a816:	bf00      	nop
    a818:	000f4240 	.word	0x000f4240

0000a81c <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    a81c:	b500      	push	{lr}
    a81e:	b087      	sub	sp, #28
    a820:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    a822:	2300      	movs	r3, #0
    a824:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    a826:	2300      	movs	r3, #0
    a828:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a82a:	2100      	movs	r1, #0
    a82c:	4818      	ldr	r0, [pc, #96]	; (a890 <FlexCAN_Enable+0x74>)
    a82e:	f7f6 fcd7 	bl	11e0 <OsIf_MicrosToTicks>
    a832:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    a834:	2300      	movs	r3, #0
    a836:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    a838:	f001 fad8 	bl	bdec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    a83c:	9b01      	ldr	r3, [sp, #4]
    a83e:	681b      	ldr	r3, [r3, #0]
    a840:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    a844:	9b01      	ldr	r3, [sp, #4]
    a846:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    a848:	f001 fafc 	bl	be44 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a84c:	2000      	movs	r0, #0
    a84e:	f7f6 fc7b 	bl	1148 <OsIf_GetCounter>
    a852:	4603      	mov	r3, r0
    a854:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    a856:	e00f      	b.n	a878 <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a858:	ab02      	add	r3, sp, #8
    a85a:	2100      	movs	r1, #0
    a85c:	4618      	mov	r0, r3
    a85e:	f7f6 fc8c 	bl	117a <OsIf_GetElapsed>
    a862:	4602      	mov	r2, r0
    a864:	9b05      	ldr	r3, [sp, #20]
    a866:	4413      	add	r3, r2
    a868:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    a86a:	9a05      	ldr	r2, [sp, #20]
    a86c:	9b03      	ldr	r3, [sp, #12]
    a86e:	429a      	cmp	r2, r3
    a870:	d302      	bcc.n	a878 <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    a872:	2303      	movs	r3, #3
    a874:	9304      	str	r3, [sp, #16]
            break;
    a876:	e005      	b.n	a884 <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    a878:	9b01      	ldr	r3, [sp, #4]
    a87a:	681b      	ldr	r3, [r3, #0]
    a87c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a880:	2b00      	cmp	r3, #0
    a882:	d0e9      	beq.n	a858 <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    a884:	9b04      	ldr	r3, [sp, #16]
}
    a886:	4618      	mov	r0, r3
    a888:	b007      	add	sp, #28
    a88a:	f85d fb04 	ldr.w	pc, [sp], #4
    a88e:	bf00      	nop
    a890:	000f4240 	.word	0x000f4240

0000a894 <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    a894:	b500      	push	{lr}
    a896:	b087      	sub	sp, #28
    a898:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    a89a:	2300      	movs	r3, #0
    a89c:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    a89e:	2300      	movs	r3, #0
    a8a0:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a8a2:	2100      	movs	r1, #0
    a8a4:	481b      	ldr	r0, [pc, #108]	; (a914 <FlexCAN_ExitFreezeMode+0x80>)
    a8a6:	f7f6 fc9b 	bl	11e0 <OsIf_MicrosToTicks>
    a8aa:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    a8ac:	2300      	movs	r3, #0
    a8ae:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    a8b0:	f001 faee 	bl	be90 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    a8b4:	9b01      	ldr	r3, [sp, #4]
    a8b6:	681b      	ldr	r3, [r3, #0]
    a8b8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    a8bc:	9b01      	ldr	r3, [sp, #4]
    a8be:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    a8c0:	9b01      	ldr	r3, [sp, #4]
    a8c2:	681b      	ldr	r3, [r3, #0]
    a8c4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    a8c8:	9b01      	ldr	r3, [sp, #4]
    a8ca:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    a8cc:	f001 fb0c 	bl	bee8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a8d0:	2000      	movs	r0, #0
    a8d2:	f7f6 fc39 	bl	1148 <OsIf_GetCounter>
    a8d6:	4603      	mov	r3, r0
    a8d8:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    a8da:	e00f      	b.n	a8fc <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a8dc:	ab02      	add	r3, sp, #8
    a8de:	2100      	movs	r1, #0
    a8e0:	4618      	mov	r0, r3
    a8e2:	f7f6 fc4a 	bl	117a <OsIf_GetElapsed>
    a8e6:	4602      	mov	r2, r0
    a8e8:	9b05      	ldr	r3, [sp, #20]
    a8ea:	4413      	add	r3, r2
    a8ec:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    a8ee:	9a05      	ldr	r2, [sp, #20]
    a8f0:	9b03      	ldr	r3, [sp, #12]
    a8f2:	429a      	cmp	r2, r3
    a8f4:	d302      	bcc.n	a8fc <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    a8f6:	2303      	movs	r3, #3
    a8f8:	9304      	str	r3, [sp, #16]
            break;
    a8fa:	e005      	b.n	a908 <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    a8fc:	9b01      	ldr	r3, [sp, #4]
    a8fe:	681b      	ldr	r3, [r3, #0]
    a900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a904:	2b00      	cmp	r3, #0
    a906:	d1e9      	bne.n	a8dc <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    a908:	9b04      	ldr	r3, [sp, #16]
}
    a90a:	4618      	mov	r0, r3
    a90c:	b007      	add	sp, #28
    a90e:	f85d fb04 	ldr.w	pc, [sp], #4
    a912:	bf00      	nop
    a914:	000f4240 	.word	0x000f4240

0000a918 <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    a918:	b500      	push	{lr}
    a91a:	b087      	sub	sp, #28
    a91c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    a91e:	2300      	movs	r3, #0
    a920:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    a922:	2300      	movs	r3, #0
    a924:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a926:	2100      	movs	r1, #0
    a928:	481a      	ldr	r0, [pc, #104]	; (a994 <FlexCAN_Disable+0x7c>)
    a92a:	f7f6 fc59 	bl	11e0 <OsIf_MicrosToTicks>
    a92e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    a930:	2300      	movs	r3, #0
    a932:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    a934:	9b01      	ldr	r3, [sp, #4]
    a936:	681b      	ldr	r3, [r3, #0]
    a938:	2b00      	cmp	r3, #0
    a93a:	db25      	blt.n	a988 <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    a93c:	f001 fafa 	bl	bf34 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    a940:	9b01      	ldr	r3, [sp, #4]
    a942:	681b      	ldr	r3, [r3, #0]
    a944:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    a948:	9b01      	ldr	r3, [sp, #4]
    a94a:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    a94c:	f001 fb1e 	bl	bf8c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a950:	2000      	movs	r0, #0
    a952:	f7f6 fbf9 	bl	1148 <OsIf_GetCounter>
    a956:	4603      	mov	r3, r0
    a958:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    a95a:	e00f      	b.n	a97c <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a95c:	ab02      	add	r3, sp, #8
    a95e:	2100      	movs	r1, #0
    a960:	4618      	mov	r0, r3
    a962:	f7f6 fc0a 	bl	117a <OsIf_GetElapsed>
    a966:	4602      	mov	r2, r0
    a968:	9b05      	ldr	r3, [sp, #20]
    a96a:	4413      	add	r3, r2
    a96c:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    a96e:	9a05      	ldr	r2, [sp, #20]
    a970:	9b03      	ldr	r3, [sp, #12]
    a972:	429a      	cmp	r2, r3
    a974:	d302      	bcc.n	a97c <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    a976:	2303      	movs	r3, #3
    a978:	9304      	str	r3, [sp, #16]
                break;
    a97a:	e005      	b.n	a988 <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    a97c:	9b01      	ldr	r3, [sp, #4]
    a97e:	681b      	ldr	r3, [r3, #0]
    a980:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    a984:	2b00      	cmp	r3, #0
    a986:	d0e9      	beq.n	a95c <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    a988:	9b04      	ldr	r3, [sp, #16]
}
    a98a:	4618      	mov	r0, r3
    a98c:	b007      	add	sp, #28
    a98e:	f85d fb04 	ldr.w	pc, [sp], #4
    a992:	bf00      	nop
    a994:	000f4240 	.word	0x000f4240

0000a998 <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    a998:	b500      	push	{lr}
    a99a:	b087      	sub	sp, #28
    a99c:	9003      	str	r0, [sp, #12]
    a99e:	9102      	str	r1, [sp, #8]
    a9a0:	4613      	mov	r3, r2
    a9a2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    a9a6:	9b02      	ldr	r3, [sp, #8]
    a9a8:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    a9aa:	f001 fb15 	bl	bfd8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    a9ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9b2:	2b00      	cmp	r3, #0
    a9b4:	d020      	beq.n	a9f8 <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    a9b6:	9b02      	ldr	r3, [sp, #8]
    a9b8:	f244 0201 	movw	r2, #16385	; 0x4001
    a9bc:	4293      	cmp	r3, r2
    a9be:	d106      	bne.n	a9ce <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    a9c0:	9b03      	ldr	r3, [sp, #12]
    a9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a9c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    a9c8:	9b03      	ldr	r3, [sp, #12]
    a9ca:	635a      	str	r2, [r3, #52]	; 0x34
    a9cc:	e03a      	b.n	aa44 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    a9ce:	9b02      	ldr	r3, [sp, #8]
    a9d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    a9d4:	d003      	beq.n	a9de <FlexCAN_SetErrIntCmd+0x46>
    a9d6:	9b02      	ldr	r3, [sp, #8]
    a9d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    a9dc:	d105      	bne.n	a9ea <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    a9de:	9b03      	ldr	r3, [sp, #12]
    a9e0:	681b      	ldr	r3, [r3, #0]
    a9e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    a9e6:	9b03      	ldr	r3, [sp, #12]
    a9e8:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    a9ea:	9b03      	ldr	r3, [sp, #12]
    a9ec:	685a      	ldr	r2, [r3, #4]
    a9ee:	9b05      	ldr	r3, [sp, #20]
    a9f0:	431a      	orrs	r2, r3
    a9f2:	9b03      	ldr	r3, [sp, #12]
    a9f4:	605a      	str	r2, [r3, #4]
    a9f6:	e025      	b.n	aa44 <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    a9f8:	9b02      	ldr	r3, [sp, #8]
    a9fa:	f244 0201 	movw	r2, #16385	; 0x4001
    a9fe:	4293      	cmp	r3, r2
    aa00:	d106      	bne.n	aa10 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    aa02:	9b03      	ldr	r3, [sp, #12]
    aa04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    aa06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    aa0a:	9b03      	ldr	r3, [sp, #12]
    aa0c:	635a      	str	r2, [r3, #52]	; 0x34
    aa0e:	e019      	b.n	aa44 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    aa10:	9b03      	ldr	r3, [sp, #12]
    aa12:	685a      	ldr	r2, [r3, #4]
    aa14:	9b05      	ldr	r3, [sp, #20]
    aa16:	43db      	mvns	r3, r3
    aa18:	401a      	ands	r2, r3
    aa1a:	9b03      	ldr	r3, [sp, #12]
    aa1c:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    aa1e:	9b03      	ldr	r3, [sp, #12]
    aa20:	685b      	ldr	r3, [r3, #4]
    aa22:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    aa24:	9b05      	ldr	r3, [sp, #20]
    aa26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    aa2a:	2b00      	cmp	r3, #0
    aa2c:	d10a      	bne.n	aa44 <FlexCAN_SetErrIntCmd+0xac>
    aa2e:	9b05      	ldr	r3, [sp, #20]
    aa30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    aa34:	2b00      	cmp	r3, #0
    aa36:	d105      	bne.n	aa44 <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    aa38:	9b03      	ldr	r3, [sp, #12]
    aa3a:	681b      	ldr	r3, [r3, #0]
    aa3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    aa40:	9b03      	ldr	r3, [sp, #12]
    aa42:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    aa44:	f001 faf4 	bl	c030 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    aa48:	bf00      	nop
    aa4a:	b007      	add	sp, #28
    aa4c:	f85d fb04 	ldr.w	pc, [sp], #4

0000aa50 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    aa50:	b500      	push	{lr}
    aa52:	b087      	sub	sp, #28
    aa54:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    aa56:	2300      	movs	r3, #0
    aa58:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    aa5a:	2300      	movs	r3, #0
    aa5c:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    aa5e:	2100      	movs	r1, #0
    aa60:	4833      	ldr	r0, [pc, #204]	; (ab30 <FlexCAN_Init+0xe0>)
    aa62:	f7f6 fbbd 	bl	11e0 <OsIf_MicrosToTicks>
    aa66:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    aa68:	2300      	movs	r3, #0
    aa6a:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    aa6c:	9b01      	ldr	r3, [sp, #4]
    aa6e:	681b      	ldr	r3, [r3, #0]
    aa70:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    aa74:	9b01      	ldr	r3, [sp, #4]
    aa76:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    aa78:	2000      	movs	r0, #0
    aa7a:	f7f6 fb65 	bl	1148 <OsIf_GetCounter>
    aa7e:	4603      	mov	r3, r0
    aa80:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    aa82:	e00f      	b.n	aaa4 <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    aa84:	ab02      	add	r3, sp, #8
    aa86:	2100      	movs	r1, #0
    aa88:	4618      	mov	r0, r3
    aa8a:	f7f6 fb76 	bl	117a <OsIf_GetElapsed>
    aa8e:	4602      	mov	r2, r0
    aa90:	9b05      	ldr	r3, [sp, #20]
    aa92:	4413      	add	r3, r2
    aa94:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    aa96:	9a05      	ldr	r2, [sp, #20]
    aa98:	9b03      	ldr	r3, [sp, #12]
    aa9a:	429a      	cmp	r2, r3
    aa9c:	d302      	bcc.n	aaa4 <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    aa9e:	2303      	movs	r3, #3
    aaa0:	9304      	str	r3, [sp, #16]
            break;
    aaa2:	e005      	b.n	aab0 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    aaa4:	9b01      	ldr	r3, [sp, #4]
    aaa6:	681b      	ldr	r3, [r3, #0]
    aaa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    aaac:	2b00      	cmp	r3, #0
    aaae:	d1e9      	bne.n	aa84 <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    aab0:	9b04      	ldr	r3, [sp, #16]
    aab2:	2b00      	cmp	r3, #0
    aab4:	d136      	bne.n	ab24 <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    aab6:	9b01      	ldr	r3, [sp, #4]
    aab8:	681b      	ldr	r3, [r3, #0]
    aaba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    aabe:	9b01      	ldr	r3, [sp, #4]
    aac0:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    aac2:	9801      	ldr	r0, [sp, #4]
    aac4:	f7ff fd40 	bl	a548 <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    aac8:	9b01      	ldr	r3, [sp, #4]
    aaca:	f04f 32ff 	mov.w	r2, #4294967295
    aace:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    aad0:	9b01      	ldr	r3, [sp, #4]
    aad2:	f04f 32ff 	mov.w	r2, #4294967295
    aad6:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    aad8:	9b01      	ldr	r3, [sp, #4]
    aada:	f04f 32ff 	mov.w	r2, #4294967295
    aade:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    aae0:	9b01      	ldr	r3, [sp, #4]
    aae2:	2200      	movs	r2, #0
    aae4:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    aae6:	9b01      	ldr	r3, [sp, #4]
    aae8:	f04f 32ff 	mov.w	r2, #4294967295
    aaec:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    aaee:	9b01      	ldr	r3, [sp, #4]
    aaf0:	4a10      	ldr	r2, [pc, #64]	; (ab34 <FlexCAN_Init+0xe4>)
    aaf2:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    aaf4:	9b01      	ldr	r3, [sp, #4]
    aaf6:	2200      	movs	r2, #0
    aaf8:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    aafa:	9b01      	ldr	r3, [sp, #4]
    aafc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    ab00:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    ab02:	9b01      	ldr	r3, [sp, #4]
    ab04:	2200      	movs	r2, #0
    ab06:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    ab08:	9801      	ldr	r0, [sp, #4]
    ab0a:	f000 f85b 	bl	abc4 <FlexCAN_IsFDAvailable>
    ab0e:	4603      	mov	r3, r0
    ab10:	2b00      	cmp	r3, #0
    ab12:	d007      	beq.n	ab24 <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    ab14:	9b01      	ldr	r3, [sp, #4]
    ab16:	2200      	movs	r2, #0
    ab18:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    ab1c:	9b01      	ldr	r3, [sp, #4]
    ab1e:	4a06      	ldr	r2, [pc, #24]	; (ab38 <FlexCAN_Init+0xe8>)
    ab20:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    ab24:	9b04      	ldr	r3, [sp, #16]
}
    ab26:	4618      	mov	r0, r3
    ab28:	b007      	add	sp, #28
    ab2a:	f85d fb04 	ldr.w	pc, [sp], #4
    ab2e:	bf00      	nop
    ab30:	000f4240 	.word	0x000f4240
    ab34:	003b0006 	.word	0x003b0006
    ab38:	80004100 	.word	0x80004100

0000ab3c <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    ab3c:	b500      	push	{lr}
    ab3e:	b087      	sub	sp, #28
    ab40:	9001      	str	r0, [sp, #4]
    ab42:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    ab44:	9801      	ldr	r0, [sp, #4]
    ab46:	f7ff fdfb 	bl	a740 <FlexCAN_GetMaxMbNum>
    ab4a:	4603      	mov	r3, r0
    ab4c:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    ab50:	2300      	movs	r3, #0
    ab52:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    ab54:	9b01      	ldr	r3, [sp, #4]
    ab56:	681b      	ldr	r3, [r3, #0]
    ab58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ab5c:	2b00      	cmp	r3, #0
    ab5e:	d001      	beq.n	ab64 <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    ab60:	2301      	movs	r3, #1
    ab62:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    ab64:	9b04      	ldr	r3, [sp, #16]
    ab66:	2b00      	cmp	r3, #0
    ab68:	d127      	bne.n	abba <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    ab6a:	9b01      	ldr	r3, [sp, #4]
    ab6c:	681b      	ldr	r3, [r3, #0]
    ab6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    ab72:	9b01      	ldr	r3, [sp, #4]
    ab74:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    ab76:	9b01      	ldr	r3, [sp, #4]
    ab78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ab7a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    ab7e:	9b00      	ldr	r3, [sp, #0]
    ab80:	061b      	lsls	r3, r3, #24
    ab82:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    ab86:	431a      	orrs	r2, r3
    ab88:	9b01      	ldr	r3, [sp, #4]
    ab8a:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    ab8c:	9b01      	ldr	r3, [sp, #4]
    ab8e:	f04f 32ff 	mov.w	r2, #4294967295
    ab92:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    ab94:	2300      	movs	r3, #0
    ab96:	9305      	str	r3, [sp, #20]
    ab98:	e00a      	b.n	abb0 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    ab9a:	9b01      	ldr	r3, [sp, #4]
    ab9c:	9a05      	ldr	r2, [sp, #20]
    ab9e:	f502 7208 	add.w	r2, r2, #544	; 0x220
    aba2:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    aba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    abaa:	9b05      	ldr	r3, [sp, #20]
    abac:	3301      	adds	r3, #1
    abae:	9305      	str	r3, [sp, #20]
    abb0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    abb4:	9a05      	ldr	r2, [sp, #20]
    abb6:	429a      	cmp	r2, r3
    abb8:	d3ef      	bcc.n	ab9a <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    abba:	9b04      	ldr	r3, [sp, #16]
}
    abbc:	4618      	mov	r0, r3
    abbe:	b007      	add	sp, #28
    abc0:	f85d fb04 	ldr.w	pc, [sp], #4

0000abc4 <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    abc4:	b084      	sub	sp, #16
    abc6:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    abc8:	2300      	movs	r3, #0
    abca:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    abcc:	2300      	movs	r3, #0
    abce:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    abd2:	2300      	movs	r3, #0
    abd4:	9303      	str	r3, [sp, #12]
    abd6:	e00d      	b.n	abf4 <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    abd8:	4a0a      	ldr	r2, [pc, #40]	; (ac04 <FlexCAN_IsFDAvailable+0x40>)
    abda:	9b03      	ldr	r3, [sp, #12]
    abdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abe0:	9a01      	ldr	r2, [sp, #4]
    abe2:	429a      	cmp	r2, r3
    abe4:	d103      	bne.n	abee <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    abe6:	2301      	movs	r3, #1
    abe8:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    abec:	e005      	b.n	abfa <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    abee:	9b03      	ldr	r3, [sp, #12]
    abf0:	3301      	adds	r3, #1
    abf2:	9303      	str	r3, [sp, #12]
    abf4:	9b03      	ldr	r3, [sp, #12]
    abf6:	2b00      	cmp	r3, #0
    abf8:	d0ee      	beq.n	abd8 <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    abfa:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    abfe:	4618      	mov	r0, r3
    ac00:	b004      	add	sp, #16
    ac02:	4770      	bx	lr
    ac04:	0000e6cc 	.word	0x0000e6cc

0000ac08 <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    ac08:	b500      	push	{lr}
    ac0a:	b085      	sub	sp, #20
    ac0c:	9001      	str	r0, [sp, #4]
    ac0e:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    ac10:	9801      	ldr	r0, [sp, #4]
    ac12:	f7ff fbd6 	bl	a3c2 <FlexCAN_IsFDEnabled>
    ac16:	4603      	mov	r3, r0
    ac18:	2b00      	cmp	r3, #0
    ac1a:	d011      	beq.n	ac40 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    ac1c:	9b01      	ldr	r3, [sp, #4]
    ac1e:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ac22:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    ac24:	9b03      	ldr	r3, [sp, #12]
    ac26:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    ac2a:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    ac2c:	9b00      	ldr	r3, [sp, #0]
    ac2e:	681b      	ldr	r3, [r3, #0]
    ac30:	041b      	lsls	r3, r3, #16
    ac32:	9a03      	ldr	r2, [sp, #12]
    ac34:	4313      	orrs	r3, r2
    ac36:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    ac38:	9b01      	ldr	r3, [sp, #4]
    ac3a:	9a03      	ldr	r2, [sp, #12]
    ac3c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    ac40:	bf00      	nop
    ac42:	b005      	add	sp, #20
    ac44:	f85d fb04 	ldr.w	pc, [sp], #4

0000ac48 <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    ac48:	b500      	push	{lr}
    ac4a:	b085      	sub	sp, #20
    ac4c:	9001      	str	r0, [sp, #4]
    ac4e:	460b      	mov	r3, r1
    ac50:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    ac54:	2300      	movs	r3, #0
    ac56:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    ac58:	9801      	ldr	r0, [sp, #4]
    ac5a:	f7ff ffb3 	bl	abc4 <FlexCAN_IsFDAvailable>
    ac5e:	4603      	mov	r3, r0
    ac60:	2b00      	cmp	r3, #0
    ac62:	d019      	beq.n	ac98 <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    ac64:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ac68:	2b00      	cmp	r3, #0
    ac6a:	d10a      	bne.n	ac82 <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ac6c:	9b01      	ldr	r3, [sp, #4]
    ac6e:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ac72:	0c1b      	lsrs	r3, r3, #16
    ac74:	f003 0303 	and.w	r3, r3, #3
    ac78:	2208      	movs	r2, #8
    ac7a:	fa02 f303 	lsl.w	r3, r2, r3
    ac7e:	9303      	str	r3, [sp, #12]
    ac80:	e00c      	b.n	ac9c <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ac82:	9b01      	ldr	r3, [sp, #4]
    ac84:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ac88:	0c1b      	lsrs	r3, r3, #16
    ac8a:	f003 0303 	and.w	r3, r3, #3
    ac8e:	2208      	movs	r2, #8
    ac90:	fa02 f303 	lsl.w	r3, r2, r3
    ac94:	9303      	str	r3, [sp, #12]
    ac96:	e001      	b.n	ac9c <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    ac98:	2308      	movs	r3, #8
    ac9a:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    ac9c:	9b03      	ldr	r3, [sp, #12]
    ac9e:	b2db      	uxtb	r3, r3
}
    aca0:	4618      	mov	r0, r3
    aca2:	b005      	add	sp, #20
    aca4:	f85d fb04 	ldr.w	pc, [sp], #4

0000aca8 <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    aca8:	b500      	push	{lr}
    acaa:	b087      	sub	sp, #28
    acac:	9001      	str	r0, [sp, #4]
    acae:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    acb0:	2308      	movs	r3, #8
    acb2:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    acb6:	f44f 7300 	mov.w	r3, #512	; 0x200
    acba:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    acbc:	2308      	movs	r3, #8
    acbe:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    acc2:	2300      	movs	r3, #0
    acc4:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    acc8:	2300      	movs	r3, #0
    acca:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    acce:	2300      	movs	r3, #0
    acd0:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    acd4:	2300      	movs	r3, #0
    acd6:	f88d 3015 	strb.w	r3, [sp, #21]
    acda:	e024      	b.n	ad26 <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    acdc:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ace0:	4619      	mov	r1, r3
    ace2:	9801      	ldr	r0, [sp, #4]
    ace4:	f7ff ffb0 	bl	ac48 <FlexCAN_GetPayloadSize>
    ace8:	4603      	mov	r3, r0
    acea:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    acee:	f89d 2017 	ldrb.w	r2, [sp, #23]
    acf2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    acf6:	4413      	add	r3, r2
    acf8:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    acfc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    ad00:	9a04      	ldr	r2, [sp, #16]
    ad02:	fbb2 f3f3 	udiv	r3, r2, r3
    ad06:	b2da      	uxtb	r2, r3
    ad08:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ad0c:	4413      	add	r3, r2
    ad0e:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    ad12:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ad16:	9a00      	ldr	r2, [sp, #0]
    ad18:	429a      	cmp	r2, r3
    ad1a:	d309      	bcc.n	ad30 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ad1c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ad20:	3301      	adds	r3, #1
    ad22:	f88d 3015 	strb.w	r3, [sp, #21]
    ad26:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ad2a:	2b00      	cmp	r3, #0
    ad2c:	d0d6      	beq.n	acdc <FlexCAN_GetMbPayloadSize+0x34>
    ad2e:	e000      	b.n	ad32 <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    ad30:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    ad32:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    ad36:	4618      	mov	r0, r3
    ad38:	b007      	add	sp, #28
    ad3a:	f85d fb04 	ldr.w	pc, [sp], #4

0000ad3e <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    ad3e:	b500      	push	{lr}
    ad40:	b085      	sub	sp, #20
    ad42:	9001      	str	r0, [sp, #4]
    ad44:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    ad46:	9900      	ldr	r1, [sp, #0]
    ad48:	9801      	ldr	r0, [sp, #4]
    ad4a:	f7ff fc7f 	bl	a64c <FlexCAN_GetMsgBuffRegion>
    ad4e:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    ad50:	9b03      	ldr	r3, [sp, #12]
    ad52:	681b      	ldr	r3, [r3, #0]
}
    ad54:	bf00      	nop
    ad56:	b005      	add	sp, #20
    ad58:	f85d fb04 	ldr.w	pc, [sp], #4

0000ad5c <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    ad5c:	b500      	push	{lr}
    ad5e:	b087      	sub	sp, #28
    ad60:	9003      	str	r0, [sp, #12]
    ad62:	9201      	str	r2, [sp, #4]
    ad64:	461a      	mov	r2, r3
    ad66:	460b      	mov	r3, r1
    ad68:	f88d 300b 	strb.w	r3, [sp, #11]
    ad6c:	4613      	mov	r3, r2
    ad6e:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    ad72:	2300      	movs	r3, #0
    ad74:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    ad76:	9b01      	ldr	r3, [sp, #4]
    ad78:	f003 031f 	and.w	r3, r3, #31
    ad7c:	2201      	movs	r2, #1
    ad7e:	fa02 f303 	lsl.w	r3, r2, r3
    ad82:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    ad84:	9b01      	ldr	r3, [sp, #4]
    ad86:	2b1f      	cmp	r3, #31
    ad88:	d837      	bhi.n	adfa <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    ad8a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ad8e:	2b00      	cmp	r3, #0
    ad90:	d01b      	beq.n	adca <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    ad92:	f001 fcf9 	bl	c788 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    ad96:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad9a:	4a1a      	ldr	r2, [pc, #104]	; (ae04 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ad9c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    ada0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ada4:	9a04      	ldr	r2, [sp, #16]
    ada6:	430a      	orrs	r2, r1
    ada8:	4916      	ldr	r1, [pc, #88]	; (ae04 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    adaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    adae:	f89d 3020 	ldrb.w	r3, [sp, #32]
    adb2:	2b00      	cmp	r3, #0
    adb4:	d006      	beq.n	adc4 <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    adb6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    adba:	4a12      	ldr	r2, [pc, #72]	; (ae04 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    adbc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    adc0:	9b03      	ldr	r3, [sp, #12]
    adc2:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    adc4:	f001 fd0c 	bl	c7e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    adc8:	e017      	b.n	adfa <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    adca:	f001 fcdd 	bl	c788 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    adce:	f89d 300b 	ldrb.w	r3, [sp, #11]
    add2:	4a0c      	ldr	r2, [pc, #48]	; (ae04 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    add4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    add8:	9b04      	ldr	r3, [sp, #16]
    adda:	43da      	mvns	r2, r3
    addc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ade0:	400a      	ands	r2, r1
    ade2:	4908      	ldr	r1, [pc, #32]	; (ae04 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    ade4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    ade8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    adec:	4a05      	ldr	r2, [pc, #20]	; (ae04 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    adee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    adf2:	9b03      	ldr	r3, [sp, #12]
    adf4:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    adf6:	f001 fcf3 	bl	c7e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    adfa:	9b05      	ldr	r3, [sp, #20]
}
    adfc:	4618      	mov	r0, r3
    adfe:	b007      	add	sp, #28
    ae00:	f85d fb04 	ldr.w	pc, [sp], #4
    ae04:	1fff8fa8 	.word	0x1fff8fa8

0000ae08 <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    ae08:	b500      	push	{lr}
    ae0a:	b087      	sub	sp, #28
    ae0c:	9003      	str	r0, [sp, #12]
    ae0e:	9201      	str	r2, [sp, #4]
    ae10:	461a      	mov	r2, r3
    ae12:	460b      	mov	r3, r1
    ae14:	f88d 300b 	strb.w	r3, [sp, #11]
    ae18:	4613      	mov	r3, r2
    ae1a:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    ae1e:	9b01      	ldr	r3, [sp, #4]
    ae20:	f003 031f 	and.w	r3, r3, #31
    ae24:	2201      	movs	r2, #1
    ae26:	fa02 f303 	lsl.w	r3, r2, r3
    ae2a:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    ae2c:	9b01      	ldr	r3, [sp, #4]
    ae2e:	2b1f      	cmp	r3, #31
    ae30:	d818      	bhi.n	ae64 <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    ae32:	f001 fa6b 	bl	c30c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    ae36:	9b03      	ldr	r3, [sp, #12]
    ae38:	6a99      	ldr	r1, [r3, #40]	; 0x28
    ae3a:	9b05      	ldr	r3, [sp, #20]
    ae3c:	43da      	mvns	r2, r3
    ae3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae42:	400a      	ands	r2, r1
    ae44:	4909      	ldr	r1, [pc, #36]	; (ae6c <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    ae46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    ae4a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ae4e:	2b00      	cmp	r3, #0
    ae50:	d006      	beq.n	ae60 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    ae52:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ae56:	4a05      	ldr	r2, [pc, #20]	; (ae6c <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    ae58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ae5c:	9b03      	ldr	r3, [sp, #12]
    ae5e:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    ae60:	f001 fa80 	bl	c364 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    ae64:	bf00      	nop
    ae66:	b007      	add	sp, #28
    ae68:	f85d fb04 	ldr.w	pc, [sp], #4
    ae6c:	1fff8fa8 	.word	0x1fff8fa8

0000ae70 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    ae70:	b082      	sub	sp, #8
    ae72:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    ae74:	9b01      	ldr	r3, [sp, #4]
    ae76:	2200      	movs	r2, #0
    ae78:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    ae7a:	bf00      	nop
    ae7c:	b002      	add	sp, #8
    ae7e:	4770      	bx	lr

0000ae80 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    ae80:	b082      	sub	sp, #8
    ae82:	9001      	str	r0, [sp, #4]
    ae84:	460b      	mov	r3, r1
    ae86:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    ae8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ae8e:	4a04      	ldr	r2, [pc, #16]	; (aea0 <FlexCAN_EnableInterrupts+0x20>)
    ae90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ae94:	9b01      	ldr	r3, [sp, #4]
    ae96:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    ae98:	bf00      	nop
    ae9a:	b002      	add	sp, #8
    ae9c:	4770      	bx	lr
    ae9e:	bf00      	nop
    aea0:	1fff8fa8 	.word	0x1fff8fa8

0000aea4 <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    aea4:	b500      	push	{lr}
    aea6:	b087      	sub	sp, #28
    aea8:	9003      	str	r0, [sp, #12]
    aeaa:	9102      	str	r1, [sp, #8]
    aeac:	9201      	str	r2, [sp, #4]
    aeae:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    aeb0:	9902      	ldr	r1, [sp, #8]
    aeb2:	9803      	ldr	r0, [sp, #12]
    aeb4:	f7ff fbca 	bl	a64c <FlexCAN_GetMsgBuffRegion>
    aeb8:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    aeba:	9b05      	ldr	r3, [sp, #20]
    aebc:	3304      	adds	r3, #4
    aebe:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    aec0:	9b05      	ldr	r3, [sp, #20]
    aec2:	2200      	movs	r2, #0
    aec4:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    aec6:	9b04      	ldr	r3, [sp, #16]
    aec8:	2200      	movs	r2, #0
    aeca:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    aecc:	9b01      	ldr	r3, [sp, #4]
    aece:	685b      	ldr	r3, [r3, #4]
    aed0:	2b01      	cmp	r3, #1
    aed2:	d119      	bne.n	af08 <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    aed4:	9b05      	ldr	r3, [sp, #20]
    aed6:	681b      	ldr	r3, [r3, #0]
    aed8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    aedc:	9b05      	ldr	r3, [sp, #20]
    aede:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    aee0:	9b05      	ldr	r3, [sp, #20]
    aee2:	681b      	ldr	r3, [r3, #0]
    aee4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    aee8:	9b05      	ldr	r3, [sp, #20]
    aeea:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    aeec:	9b04      	ldr	r3, [sp, #16]
    aeee:	681b      	ldr	r3, [r3, #0]
    aef0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    aef4:	9b04      	ldr	r3, [sp, #16]
    aef6:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    aef8:	9b04      	ldr	r3, [sp, #16]
    aefa:	681a      	ldr	r2, [r3, #0]
    aefc:	9b00      	ldr	r3, [sp, #0]
    aefe:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    af02:	431a      	orrs	r2, r3
    af04:	9b04      	ldr	r3, [sp, #16]
    af06:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    af08:	9b01      	ldr	r3, [sp, #4]
    af0a:	685b      	ldr	r3, [r3, #4]
    af0c:	2b00      	cmp	r3, #0
    af0e:	d116      	bne.n	af3e <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    af10:	9b05      	ldr	r3, [sp, #20]
    af12:	681b      	ldr	r3, [r3, #0]
    af14:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    af18:	9b05      	ldr	r3, [sp, #20]
    af1a:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    af1c:	9b04      	ldr	r3, [sp, #16]
    af1e:	681b      	ldr	r3, [r3, #0]
    af20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    af24:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    af28:	9a04      	ldr	r2, [sp, #16]
    af2a:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    af2c:	9b04      	ldr	r3, [sp, #16]
    af2e:	681a      	ldr	r2, [r3, #0]
    af30:	9b00      	ldr	r3, [sp, #0]
    af32:	0499      	lsls	r1, r3, #18
    af34:	4b0e      	ldr	r3, [pc, #56]	; (af70 <FlexCAN_SetRxMsgBuff+0xcc>)
    af36:	400b      	ands	r3, r1
    af38:	431a      	orrs	r2, r3
    af3a:	9b04      	ldr	r3, [sp, #16]
    af3c:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    af3e:	9b01      	ldr	r3, [sp, #4]
    af40:	681b      	ldr	r3, [r3, #0]
    af42:	2b0f      	cmp	r3, #15
    af44:	d00f      	beq.n	af66 <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    af46:	9b05      	ldr	r3, [sp, #20]
    af48:	681b      	ldr	r3, [r3, #0]
    af4a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    af4e:	9b05      	ldr	r3, [sp, #20]
    af50:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    af52:	9b05      	ldr	r3, [sp, #20]
    af54:	681a      	ldr	r2, [r3, #0]
    af56:	9b01      	ldr	r3, [sp, #4]
    af58:	681b      	ldr	r3, [r3, #0]
    af5a:	061b      	lsls	r3, r3, #24
    af5c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    af60:	431a      	orrs	r2, r3
    af62:	9b05      	ldr	r3, [sp, #20]
    af64:	601a      	str	r2, [r3, #0]
    }
}
    af66:	bf00      	nop
    af68:	b007      	add	sp, #28
    af6a:	f85d fb04 	ldr.w	pc, [sp], #4
    af6e:	bf00      	nop
    af70:	1ffc0000 	.word	0x1ffc0000

0000af74 <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    af74:	b500      	push	{lr}
    af76:	b085      	sub	sp, #20
    af78:	9001      	str	r0, [sp, #4]
    af7a:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    af7c:	2300      	movs	r3, #0
    af7e:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    af80:	9900      	ldr	r1, [sp, #0]
    af82:	9801      	ldr	r0, [sp, #4]
    af84:	f7ff fb62 	bl	a64c <FlexCAN_GetMsgBuffRegion>
    af88:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    af8a:	9b02      	ldr	r3, [sp, #8]
    af8c:	681b      	ldr	r3, [r3, #0]
    af8e:	b29b      	uxth	r3, r3
    af90:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    af92:	9b03      	ldr	r3, [sp, #12]
}
    af94:	4618      	mov	r0, r3
    af96:	b005      	add	sp, #20
    af98:	f85d fb04 	ldr.w	pc, [sp], #4

0000af9c <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    af9c:	b500      	push	{lr}
    af9e:	b08d      	sub	sp, #52	; 0x34
    afa0:	9003      	str	r0, [sp, #12]
    afa2:	9102      	str	r1, [sp, #8]
    afa4:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    afa6:	9902      	ldr	r1, [sp, #8]
    afa8:	9803      	ldr	r0, [sp, #12]
    afaa:	f7ff fb4f 	bl	a64c <FlexCAN_GetMsgBuffRegion>
    afae:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    afb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    afb2:	3304      	adds	r3, #4
    afb4:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    afb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    afb8:	3308      	adds	r3, #8
    afba:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    afbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    afbe:	3308      	adds	r3, #8
    afc0:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    afc2:	2300      	movs	r3, #0
    afc4:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    afc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    afc8:	681b      	ldr	r3, [r3, #0]
    afca:	0c1b      	lsrs	r3, r3, #16
    afcc:	b2db      	uxtb	r3, r3
    afce:	f003 030f 	and.w	r3, r3, #15
    afd2:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    afd6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    afda:	4618      	mov	r0, r3
    afdc:	f7ff faed 	bl	a5ba <FlexCAN_ComputePayloadSize>
    afe0:	4603      	mov	r3, r0
    afe2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    afe6:	9b01      	ldr	r3, [sp, #4]
    afe8:	3308      	adds	r3, #8
    afea:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    afec:	9902      	ldr	r1, [sp, #8]
    afee:	9803      	ldr	r0, [sp, #12]
    aff0:	f7ff fe5a 	bl	aca8 <FlexCAN_GetMbPayloadSize>
    aff4:	4603      	mov	r3, r0
    aff6:	461a      	mov	r2, r3
    aff8:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    affc:	4293      	cmp	r3, r2
    affe:	d906      	bls.n	b00e <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    b000:	9902      	ldr	r1, [sp, #8]
    b002:	9803      	ldr	r0, [sp, #12]
    b004:	f7ff fe50 	bl	aca8 <FlexCAN_GetMbPayloadSize>
    b008:	4603      	mov	r3, r0
    b00a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    b00e:	9b01      	ldr	r3, [sp, #4]
    b010:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    b014:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    b018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b01a:	681a      	ldr	r2, [r3, #0]
    b01c:	9b01      	ldr	r3, [sp, #4]
    b01e:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    b020:	9b01      	ldr	r3, [sp, #4]
    b022:	681b      	ldr	r3, [r3, #0]
    b024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    b028:	2b00      	cmp	r3, #0
    b02a:	d004      	beq.n	b036 <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    b02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b02e:	681a      	ldr	r2, [r3, #0]
    b030:	9b01      	ldr	r3, [sp, #4]
    b032:	605a      	str	r2, [r3, #4]
    b034:	e004      	b.n	b040 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    b036:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b038:	681b      	ldr	r3, [r3, #0]
    b03a:	0c9a      	lsrs	r2, r3, #18
    b03c:	9b01      	ldr	r3, [sp, #4]
    b03e:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    b040:	9b01      	ldr	r3, [sp, #4]
    b042:	681b      	ldr	r3, [r3, #0]
    b044:	b29a      	uxth	r2, r3
    b046:	9b01      	ldr	r3, [sp, #4]
    b048:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    b04a:	2300      	movs	r3, #0
    b04c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    b050:	e025      	b.n	b09e <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    b052:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    b056:	089b      	lsrs	r3, r3, #2
    b058:	b2db      	uxtb	r3, r3
    b05a:	009b      	lsls	r3, r3, #2
    b05c:	9a07      	ldr	r2, [sp, #28]
    b05e:	4413      	add	r3, r2
    b060:	681b      	ldr	r3, [r3, #0]
    b062:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    b064:	9b04      	ldr	r3, [sp, #16]
    b066:	0e1a      	lsrs	r2, r3, #24
    b068:	9b04      	ldr	r3, [sp, #16]
    b06a:	0a1b      	lsrs	r3, r3, #8
    b06c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b070:	431a      	orrs	r2, r3
    b072:	9b04      	ldr	r3, [sp, #16]
    b074:	021b      	lsls	r3, r3, #8
    b076:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b07a:	ea42 0103 	orr.w	r1, r2, r3
    b07e:	9b04      	ldr	r3, [sp, #16]
    b080:	061a      	lsls	r2, r3, #24
    b082:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    b086:	089b      	lsrs	r3, r3, #2
    b088:	b2db      	uxtb	r3, r3
    b08a:	009b      	lsls	r3, r3, #2
    b08c:	9806      	ldr	r0, [sp, #24]
    b08e:	4403      	add	r3, r0
    b090:	430a      	orrs	r2, r1
    b092:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    b094:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    b098:	3304      	adds	r3, #4
    b09a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    b09e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    b0a2:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    b0a6:	f023 0303 	bic.w	r3, r3, #3
    b0aa:	429a      	cmp	r2, r3
    b0ac:	d3d1      	bcc.n	b052 <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    b0ae:	e014      	b.n	b0da <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    b0b0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    b0b4:	f083 0303 	eor.w	r3, r3, #3
    b0b8:	b2db      	uxtb	r3, r3
    b0ba:	461a      	mov	r2, r3
    b0bc:	9b08      	ldr	r3, [sp, #32]
    b0be:	441a      	add	r2, r3
    b0c0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    b0c4:	7812      	ldrb	r2, [r2, #0]
    b0c6:	b2d1      	uxtb	r1, r2
    b0c8:	9a01      	ldr	r2, [sp, #4]
    b0ca:	4413      	add	r3, r2
    b0cc:	460a      	mov	r2, r1
    b0ce:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    b0d0:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    b0d4:	3301      	adds	r3, #1
    b0d6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    b0da:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    b0de:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    b0e2:	429a      	cmp	r2, r3
    b0e4:	d3e4      	bcc.n	b0b0 <FlexCAN_GetMsgBuff+0x114>
    }
}
    b0e6:	bf00      	nop
    b0e8:	bf00      	nop
    b0ea:	b00d      	add	sp, #52	; 0x34
    b0ec:	f85d fb04 	ldr.w	pc, [sp], #4

0000b0f0 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    b0f0:	b500      	push	{lr}
    b0f2:	b08d      	sub	sp, #52	; 0x34
    b0f4:	9003      	str	r0, [sp, #12]
    b0f6:	9102      	str	r1, [sp, #8]
    b0f8:	9201      	str	r2, [sp, #4]
    b0fa:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    b0fc:	2300      	movs	r3, #0
    b0fe:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    b100:	9b03      	ldr	r3, [sp, #12]
    b102:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    b104:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b106:	3304      	adds	r3, #4
    b108:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    b10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b10c:	3308      	adds	r3, #8
    b10e:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    b110:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b112:	3308      	adds	r3, #8
    b114:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    b116:	9b00      	ldr	r3, [sp, #0]
    b118:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    b11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b11c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    b120:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    b122:	9b08      	ldr	r3, [sp, #32]
    b124:	2200      	movs	r2, #0
    b126:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    b128:	9b02      	ldr	r3, [sp, #8]
    b12a:	689b      	ldr	r3, [r3, #8]
    b12c:	b2db      	uxtb	r3, r3
    b12e:	4618      	mov	r0, r3
    b130:	f7ff f9f4 	bl	a51c <FlexCAN_ComputeDLCValue>
    b134:	4603      	mov	r3, r0
    b136:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    b13a:	9b00      	ldr	r3, [sp, #0]
    b13c:	2b00      	cmp	r3, #0
    b13e:	d065      	beq.n	b20c <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    b140:	2300      	movs	r3, #0
    b142:	930a      	str	r3, [sp, #40]	; 0x28
    b144:	e02c      	b.n	b1a0 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    b146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b148:	089b      	lsrs	r3, r3, #2
    b14a:	009b      	lsls	r3, r3, #2
    b14c:	9a05      	ldr	r2, [sp, #20]
    b14e:	4413      	add	r3, r2
    b150:	681b      	ldr	r3, [r3, #0]
    b152:	0e1a      	lsrs	r2, r3, #24
    b154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b156:	089b      	lsrs	r3, r3, #2
    b158:	009b      	lsls	r3, r3, #2
    b15a:	9905      	ldr	r1, [sp, #20]
    b15c:	440b      	add	r3, r1
    b15e:	681b      	ldr	r3, [r3, #0]
    b160:	0a1b      	lsrs	r3, r3, #8
    b162:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b166:	431a      	orrs	r2, r3
    b168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b16a:	089b      	lsrs	r3, r3, #2
    b16c:	009b      	lsls	r3, r3, #2
    b16e:	9905      	ldr	r1, [sp, #20]
    b170:	440b      	add	r3, r1
    b172:	681b      	ldr	r3, [r3, #0]
    b174:	021b      	lsls	r3, r3, #8
    b176:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b17a:	ea42 0103 	orr.w	r1, r2, r3
    b17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b180:	089b      	lsrs	r3, r3, #2
    b182:	009b      	lsls	r3, r3, #2
    b184:	9a05      	ldr	r2, [sp, #20]
    b186:	4413      	add	r3, r2
    b188:	681b      	ldr	r3, [r3, #0]
    b18a:	061a      	lsls	r2, r3, #24
    b18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b18e:	089b      	lsrs	r3, r3, #2
    b190:	009b      	lsls	r3, r3, #2
    b192:	9806      	ldr	r0, [sp, #24]
    b194:	4403      	add	r3, r0
    b196:	430a      	orrs	r2, r1
    b198:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    b19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b19c:	3304      	adds	r3, #4
    b19e:	930a      	str	r3, [sp, #40]	; 0x28
    b1a0:	9b02      	ldr	r3, [sp, #8]
    b1a2:	689b      	ldr	r3, [r3, #8]
    b1a4:	f023 0303 	bic.w	r3, r3, #3
    b1a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b1aa:	429a      	cmp	r2, r3
    b1ac:	d3cb      	bcc.n	b146 <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    b1ae:	e00c      	b.n	b1ca <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    b1b0:	9a00      	ldr	r2, [sp, #0]
    b1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b1b4:	441a      	add	r2, r3
    b1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b1b8:	f083 0303 	eor.w	r3, r3, #3
    b1bc:	9907      	ldr	r1, [sp, #28]
    b1be:	440b      	add	r3, r1
    b1c0:	7812      	ldrb	r2, [r2, #0]
    b1c2:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    b1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b1c6:	3301      	adds	r3, #1
    b1c8:	930a      	str	r3, [sp, #40]	; 0x28
    b1ca:	9b02      	ldr	r3, [sp, #8]
    b1cc:	689b      	ldr	r3, [r3, #8]
    b1ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b1d0:	429a      	cmp	r2, r3
    b1d2:	d3ed      	bcc.n	b1b0 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    b1d4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b1d8:	4618      	mov	r0, r3
    b1da:	f7ff f9ee 	bl	a5ba <FlexCAN_ComputePayloadSize>
    b1de:	4603      	mov	r3, r0
    b1e0:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    b1e4:	9b02      	ldr	r3, [sp, #8]
    b1e6:	689b      	ldr	r3, [r3, #8]
    b1e8:	930a      	str	r3, [sp, #40]	; 0x28
    b1ea:	e00a      	b.n	b202 <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    b1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b1ee:	f083 0303 	eor.w	r3, r3, #3
    b1f2:	9a07      	ldr	r2, [sp, #28]
    b1f4:	4413      	add	r3, r2
    b1f6:	9a02      	ldr	r2, [sp, #8]
    b1f8:	7b52      	ldrb	r2, [r2, #13]
    b1fa:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    b1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b1fe:	3301      	adds	r3, #1
    b200:	930a      	str	r3, [sp, #40]	; 0x28
    b202:	f89d 3012 	ldrb.w	r3, [sp, #18]
    b206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b208:	429a      	cmp	r2, r3
    b20a:	d3ef      	bcc.n	b1ec <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    b20c:	9b02      	ldr	r3, [sp, #8]
    b20e:	685b      	ldr	r3, [r3, #4]
    b210:	2b01      	cmp	r3, #1
    b212:	d111      	bne.n	b238 <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    b214:	9b08      	ldr	r3, [sp, #32]
    b216:	681b      	ldr	r3, [r3, #0]
    b218:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    b21c:	9b08      	ldr	r3, [sp, #32]
    b21e:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    b220:	9b08      	ldr	r3, [sp, #32]
    b222:	681a      	ldr	r2, [r3, #0]
    b224:	9b01      	ldr	r3, [sp, #4]
    b226:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    b22a:	431a      	orrs	r2, r3
    b22c:	9b08      	ldr	r3, [sp, #32]
    b22e:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    b230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b232:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    b236:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    b238:	9b02      	ldr	r3, [sp, #8]
    b23a:	685b      	ldr	r3, [r3, #4]
    b23c:	2b00      	cmp	r3, #0
    b23e:	d114      	bne.n	b26a <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    b240:	9b08      	ldr	r3, [sp, #32]
    b242:	681b      	ldr	r3, [r3, #0]
    b244:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    b248:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    b24c:	9a08      	ldr	r2, [sp, #32]
    b24e:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    b250:	9b08      	ldr	r3, [sp, #32]
    b252:	681a      	ldr	r2, [r3, #0]
    b254:	9b01      	ldr	r3, [sp, #4]
    b256:	0499      	lsls	r1, r3, #18
    b258:	4b2b      	ldr	r3, [pc, #172]	; (b308 <FlexCAN_SetTxMsgBuff+0x218>)
    b25a:	400b      	ands	r3, r1
    b25c:	431a      	orrs	r2, r3
    b25e:	9b08      	ldr	r3, [sp, #32]
    b260:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    b262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b264:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    b268:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    b26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b26c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    b270:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    b272:	f89d 3013 	ldrb.w	r3, [sp, #19]
    b276:	041b      	lsls	r3, r3, #16
    b278:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    b27c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b27e:	4313      	orrs	r3, r2
    b280:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    b282:	9b02      	ldr	r3, [sp, #8]
    b284:	681b      	ldr	r3, [r3, #0]
    b286:	2b0f      	cmp	r3, #15
    b288:	d03a      	beq.n	b300 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    b28a:	9b02      	ldr	r3, [sp, #8]
    b28c:	681b      	ldr	r3, [r3, #0]
    b28e:	2b1c      	cmp	r3, #28
    b290:	d104      	bne.n	b29c <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    b292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b294:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b298:	930b      	str	r3, [sp, #44]	; 0x2c
    b29a:	e007      	b.n	b2ac <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    b29c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    b2a0:	2b00      	cmp	r3, #0
    b2a2:	d003      	beq.n	b2ac <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    b2a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b2a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b2aa:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    b2ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b2ae:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    b2b2:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    b2b4:	9b02      	ldr	r3, [sp, #8]
    b2b6:	7b1b      	ldrb	r3, [r3, #12]
    b2b8:	2b00      	cmp	r3, #0
    b2ba:	d00e      	beq.n	b2da <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    b2bc:	9b02      	ldr	r3, [sp, #8]
    b2be:	681b      	ldr	r3, [r3, #0]
    b2c0:	061b      	lsls	r3, r3, #24
    b2c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    b2c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b2c8:	4313      	orrs	r3, r2
    b2ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b2ce:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    b2d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b2d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    b2d6:	930b      	str	r3, [sp, #44]	; 0x2c
    b2d8:	e007      	b.n	b2ea <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    b2da:	9b02      	ldr	r3, [sp, #8]
    b2dc:	681b      	ldr	r3, [r3, #0]
    b2de:	061b      	lsls	r3, r3, #24
    b2e0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    b2e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b2e6:	4313      	orrs	r3, r2
    b2e8:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    b2ea:	9b02      	ldr	r3, [sp, #8]
    b2ec:	7b9b      	ldrb	r3, [r3, #14]
    b2ee:	2b00      	cmp	r3, #0
    b2f0:	d003      	beq.n	b2fa <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    b2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b2f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b2f8:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    b2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b2fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b2fe:	601a      	str	r2, [r3, #0]
        }
}
    b300:	bf00      	nop
    b302:	b00d      	add	sp, #52	; 0x34
    b304:	f85d fb04 	ldr.w	pc, [sp], #4
    b308:	1ffc0000 	.word	0x1ffc0000

0000b30c <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    b30c:	b500      	push	{lr}
    b30e:	b08f      	sub	sp, #60	; 0x3c
    b310:	9001      	str	r0, [sp, #4]
    b312:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    b314:	9b01      	ldr	r3, [sp, #4]
    b316:	3380      	adds	r3, #128	; 0x80
    b318:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    b31a:	2300      	movs	r3, #0
    b31c:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    b31e:	2300      	movs	r3, #0
    b320:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    b322:	2300      	movs	r3, #0
    b324:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    b326:	2300      	movs	r3, #0
    b328:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    b32a:	2308      	movs	r3, #8
    b32c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    b330:	9b00      	ldr	r3, [sp, #0]
    b332:	3b01      	subs	r3, #1
    b334:	4619      	mov	r1, r3
    b336:	9801      	ldr	r0, [sp, #4]
    b338:	f7ff fcb6 	bl	aca8 <FlexCAN_GetMbPayloadSize>
    b33c:	4603      	mov	r3, r0
    b33e:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    b342:	2300      	movs	r3, #0
    b344:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    b346:	2300      	movs	r3, #0
    b348:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    b34a:	2300      	movs	r3, #0
    b34c:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    b34e:	9b00      	ldr	r3, [sp, #0]
    b350:	3b01      	subs	r3, #1
    b352:	4619      	mov	r1, r3
    b354:	9801      	ldr	r0, [sp, #4]
    b356:	f7ff f979 	bl	a64c <FlexCAN_GetMsgBuffRegion>
    b35a:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    b35c:	f89d 2016 	ldrb.w	r2, [sp, #22]
    b360:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b362:	441a      	add	r2, r3
    b364:	f89d 3017 	ldrb.w	r3, [sp, #23]
    b368:	4413      	add	r3, r2
    b36a:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    b36c:	9801      	ldr	r0, [sp, #4]
    b36e:	f7ff f9e7 	bl	a740 <FlexCAN_GetMaxMbNum>
    b372:	4603      	mov	r3, r0
    b374:	011b      	lsls	r3, r3, #4
    b376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b378:	4413      	add	r3, r2
    b37a:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    b37c:	9a04      	ldr	r2, [sp, #16]
    b37e:	9b03      	ldr	r3, [sp, #12]
    b380:	429a      	cmp	r2, r3
    b382:	d806      	bhi.n	b392 <FlexCAN_SetMaxMsgBuffNum+0x86>
    b384:	9801      	ldr	r0, [sp, #4]
    b386:	f7ff f9db 	bl	a740 <FlexCAN_GetMaxMbNum>
    b38a:	4602      	mov	r2, r0
    b38c:	9b00      	ldr	r3, [sp, #0]
    b38e:	4293      	cmp	r3, r2
    b390:	d901      	bls.n	b396 <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    b392:	2304      	movs	r3, #4
    b394:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    b396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b398:	2b00      	cmp	r3, #0
    b39a:	d142      	bne.n	b422 <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    b39c:	9b01      	ldr	r3, [sp, #4]
    b39e:	681b      	ldr	r3, [r3, #0]
    b3a0:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    b3a4:	9b00      	ldr	r3, [sp, #0]
    b3a6:	3b01      	subs	r3, #1
    b3a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b3ac:	431a      	orrs	r2, r3
    b3ae:	9b01      	ldr	r3, [sp, #4]
    b3b0:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    b3b2:	9b01      	ldr	r3, [sp, #4]
    b3b4:	681b      	ldr	r3, [r3, #0]
    b3b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    b3ba:	2b00      	cmp	r3, #0
    b3bc:	d131      	bne.n	b422 <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    b3be:	2300      	movs	r3, #0
    b3c0:	930d      	str	r3, [sp, #52]	; 0x34
    b3c2:	e02a      	b.n	b41a <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    b3c4:	990d      	ldr	r1, [sp, #52]	; 0x34
    b3c6:	9801      	ldr	r0, [sp, #4]
    b3c8:	f7ff f940 	bl	a64c <FlexCAN_GetMsgBuffRegion>
    b3cc:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    b3ce:	9b08      	ldr	r3, [sp, #32]
    b3d0:	3304      	adds	r3, #4
    b3d2:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    b3d4:	9b08      	ldr	r3, [sp, #32]
    b3d6:	3308      	adds	r3, #8
    b3d8:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    b3da:	9b08      	ldr	r3, [sp, #32]
    b3dc:	2200      	movs	r2, #0
    b3de:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    b3e0:	9b07      	ldr	r3, [sp, #28]
    b3e2:	2200      	movs	r2, #0
    b3e4:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    b3e6:	990d      	ldr	r1, [sp, #52]	; 0x34
    b3e8:	9801      	ldr	r0, [sp, #4]
    b3ea:	f7ff fc5d 	bl	aca8 <FlexCAN_GetMbPayloadSize>
    b3ee:	4603      	mov	r3, r0
    b3f0:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    b3f4:	2300      	movs	r3, #0
    b3f6:	930c      	str	r3, [sp, #48]	; 0x30
    b3f8:	e007      	b.n	b40a <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    b3fa:	9a06      	ldr	r2, [sp, #24]
    b3fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b3fe:	4413      	add	r3, r2
    b400:	2200      	movs	r2, #0
    b402:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    b404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b406:	3301      	adds	r3, #1
    b408:	930c      	str	r3, [sp, #48]	; 0x30
    b40a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    b40e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b410:	429a      	cmp	r2, r3
    b412:	d3f2      	bcc.n	b3fa <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    b414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b416:	3301      	adds	r3, #1
    b418:	930d      	str	r3, [sp, #52]	; 0x34
    b41a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b41c:	9b00      	ldr	r3, [sp, #0]
    b41e:	429a      	cmp	r2, r3
    b420:	d3d0      	bcc.n	b3c4 <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    b422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    b424:	4618      	mov	r0, r3
    b426:	b00f      	add	sp, #60	; 0x3c
    b428:	f85d fb04 	ldr.w	pc, [sp], #4

0000b42c <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    b42c:	b500      	push	{lr}
    b42e:	b083      	sub	sp, #12
    b430:	9001      	str	r0, [sp, #4]
    b432:	9100      	str	r1, [sp, #0]
    switch (mode)
    b434:	9b00      	ldr	r3, [sp, #0]
    b436:	2b02      	cmp	r3, #2
    b438:	d01d      	beq.n	b476 <FlexCAN_SetOperationMode+0x4a>
    b43a:	9b00      	ldr	r3, [sp, #0]
    b43c:	2b02      	cmp	r3, #2
    b43e:	d82b      	bhi.n	b498 <FlexCAN_SetOperationMode+0x6c>
    b440:	9b00      	ldr	r3, [sp, #0]
    b442:	2b00      	cmp	r3, #0
    b444:	d003      	beq.n	b44e <FlexCAN_SetOperationMode+0x22>
    b446:	9b00      	ldr	r3, [sp, #0]
    b448:	2b01      	cmp	r3, #1
    b44a:	d00d      	beq.n	b468 <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    b44c:	e024      	b.n	b498 <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    b44e:	9b01      	ldr	r3, [sp, #4]
    b450:	685b      	ldr	r3, [r3, #4]
    b452:	f023 0208 	bic.w	r2, r3, #8
    b456:	9b01      	ldr	r3, [sp, #4]
    b458:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    b45a:	9b01      	ldr	r3, [sp, #4]
    b45c:	685b      	ldr	r3, [r3, #4]
    b45e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    b462:	9b01      	ldr	r3, [sp, #4]
    b464:	605a      	str	r2, [r3, #4]
            break;
    b466:	e018      	b.n	b49a <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    b468:	9b01      	ldr	r3, [sp, #4]
    b46a:	685b      	ldr	r3, [r3, #4]
    b46c:	f043 0208 	orr.w	r2, r3, #8
    b470:	9b01      	ldr	r3, [sp, #4]
    b472:	605a      	str	r2, [r3, #4]
            break;
    b474:	e011      	b.n	b49a <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    b476:	9b01      	ldr	r3, [sp, #4]
    b478:	685b      	ldr	r3, [r3, #4]
    b47a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    b47e:	9b01      	ldr	r3, [sp, #4]
    b480:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    b482:	9b01      	ldr	r3, [sp, #4]
    b484:	685b      	ldr	r3, [r3, #4]
    b486:	f023 0208 	bic.w	r2, r3, #8
    b48a:	9b01      	ldr	r3, [sp, #4]
    b48c:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    b48e:	2101      	movs	r1, #1
    b490:	9801      	ldr	r0, [sp, #4]
    b492:	f7fe ff7f 	bl	a394 <FlexCAN_SetSelfReception>
            break;
    b496:	e000      	b.n	b49a <FlexCAN_SetOperationMode+0x6e>
            break;
    b498:	bf00      	nop
    }
}
    b49a:	bf00      	nop
    b49c:	b003      	add	sp, #12
    b49e:	f85d fb04 	ldr.w	pc, [sp], #4

0000b4a2 <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    b4a2:	b500      	push	{lr}
    b4a4:	b08d      	sub	sp, #52	; 0x34
    b4a6:	9003      	str	r0, [sp, #12]
    b4a8:	9102      	str	r1, [sp, #8]
    b4aa:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    b4ac:	2300      	movs	r3, #0
    b4ae:	9309      	str	r3, [sp, #36]	; 0x24
    b4b0:	2300      	movs	r3, #0
    b4b2:	9308      	str	r3, [sp, #32]
    b4b4:	2300      	movs	r3, #0
    b4b6:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    b4b8:	9b03      	ldr	r3, [sp, #12]
    b4ba:	33e0      	adds	r3, #224	; 0xe0
    b4bc:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    b4be:	9b03      	ldr	r3, [sp, #12]
    b4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b4c2:	0e1b      	lsrs	r3, r3, #24
    b4c4:	f003 030f 	and.w	r3, r3, #15
    b4c8:	9305      	str	r3, [sp, #20]
    b4ca:	9b02      	ldr	r3, [sp, #8]
    b4cc:	2b03      	cmp	r3, #3
    b4ce:	f200 81e7 	bhi.w	b8a0 <FlexCAN_SetRxFifoFilter+0x3fe>
    b4d2:	a201      	add	r2, pc, #4	; (adr r2, b4d8 <FlexCAN_SetRxFifoFilter+0x36>)
    b4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b4d8:	0000b4e9 	.word	0x0000b4e9
    b4dc:	0000b583 	.word	0x0000b583
    b4e0:	0000b6bd 	.word	0x0000b6bd
    b4e4:	0000b88b 	.word	0x0000b88b
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b4e8:	f000 ffb4 	bl	c454 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    b4ec:	9b03      	ldr	r3, [sp, #12]
    b4ee:	681b      	ldr	r3, [r3, #0]
    b4f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    b4f4:	9b03      	ldr	r3, [sp, #12]
    b4f6:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b4f8:	f000 ffd8 	bl	c4ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    b4fc:	2300      	movs	r3, #0
    b4fe:	930b      	str	r3, [sp, #44]	; 0x2c
    b500:	e038      	b.n	b574 <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    b502:	2300      	movs	r3, #0
    b504:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    b506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b508:	00db      	lsls	r3, r3, #3
    b50a:	9a01      	ldr	r2, [sp, #4]
    b50c:	4413      	add	r3, r2
    b50e:	781b      	ldrb	r3, [r3, #0]
    b510:	2b00      	cmp	r3, #0
    b512:	d002      	beq.n	b51a <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    b514:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    b518:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    b51a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b51c:	00db      	lsls	r3, r3, #3
    b51e:	9a01      	ldr	r2, [sp, #4]
    b520:	4413      	add	r3, r2
    b522:	785b      	ldrb	r3, [r3, #1]
    b524:	2b00      	cmp	r3, #0
    b526:	d013      	beq.n	b550 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    b528:	9b07      	ldr	r3, [sp, #28]
    b52a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b52e:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    b530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b532:	00db      	lsls	r3, r3, #3
    b534:	9a01      	ldr	r2, [sp, #4]
    b536:	4413      	add	r3, r2
    b538:	685b      	ldr	r3, [r3, #4]
    b53a:	005b      	lsls	r3, r3, #1
    b53c:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    b540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b542:	009b      	lsls	r3, r3, #2
    b544:	9a06      	ldr	r2, [sp, #24]
    b546:	4413      	add	r3, r2
    b548:	9a07      	ldr	r2, [sp, #28]
    b54a:	440a      	add	r2, r1
    b54c:	601a      	str	r2, [r3, #0]
    b54e:	e00e      	b.n	b56e <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    b550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b552:	00db      	lsls	r3, r3, #3
    b554:	9a01      	ldr	r2, [sp, #4]
    b556:	4413      	add	r3, r2
    b558:	685b      	ldr	r3, [r3, #4]
    b55a:	04da      	lsls	r2, r3, #19
    b55c:	4b9d      	ldr	r3, [pc, #628]	; (b7d4 <FlexCAN_SetRxFifoFilter+0x332>)
    b55e:	4013      	ands	r3, r2
    b560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b562:	0092      	lsls	r2, r2, #2
    b564:	9906      	ldr	r1, [sp, #24]
    b566:	440a      	add	r2, r1
    b568:	9907      	ldr	r1, [sp, #28]
    b56a:	440b      	add	r3, r1
    b56c:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    b56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b570:	3301      	adds	r3, #1
    b572:	930b      	str	r3, [sp, #44]	; 0x2c
    b574:	9b05      	ldr	r3, [sp, #20]
    b576:	3301      	adds	r3, #1
    b578:	00db      	lsls	r3, r3, #3
    b57a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b57c:	429a      	cmp	r2, r3
    b57e:	d3c0      	bcc.n	b502 <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    b580:	e18f      	b.n	b8a2 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b582:	f000 ff67 	bl	c454 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    b586:	9b03      	ldr	r3, [sp, #12]
    b588:	681b      	ldr	r3, [r3, #0]
    b58a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    b58e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    b592:	9b03      	ldr	r3, [sp, #12]
    b594:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b596:	f000 ff89 	bl	c4ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    b59a:	2300      	movs	r3, #0
    b59c:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    b59e:	2300      	movs	r3, #0
    b5a0:	930b      	str	r3, [sp, #44]	; 0x2c
    b5a2:	e083      	b.n	b6ac <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    b5a4:	2300      	movs	r3, #0
    b5a6:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    b5a8:	2300      	movs	r3, #0
    b5aa:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    b5ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b5ae:	00db      	lsls	r3, r3, #3
    b5b0:	9a01      	ldr	r2, [sp, #4]
    b5b2:	4413      	add	r3, r2
    b5b4:	781b      	ldrb	r3, [r3, #0]
    b5b6:	2b00      	cmp	r3, #0
    b5b8:	d002      	beq.n	b5c0 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    b5ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    b5be:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    b5c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b5c2:	3301      	adds	r3, #1
    b5c4:	00db      	lsls	r3, r3, #3
    b5c6:	9a01      	ldr	r2, [sp, #4]
    b5c8:	4413      	add	r3, r2
    b5ca:	781b      	ldrb	r3, [r3, #0]
    b5cc:	2b00      	cmp	r3, #0
    b5ce:	d002      	beq.n	b5d6 <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    b5d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    b5d4:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    b5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b5d8:	00db      	lsls	r3, r3, #3
    b5da:	9a01      	ldr	r2, [sp, #4]
    b5dc:	4413      	add	r3, r2
    b5de:	785b      	ldrb	r3, [r3, #1]
    b5e0:	2b00      	cmp	r3, #0
    b5e2:	d014      	beq.n	b60e <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    b5e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b5e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    b5ea:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    b5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b5ee:	00db      	lsls	r3, r3, #3
    b5f0:	9a01      	ldr	r2, [sp, #4]
    b5f2:	4413      	add	r3, r2
    b5f4:	685b      	ldr	r3, [r3, #4]
    b5f6:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    b5f8:	041a      	lsls	r2, r3, #16
    b5fa:	4b77      	ldr	r3, [pc, #476]	; (b7d8 <FlexCAN_SetRxFifoFilter+0x336>)
    b5fc:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    b5fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b600:	0092      	lsls	r2, r2, #2
    b602:	9906      	ldr	r1, [sp, #24]
    b604:	440a      	add	r2, r1
    b606:	9909      	ldr	r1, [sp, #36]	; 0x24
    b608:	440b      	add	r3, r1
    b60a:	6013      	str	r3, [r2, #0]
    b60c:	e00e      	b.n	b62c <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    b60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b610:	00db      	lsls	r3, r3, #3
    b612:	9a01      	ldr	r2, [sp, #4]
    b614:	4413      	add	r3, r2
    b616:	685b      	ldr	r3, [r3, #4]
    b618:	04da      	lsls	r2, r3, #19
    b61a:	4b6e      	ldr	r3, [pc, #440]	; (b7d4 <FlexCAN_SetRxFifoFilter+0x332>)
    b61c:	4013      	ands	r3, r2
    b61e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b620:	0092      	lsls	r2, r2, #2
    b622:	9906      	ldr	r1, [sp, #24]
    b624:	440a      	add	r2, r1
    b626:	9909      	ldr	r1, [sp, #36]	; 0x24
    b628:	440b      	add	r3, r1
    b62a:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    b62c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b62e:	3301      	adds	r3, #1
    b630:	00db      	lsls	r3, r3, #3
    b632:	9a01      	ldr	r2, [sp, #4]
    b634:	4413      	add	r3, r2
    b636:	785b      	ldrb	r3, [r3, #1]
    b638:	2b00      	cmp	r3, #0
    b63a:	d01a      	beq.n	b672 <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    b63c:	9b08      	ldr	r3, [sp, #32]
    b63e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    b642:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    b644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b646:	009b      	lsls	r3, r3, #2
    b648:	9a06      	ldr	r2, [sp, #24]
    b64a:	4413      	add	r3, r2
    b64c:	6819      	ldr	r1, [r3, #0]
    b64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b650:	3301      	adds	r3, #1
    b652:	00db      	lsls	r3, r3, #3
    b654:	9a01      	ldr	r2, [sp, #4]
    b656:	4413      	add	r3, r2
    b658:	685b      	ldr	r3, [r3, #4]
    b65a:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    b65c:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    b660:	9b08      	ldr	r3, [sp, #32]
    b662:	441a      	add	r2, r3
    b664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b666:	009b      	lsls	r3, r3, #2
    b668:	9806      	ldr	r0, [sp, #24]
    b66a:	4403      	add	r3, r0
    b66c:	430a      	orrs	r2, r1
    b66e:	601a      	str	r2, [r3, #0]
    b670:	e016      	b.n	b6a0 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    b672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b674:	009b      	lsls	r3, r3, #2
    b676:	9a06      	ldr	r2, [sp, #24]
    b678:	4413      	add	r3, r2
    b67a:	6819      	ldr	r1, [r3, #0]
    b67c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b67e:	3301      	adds	r3, #1
    b680:	00db      	lsls	r3, r3, #3
    b682:	9a01      	ldr	r2, [sp, #4]
    b684:	4413      	add	r3, r2
    b686:	685b      	ldr	r3, [r3, #4]
    b688:	00da      	lsls	r2, r3, #3
    b68a:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    b68e:	4013      	ands	r3, r2
    b690:	9a08      	ldr	r2, [sp, #32]
    b692:	441a      	add	r2, r3
    b694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b696:	009b      	lsls	r3, r3, #2
    b698:	9806      	ldr	r0, [sp, #24]
    b69a:	4403      	add	r3, r0
    b69c:	430a      	orrs	r2, r1
    b69e:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    b6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b6a2:	3302      	adds	r3, #2
    b6a4:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    b6a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6a8:	3301      	adds	r3, #1
    b6aa:	930b      	str	r3, [sp, #44]	; 0x2c
    b6ac:	9b05      	ldr	r3, [sp, #20]
    b6ae:	3301      	adds	r3, #1
    b6b0:	00db      	lsls	r3, r3, #3
    b6b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b6b4:	429a      	cmp	r2, r3
    b6b6:	f4ff af75 	bcc.w	b5a4 <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    b6ba:	e0f2      	b.n	b8a2 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b6bc:	f000 feca 	bl	c454 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    b6c0:	9b03      	ldr	r3, [sp, #12]
    b6c2:	681b      	ldr	r3, [r3, #0]
    b6c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    b6c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    b6cc:	9b03      	ldr	r3, [sp, #12]
    b6ce:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b6d0:	f000 feec 	bl	c4ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    b6d4:	2300      	movs	r3, #0
    b6d6:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    b6d8:	2300      	movs	r3, #0
    b6da:	930b      	str	r3, [sp, #44]	; 0x2c
    b6dc:	e0cd      	b.n	b87a <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    b6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b6e0:	00db      	lsls	r3, r3, #3
    b6e2:	9a01      	ldr	r2, [sp, #4]
    b6e4:	4413      	add	r3, r2
    b6e6:	785b      	ldrb	r3, [r3, #1]
    b6e8:	2b00      	cmp	r3, #0
    b6ea:	d00e      	beq.n	b70a <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b6ee:	00db      	lsls	r3, r3, #3
    b6f0:	9a01      	ldr	r2, [sp, #4]
    b6f2:	4413      	add	r3, r2
    b6f4:	685b      	ldr	r3, [r3, #4]
    b6f6:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    b6f8:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b6fc:	009b      	lsls	r3, r3, #2
    b6fe:	9a06      	ldr	r2, [sp, #24]
    b700:	4413      	add	r3, r2
    b702:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b704:	440a      	add	r2, r1
    b706:	601a      	str	r2, [r3, #0]
    b708:	e00d      	b.n	b726 <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b70c:	00db      	lsls	r3, r3, #3
    b70e:	9a01      	ldr	r2, [sp, #4]
    b710:	4413      	add	r3, r2
    b712:	685b      	ldr	r3, [r3, #4]
    b714:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    b716:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b71a:	009b      	lsls	r3, r3, #2
    b71c:	9a06      	ldr	r2, [sp, #24]
    b71e:	4413      	add	r3, r2
    b720:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b722:	440a      	add	r2, r1
    b724:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    b726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b728:	3301      	adds	r3, #1
    b72a:	00db      	lsls	r3, r3, #3
    b72c:	9a01      	ldr	r2, [sp, #4]
    b72e:	4413      	add	r3, r2
    b730:	785b      	ldrb	r3, [r3, #1]
    b732:	2b00      	cmp	r3, #0
    b734:	d017      	beq.n	b766 <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b738:	009b      	lsls	r3, r3, #2
    b73a:	9a06      	ldr	r2, [sp, #24]
    b73c:	4413      	add	r3, r2
    b73e:	6819      	ldr	r1, [r3, #0]
    b740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b742:	3301      	adds	r3, #1
    b744:	00db      	lsls	r3, r3, #3
    b746:	9a01      	ldr	r2, [sp, #4]
    b748:	4413      	add	r3, r2
    b74a:	685b      	ldr	r3, [r3, #4]
    b74c:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    b74e:	041b      	lsls	r3, r3, #16
    b750:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b754:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b756:	441a      	add	r2, r3
    b758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b75a:	009b      	lsls	r3, r3, #2
    b75c:	9806      	ldr	r0, [sp, #24]
    b75e:	4403      	add	r3, r0
    b760:	430a      	orrs	r2, r1
    b762:	601a      	str	r2, [r3, #0]
    b764:	e016      	b.n	b794 <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b766:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b768:	009b      	lsls	r3, r3, #2
    b76a:	9a06      	ldr	r2, [sp, #24]
    b76c:	4413      	add	r3, r2
    b76e:	6819      	ldr	r1, [r3, #0]
    b770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b772:	3301      	adds	r3, #1
    b774:	00db      	lsls	r3, r3, #3
    b776:	9a01      	ldr	r2, [sp, #4]
    b778:	4413      	add	r3, r2
    b77a:	685b      	ldr	r3, [r3, #4]
    b77c:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    b77e:	041b      	lsls	r3, r3, #16
    b780:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b784:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b786:	441a      	add	r2, r3
    b788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b78a:	009b      	lsls	r3, r3, #2
    b78c:	9806      	ldr	r0, [sp, #24]
    b78e:	4403      	add	r3, r0
    b790:	430a      	orrs	r2, r1
    b792:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    b794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b796:	3302      	adds	r3, #2
    b798:	00db      	lsls	r3, r3, #3
    b79a:	9a01      	ldr	r2, [sp, #4]
    b79c:	4413      	add	r3, r2
    b79e:	785b      	ldrb	r3, [r3, #1]
    b7a0:	2b00      	cmp	r3, #0
    b7a2:	d01b      	beq.n	b7dc <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b7a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b7a6:	009b      	lsls	r3, r3, #2
    b7a8:	9a06      	ldr	r2, [sp, #24]
    b7aa:	4413      	add	r3, r2
    b7ac:	6819      	ldr	r1, [r3, #0]
    b7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b7b0:	3302      	adds	r3, #2
    b7b2:	00db      	lsls	r3, r3, #3
    b7b4:	9a01      	ldr	r2, [sp, #4]
    b7b6:	4413      	add	r3, r2
    b7b8:	685b      	ldr	r3, [r3, #4]
    b7ba:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    b7bc:	021b      	lsls	r3, r3, #8
    b7be:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b7c2:	441a      	add	r2, r3
    b7c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b7c6:	009b      	lsls	r3, r3, #2
    b7c8:	9806      	ldr	r0, [sp, #24]
    b7ca:	4403      	add	r3, r0
    b7cc:	430a      	orrs	r2, r1
    b7ce:	601a      	str	r2, [r3, #0]
    b7d0:	e01a      	b.n	b808 <FlexCAN_SetRxFifoFilter+0x366>
    b7d2:	bf00      	nop
    b7d4:	3ff80000 	.word	0x3ff80000
    b7d8:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b7dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b7de:	009b      	lsls	r3, r3, #2
    b7e0:	9a06      	ldr	r2, [sp, #24]
    b7e2:	4413      	add	r3, r2
    b7e4:	6819      	ldr	r1, [r3, #0]
    b7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b7e8:	3302      	adds	r3, #2
    b7ea:	00db      	lsls	r3, r3, #3
    b7ec:	9a01      	ldr	r2, [sp, #4]
    b7ee:	4413      	add	r3, r2
    b7f0:	685b      	ldr	r3, [r3, #4]
    b7f2:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    b7f4:	021b      	lsls	r3, r3, #8
    b7f6:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b7fa:	441a      	add	r2, r3
    b7fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b7fe:	009b      	lsls	r3, r3, #2
    b800:	9806      	ldr	r0, [sp, #24]
    b802:	4403      	add	r3, r0
    b804:	430a      	orrs	r2, r1
    b806:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    b808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b80a:	3303      	adds	r3, #3
    b80c:	00db      	lsls	r3, r3, #3
    b80e:	9a01      	ldr	r2, [sp, #4]
    b810:	4413      	add	r3, r2
    b812:	785b      	ldrb	r3, [r3, #1]
    b814:	2b00      	cmp	r3, #0
    b816:	d015      	beq.n	b844 <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b81a:	009b      	lsls	r3, r3, #2
    b81c:	9a06      	ldr	r2, [sp, #24]
    b81e:	4413      	add	r3, r2
    b820:	6819      	ldr	r1, [r3, #0]
    b822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b824:	3303      	adds	r3, #3
    b826:	00db      	lsls	r3, r3, #3
    b828:	9a01      	ldr	r2, [sp, #4]
    b82a:	4413      	add	r3, r2
    b82c:	685b      	ldr	r3, [r3, #4]
    b82e:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    b830:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    b832:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b834:	441a      	add	r2, r3
    b836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b838:	009b      	lsls	r3, r3, #2
    b83a:	9806      	ldr	r0, [sp, #24]
    b83c:	4403      	add	r3, r0
    b83e:	430a      	orrs	r2, r1
    b840:	601a      	str	r2, [r3, #0]
    b842:	e014      	b.n	b86e <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    b844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b846:	009b      	lsls	r3, r3, #2
    b848:	9a06      	ldr	r2, [sp, #24]
    b84a:	4413      	add	r3, r2
    b84c:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    b84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b850:	3303      	adds	r3, #3
    b852:	00db      	lsls	r3, r3, #3
    b854:	9a01      	ldr	r2, [sp, #4]
    b856:	4413      	add	r3, r2
    b858:	685b      	ldr	r3, [r3, #4]
    b85a:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    b85c:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    b85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b860:	441a      	add	r2, r3
    b862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b864:	009b      	lsls	r3, r3, #2
    b866:	9806      	ldr	r0, [sp, #24]
    b868:	4403      	add	r3, r0
    b86a:	430a      	orrs	r2, r1
    b86c:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    b86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b870:	3304      	adds	r3, #4
    b872:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    b874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b876:	3301      	adds	r3, #1
    b878:	930b      	str	r3, [sp, #44]	; 0x2c
    b87a:	9b05      	ldr	r3, [sp, #20]
    b87c:	3301      	adds	r3, #1
    b87e:	00db      	lsls	r3, r3, #3
    b880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b882:	429a      	cmp	r2, r3
    b884:	f4ff af2b 	bcc.w	b6de <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    b888:	e00b      	b.n	b8a2 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b88a:	f000 fde3 	bl	c454 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    b88e:	9b03      	ldr	r3, [sp, #12]
    b890:	681b      	ldr	r3, [r3, #0]
    b892:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    b896:	9b03      	ldr	r3, [sp, #12]
    b898:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    b89a:	f000 fe07 	bl	c4ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    b89e:	e000      	b.n	b8a2 <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    b8a0:	bf00      	nop
    }
}
    b8a2:	bf00      	nop
    b8a4:	b00d      	add	sp, #52	; 0x34
    b8a6:	f85d fb04 	ldr.w	pc, [sp], #4

0000b8aa <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    b8aa:	b500      	push	{lr}
    b8ac:	b08b      	sub	sp, #44	; 0x2c
    b8ae:	9001      	str	r0, [sp, #4]
    b8b0:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    b8b2:	9b01      	ldr	r3, [sp, #4]
    b8b4:	3380      	adds	r3, #128	; 0x80
    b8b6:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    b8b8:	9b07      	ldr	r3, [sp, #28]
    b8ba:	3304      	adds	r3, #4
    b8bc:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    b8be:	9b07      	ldr	r3, [sp, #28]
    b8c0:	3308      	adds	r3, #8
    b8c2:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    b8c4:	2300      	movs	r3, #0
    b8c6:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    b8c8:	9b07      	ldr	r3, [sp, #28]
    b8ca:	681b      	ldr	r3, [r3, #0]
    b8cc:	0c1b      	lsrs	r3, r3, #16
    b8ce:	b2db      	uxtb	r3, r3
    b8d0:	f003 030f 	and.w	r3, r3, #15
    b8d4:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    b8d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    b8dc:	4618      	mov	r0, r3
    b8de:	f7fe fe6c 	bl	a5ba <FlexCAN_ComputePayloadSize>
    b8e2:	4603      	mov	r3, r0
    b8e4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    b8e8:	9b00      	ldr	r3, [sp, #0]
    b8ea:	3308      	adds	r3, #8
    b8ec:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    b8ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    b8f2:	2b08      	cmp	r3, #8
    b8f4:	d902      	bls.n	b8fc <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    b8f6:	2308      	movs	r3, #8
    b8f8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    b8fc:	9b00      	ldr	r3, [sp, #0]
    b8fe:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b902:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    b906:	9b07      	ldr	r3, [sp, #28]
    b908:	681a      	ldr	r2, [r3, #0]
    b90a:	9b00      	ldr	r3, [sp, #0]
    b90c:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    b90e:	9b00      	ldr	r3, [sp, #0]
    b910:	681b      	ldr	r3, [r3, #0]
    b912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    b916:	2b00      	cmp	r3, #0
    b918:	d004      	beq.n	b924 <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    b91a:	9b06      	ldr	r3, [sp, #24]
    b91c:	681a      	ldr	r2, [r3, #0]
    b91e:	9b00      	ldr	r3, [sp, #0]
    b920:	605a      	str	r2, [r3, #4]
    b922:	e004      	b.n	b92e <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    b924:	9b06      	ldr	r3, [sp, #24]
    b926:	681b      	ldr	r3, [r3, #0]
    b928:	0c9a      	lsrs	r2, r3, #18
    b92a:	9b00      	ldr	r3, [sp, #0]
    b92c:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    b92e:	9b01      	ldr	r3, [sp, #4]
    b930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b932:	b2da      	uxtb	r2, r3
    b934:	9b00      	ldr	r3, [sp, #0]
    b936:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    b93a:	9b00      	ldr	r3, [sp, #0]
    b93c:	681b      	ldr	r3, [r3, #0]
    b93e:	b29a      	uxth	r2, r3
    b940:	9b00      	ldr	r3, [sp, #0]
    b942:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    b944:	2300      	movs	r3, #0
    b946:	9309      	str	r3, [sp, #36]	; 0x24
    b948:	e01f      	b.n	b98a <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    b94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b94c:	089b      	lsrs	r3, r3, #2
    b94e:	009b      	lsls	r3, r3, #2
    b950:	9a05      	ldr	r2, [sp, #20]
    b952:	4413      	add	r3, r2
    b954:	681b      	ldr	r3, [r3, #0]
    b956:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    b958:	9b02      	ldr	r3, [sp, #8]
    b95a:	0e1a      	lsrs	r2, r3, #24
    b95c:	9b02      	ldr	r3, [sp, #8]
    b95e:	0a1b      	lsrs	r3, r3, #8
    b960:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b964:	431a      	orrs	r2, r3
    b966:	9b02      	ldr	r3, [sp, #8]
    b968:	021b      	lsls	r3, r3, #8
    b96a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    b96e:	ea42 0103 	orr.w	r1, r2, r3
    b972:	9b02      	ldr	r3, [sp, #8]
    b974:	061a      	lsls	r2, r3, #24
    b976:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b978:	089b      	lsrs	r3, r3, #2
    b97a:	009b      	lsls	r3, r3, #2
    b97c:	9804      	ldr	r0, [sp, #16]
    b97e:	4403      	add	r3, r0
    b980:	430a      	orrs	r2, r1
    b982:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    b984:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b986:	3304      	adds	r3, #4
    b988:	9309      	str	r3, [sp, #36]	; 0x24
    b98a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    b98e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b990:	429a      	cmp	r2, r3
    b992:	d3da      	bcc.n	b94a <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    b994:	bf00      	nop
    b996:	bf00      	nop
    b998:	b00b      	add	sp, #44	; 0x2c
    b99a:	f85d fb04 	ldr.w	pc, [sp], #4

0000b99e <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    b99e:	b088      	sub	sp, #32
    b9a0:	9003      	str	r0, [sp, #12]
    b9a2:	9301      	str	r3, [sp, #4]
    b9a4:	460b      	mov	r3, r1
    b9a6:	f88d 300b 	strb.w	r3, [sp, #11]
    b9aa:	4613      	mov	r3, r2
    b9ac:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    b9b0:	2300      	movs	r3, #0
    b9b2:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    b9b6:	2300      	movs	r3, #0
    b9b8:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    b9ba:	2300      	movs	r3, #0
    b9bc:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    b9be:	9b01      	ldr	r3, [sp, #4]
    b9c0:	b2db      	uxtb	r3, r3
    b9c2:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b9c6:	429a      	cmp	r2, r3
    b9c8:	d303      	bcc.n	b9d2 <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    b9ca:	2301      	movs	r3, #1
    b9cc:	f88d 301f 	strb.w	r3, [sp, #31]
    b9d0:	e01b      	b.n	ba0a <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    b9d2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b9d6:	2b00      	cmp	r3, #0
    b9d8:	d014      	beq.n	ba04 <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    b9da:	9b03      	ldr	r3, [sp, #12]
    b9dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b9de:	0e1b      	lsrs	r3, r3, #24
    b9e0:	f003 030f 	and.w	r3, r3, #15
    b9e4:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    b9e6:	9b06      	ldr	r3, [sp, #24]
    b9e8:	3301      	adds	r3, #1
    b9ea:	00db      	lsls	r3, r3, #3
    b9ec:	089b      	lsrs	r3, r3, #2
    b9ee:	3305      	adds	r3, #5
    b9f0:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    b9f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b9f6:	9a05      	ldr	r2, [sp, #20]
    b9f8:	429a      	cmp	r2, r3
    b9fa:	d306      	bcc.n	ba0a <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    b9fc:	2301      	movs	r3, #1
    b9fe:	f88d 301f 	strb.w	r3, [sp, #31]
    ba02:	e002      	b.n	ba0a <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    ba04:	2300      	movs	r3, #0
    ba06:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    ba0a:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    ba0e:	4618      	mov	r0, r3
    ba10:	b008      	add	sp, #32
    ba12:	4770      	bx	lr

0000ba14 <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    ba14:	b500      	push	{lr}
    ba16:	b083      	sub	sp, #12
    ba18:	9001      	str	r0, [sp, #4]
    ba1a:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    ba1c:	9b00      	ldr	r3, [sp, #0]
    ba1e:	f003 0320 	and.w	r3, r3, #32
    ba22:	2b00      	cmp	r3, #0
    ba24:	d004      	beq.n	ba30 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    ba26:	2101      	movs	r1, #1
    ba28:	9801      	ldr	r0, [sp, #4]
    ba2a:	f7fe fcd8 	bl	a3de <FlexCAN_SetIsoCan>
    ba2e:	e003      	b.n	ba38 <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    ba30:	2100      	movs	r1, #0
    ba32:	9801      	ldr	r0, [sp, #4]
    ba34:	f7fe fcd3 	bl	a3de <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    ba38:	9b00      	ldr	r3, [sp, #0]
    ba3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ba3e:	2b00      	cmp	r3, #0
    ba40:	d004      	beq.n	ba4c <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    ba42:	2101      	movs	r1, #1
    ba44:	9801      	ldr	r0, [sp, #4]
    ba46:	f7fe fce1 	bl	a40c <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    ba4a:	e003      	b.n	ba54 <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    ba4c:	2100      	movs	r1, #0
    ba4e:	9801      	ldr	r0, [sp, #4]
    ba50:	f7fe fcdc 	bl	a40c <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    ba54:	9b00      	ldr	r3, [sp, #0]
    ba56:	f003 0308 	and.w	r3, r3, #8
    ba5a:	2b00      	cmp	r3, #0
    ba5c:	d004      	beq.n	ba68 <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    ba5e:	2101      	movs	r1, #1
    ba60:	9801      	ldr	r0, [sp, #4]
    ba62:	f7fe fcea 	bl	a43a <FlexCAN_SetProtocolException>
    ba66:	e003      	b.n	ba70 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    ba68:	2100      	movs	r1, #0
    ba6a:	9801      	ldr	r0, [sp, #4]
    ba6c:	f7fe fce5 	bl	a43a <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    ba70:	9b00      	ldr	r3, [sp, #0]
    ba72:	f003 0302 	and.w	r3, r3, #2
    ba76:	2b00      	cmp	r3, #0
    ba78:	d00a      	beq.n	ba90 <FlexCAN_ConfigCtrlOptions+0x7c>
    ba7a:	9b01      	ldr	r3, [sp, #4]
    ba7c:	681b      	ldr	r3, [r3, #0]
    ba7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    ba82:	2b00      	cmp	r3, #0
    ba84:	d104      	bne.n	ba90 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    ba86:	2101      	movs	r1, #1
    ba88:	9801      	ldr	r0, [sp, #4]
    ba8a:	f7fe fd31 	bl	a4f0 <FlexCAN_CanBitSampling>
    ba8e:	e003      	b.n	ba98 <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    ba90:	2100      	movs	r1, #0
    ba92:	9801      	ldr	r0, [sp, #4]
    ba94:	f7fe fd2c 	bl	a4f0 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    ba98:	9b00      	ldr	r3, [sp, #0]
    ba9a:	f003 0304 	and.w	r3, r3, #4
    ba9e:	2b00      	cmp	r3, #0
    baa0:	d004      	beq.n	baac <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    baa2:	2101      	movs	r1, #1
    baa4:	9801      	ldr	r0, [sp, #4]
    baa6:	f7fe fcf6 	bl	a496 <FlexCAN_SetBusOffAutorecovery>
    baaa:	e003      	b.n	bab4 <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    baac:	2100      	movs	r1, #0
    baae:	9801      	ldr	r0, [sp, #4]
    bab0:	f7fe fcf1 	bl	a496 <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    bab4:	9b00      	ldr	r3, [sp, #0]
    bab6:	f003 0301 	and.w	r3, r3, #1
    baba:	2b00      	cmp	r3, #0
    babc:	d004      	beq.n	bac8 <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    babe:	2101      	movs	r1, #1
    bac0:	9801      	ldr	r0, [sp, #4]
    bac2:	f7fe fcd1 	bl	a468 <FlexCAN_SetRemoteReqStore>
    bac6:	e003      	b.n	bad0 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    bac8:	2100      	movs	r1, #0
    baca:	9801      	ldr	r0, [sp, #4]
    bacc:	f7fe fccc 	bl	a468 <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    bad0:	9b00      	ldr	r3, [sp, #0]
    bad2:	f003 0310 	and.w	r3, r3, #16
    bad6:	2b00      	cmp	r3, #0
    bad8:	d004      	beq.n	bae4 <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    bada:	2101      	movs	r1, #1
    badc:	9801      	ldr	r0, [sp, #4]
    bade:	f7fe fcf0 	bl	a4c2 <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    bae2:	e003      	b.n	baec <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    bae4:	2100      	movs	r1, #0
    bae6:	9801      	ldr	r0, [sp, #4]
    bae8:	f7fe fceb 	bl	a4c2 <FlexCAN_SetEdgeFilter>
}
    baec:	bf00      	nop
    baee:	b003      	add	sp, #12
    baf0:	f85d fb04 	ldr.w	pc, [sp], #4

0000baf4 <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    baf4:	b084      	sub	sp, #16
    baf6:	4603      	mov	r3, r0
    baf8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    bafc:	2300      	movs	r3, #0
    bafe:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    bb02:	2300      	movs	r3, #0
    bb04:	f88d 300f 	strb.w	r3, [sp, #15]
    bb08:	e00d      	b.n	bb26 <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    bb0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    bb0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bb12:	4909      	ldr	r1, [pc, #36]	; (bb38 <FlexCAN_ResetImaskBuff+0x44>)
    bb14:	4413      	add	r3, r2
    bb16:	2200      	movs	r2, #0
    bb18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    bb1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bb20:	3301      	adds	r3, #1
    bb22:	f88d 300f 	strb.w	r3, [sp, #15]
    bb26:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bb2a:	2b00      	cmp	r3, #0
    bb2c:	d0ed      	beq.n	bb0a <FlexCAN_ResetImaskBuff+0x16>
    }
}
    bb2e:	bf00      	nop
    bb30:	bf00      	nop
    bb32:	b004      	add	sp, #16
    bb34:	4770      	bx	lr
    bb36:	bf00      	nop
    bb38:	1fff8fa8 	.word	0x1fff8fa8

0000bb3c <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    bb3c:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    bb3e:	2000      	movs	r0, #0
    bb40:	f7fd fb2a 	bl	9198 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    bb44:	f3bf 8f4f 	dsb	sy
}
    bb48:	bf00      	nop
    bb4a:	bd08      	pop	{r3, pc}

0000bb4c <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    bb4c:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    bb4e:	2000      	movs	r0, #0
    bb50:	f7fd fac2 	bl	90d8 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    bb54:	f3bf 8f4f 	dsb	sy
}
    bb58:	bf00      	nop
    bb5a:	bd08      	pop	{r3, pc}

0000bb5c <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    bb5c:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    bb5e:	220f      	movs	r2, #15
    bb60:	2100      	movs	r1, #0
    bb62:	2000      	movs	r0, #0
    bb64:	f7fd f9dc 	bl	8f20 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    bb68:	f3bf 8f4f 	dsb	sy
}
    bb6c:	bf00      	nop
    bb6e:	bd08      	pop	{r3, pc}

0000bb70 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    bb70:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    bb72:	221f      	movs	r2, #31
    bb74:	2110      	movs	r1, #16
    bb76:	2000      	movs	r0, #0
    bb78:	f7fd f9d2 	bl	8f20 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    bb7c:	f3bf 8f4f 	dsb	sy
}
    bb80:	bf00      	nop
    bb82:	bd08      	pop	{r3, pc}

0000bb84 <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    bb84:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    bb86:	2001      	movs	r0, #1
    bb88:	f7fd fb06 	bl	9198 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    bb8c:	f3bf 8f4f 	dsb	sy
}
    bb90:	bf00      	nop
    bb92:	bd08      	pop	{r3, pc}

0000bb94 <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    bb94:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    bb96:	2001      	movs	r0, #1
    bb98:	f7fd fa9e 	bl	90d8 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    bb9c:	f3bf 8f4f 	dsb	sy
}
    bba0:	bf00      	nop
    bba2:	bd08      	pop	{r3, pc}

0000bba4 <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    bba4:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    bba6:	220f      	movs	r2, #15
    bba8:	2100      	movs	r1, #0
    bbaa:	2001      	movs	r0, #1
    bbac:	f7fd f9b8 	bl	8f20 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    bbb0:	f3bf 8f4f 	dsb	sy
}
    bbb4:	bf00      	nop
    bbb6:	bd08      	pop	{r3, pc}

0000bbb8 <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    bbb8:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    bbba:	221f      	movs	r2, #31
    bbbc:	2110      	movs	r1, #16
    bbbe:	2001      	movs	r0, #1
    bbc0:	f7fd f9ae 	bl	8f20 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    bbc4:	f3bf 8f4f 	dsb	sy
}
    bbc8:	bf00      	nop
    bbca:	bd08      	pop	{r3, pc}

0000bbcc <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    bbcc:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    bbce:	2002      	movs	r0, #2
    bbd0:	f7fd fae2 	bl	9198 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    bbd4:	f3bf 8f4f 	dsb	sy
}
    bbd8:	bf00      	nop
    bbda:	bd08      	pop	{r3, pc}

0000bbdc <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    bbdc:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    bbde:	2002      	movs	r0, #2
    bbe0:	f7fd fa7a 	bl	90d8 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    bbe4:	f3bf 8f4f 	dsb	sy
}
    bbe8:	bf00      	nop
    bbea:	bd08      	pop	{r3, pc}

0000bbec <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    bbec:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    bbee:	220f      	movs	r2, #15
    bbf0:	2100      	movs	r1, #0
    bbf2:	2002      	movs	r0, #2
    bbf4:	f7fd f994 	bl	8f20 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    bbf8:	f3bf 8f4f 	dsb	sy
}
    bbfc:	bf00      	nop
    bbfe:	bd08      	pop	{r3, pc}

0000bc00 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    bc00:	b500      	push	{lr}
    bc02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc04:	f7f5 f804 	bl	c10 <Sys_GetCoreID>
    bc08:	4603      	mov	r3, r0
    bc0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
    bc0c:	4a10      	ldr	r2, [pc, #64]	; (bc50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    bc0e:	9b01      	ldr	r3, [sp, #4]
    bc10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc14:	2b00      	cmp	r3, #0
    bc16:	d10d      	bne.n	bc34 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bc18:	f7f4 ff18 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    bc1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bc1e:	9b00      	ldr	r3, [sp, #0]
    bc20:	f003 0301 	and.w	r3, r3, #1
    bc24:	2b00      	cmp	r3, #0
    bc26:	d100      	bne.n	bc2a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bc28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    bc2a:	490a      	ldr	r1, [pc, #40]	; (bc54 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
    bc2c:	9b01      	ldr	r3, [sp, #4]
    bc2e:	9a00      	ldr	r2, [sp, #0]
    bc30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
    bc34:	4a06      	ldr	r2, [pc, #24]	; (bc50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    bc36:	9b01      	ldr	r3, [sp, #4]
    bc38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc3c:	1c5a      	adds	r2, r3, #1
    bc3e:	4904      	ldr	r1, [pc, #16]	; (bc50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    bc40:	9b01      	ldr	r3, [sp, #4]
    bc42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bc46:	bf00      	nop
    bc48:	b003      	add	sp, #12
    bc4a:	f85d fb04 	ldr.w	pc, [sp], #4
    bc4e:	bf00      	nop
    bc50:	1fff8fb8 	.word	0x1fff8fb8
    bc54:	1fff8fb4 	.word	0x1fff8fb4

0000bc58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    bc58:	b500      	push	{lr}
    bc5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bc5c:	f7f4 ffd8 	bl	c10 <Sys_GetCoreID>
    bc60:	4603      	mov	r3, r0
    bc62:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
    bc64:	4a0d      	ldr	r2, [pc, #52]	; (bc9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    bc66:	9b01      	ldr	r3, [sp, #4]
    bc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc6c:	1e5a      	subs	r2, r3, #1
    bc6e:	490b      	ldr	r1, [pc, #44]	; (bc9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    bc70:	9b01      	ldr	r3, [sp, #4]
    bc72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    bc76:	4a0a      	ldr	r2, [pc, #40]	; (bca0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
    bc78:	9b01      	ldr	r3, [sp, #4]
    bc7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc7e:	f003 0301 	and.w	r3, r3, #1
    bc82:	2b00      	cmp	r3, #0
    bc84:	d106      	bne.n	bc94 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    bc86:	4a05      	ldr	r2, [pc, #20]	; (bc9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    bc88:	9b01      	ldr	r3, [sp, #4]
    bc8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bc8e:	2b00      	cmp	r3, #0
    bc90:	d100      	bne.n	bc94 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bc92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bc94:	bf00      	nop
    bc96:	b003      	add	sp, #12
    bc98:	f85d fb04 	ldr.w	pc, [sp], #4
    bc9c:	1fff8fb8 	.word	0x1fff8fb8
    bca0:	1fff8fb4 	.word	0x1fff8fb4

0000bca4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    bca4:	b500      	push	{lr}
    bca6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bca8:	f7f4 ffb2 	bl	c10 <Sys_GetCoreID>
    bcac:	4603      	mov	r3, r0
    bcae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
    bcb0:	4a10      	ldr	r2, [pc, #64]	; (bcf4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    bcb2:	9b01      	ldr	r3, [sp, #4]
    bcb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bcb8:	2b00      	cmp	r3, #0
    bcba:	d10d      	bne.n	bcd8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bcbc:	f7f4 fec6 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    bcc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bcc2:	9b00      	ldr	r3, [sp, #0]
    bcc4:	f003 0301 	and.w	r3, r3, #1
    bcc8:	2b00      	cmp	r3, #0
    bcca:	d100      	bne.n	bcce <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bccc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    bcce:	490a      	ldr	r1, [pc, #40]	; (bcf8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
    bcd0:	9b01      	ldr	r3, [sp, #4]
    bcd2:	9a00      	ldr	r2, [sp, #0]
    bcd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
    bcd8:	4a06      	ldr	r2, [pc, #24]	; (bcf4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    bcda:	9b01      	ldr	r3, [sp, #4]
    bcdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bce0:	1c5a      	adds	r2, r3, #1
    bce2:	4904      	ldr	r1, [pc, #16]	; (bcf4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    bce4:	9b01      	ldr	r3, [sp, #4]
    bce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bcea:	bf00      	nop
    bcec:	b003      	add	sp, #12
    bcee:	f85d fb04 	ldr.w	pc, [sp], #4
    bcf2:	bf00      	nop
    bcf4:	1fff8fc0 	.word	0x1fff8fc0
    bcf8:	1fff8fbc 	.word	0x1fff8fbc

0000bcfc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    bcfc:	b500      	push	{lr}
    bcfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd00:	f7f4 ff86 	bl	c10 <Sys_GetCoreID>
    bd04:	4603      	mov	r3, r0
    bd06:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
    bd08:	4a0d      	ldr	r2, [pc, #52]	; (bd40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    bd0a:	9b01      	ldr	r3, [sp, #4]
    bd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd10:	1e5a      	subs	r2, r3, #1
    bd12:	490b      	ldr	r1, [pc, #44]	; (bd40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    bd14:	9b01      	ldr	r3, [sp, #4]
    bd16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    bd1a:	4a0a      	ldr	r2, [pc, #40]	; (bd44 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
    bd1c:	9b01      	ldr	r3, [sp, #4]
    bd1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd22:	f003 0301 	and.w	r3, r3, #1
    bd26:	2b00      	cmp	r3, #0
    bd28:	d106      	bne.n	bd38 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    bd2a:	4a05      	ldr	r2, [pc, #20]	; (bd40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    bd2c:	9b01      	ldr	r3, [sp, #4]
    bd2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd32:	2b00      	cmp	r3, #0
    bd34:	d100      	bne.n	bd38 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bd36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bd38:	bf00      	nop
    bd3a:	b003      	add	sp, #12
    bd3c:	f85d fb04 	ldr.w	pc, [sp], #4
    bd40:	1fff8fc0 	.word	0x1fff8fc0
    bd44:	1fff8fbc 	.word	0x1fff8fbc

0000bd48 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    bd48:	b500      	push	{lr}
    bd4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bd4c:	f7f4 ff60 	bl	c10 <Sys_GetCoreID>
    bd50:	4603      	mov	r3, r0
    bd52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
    bd54:	4a10      	ldr	r2, [pc, #64]	; (bd98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    bd56:	9b01      	ldr	r3, [sp, #4]
    bd58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd5c:	2b00      	cmp	r3, #0
    bd5e:	d10d      	bne.n	bd7c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bd60:	f7f4 fe74 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    bd64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bd66:	9b00      	ldr	r3, [sp, #0]
    bd68:	f003 0301 	and.w	r3, r3, #1
    bd6c:	2b00      	cmp	r3, #0
    bd6e:	d100      	bne.n	bd72 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bd70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    bd72:	490a      	ldr	r1, [pc, #40]	; (bd9c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
    bd74:	9b01      	ldr	r3, [sp, #4]
    bd76:	9a00      	ldr	r2, [sp, #0]
    bd78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
    bd7c:	4a06      	ldr	r2, [pc, #24]	; (bd98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    bd7e:	9b01      	ldr	r3, [sp, #4]
    bd80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bd84:	1c5a      	adds	r2, r3, #1
    bd86:	4904      	ldr	r1, [pc, #16]	; (bd98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    bd88:	9b01      	ldr	r3, [sp, #4]
    bd8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bd8e:	bf00      	nop
    bd90:	b003      	add	sp, #12
    bd92:	f85d fb04 	ldr.w	pc, [sp], #4
    bd96:	bf00      	nop
    bd98:	1fff8fc8 	.word	0x1fff8fc8
    bd9c:	1fff8fc4 	.word	0x1fff8fc4

0000bda0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    bda0:	b500      	push	{lr}
    bda2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bda4:	f7f4 ff34 	bl	c10 <Sys_GetCoreID>
    bda8:	4603      	mov	r3, r0
    bdaa:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
    bdac:	4a0d      	ldr	r2, [pc, #52]	; (bde4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    bdae:	9b01      	ldr	r3, [sp, #4]
    bdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdb4:	1e5a      	subs	r2, r3, #1
    bdb6:	490b      	ldr	r1, [pc, #44]	; (bde4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    bdb8:	9b01      	ldr	r3, [sp, #4]
    bdba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    bdbe:	4a0a      	ldr	r2, [pc, #40]	; (bde8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
    bdc0:	9b01      	ldr	r3, [sp, #4]
    bdc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdc6:	f003 0301 	and.w	r3, r3, #1
    bdca:	2b00      	cmp	r3, #0
    bdcc:	d106      	bne.n	bddc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    bdce:	4a05      	ldr	r2, [pc, #20]	; (bde4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    bdd0:	9b01      	ldr	r3, [sp, #4]
    bdd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bdd6:	2b00      	cmp	r3, #0
    bdd8:	d100      	bne.n	bddc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bdda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bddc:	bf00      	nop
    bdde:	b003      	add	sp, #12
    bde0:	f85d fb04 	ldr.w	pc, [sp], #4
    bde4:	1fff8fc8 	.word	0x1fff8fc8
    bde8:	1fff8fc4 	.word	0x1fff8fc4

0000bdec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    bdec:	b500      	push	{lr}
    bdee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bdf0:	f7f4 ff0e 	bl	c10 <Sys_GetCoreID>
    bdf4:	4603      	mov	r3, r0
    bdf6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
    bdf8:	4a10      	ldr	r2, [pc, #64]	; (be3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    bdfa:	9b01      	ldr	r3, [sp, #4]
    bdfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be00:	2b00      	cmp	r3, #0
    be02:	d10d      	bne.n	be20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    be04:	f7f4 fe22 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    be08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    be0a:	9b00      	ldr	r3, [sp, #0]
    be0c:	f003 0301 	and.w	r3, r3, #1
    be10:	2b00      	cmp	r3, #0
    be12:	d100      	bne.n	be16 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    be14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    be16:	490a      	ldr	r1, [pc, #40]	; (be40 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
    be18:	9b01      	ldr	r3, [sp, #4]
    be1a:	9a00      	ldr	r2, [sp, #0]
    be1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
    be20:	4a06      	ldr	r2, [pc, #24]	; (be3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    be22:	9b01      	ldr	r3, [sp, #4]
    be24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be28:	1c5a      	adds	r2, r3, #1
    be2a:	4904      	ldr	r1, [pc, #16]	; (be3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    be2c:	9b01      	ldr	r3, [sp, #4]
    be2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    be32:	bf00      	nop
    be34:	b003      	add	sp, #12
    be36:	f85d fb04 	ldr.w	pc, [sp], #4
    be3a:	bf00      	nop
    be3c:	1fff8fd0 	.word	0x1fff8fd0
    be40:	1fff8fcc 	.word	0x1fff8fcc

0000be44 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    be44:	b500      	push	{lr}
    be46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be48:	f7f4 fee2 	bl	c10 <Sys_GetCoreID>
    be4c:	4603      	mov	r3, r0
    be4e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
    be50:	4a0d      	ldr	r2, [pc, #52]	; (be88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    be52:	9b01      	ldr	r3, [sp, #4]
    be54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be58:	1e5a      	subs	r2, r3, #1
    be5a:	490b      	ldr	r1, [pc, #44]	; (be88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    be5c:	9b01      	ldr	r3, [sp, #4]
    be5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    be62:	4a0a      	ldr	r2, [pc, #40]	; (be8c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
    be64:	9b01      	ldr	r3, [sp, #4]
    be66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be6a:	f003 0301 	and.w	r3, r3, #1
    be6e:	2b00      	cmp	r3, #0
    be70:	d106      	bne.n	be80 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    be72:	4a05      	ldr	r2, [pc, #20]	; (be88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    be74:	9b01      	ldr	r3, [sp, #4]
    be76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    be7a:	2b00      	cmp	r3, #0
    be7c:	d100      	bne.n	be80 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    be7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    be80:	bf00      	nop
    be82:	b003      	add	sp, #12
    be84:	f85d fb04 	ldr.w	pc, [sp], #4
    be88:	1fff8fd0 	.word	0x1fff8fd0
    be8c:	1fff8fcc 	.word	0x1fff8fcc

0000be90 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    be90:	b500      	push	{lr}
    be92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    be94:	f7f4 febc 	bl	c10 <Sys_GetCoreID>
    be98:	4603      	mov	r3, r0
    be9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
    be9c:	4a10      	ldr	r2, [pc, #64]	; (bee0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    be9e:	9b01      	ldr	r3, [sp, #4]
    bea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bea4:	2b00      	cmp	r3, #0
    bea6:	d10d      	bne.n	bec4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bea8:	f7f4 fdd0 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    beac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    beae:	9b00      	ldr	r3, [sp, #0]
    beb0:	f003 0301 	and.w	r3, r3, #1
    beb4:	2b00      	cmp	r3, #0
    beb6:	d100      	bne.n	beba <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    beb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    beba:	490a      	ldr	r1, [pc, #40]	; (bee4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
    bebc:	9b01      	ldr	r3, [sp, #4]
    bebe:	9a00      	ldr	r2, [sp, #0]
    bec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
    bec4:	4a06      	ldr	r2, [pc, #24]	; (bee0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    bec6:	9b01      	ldr	r3, [sp, #4]
    bec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    becc:	1c5a      	adds	r2, r3, #1
    bece:	4904      	ldr	r1, [pc, #16]	; (bee0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    bed0:	9b01      	ldr	r3, [sp, #4]
    bed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bed6:	bf00      	nop
    bed8:	b003      	add	sp, #12
    beda:	f85d fb04 	ldr.w	pc, [sp], #4
    bede:	bf00      	nop
    bee0:	1fff8fd8 	.word	0x1fff8fd8
    bee4:	1fff8fd4 	.word	0x1fff8fd4

0000bee8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    bee8:	b500      	push	{lr}
    beea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    beec:	f7f4 fe90 	bl	c10 <Sys_GetCoreID>
    bef0:	4603      	mov	r3, r0
    bef2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
    bef4:	4a0d      	ldr	r2, [pc, #52]	; (bf2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    bef6:	9b01      	ldr	r3, [sp, #4]
    bef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    befc:	1e5a      	subs	r2, r3, #1
    befe:	490b      	ldr	r1, [pc, #44]	; (bf2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    bf00:	9b01      	ldr	r3, [sp, #4]
    bf02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    bf06:	4a0a      	ldr	r2, [pc, #40]	; (bf30 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
    bf08:	9b01      	ldr	r3, [sp, #4]
    bf0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf0e:	f003 0301 	and.w	r3, r3, #1
    bf12:	2b00      	cmp	r3, #0
    bf14:	d106      	bne.n	bf24 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    bf16:	4a05      	ldr	r2, [pc, #20]	; (bf2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    bf18:	9b01      	ldr	r3, [sp, #4]
    bf1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf1e:	2b00      	cmp	r3, #0
    bf20:	d100      	bne.n	bf24 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bf22:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bf24:	bf00      	nop
    bf26:	b003      	add	sp, #12
    bf28:	f85d fb04 	ldr.w	pc, [sp], #4
    bf2c:	1fff8fd8 	.word	0x1fff8fd8
    bf30:	1fff8fd4 	.word	0x1fff8fd4

0000bf34 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    bf34:	b500      	push	{lr}
    bf36:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf38:	f7f4 fe6a 	bl	c10 <Sys_GetCoreID>
    bf3c:	4603      	mov	r3, r0
    bf3e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
    bf40:	4a10      	ldr	r2, [pc, #64]	; (bf84 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    bf42:	9b01      	ldr	r3, [sp, #4]
    bf44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf48:	2b00      	cmp	r3, #0
    bf4a:	d10d      	bne.n	bf68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bf4c:	f7f4 fd7e 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    bf50:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bf52:	9b00      	ldr	r3, [sp, #0]
    bf54:	f003 0301 	and.w	r3, r3, #1
    bf58:	2b00      	cmp	r3, #0
    bf5a:	d100      	bne.n	bf5e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    bf5c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    bf5e:	490a      	ldr	r1, [pc, #40]	; (bf88 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
    bf60:	9b01      	ldr	r3, [sp, #4]
    bf62:	9a00      	ldr	r2, [sp, #0]
    bf64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
    bf68:	4a06      	ldr	r2, [pc, #24]	; (bf84 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    bf6a:	9b01      	ldr	r3, [sp, #4]
    bf6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf70:	1c5a      	adds	r2, r3, #1
    bf72:	4904      	ldr	r1, [pc, #16]	; (bf84 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    bf74:	9b01      	ldr	r3, [sp, #4]
    bf76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bf7a:	bf00      	nop
    bf7c:	b003      	add	sp, #12
    bf7e:	f85d fb04 	ldr.w	pc, [sp], #4
    bf82:	bf00      	nop
    bf84:	1fff8fe0 	.word	0x1fff8fe0
    bf88:	1fff8fdc 	.word	0x1fff8fdc

0000bf8c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    bf8c:	b500      	push	{lr}
    bf8e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bf90:	f7f4 fe3e 	bl	c10 <Sys_GetCoreID>
    bf94:	4603      	mov	r3, r0
    bf96:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
    bf98:	4a0d      	ldr	r2, [pc, #52]	; (bfd0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    bf9a:	9b01      	ldr	r3, [sp, #4]
    bf9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfa0:	1e5a      	subs	r2, r3, #1
    bfa2:	490b      	ldr	r1, [pc, #44]	; (bfd0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    bfa4:	9b01      	ldr	r3, [sp, #4]
    bfa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    bfaa:	4a0a      	ldr	r2, [pc, #40]	; (bfd4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
    bfac:	9b01      	ldr	r3, [sp, #4]
    bfae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfb2:	f003 0301 	and.w	r3, r3, #1
    bfb6:	2b00      	cmp	r3, #0
    bfb8:	d106      	bne.n	bfc8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    bfba:	4a05      	ldr	r2, [pc, #20]	; (bfd0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    bfbc:	9b01      	ldr	r3, [sp, #4]
    bfbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfc2:	2b00      	cmp	r3, #0
    bfc4:	d100      	bne.n	bfc8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    bfc6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    bfc8:	bf00      	nop
    bfca:	b003      	add	sp, #12
    bfcc:	f85d fb04 	ldr.w	pc, [sp], #4
    bfd0:	1fff8fe0 	.word	0x1fff8fe0
    bfd4:	1fff8fdc 	.word	0x1fff8fdc

0000bfd8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    bfd8:	b500      	push	{lr}
    bfda:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    bfdc:	f7f4 fe18 	bl	c10 <Sys_GetCoreID>
    bfe0:	4603      	mov	r3, r0
    bfe2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
    bfe4:	4a10      	ldr	r2, [pc, #64]	; (c028 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    bfe6:	9b01      	ldr	r3, [sp, #4]
    bfe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bfec:	2b00      	cmp	r3, #0
    bfee:	d10d      	bne.n	c00c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    bff0:	f7f4 fd2c 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    bff4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    bff6:	9b00      	ldr	r3, [sp, #0]
    bff8:	f003 0301 	and.w	r3, r3, #1
    bffc:	2b00      	cmp	r3, #0
    bffe:	d100      	bne.n	c002 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c000:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    c002:	490a      	ldr	r1, [pc, #40]	; (c02c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
    c004:	9b01      	ldr	r3, [sp, #4]
    c006:	9a00      	ldr	r2, [sp, #0]
    c008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
    c00c:	4a06      	ldr	r2, [pc, #24]	; (c028 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    c00e:	9b01      	ldr	r3, [sp, #4]
    c010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c014:	1c5a      	adds	r2, r3, #1
    c016:	4904      	ldr	r1, [pc, #16]	; (c028 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    c018:	9b01      	ldr	r3, [sp, #4]
    c01a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c01e:	bf00      	nop
    c020:	b003      	add	sp, #12
    c022:	f85d fb04 	ldr.w	pc, [sp], #4
    c026:	bf00      	nop
    c028:	1fff8fe8 	.word	0x1fff8fe8
    c02c:	1fff8fe4 	.word	0x1fff8fe4

0000c030 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    c030:	b500      	push	{lr}
    c032:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c034:	f7f4 fdec 	bl	c10 <Sys_GetCoreID>
    c038:	4603      	mov	r3, r0
    c03a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
    c03c:	4a0d      	ldr	r2, [pc, #52]	; (c074 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    c03e:	9b01      	ldr	r3, [sp, #4]
    c040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c044:	1e5a      	subs	r2, r3, #1
    c046:	490b      	ldr	r1, [pc, #44]	; (c074 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    c048:	9b01      	ldr	r3, [sp, #4]
    c04a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    c04e:	4a0a      	ldr	r2, [pc, #40]	; (c078 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
    c050:	9b01      	ldr	r3, [sp, #4]
    c052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c056:	f003 0301 	and.w	r3, r3, #1
    c05a:	2b00      	cmp	r3, #0
    c05c:	d106      	bne.n	c06c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    c05e:	4a05      	ldr	r2, [pc, #20]	; (c074 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    c060:	9b01      	ldr	r3, [sp, #4]
    c062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c066:	2b00      	cmp	r3, #0
    c068:	d100      	bne.n	c06c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c06a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c06c:	bf00      	nop
    c06e:	b003      	add	sp, #12
    c070:	f85d fb04 	ldr.w	pc, [sp], #4
    c074:	1fff8fe8 	.word	0x1fff8fe8
    c078:	1fff8fe4 	.word	0x1fff8fe4

0000c07c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    c07c:	b500      	push	{lr}
    c07e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c080:	f7f4 fdc6 	bl	c10 <Sys_GetCoreID>
    c084:	4603      	mov	r3, r0
    c086:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
    c088:	4a10      	ldr	r2, [pc, #64]	; (c0cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    c08a:	9b01      	ldr	r3, [sp, #4]
    c08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c090:	2b00      	cmp	r3, #0
    c092:	d10d      	bne.n	c0b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c094:	f7f4 fcda 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c098:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c09a:	9b00      	ldr	r3, [sp, #0]
    c09c:	f003 0301 	and.w	r3, r3, #1
    c0a0:	2b00      	cmp	r3, #0
    c0a2:	d100      	bne.n	c0a6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c0a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    c0a6:	490a      	ldr	r1, [pc, #40]	; (c0d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
    c0a8:	9b01      	ldr	r3, [sp, #4]
    c0aa:	9a00      	ldr	r2, [sp, #0]
    c0ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
    c0b0:	4a06      	ldr	r2, [pc, #24]	; (c0cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    c0b2:	9b01      	ldr	r3, [sp, #4]
    c0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0b8:	1c5a      	adds	r2, r3, #1
    c0ba:	4904      	ldr	r1, [pc, #16]	; (c0cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    c0bc:	9b01      	ldr	r3, [sp, #4]
    c0be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c0c2:	bf00      	nop
    c0c4:	b003      	add	sp, #12
    c0c6:	f85d fb04 	ldr.w	pc, [sp], #4
    c0ca:	bf00      	nop
    c0cc:	1fff8ff0 	.word	0x1fff8ff0
    c0d0:	1fff8fec 	.word	0x1fff8fec

0000c0d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    c0d4:	b500      	push	{lr}
    c0d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c0d8:	f7f4 fd9a 	bl	c10 <Sys_GetCoreID>
    c0dc:	4603      	mov	r3, r0
    c0de:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
    c0e0:	4a0d      	ldr	r2, [pc, #52]	; (c118 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    c0e2:	9b01      	ldr	r3, [sp, #4]
    c0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0e8:	1e5a      	subs	r2, r3, #1
    c0ea:	490b      	ldr	r1, [pc, #44]	; (c118 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    c0ec:	9b01      	ldr	r3, [sp, #4]
    c0ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    c0f2:	4a0a      	ldr	r2, [pc, #40]	; (c11c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
    c0f4:	9b01      	ldr	r3, [sp, #4]
    c0f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c0fa:	f003 0301 	and.w	r3, r3, #1
    c0fe:	2b00      	cmp	r3, #0
    c100:	d106      	bne.n	c110 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    c102:	4a05      	ldr	r2, [pc, #20]	; (c118 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    c104:	9b01      	ldr	r3, [sp, #4]
    c106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c10a:	2b00      	cmp	r3, #0
    c10c:	d100      	bne.n	c110 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c10e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c110:	bf00      	nop
    c112:	b003      	add	sp, #12
    c114:	f85d fb04 	ldr.w	pc, [sp], #4
    c118:	1fff8ff0 	.word	0x1fff8ff0
    c11c:	1fff8fec 	.word	0x1fff8fec

0000c120 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    c120:	b500      	push	{lr}
    c122:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c124:	f7f4 fd74 	bl	c10 <Sys_GetCoreID>
    c128:	4603      	mov	r3, r0
    c12a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
    c12c:	4a10      	ldr	r2, [pc, #64]	; (c170 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    c12e:	9b01      	ldr	r3, [sp, #4]
    c130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c134:	2b00      	cmp	r3, #0
    c136:	d10d      	bne.n	c154 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c138:	f7f4 fc88 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c13c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c13e:	9b00      	ldr	r3, [sp, #0]
    c140:	f003 0301 	and.w	r3, r3, #1
    c144:	2b00      	cmp	r3, #0
    c146:	d100      	bne.n	c14a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c148:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    c14a:	490a      	ldr	r1, [pc, #40]	; (c174 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
    c14c:	9b01      	ldr	r3, [sp, #4]
    c14e:	9a00      	ldr	r2, [sp, #0]
    c150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
    c154:	4a06      	ldr	r2, [pc, #24]	; (c170 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    c156:	9b01      	ldr	r3, [sp, #4]
    c158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c15c:	1c5a      	adds	r2, r3, #1
    c15e:	4904      	ldr	r1, [pc, #16]	; (c170 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    c160:	9b01      	ldr	r3, [sp, #4]
    c162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c166:	bf00      	nop
    c168:	b003      	add	sp, #12
    c16a:	f85d fb04 	ldr.w	pc, [sp], #4
    c16e:	bf00      	nop
    c170:	1fff8ff8 	.word	0x1fff8ff8
    c174:	1fff8ff4 	.word	0x1fff8ff4

0000c178 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    c178:	b500      	push	{lr}
    c17a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c17c:	f7f4 fd48 	bl	c10 <Sys_GetCoreID>
    c180:	4603      	mov	r3, r0
    c182:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
    c184:	4a0d      	ldr	r2, [pc, #52]	; (c1bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    c186:	9b01      	ldr	r3, [sp, #4]
    c188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c18c:	1e5a      	subs	r2, r3, #1
    c18e:	490b      	ldr	r1, [pc, #44]	; (c1bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    c190:	9b01      	ldr	r3, [sp, #4]
    c192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    c196:	4a0a      	ldr	r2, [pc, #40]	; (c1c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
    c198:	9b01      	ldr	r3, [sp, #4]
    c19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c19e:	f003 0301 	and.w	r3, r3, #1
    c1a2:	2b00      	cmp	r3, #0
    c1a4:	d106      	bne.n	c1b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    c1a6:	4a05      	ldr	r2, [pc, #20]	; (c1bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    c1a8:	9b01      	ldr	r3, [sp, #4]
    c1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	d100      	bne.n	c1b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c1b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c1b4:	bf00      	nop
    c1b6:	b003      	add	sp, #12
    c1b8:	f85d fb04 	ldr.w	pc, [sp], #4
    c1bc:	1fff8ff8 	.word	0x1fff8ff8
    c1c0:	1fff8ff4 	.word	0x1fff8ff4

0000c1c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    c1c4:	b500      	push	{lr}
    c1c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c1c8:	f7f4 fd22 	bl	c10 <Sys_GetCoreID>
    c1cc:	4603      	mov	r3, r0
    c1ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
    c1d0:	4a10      	ldr	r2, [pc, #64]	; (c214 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    c1d2:	9b01      	ldr	r3, [sp, #4]
    c1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c1d8:	2b00      	cmp	r3, #0
    c1da:	d10d      	bne.n	c1f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c1dc:	f7f4 fc36 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c1e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c1e2:	9b00      	ldr	r3, [sp, #0]
    c1e4:	f003 0301 	and.w	r3, r3, #1
    c1e8:	2b00      	cmp	r3, #0
    c1ea:	d100      	bne.n	c1ee <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c1ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    c1ee:	490a      	ldr	r1, [pc, #40]	; (c218 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
    c1f0:	9b01      	ldr	r3, [sp, #4]
    c1f2:	9a00      	ldr	r2, [sp, #0]
    c1f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
    c1f8:	4a06      	ldr	r2, [pc, #24]	; (c214 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    c1fa:	9b01      	ldr	r3, [sp, #4]
    c1fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c200:	1c5a      	adds	r2, r3, #1
    c202:	4904      	ldr	r1, [pc, #16]	; (c214 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    c204:	9b01      	ldr	r3, [sp, #4]
    c206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c20a:	bf00      	nop
    c20c:	b003      	add	sp, #12
    c20e:	f85d fb04 	ldr.w	pc, [sp], #4
    c212:	bf00      	nop
    c214:	1fff9000 	.word	0x1fff9000
    c218:	1fff8ffc 	.word	0x1fff8ffc

0000c21c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    c21c:	b500      	push	{lr}
    c21e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c220:	f7f4 fcf6 	bl	c10 <Sys_GetCoreID>
    c224:	4603      	mov	r3, r0
    c226:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
    c228:	4a0d      	ldr	r2, [pc, #52]	; (c260 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    c22a:	9b01      	ldr	r3, [sp, #4]
    c22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c230:	1e5a      	subs	r2, r3, #1
    c232:	490b      	ldr	r1, [pc, #44]	; (c260 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    c234:	9b01      	ldr	r3, [sp, #4]
    c236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    c23a:	4a0a      	ldr	r2, [pc, #40]	; (c264 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
    c23c:	9b01      	ldr	r3, [sp, #4]
    c23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c242:	f003 0301 	and.w	r3, r3, #1
    c246:	2b00      	cmp	r3, #0
    c248:	d106      	bne.n	c258 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    c24a:	4a05      	ldr	r2, [pc, #20]	; (c260 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    c24c:	9b01      	ldr	r3, [sp, #4]
    c24e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c252:	2b00      	cmp	r3, #0
    c254:	d100      	bne.n	c258 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c256:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c258:	bf00      	nop
    c25a:	b003      	add	sp, #12
    c25c:	f85d fb04 	ldr.w	pc, [sp], #4
    c260:	1fff9000 	.word	0x1fff9000
    c264:	1fff8ffc 	.word	0x1fff8ffc

0000c268 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    c268:	b500      	push	{lr}
    c26a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c26c:	f7f4 fcd0 	bl	c10 <Sys_GetCoreID>
    c270:	4603      	mov	r3, r0
    c272:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
    c274:	4a10      	ldr	r2, [pc, #64]	; (c2b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    c276:	9b01      	ldr	r3, [sp, #4]
    c278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c27c:	2b00      	cmp	r3, #0
    c27e:	d10d      	bne.n	c29c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c280:	f7f4 fbe4 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c284:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c286:	9b00      	ldr	r3, [sp, #0]
    c288:	f003 0301 	and.w	r3, r3, #1
    c28c:	2b00      	cmp	r3, #0
    c28e:	d100      	bne.n	c292 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c290:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    c292:	490a      	ldr	r1, [pc, #40]	; (c2bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
    c294:	9b01      	ldr	r3, [sp, #4]
    c296:	9a00      	ldr	r2, [sp, #0]
    c298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
    c29c:	4a06      	ldr	r2, [pc, #24]	; (c2b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    c29e:	9b01      	ldr	r3, [sp, #4]
    c2a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2a4:	1c5a      	adds	r2, r3, #1
    c2a6:	4904      	ldr	r1, [pc, #16]	; (c2b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    c2a8:	9b01      	ldr	r3, [sp, #4]
    c2aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c2ae:	bf00      	nop
    c2b0:	b003      	add	sp, #12
    c2b2:	f85d fb04 	ldr.w	pc, [sp], #4
    c2b6:	bf00      	nop
    c2b8:	1fff9008 	.word	0x1fff9008
    c2bc:	1fff9004 	.word	0x1fff9004

0000c2c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    c2c0:	b500      	push	{lr}
    c2c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c2c4:	f7f4 fca4 	bl	c10 <Sys_GetCoreID>
    c2c8:	4603      	mov	r3, r0
    c2ca:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
    c2cc:	4a0d      	ldr	r2, [pc, #52]	; (c304 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    c2ce:	9b01      	ldr	r3, [sp, #4]
    c2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2d4:	1e5a      	subs	r2, r3, #1
    c2d6:	490b      	ldr	r1, [pc, #44]	; (c304 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    c2d8:	9b01      	ldr	r3, [sp, #4]
    c2da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    c2de:	4a0a      	ldr	r2, [pc, #40]	; (c308 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
    c2e0:	9b01      	ldr	r3, [sp, #4]
    c2e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2e6:	f003 0301 	and.w	r3, r3, #1
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d106      	bne.n	c2fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    c2ee:	4a05      	ldr	r2, [pc, #20]	; (c304 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    c2f0:	9b01      	ldr	r3, [sp, #4]
    c2f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c2f6:	2b00      	cmp	r3, #0
    c2f8:	d100      	bne.n	c2fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c2fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c2fc:	bf00      	nop
    c2fe:	b003      	add	sp, #12
    c300:	f85d fb04 	ldr.w	pc, [sp], #4
    c304:	1fff9008 	.word	0x1fff9008
    c308:	1fff9004 	.word	0x1fff9004

0000c30c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    c30c:	b500      	push	{lr}
    c30e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c310:	f7f4 fc7e 	bl	c10 <Sys_GetCoreID>
    c314:	4603      	mov	r3, r0
    c316:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
    c318:	4a10      	ldr	r2, [pc, #64]	; (c35c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    c31a:	9b01      	ldr	r3, [sp, #4]
    c31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c320:	2b00      	cmp	r3, #0
    c322:	d10d      	bne.n	c340 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c324:	f7f4 fb92 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c328:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c32a:	9b00      	ldr	r3, [sp, #0]
    c32c:	f003 0301 	and.w	r3, r3, #1
    c330:	2b00      	cmp	r3, #0
    c332:	d100      	bne.n	c336 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c334:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    c336:	490a      	ldr	r1, [pc, #40]	; (c360 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
    c338:	9b01      	ldr	r3, [sp, #4]
    c33a:	9a00      	ldr	r2, [sp, #0]
    c33c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
    c340:	4a06      	ldr	r2, [pc, #24]	; (c35c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    c342:	9b01      	ldr	r3, [sp, #4]
    c344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c348:	1c5a      	adds	r2, r3, #1
    c34a:	4904      	ldr	r1, [pc, #16]	; (c35c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    c34c:	9b01      	ldr	r3, [sp, #4]
    c34e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c352:	bf00      	nop
    c354:	b003      	add	sp, #12
    c356:	f85d fb04 	ldr.w	pc, [sp], #4
    c35a:	bf00      	nop
    c35c:	1fff9010 	.word	0x1fff9010
    c360:	1fff900c 	.word	0x1fff900c

0000c364 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    c364:	b500      	push	{lr}
    c366:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c368:	f7f4 fc52 	bl	c10 <Sys_GetCoreID>
    c36c:	4603      	mov	r3, r0
    c36e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
    c370:	4a0d      	ldr	r2, [pc, #52]	; (c3a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    c372:	9b01      	ldr	r3, [sp, #4]
    c374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c378:	1e5a      	subs	r2, r3, #1
    c37a:	490b      	ldr	r1, [pc, #44]	; (c3a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    c37c:	9b01      	ldr	r3, [sp, #4]
    c37e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    c382:	4a0a      	ldr	r2, [pc, #40]	; (c3ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
    c384:	9b01      	ldr	r3, [sp, #4]
    c386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c38a:	f003 0301 	and.w	r3, r3, #1
    c38e:	2b00      	cmp	r3, #0
    c390:	d106      	bne.n	c3a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    c392:	4a05      	ldr	r2, [pc, #20]	; (c3a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    c394:	9b01      	ldr	r3, [sp, #4]
    c396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c39a:	2b00      	cmp	r3, #0
    c39c:	d100      	bne.n	c3a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c39e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c3a0:	bf00      	nop
    c3a2:	b003      	add	sp, #12
    c3a4:	f85d fb04 	ldr.w	pc, [sp], #4
    c3a8:	1fff9010 	.word	0x1fff9010
    c3ac:	1fff900c 	.word	0x1fff900c

0000c3b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    c3b0:	b500      	push	{lr}
    c3b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c3b4:	f7f4 fc2c 	bl	c10 <Sys_GetCoreID>
    c3b8:	4603      	mov	r3, r0
    c3ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
    c3bc:	4a10      	ldr	r2, [pc, #64]	; (c400 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    c3be:	9b01      	ldr	r3, [sp, #4]
    c3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3c4:	2b00      	cmp	r3, #0
    c3c6:	d10d      	bne.n	c3e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c3c8:	f7f4 fb40 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c3cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c3ce:	9b00      	ldr	r3, [sp, #0]
    c3d0:	f003 0301 	and.w	r3, r3, #1
    c3d4:	2b00      	cmp	r3, #0
    c3d6:	d100      	bne.n	c3da <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c3d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    c3da:	490a      	ldr	r1, [pc, #40]	; (c404 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
    c3dc:	9b01      	ldr	r3, [sp, #4]
    c3de:	9a00      	ldr	r2, [sp, #0]
    c3e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
    c3e4:	4a06      	ldr	r2, [pc, #24]	; (c400 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    c3e6:	9b01      	ldr	r3, [sp, #4]
    c3e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c3ec:	1c5a      	adds	r2, r3, #1
    c3ee:	4904      	ldr	r1, [pc, #16]	; (c400 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    c3f0:	9b01      	ldr	r3, [sp, #4]
    c3f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c3f6:	bf00      	nop
    c3f8:	b003      	add	sp, #12
    c3fa:	f85d fb04 	ldr.w	pc, [sp], #4
    c3fe:	bf00      	nop
    c400:	1fff9018 	.word	0x1fff9018
    c404:	1fff9014 	.word	0x1fff9014

0000c408 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    c408:	b500      	push	{lr}
    c40a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c40c:	f7f4 fc00 	bl	c10 <Sys_GetCoreID>
    c410:	4603      	mov	r3, r0
    c412:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
    c414:	4a0d      	ldr	r2, [pc, #52]	; (c44c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    c416:	9b01      	ldr	r3, [sp, #4]
    c418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c41c:	1e5a      	subs	r2, r3, #1
    c41e:	490b      	ldr	r1, [pc, #44]	; (c44c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    c420:	9b01      	ldr	r3, [sp, #4]
    c422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    c426:	4a0a      	ldr	r2, [pc, #40]	; (c450 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
    c428:	9b01      	ldr	r3, [sp, #4]
    c42a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c42e:	f003 0301 	and.w	r3, r3, #1
    c432:	2b00      	cmp	r3, #0
    c434:	d106      	bne.n	c444 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    c436:	4a05      	ldr	r2, [pc, #20]	; (c44c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    c438:	9b01      	ldr	r3, [sp, #4]
    c43a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c43e:	2b00      	cmp	r3, #0
    c440:	d100      	bne.n	c444 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c442:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c444:	bf00      	nop
    c446:	b003      	add	sp, #12
    c448:	f85d fb04 	ldr.w	pc, [sp], #4
    c44c:	1fff9018 	.word	0x1fff9018
    c450:	1fff9014 	.word	0x1fff9014

0000c454 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    c454:	b500      	push	{lr}
    c456:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c458:	f7f4 fbda 	bl	c10 <Sys_GetCoreID>
    c45c:	4603      	mov	r3, r0
    c45e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
    c460:	4a10      	ldr	r2, [pc, #64]	; (c4a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    c462:	9b01      	ldr	r3, [sp, #4]
    c464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c468:	2b00      	cmp	r3, #0
    c46a:	d10d      	bne.n	c488 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c46c:	f7f4 faee 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c470:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c472:	9b00      	ldr	r3, [sp, #0]
    c474:	f003 0301 	and.w	r3, r3, #1
    c478:	2b00      	cmp	r3, #0
    c47a:	d100      	bne.n	c47e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c47c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    c47e:	490a      	ldr	r1, [pc, #40]	; (c4a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
    c480:	9b01      	ldr	r3, [sp, #4]
    c482:	9a00      	ldr	r2, [sp, #0]
    c484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
    c488:	4a06      	ldr	r2, [pc, #24]	; (c4a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    c48a:	9b01      	ldr	r3, [sp, #4]
    c48c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c490:	1c5a      	adds	r2, r3, #1
    c492:	4904      	ldr	r1, [pc, #16]	; (c4a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    c494:	9b01      	ldr	r3, [sp, #4]
    c496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c49a:	bf00      	nop
    c49c:	b003      	add	sp, #12
    c49e:	f85d fb04 	ldr.w	pc, [sp], #4
    c4a2:	bf00      	nop
    c4a4:	1fff9020 	.word	0x1fff9020
    c4a8:	1fff901c 	.word	0x1fff901c

0000c4ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    c4ac:	b500      	push	{lr}
    c4ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4b0:	f7f4 fbae 	bl	c10 <Sys_GetCoreID>
    c4b4:	4603      	mov	r3, r0
    c4b6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
    c4b8:	4a0d      	ldr	r2, [pc, #52]	; (c4f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    c4ba:	9b01      	ldr	r3, [sp, #4]
    c4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4c0:	1e5a      	subs	r2, r3, #1
    c4c2:	490b      	ldr	r1, [pc, #44]	; (c4f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    c4c4:	9b01      	ldr	r3, [sp, #4]
    c4c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    c4ca:	4a0a      	ldr	r2, [pc, #40]	; (c4f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
    c4cc:	9b01      	ldr	r3, [sp, #4]
    c4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4d2:	f003 0301 	and.w	r3, r3, #1
    c4d6:	2b00      	cmp	r3, #0
    c4d8:	d106      	bne.n	c4e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    c4da:	4a05      	ldr	r2, [pc, #20]	; (c4f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    c4dc:	9b01      	ldr	r3, [sp, #4]
    c4de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d100      	bne.n	c4e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c4e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c4e8:	bf00      	nop
    c4ea:	b003      	add	sp, #12
    c4ec:	f85d fb04 	ldr.w	pc, [sp], #4
    c4f0:	1fff9020 	.word	0x1fff9020
    c4f4:	1fff901c 	.word	0x1fff901c

0000c4f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    c4f8:	b500      	push	{lr}
    c4fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c4fc:	f7f4 fb88 	bl	c10 <Sys_GetCoreID>
    c500:	4603      	mov	r3, r0
    c502:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
    c504:	4a10      	ldr	r2, [pc, #64]	; (c548 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    c506:	9b01      	ldr	r3, [sp, #4]
    c508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c50c:	2b00      	cmp	r3, #0
    c50e:	d10d      	bne.n	c52c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c510:	f7f4 fa9c 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c514:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c516:	9b00      	ldr	r3, [sp, #0]
    c518:	f003 0301 	and.w	r3, r3, #1
    c51c:	2b00      	cmp	r3, #0
    c51e:	d100      	bne.n	c522 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c520:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    c522:	490a      	ldr	r1, [pc, #40]	; (c54c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
    c524:	9b01      	ldr	r3, [sp, #4]
    c526:	9a00      	ldr	r2, [sp, #0]
    c528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
    c52c:	4a06      	ldr	r2, [pc, #24]	; (c548 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    c52e:	9b01      	ldr	r3, [sp, #4]
    c530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c534:	1c5a      	adds	r2, r3, #1
    c536:	4904      	ldr	r1, [pc, #16]	; (c548 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    c538:	9b01      	ldr	r3, [sp, #4]
    c53a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c53e:	bf00      	nop
    c540:	b003      	add	sp, #12
    c542:	f85d fb04 	ldr.w	pc, [sp], #4
    c546:	bf00      	nop
    c548:	1fff9028 	.word	0x1fff9028
    c54c:	1fff9024 	.word	0x1fff9024

0000c550 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    c550:	b500      	push	{lr}
    c552:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c554:	f7f4 fb5c 	bl	c10 <Sys_GetCoreID>
    c558:	4603      	mov	r3, r0
    c55a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
    c55c:	4a0d      	ldr	r2, [pc, #52]	; (c594 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    c55e:	9b01      	ldr	r3, [sp, #4]
    c560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c564:	1e5a      	subs	r2, r3, #1
    c566:	490b      	ldr	r1, [pc, #44]	; (c594 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    c568:	9b01      	ldr	r3, [sp, #4]
    c56a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    c56e:	4a0a      	ldr	r2, [pc, #40]	; (c598 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
    c570:	9b01      	ldr	r3, [sp, #4]
    c572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c576:	f003 0301 	and.w	r3, r3, #1
    c57a:	2b00      	cmp	r3, #0
    c57c:	d106      	bne.n	c58c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    c57e:	4a05      	ldr	r2, [pc, #20]	; (c594 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    c580:	9b01      	ldr	r3, [sp, #4]
    c582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c586:	2b00      	cmp	r3, #0
    c588:	d100      	bne.n	c58c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c58a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c58c:	bf00      	nop
    c58e:	b003      	add	sp, #12
    c590:	f85d fb04 	ldr.w	pc, [sp], #4
    c594:	1fff9028 	.word	0x1fff9028
    c598:	1fff9024 	.word	0x1fff9024

0000c59c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    c59c:	b500      	push	{lr}
    c59e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5a0:	f7f4 fb36 	bl	c10 <Sys_GetCoreID>
    c5a4:	4603      	mov	r3, r0
    c5a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
    c5a8:	4a10      	ldr	r2, [pc, #64]	; (c5ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    c5aa:	9b01      	ldr	r3, [sp, #4]
    c5ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5b0:	2b00      	cmp	r3, #0
    c5b2:	d10d      	bne.n	c5d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c5b4:	f7f4 fa4a 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c5b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c5ba:	9b00      	ldr	r3, [sp, #0]
    c5bc:	f003 0301 	and.w	r3, r3, #1
    c5c0:	2b00      	cmp	r3, #0
    c5c2:	d100      	bne.n	c5c6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c5c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    c5c6:	490a      	ldr	r1, [pc, #40]	; (c5f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
    c5c8:	9b01      	ldr	r3, [sp, #4]
    c5ca:	9a00      	ldr	r2, [sp, #0]
    c5cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
    c5d0:	4a06      	ldr	r2, [pc, #24]	; (c5ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    c5d2:	9b01      	ldr	r3, [sp, #4]
    c5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c5d8:	1c5a      	adds	r2, r3, #1
    c5da:	4904      	ldr	r1, [pc, #16]	; (c5ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    c5dc:	9b01      	ldr	r3, [sp, #4]
    c5de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c5e2:	bf00      	nop
    c5e4:	b003      	add	sp, #12
    c5e6:	f85d fb04 	ldr.w	pc, [sp], #4
    c5ea:	bf00      	nop
    c5ec:	1fff9030 	.word	0x1fff9030
    c5f0:	1fff902c 	.word	0x1fff902c

0000c5f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    c5f4:	b500      	push	{lr}
    c5f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c5f8:	f7f4 fb0a 	bl	c10 <Sys_GetCoreID>
    c5fc:	4603      	mov	r3, r0
    c5fe:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
    c600:	4a0d      	ldr	r2, [pc, #52]	; (c638 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    c602:	9b01      	ldr	r3, [sp, #4]
    c604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c608:	1e5a      	subs	r2, r3, #1
    c60a:	490b      	ldr	r1, [pc, #44]	; (c638 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    c60c:	9b01      	ldr	r3, [sp, #4]
    c60e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    c612:	4a0a      	ldr	r2, [pc, #40]	; (c63c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
    c614:	9b01      	ldr	r3, [sp, #4]
    c616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c61a:	f003 0301 	and.w	r3, r3, #1
    c61e:	2b00      	cmp	r3, #0
    c620:	d106      	bne.n	c630 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    c622:	4a05      	ldr	r2, [pc, #20]	; (c638 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    c624:	9b01      	ldr	r3, [sp, #4]
    c626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c62a:	2b00      	cmp	r3, #0
    c62c:	d100      	bne.n	c630 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c62e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c630:	bf00      	nop
    c632:	b003      	add	sp, #12
    c634:	f85d fb04 	ldr.w	pc, [sp], #4
    c638:	1fff9030 	.word	0x1fff9030
    c63c:	1fff902c 	.word	0x1fff902c

0000c640 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    c640:	b500      	push	{lr}
    c642:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c644:	f7f4 fae4 	bl	c10 <Sys_GetCoreID>
    c648:	4603      	mov	r3, r0
    c64a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
    c64c:	4a10      	ldr	r2, [pc, #64]	; (c690 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    c64e:	9b01      	ldr	r3, [sp, #4]
    c650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c654:	2b00      	cmp	r3, #0
    c656:	d10d      	bne.n	c674 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c658:	f7f4 f9f8 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c65c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c65e:	9b00      	ldr	r3, [sp, #0]
    c660:	f003 0301 	and.w	r3, r3, #1
    c664:	2b00      	cmp	r3, #0
    c666:	d100      	bne.n	c66a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c668:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    c66a:	490a      	ldr	r1, [pc, #40]	; (c694 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
    c66c:	9b01      	ldr	r3, [sp, #4]
    c66e:	9a00      	ldr	r2, [sp, #0]
    c670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
    c674:	4a06      	ldr	r2, [pc, #24]	; (c690 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    c676:	9b01      	ldr	r3, [sp, #4]
    c678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c67c:	1c5a      	adds	r2, r3, #1
    c67e:	4904      	ldr	r1, [pc, #16]	; (c690 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    c680:	9b01      	ldr	r3, [sp, #4]
    c682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c686:	bf00      	nop
    c688:	b003      	add	sp, #12
    c68a:	f85d fb04 	ldr.w	pc, [sp], #4
    c68e:	bf00      	nop
    c690:	1fff9038 	.word	0x1fff9038
    c694:	1fff9034 	.word	0x1fff9034

0000c698 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    c698:	b500      	push	{lr}
    c69a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c69c:	f7f4 fab8 	bl	c10 <Sys_GetCoreID>
    c6a0:	4603      	mov	r3, r0
    c6a2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
    c6a4:	4a0d      	ldr	r2, [pc, #52]	; (c6dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    c6a6:	9b01      	ldr	r3, [sp, #4]
    c6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6ac:	1e5a      	subs	r2, r3, #1
    c6ae:	490b      	ldr	r1, [pc, #44]	; (c6dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    c6b0:	9b01      	ldr	r3, [sp, #4]
    c6b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    c6b6:	4a0a      	ldr	r2, [pc, #40]	; (c6e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
    c6b8:	9b01      	ldr	r3, [sp, #4]
    c6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6be:	f003 0301 	and.w	r3, r3, #1
    c6c2:	2b00      	cmp	r3, #0
    c6c4:	d106      	bne.n	c6d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    c6c6:	4a05      	ldr	r2, [pc, #20]	; (c6dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    c6c8:	9b01      	ldr	r3, [sp, #4]
    c6ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d100      	bne.n	c6d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c6d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c6d4:	bf00      	nop
    c6d6:	b003      	add	sp, #12
    c6d8:	f85d fb04 	ldr.w	pc, [sp], #4
    c6dc:	1fff9038 	.word	0x1fff9038
    c6e0:	1fff9034 	.word	0x1fff9034

0000c6e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    c6e4:	b500      	push	{lr}
    c6e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c6e8:	f7f4 fa92 	bl	c10 <Sys_GetCoreID>
    c6ec:	4603      	mov	r3, r0
    c6ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
    c6f0:	4a10      	ldr	r2, [pc, #64]	; (c734 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    c6f2:	9b01      	ldr	r3, [sp, #4]
    c6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c6f8:	2b00      	cmp	r3, #0
    c6fa:	d10d      	bne.n	c718 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c6fc:	f7f4 f9a6 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c700:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c702:	9b00      	ldr	r3, [sp, #0]
    c704:	f003 0301 	and.w	r3, r3, #1
    c708:	2b00      	cmp	r3, #0
    c70a:	d100      	bne.n	c70e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c70c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    c70e:	490a      	ldr	r1, [pc, #40]	; (c738 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
    c710:	9b01      	ldr	r3, [sp, #4]
    c712:	9a00      	ldr	r2, [sp, #0]
    c714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
    c718:	4a06      	ldr	r2, [pc, #24]	; (c734 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    c71a:	9b01      	ldr	r3, [sp, #4]
    c71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c720:	1c5a      	adds	r2, r3, #1
    c722:	4904      	ldr	r1, [pc, #16]	; (c734 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    c724:	9b01      	ldr	r3, [sp, #4]
    c726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c72a:	bf00      	nop
    c72c:	b003      	add	sp, #12
    c72e:	f85d fb04 	ldr.w	pc, [sp], #4
    c732:	bf00      	nop
    c734:	1fff9040 	.word	0x1fff9040
    c738:	1fff903c 	.word	0x1fff903c

0000c73c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    c73c:	b500      	push	{lr}
    c73e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c740:	f7f4 fa66 	bl	c10 <Sys_GetCoreID>
    c744:	4603      	mov	r3, r0
    c746:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
    c748:	4a0d      	ldr	r2, [pc, #52]	; (c780 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    c74a:	9b01      	ldr	r3, [sp, #4]
    c74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c750:	1e5a      	subs	r2, r3, #1
    c752:	490b      	ldr	r1, [pc, #44]	; (c780 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    c754:	9b01      	ldr	r3, [sp, #4]
    c756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    c75a:	4a0a      	ldr	r2, [pc, #40]	; (c784 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
    c75c:	9b01      	ldr	r3, [sp, #4]
    c75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c762:	f003 0301 	and.w	r3, r3, #1
    c766:	2b00      	cmp	r3, #0
    c768:	d106      	bne.n	c778 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    c76a:	4a05      	ldr	r2, [pc, #20]	; (c780 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    c76c:	9b01      	ldr	r3, [sp, #4]
    c76e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c772:	2b00      	cmp	r3, #0
    c774:	d100      	bne.n	c778 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c776:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c778:	bf00      	nop
    c77a:	b003      	add	sp, #12
    c77c:	f85d fb04 	ldr.w	pc, [sp], #4
    c780:	1fff9040 	.word	0x1fff9040
    c784:	1fff903c 	.word	0x1fff903c

0000c788 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    c788:	b500      	push	{lr}
    c78a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c78c:	f7f4 fa40 	bl	c10 <Sys_GetCoreID>
    c790:	4603      	mov	r3, r0
    c792:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
    c794:	4a10      	ldr	r2, [pc, #64]	; (c7d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    c796:	9b01      	ldr	r3, [sp, #4]
    c798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c79c:	2b00      	cmp	r3, #0
    c79e:	d10d      	bne.n	c7bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c7a0:	f7f4 f954 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c7a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c7a6:	9b00      	ldr	r3, [sp, #0]
    c7a8:	f003 0301 	and.w	r3, r3, #1
    c7ac:	2b00      	cmp	r3, #0
    c7ae:	d100      	bne.n	c7b2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c7b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    c7b2:	490a      	ldr	r1, [pc, #40]	; (c7dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
    c7b4:	9b01      	ldr	r3, [sp, #4]
    c7b6:	9a00      	ldr	r2, [sp, #0]
    c7b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
    c7bc:	4a06      	ldr	r2, [pc, #24]	; (c7d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    c7be:	9b01      	ldr	r3, [sp, #4]
    c7c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7c4:	1c5a      	adds	r2, r3, #1
    c7c6:	4904      	ldr	r1, [pc, #16]	; (c7d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    c7c8:	9b01      	ldr	r3, [sp, #4]
    c7ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c7ce:	bf00      	nop
    c7d0:	b003      	add	sp, #12
    c7d2:	f85d fb04 	ldr.w	pc, [sp], #4
    c7d6:	bf00      	nop
    c7d8:	1fff9048 	.word	0x1fff9048
    c7dc:	1fff9044 	.word	0x1fff9044

0000c7e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    c7e0:	b500      	push	{lr}
    c7e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c7e4:	f7f4 fa14 	bl	c10 <Sys_GetCoreID>
    c7e8:	4603      	mov	r3, r0
    c7ea:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
    c7ec:	4a0d      	ldr	r2, [pc, #52]	; (c824 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    c7ee:	9b01      	ldr	r3, [sp, #4]
    c7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c7f4:	1e5a      	subs	r2, r3, #1
    c7f6:	490b      	ldr	r1, [pc, #44]	; (c824 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    c7f8:	9b01      	ldr	r3, [sp, #4]
    c7fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    c7fe:	4a0a      	ldr	r2, [pc, #40]	; (c828 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
    c800:	9b01      	ldr	r3, [sp, #4]
    c802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c806:	f003 0301 	and.w	r3, r3, #1
    c80a:	2b00      	cmp	r3, #0
    c80c:	d106      	bne.n	c81c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    c80e:	4a05      	ldr	r2, [pc, #20]	; (c824 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    c810:	9b01      	ldr	r3, [sp, #4]
    c812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c816:	2b00      	cmp	r3, #0
    c818:	d100      	bne.n	c81c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c81a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c81c:	bf00      	nop
    c81e:	b003      	add	sp, #12
    c820:	f85d fb04 	ldr.w	pc, [sp], #4
    c824:	1fff9048 	.word	0x1fff9048
    c828:	1fff9044 	.word	0x1fff9044

0000c82c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    c82c:	b500      	push	{lr}
    c82e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c830:	f7f4 f9ee 	bl	c10 <Sys_GetCoreID>
    c834:	4603      	mov	r3, r0
    c836:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
    c838:	4a10      	ldr	r2, [pc, #64]	; (c87c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    c83a:	9b01      	ldr	r3, [sp, #4]
    c83c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c840:	2b00      	cmp	r3, #0
    c842:	d10d      	bne.n	c860 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c844:	f7f4 f902 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c848:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c84a:	9b00      	ldr	r3, [sp, #0]
    c84c:	f003 0301 	and.w	r3, r3, #1
    c850:	2b00      	cmp	r3, #0
    c852:	d100      	bne.n	c856 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c854:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    c856:	490a      	ldr	r1, [pc, #40]	; (c880 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
    c858:	9b01      	ldr	r3, [sp, #4]
    c85a:	9a00      	ldr	r2, [sp, #0]
    c85c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
    c860:	4a06      	ldr	r2, [pc, #24]	; (c87c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    c862:	9b01      	ldr	r3, [sp, #4]
    c864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c868:	1c5a      	adds	r2, r3, #1
    c86a:	4904      	ldr	r1, [pc, #16]	; (c87c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    c86c:	9b01      	ldr	r3, [sp, #4]
    c86e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c872:	bf00      	nop
    c874:	b003      	add	sp, #12
    c876:	f85d fb04 	ldr.w	pc, [sp], #4
    c87a:	bf00      	nop
    c87c:	1fff9050 	.word	0x1fff9050
    c880:	1fff904c 	.word	0x1fff904c

0000c884 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    c884:	b500      	push	{lr}
    c886:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c888:	f7f4 f9c2 	bl	c10 <Sys_GetCoreID>
    c88c:	4603      	mov	r3, r0
    c88e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
    c890:	4a0d      	ldr	r2, [pc, #52]	; (c8c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    c892:	9b01      	ldr	r3, [sp, #4]
    c894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c898:	1e5a      	subs	r2, r3, #1
    c89a:	490b      	ldr	r1, [pc, #44]	; (c8c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    c89c:	9b01      	ldr	r3, [sp, #4]
    c89e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    c8a2:	4a0a      	ldr	r2, [pc, #40]	; (c8cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
    c8a4:	9b01      	ldr	r3, [sp, #4]
    c8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8aa:	f003 0301 	and.w	r3, r3, #1
    c8ae:	2b00      	cmp	r3, #0
    c8b0:	d106      	bne.n	c8c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    c8b2:	4a05      	ldr	r2, [pc, #20]	; (c8c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    c8b4:	9b01      	ldr	r3, [sp, #4]
    c8b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8ba:	2b00      	cmp	r3, #0
    c8bc:	d100      	bne.n	c8c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c8be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c8c0:	bf00      	nop
    c8c2:	b003      	add	sp, #12
    c8c4:	f85d fb04 	ldr.w	pc, [sp], #4
    c8c8:	1fff9050 	.word	0x1fff9050
    c8cc:	1fff904c 	.word	0x1fff904c

0000c8d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    c8d0:	b500      	push	{lr}
    c8d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c8d4:	f7f4 f99c 	bl	c10 <Sys_GetCoreID>
    c8d8:	4603      	mov	r3, r0
    c8da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
    c8dc:	4a10      	ldr	r2, [pc, #64]	; (c920 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    c8de:	9b01      	ldr	r3, [sp, #4]
    c8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c8e4:	2b00      	cmp	r3, #0
    c8e6:	d10d      	bne.n	c904 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c8e8:	f7f4 f8b0 	bl	a4c <Can_43_FLEXCAN_schm_read_msr>
    c8ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c8ee:	9b00      	ldr	r3, [sp, #0]
    c8f0:	f003 0301 	and.w	r3, r3, #1
    c8f4:	2b00      	cmp	r3, #0
    c8f6:	d100      	bne.n	c8fa <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c8f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    c8fa:	490a      	ldr	r1, [pc, #40]	; (c924 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
    c8fc:	9b01      	ldr	r3, [sp, #4]
    c8fe:	9a00      	ldr	r2, [sp, #0]
    c900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
    c904:	4a06      	ldr	r2, [pc, #24]	; (c920 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    c906:	9b01      	ldr	r3, [sp, #4]
    c908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c90c:	1c5a      	adds	r2, r3, #1
    c90e:	4904      	ldr	r1, [pc, #16]	; (c920 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    c910:	9b01      	ldr	r3, [sp, #4]
    c912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c916:	bf00      	nop
    c918:	b003      	add	sp, #12
    c91a:	f85d fb04 	ldr.w	pc, [sp], #4
    c91e:	bf00      	nop
    c920:	1fff9058 	.word	0x1fff9058
    c924:	1fff9054 	.word	0x1fff9054

0000c928 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    c928:	b500      	push	{lr}
    c92a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c92c:	f7f4 f970 	bl	c10 <Sys_GetCoreID>
    c930:	4603      	mov	r3, r0
    c932:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
    c934:	4a0d      	ldr	r2, [pc, #52]	; (c96c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    c936:	9b01      	ldr	r3, [sp, #4]
    c938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c93c:	1e5a      	subs	r2, r3, #1
    c93e:	490b      	ldr	r1, [pc, #44]	; (c96c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    c940:	9b01      	ldr	r3, [sp, #4]
    c942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    c946:	4a0a      	ldr	r2, [pc, #40]	; (c970 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
    c948:	9b01      	ldr	r3, [sp, #4]
    c94a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c94e:	f003 0301 	and.w	r3, r3, #1
    c952:	2b00      	cmp	r3, #0
    c954:	d106      	bne.n	c964 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    c956:	4a05      	ldr	r2, [pc, #20]	; (c96c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    c958:	9b01      	ldr	r3, [sp, #4]
    c95a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c95e:	2b00      	cmp	r3, #0
    c960:	d100      	bne.n	c964 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    c962:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    c964:	bf00      	nop
    c966:	b003      	add	sp, #12
    c968:	f85d fb04 	ldr.w	pc, [sp], #4
    c96c:	1fff9058 	.word	0x1fff9058
    c970:	1fff9054 	.word	0x1fff9054

0000c974 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    c974:	b500      	push	{lr}
    c976:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c978:	f7f4 f94a 	bl	c10 <Sys_GetCoreID>
    c97c:	4603      	mov	r3, r0
    c97e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    c980:	4a10      	ldr	r2, [pc, #64]	; (c9c4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    c982:	9b01      	ldr	r3, [sp, #4]
    c984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c988:	2b00      	cmp	r3, #0
    c98a:	d10d      	bne.n	c9a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c98c:	f7f4 f867 	bl	a5e <Mcu_schm_read_msr>
    c990:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c992:	9b00      	ldr	r3, [sp, #0]
    c994:	f003 0301 	and.w	r3, r3, #1
    c998:	2b00      	cmp	r3, #0
    c99a:	d100      	bne.n	c99e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c99c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    c99e:	490a      	ldr	r1, [pc, #40]	; (c9c8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    c9a0:	9b01      	ldr	r3, [sp, #4]
    c9a2:	9a00      	ldr	r2, [sp, #0]
    c9a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    c9a8:	4a06      	ldr	r2, [pc, #24]	; (c9c4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    c9aa:	9b01      	ldr	r3, [sp, #4]
    c9ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9b0:	1c5a      	adds	r2, r3, #1
    c9b2:	4904      	ldr	r1, [pc, #16]	; (c9c4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    c9b4:	9b01      	ldr	r3, [sp, #4]
    c9b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    c9ba:	bf00      	nop
    c9bc:	b003      	add	sp, #12
    c9be:	f85d fb04 	ldr.w	pc, [sp], #4
    c9c2:	bf00      	nop
    c9c4:	1fff9060 	.word	0x1fff9060
    c9c8:	1fff905c 	.word	0x1fff905c

0000c9cc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    c9cc:	b500      	push	{lr}
    c9ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c9d0:	f7f4 f91e 	bl	c10 <Sys_GetCoreID>
    c9d4:	4603      	mov	r3, r0
    c9d6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    c9d8:	4a0d      	ldr	r2, [pc, #52]	; (ca10 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    c9da:	9b01      	ldr	r3, [sp, #4]
    c9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9e0:	1e5a      	subs	r2, r3, #1
    c9e2:	490b      	ldr	r1, [pc, #44]	; (ca10 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    c9e4:	9b01      	ldr	r3, [sp, #4]
    c9e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    c9ea:	4a0a      	ldr	r2, [pc, #40]	; (ca14 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    c9ec:	9b01      	ldr	r3, [sp, #4]
    c9ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9f2:	f003 0301 	and.w	r3, r3, #1
    c9f6:	2b00      	cmp	r3, #0
    c9f8:	d106      	bne.n	ca08 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    c9fa:	4a05      	ldr	r2, [pc, #20]	; (ca10 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    c9fc:	9b01      	ldr	r3, [sp, #4]
    c9fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca02:	2b00      	cmp	r3, #0
    ca04:	d100      	bne.n	ca08 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ca06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ca08:	bf00      	nop
    ca0a:	b003      	add	sp, #12
    ca0c:	f85d fb04 	ldr.w	pc, [sp], #4
    ca10:	1fff9060 	.word	0x1fff9060
    ca14:	1fff905c 	.word	0x1fff905c

0000ca18 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    ca18:	b500      	push	{lr}
    ca1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca1c:	f7f4 f8f8 	bl	c10 <Sys_GetCoreID>
    ca20:	4603      	mov	r3, r0
    ca22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    ca24:	4a10      	ldr	r2, [pc, #64]	; (ca68 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ca26:	9b01      	ldr	r3, [sp, #4]
    ca28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca2c:	2b00      	cmp	r3, #0
    ca2e:	d10d      	bne.n	ca4c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ca30:	f7f4 f815 	bl	a5e <Mcu_schm_read_msr>
    ca34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ca36:	9b00      	ldr	r3, [sp, #0]
    ca38:	f003 0301 	and.w	r3, r3, #1
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d100      	bne.n	ca42 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ca40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ca42:	490a      	ldr	r1, [pc, #40]	; (ca6c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    ca44:	9b01      	ldr	r3, [sp, #4]
    ca46:	9a00      	ldr	r2, [sp, #0]
    ca48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    ca4c:	4a06      	ldr	r2, [pc, #24]	; (ca68 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ca4e:	9b01      	ldr	r3, [sp, #4]
    ca50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca54:	1c5a      	adds	r2, r3, #1
    ca56:	4904      	ldr	r1, [pc, #16]	; (ca68 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    ca58:	9b01      	ldr	r3, [sp, #4]
    ca5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca5e:	bf00      	nop
    ca60:	b003      	add	sp, #12
    ca62:	f85d fb04 	ldr.w	pc, [sp], #4
    ca66:	bf00      	nop
    ca68:	1fff9068 	.word	0x1fff9068
    ca6c:	1fff9064 	.word	0x1fff9064

0000ca70 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    ca70:	b500      	push	{lr}
    ca72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca74:	f7f4 f8cc 	bl	c10 <Sys_GetCoreID>
    ca78:	4603      	mov	r3, r0
    ca7a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    ca7c:	4a0d      	ldr	r2, [pc, #52]	; (cab4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ca7e:	9b01      	ldr	r3, [sp, #4]
    ca80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca84:	1e5a      	subs	r2, r3, #1
    ca86:	490b      	ldr	r1, [pc, #44]	; (cab4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    ca88:	9b01      	ldr	r3, [sp, #4]
    ca8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    ca8e:	4a0a      	ldr	r2, [pc, #40]	; (cab8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    ca90:	9b01      	ldr	r3, [sp, #4]
    ca92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca96:	f003 0301 	and.w	r3, r3, #1
    ca9a:	2b00      	cmp	r3, #0
    ca9c:	d106      	bne.n	caac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    ca9e:	4a05      	ldr	r2, [pc, #20]	; (cab4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    caa0:	9b01      	ldr	r3, [sp, #4]
    caa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caa6:	2b00      	cmp	r3, #0
    caa8:	d100      	bne.n	caac <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    caaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    caac:	bf00      	nop
    caae:	b003      	add	sp, #12
    cab0:	f85d fb04 	ldr.w	pc, [sp], #4
    cab4:	1fff9068 	.word	0x1fff9068
    cab8:	1fff9064 	.word	0x1fff9064

0000cabc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    cabc:	b500      	push	{lr}
    cabe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cac0:	f7f4 f8a6 	bl	c10 <Sys_GetCoreID>
    cac4:	4603      	mov	r3, r0
    cac6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    cac8:	4a10      	ldr	r2, [pc, #64]	; (cb0c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    caca:	9b01      	ldr	r3, [sp, #4]
    cacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cad0:	2b00      	cmp	r3, #0
    cad2:	d10d      	bne.n	caf0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cad4:	f7f3 ffc3 	bl	a5e <Mcu_schm_read_msr>
    cad8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cada:	9b00      	ldr	r3, [sp, #0]
    cadc:	f003 0301 	and.w	r3, r3, #1
    cae0:	2b00      	cmp	r3, #0
    cae2:	d100      	bne.n	cae6 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cae4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    cae6:	490a      	ldr	r1, [pc, #40]	; (cb10 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    cae8:	9b01      	ldr	r3, [sp, #4]
    caea:	9a00      	ldr	r2, [sp, #0]
    caec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    caf0:	4a06      	ldr	r2, [pc, #24]	; (cb0c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    caf2:	9b01      	ldr	r3, [sp, #4]
    caf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caf8:	1c5a      	adds	r2, r3, #1
    cafa:	4904      	ldr	r1, [pc, #16]	; (cb0c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    cafc:	9b01      	ldr	r3, [sp, #4]
    cafe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb02:	bf00      	nop
    cb04:	b003      	add	sp, #12
    cb06:	f85d fb04 	ldr.w	pc, [sp], #4
    cb0a:	bf00      	nop
    cb0c:	1fff9070 	.word	0x1fff9070
    cb10:	1fff906c 	.word	0x1fff906c

0000cb14 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    cb14:	b500      	push	{lr}
    cb16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb18:	f7f4 f87a 	bl	c10 <Sys_GetCoreID>
    cb1c:	4603      	mov	r3, r0
    cb1e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    cb20:	4a0d      	ldr	r2, [pc, #52]	; (cb58 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    cb22:	9b01      	ldr	r3, [sp, #4]
    cb24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb28:	1e5a      	subs	r2, r3, #1
    cb2a:	490b      	ldr	r1, [pc, #44]	; (cb58 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    cb2c:	9b01      	ldr	r3, [sp, #4]
    cb2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    cb32:	4a0a      	ldr	r2, [pc, #40]	; (cb5c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    cb34:	9b01      	ldr	r3, [sp, #4]
    cb36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb3a:	f003 0301 	and.w	r3, r3, #1
    cb3e:	2b00      	cmp	r3, #0
    cb40:	d106      	bne.n	cb50 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    cb42:	4a05      	ldr	r2, [pc, #20]	; (cb58 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    cb44:	9b01      	ldr	r3, [sp, #4]
    cb46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb4a:	2b00      	cmp	r3, #0
    cb4c:	d100      	bne.n	cb50 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cb4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cb50:	bf00      	nop
    cb52:	b003      	add	sp, #12
    cb54:	f85d fb04 	ldr.w	pc, [sp], #4
    cb58:	1fff9070 	.word	0x1fff9070
    cb5c:	1fff906c 	.word	0x1fff906c

0000cb60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    cb60:	b500      	push	{lr}
    cb62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb64:	f7f4 f854 	bl	c10 <Sys_GetCoreID>
    cb68:	4603      	mov	r3, r0
    cb6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    cb6c:	4a10      	ldr	r2, [pc, #64]	; (cbb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    cb6e:	9b01      	ldr	r3, [sp, #4]
    cb70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb74:	2b00      	cmp	r3, #0
    cb76:	d10d      	bne.n	cb94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cb78:	f7f3 ff7a 	bl	a70 <Port_schm_read_msr>
    cb7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cb7e:	9b00      	ldr	r3, [sp, #0]
    cb80:	f003 0301 	and.w	r3, r3, #1
    cb84:	2b00      	cmp	r3, #0
    cb86:	d100      	bne.n	cb8a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cb88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    cb8a:	490a      	ldr	r1, [pc, #40]	; (cbb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    cb8c:	9b01      	ldr	r3, [sp, #4]
    cb8e:	9a00      	ldr	r2, [sp, #0]
    cb90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    cb94:	4a06      	ldr	r2, [pc, #24]	; (cbb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    cb96:	9b01      	ldr	r3, [sp, #4]
    cb98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb9c:	1c5a      	adds	r2, r3, #1
    cb9e:	4904      	ldr	r1, [pc, #16]	; (cbb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    cba0:	9b01      	ldr	r3, [sp, #4]
    cba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cba6:	bf00      	nop
    cba8:	b003      	add	sp, #12
    cbaa:	f85d fb04 	ldr.w	pc, [sp], #4
    cbae:	bf00      	nop
    cbb0:	1fff9078 	.word	0x1fff9078
    cbb4:	1fff9074 	.word	0x1fff9074

0000cbb8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    cbb8:	b500      	push	{lr}
    cbba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbbc:	f7f4 f828 	bl	c10 <Sys_GetCoreID>
    cbc0:	4603      	mov	r3, r0
    cbc2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    cbc4:	4a0d      	ldr	r2, [pc, #52]	; (cbfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    cbc6:	9b01      	ldr	r3, [sp, #4]
    cbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbcc:	1e5a      	subs	r2, r3, #1
    cbce:	490b      	ldr	r1, [pc, #44]	; (cbfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    cbd0:	9b01      	ldr	r3, [sp, #4]
    cbd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    cbd6:	4a0a      	ldr	r2, [pc, #40]	; (cc00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    cbd8:	9b01      	ldr	r3, [sp, #4]
    cbda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbde:	f003 0301 	and.w	r3, r3, #1
    cbe2:	2b00      	cmp	r3, #0
    cbe4:	d106      	bne.n	cbf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    cbe6:	4a05      	ldr	r2, [pc, #20]	; (cbfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    cbe8:	9b01      	ldr	r3, [sp, #4]
    cbea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbee:	2b00      	cmp	r3, #0
    cbf0:	d100      	bne.n	cbf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cbf2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cbf4:	bf00      	nop
    cbf6:	b003      	add	sp, #12
    cbf8:	f85d fb04 	ldr.w	pc, [sp], #4
    cbfc:	1fff9078 	.word	0x1fff9078
    cc00:	1fff9074 	.word	0x1fff9074

0000cc04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    cc04:	b500      	push	{lr}
    cc06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc08:	f7f4 f802 	bl	c10 <Sys_GetCoreID>
    cc0c:	4603      	mov	r3, r0
    cc0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    cc10:	4a10      	ldr	r2, [pc, #64]	; (cc54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    cc12:	9b01      	ldr	r3, [sp, #4]
    cc14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc18:	2b00      	cmp	r3, #0
    cc1a:	d10d      	bne.n	cc38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cc1c:	f7f3 ff28 	bl	a70 <Port_schm_read_msr>
    cc20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cc22:	9b00      	ldr	r3, [sp, #0]
    cc24:	f003 0301 	and.w	r3, r3, #1
    cc28:	2b00      	cmp	r3, #0
    cc2a:	d100      	bne.n	cc2e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cc2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    cc2e:	490a      	ldr	r1, [pc, #40]	; (cc58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    cc30:	9b01      	ldr	r3, [sp, #4]
    cc32:	9a00      	ldr	r2, [sp, #0]
    cc34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    cc38:	4a06      	ldr	r2, [pc, #24]	; (cc54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    cc3a:	9b01      	ldr	r3, [sp, #4]
    cc3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc40:	1c5a      	adds	r2, r3, #1
    cc42:	4904      	ldr	r1, [pc, #16]	; (cc54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    cc44:	9b01      	ldr	r3, [sp, #4]
    cc46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cc4a:	bf00      	nop
    cc4c:	b003      	add	sp, #12
    cc4e:	f85d fb04 	ldr.w	pc, [sp], #4
    cc52:	bf00      	nop
    cc54:	1fff9080 	.word	0x1fff9080
    cc58:	1fff907c 	.word	0x1fff907c

0000cc5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    cc5c:	b500      	push	{lr}
    cc5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc60:	f7f3 ffd6 	bl	c10 <Sys_GetCoreID>
    cc64:	4603      	mov	r3, r0
    cc66:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    cc68:	4a0d      	ldr	r2, [pc, #52]	; (cca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    cc6a:	9b01      	ldr	r3, [sp, #4]
    cc6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc70:	1e5a      	subs	r2, r3, #1
    cc72:	490b      	ldr	r1, [pc, #44]	; (cca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    cc74:	9b01      	ldr	r3, [sp, #4]
    cc76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    cc7a:	4a0a      	ldr	r2, [pc, #40]	; (cca4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    cc7c:	9b01      	ldr	r3, [sp, #4]
    cc7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc82:	f003 0301 	and.w	r3, r3, #1
    cc86:	2b00      	cmp	r3, #0
    cc88:	d106      	bne.n	cc98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    cc8a:	4a05      	ldr	r2, [pc, #20]	; (cca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    cc8c:	9b01      	ldr	r3, [sp, #4]
    cc8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc92:	2b00      	cmp	r3, #0
    cc94:	d100      	bne.n	cc98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cc96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cc98:	bf00      	nop
    cc9a:	b003      	add	sp, #12
    cc9c:	f85d fb04 	ldr.w	pc, [sp], #4
    cca0:	1fff9080 	.word	0x1fff9080
    cca4:	1fff907c 	.word	0x1fff907c

0000cca8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    cca8:	b500      	push	{lr}
    ccaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccac:	f7f3 ffb0 	bl	c10 <Sys_GetCoreID>
    ccb0:	4603      	mov	r3, r0
    ccb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    ccb4:	4a10      	ldr	r2, [pc, #64]	; (ccf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    ccb6:	9b01      	ldr	r3, [sp, #4]
    ccb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccbc:	2b00      	cmp	r3, #0
    ccbe:	d10d      	bne.n	ccdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ccc0:	f7f3 fed6 	bl	a70 <Port_schm_read_msr>
    ccc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ccc6:	9b00      	ldr	r3, [sp, #0]
    ccc8:	f003 0301 	and.w	r3, r3, #1
    cccc:	2b00      	cmp	r3, #0
    ccce:	d100      	bne.n	ccd2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ccd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ccd2:	490a      	ldr	r1, [pc, #40]	; (ccfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    ccd4:	9b01      	ldr	r3, [sp, #4]
    ccd6:	9a00      	ldr	r2, [sp, #0]
    ccd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    ccdc:	4a06      	ldr	r2, [pc, #24]	; (ccf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    ccde:	9b01      	ldr	r3, [sp, #4]
    cce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cce4:	1c5a      	adds	r2, r3, #1
    cce6:	4904      	ldr	r1, [pc, #16]	; (ccf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    cce8:	9b01      	ldr	r3, [sp, #4]
    ccea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ccee:	bf00      	nop
    ccf0:	b003      	add	sp, #12
    ccf2:	f85d fb04 	ldr.w	pc, [sp], #4
    ccf6:	bf00      	nop
    ccf8:	1fff9088 	.word	0x1fff9088
    ccfc:	1fff9084 	.word	0x1fff9084

0000cd00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    cd00:	b500      	push	{lr}
    cd02:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd04:	f7f3 ff84 	bl	c10 <Sys_GetCoreID>
    cd08:	4603      	mov	r3, r0
    cd0a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    cd0c:	4a0d      	ldr	r2, [pc, #52]	; (cd44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    cd0e:	9b01      	ldr	r3, [sp, #4]
    cd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd14:	1e5a      	subs	r2, r3, #1
    cd16:	490b      	ldr	r1, [pc, #44]	; (cd44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    cd18:	9b01      	ldr	r3, [sp, #4]
    cd1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    cd1e:	4a0a      	ldr	r2, [pc, #40]	; (cd48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    cd20:	9b01      	ldr	r3, [sp, #4]
    cd22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd26:	f003 0301 	and.w	r3, r3, #1
    cd2a:	2b00      	cmp	r3, #0
    cd2c:	d106      	bne.n	cd3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    cd2e:	4a05      	ldr	r2, [pc, #20]	; (cd44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    cd30:	9b01      	ldr	r3, [sp, #4]
    cd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd36:	2b00      	cmp	r3, #0
    cd38:	d100      	bne.n	cd3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cd3a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cd3c:	bf00      	nop
    cd3e:	b003      	add	sp, #12
    cd40:	f85d fb04 	ldr.w	pc, [sp], #4
    cd44:	1fff9088 	.word	0x1fff9088
    cd48:	1fff9084 	.word	0x1fff9084

0000cd4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    cd4c:	b500      	push	{lr}
    cd4e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd50:	f7f3 ff5e 	bl	c10 <Sys_GetCoreID>
    cd54:	4603      	mov	r3, r0
    cd56:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    cd58:	4a10      	ldr	r2, [pc, #64]	; (cd9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    cd5a:	9b01      	ldr	r3, [sp, #4]
    cd5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd60:	2b00      	cmp	r3, #0
    cd62:	d10d      	bne.n	cd80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cd64:	f7f3 fe84 	bl	a70 <Port_schm_read_msr>
    cd68:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cd6a:	9b00      	ldr	r3, [sp, #0]
    cd6c:	f003 0301 	and.w	r3, r3, #1
    cd70:	2b00      	cmp	r3, #0
    cd72:	d100      	bne.n	cd76 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cd74:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    cd76:	490a      	ldr	r1, [pc, #40]	; (cda0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    cd78:	9b01      	ldr	r3, [sp, #4]
    cd7a:	9a00      	ldr	r2, [sp, #0]
    cd7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    cd80:	4a06      	ldr	r2, [pc, #24]	; (cd9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    cd82:	9b01      	ldr	r3, [sp, #4]
    cd84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd88:	1c5a      	adds	r2, r3, #1
    cd8a:	4904      	ldr	r1, [pc, #16]	; (cd9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    cd8c:	9b01      	ldr	r3, [sp, #4]
    cd8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd92:	bf00      	nop
    cd94:	b003      	add	sp, #12
    cd96:	f85d fb04 	ldr.w	pc, [sp], #4
    cd9a:	bf00      	nop
    cd9c:	1fff9090 	.word	0x1fff9090
    cda0:	1fff908c 	.word	0x1fff908c

0000cda4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    cda4:	b500      	push	{lr}
    cda6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cda8:	f7f3 ff32 	bl	c10 <Sys_GetCoreID>
    cdac:	4603      	mov	r3, r0
    cdae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    cdb0:	4a0d      	ldr	r2, [pc, #52]	; (cde8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    cdb2:	9b01      	ldr	r3, [sp, #4]
    cdb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdb8:	1e5a      	subs	r2, r3, #1
    cdba:	490b      	ldr	r1, [pc, #44]	; (cde8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    cdbc:	9b01      	ldr	r3, [sp, #4]
    cdbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    cdc2:	4a0a      	ldr	r2, [pc, #40]	; (cdec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    cdc4:	9b01      	ldr	r3, [sp, #4]
    cdc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdca:	f003 0301 	and.w	r3, r3, #1
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d106      	bne.n	cde0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    cdd2:	4a05      	ldr	r2, [pc, #20]	; (cde8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    cdd4:	9b01      	ldr	r3, [sp, #4]
    cdd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdda:	2b00      	cmp	r3, #0
    cddc:	d100      	bne.n	cde0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cdde:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cde0:	bf00      	nop
    cde2:	b003      	add	sp, #12
    cde4:	f85d fb04 	ldr.w	pc, [sp], #4
    cde8:	1fff9090 	.word	0x1fff9090
    cdec:	1fff908c 	.word	0x1fff908c

0000cdf0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    cdf0:	b500      	push	{lr}
    cdf2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cdf4:	f7f3 ff0c 	bl	c10 <Sys_GetCoreID>
    cdf8:	4603      	mov	r3, r0
    cdfa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    cdfc:	4a10      	ldr	r2, [pc, #64]	; (ce40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    cdfe:	9b01      	ldr	r3, [sp, #4]
    ce00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce04:	2b00      	cmp	r3, #0
    ce06:	d10d      	bne.n	ce24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ce08:	f7f3 fe32 	bl	a70 <Port_schm_read_msr>
    ce0c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ce0e:	9b00      	ldr	r3, [sp, #0]
    ce10:	f003 0301 	and.w	r3, r3, #1
    ce14:	2b00      	cmp	r3, #0
    ce16:	d100      	bne.n	ce1a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ce18:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    ce1a:	490a      	ldr	r1, [pc, #40]	; (ce44 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    ce1c:	9b01      	ldr	r3, [sp, #4]
    ce1e:	9a00      	ldr	r2, [sp, #0]
    ce20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    ce24:	4a06      	ldr	r2, [pc, #24]	; (ce40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    ce26:	9b01      	ldr	r3, [sp, #4]
    ce28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce2c:	1c5a      	adds	r2, r3, #1
    ce2e:	4904      	ldr	r1, [pc, #16]	; (ce40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    ce30:	9b01      	ldr	r3, [sp, #4]
    ce32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce36:	bf00      	nop
    ce38:	b003      	add	sp, #12
    ce3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ce3e:	bf00      	nop
    ce40:	1fff9098 	.word	0x1fff9098
    ce44:	1fff9094 	.word	0x1fff9094

0000ce48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    ce48:	b500      	push	{lr}
    ce4a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce4c:	f7f3 fee0 	bl	c10 <Sys_GetCoreID>
    ce50:	4603      	mov	r3, r0
    ce52:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    ce54:	4a0d      	ldr	r2, [pc, #52]	; (ce8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    ce56:	9b01      	ldr	r3, [sp, #4]
    ce58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce5c:	1e5a      	subs	r2, r3, #1
    ce5e:	490b      	ldr	r1, [pc, #44]	; (ce8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    ce60:	9b01      	ldr	r3, [sp, #4]
    ce62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    ce66:	4a0a      	ldr	r2, [pc, #40]	; (ce90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    ce68:	9b01      	ldr	r3, [sp, #4]
    ce6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce6e:	f003 0301 	and.w	r3, r3, #1
    ce72:	2b00      	cmp	r3, #0
    ce74:	d106      	bne.n	ce84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    ce76:	4a05      	ldr	r2, [pc, #20]	; (ce8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    ce78:	9b01      	ldr	r3, [sp, #4]
    ce7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce7e:	2b00      	cmp	r3, #0
    ce80:	d100      	bne.n	ce84 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ce82:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ce84:	bf00      	nop
    ce86:	b003      	add	sp, #12
    ce88:	f85d fb04 	ldr.w	pc, [sp], #4
    ce8c:	1fff9098 	.word	0x1fff9098
    ce90:	1fff9094 	.word	0x1fff9094

0000ce94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    ce94:	b500      	push	{lr}
    ce96:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce98:	f7f3 feba 	bl	c10 <Sys_GetCoreID>
    ce9c:	4603      	mov	r3, r0
    ce9e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    cea0:	4a10      	ldr	r2, [pc, #64]	; (cee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    cea2:	9b01      	ldr	r3, [sp, #4]
    cea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cea8:	2b00      	cmp	r3, #0
    ceaa:	d10d      	bne.n	cec8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ceac:	f7f3 fde0 	bl	a70 <Port_schm_read_msr>
    ceb0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ceb2:	9b00      	ldr	r3, [sp, #0]
    ceb4:	f003 0301 	and.w	r3, r3, #1
    ceb8:	2b00      	cmp	r3, #0
    ceba:	d100      	bne.n	cebe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cebc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    cebe:	490a      	ldr	r1, [pc, #40]	; (cee8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    cec0:	9b01      	ldr	r3, [sp, #4]
    cec2:	9a00      	ldr	r2, [sp, #0]
    cec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    cec8:	4a06      	ldr	r2, [pc, #24]	; (cee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    ceca:	9b01      	ldr	r3, [sp, #4]
    cecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ced0:	1c5a      	adds	r2, r3, #1
    ced2:	4904      	ldr	r1, [pc, #16]	; (cee4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    ced4:	9b01      	ldr	r3, [sp, #4]
    ced6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ceda:	bf00      	nop
    cedc:	b003      	add	sp, #12
    cede:	f85d fb04 	ldr.w	pc, [sp], #4
    cee2:	bf00      	nop
    cee4:	1fff90a0 	.word	0x1fff90a0
    cee8:	1fff909c 	.word	0x1fff909c

0000ceec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    ceec:	b500      	push	{lr}
    ceee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cef0:	f7f3 fe8e 	bl	c10 <Sys_GetCoreID>
    cef4:	4603      	mov	r3, r0
    cef6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    cef8:	4a0d      	ldr	r2, [pc, #52]	; (cf30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    cefa:	9b01      	ldr	r3, [sp, #4]
    cefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf00:	1e5a      	subs	r2, r3, #1
    cf02:	490b      	ldr	r1, [pc, #44]	; (cf30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    cf04:	9b01      	ldr	r3, [sp, #4]
    cf06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    cf0a:	4a0a      	ldr	r2, [pc, #40]	; (cf34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    cf0c:	9b01      	ldr	r3, [sp, #4]
    cf0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf12:	f003 0301 	and.w	r3, r3, #1
    cf16:	2b00      	cmp	r3, #0
    cf18:	d106      	bne.n	cf28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    cf1a:	4a05      	ldr	r2, [pc, #20]	; (cf30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    cf1c:	9b01      	ldr	r3, [sp, #4]
    cf1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf22:	2b00      	cmp	r3, #0
    cf24:	d100      	bne.n	cf28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cf26:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cf28:	bf00      	nop
    cf2a:	b003      	add	sp, #12
    cf2c:	f85d fb04 	ldr.w	pc, [sp], #4
    cf30:	1fff90a0 	.word	0x1fff90a0
    cf34:	1fff909c 	.word	0x1fff909c

0000cf38 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    cf38:	b500      	push	{lr}
    cf3a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf3c:	f7f3 fe68 	bl	c10 <Sys_GetCoreID>
    cf40:	4603      	mov	r3, r0
    cf42:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    cf44:	4a10      	ldr	r2, [pc, #64]	; (cf88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    cf46:	9b01      	ldr	r3, [sp, #4]
    cf48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf4c:	2b00      	cmp	r3, #0
    cf4e:	d10d      	bne.n	cf6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cf50:	f7f3 fd8e 	bl	a70 <Port_schm_read_msr>
    cf54:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf56:	9b00      	ldr	r3, [sp, #0]
    cf58:	f003 0301 	and.w	r3, r3, #1
    cf5c:	2b00      	cmp	r3, #0
    cf5e:	d100      	bne.n	cf62 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf60:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    cf62:	490a      	ldr	r1, [pc, #40]	; (cf8c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    cf64:	9b01      	ldr	r3, [sp, #4]
    cf66:	9a00      	ldr	r2, [sp, #0]
    cf68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    cf6c:	4a06      	ldr	r2, [pc, #24]	; (cf88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    cf6e:	9b01      	ldr	r3, [sp, #4]
    cf70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf74:	1c5a      	adds	r2, r3, #1
    cf76:	4904      	ldr	r1, [pc, #16]	; (cf88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    cf78:	9b01      	ldr	r3, [sp, #4]
    cf7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf7e:	bf00      	nop
    cf80:	b003      	add	sp, #12
    cf82:	f85d fb04 	ldr.w	pc, [sp], #4
    cf86:	bf00      	nop
    cf88:	1fff90a8 	.word	0x1fff90a8
    cf8c:	1fff90a4 	.word	0x1fff90a4

0000cf90 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    cf90:	b500      	push	{lr}
    cf92:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf94:	f7f3 fe3c 	bl	c10 <Sys_GetCoreID>
    cf98:	4603      	mov	r3, r0
    cf9a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    cf9c:	4a0d      	ldr	r2, [pc, #52]	; (cfd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    cf9e:	9b01      	ldr	r3, [sp, #4]
    cfa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfa4:	1e5a      	subs	r2, r3, #1
    cfa6:	490b      	ldr	r1, [pc, #44]	; (cfd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    cfa8:	9b01      	ldr	r3, [sp, #4]
    cfaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    cfae:	4a0a      	ldr	r2, [pc, #40]	; (cfd8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    cfb0:	9b01      	ldr	r3, [sp, #4]
    cfb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfb6:	f003 0301 	and.w	r3, r3, #1
    cfba:	2b00      	cmp	r3, #0
    cfbc:	d106      	bne.n	cfcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    cfbe:	4a05      	ldr	r2, [pc, #20]	; (cfd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    cfc0:	9b01      	ldr	r3, [sp, #4]
    cfc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfc6:	2b00      	cmp	r3, #0
    cfc8:	d100      	bne.n	cfcc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cfca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cfcc:	bf00      	nop
    cfce:	b003      	add	sp, #12
    cfd0:	f85d fb04 	ldr.w	pc, [sp], #4
    cfd4:	1fff90a8 	.word	0x1fff90a8
    cfd8:	1fff90a4 	.word	0x1fff90a4

0000cfdc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    cfdc:	b500      	push	{lr}
    cfde:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cfe0:	f7f3 fe16 	bl	c10 <Sys_GetCoreID>
    cfe4:	4603      	mov	r3, r0
    cfe6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    cfe8:	4a10      	ldr	r2, [pc, #64]	; (d02c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    cfea:	9b01      	ldr	r3, [sp, #4]
    cfec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cff0:	2b00      	cmp	r3, #0
    cff2:	d10d      	bne.n	d010 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cff4:	f7f3 fd3c 	bl	a70 <Port_schm_read_msr>
    cff8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cffa:	9b00      	ldr	r3, [sp, #0]
    cffc:	f003 0301 	and.w	r3, r3, #1
    d000:	2b00      	cmp	r3, #0
    d002:	d100      	bne.n	d006 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d004:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    d006:	490a      	ldr	r1, [pc, #40]	; (d030 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    d008:	9b01      	ldr	r3, [sp, #4]
    d00a:	9a00      	ldr	r2, [sp, #0]
    d00c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    d010:	4a06      	ldr	r2, [pc, #24]	; (d02c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    d012:	9b01      	ldr	r3, [sp, #4]
    d014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d018:	1c5a      	adds	r2, r3, #1
    d01a:	4904      	ldr	r1, [pc, #16]	; (d02c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    d01c:	9b01      	ldr	r3, [sp, #4]
    d01e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d022:	bf00      	nop
    d024:	b003      	add	sp, #12
    d026:	f85d fb04 	ldr.w	pc, [sp], #4
    d02a:	bf00      	nop
    d02c:	1fff90b0 	.word	0x1fff90b0
    d030:	1fff90ac 	.word	0x1fff90ac

0000d034 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    d034:	b500      	push	{lr}
    d036:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d038:	f7f3 fdea 	bl	c10 <Sys_GetCoreID>
    d03c:	4603      	mov	r3, r0
    d03e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    d040:	4a0d      	ldr	r2, [pc, #52]	; (d078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    d042:	9b01      	ldr	r3, [sp, #4]
    d044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d048:	1e5a      	subs	r2, r3, #1
    d04a:	490b      	ldr	r1, [pc, #44]	; (d078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    d04c:	9b01      	ldr	r3, [sp, #4]
    d04e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    d052:	4a0a      	ldr	r2, [pc, #40]	; (d07c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    d054:	9b01      	ldr	r3, [sp, #4]
    d056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d05a:	f003 0301 	and.w	r3, r3, #1
    d05e:	2b00      	cmp	r3, #0
    d060:	d106      	bne.n	d070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    d062:	4a05      	ldr	r2, [pc, #20]	; (d078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    d064:	9b01      	ldr	r3, [sp, #4]
    d066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d06a:	2b00      	cmp	r3, #0
    d06c:	d100      	bne.n	d070 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d06e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d070:	bf00      	nop
    d072:	b003      	add	sp, #12
    d074:	f85d fb04 	ldr.w	pc, [sp], #4
    d078:	1fff90b0 	.word	0x1fff90b0
    d07c:	1fff90ac 	.word	0x1fff90ac

0000d080 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    d080:	b500      	push	{lr}
    d082:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d084:	f7f3 fdc4 	bl	c10 <Sys_GetCoreID>
    d088:	4603      	mov	r3, r0
    d08a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    d08c:	4a10      	ldr	r2, [pc, #64]	; (d0d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    d08e:	9b01      	ldr	r3, [sp, #4]
    d090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d094:	2b00      	cmp	r3, #0
    d096:	d10d      	bne.n	d0b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d098:	f7f3 fcea 	bl	a70 <Port_schm_read_msr>
    d09c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d09e:	9b00      	ldr	r3, [sp, #0]
    d0a0:	f003 0301 	and.w	r3, r3, #1
    d0a4:	2b00      	cmp	r3, #0
    d0a6:	d100      	bne.n	d0aa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d0a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    d0aa:	490a      	ldr	r1, [pc, #40]	; (d0d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    d0ac:	9b01      	ldr	r3, [sp, #4]
    d0ae:	9a00      	ldr	r2, [sp, #0]
    d0b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    d0b4:	4a06      	ldr	r2, [pc, #24]	; (d0d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    d0b6:	9b01      	ldr	r3, [sp, #4]
    d0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0bc:	1c5a      	adds	r2, r3, #1
    d0be:	4904      	ldr	r1, [pc, #16]	; (d0d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    d0c0:	9b01      	ldr	r3, [sp, #4]
    d0c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d0c6:	bf00      	nop
    d0c8:	b003      	add	sp, #12
    d0ca:	f85d fb04 	ldr.w	pc, [sp], #4
    d0ce:	bf00      	nop
    d0d0:	1fff90b8 	.word	0x1fff90b8
    d0d4:	1fff90b4 	.word	0x1fff90b4

0000d0d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    d0d8:	b500      	push	{lr}
    d0da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0dc:	f7f3 fd98 	bl	c10 <Sys_GetCoreID>
    d0e0:	4603      	mov	r3, r0
    d0e2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    d0e4:	4a0d      	ldr	r2, [pc, #52]	; (d11c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    d0e6:	9b01      	ldr	r3, [sp, #4]
    d0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ec:	1e5a      	subs	r2, r3, #1
    d0ee:	490b      	ldr	r1, [pc, #44]	; (d11c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    d0f0:	9b01      	ldr	r3, [sp, #4]
    d0f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    d0f6:	4a0a      	ldr	r2, [pc, #40]	; (d120 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    d0f8:	9b01      	ldr	r3, [sp, #4]
    d0fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0fe:	f003 0301 	and.w	r3, r3, #1
    d102:	2b00      	cmp	r3, #0
    d104:	d106      	bne.n	d114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    d106:	4a05      	ldr	r2, [pc, #20]	; (d11c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    d108:	9b01      	ldr	r3, [sp, #4]
    d10a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d10e:	2b00      	cmp	r3, #0
    d110:	d100      	bne.n	d114 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d112:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d114:	bf00      	nop
    d116:	b003      	add	sp, #12
    d118:	f85d fb04 	ldr.w	pc, [sp], #4
    d11c:	1fff90b8 	.word	0x1fff90b8
    d120:	1fff90b4 	.word	0x1fff90b4

0000d124 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    d124:	b500      	push	{lr}
    d126:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d128:	f7f3 fd72 	bl	c10 <Sys_GetCoreID>
    d12c:	4603      	mov	r3, r0
    d12e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    d130:	4a10      	ldr	r2, [pc, #64]	; (d174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    d132:	9b01      	ldr	r3, [sp, #4]
    d134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d138:	2b00      	cmp	r3, #0
    d13a:	d10d      	bne.n	d158 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d13c:	f7f3 fc98 	bl	a70 <Port_schm_read_msr>
    d140:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d142:	9b00      	ldr	r3, [sp, #0]
    d144:	f003 0301 	and.w	r3, r3, #1
    d148:	2b00      	cmp	r3, #0
    d14a:	d100      	bne.n	d14e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d14c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    d14e:	490a      	ldr	r1, [pc, #40]	; (d178 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    d150:	9b01      	ldr	r3, [sp, #4]
    d152:	9a00      	ldr	r2, [sp, #0]
    d154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    d158:	4a06      	ldr	r2, [pc, #24]	; (d174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    d15a:	9b01      	ldr	r3, [sp, #4]
    d15c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d160:	1c5a      	adds	r2, r3, #1
    d162:	4904      	ldr	r1, [pc, #16]	; (d174 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    d164:	9b01      	ldr	r3, [sp, #4]
    d166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d16a:	bf00      	nop
    d16c:	b003      	add	sp, #12
    d16e:	f85d fb04 	ldr.w	pc, [sp], #4
    d172:	bf00      	nop
    d174:	1fff90c0 	.word	0x1fff90c0
    d178:	1fff90bc 	.word	0x1fff90bc

0000d17c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    d17c:	b500      	push	{lr}
    d17e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d180:	f7f3 fd46 	bl	c10 <Sys_GetCoreID>
    d184:	4603      	mov	r3, r0
    d186:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    d188:	4a0d      	ldr	r2, [pc, #52]	; (d1c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    d18a:	9b01      	ldr	r3, [sp, #4]
    d18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d190:	1e5a      	subs	r2, r3, #1
    d192:	490b      	ldr	r1, [pc, #44]	; (d1c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    d194:	9b01      	ldr	r3, [sp, #4]
    d196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    d19a:	4a0a      	ldr	r2, [pc, #40]	; (d1c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    d19c:	9b01      	ldr	r3, [sp, #4]
    d19e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1a2:	f003 0301 	and.w	r3, r3, #1
    d1a6:	2b00      	cmp	r3, #0
    d1a8:	d106      	bne.n	d1b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    d1aa:	4a05      	ldr	r2, [pc, #20]	; (d1c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    d1ac:	9b01      	ldr	r3, [sp, #4]
    d1ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1b2:	2b00      	cmp	r3, #0
    d1b4:	d100      	bne.n	d1b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d1b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d1b8:	bf00      	nop
    d1ba:	b003      	add	sp, #12
    d1bc:	f85d fb04 	ldr.w	pc, [sp], #4
    d1c0:	1fff90c0 	.word	0x1fff90c0
    d1c4:	1fff90bc 	.word	0x1fff90bc

0000d1c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    d1c8:	b500      	push	{lr}
    d1ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1cc:	f7f3 fd20 	bl	c10 <Sys_GetCoreID>
    d1d0:	4603      	mov	r3, r0
    d1d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    d1d4:	4a10      	ldr	r2, [pc, #64]	; (d218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    d1d6:	9b01      	ldr	r3, [sp, #4]
    d1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1dc:	2b00      	cmp	r3, #0
    d1de:	d10d      	bne.n	d1fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d1e0:	f7f3 fc46 	bl	a70 <Port_schm_read_msr>
    d1e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d1e6:	9b00      	ldr	r3, [sp, #0]
    d1e8:	f003 0301 	and.w	r3, r3, #1
    d1ec:	2b00      	cmp	r3, #0
    d1ee:	d100      	bne.n	d1f2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d1f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    d1f2:	490a      	ldr	r1, [pc, #40]	; (d21c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    d1f4:	9b01      	ldr	r3, [sp, #4]
    d1f6:	9a00      	ldr	r2, [sp, #0]
    d1f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    d1fc:	4a06      	ldr	r2, [pc, #24]	; (d218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    d1fe:	9b01      	ldr	r3, [sp, #4]
    d200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d204:	1c5a      	adds	r2, r3, #1
    d206:	4904      	ldr	r1, [pc, #16]	; (d218 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    d208:	9b01      	ldr	r3, [sp, #4]
    d20a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d20e:	bf00      	nop
    d210:	b003      	add	sp, #12
    d212:	f85d fb04 	ldr.w	pc, [sp], #4
    d216:	bf00      	nop
    d218:	1fff90c8 	.word	0x1fff90c8
    d21c:	1fff90c4 	.word	0x1fff90c4

0000d220 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    d220:	b500      	push	{lr}
    d222:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d224:	f7f3 fcf4 	bl	c10 <Sys_GetCoreID>
    d228:	4603      	mov	r3, r0
    d22a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    d22c:	4a0d      	ldr	r2, [pc, #52]	; (d264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    d22e:	9b01      	ldr	r3, [sp, #4]
    d230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d234:	1e5a      	subs	r2, r3, #1
    d236:	490b      	ldr	r1, [pc, #44]	; (d264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    d238:	9b01      	ldr	r3, [sp, #4]
    d23a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    d23e:	4a0a      	ldr	r2, [pc, #40]	; (d268 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    d240:	9b01      	ldr	r3, [sp, #4]
    d242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d246:	f003 0301 	and.w	r3, r3, #1
    d24a:	2b00      	cmp	r3, #0
    d24c:	d106      	bne.n	d25c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    d24e:	4a05      	ldr	r2, [pc, #20]	; (d264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    d250:	9b01      	ldr	r3, [sp, #4]
    d252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d256:	2b00      	cmp	r3, #0
    d258:	d100      	bne.n	d25c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d25a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d25c:	bf00      	nop
    d25e:	b003      	add	sp, #12
    d260:	f85d fb04 	ldr.w	pc, [sp], #4
    d264:	1fff90c8 	.word	0x1fff90c8
    d268:	1fff90c4 	.word	0x1fff90c4

0000d26c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    d26c:	b500      	push	{lr}
    d26e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d270:	f7f3 fcce 	bl	c10 <Sys_GetCoreID>
    d274:	4603      	mov	r3, r0
    d276:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    d278:	4a10      	ldr	r2, [pc, #64]	; (d2bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    d27a:	9b01      	ldr	r3, [sp, #4]
    d27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d280:	2b00      	cmp	r3, #0
    d282:	d10d      	bne.n	d2a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d284:	f7f3 fbf4 	bl	a70 <Port_schm_read_msr>
    d288:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d28a:	9b00      	ldr	r3, [sp, #0]
    d28c:	f003 0301 	and.w	r3, r3, #1
    d290:	2b00      	cmp	r3, #0
    d292:	d100      	bne.n	d296 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d294:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    d296:	490a      	ldr	r1, [pc, #40]	; (d2c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    d298:	9b01      	ldr	r3, [sp, #4]
    d29a:	9a00      	ldr	r2, [sp, #0]
    d29c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    d2a0:	4a06      	ldr	r2, [pc, #24]	; (d2bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    d2a2:	9b01      	ldr	r3, [sp, #4]
    d2a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2a8:	1c5a      	adds	r2, r3, #1
    d2aa:	4904      	ldr	r1, [pc, #16]	; (d2bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    d2ac:	9b01      	ldr	r3, [sp, #4]
    d2ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d2b2:	bf00      	nop
    d2b4:	b003      	add	sp, #12
    d2b6:	f85d fb04 	ldr.w	pc, [sp], #4
    d2ba:	bf00      	nop
    d2bc:	1fff90d0 	.word	0x1fff90d0
    d2c0:	1fff90cc 	.word	0x1fff90cc

0000d2c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    d2c4:	b500      	push	{lr}
    d2c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2c8:	f7f3 fca2 	bl	c10 <Sys_GetCoreID>
    d2cc:	4603      	mov	r3, r0
    d2ce:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    d2d0:	4a0d      	ldr	r2, [pc, #52]	; (d308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    d2d2:	9b01      	ldr	r3, [sp, #4]
    d2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2d8:	1e5a      	subs	r2, r3, #1
    d2da:	490b      	ldr	r1, [pc, #44]	; (d308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    d2dc:	9b01      	ldr	r3, [sp, #4]
    d2de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    d2e2:	4a0a      	ldr	r2, [pc, #40]	; (d30c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    d2e4:	9b01      	ldr	r3, [sp, #4]
    d2e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2ea:	f003 0301 	and.w	r3, r3, #1
    d2ee:	2b00      	cmp	r3, #0
    d2f0:	d106      	bne.n	d300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    d2f2:	4a05      	ldr	r2, [pc, #20]	; (d308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    d2f4:	9b01      	ldr	r3, [sp, #4]
    d2f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2fa:	2b00      	cmp	r3, #0
    d2fc:	d100      	bne.n	d300 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d2fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d300:	bf00      	nop
    d302:	b003      	add	sp, #12
    d304:	f85d fb04 	ldr.w	pc, [sp], #4
    d308:	1fff90d0 	.word	0x1fff90d0
    d30c:	1fff90cc 	.word	0x1fff90cc

0000d310 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    d310:	b500      	push	{lr}
    d312:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d314:	f7f3 fc7c 	bl	c10 <Sys_GetCoreID>
    d318:	4603      	mov	r3, r0
    d31a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    d31c:	4a10      	ldr	r2, [pc, #64]	; (d360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    d31e:	9b01      	ldr	r3, [sp, #4]
    d320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d324:	2b00      	cmp	r3, #0
    d326:	d10d      	bne.n	d344 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d328:	f7f3 fba2 	bl	a70 <Port_schm_read_msr>
    d32c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d32e:	9b00      	ldr	r3, [sp, #0]
    d330:	f003 0301 	and.w	r3, r3, #1
    d334:	2b00      	cmp	r3, #0
    d336:	d100      	bne.n	d33a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d338:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    d33a:	490a      	ldr	r1, [pc, #40]	; (d364 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    d33c:	9b01      	ldr	r3, [sp, #4]
    d33e:	9a00      	ldr	r2, [sp, #0]
    d340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    d344:	4a06      	ldr	r2, [pc, #24]	; (d360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    d346:	9b01      	ldr	r3, [sp, #4]
    d348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d34c:	1c5a      	adds	r2, r3, #1
    d34e:	4904      	ldr	r1, [pc, #16]	; (d360 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    d350:	9b01      	ldr	r3, [sp, #4]
    d352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d356:	bf00      	nop
    d358:	b003      	add	sp, #12
    d35a:	f85d fb04 	ldr.w	pc, [sp], #4
    d35e:	bf00      	nop
    d360:	1fff90d8 	.word	0x1fff90d8
    d364:	1fff90d4 	.word	0x1fff90d4

0000d368 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    d368:	b500      	push	{lr}
    d36a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d36c:	f7f3 fc50 	bl	c10 <Sys_GetCoreID>
    d370:	4603      	mov	r3, r0
    d372:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    d374:	4a0d      	ldr	r2, [pc, #52]	; (d3ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    d376:	9b01      	ldr	r3, [sp, #4]
    d378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d37c:	1e5a      	subs	r2, r3, #1
    d37e:	490b      	ldr	r1, [pc, #44]	; (d3ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    d380:	9b01      	ldr	r3, [sp, #4]
    d382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    d386:	4a0a      	ldr	r2, [pc, #40]	; (d3b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    d388:	9b01      	ldr	r3, [sp, #4]
    d38a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d38e:	f003 0301 	and.w	r3, r3, #1
    d392:	2b00      	cmp	r3, #0
    d394:	d106      	bne.n	d3a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    d396:	4a05      	ldr	r2, [pc, #20]	; (d3ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    d398:	9b01      	ldr	r3, [sp, #4]
    d39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d39e:	2b00      	cmp	r3, #0
    d3a0:	d100      	bne.n	d3a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d3a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d3a4:	bf00      	nop
    d3a6:	b003      	add	sp, #12
    d3a8:	f85d fb04 	ldr.w	pc, [sp], #4
    d3ac:	1fff90d8 	.word	0x1fff90d8
    d3b0:	1fff90d4 	.word	0x1fff90d4

0000d3b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    d3b4:	b500      	push	{lr}
    d3b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3b8:	f7f3 fc2a 	bl	c10 <Sys_GetCoreID>
    d3bc:	4603      	mov	r3, r0
    d3be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    d3c0:	4a10      	ldr	r2, [pc, #64]	; (d404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    d3c2:	9b01      	ldr	r3, [sp, #4]
    d3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3c8:	2b00      	cmp	r3, #0
    d3ca:	d10d      	bne.n	d3e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d3cc:	f7f3 fb50 	bl	a70 <Port_schm_read_msr>
    d3d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d3d2:	9b00      	ldr	r3, [sp, #0]
    d3d4:	f003 0301 	and.w	r3, r3, #1
    d3d8:	2b00      	cmp	r3, #0
    d3da:	d100      	bne.n	d3de <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d3dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    d3de:	490a      	ldr	r1, [pc, #40]	; (d408 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    d3e0:	9b01      	ldr	r3, [sp, #4]
    d3e2:	9a00      	ldr	r2, [sp, #0]
    d3e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    d3e8:	4a06      	ldr	r2, [pc, #24]	; (d404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    d3ea:	9b01      	ldr	r3, [sp, #4]
    d3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3f0:	1c5a      	adds	r2, r3, #1
    d3f2:	4904      	ldr	r1, [pc, #16]	; (d404 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    d3f4:	9b01      	ldr	r3, [sp, #4]
    d3f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d3fa:	bf00      	nop
    d3fc:	b003      	add	sp, #12
    d3fe:	f85d fb04 	ldr.w	pc, [sp], #4
    d402:	bf00      	nop
    d404:	1fff90e0 	.word	0x1fff90e0
    d408:	1fff90dc 	.word	0x1fff90dc

0000d40c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    d40c:	b500      	push	{lr}
    d40e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d410:	f7f3 fbfe 	bl	c10 <Sys_GetCoreID>
    d414:	4603      	mov	r3, r0
    d416:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    d418:	4a0d      	ldr	r2, [pc, #52]	; (d450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    d41a:	9b01      	ldr	r3, [sp, #4]
    d41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d420:	1e5a      	subs	r2, r3, #1
    d422:	490b      	ldr	r1, [pc, #44]	; (d450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    d424:	9b01      	ldr	r3, [sp, #4]
    d426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    d42a:	4a0a      	ldr	r2, [pc, #40]	; (d454 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    d42c:	9b01      	ldr	r3, [sp, #4]
    d42e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d432:	f003 0301 	and.w	r3, r3, #1
    d436:	2b00      	cmp	r3, #0
    d438:	d106      	bne.n	d448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    d43a:	4a05      	ldr	r2, [pc, #20]	; (d450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    d43c:	9b01      	ldr	r3, [sp, #4]
    d43e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d442:	2b00      	cmp	r3, #0
    d444:	d100      	bne.n	d448 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d446:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d448:	bf00      	nop
    d44a:	b003      	add	sp, #12
    d44c:	f85d fb04 	ldr.w	pc, [sp], #4
    d450:	1fff90e0 	.word	0x1fff90e0
    d454:	1fff90dc 	.word	0x1fff90dc

0000d458 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    d458:	b500      	push	{lr}
    d45a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d45c:	f7f3 fbd8 	bl	c10 <Sys_GetCoreID>
    d460:	4603      	mov	r3, r0
    d462:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    d464:	4a10      	ldr	r2, [pc, #64]	; (d4a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    d466:	9b01      	ldr	r3, [sp, #4]
    d468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d46c:	2b00      	cmp	r3, #0
    d46e:	d10d      	bne.n	d48c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d470:	f7f3 fafe 	bl	a70 <Port_schm_read_msr>
    d474:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d476:	9b00      	ldr	r3, [sp, #0]
    d478:	f003 0301 	and.w	r3, r3, #1
    d47c:	2b00      	cmp	r3, #0
    d47e:	d100      	bne.n	d482 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d480:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    d482:	490a      	ldr	r1, [pc, #40]	; (d4ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    d484:	9b01      	ldr	r3, [sp, #4]
    d486:	9a00      	ldr	r2, [sp, #0]
    d488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    d48c:	4a06      	ldr	r2, [pc, #24]	; (d4a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    d48e:	9b01      	ldr	r3, [sp, #4]
    d490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d494:	1c5a      	adds	r2, r3, #1
    d496:	4904      	ldr	r1, [pc, #16]	; (d4a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    d498:	9b01      	ldr	r3, [sp, #4]
    d49a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d49e:	bf00      	nop
    d4a0:	b003      	add	sp, #12
    d4a2:	f85d fb04 	ldr.w	pc, [sp], #4
    d4a6:	bf00      	nop
    d4a8:	1fff90e8 	.word	0x1fff90e8
    d4ac:	1fff90e4 	.word	0x1fff90e4

0000d4b0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    d4b0:	b500      	push	{lr}
    d4b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4b4:	f7f3 fbac 	bl	c10 <Sys_GetCoreID>
    d4b8:	4603      	mov	r3, r0
    d4ba:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    d4bc:	4a0d      	ldr	r2, [pc, #52]	; (d4f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    d4be:	9b01      	ldr	r3, [sp, #4]
    d4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4c4:	1e5a      	subs	r2, r3, #1
    d4c6:	490b      	ldr	r1, [pc, #44]	; (d4f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    d4c8:	9b01      	ldr	r3, [sp, #4]
    d4ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    d4ce:	4a0a      	ldr	r2, [pc, #40]	; (d4f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    d4d0:	9b01      	ldr	r3, [sp, #4]
    d4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4d6:	f003 0301 	and.w	r3, r3, #1
    d4da:	2b00      	cmp	r3, #0
    d4dc:	d106      	bne.n	d4ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    d4de:	4a05      	ldr	r2, [pc, #20]	; (d4f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    d4e0:	9b01      	ldr	r3, [sp, #4]
    d4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4e6:	2b00      	cmp	r3, #0
    d4e8:	d100      	bne.n	d4ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d4ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d4ec:	bf00      	nop
    d4ee:	b003      	add	sp, #12
    d4f0:	f85d fb04 	ldr.w	pc, [sp], #4
    d4f4:	1fff90e8 	.word	0x1fff90e8
    d4f8:	1fff90e4 	.word	0x1fff90e4

0000d4fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    d4fc:	b500      	push	{lr}
    d4fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d500:	f7f3 fb86 	bl	c10 <Sys_GetCoreID>
    d504:	4603      	mov	r3, r0
    d506:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    d508:	4a10      	ldr	r2, [pc, #64]	; (d54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    d50a:	9b01      	ldr	r3, [sp, #4]
    d50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d510:	2b00      	cmp	r3, #0
    d512:	d10d      	bne.n	d530 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d514:	f7f3 faac 	bl	a70 <Port_schm_read_msr>
    d518:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d51a:	9b00      	ldr	r3, [sp, #0]
    d51c:	f003 0301 	and.w	r3, r3, #1
    d520:	2b00      	cmp	r3, #0
    d522:	d100      	bne.n	d526 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d524:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    d526:	490a      	ldr	r1, [pc, #40]	; (d550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    d528:	9b01      	ldr	r3, [sp, #4]
    d52a:	9a00      	ldr	r2, [sp, #0]
    d52c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    d530:	4a06      	ldr	r2, [pc, #24]	; (d54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    d532:	9b01      	ldr	r3, [sp, #4]
    d534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d538:	1c5a      	adds	r2, r3, #1
    d53a:	4904      	ldr	r1, [pc, #16]	; (d54c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    d53c:	9b01      	ldr	r3, [sp, #4]
    d53e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d542:	bf00      	nop
    d544:	b003      	add	sp, #12
    d546:	f85d fb04 	ldr.w	pc, [sp], #4
    d54a:	bf00      	nop
    d54c:	1fff90f0 	.word	0x1fff90f0
    d550:	1fff90ec 	.word	0x1fff90ec

0000d554 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    d554:	b500      	push	{lr}
    d556:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d558:	f7f3 fb5a 	bl	c10 <Sys_GetCoreID>
    d55c:	4603      	mov	r3, r0
    d55e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    d560:	4a0d      	ldr	r2, [pc, #52]	; (d598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    d562:	9b01      	ldr	r3, [sp, #4]
    d564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d568:	1e5a      	subs	r2, r3, #1
    d56a:	490b      	ldr	r1, [pc, #44]	; (d598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    d56c:	9b01      	ldr	r3, [sp, #4]
    d56e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    d572:	4a0a      	ldr	r2, [pc, #40]	; (d59c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    d574:	9b01      	ldr	r3, [sp, #4]
    d576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d57a:	f003 0301 	and.w	r3, r3, #1
    d57e:	2b00      	cmp	r3, #0
    d580:	d106      	bne.n	d590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    d582:	4a05      	ldr	r2, [pc, #20]	; (d598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    d584:	9b01      	ldr	r3, [sp, #4]
    d586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d58a:	2b00      	cmp	r3, #0
    d58c:	d100      	bne.n	d590 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d58e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d590:	bf00      	nop
    d592:	b003      	add	sp, #12
    d594:	f85d fb04 	ldr.w	pc, [sp], #4
    d598:	1fff90f0 	.word	0x1fff90f0
    d59c:	1fff90ec 	.word	0x1fff90ec

0000d5a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    d5a0:	b500      	push	{lr}
    d5a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5a4:	f7f3 fb34 	bl	c10 <Sys_GetCoreID>
    d5a8:	4603      	mov	r3, r0
    d5aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    d5ac:	4a10      	ldr	r2, [pc, #64]	; (d5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    d5ae:	9b01      	ldr	r3, [sp, #4]
    d5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	d10d      	bne.n	d5d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d5b8:	f7f3 fa5a 	bl	a70 <Port_schm_read_msr>
    d5bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d5be:	9b00      	ldr	r3, [sp, #0]
    d5c0:	f003 0301 	and.w	r3, r3, #1
    d5c4:	2b00      	cmp	r3, #0
    d5c6:	d100      	bne.n	d5ca <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d5c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    d5ca:	490a      	ldr	r1, [pc, #40]	; (d5f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    d5cc:	9b01      	ldr	r3, [sp, #4]
    d5ce:	9a00      	ldr	r2, [sp, #0]
    d5d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    d5d4:	4a06      	ldr	r2, [pc, #24]	; (d5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    d5d6:	9b01      	ldr	r3, [sp, #4]
    d5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5dc:	1c5a      	adds	r2, r3, #1
    d5de:	4904      	ldr	r1, [pc, #16]	; (d5f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    d5e0:	9b01      	ldr	r3, [sp, #4]
    d5e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d5e6:	bf00      	nop
    d5e8:	b003      	add	sp, #12
    d5ea:	f85d fb04 	ldr.w	pc, [sp], #4
    d5ee:	bf00      	nop
    d5f0:	1fff90f8 	.word	0x1fff90f8
    d5f4:	1fff90f4 	.word	0x1fff90f4

0000d5f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    d5f8:	b500      	push	{lr}
    d5fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5fc:	f7f3 fb08 	bl	c10 <Sys_GetCoreID>
    d600:	4603      	mov	r3, r0
    d602:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    d604:	4a0d      	ldr	r2, [pc, #52]	; (d63c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    d606:	9b01      	ldr	r3, [sp, #4]
    d608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d60c:	1e5a      	subs	r2, r3, #1
    d60e:	490b      	ldr	r1, [pc, #44]	; (d63c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    d610:	9b01      	ldr	r3, [sp, #4]
    d612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    d616:	4a0a      	ldr	r2, [pc, #40]	; (d640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    d618:	9b01      	ldr	r3, [sp, #4]
    d61a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d61e:	f003 0301 	and.w	r3, r3, #1
    d622:	2b00      	cmp	r3, #0
    d624:	d106      	bne.n	d634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    d626:	4a05      	ldr	r2, [pc, #20]	; (d63c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    d628:	9b01      	ldr	r3, [sp, #4]
    d62a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d62e:	2b00      	cmp	r3, #0
    d630:	d100      	bne.n	d634 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d632:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d634:	bf00      	nop
    d636:	b003      	add	sp, #12
    d638:	f85d fb04 	ldr.w	pc, [sp], #4
    d63c:	1fff90f8 	.word	0x1fff90f8
    d640:	1fff90f4 	.word	0x1fff90f4

0000d644 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    d644:	b500      	push	{lr}
    d646:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d648:	f7f3 fae2 	bl	c10 <Sys_GetCoreID>
    d64c:	4603      	mov	r3, r0
    d64e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    d650:	4a10      	ldr	r2, [pc, #64]	; (d694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    d652:	9b01      	ldr	r3, [sp, #4]
    d654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d658:	2b00      	cmp	r3, #0
    d65a:	d10d      	bne.n	d678 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d65c:	f7f3 fa08 	bl	a70 <Port_schm_read_msr>
    d660:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d662:	9b00      	ldr	r3, [sp, #0]
    d664:	f003 0301 	and.w	r3, r3, #1
    d668:	2b00      	cmp	r3, #0
    d66a:	d100      	bne.n	d66e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d66c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    d66e:	490a      	ldr	r1, [pc, #40]	; (d698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    d670:	9b01      	ldr	r3, [sp, #4]
    d672:	9a00      	ldr	r2, [sp, #0]
    d674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    d678:	4a06      	ldr	r2, [pc, #24]	; (d694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    d67a:	9b01      	ldr	r3, [sp, #4]
    d67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d680:	1c5a      	adds	r2, r3, #1
    d682:	4904      	ldr	r1, [pc, #16]	; (d694 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    d684:	9b01      	ldr	r3, [sp, #4]
    d686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d68a:	bf00      	nop
    d68c:	b003      	add	sp, #12
    d68e:	f85d fb04 	ldr.w	pc, [sp], #4
    d692:	bf00      	nop
    d694:	1fff9100 	.word	0x1fff9100
    d698:	1fff90fc 	.word	0x1fff90fc

0000d69c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    d69c:	b500      	push	{lr}
    d69e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6a0:	f7f3 fab6 	bl	c10 <Sys_GetCoreID>
    d6a4:	4603      	mov	r3, r0
    d6a6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    d6a8:	4a0d      	ldr	r2, [pc, #52]	; (d6e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    d6aa:	9b01      	ldr	r3, [sp, #4]
    d6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6b0:	1e5a      	subs	r2, r3, #1
    d6b2:	490b      	ldr	r1, [pc, #44]	; (d6e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    d6b4:	9b01      	ldr	r3, [sp, #4]
    d6b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    d6ba:	4a0a      	ldr	r2, [pc, #40]	; (d6e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    d6bc:	9b01      	ldr	r3, [sp, #4]
    d6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6c2:	f003 0301 	and.w	r3, r3, #1
    d6c6:	2b00      	cmp	r3, #0
    d6c8:	d106      	bne.n	d6d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    d6ca:	4a05      	ldr	r2, [pc, #20]	; (d6e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    d6cc:	9b01      	ldr	r3, [sp, #4]
    d6ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6d2:	2b00      	cmp	r3, #0
    d6d4:	d100      	bne.n	d6d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d6d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d6d8:	bf00      	nop
    d6da:	b003      	add	sp, #12
    d6dc:	f85d fb04 	ldr.w	pc, [sp], #4
    d6e0:	1fff9100 	.word	0x1fff9100
    d6e4:	1fff90fc 	.word	0x1fff90fc

0000d6e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    d6e8:	b500      	push	{lr}
    d6ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6ec:	f7f3 fa90 	bl	c10 <Sys_GetCoreID>
    d6f0:	4603      	mov	r3, r0
    d6f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    d6f4:	4a10      	ldr	r2, [pc, #64]	; (d738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    d6f6:	9b01      	ldr	r3, [sp, #4]
    d6f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d10d      	bne.n	d71c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d700:	f7f3 f9b6 	bl	a70 <Port_schm_read_msr>
    d704:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d706:	9b00      	ldr	r3, [sp, #0]
    d708:	f003 0301 	and.w	r3, r3, #1
    d70c:	2b00      	cmp	r3, #0
    d70e:	d100      	bne.n	d712 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d710:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    d712:	490a      	ldr	r1, [pc, #40]	; (d73c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    d714:	9b01      	ldr	r3, [sp, #4]
    d716:	9a00      	ldr	r2, [sp, #0]
    d718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    d71c:	4a06      	ldr	r2, [pc, #24]	; (d738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    d71e:	9b01      	ldr	r3, [sp, #4]
    d720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d724:	1c5a      	adds	r2, r3, #1
    d726:	4904      	ldr	r1, [pc, #16]	; (d738 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    d728:	9b01      	ldr	r3, [sp, #4]
    d72a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d72e:	bf00      	nop
    d730:	b003      	add	sp, #12
    d732:	f85d fb04 	ldr.w	pc, [sp], #4
    d736:	bf00      	nop
    d738:	1fff9108 	.word	0x1fff9108
    d73c:	1fff9104 	.word	0x1fff9104

0000d740 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    d740:	b500      	push	{lr}
    d742:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d744:	f7f3 fa64 	bl	c10 <Sys_GetCoreID>
    d748:	4603      	mov	r3, r0
    d74a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    d74c:	4a0d      	ldr	r2, [pc, #52]	; (d784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    d74e:	9b01      	ldr	r3, [sp, #4]
    d750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d754:	1e5a      	subs	r2, r3, #1
    d756:	490b      	ldr	r1, [pc, #44]	; (d784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    d758:	9b01      	ldr	r3, [sp, #4]
    d75a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    d75e:	4a0a      	ldr	r2, [pc, #40]	; (d788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    d760:	9b01      	ldr	r3, [sp, #4]
    d762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d766:	f003 0301 	and.w	r3, r3, #1
    d76a:	2b00      	cmp	r3, #0
    d76c:	d106      	bne.n	d77c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    d76e:	4a05      	ldr	r2, [pc, #20]	; (d784 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    d770:	9b01      	ldr	r3, [sp, #4]
    d772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d776:	2b00      	cmp	r3, #0
    d778:	d100      	bne.n	d77c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d77a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d77c:	bf00      	nop
    d77e:	b003      	add	sp, #12
    d780:	f85d fb04 	ldr.w	pc, [sp], #4
    d784:	1fff9108 	.word	0x1fff9108
    d788:	1fff9104 	.word	0x1fff9104

0000d78c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    d78c:	b500      	push	{lr}
    d78e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d790:	f7f3 fa3e 	bl	c10 <Sys_GetCoreID>
    d794:	4603      	mov	r3, r0
    d796:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    d798:	4a10      	ldr	r2, [pc, #64]	; (d7dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    d79a:	9b01      	ldr	r3, [sp, #4]
    d79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7a0:	2b00      	cmp	r3, #0
    d7a2:	d10d      	bne.n	d7c0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d7a4:	f7f3 f964 	bl	a70 <Port_schm_read_msr>
    d7a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d7aa:	9b00      	ldr	r3, [sp, #0]
    d7ac:	f003 0301 	and.w	r3, r3, #1
    d7b0:	2b00      	cmp	r3, #0
    d7b2:	d100      	bne.n	d7b6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d7b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    d7b6:	490a      	ldr	r1, [pc, #40]	; (d7e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    d7b8:	9b01      	ldr	r3, [sp, #4]
    d7ba:	9a00      	ldr	r2, [sp, #0]
    d7bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    d7c0:	4a06      	ldr	r2, [pc, #24]	; (d7dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    d7c2:	9b01      	ldr	r3, [sp, #4]
    d7c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7c8:	1c5a      	adds	r2, r3, #1
    d7ca:	4904      	ldr	r1, [pc, #16]	; (d7dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    d7cc:	9b01      	ldr	r3, [sp, #4]
    d7ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d7d2:	bf00      	nop
    d7d4:	b003      	add	sp, #12
    d7d6:	f85d fb04 	ldr.w	pc, [sp], #4
    d7da:	bf00      	nop
    d7dc:	1fff9110 	.word	0x1fff9110
    d7e0:	1fff910c 	.word	0x1fff910c

0000d7e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    d7e4:	b500      	push	{lr}
    d7e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7e8:	f7f3 fa12 	bl	c10 <Sys_GetCoreID>
    d7ec:	4603      	mov	r3, r0
    d7ee:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    d7f0:	4a0d      	ldr	r2, [pc, #52]	; (d828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    d7f2:	9b01      	ldr	r3, [sp, #4]
    d7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7f8:	1e5a      	subs	r2, r3, #1
    d7fa:	490b      	ldr	r1, [pc, #44]	; (d828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    d7fc:	9b01      	ldr	r3, [sp, #4]
    d7fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    d802:	4a0a      	ldr	r2, [pc, #40]	; (d82c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    d804:	9b01      	ldr	r3, [sp, #4]
    d806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d80a:	f003 0301 	and.w	r3, r3, #1
    d80e:	2b00      	cmp	r3, #0
    d810:	d106      	bne.n	d820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    d812:	4a05      	ldr	r2, [pc, #20]	; (d828 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    d814:	9b01      	ldr	r3, [sp, #4]
    d816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d81a:	2b00      	cmp	r3, #0
    d81c:	d100      	bne.n	d820 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d81e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d820:	bf00      	nop
    d822:	b003      	add	sp, #12
    d824:	f85d fb04 	ldr.w	pc, [sp], #4
    d828:	1fff9110 	.word	0x1fff9110
    d82c:	1fff910c 	.word	0x1fff910c

0000d830 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    d830:	b500      	push	{lr}
    d832:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d834:	f7f3 f9ec 	bl	c10 <Sys_GetCoreID>
    d838:	4603      	mov	r3, r0
    d83a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    d83c:	4a10      	ldr	r2, [pc, #64]	; (d880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    d83e:	9b01      	ldr	r3, [sp, #4]
    d840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d844:	2b00      	cmp	r3, #0
    d846:	d10d      	bne.n	d864 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d848:	f7f3 f912 	bl	a70 <Port_schm_read_msr>
    d84c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d84e:	9b00      	ldr	r3, [sp, #0]
    d850:	f003 0301 	and.w	r3, r3, #1
    d854:	2b00      	cmp	r3, #0
    d856:	d100      	bne.n	d85a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d858:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    d85a:	490a      	ldr	r1, [pc, #40]	; (d884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    d85c:	9b01      	ldr	r3, [sp, #4]
    d85e:	9a00      	ldr	r2, [sp, #0]
    d860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    d864:	4a06      	ldr	r2, [pc, #24]	; (d880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    d866:	9b01      	ldr	r3, [sp, #4]
    d868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d86c:	1c5a      	adds	r2, r3, #1
    d86e:	4904      	ldr	r1, [pc, #16]	; (d880 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    d870:	9b01      	ldr	r3, [sp, #4]
    d872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d876:	bf00      	nop
    d878:	b003      	add	sp, #12
    d87a:	f85d fb04 	ldr.w	pc, [sp], #4
    d87e:	bf00      	nop
    d880:	1fff9118 	.word	0x1fff9118
    d884:	1fff9114 	.word	0x1fff9114

0000d888 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    d888:	b500      	push	{lr}
    d88a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d88c:	f7f3 f9c0 	bl	c10 <Sys_GetCoreID>
    d890:	4603      	mov	r3, r0
    d892:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    d894:	4a0d      	ldr	r2, [pc, #52]	; (d8cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    d896:	9b01      	ldr	r3, [sp, #4]
    d898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d89c:	1e5a      	subs	r2, r3, #1
    d89e:	490b      	ldr	r1, [pc, #44]	; (d8cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    d8a0:	9b01      	ldr	r3, [sp, #4]
    d8a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    d8a6:	4a0a      	ldr	r2, [pc, #40]	; (d8d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    d8a8:	9b01      	ldr	r3, [sp, #4]
    d8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8ae:	f003 0301 	and.w	r3, r3, #1
    d8b2:	2b00      	cmp	r3, #0
    d8b4:	d106      	bne.n	d8c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    d8b6:	4a05      	ldr	r2, [pc, #20]	; (d8cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    d8b8:	9b01      	ldr	r3, [sp, #4]
    d8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8be:	2b00      	cmp	r3, #0
    d8c0:	d100      	bne.n	d8c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d8c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d8c4:	bf00      	nop
    d8c6:	b003      	add	sp, #12
    d8c8:	f85d fb04 	ldr.w	pc, [sp], #4
    d8cc:	1fff9118 	.word	0x1fff9118
    d8d0:	1fff9114 	.word	0x1fff9114

0000d8d4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    d8d4:	b500      	push	{lr}
    d8d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8d8:	f7f3 f99a 	bl	c10 <Sys_GetCoreID>
    d8dc:	4603      	mov	r3, r0
    d8de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    d8e0:	4a10      	ldr	r2, [pc, #64]	; (d924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    d8e2:	9b01      	ldr	r3, [sp, #4]
    d8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8e8:	2b00      	cmp	r3, #0
    d8ea:	d10d      	bne.n	d908 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d8ec:	f7f3 f8c0 	bl	a70 <Port_schm_read_msr>
    d8f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d8f2:	9b00      	ldr	r3, [sp, #0]
    d8f4:	f003 0301 	and.w	r3, r3, #1
    d8f8:	2b00      	cmp	r3, #0
    d8fa:	d100      	bne.n	d8fe <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    d8fe:	490a      	ldr	r1, [pc, #40]	; (d928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    d900:	9b01      	ldr	r3, [sp, #4]
    d902:	9a00      	ldr	r2, [sp, #0]
    d904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    d908:	4a06      	ldr	r2, [pc, #24]	; (d924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    d90a:	9b01      	ldr	r3, [sp, #4]
    d90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d910:	1c5a      	adds	r2, r3, #1
    d912:	4904      	ldr	r1, [pc, #16]	; (d924 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    d914:	9b01      	ldr	r3, [sp, #4]
    d916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d91a:	bf00      	nop
    d91c:	b003      	add	sp, #12
    d91e:	f85d fb04 	ldr.w	pc, [sp], #4
    d922:	bf00      	nop
    d924:	1fff9120 	.word	0x1fff9120
    d928:	1fff911c 	.word	0x1fff911c

0000d92c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    d92c:	b500      	push	{lr}
    d92e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d930:	f7f3 f96e 	bl	c10 <Sys_GetCoreID>
    d934:	4603      	mov	r3, r0
    d936:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    d938:	4a0d      	ldr	r2, [pc, #52]	; (d970 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    d93a:	9b01      	ldr	r3, [sp, #4]
    d93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d940:	1e5a      	subs	r2, r3, #1
    d942:	490b      	ldr	r1, [pc, #44]	; (d970 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    d944:	9b01      	ldr	r3, [sp, #4]
    d946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    d94a:	4a0a      	ldr	r2, [pc, #40]	; (d974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    d94c:	9b01      	ldr	r3, [sp, #4]
    d94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d952:	f003 0301 	and.w	r3, r3, #1
    d956:	2b00      	cmp	r3, #0
    d958:	d106      	bne.n	d968 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    d95a:	4a05      	ldr	r2, [pc, #20]	; (d970 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    d95c:	9b01      	ldr	r3, [sp, #4]
    d95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d962:	2b00      	cmp	r3, #0
    d964:	d100      	bne.n	d968 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d966:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d968:	bf00      	nop
    d96a:	b003      	add	sp, #12
    d96c:	f85d fb04 	ldr.w	pc, [sp], #4
    d970:	1fff9120 	.word	0x1fff9120
    d974:	1fff911c 	.word	0x1fff911c

0000d978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    d978:	b500      	push	{lr}
    d97a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d97c:	f7f3 f948 	bl	c10 <Sys_GetCoreID>
    d980:	4603      	mov	r3, r0
    d982:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    d984:	4a10      	ldr	r2, [pc, #64]	; (d9c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    d986:	9b01      	ldr	r3, [sp, #4]
    d988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d98c:	2b00      	cmp	r3, #0
    d98e:	d10d      	bne.n	d9ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d990:	f7f3 f86e 	bl	a70 <Port_schm_read_msr>
    d994:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d996:	9b00      	ldr	r3, [sp, #0]
    d998:	f003 0301 	and.w	r3, r3, #1
    d99c:	2b00      	cmp	r3, #0
    d99e:	d100      	bne.n	d9a2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    d9a2:	490a      	ldr	r1, [pc, #40]	; (d9cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    d9a4:	9b01      	ldr	r3, [sp, #4]
    d9a6:	9a00      	ldr	r2, [sp, #0]
    d9a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    d9ac:	4a06      	ldr	r2, [pc, #24]	; (d9c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    d9ae:	9b01      	ldr	r3, [sp, #4]
    d9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9b4:	1c5a      	adds	r2, r3, #1
    d9b6:	4904      	ldr	r1, [pc, #16]	; (d9c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    d9b8:	9b01      	ldr	r3, [sp, #4]
    d9ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d9be:	bf00      	nop
    d9c0:	b003      	add	sp, #12
    d9c2:	f85d fb04 	ldr.w	pc, [sp], #4
    d9c6:	bf00      	nop
    d9c8:	1fff9128 	.word	0x1fff9128
    d9cc:	1fff9124 	.word	0x1fff9124

0000d9d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    d9d0:	b500      	push	{lr}
    d9d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9d4:	f7f3 f91c 	bl	c10 <Sys_GetCoreID>
    d9d8:	4603      	mov	r3, r0
    d9da:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    d9dc:	4a0d      	ldr	r2, [pc, #52]	; (da14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    d9de:	9b01      	ldr	r3, [sp, #4]
    d9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9e4:	1e5a      	subs	r2, r3, #1
    d9e6:	490b      	ldr	r1, [pc, #44]	; (da14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    d9e8:	9b01      	ldr	r3, [sp, #4]
    d9ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    d9ee:	4a0a      	ldr	r2, [pc, #40]	; (da18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    d9f0:	9b01      	ldr	r3, [sp, #4]
    d9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9f6:	f003 0301 	and.w	r3, r3, #1
    d9fa:	2b00      	cmp	r3, #0
    d9fc:	d106      	bne.n	da0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    d9fe:	4a05      	ldr	r2, [pc, #20]	; (da14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    da00:	9b01      	ldr	r3, [sp, #4]
    da02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da06:	2b00      	cmp	r3, #0
    da08:	d100      	bne.n	da0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da0c:	bf00      	nop
    da0e:	b003      	add	sp, #12
    da10:	f85d fb04 	ldr.w	pc, [sp], #4
    da14:	1fff9128 	.word	0x1fff9128
    da18:	1fff9124 	.word	0x1fff9124

0000da1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    da1c:	b500      	push	{lr}
    da1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da20:	f7f3 f8f6 	bl	c10 <Sys_GetCoreID>
    da24:	4603      	mov	r3, r0
    da26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    da28:	4a10      	ldr	r2, [pc, #64]	; (da6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    da2a:	9b01      	ldr	r3, [sp, #4]
    da2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da30:	2b00      	cmp	r3, #0
    da32:	d10d      	bne.n	da50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da34:	f7f3 f81c 	bl	a70 <Port_schm_read_msr>
    da38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da3a:	9b00      	ldr	r3, [sp, #0]
    da3c:	f003 0301 	and.w	r3, r3, #1
    da40:	2b00      	cmp	r3, #0
    da42:	d100      	bne.n	da46 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    da46:	490a      	ldr	r1, [pc, #40]	; (da70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    da48:	9b01      	ldr	r3, [sp, #4]
    da4a:	9a00      	ldr	r2, [sp, #0]
    da4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    da50:	4a06      	ldr	r2, [pc, #24]	; (da6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    da52:	9b01      	ldr	r3, [sp, #4]
    da54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da58:	1c5a      	adds	r2, r3, #1
    da5a:	4904      	ldr	r1, [pc, #16]	; (da6c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    da5c:	9b01      	ldr	r3, [sp, #4]
    da5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da62:	bf00      	nop
    da64:	b003      	add	sp, #12
    da66:	f85d fb04 	ldr.w	pc, [sp], #4
    da6a:	bf00      	nop
    da6c:	1fff9130 	.word	0x1fff9130
    da70:	1fff912c 	.word	0x1fff912c

0000da74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    da74:	b500      	push	{lr}
    da76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da78:	f7f3 f8ca 	bl	c10 <Sys_GetCoreID>
    da7c:	4603      	mov	r3, r0
    da7e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    da80:	4a0d      	ldr	r2, [pc, #52]	; (dab8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    da82:	9b01      	ldr	r3, [sp, #4]
    da84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da88:	1e5a      	subs	r2, r3, #1
    da8a:	490b      	ldr	r1, [pc, #44]	; (dab8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    da8c:	9b01      	ldr	r3, [sp, #4]
    da8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    da92:	4a0a      	ldr	r2, [pc, #40]	; (dabc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    da94:	9b01      	ldr	r3, [sp, #4]
    da96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da9a:	f003 0301 	and.w	r3, r3, #1
    da9e:	2b00      	cmp	r3, #0
    daa0:	d106      	bne.n	dab0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    daa2:	4a05      	ldr	r2, [pc, #20]	; (dab8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    daa4:	9b01      	ldr	r3, [sp, #4]
    daa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daaa:	2b00      	cmp	r3, #0
    daac:	d100      	bne.n	dab0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    daae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dab0:	bf00      	nop
    dab2:	b003      	add	sp, #12
    dab4:	f85d fb04 	ldr.w	pc, [sp], #4
    dab8:	1fff9130 	.word	0x1fff9130
    dabc:	1fff912c 	.word	0x1fff912c

0000dac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    dac0:	b500      	push	{lr}
    dac2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dac4:	f7f3 f8a4 	bl	c10 <Sys_GetCoreID>
    dac8:	4603      	mov	r3, r0
    daca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    dacc:	4a10      	ldr	r2, [pc, #64]	; (db10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    dace:	9b01      	ldr	r3, [sp, #4]
    dad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dad4:	2b00      	cmp	r3, #0
    dad6:	d10d      	bne.n	daf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dad8:	f7f2 ffca 	bl	a70 <Port_schm_read_msr>
    dadc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dade:	9b00      	ldr	r3, [sp, #0]
    dae0:	f003 0301 	and.w	r3, r3, #1
    dae4:	2b00      	cmp	r3, #0
    dae6:	d100      	bne.n	daea <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dae8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    daea:	490a      	ldr	r1, [pc, #40]	; (db14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    daec:	9b01      	ldr	r3, [sp, #4]
    daee:	9a00      	ldr	r2, [sp, #0]
    daf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    daf4:	4a06      	ldr	r2, [pc, #24]	; (db10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    daf6:	9b01      	ldr	r3, [sp, #4]
    daf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dafc:	1c5a      	adds	r2, r3, #1
    dafe:	4904      	ldr	r1, [pc, #16]	; (db10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    db00:	9b01      	ldr	r3, [sp, #4]
    db02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db06:	bf00      	nop
    db08:	b003      	add	sp, #12
    db0a:	f85d fb04 	ldr.w	pc, [sp], #4
    db0e:	bf00      	nop
    db10:	1fff9138 	.word	0x1fff9138
    db14:	1fff9134 	.word	0x1fff9134

0000db18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    db18:	b500      	push	{lr}
    db1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db1c:	f7f3 f878 	bl	c10 <Sys_GetCoreID>
    db20:	4603      	mov	r3, r0
    db22:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    db24:	4a0d      	ldr	r2, [pc, #52]	; (db5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    db26:	9b01      	ldr	r3, [sp, #4]
    db28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db2c:	1e5a      	subs	r2, r3, #1
    db2e:	490b      	ldr	r1, [pc, #44]	; (db5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    db30:	9b01      	ldr	r3, [sp, #4]
    db32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    db36:	4a0a      	ldr	r2, [pc, #40]	; (db60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    db38:	9b01      	ldr	r3, [sp, #4]
    db3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db3e:	f003 0301 	and.w	r3, r3, #1
    db42:	2b00      	cmp	r3, #0
    db44:	d106      	bne.n	db54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    db46:	4a05      	ldr	r2, [pc, #20]	; (db5c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    db48:	9b01      	ldr	r3, [sp, #4]
    db4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db4e:	2b00      	cmp	r3, #0
    db50:	d100      	bne.n	db54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db54:	bf00      	nop
    db56:	b003      	add	sp, #12
    db58:	f85d fb04 	ldr.w	pc, [sp], #4
    db5c:	1fff9138 	.word	0x1fff9138
    db60:	1fff9134 	.word	0x1fff9134

0000db64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    db64:	b500      	push	{lr}
    db66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db68:	f7f3 f852 	bl	c10 <Sys_GetCoreID>
    db6c:	4603      	mov	r3, r0
    db6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    db70:	4a10      	ldr	r2, [pc, #64]	; (dbb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    db72:	9b01      	ldr	r3, [sp, #4]
    db74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db78:	2b00      	cmp	r3, #0
    db7a:	d10d      	bne.n	db98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db7c:	f7f2 ff78 	bl	a70 <Port_schm_read_msr>
    db80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db82:	9b00      	ldr	r3, [sp, #0]
    db84:	f003 0301 	and.w	r3, r3, #1
    db88:	2b00      	cmp	r3, #0
    db8a:	d100      	bne.n	db8e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    db8e:	490a      	ldr	r1, [pc, #40]	; (dbb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    db90:	9b01      	ldr	r3, [sp, #4]
    db92:	9a00      	ldr	r2, [sp, #0]
    db94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    db98:	4a06      	ldr	r2, [pc, #24]	; (dbb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    db9a:	9b01      	ldr	r3, [sp, #4]
    db9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dba0:	1c5a      	adds	r2, r3, #1
    dba2:	4904      	ldr	r1, [pc, #16]	; (dbb4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    dba4:	9b01      	ldr	r3, [sp, #4]
    dba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dbaa:	bf00      	nop
    dbac:	b003      	add	sp, #12
    dbae:	f85d fb04 	ldr.w	pc, [sp], #4
    dbb2:	bf00      	nop
    dbb4:	1fff9140 	.word	0x1fff9140
    dbb8:	1fff913c 	.word	0x1fff913c

0000dbbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    dbbc:	b500      	push	{lr}
    dbbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbc0:	f7f3 f826 	bl	c10 <Sys_GetCoreID>
    dbc4:	4603      	mov	r3, r0
    dbc6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    dbc8:	4a0d      	ldr	r2, [pc, #52]	; (dc00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    dbca:	9b01      	ldr	r3, [sp, #4]
    dbcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbd0:	1e5a      	subs	r2, r3, #1
    dbd2:	490b      	ldr	r1, [pc, #44]	; (dc00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    dbd4:	9b01      	ldr	r3, [sp, #4]
    dbd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    dbda:	4a0a      	ldr	r2, [pc, #40]	; (dc04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    dbdc:	9b01      	ldr	r3, [sp, #4]
    dbde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbe2:	f003 0301 	and.w	r3, r3, #1
    dbe6:	2b00      	cmp	r3, #0
    dbe8:	d106      	bne.n	dbf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    dbea:	4a05      	ldr	r2, [pc, #20]	; (dc00 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    dbec:	9b01      	ldr	r3, [sp, #4]
    dbee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbf2:	2b00      	cmp	r3, #0
    dbf4:	d100      	bne.n	dbf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dbf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dbf8:	bf00      	nop
    dbfa:	b003      	add	sp, #12
    dbfc:	f85d fb04 	ldr.w	pc, [sp], #4
    dc00:	1fff9140 	.word	0x1fff9140
    dc04:	1fff913c 	.word	0x1fff913c

0000dc08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    dc08:	b500      	push	{lr}
    dc0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc0c:	f7f3 f800 	bl	c10 <Sys_GetCoreID>
    dc10:	4603      	mov	r3, r0
    dc12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    dc14:	4a10      	ldr	r2, [pc, #64]	; (dc58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    dc16:	9b01      	ldr	r3, [sp, #4]
    dc18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d10d      	bne.n	dc3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc20:	f7f2 ff26 	bl	a70 <Port_schm_read_msr>
    dc24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc26:	9b00      	ldr	r3, [sp, #0]
    dc28:	f003 0301 	and.w	r3, r3, #1
    dc2c:	2b00      	cmp	r3, #0
    dc2e:	d100      	bne.n	dc32 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    dc32:	490a      	ldr	r1, [pc, #40]	; (dc5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    dc34:	9b01      	ldr	r3, [sp, #4]
    dc36:	9a00      	ldr	r2, [sp, #0]
    dc38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    dc3c:	4a06      	ldr	r2, [pc, #24]	; (dc58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    dc3e:	9b01      	ldr	r3, [sp, #4]
    dc40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc44:	1c5a      	adds	r2, r3, #1
    dc46:	4904      	ldr	r1, [pc, #16]	; (dc58 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    dc48:	9b01      	ldr	r3, [sp, #4]
    dc4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc4e:	bf00      	nop
    dc50:	b003      	add	sp, #12
    dc52:	f85d fb04 	ldr.w	pc, [sp], #4
    dc56:	bf00      	nop
    dc58:	1fff9148 	.word	0x1fff9148
    dc5c:	1fff9144 	.word	0x1fff9144

0000dc60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    dc60:	b500      	push	{lr}
    dc62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc64:	f7f2 ffd4 	bl	c10 <Sys_GetCoreID>
    dc68:	4603      	mov	r3, r0
    dc6a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    dc6c:	4a0d      	ldr	r2, [pc, #52]	; (dca4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    dc6e:	9b01      	ldr	r3, [sp, #4]
    dc70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc74:	1e5a      	subs	r2, r3, #1
    dc76:	490b      	ldr	r1, [pc, #44]	; (dca4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    dc78:	9b01      	ldr	r3, [sp, #4]
    dc7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    dc7e:	4a0a      	ldr	r2, [pc, #40]	; (dca8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    dc80:	9b01      	ldr	r3, [sp, #4]
    dc82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc86:	f003 0301 	and.w	r3, r3, #1
    dc8a:	2b00      	cmp	r3, #0
    dc8c:	d106      	bne.n	dc9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    dc8e:	4a05      	ldr	r2, [pc, #20]	; (dca4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    dc90:	9b01      	ldr	r3, [sp, #4]
    dc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc96:	2b00      	cmp	r3, #0
    dc98:	d100      	bne.n	dc9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc9c:	bf00      	nop
    dc9e:	b003      	add	sp, #12
    dca0:	f85d fb04 	ldr.w	pc, [sp], #4
    dca4:	1fff9148 	.word	0x1fff9148
    dca8:	1fff9144 	.word	0x1fff9144

0000dcac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    dcac:	b500      	push	{lr}
    dcae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcb0:	f7f2 ffae 	bl	c10 <Sys_GetCoreID>
    dcb4:	4603      	mov	r3, r0
    dcb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    dcb8:	4a10      	ldr	r2, [pc, #64]	; (dcfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    dcba:	9b01      	ldr	r3, [sp, #4]
    dcbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcc0:	2b00      	cmp	r3, #0
    dcc2:	d10d      	bne.n	dce0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dcc4:	f7f2 fed4 	bl	a70 <Port_schm_read_msr>
    dcc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dcca:	9b00      	ldr	r3, [sp, #0]
    dccc:	f003 0301 	and.w	r3, r3, #1
    dcd0:	2b00      	cmp	r3, #0
    dcd2:	d100      	bne.n	dcd6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dcd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    dcd6:	490a      	ldr	r1, [pc, #40]	; (dd00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    dcd8:	9b01      	ldr	r3, [sp, #4]
    dcda:	9a00      	ldr	r2, [sp, #0]
    dcdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    dce0:	4a06      	ldr	r2, [pc, #24]	; (dcfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    dce2:	9b01      	ldr	r3, [sp, #4]
    dce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dce8:	1c5a      	adds	r2, r3, #1
    dcea:	4904      	ldr	r1, [pc, #16]	; (dcfc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    dcec:	9b01      	ldr	r3, [sp, #4]
    dcee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dcf2:	bf00      	nop
    dcf4:	b003      	add	sp, #12
    dcf6:	f85d fb04 	ldr.w	pc, [sp], #4
    dcfa:	bf00      	nop
    dcfc:	1fff9150 	.word	0x1fff9150
    dd00:	1fff914c 	.word	0x1fff914c

0000dd04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    dd04:	b500      	push	{lr}
    dd06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd08:	f7f2 ff82 	bl	c10 <Sys_GetCoreID>
    dd0c:	4603      	mov	r3, r0
    dd0e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    dd10:	4a0d      	ldr	r2, [pc, #52]	; (dd48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    dd12:	9b01      	ldr	r3, [sp, #4]
    dd14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd18:	1e5a      	subs	r2, r3, #1
    dd1a:	490b      	ldr	r1, [pc, #44]	; (dd48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    dd1c:	9b01      	ldr	r3, [sp, #4]
    dd1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    dd22:	4a0a      	ldr	r2, [pc, #40]	; (dd4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    dd24:	9b01      	ldr	r3, [sp, #4]
    dd26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd2a:	f003 0301 	and.w	r3, r3, #1
    dd2e:	2b00      	cmp	r3, #0
    dd30:	d106      	bne.n	dd40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    dd32:	4a05      	ldr	r2, [pc, #20]	; (dd48 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    dd34:	9b01      	ldr	r3, [sp, #4]
    dd36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	d100      	bne.n	dd40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd40:	bf00      	nop
    dd42:	b003      	add	sp, #12
    dd44:	f85d fb04 	ldr.w	pc, [sp], #4
    dd48:	1fff9150 	.word	0x1fff9150
    dd4c:	1fff914c 	.word	0x1fff914c

0000dd50 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    dd50:	bf00      	nop
    dd52:	4770      	bx	lr

0000dd54 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    dd54:	b510      	push	{r4, lr}
    dd56:	b084      	sub	sp, #16
    dd58:	4604      	mov	r4, r0
    dd5a:	4608      	mov	r0, r1
    dd5c:	4611      	mov	r1, r2
    dd5e:	461a      	mov	r2, r3
    dd60:	4623      	mov	r3, r4
    dd62:	f8ad 3006 	strh.w	r3, [sp, #6]
    dd66:	4603      	mov	r3, r0
    dd68:	f88d 3005 	strb.w	r3, [sp, #5]
    dd6c:	460b      	mov	r3, r1
    dd6e:	f88d 3004 	strb.w	r3, [sp, #4]
    dd72:	4613      	mov	r3, r2
    dd74:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd78:	f7f2 ff4a 	bl	c10 <Sys_GetCoreID>
    dd7c:	4603      	mov	r3, r0
    dd7e:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    dd80:	490d      	ldr	r1, [pc, #52]	; (ddb8 <Det_ReportError+0x64>)
    dd82:	9b03      	ldr	r3, [sp, #12]
    dd84:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    dd88:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    dd8c:	4a0b      	ldr	r2, [pc, #44]	; (ddbc <Det_ReportError+0x68>)
    dd8e:	9b03      	ldr	r3, [sp, #12]
    dd90:	4413      	add	r3, r2
    dd92:	f89d 2005 	ldrb.w	r2, [sp, #5]
    dd96:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    dd98:	4a09      	ldr	r2, [pc, #36]	; (ddc0 <Det_ReportError+0x6c>)
    dd9a:	9b03      	ldr	r3, [sp, #12]
    dd9c:	4413      	add	r3, r2
    dd9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    dda2:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    dda4:	4a07      	ldr	r2, [pc, #28]	; (ddc4 <Det_ReportError+0x70>)
    dda6:	9b03      	ldr	r3, [sp, #12]
    dda8:	4413      	add	r3, r2
    ddaa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ddae:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ddb0:	2300      	movs	r3, #0
}
    ddb2:	4618      	mov	r0, r3
    ddb4:	b004      	add	sp, #16
    ddb6:	bd10      	pop	{r4, pc}
    ddb8:	1fff917c 	.word	0x1fff917c
    ddbc:	1fff9154 	.word	0x1fff9154
    ddc0:	1fff9158 	.word	0x1fff9158
    ddc4:	1fff915c 	.word	0x1fff915c

0000ddc8 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    ddc8:	b510      	push	{r4, lr}
    ddca:	b084      	sub	sp, #16
    ddcc:	4604      	mov	r4, r0
    ddce:	4608      	mov	r0, r1
    ddd0:	4611      	mov	r1, r2
    ddd2:	461a      	mov	r2, r3
    ddd4:	4623      	mov	r3, r4
    ddd6:	f8ad 3006 	strh.w	r3, [sp, #6]
    ddda:	4603      	mov	r3, r0
    dddc:	f88d 3005 	strb.w	r3, [sp, #5]
    dde0:	460b      	mov	r3, r1
    dde2:	f88d 3004 	strb.w	r3, [sp, #4]
    dde6:	4613      	mov	r3, r2
    dde8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddec:	f7f2 ff10 	bl	c10 <Sys_GetCoreID>
    ddf0:	4603      	mov	r3, r0
    ddf2:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    ddf4:	490d      	ldr	r1, [pc, #52]	; (de2c <Det_ReportRuntimeError+0x64>)
    ddf6:	9b03      	ldr	r3, [sp, #12]
    ddf8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ddfc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    de00:	4a0b      	ldr	r2, [pc, #44]	; (de30 <Det_ReportRuntimeError+0x68>)
    de02:	9b03      	ldr	r3, [sp, #12]
    de04:	4413      	add	r3, r2
    de06:	f89d 2005 	ldrb.w	r2, [sp, #5]
    de0a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    de0c:	4a09      	ldr	r2, [pc, #36]	; (de34 <Det_ReportRuntimeError+0x6c>)
    de0e:	9b03      	ldr	r3, [sp, #12]
    de10:	4413      	add	r3, r2
    de12:	f89d 2004 	ldrb.w	r2, [sp, #4]
    de16:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    de18:	4a07      	ldr	r2, [pc, #28]	; (de38 <Det_ReportRuntimeError+0x70>)
    de1a:	9b03      	ldr	r3, [sp, #12]
    de1c:	4413      	add	r3, r2
    de1e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    de22:	701a      	strb	r2, [r3, #0]

    return E_OK;
    de24:	2300      	movs	r3, #0
}
    de26:	4618      	mov	r0, r3
    de28:	b004      	add	sp, #16
    de2a:	bd10      	pop	{r4, pc}
    de2c:	1fff9180 	.word	0x1fff9180
    de30:	1fff9160 	.word	0x1fff9160
    de34:	1fff9164 	.word	0x1fff9164
    de38:	1fff9168 	.word	0x1fff9168

0000de3c <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    de3c:	b510      	push	{r4, lr}
    de3e:	b084      	sub	sp, #16
    de40:	4604      	mov	r4, r0
    de42:	4608      	mov	r0, r1
    de44:	4611      	mov	r1, r2
    de46:	461a      	mov	r2, r3
    de48:	4623      	mov	r3, r4
    de4a:	f8ad 3006 	strh.w	r3, [sp, #6]
    de4e:	4603      	mov	r3, r0
    de50:	f88d 3005 	strb.w	r3, [sp, #5]
    de54:	460b      	mov	r3, r1
    de56:	f88d 3004 	strb.w	r3, [sp, #4]
    de5a:	4613      	mov	r3, r2
    de5c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de60:	f7f2 fed6 	bl	c10 <Sys_GetCoreID>
    de64:	4603      	mov	r3, r0
    de66:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    de68:	490d      	ldr	r1, [pc, #52]	; (dea0 <Det_ReportTransientFault+0x64>)
    de6a:	9b03      	ldr	r3, [sp, #12]
    de6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    de70:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    de74:	4a0b      	ldr	r2, [pc, #44]	; (dea4 <Det_ReportTransientFault+0x68>)
    de76:	9b03      	ldr	r3, [sp, #12]
    de78:	4413      	add	r3, r2
    de7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    de7e:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    de80:	4a09      	ldr	r2, [pc, #36]	; (dea8 <Det_ReportTransientFault+0x6c>)
    de82:	9b03      	ldr	r3, [sp, #12]
    de84:	4413      	add	r3, r2
    de86:	f89d 2004 	ldrb.w	r2, [sp, #4]
    de8a:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    de8c:	4a07      	ldr	r2, [pc, #28]	; (deac <Det_ReportTransientFault+0x70>)
    de8e:	9b03      	ldr	r3, [sp, #12]
    de90:	4413      	add	r3, r2
    de92:	f89d 2003 	ldrb.w	r2, [sp, #3]
    de96:	701a      	strb	r2, [r3, #0]

    return E_OK;
    de98:	2300      	movs	r3, #0
}
    de9a:	4618      	mov	r0, r3
    de9c:	b004      	add	sp, #16
    de9e:	bd10      	pop	{r4, pc}
    dea0:	1fff9178 	.word	0x1fff9178
    dea4:	1fff916c 	.word	0x1fff916c
    dea8:	1fff9170 	.word	0x1fff9170
    deac:	1fff9174 	.word	0x1fff9174

0000deb0 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    deb0:	bf00      	nop
    deb2:	4770      	bx	lr

0000deb4 <Clock_Ip_au8DividerCallbackIndex>:
    deb4:	0c00 0e0d 0201 0603 0409 0a07 0805 000b     ................

0000dec4 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000ded4 <Clock_Ip_au8XoscCallbackIndex>:
    ded4:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000dee4 <Clock_Ip_au8IrcoscCallbackIndex>:
    dee4:	0100 0302 0004 0000 0000 0000 0000 0000     ................

0000def4 <Clock_Ip_au8GateCallbackIndex>:
    def4:	0200 0601 0301 0104 0500 0000 0000 0000     ................

0000df04 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000df14 <Clock_Ip_au8PllCallbackIndex>:
    df14:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000df24 <Clock_Ip_au8SelectorCallbackIndex>:
    df24:	0800 0a09 0109 0302 0504 0706 0000 0000     ................

0000df34 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000df44 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000df54 <Clock_Ip_au8ClockFeatures>:
	...
    df64:	0000 0100 0000 0000 0000 0000 0002 0000     ................
    df74:	0000 0000 0300 0000 0000 0000 0000 0004     ................
    df84:	0000 0000 0000 0500 0000 0000 0000 0000     ................
    df94:	0006 0000 0000 0000 0100 0000 0000 0000     ................
    dfa4:	0000 0001 0000 0000 0000 0400 0000 0000     ................
    dfb4:	0000 0000 0005 0000 0001 0000 0401 0000     ................
    dfc4:	0200 0000 0100 0005 0000 0003 0000 0402     ................
    dfd4:	0000 0400 0000 0200 0005 0000 0005 0000     ................
    dfe4:	0403 0000 0600 0000 0300 0005 0000 0007     ................
    dff4:	0000 0500 0000 0000 0000 0000 0006 0000     ................
	...
    e034:	0000 0005 0000 0000 0000 0600 0100 0000     ................
    e044:	0000 0000 0007 0003 0000 0000 0000 0000     ................
    e054:	0000 0000 0000 0006 0000 0000 0000 0700     ................
    e064:	0100 0000 0000 0000 0008 0003 0000 0000     ................
	...
    e07c:	0000 0009 0000 0000 0000 0a00 0100 0000     ................
    e08c:	0000 0000 000b 0003 0000 0000 0000 0000     ................
    e09c:	0000 0000 0000 000c 0000 0000 0000 0d00     ................
    e0ac:	0100 0000 0000 0000 000e 0003 0000 0000     ................
    e0bc:	0800 0000 0000 0000 0000 0009 0000 0000     ................
    e0cc:	0000 0a00 0000 0000 0000 0000 000b 0000     ................
    e0dc:	0000 0000 0b01 0000 0000 0000 0200 000b     ................
    e0ec:	0000 0000 0000 0b03 0000 0000 0000 0000     ................
	...
    e104:	0400 0000 003b 003b 0000 0004 2700 2700     ....;.;......'.'
    e114:	0000 0100 0000 0000 0000 0000 0007 0000     ................
    e124:	7300 0000 0700 0000 0000 0032 0000 0009     .s........2.....
    e134:	0000 0200 0000 0700 0000 0000 0021 0000     ............!...
    e144:	0009 0000 0400 0000 0900 0000 0000 0003     ................
    e154:	0000 0007 0000 6100 0000 0700 0000 0000     .......a........
    e164:	0024 0000 0007 0000 2500 0000 0700 0000     $........%......
    e174:	0000 002b 0000 0004 5a00 5a00 0000 0700     ..+......Z.Z....
    e184:	0000 0000 0020 0000 0004 3800 3800 0000     .... ......8.8..
    e194:	0400 0000 0039 0039 0000 0004 3a00 3a00     ....9.9......:.:
    e1a4:	0000 0400 0000 0026 0026 0000 0004 6600     ......&.&......f
    e1b4:	6600 0000 0400 0000 0037 0037 0000 0004     .f......7.7.....
    e1c4:	2c00 2c00 0000 0400 0000 002d 002d 0000     .,.,......-.-...
    e1d4:	0004 2e00 2e00 0000 0200 0000 4040 0040     ............@@@.
    e1e4:	0000 0004 6a00 6a00 0000 0400 0000 006b     .....j.j......k.
    e1f4:	006b 0000 0004 6c00 6c00 0000 0900 0000     k......l.l......
    e204:	0000 0001 0000 0009 0000 0000 0000 0700     ................
    e214:	0000 0000 0036 0000 0007 0000 3100 0000     ....6........1..
    e224:	0700 0000 0000 0049 0000 0007 0000 4a00     ......I........J
    e234:	0000 0700 0000 0000 004b 0000 0007 0000     ........K.......
    e244:	4c00 0000 0700 0000 0000 004d 0000 0007     .L........M.....
    e254:	0000 3d00 0000 0300 0000 0000 0000 0000     ...=............

0000e264 <Clock_Ip_au16SelectorEntryHardwareValue>:
    e264:	0a03 0101 0001 0101 0002 0404 0603 0200     ................
    e274:	0810 0001 0100 0202 0000 0000 0007 0000     ................
    e284:	0009 0000 0000 0000 0c0e 0000 0000 0000     ................
	...

0000e2bc <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    e2bc:	0000 0002 0300 0000 0601 0000 0000 0000     ................
	...

0000e2ec <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    e2ec:	0700 0000 0000 0000 0000 0202 0303 0101     ................
    e2fc:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000e31c <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    e31c:	0001 0000 0000 0000 0000 0202 0303 0101     ................
    e32c:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000e34c <Clock_Ip_au8DividerValueHardwareValue>:
    e34c:	0100 0002 0003 0000 0004 0000 0000 0000     ................
    e35c:	0005 0000 0000 0000 0000 0000 0000 0000     ................
    e36c:	0006 0000 0000 0000 0000 0000 0000 0000     ................
	...
    e38c:	0007 0000                                   ....

0000e390 <Clock_Ip_apxScgPeriphAsyncDivs>:
    e390:	4204 4006 4304 4006 4104 4006 4604 4006     .B.@.C.@.A.@.F.@

0000e3a0 <Clock_Ip_aeSourceTypeClockName>:
    e3a0:	0000 0000 0001 0000 0001 0000 0001 0000     ................
    e3b0:	0001 0000 0001 0000 0001 0000 0001 0000     ................
    e3c0:	0002 0000 0003 0000 0001 0000 0001 0000     ................
    e3d0:	0001 0000 0001 0000 0002 0000 0002 0000     ................
    e3e0:	0003 0000 0003 0000 0001 0000 0001 0000     ................
    e3f0:	0004 0000 0004 0000 0004 0000 0004 0000     ................
	...

0000e45c <Clock_Ip_aeHwPllName>:
    e45c:	0009 0000                                   ....

0000e460 <Clock_Ip_aeHwDfsName>:
    e460:	0057 0000                                   W...

0000e464 <Clock_Ip_axDividerCallbacks>:
    e464:	2209 0000 2213 0000 222d 0000 2247 0000     ."..."..-"..G"..
    e474:	2261 0000 227b 0000 2295 0000 22af 0000     a"..{"..."..."..
    e484:	22c9 0000 22e3 0000 22fd 0000 2317 0000     ."..."..."...#..
    e494:	2331 0000 234b 0000 2365 0000               1#..K#..e#..

0000e4a0 <Clock_Ip_axDividerTriggerCallbacks>:
    e4a0:	26d9 0000 26d9 0000                         .&...&..

0000e4a8 <Clock_Ip_axExtOscCallbacks>:
    e4a8:	26e5 0000 26e5 0000 26e5 0000 26ef 0000     .&...&...&...&..
    e4b8:	26e5 0000 26f9 0000 2713 0000 272d 0000     .&...&...'..-'..
    e4c8:	27b1 0000 27c5 0000                         .'...'..

0000e4d0 <Clock_Ip_axFracDivCallbacks>:
    e4d0:	2985 0000 2985 0000 298f 0000               .)...)...)..

0000e4dc <Clock_Ip_axGateCallbacks>:
    e4dc:	29a9 0000 29b3 0000 2ab3 0000 2acd 0000     .)...)...*...*..
    e4ec:	2a63 0000 2a7d 0000 2a13 0000 2a2d 0000     c*..}*...*..-*..
    e4fc:	29c3 0000 29dd 0000 2b03 0000 2b1d 0000     .)...)...+...+..
    e50c:	2b53 0000 2b6d 0000                         S+..m+..

0000e514 <Clock_Ip_axIntOscCallbacks>:
    e514:	2d19 0000 2d19 0000 2d23 0000 2d2d 0000     .-...-..#-..--..
    e524:	2d47 0000 2d61 0000 2d75 0000 2d8f 0000     G-..a-..u-...-..
    e534:	2da9 0000 2dbd 0000 2dd7 0000 2df1 0000     .-...-...-...-..
    e544:	2e99 0000 2eb3 0000 2ecd 0000               ............

0000e550 <Clock_Ip_axCmuCallbacks>:
    e550:	3469 0000 3473 0000 347f 0000 3469 0000     i4..s4...4..i4..

0000e560 <Clock_Ip_axPllCallbacks>:
    e560:	3489 0000 3489 0000 3493 0000 3489 0000     .4...4...4...4..
    e570:	349f 0000 34a9 0000 34c3 0000 34dd 0000     .4...4...4...4..
    e580:	3581 0000 356d 0000                         .5..m5..

0000e588 <Clock_Ip_axPcfsCallbacks>:
    e588:	36dd 0000                                   .6..

0000e58c <Clock_Ip_axSelectorCallbacks>:
    e58c:	36e9 0000 36e9 0000 36f3 0000 370d 0000     .6...6...6...7..
    e59c:	36e9 0000 3727 0000 3741 0000 375b 0000     .6..'7..A7..[7..
    e5ac:	3775 0000 378f 0000 37a9 0000 37c3 0000     u7...7...7...7..
    e5bc:	37dd 0000 37f7 0000 3811 0000 382b 0000     .7...7...8..+8..
    e5cc:	3845 0000 385f 0000 3879 0000 3893 0000     E8.._8..y8...8..
    e5dc:	38ad 0000 38c7 0000                         .8...8..

0000e5e4 <ClockSource>:
    e5e4:	0000 0000 0008 0000 0002 0000 0005 0000     ................
	...
    e5fc:	0009 0000                                   ....

0000e600 <ResetReasonArray>:
    e600:	0000 0000 0001 0000 0002 0000 0003 0000     ................
    e610:	0004 0000 0005 0000 0006 0000 0007 0000     ................
    e620:	0008 0000 0009 0000 000a 0000 000b 0000     ................
    e630:	000c 0000 000d 0000 000e 0000               ............

0000e63c <Port_au32PortCiPortBaseAddr>:
    e63c:	9000 4004 a000 4004 b000 4004 c000 4004     ...@...@...@...@
    e64c:	d000 4004                                   ...@

0000e650 <Port_au32PortCiGpioBaseAddr>:
    e650:	f000 400f f040 400f f080 400f f0c0 400f     ...@@..@...@...@
    e660:	f100 400f                                   ...@

0000e664 <Flexcan_Ip_apxBase>:
    e664:	4000 4002 5000 4002 b000 4002               .@.@.P.@...@

0000e670 <payload_code.3>:
    e670:	0100 0302 0504 0706 0908 0909 0a09 0a0a     ................
    e680:	0b0a 0b0b 0c0b 0c0c 0d0c 0d0d 0d0d 0d0d     ................
    e690:	0e0d 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
    e6a0:	0f0e 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
    e6b0:	000f 0000                                   ....

0000e6b4 <flexcanBase.2>:
    e6b4:	4000 4002 5000 4002 b000 4002               .@.@.P.@...@

0000e6c0 <maxMbNum.1>:
    e6c0:	0020 0000 0010 0000 0010 0000                ...........

0000e6cc <flexcanBase.0>:
    e6cc:	4000 4002                                   .@.@

0000e6d0 <Can_43_FLEXCANIpwHwChannelConfig0>:
    e6d0:	eb6c 0000                                   l...

0000e6d4 <Can_au32HwBufferAddr_Ctrl0>:
    e6d4:	b080 4002 b090 4002 b0a0 4002               ...@...@...@

0000e6e0 <Can_aCtrlOffsetToCtrlIDMap>:
    e6e0:	ffff 0000                                   ....

0000e6e4 <Can_aHwObjIDToCtrlIDMap>:
    e6e4:	0000 0000                                   ....

0000e6e8 <Can_aHwObjectConfig>:
    e6e8:	0000 0000 0001 0000 0000 0000 0000 ff03     ................
    e6f8:	0008 0000 0000 0000 0003 0000 0000 0000     ................
    e708:	e6d4 0000                                   ....

0000e70c <Can_aBaudrateConfig_Ctrl0>:
    e70c:	0000 0403 0005 001d 0000 0000 0000 0000     ................
	...

0000e724 <Can_apHwObject_Ctrl0>:
    e724:	e6e8 0000                                   ....

0000e728 <Can_aControllerConfig>:
    e728:	0000 0002 b000 4002 0001 0000 ffff ffff     .......@........
	...
    e744:	0000 0001 e70c 0000 e6d0 0000 0001 0000     ................
    e754:	e724 0000                                   $...

0000e758 <Can_apController>:
    e758:	e728 0000                                   (...

0000e75c <Can_43_FLEXCAN_Config>:
	...
    e764:	e6e0 0000 e6e4 0000 e6e8 0000 e758 0000     ............X...

0000e774 <Mcu_aClockConfigPB>:
	...
    e77c:	0101 1c00 0010 0400 0029 0100 0005 0000     ........).......
    e78c:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    e79c:	0000 0000 0008 0000 1200 007a 0001 0000     ..........z.....
    e7ac:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    e7bc:	0057 0000 0000 0000 0000 0000 0000 0000     W...............
	...
    e7dc:	0019 0000 0005 0000 001a 0000 0002 0000     ................
    e7ec:	001b 0000 0005 0000 002a 0000 0005 0000     ........*.......
    e7fc:	0028 0000 000e 0000 0029 0000 0001 0000     (.......).......
    e80c:	0056 0000 001c 0000 0032 0000 002a 0000     V.......2...*...
    e81c:	002b 0000 0014 0000 002c 0000 0014 0000     +.......,.......
    e82c:	002d 0000 0014 0000 002e 0000 0014 0000     -...............
    e83c:	003f 0000 0000 0000 0040 0000 0000 0000     ?.......@.......
    e84c:	0041 0000 0000 0000 0042 0000 0000 0000     A.......B.......
    e85c:	0031 0000 0000 0000 0045 0000 0000 0000     1.......E.......
    e86c:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    e87c:	0044 0000 0000 0000 0030 0000 0000 0000     D.......0.......
    e88c:	003d 0000 0000 0000 0043 0000 0000 0000     =.......C.......
    e89c:	0049 0000 0000 0000 004a 0000 0000 0000     I.......J.......
    e8ac:	004b 0000 0000 0000 0048 0000 0000 0000     K.......H.......
    e8bc:	000c 0000 0001 0000 0000 0000 000d 0000     ................
    e8cc:	0002 0000 0000 0000 000e 0000 0001 0000     ................
    e8dc:	0000 0000 000f 0000 0001 0000 0000 0000     ................
    e8ec:	001d 0000 0001 0000 0000 0000 001e 0000     ................
    e8fc:	0008 0000 0000 0000 001f 0000 0001 0000     ................
    e90c:	0000 0000 0021 0000 0001 0000 0000 0000     ....!...........
    e91c:	0022 0000 0002 0000 0000 0000 0023 0000     "...........#...
    e92c:	0001 0000 0000 0000 0025 0000 0003 0000     ........%.......
    e93c:	0000 0000 0026 0000 0004 0000 0000 0000     ....&...........
    e94c:	0027 0000 0002 0000 0000 0000 0032 0000     '...........2...
    e95c:	0001 0000 0000 0000 0048 0000 0001 0000     ........H.......
    e96c:	0001 0000 0056 0000 0001 0000 0001 0000     ....V...........
    e97c:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    e994:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    e9ac:	0057 0000 0000 0000 0057 0000 0057 0000     W.......W...W...
	...
    e9c8:	0014 0000 7d00 0000 0015 0000 7d00 0000     .....}.......}..
    e9d8:	0016 0000 7d00 0000 0017 0000 8000 0000     .....}..........
    e9e8:	0012 0000 0001 0000 0013 0000 0001 0000     ................
    e9f8:	0030 0000 0000 0000 0031 0000 0000 0000     0.......1.......
    ea08:	0032 0000 0000 0000 0033 0000 0000 0000     2.......3.......
    ea18:	0034 0000 0000 0000 0035 0000 0001 0000     4.......5.......
    ea28:	0036 0000 0000 0000 0037 0000 0001 0000     6.......7.......
    ea38:	0038 0000 0001 0000 0039 0000 0000 0000     8.......9.......
    ea48:	003a 0000 0000 0000 003b 0000 0000 0000     :.......;.......
    ea58:	003c 0000 0001 0000 003d 0000 0000 0000     <.......=.......
    ea68:	003e 0000 0000 0000 003f 0000 0000 0000     >.......?.......
    ea78:	0040 0000 0000 0000 0041 0000 0000 0000     @.......A.......
    ea88:	0042 0000 0000 0000 0043 0000 0000 0000     B.......C.......
    ea98:	0044 0000 0000 0000 0045 0000 0000 0000     D.......E.......
    eaa8:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    eab8:	0048 0000 0000 0000 0049 0000 0000 0000     H.......I.......
    eac8:	004a 0000 0000 0000 004b 0000 0000 0000     J.......K.......
    ead8:	004c 0000 0001 0000 004d 0000 0001 0000     L.......M.......
    eae8:	004e 0000 0000 0000 004f 0000 0000 0000     N.......O.......
    eaf8:	0050 0000 0001 0000 0051 0000 0001 0000     P.......Q.......
    eb08:	0052 0000 0001 0000 0053 0000 0001 0000     R.......S.......
    eb18:	0054 0000 0001 0000 0055 0000 0000 0000     T.......U.......
    eb28:	0056 0000 0001 0000 0057 0000 0000 0000     V.......W.......
    eb38:	0000 0000 0057 0000 0000 0000 0057 0000     ....W.......W...
	...

0000eb6c <Flexcan_aCtrlConfigPB>:
    eb6c:	0003 0000 0000 0000 0000 0000 0000 0000     ................
    eb7c:	0060 0000 0000 0000 0100 0000 0003 0000     `...............
    eb8c:	0004 0000 0005 0000 001d 0000 0000 0000     ................
    eb9c:	0004 0000 0004 0000 0005 0000 001d 0000     ................
	...
    ebb4:	76a1 0000 774d 0000                         .v..Mw..

0000ebbc <aIrqConfiguration>:
    ebbc:	005c 0000 0f01 0000 bbcd 0000 005d 0000     \...........]...
    ebcc:	0f01 0000 bbdd 0000 005f 0000 0f01 0000     ........_.......
    ebdc:	bbed 0000                                   ....

0000ebe0 <intCtrlConfig>:
    ebe0:	0003 0000 ebbc 0000                         ........

0000ebe8 <Mcu_Config>:
    ebe8:	005a 0000 0000 0000 0001 0000 0001 0000     Z...............
    ebf8:	edc8 0000 e774 0000 edd4 0000               ....t.......

0000ec04 <OsIf_xPredefinedConfig>:
    ec04:	0000 0000 6c00 02dc                         .....l..

0000ec0c <OsIf_apxPredefinedConfig>:
    ec0c:	ec04 0000                                   ....

0000ec10 <Platform_uConfiguration>:
    ec10:	ec18 0000                                   ....

0000ec14 <Platform_Config>:
    ec14:	ec10 0000                                   ....

0000ec18 <ipwConfig>:
    ec18:	ebe0 0000 0000 0000                         ........

0000ec20 <g_pin_mux_InitConfigArr>:
    ec20:	c000 4004 f0c0 400f 0000 0000 0002 0000     ...@...@........
    ec30:	0001 0000 0002 0000 0000 0000 0000 0000     ................
    ec40:	0000 0000 0100 0000 b000 4004 0000 0000     ...........@....
    ec50:	0011 0000 0002 0000 0003 0000 0001 0000     ................
	...
    ec70:	b000 4004 0000 0000 0010 0000 0002 0000     ...@............
    ec80:	0003 0000 0001 0000 0000 0000 0000 0000     ................
	...

0000ec98 <au8Port_PartitionList>:
    ec98:	0001 0000                                   ....

0000ec9c <au32Port_PinToPartitionMap>:
    ec9c:	0001 0000 0001 0000 0001 0000               ............

0000eca8 <Port_au16NoUnUsedPadsArrayDefault>:
    eca8:	0000 0001 0002 0003 0006 0007 0008 0009     ................
    ecb8:	000b 000c 000d 000e 000f 0010 0011 0020     .............. .
    ecc8:	0021 0022 0023 0024 0025 0026 0027 0028     !.".#.$.%.&.'.(.
    ecd8:	0029 002a 002b 002c 002d 002e 002f 0030     ).*.+.,.-.../.0.
    ece8:	0031 0040 0041 0042 0043 0046 0047 0048     1.@.A.B.C.F.G.H.
    ecf8:	0049 004a 004b 004c 004d 004e 004f 0061     I.J.K.L.M.N.O.a.
    ed08:	0062 0063 0064 0065 0066 0067 0068 0069     b.c.d.e.f.g.h.i.
    ed18:	006a 006b 006c 006d 006e 006f 0070 0071     j.k.l.m.n.o.p.q.
    ed28:	0080 0081 0082 0083 0084 0085 0086 0087     ................
    ed38:	0088 0089 008a 008b 008c 008d 008e 008f     ................
    ed48:	0090 0000                                   ....

0000ed4c <Port_UnUsedPin>:
    ed4c:	0100 0000 0001 0000 0000 0000               ............

0000ed58 <Port_aPinConfigDefault>:
    ed58:	0060 0000 0100 0000 0001 0000 0002 0000     `...............
    ed68:	0001 0001 0051 0000 0300 0000 0000 0000     ....Q...........
    ed78:	0001 0000 0000 0001 0050 0000 0300 0000     ........P.......
    ed88:	0000 0000 0001 0000 0000 0001               ............

0000ed94 <Port_Config>:
    ed94:	0003 0051 eca8 0000 ed4c 0000 ed58 0000     ..Q.....L...X...
	...
    edac:	ec9c 0000 ec98 0000 ec20 0000               ........ ...

0000edb8 <Power_Ip_RCM_ConfigPB>:
	...

0000edc0 <Power_Ip_PMC_ConfigPB>:
    edc0:	0000 0000                                   ....

0000edc4 <Power_Ip_SMC_ConfigPB>:
    edc4:	0000 0000                                   ....

0000edc8 <Power_Ip_aModeConfigPB>:
	...

0000edd4 <Power_Ip_HwIPsConfigPB>:
    edd4:	edb8 0000 edc0 0000 edc4 0000               ............

0000ede0 <__INIT_TABLE>:
    ede0:	00000002 	.word	0x00000002
    ede4:	1fff8b10 	.word	0x1fff8b10
    ede8:	0000ee08 	.word	0x0000ee08
    edec:	0000ee24 	.word	0x0000ee24
    edf0:	1fff8800 	.word	0x1fff8800
    edf4:	00000000 	.word	0x00000000
    edf8:	00000310 	.word	0x00000310

0000edfc <__ZERO_TABLE>:
    edfc:	00000001 	.word	0x00000001
    ee00:	1fff8b30 	.word	0x1fff8b30
    ee04:	1fff9190 	.word	0x1fff9190
