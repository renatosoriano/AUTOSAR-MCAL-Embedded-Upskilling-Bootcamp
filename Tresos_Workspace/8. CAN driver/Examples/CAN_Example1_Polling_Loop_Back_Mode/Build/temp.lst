
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000bcb 	.word	0x00000bcb
  10:	00000bcd 	.word	0x00000bcd
  14:	00000bcf 	.word	0x00000bcf
  18:	00000bd1 	.word	0x00000bd1
	...
  2c:	00000bd3 	.word	0x00000bd3
  30:	00000bd5 	.word	0x00000bd5
  34:	00000000 	.word	0x00000000
  38:	00000bd7 	.word	0x00000bd7
  3c:	00000bd9 	.word	0x00000bd9
  40:	00000bdb 	.word	0x00000bdb
  44:	00000bdb 	.word	0x00000bdb
  48:	00000bdb 	.word	0x00000bdb
  4c:	00000bdb 	.word	0x00000bdb
  50:	00000bdb 	.word	0x00000bdb
  54:	00000bdb 	.word	0x00000bdb
  58:	00000bdb 	.word	0x00000bdb
  5c:	00000bdb 	.word	0x00000bdb
  60:	00000bdb 	.word	0x00000bdb
  64:	00000bdb 	.word	0x00000bdb
  68:	00000bdb 	.word	0x00000bdb
  6c:	00000bdb 	.word	0x00000bdb
  70:	00000bdb 	.word	0x00000bdb
  74:	00000bdb 	.word	0x00000bdb
  78:	00000bdb 	.word	0x00000bdb
  7c:	00000bdb 	.word	0x00000bdb
  80:	00000bdb 	.word	0x00000bdb
  84:	00000bdb 	.word	0x00000bdb
  88:	00000bdb 	.word	0x00000bdb
  8c:	00000bdb 	.word	0x00000bdb
  90:	00000bdb 	.word	0x00000bdb
  94:	00000bdb 	.word	0x00000bdb
  98:	00000bdb 	.word	0x00000bdb
  9c:	00000bdb 	.word	0x00000bdb
  a0:	00000bdb 	.word	0x00000bdb
  a4:	00000bdb 	.word	0x00000bdb
  a8:	00000bdb 	.word	0x00000bdb
  ac:	00000bdb 	.word	0x00000bdb
  b0:	00000bdb 	.word	0x00000bdb
  b4:	00000bdb 	.word	0x00000bdb
  b8:	00000bdb 	.word	0x00000bdb
  bc:	00000bdb 	.word	0x00000bdb
  c0:	00000bdb 	.word	0x00000bdb
  c4:	00000bdb 	.word	0x00000bdb
  c8:	00000bdb 	.word	0x00000bdb
  cc:	00000bdb 	.word	0x00000bdb
  d0:	00000bdb 	.word	0x00000bdb
  d4:	00000bdb 	.word	0x00000bdb
  d8:	00000bdb 	.word	0x00000bdb
  dc:	00000bdb 	.word	0x00000bdb
  e0:	00000bdb 	.word	0x00000bdb
  e4:	00000bdb 	.word	0x00000bdb
  e8:	00000bdb 	.word	0x00000bdb
  ec:	00000bdb 	.word	0x00000bdb
  f0:	00000bdb 	.word	0x00000bdb
  f4:	00000bdb 	.word	0x00000bdb
  f8:	00000bdb 	.word	0x00000bdb
  fc:	00000bdb 	.word	0x00000bdb
 100:	00000bdb 	.word	0x00000bdb
 104:	00000bdb 	.word	0x00000bdb
 108:	00000bdb 	.word	0x00000bdb
 10c:	00000bdb 	.word	0x00000bdb
 110:	00000bdb 	.word	0x00000bdb
 114:	00000bdb 	.word	0x00000bdb
 118:	00000bdb 	.word	0x00000bdb
 11c:	00000bdb 	.word	0x00000bdb
 120:	00000bdb 	.word	0x00000bdb
 124:	00000bdb 	.word	0x00000bdb
 128:	00000bdb 	.word	0x00000bdb
 12c:	00000bdb 	.word	0x00000bdb
 130:	00000bdb 	.word	0x00000bdb
 134:	00000bdb 	.word	0x00000bdb
 138:	00000bdb 	.word	0x00000bdb
 13c:	00000bdb 	.word	0x00000bdb
 140:	00000bdb 	.word	0x00000bdb
 144:	00000bdb 	.word	0x00000bdb
 148:	00000bdb 	.word	0x00000bdb
 14c:	00000bdb 	.word	0x00000bdb
 150:	00000bdb 	.word	0x00000bdb
 154:	00000bdb 	.word	0x00000bdb
 158:	00000bdb 	.word	0x00000bdb
 15c:	00000bdb 	.word	0x00000bdb
 160:	00000bdb 	.word	0x00000bdb
 164:	00000bdb 	.word	0x00000bdb
 168:	00000bdb 	.word	0x00000bdb
 16c:	00000bdb 	.word	0x00000bdb
 170:	00000bdb 	.word	0x00000bdb
 174:	00000bdb 	.word	0x00000bdb
 178:	00000bdb 	.word	0x00000bdb
 17c:	00000bdb 	.word	0x00000bdb
 180:	00000bdb 	.word	0x00000bdb
 184:	00000bdb 	.word	0x00000bdb
 188:	00000bdb 	.word	0x00000bdb
 18c:	00000bdb 	.word	0x00000bdb
 190:	00000bdb 	.word	0x00000bdb
 194:	00000bdb 	.word	0x00000bdb
 198:	00000bdb 	.word	0x00000bdb
 19c:	00000bdb 	.word	0x00000bdb
 1a0:	00000bdb 	.word	0x00000bdb
 1a4:	00000bdb 	.word	0x00000bdb
 1a8:	00000bdb 	.word	0x00000bdb
 1ac:	00000bdb 	.word	0x00000bdb
 1b0:	00000bdb 	.word	0x00000bdb
 1b4:	00000bdb 	.word	0x00000bdb
 1b8:	00000bdb 	.word	0x00000bdb
 1bc:	00000bdb 	.word	0x00000bdb
 1c0:	00000bdb 	.word	0x00000bdb
 1c4:	00000bdb 	.word	0x00000bdb
 1c8:	00000bdb 	.word	0x00000bdb
 1cc:	00000bdb 	.word	0x00000bdb
 1d0:	00000bdb 	.word	0x00000bdb
 1d4:	00000bdb 	.word	0x00000bdb
 1d8:	00000bdb 	.word	0x00000bdb
 1dc:	00000bdb 	.word	0x00000bdb
 1e0:	00000bdb 	.word	0x00000bdb
 1e4:	00000bdb 	.word	0x00000bdb
 1e8:	00000bdb 	.word	0x00000bdb
 1ec:	00000bdb 	.word	0x00000bdb
 1f0:	00000bdb 	.word	0x00000bdb
 1f4:	00000bdb 	.word	0x00000bdb
 1f8:	00000bdb 	.word	0x00000bdb
 1fc:	00000bdb 	.word	0x00000bdb
 200:	00000bdb 	.word	0x00000bdb
 204:	00000bdb 	.word	0x00000bdb
 208:	00000bdb 	.word	0x00000bdb
 20c:	00000bdb 	.word	0x00000bdb
 210:	00000bdb 	.word	0x00000bdb
 214:	00000bdb 	.word	0x00000bdb
 218:	00000bdb 	.word	0x00000bdb
 21c:	00000bdb 	.word	0x00000bdb
 220:	00000bdb 	.word	0x00000bdb
 224:	00000bdb 	.word	0x00000bdb
 228:	00000bdb 	.word	0x00000bdb
 22c:	00000bdb 	.word	0x00000bdb
 230:	00000bdb 	.word	0x00000bdb
 234:	00000bdb 	.word	0x00000bdb
 238:	00000bdb 	.word	0x00000bdb
 23c:	00000bdb 	.word	0x00000bdb
 240:	00000bdb 	.word	0x00000bdb
 244:	00000bdb 	.word	0x00000bdb
 248:	00000bdb 	.word	0x00000bdb
 24c:	00000bdb 	.word	0x00000bdb
 250:	00000bdb 	.word	0x00000bdb
 254:	00000bdb 	.word	0x00000bdb
 258:	00000bdb 	.word	0x00000bdb
 25c:	00000bdb 	.word	0x00000bdb
 260:	00000bdb 	.word	0x00000bdb
 264:	00000bdb 	.word	0x00000bdb
 268:	00000bdb 	.word	0x00000bdb
 26c:	00000bdb 	.word	0x00000bdb
 270:	00000bdb 	.word	0x00000bdb
 274:	00000bdb 	.word	0x00000bdb
 278:	00000bdb 	.word	0x00000bdb
 27c:	00000bdb 	.word	0x00000bdb
 280:	00000bdb 	.word	0x00000bdb
 284:	00000bdb 	.word	0x00000bdb
 288:	00000bdb 	.word	0x00000bdb
 28c:	00000bdb 	.word	0x00000bdb
 290:	00000bdb 	.word	0x00000bdb
 294:	00000bdb 	.word	0x00000bdb
 298:	00000bdb 	.word	0x00000bdb
 29c:	00000bdb 	.word	0x00000bdb
 2a0:	00000bdb 	.word	0x00000bdb
 2a4:	00000bdb 	.word	0x00000bdb
 2a8:	00000bdb 	.word	0x00000bdb
 2ac:	00000bdb 	.word	0x00000bdb
 2b0:	00000bdb 	.word	0x00000bdb
 2b4:	00000bdb 	.word	0x00000bdb
 2b8:	00000bdb 	.word	0x00000bdb
 2bc:	00000bdb 	.word	0x00000bdb
 2c0:	00000bdb 	.word	0x00000bdb
 2c4:	00000bdb 	.word	0x00000bdb
 2c8:	00000bdb 	.word	0x00000bdb
 2cc:	00000bdb 	.word	0x00000bdb
 2d0:	00000bdb 	.word	0x00000bdb
 2d4:	00000bdb 	.word	0x00000bdb
 2d8:	00000bdb 	.word	0x00000bdb
 2dc:	00000bdb 	.word	0x00000bdb
 2e0:	00000bdb 	.word	0x00000bdb
 2e4:	00000bdb 	.word	0x00000bdb
 2e8:	00000bdb 	.word	0x00000bdb
 2ec:	00000bdb 	.word	0x00000bdb
 2f0:	00000bdb 	.word	0x00000bdb
 2f4:	00000bdb 	.word	0x00000bdb
 2f8:	00000bdb 	.word	0x00000bdb
 2fc:	00000bdb 	.word	0x00000bdb
 300:	00000bdb 	.word	0x00000bdb
 304:	00000bdb 	.word	0x00000bdb
 308:	00000bdb 	.word	0x00000bdb
 30c:	00000bdb 	.word	0x00000bdb

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fad9 	bl	a38 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fb98 	bl	bc0 <startup_go_to_user_mode>
     490:	f000 fa5c 	bl	94c <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff9060 	.word	0x1fff9060

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fae3 	bl	b64 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void EcuM_Init( void );

/*this is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f000 f9f3 	bl	cae <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f000 f9a3 	bl	c16 <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do{
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f000 f9b3 	bl	c48 <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }
    while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <CanIf_ControllerBusOff>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerBusOff(uint8 ControllerId)
{
     8fc:	b082      	sub	sp, #8
     8fe:	4603      	mov	r3, r0
     900:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
     904:	bf00      	nop
     906:	b002      	add	sp, #8
     908:	4770      	bx	lr

0000090a <CanIf_ControllerModeIndication>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerModeIndication(uint8 ControllerId, Can_ControllerStateType ControllerMode )
{
     90a:	b082      	sub	sp, #8
     90c:	4603      	mov	r3, r0
     90e:	9100      	str	r1, [sp, #0]
     910:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)ControllerMode;
}
     914:	bf00      	nop
     916:	b002      	add	sp, #8
     918:	4770      	bx	lr
	...

0000091c <CanIf_TxConfirmation>:

/*CanIf callback function implementation to set the flag when a message is transmited
this function is called by the Can_43_FLEXCAN_MainFunction_Write function.
In reality this function is already implemented in CanIf layer*/
void CanIf_TxConfirmation( PduIdType CanTxPduId )
{
     91c:	b082      	sub	sp, #8
     91e:	4603      	mov	r3, r0
     920:	f8ad 3006 	strh.w	r3, [sp, #6]
    CanIf_bTxFlag = TRUE;
     924:	4b02      	ldr	r3, [pc, #8]	; (930 <CanIf_TxConfirmation+0x14>)
     926:	2201      	movs	r2, #1
     928:	701a      	strb	r2, [r3, #0]
    (void)CanTxPduId;
}
     92a:	bf00      	nop
     92c:	b002      	add	sp, #8
     92e:	4770      	bx	lr
     930:	1fff8b30 	.word	0x1fff8b30

00000934 <CanIf_RxIndication>:

/*CanIf callback function implementation to set the flag when a message is received
this function is called by the Can_43_FLEXCAN_MainFunction_Read function.
In reality this function is already implemented in CanIf layer*/
void CanIf_RxIndication(const Can_HwType* Mailbox, const PduInfoType* PduInfoPtr )
{
     934:	b082      	sub	sp, #8
     936:	9001      	str	r0, [sp, #4]
     938:	9100      	str	r1, [sp, #0]
    CanIf_bRxFlag = TRUE;
     93a:	4b03      	ldr	r3, [pc, #12]	; (948 <CanIf_RxIndication+0x14>)
     93c:	2201      	movs	r2, #1
     93e:	701a      	strb	r2, [r3, #0]
    (void)Mailbox;
    /*the received message is store in PduInfoPtr->SduDataPtr*/
    (void)PduInfoPtr;
}
     940:	bf00      	nop
     942:	b002      	add	sp, #8
     944:	4770      	bx	lr
     946:	bf00      	nop
     948:	1fff8b31 	.word	0x1fff8b31

0000094c <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     94c:	b500      	push	{lr}
     94e:	b085      	sub	sp, #20
    EcuM_Init();
     950:	f000 f84a 	bl	9e8 <EcuM_Init>

    Can_PduType PduInfo;

    /*Start the CAN controller and make it active in the CAN bus network*/
    Can_43_FLEXCAN_SetControllerMode( CanController_0, CAN_CS_STARTED );
     954:	2101      	movs	r1, #1
     956:	2000      	movs	r0, #0
     958:	f004 fc48 	bl	51ec <Can_43_FLEXCAN_SetControllerMode>

    /*Fill the structure with the information to be transmitted*/
    PduInfo.id = 0u;
     95c:	2300      	movs	r3, #0
     95e:	9301      	str	r3, [sp, #4]
    PduInfo.swPduHandle = 0u;
     960:	2300      	movs	r3, #0
     962:	f8ad 3008 	strh.w	r3, [sp, #8]
    PduInfo.length = 8u;
     966:	2308      	movs	r3, #8
     968:	f88d 300a 	strb.w	r3, [sp, #10]
    PduInfo.sdu = Can_au8Sdu8bytes;
     96c:	4b1b      	ldr	r3, [pc, #108]	; (9dc <main+0x90>)
     96e:	9303      	str	r3, [sp, #12]

    while( 1u )
    {
        /*set the FlexCAN peripheral to transmit the message, the message will be
        transmitted by the Can_43_FLEXCAN_MainFunction_Write*/
        Can_43_FLEXCAN_Write( CanHardwareObject_1, &PduInfo );
     970:	ab01      	add	r3, sp, #4
     972:	4619      	mov	r1, r3
     974:	2001      	movs	r0, #1
     976:	f004 fdfb 	bl	5570 <Can_43_FLEXCAN_Write>

        /*Transmit a single 8 byte message and wait until the message is transmited
        This is not the most suitable way, but good enough for ilustration
        purposes, flag is updated by the callback function CanIf_TxConfirmation*/
        while( CanIf_bTxFlag == FALSE )
     97a:	e004      	b.n	986 <main+0x3a>
        {
            /*In polling mode we need to call this function with the periodicity
            we set on CanMainFunctionRWPeriods->CanMainFunctionPeriod*/
            Can_43_FLEXCAN_MainFunction_Write();
     97c:	f004 fe52 	bl	5624 <Can_43_FLEXCAN_MainFunction_Write>
            Delay( 1u );
     980:	2001      	movs	r0, #1
     982:	f7ff ff95 	bl	8b0 <Delay>
        while( CanIf_bTxFlag == FALSE )
     986:	4b16      	ldr	r3, [pc, #88]	; (9e0 <main+0x94>)
     988:	781b      	ldrb	r3, [r3, #0]
     98a:	f083 0301 	eor.w	r3, r3, #1
     98e:	b2db      	uxtb	r3, r3
     990:	2b00      	cmp	r3, #0
     992:	d1f3      	bne.n	97c <main+0x30>
        }
        /*Clear the Tx flag*/
        CanIf_bTxFlag = FALSE;
     994:	4b12      	ldr	r3, [pc, #72]	; (9e0 <main+0x94>)
     996:	2200      	movs	r2, #0
     998:	701a      	strb	r2, [r3, #0]

        /*wait here until the previous transmited message is received
        This is not the most suitable way, but good enough for ilustration
        purposes, flag is updated by the callback function CanIf_RxIndication*/
        while( CanIf_bRxFlag == FALSE )
     99a:	e004      	b.n	9a6 <main+0x5a>
        {
            /*In polling mode we need to call this function with the periodicity
            we set on CanMainFunctionRWPeriods->CanMainFunctionPeriod*/
            Can_43_FLEXCAN_MainFunction_Read();
     99c:	f004 feaa 	bl	56f4 <Can_43_FLEXCAN_MainFunction_Read>
            Delay( 1u );
     9a0:	2001      	movs	r0, #1
     9a2:	f7ff ff85 	bl	8b0 <Delay>
        while( CanIf_bRxFlag == FALSE )
     9a6:	4b0f      	ldr	r3, [pc, #60]	; (9e4 <main+0x98>)
     9a8:	781b      	ldrb	r3, [r3, #0]
     9aa:	f083 0301 	eor.w	r3, r3, #1
     9ae:	b2db      	uxtb	r3, r3
     9b0:	2b00      	cmp	r3, #0
     9b2:	d1f3      	bne.n	99c <main+0x50>
        }
        /*Clear the Tx flag*/
        CanIf_bRxFlag = FALSE;
     9b4:	4b0b      	ldr	r3, [pc, #44]	; (9e4 <main+0x98>)
     9b6:	2200      	movs	r2, #0
     9b8:	701a      	strb	r2, [r3, #0]

        /*increase some values just for ilustration purposes*/
        Can_au8Sdu8bytes[0]++;
     9ba:	4b08      	ldr	r3, [pc, #32]	; (9dc <main+0x90>)
     9bc:	781b      	ldrb	r3, [r3, #0]
     9be:	3301      	adds	r3, #1
     9c0:	b2da      	uxtb	r2, r3
     9c2:	4b06      	ldr	r3, [pc, #24]	; (9dc <main+0x90>)
     9c4:	701a      	strb	r2, [r3, #0]
        Can_au8Sdu8bytes[7]++;
     9c6:	4b05      	ldr	r3, [pc, #20]	; (9dc <main+0x90>)
     9c8:	79db      	ldrb	r3, [r3, #7]
     9ca:	3301      	adds	r3, #1
     9cc:	b2da      	uxtb	r2, r3
     9ce:	4b03      	ldr	r3, [pc, #12]	; (9dc <main+0x90>)
     9d0:	71da      	strb	r2, [r3, #7]
        
        Delay( 5000u );
     9d2:	f241 3088 	movw	r0, #5000	; 0x1388
     9d6:	f7ff ff6b 	bl	8b0 <Delay>
        Can_43_FLEXCAN_Write( CanHardwareObject_1, &PduInfo );
     9da:	e7c9      	b.n	970 <main+0x24>
     9dc:	1fff8b10 	.word	0x1fff8b10
     9e0:	1fff8b30 	.word	0x1fff8b30
     9e4:	1fff8b31 	.word	0x1fff8b31

000009e8 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     9e8:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     9ea:	4808      	ldr	r0, [pc, #32]	; (a0c <EcuM_Init+0x24>)
     9ec:	f003 fea0 	bl	4730 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     9f0:	2000      	movs	r0, #0
     9f2:	f003 fef1 	bl	47d8 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     9f6:	2000      	movs	r0, #0
     9f8:	f003 ff12 	bl	4820 <Mcu_SetMode>
    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     9fc:	2000      	movs	r0, #0
     9fe:	f000 f901 	bl	c04 <OsIf_Init>

    /*init the FlexCAN0 with the paramters set in Tresos in loop back mode*/
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );
     a02:	4803      	ldr	r0, [pc, #12]	; (a10 <EcuM_Init+0x28>)
     a04:	f004 fb84 	bl	5110 <Can_43_FLEXCAN_Init>
}
     a08:	bf00      	nop
     a0a:	bd08      	pop	{r3, pc}
     a0c:	0000c7b4 	.word	0x0000c7b4
     a10:	0000c354 	.word	0x0000c354

00000a14 <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     a14:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a16:	f3ef 8310 	mrs	r3, PRIMASK
     a1a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a1c:	4623      	mov	r3, r4
}
     a1e:	4618      	mov	r0, r3
     a20:	f85d 4b04 	ldr.w	r4, [sp], #4
     a24:	4770      	bx	lr

00000a26 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     a26:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a28:	f3ef 8310 	mrs	r3, PRIMASK
     a2c:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a2e:	4623      	mov	r3, r4
}
     a30:	4618      	mov	r0, r3
     a32:	f85d 4b04 	ldr.w	r4, [sp], #4
     a36:	4770      	bx	lr

00000a38 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     a38:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     a3a:	2300      	movs	r3, #0
     a3c:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     a3e:	2300      	movs	r3, #0
     a40:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     a42:	2300      	movs	r3, #0
     a44:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     a46:	2300      	movs	r3, #0
     a48:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     a4a:	4b44      	ldr	r3, [pc, #272]	; (b5c <init_data_bss+0x124>)
     a4c:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     a4e:	4b44      	ldr	r3, [pc, #272]	; (b60 <init_data_bss+0x128>)
     a50:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     a52:	9b05      	ldr	r3, [sp, #20]
     a54:	681b      	ldr	r3, [r3, #0]
     a56:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     a58:	9b05      	ldr	r3, [sp, #20]
     a5a:	3304      	adds	r3, #4
     a5c:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     a5e:	9b05      	ldr	r3, [sp, #20]
     a60:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     a62:	2300      	movs	r3, #0
     a64:	9309      	str	r3, [sp, #36]	; 0x24
     a66:	e03d      	b.n	ae4 <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
     a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a6a:	4613      	mov	r3, r2
     a6c:	005b      	lsls	r3, r3, #1
     a6e:	4413      	add	r3, r2
     a70:	009b      	lsls	r3, r3, #2
     a72:	461a      	mov	r2, r3
     a74:	9b03      	ldr	r3, [sp, #12]
     a76:	4413      	add	r3, r2
     a78:	685b      	ldr	r3, [r3, #4]
     a7a:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a7e:	4613      	mov	r3, r2
     a80:	005b      	lsls	r3, r3, #1
     a82:	4413      	add	r3, r2
     a84:	009b      	lsls	r3, r3, #2
     a86:	461a      	mov	r2, r3
     a88:	9b03      	ldr	r3, [sp, #12]
     a8a:	4413      	add	r3, r2
     a8c:	681b      	ldr	r3, [r3, #0]
     a8e:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
     a92:	4613      	mov	r3, r2
     a94:	005b      	lsls	r3, r3, #1
     a96:	4413      	add	r3, r2
     a98:	009b      	lsls	r3, r3, #2
     a9a:	461a      	mov	r2, r3
     a9c:	9b03      	ldr	r3, [sp, #12]
     a9e:	4413      	add	r3, r2
     aa0:	689b      	ldr	r3, [r3, #8]
     aa2:	4619      	mov	r1, r3
     aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     aa6:	4613      	mov	r3, r2
     aa8:	005b      	lsls	r3, r3, #1
     aaa:	4413      	add	r3, r2
     aac:	009b      	lsls	r3, r3, #2
     aae:	461a      	mov	r2, r3
     ab0:	9b03      	ldr	r3, [sp, #12]
     ab2:	4413      	add	r3, r2
     ab4:	685b      	ldr	r3, [r3, #4]
     ab6:	1acb      	subs	r3, r1, r3
     ab8:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     aba:	2300      	movs	r3, #0
     abc:	9308      	str	r3, [sp, #32]
     abe:	e00a      	b.n	ad6 <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
     ac0:	9a00      	ldr	r2, [sp, #0]
     ac2:	9b08      	ldr	r3, [sp, #32]
     ac4:	441a      	add	r2, r3
     ac6:	9901      	ldr	r1, [sp, #4]
     ac8:	9b08      	ldr	r3, [sp, #32]
     aca:	440b      	add	r3, r1
     acc:	7812      	ldrb	r2, [r2, #0]
     ace:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     ad0:	9b08      	ldr	r3, [sp, #32]
     ad2:	3301      	adds	r3, #1
     ad4:	9308      	str	r3, [sp, #32]
     ad6:	9a08      	ldr	r2, [sp, #32]
     ad8:	9b06      	ldr	r3, [sp, #24]
     ada:	429a      	cmp	r2, r3
     adc:	d3f0      	bcc.n	ac0 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
     ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ae0:	3301      	adds	r3, #1
     ae2:	9309      	str	r3, [sp, #36]	; 0x24
     ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     ae6:	9b07      	ldr	r3, [sp, #28]
     ae8:	429a      	cmp	r2, r3
     aea:	d3bd      	bcc.n	a68 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     aec:	9b04      	ldr	r3, [sp, #16]
     aee:	681b      	ldr	r3, [r3, #0]
     af0:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     af2:	9b04      	ldr	r3, [sp, #16]
     af4:	3304      	adds	r3, #4
     af6:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     af8:	9b04      	ldr	r3, [sp, #16]
     afa:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     afc:	2300      	movs	r3, #0
     afe:	9309      	str	r3, [sp, #36]	; 0x24
     b00:	e024      	b.n	b4c <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
     b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b04:	00db      	lsls	r3, r3, #3
     b06:	9a02      	ldr	r2, [sp, #8]
     b08:	4413      	add	r3, r2
     b0a:	681b      	ldr	r3, [r3, #0]
     b0c:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b10:	00db      	lsls	r3, r3, #3
     b12:	9a02      	ldr	r2, [sp, #8]
     b14:	4413      	add	r3, r2
     b16:	685b      	ldr	r3, [r3, #4]
     b18:	4619      	mov	r1, r3
     b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b1c:	00db      	lsls	r3, r3, #3
     b1e:	9a02      	ldr	r2, [sp, #8]
     b20:	4413      	add	r3, r2
     b22:	681b      	ldr	r3, [r3, #0]
     b24:	1acb      	subs	r3, r1, r3
     b26:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b28:	2300      	movs	r3, #0
     b2a:	9308      	str	r3, [sp, #32]
     b2c:	e007      	b.n	b3e <init_data_bss+0x106>
        {
            ram[j] = 0U;
     b2e:	9a01      	ldr	r2, [sp, #4]
     b30:	9b08      	ldr	r3, [sp, #32]
     b32:	4413      	add	r3, r2
     b34:	2200      	movs	r2, #0
     b36:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b38:	9b08      	ldr	r3, [sp, #32]
     b3a:	3301      	adds	r3, #1
     b3c:	9308      	str	r3, [sp, #32]
     b3e:	9a08      	ldr	r2, [sp, #32]
     b40:	9b06      	ldr	r3, [sp, #24]
     b42:	429a      	cmp	r2, r3
     b44:	d3f3      	bcc.n	b2e <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
     b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b48:	3301      	adds	r3, #1
     b4a:	9309      	str	r3, [sp, #36]	; 0x24
     b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b4e:	9b07      	ldr	r3, [sp, #28]
     b50:	429a      	cmp	r2, r3
     b52:	d3d6      	bcc.n	b02 <init_data_bss+0xca>
        }
    }
}
     b54:	bf00      	nop
     b56:	bf00      	nop
     b58:	b00a      	add	sp, #40	; 0x28
     b5a:	4770      	bx	lr
     b5c:	0000c804 	.word	0x0000c804
     b60:	0000c820 	.word	0x0000c820

00000b64 <sys_m4_cache_init>:
{
     b64:	b084      	sub	sp, #16
     b66:	4603      	mov	r3, r0
     b68:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     b6c:	2300      	movs	r3, #0
     b6e:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     b72:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b76:	2b00      	cmp	r3, #0
     b78:	d118      	bne.n	bac <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     b7a:	4b10      	ldr	r3, [pc, #64]	; (bbc <sys_m4_cache_init+0x58>)
     b7c:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     b80:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     b82:	4b0e      	ldr	r3, [pc, #56]	; (bbc <sys_m4_cache_init+0x58>)
     b84:	681b      	ldr	r3, [r3, #0]
     b86:	4a0d      	ldr	r2, [pc, #52]	; (bbc <sys_m4_cache_init+0x58>)
     b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b8c:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     b8e:	bf00      	nop
     b90:	4b0a      	ldr	r3, [pc, #40]	; (bbc <sys_m4_cache_init+0x58>)
     b92:	681b      	ldr	r3, [r3, #0]
     b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b9c:	d0f8      	beq.n	b90 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     b9e:	4b07      	ldr	r3, [pc, #28]	; (bbc <sys_m4_cache_init+0x58>)
     ba0:	681b      	ldr	r3, [r3, #0]
     ba2:	4a06      	ldr	r2, [pc, #24]	; (bbc <sys_m4_cache_init+0x58>)
     ba4:	f043 0301 	orr.w	r3, r3, #1
     ba8:	6013      	str	r3, [r2, #0]
     baa:	e002      	b.n	bb2 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     bac:	2301      	movs	r3, #1
     bae:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     bb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     bb6:	4618      	mov	r0, r3
     bb8:	b004      	add	sp, #16
     bba:	4770      	bx	lr
     bbc:	e0082000 	.word	0xe0082000

00000bc0 <startup_go_to_user_mode>:
}
     bc0:	bf00      	nop
     bc2:	4770      	bx	lr

00000bc4 <Sys_GetCoreID>:
    return 0U;
     bc4:	2300      	movs	r3, #0
}
     bc6:	4618      	mov	r0, r3
     bc8:	4770      	bx	lr

00000bca <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     bca:	e7fe      	b.n	bca <HardFault_Handler>

00000bcc <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     bcc:	e7fe      	b.n	bcc <MemManage_Handler>

00000bce <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     bce:	e7fe      	b.n	bce <BusFault_Handler>

00000bd0 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     bd0:	e7fe      	b.n	bd0 <UsageFault_Handler>

00000bd2 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     bd2:	e7fe      	b.n	bd2 <SVC_Handler>

00000bd4 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     bd4:	e7fe      	b.n	bd4 <DebugMon_Handler>

00000bd6 <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     bd6:	e7fe      	b.n	bd6 <PendSV_Handler>

00000bd8 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     bd8:	e7fe      	b.n	bd8 <SysTick_Handler>

00000bda <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     bda:	e7fe      	b.n	bda <undefined_handler>

00000bdc <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
     bdc:	2300      	movs	r3, #0
}
     bde:	4618      	mov	r0, r3
     be0:	4770      	bx	lr

00000be2 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
     be2:	b082      	sub	sp, #8
     be4:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
     be6:	2301      	movs	r3, #1
}
     be8:	4618      	mov	r0, r3
     bea:	b002      	add	sp, #8
     bec:	4770      	bx	lr

00000bee <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
     bee:	b082      	sub	sp, #8
     bf0:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
     bf2:	bf00      	nop
     bf4:	b002      	add	sp, #8
     bf6:	4770      	bx	lr

00000bf8 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
     bf8:	b082      	sub	sp, #8
     bfa:	9001      	str	r0, [sp, #4]
    return Micros;
     bfc:	9b01      	ldr	r3, [sp, #4]
}
     bfe:	4618      	mov	r0, r3
     c00:	b002      	add	sp, #8
     c02:	4770      	bx	lr

00000c04 <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
     c04:	b500      	push	{lr}
     c06:	b083      	sub	sp, #12
     c08:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
     c0a:	f000 f86d 	bl	ce8 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
     c0e:	bf00      	nop
     c10:	b003      	add	sp, #12
     c12:	f85d fb04 	ldr.w	pc, [sp], #4

00000c16 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
     c16:	b500      	push	{lr}
     c18:	b085      	sub	sp, #20
     c1a:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
     c1c:	2300      	movs	r3, #0
     c1e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     c20:	9b01      	ldr	r3, [sp, #4]
     c22:	2b00      	cmp	r3, #0
     c24:	d003      	beq.n	c2e <OsIf_GetCounter+0x18>
     c26:	9b01      	ldr	r3, [sp, #4]
     c28:	2b01      	cmp	r3, #1
     c2a:	d004      	beq.n	c36 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     c2c:	e007      	b.n	c3e <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
     c2e:	f7ff ffd5 	bl	bdc <OsIf_Timer_Dummy_GetCounter>
     c32:	9003      	str	r0, [sp, #12]
            break;
     c34:	e003      	b.n	c3e <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
     c36:	f000 f873 	bl	d20 <OsIf_Timer_System_GetCounter>
     c3a:	9003      	str	r0, [sp, #12]
            break;
     c3c:	bf00      	nop
    }

    return Value;
     c3e:	9b03      	ldr	r3, [sp, #12]
}
     c40:	4618      	mov	r0, r3
     c42:	b005      	add	sp, #20
     c44:	f85d fb04 	ldr.w	pc, [sp], #4

00000c48 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
     c48:	b500      	push	{lr}
     c4a:	b085      	sub	sp, #20
     c4c:	9001      	str	r0, [sp, #4]
     c4e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
     c50:	2300      	movs	r3, #0
     c52:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     c54:	9b00      	ldr	r3, [sp, #0]
     c56:	2b00      	cmp	r3, #0
     c58:	d003      	beq.n	c62 <OsIf_GetElapsed+0x1a>
     c5a:	9b00      	ldr	r3, [sp, #0]
     c5c:	2b01      	cmp	r3, #1
     c5e:	d005      	beq.n	c6c <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     c60:	e009      	b.n	c76 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
     c62:	9801      	ldr	r0, [sp, #4]
     c64:	f7ff ffbd 	bl	be2 <OsIf_Timer_Dummy_GetElapsed>
     c68:	9003      	str	r0, [sp, #12]
            break;
     c6a:	e004      	b.n	c76 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
     c6c:	9801      	ldr	r0, [sp, #4]
     c6e:	f000 f865 	bl	d3c <OsIf_Timer_System_GetElapsed>
     c72:	9003      	str	r0, [sp, #12]
            break;
     c74:	bf00      	nop
    }

    return Value;
     c76:	9b03      	ldr	r3, [sp, #12]
}
     c78:	4618      	mov	r0, r3
     c7a:	b005      	add	sp, #20
     c7c:	f85d fb04 	ldr.w	pc, [sp], #4

00000c80 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
     c80:	b500      	push	{lr}
     c82:	b083      	sub	sp, #12
     c84:	9001      	str	r0, [sp, #4]
     c86:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
     c88:	9b00      	ldr	r3, [sp, #0]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d003      	beq.n	c96 <OsIf_SetTimerFrequency+0x16>
     c8e:	9b00      	ldr	r3, [sp, #0]
     c90:	2b01      	cmp	r3, #1
     c92:	d004      	beq.n	c9e <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     c94:	e007      	b.n	ca6 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
     c96:	9801      	ldr	r0, [sp, #4]
     c98:	f7ff ffa9 	bl	bee <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
     c9c:	e003      	b.n	ca6 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
     c9e:	9801      	ldr	r0, [sp, #4]
     ca0:	f000 f85c 	bl	d5c <OsIf_Timer_System_SetTimerFrequency>
            break;
     ca4:	bf00      	nop
    }
}
     ca6:	bf00      	nop
     ca8:	b003      	add	sp, #12
     caa:	f85d fb04 	ldr.w	pc, [sp], #4

00000cae <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
     cae:	b500      	push	{lr}
     cb0:	b085      	sub	sp, #20
     cb2:	9001      	str	r0, [sp, #4]
     cb4:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
     cb6:	2300      	movs	r3, #0
     cb8:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
     cba:	9b00      	ldr	r3, [sp, #0]
     cbc:	2b00      	cmp	r3, #0
     cbe:	d003      	beq.n	cc8 <OsIf_MicrosToTicks+0x1a>
     cc0:	9b00      	ldr	r3, [sp, #0]
     cc2:	2b01      	cmp	r3, #1
     cc4:	d005      	beq.n	cd2 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
     cc6:	e009      	b.n	cdc <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
     cc8:	9801      	ldr	r0, [sp, #4]
     cca:	f7ff ff95 	bl	bf8 <OsIf_Timer_Dummy_MicrosToTicks>
     cce:	9003      	str	r0, [sp, #12]
            break;
     cd0:	e004      	b.n	cdc <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
     cd2:	9801      	ldr	r0, [sp, #4]
     cd4:	f000 f850 	bl	d78 <OsIf_Timer_System_MicrosToTicks>
     cd8:	9003      	str	r0, [sp, #12]
            break;
     cda:	bf00      	nop
    }

    return Value;
     cdc:	9b03      	ldr	r3, [sp, #12]
}
     cde:	4618      	mov	r0, r3
     ce0:	b005      	add	sp, #20
     ce2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00000ce8 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
     ce8:	b500      	push	{lr}
     cea:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
     cec:	2300      	movs	r3, #0
     cee:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
     cf0:	4a09      	ldr	r2, [pc, #36]	; (d18 <OsIf_Timer_System_Init+0x30>)
     cf2:	9b01      	ldr	r3, [sp, #4]
     cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     cf8:	685a      	ldr	r2, [r3, #4]
     cfa:	4908      	ldr	r1, [pc, #32]	; (d1c <OsIf_Timer_System_Init+0x34>)
     cfc:	9b01      	ldr	r3, [sp, #4]
     cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
     d02:	4a06      	ldr	r2, [pc, #24]	; (d1c <OsIf_Timer_System_Init+0x34>)
     d04:	9b01      	ldr	r3, [sp, #4]
     d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     d0a:	4618      	mov	r0, r3
     d0c:	f000 f868 	bl	de0 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
     d10:	bf00      	nop
     d12:	b003      	add	sp, #12
     d14:	f85d fb04 	ldr.w	pc, [sp], #4
     d18:	0000c7d8 	.word	0x0000c7d8
     d1c:	1fff8b34 	.word	0x1fff8b34

00000d20 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
     d20:	b500      	push	{lr}
     d22:	b083      	sub	sp, #12
    uint32 Counter = 0U;
     d24:	2300      	movs	r3, #0
     d26:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
     d28:	2300      	movs	r3, #0
     d2a:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
     d2c:	f000 f86c 	bl	e08 <OsIf_Timer_System_Internal_GetCounter>
     d30:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
     d32:	9b01      	ldr	r3, [sp, #4]
}
     d34:	4618      	mov	r0, r3
     d36:	b003      	add	sp, #12
     d38:	f85d fb04 	ldr.w	pc, [sp], #4

00000d3c <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
     d3c:	b500      	push	{lr}
     d3e:	b085      	sub	sp, #20
     d40:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
     d42:	2300      	movs	r3, #0
     d44:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
     d46:	2300      	movs	r3, #0
     d48:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
     d4a:	9801      	ldr	r0, [sp, #4]
     d4c:	f000 f864 	bl	e18 <OsIf_Timer_System_Internal_GetElapsed>
     d50:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
     d52:	9b03      	ldr	r3, [sp, #12]
}
     d54:	4618      	mov	r0, r3
     d56:	b005      	add	sp, #20
     d58:	f85d fb04 	ldr.w	pc, [sp], #4

00000d5c <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
     d5c:	b084      	sub	sp, #16
     d5e:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
     d60:	2300      	movs	r3, #0
     d62:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
     d64:	4903      	ldr	r1, [pc, #12]	; (d74 <OsIf_Timer_System_SetTimerFrequency+0x18>)
     d66:	9b03      	ldr	r3, [sp, #12]
     d68:	9a01      	ldr	r2, [sp, #4]
     d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
     d6e:	bf00      	nop
     d70:	b004      	add	sp, #16
     d72:	4770      	bx	lr
     d74:	1fff8b34 	.word	0x1fff8b34

00000d78 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
     d78:	b5f0      	push	{r4, r5, r6, r7, lr}
     d7a:	b087      	sub	sp, #28
     d7c:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
     d7e:	2100      	movs	r1, #0
     d80:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
     d82:	2100      	movs	r1, #0
     d84:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
     d86:	9901      	ldr	r1, [sp, #4]
     d88:	2000      	movs	r0, #0
     d8a:	460e      	mov	r6, r1
     d8c:	4607      	mov	r7, r0
     d8e:	4812      	ldr	r0, [pc, #72]	; (dd8 <OsIf_Timer_System_MicrosToTicks+0x60>)
     d90:	9904      	ldr	r1, [sp, #16]
     d92:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
     d96:	2000      	movs	r0, #0
     d98:	460c      	mov	r4, r1
     d9a:	4605      	mov	r5, r0
     d9c:	fb04 f007 	mul.w	r0, r4, r7
     da0:	fb06 f105 	mul.w	r1, r6, r5
     da4:	4401      	add	r1, r0
     da6:	fba6 2304 	umull	r2, r3, r6, r4
     daa:	4419      	add	r1, r3
     dac:	460b      	mov	r3, r1
     dae:	e9cd 2302 	strd	r2, r3, [sp, #8]
     db2:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
     db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     dba:	4a08      	ldr	r2, [pc, #32]	; (ddc <OsIf_Timer_System_MicrosToTicks+0x64>)
     dbc:	f04f 0300 	mov.w	r3, #0
     dc0:	f7ff fbf0 	bl	5a4 <__aeabi_uldivmod>
     dc4:	4602      	mov	r2, r0
     dc6:	460b      	mov	r3, r1
     dc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
     dcc:	9b02      	ldr	r3, [sp, #8]
     dce:	9305      	str	r3, [sp, #20]
    }

    return ticks;
     dd0:	9b05      	ldr	r3, [sp, #20]
}
     dd2:	4618      	mov	r0, r3
     dd4:	b007      	add	sp, #28
     dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dd8:	1fff8b34 	.word	0x1fff8b34
     ddc:	000f4240 	.word	0x000f4240

00000de0 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
     de0:	b082      	sub	sp, #8
     de2:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
     de4:	4b07      	ldr	r3, [pc, #28]	; (e04 <OsIf_Timer_System_Internal_Init+0x24>)
     de6:	2200      	movs	r2, #0
     de8:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
     dea:	4b06      	ldr	r3, [pc, #24]	; (e04 <OsIf_Timer_System_Internal_Init+0x24>)
     dec:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
     df0:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
     df2:	4b04      	ldr	r3, [pc, #16]	; (e04 <OsIf_Timer_System_Internal_Init+0x24>)
     df4:	2200      	movs	r2, #0
     df6:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
     df8:	4b02      	ldr	r3, [pc, #8]	; (e04 <OsIf_Timer_System_Internal_Init+0x24>)
     dfa:	2205      	movs	r2, #5
     dfc:	601a      	str	r2, [r3, #0]
}
     dfe:	bf00      	nop
     e00:	b002      	add	sp, #8
     e02:	4770      	bx	lr
     e04:	e000e010 	.word	0xe000e010

00000e08 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
     e08:	4b02      	ldr	r3, [pc, #8]	; (e14 <OsIf_Timer_System_Internal_GetCounter+0xc>)
     e0a:	689b      	ldr	r3, [r3, #8]
     e0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
     e10:	4618      	mov	r0, r3
     e12:	4770      	bx	lr
     e14:	e000e010 	.word	0xe000e010

00000e18 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
     e18:	b084      	sub	sp, #16
     e1a:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
     e1c:	4b10      	ldr	r3, [pc, #64]	; (e60 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
     e1e:	689b      	ldr	r3, [r3, #8]
     e20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     e24:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
     e26:	2300      	movs	r3, #0
     e28:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
     e2a:	9b01      	ldr	r3, [sp, #4]
     e2c:	681b      	ldr	r3, [r3, #0]
     e2e:	9a02      	ldr	r2, [sp, #8]
     e30:	429a      	cmp	r2, r3
     e32:	d909      	bls.n	e48 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
     e34:	9b01      	ldr	r3, [sp, #4]
     e36:	681a      	ldr	r2, [r3, #0]
     e38:	9b02      	ldr	r3, [sp, #8]
     e3a:	1ad3      	subs	r3, r2, r3
     e3c:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
     e40:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
     e44:	9303      	str	r3, [sp, #12]
     e46:	e004      	b.n	e52 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
     e48:	9b01      	ldr	r3, [sp, #4]
     e4a:	681a      	ldr	r2, [r3, #0]
     e4c:	9b02      	ldr	r3, [sp, #8]
     e4e:	1ad3      	subs	r3, r2, r3
     e50:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
     e52:	9b01      	ldr	r3, [sp, #4]
     e54:	9a02      	ldr	r2, [sp, #8]
     e56:	601a      	str	r2, [r3, #0]

    return dif;
     e58:	9b03      	ldr	r3, [sp, #12]
}
     e5a:	4618      	mov	r0, r3
     e5c:	b004      	add	sp, #16
     e5e:	4770      	bx	lr
     e60:	e000e010 	.word	0xe000e010

00000e64 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
     e64:	b082      	sub	sp, #8
     e66:	9001      	str	r0, [sp, #4]
     e68:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
     e6a:	bf00      	nop
     e6c:	b002      	add	sp, #8
     e6e:	4770      	bx	lr

00000e70 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
     e70:	b500      	push	{lr}
     e72:	b085      	sub	sp, #20
     e74:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
     e76:	4b24      	ldr	r3, [pc, #144]	; (f08 <Clock_Ip_UpdateDriverContext+0x98>)
     e78:	2201      	movs	r2, #1
     e7a:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
     e7c:	4b23      	ldr	r3, [pc, #140]	; (f0c <Clock_Ip_UpdateDriverContext+0x9c>)
     e7e:	681b      	ldr	r3, [r3, #0]
     e80:	2102      	movs	r1, #2
     e82:	4618      	mov	r0, r3
     e84:	f003 fc32 	bl	46ec <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
     e88:	2300      	movs	r3, #0
     e8a:	f88d 300f 	strb.w	r3, [sp, #15]
     e8e:	e015      	b.n	ebc <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
     e90:	f89d 300f 	ldrb.w	r3, [sp, #15]
     e94:	9a01      	ldr	r2, [sp, #4]
     e96:	334a      	adds	r3, #74	; 0x4a
     e98:	00db      	lsls	r3, r3, #3
     e9a:	4413      	add	r3, r2
     e9c:	6858      	ldr	r0, [r3, #4]
     e9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
     ea2:	9a01      	ldr	r2, [sp, #4]
     ea4:	334a      	adds	r3, #74	; 0x4a
     ea6:	00db      	lsls	r3, r3, #3
     ea8:	4413      	add	r3, r2
     eaa:	689b      	ldr	r3, [r3, #8]
     eac:	4619      	mov	r1, r3
     eae:	f001 fadc 	bl	246a <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
     eb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
     eb6:	3301      	adds	r3, #1
     eb8:	f88d 300f 	strb.w	r3, [sp, #15]
     ebc:	9b01      	ldr	r3, [sp, #4]
     ebe:	7bdb      	ldrb	r3, [r3, #15]
     ec0:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ec4:	429a      	cmp	r2, r3
     ec6:	d3e3      	bcc.n	e90 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
     ec8:	f000 f824 	bl	f14 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
     ecc:	2301      	movs	r3, #1
     ece:	f88d 300f 	strb.w	r3, [sp, #15]
     ed2:	e00e      	b.n	ef2 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
     ed4:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ed8:	9b01      	ldr	r3, [sp, #4]
     eda:	327e      	adds	r2, #126	; 0x7e
     edc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
     ee0:	490b      	ldr	r1, [pc, #44]	; (f10 <Clock_Ip_UpdateDriverContext+0xa0>)
     ee2:	f89d 200f 	ldrb.w	r2, [sp, #15]
     ee6:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
     ee8:	f89d 300f 	ldrb.w	r3, [sp, #15]
     eec:	3301      	adds	r3, #1
     eee:	f88d 300f 	strb.w	r3, [sp, #15]
     ef2:	9b01      	ldr	r3, [sp, #4]
     ef4:	7cdb      	ldrb	r3, [r3, #19]
     ef6:	f89d 200f 	ldrb.w	r2, [sp, #15]
     efa:	429a      	cmp	r2, r3
     efc:	d3ea      	bcc.n	ed4 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
     efe:	bf00      	nop
     f00:	bf00      	nop
     f02:	b005      	add	sp, #20
     f04:	f85d fb04 	ldr.w	pc, [sp], #4
     f08:	1fff8b18 	.word	0x1fff8b18
     f0c:	1fff8b38 	.word	0x1fff8b38
     f10:	1fff8b44 	.word	0x1fff8b44

00000f14 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
     f14:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
     f16:	4b23      	ldr	r3, [pc, #140]	; (fa4 <Clock_Ip_CallEmptyCallbacks+0x90>)
     f18:	781b      	ldrb	r3, [r3, #0]
     f1a:	f083 0301 	eor.w	r3, r3, #1
     f1e:	b2db      	uxtb	r3, r3
     f20:	2b00      	cmp	r3, #0
     f22:	d03d      	beq.n	fa0 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
     f24:	4b1f      	ldr	r3, [pc, #124]	; (fa4 <Clock_Ip_CallEmptyCallbacks+0x90>)
     f26:	2201      	movs	r2, #1
     f28:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
     f2a:	4b1f      	ldr	r3, [pc, #124]	; (fa8 <Clock_Ip_CallEmptyCallbacks+0x94>)
     f2c:	685b      	ldr	r3, [r3, #4]
     f2e:	2100      	movs	r1, #0
     f30:	2000      	movs	r0, #0
     f32:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
     f34:	4b1c      	ldr	r3, [pc, #112]	; (fa8 <Clock_Ip_CallEmptyCallbacks+0x94>)
     f36:	689b      	ldr	r3, [r3, #8]
     f38:	2057      	movs	r0, #87	; 0x57
     f3a:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     f3c:	4b1b      	ldr	r3, [pc, #108]	; (fac <Clock_Ip_CallEmptyCallbacks+0x98>)
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	2000      	movs	r0, #0
     f42:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
     f44:	4b1a      	ldr	r3, [pc, #104]	; (fb0 <Clock_Ip_CallEmptyCallbacks+0x9c>)
     f46:	681b      	ldr	r3, [r3, #0]
     f48:	2000      	movs	r0, #0
     f4a:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
     f4c:	4b19      	ldr	r3, [pc, #100]	; (fb4 <Clock_Ip_CallEmptyCallbacks+0xa0>)
     f4e:	681b      	ldr	r3, [r3, #0]
     f50:	2000      	movs	r0, #0
     f52:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     f54:	4b18      	ldr	r3, [pc, #96]	; (fb8 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     f56:	685b      	ldr	r3, [r3, #4]
     f58:	2000      	movs	r0, #0
     f5a:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
     f5c:	4b16      	ldr	r3, [pc, #88]	; (fb8 <Clock_Ip_CallEmptyCallbacks+0xa4>)
     f5e:	689b      	ldr	r3, [r3, #8]
     f60:	2057      	movs	r0, #87	; 0x57
     f62:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     f64:	4b15      	ldr	r3, [pc, #84]	; (fbc <Clock_Ip_CallEmptyCallbacks+0xa8>)
     f66:	681b      	ldr	r3, [r3, #0]
     f68:	2000      	movs	r0, #0
     f6a:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
     f6c:	4b13      	ldr	r3, [pc, #76]	; (fbc <Clock_Ip_CallEmptyCallbacks+0xa8>)
     f6e:	685b      	ldr	r3, [r3, #4]
     f70:	2100      	movs	r1, #0
     f72:	2057      	movs	r0, #87	; 0x57
     f74:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     f76:	4b12      	ldr	r3, [pc, #72]	; (fc0 <Clock_Ip_CallEmptyCallbacks+0xac>)
     f78:	681b      	ldr	r3, [r3, #0]
     f7a:	2000      	movs	r0, #0
     f7c:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     f7e:	4b11      	ldr	r3, [pc, #68]	; (fc4 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     f80:	685b      	ldr	r3, [r3, #4]
     f82:	2000      	movs	r0, #0
     f84:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
     f86:	4b0f      	ldr	r3, [pc, #60]	; (fc4 <Clock_Ip_CallEmptyCallbacks+0xb0>)
     f88:	689b      	ldr	r3, [r3, #8]
     f8a:	2057      	movs	r0, #87	; 0x57
     f8c:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
     f8e:	4b0e      	ldr	r3, [pc, #56]	; (fc8 <Clock_Ip_CallEmptyCallbacks+0xb4>)
     f90:	685b      	ldr	r3, [r3, #4]
     f92:	2000      	movs	r0, #0
     f94:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
     f96:	4b0d      	ldr	r3, [pc, #52]	; (fcc <Clock_Ip_CallEmptyCallbacks+0xb8>)
     f98:	681b      	ldr	r3, [r3, #0]
     f9a:	2100      	movs	r1, #0
     f9c:	2000      	movs	r0, #0
     f9e:	4798      	blx	r3
    }
}
     fa0:	bf00      	nop
     fa2:	bd08      	pop	{r3, pc}
     fa4:	1fff8b3c 	.word	0x1fff8b3c
     fa8:	0000c144 	.word	0x0000c144
     fac:	0000c058 	.word	0x0000c058
     fb0:	0000c094 	.word	0x0000c094
     fb4:	0000c09c 	.word	0x0000c09c
     fb8:	0000c0c4 	.word	0x0000c0c4
     fbc:	0000c0d0 	.word	0x0000c0d0
     fc0:	0000c108 	.word	0x0000c108
     fc4:	0000c154 	.word	0x0000c154
     fc8:	0000c180 	.word	0x0000c180
     fcc:	0000c17c 	.word	0x0000c17c

00000fd0 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
     fd0:	b500      	push	{lr}
     fd2:	b085      	sub	sp, #20
     fd4:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
     fd6:	9b01      	ldr	r3, [sp, #4]
     fd8:	7adb      	ldrb	r3, [r3, #11]
     fda:	9303      	str	r3, [sp, #12]
     fdc:	e01f      	b.n	101e <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
     fde:	9b03      	ldr	r3, [sp, #12]
     fe0:	1e5a      	subs	r2, r3, #1
     fe2:	9b01      	ldr	r3, [sp, #4]
     fe4:	320d      	adds	r2, #13
     fe6:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
     fea:	495a      	ldr	r1, [pc, #360]	; (1154 <Clock_Ip_ResetClockConfiguration+0x184>)
     fec:	4613      	mov	r3, r2
     fee:	00db      	lsls	r3, r3, #3
     ff0:	4413      	add	r3, r2
     ff2:	440b      	add	r3, r1
     ff4:	3301      	adds	r3, #1
     ff6:	781b      	ldrb	r3, [r3, #0]
     ff8:	461a      	mov	r2, r3
     ffa:	4b57      	ldr	r3, [pc, #348]	; (1158 <Clock_Ip_ResetClockConfiguration+0x188>)
     ffc:	5c9b      	ldrb	r3, [r3, r2]
     ffe:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1000:	4a56      	ldr	r2, [pc, #344]	; (115c <Clock_Ip_ResetClockConfiguration+0x18c>)
    1002:	9b02      	ldr	r3, [sp, #8]
    1004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1008:	9a03      	ldr	r2, [sp, #12]
    100a:	3a01      	subs	r2, #1
    100c:	320d      	adds	r2, #13
    100e:	00d2      	lsls	r2, r2, #3
    1010:	9901      	ldr	r1, [sp, #4]
    1012:	440a      	add	r2, r1
    1014:	4610      	mov	r0, r2
    1016:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1018:	9b03      	ldr	r3, [sp, #12]
    101a:	3b01      	subs	r3, #1
    101c:	9303      	str	r3, [sp, #12]
    101e:	9b03      	ldr	r3, [sp, #12]
    1020:	2b00      	cmp	r3, #0
    1022:	d1dc      	bne.n	fde <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1024:	9b01      	ldr	r3, [sp, #4]
    1026:	7b9b      	ldrb	r3, [r3, #14]
    1028:	9303      	str	r3, [sp, #12]
    102a:	e026      	b.n	107a <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    102c:	9b03      	ldr	r3, [sp, #12]
    102e:	3b01      	subs	r3, #1
    1030:	9a01      	ldr	r2, [sp, #4]
    1032:	3324      	adds	r3, #36	; 0x24
    1034:	011b      	lsls	r3, r3, #4
    1036:	4413      	add	r3, r2
    1038:	3304      	adds	r3, #4
    103a:	681a      	ldr	r2, [r3, #0]
    103c:	4945      	ldr	r1, [pc, #276]	; (1154 <Clock_Ip_ResetClockConfiguration+0x184>)
    103e:	4613      	mov	r3, r2
    1040:	00db      	lsls	r3, r3, #3
    1042:	4413      	add	r3, r2
    1044:	440b      	add	r3, r1
    1046:	3301      	adds	r3, #1
    1048:	781b      	ldrb	r3, [r3, #0]
    104a:	461a      	mov	r2, r3
    104c:	4b44      	ldr	r3, [pc, #272]	; (1160 <Clock_Ip_ResetClockConfiguration+0x190>)
    104e:	5c9b      	ldrb	r3, [r3, r2]
    1050:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    1052:	4944      	ldr	r1, [pc, #272]	; (1164 <Clock_Ip_ResetClockConfiguration+0x194>)
    1054:	9a02      	ldr	r2, [sp, #8]
    1056:	4613      	mov	r3, r2
    1058:	005b      	lsls	r3, r3, #1
    105a:	4413      	add	r3, r2
    105c:	009b      	lsls	r3, r3, #2
    105e:	440b      	add	r3, r1
    1060:	681b      	ldr	r3, [r3, #0]
    1062:	9a03      	ldr	r2, [sp, #12]
    1064:	3a01      	subs	r2, #1
    1066:	3224      	adds	r2, #36	; 0x24
    1068:	0112      	lsls	r2, r2, #4
    106a:	9901      	ldr	r1, [sp, #4]
    106c:	440a      	add	r2, r1
    106e:	3204      	adds	r2, #4
    1070:	4610      	mov	r0, r2
    1072:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1074:	9b03      	ldr	r3, [sp, #12]
    1076:	3b01      	subs	r3, #1
    1078:	9303      	str	r3, [sp, #12]
    107a:	9b03      	ldr	r3, [sp, #12]
    107c:	2b00      	cmp	r3, #0
    107e:	d1d5      	bne.n	102c <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    1080:	9b01      	ldr	r3, [sp, #4]
    1082:	7a9b      	ldrb	r3, [r3, #10]
    1084:	9303      	str	r3, [sp, #12]
    1086:	e02a      	b.n	10de <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1088:	9b03      	ldr	r3, [sp, #12]
    108a:	1e5a      	subs	r2, r3, #1
    108c:	9901      	ldr	r1, [sp, #4]
    108e:	4613      	mov	r3, r2
    1090:	009b      	lsls	r3, r3, #2
    1092:	4413      	add	r3, r2
    1094:	00db      	lsls	r3, r3, #3
    1096:	440b      	add	r3, r1
    1098:	3340      	adds	r3, #64	; 0x40
    109a:	681a      	ldr	r2, [r3, #0]
    109c:	492d      	ldr	r1, [pc, #180]	; (1154 <Clock_Ip_ResetClockConfiguration+0x184>)
    109e:	4613      	mov	r3, r2
    10a0:	00db      	lsls	r3, r3, #3
    10a2:	4413      	add	r3, r2
    10a4:	440b      	add	r3, r1
    10a6:	3301      	adds	r3, #1
    10a8:	781b      	ldrb	r3, [r3, #0]
    10aa:	461a      	mov	r2, r3
    10ac:	4b2e      	ldr	r3, [pc, #184]	; (1168 <Clock_Ip_ResetClockConfiguration+0x198>)
    10ae:	5c9b      	ldrb	r3, [r3, r2]
    10b0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    10b2:	492e      	ldr	r1, [pc, #184]	; (116c <Clock_Ip_ResetClockConfiguration+0x19c>)
    10b4:	9a02      	ldr	r2, [sp, #8]
    10b6:	4613      	mov	r3, r2
    10b8:	009b      	lsls	r3, r3, #2
    10ba:	4413      	add	r3, r2
    10bc:	009b      	lsls	r3, r3, #2
    10be:	440b      	add	r3, r1
    10c0:	6819      	ldr	r1, [r3, #0]
    10c2:	9b03      	ldr	r3, [sp, #12]
    10c4:	1e5a      	subs	r2, r3, #1
    10c6:	4613      	mov	r3, r2
    10c8:	009b      	lsls	r3, r3, #2
    10ca:	4413      	add	r3, r2
    10cc:	00db      	lsls	r3, r3, #3
    10ce:	3340      	adds	r3, #64	; 0x40
    10d0:	9a01      	ldr	r2, [sp, #4]
    10d2:	4413      	add	r3, r2
    10d4:	4618      	mov	r0, r3
    10d6:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    10d8:	9b03      	ldr	r3, [sp, #12]
    10da:	3b01      	subs	r3, #1
    10dc:	9303      	str	r3, [sp, #12]
    10de:	9b03      	ldr	r3, [sp, #12]
    10e0:	2b00      	cmp	r3, #0
    10e2:	d1d1      	bne.n	1088 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    10e4:	9b01      	ldr	r3, [sp, #4]
    10e6:	7a5b      	ldrb	r3, [r3, #9]
    10e8:	9303      	str	r3, [sp, #12]
    10ea:	e02b      	b.n	1144 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    10ec:	9b03      	ldr	r3, [sp, #12]
    10ee:	1e5a      	subs	r2, r3, #1
    10f0:	9901      	ldr	r1, [sp, #4]
    10f2:	4613      	mov	r3, r2
    10f4:	009b      	lsls	r3, r3, #2
    10f6:	4413      	add	r3, r2
    10f8:	009b      	lsls	r3, r3, #2
    10fa:	440b      	add	r3, r1
    10fc:	332c      	adds	r3, #44	; 0x2c
    10fe:	681a      	ldr	r2, [r3, #0]
    1100:	4914      	ldr	r1, [pc, #80]	; (1154 <Clock_Ip_ResetClockConfiguration+0x184>)
    1102:	4613      	mov	r3, r2
    1104:	00db      	lsls	r3, r3, #3
    1106:	4413      	add	r3, r2
    1108:	440b      	add	r3, r1
    110a:	3301      	adds	r3, #1
    110c:	781b      	ldrb	r3, [r3, #0]
    110e:	461a      	mov	r2, r3
    1110:	4b17      	ldr	r3, [pc, #92]	; (1170 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    1112:	5c9b      	ldrb	r3, [r3, r2]
    1114:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    1116:	4917      	ldr	r1, [pc, #92]	; (1174 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    1118:	9a02      	ldr	r2, [sp, #8]
    111a:	4613      	mov	r3, r2
    111c:	009b      	lsls	r3, r3, #2
    111e:	4413      	add	r3, r2
    1120:	009b      	lsls	r3, r3, #2
    1122:	440b      	add	r3, r1
    1124:	6819      	ldr	r1, [r3, #0]
    1126:	9b03      	ldr	r3, [sp, #12]
    1128:	1e5a      	subs	r2, r3, #1
    112a:	4613      	mov	r3, r2
    112c:	009b      	lsls	r3, r3, #2
    112e:	4413      	add	r3, r2
    1130:	009b      	lsls	r3, r3, #2
    1132:	3328      	adds	r3, #40	; 0x28
    1134:	9a01      	ldr	r2, [sp, #4]
    1136:	4413      	add	r3, r2
    1138:	3304      	adds	r3, #4
    113a:	4618      	mov	r0, r3
    113c:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    113e:	9b03      	ldr	r3, [sp, #12]
    1140:	3b01      	subs	r3, #1
    1142:	9303      	str	r3, [sp, #12]
    1144:	9b03      	ldr	r3, [sp, #12]
    1146:	2b00      	cmp	r3, #0
    1148:	d1d0      	bne.n	10ec <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    114a:	bf00      	nop
    114c:	bf00      	nop
    114e:	b005      	add	sp, #20
    1150:	f85d fb04 	ldr.w	pc, [sp], #4
    1154:	0000bb48 	.word	0x0000bb48
    1158:	0000bb18 	.word	0x0000bb18
    115c:	0000c180 	.word	0x0000c180
    1160:	0000baf8 	.word	0x0000baf8
    1164:	0000c0c4 	.word	0x0000c0c4
    1168:	0000bb08 	.word	0x0000bb08
    116c:	0000c154 	.word	0x0000c154
    1170:	0000bac8 	.word	0x0000bac8
    1174:	0000c09c 	.word	0x0000c09c

00001178 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    1178:	b500      	push	{lr}
    117a:	b085      	sub	sp, #20
    117c:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    117e:	2301      	movs	r3, #1
    1180:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    1182:	9801      	ldr	r0, [sp, #4]
    1184:	f000 f818 	bl	11b8 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    1188:	4b0a      	ldr	r3, [pc, #40]	; (11b4 <Clock_Ip_Init+0x3c>)
    118a:	781b      	ldrb	r3, [r3, #0]
    118c:	2b00      	cmp	r3, #0
    118e:	d00a      	beq.n	11a6 <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    1190:	f000 fb74 	bl	187c <Clock_Ip_GetPllStatus>
    1194:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    1196:	9b02      	ldr	r3, [sp, #8]
    1198:	2b00      	cmp	r3, #0
    119a:	d106      	bne.n	11aa <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    119c:	f000 fbf2 	bl	1984 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    11a0:	2300      	movs	r3, #0
    11a2:	9303      	str	r3, [sp, #12]
    11a4:	e001      	b.n	11aa <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    11a6:	2300      	movs	r3, #0
    11a8:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    11aa:	9b03      	ldr	r3, [sp, #12]
}
    11ac:	4618      	mov	r0, r3
    11ae:	b005      	add	sp, #20
    11b0:	f85d fb04 	ldr.w	pc, [sp], #4
    11b4:	1fff8b40 	.word	0x1fff8b40

000011b8 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    11b8:	b510      	push	{r4, lr}
    11ba:	b084      	sub	sp, #16
    11bc:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    11be:	4a9f      	ldr	r2, [pc, #636]	; (143c <Clock_Ip_InitClock+0x284>)
    11c0:	9b01      	ldr	r3, [sp, #4]
    11c2:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    11c4:	2101      	movs	r1, #1
    11c6:	9801      	ldr	r0, [sp, #4]
    11c8:	f003 fa90 	bl	46ec <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    11cc:	4b9b      	ldr	r3, [pc, #620]	; (143c <Clock_Ip_InitClock+0x284>)
    11ce:	681b      	ldr	r3, [r3, #0]
    11d0:	2b00      	cmp	r3, #0
    11d2:	d030      	beq.n	1236 <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    11d4:	2300      	movs	r3, #0
    11d6:	9303      	str	r3, [sp, #12]
    11d8:	e027      	b.n	122a <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    11da:	9901      	ldr	r1, [sp, #4]
    11dc:	9a03      	ldr	r2, [sp, #12]
    11de:	4613      	mov	r3, r2
    11e0:	009b      	lsls	r3, r3, #2
    11e2:	4413      	add	r3, r2
    11e4:	009b      	lsls	r3, r3, #2
    11e6:	440b      	add	r3, r1
    11e8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    11ec:	681a      	ldr	r2, [r3, #0]
    11ee:	4994      	ldr	r1, [pc, #592]	; (1440 <Clock_Ip_InitClock+0x288>)
    11f0:	4613      	mov	r3, r2
    11f2:	00db      	lsls	r3, r3, #3
    11f4:	4413      	add	r3, r2
    11f6:	440b      	add	r3, r1
    11f8:	3301      	adds	r3, #1
    11fa:	781b      	ldrb	r3, [r3, #0]
    11fc:	461a      	mov	r2, r3
    11fe:	4b91      	ldr	r3, [pc, #580]	; (1444 <Clock_Ip_InitClock+0x28c>)
    1200:	5c9b      	ldrb	r3, [r3, r2]
    1202:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    1204:	4a90      	ldr	r2, [pc, #576]	; (1448 <Clock_Ip_InitClock+0x290>)
    1206:	9b02      	ldr	r3, [sp, #8]
    1208:	011b      	lsls	r3, r3, #4
    120a:	4413      	add	r3, r2
    120c:	6819      	ldr	r1, [r3, #0]
    120e:	9a03      	ldr	r2, [sp, #12]
    1210:	4613      	mov	r3, r2
    1212:	009b      	lsls	r3, r3, #2
    1214:	4413      	add	r3, r2
    1216:	009b      	lsls	r3, r3, #2
    1218:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    121c:	9a01      	ldr	r2, [sp, #4]
    121e:	4413      	add	r3, r2
    1220:	4618      	mov	r0, r3
    1222:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    1224:	9b03      	ldr	r3, [sp, #12]
    1226:	3301      	adds	r3, #1
    1228:	9303      	str	r3, [sp, #12]
    122a:	9b01      	ldr	r3, [sp, #4]
    122c:	7c9b      	ldrb	r3, [r3, #18]
    122e:	461a      	mov	r2, r3
    1230:	9b03      	ldr	r3, [sp, #12]
    1232:	4293      	cmp	r3, r2
    1234:	d3d1      	bcc.n	11da <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    1236:	9801      	ldr	r0, [sp, #4]
    1238:	f7ff feca 	bl	fd0 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    123c:	2300      	movs	r3, #0
    123e:	9303      	str	r3, [sp, #12]
    1240:	e029      	b.n	1296 <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    1242:	9901      	ldr	r1, [sp, #4]
    1244:	9a03      	ldr	r2, [sp, #12]
    1246:	4613      	mov	r3, r2
    1248:	005b      	lsls	r3, r3, #1
    124a:	4413      	add	r3, r2
    124c:	009b      	lsls	r3, r3, #2
    124e:	440b      	add	r3, r1
    1250:	3314      	adds	r3, #20
    1252:	681a      	ldr	r2, [r3, #0]
    1254:	497a      	ldr	r1, [pc, #488]	; (1440 <Clock_Ip_InitClock+0x288>)
    1256:	4613      	mov	r3, r2
    1258:	00db      	lsls	r3, r3, #3
    125a:	4413      	add	r3, r2
    125c:	440b      	add	r3, r1
    125e:	3301      	adds	r3, #1
    1260:	781b      	ldrb	r3, [r3, #0]
    1262:	461a      	mov	r2, r3
    1264:	4b79      	ldr	r3, [pc, #484]	; (144c <Clock_Ip_InitClock+0x294>)
    1266:	5c9b      	ldrb	r3, [r3, r2]
    1268:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    126a:	4979      	ldr	r1, [pc, #484]	; (1450 <Clock_Ip_InitClock+0x298>)
    126c:	9a02      	ldr	r2, [sp, #8]
    126e:	4613      	mov	r3, r2
    1270:	005b      	lsls	r3, r3, #1
    1272:	4413      	add	r3, r2
    1274:	009b      	lsls	r3, r3, #2
    1276:	440b      	add	r3, r1
    1278:	6819      	ldr	r1, [r3, #0]
    127a:	9a03      	ldr	r2, [sp, #12]
    127c:	4613      	mov	r3, r2
    127e:	005b      	lsls	r3, r3, #1
    1280:	4413      	add	r3, r2
    1282:	009b      	lsls	r3, r3, #2
    1284:	3310      	adds	r3, #16
    1286:	9a01      	ldr	r2, [sp, #4]
    1288:	4413      	add	r3, r2
    128a:	3304      	adds	r3, #4
    128c:	4618      	mov	r0, r3
    128e:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    1290:	9b03      	ldr	r3, [sp, #12]
    1292:	3301      	adds	r3, #1
    1294:	9303      	str	r3, [sp, #12]
    1296:	9b01      	ldr	r3, [sp, #4]
    1298:	7a1b      	ldrb	r3, [r3, #8]
    129a:	461a      	mov	r2, r3
    129c:	9b03      	ldr	r3, [sp, #12]
    129e:	4293      	cmp	r3, r2
    12a0:	d3cf      	bcc.n	1242 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    12a2:	2300      	movs	r3, #0
    12a4:	9303      	str	r3, [sp, #12]
    12a6:	e02a      	b.n	12fe <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    12a8:	9901      	ldr	r1, [sp, #4]
    12aa:	9a03      	ldr	r2, [sp, #12]
    12ac:	4613      	mov	r3, r2
    12ae:	009b      	lsls	r3, r3, #2
    12b0:	4413      	add	r3, r2
    12b2:	009b      	lsls	r3, r3, #2
    12b4:	440b      	add	r3, r1
    12b6:	332c      	adds	r3, #44	; 0x2c
    12b8:	681a      	ldr	r2, [r3, #0]
    12ba:	4961      	ldr	r1, [pc, #388]	; (1440 <Clock_Ip_InitClock+0x288>)
    12bc:	4613      	mov	r3, r2
    12be:	00db      	lsls	r3, r3, #3
    12c0:	4413      	add	r3, r2
    12c2:	440b      	add	r3, r1
    12c4:	3301      	adds	r3, #1
    12c6:	781b      	ldrb	r3, [r3, #0]
    12c8:	461a      	mov	r2, r3
    12ca:	4b62      	ldr	r3, [pc, #392]	; (1454 <Clock_Ip_InitClock+0x29c>)
    12cc:	5c9b      	ldrb	r3, [r3, r2]
    12ce:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    12d0:	4961      	ldr	r1, [pc, #388]	; (1458 <Clock_Ip_InitClock+0x2a0>)
    12d2:	9a02      	ldr	r2, [sp, #8]
    12d4:	4613      	mov	r3, r2
    12d6:	009b      	lsls	r3, r3, #2
    12d8:	4413      	add	r3, r2
    12da:	009b      	lsls	r3, r3, #2
    12dc:	440b      	add	r3, r1
    12de:	3304      	adds	r3, #4
    12e0:	6819      	ldr	r1, [r3, #0]
    12e2:	9a03      	ldr	r2, [sp, #12]
    12e4:	4613      	mov	r3, r2
    12e6:	009b      	lsls	r3, r3, #2
    12e8:	4413      	add	r3, r2
    12ea:	009b      	lsls	r3, r3, #2
    12ec:	3328      	adds	r3, #40	; 0x28
    12ee:	9a01      	ldr	r2, [sp, #4]
    12f0:	4413      	add	r3, r2
    12f2:	3304      	adds	r3, #4
    12f4:	4618      	mov	r0, r3
    12f6:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    12f8:	9b03      	ldr	r3, [sp, #12]
    12fa:	3301      	adds	r3, #1
    12fc:	9303      	str	r3, [sp, #12]
    12fe:	9b01      	ldr	r3, [sp, #4]
    1300:	7a5b      	ldrb	r3, [r3, #9]
    1302:	461a      	mov	r2, r3
    1304:	9b03      	ldr	r3, [sp, #12]
    1306:	4293      	cmp	r3, r2
    1308:	d3ce      	bcc.n	12a8 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    130a:	9801      	ldr	r0, [sp, #4]
    130c:	f7ff fdb0 	bl	e70 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1310:	2300      	movs	r3, #0
    1312:	9303      	str	r3, [sp, #12]
    1314:	e028      	b.n	1368 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    1316:	9901      	ldr	r1, [sp, #4]
    1318:	9a03      	ldr	r2, [sp, #12]
    131a:	4613      	mov	r3, r2
    131c:	009b      	lsls	r3, r3, #2
    131e:	4413      	add	r3, r2
    1320:	009b      	lsls	r3, r3, #2
    1322:	440b      	add	r3, r1
    1324:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    1328:	681a      	ldr	r2, [r3, #0]
    132a:	4945      	ldr	r1, [pc, #276]	; (1440 <Clock_Ip_InitClock+0x288>)
    132c:	4613      	mov	r3, r2
    132e:	00db      	lsls	r3, r3, #3
    1330:	4413      	add	r3, r2
    1332:	440b      	add	r3, r1
    1334:	3301      	adds	r3, #1
    1336:	781b      	ldrb	r3, [r3, #0]
    1338:	461a      	mov	r2, r3
    133a:	4b48      	ldr	r3, [pc, #288]	; (145c <Clock_Ip_InitClock+0x2a4>)
    133c:	5c9b      	ldrb	r3, [r3, r2]
    133e:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    1340:	4a47      	ldr	r2, [pc, #284]	; (1460 <Clock_Ip_InitClock+0x2a8>)
    1342:	9b02      	ldr	r3, [sp, #8]
    1344:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1348:	9a03      	ldr	r2, [sp, #12]
    134a:	4613      	mov	r3, r2
    134c:	009b      	lsls	r3, r3, #2
    134e:	4413      	add	r3, r2
    1350:	009b      	lsls	r3, r3, #2
    1352:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    1356:	9a01      	ldr	r2, [sp, #4]
    1358:	4413      	add	r3, r2
    135a:	3304      	adds	r3, #4
    135c:	9903      	ldr	r1, [sp, #12]
    135e:	4618      	mov	r0, r3
    1360:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    1362:	9b03      	ldr	r3, [sp, #12]
    1364:	3301      	adds	r3, #1
    1366:	9303      	str	r3, [sp, #12]
    1368:	9b01      	ldr	r3, [sp, #4]
    136a:	7c5b      	ldrb	r3, [r3, #17]
    136c:	461a      	mov	r2, r3
    136e:	9b03      	ldr	r3, [sp, #12]
    1370:	4293      	cmp	r3, r2
    1372:	d3d0      	bcc.n	1316 <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1374:	2300      	movs	r3, #0
    1376:	9303      	str	r3, [sp, #12]
    1378:	e026      	b.n	13c8 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    137a:	9901      	ldr	r1, [sp, #4]
    137c:	9a03      	ldr	r2, [sp, #12]
    137e:	4613      	mov	r3, r2
    1380:	005b      	lsls	r3, r3, #1
    1382:	4413      	add	r3, r2
    1384:	009b      	lsls	r3, r3, #2
    1386:	440b      	add	r3, r1
    1388:	f503 730e 	add.w	r3, r3, #568	; 0x238
    138c:	681a      	ldr	r2, [r3, #0]
    138e:	492c      	ldr	r1, [pc, #176]	; (1440 <Clock_Ip_InitClock+0x288>)
    1390:	4613      	mov	r3, r2
    1392:	00db      	lsls	r3, r3, #3
    1394:	4413      	add	r3, r2
    1396:	440b      	add	r3, r1
    1398:	3301      	adds	r3, #1
    139a:	781b      	ldrb	r3, [r3, #0]
    139c:	461a      	mov	r2, r3
    139e:	4b31      	ldr	r3, [pc, #196]	; (1464 <Clock_Ip_InitClock+0x2ac>)
    13a0:	5c9b      	ldrb	r3, [r3, r2]
    13a2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    13a4:	4a30      	ldr	r2, [pc, #192]	; (1468 <Clock_Ip_InitClock+0x2b0>)
    13a6:	9b02      	ldr	r3, [sp, #8]
    13a8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    13ac:	9a03      	ldr	r2, [sp, #12]
    13ae:	4613      	mov	r3, r2
    13b0:	005b      	lsls	r3, r3, #1
    13b2:	4413      	add	r3, r2
    13b4:	009b      	lsls	r3, r3, #2
    13b6:	f503 730e 	add.w	r3, r3, #568	; 0x238
    13ba:	9a01      	ldr	r2, [sp, #4]
    13bc:	4413      	add	r3, r2
    13be:	4618      	mov	r0, r3
    13c0:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    13c2:	9b03      	ldr	r3, [sp, #12]
    13c4:	3301      	adds	r3, #1
    13c6:	9303      	str	r3, [sp, #12]
    13c8:	9b01      	ldr	r3, [sp, #4]
    13ca:	7b5b      	ldrb	r3, [r3, #13]
    13cc:	461a      	mov	r2, r3
    13ce:	9b03      	ldr	r3, [sp, #12]
    13d0:	4293      	cmp	r3, r2
    13d2:	d3d2      	bcc.n	137a <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    13d4:	2300      	movs	r3, #0
    13d6:	9303      	str	r3, [sp, #12]
    13d8:	e026      	b.n	1428 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    13da:	9901      	ldr	r1, [sp, #4]
    13dc:	9a03      	ldr	r2, [sp, #12]
    13de:	4613      	mov	r3, r2
    13e0:	005b      	lsls	r3, r3, #1
    13e2:	4413      	add	r3, r2
    13e4:	009b      	lsls	r3, r3, #2
    13e6:	440b      	add	r3, r1
    13e8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    13ec:	681a      	ldr	r2, [r3, #0]
    13ee:	4914      	ldr	r1, [pc, #80]	; (1440 <Clock_Ip_InitClock+0x288>)
    13f0:	4613      	mov	r3, r2
    13f2:	00db      	lsls	r3, r3, #3
    13f4:	4413      	add	r3, r2
    13f6:	440b      	add	r3, r1
    13f8:	3301      	adds	r3, #1
    13fa:	781b      	ldrb	r3, [r3, #0]
    13fc:	461a      	mov	r2, r3
    13fe:	4b1b      	ldr	r3, [pc, #108]	; (146c <Clock_Ip_InitClock+0x2b4>)
    1400:	5c9b      	ldrb	r3, [r3, r2]
    1402:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    1404:	4a1a      	ldr	r2, [pc, #104]	; (1470 <Clock_Ip_InitClock+0x2b8>)
    1406:	9b02      	ldr	r3, [sp, #8]
    1408:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    140c:	9a03      	ldr	r2, [sp, #12]
    140e:	4613      	mov	r3, r2
    1410:	005b      	lsls	r3, r3, #1
    1412:	4413      	add	r3, r2
    1414:	009b      	lsls	r3, r3, #2
    1416:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    141a:	9a01      	ldr	r2, [sp, #4]
    141c:	4413      	add	r3, r2
    141e:	4618      	mov	r0, r3
    1420:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    1422:	9b03      	ldr	r3, [sp, #12]
    1424:	3301      	adds	r3, #1
    1426:	9303      	str	r3, [sp, #12]
    1428:	9b01      	ldr	r3, [sp, #4]
    142a:	7b1b      	ldrb	r3, [r3, #12]
    142c:	461a      	mov	r2, r3
    142e:	9b03      	ldr	r3, [sp, #12]
    1430:	4293      	cmp	r3, r2
    1432:	d3d2      	bcc.n	13da <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    1434:	2300      	movs	r3, #0
    1436:	9303      	str	r3, [sp, #12]
    1438:	e044      	b.n	14c4 <Clock_Ip_InitClock+0x30c>
    143a:	bf00      	nop
    143c:	1fff8b38 	.word	0x1fff8b38
    1440:	0000bb48 	.word	0x0000bb48
    1444:	0000bb38 	.word	0x0000bb38
    1448:	0000c144 	.word	0x0000c144
    144c:	0000bad8 	.word	0x0000bad8
    1450:	0000c108 	.word	0x0000c108
    1454:	0000bac8 	.word	0x0000bac8
    1458:	0000c09c 	.word	0x0000c09c
    145c:	0000bb28 	.word	0x0000bb28
    1460:	0000c17c 	.word	0x0000c17c
    1464:	0000bab8 	.word	0x0000bab8
    1468:	0000c094 	.word	0x0000c094
    146c:	0000baa8 	.word	0x0000baa8
    1470:	0000c058 	.word	0x0000c058
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    1474:	9901      	ldr	r1, [sp, #4]
    1476:	9a03      	ldr	r2, [sp, #12]
    1478:	4613      	mov	r3, r2
    147a:	005b      	lsls	r3, r3, #1
    147c:	4413      	add	r3, r2
    147e:	009b      	lsls	r3, r3, #2
    1480:	440b      	add	r3, r1
    1482:	f503 730e 	add.w	r3, r3, #568	; 0x238
    1486:	681a      	ldr	r2, [r3, #0]
    1488:	49ac      	ldr	r1, [pc, #688]	; (173c <Clock_Ip_InitClock+0x584>)
    148a:	4613      	mov	r3, r2
    148c:	00db      	lsls	r3, r3, #3
    148e:	4413      	add	r3, r2
    1490:	440b      	add	r3, r1
    1492:	3301      	adds	r3, #1
    1494:	781b      	ldrb	r3, [r3, #0]
    1496:	461a      	mov	r2, r3
    1498:	4ba9      	ldr	r3, [pc, #676]	; (1740 <Clock_Ip_InitClock+0x588>)
    149a:	5c9b      	ldrb	r3, [r3, r2]
    149c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    149e:	4aa9      	ldr	r2, [pc, #676]	; (1744 <Clock_Ip_InitClock+0x58c>)
    14a0:	9b02      	ldr	r3, [sp, #8]
    14a2:	00db      	lsls	r3, r3, #3
    14a4:	4413      	add	r3, r2
    14a6:	6859      	ldr	r1, [r3, #4]
    14a8:	9a03      	ldr	r2, [sp, #12]
    14aa:	4613      	mov	r3, r2
    14ac:	005b      	lsls	r3, r3, #1
    14ae:	4413      	add	r3, r2
    14b0:	009b      	lsls	r3, r3, #2
    14b2:	f503 730e 	add.w	r3, r3, #568	; 0x238
    14b6:	9a01      	ldr	r2, [sp, #4]
    14b8:	4413      	add	r3, r2
    14ba:	4618      	mov	r0, r3
    14bc:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    14be:	9b03      	ldr	r3, [sp, #12]
    14c0:	3301      	adds	r3, #1
    14c2:	9303      	str	r3, [sp, #12]
    14c4:	9b01      	ldr	r3, [sp, #4]
    14c6:	7b5b      	ldrb	r3, [r3, #13]
    14c8:	461a      	mov	r2, r3
    14ca:	9b03      	ldr	r3, [sp, #12]
    14cc:	4293      	cmp	r3, r2
    14ce:	d3d1      	bcc.n	1474 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    14d0:	2300      	movs	r3, #0
    14d2:	9303      	str	r3, [sp, #12]
    14d4:	e029      	b.n	152a <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    14d6:	9901      	ldr	r1, [sp, #4]
    14d8:	9a03      	ldr	r2, [sp, #12]
    14da:	4613      	mov	r3, r2
    14dc:	009b      	lsls	r3, r3, #2
    14de:	4413      	add	r3, r2
    14e0:	00db      	lsls	r3, r3, #3
    14e2:	440b      	add	r3, r1
    14e4:	3340      	adds	r3, #64	; 0x40
    14e6:	681a      	ldr	r2, [r3, #0]
    14e8:	4994      	ldr	r1, [pc, #592]	; (173c <Clock_Ip_InitClock+0x584>)
    14ea:	4613      	mov	r3, r2
    14ec:	00db      	lsls	r3, r3, #3
    14ee:	4413      	add	r3, r2
    14f0:	440b      	add	r3, r1
    14f2:	3301      	adds	r3, #1
    14f4:	781b      	ldrb	r3, [r3, #0]
    14f6:	461a      	mov	r2, r3
    14f8:	4b93      	ldr	r3, [pc, #588]	; (1748 <Clock_Ip_InitClock+0x590>)
    14fa:	5c9b      	ldrb	r3, [r3, r2]
    14fc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    14fe:	4993      	ldr	r1, [pc, #588]	; (174c <Clock_Ip_InitClock+0x594>)
    1500:	9a02      	ldr	r2, [sp, #8]
    1502:	4613      	mov	r3, r2
    1504:	009b      	lsls	r3, r3, #2
    1506:	4413      	add	r3, r2
    1508:	009b      	lsls	r3, r3, #2
    150a:	440b      	add	r3, r1
    150c:	3304      	adds	r3, #4
    150e:	6819      	ldr	r1, [r3, #0]
    1510:	9a03      	ldr	r2, [sp, #12]
    1512:	4613      	mov	r3, r2
    1514:	009b      	lsls	r3, r3, #2
    1516:	4413      	add	r3, r2
    1518:	00db      	lsls	r3, r3, #3
    151a:	3340      	adds	r3, #64	; 0x40
    151c:	9a01      	ldr	r2, [sp, #4]
    151e:	4413      	add	r3, r2
    1520:	4618      	mov	r0, r3
    1522:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    1524:	9b03      	ldr	r3, [sp, #12]
    1526:	3301      	adds	r3, #1
    1528:	9303      	str	r3, [sp, #12]
    152a:	9b01      	ldr	r3, [sp, #4]
    152c:	7a9b      	ldrb	r3, [r3, #10]
    152e:	461a      	mov	r2, r3
    1530:	9b03      	ldr	r3, [sp, #12]
    1532:	4293      	cmp	r3, r2
    1534:	d3cf      	bcc.n	14d6 <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    1536:	2300      	movs	r3, #0
    1538:	9303      	str	r3, [sp, #12]
    153a:	e029      	b.n	1590 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    153c:	9901      	ldr	r1, [sp, #4]
    153e:	9a03      	ldr	r2, [sp, #12]
    1540:	4613      	mov	r3, r2
    1542:	009b      	lsls	r3, r3, #2
    1544:	4413      	add	r3, r2
    1546:	009b      	lsls	r3, r3, #2
    1548:	440b      	add	r3, r1
    154a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    154e:	681a      	ldr	r2, [r3, #0]
    1550:	497a      	ldr	r1, [pc, #488]	; (173c <Clock_Ip_InitClock+0x584>)
    1552:	4613      	mov	r3, r2
    1554:	00db      	lsls	r3, r3, #3
    1556:	4413      	add	r3, r2
    1558:	440b      	add	r3, r1
    155a:	3301      	adds	r3, #1
    155c:	781b      	ldrb	r3, [r3, #0]
    155e:	461a      	mov	r2, r3
    1560:	4b7b      	ldr	r3, [pc, #492]	; (1750 <Clock_Ip_InitClock+0x598>)
    1562:	5c9b      	ldrb	r3, [r3, r2]
    1564:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    1566:	4a7b      	ldr	r2, [pc, #492]	; (1754 <Clock_Ip_InitClock+0x59c>)
    1568:	9b02      	ldr	r3, [sp, #8]
    156a:	011b      	lsls	r3, r3, #4
    156c:	4413      	add	r3, r2
    156e:	3304      	adds	r3, #4
    1570:	681c      	ldr	r4, [r3, #0]
    1572:	9a03      	ldr	r2, [sp, #12]
    1574:	4613      	mov	r3, r2
    1576:	009b      	lsls	r3, r3, #2
    1578:	4413      	add	r3, r2
    157a:	009b      	lsls	r3, r3, #2
    157c:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1580:	9a01      	ldr	r2, [sp, #4]
    1582:	4413      	add	r3, r2
    1584:	9903      	ldr	r1, [sp, #12]
    1586:	4618      	mov	r0, r3
    1588:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    158a:	9b03      	ldr	r3, [sp, #12]
    158c:	3301      	adds	r3, #1
    158e:	9303      	str	r3, [sp, #12]
    1590:	9b01      	ldr	r3, [sp, #4]
    1592:	7c9b      	ldrb	r3, [r3, #18]
    1594:	461a      	mov	r2, r3
    1596:	9b03      	ldr	r3, [sp, #12]
    1598:	4293      	cmp	r3, r2
    159a:	d3cf      	bcc.n	153c <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    159c:	2300      	movs	r3, #0
    159e:	9303      	str	r3, [sp, #12]
    15a0:	e02a      	b.n	15f8 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    15a2:	9901      	ldr	r1, [sp, #4]
    15a4:	9a03      	ldr	r2, [sp, #12]
    15a6:	4613      	mov	r3, r2
    15a8:	009b      	lsls	r3, r3, #2
    15aa:	4413      	add	r3, r2
    15ac:	009b      	lsls	r3, r3, #2
    15ae:	440b      	add	r3, r1
    15b0:	332c      	adds	r3, #44	; 0x2c
    15b2:	681a      	ldr	r2, [r3, #0]
    15b4:	4961      	ldr	r1, [pc, #388]	; (173c <Clock_Ip_InitClock+0x584>)
    15b6:	4613      	mov	r3, r2
    15b8:	00db      	lsls	r3, r3, #3
    15ba:	4413      	add	r3, r2
    15bc:	440b      	add	r3, r1
    15be:	3301      	adds	r3, #1
    15c0:	781b      	ldrb	r3, [r3, #0]
    15c2:	461a      	mov	r2, r3
    15c4:	4b64      	ldr	r3, [pc, #400]	; (1758 <Clock_Ip_InitClock+0x5a0>)
    15c6:	5c9b      	ldrb	r3, [r3, r2]
    15c8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    15ca:	4964      	ldr	r1, [pc, #400]	; (175c <Clock_Ip_InitClock+0x5a4>)
    15cc:	9a02      	ldr	r2, [sp, #8]
    15ce:	4613      	mov	r3, r2
    15d0:	009b      	lsls	r3, r3, #2
    15d2:	4413      	add	r3, r2
    15d4:	009b      	lsls	r3, r3, #2
    15d6:	440b      	add	r3, r1
    15d8:	3308      	adds	r3, #8
    15da:	6819      	ldr	r1, [r3, #0]
    15dc:	9a03      	ldr	r2, [sp, #12]
    15de:	4613      	mov	r3, r2
    15e0:	009b      	lsls	r3, r3, #2
    15e2:	4413      	add	r3, r2
    15e4:	009b      	lsls	r3, r3, #2
    15e6:	3328      	adds	r3, #40	; 0x28
    15e8:	9a01      	ldr	r2, [sp, #4]
    15ea:	4413      	add	r3, r2
    15ec:	3304      	adds	r3, #4
    15ee:	4618      	mov	r0, r3
    15f0:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    15f2:	9b03      	ldr	r3, [sp, #12]
    15f4:	3301      	adds	r3, #1
    15f6:	9303      	str	r3, [sp, #12]
    15f8:	9b01      	ldr	r3, [sp, #4]
    15fa:	7a5b      	ldrb	r3, [r3, #9]
    15fc:	461a      	mov	r2, r3
    15fe:	9b03      	ldr	r3, [sp, #12]
    1600:	4293      	cmp	r3, r2
    1602:	d3ce      	bcc.n	15a2 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1604:	2300      	movs	r3, #0
    1606:	9303      	str	r3, [sp, #12]
    1608:	e029      	b.n	165e <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    160a:	9901      	ldr	r1, [sp, #4]
    160c:	9a03      	ldr	r2, [sp, #12]
    160e:	4613      	mov	r3, r2
    1610:	009b      	lsls	r3, r3, #2
    1612:	4413      	add	r3, r2
    1614:	00db      	lsls	r3, r3, #3
    1616:	440b      	add	r3, r1
    1618:	3340      	adds	r3, #64	; 0x40
    161a:	681a      	ldr	r2, [r3, #0]
    161c:	4947      	ldr	r1, [pc, #284]	; (173c <Clock_Ip_InitClock+0x584>)
    161e:	4613      	mov	r3, r2
    1620:	00db      	lsls	r3, r3, #3
    1622:	4413      	add	r3, r2
    1624:	440b      	add	r3, r1
    1626:	3301      	adds	r3, #1
    1628:	781b      	ldrb	r3, [r3, #0]
    162a:	461a      	mov	r2, r3
    162c:	4b46      	ldr	r3, [pc, #280]	; (1748 <Clock_Ip_InitClock+0x590>)
    162e:	5c9b      	ldrb	r3, [r3, r2]
    1630:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    1632:	4946      	ldr	r1, [pc, #280]	; (174c <Clock_Ip_InitClock+0x594>)
    1634:	9a02      	ldr	r2, [sp, #8]
    1636:	4613      	mov	r3, r2
    1638:	009b      	lsls	r3, r3, #2
    163a:	4413      	add	r3, r2
    163c:	009b      	lsls	r3, r3, #2
    163e:	440b      	add	r3, r1
    1640:	330c      	adds	r3, #12
    1642:	6819      	ldr	r1, [r3, #0]
    1644:	9a03      	ldr	r2, [sp, #12]
    1646:	4613      	mov	r3, r2
    1648:	009b      	lsls	r3, r3, #2
    164a:	4413      	add	r3, r2
    164c:	00db      	lsls	r3, r3, #3
    164e:	3340      	adds	r3, #64	; 0x40
    1650:	9a01      	ldr	r2, [sp, #4]
    1652:	4413      	add	r3, r2
    1654:	4618      	mov	r0, r3
    1656:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    1658:	9b03      	ldr	r3, [sp, #12]
    165a:	3301      	adds	r3, #1
    165c:	9303      	str	r3, [sp, #12]
    165e:	9b01      	ldr	r3, [sp, #4]
    1660:	7a9b      	ldrb	r3, [r3, #10]
    1662:	461a      	mov	r2, r3
    1664:	9b03      	ldr	r3, [sp, #12]
    1666:	4293      	cmp	r3, r2
    1668:	d3cf      	bcc.n	160a <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    166a:	2300      	movs	r3, #0
    166c:	9303      	str	r3, [sp, #12]
    166e:	e025      	b.n	16bc <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    1670:	9a01      	ldr	r2, [sp, #4]
    1672:	9b03      	ldr	r3, [sp, #12]
    1674:	3324      	adds	r3, #36	; 0x24
    1676:	011b      	lsls	r3, r3, #4
    1678:	4413      	add	r3, r2
    167a:	3304      	adds	r3, #4
    167c:	681a      	ldr	r2, [r3, #0]
    167e:	492f      	ldr	r1, [pc, #188]	; (173c <Clock_Ip_InitClock+0x584>)
    1680:	4613      	mov	r3, r2
    1682:	00db      	lsls	r3, r3, #3
    1684:	4413      	add	r3, r2
    1686:	440b      	add	r3, r1
    1688:	3301      	adds	r3, #1
    168a:	781b      	ldrb	r3, [r3, #0]
    168c:	461a      	mov	r2, r3
    168e:	4b34      	ldr	r3, [pc, #208]	; (1760 <Clock_Ip_InitClock+0x5a8>)
    1690:	5c9b      	ldrb	r3, [r3, r2]
    1692:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    1694:	4933      	ldr	r1, [pc, #204]	; (1764 <Clock_Ip_InitClock+0x5ac>)
    1696:	9a02      	ldr	r2, [sp, #8]
    1698:	4613      	mov	r3, r2
    169a:	005b      	lsls	r3, r3, #1
    169c:	4413      	add	r3, r2
    169e:	009b      	lsls	r3, r3, #2
    16a0:	440b      	add	r3, r1
    16a2:	3304      	adds	r3, #4
    16a4:	681b      	ldr	r3, [r3, #0]
    16a6:	9a03      	ldr	r2, [sp, #12]
    16a8:	3224      	adds	r2, #36	; 0x24
    16aa:	0112      	lsls	r2, r2, #4
    16ac:	9901      	ldr	r1, [sp, #4]
    16ae:	440a      	add	r2, r1
    16b0:	3204      	adds	r2, #4
    16b2:	4610      	mov	r0, r2
    16b4:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    16b6:	9b03      	ldr	r3, [sp, #12]
    16b8:	3301      	adds	r3, #1
    16ba:	9303      	str	r3, [sp, #12]
    16bc:	9b01      	ldr	r3, [sp, #4]
    16be:	7b9b      	ldrb	r3, [r3, #14]
    16c0:	461a      	mov	r2, r3
    16c2:	9b03      	ldr	r3, [sp, #12]
    16c4:	4293      	cmp	r3, r2
    16c6:	d3d3      	bcc.n	1670 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    16c8:	4b27      	ldr	r3, [pc, #156]	; (1768 <Clock_Ip_InitClock+0x5b0>)
    16ca:	2200      	movs	r2, #0
    16cc:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    16ce:	4b26      	ldr	r3, [pc, #152]	; (1768 <Clock_Ip_InitClock+0x5b0>)
    16d0:	2200      	movs	r2, #0
    16d2:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    16d4:	4b24      	ldr	r3, [pc, #144]	; (1768 <Clock_Ip_InitClock+0x5b0>)
    16d6:	2201      	movs	r2, #1
    16d8:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    16da:	4b23      	ldr	r3, [pc, #140]	; (1768 <Clock_Ip_InitClock+0x5b0>)
    16dc:	2200      	movs	r2, #0
    16de:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    16e0:	f000 fa9c 	bl	1c1c <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    16e4:	2300      	movs	r3, #0
    16e6:	9303      	str	r3, [sp, #12]
    16e8:	e04c      	b.n	1784 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    16ea:	9a01      	ldr	r2, [sp, #4]
    16ec:	9b03      	ldr	r3, [sp, #12]
    16ee:	330d      	adds	r3, #13
    16f0:	00db      	lsls	r3, r3, #3
    16f2:	4413      	add	r3, r2
    16f4:	685b      	ldr	r3, [r3, #4]
    16f6:	4a1d      	ldr	r2, [pc, #116]	; (176c <Clock_Ip_InitClock+0x5b4>)
    16f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    16fc:	2b03      	cmp	r3, #3
    16fe:	d03b      	beq.n	1778 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    1700:	9b01      	ldr	r3, [sp, #4]
    1702:	9a03      	ldr	r2, [sp, #12]
    1704:	320d      	adds	r2, #13
    1706:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    170a:	490c      	ldr	r1, [pc, #48]	; (173c <Clock_Ip_InitClock+0x584>)
    170c:	4613      	mov	r3, r2
    170e:	00db      	lsls	r3, r3, #3
    1710:	4413      	add	r3, r2
    1712:	440b      	add	r3, r1
    1714:	3301      	adds	r3, #1
    1716:	781b      	ldrb	r3, [r3, #0]
    1718:	461a      	mov	r2, r3
    171a:	4b15      	ldr	r3, [pc, #84]	; (1770 <Clock_Ip_InitClock+0x5b8>)
    171c:	5c9b      	ldrb	r3, [r3, r2]
    171e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    1720:	4a14      	ldr	r2, [pc, #80]	; (1774 <Clock_Ip_InitClock+0x5bc>)
    1722:	9b02      	ldr	r3, [sp, #8]
    1724:	00db      	lsls	r3, r3, #3
    1726:	4413      	add	r3, r2
    1728:	685b      	ldr	r3, [r3, #4]
    172a:	9a03      	ldr	r2, [sp, #12]
    172c:	320d      	adds	r2, #13
    172e:	00d2      	lsls	r2, r2, #3
    1730:	9901      	ldr	r1, [sp, #4]
    1732:	440a      	add	r2, r1
    1734:	4610      	mov	r0, r2
    1736:	4798      	blx	r3
    1738:	e021      	b.n	177e <Clock_Ip_InitClock+0x5c6>
    173a:	bf00      	nop
    173c:	0000bb48 	.word	0x0000bb48
    1740:	0000bab8 	.word	0x0000bab8
    1744:	0000c094 	.word	0x0000c094
    1748:	0000bb08 	.word	0x0000bb08
    174c:	0000c154 	.word	0x0000c154
    1750:	0000bb38 	.word	0x0000bb38
    1754:	0000c144 	.word	0x0000c144
    1758:	0000bac8 	.word	0x0000bac8
    175c:	0000c09c 	.word	0x0000c09c
    1760:	0000baf8 	.word	0x0000baf8
    1764:	0000c0c4 	.word	0x0000c0c4
    1768:	1fff8b40 	.word	0x1fff8b40
    176c:	0000bf94 	.word	0x0000bf94
    1770:	0000bb18 	.word	0x0000bb18
    1774:	0000c180 	.word	0x0000c180
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    1778:	4b3a      	ldr	r3, [pc, #232]	; (1864 <Clock_Ip_InitClock+0x6ac>)
    177a:	2201      	movs	r2, #1
    177c:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    177e:	9b03      	ldr	r3, [sp, #12]
    1780:	3301      	adds	r3, #1
    1782:	9303      	str	r3, [sp, #12]
    1784:	9b01      	ldr	r3, [sp, #4]
    1786:	7adb      	ldrb	r3, [r3, #11]
    1788:	461a      	mov	r2, r3
    178a:	9b03      	ldr	r3, [sp, #12]
    178c:	4293      	cmp	r3, r2
    178e:	d3ac      	bcc.n	16ea <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    1790:	4b34      	ldr	r3, [pc, #208]	; (1864 <Clock_Ip_InitClock+0x6ac>)
    1792:	781b      	ldrb	r3, [r3, #0]
    1794:	f083 0301 	eor.w	r3, r3, #1
    1798:	b2db      	uxtb	r3, r3
    179a:	2b00      	cmp	r3, #0
    179c:	d05e      	beq.n	185c <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    179e:	2300      	movs	r3, #0
    17a0:	9303      	str	r3, [sp, #12]
    17a2:	e01f      	b.n	17e4 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    17a4:	9a01      	ldr	r2, [sp, #4]
    17a6:	9b03      	ldr	r3, [sp, #12]
    17a8:	334e      	adds	r3, #78	; 0x4e
    17aa:	00db      	lsls	r3, r3, #3
    17ac:	4413      	add	r3, r2
    17ae:	685a      	ldr	r2, [r3, #4]
    17b0:	492d      	ldr	r1, [pc, #180]	; (1868 <Clock_Ip_InitClock+0x6b0>)
    17b2:	4613      	mov	r3, r2
    17b4:	00db      	lsls	r3, r3, #3
    17b6:	4413      	add	r3, r2
    17b8:	440b      	add	r3, r1
    17ba:	3301      	adds	r3, #1
    17bc:	781b      	ldrb	r3, [r3, #0]
    17be:	461a      	mov	r2, r3
    17c0:	4b2a      	ldr	r3, [pc, #168]	; (186c <Clock_Ip_InitClock+0x6b4>)
    17c2:	5c9b      	ldrb	r3, [r3, r2]
    17c4:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    17c6:	4a2a      	ldr	r2, [pc, #168]	; (1870 <Clock_Ip_InitClock+0x6b8>)
    17c8:	9b02      	ldr	r3, [sp, #8]
    17ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    17ce:	9a03      	ldr	r2, [sp, #12]
    17d0:	324e      	adds	r2, #78	; 0x4e
    17d2:	00d2      	lsls	r2, r2, #3
    17d4:	9901      	ldr	r1, [sp, #4]
    17d6:	440a      	add	r2, r1
    17d8:	3204      	adds	r2, #4
    17da:	4610      	mov	r0, r2
    17dc:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    17de:	9b03      	ldr	r3, [sp, #12]
    17e0:	3301      	adds	r3, #1
    17e2:	9303      	str	r3, [sp, #12]
    17e4:	9b01      	ldr	r3, [sp, #4]
    17e6:	7c1b      	ldrb	r3, [r3, #16]
    17e8:	461a      	mov	r2, r3
    17ea:	9b03      	ldr	r3, [sp, #12]
    17ec:	4293      	cmp	r3, r2
    17ee:	d3d9      	bcc.n	17a4 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    17f0:	2300      	movs	r3, #0
    17f2:	9303      	str	r3, [sp, #12]
    17f4:	e028      	b.n	1848 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    17f6:	9901      	ldr	r1, [sp, #4]
    17f8:	9a03      	ldr	r2, [sp, #12]
    17fa:	4613      	mov	r3, r2
    17fc:	009b      	lsls	r3, r3, #2
    17fe:	4413      	add	r3, r2
    1800:	009b      	lsls	r3, r3, #2
    1802:	440b      	add	r3, r1
    1804:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1808:	681a      	ldr	r2, [r3, #0]
    180a:	4917      	ldr	r1, [pc, #92]	; (1868 <Clock_Ip_InitClock+0x6b0>)
    180c:	4613      	mov	r3, r2
    180e:	00db      	lsls	r3, r3, #3
    1810:	4413      	add	r3, r2
    1812:	440b      	add	r3, r1
    1814:	3301      	adds	r3, #1
    1816:	781b      	ldrb	r3, [r3, #0]
    1818:	461a      	mov	r2, r3
    181a:	4b16      	ldr	r3, [pc, #88]	; (1874 <Clock_Ip_InitClock+0x6bc>)
    181c:	5c9b      	ldrb	r3, [r3, r2]
    181e:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    1820:	4a15      	ldr	r2, [pc, #84]	; (1878 <Clock_Ip_InitClock+0x6c0>)
    1822:	9b02      	ldr	r3, [sp, #8]
    1824:	011b      	lsls	r3, r3, #4
    1826:	4413      	add	r3, r2
    1828:	330c      	adds	r3, #12
    182a:	6819      	ldr	r1, [r3, #0]
    182c:	9a03      	ldr	r2, [sp, #12]
    182e:	4613      	mov	r3, r2
    1830:	009b      	lsls	r3, r3, #2
    1832:	4413      	add	r3, r2
    1834:	009b      	lsls	r3, r3, #2
    1836:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    183a:	9a01      	ldr	r2, [sp, #4]
    183c:	4413      	add	r3, r2
    183e:	4618      	mov	r0, r3
    1840:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    1842:	9b03      	ldr	r3, [sp, #12]
    1844:	3301      	adds	r3, #1
    1846:	9303      	str	r3, [sp, #12]
    1848:	9b01      	ldr	r3, [sp, #4]
    184a:	7c9b      	ldrb	r3, [r3, #18]
    184c:	461a      	mov	r2, r3
    184e:	9b03      	ldr	r3, [sp, #12]
    1850:	4293      	cmp	r3, r2
    1852:	d3d0      	bcc.n	17f6 <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1854:	2104      	movs	r1, #4
    1856:	9801      	ldr	r0, [sp, #4]
    1858:	f002 ff48 	bl	46ec <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    185c:	bf00      	nop
    185e:	b004      	add	sp, #16
    1860:	bd10      	pop	{r4, pc}
    1862:	bf00      	nop
    1864:	1fff8b40 	.word	0x1fff8b40
    1868:	0000bb48 	.word	0x0000bb48
    186c:	0000bae8 	.word	0x0000bae8
    1870:	0000c0d0 	.word	0x0000c0d0
    1874:	0000bb38 	.word	0x0000bb38
    1878:	0000c144 	.word	0x0000c144

0000187c <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    187c:	b500      	push	{lr}
    187e:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    1880:	2302      	movs	r3, #2
    1882:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    1884:	2300      	movs	r3, #0
    1886:	9304      	str	r3, [sp, #16]
    1888:	e02c      	b.n	18e4 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    188a:	4a36      	ldr	r2, [pc, #216]	; (1964 <Clock_Ip_GetPllStatus+0xe8>)
    188c:	9b04      	ldr	r3, [sp, #16]
    188e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1892:	4935      	ldr	r1, [pc, #212]	; (1968 <Clock_Ip_GetPllStatus+0xec>)
    1894:	4613      	mov	r3, r2
    1896:	00db      	lsls	r3, r3, #3
    1898:	4413      	add	r3, r2
    189a:	440b      	add	r3, r1
    189c:	3301      	adds	r3, #1
    189e:	781b      	ldrb	r3, [r3, #0]
    18a0:	461a      	mov	r2, r3
    18a2:	4b32      	ldr	r3, [pc, #200]	; (196c <Clock_Ip_GetPllStatus+0xf0>)
    18a4:	5c9b      	ldrb	r3, [r3, r2]
    18a6:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    18a8:	4931      	ldr	r1, [pc, #196]	; (1970 <Clock_Ip_GetPllStatus+0xf4>)
    18aa:	9a03      	ldr	r2, [sp, #12]
    18ac:	4613      	mov	r3, r2
    18ae:	009b      	lsls	r3, r3, #2
    18b0:	4413      	add	r3, r2
    18b2:	009b      	lsls	r3, r3, #2
    18b4:	440b      	add	r3, r1
    18b6:	3308      	adds	r3, #8
    18b8:	681b      	ldr	r3, [r3, #0]
    18ba:	492a      	ldr	r1, [pc, #168]	; (1964 <Clock_Ip_GetPllStatus+0xe8>)
    18bc:	9a04      	ldr	r2, [sp, #16]
    18be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    18c2:	4610      	mov	r0, r2
    18c4:	4798      	blx	r3
    18c6:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    18c8:	9b02      	ldr	r3, [sp, #8]
    18ca:	2b01      	cmp	r3, #1
    18cc:	d102      	bne.n	18d4 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    18ce:	2301      	movs	r3, #1
    18d0:	9305      	str	r3, [sp, #20]
            break;
    18d2:	e00d      	b.n	18f0 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    18d4:	9b02      	ldr	r3, [sp, #8]
    18d6:	2b02      	cmp	r3, #2
    18d8:	d101      	bne.n	18de <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    18da:	2300      	movs	r3, #0
    18dc:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    18de:	9b04      	ldr	r3, [sp, #16]
    18e0:	3301      	adds	r3, #1
    18e2:	9304      	str	r3, [sp, #16]
    18e4:	4b23      	ldr	r3, [pc, #140]	; (1974 <Clock_Ip_GetPllStatus+0xf8>)
    18e6:	789b      	ldrb	r3, [r3, #2]
    18e8:	461a      	mov	r2, r3
    18ea:	9b04      	ldr	r3, [sp, #16]
    18ec:	4293      	cmp	r3, r2
    18ee:	d3cc      	bcc.n	188a <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    18f0:	9b05      	ldr	r3, [sp, #20]
    18f2:	2b00      	cmp	r3, #0
    18f4:	d130      	bne.n	1958 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    18f6:	2300      	movs	r3, #0
    18f8:	9304      	str	r3, [sp, #16]
    18fa:	e027      	b.n	194c <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    18fc:	4a1e      	ldr	r2, [pc, #120]	; (1978 <Clock_Ip_GetPllStatus+0xfc>)
    18fe:	9b04      	ldr	r3, [sp, #16]
    1900:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1904:	4918      	ldr	r1, [pc, #96]	; (1968 <Clock_Ip_GetPllStatus+0xec>)
    1906:	4613      	mov	r3, r2
    1908:	00db      	lsls	r3, r3, #3
    190a:	4413      	add	r3, r2
    190c:	440b      	add	r3, r1
    190e:	3301      	adds	r3, #1
    1910:	781b      	ldrb	r3, [r3, #0]
    1912:	461a      	mov	r2, r3
    1914:	4b19      	ldr	r3, [pc, #100]	; (197c <Clock_Ip_GetPllStatus+0x100>)
    1916:	5c9b      	ldrb	r3, [r3, r2]
    1918:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    191a:	4919      	ldr	r1, [pc, #100]	; (1980 <Clock_Ip_GetPllStatus+0x104>)
    191c:	9a03      	ldr	r2, [sp, #12]
    191e:	4613      	mov	r3, r2
    1920:	005b      	lsls	r3, r3, #1
    1922:	4413      	add	r3, r2
    1924:	009b      	lsls	r3, r3, #2
    1926:	440b      	add	r3, r1
    1928:	3308      	adds	r3, #8
    192a:	681b      	ldr	r3, [r3, #0]
    192c:	4912      	ldr	r1, [pc, #72]	; (1978 <Clock_Ip_GetPllStatus+0xfc>)
    192e:	9a04      	ldr	r2, [sp, #16]
    1930:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1934:	4610      	mov	r0, r2
    1936:	4798      	blx	r3
    1938:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    193a:	9b01      	ldr	r3, [sp, #4]
    193c:	2b01      	cmp	r3, #1
    193e:	d102      	bne.n	1946 <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    1940:	2301      	movs	r3, #1
    1942:	9305      	str	r3, [sp, #20]
                break;
    1944:	e008      	b.n	1958 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    1946:	9b04      	ldr	r3, [sp, #16]
    1948:	3301      	adds	r3, #1
    194a:	9304      	str	r3, [sp, #16]
    194c:	4b09      	ldr	r3, [pc, #36]	; (1974 <Clock_Ip_GetPllStatus+0xf8>)
    194e:	78db      	ldrb	r3, [r3, #3]
    1950:	461a      	mov	r2, r3
    1952:	9b04      	ldr	r3, [sp, #16]
    1954:	4293      	cmp	r3, r2
    1956:	d3d1      	bcc.n	18fc <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    1958:	9b05      	ldr	r3, [sp, #20]
}
    195a:	4618      	mov	r0, r3
    195c:	b007      	add	sp, #28
    195e:	f85d fb04 	ldr.w	pc, [sp], #4
    1962:	bf00      	nop
    1964:	0000c050 	.word	0x0000c050
    1968:	0000bb48 	.word	0x0000bb48
    196c:	0000bb08 	.word	0x0000bb08
    1970:	0000c154 	.word	0x0000c154
    1974:	1fff8b40 	.word	0x1fff8b40
    1978:	0000c054 	.word	0x0000c054
    197c:	0000baf8 	.word	0x0000baf8
    1980:	0000c0c4 	.word	0x0000c0c4

00001984 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    1984:	b500      	push	{lr}
    1986:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    1988:	4b55      	ldr	r3, [pc, #340]	; (1ae0 <Clock_Ip_DistributePll+0x15c>)
    198a:	681b      	ldr	r3, [r3, #0]
    198c:	2b00      	cmp	r3, #0
    198e:	f000 80a2 	beq.w	1ad6 <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    1992:	2300      	movs	r3, #0
    1994:	9301      	str	r3, [sp, #4]
    1996:	e02c      	b.n	19f2 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    1998:	4b51      	ldr	r3, [pc, #324]	; (1ae0 <Clock_Ip_DistributePll+0x15c>)
    199a:	681a      	ldr	r2, [r3, #0]
    199c:	9b01      	ldr	r3, [sp, #4]
    199e:	330d      	adds	r3, #13
    19a0:	00db      	lsls	r3, r3, #3
    19a2:	4413      	add	r3, r2
    19a4:	685b      	ldr	r3, [r3, #4]
    19a6:	4a4f      	ldr	r2, [pc, #316]	; (1ae4 <Clock_Ip_DistributePll+0x160>)
    19a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    19ac:	2b03      	cmp	r3, #3
    19ae:	d11d      	bne.n	19ec <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    19b0:	4b4b      	ldr	r3, [pc, #300]	; (1ae0 <Clock_Ip_DistributePll+0x15c>)
    19b2:	681b      	ldr	r3, [r3, #0]
    19b4:	9a01      	ldr	r2, [sp, #4]
    19b6:	320d      	adds	r2, #13
    19b8:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    19bc:	494a      	ldr	r1, [pc, #296]	; (1ae8 <Clock_Ip_DistributePll+0x164>)
    19be:	4613      	mov	r3, r2
    19c0:	00db      	lsls	r3, r3, #3
    19c2:	4413      	add	r3, r2
    19c4:	440b      	add	r3, r1
    19c6:	3301      	adds	r3, #1
    19c8:	781b      	ldrb	r3, [r3, #0]
    19ca:	461a      	mov	r2, r3
    19cc:	4b47      	ldr	r3, [pc, #284]	; (1aec <Clock_Ip_DistributePll+0x168>)
    19ce:	5c9b      	ldrb	r3, [r3, r2]
    19d0:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    19d2:	4a47      	ldr	r2, [pc, #284]	; (1af0 <Clock_Ip_DistributePll+0x16c>)
    19d4:	9b00      	ldr	r3, [sp, #0]
    19d6:	00db      	lsls	r3, r3, #3
    19d8:	4413      	add	r3, r2
    19da:	685b      	ldr	r3, [r3, #4]
    19dc:	4a40      	ldr	r2, [pc, #256]	; (1ae0 <Clock_Ip_DistributePll+0x15c>)
    19de:	6811      	ldr	r1, [r2, #0]
    19e0:	9a01      	ldr	r2, [sp, #4]
    19e2:	320d      	adds	r2, #13
    19e4:	00d2      	lsls	r2, r2, #3
    19e6:	440a      	add	r2, r1
    19e8:	4610      	mov	r0, r2
    19ea:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    19ec:	9b01      	ldr	r3, [sp, #4]
    19ee:	3301      	adds	r3, #1
    19f0:	9301      	str	r3, [sp, #4]
    19f2:	4b3b      	ldr	r3, [pc, #236]	; (1ae0 <Clock_Ip_DistributePll+0x15c>)
    19f4:	681b      	ldr	r3, [r3, #0]
    19f6:	7adb      	ldrb	r3, [r3, #11]
    19f8:	461a      	mov	r2, r3
    19fa:	9b01      	ldr	r3, [sp, #4]
    19fc:	4293      	cmp	r3, r2
    19fe:	d3cb      	bcc.n	1998 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    1a00:	4b3c      	ldr	r3, [pc, #240]	; (1af4 <Clock_Ip_DistributePll+0x170>)
    1a02:	781b      	ldrb	r3, [r3, #0]
    1a04:	2b00      	cmp	r3, #0
    1a06:	d066      	beq.n	1ad6 <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1a08:	2300      	movs	r3, #0
    1a0a:	9301      	str	r3, [sp, #4]
    1a0c:	e021      	b.n	1a52 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    1a0e:	4b34      	ldr	r3, [pc, #208]	; (1ae0 <Clock_Ip_DistributePll+0x15c>)
    1a10:	681a      	ldr	r2, [r3, #0]
    1a12:	9b01      	ldr	r3, [sp, #4]
    1a14:	334e      	adds	r3, #78	; 0x4e
    1a16:	00db      	lsls	r3, r3, #3
    1a18:	4413      	add	r3, r2
    1a1a:	685a      	ldr	r2, [r3, #4]
    1a1c:	4932      	ldr	r1, [pc, #200]	; (1ae8 <Clock_Ip_DistributePll+0x164>)
    1a1e:	4613      	mov	r3, r2
    1a20:	00db      	lsls	r3, r3, #3
    1a22:	4413      	add	r3, r2
    1a24:	440b      	add	r3, r1
    1a26:	3301      	adds	r3, #1
    1a28:	781b      	ldrb	r3, [r3, #0]
    1a2a:	461a      	mov	r2, r3
    1a2c:	4b32      	ldr	r3, [pc, #200]	; (1af8 <Clock_Ip_DistributePll+0x174>)
    1a2e:	5c9b      	ldrb	r3, [r3, r2]
    1a30:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    1a32:	4a32      	ldr	r2, [pc, #200]	; (1afc <Clock_Ip_DistributePll+0x178>)
    1a34:	9b00      	ldr	r3, [sp, #0]
    1a36:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1a3a:	4a29      	ldr	r2, [pc, #164]	; (1ae0 <Clock_Ip_DistributePll+0x15c>)
    1a3c:	6811      	ldr	r1, [r2, #0]
    1a3e:	9a01      	ldr	r2, [sp, #4]
    1a40:	324e      	adds	r2, #78	; 0x4e
    1a42:	00d2      	lsls	r2, r2, #3
    1a44:	440a      	add	r2, r1
    1a46:	3204      	adds	r2, #4
    1a48:	4610      	mov	r0, r2
    1a4a:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    1a4c:	9b01      	ldr	r3, [sp, #4]
    1a4e:	3301      	adds	r3, #1
    1a50:	9301      	str	r3, [sp, #4]
    1a52:	4b23      	ldr	r3, [pc, #140]	; (1ae0 <Clock_Ip_DistributePll+0x15c>)
    1a54:	681b      	ldr	r3, [r3, #0]
    1a56:	7c1b      	ldrb	r3, [r3, #16]
    1a58:	461a      	mov	r2, r3
    1a5a:	9b01      	ldr	r3, [sp, #4]
    1a5c:	4293      	cmp	r3, r2
    1a5e:	d3d6      	bcc.n	1a0e <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1a60:	2300      	movs	r3, #0
    1a62:	9301      	str	r3, [sp, #4]
    1a64:	e02a      	b.n	1abc <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    1a66:	4b1e      	ldr	r3, [pc, #120]	; (1ae0 <Clock_Ip_DistributePll+0x15c>)
    1a68:	6819      	ldr	r1, [r3, #0]
    1a6a:	9a01      	ldr	r2, [sp, #4]
    1a6c:	4613      	mov	r3, r2
    1a6e:	009b      	lsls	r3, r3, #2
    1a70:	4413      	add	r3, r2
    1a72:	009b      	lsls	r3, r3, #2
    1a74:	440b      	add	r3, r1
    1a76:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1a7a:	681a      	ldr	r2, [r3, #0]
    1a7c:	491a      	ldr	r1, [pc, #104]	; (1ae8 <Clock_Ip_DistributePll+0x164>)
    1a7e:	4613      	mov	r3, r2
    1a80:	00db      	lsls	r3, r3, #3
    1a82:	4413      	add	r3, r2
    1a84:	440b      	add	r3, r1
    1a86:	3301      	adds	r3, #1
    1a88:	781b      	ldrb	r3, [r3, #0]
    1a8a:	461a      	mov	r2, r3
    1a8c:	4b1c      	ldr	r3, [pc, #112]	; (1b00 <Clock_Ip_DistributePll+0x17c>)
    1a8e:	5c9b      	ldrb	r3, [r3, r2]
    1a90:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    1a92:	4a1c      	ldr	r2, [pc, #112]	; (1b04 <Clock_Ip_DistributePll+0x180>)
    1a94:	9b00      	ldr	r3, [sp, #0]
    1a96:	011b      	lsls	r3, r3, #4
    1a98:	4413      	add	r3, r2
    1a9a:	330c      	adds	r3, #12
    1a9c:	6819      	ldr	r1, [r3, #0]
    1a9e:	4b10      	ldr	r3, [pc, #64]	; (1ae0 <Clock_Ip_DistributePll+0x15c>)
    1aa0:	6818      	ldr	r0, [r3, #0]
    1aa2:	9a01      	ldr	r2, [sp, #4]
    1aa4:	4613      	mov	r3, r2
    1aa6:	009b      	lsls	r3, r3, #2
    1aa8:	4413      	add	r3, r2
    1aaa:	009b      	lsls	r3, r3, #2
    1aac:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    1ab0:	4403      	add	r3, r0
    1ab2:	4618      	mov	r0, r3
    1ab4:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    1ab6:	9b01      	ldr	r3, [sp, #4]
    1ab8:	3301      	adds	r3, #1
    1aba:	9301      	str	r3, [sp, #4]
    1abc:	4b08      	ldr	r3, [pc, #32]	; (1ae0 <Clock_Ip_DistributePll+0x15c>)
    1abe:	681b      	ldr	r3, [r3, #0]
    1ac0:	7c9b      	ldrb	r3, [r3, #18]
    1ac2:	461a      	mov	r2, r3
    1ac4:	9b01      	ldr	r3, [sp, #4]
    1ac6:	4293      	cmp	r3, r2
    1ac8:	d3cd      	bcc.n	1a66 <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    1aca:	4b05      	ldr	r3, [pc, #20]	; (1ae0 <Clock_Ip_DistributePll+0x15c>)
    1acc:	681b      	ldr	r3, [r3, #0]
    1ace:	2104      	movs	r1, #4
    1ad0:	4618      	mov	r0, r3
    1ad2:	f002 fe0b 	bl	46ec <Clock_Ip_Command>
        }
    }
}
    1ad6:	bf00      	nop
    1ad8:	b003      	add	sp, #12
    1ada:	f85d fb04 	ldr.w	pc, [sp], #4
    1ade:	bf00      	nop
    1ae0:	1fff8b38 	.word	0x1fff8b38
    1ae4:	0000bf94 	.word	0x0000bf94
    1ae8:	0000bb48 	.word	0x0000bb48
    1aec:	0000bb18 	.word	0x0000bb18
    1af0:	0000c180 	.word	0x0000c180
    1af4:	1fff8b40 	.word	0x1fff8b40
    1af8:	0000bae8 	.word	0x0000bae8
    1afc:	0000c0d0 	.word	0x0000c0d0
    1b00:	0000bb38 	.word	0x0000bb38
    1b04:	0000c144 	.word	0x0000c144

00001b08 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    1b08:	b500      	push	{lr}
    1b0a:	b085      	sub	sp, #20
    1b0c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1b0e:	490c      	ldr	r1, [pc, #48]	; (1b40 <Clock_Ip_DisableClockMonitor+0x38>)
    1b10:	9a01      	ldr	r2, [sp, #4]
    1b12:	4613      	mov	r3, r2
    1b14:	00db      	lsls	r3, r3, #3
    1b16:	4413      	add	r3, r2
    1b18:	440b      	add	r3, r1
    1b1a:	3301      	adds	r3, #1
    1b1c:	781b      	ldrb	r3, [r3, #0]
    1b1e:	461a      	mov	r2, r3
    1b20:	4b08      	ldr	r3, [pc, #32]	; (1b44 <Clock_Ip_DisableClockMonitor+0x3c>)
    1b22:	5c9b      	ldrb	r3, [r3, r2]
    1b24:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    1b26:	4a08      	ldr	r2, [pc, #32]	; (1b48 <Clock_Ip_DisableClockMonitor+0x40>)
    1b28:	9b03      	ldr	r3, [sp, #12]
    1b2a:	011b      	lsls	r3, r3, #4
    1b2c:	4413      	add	r3, r2
    1b2e:	3308      	adds	r3, #8
    1b30:	681b      	ldr	r3, [r3, #0]
    1b32:	9801      	ldr	r0, [sp, #4]
    1b34:	4798      	blx	r3
}
    1b36:	bf00      	nop
    1b38:	b005      	add	sp, #20
    1b3a:	f85d fb04 	ldr.w	pc, [sp], #4
    1b3e:	bf00      	nop
    1b40:	0000bb48 	.word	0x0000bb48
    1b44:	0000bb38 	.word	0x0000bb38
    1b48:	0000c144 	.word	0x0000c144

00001b4c <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    1b4c:	b082      	sub	sp, #8
    1b4e:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    1b50:	4a02      	ldr	r2, [pc, #8]	; (1b5c <Clock_Ip_InstallNotificationsCallback+0x10>)
    1b52:	9b01      	ldr	r3, [sp, #4]
    1b54:	6013      	str	r3, [r2, #0]
}
    1b56:	bf00      	nop
    1b58:	b002      	add	sp, #8
    1b5a:	4770      	bx	lr
    1b5c:	1fff8b1c 	.word	0x1fff8b1c

00001b60 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    1b60:	b500      	push	{lr}
    1b62:	b085      	sub	sp, #20
    1b64:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1b66:	490c      	ldr	r1, [pc, #48]	; (1b98 <Clock_Ip_DisableModuleClock+0x38>)
    1b68:	9a01      	ldr	r2, [sp, #4]
    1b6a:	4613      	mov	r3, r2
    1b6c:	00db      	lsls	r3, r3, #3
    1b6e:	4413      	add	r3, r2
    1b70:	440b      	add	r3, r1
    1b72:	3301      	adds	r3, #1
    1b74:	781b      	ldrb	r3, [r3, #0]
    1b76:	461a      	mov	r2, r3
    1b78:	4b08      	ldr	r3, [pc, #32]	; (1b9c <Clock_Ip_DisableModuleClock+0x3c>)
    1b7a:	5c9b      	ldrb	r3, [r3, r2]
    1b7c:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    1b7e:	4a08      	ldr	r2, [pc, #32]	; (1ba0 <Clock_Ip_DisableModuleClock+0x40>)
    1b80:	9b03      	ldr	r3, [sp, #12]
    1b82:	00db      	lsls	r3, r3, #3
    1b84:	4413      	add	r3, r2
    1b86:	685b      	ldr	r3, [r3, #4]
    1b88:	2101      	movs	r1, #1
    1b8a:	9801      	ldr	r0, [sp, #4]
    1b8c:	4798      	blx	r3
}
    1b8e:	bf00      	nop
    1b90:	b005      	add	sp, #20
    1b92:	f85d fb04 	ldr.w	pc, [sp], #4
    1b96:	bf00      	nop
    1b98:	0000bb48 	.word	0x0000bb48
    1b9c:	0000bae8 	.word	0x0000bae8
    1ba0:	0000c0d0 	.word	0x0000c0d0

00001ba4 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    1ba4:	b500      	push	{lr}
    1ba6:	b085      	sub	sp, #20
    1ba8:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    1baa:	490c      	ldr	r1, [pc, #48]	; (1bdc <Clock_Ip_EnableModuleClock+0x38>)
    1bac:	9a01      	ldr	r2, [sp, #4]
    1bae:	4613      	mov	r3, r2
    1bb0:	00db      	lsls	r3, r3, #3
    1bb2:	4413      	add	r3, r2
    1bb4:	440b      	add	r3, r1
    1bb6:	3301      	adds	r3, #1
    1bb8:	781b      	ldrb	r3, [r3, #0]
    1bba:	461a      	mov	r2, r3
    1bbc:	4b08      	ldr	r3, [pc, #32]	; (1be0 <Clock_Ip_EnableModuleClock+0x3c>)
    1bbe:	5c9b      	ldrb	r3, [r3, r2]
    1bc0:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    1bc2:	4a08      	ldr	r2, [pc, #32]	; (1be4 <Clock_Ip_EnableModuleClock+0x40>)
    1bc4:	9b03      	ldr	r3, [sp, #12]
    1bc6:	00db      	lsls	r3, r3, #3
    1bc8:	4413      	add	r3, r2
    1bca:	685b      	ldr	r3, [r3, #4]
    1bcc:	2100      	movs	r1, #0
    1bce:	9801      	ldr	r0, [sp, #4]
    1bd0:	4798      	blx	r3
}
    1bd2:	bf00      	nop
    1bd4:	b005      	add	sp, #20
    1bd6:	f85d fb04 	ldr.w	pc, [sp], #4
    1bda:	bf00      	nop
    1bdc:	0000bb48 	.word	0x0000bb48
    1be0:	0000bae8 	.word	0x0000bae8
    1be4:	0000c0d0 	.word	0x0000c0d0

00001be8 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    1be8:	b500      	push	{lr}
    1bea:	b083      	sub	sp, #12
    1bec:	9001      	str	r0, [sp, #4]
    1bee:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    1bf0:	4b08      	ldr	r3, [pc, #32]	; (1c14 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    1bf2:	2200      	movs	r2, #0
    1bf4:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1bf6:	4b08      	ldr	r3, [pc, #32]	; (1c18 <Clock_Ip_PowerModeChangeNotification+0x30>)
    1bf8:	681b      	ldr	r3, [r3, #0]
    1bfa:	2102      	movs	r1, #2
    1bfc:	4618      	mov	r0, r3
    1bfe:	f002 fd75 	bl	46ec <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    1c02:	9900      	ldr	r1, [sp, #0]
    1c04:	9801      	ldr	r0, [sp, #4]
    1c06:	f002 fc51 	bl	44ac <Clock_Ip_ClockPowerModeChangeNotification>
}
    1c0a:	bf00      	nop
    1c0c:	b003      	add	sp, #12
    1c0e:	f85d fb04 	ldr.w	pc, [sp], #4
    1c12:	bf00      	nop
    1c14:	1fff8b18 	.word	0x1fff8b18
    1c18:	1fff8b38 	.word	0x1fff8b38

00001c1c <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    1c1c:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    1c1e:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    1c22:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    1c24:	4b06      	ldr	r3, [pc, #24]	; (1c40 <Clock_Ip_SetWaitStates+0x24>)
    1c26:	785b      	ldrb	r3, [r3, #1]
    1c28:	2b00      	cmp	r3, #0
    1c2a:	d005      	beq.n	1c38 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    1c2c:	9b01      	ldr	r3, [sp, #4]
    1c2e:	3b01      	subs	r3, #1
    1c30:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    1c32:	9b01      	ldr	r3, [sp, #4]
    1c34:	2b00      	cmp	r3, #0
    1c36:	d1f9      	bne.n	1c2c <Clock_Ip_SetWaitStates+0x10>
    }
}
    1c38:	bf00      	nop
    1c3a:	b002      	add	sp, #8
    1c3c:	4770      	bx	lr
    1c3e:	bf00      	nop
    1c40:	1fff8b40 	.word	0x1fff8b40

00001c44 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    1c44:	b500      	push	{lr}
    1c46:	b083      	sub	sp, #12
    1c48:	9001      	str	r0, [sp, #4]
    1c4a:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    1c4c:	4b04      	ldr	r3, [pc, #16]	; (1c60 <Clock_Ip_ReportClockErrors+0x1c>)
    1c4e:	681b      	ldr	r3, [r3, #0]
    1c50:	9900      	ldr	r1, [sp, #0]
    1c52:	9801      	ldr	r0, [sp, #4]
    1c54:	4798      	blx	r3
}
    1c56:	bf00      	nop
    1c58:	b003      	add	sp, #12
    1c5a:	f85d fb04 	ldr.w	pc, [sp], #4
    1c5e:	bf00      	nop
    1c60:	1fff8b1c 	.word	0x1fff8b1c

00001c64 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    1c64:	b500      	push	{lr}
    1c66:	b085      	sub	sp, #20
    1c68:	9003      	str	r0, [sp, #12]
    1c6a:	9102      	str	r1, [sp, #8]
    1c6c:	9201      	str	r2, [sp, #4]
    1c6e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    1c70:	2000      	movs	r0, #0
    1c72:	f7fe ffd0 	bl	c16 <OsIf_GetCounter>
    1c76:	4602      	mov	r2, r0
    1c78:	9b03      	ldr	r3, [sp, #12]
    1c7a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    1c7c:	9b02      	ldr	r3, [sp, #8]
    1c7e:	2200      	movs	r2, #0
    1c80:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    1c82:	2100      	movs	r1, #0
    1c84:	9800      	ldr	r0, [sp, #0]
    1c86:	f7ff f812 	bl	cae <OsIf_MicrosToTicks>
    1c8a:	4602      	mov	r2, r0
    1c8c:	9b01      	ldr	r3, [sp, #4]
    1c8e:	601a      	str	r2, [r3, #0]
}
    1c90:	bf00      	nop
    1c92:	b005      	add	sp, #20
    1c94:	f85d fb04 	ldr.w	pc, [sp], #4

00001c98 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    1c98:	b500      	push	{lr}
    1c9a:	b087      	sub	sp, #28
    1c9c:	9003      	str	r0, [sp, #12]
    1c9e:	9102      	str	r1, [sp, #8]
    1ca0:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    1ca2:	2300      	movs	r3, #0
    1ca4:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    1ca8:	2100      	movs	r1, #0
    1caa:	9803      	ldr	r0, [sp, #12]
    1cac:	f7fe ffcc 	bl	c48 <OsIf_GetElapsed>
    1cb0:	4602      	mov	r2, r0
    1cb2:	9b02      	ldr	r3, [sp, #8]
    1cb4:	681b      	ldr	r3, [r3, #0]
    1cb6:	441a      	add	r2, r3
    1cb8:	9b02      	ldr	r3, [sp, #8]
    1cba:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    1cbc:	9b02      	ldr	r3, [sp, #8]
    1cbe:	681b      	ldr	r3, [r3, #0]
    1cc0:	9a01      	ldr	r2, [sp, #4]
    1cc2:	429a      	cmp	r2, r3
    1cc4:	d802      	bhi.n	1ccc <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    1cc6:	2301      	movs	r3, #1
    1cc8:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    1ccc:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1cd0:	4618      	mov	r0, r3
    1cd2:	b007      	add	sp, #28
    1cd4:	f85d fb04 	ldr.w	pc, [sp], #4

00001cd8 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    1cd8:	b082      	sub	sp, #8
    1cda:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    1cdc:	bf00      	nop
    1cde:	b002      	add	sp, #8
    1ce0:	4770      	bx	lr

00001ce2 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    1ce2:	b500      	push	{lr}
    1ce4:	b083      	sub	sp, #12
    1ce6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1ce8:	9b01      	ldr	r3, [sp, #4]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d002      	beq.n	1cf4 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    1cee:	9801      	ldr	r0, [sp, #4]
    1cf0:	f000 f8ad 	bl	1e4e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1cf4:	bf00      	nop
    1cf6:	b003      	add	sp, #12
    1cf8:	f85d fb04 	ldr.w	pc, [sp], #4

00001cfc <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    1cfc:	b500      	push	{lr}
    1cfe:	b083      	sub	sp, #12
    1d00:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d02:	9b01      	ldr	r3, [sp, #4]
    1d04:	2b00      	cmp	r3, #0
    1d06:	d002      	beq.n	1d0e <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    1d08:	9801      	ldr	r0, [sp, #4]
    1d0a:	f000 f8cd 	bl	1ea8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d0e:	bf00      	nop
    1d10:	b003      	add	sp, #12
    1d12:	f85d fb04 	ldr.w	pc, [sp], #4

00001d16 <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1d16:	b500      	push	{lr}
    1d18:	b083      	sub	sp, #12
    1d1a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d1c:	9b01      	ldr	r3, [sp, #4]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d002      	beq.n	1d28 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    1d22:	9801      	ldr	r0, [sp, #4]
    1d24:	f000 f8ee 	bl	1f04 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d28:	bf00      	nop
    1d2a:	b003      	add	sp, #12
    1d2c:	f85d fb04 	ldr.w	pc, [sp], #4

00001d30 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1d30:	b500      	push	{lr}
    1d32:	b083      	sub	sp, #12
    1d34:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d36:	9b01      	ldr	r3, [sp, #4]
    1d38:	2b00      	cmp	r3, #0
    1d3a:	d002      	beq.n	1d42 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    1d3c:	9801      	ldr	r0, [sp, #4]
    1d3e:	f000 f8f9 	bl	1f34 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d42:	bf00      	nop
    1d44:	b003      	add	sp, #12
    1d46:	f85d fb04 	ldr.w	pc, [sp], #4

00001d4a <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1d4a:	b500      	push	{lr}
    1d4c:	b083      	sub	sp, #12
    1d4e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d50:	9b01      	ldr	r3, [sp, #4]
    1d52:	2b00      	cmp	r3, #0
    1d54:	d002      	beq.n	1d5c <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    1d56:	9801      	ldr	r0, [sp, #4]
    1d58:	f000 f904 	bl	1f64 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d5c:	bf00      	nop
    1d5e:	b003      	add	sp, #12
    1d60:	f85d fb04 	ldr.w	pc, [sp], #4

00001d64 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1d64:	b500      	push	{lr}
    1d66:	b083      	sub	sp, #12
    1d68:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d6a:	9b01      	ldr	r3, [sp, #4]
    1d6c:	2b00      	cmp	r3, #0
    1d6e:	d002      	beq.n	1d76 <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    1d70:	9801      	ldr	r0, [sp, #4]
    1d72:	f000 f90f 	bl	1f94 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d76:	bf00      	nop
    1d78:	b003      	add	sp, #12
    1d7a:	f85d fb04 	ldr.w	pc, [sp], #4

00001d7e <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1d7e:	b500      	push	{lr}
    1d80:	b083      	sub	sp, #12
    1d82:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d84:	9b01      	ldr	r3, [sp, #4]
    1d86:	2b00      	cmp	r3, #0
    1d88:	d002      	beq.n	1d90 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    1d8a:	9801      	ldr	r0, [sp, #4]
    1d8c:	f000 f91a 	bl	1fc4 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1d90:	bf00      	nop
    1d92:	b003      	add	sp, #12
    1d94:	f85d fb04 	ldr.w	pc, [sp], #4

00001d98 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1d98:	b500      	push	{lr}
    1d9a:	b083      	sub	sp, #12
    1d9c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1d9e:	9b01      	ldr	r3, [sp, #4]
    1da0:	2b00      	cmp	r3, #0
    1da2:	d002      	beq.n	1daa <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    1da4:	9801      	ldr	r0, [sp, #4]
    1da6:	f000 f925 	bl	1ff4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1daa:	bf00      	nop
    1dac:	b003      	add	sp, #12
    1dae:	f85d fb04 	ldr.w	pc, [sp], #4

00001db2 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    1db2:	b500      	push	{lr}
    1db4:	b083      	sub	sp, #12
    1db6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1db8:	9b01      	ldr	r3, [sp, #4]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d002      	beq.n	1dc4 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    1dbe:	9801      	ldr	r0, [sp, #4]
    1dc0:	f000 f930 	bl	2024 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1dc4:	bf00      	nop
    1dc6:	b003      	add	sp, #12
    1dc8:	f85d fb04 	ldr.w	pc, [sp], #4

00001dcc <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    1dcc:	b500      	push	{lr}
    1dce:	b083      	sub	sp, #12
    1dd0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1dd2:	9b01      	ldr	r3, [sp, #4]
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	d002      	beq.n	1dde <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    1dd8:	9801      	ldr	r0, [sp, #4]
    1dda:	f000 f93b 	bl	2054 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1dde:	bf00      	nop
    1de0:	b003      	add	sp, #12
    1de2:	f85d fb04 	ldr.w	pc, [sp], #4

00001de6 <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    1de6:	b500      	push	{lr}
    1de8:	b083      	sub	sp, #12
    1dea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1dec:	9b01      	ldr	r3, [sp, #4]
    1dee:	2b00      	cmp	r3, #0
    1df0:	d002      	beq.n	1df8 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    1df2:	9801      	ldr	r0, [sp, #4]
    1df4:	f000 f946 	bl	2084 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1df8:	bf00      	nop
    1dfa:	b003      	add	sp, #12
    1dfc:	f85d fb04 	ldr.w	pc, [sp], #4

00001e00 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    1e00:	b500      	push	{lr}
    1e02:	b083      	sub	sp, #12
    1e04:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1e06:	9b01      	ldr	r3, [sp, #4]
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d002      	beq.n	1e12 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    1e0c:	9801      	ldr	r0, [sp, #4]
    1e0e:	f000 f951 	bl	20b4 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1e12:	bf00      	nop
    1e14:	b003      	add	sp, #12
    1e16:	f85d fb04 	ldr.w	pc, [sp], #4

00001e1a <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    1e1a:	b500      	push	{lr}
    1e1c:	b083      	sub	sp, #12
    1e1e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1e20:	9b01      	ldr	r3, [sp, #4]
    1e22:	2b00      	cmp	r3, #0
    1e24:	d002      	beq.n	1e2c <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    1e26:	9801      	ldr	r0, [sp, #4]
    1e28:	f000 f95e 	bl	20e8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1e2c:	bf00      	nop
    1e2e:	b003      	add	sp, #12
    1e30:	f85d fb04 	ldr.w	pc, [sp], #4

00001e34 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    1e34:	b500      	push	{lr}
    1e36:	b083      	sub	sp, #12
    1e38:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    1e3a:	9b01      	ldr	r3, [sp, #4]
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d002      	beq.n	1e46 <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    1e40:	9801      	ldr	r0, [sp, #4]
    1e42:	f000 f98b 	bl	215c <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    1e46:	bf00      	nop
    1e48:	b003      	add	sp, #12
    1e4a:	f85d fb04 	ldr.w	pc, [sp], #4

00001e4e <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1e4e:	b086      	sub	sp, #24
    1e50:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    1e52:	9b01      	ldr	r3, [sp, #4]
    1e54:	681a      	ldr	r2, [r3, #0]
    1e56:	4911      	ldr	r1, [pc, #68]	; (1e9c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    1e58:	4613      	mov	r3, r2
    1e5a:	00db      	lsls	r3, r3, #3
    1e5c:	4413      	add	r3, r2
    1e5e:	440b      	add	r3, r1
    1e60:	781b      	ldrb	r3, [r3, #0]
    1e62:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    1e64:	9b01      	ldr	r3, [sp, #4]
    1e66:	685b      	ldr	r3, [r3, #4]
    1e68:	4a0d      	ldr	r2, [pc, #52]	; (1ea0 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    1e6a:	5cd3      	ldrb	r3, [r2, r3]
    1e6c:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    1e6e:	4a0d      	ldr	r2, [pc, #52]	; (1ea4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1e70:	9b05      	ldr	r3, [sp, #20]
    1e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e76:	681b      	ldr	r3, [r3, #0]
    1e78:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    1e7a:	9b03      	ldr	r3, [sp, #12]
    1e7c:	f023 0307 	bic.w	r3, r3, #7
    1e80:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    1e82:	9a03      	ldr	r2, [sp, #12]
    1e84:	9b04      	ldr	r3, [sp, #16]
    1e86:	4313      	orrs	r3, r2
    1e88:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    1e8a:	4a06      	ldr	r2, [pc, #24]	; (1ea4 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    1e8c:	9b05      	ldr	r3, [sp, #20]
    1e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1e92:	9a03      	ldr	r2, [sp, #12]
    1e94:	601a      	str	r2, [r3, #0]
}
    1e96:	bf00      	nop
    1e98:	b006      	add	sp, #24
    1e9a:	4770      	bx	lr
    1e9c:	0000bb48 	.word	0x0000bb48
    1ea0:	0000bf40 	.word	0x0000bf40
    1ea4:	0000bf84 	.word	0x0000bf84

00001ea8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1ea8:	b086      	sub	sp, #24
    1eaa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    1eac:	9b01      	ldr	r3, [sp, #4]
    1eae:	681a      	ldr	r2, [r3, #0]
    1eb0:	4911      	ldr	r1, [pc, #68]	; (1ef8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    1eb2:	4613      	mov	r3, r2
    1eb4:	00db      	lsls	r3, r3, #3
    1eb6:	4413      	add	r3, r2
    1eb8:	440b      	add	r3, r1
    1eba:	781b      	ldrb	r3, [r3, #0]
    1ebc:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    1ebe:	9b01      	ldr	r3, [sp, #4]
    1ec0:	685b      	ldr	r3, [r3, #4]
    1ec2:	4a0e      	ldr	r2, [pc, #56]	; (1efc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    1ec4:	5cd3      	ldrb	r3, [r2, r3]
    1ec6:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    1ec8:	4a0d      	ldr	r2, [pc, #52]	; (1f00 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1eca:	9b05      	ldr	r3, [sp, #20]
    1ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1ed0:	681b      	ldr	r3, [r3, #0]
    1ed2:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    1ed4:	9b03      	ldr	r3, [sp, #12]
    1ed6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1eda:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    1edc:	9b04      	ldr	r3, [sp, #16]
    1ede:	021b      	lsls	r3, r3, #8
    1ee0:	9a03      	ldr	r2, [sp, #12]
    1ee2:	4313      	orrs	r3, r2
    1ee4:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    1ee6:	4a06      	ldr	r2, [pc, #24]	; (1f00 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    1ee8:	9b05      	ldr	r3, [sp, #20]
    1eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1eee:	9a03      	ldr	r2, [sp, #12]
    1ef0:	601a      	str	r2, [r3, #0]
}
    1ef2:	bf00      	nop
    1ef4:	b006      	add	sp, #24
    1ef6:	4770      	bx	lr
    1ef8:	0000bb48 	.word	0x0000bb48
    1efc:	0000bf40 	.word	0x0000bf40
    1f00:	0000bf84 	.word	0x0000bf84

00001f04 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f04:	b084      	sub	sp, #16
    1f06:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1f08:	4b09      	ldr	r3, [pc, #36]	; (1f30 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1f0a:	695b      	ldr	r3, [r3, #20]
    1f0c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    1f0e:	9b03      	ldr	r3, [sp, #12]
    1f10:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1f14:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    1f16:	9b01      	ldr	r3, [sp, #4]
    1f18:	685b      	ldr	r3, [r3, #4]
    1f1a:	3b01      	subs	r3, #1
    1f1c:	041b      	lsls	r3, r3, #16
    1f1e:	9a03      	ldr	r2, [sp, #12]
    1f20:	4313      	orrs	r3, r2
    1f22:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1f24:	4a02      	ldr	r2, [pc, #8]	; (1f30 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    1f26:	9b03      	ldr	r3, [sp, #12]
    1f28:	6153      	str	r3, [r2, #20]
}
    1f2a:	bf00      	nop
    1f2c:	b004      	add	sp, #16
    1f2e:	4770      	bx	lr
    1f30:	40064000 	.word	0x40064000

00001f34 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f34:	b084      	sub	sp, #16
    1f36:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1f38:	4b09      	ldr	r3, [pc, #36]	; (1f60 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1f3a:	695b      	ldr	r3, [r3, #20]
    1f3c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    1f3e:	9b03      	ldr	r3, [sp, #12]
    1f40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1f44:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    1f46:	9b01      	ldr	r3, [sp, #4]
    1f48:	685b      	ldr	r3, [r3, #4]
    1f4a:	3b01      	subs	r3, #1
    1f4c:	011b      	lsls	r3, r3, #4
    1f4e:	9a03      	ldr	r2, [sp, #12]
    1f50:	4313      	orrs	r3, r2
    1f52:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1f54:	4a02      	ldr	r2, [pc, #8]	; (1f60 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    1f56:	9b03      	ldr	r3, [sp, #12]
    1f58:	6153      	str	r3, [r2, #20]
}
    1f5a:	bf00      	nop
    1f5c:	b004      	add	sp, #16
    1f5e:	4770      	bx	lr
    1f60:	40064000 	.word	0x40064000

00001f64 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f64:	b084      	sub	sp, #16
    1f66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    1f68:	4b09      	ldr	r3, [pc, #36]	; (1f90 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1f6a:	695b      	ldr	r3, [r3, #20]
    1f6c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    1f6e:	9b03      	ldr	r3, [sp, #12]
    1f70:	f023 030f 	bic.w	r3, r3, #15
    1f74:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    1f76:	9b01      	ldr	r3, [sp, #4]
    1f78:	685b      	ldr	r3, [r3, #4]
    1f7a:	3b01      	subs	r3, #1
    1f7c:	9a03      	ldr	r2, [sp, #12]
    1f7e:	4313      	orrs	r3, r2
    1f80:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    1f82:	4a03      	ldr	r2, [pc, #12]	; (1f90 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    1f84:	9b03      	ldr	r3, [sp, #12]
    1f86:	6153      	str	r3, [r2, #20]
}
    1f88:	bf00      	nop
    1f8a:	b004      	add	sp, #16
    1f8c:	4770      	bx	lr
    1f8e:	bf00      	nop
    1f90:	40064000 	.word	0x40064000

00001f94 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1f94:	b084      	sub	sp, #16
    1f96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1f98:	4b09      	ldr	r3, [pc, #36]	; (1fc0 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1f9a:	699b      	ldr	r3, [r3, #24]
    1f9c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    1f9e:	9b03      	ldr	r3, [sp, #12]
    1fa0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1fa4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    1fa6:	9b01      	ldr	r3, [sp, #4]
    1fa8:	685b      	ldr	r3, [r3, #4]
    1faa:	3b01      	subs	r3, #1
    1fac:	041b      	lsls	r3, r3, #16
    1fae:	9a03      	ldr	r2, [sp, #12]
    1fb0:	4313      	orrs	r3, r2
    1fb2:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1fb4:	4a02      	ldr	r2, [pc, #8]	; (1fc0 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    1fb6:	9b03      	ldr	r3, [sp, #12]
    1fb8:	6193      	str	r3, [r2, #24]
}
    1fba:	bf00      	nop
    1fbc:	b004      	add	sp, #16
    1fbe:	4770      	bx	lr
    1fc0:	40064000 	.word	0x40064000

00001fc4 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1fc4:	b084      	sub	sp, #16
    1fc6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1fc8:	4b09      	ldr	r3, [pc, #36]	; (1ff0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1fca:	699b      	ldr	r3, [r3, #24]
    1fcc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    1fce:	9b03      	ldr	r3, [sp, #12]
    1fd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1fd4:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    1fd6:	9b01      	ldr	r3, [sp, #4]
    1fd8:	685b      	ldr	r3, [r3, #4]
    1fda:	3b01      	subs	r3, #1
    1fdc:	011b      	lsls	r3, r3, #4
    1fde:	9a03      	ldr	r2, [sp, #12]
    1fe0:	4313      	orrs	r3, r2
    1fe2:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    1fe4:	4a02      	ldr	r2, [pc, #8]	; (1ff0 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    1fe6:	9b03      	ldr	r3, [sp, #12]
    1fe8:	6193      	str	r3, [r2, #24]
}
    1fea:	bf00      	nop
    1fec:	b004      	add	sp, #16
    1fee:	4770      	bx	lr
    1ff0:	40064000 	.word	0x40064000

00001ff4 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    1ff4:	b084      	sub	sp, #16
    1ff6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    1ff8:	4b09      	ldr	r3, [pc, #36]	; (2020 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    1ffa:	699b      	ldr	r3, [r3, #24]
    1ffc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    1ffe:	9b03      	ldr	r3, [sp, #12]
    2000:	f023 030f 	bic.w	r3, r3, #15
    2004:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2006:	9b01      	ldr	r3, [sp, #4]
    2008:	685b      	ldr	r3, [r3, #4]
    200a:	3b01      	subs	r3, #1
    200c:	9a03      	ldr	r2, [sp, #12]
    200e:	4313      	orrs	r3, r2
    2010:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2012:	4a03      	ldr	r2, [pc, #12]	; (2020 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2014:	9b03      	ldr	r3, [sp, #12]
    2016:	6193      	str	r3, [r2, #24]
}
    2018:	bf00      	nop
    201a:	b004      	add	sp, #16
    201c:	4770      	bx	lr
    201e:	bf00      	nop
    2020:	40064000 	.word	0x40064000

00002024 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2024:	b084      	sub	sp, #16
    2026:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2028:	4b09      	ldr	r3, [pc, #36]	; (2050 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    202a:	69db      	ldr	r3, [r3, #28]
    202c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    202e:	9b03      	ldr	r3, [sp, #12]
    2030:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2034:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2036:	9b01      	ldr	r3, [sp, #4]
    2038:	685b      	ldr	r3, [r3, #4]
    203a:	3b01      	subs	r3, #1
    203c:	041b      	lsls	r3, r3, #16
    203e:	9a03      	ldr	r2, [sp, #12]
    2040:	4313      	orrs	r3, r2
    2042:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2044:	4a02      	ldr	r2, [pc, #8]	; (2050 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2046:	9b03      	ldr	r3, [sp, #12]
    2048:	61d3      	str	r3, [r2, #28]
}
    204a:	bf00      	nop
    204c:	b004      	add	sp, #16
    204e:	4770      	bx	lr
    2050:	40064000 	.word	0x40064000

00002054 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2054:	b084      	sub	sp, #16
    2056:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2058:	4b09      	ldr	r3, [pc, #36]	; (2080 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    205a:	69db      	ldr	r3, [r3, #28]
    205c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    205e:	9b03      	ldr	r3, [sp, #12]
    2060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2064:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    2066:	9b01      	ldr	r3, [sp, #4]
    2068:	685b      	ldr	r3, [r3, #4]
    206a:	3b01      	subs	r3, #1
    206c:	011b      	lsls	r3, r3, #4
    206e:	9a03      	ldr	r2, [sp, #12]
    2070:	4313      	orrs	r3, r2
    2072:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2074:	4a02      	ldr	r2, [pc, #8]	; (2080 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    2076:	9b03      	ldr	r3, [sp, #12]
    2078:	61d3      	str	r3, [r2, #28]
}
    207a:	bf00      	nop
    207c:	b004      	add	sp, #16
    207e:	4770      	bx	lr
    2080:	40064000 	.word	0x40064000

00002084 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2084:	b084      	sub	sp, #16
    2086:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2088:	4b09      	ldr	r3, [pc, #36]	; (20b0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    208a:	69db      	ldr	r3, [r3, #28]
    208c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    208e:	9b03      	ldr	r3, [sp, #12]
    2090:	f023 030f 	bic.w	r3, r3, #15
    2094:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    2096:	9b01      	ldr	r3, [sp, #4]
    2098:	685b      	ldr	r3, [r3, #4]
    209a:	3b01      	subs	r3, #1
    209c:	9a03      	ldr	r2, [sp, #12]
    209e:	4313      	orrs	r3, r2
    20a0:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    20a2:	4a03      	ldr	r2, [pc, #12]	; (20b0 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    20a4:	9b03      	ldr	r3, [sp, #12]
    20a6:	61d3      	str	r3, [r2, #28]
}
    20a8:	bf00      	nop
    20aa:	b004      	add	sp, #16
    20ac:	4770      	bx	lr
    20ae:	bf00      	nop
    20b0:	40064000 	.word	0x40064000

000020b4 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    20b4:	b084      	sub	sp, #16
    20b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    20b8:	4b0a      	ldr	r3, [pc, #40]	; (20e4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    20ba:	685b      	ldr	r3, [r3, #4]
    20bc:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    20be:	9b03      	ldr	r3, [sp, #12]
    20c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    20c4:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    20c6:	9b01      	ldr	r3, [sp, #4]
    20c8:	685b      	ldr	r3, [r3, #4]
    20ca:	3b01      	subs	r3, #1
    20cc:	021b      	lsls	r3, r3, #8
    20ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    20d2:	9a03      	ldr	r2, [sp, #12]
    20d4:	4313      	orrs	r3, r2
    20d6:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    20d8:	4a02      	ldr	r2, [pc, #8]	; (20e4 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    20da:	9b03      	ldr	r3, [sp, #12]
    20dc:	6053      	str	r3, [r2, #4]
}
    20de:	bf00      	nop
    20e0:	b004      	add	sp, #16
    20e2:	4770      	bx	lr
    20e4:	40048000 	.word	0x40048000

000020e8 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    20e8:	b084      	sub	sp, #16
    20ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    20ec:	4919      	ldr	r1, [pc, #100]	; (2154 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    20ee:	9b01      	ldr	r3, [sp, #4]
    20f0:	681a      	ldr	r2, [r3, #0]
    20f2:	4819      	ldr	r0, [pc, #100]	; (2158 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    20f4:	4613      	mov	r3, r2
    20f6:	00db      	lsls	r3, r3, #3
    20f8:	4413      	add	r3, r2
    20fa:	4403      	add	r3, r0
    20fc:	3305      	adds	r3, #5
    20fe:	781b      	ldrb	r3, [r3, #0]
    2100:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    2104:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    2106:	9b03      	ldr	r3, [sp, #12]
    2108:	f023 030f 	bic.w	r3, r3, #15
    210c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    210e:	9b01      	ldr	r3, [sp, #4]
    2110:	685b      	ldr	r3, [r3, #4]
    2112:	3b01      	subs	r3, #1
    2114:	f003 0307 	and.w	r3, r3, #7
    2118:	9a03      	ldr	r2, [sp, #12]
    211a:	4313      	orrs	r3, r2
    211c:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    211e:	9b01      	ldr	r3, [sp, #4]
    2120:	7a1b      	ldrb	r3, [r3, #8]
    2122:	3b01      	subs	r3, #1
    2124:	00db      	lsls	r3, r3, #3
    2126:	f003 0308 	and.w	r3, r3, #8
    212a:	9a03      	ldr	r2, [sp, #12]
    212c:	4313      	orrs	r3, r2
    212e:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    2130:	4908      	ldr	r1, [pc, #32]	; (2154 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    2132:	9b01      	ldr	r3, [sp, #4]
    2134:	681a      	ldr	r2, [r3, #0]
    2136:	4808      	ldr	r0, [pc, #32]	; (2158 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    2138:	4613      	mov	r3, r2
    213a:	00db      	lsls	r3, r3, #3
    213c:	4413      	add	r3, r2
    213e:	4403      	add	r3, r0
    2140:	3305      	adds	r3, #5
    2142:	781b      	ldrb	r3, [r3, #0]
    2144:	461a      	mov	r2, r3
    2146:	9b03      	ldr	r3, [sp, #12]
    2148:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    214c:	bf00      	nop
    214e:	b004      	add	sp, #16
    2150:	4770      	bx	lr
    2152:	bf00      	nop
    2154:	40065000 	.word	0x40065000
    2158:	0000bb48 	.word	0x0000bb48

0000215c <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    215c:	b084      	sub	sp, #16
    215e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    2160:	4b10      	ldr	r3, [pc, #64]	; (21a4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2164:	4a0f      	ldr	r2, [pc, #60]	; (21a4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    2166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    216a:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    216c:	4b0d      	ldr	r3, [pc, #52]	; (21a4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    216e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2170:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    2172:	9b03      	ldr	r3, [sp, #12]
    2174:	f023 030f 	bic.w	r3, r3, #15
    2178:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    217a:	9b01      	ldr	r3, [sp, #4]
    217c:	685b      	ldr	r3, [r3, #4]
    217e:	3b01      	subs	r3, #1
    2180:	005b      	lsls	r3, r3, #1
    2182:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    2186:	9b01      	ldr	r3, [sp, #4]
    2188:	7a1b      	ldrb	r3, [r3, #8]
    218a:	3b01      	subs	r3, #1
    218c:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    2190:	4313      	orrs	r3, r2
    2192:	9a03      	ldr	r2, [sp, #12]
    2194:	4313      	orrs	r3, r2
    2196:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    2198:	4a02      	ldr	r2, [pc, #8]	; (21a4 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    219a:	9b03      	ldr	r3, [sp, #12]
    219c:	6693      	str	r3, [r2, #104]	; 0x68
}
    219e:	bf00      	nop
    21a0:	b004      	add	sp, #16
    21a2:	4770      	bx	lr
    21a4:	40048000 	.word	0x40048000

000021a8 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    21a8:	b082      	sub	sp, #8
    21aa:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    21ac:	bf00      	nop
    21ae:	b002      	add	sp, #8
    21b0:	4770      	bx	lr
	...

000021b4 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    21b4:	b082      	sub	sp, #8
    21b6:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    21b8:	bf00      	nop
    21ba:	b002      	add	sp, #8
    21bc:	4770      	bx	lr

000021be <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    21be:	b082      	sub	sp, #8
    21c0:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    21c2:	bf00      	nop
    21c4:	b002      	add	sp, #8
    21c6:	4770      	bx	lr

000021c8 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    21c8:	b500      	push	{lr}
    21ca:	b083      	sub	sp, #12
    21cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21ce:	9b01      	ldr	r3, [sp, #4]
    21d0:	2b00      	cmp	r3, #0
    21d2:	d002      	beq.n	21da <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    21d4:	9801      	ldr	r0, [sp, #4]
    21d6:	f000 f86a 	bl	22ae <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    21da:	bf00      	nop
    21dc:	b003      	add	sp, #12
    21de:	f85d fb04 	ldr.w	pc, [sp], #4

000021e2 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    21e2:	b500      	push	{lr}
    21e4:	b083      	sub	sp, #12
    21e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    21e8:	9b01      	ldr	r3, [sp, #4]
    21ea:	2b00      	cmp	r3, #0
    21ec:	d002      	beq.n	21f4 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    21ee:	9801      	ldr	r0, [sp, #4]
    21f0:	f000 f884 	bl	22fc <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    21f4:	bf00      	nop
    21f6:	b003      	add	sp, #12
    21f8:	f85d fb04 	ldr.w	pc, [sp], #4

000021fc <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    21fc:	b500      	push	{lr}
    21fe:	b089      	sub	sp, #36	; 0x24
    2200:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2202:	2300      	movs	r3, #0
    2204:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    2208:	9b01      	ldr	r3, [sp, #4]
    220a:	2b00      	cmp	r3, #0
    220c:	d031      	beq.n	2272 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    220e:	4b1b      	ldr	r3, [pc, #108]	; (227c <Clock_Ip_CompleteSOSC+0x80>)
    2210:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2214:	f003 0301 	and.w	r3, r3, #1
    2218:	2b00      	cmp	r3, #0
    221a:	d02a      	beq.n	2272 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    221c:	aa03      	add	r2, sp, #12
    221e:	a904      	add	r1, sp, #16
    2220:	a805      	add	r0, sp, #20
    2222:	f24c 3350 	movw	r3, #50000	; 0xc350
    2226:	f7ff fd1d 	bl	1c64 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    222a:	4b14      	ldr	r3, [pc, #80]	; (227c <Clock_Ip_CompleteSOSC+0x80>)
    222c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2230:	0e1b      	lsrs	r3, r3, #24
    2232:	f003 0301 	and.w	r3, r3, #1
    2236:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2238:	9a03      	ldr	r2, [sp, #12]
    223a:	a904      	add	r1, sp, #16
    223c:	ab05      	add	r3, sp, #20
    223e:	4618      	mov	r0, r3
    2240:	f7ff fd2a 	bl	1c98 <Clock_Ip_TimeoutExpired>
    2244:	4603      	mov	r3, r0
    2246:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    224a:	9b06      	ldr	r3, [sp, #24]
    224c:	2b00      	cmp	r3, #0
    224e:	d106      	bne.n	225e <Clock_Ip_CompleteSOSC+0x62>
    2250:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2254:	f083 0301 	eor.w	r3, r3, #1
    2258:	b2db      	uxtb	r3, r3
    225a:	2b00      	cmp	r3, #0
    225c:	d1e5      	bne.n	222a <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    225e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2262:	2b00      	cmp	r3, #0
    2264:	d005      	beq.n	2272 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2266:	9b01      	ldr	r3, [sp, #4]
    2268:	681b      	ldr	r3, [r3, #0]
    226a:	4619      	mov	r1, r3
    226c:	2001      	movs	r0, #1
    226e:	f7ff fce9 	bl	1c44 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    2272:	bf00      	nop
    2274:	b009      	add	sp, #36	; 0x24
    2276:	f85d fb04 	ldr.w	pc, [sp], #4
    227a:	bf00      	nop
    227c:	40064000 	.word	0x40064000

00002280 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    2280:	b500      	push	{lr}
    2282:	b083      	sub	sp, #12
    2284:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    2286:	9801      	ldr	r0, [sp, #4]
    2288:	f000 f8c0 	bl	240c <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    228c:	bf00      	nop
    228e:	b003      	add	sp, #12
    2290:	f85d fb04 	ldr.w	pc, [sp], #4

00002294 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    2294:	b500      	push	{lr}
    2296:	b083      	sub	sp, #12
    2298:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    229a:	9b01      	ldr	r3, [sp, #4]
    229c:	2b00      	cmp	r3, #0
    229e:	d002      	beq.n	22a6 <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    22a0:	9801      	ldr	r0, [sp, #4]
    22a2:	f000 f8c3 	bl	242c <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    22a6:	bf00      	nop
    22a8:	b003      	add	sp, #12
    22aa:	f85d fb04 	ldr.w	pc, [sp], #4

000022ae <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    22ae:	b082      	sub	sp, #8
    22b0:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    22b2:	4b11      	ldr	r3, [pc, #68]	; (22f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    22b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    22b8:	4a0f      	ldr	r2, [pc, #60]	; (22f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    22ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    22be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    22c2:	4b0d      	ldr	r3, [pc, #52]	; (22f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    22c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    22c8:	4a0b      	ldr	r2, [pc, #44]	; (22f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    22ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    22ce:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    22d2:	4b09      	ldr	r3, [pc, #36]	; (22f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    22d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    22d8:	4a07      	ldr	r2, [pc, #28]	; (22f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    22da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    22de:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    22e2:	4b05      	ldr	r3, [pc, #20]	; (22f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    22e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    22e8:	4a03      	ldr	r2, [pc, #12]	; (22f8 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    22ea:	f023 0301 	bic.w	r3, r3, #1
    22ee:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    22f2:	bf00      	nop
    22f4:	b002      	add	sp, #8
    22f6:	4770      	bx	lr
    22f8:	40064000 	.word	0x40064000

000022fc <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    22fc:	b082      	sub	sp, #8
    22fe:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    2300:	9b01      	ldr	r3, [sp, #4]
    2302:	891b      	ldrh	r3, [r3, #8]
    2304:	2b01      	cmp	r3, #1
    2306:	d174      	bne.n	23f2 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    2308:	9b01      	ldr	r3, [sp, #4]
    230a:	7bdb      	ldrb	r3, [r3, #15]
    230c:	2b00      	cmp	r3, #0
    230e:	d002      	beq.n	2316 <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    2310:	2b01      	cmp	r3, #1
    2312:	d009      	beq.n	2328 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    2314:	e011      	b.n	233a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    2316:	4b39      	ldr	r3, [pc, #228]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2318:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    231c:	4a37      	ldr	r2, [pc, #220]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    231e:	f023 0308 	bic.w	r3, r3, #8
    2322:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2326:	e008      	b.n	233a <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    2328:	4b34      	ldr	r3, [pc, #208]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    232a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    232e:	4a33      	ldr	r2, [pc, #204]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2330:	f043 0308 	orr.w	r3, r3, #8
    2334:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    2338:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    233a:	4b30      	ldr	r3, [pc, #192]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    233c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2340:	4a2e      	ldr	r2, [pc, #184]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2342:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2346:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    234a:	9b01      	ldr	r3, [sp, #4]
    234c:	685b      	ldr	r3, [r3, #4]
    234e:	4a2c      	ldr	r2, [pc, #176]	; (2400 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    2350:	4293      	cmp	r3, r2
    2352:	d90d      	bls.n	2370 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    2354:	9b01      	ldr	r3, [sp, #4]
    2356:	685b      	ldr	r3, [r3, #4]
    2358:	4a2a      	ldr	r2, [pc, #168]	; (2404 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    235a:	4293      	cmp	r3, r2
    235c:	d208      	bcs.n	2370 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    235e:	4b27      	ldr	r3, [pc, #156]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2360:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2364:	4a25      	ldr	r2, [pc, #148]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2366:	f043 0320 	orr.w	r3, r3, #32
    236a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    236e:	e007      	b.n	2380 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    2370:	4b22      	ldr	r3, [pc, #136]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2372:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    2376:	4a21      	ldr	r2, [pc, #132]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2378:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    237c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    2380:	9b01      	ldr	r3, [sp, #4]
    2382:	7b1b      	ldrb	r3, [r3, #12]
    2384:	2b00      	cmp	r3, #0
    2386:	d108      	bne.n	239a <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    2388:	4b1c      	ldr	r3, [pc, #112]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    238a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    238e:	4a1b      	ldr	r2, [pc, #108]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    2390:	f043 0304 	orr.w	r3, r3, #4
    2394:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    2398:	e007      	b.n	23aa <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    239a:	4b18      	ldr	r3, [pc, #96]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    239c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    23a0:	4a16      	ldr	r2, [pc, #88]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    23a2:	f023 0304 	bic.w	r3, r3, #4
    23a6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    23aa:	9b01      	ldr	r3, [sp, #4]
    23ac:	7c1b      	ldrb	r3, [r3, #16]
    23ae:	2b02      	cmp	r3, #2
    23b0:	d011      	beq.n	23d6 <Clock_Ip_SetSOSC_TrustedCall+0xda>
    23b2:	2b02      	cmp	r3, #2
    23b4:	dc14      	bgt.n	23e0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    23b6:	2b00      	cmp	r3, #0
    23b8:	d002      	beq.n	23c0 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    23ba:	2b01      	cmp	r3, #1
    23bc:	d005      	beq.n	23ca <Clock_Ip_SetSOSC_TrustedCall+0xce>
    23be:	e00f      	b.n	23e0 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    23c0:	4b0e      	ldr	r3, [pc, #56]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    23c2:	2201      	movs	r2, #1
    23c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    23c8:	e014      	b.n	23f4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    23ca:	4b0c      	ldr	r3, [pc, #48]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    23cc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    23d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    23d4:	e00e      	b.n	23f4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    23d6:	4b09      	ldr	r3, [pc, #36]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    23d8:	4a0b      	ldr	r2, [pc, #44]	; (2408 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    23da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    23de:	e009      	b.n	23f4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    23e0:	4b06      	ldr	r3, [pc, #24]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    23e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    23e6:	4a05      	ldr	r2, [pc, #20]	; (23fc <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    23e8:	f043 0301 	orr.w	r3, r3, #1
    23ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    23f0:	e000      	b.n	23f4 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    23f2:	bf00      	nop
}
    23f4:	bf00      	nop
    23f6:	b002      	add	sp, #8
    23f8:	4770      	bx	lr
    23fa:	bf00      	nop
    23fc:	40064000 	.word	0x40064000
    2400:	003d08ff 	.word	0x003d08ff
    2404:	007a1200 	.word	0x007a1200
    2408:	00030001 	.word	0x00030001

0000240c <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    240c:	b082      	sub	sp, #8
    240e:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    2410:	4b05      	ldr	r3, [pc, #20]	; (2428 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2412:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2416:	4a04      	ldr	r2, [pc, #16]	; (2428 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    2418:	f023 0301 	bic.w	r3, r3, #1
    241c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    2420:	bf00      	nop
    2422:	b002      	add	sp, #8
    2424:	4770      	bx	lr
    2426:	bf00      	nop
    2428:	40064000 	.word	0x40064000

0000242c <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    242c:	b082      	sub	sp, #8
    242e:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2430:	9b01      	ldr	r3, [sp, #4]
    2432:	891b      	ldrh	r3, [r3, #8]
    2434:	2b01      	cmp	r3, #1
    2436:	d107      	bne.n	2448 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    2438:	4b05      	ldr	r3, [pc, #20]	; (2450 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    243a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    243e:	4a04      	ldr	r2, [pc, #16]	; (2450 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    2440:	f043 0301 	orr.w	r3, r3, #1
    2444:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    2448:	bf00      	nop
    244a:	b002      	add	sp, #8
    244c:	4770      	bx	lr
    244e:	bf00      	nop
    2450:	40064000 	.word	0x40064000

00002454 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    2454:	b082      	sub	sp, #8
    2456:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2458:	bf00      	nop
    245a:	b002      	add	sp, #8
    245c:	4770      	bx	lr

0000245e <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    245e:	b082      	sub	sp, #8
    2460:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    2462:	2300      	movs	r3, #0
}
    2464:	4618      	mov	r0, r3
    2466:	b002      	add	sp, #8
    2468:	4770      	bx	lr

0000246a <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    246a:	b082      	sub	sp, #8
    246c:	9001      	str	r0, [sp, #4]
    246e:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    2470:	bf00      	nop
    2472:	b002      	add	sp, #8
    2474:	4770      	bx	lr
	...

00002478 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    2478:	b082      	sub	sp, #8
    247a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    247c:	bf00      	nop
    247e:	b002      	add	sp, #8
    2480:	4770      	bx	lr

00002482 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    2482:	b082      	sub	sp, #8
    2484:	9001      	str	r0, [sp, #4]
    2486:	460b      	mov	r3, r1
    2488:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    248c:	bf00      	nop
    248e:	b002      	add	sp, #8
    2490:	4770      	bx	lr

00002492 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    2492:	b500      	push	{lr}
    2494:	b083      	sub	sp, #12
    2496:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2498:	9b01      	ldr	r3, [sp, #4]
    249a:	2b00      	cmp	r3, #0
    249c:	d002      	beq.n	24a4 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    249e:	9801      	ldr	r0, [sp, #4]
    24a0:	f000 f8e7 	bl	2672 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    24a4:	bf00      	nop
    24a6:	b003      	add	sp, #12
    24a8:	f85d fb04 	ldr.w	pc, [sp], #4

000024ac <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    24ac:	b500      	push	{lr}
    24ae:	b085      	sub	sp, #20
    24b0:	9001      	str	r0, [sp, #4]
    24b2:	460b      	mov	r3, r1
    24b4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    24b8:	9b01      	ldr	r3, [sp, #4]
    24ba:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    24bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    24c0:	2b00      	cmp	r3, #0
    24c2:	d003      	beq.n	24cc <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    24c4:	2300      	movs	r3, #0
    24c6:	f8ad 300c 	strh.w	r3, [sp, #12]
    24ca:	e002      	b.n	24d2 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    24cc:	2301      	movs	r3, #1
    24ce:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    24d2:	ab02      	add	r3, sp, #8
    24d4:	4618      	mov	r0, r3
    24d6:	f7ff ffdc 	bl	2492 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    24da:	bf00      	nop
    24dc:	b005      	add	sp, #20
    24de:	f85d fb04 	ldr.w	pc, [sp], #4

000024e2 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    24e2:	b500      	push	{lr}
    24e4:	b083      	sub	sp, #12
    24e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    24e8:	9b01      	ldr	r3, [sp, #4]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d002      	beq.n	24f4 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    24ee:	9801      	ldr	r0, [sp, #4]
    24f0:	f000 f8d6 	bl	26a0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    24f4:	bf00      	nop
    24f6:	b003      	add	sp, #12
    24f8:	f85d fb04 	ldr.w	pc, [sp], #4

000024fc <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    24fc:	b500      	push	{lr}
    24fe:	b085      	sub	sp, #20
    2500:	9001      	str	r0, [sp, #4]
    2502:	460b      	mov	r3, r1
    2504:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2508:	9b01      	ldr	r3, [sp, #4]
    250a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    250c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2510:	2b00      	cmp	r3, #0
    2512:	d003      	beq.n	251c <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    2514:	2300      	movs	r3, #0
    2516:	f8ad 300c 	strh.w	r3, [sp, #12]
    251a:	e002      	b.n	2522 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    251c:	2301      	movs	r3, #1
    251e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    2522:	ab02      	add	r3, sp, #8
    2524:	4618      	mov	r0, r3
    2526:	f7ff ffdc 	bl	24e2 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    252a:	bf00      	nop
    252c:	b005      	add	sp, #20
    252e:	f85d fb04 	ldr.w	pc, [sp], #4

00002532 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    2532:	b500      	push	{lr}
    2534:	b083      	sub	sp, #12
    2536:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2538:	9b01      	ldr	r3, [sp, #4]
    253a:	2b00      	cmp	r3, #0
    253c:	d002      	beq.n	2544 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    253e:	9801      	ldr	r0, [sp, #4]
    2540:	f000 f8c6 	bl	26d0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2544:	bf00      	nop
    2546:	b003      	add	sp, #12
    2548:	f85d fb04 	ldr.w	pc, [sp], #4

0000254c <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    254c:	b500      	push	{lr}
    254e:	b085      	sub	sp, #20
    2550:	9001      	str	r0, [sp, #4]
    2552:	460b      	mov	r3, r1
    2554:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2558:	9b01      	ldr	r3, [sp, #4]
    255a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    255c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2560:	2b00      	cmp	r3, #0
    2562:	d003      	beq.n	256c <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    2564:	2300      	movs	r3, #0
    2566:	f8ad 300c 	strh.w	r3, [sp, #12]
    256a:	e002      	b.n	2572 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    256c:	2301      	movs	r3, #1
    256e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    2572:	ab02      	add	r3, sp, #8
    2574:	4618      	mov	r0, r3
    2576:	f7ff ffdc 	bl	2532 <Clock_Ip_ClockSetSimClkoutEnable>
}
    257a:	bf00      	nop
    257c:	b005      	add	sp, #20
    257e:	f85d fb04 	ldr.w	pc, [sp], #4

00002582 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    2582:	b500      	push	{lr}
    2584:	b083      	sub	sp, #12
    2586:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2588:	9b01      	ldr	r3, [sp, #4]
    258a:	2b00      	cmp	r3, #0
    258c:	d002      	beq.n	2594 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    258e:	9801      	ldr	r0, [sp, #4]
    2590:	f000 f8b6 	bl	2700 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2594:	bf00      	nop
    2596:	b003      	add	sp, #12
    2598:	f85d fb04 	ldr.w	pc, [sp], #4

0000259c <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    259c:	b500      	push	{lr}
    259e:	b085      	sub	sp, #20
    25a0:	9001      	str	r0, [sp, #4]
    25a2:	460b      	mov	r3, r1
    25a4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    25a8:	9b01      	ldr	r3, [sp, #4]
    25aa:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    25ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
    25b0:	2b00      	cmp	r3, #0
    25b2:	d003      	beq.n	25bc <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    25b4:	2300      	movs	r3, #0
    25b6:	f8ad 300c 	strh.w	r3, [sp, #12]
    25ba:	e002      	b.n	25c2 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    25bc:	2301      	movs	r3, #1
    25be:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    25c2:	ab02      	add	r3, sp, #8
    25c4:	4618      	mov	r0, r3
    25c6:	f7ff ffdc 	bl	2582 <Clock_Ip_ClockSetPccCgcEnable>
}
    25ca:	bf00      	nop
    25cc:	b005      	add	sp, #20
    25ce:	f85d fb04 	ldr.w	pc, [sp], #4

000025d2 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    25d2:	b500      	push	{lr}
    25d4:	b083      	sub	sp, #12
    25d6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    25d8:	9b01      	ldr	r3, [sp, #4]
    25da:	2b00      	cmp	r3, #0
    25dc:	d002      	beq.n	25e4 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    25de:	9801      	ldr	r0, [sp, #4]
    25e0:	f000 f8bc 	bl	275c <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    25e4:	bf00      	nop
    25e6:	b003      	add	sp, #12
    25e8:	f85d fb04 	ldr.w	pc, [sp], #4

000025ec <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    25ec:	b500      	push	{lr}
    25ee:	b085      	sub	sp, #20
    25f0:	9001      	str	r0, [sp, #4]
    25f2:	460b      	mov	r3, r1
    25f4:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    25f8:	9b01      	ldr	r3, [sp, #4]
    25fa:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    25fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2600:	2b00      	cmp	r3, #0
    2602:	d003      	beq.n	260c <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    2604:	2300      	movs	r3, #0
    2606:	f8ad 300c 	strh.w	r3, [sp, #12]
    260a:	e002      	b.n	2612 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    260c:	2301      	movs	r3, #1
    260e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    2612:	ab02      	add	r3, sp, #8
    2614:	4618      	mov	r0, r3
    2616:	f7ff ffdc 	bl	25d2 <Clock_Ip_ClockSetSimGate>
}
    261a:	bf00      	nop
    261c:	b005      	add	sp, #20
    261e:	f85d fb04 	ldr.w	pc, [sp], #4

00002622 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    2622:	b500      	push	{lr}
    2624:	b083      	sub	sp, #12
    2626:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2628:	9b01      	ldr	r3, [sp, #4]
    262a:	2b00      	cmp	r3, #0
    262c:	d002      	beq.n	2634 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    262e:	9801      	ldr	r0, [sp, #4]
    2630:	f000 f8c0 	bl	27b4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2634:	bf00      	nop
    2636:	b003      	add	sp, #12
    2638:	f85d fb04 	ldr.w	pc, [sp], #4

0000263c <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    263c:	b500      	push	{lr}
    263e:	b085      	sub	sp, #20
    2640:	9001      	str	r0, [sp, #4]
    2642:	460b      	mov	r3, r1
    2644:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    2648:	9b01      	ldr	r3, [sp, #4]
    264a:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    264c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2650:	2b00      	cmp	r3, #0
    2652:	d003      	beq.n	265c <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    2654:	2300      	movs	r3, #0
    2656:	f8ad 300c 	strh.w	r3, [sp, #12]
    265a:	e002      	b.n	2662 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    265c:	2301      	movs	r3, #1
    265e:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    2662:	ab02      	add	r3, sp, #8
    2664:	4618      	mov	r0, r3
    2666:	f7ff ffdc 	bl	2622 <Clock_Ip_ClockSetSimTraceEnable>
}
    266a:	bf00      	nop
    266c:	b005      	add	sp, #20
    266e:	f85d fb04 	ldr.w	pc, [sp], #4

00002672 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2672:	b084      	sub	sp, #16
    2674:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    2676:	4b09      	ldr	r3, [pc, #36]	; (269c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2678:	691b      	ldr	r3, [r3, #16]
    267a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    267c:	9b03      	ldr	r3, [sp, #12]
    267e:	f023 0301 	bic.w	r3, r3, #1
    2682:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    2684:	9b01      	ldr	r3, [sp, #4]
    2686:	889b      	ldrh	r3, [r3, #4]
    2688:	461a      	mov	r2, r3
    268a:	9b03      	ldr	r3, [sp, #12]
    268c:	4313      	orrs	r3, r2
    268e:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    2690:	4a02      	ldr	r2, [pc, #8]	; (269c <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    2692:	9b03      	ldr	r3, [sp, #12]
    2694:	6113      	str	r3, [r2, #16]
}
    2696:	bf00      	nop
    2698:	b004      	add	sp, #16
    269a:	4770      	bx	lr
    269c:	40048000 	.word	0x40048000

000026a0 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    26a0:	b084      	sub	sp, #16
    26a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    26a4:	4b09      	ldr	r3, [pc, #36]	; (26cc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    26a6:	691b      	ldr	r3, [r3, #16]
    26a8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    26aa:	9b03      	ldr	r3, [sp, #12]
    26ac:	f023 0302 	bic.w	r3, r3, #2
    26b0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    26b2:	9b01      	ldr	r3, [sp, #4]
    26b4:	889b      	ldrh	r3, [r3, #4]
    26b6:	005b      	lsls	r3, r3, #1
    26b8:	9a03      	ldr	r2, [sp, #12]
    26ba:	4313      	orrs	r3, r2
    26bc:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    26be:	4a03      	ldr	r2, [pc, #12]	; (26cc <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    26c0:	9b03      	ldr	r3, [sp, #12]
    26c2:	6113      	str	r3, [r2, #16]
}
    26c4:	bf00      	nop
    26c6:	b004      	add	sp, #16
    26c8:	4770      	bx	lr
    26ca:	bf00      	nop
    26cc:	40048000 	.word	0x40048000

000026d0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    26d0:	b084      	sub	sp, #16
    26d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    26d4:	4b09      	ldr	r3, [pc, #36]	; (26fc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    26d6:	685b      	ldr	r3, [r3, #4]
    26d8:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    26da:	9b03      	ldr	r3, [sp, #12]
    26dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    26e0:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    26e2:	9b01      	ldr	r3, [sp, #4]
    26e4:	889b      	ldrh	r3, [r3, #4]
    26e6:	02db      	lsls	r3, r3, #11
    26e8:	9a03      	ldr	r2, [sp, #12]
    26ea:	4313      	orrs	r3, r2
    26ec:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    26ee:	4a03      	ldr	r2, [pc, #12]	; (26fc <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    26f0:	9b03      	ldr	r3, [sp, #12]
    26f2:	6053      	str	r3, [r2, #4]
}
    26f4:	bf00      	nop
    26f6:	b004      	add	sp, #16
    26f8:	4770      	bx	lr
    26fa:	bf00      	nop
    26fc:	40048000 	.word	0x40048000

00002700 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    2700:	b084      	sub	sp, #16
    2702:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    2704:	4913      	ldr	r1, [pc, #76]	; (2754 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2706:	9b01      	ldr	r3, [sp, #4]
    2708:	681a      	ldr	r2, [r3, #0]
    270a:	4813      	ldr	r0, [pc, #76]	; (2758 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    270c:	4613      	mov	r3, r2
    270e:	00db      	lsls	r3, r3, #3
    2710:	4413      	add	r3, r2
    2712:	4403      	add	r3, r0
    2714:	3306      	adds	r3, #6
    2716:	781b      	ldrb	r3, [r3, #0]
    2718:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    271c:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    271e:	9b03      	ldr	r3, [sp, #12]
    2720:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    2724:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    2726:	9b01      	ldr	r3, [sp, #4]
    2728:	889b      	ldrh	r3, [r3, #4]
    272a:	079b      	lsls	r3, r3, #30
    272c:	9a03      	ldr	r2, [sp, #12]
    272e:	4313      	orrs	r3, r2
    2730:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    2732:	4908      	ldr	r1, [pc, #32]	; (2754 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    2734:	9b01      	ldr	r3, [sp, #4]
    2736:	681a      	ldr	r2, [r3, #0]
    2738:	4807      	ldr	r0, [pc, #28]	; (2758 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    273a:	4613      	mov	r3, r2
    273c:	00db      	lsls	r3, r3, #3
    273e:	4413      	add	r3, r2
    2740:	4403      	add	r3, r0
    2742:	3306      	adds	r3, #6
    2744:	781b      	ldrb	r3, [r3, #0]
    2746:	461a      	mov	r2, r3
    2748:	9b03      	ldr	r3, [sp, #12]
    274a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    274e:	bf00      	nop
    2750:	b004      	add	sp, #16
    2752:	4770      	bx	lr
    2754:	40065000 	.word	0x40065000
    2758:	0000bb48 	.word	0x0000bb48

0000275c <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    275c:	b086      	sub	sp, #24
    275e:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    2760:	9b01      	ldr	r3, [sp, #4]
    2762:	889b      	ldrh	r3, [r3, #4]
    2764:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    2766:	9b01      	ldr	r3, [sp, #4]
    2768:	681a      	ldr	r2, [r3, #0]
    276a:	4910      	ldr	r1, [pc, #64]	; (27ac <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    276c:	4613      	mov	r3, r2
    276e:	00db      	lsls	r3, r3, #3
    2770:	4413      	add	r3, r2
    2772:	440b      	add	r3, r1
    2774:	3306      	adds	r3, #6
    2776:	781b      	ldrb	r3, [r3, #0]
    2778:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    277a:	4b0d      	ldr	r3, [pc, #52]	; (27b0 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    277e:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    2780:	2201      	movs	r2, #1
    2782:	9b04      	ldr	r3, [sp, #16]
    2784:	fa02 f303 	lsl.w	r3, r2, r3
    2788:	43db      	mvns	r3, r3
    278a:	9a03      	ldr	r2, [sp, #12]
    278c:	4013      	ands	r3, r2
    278e:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    2790:	9a05      	ldr	r2, [sp, #20]
    2792:	9b04      	ldr	r3, [sp, #16]
    2794:	fa02 f303 	lsl.w	r3, r2, r3
    2798:	9a03      	ldr	r2, [sp, #12]
    279a:	4313      	orrs	r3, r2
    279c:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    279e:	4a04      	ldr	r2, [pc, #16]	; (27b0 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    27a0:	9b03      	ldr	r3, [sp, #12]
    27a2:	6413      	str	r3, [r2, #64]	; 0x40
}
    27a4:	bf00      	nop
    27a6:	b006      	add	sp, #24
    27a8:	4770      	bx	lr
    27aa:	bf00      	nop
    27ac:	0000bb48 	.word	0x0000bb48
    27b0:	40048000 	.word	0x40048000

000027b4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    27b4:	b084      	sub	sp, #16
    27b6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    27b8:	4b0a      	ldr	r3, [pc, #40]	; (27e4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    27ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    27bc:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    27be:	9b01      	ldr	r3, [sp, #4]
    27c0:	889b      	ldrh	r3, [r3, #4]
    27c2:	2b01      	cmp	r3, #1
    27c4:	d104      	bne.n	27d0 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    27c6:	9b03      	ldr	r3, [sp, #12]
    27c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    27cc:	9303      	str	r3, [sp, #12]
    27ce:	e003      	b.n	27d8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    27d0:	9b03      	ldr	r3, [sp, #12]
    27d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    27d6:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    27d8:	4a02      	ldr	r2, [pc, #8]	; (27e4 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    27da:	9b03      	ldr	r3, [sp, #12]
    27dc:	6693      	str	r3, [r2, #104]	; 0x68
}
    27de:	bf00      	nop
    27e0:	b004      	add	sp, #16
    27e2:	4770      	bx	lr
    27e4:	40048000 	.word	0x40048000

000027e8 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    27e8:	b082      	sub	sp, #8
    27ea:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    27ec:	bf00      	nop
    27ee:	b002      	add	sp, #8
    27f0:	4770      	bx	lr

000027f2 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    27f2:	b082      	sub	sp, #8
    27f4:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    27f6:	bf00      	nop
    27f8:	b002      	add	sp, #8
    27fa:	4770      	bx	lr

000027fc <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    27fc:	b500      	push	{lr}
    27fe:	b083      	sub	sp, #12
    2800:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2802:	9b01      	ldr	r3, [sp, #4]
    2804:	2b00      	cmp	r3, #0
    2806:	d002      	beq.n	280e <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    2808:	9801      	ldr	r0, [sp, #4]
    280a:	f000 f8d1 	bl	29b0 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    280e:	bf00      	nop
    2810:	b003      	add	sp, #12
    2812:	f85d fb04 	ldr.w	pc, [sp], #4

00002816 <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2816:	b500      	push	{lr}
    2818:	b083      	sub	sp, #12
    281a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    281c:	9b01      	ldr	r3, [sp, #4]
    281e:	2b00      	cmp	r3, #0
    2820:	d002      	beq.n	2828 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    2822:	9801      	ldr	r0, [sp, #4]
    2824:	f000 f950 	bl	2ac8 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2828:	bf00      	nop
    282a:	b003      	add	sp, #12
    282c:	f85d fb04 	ldr.w	pc, [sp], #4

00002830 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    2830:	b500      	push	{lr}
    2832:	b083      	sub	sp, #12
    2834:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    2836:	9801      	ldr	r0, [sp, #4]
    2838:	f000 f98e 	bl	2b58 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    283c:	bf00      	nop
    283e:	b003      	add	sp, #12
    2840:	f85d fb04 	ldr.w	pc, [sp], #4

00002844 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    2844:	b500      	push	{lr}
    2846:	b083      	sub	sp, #12
    2848:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    284a:	9b01      	ldr	r3, [sp, #4]
    284c:	2b00      	cmp	r3, #0
    284e:	d002      	beq.n	2856 <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    2850:	9801      	ldr	r0, [sp, #4]
    2852:	f000 f999 	bl	2b88 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2856:	bf00      	nop
    2858:	b003      	add	sp, #12
    285a:	f85d fb04 	ldr.w	pc, [sp], #4

0000285e <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    285e:	b500      	push	{lr}
    2860:	b083      	sub	sp, #12
    2862:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2864:	9b01      	ldr	r3, [sp, #4]
    2866:	2b00      	cmp	r3, #0
    2868:	d002      	beq.n	2870 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    286a:	9801      	ldr	r0, [sp, #4]
    286c:	f000 f9b0 	bl	2bd0 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2870:	bf00      	nop
    2872:	b003      	add	sp, #12
    2874:	f85d fb04 	ldr.w	pc, [sp], #4

00002878 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    2878:	b500      	push	{lr}
    287a:	b083      	sub	sp, #12
    287c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    287e:	9801      	ldr	r0, [sp, #4]
    2880:	f000 f9ba 	bl	2bf8 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    2884:	bf00      	nop
    2886:	b003      	add	sp, #12
    2888:	f85d fb04 	ldr.w	pc, [sp], #4

0000288c <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    288c:	b500      	push	{lr}
    288e:	b083      	sub	sp, #12
    2890:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2892:	9b01      	ldr	r3, [sp, #4]
    2894:	2b00      	cmp	r3, #0
    2896:	d002      	beq.n	289e <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    2898:	9801      	ldr	r0, [sp, #4]
    289a:	f000 f9bd 	bl	2c18 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    289e:	bf00      	nop
    28a0:	b003      	add	sp, #12
    28a2:	f85d fb04 	ldr.w	pc, [sp], #4

000028a6 <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    28a6:	b500      	push	{lr}
    28a8:	b083      	sub	sp, #12
    28aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    28ac:	9b01      	ldr	r3, [sp, #4]
    28ae:	2b00      	cmp	r3, #0
    28b0:	d002      	beq.n	28b8 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    28b2:	9801      	ldr	r0, [sp, #4]
    28b4:	f000 f9d4 	bl	2c60 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    28b8:	bf00      	nop
    28ba:	b003      	add	sp, #12
    28bc:	f85d fb04 	ldr.w	pc, [sp], #4

000028c0 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    28c0:	b500      	push	{lr}
    28c2:	b083      	sub	sp, #12
    28c4:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    28c6:	9801      	ldr	r0, [sp, #4]
    28c8:	f000 f9de 	bl	2c88 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    28cc:	bf00      	nop
    28ce:	b003      	add	sp, #12
    28d0:	f85d fb04 	ldr.w	pc, [sp], #4

000028d4 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    28d4:	b500      	push	{lr}
    28d6:	b089      	sub	sp, #36	; 0x24
    28d8:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    28da:	2300      	movs	r3, #0
    28dc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    28e0:	4b20      	ldr	r3, [pc, #128]	; (2964 <SetInputSouceSytemClock+0x90>)
    28e2:	695b      	ldr	r3, [r3, #20]
    28e4:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    28e6:	9b06      	ldr	r3, [sp, #24]
    28e8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    28ec:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    28ee:	9b01      	ldr	r3, [sp, #4]
    28f0:	061b      	lsls	r3, r3, #24
    28f2:	9a06      	ldr	r2, [sp, #24]
    28f4:	4313      	orrs	r3, r2
    28f6:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    28f8:	4a1a      	ldr	r2, [pc, #104]	; (2964 <SetInputSouceSytemClock+0x90>)
    28fa:	9b06      	ldr	r3, [sp, #24]
    28fc:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    28fe:	aa02      	add	r2, sp, #8
    2900:	a903      	add	r1, sp, #12
    2902:	a804      	add	r0, sp, #16
    2904:	f24c 3350 	movw	r3, #50000	; 0xc350
    2908:	f7ff f9ac 	bl	1c64 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    290c:	4b15      	ldr	r3, [pc, #84]	; (2964 <SetInputSouceSytemClock+0x90>)
    290e:	691b      	ldr	r3, [r3, #16]
    2910:	0e1b      	lsrs	r3, r3, #24
    2912:	f003 030f 	and.w	r3, r3, #15
    2916:	9a01      	ldr	r2, [sp, #4]
    2918:	429a      	cmp	r2, r3
    291a:	bf0c      	ite	eq
    291c:	2301      	moveq	r3, #1
    291e:	2300      	movne	r3, #0
    2920:	b2db      	uxtb	r3, r3
    2922:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2924:	9a02      	ldr	r2, [sp, #8]
    2926:	a903      	add	r1, sp, #12
    2928:	ab04      	add	r3, sp, #16
    292a:	4618      	mov	r0, r3
    292c:	f7ff f9b4 	bl	1c98 <Clock_Ip_TimeoutExpired>
    2930:	4603      	mov	r3, r0
    2932:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    2936:	9b05      	ldr	r3, [sp, #20]
    2938:	2b00      	cmp	r3, #0
    293a:	d106      	bne.n	294a <SetInputSouceSytemClock+0x76>
    293c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2940:	f083 0301 	eor.w	r3, r3, #1
    2944:	b2db      	uxtb	r3, r3
    2946:	2b00      	cmp	r3, #0
    2948:	d1e0      	bne.n	290c <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    294a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    294e:	2b00      	cmp	r3, #0
    2950:	d003      	beq.n	295a <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    2952:	2105      	movs	r1, #5
    2954:	2001      	movs	r0, #1
    2956:	f7ff f975 	bl	1c44 <Clock_Ip_ReportClockErrors>
    }
}
    295a:	bf00      	nop
    295c:	b009      	add	sp, #36	; 0x24
    295e:	f85d fb04 	ldr.w	pc, [sp], #4
    2962:	bf00      	nop
    2964:	40064000 	.word	0x40064000

00002968 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2968:	b500      	push	{lr}
    296a:	b083      	sub	sp, #12
    296c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    296e:	9b01      	ldr	r3, [sp, #4]
    2970:	2b00      	cmp	r3, #0
    2972:	d002      	beq.n	297a <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    2974:	9801      	ldr	r0, [sp, #4]
    2976:	f000 f997 	bl	2ca8 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    297a:	bf00      	nop
    297c:	b003      	add	sp, #12
    297e:	f85d fb04 	ldr.w	pc, [sp], #4

00002982 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    2982:	b500      	push	{lr}
    2984:	b083      	sub	sp, #12
    2986:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2988:	9b01      	ldr	r3, [sp, #4]
    298a:	2b00      	cmp	r3, #0
    298c:	d002      	beq.n	2994 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    298e:	9801      	ldr	r0, [sp, #4]
    2990:	f000 fa7e 	bl	2e90 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2994:	bf00      	nop
    2996:	b003      	add	sp, #12
    2998:	f85d fb04 	ldr.w	pc, [sp], #4

0000299c <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    299c:	b500      	push	{lr}
    299e:	b083      	sub	sp, #12
    29a0:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    29a2:	9801      	ldr	r0, [sp, #4]
    29a4:	f000 fab8 	bl	2f18 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    29a8:	bf00      	nop
    29aa:	b003      	add	sp, #12
    29ac:	f85d fb04 	ldr.w	pc, [sp], #4

000029b0 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    29b0:	b500      	push	{lr}
    29b2:	b08b      	sub	sp, #44	; 0x2c
    29b4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    29b6:	2300      	movs	r3, #0
    29b8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    29bc:	9b01      	ldr	r3, [sp, #4]
    29be:	2b00      	cmp	r3, #0
    29c0:	d10b      	bne.n	29da <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    29c2:	2305      	movs	r3, #5
    29c4:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    29c6:	2301      	movs	r3, #1
    29c8:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    29cc:	2301      	movs	r3, #1
    29ce:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    29d2:	2301      	movs	r3, #1
    29d4:	f88d 3010 	strb.w	r3, [sp, #16]
    29d8:	e00e      	b.n	29f8 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    29da:	9b01      	ldr	r3, [sp, #4]
    29dc:	681b      	ldr	r3, [r3, #0]
    29de:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    29e0:	9b01      	ldr	r3, [sp, #4]
    29e2:	79db      	ldrb	r3, [r3, #7]
    29e4:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    29e8:	9b01      	ldr	r3, [sp, #4]
    29ea:	889b      	ldrh	r3, [r3, #4]
    29ec:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    29f0:	9b01      	ldr	r3, [sp, #4]
    29f2:	7a1b      	ldrb	r3, [r3, #8]
    29f4:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    29f8:	4b32      	ldr	r3, [pc, #200]	; (2ac4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    29fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29fe:	4a31      	ldr	r2, [pc, #196]	; (2ac4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2a00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2a04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    2a08:	4b2e      	ldr	r3, [pc, #184]	; (2ac4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2a0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a0e:	4a2d      	ldr	r2, [pc, #180]	; (2ac4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2a10:	f023 0301 	bic.w	r3, r3, #1
    2a14:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2a18:	4b2a      	ldr	r3, [pc, #168]	; (2ac4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2a1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a1e:	4a29      	ldr	r2, [pc, #164]	; (2ac4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2a20:	f023 0304 	bic.w	r3, r3, #4
    2a24:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    2a28:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    2a2c:	2b01      	cmp	r3, #1
    2a2e:	d144      	bne.n	2aba <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    2a30:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2a34:	4a23      	ldr	r2, [pc, #140]	; (2ac4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2a36:	f003 0301 	and.w	r3, r3, #1
    2a3a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2a3e:	4b21      	ldr	r3, [pc, #132]	; (2ac4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2a40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a44:	4a1f      	ldr	r2, [pc, #124]	; (2ac4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2a46:	f043 0301 	orr.w	r3, r3, #1
    2a4a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    2a4e:	4b1d      	ldr	r3, [pc, #116]	; (2ac4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2a50:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2a54:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2a58:	009b      	lsls	r3, r3, #2
    2a5a:	f003 0304 	and.w	r3, r3, #4
    2a5e:	4919      	ldr	r1, [pc, #100]	; (2ac4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2a60:	4313      	orrs	r3, r2
    2a62:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2a66:	aa05      	add	r2, sp, #20
    2a68:	a906      	add	r1, sp, #24
    2a6a:	a807      	add	r0, sp, #28
    2a6c:	f24c 3350 	movw	r3, #50000	; 0xc350
    2a70:	f7ff f8f8 	bl	1c64 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2a74:	4b13      	ldr	r3, [pc, #76]	; (2ac4 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    2a76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2a7a:	0e1b      	lsrs	r3, r3, #24
    2a7c:	f003 0301 	and.w	r3, r3, #1
    2a80:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2a82:	9a05      	ldr	r2, [sp, #20]
    2a84:	a906      	add	r1, sp, #24
    2a86:	ab07      	add	r3, sp, #28
    2a88:	4618      	mov	r0, r3
    2a8a:	f7ff f905 	bl	1c98 <Clock_Ip_TimeoutExpired>
    2a8e:	4603      	mov	r3, r0
    2a90:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2a94:	9b08      	ldr	r3, [sp, #32]
    2a96:	2b00      	cmp	r3, #0
    2a98:	d106      	bne.n	2aa8 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    2a9a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2a9e:	f083 0301 	eor.w	r3, r3, #1
    2aa2:	b2db      	uxtb	r3, r3
    2aa4:	2b00      	cmp	r3, #0
    2aa6:	d1e5      	bne.n	2a74 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    2aa8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2aac:	2b00      	cmp	r3, #0
    2aae:	d004      	beq.n	2aba <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    2ab0:	9b02      	ldr	r3, [sp, #8]
    2ab2:	4619      	mov	r1, r3
    2ab4:	2001      	movs	r0, #1
    2ab6:	f7ff f8c5 	bl	1c44 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2aba:	bf00      	nop
    2abc:	b00b      	add	sp, #44	; 0x2c
    2abe:	f85d fb04 	ldr.w	pc, [sp], #4
    2ac2:	bf00      	nop
    2ac4:	40064000 	.word	0x40064000

00002ac8 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2ac8:	b500      	push	{lr}
    2aca:	b089      	sub	sp, #36	; 0x24
    2acc:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2ace:	2300      	movs	r3, #0
    2ad0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    2ad4:	4b1f      	ldr	r3, [pc, #124]	; (2b54 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2ad6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ada:	4a1e      	ldr	r2, [pc, #120]	; (2b54 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2adc:	f043 0301 	orr.w	r3, r3, #1
    2ae0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    2ae4:	4b1b      	ldr	r3, [pc, #108]	; (2b54 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2ae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2aea:	4a1a      	ldr	r2, [pc, #104]	; (2b54 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2aec:	f043 0304 	orr.w	r3, r3, #4
    2af0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2af4:	aa03      	add	r2, sp, #12
    2af6:	a904      	add	r1, sp, #16
    2af8:	a805      	add	r0, sp, #20
    2afa:	f24c 3350 	movw	r3, #50000	; 0xc350
    2afe:	f7ff f8b1 	bl	1c64 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    2b02:	4b14      	ldr	r3, [pc, #80]	; (2b54 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    2b04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b08:	0e1b      	lsrs	r3, r3, #24
    2b0a:	f003 0301 	and.w	r3, r3, #1
    2b0e:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2b10:	9a03      	ldr	r2, [sp, #12]
    2b12:	a904      	add	r1, sp, #16
    2b14:	ab05      	add	r3, sp, #20
    2b16:	4618      	mov	r0, r3
    2b18:	f7ff f8be 	bl	1c98 <Clock_Ip_TimeoutExpired>
    2b1c:	4603      	mov	r3, r0
    2b1e:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2b22:	9b06      	ldr	r3, [sp, #24]
    2b24:	2b00      	cmp	r3, #0
    2b26:	d106      	bne.n	2b36 <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    2b28:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2b2c:	f083 0301 	eor.w	r3, r3, #1
    2b30:	b2db      	uxtb	r3, r3
    2b32:	2b00      	cmp	r3, #0
    2b34:	d1e5      	bne.n	2b02 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    2b36:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2b3a:	2b00      	cmp	r3, #0
    2b3c:	d005      	beq.n	2b4a <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2b3e:	9b01      	ldr	r3, [sp, #4]
    2b40:	681b      	ldr	r3, [r3, #0]
    2b42:	4619      	mov	r1, r3
    2b44:	2001      	movs	r0, #1
    2b46:	f7ff f87d 	bl	1c44 <Clock_Ip_ReportClockErrors>
    }
}
    2b4a:	bf00      	nop
    2b4c:	b009      	add	sp, #36	; 0x24
    2b4e:	f85d fb04 	ldr.w	pc, [sp], #4
    2b52:	bf00      	nop
    2b54:	40064000 	.word	0x40064000

00002b58 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    2b58:	b082      	sub	sp, #8
    2b5a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    2b5c:	4b09      	ldr	r3, [pc, #36]	; (2b84 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2b5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b62:	4a08      	ldr	r2, [pc, #32]	; (2b84 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2b64:	f023 0301 	bic.w	r3, r3, #1
    2b68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2b6c:	4b05      	ldr	r3, [pc, #20]	; (2b84 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2b6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b72:	4a04      	ldr	r2, [pc, #16]	; (2b84 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    2b74:	f023 0304 	bic.w	r3, r3, #4
    2b78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2b7c:	bf00      	nop
    2b7e:	b002      	add	sp, #8
    2b80:	4770      	bx	lr
    2b82:	bf00      	nop
    2b84:	40064000 	.word	0x40064000

00002b88 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2b88:	b082      	sub	sp, #8
    2b8a:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2b8c:	4b0f      	ldr	r3, [pc, #60]	; (2bcc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2b8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2b92:	4a0e      	ldr	r2, [pc, #56]	; (2bcc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2b94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2b98:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2b9c:	4b0b      	ldr	r3, [pc, #44]	; (2bcc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2b9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2ba2:	4a0a      	ldr	r2, [pc, #40]	; (2bcc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2ba4:	f023 0304 	bic.w	r3, r3, #4
    2ba8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    2bac:	4b07      	ldr	r3, [pc, #28]	; (2bcc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2bae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2bb2:	9b01      	ldr	r3, [sp, #4]
    2bb4:	7a1b      	ldrb	r3, [r3, #8]
    2bb6:	009b      	lsls	r3, r3, #2
    2bb8:	f003 0304 	and.w	r3, r3, #4
    2bbc:	4903      	ldr	r1, [pc, #12]	; (2bcc <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    2bbe:	4313      	orrs	r3, r2
    2bc0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2bc4:	bf00      	nop
    2bc6:	b002      	add	sp, #8
    2bc8:	4770      	bx	lr
    2bca:	bf00      	nop
    2bcc:	40064000 	.word	0x40064000

00002bd0 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2bd0:	b082      	sub	sp, #8
    2bd2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2bd4:	9b01      	ldr	r3, [sp, #4]
    2bd6:	889b      	ldrh	r3, [r3, #4]
    2bd8:	2b01      	cmp	r3, #1
    2bda:	d107      	bne.n	2bec <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    2bdc:	4b05      	ldr	r3, [pc, #20]	; (2bf4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2bde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2be2:	4a04      	ldr	r2, [pc, #16]	; (2bf4 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    2be4:	f043 0304 	orr.w	r3, r3, #4
    2be8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2bec:	bf00      	nop
    2bee:	b002      	add	sp, #8
    2bf0:	4770      	bx	lr
    2bf2:	bf00      	nop
    2bf4:	40064000 	.word	0x40064000

00002bf8 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    2bf8:	b082      	sub	sp, #8
    2bfa:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    2bfc:	4b05      	ldr	r3, [pc, #20]	; (2c14 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2bfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2c02:	4a04      	ldr	r2, [pc, #16]	; (2c14 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    2c04:	f023 0304 	bic.w	r3, r3, #4
    2c08:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2c0c:	bf00      	nop
    2c0e:	b002      	add	sp, #8
    2c10:	4770      	bx	lr
    2c12:	bf00      	nop
    2c14:	40064000 	.word	0x40064000

00002c18 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2c18:	b082      	sub	sp, #8
    2c1a:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    2c1c:	4b0f      	ldr	r3, [pc, #60]	; (2c5c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2c1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2c22:	4a0e      	ldr	r2, [pc, #56]	; (2c5c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2c24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2c28:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2c2c:	4b0b      	ldr	r3, [pc, #44]	; (2c5c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2c32:	4a0a      	ldr	r2, [pc, #40]	; (2c5c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2c34:	f023 0302 	bic.w	r3, r3, #2
    2c38:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    2c3c:	4b07      	ldr	r3, [pc, #28]	; (2c5c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2c3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2c42:	9b01      	ldr	r3, [sp, #4]
    2c44:	7a5b      	ldrb	r3, [r3, #9]
    2c46:	005b      	lsls	r3, r3, #1
    2c48:	f003 0302 	and.w	r3, r3, #2
    2c4c:	4903      	ldr	r1, [pc, #12]	; (2c5c <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    2c4e:	4313      	orrs	r3, r2
    2c50:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    2c54:	bf00      	nop
    2c56:	b002      	add	sp, #8
    2c58:	4770      	bx	lr
    2c5a:	bf00      	nop
    2c5c:	40064000 	.word	0x40064000

00002c60 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2c60:	b082      	sub	sp, #8
    2c62:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    2c64:	9b01      	ldr	r3, [sp, #4]
    2c66:	889b      	ldrh	r3, [r3, #4]
    2c68:	2b01      	cmp	r3, #1
    2c6a:	d107      	bne.n	2c7c <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    2c6c:	4b05      	ldr	r3, [pc, #20]	; (2c84 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2c6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2c72:	4a04      	ldr	r2, [pc, #16]	; (2c84 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    2c74:	f043 0302 	orr.w	r3, r3, #2
    2c78:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    2c7c:	bf00      	nop
    2c7e:	b002      	add	sp, #8
    2c80:	4770      	bx	lr
    2c82:	bf00      	nop
    2c84:	40064000 	.word	0x40064000

00002c88 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    2c88:	b082      	sub	sp, #8
    2c8a:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    2c8c:	4b05      	ldr	r3, [pc, #20]	; (2ca4 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2c8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2c92:	4a04      	ldr	r2, [pc, #16]	; (2ca4 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    2c94:	f023 0302 	bic.w	r3, r3, #2
    2c98:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    2c9c:	bf00      	nop
    2c9e:	b002      	add	sp, #8
    2ca0:	4770      	bx	lr
    2ca2:	bf00      	nop
    2ca4:	40064000 	.word	0x40064000

00002ca8 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2ca8:	b500      	push	{lr}
    2caa:	b08b      	sub	sp, #44	; 0x2c
    2cac:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2cae:	9b01      	ldr	r3, [sp, #4]
    2cb0:	681a      	ldr	r2, [r3, #0]
    2cb2:	4975      	ldr	r1, [pc, #468]	; (2e88 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    2cb4:	4613      	mov	r3, r2
    2cb6:	00db      	lsls	r3, r3, #3
    2cb8:	4413      	add	r3, r2
    2cba:	440b      	add	r3, r1
    2cbc:	781b      	ldrb	r3, [r3, #0]
    2cbe:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    2cc0:	2300      	movs	r3, #0
    2cc2:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    2cc6:	2300      	movs	r3, #0
    2cc8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    2ccc:	4b6f      	ldr	r3, [pc, #444]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2cd2:	4a6e      	ldr	r2, [pc, #440]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cd4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    2cd8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    2cdc:	4b6b      	ldr	r3, [pc, #428]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cde:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	d07d      	beq.n	2de6 <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    2cea:	9b01      	ldr	r3, [sp, #4]
    2cec:	79db      	ldrb	r3, [r3, #7]
    2cee:	461a      	mov	r2, r3
    2cf0:	4b66      	ldr	r3, [pc, #408]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2cf2:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    2cf6:	f003 0303 	and.w	r3, r3, #3
    2cfa:	429a      	cmp	r2, r3
    2cfc:	d10b      	bne.n	2d16 <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    2cfe:	9b01      	ldr	r3, [sp, #4]
    2d00:	799b      	ldrb	r3, [r3, #6]
    2d02:	461a      	mov	r2, r3
    2d04:	4b61      	ldr	r3, [pc, #388]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d0a:	08db      	lsrs	r3, r3, #3
    2d0c:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    2d10:	429a      	cmp	r2, r3
    2d12:	f000 80b4 	beq.w	2e7e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    2d16:	4b5d      	ldr	r3, [pc, #372]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2d1c:	f003 0301 	and.w	r3, r3, #1
    2d20:	2b00      	cmp	r3, #0
    2d22:	d105      	bne.n	2d30 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    2d24:	2301      	movs	r3, #1
    2d26:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    2d2a:	2000      	movs	r0, #0
    2d2c:	f7ff fd66 	bl	27fc <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    2d30:	2002      	movs	r0, #2
    2d32:	f7ff fdcf 	bl	28d4 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    2d36:	4b55      	ldr	r3, [pc, #340]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d38:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d3c:	4a53      	ldr	r2, [pc, #332]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d3e:	f023 0301 	bic.w	r3, r3, #1
    2d42:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    2d46:	9b01      	ldr	r3, [sp, #4]
    2d48:	889b      	ldrh	r3, [r3, #4]
    2d4a:	2b01      	cmp	r3, #1
    2d4c:	f040 8097 	bne.w	2e7e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    2d50:	9b01      	ldr	r3, [sp, #4]
    2d52:	79db      	ldrb	r3, [r3, #7]
    2d54:	4a4d      	ldr	r2, [pc, #308]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d56:	f003 0303 	and.w	r3, r3, #3
    2d5a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    2d5e:	4b4b      	ldr	r3, [pc, #300]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d60:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2d64:	9b01      	ldr	r3, [sp, #4]
    2d66:	799b      	ldrb	r3, [r3, #6]
    2d68:	00db      	lsls	r3, r3, #3
    2d6a:	f003 0308 	and.w	r3, r3, #8
    2d6e:	4313      	orrs	r3, r2
    2d70:	4a46      	ldr	r2, [pc, #280]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d72:	f043 0301 	orr.w	r3, r3, #1
    2d76:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2d7a:	aa03      	add	r2, sp, #12
    2d7c:	a904      	add	r1, sp, #16
    2d7e:	a805      	add	r0, sp, #20
    2d80:	f24c 3350 	movw	r3, #50000	; 0xc350
    2d84:	f7fe ff6e 	bl	1c64 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2d88:	4b40      	ldr	r3, [pc, #256]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2d8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2d8e:	0e1b      	lsrs	r3, r3, #24
    2d90:	f003 0301 	and.w	r3, r3, #1
    2d94:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2d96:	9a03      	ldr	r2, [sp, #12]
    2d98:	a904      	add	r1, sp, #16
    2d9a:	ab05      	add	r3, sp, #20
    2d9c:	4618      	mov	r0, r3
    2d9e:	f7fe ff7b 	bl	1c98 <Clock_Ip_TimeoutExpired>
    2da2:	4603      	mov	r3, r0
    2da4:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2da8:	9b06      	ldr	r3, [sp, #24]
    2daa:	2b00      	cmp	r3, #0
    2dac:	d106      	bne.n	2dbc <Clock_Ip_SetFirc_TrustedCall+0x114>
    2dae:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2db2:	f083 0301 	eor.w	r3, r3, #1
    2db6:	b2db      	uxtb	r3, r3
    2db8:	2b00      	cmp	r3, #0
    2dba:	d1e5      	bne.n	2d88 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    2dbc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	d005      	beq.n	2dd0 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2dc4:	9b01      	ldr	r3, [sp, #4]
    2dc6:	681b      	ldr	r3, [r3, #0]
    2dc8:	4619      	mov	r1, r3
    2dca:	2001      	movs	r0, #1
    2dcc:	f7fe ff3a 	bl	1c44 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    2dd0:	2003      	movs	r0, #3
    2dd2:	f7ff fd7f 	bl	28d4 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    2dd6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    2dda:	2b00      	cmp	r3, #0
    2ddc:	d04f      	beq.n	2e7e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    2dde:	2002      	movs	r0, #2
    2de0:	f7ff fd26 	bl	2830 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    2de4:	e04b      	b.n	2e7e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    2de6:	4b29      	ldr	r3, [pc, #164]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2de8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2dec:	4a27      	ldr	r2, [pc, #156]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2dee:	f023 0301 	bic.w	r3, r3, #1
    2df2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    2df6:	9b01      	ldr	r3, [sp, #4]
    2df8:	889b      	ldrh	r3, [r3, #4]
    2dfa:	2b01      	cmp	r3, #1
    2dfc:	d13f      	bne.n	2e7e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    2dfe:	9b01      	ldr	r3, [sp, #4]
    2e00:	79db      	ldrb	r3, [r3, #7]
    2e02:	4a22      	ldr	r2, [pc, #136]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2e04:	f003 0303 	and.w	r3, r3, #3
    2e08:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    2e0c:	4b1f      	ldr	r3, [pc, #124]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2e0e:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    2e12:	9b01      	ldr	r3, [sp, #4]
    2e14:	799b      	ldrb	r3, [r3, #6]
    2e16:	00db      	lsls	r3, r3, #3
    2e18:	f003 0308 	and.w	r3, r3, #8
    2e1c:	4313      	orrs	r3, r2
    2e1e:	4a1b      	ldr	r2, [pc, #108]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2e20:	f043 0301 	orr.w	r3, r3, #1
    2e24:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2e28:	aa03      	add	r2, sp, #12
    2e2a:	a904      	add	r1, sp, #16
    2e2c:	a805      	add	r0, sp, #20
    2e2e:	f24c 3350 	movw	r3, #50000	; 0xc350
    2e32:	f7fe ff17 	bl	1c64 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2e36:	4b15      	ldr	r3, [pc, #84]	; (2e8c <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    2e38:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2e3c:	0e1b      	lsrs	r3, r3, #24
    2e3e:	f003 0301 	and.w	r3, r3, #1
    2e42:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2e44:	9a03      	ldr	r2, [sp, #12]
    2e46:	a904      	add	r1, sp, #16
    2e48:	ab05      	add	r3, sp, #20
    2e4a:	4618      	mov	r0, r3
    2e4c:	f7fe ff24 	bl	1c98 <Clock_Ip_TimeoutExpired>
    2e50:	4603      	mov	r3, r0
    2e52:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2e56:	9b06      	ldr	r3, [sp, #24]
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d106      	bne.n	2e6a <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    2e5c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e60:	f083 0301 	eor.w	r3, r3, #1
    2e64:	b2db      	uxtb	r3, r3
    2e66:	2b00      	cmp	r3, #0
    2e68:	d1e5      	bne.n	2e36 <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    2e6a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2e6e:	2b00      	cmp	r3, #0
    2e70:	d005      	beq.n	2e7e <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2e72:	9b01      	ldr	r3, [sp, #4]
    2e74:	681b      	ldr	r3, [r3, #0]
    2e76:	4619      	mov	r1, r3
    2e78:	2001      	movs	r0, #1
    2e7a:	f7fe fee3 	bl	1c44 <Clock_Ip_ReportClockErrors>
}
    2e7e:	bf00      	nop
    2e80:	b00b      	add	sp, #44	; 0x2c
    2e82:	f85d fb04 	ldr.w	pc, [sp], #4
    2e86:	bf00      	nop
    2e88:	0000bb48 	.word	0x0000bb48
    2e8c:	40064000 	.word	0x40064000

00002e90 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    2e90:	b500      	push	{lr}
    2e92:	b089      	sub	sp, #36	; 0x24
    2e94:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    2e96:	2300      	movs	r3, #0
    2e98:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    2e9c:	9b01      	ldr	r3, [sp, #4]
    2e9e:	889b      	ldrh	r3, [r3, #4]
    2ea0:	2b01      	cmp	r3, #1
    2ea2:	d132      	bne.n	2f0a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    2ea4:	4b1b      	ldr	r3, [pc, #108]	; (2f14 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2ea6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2eaa:	4a1a      	ldr	r2, [pc, #104]	; (2f14 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2eac:	f043 0301 	orr.w	r3, r3, #1
    2eb0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2eb4:	aa03      	add	r2, sp, #12
    2eb6:	a904      	add	r1, sp, #16
    2eb8:	a805      	add	r0, sp, #20
    2eba:	f24c 3350 	movw	r3, #50000	; 0xc350
    2ebe:	f7fe fed1 	bl	1c64 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    2ec2:	4b14      	ldr	r3, [pc, #80]	; (2f14 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    2ec4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2ec8:	0e1b      	lsrs	r3, r3, #24
    2eca:	f003 0301 	and.w	r3, r3, #1
    2ece:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2ed0:	9a03      	ldr	r2, [sp, #12]
    2ed2:	a904      	add	r1, sp, #16
    2ed4:	ab05      	add	r3, sp, #20
    2ed6:	4618      	mov	r0, r3
    2ed8:	f7fe fede 	bl	1c98 <Clock_Ip_TimeoutExpired>
    2edc:	4603      	mov	r3, r0
    2ede:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    2ee2:	9b06      	ldr	r3, [sp, #24]
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	d106      	bne.n	2ef6 <Clock_Ip_EnableFirc_TrustedCall+0x66>
    2ee8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2eec:	f083 0301 	eor.w	r3, r3, #1
    2ef0:	b2db      	uxtb	r3, r3
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d1e5      	bne.n	2ec2 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    2ef6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2efa:	2b00      	cmp	r3, #0
    2efc:	d005      	beq.n	2f0a <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    2efe:	9b01      	ldr	r3, [sp, #4]
    2f00:	681b      	ldr	r3, [r3, #0]
    2f02:	4619      	mov	r1, r3
    2f04:	2001      	movs	r0, #1
    2f06:	f7fe fe9d 	bl	1c44 <Clock_Ip_ReportClockErrors>
        }
    }
}
    2f0a:	bf00      	nop
    2f0c:	b009      	add	sp, #36	; 0x24
    2f0e:	f85d fb04 	ldr.w	pc, [sp], #4
    2f12:	bf00      	nop
    2f14:	40064000 	.word	0x40064000

00002f18 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    2f18:	b082      	sub	sp, #8
    2f1a:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    2f1c:	4b05      	ldr	r3, [pc, #20]	; (2f34 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2f1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    2f22:	4a04      	ldr	r2, [pc, #16]	; (2f34 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    2f24:	f023 0301 	bic.w	r3, r3, #1
    2f28:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    2f2c:	bf00      	nop
    2f2e:	b002      	add	sp, #8
    2f30:	4770      	bx	lr
    2f32:	bf00      	nop
    2f34:	40064000 	.word	0x40064000

00002f38 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    2f38:	b082      	sub	sp, #8
    2f3a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2f3c:	bf00      	nop
    2f3e:	b002      	add	sp, #8
    2f40:	4770      	bx	lr

00002f42 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    2f42:	b082      	sub	sp, #8
    2f44:	9001      	str	r0, [sp, #4]
    2f46:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    2f48:	bf00      	nop
    2f4a:	b002      	add	sp, #8
    2f4c:	4770      	bx	lr

00002f4e <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    2f4e:	b082      	sub	sp, #8
    2f50:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    2f52:	bf00      	nop
    2f54:	b002      	add	sp, #8
    2f56:	4770      	bx	lr

00002f58 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    2f58:	b082      	sub	sp, #8
    2f5a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2f5c:	bf00      	nop
    2f5e:	b002      	add	sp, #8
    2f60:	4770      	bx	lr

00002f62 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    2f62:	b082      	sub	sp, #8
    2f64:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    2f66:	2302      	movs	r3, #2
}
    2f68:	4618      	mov	r0, r3
    2f6a:	b002      	add	sp, #8
    2f6c:	4770      	bx	lr

00002f6e <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    2f6e:	b082      	sub	sp, #8
    2f70:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    2f72:	bf00      	nop
    2f74:	b002      	add	sp, #8
    2f76:	4770      	bx	lr

00002f78 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    2f78:	b500      	push	{lr}
    2f7a:	b083      	sub	sp, #12
    2f7c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f7e:	9b01      	ldr	r3, [sp, #4]
    2f80:	2b00      	cmp	r3, #0
    2f82:	d002      	beq.n	2f8a <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    2f84:	9801      	ldr	r0, [sp, #4]
    2f86:	f000 f870 	bl	306a <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2f8a:	bf00      	nop
    2f8c:	b003      	add	sp, #12
    2f8e:	f85d fb04 	ldr.w	pc, [sp], #4

00002f92 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    2f92:	b500      	push	{lr}
    2f94:	b083      	sub	sp, #12
    2f96:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2f98:	9b01      	ldr	r3, [sp, #4]
    2f9a:	2b00      	cmp	r3, #0
    2f9c:	d002      	beq.n	2fa4 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    2f9e:	9801      	ldr	r0, [sp, #4]
    2fa0:	f000 f89a 	bl	30d8 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2fa4:	bf00      	nop
    2fa6:	b003      	add	sp, #12
    2fa8:	f85d fb04 	ldr.w	pc, [sp], #4

00002fac <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    2fac:	b500      	push	{lr}
    2fae:	b089      	sub	sp, #36	; 0x24
    2fb0:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    2fb2:	2301      	movs	r3, #1
    2fb4:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    2fb6:	2300      	movs	r3, #0
    2fb8:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    2fbc:	4b1e      	ldr	r3, [pc, #120]	; (3038 <Clock_Ip_CompleteSpll+0x8c>)
    2fbe:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2fc2:	f003 0301 	and.w	r3, r3, #1
    2fc6:	2b00      	cmp	r3, #0
    2fc8:	d02f      	beq.n	302a <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    2fca:	aa02      	add	r2, sp, #8
    2fcc:	a903      	add	r1, sp, #12
    2fce:	a804      	add	r0, sp, #16
    2fd0:	f24c 3350 	movw	r3, #50000	; 0xc350
    2fd4:	f7fe fe46 	bl	1c64 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    2fd8:	4b17      	ldr	r3, [pc, #92]	; (3038 <Clock_Ip_CompleteSpll+0x8c>)
    2fda:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    2fde:	0e1b      	lsrs	r3, r3, #24
    2fe0:	f003 0301 	and.w	r3, r3, #1
    2fe4:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    2fe6:	9a02      	ldr	r2, [sp, #8]
    2fe8:	a903      	add	r1, sp, #12
    2fea:	ab04      	add	r3, sp, #16
    2fec:	4618      	mov	r0, r3
    2fee:	f7fe fe53 	bl	1c98 <Clock_Ip_TimeoutExpired>
    2ff2:	4603      	mov	r3, r0
    2ff4:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    2ff8:	9b05      	ldr	r3, [sp, #20]
    2ffa:	2b00      	cmp	r3, #0
    2ffc:	d106      	bne.n	300c <Clock_Ip_CompleteSpll+0x60>
    2ffe:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3002:	f083 0301 	eor.w	r3, r3, #1
    3006:	b2db      	uxtb	r3, r3
    3008:	2b00      	cmp	r3, #0
    300a:	d1e5      	bne.n	2fd8 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    300c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3010:	f083 0301 	eor.w	r3, r3, #1
    3014:	b2db      	uxtb	r3, r3
    3016:	2b00      	cmp	r3, #0
    3018:	d002      	beq.n	3020 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    301a:	2302      	movs	r3, #2
    301c:	9307      	str	r3, [sp, #28]
    301e:	e006      	b.n	302e <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3020:	9901      	ldr	r1, [sp, #4]
    3022:	2001      	movs	r0, #1
    3024:	f7fe fe0e 	bl	1c44 <Clock_Ip_ReportClockErrors>
    3028:	e001      	b.n	302e <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    302a:	2300      	movs	r3, #0
    302c:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    302e:	9b07      	ldr	r3, [sp, #28]
}
    3030:	4618      	mov	r0, r3
    3032:	b009      	add	sp, #36	; 0x24
    3034:	f85d fb04 	ldr.w	pc, [sp], #4
    3038:	40064000 	.word	0x40064000

0000303c <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    303c:	b500      	push	{lr}
    303e:	b083      	sub	sp, #12
    3040:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3042:	9801      	ldr	r0, [sp, #4]
    3044:	f000 f886 	bl	3154 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3048:	bf00      	nop
    304a:	b003      	add	sp, #12
    304c:	f85d fb04 	ldr.w	pc, [sp], #4

00003050 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    3050:	b500      	push	{lr}
    3052:	b083      	sub	sp, #12
    3054:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3056:	9b01      	ldr	r3, [sp, #4]
    3058:	2b00      	cmp	r3, #0
    305a:	d002      	beq.n	3062 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    305c:	9801      	ldr	r0, [sp, #4]
    305e:	f000 f891 	bl	3184 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3062:	bf00      	nop
    3064:	b003      	add	sp, #12
    3066:	f85d fb04 	ldr.w	pc, [sp], #4

0000306a <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    306a:	b082      	sub	sp, #8
    306c:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    306e:	4b19      	ldr	r3, [pc, #100]	; (30d4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3070:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3074:	4a17      	ldr	r2, [pc, #92]	; (30d4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3076:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    307a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    307e:	4b15      	ldr	r3, [pc, #84]	; (30d4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3080:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3084:	4a13      	ldr	r2, [pc, #76]	; (30d4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    308a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    308e:	4b11      	ldr	r3, [pc, #68]	; (30d4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3090:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3094:	4a0f      	ldr	r2, [pc, #60]	; (30d4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    3096:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    309a:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    309e:	4b0d      	ldr	r3, [pc, #52]	; (30d4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    30a0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    30a4:	4a0b      	ldr	r2, [pc, #44]	; (30d4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    30a6:	f023 0301 	bic.w	r3, r3, #1
    30aa:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    30ae:	4b09      	ldr	r3, [pc, #36]	; (30d4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    30b0:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    30b4:	4a07      	ldr	r2, [pc, #28]	; (30d4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    30b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    30ba:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    30be:	4b05      	ldr	r3, [pc, #20]	; (30d4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    30c0:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    30c4:	4a03      	ldr	r2, [pc, #12]	; (30d4 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    30c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    30ca:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    30ce:	bf00      	nop
    30d0:	b002      	add	sp, #8
    30d2:	4770      	bx	lr
    30d4:	40064000 	.word	0x40064000

000030d8 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    30d8:	b082      	sub	sp, #8
    30da:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    30dc:	9b01      	ldr	r3, [sp, #4]
    30de:	889b      	ldrh	r3, [r3, #4]
    30e0:	2b01      	cmp	r3, #1
    30e2:	d12f      	bne.n	3144 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    30e4:	4b1a      	ldr	r3, [pc, #104]	; (3150 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    30e6:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    30ea:	9b01      	ldr	r3, [sp, #4]
    30ec:	7b5b      	ldrb	r3, [r3, #13]
    30ee:	3b01      	subs	r3, #1
    30f0:	021b      	lsls	r3, r3, #8
    30f2:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    30f6:	9b01      	ldr	r3, [sp, #4]
    30f8:	7d1b      	ldrb	r3, [r3, #20]
    30fa:	3b10      	subs	r3, #16
    30fc:	041b      	lsls	r3, r3, #16
    30fe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    3102:	430b      	orrs	r3, r1
    3104:	4912      	ldr	r1, [pc, #72]	; (3150 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3106:	4313      	orrs	r3, r2
    3108:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    310c:	9b01      	ldr	r3, [sp, #4]
    310e:	7fdb      	ldrb	r3, [r3, #31]
    3110:	2b02      	cmp	r3, #2
    3112:	d011      	beq.n	3138 <Clock_Ip_SetSpll_TrustedCall+0x60>
    3114:	2b02      	cmp	r3, #2
    3116:	dc17      	bgt.n	3148 <Clock_Ip_SetSpll_TrustedCall+0x70>
    3118:	2b00      	cmp	r3, #0
    311a:	d002      	beq.n	3122 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    311c:	2b01      	cmp	r3, #1
    311e:	d005      	beq.n	312c <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    3120:	e012      	b.n	3148 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    3122:	4b0b      	ldr	r3, [pc, #44]	; (3150 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    3124:	2200      	movs	r2, #0
    3126:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    312a:	e00e      	b.n	314a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    312c:	4b08      	ldr	r3, [pc, #32]	; (3150 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    312e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3132:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3136:	e008      	b.n	314a <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    3138:	4b05      	ldr	r3, [pc, #20]	; (3150 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    313a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    313e:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    3142:	e002      	b.n	314a <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    3144:	bf00      	nop
    3146:	e000      	b.n	314a <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    3148:	bf00      	nop
}
    314a:	bf00      	nop
    314c:	b002      	add	sp, #8
    314e:	4770      	bx	lr
    3150:	40064000 	.word	0x40064000

00003154 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    3154:	b082      	sub	sp, #8
    3156:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    3158:	4b09      	ldr	r3, [pc, #36]	; (3180 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    315a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    315e:	4a08      	ldr	r2, [pc, #32]	; (3180 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3160:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3164:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    3168:	4b05      	ldr	r3, [pc, #20]	; (3180 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    316a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    316e:	4a04      	ldr	r2, [pc, #16]	; (3180 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    3170:	f023 0301 	bic.w	r3, r3, #1
    3174:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    3178:	bf00      	nop
    317a:	b002      	add	sp, #8
    317c:	4770      	bx	lr
    317e:	bf00      	nop
    3180:	40064000 	.word	0x40064000

00003184 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    3184:	b082      	sub	sp, #8
    3186:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    3188:	9b01      	ldr	r3, [sp, #4]
    318a:	889b      	ldrh	r3, [r3, #4]
    318c:	2b01      	cmp	r3, #1
    318e:	d107      	bne.n	31a0 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    3190:	4b05      	ldr	r3, [pc, #20]	; (31a8 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3192:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3196:	4a04      	ldr	r2, [pc, #16]	; (31a8 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    3198:	f043 0301 	orr.w	r3, r3, #1
    319c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    31a0:	bf00      	nop
    31a2:	b002      	add	sp, #8
    31a4:	4770      	bx	lr
    31a6:	bf00      	nop
    31a8:	40064000 	.word	0x40064000

000031ac <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    31ac:	b082      	sub	sp, #8
    31ae:	9001      	str	r0, [sp, #4]
    31b0:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    31b2:	bf00      	nop
    31b4:	b002      	add	sp, #8
    31b6:	4770      	bx	lr

000031b8 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    31b8:	b082      	sub	sp, #8
    31ba:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    31bc:	bf00      	nop
    31be:	b002      	add	sp, #8
    31c0:	4770      	bx	lr

000031c2 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    31c2:	b500      	push	{lr}
    31c4:	b083      	sub	sp, #12
    31c6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31c8:	9b01      	ldr	r3, [sp, #4]
    31ca:	2b00      	cmp	r3, #0
    31cc:	d002      	beq.n	31d4 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    31ce:	9801      	ldr	r0, [sp, #4]
    31d0:	f000 f8ee 	bl	33b0 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31d4:	bf00      	nop
    31d6:	b003      	add	sp, #12
    31d8:	f85d fb04 	ldr.w	pc, [sp], #4

000031dc <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    31dc:	b500      	push	{lr}
    31de:	b083      	sub	sp, #12
    31e0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31e2:	9b01      	ldr	r3, [sp, #4]
    31e4:	2b00      	cmp	r3, #0
    31e6:	d002      	beq.n	31ee <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    31e8:	9801      	ldr	r0, [sp, #4]
    31ea:	f000 f8ff 	bl	33ec <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    31ee:	bf00      	nop
    31f0:	b003      	add	sp, #12
    31f2:	f85d fb04 	ldr.w	pc, [sp], #4

000031f6 <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    31f6:	b500      	push	{lr}
    31f8:	b083      	sub	sp, #12
    31fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31fc:	9b01      	ldr	r3, [sp, #4]
    31fe:	2b00      	cmp	r3, #0
    3200:	d002      	beq.n	3208 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    3202:	9801      	ldr	r0, [sp, #4]
    3204:	f000 f912 	bl	342c <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3208:	bf00      	nop
    320a:	b003      	add	sp, #12
    320c:	f85d fb04 	ldr.w	pc, [sp], #4

00003210 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    3210:	b500      	push	{lr}
    3212:	b083      	sub	sp, #12
    3214:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3216:	9b01      	ldr	r3, [sp, #4]
    3218:	2b00      	cmp	r3, #0
    321a:	d002      	beq.n	3222 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    321c:	9801      	ldr	r0, [sp, #4]
    321e:	f000 f925 	bl	346c <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3222:	bf00      	nop
    3224:	b003      	add	sp, #12
    3226:	f85d fb04 	ldr.w	pc, [sp], #4

0000322a <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    322a:	b500      	push	{lr}
    322c:	b083      	sub	sp, #12
    322e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3230:	9b01      	ldr	r3, [sp, #4]
    3232:	2b00      	cmp	r3, #0
    3234:	d002      	beq.n	323c <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    3236:	9801      	ldr	r0, [sp, #4]
    3238:	f000 f936 	bl	34a8 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    323c:	bf00      	nop
    323e:	b003      	add	sp, #12
    3240:	f85d fb04 	ldr.w	pc, [sp], #4

00003244 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    3244:	b500      	push	{lr}
    3246:	b083      	sub	sp, #12
    3248:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    324a:	9b01      	ldr	r3, [sp, #4]
    324c:	2b00      	cmp	r3, #0
    324e:	d002      	beq.n	3256 <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    3250:	9801      	ldr	r0, [sp, #4]
    3252:	f000 f949 	bl	34e8 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3256:	bf00      	nop
    3258:	b003      	add	sp, #12
    325a:	f85d fb04 	ldr.w	pc, [sp], #4

0000325e <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    325e:	b500      	push	{lr}
    3260:	b083      	sub	sp, #12
    3262:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3264:	9b01      	ldr	r3, [sp, #4]
    3266:	2b00      	cmp	r3, #0
    3268:	d002      	beq.n	3270 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    326a:	9801      	ldr	r0, [sp, #4]
    326c:	f000 f958 	bl	3520 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3270:	bf00      	nop
    3272:	b003      	add	sp, #12
    3274:	f85d fb04 	ldr.w	pc, [sp], #4

00003278 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3278:	b500      	push	{lr}
    327a:	b083      	sub	sp, #12
    327c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    327e:	9b01      	ldr	r3, [sp, #4]
    3280:	2b00      	cmp	r3, #0
    3282:	d002      	beq.n	328a <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    3284:	9801      	ldr	r0, [sp, #4]
    3286:	f000 f969 	bl	355c <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    328a:	bf00      	nop
    328c:	b003      	add	sp, #12
    328e:	f85d fb04 	ldr.w	pc, [sp], #4

00003292 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    3292:	b500      	push	{lr}
    3294:	b083      	sub	sp, #12
    3296:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3298:	9b01      	ldr	r3, [sp, #4]
    329a:	2b00      	cmp	r3, #0
    329c:	d002      	beq.n	32a4 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    329e:	9801      	ldr	r0, [sp, #4]
    32a0:	f000 f978 	bl	3594 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32a4:	bf00      	nop
    32a6:	b003      	add	sp, #12
    32a8:	f85d fb04 	ldr.w	pc, [sp], #4

000032ac <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    32ac:	b500      	push	{lr}
    32ae:	b083      	sub	sp, #12
    32b0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32b2:	9b01      	ldr	r3, [sp, #4]
    32b4:	2b00      	cmp	r3, #0
    32b6:	d002      	beq.n	32be <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    32b8:	9801      	ldr	r0, [sp, #4]
    32ba:	f000 f989 	bl	35d0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32be:	bf00      	nop
    32c0:	b003      	add	sp, #12
    32c2:	f85d fb04 	ldr.w	pc, [sp], #4

000032c6 <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    32c6:	b500      	push	{lr}
    32c8:	b083      	sub	sp, #12
    32ca:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32cc:	9b01      	ldr	r3, [sp, #4]
    32ce:	2b00      	cmp	r3, #0
    32d0:	d002      	beq.n	32d8 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    32d2:	9801      	ldr	r0, [sp, #4]
    32d4:	f000 f998 	bl	3608 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32d8:	bf00      	nop
    32da:	b003      	add	sp, #12
    32dc:	f85d fb04 	ldr.w	pc, [sp], #4

000032e0 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    32e0:	b500      	push	{lr}
    32e2:	b083      	sub	sp, #12
    32e4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32e6:	9b01      	ldr	r3, [sp, #4]
    32e8:	2b00      	cmp	r3, #0
    32ea:	d002      	beq.n	32f2 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    32ec:	9801      	ldr	r0, [sp, #4]
    32ee:	f000 f9a9 	bl	3644 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32f2:	bf00      	nop
    32f4:	b003      	add	sp, #12
    32f6:	f85d fb04 	ldr.w	pc, [sp], #4

000032fa <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    32fa:	b500      	push	{lr}
    32fc:	b083      	sub	sp, #12
    32fe:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3300:	9b01      	ldr	r3, [sp, #4]
    3302:	2b00      	cmp	r3, #0
    3304:	d002      	beq.n	330c <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    3306:	9801      	ldr	r0, [sp, #4]
    3308:	f000 f9e6 	bl	36d8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    330c:	bf00      	nop
    330e:	b003      	add	sp, #12
    3310:	f85d fb04 	ldr.w	pc, [sp], #4

00003314 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    3314:	b500      	push	{lr}
    3316:	b083      	sub	sp, #12
    3318:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    331a:	9b01      	ldr	r3, [sp, #4]
    331c:	2b00      	cmp	r3, #0
    331e:	d002      	beq.n	3326 <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    3320:	9801      	ldr	r0, [sp, #4]
    3322:	f000 fa25 	bl	3770 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3326:	bf00      	nop
    3328:	b003      	add	sp, #12
    332a:	f85d fb04 	ldr.w	pc, [sp], #4

0000332e <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    332e:	b500      	push	{lr}
    3330:	b083      	sub	sp, #12
    3332:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3334:	9b01      	ldr	r3, [sp, #4]
    3336:	2b00      	cmp	r3, #0
    3338:	d002      	beq.n	3340 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    333a:	9801      	ldr	r0, [sp, #4]
    333c:	f000 fa2a 	bl	3794 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3340:	bf00      	nop
    3342:	b003      	add	sp, #12
    3344:	f85d fb04 	ldr.w	pc, [sp], #4

00003348 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3348:	b500      	push	{lr}
    334a:	b083      	sub	sp, #12
    334c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    334e:	9b01      	ldr	r3, [sp, #4]
    3350:	2b00      	cmp	r3, #0
    3352:	d002      	beq.n	335a <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    3354:	9801      	ldr	r0, [sp, #4]
    3356:	f000 fa3b 	bl	37d0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    335a:	bf00      	nop
    335c:	b003      	add	sp, #12
    335e:	f85d fb04 	ldr.w	pc, [sp], #4

00003362 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    3362:	b500      	push	{lr}
    3364:	b083      	sub	sp, #12
    3366:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3368:	9b01      	ldr	r3, [sp, #4]
    336a:	2b00      	cmp	r3, #0
    336c:	d002      	beq.n	3374 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    336e:	9801      	ldr	r0, [sp, #4]
    3370:	f000 fa56 	bl	3820 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3374:	bf00      	nop
    3376:	b003      	add	sp, #12
    3378:	f85d fb04 	ldr.w	pc, [sp], #4

0000337c <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    337c:	b500      	push	{lr}
    337e:	b083      	sub	sp, #12
    3380:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3382:	9b01      	ldr	r3, [sp, #4]
    3384:	2b00      	cmp	r3, #0
    3386:	d002      	beq.n	338e <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    3388:	9801      	ldr	r0, [sp, #4]
    338a:	f000 fa79 	bl	3880 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    338e:	bf00      	nop
    3390:	b003      	add	sp, #12
    3392:	f85d fb04 	ldr.w	pc, [sp], #4

00003396 <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    3396:	b500      	push	{lr}
    3398:	b083      	sub	sp, #12
    339a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    339c:	9b01      	ldr	r3, [sp, #4]
    339e:	2b00      	cmp	r3, #0
    33a0:	d002      	beq.n	33a8 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    33a2:	9801      	ldr	r0, [sp, #4]
    33a4:	f000 fa8a 	bl	38bc <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33a8:	bf00      	nop
    33aa:	b003      	add	sp, #12
    33ac:	f85d fb04 	ldr.w	pc, [sp], #4

000033b0 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    33b0:	b084      	sub	sp, #16
    33b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    33b4:	4b0b      	ldr	r3, [pc, #44]	; (33e4 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    33b6:	795b      	ldrb	r3, [r3, #5]
    33b8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    33ba:	4b0b      	ldr	r3, [pc, #44]	; (33e8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    33bc:	695b      	ldr	r3, [r3, #20]
    33be:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    33c0:	9b02      	ldr	r3, [sp, #8]
    33c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    33c6:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    33c8:	9b03      	ldr	r3, [sp, #12]
    33ca:	061b      	lsls	r3, r3, #24
    33cc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    33d0:	9a02      	ldr	r2, [sp, #8]
    33d2:	4313      	orrs	r3, r2
    33d4:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    33d6:	4a04      	ldr	r2, [pc, #16]	; (33e8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    33d8:	9b02      	ldr	r3, [sp, #8]
    33da:	6153      	str	r3, [r2, #20]
}
    33dc:	bf00      	nop
    33de:	b004      	add	sp, #16
    33e0:	4770      	bx	lr
    33e2:	bf00      	nop
    33e4:	0000beb0 	.word	0x0000beb0
    33e8:	40064000 	.word	0x40064000

000033ec <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    33ec:	b084      	sub	sp, #16
    33ee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    33f0:	9b01      	ldr	r3, [sp, #4]
    33f2:	685b      	ldr	r3, [r3, #4]
    33f4:	4a0b      	ldr	r2, [pc, #44]	; (3424 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    33f6:	5cd3      	ldrb	r3, [r2, r3]
    33f8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    33fa:	4b0b      	ldr	r3, [pc, #44]	; (3428 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    33fc:	695b      	ldr	r3, [r3, #20]
    33fe:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3400:	9b02      	ldr	r3, [sp, #8]
    3402:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3406:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    3408:	9b03      	ldr	r3, [sp, #12]
    340a:	061b      	lsls	r3, r3, #24
    340c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3410:	9a02      	ldr	r2, [sp, #8]
    3412:	4313      	orrs	r3, r2
    3414:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    3416:	4a04      	ldr	r2, [pc, #16]	; (3428 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    3418:	9b02      	ldr	r3, [sp, #8]
    341a:	6153      	str	r3, [r2, #20]
}
    341c:	bf00      	nop
    341e:	b004      	add	sp, #16
    3420:	4770      	bx	lr
    3422:	bf00      	nop
    3424:	0000beb0 	.word	0x0000beb0
    3428:	40064000 	.word	0x40064000

0000342c <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    342c:	b084      	sub	sp, #16
    342e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3430:	9b01      	ldr	r3, [sp, #4]
    3432:	685b      	ldr	r3, [r3, #4]
    3434:	4a0b      	ldr	r2, [pc, #44]	; (3464 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    3436:	5cd3      	ldrb	r3, [r2, r3]
    3438:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    343a:	4b0b      	ldr	r3, [pc, #44]	; (3468 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    343c:	699b      	ldr	r3, [r3, #24]
    343e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    3440:	9b02      	ldr	r3, [sp, #8]
    3442:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3446:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    3448:	9b03      	ldr	r3, [sp, #12]
    344a:	061b      	lsls	r3, r3, #24
    344c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    3450:	9a02      	ldr	r2, [sp, #8]
    3452:	4313      	orrs	r3, r2
    3454:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    3456:	4a04      	ldr	r2, [pc, #16]	; (3468 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    3458:	9b02      	ldr	r3, [sp, #8]
    345a:	6193      	str	r3, [r2, #24]
}
    345c:	bf00      	nop
    345e:	b004      	add	sp, #16
    3460:	4770      	bx	lr
    3462:	bf00      	nop
    3464:	0000beb0 	.word	0x0000beb0
    3468:	40064000 	.word	0x40064000

0000346c <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    346c:	b084      	sub	sp, #16
    346e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3470:	4b0b      	ldr	r3, [pc, #44]	; (34a0 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    3472:	795b      	ldrb	r3, [r3, #5]
    3474:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    3476:	4b0b      	ldr	r3, [pc, #44]	; (34a4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3478:	69db      	ldr	r3, [r3, #28]
    347a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    347c:	9b02      	ldr	r3, [sp, #8]
    347e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3482:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    3484:	9b03      	ldr	r3, [sp, #12]
    3486:	061b      	lsls	r3, r3, #24
    3488:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    348c:	9a02      	ldr	r2, [sp, #8]
    348e:	4313      	orrs	r3, r2
    3490:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    3492:	4a04      	ldr	r2, [pc, #16]	; (34a4 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    3494:	9b02      	ldr	r3, [sp, #8]
    3496:	61d3      	str	r3, [r2, #28]
}
    3498:	bf00      	nop
    349a:	b004      	add	sp, #16
    349c:	4770      	bx	lr
    349e:	bf00      	nop
    34a0:	0000beb0 	.word	0x0000beb0
    34a4:	40064000 	.word	0x40064000

000034a8 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    34a8:	b084      	sub	sp, #16
    34aa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    34ac:	9b01      	ldr	r3, [sp, #4]
    34ae:	685b      	ldr	r3, [r3, #4]
    34b0:	4a0b      	ldr	r2, [pc, #44]	; (34e0 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    34b2:	5cd3      	ldrb	r3, [r2, r3]
    34b4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    34b6:	4b0b      	ldr	r3, [pc, #44]	; (34e4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    34b8:	69db      	ldr	r3, [r3, #28]
    34ba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    34bc:	9b02      	ldr	r3, [sp, #8]
    34be:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    34c2:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    34c4:	9b03      	ldr	r3, [sp, #12]
    34c6:	061b      	lsls	r3, r3, #24
    34c8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    34cc:	9a02      	ldr	r2, [sp, #8]
    34ce:	4313      	orrs	r3, r2
    34d0:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    34d2:	4a04      	ldr	r2, [pc, #16]	; (34e4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    34d4:	9b02      	ldr	r3, [sp, #8]
    34d6:	61d3      	str	r3, [r2, #28]
}
    34d8:	bf00      	nop
    34da:	b004      	add	sp, #16
    34dc:	4770      	bx	lr
    34de:	bf00      	nop
    34e0:	0000beb0 	.word	0x0000beb0
    34e4:	40064000 	.word	0x40064000

000034e8 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    34e8:	b084      	sub	sp, #16
    34ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    34ec:	4b0a      	ldr	r3, [pc, #40]	; (3518 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    34ee:	7b9b      	ldrb	r3, [r3, #14]
    34f0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    34f2:	4b0a      	ldr	r3, [pc, #40]	; (351c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    34f4:	691b      	ldr	r3, [r3, #16]
    34f6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    34f8:	9b02      	ldr	r3, [sp, #8]
    34fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    34fe:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3500:	9b03      	ldr	r3, [sp, #12]
    3502:	011b      	lsls	r3, r3, #4
    3504:	9a02      	ldr	r2, [sp, #8]
    3506:	4313      	orrs	r3, r2
    3508:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    350a:	4a04      	ldr	r2, [pc, #16]	; (351c <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    350c:	9b02      	ldr	r3, [sp, #8]
    350e:	6113      	str	r3, [r2, #16]
}
    3510:	bf00      	nop
    3512:	b004      	add	sp, #16
    3514:	4770      	bx	lr
    3516:	bf00      	nop
    3518:	0000be58 	.word	0x0000be58
    351c:	40048000 	.word	0x40048000

00003520 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3520:	b084      	sub	sp, #16
    3522:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3524:	9b01      	ldr	r3, [sp, #4]
    3526:	685b      	ldr	r3, [r3, #4]
    3528:	4a0a      	ldr	r2, [pc, #40]	; (3554 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    352a:	5cd3      	ldrb	r3, [r2, r3]
    352c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    352e:	4b0a      	ldr	r3, [pc, #40]	; (3558 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3530:	691b      	ldr	r3, [r3, #16]
    3532:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    3534:	9b02      	ldr	r3, [sp, #8]
    3536:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    353a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    353c:	9b03      	ldr	r3, [sp, #12]
    353e:	011b      	lsls	r3, r3, #4
    3540:	9a02      	ldr	r2, [sp, #8]
    3542:	4313      	orrs	r3, r2
    3544:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    3546:	4a04      	ldr	r2, [pc, #16]	; (3558 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    3548:	9b02      	ldr	r3, [sp, #8]
    354a:	6113      	str	r3, [r2, #16]
}
    354c:	bf00      	nop
    354e:	b004      	add	sp, #16
    3550:	4770      	bx	lr
    3552:	bf00      	nop
    3554:	0000be58 	.word	0x0000be58
    3558:	40048000 	.word	0x40048000

0000355c <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    355c:	b084      	sub	sp, #16
    355e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3560:	4b0a      	ldr	r3, [pc, #40]	; (358c <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    3562:	785b      	ldrb	r3, [r3, #1]
    3564:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    3566:	4b0a      	ldr	r3, [pc, #40]	; (3590 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3568:	691b      	ldr	r3, [r3, #16]
    356a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    356c:	9b02      	ldr	r3, [sp, #8]
    356e:	f023 030c 	bic.w	r3, r3, #12
    3572:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3574:	9b03      	ldr	r3, [sp, #12]
    3576:	009b      	lsls	r3, r3, #2
    3578:	9a02      	ldr	r2, [sp, #8]
    357a:	4313      	orrs	r3, r2
    357c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    357e:	4a04      	ldr	r2, [pc, #16]	; (3590 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    3580:	9b02      	ldr	r3, [sp, #8]
    3582:	6113      	str	r3, [r2, #16]
}
    3584:	bf00      	nop
    3586:	b004      	add	sp, #16
    3588:	4770      	bx	lr
    358a:	bf00      	nop
    358c:	0000bf10 	.word	0x0000bf10
    3590:	40048000 	.word	0x40048000

00003594 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3594:	b084      	sub	sp, #16
    3596:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3598:	9b01      	ldr	r3, [sp, #4]
    359a:	685b      	ldr	r3, [r3, #4]
    359c:	4a0a      	ldr	r2, [pc, #40]	; (35c8 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    359e:	5cd3      	ldrb	r3, [r2, r3]
    35a0:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    35a2:	4b0a      	ldr	r3, [pc, #40]	; (35cc <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    35a4:	691b      	ldr	r3, [r3, #16]
    35a6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    35a8:	9b02      	ldr	r3, [sp, #8]
    35aa:	f023 030c 	bic.w	r3, r3, #12
    35ae:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    35b0:	9b03      	ldr	r3, [sp, #12]
    35b2:	009b      	lsls	r3, r3, #2
    35b4:	9a02      	ldr	r2, [sp, #8]
    35b6:	4313      	orrs	r3, r2
    35b8:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    35ba:	4a04      	ldr	r2, [pc, #16]	; (35cc <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    35bc:	9b02      	ldr	r3, [sp, #8]
    35be:	6113      	str	r3, [r2, #16]
}
    35c0:	bf00      	nop
    35c2:	b004      	add	sp, #16
    35c4:	4770      	bx	lr
    35c6:	bf00      	nop
    35c8:	0000bf10 	.word	0x0000bf10
    35cc:	40048000 	.word	0x40048000

000035d0 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    35d0:	b084      	sub	sp, #16
    35d2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    35d4:	4b0a      	ldr	r3, [pc, #40]	; (3600 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    35d6:	795b      	ldrb	r3, [r3, #5]
    35d8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    35da:	4b0a      	ldr	r3, [pc, #40]	; (3604 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    35dc:	6a1b      	ldr	r3, [r3, #32]
    35de:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    35e0:	9b02      	ldr	r3, [sp, #8]
    35e2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    35e6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    35e8:	9b03      	ldr	r3, [sp, #12]
    35ea:	061b      	lsls	r3, r3, #24
    35ec:	9a02      	ldr	r2, [sp, #8]
    35ee:	4313      	orrs	r3, r2
    35f0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    35f2:	4a04      	ldr	r2, [pc, #16]	; (3604 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    35f4:	9b02      	ldr	r3, [sp, #8]
    35f6:	6213      	str	r3, [r2, #32]
}
    35f8:	bf00      	nop
    35fa:	b004      	add	sp, #16
    35fc:	4770      	bx	lr
    35fe:	bf00      	nop
    3600:	0000beb0 	.word	0x0000beb0
    3604:	40064000 	.word	0x40064000

00003608 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3608:	b084      	sub	sp, #16
    360a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    360c:	9b01      	ldr	r3, [sp, #4]
    360e:	685b      	ldr	r3, [r3, #4]
    3610:	4a0a      	ldr	r2, [pc, #40]	; (363c <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    3612:	5cd3      	ldrb	r3, [r2, r3]
    3614:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    3616:	4b0a      	ldr	r3, [pc, #40]	; (3640 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3618:	6a1b      	ldr	r3, [r3, #32]
    361a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    361c:	9b02      	ldr	r3, [sp, #8]
    361e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3622:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    3624:	9b03      	ldr	r3, [sp, #12]
    3626:	061b      	lsls	r3, r3, #24
    3628:	9a02      	ldr	r2, [sp, #8]
    362a:	4313      	orrs	r3, r2
    362c:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    362e:	4a04      	ldr	r2, [pc, #16]	; (3640 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    3630:	9b02      	ldr	r3, [sp, #8]
    3632:	6213      	str	r3, [r2, #32]
}
    3634:	bf00      	nop
    3636:	b004      	add	sp, #16
    3638:	4770      	bx	lr
    363a:	bf00      	nop
    363c:	0000beb0 	.word	0x0000beb0
    3640:	40064000 	.word	0x40064000

00003644 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3644:	b086      	sub	sp, #24
    3646:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3648:	4b20      	ldr	r3, [pc, #128]	; (36cc <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    364a:	795b      	ldrb	r3, [r3, #5]
    364c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    364e:	9b01      	ldr	r3, [sp, #4]
    3650:	681a      	ldr	r2, [r3, #0]
    3652:	491f      	ldr	r1, [pc, #124]	; (36d0 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    3654:	4613      	mov	r3, r2
    3656:	00db      	lsls	r3, r3, #3
    3658:	4413      	add	r3, r2
    365a:	440b      	add	r3, r1
    365c:	781b      	ldrb	r3, [r3, #0]
    365e:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    3660:	4b1c      	ldr	r3, [pc, #112]	; (36d4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    3662:	68db      	ldr	r3, [r3, #12]
    3664:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    3666:	9b03      	ldr	r3, [sp, #12]
    3668:	2b03      	cmp	r3, #3
    366a:	d813      	bhi.n	3694 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    366c:	9b03      	ldr	r3, [sp, #12]
    366e:	005b      	lsls	r3, r3, #1
    3670:	3318      	adds	r3, #24
    3672:	2203      	movs	r2, #3
    3674:	fa02 f303 	lsl.w	r3, r2, r3
    3678:	43db      	mvns	r3, r3
    367a:	9a05      	ldr	r2, [sp, #20]
    367c:	4013      	ands	r3, r2
    367e:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3680:	9b03      	ldr	r3, [sp, #12]
    3682:	005b      	lsls	r3, r3, #1
    3684:	3318      	adds	r3, #24
    3686:	9a04      	ldr	r2, [sp, #16]
    3688:	fa02 f303 	lsl.w	r3, r2, r3
    368c:	9a05      	ldr	r2, [sp, #20]
    368e:	4313      	orrs	r3, r2
    3690:	9305      	str	r3, [sp, #20]
    3692:	e014      	b.n	36be <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    3694:	9b03      	ldr	r3, [sp, #12]
    3696:	3b04      	subs	r3, #4
    3698:	005b      	lsls	r3, r3, #1
    369a:	3310      	adds	r3, #16
    369c:	2203      	movs	r2, #3
    369e:	fa02 f303 	lsl.w	r3, r2, r3
    36a2:	43db      	mvns	r3, r3
    36a4:	9a05      	ldr	r2, [sp, #20]
    36a6:	4013      	ands	r3, r2
    36a8:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    36aa:	9b03      	ldr	r3, [sp, #12]
    36ac:	3b04      	subs	r3, #4
    36ae:	005b      	lsls	r3, r3, #1
    36b0:	3310      	adds	r3, #16
    36b2:	9a04      	ldr	r2, [sp, #16]
    36b4:	fa02 f303 	lsl.w	r3, r2, r3
    36b8:	9a05      	ldr	r2, [sp, #20]
    36ba:	4313      	orrs	r3, r2
    36bc:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    36be:	4a05      	ldr	r2, [pc, #20]	; (36d4 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    36c0:	9b05      	ldr	r3, [sp, #20]
    36c2:	60d3      	str	r3, [r2, #12]
}
    36c4:	bf00      	nop
    36c6:	b006      	add	sp, #24
    36c8:	4770      	bx	lr
    36ca:	bf00      	nop
    36cc:	0000be58 	.word	0x0000be58
    36d0:	0000bb48 	.word	0x0000bb48
    36d4:	40048000 	.word	0x40048000

000036d8 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    36d8:	b086      	sub	sp, #24
    36da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    36dc:	9b01      	ldr	r3, [sp, #4]
    36de:	685b      	ldr	r3, [r3, #4]
    36e0:	4a20      	ldr	r2, [pc, #128]	; (3764 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    36e2:	5cd3      	ldrb	r3, [r2, r3]
    36e4:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    36e6:	9b01      	ldr	r3, [sp, #4]
    36e8:	681a      	ldr	r2, [r3, #0]
    36ea:	491f      	ldr	r1, [pc, #124]	; (3768 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    36ec:	4613      	mov	r3, r2
    36ee:	00db      	lsls	r3, r3, #3
    36f0:	4413      	add	r3, r2
    36f2:	440b      	add	r3, r1
    36f4:	781b      	ldrb	r3, [r3, #0]
    36f6:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    36f8:	4b1c      	ldr	r3, [pc, #112]	; (376c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    36fa:	68db      	ldr	r3, [r3, #12]
    36fc:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    36fe:	9b03      	ldr	r3, [sp, #12]
    3700:	2b03      	cmp	r3, #3
    3702:	d813      	bhi.n	372c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    3704:	9b03      	ldr	r3, [sp, #12]
    3706:	005b      	lsls	r3, r3, #1
    3708:	3318      	adds	r3, #24
    370a:	2203      	movs	r2, #3
    370c:	fa02 f303 	lsl.w	r3, r2, r3
    3710:	43db      	mvns	r3, r3
    3712:	9a05      	ldr	r2, [sp, #20]
    3714:	4013      	ands	r3, r2
    3716:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    3718:	9b03      	ldr	r3, [sp, #12]
    371a:	005b      	lsls	r3, r3, #1
    371c:	3318      	adds	r3, #24
    371e:	9a04      	ldr	r2, [sp, #16]
    3720:	fa02 f303 	lsl.w	r3, r2, r3
    3724:	9a05      	ldr	r2, [sp, #20]
    3726:	4313      	orrs	r3, r2
    3728:	9305      	str	r3, [sp, #20]
    372a:	e014      	b.n	3756 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    372c:	9b03      	ldr	r3, [sp, #12]
    372e:	3b04      	subs	r3, #4
    3730:	005b      	lsls	r3, r3, #1
    3732:	3310      	adds	r3, #16
    3734:	2203      	movs	r2, #3
    3736:	fa02 f303 	lsl.w	r3, r2, r3
    373a:	43db      	mvns	r3, r3
    373c:	9a05      	ldr	r2, [sp, #20]
    373e:	4013      	ands	r3, r2
    3740:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    3742:	9b03      	ldr	r3, [sp, #12]
    3744:	3b04      	subs	r3, #4
    3746:	005b      	lsls	r3, r3, #1
    3748:	3310      	adds	r3, #16
    374a:	9a04      	ldr	r2, [sp, #16]
    374c:	fa02 f303 	lsl.w	r3, r2, r3
    3750:	9a05      	ldr	r2, [sp, #20]
    3752:	4313      	orrs	r3, r2
    3754:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    3756:	4a05      	ldr	r2, [pc, #20]	; (376c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    3758:	9b05      	ldr	r3, [sp, #20]
    375a:	60d3      	str	r3, [r2, #12]
}
    375c:	bf00      	nop
    375e:	b006      	add	sp, #24
    3760:	4770      	bx	lr
    3762:	bf00      	nop
    3764:	0000be58 	.word	0x0000be58
    3768:	0000bb48 	.word	0x0000bb48
    376c:	40048000 	.word	0x40048000

00003770 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3770:	b084      	sub	sp, #16
    3772:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    3774:	4b06      	ldr	r3, [pc, #24]	; (3790 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3776:	685b      	ldr	r3, [r3, #4]
    3778:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    377a:	9b03      	ldr	r3, [sp, #12]
    377c:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    3780:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3782:	4a03      	ldr	r2, [pc, #12]	; (3790 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    3784:	9b03      	ldr	r3, [sp, #12]
    3786:	6053      	str	r3, [r2, #4]
}
    3788:	bf00      	nop
    378a:	b004      	add	sp, #16
    378c:	4770      	bx	lr
    378e:	bf00      	nop
    3790:	40048000 	.word	0x40048000

00003794 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3794:	b084      	sub	sp, #16
    3796:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3798:	9b01      	ldr	r3, [sp, #4]
    379a:	685b      	ldr	r3, [r3, #4]
    379c:	4a0a      	ldr	r2, [pc, #40]	; (37c8 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    379e:	5cd3      	ldrb	r3, [r2, r3]
    37a0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    37a2:	4b0a      	ldr	r3, [pc, #40]	; (37cc <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    37a4:	685b      	ldr	r3, [r3, #4]
    37a6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    37a8:	9b02      	ldr	r3, [sp, #8]
    37aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    37ae:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    37b0:	9b03      	ldr	r3, [sp, #12]
    37b2:	011b      	lsls	r3, r3, #4
    37b4:	9a02      	ldr	r2, [sp, #8]
    37b6:	4313      	orrs	r3, r2
    37b8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    37ba:	4a04      	ldr	r2, [pc, #16]	; (37cc <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    37bc:	9b02      	ldr	r3, [sp, #8]
    37be:	6053      	str	r3, [r2, #4]
}
    37c0:	bf00      	nop
    37c2:	b004      	add	sp, #16
    37c4:	4770      	bx	lr
    37c6:	bf00      	nop
    37c8:	0000be58 	.word	0x0000be58
    37cc:	40048000 	.word	0x40048000

000037d0 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    37d0:	b084      	sub	sp, #16
    37d2:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    37d4:	9b01      	ldr	r3, [sp, #4]
    37d6:	681a      	ldr	r2, [r3, #0]
    37d8:	490f      	ldr	r1, [pc, #60]	; (3818 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    37da:	4613      	mov	r3, r2
    37dc:	00db      	lsls	r3, r3, #3
    37de:	4413      	add	r3, r2
    37e0:	440b      	add	r3, r1
    37e2:	3304      	adds	r3, #4
    37e4:	781b      	ldrb	r3, [r3, #0]
    37e6:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    37e8:	4a0c      	ldr	r2, [pc, #48]	; (381c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    37ea:	9b03      	ldr	r3, [sp, #12]
    37ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    37f0:	490a      	ldr	r1, [pc, #40]	; (381c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    37f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    37f6:	9b03      	ldr	r3, [sp, #12]
    37f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    37fc:	4a07      	ldr	r2, [pc, #28]	; (381c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    37fe:	9b03      	ldr	r3, [sp, #12]
    3800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3804:	4905      	ldr	r1, [pc, #20]	; (381c <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    3806:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    380a:	9b03      	ldr	r3, [sp, #12]
    380c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3810:	bf00      	nop
    3812:	b004      	add	sp, #16
    3814:	4770      	bx	lr
    3816:	bf00      	nop
    3818:	0000bb48 	.word	0x0000bb48
    381c:	40065000 	.word	0x40065000

00003820 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3820:	b086      	sub	sp, #24
    3822:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    3824:	9b01      	ldr	r3, [sp, #4]
    3826:	681a      	ldr	r2, [r3, #0]
    3828:	4912      	ldr	r1, [pc, #72]	; (3874 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    382a:	4613      	mov	r3, r2
    382c:	00db      	lsls	r3, r3, #3
    382e:	4413      	add	r3, r2
    3830:	440b      	add	r3, r1
    3832:	3304      	adds	r3, #4
    3834:	781b      	ldrb	r3, [r3, #0]
    3836:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3838:	9b01      	ldr	r3, [sp, #4]
    383a:	685b      	ldr	r3, [r3, #4]
    383c:	4a0e      	ldr	r2, [pc, #56]	; (3878 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    383e:	5cd3      	ldrb	r3, [r2, r3]
    3840:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    3842:	4a0e      	ldr	r2, [pc, #56]	; (387c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3844:	9b05      	ldr	r3, [sp, #20]
    3846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    384a:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    384c:	9b03      	ldr	r3, [sp, #12]
    384e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    3852:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    3854:	9b04      	ldr	r3, [sp, #16]
    3856:	061b      	lsls	r3, r3, #24
    3858:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    385c:	9a03      	ldr	r2, [sp, #12]
    385e:	4313      	orrs	r3, r2
    3860:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    3862:	4906      	ldr	r1, [pc, #24]	; (387c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    3864:	9b05      	ldr	r3, [sp, #20]
    3866:	9a03      	ldr	r2, [sp, #12]
    3868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    386c:	bf00      	nop
    386e:	b006      	add	sp, #24
    3870:	4770      	bx	lr
    3872:	bf00      	nop
    3874:	0000bb48 	.word	0x0000bb48
    3878:	0000bee0 	.word	0x0000bee0
    387c:	40065000 	.word	0x40065000

00003880 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    3880:	b084      	sub	sp, #16
    3882:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    3884:	4b0b      	ldr	r3, [pc, #44]	; (38b4 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    3886:	7f1b      	ldrb	r3, [r3, #28]
    3888:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    388a:	4b0b      	ldr	r3, [pc, #44]	; (38b8 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    388c:	685b      	ldr	r3, [r3, #4]
    388e:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    3890:	9b02      	ldr	r3, [sp, #8]
    3892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3896:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    3898:	9b03      	ldr	r3, [sp, #12]
    389a:	031b      	lsls	r3, r3, #12
    389c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    38a0:	9a02      	ldr	r2, [sp, #8]
    38a2:	4313      	orrs	r3, r2
    38a4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    38a6:	4a04      	ldr	r2, [pc, #16]	; (38b8 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    38a8:	9b02      	ldr	r3, [sp, #8]
    38aa:	6053      	str	r3, [r2, #4]
}
    38ac:	bf00      	nop
    38ae:	b004      	add	sp, #16
    38b0:	4770      	bx	lr
    38b2:	bf00      	nop
    38b4:	0000be58 	.word	0x0000be58
    38b8:	40048000 	.word	0x40048000

000038bc <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    38bc:	b084      	sub	sp, #16
    38be:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    38c0:	9b01      	ldr	r3, [sp, #4]
    38c2:	685b      	ldr	r3, [r3, #4]
    38c4:	4a0b      	ldr	r2, [pc, #44]	; (38f4 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    38c6:	5cd3      	ldrb	r3, [r2, r3]
    38c8:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    38ca:	4b0b      	ldr	r3, [pc, #44]	; (38f8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    38cc:	685b      	ldr	r3, [r3, #4]
    38ce:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    38d0:	9b02      	ldr	r3, [sp, #8]
    38d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    38d6:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    38d8:	9b03      	ldr	r3, [sp, #12]
    38da:	031b      	lsls	r3, r3, #12
    38dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    38e0:	9a02      	ldr	r2, [sp, #8]
    38e2:	4313      	orrs	r3, r2
    38e4:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    38e6:	4a04      	ldr	r2, [pc, #16]	; (38f8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    38e8:	9b02      	ldr	r3, [sp, #8]
    38ea:	6053      	str	r3, [r2, #4]
}
    38ec:	bf00      	nop
    38ee:	b004      	add	sp, #16
    38f0:	4770      	bx	lr
    38f2:	bf00      	nop
    38f4:	0000be58 	.word	0x0000be58
    38f8:	40048000 	.word	0x40048000

000038fc <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    38fc:	b500      	push	{lr}
    38fe:	b085      	sub	sp, #20
    3900:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    3902:	2300      	movs	r3, #0
    3904:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    3908:	9b01      	ldr	r3, [sp, #4]
    390a:	2b00      	cmp	r3, #0
    390c:	d037      	beq.n	397e <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    390e:	2300      	movs	r3, #0
    3910:	9303      	str	r3, [sp, #12]
    3912:	e02b      	b.n	396c <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3914:	4b29      	ldr	r3, [pc, #164]	; (39bc <DisableSafeClock+0xc0>)
    3916:	6819      	ldr	r1, [r3, #0]
    3918:	9a03      	ldr	r2, [sp, #12]
    391a:	4613      	mov	r3, r2
    391c:	005b      	lsls	r3, r3, #1
    391e:	4413      	add	r3, r2
    3920:	009b      	lsls	r3, r3, #2
    3922:	440b      	add	r3, r1
    3924:	3314      	adds	r3, #20
    3926:	681b      	ldr	r3, [r3, #0]
    3928:	2b05      	cmp	r3, #5
    392a:	d11c      	bne.n	3966 <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    392c:	2301      	movs	r3, #1
    392e:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    3932:	4b22      	ldr	r3, [pc, #136]	; (39bc <DisableSafeClock+0xc0>)
    3934:	6819      	ldr	r1, [r3, #0]
    3936:	9a03      	ldr	r2, [sp, #12]
    3938:	4613      	mov	r3, r2
    393a:	005b      	lsls	r3, r3, #1
    393c:	4413      	add	r3, r2
    393e:	009b      	lsls	r3, r3, #2
    3940:	440b      	add	r3, r1
    3942:	3318      	adds	r3, #24
    3944:	881b      	ldrh	r3, [r3, #0]
    3946:	2b00      	cmp	r3, #0
    3948:	d118      	bne.n	397c <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    394a:	4b1d      	ldr	r3, [pc, #116]	; (39c0 <DisableSafeClock+0xc4>)
    394c:	791b      	ldrb	r3, [r3, #4]
    394e:	4619      	mov	r1, r3
    3950:	4a1c      	ldr	r2, [pc, #112]	; (39c4 <DisableSafeClock+0xc8>)
    3952:	460b      	mov	r3, r1
    3954:	005b      	lsls	r3, r3, #1
    3956:	440b      	add	r3, r1
    3958:	009b      	lsls	r3, r3, #2
    395a:	4413      	add	r3, r2
    395c:	3308      	adds	r3, #8
    395e:	681b      	ldr	r3, [r3, #0]
    3960:	2005      	movs	r0, #5
    3962:	4798      	blx	r3
                }
                break;
    3964:	e00a      	b.n	397c <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3966:	9b03      	ldr	r3, [sp, #12]
    3968:	3301      	adds	r3, #1
    396a:	9303      	str	r3, [sp, #12]
    396c:	4b13      	ldr	r3, [pc, #76]	; (39bc <DisableSafeClock+0xc0>)
    396e:	681b      	ldr	r3, [r3, #0]
    3970:	7a1b      	ldrb	r3, [r3, #8]
    3972:	461a      	mov	r2, r3
    3974:	9b03      	ldr	r3, [sp, #12]
    3976:	4293      	cmp	r3, r2
    3978:	d3cc      	bcc.n	3914 <DisableSafeClock+0x18>
    397a:	e000      	b.n	397e <DisableSafeClock+0x82>
                break;
    397c:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    397e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    3982:	f083 0301 	eor.w	r3, r3, #1
    3986:	b2db      	uxtb	r3, r3
    3988:	2b00      	cmp	r3, #0
    398a:	d013      	beq.n	39b4 <DisableSafeClock+0xb8>
    398c:	4b0e      	ldr	r3, [pc, #56]	; (39c8 <DisableSafeClock+0xcc>)
    398e:	781b      	ldrb	r3, [r3, #0]
    3990:	f083 0301 	eor.w	r3, r3, #1
    3994:	b2db      	uxtb	r3, r3
    3996:	2b00      	cmp	r3, #0
    3998:	d00c      	beq.n	39b4 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    399a:	4b09      	ldr	r3, [pc, #36]	; (39c0 <DisableSafeClock+0xc4>)
    399c:	791b      	ldrb	r3, [r3, #4]
    399e:	4619      	mov	r1, r3
    39a0:	4a08      	ldr	r2, [pc, #32]	; (39c4 <DisableSafeClock+0xc8>)
    39a2:	460b      	mov	r3, r1
    39a4:	005b      	lsls	r3, r3, #1
    39a6:	440b      	add	r3, r1
    39a8:	009b      	lsls	r3, r3, #2
    39aa:	4413      	add	r3, r2
    39ac:	3308      	adds	r3, #8
    39ae:	681b      	ldr	r3, [r3, #0]
    39b0:	2005      	movs	r0, #5
    39b2:	4798      	blx	r3
    }
}
    39b4:	bf00      	nop
    39b6:	b005      	add	sp, #20
    39b8:	f85d fb04 	ldr.w	pc, [sp], #4
    39bc:	1fff8b9c 	.word	0x1fff8b9c
    39c0:	0000bad8 	.word	0x0000bad8
    39c4:	0000c108 	.word	0x0000c108
    39c8:	1fff8b20 	.word	0x1fff8b20

000039cc <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    39cc:	4b06      	ldr	r3, [pc, #24]	; (39e8 <SetFircToResetValue_TrustedCall+0x1c>)
    39ce:	2200      	movs	r2, #0
    39d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    39d4:	4b04      	ldr	r3, [pc, #16]	; (39e8 <SetFircToResetValue_TrustedCall+0x1c>)
    39d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    39da:	4a03      	ldr	r2, [pc, #12]	; (39e8 <SetFircToResetValue_TrustedCall+0x1c>)
    39dc:	f043 0301 	orr.w	r3, r3, #1
    39e0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    39e4:	bf00      	nop
    39e6:	4770      	bx	lr
    39e8:	40064000 	.word	0x40064000

000039ec <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    39ec:	b084      	sub	sp, #16
    39ee:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    39f0:	2303      	movs	r3, #3
    39f2:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    39f4:	2300      	movs	r3, #0
    39f6:	9302      	str	r3, [sp, #8]
    39f8:	e028      	b.n	3a4c <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    39fa:	9b01      	ldr	r3, [sp, #4]
    39fc:	9a02      	ldr	r2, [sp, #8]
    39fe:	320d      	adds	r2, #13
    3a00:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3a04:	2b28      	cmp	r3, #40	; 0x28
    3a06:	d10b      	bne.n	3a20 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    3a08:	9a01      	ldr	r2, [sp, #4]
    3a0a:	9b02      	ldr	r3, [sp, #8]
    3a0c:	330d      	adds	r3, #13
    3a0e:	00db      	lsls	r3, r3, #3
    3a10:	4413      	add	r3, r2
    3a12:	685b      	ldr	r3, [r3, #4]
    3a14:	4a2b      	ldr	r2, [pc, #172]	; (3ac4 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    3a16:	5cd3      	ldrb	r3, [r2, r3]
    3a18:	011b      	lsls	r3, r3, #4
    3a1a:	9a03      	ldr	r2, [sp, #12]
    3a1c:	4313      	orrs	r3, r2
    3a1e:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    3a20:	9b01      	ldr	r3, [sp, #4]
    3a22:	9a02      	ldr	r2, [sp, #8]
    3a24:	320d      	adds	r2, #13
    3a26:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3a2a:	2b29      	cmp	r3, #41	; 0x29
    3a2c:	d10b      	bne.n	3a46 <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    3a2e:	9a01      	ldr	r2, [sp, #4]
    3a30:	9b02      	ldr	r3, [sp, #8]
    3a32:	330d      	adds	r3, #13
    3a34:	00db      	lsls	r3, r3, #3
    3a36:	4413      	add	r3, r2
    3a38:	685b      	ldr	r3, [r3, #4]
    3a3a:	4a23      	ldr	r2, [pc, #140]	; (3ac8 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    3a3c:	5cd3      	ldrb	r3, [r2, r3]
    3a3e:	009b      	lsls	r3, r3, #2
    3a40:	9a03      	ldr	r2, [sp, #12]
    3a42:	4313      	orrs	r3, r2
    3a44:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    3a46:	9b02      	ldr	r3, [sp, #8]
    3a48:	3301      	adds	r3, #1
    3a4a:	9302      	str	r3, [sp, #8]
    3a4c:	9b01      	ldr	r3, [sp, #4]
    3a4e:	7adb      	ldrb	r3, [r3, #11]
    3a50:	461a      	mov	r2, r3
    3a52:	9b02      	ldr	r3, [sp, #8]
    3a54:	4293      	cmp	r3, r2
    3a56:	d3d0      	bcc.n	39fa <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3a58:	2300      	movs	r3, #0
    3a5a:	9302      	str	r3, [sp, #8]
    3a5c:	e026      	b.n	3aac <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    3a5e:	9a01      	ldr	r2, [sp, #4]
    3a60:	9b02      	ldr	r3, [sp, #8]
    3a62:	334e      	adds	r3, #78	; 0x4e
    3a64:	00db      	lsls	r3, r3, #3
    3a66:	4413      	add	r3, r2
    3a68:	685b      	ldr	r3, [r3, #4]
    3a6a:	2b12      	cmp	r3, #18
    3a6c:	d109      	bne.n	3a82 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3a6e:	9a01      	ldr	r2, [sp, #4]
    3a70:	9b02      	ldr	r3, [sp, #8]
    3a72:	334e      	adds	r3, #78	; 0x4e
    3a74:	00db      	lsls	r3, r3, #3
    3a76:	4413      	add	r3, r2
    3a78:	891b      	ldrh	r3, [r3, #8]
    3a7a:	005b      	lsls	r3, r3, #1
    3a7c:	9a03      	ldr	r2, [sp, #12]
    3a7e:	4313      	orrs	r3, r2
    3a80:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    3a82:	9a01      	ldr	r2, [sp, #4]
    3a84:	9b02      	ldr	r3, [sp, #8]
    3a86:	334e      	adds	r3, #78	; 0x4e
    3a88:	00db      	lsls	r3, r3, #3
    3a8a:	4413      	add	r3, r2
    3a8c:	685b      	ldr	r3, [r3, #4]
    3a8e:	2b13      	cmp	r3, #19
    3a90:	d109      	bne.n	3aa6 <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3a92:	9a01      	ldr	r2, [sp, #4]
    3a94:	9b02      	ldr	r3, [sp, #8]
    3a96:	334e      	adds	r3, #78	; 0x4e
    3a98:	00db      	lsls	r3, r3, #3
    3a9a:	4413      	add	r3, r2
    3a9c:	891b      	ldrh	r3, [r3, #8]
    3a9e:	461a      	mov	r2, r3
    3aa0:	9b03      	ldr	r3, [sp, #12]
    3aa2:	4313      	orrs	r3, r2
    3aa4:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3aa6:	9b02      	ldr	r3, [sp, #8]
    3aa8:	3301      	adds	r3, #1
    3aaa:	9302      	str	r3, [sp, #8]
    3aac:	9b01      	ldr	r3, [sp, #4]
    3aae:	7c1b      	ldrb	r3, [r3, #16]
    3ab0:	461a      	mov	r2, r3
    3ab2:	9b02      	ldr	r3, [sp, #8]
    3ab4:	4293      	cmp	r3, r2
    3ab6:	d3d2      	bcc.n	3a5e <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    3ab8:	4a04      	ldr	r2, [pc, #16]	; (3acc <SetSimLpoclksRegister_TrustedCall+0xe0>)
    3aba:	9b03      	ldr	r3, [sp, #12]
    3abc:	6113      	str	r3, [r2, #16]
}
    3abe:	bf00      	nop
    3ac0:	b004      	add	sp, #16
    3ac2:	4770      	bx	lr
    3ac4:	0000be58 	.word	0x0000be58
    3ac8:	0000bf10 	.word	0x0000bf10
    3acc:	40048000 	.word	0x40048000

00003ad0 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    3ad0:	b500      	push	{lr}
    3ad2:	b089      	sub	sp, #36	; 0x24
    3ad4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3ad6:	2300      	movs	r3, #0
    3ad8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    3adc:	4a21      	ldr	r2, [pc, #132]	; (3b64 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    3ade:	9b01      	ldr	r3, [sp, #4]
    3ae0:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    3ae2:	4b21      	ldr	r3, [pc, #132]	; (3b68 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3ae4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ae8:	f003 0301 	and.w	r3, r3, #1
    3aec:	2b00      	cmp	r3, #0
    3aee:	d12e      	bne.n	3b4e <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    3af0:	4b1e      	ldr	r3, [pc, #120]	; (3b6c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3af2:	2200      	movs	r2, #0
    3af4:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    3af6:	f7ff ff69 	bl	39cc <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3afa:	aa03      	add	r2, sp, #12
    3afc:	a904      	add	r1, sp, #16
    3afe:	a805      	add	r0, sp, #20
    3b00:	f24c 3350 	movw	r3, #50000	; 0xc350
    3b04:	f7fe f8ae 	bl	1c64 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3b08:	4b17      	ldr	r3, [pc, #92]	; (3b68 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    3b0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3b0e:	0e1b      	lsrs	r3, r3, #24
    3b10:	f003 0301 	and.w	r3, r3, #1
    3b14:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3b16:	9a03      	ldr	r2, [sp, #12]
    3b18:	a904      	add	r1, sp, #16
    3b1a:	ab05      	add	r3, sp, #20
    3b1c:	4618      	mov	r0, r3
    3b1e:	f7fe f8bb 	bl	1c98 <Clock_Ip_TimeoutExpired>
    3b22:	4603      	mov	r3, r0
    3b24:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    3b28:	9b06      	ldr	r3, [sp, #24]
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d106      	bne.n	3b3c <Clock_Ip_SpecificPlatformInitClock+0x6c>
    3b2e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3b32:	f083 0301 	eor.w	r3, r3, #1
    3b36:	b2db      	uxtb	r3, r3
    3b38:	2b00      	cmp	r3, #0
    3b3a:	d1e5      	bne.n	3b08 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    3b3c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3b40:	2b00      	cmp	r3, #0
    3b42:	d007      	beq.n	3b54 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3b44:	2105      	movs	r1, #5
    3b46:	2001      	movs	r0, #1
    3b48:	f7fe f87c 	bl	1c44 <Clock_Ip_ReportClockErrors>
    3b4c:	e002      	b.n	3b54 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    3b4e:	4b07      	ldr	r3, [pc, #28]	; (3b6c <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    3b50:	2201      	movs	r2, #1
    3b52:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    3b54:	9801      	ldr	r0, [sp, #4]
    3b56:	f7ff ff49 	bl	39ec <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    3b5a:	bf00      	nop
    3b5c:	b009      	add	sp, #36	; 0x24
    3b5e:	f85d fb04 	ldr.w	pc, [sp], #4
    3b62:	bf00      	nop
    3b64:	1fff8b9c 	.word	0x1fff8b9c
    3b68:	40064000 	.word	0x40064000
    3b6c:	1fff8b20 	.word	0x1fff8b20

00003b70 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    3b70:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    3b72:	2300      	movs	r3, #0
    3b74:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3b76:	4b29      	ldr	r3, [pc, #164]	; (3c1c <getFircConfig+0xac>)
    3b78:	681b      	ldr	r3, [r3, #0]
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d024      	beq.n	3bc8 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3b7e:	2300      	movs	r3, #0
    3b80:	9301      	str	r3, [sp, #4]
    3b82:	e01a      	b.n	3bba <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    3b84:	4b25      	ldr	r3, [pc, #148]	; (3c1c <getFircConfig+0xac>)
    3b86:	6819      	ldr	r1, [r3, #0]
    3b88:	9a01      	ldr	r2, [sp, #4]
    3b8a:	4613      	mov	r3, r2
    3b8c:	005b      	lsls	r3, r3, #1
    3b8e:	4413      	add	r3, r2
    3b90:	009b      	lsls	r3, r3, #2
    3b92:	440b      	add	r3, r1
    3b94:	3314      	adds	r3, #20
    3b96:	681b      	ldr	r3, [r3, #0]
    3b98:	2b05      	cmp	r3, #5
    3b9a:	d10b      	bne.n	3bb4 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    3b9c:	4b1f      	ldr	r3, [pc, #124]	; (3c1c <getFircConfig+0xac>)
    3b9e:	6819      	ldr	r1, [r3, #0]
    3ba0:	9a01      	ldr	r2, [sp, #4]
    3ba2:	4613      	mov	r3, r2
    3ba4:	005b      	lsls	r3, r3, #1
    3ba6:	4413      	add	r3, r2
    3ba8:	009b      	lsls	r3, r3, #2
    3baa:	3310      	adds	r3, #16
    3bac:	440b      	add	r3, r1
    3bae:	3304      	adds	r3, #4
    3bb0:	9300      	str	r3, [sp, #0]
                break;
    3bb2:	e009      	b.n	3bc8 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    3bb4:	9b01      	ldr	r3, [sp, #4]
    3bb6:	3301      	adds	r3, #1
    3bb8:	9301      	str	r3, [sp, #4]
    3bba:	4b18      	ldr	r3, [pc, #96]	; (3c1c <getFircConfig+0xac>)
    3bbc:	681b      	ldr	r3, [r3, #0]
    3bbe:	7a1b      	ldrb	r3, [r3, #8]
    3bc0:	461a      	mov	r2, r3
    3bc2:	9b01      	ldr	r3, [sp, #4]
    3bc4:	4293      	cmp	r3, r2
    3bc6:	d3dd      	bcc.n	3b84 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3bc8:	9b00      	ldr	r3, [sp, #0]
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d121      	bne.n	3c12 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    3bce:	4b14      	ldr	r3, [pc, #80]	; (3c20 <getFircConfig+0xb0>)
    3bd0:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    3bd2:	4b13      	ldr	r3, [pc, #76]	; (3c20 <getFircConfig+0xb0>)
    3bd4:	2205      	movs	r2, #5
    3bd6:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    3bd8:	4b12      	ldr	r3, [pc, #72]	; (3c24 <getFircConfig+0xb4>)
    3bda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3bde:	b29b      	uxth	r3, r3
    3be0:	f003 0301 	and.w	r3, r3, #1
    3be4:	b29a      	uxth	r2, r3
    3be6:	4b0e      	ldr	r3, [pc, #56]	; (3c20 <getFircConfig+0xb0>)
    3be8:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    3bea:	4b0e      	ldr	r3, [pc, #56]	; (3c24 <getFircConfig+0xb4>)
    3bec:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3bf0:	b2db      	uxtb	r3, r3
    3bf2:	f003 0303 	and.w	r3, r3, #3
    3bf6:	b2da      	uxtb	r2, r3
    3bf8:	4b09      	ldr	r3, [pc, #36]	; (3c20 <getFircConfig+0xb0>)
    3bfa:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    3bfc:	4b09      	ldr	r3, [pc, #36]	; (3c24 <getFircConfig+0xb4>)
    3bfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c02:	b2db      	uxtb	r3, r3
    3c04:	10db      	asrs	r3, r3, #3
    3c06:	b2db      	uxtb	r3, r3
    3c08:	f003 0301 	and.w	r3, r3, #1
    3c0c:	b2da      	uxtb	r2, r3
    3c0e:	4b04      	ldr	r3, [pc, #16]	; (3c20 <getFircConfig+0xb0>)
    3c10:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    3c12:	9b00      	ldr	r3, [sp, #0]
}
    3c14:	4618      	mov	r0, r3
    3c16:	b002      	add	sp, #8
    3c18:	4770      	bx	lr
    3c1a:	bf00      	nop
    3c1c:	1fff8b9c 	.word	0x1fff8b9c
    3c20:	1fff8c08 	.word	0x1fff8c08
    3c24:	40064000 	.word	0x40064000

00003c28 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    3c28:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    3c2a:	2300      	movs	r3, #0
    3c2c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3c2e:	4b20      	ldr	r3, [pc, #128]	; (3cb0 <getSoscConfig+0x88>)
    3c30:	681b      	ldr	r3, [r3, #0]
    3c32:	2b00      	cmp	r3, #0
    3c34:	d024      	beq.n	3c80 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3c36:	2300      	movs	r3, #0
    3c38:	9301      	str	r3, [sp, #4]
    3c3a:	e01a      	b.n	3c72 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    3c3c:	4b1c      	ldr	r3, [pc, #112]	; (3cb0 <getSoscConfig+0x88>)
    3c3e:	6819      	ldr	r1, [r3, #0]
    3c40:	9a01      	ldr	r2, [sp, #4]
    3c42:	4613      	mov	r3, r2
    3c44:	009b      	lsls	r3, r3, #2
    3c46:	4413      	add	r3, r2
    3c48:	009b      	lsls	r3, r3, #2
    3c4a:	440b      	add	r3, r1
    3c4c:	332c      	adds	r3, #44	; 0x2c
    3c4e:	681b      	ldr	r3, [r3, #0]
    3c50:	2b08      	cmp	r3, #8
    3c52:	d10b      	bne.n	3c6c <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    3c54:	4b16      	ldr	r3, [pc, #88]	; (3cb0 <getSoscConfig+0x88>)
    3c56:	6819      	ldr	r1, [r3, #0]
    3c58:	9a01      	ldr	r2, [sp, #4]
    3c5a:	4613      	mov	r3, r2
    3c5c:	009b      	lsls	r3, r3, #2
    3c5e:	4413      	add	r3, r2
    3c60:	009b      	lsls	r3, r3, #2
    3c62:	3328      	adds	r3, #40	; 0x28
    3c64:	440b      	add	r3, r1
    3c66:	3304      	adds	r3, #4
    3c68:	9300      	str	r3, [sp, #0]
                break;
    3c6a:	e009      	b.n	3c80 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    3c6c:	9b01      	ldr	r3, [sp, #4]
    3c6e:	3301      	adds	r3, #1
    3c70:	9301      	str	r3, [sp, #4]
    3c72:	4b0f      	ldr	r3, [pc, #60]	; (3cb0 <getSoscConfig+0x88>)
    3c74:	681b      	ldr	r3, [r3, #0]
    3c76:	7a5b      	ldrb	r3, [r3, #9]
    3c78:	461a      	mov	r2, r3
    3c7a:	9b01      	ldr	r3, [sp, #4]
    3c7c:	4293      	cmp	r3, r2
    3c7e:	d3dd      	bcc.n	3c3c <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3c80:	9b00      	ldr	r3, [sp, #0]
    3c82:	2b00      	cmp	r3, #0
    3c84:	d110      	bne.n	3ca8 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    3c86:	4b0b      	ldr	r3, [pc, #44]	; (3cb4 <getSoscConfig+0x8c>)
    3c88:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    3c8a:	4b0a      	ldr	r3, [pc, #40]	; (3cb4 <getSoscConfig+0x8c>)
    3c8c:	2208      	movs	r2, #8
    3c8e:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    3c90:	4b09      	ldr	r3, [pc, #36]	; (3cb8 <getSoscConfig+0x90>)
    3c92:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3c96:	b29b      	uxth	r3, r3
    3c98:	f003 0301 	and.w	r3, r3, #1
    3c9c:	b29a      	uxth	r2, r3
    3c9e:	4b05      	ldr	r3, [pc, #20]	; (3cb4 <getSoscConfig+0x8c>)
    3ca0:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    3ca2:	4b04      	ldr	r3, [pc, #16]	; (3cb4 <getSoscConfig+0x8c>)
    3ca4:	4a05      	ldr	r2, [pc, #20]	; (3cbc <getSoscConfig+0x94>)
    3ca6:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    3ca8:	9b00      	ldr	r3, [sp, #0]
}
    3caa:	4618      	mov	r0, r3
    3cac:	b002      	add	sp, #8
    3cae:	4770      	bx	lr
    3cb0:	1fff8b9c 	.word	0x1fff8b9c
    3cb4:	1fff8c14 	.word	0x1fff8c14
    3cb8:	40064000 	.word	0x40064000
    3cbc:	02625a00 	.word	0x02625a00

00003cc0 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    3cc0:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    3cc2:	2300      	movs	r3, #0
    3cc4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    3cc6:	4b28      	ldr	r3, [pc, #160]	; (3d68 <getSpllConfig+0xa8>)
    3cc8:	681b      	ldr	r3, [r3, #0]
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d023      	beq.n	3d16 <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    3cce:	2300      	movs	r3, #0
    3cd0:	9301      	str	r3, [sp, #4]
    3cd2:	e019      	b.n	3d08 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    3cd4:	4b24      	ldr	r3, [pc, #144]	; (3d68 <getSpllConfig+0xa8>)
    3cd6:	6819      	ldr	r1, [r3, #0]
    3cd8:	9a01      	ldr	r2, [sp, #4]
    3cda:	4613      	mov	r3, r2
    3cdc:	009b      	lsls	r3, r3, #2
    3cde:	4413      	add	r3, r2
    3ce0:	00db      	lsls	r3, r3, #3
    3ce2:	440b      	add	r3, r1
    3ce4:	3340      	adds	r3, #64	; 0x40
    3ce6:	681b      	ldr	r3, [r3, #0]
    3ce8:	2b09      	cmp	r3, #9
    3cea:	d10a      	bne.n	3d02 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    3cec:	4b1e      	ldr	r3, [pc, #120]	; (3d68 <getSpllConfig+0xa8>)
    3cee:	6819      	ldr	r1, [r3, #0]
    3cf0:	9a01      	ldr	r2, [sp, #4]
    3cf2:	4613      	mov	r3, r2
    3cf4:	009b      	lsls	r3, r3, #2
    3cf6:	4413      	add	r3, r2
    3cf8:	00db      	lsls	r3, r3, #3
    3cfa:	3340      	adds	r3, #64	; 0x40
    3cfc:	440b      	add	r3, r1
    3cfe:	9300      	str	r3, [sp, #0]
                break;
    3d00:	e009      	b.n	3d16 <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    3d02:	9b01      	ldr	r3, [sp, #4]
    3d04:	3301      	adds	r3, #1
    3d06:	9301      	str	r3, [sp, #4]
    3d08:	4b17      	ldr	r3, [pc, #92]	; (3d68 <getSpllConfig+0xa8>)
    3d0a:	681b      	ldr	r3, [r3, #0]
    3d0c:	7a9b      	ldrb	r3, [r3, #10]
    3d0e:	461a      	mov	r2, r3
    3d10:	9b01      	ldr	r3, [sp, #4]
    3d12:	4293      	cmp	r3, r2
    3d14:	d3de      	bcc.n	3cd4 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3d16:	9b00      	ldr	r3, [sp, #0]
    3d18:	2b00      	cmp	r3, #0
    3d1a:	d121      	bne.n	3d60 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    3d1c:	4b13      	ldr	r3, [pc, #76]	; (3d6c <getSpllConfig+0xac>)
    3d1e:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    3d20:	4b12      	ldr	r3, [pc, #72]	; (3d6c <getSpllConfig+0xac>)
    3d22:	2209      	movs	r2, #9
    3d24:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    3d26:	4b12      	ldr	r3, [pc, #72]	; (3d70 <getSpllConfig+0xb0>)
    3d28:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3d2c:	b29b      	uxth	r3, r3
    3d2e:	f003 0301 	and.w	r3, r3, #1
    3d32:	b29a      	uxth	r2, r3
    3d34:	4b0d      	ldr	r3, [pc, #52]	; (3d6c <getSpllConfig+0xac>)
    3d36:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    3d38:	4b0d      	ldr	r3, [pc, #52]	; (3d70 <getSpllConfig+0xb0>)
    3d3a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3d3e:	0a1b      	lsrs	r3, r3, #8
    3d40:	b2db      	uxtb	r3, r3
    3d42:	f003 0307 	and.w	r3, r3, #7
    3d46:	b2da      	uxtb	r2, r3
    3d48:	4b08      	ldr	r3, [pc, #32]	; (3d6c <getSpllConfig+0xac>)
    3d4a:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    3d4c:	4b08      	ldr	r3, [pc, #32]	; (3d70 <getSpllConfig+0xb0>)
    3d4e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3d52:	0c1b      	lsrs	r3, r3, #16
    3d54:	b2db      	uxtb	r3, r3
    3d56:	f003 031f 	and.w	r3, r3, #31
    3d5a:	b2da      	uxtb	r2, r3
    3d5c:	4b03      	ldr	r3, [pc, #12]	; (3d6c <getSpllConfig+0xac>)
    3d5e:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    3d60:	9b00      	ldr	r3, [sp, #0]
}
    3d62:	4618      	mov	r0, r3
    3d64:	b002      	add	sp, #8
    3d66:	4770      	bx	lr
    3d68:	1fff8b9c 	.word	0x1fff8b9c
    3d6c:	1fff8c28 	.word	0x1fff8c28
    3d70:	40064000 	.word	0x40064000

00003d74 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    3d74:	b086      	sub	sp, #24
    3d76:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    3d78:	2300      	movs	r3, #0
    3d7a:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    3d7c:	9b01      	ldr	r3, [sp, #4]
    3d7e:	2b1b      	cmp	r3, #27
    3d80:	d00f      	beq.n	3da2 <getSelectorConfig+0x2e>
    3d82:	9b01      	ldr	r3, [sp, #4]
    3d84:	2b1b      	cmp	r3, #27
    3d86:	d80f      	bhi.n	3da8 <getSelectorConfig+0x34>
    3d88:	9b01      	ldr	r3, [sp, #4]
    3d8a:	2b19      	cmp	r3, #25
    3d8c:	d003      	beq.n	3d96 <getSelectorConfig+0x22>
    3d8e:	9b01      	ldr	r3, [sp, #4]
    3d90:	2b1a      	cmp	r3, #26
    3d92:	d003      	beq.n	3d9c <getSelectorConfig+0x28>
    3d94:	e008      	b.n	3da8 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    3d96:	2300      	movs	r3, #0
    3d98:	9304      	str	r3, [sp, #16]
            break;
    3d9a:	e008      	b.n	3dae <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    3d9c:	2301      	movs	r3, #1
    3d9e:	9304      	str	r3, [sp, #16]
            break;
    3da0:	e005      	b.n	3dae <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    3da2:	2302      	movs	r3, #2
    3da4:	9304      	str	r3, [sp, #16]
            break;
    3da6:	e002      	b.n	3dae <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    3da8:	2300      	movs	r3, #0
    3daa:	9304      	str	r3, [sp, #16]
            break;
    3dac:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3dae:	4b36      	ldr	r3, [pc, #216]	; (3e88 <getSelectorConfig+0x114>)
    3db0:	681b      	ldr	r3, [r3, #0]
    3db2:	2b00      	cmp	r3, #0
    3db4:	d01d      	beq.n	3df2 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    3db6:	2300      	movs	r3, #0
    3db8:	9303      	str	r3, [sp, #12]
    3dba:	e013      	b.n	3de4 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    3dbc:	4b32      	ldr	r3, [pc, #200]	; (3e88 <getSelectorConfig+0x114>)
    3dbe:	681b      	ldr	r3, [r3, #0]
    3dc0:	9a03      	ldr	r2, [sp, #12]
    3dc2:	320d      	adds	r2, #13
    3dc4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    3dc8:	9a01      	ldr	r2, [sp, #4]
    3dca:	429a      	cmp	r2, r3
    3dcc:	d107      	bne.n	3dde <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    3dce:	4b2e      	ldr	r3, [pc, #184]	; (3e88 <getSelectorConfig+0x114>)
    3dd0:	681a      	ldr	r2, [r3, #0]
    3dd2:	9b03      	ldr	r3, [sp, #12]
    3dd4:	330d      	adds	r3, #13
    3dd6:	00db      	lsls	r3, r3, #3
    3dd8:	4413      	add	r3, r2
    3dda:	9305      	str	r3, [sp, #20]
                break;
    3ddc:	e009      	b.n	3df2 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    3dde:	9b03      	ldr	r3, [sp, #12]
    3de0:	3301      	adds	r3, #1
    3de2:	9303      	str	r3, [sp, #12]
    3de4:	4b28      	ldr	r3, [pc, #160]	; (3e88 <getSelectorConfig+0x114>)
    3de6:	681b      	ldr	r3, [r3, #0]
    3de8:	7adb      	ldrb	r3, [r3, #11]
    3dea:	461a      	mov	r2, r3
    3dec:	9b03      	ldr	r3, [sp, #12]
    3dee:	4293      	cmp	r3, r2
    3df0:	d3e4      	bcc.n	3dbc <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3df2:	9b05      	ldr	r3, [sp, #20]
    3df4:	2b00      	cmp	r3, #0
    3df6:	d140      	bne.n	3e7a <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    3df8:	9b04      	ldr	r3, [sp, #16]
    3dfa:	00db      	lsls	r3, r3, #3
    3dfc:	4a23      	ldr	r2, [pc, #140]	; (3e8c <getSelectorConfig+0x118>)
    3dfe:	4413      	add	r3, r2
    3e00:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    3e02:	4922      	ldr	r1, [pc, #136]	; (3e8c <getSelectorConfig+0x118>)
    3e04:	9b04      	ldr	r3, [sp, #16]
    3e06:	9a01      	ldr	r2, [sp, #4]
    3e08:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    3e0c:	9b01      	ldr	r3, [sp, #4]
    3e0e:	2b1b      	cmp	r3, #27
    3e10:	d025      	beq.n	3e5e <getSelectorConfig+0xea>
    3e12:	9b01      	ldr	r3, [sp, #4]
    3e14:	2b1b      	cmp	r3, #27
    3e16:	d832      	bhi.n	3e7e <getSelectorConfig+0x10a>
    3e18:	9b01      	ldr	r3, [sp, #4]
    3e1a:	2b19      	cmp	r3, #25
    3e1c:	d003      	beq.n	3e26 <getSelectorConfig+0xb2>
    3e1e:	9b01      	ldr	r3, [sp, #4]
    3e20:	2b1a      	cmp	r3, #26
    3e22:	d00e      	beq.n	3e42 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3e24:	e02b      	b.n	3e7e <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    3e26:	4b1a      	ldr	r3, [pc, #104]	; (3e90 <getSelectorConfig+0x11c>)
    3e28:	695b      	ldr	r3, [r3, #20]
    3e2a:	0e1b      	lsrs	r3, r3, #24
    3e2c:	f003 030f 	and.w	r3, r3, #15
    3e30:	4a18      	ldr	r2, [pc, #96]	; (3e94 <getSelectorConfig+0x120>)
    3e32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3e36:	4915      	ldr	r1, [pc, #84]	; (3e8c <getSelectorConfig+0x118>)
    3e38:	9b04      	ldr	r3, [sp, #16]
    3e3a:	00db      	lsls	r3, r3, #3
    3e3c:	440b      	add	r3, r1
    3e3e:	605a      	str	r2, [r3, #4]
                break;
    3e40:	e01e      	b.n	3e80 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    3e42:	4b13      	ldr	r3, [pc, #76]	; (3e90 <getSelectorConfig+0x11c>)
    3e44:	699b      	ldr	r3, [r3, #24]
    3e46:	0e1b      	lsrs	r3, r3, #24
    3e48:	f003 030f 	and.w	r3, r3, #15
    3e4c:	4a11      	ldr	r2, [pc, #68]	; (3e94 <getSelectorConfig+0x120>)
    3e4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3e52:	490e      	ldr	r1, [pc, #56]	; (3e8c <getSelectorConfig+0x118>)
    3e54:	9b04      	ldr	r3, [sp, #16]
    3e56:	00db      	lsls	r3, r3, #3
    3e58:	440b      	add	r3, r1
    3e5a:	605a      	str	r2, [r3, #4]
                break;
    3e5c:	e010      	b.n	3e80 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    3e5e:	4b0c      	ldr	r3, [pc, #48]	; (3e90 <getSelectorConfig+0x11c>)
    3e60:	69db      	ldr	r3, [r3, #28]
    3e62:	0e1b      	lsrs	r3, r3, #24
    3e64:	f003 030f 	and.w	r3, r3, #15
    3e68:	4a0a      	ldr	r2, [pc, #40]	; (3e94 <getSelectorConfig+0x120>)
    3e6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3e6e:	4907      	ldr	r1, [pc, #28]	; (3e8c <getSelectorConfig+0x118>)
    3e70:	9b04      	ldr	r3, [sp, #16]
    3e72:	00db      	lsls	r3, r3, #3
    3e74:	440b      	add	r3, r1
    3e76:	605a      	str	r2, [r3, #4]
                break;
    3e78:	e002      	b.n	3e80 <getSelectorConfig+0x10c>
        }
    }
    3e7a:	bf00      	nop
    3e7c:	e000      	b.n	3e80 <getSelectorConfig+0x10c>
                break;
    3e7e:	bf00      	nop

    return ReturnValue;
    3e80:	9b05      	ldr	r3, [sp, #20]
}
    3e82:	4618      	mov	r0, r3
    3e84:	b006      	add	sp, #24
    3e86:	4770      	bx	lr
    3e88:	1fff8b9c 	.word	0x1fff8b9c
    3e8c:	1fff8c50 	.word	0x1fff8c50
    3e90:	40064000 	.word	0x40064000
    3e94:	0000c1d8 	.word	0x0000c1d8

00003e98 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    3e98:	b086      	sub	sp, #24
    3e9a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    3e9c:	2300      	movs	r3, #0
    3e9e:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    3ea0:	2300      	movs	r3, #0
    3ea2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    3ea4:	9b01      	ldr	r3, [sp, #4]
    3ea6:	2b1f      	cmp	r3, #31
    3ea8:	d00f      	beq.n	3eca <getCoreDividerConfig+0x32>
    3eaa:	9b01      	ldr	r3, [sp, #4]
    3eac:	2b1f      	cmp	r3, #31
    3eae:	d80f      	bhi.n	3ed0 <getCoreDividerConfig+0x38>
    3eb0:	9b01      	ldr	r3, [sp, #4]
    3eb2:	2b1d      	cmp	r3, #29
    3eb4:	d003      	beq.n	3ebe <getCoreDividerConfig+0x26>
    3eb6:	9b01      	ldr	r3, [sp, #4]
    3eb8:	2b1e      	cmp	r3, #30
    3eba:	d003      	beq.n	3ec4 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    3ebc:	e008      	b.n	3ed0 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    3ebe:	2300      	movs	r3, #0
    3ec0:	9304      	str	r3, [sp, #16]
            break;
    3ec2:	e006      	b.n	3ed2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    3ec4:	2301      	movs	r3, #1
    3ec6:	9304      	str	r3, [sp, #16]
            break;
    3ec8:	e003      	b.n	3ed2 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    3eca:	2302      	movs	r3, #2
    3ecc:	9304      	str	r3, [sp, #16]
            break;
    3ece:	e000      	b.n	3ed2 <getCoreDividerConfig+0x3a>
                break;
    3ed0:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    3ed2:	4b41      	ldr	r3, [pc, #260]	; (3fd8 <getCoreDividerConfig+0x140>)
    3ed4:	681b      	ldr	r3, [r3, #0]
    3ed6:	2b00      	cmp	r3, #0
    3ed8:	d026      	beq.n	3f28 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3eda:	2300      	movs	r3, #0
    3edc:	9303      	str	r3, [sp, #12]
    3ede:	e01c      	b.n	3f1a <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    3ee0:	4b3d      	ldr	r3, [pc, #244]	; (3fd8 <getCoreDividerConfig+0x140>)
    3ee2:	6819      	ldr	r1, [r3, #0]
    3ee4:	9a03      	ldr	r2, [sp, #12]
    3ee6:	4613      	mov	r3, r2
    3ee8:	005b      	lsls	r3, r3, #1
    3eea:	4413      	add	r3, r2
    3eec:	009b      	lsls	r3, r3, #2
    3eee:	440b      	add	r3, r1
    3ef0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3ef4:	681b      	ldr	r3, [r3, #0]
    3ef6:	9a01      	ldr	r2, [sp, #4]
    3ef8:	429a      	cmp	r2, r3
    3efa:	d10b      	bne.n	3f14 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    3efc:	4b36      	ldr	r3, [pc, #216]	; (3fd8 <getCoreDividerConfig+0x140>)
    3efe:	6819      	ldr	r1, [r3, #0]
    3f00:	9a03      	ldr	r2, [sp, #12]
    3f02:	4613      	mov	r3, r2
    3f04:	005b      	lsls	r3, r3, #1
    3f06:	4413      	add	r3, r2
    3f08:	009b      	lsls	r3, r3, #2
    3f0a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    3f0e:	440b      	add	r3, r1
    3f10:	9305      	str	r3, [sp, #20]
                break;
    3f12:	e009      	b.n	3f28 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    3f14:	9b03      	ldr	r3, [sp, #12]
    3f16:	3301      	adds	r3, #1
    3f18:	9303      	str	r3, [sp, #12]
    3f1a:	4b2f      	ldr	r3, [pc, #188]	; (3fd8 <getCoreDividerConfig+0x140>)
    3f1c:	681b      	ldr	r3, [r3, #0]
    3f1e:	7b1b      	ldrb	r3, [r3, #12]
    3f20:	461a      	mov	r2, r3
    3f22:	9b03      	ldr	r3, [sp, #12]
    3f24:	4293      	cmp	r3, r2
    3f26:	d3db      	bcc.n	3ee0 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    3f28:	9b05      	ldr	r3, [sp, #20]
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	d14d      	bne.n	3fca <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    3f2e:	9a04      	ldr	r2, [sp, #16]
    3f30:	4613      	mov	r3, r2
    3f32:	005b      	lsls	r3, r3, #1
    3f34:	4413      	add	r3, r2
    3f36:	009b      	lsls	r3, r3, #2
    3f38:	4a28      	ldr	r2, [pc, #160]	; (3fdc <getCoreDividerConfig+0x144>)
    3f3a:	4413      	add	r3, r2
    3f3c:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    3f3e:	4927      	ldr	r1, [pc, #156]	; (3fdc <getCoreDividerConfig+0x144>)
    3f40:	9a04      	ldr	r2, [sp, #16]
    3f42:	4613      	mov	r3, r2
    3f44:	005b      	lsls	r3, r3, #1
    3f46:	4413      	add	r3, r2
    3f48:	009b      	lsls	r3, r3, #2
    3f4a:	440b      	add	r3, r1
    3f4c:	9a01      	ldr	r2, [sp, #4]
    3f4e:	601a      	str	r2, [r3, #0]
        switch(Name)
    3f50:	9b01      	ldr	r3, [sp, #4]
    3f52:	2b1f      	cmp	r3, #31
    3f54:	d029      	beq.n	3faa <getCoreDividerConfig+0x112>
    3f56:	9b01      	ldr	r3, [sp, #4]
    3f58:	2b1f      	cmp	r3, #31
    3f5a:	d838      	bhi.n	3fce <getCoreDividerConfig+0x136>
    3f5c:	9b01      	ldr	r3, [sp, #4]
    3f5e:	2b1d      	cmp	r3, #29
    3f60:	d003      	beq.n	3f6a <getCoreDividerConfig+0xd2>
    3f62:	9b01      	ldr	r3, [sp, #4]
    3f64:	2b1e      	cmp	r3, #30
    3f66:	d010      	beq.n	3f8a <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    3f68:	e031      	b.n	3fce <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    3f6a:	4b1d      	ldr	r3, [pc, #116]	; (3fe0 <getCoreDividerConfig+0x148>)
    3f6c:	695b      	ldr	r3, [r3, #20]
    3f6e:	0c1b      	lsrs	r3, r3, #16
    3f70:	f003 030f 	and.w	r3, r3, #15
    3f74:	1c59      	adds	r1, r3, #1
    3f76:	4819      	ldr	r0, [pc, #100]	; (3fdc <getCoreDividerConfig+0x144>)
    3f78:	9a04      	ldr	r2, [sp, #16]
    3f7a:	4613      	mov	r3, r2
    3f7c:	005b      	lsls	r3, r3, #1
    3f7e:	4413      	add	r3, r2
    3f80:	009b      	lsls	r3, r3, #2
    3f82:	4403      	add	r3, r0
    3f84:	3304      	adds	r3, #4
    3f86:	6019      	str	r1, [r3, #0]
                break;
    3f88:	e022      	b.n	3fd0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    3f8a:	4b15      	ldr	r3, [pc, #84]	; (3fe0 <getCoreDividerConfig+0x148>)
    3f8c:	699b      	ldr	r3, [r3, #24]
    3f8e:	0c1b      	lsrs	r3, r3, #16
    3f90:	f003 030f 	and.w	r3, r3, #15
    3f94:	1c59      	adds	r1, r3, #1
    3f96:	4811      	ldr	r0, [pc, #68]	; (3fdc <getCoreDividerConfig+0x144>)
    3f98:	9a04      	ldr	r2, [sp, #16]
    3f9a:	4613      	mov	r3, r2
    3f9c:	005b      	lsls	r3, r3, #1
    3f9e:	4413      	add	r3, r2
    3fa0:	009b      	lsls	r3, r3, #2
    3fa2:	4403      	add	r3, r0
    3fa4:	3304      	adds	r3, #4
    3fa6:	6019      	str	r1, [r3, #0]
                break;
    3fa8:	e012      	b.n	3fd0 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    3faa:	4b0d      	ldr	r3, [pc, #52]	; (3fe0 <getCoreDividerConfig+0x148>)
    3fac:	69db      	ldr	r3, [r3, #28]
    3fae:	0c1b      	lsrs	r3, r3, #16
    3fb0:	f003 030f 	and.w	r3, r3, #15
    3fb4:	1c59      	adds	r1, r3, #1
    3fb6:	4809      	ldr	r0, [pc, #36]	; (3fdc <getCoreDividerConfig+0x144>)
    3fb8:	9a04      	ldr	r2, [sp, #16]
    3fba:	4613      	mov	r3, r2
    3fbc:	005b      	lsls	r3, r3, #1
    3fbe:	4413      	add	r3, r2
    3fc0:	009b      	lsls	r3, r3, #2
    3fc2:	4403      	add	r3, r0
    3fc4:	3304      	adds	r3, #4
    3fc6:	6019      	str	r1, [r3, #0]
                break;
    3fc8:	e002      	b.n	3fd0 <getCoreDividerConfig+0x138>
        }
    }
    3fca:	bf00      	nop
    3fcc:	e000      	b.n	3fd0 <getCoreDividerConfig+0x138>
                break;
    3fce:	bf00      	nop

    return ReturnValue;
    3fd0:	9b05      	ldr	r3, [sp, #20]
}
    3fd2:	4618      	mov	r0, r3
    3fd4:	b006      	add	sp, #24
    3fd6:	4770      	bx	lr
    3fd8:	1fff8b9c 	.word	0x1fff8b9c
    3fdc:	1fff8c68 	.word	0x1fff8c68
    3fe0:	40064000 	.word	0x40064000

00003fe4 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    3fe4:	b086      	sub	sp, #24
    3fe6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    3fe8:	2300      	movs	r3, #0
    3fea:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    3fec:	2300      	movs	r3, #0
    3fee:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    3ff0:	9b01      	ldr	r3, [sp, #4]
    3ff2:	2b23      	cmp	r3, #35	; 0x23
    3ff4:	d00f      	beq.n	4016 <getBusDividerConfig+0x32>
    3ff6:	9b01      	ldr	r3, [sp, #4]
    3ff8:	2b23      	cmp	r3, #35	; 0x23
    3ffa:	d80f      	bhi.n	401c <getBusDividerConfig+0x38>
    3ffc:	9b01      	ldr	r3, [sp, #4]
    3ffe:	2b21      	cmp	r3, #33	; 0x21
    4000:	d003      	beq.n	400a <getBusDividerConfig+0x26>
    4002:	9b01      	ldr	r3, [sp, #4]
    4004:	2b22      	cmp	r3, #34	; 0x22
    4006:	d003      	beq.n	4010 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4008:	e008      	b.n	401c <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    400a:	2300      	movs	r3, #0
    400c:	9304      	str	r3, [sp, #16]
            break;
    400e:	e006      	b.n	401e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4010:	2301      	movs	r3, #1
    4012:	9304      	str	r3, [sp, #16]
            break;
    4014:	e003      	b.n	401e <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4016:	2302      	movs	r3, #2
    4018:	9304      	str	r3, [sp, #16]
            break;
    401a:	e000      	b.n	401e <getBusDividerConfig+0x3a>
                break;
    401c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    401e:	4b41      	ldr	r3, [pc, #260]	; (4124 <getBusDividerConfig+0x140>)
    4020:	681b      	ldr	r3, [r3, #0]
    4022:	2b00      	cmp	r3, #0
    4024:	d026      	beq.n	4074 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4026:	2300      	movs	r3, #0
    4028:	9303      	str	r3, [sp, #12]
    402a:	e01c      	b.n	4066 <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    402c:	4b3d      	ldr	r3, [pc, #244]	; (4124 <getBusDividerConfig+0x140>)
    402e:	6819      	ldr	r1, [r3, #0]
    4030:	9a03      	ldr	r2, [sp, #12]
    4032:	4613      	mov	r3, r2
    4034:	005b      	lsls	r3, r3, #1
    4036:	4413      	add	r3, r2
    4038:	009b      	lsls	r3, r3, #2
    403a:	440b      	add	r3, r1
    403c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4040:	681b      	ldr	r3, [r3, #0]
    4042:	9a01      	ldr	r2, [sp, #4]
    4044:	429a      	cmp	r2, r3
    4046:	d10b      	bne.n	4060 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4048:	4b36      	ldr	r3, [pc, #216]	; (4124 <getBusDividerConfig+0x140>)
    404a:	6819      	ldr	r1, [r3, #0]
    404c:	9a03      	ldr	r2, [sp, #12]
    404e:	4613      	mov	r3, r2
    4050:	005b      	lsls	r3, r3, #1
    4052:	4413      	add	r3, r2
    4054:	009b      	lsls	r3, r3, #2
    4056:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    405a:	440b      	add	r3, r1
    405c:	9305      	str	r3, [sp, #20]
                break;
    405e:	e009      	b.n	4074 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4060:	9b03      	ldr	r3, [sp, #12]
    4062:	3301      	adds	r3, #1
    4064:	9303      	str	r3, [sp, #12]
    4066:	4b2f      	ldr	r3, [pc, #188]	; (4124 <getBusDividerConfig+0x140>)
    4068:	681b      	ldr	r3, [r3, #0]
    406a:	7b1b      	ldrb	r3, [r3, #12]
    406c:	461a      	mov	r2, r3
    406e:	9b03      	ldr	r3, [sp, #12]
    4070:	4293      	cmp	r3, r2
    4072:	d3db      	bcc.n	402c <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4074:	9b05      	ldr	r3, [sp, #20]
    4076:	2b00      	cmp	r3, #0
    4078:	d14d      	bne.n	4116 <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    407a:	9a04      	ldr	r2, [sp, #16]
    407c:	4613      	mov	r3, r2
    407e:	005b      	lsls	r3, r3, #1
    4080:	4413      	add	r3, r2
    4082:	009b      	lsls	r3, r3, #2
    4084:	4a28      	ldr	r2, [pc, #160]	; (4128 <getBusDividerConfig+0x144>)
    4086:	4413      	add	r3, r2
    4088:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    408a:	4927      	ldr	r1, [pc, #156]	; (4128 <getBusDividerConfig+0x144>)
    408c:	9a04      	ldr	r2, [sp, #16]
    408e:	4613      	mov	r3, r2
    4090:	005b      	lsls	r3, r3, #1
    4092:	4413      	add	r3, r2
    4094:	009b      	lsls	r3, r3, #2
    4096:	440b      	add	r3, r1
    4098:	9a01      	ldr	r2, [sp, #4]
    409a:	601a      	str	r2, [r3, #0]
        switch(Name)
    409c:	9b01      	ldr	r3, [sp, #4]
    409e:	2b23      	cmp	r3, #35	; 0x23
    40a0:	d029      	beq.n	40f6 <getBusDividerConfig+0x112>
    40a2:	9b01      	ldr	r3, [sp, #4]
    40a4:	2b23      	cmp	r3, #35	; 0x23
    40a6:	d838      	bhi.n	411a <getBusDividerConfig+0x136>
    40a8:	9b01      	ldr	r3, [sp, #4]
    40aa:	2b21      	cmp	r3, #33	; 0x21
    40ac:	d003      	beq.n	40b6 <getBusDividerConfig+0xd2>
    40ae:	9b01      	ldr	r3, [sp, #4]
    40b0:	2b22      	cmp	r3, #34	; 0x22
    40b2:	d010      	beq.n	40d6 <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    40b4:	e031      	b.n	411a <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    40b6:	4b1d      	ldr	r3, [pc, #116]	; (412c <getBusDividerConfig+0x148>)
    40b8:	695b      	ldr	r3, [r3, #20]
    40ba:	091b      	lsrs	r3, r3, #4
    40bc:	f003 030f 	and.w	r3, r3, #15
    40c0:	1c59      	adds	r1, r3, #1
    40c2:	4819      	ldr	r0, [pc, #100]	; (4128 <getBusDividerConfig+0x144>)
    40c4:	9a04      	ldr	r2, [sp, #16]
    40c6:	4613      	mov	r3, r2
    40c8:	005b      	lsls	r3, r3, #1
    40ca:	4413      	add	r3, r2
    40cc:	009b      	lsls	r3, r3, #2
    40ce:	4403      	add	r3, r0
    40d0:	3304      	adds	r3, #4
    40d2:	6019      	str	r1, [r3, #0]
                break;
    40d4:	e022      	b.n	411c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    40d6:	4b15      	ldr	r3, [pc, #84]	; (412c <getBusDividerConfig+0x148>)
    40d8:	699b      	ldr	r3, [r3, #24]
    40da:	091b      	lsrs	r3, r3, #4
    40dc:	f003 030f 	and.w	r3, r3, #15
    40e0:	1c59      	adds	r1, r3, #1
    40e2:	4811      	ldr	r0, [pc, #68]	; (4128 <getBusDividerConfig+0x144>)
    40e4:	9a04      	ldr	r2, [sp, #16]
    40e6:	4613      	mov	r3, r2
    40e8:	005b      	lsls	r3, r3, #1
    40ea:	4413      	add	r3, r2
    40ec:	009b      	lsls	r3, r3, #2
    40ee:	4403      	add	r3, r0
    40f0:	3304      	adds	r3, #4
    40f2:	6019      	str	r1, [r3, #0]
                break;
    40f4:	e012      	b.n	411c <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    40f6:	4b0d      	ldr	r3, [pc, #52]	; (412c <getBusDividerConfig+0x148>)
    40f8:	69db      	ldr	r3, [r3, #28]
    40fa:	091b      	lsrs	r3, r3, #4
    40fc:	f003 030f 	and.w	r3, r3, #15
    4100:	1c59      	adds	r1, r3, #1
    4102:	4809      	ldr	r0, [pc, #36]	; (4128 <getBusDividerConfig+0x144>)
    4104:	9a04      	ldr	r2, [sp, #16]
    4106:	4613      	mov	r3, r2
    4108:	005b      	lsls	r3, r3, #1
    410a:	4413      	add	r3, r2
    410c:	009b      	lsls	r3, r3, #2
    410e:	4403      	add	r3, r0
    4110:	3304      	adds	r3, #4
    4112:	6019      	str	r1, [r3, #0]
                break;
    4114:	e002      	b.n	411c <getBusDividerConfig+0x138>
        }
    }
    4116:	bf00      	nop
    4118:	e000      	b.n	411c <getBusDividerConfig+0x138>
                break;
    411a:	bf00      	nop

    return ReturnValue;
    411c:	9b05      	ldr	r3, [sp, #20]
}
    411e:	4618      	mov	r0, r3
    4120:	b006      	add	sp, #24
    4122:	4770      	bx	lr
    4124:	1fff8b9c 	.word	0x1fff8b9c
    4128:	1fff8c8c 	.word	0x1fff8c8c
    412c:	40064000 	.word	0x40064000

00004130 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    4130:	b086      	sub	sp, #24
    4132:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4134:	2300      	movs	r3, #0
    4136:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4138:	2300      	movs	r3, #0
    413a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    413c:	9b01      	ldr	r3, [sp, #4]
    413e:	2b27      	cmp	r3, #39	; 0x27
    4140:	d00f      	beq.n	4162 <getSlowDividerConfig+0x32>
    4142:	9b01      	ldr	r3, [sp, #4]
    4144:	2b27      	cmp	r3, #39	; 0x27
    4146:	d80f      	bhi.n	4168 <getSlowDividerConfig+0x38>
    4148:	9b01      	ldr	r3, [sp, #4]
    414a:	2b25      	cmp	r3, #37	; 0x25
    414c:	d003      	beq.n	4156 <getSlowDividerConfig+0x26>
    414e:	9b01      	ldr	r3, [sp, #4]
    4150:	2b26      	cmp	r3, #38	; 0x26
    4152:	d003      	beq.n	415c <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4154:	e008      	b.n	4168 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4156:	2300      	movs	r3, #0
    4158:	9304      	str	r3, [sp, #16]
            break;
    415a:	e006      	b.n	416a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    415c:	2301      	movs	r3, #1
    415e:	9304      	str	r3, [sp, #16]
            break;
    4160:	e003      	b.n	416a <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4162:	2302      	movs	r3, #2
    4164:	9304      	str	r3, [sp, #16]
            break;
    4166:	e000      	b.n	416a <getSlowDividerConfig+0x3a>
                break;
    4168:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    416a:	4b40      	ldr	r3, [pc, #256]	; (426c <getSlowDividerConfig+0x13c>)
    416c:	681b      	ldr	r3, [r3, #0]
    416e:	2b00      	cmp	r3, #0
    4170:	d026      	beq.n	41c0 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4172:	2300      	movs	r3, #0
    4174:	9303      	str	r3, [sp, #12]
    4176:	e01c      	b.n	41b2 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4178:	4b3c      	ldr	r3, [pc, #240]	; (426c <getSlowDividerConfig+0x13c>)
    417a:	6819      	ldr	r1, [r3, #0]
    417c:	9a03      	ldr	r2, [sp, #12]
    417e:	4613      	mov	r3, r2
    4180:	005b      	lsls	r3, r3, #1
    4182:	4413      	add	r3, r2
    4184:	009b      	lsls	r3, r3, #2
    4186:	440b      	add	r3, r1
    4188:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    418c:	681b      	ldr	r3, [r3, #0]
    418e:	9a01      	ldr	r2, [sp, #4]
    4190:	429a      	cmp	r2, r3
    4192:	d10b      	bne.n	41ac <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4194:	4b35      	ldr	r3, [pc, #212]	; (426c <getSlowDividerConfig+0x13c>)
    4196:	6819      	ldr	r1, [r3, #0]
    4198:	9a03      	ldr	r2, [sp, #12]
    419a:	4613      	mov	r3, r2
    419c:	005b      	lsls	r3, r3, #1
    419e:	4413      	add	r3, r2
    41a0:	009b      	lsls	r3, r3, #2
    41a2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    41a6:	440b      	add	r3, r1
    41a8:	9305      	str	r3, [sp, #20]
                break;
    41aa:	e009      	b.n	41c0 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    41ac:	9b03      	ldr	r3, [sp, #12]
    41ae:	3301      	adds	r3, #1
    41b0:	9303      	str	r3, [sp, #12]
    41b2:	4b2e      	ldr	r3, [pc, #184]	; (426c <getSlowDividerConfig+0x13c>)
    41b4:	681b      	ldr	r3, [r3, #0]
    41b6:	7b1b      	ldrb	r3, [r3, #12]
    41b8:	461a      	mov	r2, r3
    41ba:	9b03      	ldr	r3, [sp, #12]
    41bc:	4293      	cmp	r3, r2
    41be:	d3db      	bcc.n	4178 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    41c0:	9b05      	ldr	r3, [sp, #20]
    41c2:	2b00      	cmp	r3, #0
    41c4:	d14a      	bne.n	425c <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    41c6:	9a04      	ldr	r2, [sp, #16]
    41c8:	4613      	mov	r3, r2
    41ca:	005b      	lsls	r3, r3, #1
    41cc:	4413      	add	r3, r2
    41ce:	009b      	lsls	r3, r3, #2
    41d0:	4a27      	ldr	r2, [pc, #156]	; (4270 <getSlowDividerConfig+0x140>)
    41d2:	4413      	add	r3, r2
    41d4:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    41d6:	4926      	ldr	r1, [pc, #152]	; (4270 <getSlowDividerConfig+0x140>)
    41d8:	9a04      	ldr	r2, [sp, #16]
    41da:	4613      	mov	r3, r2
    41dc:	005b      	lsls	r3, r3, #1
    41de:	4413      	add	r3, r2
    41e0:	009b      	lsls	r3, r3, #2
    41e2:	440b      	add	r3, r1
    41e4:	9a01      	ldr	r2, [sp, #4]
    41e6:	601a      	str	r2, [r3, #0]
        switch(Name)
    41e8:	9b01      	ldr	r3, [sp, #4]
    41ea:	2b27      	cmp	r3, #39	; 0x27
    41ec:	d027      	beq.n	423e <getSlowDividerConfig+0x10e>
    41ee:	9b01      	ldr	r3, [sp, #4]
    41f0:	2b27      	cmp	r3, #39	; 0x27
    41f2:	d835      	bhi.n	4260 <getSlowDividerConfig+0x130>
    41f4:	9b01      	ldr	r3, [sp, #4]
    41f6:	2b25      	cmp	r3, #37	; 0x25
    41f8:	d003      	beq.n	4202 <getSlowDividerConfig+0xd2>
    41fa:	9b01      	ldr	r3, [sp, #4]
    41fc:	2b26      	cmp	r3, #38	; 0x26
    41fe:	d00f      	beq.n	4220 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4200:	e02e      	b.n	4260 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    4202:	4b1c      	ldr	r3, [pc, #112]	; (4274 <getSlowDividerConfig+0x144>)
    4204:	695b      	ldr	r3, [r3, #20]
    4206:	f003 030f 	and.w	r3, r3, #15
    420a:	1c59      	adds	r1, r3, #1
    420c:	4818      	ldr	r0, [pc, #96]	; (4270 <getSlowDividerConfig+0x140>)
    420e:	9a04      	ldr	r2, [sp, #16]
    4210:	4613      	mov	r3, r2
    4212:	005b      	lsls	r3, r3, #1
    4214:	4413      	add	r3, r2
    4216:	009b      	lsls	r3, r3, #2
    4218:	4403      	add	r3, r0
    421a:	3304      	adds	r3, #4
    421c:	6019      	str	r1, [r3, #0]
                break;
    421e:	e020      	b.n	4262 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    4220:	4b14      	ldr	r3, [pc, #80]	; (4274 <getSlowDividerConfig+0x144>)
    4222:	699b      	ldr	r3, [r3, #24]
    4224:	f003 030f 	and.w	r3, r3, #15
    4228:	1c59      	adds	r1, r3, #1
    422a:	4811      	ldr	r0, [pc, #68]	; (4270 <getSlowDividerConfig+0x140>)
    422c:	9a04      	ldr	r2, [sp, #16]
    422e:	4613      	mov	r3, r2
    4230:	005b      	lsls	r3, r3, #1
    4232:	4413      	add	r3, r2
    4234:	009b      	lsls	r3, r3, #2
    4236:	4403      	add	r3, r0
    4238:	3304      	adds	r3, #4
    423a:	6019      	str	r1, [r3, #0]
                break;
    423c:	e011      	b.n	4262 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    423e:	4b0d      	ldr	r3, [pc, #52]	; (4274 <getSlowDividerConfig+0x144>)
    4240:	69db      	ldr	r3, [r3, #28]
    4242:	f003 030f 	and.w	r3, r3, #15
    4246:	1c59      	adds	r1, r3, #1
    4248:	4809      	ldr	r0, [pc, #36]	; (4270 <getSlowDividerConfig+0x140>)
    424a:	9a04      	ldr	r2, [sp, #16]
    424c:	4613      	mov	r3, r2
    424e:	005b      	lsls	r3, r3, #1
    4250:	4413      	add	r3, r2
    4252:	009b      	lsls	r3, r3, #2
    4254:	4403      	add	r3, r0
    4256:	3304      	adds	r3, #4
    4258:	6019      	str	r1, [r3, #0]
                break;
    425a:	e002      	b.n	4262 <getSlowDividerConfig+0x132>
        }
    }
    425c:	bf00      	nop
    425e:	e000      	b.n	4262 <getSlowDividerConfig+0x132>
                break;
    4260:	bf00      	nop

    return ReturnValue;
    4262:	9b05      	ldr	r3, [sp, #20]
}
    4264:	4618      	mov	r0, r3
    4266:	b006      	add	sp, #24
    4268:	4770      	bx	lr
    426a:	bf00      	nop
    426c:	1fff8b9c 	.word	0x1fff8b9c
    4270:	1fff8cb0 	.word	0x1fff8cb0
    4274:	40064000 	.word	0x40064000

00004278 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    4278:	b500      	push	{lr}
    427a:	b083      	sub	sp, #12
    427c:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    427e:	4b64      	ldr	r3, [pc, #400]	; (4410 <Clock_Ip_ClockInitializeObjects+0x198>)
    4280:	781b      	ldrb	r3, [r3, #0]
    4282:	f083 0301 	eor.w	r3, r3, #1
    4286:	b2db      	uxtb	r3, r3
    4288:	2b00      	cmp	r3, #0
    428a:	d05b      	beq.n	4344 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    428c:	4b60      	ldr	r3, [pc, #384]	; (4410 <Clock_Ip_ClockInitializeObjects+0x198>)
    428e:	2201      	movs	r2, #1
    4290:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    4292:	4b60      	ldr	r3, [pc, #384]	; (4414 <Clock_Ip_ClockInitializeObjects+0x19c>)
    4294:	785b      	ldrb	r3, [r3, #1]
    4296:	461a      	mov	r2, r3
    4298:	4613      	mov	r3, r2
    429a:	009b      	lsls	r3, r3, #2
    429c:	4413      	add	r3, r2
    429e:	009b      	lsls	r3, r3, #2
    42a0:	4a5d      	ldr	r2, [pc, #372]	; (4418 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    42a2:	4413      	add	r3, r2
    42a4:	4a5d      	ldr	r2, [pc, #372]	; (441c <Clock_Ip_ClockInitializeObjects+0x1a4>)
    42a6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    42a8:	4b5d      	ldr	r3, [pc, #372]	; (4420 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    42aa:	785b      	ldrb	r3, [r3, #1]
    42ac:	461a      	mov	r2, r3
    42ae:	4613      	mov	r3, r2
    42b0:	009b      	lsls	r3, r3, #2
    42b2:	4413      	add	r3, r2
    42b4:	009b      	lsls	r3, r3, #2
    42b6:	4a5b      	ldr	r2, [pc, #364]	; (4424 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    42b8:	4413      	add	r3, r2
    42ba:	4a5b      	ldr	r2, [pc, #364]	; (4428 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    42bc:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    42be:	4b5b      	ldr	r3, [pc, #364]	; (442c <Clock_Ip_ClockInitializeObjects+0x1b4>)
    42c0:	791b      	ldrb	r3, [r3, #4]
    42c2:	461a      	mov	r2, r3
    42c4:	4613      	mov	r3, r2
    42c6:	005b      	lsls	r3, r3, #1
    42c8:	4413      	add	r3, r2
    42ca:	009b      	lsls	r3, r3, #2
    42cc:	4a58      	ldr	r2, [pc, #352]	; (4430 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    42ce:	4413      	add	r3, r2
    42d0:	4a58      	ldr	r2, [pc, #352]	; (4434 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    42d2:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    42d4:	4b58      	ldr	r3, [pc, #352]	; (4438 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    42d6:	795b      	ldrb	r3, [r3, #5]
    42d8:	00db      	lsls	r3, r3, #3
    42da:	4a58      	ldr	r2, [pc, #352]	; (443c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    42dc:	4413      	add	r3, r2
    42de:	4a58      	ldr	r2, [pc, #352]	; (4440 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    42e0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    42e2:	4b55      	ldr	r3, [pc, #340]	; (4438 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    42e4:	79db      	ldrb	r3, [r3, #7]
    42e6:	00db      	lsls	r3, r3, #3
    42e8:	4a54      	ldr	r2, [pc, #336]	; (443c <Clock_Ip_ClockInitializeObjects+0x1c4>)
    42ea:	4413      	add	r3, r2
    42ec:	4a55      	ldr	r2, [pc, #340]	; (4444 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    42ee:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    42f0:	4b55      	ldr	r3, [pc, #340]	; (4448 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    42f2:	799b      	ldrb	r3, [r3, #6]
    42f4:	009b      	lsls	r3, r3, #2
    42f6:	4a55      	ldr	r2, [pc, #340]	; (444c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    42f8:	4413      	add	r3, r2
    42fa:	4a55      	ldr	r2, [pc, #340]	; (4450 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    42fc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    42fe:	4b52      	ldr	r3, [pc, #328]	; (4448 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4300:	7a1b      	ldrb	r3, [r3, #8]
    4302:	009b      	lsls	r3, r3, #2
    4304:	4a51      	ldr	r2, [pc, #324]	; (444c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4306:	4413      	add	r3, r2
    4308:	4a52      	ldr	r2, [pc, #328]	; (4454 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    430a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    430c:	4b4e      	ldr	r3, [pc, #312]	; (4448 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    430e:	7a5b      	ldrb	r3, [r3, #9]
    4310:	009b      	lsls	r3, r3, #2
    4312:	4a4e      	ldr	r2, [pc, #312]	; (444c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4314:	4413      	add	r3, r2
    4316:	4a50      	ldr	r2, [pc, #320]	; (4458 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    4318:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    431a:	4b4b      	ldr	r3, [pc, #300]	; (4448 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    431c:	7adb      	ldrb	r3, [r3, #11]
    431e:	009b      	lsls	r3, r3, #2
    4320:	4a4a      	ldr	r2, [pc, #296]	; (444c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4322:	4413      	add	r3, r2
    4324:	4a4d      	ldr	r2, [pc, #308]	; (445c <Clock_Ip_ClockInitializeObjects+0x1e4>)
    4326:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    4328:	4b47      	ldr	r3, [pc, #284]	; (4448 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    432a:	7b1b      	ldrb	r3, [r3, #12]
    432c:	009b      	lsls	r3, r3, #2
    432e:	4a47      	ldr	r2, [pc, #284]	; (444c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    4330:	4413      	add	r3, r2
    4332:	4a4b      	ldr	r2, [pc, #300]	; (4460 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    4334:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    4336:	4b44      	ldr	r3, [pc, #272]	; (4448 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    4338:	7b9b      	ldrb	r3, [r3, #14]
    433a:	009b      	lsls	r3, r3, #2
    433c:	4a43      	ldr	r2, [pc, #268]	; (444c <Clock_Ip_ClockInitializeObjects+0x1d4>)
    433e:	4413      	add	r3, r2
    4340:	4a48      	ldr	r2, [pc, #288]	; (4464 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    4342:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    4344:	4b48      	ldr	r3, [pc, #288]	; (4468 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    4346:	781b      	ldrb	r3, [r3, #0]
    4348:	2b00      	cmp	r3, #0
    434a:	d002      	beq.n	4352 <Clock_Ip_ClockInitializeObjects+0xda>
    434c:	9b01      	ldr	r3, [sp, #4]
    434e:	2b00      	cmp	r3, #0
    4350:	d003      	beq.n	435a <Clock_Ip_ClockInitializeObjects+0xe2>
    4352:	4b46      	ldr	r3, [pc, #280]	; (446c <Clock_Ip_ClockInitializeObjects+0x1f4>)
    4354:	781b      	ldrb	r3, [r3, #0]
    4356:	2b00      	cmp	r3, #0
    4358:	d056      	beq.n	4408 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    435a:	f7ff fc09 	bl	3b70 <getFircConfig>
    435e:	4603      	mov	r3, r0
    4360:	4a43      	ldr	r2, [pc, #268]	; (4470 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    4362:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    4364:	f7ff fc60 	bl	3c28 <getSoscConfig>
    4368:	4603      	mov	r3, r0
    436a:	4a42      	ldr	r2, [pc, #264]	; (4474 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    436c:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    436e:	f7ff fca7 	bl	3cc0 <getSpllConfig>
    4372:	4603      	mov	r3, r0
    4374:	4a40      	ldr	r2, [pc, #256]	; (4478 <Clock_Ip_ClockInitializeObjects+0x200>)
    4376:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    4378:	2019      	movs	r0, #25
    437a:	f7ff fcfb 	bl	3d74 <getSelectorConfig>
    437e:	4603      	mov	r3, r0
    4380:	4a3e      	ldr	r2, [pc, #248]	; (447c <Clock_Ip_ClockInitializeObjects+0x204>)
    4382:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    4384:	201a      	movs	r0, #26
    4386:	f7ff fcf5 	bl	3d74 <getSelectorConfig>
    438a:	4603      	mov	r3, r0
    438c:	4a3c      	ldr	r2, [pc, #240]	; (4480 <Clock_Ip_ClockInitializeObjects+0x208>)
    438e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    4390:	201b      	movs	r0, #27
    4392:	f7ff fcef 	bl	3d74 <getSelectorConfig>
    4396:	4603      	mov	r3, r0
    4398:	4a3a      	ldr	r2, [pc, #232]	; (4484 <Clock_Ip_ClockInitializeObjects+0x20c>)
    439a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    439c:	201d      	movs	r0, #29
    439e:	f7ff fd7b 	bl	3e98 <getCoreDividerConfig>
    43a2:	4603      	mov	r3, r0
    43a4:	4a38      	ldr	r2, [pc, #224]	; (4488 <Clock_Ip_ClockInitializeObjects+0x210>)
    43a6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    43a8:	201e      	movs	r0, #30
    43aa:	f7ff fd75 	bl	3e98 <getCoreDividerConfig>
    43ae:	4603      	mov	r3, r0
    43b0:	4a36      	ldr	r2, [pc, #216]	; (448c <Clock_Ip_ClockInitializeObjects+0x214>)
    43b2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    43b4:	201f      	movs	r0, #31
    43b6:	f7ff fd6f 	bl	3e98 <getCoreDividerConfig>
    43ba:	4603      	mov	r3, r0
    43bc:	4a34      	ldr	r2, [pc, #208]	; (4490 <Clock_Ip_ClockInitializeObjects+0x218>)
    43be:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    43c0:	2021      	movs	r0, #33	; 0x21
    43c2:	f7ff fe0f 	bl	3fe4 <getBusDividerConfig>
    43c6:	4603      	mov	r3, r0
    43c8:	4a32      	ldr	r2, [pc, #200]	; (4494 <Clock_Ip_ClockInitializeObjects+0x21c>)
    43ca:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    43cc:	2022      	movs	r0, #34	; 0x22
    43ce:	f7ff fe09 	bl	3fe4 <getBusDividerConfig>
    43d2:	4603      	mov	r3, r0
    43d4:	4a30      	ldr	r2, [pc, #192]	; (4498 <Clock_Ip_ClockInitializeObjects+0x220>)
    43d6:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    43d8:	2023      	movs	r0, #35	; 0x23
    43da:	f7ff fe03 	bl	3fe4 <getBusDividerConfig>
    43de:	4603      	mov	r3, r0
    43e0:	4a2e      	ldr	r2, [pc, #184]	; (449c <Clock_Ip_ClockInitializeObjects+0x224>)
    43e2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    43e4:	2025      	movs	r0, #37	; 0x25
    43e6:	f7ff fea3 	bl	4130 <getSlowDividerConfig>
    43ea:	4603      	mov	r3, r0
    43ec:	4a2c      	ldr	r2, [pc, #176]	; (44a0 <Clock_Ip_ClockInitializeObjects+0x228>)
    43ee:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    43f0:	2026      	movs	r0, #38	; 0x26
    43f2:	f7ff fe9d 	bl	4130 <getSlowDividerConfig>
    43f6:	4603      	mov	r3, r0
    43f8:	4a2a      	ldr	r2, [pc, #168]	; (44a4 <Clock_Ip_ClockInitializeObjects+0x22c>)
    43fa:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    43fc:	2027      	movs	r0, #39	; 0x27
    43fe:	f7ff fe97 	bl	4130 <getSlowDividerConfig>
    4402:	4603      	mov	r3, r0
    4404:	4a28      	ldr	r2, [pc, #160]	; (44a8 <Clock_Ip_ClockInitializeObjects+0x230>)
    4406:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    4408:	bf00      	nop
    440a:	b003      	add	sp, #12
    440c:	f85d fb04 	ldr.w	pc, [sp], #4
    4410:	1fff8cd4 	.word	0x1fff8cd4
    4414:	0000bb08 	.word	0x0000bb08
    4418:	0000c154 	.word	0x0000c154
    441c:	1fff8ba0 	.word	0x1fff8ba0
    4420:	0000bac8 	.word	0x0000bac8
    4424:	0000c09c 	.word	0x0000c09c
    4428:	1fff8ba4 	.word	0x1fff8ba4
    442c:	0000bad8 	.word	0x0000bad8
    4430:	0000c108 	.word	0x0000c108
    4434:	1fff8ba8 	.word	0x1fff8ba8
    4438:	0000bb18 	.word	0x0000bb18
    443c:	0000c180 	.word	0x0000c180
    4440:	1fff8bac 	.word	0x1fff8bac
    4444:	1fff8be8 	.word	0x1fff8be8
    4448:	0000baa8 	.word	0x0000baa8
    444c:	0000c058 	.word	0x0000c058
    4450:	1fff8bb0 	.word	0x1fff8bb0
    4454:	1fff8bec 	.word	0x1fff8bec
    4458:	1fff8bb4 	.word	0x1fff8bb4
    445c:	1fff8bf0 	.word	0x1fff8bf0
    4460:	1fff8bb8 	.word	0x1fff8bb8
    4464:	1fff8bf4 	.word	0x1fff8bf4
    4468:	1fff8b21 	.word	0x1fff8b21
    446c:	1fff8b18 	.word	0x1fff8b18
    4470:	1fff8bbc 	.word	0x1fff8bbc
    4474:	1fff8bc0 	.word	0x1fff8bc0
    4478:	1fff8bc4 	.word	0x1fff8bc4
    447c:	1fff8bc8 	.word	0x1fff8bc8
    4480:	1fff8bcc 	.word	0x1fff8bcc
    4484:	1fff8bf8 	.word	0x1fff8bf8
    4488:	1fff8bd0 	.word	0x1fff8bd0
    448c:	1fff8bd4 	.word	0x1fff8bd4
    4490:	1fff8bfc 	.word	0x1fff8bfc
    4494:	1fff8bd8 	.word	0x1fff8bd8
    4498:	1fff8bdc 	.word	0x1fff8bdc
    449c:	1fff8c00 	.word	0x1fff8c00
    44a0:	1fff8be0 	.word	0x1fff8be0
    44a4:	1fff8be4 	.word	0x1fff8be4
    44a8:	1fff8c04 	.word	0x1fff8c04

000044ac <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    44ac:	b500      	push	{lr}
    44ae:	b083      	sub	sp, #12
    44b0:	9001      	str	r0, [sp, #4]
    44b2:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    44b4:	9b01      	ldr	r3, [sp, #4]
    44b6:	2b03      	cmp	r3, #3
    44b8:	f000 8090 	beq.w	45dc <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    44bc:	9b01      	ldr	r3, [sp, #4]
    44be:	2b03      	cmp	r3, #3
    44c0:	f200 80d3 	bhi.w	466a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    44c4:	9b01      	ldr	r3, [sp, #4]
    44c6:	2b00      	cmp	r3, #0
    44c8:	d040      	beq.n	454c <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    44ca:	9b01      	ldr	r3, [sp, #4]
    44cc:	3b01      	subs	r3, #1
    44ce:	2b01      	cmp	r3, #1
    44d0:	f200 80cb 	bhi.w	466a <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    44d4:	9b00      	ldr	r3, [sp, #0]
    44d6:	2b00      	cmp	r3, #0
    44d8:	f040 80c9 	bne.w	466e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    44dc:	4b68      	ldr	r3, [pc, #416]	; (4680 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    44de:	2200      	movs	r2, #0
    44e0:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    44e2:	4b68      	ldr	r3, [pc, #416]	; (4684 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    44e4:	681b      	ldr	r3, [r3, #0]
    44e6:	685b      	ldr	r3, [r3, #4]
    44e8:	4a67      	ldr	r2, [pc, #412]	; (4688 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    44ea:	6812      	ldr	r2, [r2, #0]
    44ec:	4610      	mov	r0, r2
    44ee:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    44f0:	4b66      	ldr	r3, [pc, #408]	; (468c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    44f2:	681b      	ldr	r3, [r3, #0]
    44f4:	681b      	ldr	r3, [r3, #0]
    44f6:	4a66      	ldr	r2, [pc, #408]	; (4690 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    44f8:	6812      	ldr	r2, [r2, #0]
    44fa:	4610      	mov	r0, r2
    44fc:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    44fe:	4b65      	ldr	r3, [pc, #404]	; (4694 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    4500:	681b      	ldr	r3, [r3, #0]
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	4a64      	ldr	r2, [pc, #400]	; (4698 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    4506:	6812      	ldr	r2, [r2, #0]
    4508:	4610      	mov	r0, r2
    450a:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    450c:	4b63      	ldr	r3, [pc, #396]	; (469c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	681b      	ldr	r3, [r3, #0]
    4512:	4a63      	ldr	r2, [pc, #396]	; (46a0 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    4514:	6812      	ldr	r2, [r2, #0]
    4516:	4610      	mov	r0, r2
    4518:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    451a:	4b62      	ldr	r3, [pc, #392]	; (46a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    451c:	681b      	ldr	r3, [r3, #0]
    451e:	691b      	ldr	r3, [r3, #16]
    4520:	4a61      	ldr	r2, [pc, #388]	; (46a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4522:	6812      	ldr	r2, [r2, #0]
    4524:	6812      	ldr	r2, [r2, #0]
    4526:	4610      	mov	r0, r2
    4528:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    452a:	4b60      	ldr	r3, [pc, #384]	; (46ac <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    452c:	681b      	ldr	r3, [r3, #0]
    452e:	68db      	ldr	r3, [r3, #12]
    4530:	4a5f      	ldr	r2, [pc, #380]	; (46b0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4532:	6812      	ldr	r2, [r2, #0]
    4534:	6812      	ldr	r2, [r2, #0]
    4536:	4610      	mov	r0, r2
    4538:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    453a:	4b5e      	ldr	r3, [pc, #376]	; (46b4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    453c:	681b      	ldr	r3, [r3, #0]
    453e:	689b      	ldr	r3, [r3, #8]
    4540:	4a5d      	ldr	r2, [pc, #372]	; (46b8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4542:	6812      	ldr	r2, [r2, #0]
    4544:	6812      	ldr	r2, [r2, #0]
    4546:	4610      	mov	r0, r2
    4548:	4798      	blx	r3
            }
        }
        break;
    454a:	e090      	b.n	466e <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    454c:	9b00      	ldr	r3, [sp, #0]
    454e:	2b02      	cmp	r3, #2
    4550:	f040 808f 	bne.w	4672 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    4554:	4b4a      	ldr	r3, [pc, #296]	; (4680 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    4556:	2201      	movs	r2, #1
    4558:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    455a:	4b56      	ldr	r3, [pc, #344]	; (46b4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    455c:	681b      	ldr	r3, [r3, #0]
    455e:	685b      	ldr	r3, [r3, #4]
    4560:	4a55      	ldr	r2, [pc, #340]	; (46b8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    4562:	6812      	ldr	r2, [r2, #0]
    4564:	4610      	mov	r0, r2
    4566:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    4568:	4b50      	ldr	r3, [pc, #320]	; (46ac <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    456a:	681b      	ldr	r3, [r3, #0]
    456c:	691b      	ldr	r3, [r3, #16]
    456e:	4a50      	ldr	r2, [pc, #320]	; (46b0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    4570:	6812      	ldr	r2, [r2, #0]
    4572:	4610      	mov	r0, r2
    4574:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4576:	4b4d      	ldr	r3, [pc, #308]	; (46ac <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4578:	681b      	ldr	r3, [r3, #0]
    457a:	689b      	ldr	r3, [r3, #8]
    457c:	4a4c      	ldr	r2, [pc, #304]	; (46b0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    457e:	6812      	ldr	r2, [r2, #0]
    4580:	4610      	mov	r0, r2
    4582:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4584:	4b47      	ldr	r3, [pc, #284]	; (46a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4586:	681b      	ldr	r3, [r3, #0]
    4588:	68db      	ldr	r3, [r3, #12]
    458a:	4a47      	ldr	r2, [pc, #284]	; (46a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    458c:	6812      	ldr	r2, [r2, #0]
    458e:	4610      	mov	r0, r2
    4590:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4592:	4b44      	ldr	r3, [pc, #272]	; (46a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4594:	681b      	ldr	r3, [r3, #0]
    4596:	689b      	ldr	r3, [r3, #8]
    4598:	4a43      	ldr	r2, [pc, #268]	; (46a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    459a:	6812      	ldr	r2, [r2, #0]
    459c:	6812      	ldr	r2, [r2, #0]
    459e:	4610      	mov	r0, r2
    45a0:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    45a2:	4b38      	ldr	r3, [pc, #224]	; (4684 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    45a4:	681b      	ldr	r3, [r3, #0]
    45a6:	685b      	ldr	r3, [r3, #4]
    45a8:	4a44      	ldr	r2, [pc, #272]	; (46bc <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    45aa:	6812      	ldr	r2, [r2, #0]
    45ac:	4610      	mov	r0, r2
    45ae:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    45b0:	4b36      	ldr	r3, [pc, #216]	; (468c <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    45b2:	681b      	ldr	r3, [r3, #0]
    45b4:	681b      	ldr	r3, [r3, #0]
    45b6:	4a42      	ldr	r2, [pc, #264]	; (46c0 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    45b8:	6812      	ldr	r2, [r2, #0]
    45ba:	4610      	mov	r0, r2
    45bc:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    45be:	4b35      	ldr	r3, [pc, #212]	; (4694 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    45c0:	681b      	ldr	r3, [r3, #0]
    45c2:	681b      	ldr	r3, [r3, #0]
    45c4:	4a3f      	ldr	r2, [pc, #252]	; (46c4 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    45c6:	6812      	ldr	r2, [r2, #0]
    45c8:	4610      	mov	r0, r2
    45ca:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    45cc:	4b33      	ldr	r3, [pc, #204]	; (469c <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    45ce:	681b      	ldr	r3, [r3, #0]
    45d0:	681b      	ldr	r3, [r3, #0]
    45d2:	4a3d      	ldr	r2, [pc, #244]	; (46c8 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    45d4:	6812      	ldr	r2, [r2, #0]
    45d6:	4610      	mov	r0, r2
    45d8:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    45da:	e04a      	b.n	4672 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    45dc:	9b00      	ldr	r3, [sp, #0]
    45de:	2b02      	cmp	r3, #2
    45e0:	d149      	bne.n	4676 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    45e2:	4b27      	ldr	r3, [pc, #156]	; (4680 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    45e4:	2201      	movs	r2, #1
    45e6:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    45e8:	4b32      	ldr	r3, [pc, #200]	; (46b4 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    45ea:	681b      	ldr	r3, [r3, #0]
    45ec:	685b      	ldr	r3, [r3, #4]
    45ee:	4a32      	ldr	r2, [pc, #200]	; (46b8 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    45f0:	6812      	ldr	r2, [r2, #0]
    45f2:	4610      	mov	r0, r2
    45f4:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    45f6:	4b2d      	ldr	r3, [pc, #180]	; (46ac <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    45f8:	681b      	ldr	r3, [r3, #0]
    45fa:	691b      	ldr	r3, [r3, #16]
    45fc:	4a2c      	ldr	r2, [pc, #176]	; (46b0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    45fe:	6812      	ldr	r2, [r2, #0]
    4600:	4610      	mov	r0, r2
    4602:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    4604:	4b29      	ldr	r3, [pc, #164]	; (46ac <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    4606:	681b      	ldr	r3, [r3, #0]
    4608:	689b      	ldr	r3, [r3, #8]
    460a:	4a29      	ldr	r2, [pc, #164]	; (46b0 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    460c:	6812      	ldr	r2, [r2, #0]
    460e:	4610      	mov	r0, r2
    4610:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    4612:	4b24      	ldr	r3, [pc, #144]	; (46a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4614:	681b      	ldr	r3, [r3, #0]
    4616:	68db      	ldr	r3, [r3, #12]
    4618:	4a23      	ldr	r2, [pc, #140]	; (46a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    461a:	6812      	ldr	r2, [r2, #0]
    461c:	4610      	mov	r0, r2
    461e:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    4620:	4b20      	ldr	r3, [pc, #128]	; (46a4 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    4622:	681b      	ldr	r3, [r3, #0]
    4624:	689b      	ldr	r3, [r3, #8]
    4626:	4a20      	ldr	r2, [pc, #128]	; (46a8 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    4628:	6812      	ldr	r2, [r2, #0]
    462a:	6812      	ldr	r2, [r2, #0]
    462c:	4610      	mov	r0, r2
    462e:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    4630:	4b26      	ldr	r3, [pc, #152]	; (46cc <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    4632:	681b      	ldr	r3, [r3, #0]
    4634:	685b      	ldr	r3, [r3, #4]
    4636:	4a26      	ldr	r2, [pc, #152]	; (46d0 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    4638:	6812      	ldr	r2, [r2, #0]
    463a:	4610      	mov	r0, r2
    463c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    463e:	4b25      	ldr	r3, [pc, #148]	; (46d4 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    4640:	681b      	ldr	r3, [r3, #0]
    4642:	681b      	ldr	r3, [r3, #0]
    4644:	4a24      	ldr	r2, [pc, #144]	; (46d8 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    4646:	6812      	ldr	r2, [r2, #0]
    4648:	4610      	mov	r0, r2
    464a:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    464c:	4b23      	ldr	r3, [pc, #140]	; (46dc <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    464e:	681b      	ldr	r3, [r3, #0]
    4650:	681b      	ldr	r3, [r3, #0]
    4652:	4a23      	ldr	r2, [pc, #140]	; (46e0 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    4654:	6812      	ldr	r2, [r2, #0]
    4656:	4610      	mov	r0, r2
    4658:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    465a:	4b22      	ldr	r3, [pc, #136]	; (46e4 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    465c:	681b      	ldr	r3, [r3, #0]
    465e:	681b      	ldr	r3, [r3, #0]
    4660:	4a21      	ldr	r2, [pc, #132]	; (46e8 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    4662:	6812      	ldr	r2, [r2, #0]
    4664:	4610      	mov	r0, r2
    4666:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    4668:	e005      	b.n	4676 <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    466a:	bf00      	nop
    466c:	e004      	b.n	4678 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    466e:	bf00      	nop
    4670:	e002      	b.n	4678 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4672:	bf00      	nop
    4674:	e000      	b.n	4678 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    4676:	bf00      	nop
    }

}
    4678:	bf00      	nop
    467a:	b003      	add	sp, #12
    467c:	f85d fb04 	ldr.w	pc, [sp], #4
    4680:	1fff8b21 	.word	0x1fff8b21
    4684:	1fff8bac 	.word	0x1fff8bac
    4688:	1fff8bcc 	.word	0x1fff8bcc
    468c:	1fff8bb0 	.word	0x1fff8bb0
    4690:	1fff8bd4 	.word	0x1fff8bd4
    4694:	1fff8bb4 	.word	0x1fff8bb4
    4698:	1fff8bdc 	.word	0x1fff8bdc
    469c:	1fff8bb8 	.word	0x1fff8bb8
    46a0:	1fff8be4 	.word	0x1fff8be4
    46a4:	1fff8ba0 	.word	0x1fff8ba0
    46a8:	1fff8bc4 	.word	0x1fff8bc4
    46ac:	1fff8ba4 	.word	0x1fff8ba4
    46b0:	1fff8bc0 	.word	0x1fff8bc0
    46b4:	1fff8ba8 	.word	0x1fff8ba8
    46b8:	1fff8bbc 	.word	0x1fff8bbc
    46bc:	1fff8bc8 	.word	0x1fff8bc8
    46c0:	1fff8bd0 	.word	0x1fff8bd0
    46c4:	1fff8bd8 	.word	0x1fff8bd8
    46c8:	1fff8be0 	.word	0x1fff8be0
    46cc:	1fff8be8 	.word	0x1fff8be8
    46d0:	1fff8bf8 	.word	0x1fff8bf8
    46d4:	1fff8bec 	.word	0x1fff8bec
    46d8:	1fff8bfc 	.word	0x1fff8bfc
    46dc:	1fff8bf0 	.word	0x1fff8bf0
    46e0:	1fff8c00 	.word	0x1fff8c00
    46e4:	1fff8bf4 	.word	0x1fff8bf4
    46e8:	1fff8c04 	.word	0x1fff8c04

000046ec <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    46ec:	b500      	push	{lr}
    46ee:	b083      	sub	sp, #12
    46f0:	9001      	str	r0, [sp, #4]
    46f2:	9100      	str	r1, [sp, #0]
    switch(Command)
    46f4:	9b00      	ldr	r3, [sp, #0]
    46f6:	2b04      	cmp	r3, #4
    46f8:	d010      	beq.n	471c <Clock_Ip_Command+0x30>
    46fa:	9b00      	ldr	r3, [sp, #0]
    46fc:	2b04      	cmp	r3, #4
    46fe:	d811      	bhi.n	4724 <Clock_Ip_Command+0x38>
    4700:	9b00      	ldr	r3, [sp, #0]
    4702:	2b01      	cmp	r3, #1
    4704:	d006      	beq.n	4714 <Clock_Ip_Command+0x28>
    4706:	9b00      	ldr	r3, [sp, #0]
    4708:	2b02      	cmp	r3, #2
    470a:	d10b      	bne.n	4724 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    470c:	9801      	ldr	r0, [sp, #4]
    470e:	f7ff fdb3 	bl	4278 <Clock_Ip_ClockInitializeObjects>
            break;
    4712:	e008      	b.n	4726 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    4714:	9801      	ldr	r0, [sp, #4]
    4716:	f7ff f9db 	bl	3ad0 <Clock_Ip_SpecificPlatformInitClock>
            break;
    471a:	e004      	b.n	4726 <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    471c:	9801      	ldr	r0, [sp, #4]
    471e:	f7ff f8ed 	bl	38fc <DisableSafeClock>
            break;
    4722:	e000      	b.n	4726 <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    4724:	bf00      	nop
    }
}
    4726:	bf00      	nop
    4728:	b003      	add	sp, #12
    472a:	f85d fb04 	ldr.w	pc, [sp], #4
    472e:	bf00      	nop

00004730 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    4730:	b500      	push	{lr}
    4732:	b085      	sub	sp, #20
    4734:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    4736:	4a20      	ldr	r2, [pc, #128]	; (47b8 <Mcu_Init+0x88>)
    4738:	9b01      	ldr	r3, [sp, #4]
    473a:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    473c:	2300      	movs	r3, #0
    473e:	9303      	str	r3, [sp, #12]
    4740:	e010      	b.n	4764 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    4742:	4b1d      	ldr	r3, [pc, #116]	; (47b8 <Mcu_Init+0x88>)
    4744:	681b      	ldr	r3, [r3, #0]
    4746:	6919      	ldr	r1, [r3, #16]
    4748:	9a03      	ldr	r2, [sp, #12]
    474a:	4613      	mov	r3, r2
    474c:	005b      	lsls	r3, r3, #1
    474e:	4413      	add	r3, r2
    4750:	009b      	lsls	r3, r3, #2
    4752:	440b      	add	r3, r1
    4754:	681b      	ldr	r3, [r3, #0]
    4756:	9a03      	ldr	r2, [sp, #12]
    4758:	b2d1      	uxtb	r1, r2
    475a:	4a18      	ldr	r2, [pc, #96]	; (47bc <Mcu_Init+0x8c>)
    475c:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    475e:	9b03      	ldr	r3, [sp, #12]
    4760:	3301      	adds	r3, #1
    4762:	9303      	str	r3, [sp, #12]
    4764:	4b14      	ldr	r3, [pc, #80]	; (47b8 <Mcu_Init+0x88>)
    4766:	681b      	ldr	r3, [r3, #0]
    4768:	689b      	ldr	r3, [r3, #8]
    476a:	9a03      	ldr	r2, [sp, #12]
    476c:	429a      	cmp	r2, r3
    476e:	d3e8      	bcc.n	4742 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4770:	2300      	movs	r3, #0
    4772:	9303      	str	r3, [sp, #12]
    4774:	e010      	b.n	4798 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    4776:	4b10      	ldr	r3, [pc, #64]	; (47b8 <Mcu_Init+0x88>)
    4778:	681b      	ldr	r3, [r3, #0]
    477a:	6959      	ldr	r1, [r3, #20]
    477c:	9a03      	ldr	r2, [sp, #12]
    477e:	4613      	mov	r3, r2
    4780:	01db      	lsls	r3, r3, #7
    4782:	1a9b      	subs	r3, r3, r2
    4784:	00db      	lsls	r3, r3, #3
    4786:	440b      	add	r3, r1
    4788:	681b      	ldr	r3, [r3, #0]
    478a:	9a03      	ldr	r2, [sp, #12]
    478c:	b2d1      	uxtb	r1, r2
    478e:	4a0c      	ldr	r2, [pc, #48]	; (47c0 <Mcu_Init+0x90>)
    4790:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    4792:	9b03      	ldr	r3, [sp, #12]
    4794:	3301      	adds	r3, #1
    4796:	9303      	str	r3, [sp, #12]
    4798:	4b07      	ldr	r3, [pc, #28]	; (47b8 <Mcu_Init+0x88>)
    479a:	681b      	ldr	r3, [r3, #0]
    479c:	68db      	ldr	r3, [r3, #12]
    479e:	9a03      	ldr	r2, [sp, #12]
    47a0:	429a      	cmp	r2, r3
    47a2:	d3e8      	bcc.n	4776 <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    47a4:	4b04      	ldr	r3, [pc, #16]	; (47b8 <Mcu_Init+0x88>)
    47a6:	681b      	ldr	r3, [r3, #0]
    47a8:	699b      	ldr	r3, [r3, #24]
    47aa:	4618      	mov	r0, r3
    47ac:	f000 f88a 	bl	48c4 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    47b0:	bf00      	nop
    47b2:	b005      	add	sp, #20
    47b4:	f85d fb04 	ldr.w	pc, [sp], #4
    47b8:	1fff8ce0 	.word	0x1fff8ce0
    47bc:	1fff8cdc 	.word	0x1fff8cdc
    47c0:	1fff8cd8 	.word	0x1fff8cd8

000047c4 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    47c4:	b084      	sub	sp, #16
    47c6:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    47c8:	2301      	movs	r3, #1
    47ca:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    47ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    47d2:	4618      	mov	r0, r3
    47d4:	b004      	add	sp, #16
    47d6:	4770      	bx	lr

000047d8 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    47d8:	b500      	push	{lr}
    47da:	b085      	sub	sp, #20
    47dc:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    47de:	4a0e      	ldr	r2, [pc, #56]	; (4818 <Mcu_InitClock+0x40>)
    47e0:	9b01      	ldr	r3, [sp, #4]
    47e2:	4413      	add	r3, r2
    47e4:	781b      	ldrb	r3, [r3, #0]
    47e6:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    47ea:	4b0c      	ldr	r3, [pc, #48]	; (481c <Mcu_InitClock+0x44>)
    47ec:	681b      	ldr	r3, [r3, #0]
    47ee:	6959      	ldr	r1, [r3, #20]
    47f0:	f89d 200f 	ldrb.w	r2, [sp, #15]
    47f4:	4613      	mov	r3, r2
    47f6:	01db      	lsls	r3, r3, #7
    47f8:	1a9b      	subs	r3, r3, r2
    47fa:	00db      	lsls	r3, r3, #3
    47fc:	440b      	add	r3, r1
    47fe:	4618      	mov	r0, r3
    4800:	f000 f86a 	bl	48d8 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    4804:	2300      	movs	r3, #0
    4806:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    480a:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    480e:	4618      	mov	r0, r3
    4810:	b005      	add	sp, #20
    4812:	f85d fb04 	ldr.w	pc, [sp], #4
    4816:	bf00      	nop
    4818:	1fff8cd8 	.word	0x1fff8cd8
    481c:	1fff8ce0 	.word	0x1fff8ce0

00004820 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    4820:	b500      	push	{lr}
    4822:	b085      	sub	sp, #20
    4824:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    4826:	4a0d      	ldr	r2, [pc, #52]	; (485c <Mcu_SetMode+0x3c>)
    4828:	9b01      	ldr	r3, [sp, #4]
    482a:	4413      	add	r3, r2
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    4832:	f006 ff91 	bl	b758 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    4836:	4b0a      	ldr	r3, [pc, #40]	; (4860 <Mcu_SetMode+0x40>)
    4838:	681b      	ldr	r3, [r3, #0]
    483a:	6919      	ldr	r1, [r3, #16]
    483c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    4840:	4613      	mov	r3, r2
    4842:	005b      	lsls	r3, r3, #1
    4844:	4413      	add	r3, r2
    4846:	009b      	lsls	r3, r3, #2
    4848:	440b      	add	r3, r1
    484a:	4618      	mov	r0, r3
    484c:	f000 f84e 	bl	48ec <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    4850:	f006 ffae 	bl	b7b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    4854:	bf00      	nop
    4856:	b005      	add	sp, #20
    4858:	f85d fb04 	ldr.w	pc, [sp], #4
    485c:	1fff8cdc 	.word	0x1fff8cdc
    4860:	1fff8ce0 	.word	0x1fff8ce0

00004864 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    4864:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    4866:	2302      	movs	r3, #2
    4868:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    486a:	9b01      	ldr	r3, [sp, #4]
}
    486c:	4618      	mov	r0, r3
    486e:	b002      	add	sp, #8
    4870:	4770      	bx	lr

00004872 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    4872:	b500      	push	{lr}
    4874:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    4876:	f000 f843 	bl	4900 <Mcu_Ipw_GetResetReason>
    487a:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    487c:	9b01      	ldr	r3, [sp, #4]
}
    487e:	4618      	mov	r0, r3
    4880:	b003      	add	sp, #12
    4882:	f85d fb04 	ldr.w	pc, [sp], #4

00004886 <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    4886:	b500      	push	{lr}
    4888:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    488a:	f000 f83f 	bl	490c <Mcu_Ipw_GetResetRawValue>
    488e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    4890:	9b01      	ldr	r3, [sp, #4]
}
    4892:	4618      	mov	r0, r3
    4894:	b003      	add	sp, #12
    4896:	f85d fb04 	ldr.w	pc, [sp], #4

0000489a <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    489a:	b500      	push	{lr}
    489c:	b083      	sub	sp, #12
    489e:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    48a0:	9801      	ldr	r0, [sp, #4]
    48a2:	f000 f839 	bl	4918 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    48a6:	bf00      	nop
    48a8:	b003      	add	sp, #12
    48aa:	f85d fb04 	ldr.w	pc, [sp], #4

000048ae <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    48ae:	b082      	sub	sp, #8
    48b0:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    48b2:	4b03      	ldr	r3, [pc, #12]	; (48c0 <Mcu_ClkSrcFailureNotification+0x12>)
    48b4:	681b      	ldr	r3, [r3, #0]
    48b6:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    48b8:	bf00      	nop
    48ba:	b002      	add	sp, #8
    48bc:	4770      	bx	lr
    48be:	bf00      	nop
    48c0:	1fff8ce0 	.word	0x1fff8ce0

000048c4 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    48c4:	b500      	push	{lr}
    48c6:	b083      	sub	sp, #12
    48c8:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    48ca:	9801      	ldr	r0, [sp, #4]
    48cc:	f000 f882 	bl	49d4 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    48d0:	bf00      	nop
    48d2:	b003      	add	sp, #12
    48d4:	f85d fb04 	ldr.w	pc, [sp], #4

000048d8 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    48d8:	b500      	push	{lr}
    48da:	b083      	sub	sp, #12
    48dc:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    48de:	9801      	ldr	r0, [sp, #4]
    48e0:	f7fc fc6a 	bl	11b8 <Clock_Ip_InitClock>
}
    48e4:	bf00      	nop
    48e6:	b003      	add	sp, #12
    48e8:	f85d fb04 	ldr.w	pc, [sp], #4

000048ec <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    48ec:	b500      	push	{lr}
    48ee:	b083      	sub	sp, #12
    48f0:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    48f2:	9801      	ldr	r0, [sp, #4]
    48f4:	f000 f820 	bl	4938 <Power_Ip_SetMode>
}
    48f8:	bf00      	nop
    48fa:	b003      	add	sp, #12
    48fc:	f85d fb04 	ldr.w	pc, [sp], #4

00004900 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    4900:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    4902:	f000 f84f 	bl	49a4 <Power_Ip_GetResetReason>
    4906:	4603      	mov	r3, r0
}
    4908:	4618      	mov	r0, r3
    490a:	bd08      	pop	{r3, pc}

0000490c <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    490c:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    490e:	f000 f857 	bl	49c0 <Power_Ip_GetResetRawValue>
    4912:	4603      	mov	r3, r0
}
    4914:	4618      	mov	r0, r3
    4916:	bd08      	pop	{r3, pc}

00004918 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    4918:	b500      	push	{lr}
    491a:	b083      	sub	sp, #12
    491c:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    491e:	9b01      	ldr	r3, [sp, #4]
    4920:	2b00      	cmp	r3, #0
    4922:	d102      	bne.n	492a <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    4924:	f000 f86c 	bl	4a00 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    4928:	e001      	b.n	492e <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    492a:	f000 f86e 	bl	4a0a <Power_Ip_EnableSleepOnExit>
}
    492e:	bf00      	nop
    4930:	b003      	add	sp, #12
    4932:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00004938 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4938:	b500      	push	{lr}
    493a:	b085      	sub	sp, #20
    493c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    493e:	9b01      	ldr	r3, [sp, #4]
    4940:	685b      	ldr	r3, [r3, #4]
    4942:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    4944:	9802      	ldr	r0, [sp, #8]
    4946:	f000 f9f5 	bl	4d34 <Power_Ip_SMC_ModeCheckEntry>
    494a:	4603      	mov	r3, r0
    494c:	2b00      	cmp	r3, #0
    494e:	d002      	beq.n	4956 <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4950:	2301      	movs	r3, #1
    4952:	9303      	str	r3, [sp, #12]
    4954:	e003      	b.n	495e <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    4956:	9801      	ldr	r0, [sp, #4]
    4958:	f000 fa1e 	bl	4d98 <Power_Ip_SMC_ModeConfig>
    495c:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    495e:	9b03      	ldr	r3, [sp, #12]
    4960:	2b01      	cmp	r3, #1
    4962:	d103      	bne.n	496c <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4964:	21ff      	movs	r1, #255	; 0xff
    4966:	2003      	movs	r0, #3
    4968:	f000 f8f4 	bl	4b54 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    496c:	bf00      	nop
    496e:	b005      	add	sp, #20
    4970:	f85d fb04 	ldr.w	pc, [sp], #4

00004974 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    4974:	b084      	sub	sp, #16
    4976:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    4978:	230c      	movs	r3, #12
    497a:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    497c:	4a08      	ldr	r2, [pc, #32]	; (49a0 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    497e:	9b01      	ldr	r3, [sp, #4]
    4980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4984:	2b0e      	cmp	r3, #14
    4986:	d805      	bhi.n	4994 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    4988:	4a05      	ldr	r2, [pc, #20]	; (49a0 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    498a:	9b01      	ldr	r3, [sp, #4]
    498c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4990:	9303      	str	r3, [sp, #12]
    4992:	e001      	b.n	4998 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    4994:	230c      	movs	r3, #12
    4996:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    4998:	9b03      	ldr	r3, [sp, #12]
}
    499a:	4618      	mov	r0, r3
    499c:	b004      	add	sp, #16
    499e:	4770      	bx	lr
    49a0:	0000c1f4 	.word	0x0000c1f4

000049a4 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    49a4:	b500      	push	{lr}
    49a6:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    49a8:	f000 f940 	bl	4c2c <Power_Ip_RCM_GetResetReason>
    49ac:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    49ae:	9801      	ldr	r0, [sp, #4]
    49b0:	f7ff ffe0 	bl	4974 <Power_Ip_ConvertIntergeToResetType>
    49b4:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    49b6:	9b00      	ldr	r3, [sp, #0]
}
    49b8:	4618      	mov	r0, r3
    49ba:	b003      	add	sp, #12
    49bc:	f85d fb04 	ldr.w	pc, [sp], #4

000049c0 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    49c0:	b500      	push	{lr}
    49c2:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    49c4:	f000 f98a 	bl	4cdc <Power_Ip_RCM_GetResetRawValue>
    49c8:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    49ca:	9b01      	ldr	r3, [sp, #4]
}
    49cc:	4618      	mov	r0, r3
    49ce:	b003      	add	sp, #12
    49d0:	f85d fb04 	ldr.w	pc, [sp], #4

000049d4 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    49d4:	b500      	push	{lr}
    49d6:	b083      	sub	sp, #12
    49d8:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    49da:	9b01      	ldr	r3, [sp, #4]
    49dc:	681b      	ldr	r3, [r3, #0]
    49de:	4618      	mov	r0, r3
    49e0:	f000 f90e 	bl	4c00 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    49e4:	9b01      	ldr	r3, [sp, #4]
    49e6:	685b      	ldr	r3, [r3, #4]
    49e8:	4618      	mov	r0, r3
    49ea:	f000 f86d 	bl	4ac8 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    49ee:	9b01      	ldr	r3, [sp, #4]
    49f0:	689b      	ldr	r3, [r3, #8]
    49f2:	4618      	mov	r0, r3
    49f4:	f000 f990 	bl	4d18 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    49f8:	bf00      	nop
    49fa:	b003      	add	sp, #12
    49fc:	f85d fb04 	ldr.w	pc, [sp], #4

00004a00 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    4a00:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    4a02:	f000 f811 	bl	4a28 <Power_Ip_CM4_DisableSleepOnExit>
}
    4a06:	bf00      	nop
    4a08:	bd08      	pop	{r3, pc}

00004a0a <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    4a0a:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    4a0c:	f000 f820 	bl	4a50 <Power_Ip_CM4_EnableSleepOnExit>
}
    4a10:	bf00      	nop
    4a12:	bd08      	pop	{r3, pc}

00004a14 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    4a14:	b082      	sub	sp, #8
    4a16:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    4a18:	4a02      	ldr	r2, [pc, #8]	; (4a24 <Power_Ip_InstallNotificationsCallback+0x10>)
    4a1a:	9b01      	ldr	r3, [sp, #4]
    4a1c:	6013      	str	r3, [r2, #0]
}
    4a1e:	bf00      	nop
    4a20:	b002      	add	sp, #8
    4a22:	4770      	bx	lr
    4a24:	1fff8b24 	.word	0x1fff8b24

00004a28 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    4a28:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4a2a:	2300      	movs	r3, #0
    4a2c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4a2e:	4b07      	ldr	r3, [pc, #28]	; (4a4c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4a30:	681b      	ldr	r3, [r3, #0]
    4a32:	685b      	ldr	r3, [r3, #4]
    4a34:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    4a36:	9b01      	ldr	r3, [sp, #4]
    4a38:	f023 0302 	bic.w	r3, r3, #2
    4a3c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4a3e:	4b03      	ldr	r3, [pc, #12]	; (4a4c <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    4a40:	681b      	ldr	r3, [r3, #0]
    4a42:	9a01      	ldr	r2, [sp, #4]
    4a44:	605a      	str	r2, [r3, #4]
}
    4a46:	bf00      	nop
    4a48:	b002      	add	sp, #8
    4a4a:	4770      	bx	lr
    4a4c:	1fff8b28 	.word	0x1fff8b28

00004a50 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    4a50:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4a52:	2300      	movs	r3, #0
    4a54:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4a56:	4b07      	ldr	r3, [pc, #28]	; (4a74 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4a58:	681b      	ldr	r3, [r3, #0]
    4a5a:	685b      	ldr	r3, [r3, #4]
    4a5c:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    4a5e:	9b01      	ldr	r3, [sp, #4]
    4a60:	f043 0302 	orr.w	r3, r3, #2
    4a64:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4a66:	4b03      	ldr	r3, [pc, #12]	; (4a74 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    4a68:	681b      	ldr	r3, [r3, #0]
    4a6a:	9a01      	ldr	r2, [sp, #4]
    4a6c:	605a      	str	r2, [r3, #4]
}
    4a6e:	bf00      	nop
    4a70:	b002      	add	sp, #8
    4a72:	4770      	bx	lr
    4a74:	1fff8b28 	.word	0x1fff8b28

00004a78 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    4a78:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4a7a:	2300      	movs	r3, #0
    4a7c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4a7e:	4b07      	ldr	r3, [pc, #28]	; (4a9c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4a80:	681b      	ldr	r3, [r3, #0]
    4a82:	685b      	ldr	r3, [r3, #4]
    4a84:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    4a86:	9b01      	ldr	r3, [sp, #4]
    4a88:	f043 0304 	orr.w	r3, r3, #4
    4a8c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4a8e:	4b03      	ldr	r3, [pc, #12]	; (4a9c <Power_Ip_CM4_EnableDeepSleep+0x24>)
    4a90:	681b      	ldr	r3, [r3, #0]
    4a92:	9a01      	ldr	r2, [sp, #4]
    4a94:	605a      	str	r2, [r3, #4]
}
    4a96:	bf00      	nop
    4a98:	b002      	add	sp, #8
    4a9a:	4770      	bx	lr
    4a9c:	1fff8b28 	.word	0x1fff8b28

00004aa0 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    4aa0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    4aa2:	2300      	movs	r3, #0
    4aa4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    4aa6:	4b07      	ldr	r3, [pc, #28]	; (4ac4 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4aa8:	681b      	ldr	r3, [r3, #0]
    4aaa:	685b      	ldr	r3, [r3, #4]
    4aac:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    4aae:	9b01      	ldr	r3, [sp, #4]
    4ab0:	f023 0304 	bic.w	r3, r3, #4
    4ab4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    4ab6:	4b03      	ldr	r3, [pc, #12]	; (4ac4 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    4ab8:	681b      	ldr	r3, [r3, #0]
    4aba:	9a01      	ldr	r2, [sp, #4]
    4abc:	605a      	str	r2, [r3, #4]
}
    4abe:	bf00      	nop
    4ac0:	b002      	add	sp, #8
    4ac2:	4770      	bx	lr
    4ac4:	1fff8b28 	.word	0x1fff8b28

00004ac8 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    4ac8:	b084      	sub	sp, #16
    4aca:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    4acc:	4b20      	ldr	r3, [pc, #128]	; (4b50 <Power_Ip_PMC_PowerInit+0x88>)
    4ace:	781b      	ldrb	r3, [r3, #0]
    4ad0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    4ad4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4ad8:	f003 030f 	and.w	r3, r3, #15
    4adc:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    4ae0:	9b01      	ldr	r3, [sp, #4]
    4ae2:	781a      	ldrb	r2, [r3, #0]
    4ae4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4ae8:	4313      	orrs	r3, r2
    4aea:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    4aee:	4a18      	ldr	r2, [pc, #96]	; (4b50 <Power_Ip_PMC_PowerInit+0x88>)
    4af0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4af4:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    4af6:	4b16      	ldr	r3, [pc, #88]	; (4b50 <Power_Ip_PMC_PowerInit+0x88>)
    4af8:	785b      	ldrb	r3, [r3, #1]
    4afa:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    4afe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4b02:	f003 031f 	and.w	r3, r3, #31
    4b06:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    4b0a:	9b01      	ldr	r3, [sp, #4]
    4b0c:	785a      	ldrb	r2, [r3, #1]
    4b0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4b12:	4313      	orrs	r3, r2
    4b14:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    4b18:	4a0d      	ldr	r2, [pc, #52]	; (4b50 <Power_Ip_PMC_PowerInit+0x88>)
    4b1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4b1e:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    4b20:	4b0b      	ldr	r3, [pc, #44]	; (4b50 <Power_Ip_PMC_PowerInit+0x88>)
    4b22:	789b      	ldrb	r3, [r3, #2]
    4b24:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    4b28:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4b2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    4b30:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    4b34:	9b01      	ldr	r3, [sp, #4]
    4b36:	789a      	ldrb	r2, [r3, #2]
    4b38:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4b3c:	4313      	orrs	r3, r2
    4b3e:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    4b42:	4a03      	ldr	r2, [pc, #12]	; (4b50 <Power_Ip_PMC_PowerInit+0x88>)
    4b44:	f89d 300f 	ldrb.w	r3, [sp, #15]
    4b48:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    4b4a:	bf00      	nop
    4b4c:	b004      	add	sp, #16
    4b4e:	4770      	bx	lr
    4b50:	4007d000 	.word	0x4007d000

00004b54 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4b54:	b500      	push	{lr}
    4b56:	b083      	sub	sp, #12
    4b58:	9001      	str	r0, [sp, #4]
    4b5a:	460b      	mov	r3, r1
    4b5c:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    4b60:	4b05      	ldr	r3, [pc, #20]	; (4b78 <Power_Ip_ReportPowerErrors+0x24>)
    4b62:	681b      	ldr	r3, [r3, #0]
    4b64:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4b68:	4611      	mov	r1, r2
    4b6a:	9801      	ldr	r0, [sp, #4]
    4b6c:	4798      	blx	r3
}
    4b6e:	bf00      	nop
    4b70:	b003      	add	sp, #12
    4b72:	f85d fb04 	ldr.w	pc, [sp], #4
    4b76:	bf00      	nop
    4b78:	1fff8b24 	.word	0x1fff8b24

00004b7c <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    4b7c:	b082      	sub	sp, #8
    4b7e:	9001      	str	r0, [sp, #4]
    4b80:	460b      	mov	r3, r1
    4b82:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    4b86:	bf00      	nop
    4b88:	b002      	add	sp, #8
    4b8a:	4770      	bx	lr

00004b8c <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    4b8c:	b500      	push	{lr}
    4b8e:	b085      	sub	sp, #20
    4b90:	9003      	str	r0, [sp, #12]
    4b92:	9102      	str	r1, [sp, #8]
    4b94:	9201      	str	r2, [sp, #4]
    4b96:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    4b98:	2000      	movs	r0, #0
    4b9a:	f7fc f83c 	bl	c16 <OsIf_GetCounter>
    4b9e:	4602      	mov	r2, r0
    4ba0:	9b03      	ldr	r3, [sp, #12]
    4ba2:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    4ba4:	9b02      	ldr	r3, [sp, #8]
    4ba6:	2200      	movs	r2, #0
    4ba8:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    4baa:	2100      	movs	r1, #0
    4bac:	9800      	ldr	r0, [sp, #0]
    4bae:	f7fc f87e 	bl	cae <OsIf_MicrosToTicks>
    4bb2:	4602      	mov	r2, r0
    4bb4:	9b01      	ldr	r3, [sp, #4]
    4bb6:	601a      	str	r2, [r3, #0]
}
    4bb8:	bf00      	nop
    4bba:	b005      	add	sp, #20
    4bbc:	f85d fb04 	ldr.w	pc, [sp], #4

00004bc0 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    4bc0:	b500      	push	{lr}
    4bc2:	b087      	sub	sp, #28
    4bc4:	9003      	str	r0, [sp, #12]
    4bc6:	9102      	str	r1, [sp, #8]
    4bc8:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    4bca:	2300      	movs	r3, #0
    4bcc:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    4bd0:	2100      	movs	r1, #0
    4bd2:	9803      	ldr	r0, [sp, #12]
    4bd4:	f7fc f838 	bl	c48 <OsIf_GetElapsed>
    4bd8:	4602      	mov	r2, r0
    4bda:	9b02      	ldr	r3, [sp, #8]
    4bdc:	681b      	ldr	r3, [r3, #0]
    4bde:	441a      	add	r2, r3
    4be0:	9b02      	ldr	r3, [sp, #8]
    4be2:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    4be4:	9b02      	ldr	r3, [sp, #8]
    4be6:	681b      	ldr	r3, [r3, #0]
    4be8:	9a01      	ldr	r2, [sp, #4]
    4bea:	429a      	cmp	r2, r3
    4bec:	d802      	bhi.n	4bf4 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    4bee:	2301      	movs	r3, #1
    4bf0:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    4bf4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    4bf8:	4618      	mov	r0, r3
    4bfa:	b007      	add	sp, #28
    4bfc:	f85d fb04 	ldr.w	pc, [sp], #4

00004c00 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    4c00:	b082      	sub	sp, #8
    4c02:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    4c04:	9b01      	ldr	r3, [sp, #4]
    4c06:	681a      	ldr	r2, [r3, #0]
    4c08:	4907      	ldr	r1, [pc, #28]	; (4c28 <Power_Ip_RCM_ResetInit+0x28>)
    4c0a:	f641 7307 	movw	r3, #7943	; 0x1f07
    4c0e:	4013      	ands	r3, r2
    4c10:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    4c12:	9b01      	ldr	r3, [sp, #4]
    4c14:	685a      	ldr	r2, [r3, #4]
    4c16:	4904      	ldr	r1, [pc, #16]	; (4c28 <Power_Ip_RCM_ResetInit+0x28>)
    4c18:	f642 73ff 	movw	r3, #12287	; 0x2fff
    4c1c:	4013      	ands	r3, r2
    4c1e:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    4c20:	bf00      	nop
    4c22:	b002      	add	sp, #8
    4c24:	4770      	bx	lr
    4c26:	bf00      	nop
    4c28:	4007f000 	.word	0x4007f000

00004c2c <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    4c2c:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    4c2e:	230c      	movs	r3, #12
    4c30:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    4c32:	2300      	movs	r3, #0
    4c34:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    4c36:	2300      	movs	r3, #0
    4c38:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    4c3a:	2300      	movs	r3, #0
    4c3c:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    4c3e:	4b25      	ldr	r3, [pc, #148]	; (4cd4 <Power_Ip_RCM_GetResetReason+0xa8>)
    4c40:	699a      	ldr	r2, [r3, #24]
    4c42:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c46:	4013      	ands	r3, r2
    4c48:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    4c4a:	9b03      	ldr	r3, [sp, #12]
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	d008      	beq.n	4c62 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    4c50:	4920      	ldr	r1, [pc, #128]	; (4cd4 <Power_Ip_RCM_GetResetReason+0xa8>)
    4c52:	9a03      	ldr	r2, [sp, #12]
    4c54:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c58:	4013      	ands	r3, r2
    4c5a:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    4c5c:	4a1e      	ldr	r2, [pc, #120]	; (4cd8 <Power_Ip_RCM_GetResetReason+0xac>)
    4c5e:	9b03      	ldr	r3, [sp, #12]
    4c60:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    4c62:	4b1d      	ldr	r3, [pc, #116]	; (4cd8 <Power_Ip_RCM_GetResetReason+0xac>)
    4c64:	681b      	ldr	r3, [r3, #0]
    4c66:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    4c68:	9a02      	ldr	r2, [sp, #8]
    4c6a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4c6e:	4013      	ands	r3, r2
    4c70:	2b82      	cmp	r3, #130	; 0x82
    4c72:	d102      	bne.n	4c7a <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    4c74:	2305      	movs	r3, #5
    4c76:	9307      	str	r3, [sp, #28]
    4c78:	e027      	b.n	4cca <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    4c7a:	2300      	movs	r3, #0
    4c7c:	9306      	str	r3, [sp, #24]
    4c7e:	e021      	b.n	4cc4 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    4c80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4c84:	9b06      	ldr	r3, [sp, #24]
    4c86:	fa22 f303 	lsr.w	r3, r2, r3
    4c8a:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    4c8c:	9a01      	ldr	r2, [sp, #4]
    4c8e:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    4c92:	4013      	ands	r3, r2
    4c94:	2b00      	cmp	r3, #0
    4c96:	d012      	beq.n	4cbe <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    4c98:	9a01      	ldr	r2, [sp, #4]
    4c9a:	9b02      	ldr	r3, [sp, #8]
    4c9c:	4013      	ands	r3, r2
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d00a      	beq.n	4cb8 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    4ca2:	9b05      	ldr	r3, [sp, #20]
    4ca4:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    4ca6:	9b04      	ldr	r3, [sp, #16]
    4ca8:	3301      	adds	r3, #1
    4caa:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    4cac:	9b04      	ldr	r3, [sp, #16]
    4cae:	2b01      	cmp	r3, #1
    4cb0:	d902      	bls.n	4cb8 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    4cb2:	230d      	movs	r3, #13
    4cb4:	9307      	str	r3, [sp, #28]
                        break;
    4cb6:	e008      	b.n	4cca <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    4cb8:	9b05      	ldr	r3, [sp, #20]
    4cba:	3301      	adds	r3, #1
    4cbc:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    4cbe:	9b06      	ldr	r3, [sp, #24]
    4cc0:	3301      	adds	r3, #1
    4cc2:	9306      	str	r3, [sp, #24]
    4cc4:	9b06      	ldr	r3, [sp, #24]
    4cc6:	2b1f      	cmp	r3, #31
    4cc8:	d9da      	bls.n	4c80 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    4cca:	9b07      	ldr	r3, [sp, #28]
}
    4ccc:	4618      	mov	r0, r3
    4cce:	b008      	add	sp, #32
    4cd0:	4770      	bx	lr
    4cd2:	bf00      	nop
    4cd4:	4007f000 	.word	0x4007f000
    4cd8:	1fff8ce4 	.word	0x1fff8ce4

00004cdc <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    4cdc:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    4cde:	4b0c      	ldr	r3, [pc, #48]	; (4d10 <Power_Ip_RCM_GetResetRawValue+0x34>)
    4ce0:	699a      	ldr	r2, [r3, #24]
    4ce2:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4ce6:	4013      	ands	r3, r2
    4ce8:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    4cea:	9b01      	ldr	r3, [sp, #4]
    4cec:	2b00      	cmp	r3, #0
    4cee:	d008      	beq.n	4d02 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    4cf0:	4907      	ldr	r1, [pc, #28]	; (4d10 <Power_Ip_RCM_GetResetRawValue+0x34>)
    4cf2:	9a01      	ldr	r2, [sp, #4]
    4cf4:	f642 73ee 	movw	r3, #12270	; 0x2fee
    4cf8:	4013      	ands	r3, r2
    4cfa:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    4cfc:	4a05      	ldr	r2, [pc, #20]	; (4d14 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4cfe:	9b01      	ldr	r3, [sp, #4]
    4d00:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    4d02:	4b04      	ldr	r3, [pc, #16]	; (4d14 <Power_Ip_RCM_GetResetRawValue+0x38>)
    4d04:	681b      	ldr	r3, [r3, #0]
    4d06:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    4d08:	9b00      	ldr	r3, [sp, #0]
}
    4d0a:	4618      	mov	r0, r3
    4d0c:	b002      	add	sp, #8
    4d0e:	4770      	bx	lr
    4d10:	4007f000 	.word	0x4007f000
    4d14:	1fff8ce4 	.word	0x1fff8ce4

00004d18 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    4d18:	b082      	sub	sp, #8
    4d1a:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    4d1c:	9b01      	ldr	r3, [sp, #4]
    4d1e:	681b      	ldr	r3, [r3, #0]
    4d20:	4a03      	ldr	r2, [pc, #12]	; (4d30 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    4d22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    4d26:	6093      	str	r3, [r2, #8]
}
    4d28:	bf00      	nop
    4d2a:	b002      	add	sp, #8
    4d2c:	4770      	bx	lr
    4d2e:	bf00      	nop
    4d30:	4007e000 	.word	0x4007e000

00004d34 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    4d34:	b084      	sub	sp, #16
    4d36:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    4d38:	2301      	movs	r3, #1
    4d3a:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    4d3c:	4b15      	ldr	r3, [pc, #84]	; (4d94 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    4d3e:	695b      	ldr	r3, [r3, #20]
    4d40:	b2db      	uxtb	r3, r3
    4d42:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    4d44:	9b01      	ldr	r3, [sp, #4]
    4d46:	2b02      	cmp	r3, #2
    4d48:	d012      	beq.n	4d70 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    4d4a:	9b01      	ldr	r3, [sp, #4]
    4d4c:	2b02      	cmp	r3, #2
    4d4e:	d818      	bhi.n	4d82 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    4d50:	9b01      	ldr	r3, [sp, #4]
    4d52:	2b00      	cmp	r3, #0
    4d54:	d003      	beq.n	4d5e <Power_Ip_SMC_ModeCheckEntry+0x2a>
    4d56:	9b01      	ldr	r3, [sp, #4]
    4d58:	2b01      	cmp	r3, #1
    4d5a:	d003      	beq.n	4d64 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    4d5c:	e011      	b.n	4d82 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    4d5e:	2300      	movs	r3, #0
    4d60:	9303      	str	r3, [sp, #12]
            break;
    4d62:	e013      	b.n	4d8c <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    4d64:	9b02      	ldr	r3, [sp, #8]
    4d66:	2b01      	cmp	r3, #1
    4d68:	d10d      	bne.n	4d86 <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    4d6a:	2300      	movs	r3, #0
    4d6c:	9303      	str	r3, [sp, #12]
            break;
    4d6e:	e00a      	b.n	4d86 <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    4d70:	9b02      	ldr	r3, [sp, #8]
    4d72:	2b01      	cmp	r3, #1
    4d74:	d002      	beq.n	4d7c <Power_Ip_SMC_ModeCheckEntry+0x48>
    4d76:	9b02      	ldr	r3, [sp, #8]
    4d78:	2b10      	cmp	r3, #16
    4d7a:	d106      	bne.n	4d8a <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    4d7c:	2300      	movs	r3, #0
    4d7e:	9303      	str	r3, [sp, #12]
            break;
    4d80:	e003      	b.n	4d8a <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    4d82:	bf00      	nop
    4d84:	e002      	b.n	4d8c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    4d86:	bf00      	nop
    4d88:	e000      	b.n	4d8c <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    4d8a:	bf00      	nop
        }
    }

    return PowerModeCheck;
    4d8c:	9b03      	ldr	r3, [sp, #12]
}
    4d8e:	4618      	mov	r0, r3
    4d90:	b004      	add	sp, #16
    4d92:	4770      	bx	lr
    4d94:	4007e000 	.word	0x4007e000

00004d98 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    4d98:	b500      	push	{lr}
    4d9a:	b08b      	sub	sp, #44	; 0x2c
    4d9c:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    4d9e:	2300      	movs	r3, #0
    4da0:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    4da2:	2300      	movs	r3, #0
    4da4:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    4da6:	2300      	movs	r3, #0
    4da8:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    4dac:	9b01      	ldr	r3, [sp, #4]
    4dae:	685b      	ldr	r3, [r3, #4]
    4db0:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    4db2:	9b08      	ldr	r3, [sp, #32]
    4db4:	2b02      	cmp	r3, #2
    4db6:	d076      	beq.n	4ea6 <Power_Ip_SMC_ModeConfig+0x10e>
    4db8:	9b08      	ldr	r3, [sp, #32]
    4dba:	2b02      	cmp	r3, #2
    4dbc:	f200 80ab 	bhi.w	4f16 <Power_Ip_SMC_ModeConfig+0x17e>
    4dc0:	9b08      	ldr	r3, [sp, #32]
    4dc2:	2b00      	cmp	r3, #0
    4dc4:	d003      	beq.n	4dce <Power_Ip_SMC_ModeConfig+0x36>
    4dc6:	9b08      	ldr	r3, [sp, #32]
    4dc8:	2b01      	cmp	r3, #1
    4dca:	d034      	beq.n	4e36 <Power_Ip_SMC_ModeConfig+0x9e>
    4dcc:	e0a3      	b.n	4f16 <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    4dce:	4b58      	ldr	r3, [pc, #352]	; (4f30 <Power_Ip_SMC_ModeConfig+0x198>)
    4dd0:	68db      	ldr	r3, [r3, #12]
    4dd2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4dd4:	9b06      	ldr	r3, [sp, #24]
    4dd6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4dda:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    4ddc:	4a54      	ldr	r2, [pc, #336]	; (4f30 <Power_Ip_SMC_ModeConfig+0x198>)
    4dde:	9b06      	ldr	r3, [sp, #24]
    4de0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4de2:	aa02      	add	r2, sp, #8
    4de4:	a903      	add	r1, sp, #12
    4de6:	a804      	add	r0, sp, #16
    4de8:	f24c 3350 	movw	r3, #50000	; 0xc350
    4dec:	f7ff fece 	bl	4b8c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4df0:	9a02      	ldr	r2, [sp, #8]
    4df2:	a903      	add	r1, sp, #12
    4df4:	ab04      	add	r3, sp, #16
    4df6:	4618      	mov	r0, r3
    4df8:	f7ff fee2 	bl	4bc0 <Power_Ip_TimeoutExpired>
    4dfc:	4603      	mov	r3, r0
    4dfe:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    4e02:	4b4b      	ldr	r3, [pc, #300]	; (4f30 <Power_Ip_SMC_ModeConfig+0x198>)
    4e04:	695b      	ldr	r3, [r3, #20]
    4e06:	f003 0301 	and.w	r3, r3, #1
    4e0a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4e0c:	9b05      	ldr	r3, [sp, #20]
    4e0e:	2b01      	cmp	r3, #1
    4e10:	d006      	beq.n	4e20 <Power_Ip_SMC_ModeConfig+0x88>
    4e12:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e16:	f083 0301 	eor.w	r3, r3, #1
    4e1a:	b2db      	uxtb	r3, r3
    4e1c:	2b00      	cmp	r3, #0
    4e1e:	d1e7      	bne.n	4df0 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    4e20:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e24:	2b00      	cmp	r3, #0
    4e26:	d079      	beq.n	4f1c <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e28:	2301      	movs	r3, #1
    4e2a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e2c:	21ff      	movs	r1, #255	; 0xff
    4e2e:	2000      	movs	r0, #0
    4e30:	f7ff fe90 	bl	4b54 <Power_Ip_ReportPowerErrors>
            }

            break;
    4e34:	e072      	b.n	4f1c <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    4e36:	4b3e      	ldr	r3, [pc, #248]	; (4f30 <Power_Ip_SMC_ModeConfig+0x198>)
    4e38:	68db      	ldr	r3, [r3, #12]
    4e3a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4e3c:	9b06      	ldr	r3, [sp, #24]
    4e3e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4e42:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    4e44:	9b06      	ldr	r3, [sp, #24]
    4e46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    4e4a:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    4e4c:	4a38      	ldr	r2, [pc, #224]	; (4f30 <Power_Ip_SMC_ModeConfig+0x198>)
    4e4e:	9b06      	ldr	r3, [sp, #24]
    4e50:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4e52:	aa02      	add	r2, sp, #8
    4e54:	a903      	add	r1, sp, #12
    4e56:	a804      	add	r0, sp, #16
    4e58:	f24c 3350 	movw	r3, #50000	; 0xc350
    4e5c:	f7ff fe96 	bl	4b8c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4e60:	9a02      	ldr	r2, [sp, #8]
    4e62:	a903      	add	r1, sp, #12
    4e64:	ab04      	add	r3, sp, #16
    4e66:	4618      	mov	r0, r3
    4e68:	f7ff feaa 	bl	4bc0 <Power_Ip_TimeoutExpired>
    4e6c:	4603      	mov	r3, r0
    4e6e:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    4e72:	4b2f      	ldr	r3, [pc, #188]	; (4f30 <Power_Ip_SMC_ModeConfig+0x198>)
    4e74:	695b      	ldr	r3, [r3, #20]
    4e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4e7a:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4e7c:	9b05      	ldr	r3, [sp, #20]
    4e7e:	2b80      	cmp	r3, #128	; 0x80
    4e80:	d006      	beq.n	4e90 <Power_Ip_SMC_ModeConfig+0xf8>
    4e82:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e86:	f083 0301 	eor.w	r3, r3, #1
    4e8a:	b2db      	uxtb	r3, r3
    4e8c:	2b00      	cmp	r3, #0
    4e8e:	d1e7      	bne.n	4e60 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    4e90:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4e94:	2b00      	cmp	r3, #0
    4e96:	d043      	beq.n	4f20 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4e98:	2301      	movs	r3, #1
    4e9a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4e9c:	21ff      	movs	r1, #255	; 0xff
    4e9e:	2000      	movs	r0, #0
    4ea0:	f7ff fe58 	bl	4b54 <Power_Ip_ReportPowerErrors>
            }

            break;
    4ea4:	e03c      	b.n	4f20 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    4ea6:	4b22      	ldr	r3, [pc, #136]	; (4f30 <Power_Ip_SMC_ModeConfig+0x198>)
    4ea8:	68db      	ldr	r3, [r3, #12]
    4eaa:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    4eac:	9b06      	ldr	r3, [sp, #24]
    4eae:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    4eb2:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    4eb4:	9b06      	ldr	r3, [sp, #24]
    4eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4eba:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    4ebc:	4a1c      	ldr	r2, [pc, #112]	; (4f30 <Power_Ip_SMC_ModeConfig+0x198>)
    4ebe:	9b06      	ldr	r3, [sp, #24]
    4ec0:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    4ec2:	aa02      	add	r2, sp, #8
    4ec4:	a903      	add	r1, sp, #12
    4ec6:	a804      	add	r0, sp, #16
    4ec8:	f24c 3350 	movw	r3, #50000	; 0xc350
    4ecc:	f7ff fe5e 	bl	4b8c <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4ed0:	9a02      	ldr	r2, [sp, #8]
    4ed2:	a903      	add	r1, sp, #12
    4ed4:	ab04      	add	r3, sp, #16
    4ed6:	4618      	mov	r0, r3
    4ed8:	f7ff fe72 	bl	4bc0 <Power_Ip_TimeoutExpired>
    4edc:	4603      	mov	r3, r0
    4ede:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    4ee2:	4b13      	ldr	r3, [pc, #76]	; (4f30 <Power_Ip_SMC_ModeConfig+0x198>)
    4ee4:	695b      	ldr	r3, [r3, #20]
    4ee6:	f003 0304 	and.w	r3, r3, #4
    4eea:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    4eec:	9b05      	ldr	r3, [sp, #20]
    4eee:	2b04      	cmp	r3, #4
    4ef0:	d006      	beq.n	4f00 <Power_Ip_SMC_ModeConfig+0x168>
    4ef2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4ef6:	f083 0301 	eor.w	r3, r3, #1
    4efa:	b2db      	uxtb	r3, r3
    4efc:	2b00      	cmp	r3, #0
    4efe:	d1e7      	bne.n	4ed0 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    4f00:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4f04:	2b00      	cmp	r3, #0
    4f06:	d00d      	beq.n	4f24 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4f08:	2301      	movs	r3, #1
    4f0a:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    4f0c:	21ff      	movs	r1, #255	; 0xff
    4f0e:	2000      	movs	r0, #0
    4f10:	f7ff fe20 	bl	4b54 <Power_Ip_ReportPowerErrors>
            }

            break;
    4f14:	e006      	b.n	4f24 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    4f16:	2301      	movs	r3, #1
    4f18:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    4f1a:	e004      	b.n	4f26 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4f1c:	bf00      	nop
    4f1e:	e002      	b.n	4f26 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4f20:	bf00      	nop
    4f22:	e000      	b.n	4f26 <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    4f24:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    4f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    4f28:	4618      	mov	r0, r3
    4f2a:	b00b      	add	sp, #44	; 0x2c
    4f2c:	f85d fb04 	ldr.w	pc, [sp], #4
    4f30:	4007e000 	.word	0x4007e000

00004f34 <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    4f34:	b084      	sub	sp, #16
    4f36:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    4f38:	2300      	movs	r3, #0
    4f3a:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    4f3e:	2300      	movs	r3, #0
    4f40:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    4f44:	2300      	movs	r3, #0
    4f46:	f88d 300e 	strb.w	r3, [sp, #14]
    4f4a:	e01b      	b.n	4f84 <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    4f4c:	4a12      	ldr	r2, [pc, #72]	; (4f98 <Can_IsControllersBusy+0x64>)
    4f4e:	9b01      	ldr	r3, [sp, #4]
    4f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4f54:	695a      	ldr	r2, [r3, #20]
    4f56:	f89d 300e 	ldrb.w	r3, [sp, #14]
    4f5a:	009b      	lsls	r3, r3, #2
    4f5c:	4413      	add	r3, r2
    4f5e:	681b      	ldr	r3, [r3, #0]
    4f60:	2b00      	cmp	r3, #0
    4f62:	d00a      	beq.n	4f7a <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    4f64:	f89d 300e 	ldrb.w	r3, [sp, #14]
    4f68:	4a0c      	ldr	r2, [pc, #48]	; (4f9c <Can_IsControllersBusy+0x68>)
    4f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4f6e:	2b00      	cmp	r3, #0
    4f70:	d003      	beq.n	4f7a <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    4f72:	2301      	movs	r3, #1
    4f74:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    4f78:	e008      	b.n	4f8c <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    4f7a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    4f7e:	3301      	adds	r3, #1
    4f80:	f88d 300e 	strb.w	r3, [sp, #14]
    4f84:	f89d 300e 	ldrb.w	r3, [sp, #14]
    4f88:	2b00      	cmp	r3, #0
    4f8a:	d0df      	beq.n	4f4c <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    4f8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    4f90:	4618      	mov	r0, r3
    4f92:	b004      	add	sp, #16
    4f94:	4770      	bx	lr
    4f96:	bf00      	nop
    4f98:	1fff8cf0 	.word	0x1fff8cf0
    4f9c:	1fff8cec 	.word	0x1fff8cec

00004fa0 <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    4fa0:	b500      	push	{lr}
    4fa2:	b085      	sub	sp, #20
    4fa4:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    4fa6:	2300      	movs	r3, #0
    4fa8:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    4fac:	2300      	movs	r3, #0
    4fae:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    4fb2:	2300      	movs	r3, #0
    4fb4:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    4fb6:	2300      	movs	r3, #0
    4fb8:	f88d 300e 	strb.w	r3, [sp, #14]
    4fbc:	e035      	b.n	502a <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    4fbe:	4a30      	ldr	r2, [pc, #192]	; (5080 <Can_InitControllers+0xe0>)
    4fc0:	9b01      	ldr	r3, [sp, #4]
    4fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4fc6:	695a      	ldr	r2, [r3, #20]
    4fc8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    4fcc:	009b      	lsls	r3, r3, #2
    4fce:	4413      	add	r3, r2
    4fd0:	681b      	ldr	r3, [r3, #0]
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	d024      	beq.n	5020 <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    4fd6:	4a2a      	ldr	r2, [pc, #168]	; (5080 <Can_InitControllers+0xe0>)
    4fd8:	9b01      	ldr	r3, [sp, #4]
    4fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4fde:	695a      	ldr	r2, [r3, #20]
    4fe0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    4fe4:	009b      	lsls	r3, r3, #2
    4fe6:	4413      	add	r3, r2
    4fe8:	681b      	ldr	r3, [r3, #0]
    4fea:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    4fec:	9b02      	ldr	r3, [sp, #8]
    4fee:	7a1b      	ldrb	r3, [r3, #8]
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	d015      	beq.n	5020 <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    4ff4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    4ff8:	4a22      	ldr	r2, [pc, #136]	; (5084 <Can_InitControllers+0xe4>)
    4ffa:	2100      	movs	r1, #0
    4ffc:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    4ffe:	9802      	ldr	r0, [sp, #8]
    5000:	f000 ffd8 	bl	5fb4 <Can_43_FLEXCAN_Ipw_Init>
    5004:	4603      	mov	r3, r0
    5006:	2b00      	cmp	r3, #0
    5008:	d106      	bne.n	5018 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    500a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    500e:	4a1e      	ldr	r2, [pc, #120]	; (5088 <Can_InitControllers+0xe8>)
    5010:	2102      	movs	r1, #2
    5012:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    5016:	e003      	b.n	5020 <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    5018:	2301      	movs	r3, #1
    501a:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    501e:	e008      	b.n	5032 <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5020:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5024:	3301      	adds	r3, #1
    5026:	f88d 300e 	strb.w	r3, [sp, #14]
    502a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    502e:	2b00      	cmp	r3, #0
    5030:	d0c5      	beq.n	4fbe <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    5032:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5036:	2b00      	cmp	r3, #0
    5038:	d01e      	beq.n	5078 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    503a:	2300      	movs	r3, #0
    503c:	f88d 300e 	strb.w	r3, [sp, #14]
    5040:	e016      	b.n	5070 <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    5042:	4a0f      	ldr	r2, [pc, #60]	; (5080 <Can_InitControllers+0xe0>)
    5044:	9b01      	ldr	r3, [sp, #4]
    5046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    504a:	695a      	ldr	r2, [r3, #20]
    504c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5050:	009b      	lsls	r3, r3, #2
    5052:	4413      	add	r3, r2
    5054:	681b      	ldr	r3, [r3, #0]
    5056:	2b00      	cmp	r3, #0
    5058:	d005      	beq.n	5066 <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    505a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    505e:	4a0a      	ldr	r2, [pc, #40]	; (5088 <Can_InitControllers+0xe8>)
    5060:	2100      	movs	r1, #0
    5062:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5066:	f89d 300e 	ldrb.w	r3, [sp, #14]
    506a:	3301      	adds	r3, #1
    506c:	f88d 300e 	strb.w	r3, [sp, #14]
    5070:	f89d 300e 	ldrb.w	r3, [sp, #14]
    5074:	2b00      	cmp	r3, #0
    5076:	d0e4      	beq.n	5042 <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    5078:	bf00      	nop
    507a:	b005      	add	sp, #20
    507c:	f85d fb04 	ldr.w	pc, [sp], #4
    5080:	1fff8cf0 	.word	0x1fff8cf0
    5084:	1fff8ce8 	.word	0x1fff8ce8
    5088:	1fff8cec 	.word	0x1fff8cec

0000508c <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    508c:	b500      	push	{lr}
    508e:	b085      	sub	sp, #20
    5090:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    5092:	2300      	movs	r3, #0
    5094:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5098:	2300      	movs	r3, #0
    509a:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    509c:	2300      	movs	r3, #0
    509e:	f88d 300f 	strb.w	r3, [sp, #15]
    50a2:	e028      	b.n	50f6 <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    50a4:	4a18      	ldr	r2, [pc, #96]	; (5108 <Can_DeInitControllers+0x7c>)
    50a6:	9b01      	ldr	r3, [sp, #4]
    50a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    50ac:	695a      	ldr	r2, [r3, #20]
    50ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50b2:	009b      	lsls	r3, r3, #2
    50b4:	4413      	add	r3, r2
    50b6:	681b      	ldr	r3, [r3, #0]
    50b8:	2b00      	cmp	r3, #0
    50ba:	d017      	beq.n	50ec <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    50bc:	4a12      	ldr	r2, [pc, #72]	; (5108 <Can_DeInitControllers+0x7c>)
    50be:	9b01      	ldr	r3, [sp, #4]
    50c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    50c4:	695a      	ldr	r2, [r3, #20]
    50c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50ca:	009b      	lsls	r3, r3, #2
    50cc:	4413      	add	r3, r2
    50ce:	681b      	ldr	r3, [r3, #0]
    50d0:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    50d2:	9b02      	ldr	r3, [sp, #8]
    50d4:	7a1b      	ldrb	r3, [r3, #8]
    50d6:	2b00      	cmp	r3, #0
    50d8:	d008      	beq.n	50ec <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    50da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50de:	4a0b      	ldr	r2, [pc, #44]	; (510c <Can_DeInitControllers+0x80>)
    50e0:	2100      	movs	r1, #0
    50e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    50e6:	9802      	ldr	r0, [sp, #8]
    50e8:	f000 ffce 	bl	6088 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    50ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50f0:	3301      	adds	r3, #1
    50f2:	f88d 300f 	strb.w	r3, [sp, #15]
    50f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    50fa:	2b00      	cmp	r3, #0
    50fc:	d0d2      	beq.n	50a4 <Can_DeInitControllers+0x18>
            }
        }
    }
}
    50fe:	bf00      	nop
    5100:	bf00      	nop
    5102:	b005      	add	sp, #20
    5104:	f85d fb04 	ldr.w	pc, [sp], #4
    5108:	1fff8cf0 	.word	0x1fff8cf0
    510c:	1fff8cec 	.word	0x1fff8cec

00005110 <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    5110:	b500      	push	{lr}
    5112:	b085      	sub	sp, #20
    5114:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    5116:	2300      	movs	r3, #0
    5118:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    511a:	2300      	movs	r3, #0
    511c:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    5120:	2300      	movs	r3, #0
    5122:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    5124:	490c      	ldr	r1, [pc, #48]	; (5158 <Can_43_FLEXCAN_Init+0x48>)
    5126:	9b03      	ldr	r3, [sp, #12]
    5128:	9a01      	ldr	r2, [sp, #4]
    512a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    512e:	9803      	ldr	r0, [sp, #12]
    5130:	f7ff ff00 	bl	4f34 <Can_IsControllersBusy>
    5134:	4603      	mov	r3, r0
    5136:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    513a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    513e:	f083 0301 	eor.w	r3, r3, #1
    5142:	b2db      	uxtb	r3, r3
    5144:	2b00      	cmp	r3, #0
    5146:	d002      	beq.n	514e <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    5148:	9803      	ldr	r0, [sp, #12]
    514a:	f7ff ff29 	bl	4fa0 <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    514e:	bf00      	nop
    5150:	b005      	add	sp, #20
    5152:	f85d fb04 	ldr.w	pc, [sp], #4
    5156:	bf00      	nop
    5158:	1fff8cf0 	.word	0x1fff8cf0

0000515c <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    515c:	b500      	push	{lr}
    515e:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    5160:	2300      	movs	r3, #0
    5162:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    5166:	2300      	movs	r3, #0
    5168:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    516c:	2300      	movs	r3, #0
    516e:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    5170:	2300      	movs	r3, #0
    5172:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    5174:	2300      	movs	r3, #0
    5176:	f88d 3007 	strb.w	r3, [sp, #7]
    517a:	e01b      	b.n	51b4 <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    517c:	4a19      	ldr	r2, [pc, #100]	; (51e4 <Can_43_FLEXCAN_DeInit+0x88>)
    517e:	9b00      	ldr	r3, [sp, #0]
    5180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5184:	695a      	ldr	r2, [r3, #20]
    5186:	f89d 3007 	ldrb.w	r3, [sp, #7]
    518a:	009b      	lsls	r3, r3, #2
    518c:	4413      	add	r3, r2
    518e:	681b      	ldr	r3, [r3, #0]
    5190:	2b00      	cmp	r3, #0
    5192:	d00a      	beq.n	51aa <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    5194:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5198:	4a13      	ldr	r2, [pc, #76]	; (51e8 <Can_43_FLEXCAN_DeInit+0x8c>)
    519a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    519e:	2b01      	cmp	r3, #1
    51a0:	d103      	bne.n	51aa <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    51a2:	2301      	movs	r3, #1
    51a4:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    51a8:	e008      	b.n	51bc <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    51aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    51ae:	3301      	adds	r3, #1
    51b0:	f88d 3007 	strb.w	r3, [sp, #7]
    51b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    51b8:	2b00      	cmp	r3, #0
    51ba:	d0df      	beq.n	517c <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    51bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    51c0:	f083 0301 	eor.w	r3, r3, #1
    51c4:	b2db      	uxtb	r3, r3
    51c6:	2b00      	cmp	r3, #0
    51c8:	d007      	beq.n	51da <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    51ca:	9800      	ldr	r0, [sp, #0]
    51cc:	f7ff ff5e 	bl	508c <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    51d0:	4a04      	ldr	r2, [pc, #16]	; (51e4 <Can_43_FLEXCAN_DeInit+0x88>)
    51d2:	9b00      	ldr	r3, [sp, #0]
    51d4:	2100      	movs	r1, #0
    51d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    51da:	bf00      	nop
    51dc:	b003      	add	sp, #12
    51de:	f85d fb04 	ldr.w	pc, [sp], #4
    51e2:	bf00      	nop
    51e4:	1fff8cf0 	.word	0x1fff8cf0
    51e8:	1fff8cec 	.word	0x1fff8cec

000051ec <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    51ec:	b500      	push	{lr}
    51ee:	b087      	sub	sp, #28
    51f0:	4603      	mov	r3, r0
    51f2:	9100      	str	r1, [sp, #0]
    51f4:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    51f8:	2301      	movs	r3, #1
    51fa:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    51fe:	2300      	movs	r3, #0
    5200:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5202:	2300      	movs	r3, #0
    5204:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    5206:	2300      	movs	r3, #0
    5208:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    520a:	4a47      	ldr	r2, [pc, #284]	; (5328 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    520c:	9b04      	ldr	r3, [sp, #16]
    520e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5212:	695a      	ldr	r2, [r3, #20]
    5214:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5218:	009b      	lsls	r3, r3, #2
    521a:	4413      	add	r3, r2
    521c:	681b      	ldr	r3, [r3, #0]
    521e:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    5220:	9b00      	ldr	r3, [sp, #0]
    5222:	2b03      	cmp	r3, #3
    5224:	d05d      	beq.n	52e2 <Can_43_FLEXCAN_SetControllerMode+0xf6>
    5226:	9b00      	ldr	r3, [sp, #0]
    5228:	2b03      	cmp	r3, #3
    522a:	d874      	bhi.n	5316 <Can_43_FLEXCAN_SetControllerMode+0x12a>
    522c:	9b00      	ldr	r3, [sp, #0]
    522e:	2b01      	cmp	r3, #1
    5230:	d003      	beq.n	523a <Can_43_FLEXCAN_SetControllerMode+0x4e>
    5232:	9b00      	ldr	r3, [sp, #0]
    5234:	2b02      	cmp	r3, #2
    5236:	d01d      	beq.n	5274 <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    5238:	e06d      	b.n	5316 <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    523a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    523e:	4a3b      	ldr	r2, [pc, #236]	; (532c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    5240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5244:	2b02      	cmp	r3, #2
    5246:	d168      	bne.n	531a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    5248:	9803      	ldr	r0, [sp, #12]
    524a:	f000 ff49 	bl	60e0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    524e:	4603      	mov	r3, r0
    5250:	2b00      	cmp	r3, #0
    5252:	d162      	bne.n	531a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    5254:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5258:	4a34      	ldr	r2, [pc, #208]	; (532c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    525a:	2101      	movs	r1, #1
    525c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    5260:	9b03      	ldr	r3, [sp, #12]
    5262:	781b      	ldrb	r3, [r3, #0]
    5264:	2101      	movs	r1, #1
    5266:	4618      	mov	r0, r3
    5268:	f7fb fb4f 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    526c:	2300      	movs	r3, #0
    526e:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    5272:	e052      	b.n	531a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    5274:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5278:	4a2c      	ldr	r2, [pc, #176]	; (532c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    527a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    527e:	2b01      	cmp	r3, #1
    5280:	d005      	beq.n	528e <Can_43_FLEXCAN_SetControllerMode+0xa2>
    5282:	2b00      	cmp	r3, #0
    5284:	d029      	beq.n	52da <Can_43_FLEXCAN_SetControllerMode+0xee>
    5286:	3b02      	subs	r3, #2
    5288:	2b01      	cmp	r3, #1
    528a:	d826      	bhi.n	52da <Can_43_FLEXCAN_SetControllerMode+0xee>
    528c:	e015      	b.n	52ba <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    528e:	9803      	ldr	r0, [sp, #12]
    5290:	f000 ff54 	bl	613c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    5294:	4603      	mov	r3, r0
    5296:	2b00      	cmp	r3, #0
    5298:	d121      	bne.n	52de <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    529a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    529e:	4a23      	ldr	r2, [pc, #140]	; (532c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    52a0:	2102      	movs	r1, #2
    52a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    52a6:	9b03      	ldr	r3, [sp, #12]
    52a8:	781b      	ldrb	r3, [r3, #0]
    52aa:	2102      	movs	r1, #2
    52ac:	4618      	mov	r0, r3
    52ae:	f7fb fb2c 	bl	90a <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    52b2:	2300      	movs	r3, #0
    52b4:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    52b8:	e011      	b.n	52de <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    52ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    52be:	4a1b      	ldr	r2, [pc, #108]	; (532c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    52c0:	2102      	movs	r1, #2
    52c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    52c6:	9b03      	ldr	r3, [sp, #12]
    52c8:	781b      	ldrb	r3, [r3, #0]
    52ca:	2102      	movs	r1, #2
    52cc:	4618      	mov	r0, r3
    52ce:	f7fb fb1c 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    52d2:	2300      	movs	r3, #0
    52d4:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    52d8:	e002      	b.n	52e0 <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    52da:	bf00      	nop
    52dc:	e01e      	b.n	531c <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    52de:	bf00      	nop
                        break;
    52e0:	e01c      	b.n	531c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    52e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    52e6:	4a11      	ldr	r2, [pc, #68]	; (532c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    52e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    52ec:	3b02      	subs	r3, #2
    52ee:	2b01      	cmp	r3, #1
    52f0:	d80f      	bhi.n	5312 <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    52f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    52f6:	4a0d      	ldr	r2, [pc, #52]	; (532c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    52f8:	2103      	movs	r1, #3
    52fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    52fe:	9b03      	ldr	r3, [sp, #12]
    5300:	781b      	ldrb	r3, [r3, #0]
    5302:	2103      	movs	r1, #3
    5304:	4618      	mov	r0, r3
    5306:	f7fb fb00 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    530a:	2300      	movs	r3, #0
    530c:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    5310:	e000      	b.n	5314 <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    5312:	bf00      	nop
                        break;
    5314:	e002      	b.n	531c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    5316:	bf00      	nop
    5318:	e000      	b.n	531c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    531a:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    531c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5320:	4618      	mov	r0, r3
    5322:	b007      	add	sp, #28
    5324:	f85d fb04 	ldr.w	pc, [sp], #4
    5328:	1fff8cf0 	.word	0x1fff8cf0
    532c:	1fff8cec 	.word	0x1fff8cec

00005330 <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    5330:	b500      	push	{lr}
    5332:	b085      	sub	sp, #20
    5334:	4603      	mov	r3, r0
    5336:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    533a:	2300      	movs	r3, #0
    533c:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    533e:	2300      	movs	r3, #0
    5340:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    5342:	2300      	movs	r3, #0
    5344:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    5346:	4a10      	ldr	r2, [pc, #64]	; (5388 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    5348:	9b03      	ldr	r3, [sp, #12]
    534a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    534e:	695a      	ldr	r2, [r3, #20]
    5350:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5354:	009b      	lsls	r3, r3, #2
    5356:	4413      	add	r3, r2
    5358:	681b      	ldr	r3, [r3, #0]
    535a:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    535c:	f005 fb42 	bl	a9e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    5360:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5364:	4a09      	ldr	r2, [pc, #36]	; (538c <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    5366:	5cd2      	ldrb	r2, [r2, r3]
    5368:	f89d 3007 	ldrb.w	r3, [sp, #7]
    536c:	3201      	adds	r2, #1
    536e:	b2d1      	uxtb	r1, r2
    5370:	4a06      	ldr	r2, [pc, #24]	; (538c <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    5372:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    5374:	f005 fb62 	bl	aa3c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    5378:	9802      	ldr	r0, [sp, #8]
    537a:	f000 ff4f 	bl	621c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    537e:	bf00      	nop
    5380:	b005      	add	sp, #20
    5382:	f85d fb04 	ldr.w	pc, [sp], #4
    5386:	bf00      	nop
    5388:	1fff8cf0 	.word	0x1fff8cf0
    538c:	1fff8ce8 	.word	0x1fff8ce8

00005390 <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    5390:	b500      	push	{lr}
    5392:	b085      	sub	sp, #20
    5394:	4603      	mov	r3, r0
    5396:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    539a:	2300      	movs	r3, #0
    539c:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    539e:	2300      	movs	r3, #0
    53a0:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    53a2:	2300      	movs	r3, #0
    53a4:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    53a6:	4a16      	ldr	r2, [pc, #88]	; (5400 <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    53a8:	9b03      	ldr	r3, [sp, #12]
    53aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    53ae:	695a      	ldr	r2, [r3, #20]
    53b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    53b4:	009b      	lsls	r3, r3, #2
    53b6:	4413      	add	r3, r2
    53b8:	681b      	ldr	r3, [r3, #0]
    53ba:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    53bc:	f005 fb64 	bl	aa88 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    53c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    53c4:	4a0f      	ldr	r2, [pc, #60]	; (5404 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    53c6:	5cd3      	ldrb	r3, [r2, r3]
    53c8:	2b00      	cmp	r3, #0
    53ca:	d009      	beq.n	53e0 <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    53cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    53d0:	4a0c      	ldr	r2, [pc, #48]	; (5404 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    53d2:	5cd2      	ldrb	r2, [r2, r3]
    53d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    53d8:	3a01      	subs	r2, #1
    53da:	b2d1      	uxtb	r1, r2
    53dc:	4a09      	ldr	r2, [pc, #36]	; (5404 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    53de:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    53e0:	f005 fb7e 	bl	aae0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    53e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    53e8:	4a06      	ldr	r2, [pc, #24]	; (5404 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    53ea:	5cd3      	ldrb	r3, [r2, r3]
    53ec:	2b00      	cmp	r3, #0
    53ee:	d102      	bne.n	53f6 <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    53f0:	9802      	ldr	r0, [sp, #8]
    53f2:	f000 ff2f 	bl	6254 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    53f6:	bf00      	nop
    53f8:	b005      	add	sp, #20
    53fa:	f85d fb04 	ldr.w	pc, [sp], #4
    53fe:	bf00      	nop
    5400:	1fff8cf0 	.word	0x1fff8cf0
    5404:	1fff8ce8 	.word	0x1fff8ce8

00005408 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    5408:	b500      	push	{lr}
    540a:	b087      	sub	sp, #28
    540c:	4603      	mov	r3, r0
    540e:	9100      	str	r1, [sp, #0]
    5410:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    5414:	2301      	movs	r3, #1
    5416:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    541a:	2300      	movs	r3, #0
    541c:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    5420:	2300      	movs	r3, #0
    5422:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5424:	2300      	movs	r3, #0
    5426:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    5428:	2300      	movs	r3, #0
    542a:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    542c:	4a18      	ldr	r2, [pc, #96]	; (5490 <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    542e:	9b04      	ldr	r3, [sp, #16]
    5430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5434:	695a      	ldr	r2, [r3, #20]
    5436:	f89d 3007 	ldrb.w	r3, [sp, #7]
    543a:	009b      	lsls	r3, r3, #2
    543c:	4413      	add	r3, r2
    543e:	681b      	ldr	r3, [r3, #0]
    5440:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    5442:	f10d 030b 	add.w	r3, sp, #11
    5446:	4619      	mov	r1, r3
    5448:	9803      	ldr	r0, [sp, #12]
    544a:	f000 ff21 	bl	6290 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    544e:	4603      	mov	r3, r0
    5450:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    5454:	f89d 3017 	ldrb.w	r3, [sp, #23]
    5458:	2b00      	cmp	r3, #0
    545a:	d112      	bne.n	5482 <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    545c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5460:	2b00      	cmp	r3, #0
    5462:	d002      	beq.n	546a <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    5464:	2b01      	cmp	r3, #1
    5466:	d004      	beq.n	5472 <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    5468:	e007      	b.n	547a <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    546a:	9b00      	ldr	r3, [sp, #0]
    546c:	2200      	movs	r2, #0
    546e:	601a      	str	r2, [r3, #0]
                                break;
    5470:	e008      	b.n	5484 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    5472:	9b00      	ldr	r3, [sp, #0]
    5474:	2201      	movs	r2, #1
    5476:	601a      	str	r2, [r3, #0]
                                break;
    5478:	e004      	b.n	5484 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    547a:	9b00      	ldr	r3, [sp, #0]
    547c:	2202      	movs	r2, #2
    547e:	601a      	str	r2, [r3, #0]
                                break;
    5480:	e000      	b.n	5484 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    5482:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    5484:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5488:	4618      	mov	r0, r3
    548a:	b007      	add	sp, #28
    548c:	f85d fb04 	ldr.w	pc, [sp], #4
    5490:	1fff8cf0 	.word	0x1fff8cf0

00005494 <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    5494:	b084      	sub	sp, #16
    5496:	4603      	mov	r3, r0
    5498:	9100      	str	r1, [sp, #0]
    549a:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    549e:	2301      	movs	r3, #1
    54a0:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    54a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    54a8:	4a06      	ldr	r2, [pc, #24]	; (54c4 <Can_43_FLEXCAN_GetControllerMode+0x30>)
    54aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    54ae:	9b00      	ldr	r3, [sp, #0]
    54b0:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    54b2:	2300      	movs	r3, #0
    54b4:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    54b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    54bc:	4618      	mov	r0, r3
    54be:	b004      	add	sp, #16
    54c0:	4770      	bx	lr
    54c2:	bf00      	nop
    54c4:	1fff8cec 	.word	0x1fff8cec

000054c8 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    54c8:	b500      	push	{lr}
    54ca:	b087      	sub	sp, #28
    54cc:	4603      	mov	r3, r0
    54ce:	9100      	str	r1, [sp, #0]
    54d0:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    54d4:	2301      	movs	r3, #1
    54d6:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    54da:	2300      	movs	r3, #0
    54dc:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    54de:	2300      	movs	r3, #0
    54e0:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    54e2:	2300      	movs	r3, #0
    54e4:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    54e6:	4a0c      	ldr	r2, [pc, #48]	; (5518 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    54e8:	9b04      	ldr	r3, [sp, #16]
    54ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    54ee:	695a      	ldr	r2, [r3, #20]
    54f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    54f4:	009b      	lsls	r3, r3, #2
    54f6:	4413      	add	r3, r2
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    54fc:	9900      	ldr	r1, [sp, #0]
    54fe:	9803      	ldr	r0, [sp, #12]
    5500:	f000 fef1 	bl	62e6 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    5504:	4603      	mov	r3, r0
    5506:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    550a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    550e:	4618      	mov	r0, r3
    5510:	b007      	add	sp, #28
    5512:	f85d fb04 	ldr.w	pc, [sp], #4
    5516:	bf00      	nop
    5518:	1fff8cf0 	.word	0x1fff8cf0

0000551c <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    551c:	b500      	push	{lr}
    551e:	b087      	sub	sp, #28
    5520:	4603      	mov	r3, r0
    5522:	9100      	str	r1, [sp, #0]
    5524:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    5528:	2301      	movs	r3, #1
    552a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    552e:	2300      	movs	r3, #0
    5530:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5532:	2300      	movs	r3, #0
    5534:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    5536:	2300      	movs	r3, #0
    5538:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    553a:	4a0c      	ldr	r2, [pc, #48]	; (556c <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    553c:	9b04      	ldr	r3, [sp, #16]
    553e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5542:	695a      	ldr	r2, [r3, #20]
    5544:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5548:	009b      	lsls	r3, r3, #2
    554a:	4413      	add	r3, r2
    554c:	681b      	ldr	r3, [r3, #0]
    554e:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    5550:	9900      	ldr	r1, [sp, #0]
    5552:	9803      	ldr	r0, [sp, #12]
    5554:	f000 feb5 	bl	62c2 <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    5558:	4603      	mov	r3, r0
    555a:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    555e:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5562:	4618      	mov	r0, r3
    5564:	b007      	add	sp, #28
    5566:	f85d fb04 	ldr.w	pc, [sp], #4
    556a:	bf00      	nop
    556c:	1fff8cf0 	.word	0x1fff8cf0

00005570 <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    5570:	b500      	push	{lr}
    5572:	b089      	sub	sp, #36	; 0x24
    5574:	4603      	mov	r3, r0
    5576:	9100      	str	r1, [sp, #0]
    5578:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    557c:	2301      	movs	r3, #1
    557e:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    5582:	2300      	movs	r3, #0
    5584:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    5588:	2300      	movs	r3, #0
    558a:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    558c:	2300      	movs	r3, #0
    558e:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5592:	2300      	movs	r3, #0
    5594:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    5596:	2300      	movs	r3, #0
    5598:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    559a:	2300      	movs	r3, #0
    559c:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    559e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    55a2:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    55a6:	4a1d      	ldr	r2, [pc, #116]	; (561c <Can_43_FLEXCAN_Write+0xac>)
    55a8:	9b06      	ldr	r3, [sp, #24]
    55aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    55ae:	68da      	ldr	r2, [r3, #12]
    55b0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    55b4:	4413      	add	r3, r2
    55b6:	781b      	ldrb	r3, [r3, #0]
    55b8:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    55bc:	4a17      	ldr	r2, [pc, #92]	; (561c <Can_43_FLEXCAN_Write+0xac>)
    55be:	9b06      	ldr	r3, [sp, #24]
    55c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    55c4:	695a      	ldr	r2, [r3, #20]
    55c6:	f89d 301e 	ldrb.w	r3, [sp, #30]
    55ca:	009b      	lsls	r3, r3, #2
    55cc:	4413      	add	r3, r2
    55ce:	681b      	ldr	r3, [r3, #0]
    55d0:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    55d2:	9b04      	ldr	r3, [sp, #16]
    55d4:	2b00      	cmp	r3, #0
    55d6:	d01b      	beq.n	5610 <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    55d8:	4a10      	ldr	r2, [pc, #64]	; (561c <Can_43_FLEXCAN_Write+0xac>)
    55da:	9b06      	ldr	r3, [sp, #24]
    55dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    55e0:	6919      	ldr	r1, [r3, #16]
    55e2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    55e6:	4613      	mov	r3, r2
    55e8:	00db      	lsls	r3, r3, #3
    55ea:	4413      	add	r3, r2
    55ec:	009b      	lsls	r3, r3, #2
    55ee:	440b      	add	r3, r1
    55f0:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    55f2:	f89d 301e 	ldrb.w	r3, [sp, #30]
    55f6:	4a0a      	ldr	r2, [pc, #40]	; (5620 <Can_43_FLEXCAN_Write+0xb0>)
    55f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    55fc:	2b01      	cmp	r3, #1
    55fe:	d107      	bne.n	5610 <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    5600:	9a00      	ldr	r2, [sp, #0]
    5602:	9903      	ldr	r1, [sp, #12]
    5604:	9804      	ldr	r0, [sp, #16]
    5606:	f000 fe80 	bl	630a <Can_43_FLEXCAN_Ipw_Write>
    560a:	4603      	mov	r3, r0
    560c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    5610:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    5614:	4618      	mov	r0, r3
    5616:	b009      	add	sp, #36	; 0x24
    5618:	f85d fb04 	ldr.w	pc, [sp], #4
    561c:	1fff8cf0 	.word	0x1fff8cf0
    5620:	1fff8cec 	.word	0x1fff8cec

00005624 <Can_43_FLEXCAN_MainFunction_Write>:
    *
    * @api
    */
    /* implements     Can_MainFunction_Write_Activity */
    void Can_43_FLEXCAN_MainFunction_Write(void)
    {
    5624:	b500      	push	{lr}
    5626:	b085      	sub	sp, #20
    #if (CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON)
        Can_HwHandleType HwObjectID = 0U;
    5628:	2300      	movs	r3, #0
    562a:	f8ad 300e 	strh.w	r3, [sp, #14]
        uint8 u8ControllerID = 0U;
    562e:	2300      	movs	r3, #0
    5630:	f88d 300d 	strb.w	r3, [sp, #13]
        uint32 u32CoreId = 0U;
    5634:	2300      	movs	r3, #0
    5636:	9302      	str	r3, [sp, #8]
        const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5638:	2300      	movs	r3, #0
    563a:	9301      	str	r3, [sp, #4]

        u32CoreId = Can_GetCoreID();
    563c:	2300      	movs	r3, #0
    563e:	9302      	str	r3, [sp, #8]
        if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    5640:	4a2b      	ldr	r2, [pc, #172]	; (56f0 <Can_43_FLEXCAN_MainFunction_Write+0xcc>)
    5642:	9b02      	ldr	r3, [sp, #8]
    5644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5648:	2b00      	cmp	r3, #0
    564a:	d04c      	beq.n	56e6 <Can_43_FLEXCAN_MainFunction_Write+0xc2>
        {
            HwObjectID = (Can_apxConfig[u32CoreId])->Can_uHthFirstIndex;
    564c:	4a28      	ldr	r2, [pc, #160]	; (56f0 <Can_43_FLEXCAN_MainFunction_Write+0xcc>)
    564e:	9b02      	ldr	r3, [sp, #8]
    5650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5654:	889b      	ldrh	r3, [r3, #4]
    5656:	f8ad 300e 	strh.w	r3, [sp, #14]
            while (HwObjectID < CAN_43_FLEXCAN_HWOBJECT_CONFIG_COUNT)
    565a:	e040      	b.n	56de <Can_43_FLEXCAN_MainFunction_Write+0xba>
            {
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    565c:	4a24      	ldr	r2, [pc, #144]	; (56f0 <Can_43_FLEXCAN_MainFunction_Write+0xcc>)
    565e:	9b02      	ldr	r3, [sp, #8]
    5660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5664:	68da      	ldr	r2, [r3, #12]
    5666:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    566a:	4413      	add	r3, r2
    566c:	781b      	ldrb	r3, [r3, #0]
    566e:	f88d 300d 	strb.w	r3, [sp, #13]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    5672:	4a1f      	ldr	r2, [pc, #124]	; (56f0 <Can_43_FLEXCAN_MainFunction_Write+0xcc>)
    5674:	9b02      	ldr	r3, [sp, #8]
    5676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    567a:	695a      	ldr	r2, [r3, #20]
    567c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5680:	009b      	lsls	r3, r3, #2
    5682:	4413      	add	r3, r2
    5684:	681b      	ldr	r3, [r3, #0]
    5686:	9301      	str	r3, [sp, #4]
                if (NULL_PTR != Can_pController)
    5688:	9b01      	ldr	r3, [sp, #4]
    568a:	2b00      	cmp	r3, #0
    568c:	d022      	beq.n	56d4 <Can_43_FLEXCAN_MainFunction_Write+0xb0>
                {
                    /* Check if the HwObject is config for polling */
                    if ((TRUE == Can_pController->Can_bActivation) && (TRUE == (Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID].Can_bHwObjectUsesPolling))
    568e:	9b01      	ldr	r3, [sp, #4]
    5690:	7a1b      	ldrb	r3, [r3, #8]
    5692:	2b00      	cmp	r3, #0
    5694:	d01e      	beq.n	56d4 <Can_43_FLEXCAN_MainFunction_Write+0xb0>
    5696:	4a16      	ldr	r2, [pc, #88]	; (56f0 <Can_43_FLEXCAN_MainFunction_Write+0xcc>)
    5698:	9b02      	ldr	r3, [sp, #8]
    569a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    569e:	6919      	ldr	r1, [r3, #16]
    56a0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56a4:	4613      	mov	r3, r2
    56a6:	00db      	lsls	r3, r3, #3
    56a8:	4413      	add	r3, r2
    56aa:	009b      	lsls	r3, r3, #2
    56ac:	440b      	add	r3, r1
    56ae:	7b1b      	ldrb	r3, [r3, #12]
    56b0:	2b00      	cmp	r3, #0
    56b2:	d00f      	beq.n	56d4 <Can_43_FLEXCAN_MainFunction_Write+0xb0>
                    {
                        Can_43_FLEXCAN_Ipw_MainFunction_Write(Can_pController, &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]));
    56b4:	4a0e      	ldr	r2, [pc, #56]	; (56f0 <Can_43_FLEXCAN_MainFunction_Write+0xcc>)
    56b6:	9b02      	ldr	r3, [sp, #8]
    56b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    56bc:	6919      	ldr	r1, [r3, #16]
    56be:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    56c2:	4613      	mov	r3, r2
    56c4:	00db      	lsls	r3, r3, #3
    56c6:	4413      	add	r3, r2
    56c8:	009b      	lsls	r3, r3, #2
    56ca:	440b      	add	r3, r1
    56cc:	4619      	mov	r1, r3
    56ce:	9801      	ldr	r0, [sp, #4]
    56d0:	f000 ff1b 	bl	650a <Can_43_FLEXCAN_Ipw_MainFunction_Write>
                    }
                }
                HwObjectID++;
    56d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    56d8:	3301      	adds	r3, #1
    56da:	f8ad 300e 	strh.w	r3, [sp, #14]
            while (HwObjectID < CAN_43_FLEXCAN_HWOBJECT_CONFIG_COUNT)
    56de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    56e2:	2b01      	cmp	r3, #1
    56e4:	d9ba      	bls.n	565c <Can_43_FLEXCAN_MainFunction_Write+0x38>
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    56e6:	bf00      	nop
    56e8:	b005      	add	sp, #20
    56ea:	f85d fb04 	ldr.w	pc, [sp], #4
    56ee:	bf00      	nop
    56f0:	1fff8cf0 	.word	0x1fff8cf0

000056f4 <Can_43_FLEXCAN_MainFunction_Read>:
    *
    * @api
    */
    /* implements     Can_MainFunction_Read_Activity */
    void Can_43_FLEXCAN_MainFunction_Read(void)
    {
    56f4:	b500      	push	{lr}
    56f6:	b085      	sub	sp, #20
    #if (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON)
        Can_HwHandleType HwObjectID = 0U;
    56f8:	2300      	movs	r3, #0
    56fa:	f8ad 300e 	strh.w	r3, [sp, #14]
        uint8 u8ControllerID = 0U;
    56fe:	2300      	movs	r3, #0
    5700:	f88d 300d 	strb.w	r3, [sp, #13]
        uint32 u32CoreId = 0U;
    5704:	2300      	movs	r3, #0
    5706:	9302      	str	r3, [sp, #8]
        const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5708:	2300      	movs	r3, #0
    570a:	9301      	str	r3, [sp, #4]

        u32CoreId = Can_GetCoreID();
    570c:	2300      	movs	r3, #0
    570e:	9302      	str	r3, [sp, #8]
        if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    5710:	4a2a      	ldr	r2, [pc, #168]	; (57bc <Can_43_FLEXCAN_MainFunction_Read+0xc8>)
    5712:	9b02      	ldr	r3, [sp, #8]
    5714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5718:	2b00      	cmp	r3, #0
    571a:	d04a      	beq.n	57b2 <Can_43_FLEXCAN_MainFunction_Read+0xbe>
        {
            while (HwObjectID < (Can_apxConfig[u32CoreId])->Can_uHthFirstIndex)
    571c:	e040      	b.n	57a0 <Can_43_FLEXCAN_MainFunction_Read+0xac>
            {
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    571e:	4a27      	ldr	r2, [pc, #156]	; (57bc <Can_43_FLEXCAN_MainFunction_Read+0xc8>)
    5720:	9b02      	ldr	r3, [sp, #8]
    5722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5726:	68da      	ldr	r2, [r3, #12]
    5728:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    572c:	4413      	add	r3, r2
    572e:	781b      	ldrb	r3, [r3, #0]
    5730:	f88d 300d 	strb.w	r3, [sp, #13]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    5734:	4a21      	ldr	r2, [pc, #132]	; (57bc <Can_43_FLEXCAN_MainFunction_Read+0xc8>)
    5736:	9b02      	ldr	r3, [sp, #8]
    5738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    573c:	695a      	ldr	r2, [r3, #20]
    573e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5742:	009b      	lsls	r3, r3, #2
    5744:	4413      	add	r3, r2
    5746:	681b      	ldr	r3, [r3, #0]
    5748:	9301      	str	r3, [sp, #4]
                if (NULL_PTR != Can_pController)
    574a:	9b01      	ldr	r3, [sp, #4]
    574c:	2b00      	cmp	r3, #0
    574e:	d022      	beq.n	5796 <Can_43_FLEXCAN_MainFunction_Read+0xa2>
                {
                    /* Check if the HwObject is config for polling */
                    if ((TRUE == Can_pController->Can_bActivation) && (TRUE == (Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID].Can_bHwObjectUsesPolling))
    5750:	9b01      	ldr	r3, [sp, #4]
    5752:	7a1b      	ldrb	r3, [r3, #8]
    5754:	2b00      	cmp	r3, #0
    5756:	d01e      	beq.n	5796 <Can_43_FLEXCAN_MainFunction_Read+0xa2>
    5758:	4a18      	ldr	r2, [pc, #96]	; (57bc <Can_43_FLEXCAN_MainFunction_Read+0xc8>)
    575a:	9b02      	ldr	r3, [sp, #8]
    575c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5760:	6919      	ldr	r1, [r3, #16]
    5762:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5766:	4613      	mov	r3, r2
    5768:	00db      	lsls	r3, r3, #3
    576a:	4413      	add	r3, r2
    576c:	009b      	lsls	r3, r3, #2
    576e:	440b      	add	r3, r1
    5770:	7b1b      	ldrb	r3, [r3, #12]
    5772:	2b00      	cmp	r3, #0
    5774:	d00f      	beq.n	5796 <Can_43_FLEXCAN_MainFunction_Read+0xa2>
                    {
                        Can_43_FLEXCAN_Ipw_MainFunction_Read(Can_pController, &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]));
    5776:	4a11      	ldr	r2, [pc, #68]	; (57bc <Can_43_FLEXCAN_MainFunction_Read+0xc8>)
    5778:	9b02      	ldr	r3, [sp, #8]
    577a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    577e:	6919      	ldr	r1, [r3, #16]
    5780:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    5784:	4613      	mov	r3, r2
    5786:	00db      	lsls	r3, r3, #3
    5788:	4413      	add	r3, r2
    578a:	009b      	lsls	r3, r3, #2
    578c:	440b      	add	r3, r1
    578e:	4619      	mov	r1, r3
    5790:	9801      	ldr	r0, [sp, #4]
    5792:	f000 ff0d 	bl	65b0 <Can_43_FLEXCAN_Ipw_MainFunction_Read>
                    }
                }
                HwObjectID++;
    5796:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    579a:	3301      	adds	r3, #1
    579c:	f8ad 300e 	strh.w	r3, [sp, #14]
            while (HwObjectID < (Can_apxConfig[u32CoreId])->Can_uHthFirstIndex)
    57a0:	4a06      	ldr	r2, [pc, #24]	; (57bc <Can_43_FLEXCAN_MainFunction_Read+0xc8>)
    57a2:	9b02      	ldr	r3, [sp, #8]
    57a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    57a8:	889b      	ldrh	r3, [r3, #4]
    57aa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    57ae:	429a      	cmp	r2, r3
    57b0:	d3b5      	bcc.n	571e <Can_43_FLEXCAN_MainFunction_Read+0x2a>
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    57b2:	bf00      	nop
    57b4:	b005      	add	sp, #20
    57b6:	f85d fb04 	ldr.w	pc, [sp], #4
    57ba:	bf00      	nop
    57bc:	1fff8cf0 	.word	0x1fff8cf0

000057c0 <Can_43_FLEXCAN_MainFunction_BusOff>:
*
* @api
*/
/* implements     Can_MainFunction_BusOff_Activity */
void Can_43_FLEXCAN_MainFunction_BusOff(void)
{
    57c0:	b500      	push	{lr}
    57c2:	b085      	sub	sp, #20
#if (CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON)
    uint8 u8ControllerID = 0U;
    57c4:	2300      	movs	r3, #0
    57c6:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    57ca:	2300      	movs	r3, #0
    57cc:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    57ce:	2300      	movs	r3, #0
    57d0:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    57d2:	2300      	movs	r3, #0
    57d4:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    57d6:	4a16      	ldr	r2, [pc, #88]	; (5830 <Can_43_FLEXCAN_MainFunction_BusOff+0x70>)
    57d8:	9b02      	ldr	r3, [sp, #8]
    57da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    57de:	2b00      	cmp	r3, #0
    57e0:	d022      	beq.n	5828 <Can_43_FLEXCAN_MainFunction_BusOff+0x68>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    57e2:	e01d      	b.n	5820 <Can_43_FLEXCAN_MainFunction_BusOff+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    57e4:	4a12      	ldr	r2, [pc, #72]	; (5830 <Can_43_FLEXCAN_MainFunction_BusOff+0x70>)
    57e6:	9b02      	ldr	r3, [sp, #8]
    57e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    57ec:	695a      	ldr	r2, [r3, #20]
    57ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    57f2:	009b      	lsls	r3, r3, #2
    57f4:	4413      	add	r3, r2
    57f6:	681b      	ldr	r3, [r3, #0]
    57f8:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    57fa:	9b01      	ldr	r3, [sp, #4]
    57fc:	2b00      	cmp	r3, #0
    57fe:	d00a      	beq.n	5816 <Can_43_FLEXCAN_MainFunction_BusOff+0x56>
            {
                if ((TRUE == Can_pController->Can_bActivation) && (TRUE == (Can_pController->Can_bBusOffUsesPolling)))
    5800:	9b01      	ldr	r3, [sp, #4]
    5802:	7a1b      	ldrb	r3, [r3, #8]
    5804:	2b00      	cmp	r3, #0
    5806:	d006      	beq.n	5816 <Can_43_FLEXCAN_MainFunction_BusOff+0x56>
    5808:	9b01      	ldr	r3, [sp, #4]
    580a:	7a5b      	ldrb	r3, [r3, #9]
    580c:	2b00      	cmp	r3, #0
    580e:	d002      	beq.n	5816 <Can_43_FLEXCAN_MainFunction_BusOff+0x56>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_BusOff(Can_pController);
    5810:	9801      	ldr	r0, [sp, #4]
    5812:	f000 ff1c 	bl	664e <Can_43_FLEXCAN_Ipw_MainFunction_BusOff>
                }
            }
            u8ControllerID++;
    5816:	f89d 300f 	ldrb.w	r3, [sp, #15]
    581a:	3301      	adds	r3, #1
    581c:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    5820:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5824:	2b00      	cmp	r3, #0
    5826:	d0dd      	beq.n	57e4 <Can_43_FLEXCAN_MainFunction_BusOff+0x24>
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    5828:	bf00      	nop
    582a:	b005      	add	sp, #20
    582c:	f85d fb04 	ldr.w	pc, [sp], #4
    5830:	1fff8cf0 	.word	0x1fff8cf0

00005834 <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    5834:	b500      	push	{lr}
    5836:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    5838:	2300      	movs	r3, #0
    583a:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    583e:	2300      	movs	r3, #0
    5840:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    5842:	2300      	movs	r3, #0
    5844:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    5846:	2300      	movs	r3, #0
    5848:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    584a:	4a17      	ldr	r2, [pc, #92]	; (58a8 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    584c:	9b02      	ldr	r3, [sp, #8]
    584e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5852:	2b00      	cmp	r3, #0
    5854:	d024      	beq.n	58a0 <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    5856:	e01f      	b.n	5898 <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    5858:	4a13      	ldr	r2, [pc, #76]	; (58a8 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    585a:	9b02      	ldr	r3, [sp, #8]
    585c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5860:	695a      	ldr	r2, [r3, #20]
    5862:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5866:	009b      	lsls	r3, r3, #2
    5868:	4413      	add	r3, r2
    586a:	681b      	ldr	r3, [r3, #0]
    586c:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    586e:	9b01      	ldr	r3, [sp, #4]
    5870:	2b00      	cmp	r3, #0
    5872:	d00c      	beq.n	588e <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    5874:	9b01      	ldr	r3, [sp, #4]
    5876:	7a1b      	ldrb	r3, [r3, #8]
    5878:	2b00      	cmp	r3, #0
    587a:	d008      	beq.n	588e <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    587c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5880:	009b      	lsls	r3, r3, #2
    5882:	4a0a      	ldr	r2, [pc, #40]	; (58ac <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    5884:	4413      	add	r3, r2
    5886:	4619      	mov	r1, r3
    5888:	9801      	ldr	r0, [sp, #4]
    588a:	f000 feec 	bl	6666 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    588e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5892:	3301      	adds	r3, #1
    5894:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    5898:	f89d 300f 	ldrb.w	r3, [sp, #15]
    589c:	2b00      	cmp	r3, #0
    589e:	d0db      	beq.n	5858 <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    58a0:	bf00      	nop
    58a2:	b005      	add	sp, #20
    58a4:	f85d fb04 	ldr.w	pc, [sp], #4
    58a8:	1fff8cf0 	.word	0x1fff8cf0
    58ac:	1fff8cec 	.word	0x1fff8cec

000058b0 <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    58b0:	b500      	push	{lr}
    58b2:	b087      	sub	sp, #28
    58b4:	4603      	mov	r3, r0
    58b6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    58ba:	2300      	movs	r3, #0
    58bc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    58c0:	2300      	movs	r3, #0
    58c2:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    58c4:	2300      	movs	r3, #0
    58c6:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    58c8:	2300      	movs	r3, #0
    58ca:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    58cc:	4a19      	ldr	r2, [pc, #100]	; (5934 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    58ce:	9b04      	ldr	r3, [sp, #16]
    58d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58d4:	2b00      	cmp	r3, #0
    58d6:	d029      	beq.n	592c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    58d8:	4a16      	ldr	r2, [pc, #88]	; (5934 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    58da:	9b04      	ldr	r3, [sp, #16]
    58dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58e0:	689a      	ldr	r2, [r3, #8]
    58e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    58e6:	4413      	add	r3, r2
    58e8:	781b      	ldrb	r3, [r3, #0]
    58ea:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    58ee:	4a11      	ldr	r2, [pc, #68]	; (5934 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    58f0:	9b04      	ldr	r3, [sp, #16]
    58f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    58f6:	695a      	ldr	r2, [r3, #20]
    58f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    58fc:	009b      	lsls	r3, r3, #2
    58fe:	4413      	add	r3, r2
    5900:	681b      	ldr	r3, [r3, #0]
    5902:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    5904:	9b03      	ldr	r3, [sp, #12]
    5906:	2b00      	cmp	r3, #0
    5908:	d010      	beq.n	592c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    590a:	9803      	ldr	r0, [sp, #12]
    590c:	f000 fc16 	bl	613c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    5910:	4603      	mov	r3, r0
    5912:	2b00      	cmp	r3, #0
    5914:	d10a      	bne.n	592c <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    5916:	f89d 3017 	ldrb.w	r3, [sp, #23]
    591a:	4a07      	ldr	r2, [pc, #28]	; (5938 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    591c:	2102      	movs	r1, #2
    591e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    5922:	9b03      	ldr	r3, [sp, #12]
    5924:	781b      	ldrb	r3, [r3, #0]
    5926:	4618      	mov	r0, r3
    5928:	f7fa ffe8 	bl	8fc <CanIf_ControllerBusOff>
            }
        }
    }
}
    592c:	bf00      	nop
    592e:	b007      	add	sp, #28
    5930:	f85d fb04 	ldr.w	pc, [sp], #4
    5934:	1fff8cf0 	.word	0x1fff8cf0
    5938:	1fff8cec 	.word	0x1fff8cec

0000593c <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    593c:	b500      	push	{lr}
    593e:	b085      	sub	sp, #20
    5940:	9003      	str	r0, [sp, #12]
    5942:	9102      	str	r1, [sp, #8]
    5944:	9201      	str	r2, [sp, #4]
    5946:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    5948:	9b01      	ldr	r3, [sp, #4]
    594a:	685a      	ldr	r2, [r3, #4]
    594c:	9b03      	ldr	r3, [sp, #12]
    594e:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    5950:	9b01      	ldr	r3, [sp, #4]
    5952:	681b      	ldr	r3, [r3, #0]
    5954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    5958:	2b00      	cmp	r3, #0
    595a:	d005      	beq.n	5968 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    595c:	9b03      	ldr	r3, [sp, #12]
    595e:	681b      	ldr	r3, [r3, #0]
    5960:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    5964:	9b03      	ldr	r3, [sp, #12]
    5966:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    5968:	9b06      	ldr	r3, [sp, #24]
    596a:	699b      	ldr	r3, [r3, #24]
    596c:	2b00      	cmp	r3, #0
    596e:	d10c      	bne.n	598a <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    5970:	9b01      	ldr	r3, [sp, #4]
    5972:	681b      	ldr	r3, [r3, #0]
    5974:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    5978:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    597c:	d105      	bne.n	598a <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    597e:	2301      	movs	r3, #1
    5980:	2208      	movs	r2, #8
    5982:	2100      	movs	r1, #0
    5984:	2050      	movs	r0, #80	; 0x50
    5986:	f006 f819 	bl	b9bc <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    598a:	9b06      	ldr	r3, [sp, #24]
    598c:	699b      	ldr	r3, [r3, #24]
    598e:	2b01      	cmp	r3, #1
    5990:	d009      	beq.n	59a6 <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    5992:	9b01      	ldr	r3, [sp, #4]
    5994:	681b      	ldr	r3, [r3, #0]
    5996:	2b00      	cmp	r3, #0
    5998:	da05      	bge.n	59a6 <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    599a:	9b03      	ldr	r3, [sp, #12]
    599c:	681b      	ldr	r3, [r3, #0]
    599e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    59a2:	9b03      	ldr	r3, [sp, #12]
    59a4:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    59a6:	9b06      	ldr	r3, [sp, #24]
    59a8:	7c1a      	ldrb	r2, [r3, #16]
    59aa:	9b01      	ldr	r3, [sp, #4]
    59ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    59b0:	429a      	cmp	r2, r3
    59b2:	d805      	bhi.n	59c0 <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    59b4:	9b06      	ldr	r3, [sp, #24]
    59b6:	7c1b      	ldrb	r3, [r3, #16]
    59b8:	461a      	mov	r2, r3
    59ba:	9b02      	ldr	r3, [sp, #8]
    59bc:	609a      	str	r2, [r3, #8]
    59be:	e005      	b.n	59cc <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    59c0:	9b01      	ldr	r3, [sp, #4]
    59c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    59c6:	461a      	mov	r2, r3
    59c8:	9b02      	ldr	r3, [sp, #8]
    59ca:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    59cc:	9b06      	ldr	r3, [sp, #24]
    59ce:	881a      	ldrh	r2, [r3, #0]
    59d0:	9b03      	ldr	r3, [sp, #12]
    59d2:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    59d4:	9b00      	ldr	r3, [sp, #0]
    59d6:	781a      	ldrb	r2, [r3, #0]
    59d8:	9b03      	ldr	r3, [sp, #12]
    59da:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    59dc:	9b01      	ldr	r3, [sp, #4]
    59de:	f103 0208 	add.w	r2, r3, #8
    59e2:	9b02      	ldr	r3, [sp, #8]
    59e4:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    59e6:	9902      	ldr	r1, [sp, #8]
    59e8:	9803      	ldr	r0, [sp, #12]
    59ea:	f7fa ffa3 	bl	934 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    59ee:	bf00      	nop
    59f0:	b005      	add	sp, #20
    59f2:	f85d fb04 	ldr.w	pc, [sp], #4

000059f6 <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    59f6:	b500      	push	{lr}
    59f8:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    59fc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5a00:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    5a04:	6018      	str	r0, [r3, #0]
    5a06:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5a0a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5a0e:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    5a10:	2300      	movs	r3, #0
    5a12:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    5a16:	2300      	movs	r3, #0
    5a18:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    5a1c:	2300      	movs	r3, #0
    5a1e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    5a22:	2300      	movs	r3, #0
    5a24:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    5a28:	2300      	movs	r3, #0
    5a2a:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    5a2e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5a32:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5a36:	681b      	ldr	r3, [r3, #0]
    5a38:	7c9b      	ldrb	r3, [r3, #18]
    5a3a:	089b      	lsrs	r3, r3, #2
    5a3c:	b2db      	uxtb	r3, r3
    5a3e:	3306      	adds	r3, #6
    5a40:	2b20      	cmp	r3, #32
    5a42:	d80b      	bhi.n	5a5c <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    5a44:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5a48:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5a4c:	681b      	ldr	r3, [r3, #0]
    5a4e:	7c9b      	ldrb	r3, [r3, #18]
    5a50:	089b      	lsrs	r3, r3, #2
    5a52:	b2db      	uxtb	r3, r3
    5a54:	3306      	adds	r3, #6
    5a56:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    5a5a:	e002      	b.n	5a62 <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    5a5c:	2320      	movs	r3, #32
    5a5e:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    5a62:	2300      	movs	r3, #0
    5a64:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    5a68:	e169      	b.n	5d3e <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    5a6a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5a6e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    5a72:	681b      	ldr	r3, [r3, #0]
    5a74:	691b      	ldr	r3, [r3, #16]
    5a76:	2b00      	cmp	r3, #0
    5a78:	d13a      	bne.n	5af0 <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    5a7a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5a7e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5a82:	681b      	ldr	r3, [r3, #0]
    5a84:	7c9b      	ldrb	r3, [r3, #18]
    5a86:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    5a8a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    5a8e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    5a92:	2300      	movs	r3, #0
    5a94:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    5a98:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5a9c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5aa0:	681b      	ldr	r3, [r3, #0]
    5aa2:	689b      	ldr	r3, [r3, #8]
    5aa4:	2b00      	cmp	r3, #0
    5aa6:	d011      	beq.n	5acc <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    5aa8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5aac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5ab0:	681b      	ldr	r3, [r3, #0]
    5ab2:	695a      	ldr	r2, [r3, #20]
    5ab4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5ab8:	00db      	lsls	r3, r3, #3
    5aba:	4413      	add	r3, r2
    5abc:	685b      	ldr	r3, [r3, #4]
    5abe:	005b      	lsls	r3, r3, #1
    5ac0:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5ac4:	4313      	orrs	r3, r2
    5ac6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    5aca:	e126      	b.n	5d1a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    5acc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5ad0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5ad4:	681b      	ldr	r3, [r3, #0]
    5ad6:	695a      	ldr	r2, [r3, #20]
    5ad8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5adc:	00db      	lsls	r3, r3, #3
    5ade:	4413      	add	r3, r2
    5ae0:	685b      	ldr	r3, [r3, #4]
    5ae2:	04db      	lsls	r3, r3, #19
    5ae4:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5ae8:	4313      	orrs	r3, r2
    5aea:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    5aee:	e114      	b.n	5d1a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    5af0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5af4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    5af8:	681b      	ldr	r3, [r3, #0]
    5afa:	691b      	ldr	r3, [r3, #16]
    5afc:	2b01      	cmp	r3, #1
    5afe:	d160      	bne.n	5bc2 <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    5b00:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5b04:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5b08:	681b      	ldr	r3, [r3, #0]
    5b0a:	7c9b      	ldrb	r3, [r3, #18]
    5b0c:	005b      	lsls	r3, r3, #1
    5b0e:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    5b12:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    5b16:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    5b1a:	2301      	movs	r3, #1
    5b1c:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    5b20:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5b24:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5b28:	681b      	ldr	r3, [r3, #0]
    5b2a:	689b      	ldr	r3, [r3, #8]
    5b2c:	2b00      	cmp	r3, #0
    5b2e:	d024      	beq.n	5b7a <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    5b30:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5b34:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5b38:	681b      	ldr	r3, [r3, #0]
    5b3a:	695a      	ldr	r2, [r3, #20]
    5b3c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5b40:	011b      	lsls	r3, r3, #4
    5b42:	4413      	add	r3, r2
    5b44:	685b      	ldr	r3, [r3, #4]
    5b46:	0bdb      	lsrs	r3, r3, #15
    5b48:	041b      	lsls	r3, r3, #16
    5b4a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5b4e:	4313      	orrs	r3, r2
    5b50:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    5b54:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5b58:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5b5c:	681b      	ldr	r3, [r3, #0]
    5b5e:	695a      	ldr	r2, [r3, #20]
    5b60:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5b64:	011b      	lsls	r3, r3, #4
    5b66:	3308      	adds	r3, #8
    5b68:	4413      	add	r3, r2
    5b6a:	685b      	ldr	r3, [r3, #4]
    5b6c:	0bdb      	lsrs	r3, r3, #15
    5b6e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5b72:	4313      	orrs	r3, r2
    5b74:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    5b78:	e0cf      	b.n	5d1a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    5b7a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5b7e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5b82:	681b      	ldr	r3, [r3, #0]
    5b84:	695a      	ldr	r2, [r3, #20]
    5b86:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5b8a:	011b      	lsls	r3, r3, #4
    5b8c:	4413      	add	r3, r2
    5b8e:	685b      	ldr	r3, [r3, #4]
    5b90:	04db      	lsls	r3, r3, #19
    5b92:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5b96:	4313      	orrs	r3, r2
    5b98:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    5b9c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5ba0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5ba4:	681b      	ldr	r3, [r3, #0]
    5ba6:	695a      	ldr	r2, [r3, #20]
    5ba8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5bac:	011b      	lsls	r3, r3, #4
    5bae:	3308      	adds	r3, #8
    5bb0:	4413      	add	r3, r2
    5bb2:	685b      	ldr	r3, [r3, #4]
    5bb4:	00db      	lsls	r3, r3, #3
    5bb6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5bba:	4313      	orrs	r3, r2
    5bbc:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    5bc0:	e0ab      	b.n	5d1a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    5bc2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5bc6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5bca:	681b      	ldr	r3, [r3, #0]
    5bcc:	7c9b      	ldrb	r3, [r3, #18]
    5bce:	009b      	lsls	r3, r3, #2
    5bd0:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    5bd4:	2300      	movs	r3, #0
    5bd6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    5bda:	2302      	movs	r3, #2
    5bdc:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    5be0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5be4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5be8:	681b      	ldr	r3, [r3, #0]
    5bea:	689b      	ldr	r3, [r3, #8]
    5bec:	2b00      	cmp	r3, #0
    5bee:	d04a      	beq.n	5c86 <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    5bf0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5bf4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5bf8:	681b      	ldr	r3, [r3, #0]
    5bfa:	695a      	ldr	r2, [r3, #20]
    5bfc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5c00:	015b      	lsls	r3, r3, #5
    5c02:	4413      	add	r3, r2
    5c04:	685b      	ldr	r3, [r3, #4]
    5c06:	0d5b      	lsrs	r3, r3, #21
    5c08:	061b      	lsls	r3, r3, #24
    5c0a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5c0e:	4313      	orrs	r3, r2
    5c10:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    5c14:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5c18:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5c1c:	681b      	ldr	r3, [r3, #0]
    5c1e:	695a      	ldr	r2, [r3, #20]
    5c20:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5c24:	015b      	lsls	r3, r3, #5
    5c26:	3308      	adds	r3, #8
    5c28:	4413      	add	r3, r2
    5c2a:	685b      	ldr	r3, [r3, #4]
    5c2c:	0d5b      	lsrs	r3, r3, #21
    5c2e:	041b      	lsls	r3, r3, #16
    5c30:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5c34:	4313      	orrs	r3, r2
    5c36:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    5c3a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5c3e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5c42:	681b      	ldr	r3, [r3, #0]
    5c44:	695a      	ldr	r2, [r3, #20]
    5c46:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5c4a:	015b      	lsls	r3, r3, #5
    5c4c:	3310      	adds	r3, #16
    5c4e:	4413      	add	r3, r2
    5c50:	685b      	ldr	r3, [r3, #4]
    5c52:	0d5b      	lsrs	r3, r3, #21
    5c54:	021b      	lsls	r3, r3, #8
    5c56:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5c5a:	4313      	orrs	r3, r2
    5c5c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    5c60:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5c64:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5c68:	681b      	ldr	r3, [r3, #0]
    5c6a:	695a      	ldr	r2, [r3, #20]
    5c6c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5c70:	015b      	lsls	r3, r3, #5
    5c72:	3318      	adds	r3, #24
    5c74:	4413      	add	r3, r2
    5c76:	685b      	ldr	r3, [r3, #4]
    5c78:	0d5b      	lsrs	r3, r3, #21
    5c7a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5c7e:	4313      	orrs	r3, r2
    5c80:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    5c84:	e049      	b.n	5d1a <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    5c86:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5c8a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5c8e:	681b      	ldr	r3, [r3, #0]
    5c90:	695a      	ldr	r2, [r3, #20]
    5c92:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5c96:	015b      	lsls	r3, r3, #5
    5c98:	4413      	add	r3, r2
    5c9a:	685b      	ldr	r3, [r3, #4]
    5c9c:	08db      	lsrs	r3, r3, #3
    5c9e:	061b      	lsls	r3, r3, #24
    5ca0:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5ca4:	4313      	orrs	r3, r2
    5ca6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    5caa:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5cae:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5cb2:	681b      	ldr	r3, [r3, #0]
    5cb4:	695a      	ldr	r2, [r3, #20]
    5cb6:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5cba:	015b      	lsls	r3, r3, #5
    5cbc:	3308      	adds	r3, #8
    5cbe:	4413      	add	r3, r2
    5cc0:	685b      	ldr	r3, [r3, #4]
    5cc2:	08db      	lsrs	r3, r3, #3
    5cc4:	041b      	lsls	r3, r3, #16
    5cc6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5cca:	4313      	orrs	r3, r2
    5ccc:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    5cd0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5cd4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5cd8:	681b      	ldr	r3, [r3, #0]
    5cda:	695a      	ldr	r2, [r3, #20]
    5cdc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5ce0:	015b      	lsls	r3, r3, #5
    5ce2:	3310      	adds	r3, #16
    5ce4:	4413      	add	r3, r2
    5ce6:	685b      	ldr	r3, [r3, #4]
    5ce8:	08db      	lsrs	r3, r3, #3
    5cea:	021b      	lsls	r3, r3, #8
    5cec:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5cf0:	4313      	orrs	r3, r2
    5cf2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    5cf6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5cfa:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5cfe:	681b      	ldr	r3, [r3, #0]
    5d00:	695a      	ldr	r2, [r3, #20]
    5d02:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5d06:	015b      	lsls	r3, r3, #5
    5d08:	3318      	adds	r3, #24
    5d0a:	4413      	add	r3, r2
    5d0c:	685b      	ldr	r3, [r3, #4]
    5d0e:	08db      	lsrs	r3, r3, #3
    5d10:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5d14:	4313      	orrs	r3, r2
    5d16:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    5d1a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5d1e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    5d22:	681b      	ldr	r3, [r3, #0]
    5d24:	789b      	ldrb	r3, [r3, #2]
    5d26:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    5d2a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    5d2e:	4618      	mov	r0, r3
    5d30:	f002 fb4e 	bl	83d0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    5d34:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5d38:	3301      	adds	r3, #1
    5d3a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    5d3e:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    5d42:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    5d46:	429a      	cmp	r2, r3
    5d48:	d20a      	bcs.n	5d60 <Can_Ipw_InitLegacyFifoFilter+0x36a>
    5d4a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5d4e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5d52:	681b      	ldr	r3, [r3, #0]
    5d54:	7c9b      	ldrb	r3, [r3, #18]
    5d56:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    5d5a:	429a      	cmp	r2, r3
    5d5c:	f4ff ae85 	bcc.w	5a6a <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    5d60:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5d64:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    5d68:	681b      	ldr	r3, [r3, #0]
    5d6a:	789a      	ldrb	r2, [r3, #2]
    5d6c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5d70:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    5d74:	681b      	ldr	r3, [r3, #0]
    5d76:	68db      	ldr	r3, [r3, #12]
    5d78:	4619      	mov	r1, r3
    5d7a:	4610      	mov	r0, r2
    5d7c:	f002 fb76 	bl	846c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    5d80:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    5d84:	2b00      	cmp	r3, #0
    5d86:	d054      	beq.n	5e32 <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    5d88:	2300      	movs	r3, #0
    5d8a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    5d8e:	e03e      	b.n	5e0e <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    5d90:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5d94:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5d98:	681b      	ldr	r3, [r3, #0]
    5d9a:	695a      	ldr	r2, [r3, #20]
    5d9c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5da0:	00db      	lsls	r3, r3, #3
    5da2:	441a      	add	r2, r3
    5da4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5da8:	6812      	ldr	r2, [r2, #0]
    5daa:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    5dae:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    5db2:	00db      	lsls	r3, r3, #3
    5db4:	440b      	add	r3, r1
    5db6:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    5db8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5dbc:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    5dc0:	681b      	ldr	r3, [r3, #0]
    5dc2:	689b      	ldr	r3, [r3, #8]
    5dc4:	2b00      	cmp	r3, #0
    5dc6:	d00a      	beq.n	5dde <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    5dc8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5dcc:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    5dd0:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    5dd4:	00db      	lsls	r3, r3, #3
    5dd6:	4413      	add	r3, r2
    5dd8:	2201      	movs	r2, #1
    5dda:	705a      	strb	r2, [r3, #1]
    5ddc:	e009      	b.n	5df2 <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    5dde:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5de2:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    5de6:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    5dea:	00db      	lsls	r3, r3, #3
    5dec:	4413      	add	r3, r2
    5dee:	2200      	movs	r2, #0
    5df0:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    5df2:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    5df6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5dfa:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    5dfe:	2100      	movs	r1, #0
    5e00:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    5e04:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    5e08:	3301      	adds	r3, #1
    5e0a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    5e0e:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    5e12:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    5e16:	429a      	cmp	r2, r3
    5e18:	d3ba      	bcc.n	5d90 <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    5e1a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    5e1e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    5e22:	681b      	ldr	r3, [r3, #0]
    5e24:	789b      	ldrb	r3, [r3, #2]
    5e26:	aa02      	add	r2, sp, #8
    5e28:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    5e2c:	4618      	mov	r0, r3
    5e2e:	f001 feb2 	bl	7b96 <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    5e32:	bf00      	nop
    5e34:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    5e38:	f85d fb04 	ldr.w	pc, [sp], #4

00005e3c <Can_Ipw_ProcessLegacyFifoPolling>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    5e3c:	b500      	push	{lr}
    5e3e:	b089      	sub	sp, #36	; 0x24
    5e40:	9005      	str	r0, [sp, #20]
    5e42:	9104      	str	r1, [sp, #16]
    5e44:	9203      	str	r2, [sp, #12]
    5e46:	9302      	str	r3, [sp, #8]
    uint8 u8ObjIdx = 0U;
    5e48:	2300      	movs	r3, #0
    5e4a:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean returnResult;

    returnResult = FlexCAN_Ip_GetBuffStatusFlag(Can_pControllerConfig->Can_u8ControllerOffset, 5U);
    5e4e:	9b02      	ldr	r3, [sp, #8]
    5e50:	789b      	ldrb	r3, [r3, #2]
    5e52:	2105      	movs	r1, #5
    5e54:	4618      	mov	r0, r3
    5e56:	f002 ff27 	bl	8ca8 <FlexCAN_Ip_GetBuffStatusFlag>
    5e5a:	4603      	mov	r3, r0
    5e5c:	f88d 301e 	strb.w	r3, [sp, #30]
    while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (TRUE == returnResult))
    5e60:	e060      	b.n	5f24 <Can_Ipw_ProcessLegacyFifoPolling+0xe8>
    {
        u8ObjIdx++;
    5e62:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e66:	3301      	adds	r3, #1
    5e68:	f88d 301f 	strb.w	r3, [sp, #31]
        /* Check Legacy OverFlow */
        if (TRUE == FlexCAN_Ip_GetBuffStatusFlag(Can_pControllerConfig->Can_u8ControllerOffset, 7U))
    5e6c:	9b02      	ldr	r3, [sp, #8]
    5e6e:	789b      	ldrb	r3, [r3, #2]
    5e70:	2107      	movs	r1, #7
    5e72:	4618      	mov	r0, r3
    5e74:	f002 ff18 	bl	8ca8 <FlexCAN_Ip_GetBuffStatusFlag>
    5e78:	4603      	mov	r3, r0
    5e7a:	2b00      	cmp	r3, #0
    5e7c:	d012      	beq.n	5ea4 <Can_Ipw_ProcessLegacyFifoPolling+0x68>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    5e7e:	2301      	movs	r3, #1
    5e80:	2208      	movs	r2, #8
    5e82:	2100      	movs	r1, #0
    5e84:	2050      	movs	r0, #80	; 0x50
    5e86:	f005 fd99 	bl	b9bc <Det_ReportRuntimeError>
            if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    5e8a:	9b02      	ldr	r3, [sp, #8]
    5e8c:	699b      	ldr	r3, [r3, #24]
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d002      	beq.n	5e98 <Can_Ipw_ProcessLegacyFifoPolling+0x5c>
            {
                Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    5e92:	9b02      	ldr	r3, [sp, #8]
    5e94:	699b      	ldr	r3, [r3, #24]
    5e96:	4798      	blx	r3
            }
            FlexCAN_Ip_ClearBuffStatusFlag(Can_pControllerConfig->Can_u8ControllerOffset, 7U);
    5e98:	9b02      	ldr	r3, [sp, #8]
    5e9a:	789b      	ldrb	r3, [r3, #2]
    5e9c:	2107      	movs	r1, #7
    5e9e:	4618      	mov	r0, r3
    5ea0:	f002 ff26 	bl	8cf0 <FlexCAN_Ip_ClearBuffStatusFlag>
        }

        /* Check Legacy FifoWarning */
        if (TRUE == FlexCAN_Ip_GetBuffStatusFlag(Can_pControllerConfig->Can_u8ControllerOffset, 6U))
    5ea4:	9b02      	ldr	r3, [sp, #8]
    5ea6:	789b      	ldrb	r3, [r3, #2]
    5ea8:	2106      	movs	r1, #6
    5eaa:	4618      	mov	r0, r3
    5eac:	f002 fefc 	bl	8ca8 <FlexCAN_Ip_GetBuffStatusFlag>
    5eb0:	4603      	mov	r3, r0
    5eb2:	2b00      	cmp	r3, #0
    5eb4:	d00c      	beq.n	5ed0 <Can_Ipw_ProcessLegacyFifoPolling+0x94>
        {
            if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    5eb6:	9b02      	ldr	r3, [sp, #8]
    5eb8:	695b      	ldr	r3, [r3, #20]
    5eba:	2b00      	cmp	r3, #0
    5ebc:	d002      	beq.n	5ec4 <Can_Ipw_ProcessLegacyFifoPolling+0x88>
            {
                Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    5ebe:	9b02      	ldr	r3, [sp, #8]
    5ec0:	695b      	ldr	r3, [r3, #20]
    5ec2:	4798      	blx	r3
            }
            FlexCAN_Ip_ClearBuffStatusFlag(Can_pControllerConfig->Can_u8ControllerOffset, 6U);
    5ec4:	9b02      	ldr	r3, [sp, #8]
    5ec6:	789b      	ldrb	r3, [r3, #2]
    5ec8:	2106      	movs	r1, #6
    5eca:	4618      	mov	r0, r3
    5ecc:	f002 ff10 	bl	8cf0 <FlexCAN_Ip_ClearBuffStatusFlag>
        }

        (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, pReceivedDataBuffer);
    5ed0:	9b02      	ldr	r3, [sp, #8]
    5ed2:	789b      	ldrb	r3, [r3, #2]
    5ed4:	9903      	ldr	r1, [sp, #12]
    5ed6:	4618      	mov	r0, r3
    5ed8:	f001 fe2a 	bl	7b30 <FlexCAN_Ip_RxFifo>
        FlexCAN_Ip_MainFunctionRead(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex);
    5edc:	9b02      	ldr	r3, [sp, #8]
    5ede:	789a      	ldrb	r2, [r3, #2]
    5ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5ee2:	7f1b      	ldrb	r3, [r3, #28]
    5ee4:	4619      	mov	r1, r3
    5ee6:	4610      	mov	r0, r2
    5ee8:	f002 fb30 	bl	854c <FlexCAN_Ip_MainFunctionRead>

        if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex))
    5eec:	9b02      	ldr	r3, [sp, #8]
    5eee:	789a      	ldrb	r2, [r3, #2]
    5ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5ef2:	7f1b      	ldrb	r3, [r3, #28]
    5ef4:	4619      	mov	r1, r3
    5ef6:	4610      	mov	r0, r2
    5ef8:	f001 fef8 	bl	7cec <FlexCAN_Ip_GetTransferStatus>
    5efc:	4603      	mov	r3, r0
    5efe:	2b00      	cmp	r3, #0
    5f00:	d107      	bne.n	5f12 <Can_Ipw_ProcessLegacyFifoPolling+0xd6>
        {
            Can_Ipw_ParseData(CanIf_Mailbox, \
    5f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5f04:	9300      	str	r3, [sp, #0]
    5f06:	9b02      	ldr	r3, [sp, #8]
    5f08:	9a03      	ldr	r2, [sp, #12]
    5f0a:	9904      	ldr	r1, [sp, #16]
    5f0c:	9805      	ldr	r0, [sp, #20]
    5f0e:	f7ff fd15 	bl	593c <Can_Ipw_ParseData>
                              pReceivedDataBuffer, \
                              Can_pControllerConfig, \
                              Can_pHwObjectConfig \
                             );
        }
        returnResult = FlexCAN_Ip_GetBuffStatusFlag(Can_pControllerConfig->Can_u8ControllerOffset, 5U);
    5f12:	9b02      	ldr	r3, [sp, #8]
    5f14:	789b      	ldrb	r3, [r3, #2]
    5f16:	2105      	movs	r1, #5
    5f18:	4618      	mov	r0, r3
    5f1a:	f002 fec5 	bl	8ca8 <FlexCAN_Ip_GetBuffStatusFlag>
    5f1e:	4603      	mov	r3, r0
    5f20:	f88d 301e 	strb.w	r3, [sp, #30]
    while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (TRUE == returnResult))
    5f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5f26:	7b9b      	ldrb	r3, [r3, #14]
    5f28:	f89d 201f 	ldrb.w	r2, [sp, #31]
    5f2c:	429a      	cmp	r2, r3
    5f2e:	d203      	bcs.n	5f38 <Can_Ipw_ProcessLegacyFifoPolling+0xfc>
    5f30:	f89d 301e 	ldrb.w	r3, [sp, #30]
    5f34:	2b00      	cmp	r3, #0
    5f36:	d194      	bne.n	5e62 <Can_Ipw_ProcessLegacyFifoPolling+0x26>
    }
}
    5f38:	bf00      	nop
    5f3a:	b009      	add	sp, #36	; 0x24
    5f3c:	f85d fb04 	ldr.w	pc, [sp], #4

00005f40 <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    5f40:	b510      	push	{r4, lr}
    5f42:	b084      	sub	sp, #16
    5f44:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
#else
    uint16 BaudRateConfigID = ControllerConfig->Can_u16DefaultBaudrateID;
    5f46:	9b01      	ldr	r3, [sp, #4]
    5f48:	8b9b      	ldrh	r3, [r3, #28]
    5f4a:	f8ad 300e 	strh.w	r3, [sp, #14]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    5f4e:	9b01      	ldr	r3, [sp, #4]
    5f50:	6a1a      	ldr	r2, [r3, #32]
    5f52:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5f56:	2116      	movs	r1, #22
    5f58:	fb01 f303 	mul.w	r3, r1, r3
    5f5c:	4413      	add	r3, r2
    5f5e:	785b      	ldrb	r3, [r3, #1]
    5f60:	2b00      	cmp	r3, #0
    5f62:	d016      	beq.n	5f92 <Can_Ipw_InitBaudrate+0x52>
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    5f64:	9b01      	ldr	r3, [sp, #4]
    5f66:	7898      	ldrb	r0, [r3, #2]
    5f68:	9b01      	ldr	r3, [sp, #4]
    5f6a:	6a1a      	ldr	r2, [r3, #32]
    5f6c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5f70:	2116      	movs	r1, #22
    5f72:	fb01 f303 	mul.w	r3, r1, r3
    5f76:	4413      	add	r3, r2
    5f78:	7cd9      	ldrb	r1, [r3, #19]
    5f7a:	9b01      	ldr	r3, [sp, #4]
    5f7c:	6a1a      	ldr	r2, [r3, #32]
    5f7e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5f82:	2416      	movs	r4, #22
    5f84:	fb04 f303 	mul.w	r3, r4, r3
    5f88:	4413      	add	r3, r2
    5f8a:	7d1b      	ldrb	r3, [r3, #20]
    5f8c:	461a      	mov	r2, r3
    5f8e:	f002 fde7 	bl	8b60 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    5f92:	9b01      	ldr	r3, [sp, #4]
    5f94:	7898      	ldrb	r0, [r3, #2]
    5f96:	9b01      	ldr	r3, [sp, #4]
    5f98:	6a1a      	ldr	r2, [r3, #32]
    5f9a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5f9e:	2116      	movs	r1, #22
    5fa0:	fb01 f303 	mul.w	r3, r1, r3
    5fa4:	4413      	add	r3, r2
    5fa6:	7c9b      	ldrb	r3, [r3, #18]
    5fa8:	4619      	mov	r1, r3
    5faa:	f002 fe2d 	bl	8c08 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    5fae:	bf00      	nop
    5fb0:	b004      	add	sp, #16
    5fb2:	bd10      	pop	{r4, pc}

00005fb4 <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    5fb4:	b510      	push	{r4, lr}
    5fb6:	b084      	sub	sp, #16
    5fb8:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    5fba:	2301      	movs	r3, #1
    5fbc:	f88d 300f 	strb.w	r3, [sp, #15]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    5fc0:	9b01      	ldr	r3, [sp, #4]
    5fc2:	7898      	ldrb	r0, [r3, #2]
    5fc4:	492e      	ldr	r1, [pc, #184]	; (6080 <Can_43_FLEXCAN_Ipw_Init+0xcc>)
    5fc6:	9b01      	ldr	r3, [sp, #4]
    5fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5fca:	681b      	ldr	r3, [r3, #0]
    5fcc:	461a      	mov	r2, r3
    5fce:	f001 fc15 	bl	77fc <FlexCAN_Ip_Init_Privileged>
    5fd2:	4603      	mov	r3, r0
    5fd4:	f88d 300f 	strb.w	r3, [sp, #15]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    5fd8:	9b01      	ldr	r3, [sp, #4]
    5fda:	785b      	ldrb	r3, [r3, #1]
    5fdc:	461a      	mov	r2, r3
    5fde:	4b29      	ldr	r3, [pc, #164]	; (6084 <Can_43_FLEXCAN_Ipw_Init+0xd0>)
    5fe0:	2101      	movs	r1, #1
    5fe2:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    5fe4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5fe8:	2b00      	cmp	r3, #0
    5fea:	d13b      	bne.n	6064 <Can_43_FLEXCAN_Ipw_Init+0xb0>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    5fec:	9b01      	ldr	r3, [sp, #4]
    5fee:	789b      	ldrb	r3, [r3, #2]
    5ff0:	4618      	mov	r0, r3
    5ff2:	f002 fec7 	bl	8d84 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    5ff6:	9b01      	ldr	r3, [sp, #4]
    5ff8:	6a1a      	ldr	r2, [r3, #32]
    5ffa:	9b01      	ldr	r3, [sp, #4]
    5ffc:	8b9b      	ldrh	r3, [r3, #28]
    5ffe:	4619      	mov	r1, r3
    6000:	2316      	movs	r3, #22
    6002:	fb01 f303 	mul.w	r3, r1, r3
    6006:	4413      	add	r3, r2
    6008:	785b      	ldrb	r3, [r3, #1]
    600a:	2b00      	cmp	r3, #0
    600c:	d018      	beq.n	6040 <Can_43_FLEXCAN_Ipw_Init+0x8c>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    600e:	9b01      	ldr	r3, [sp, #4]
    6010:	7898      	ldrb	r0, [r3, #2]
    6012:	9b01      	ldr	r3, [sp, #4]
    6014:	6a1a      	ldr	r2, [r3, #32]
    6016:	9b01      	ldr	r3, [sp, #4]
    6018:	8b9b      	ldrh	r3, [r3, #28]
    601a:	4619      	mov	r1, r3
    601c:	2316      	movs	r3, #22
    601e:	fb01 f303 	mul.w	r3, r1, r3
    6022:	4413      	add	r3, r2
    6024:	7cd9      	ldrb	r1, [r3, #19]
    6026:	9b01      	ldr	r3, [sp, #4]
    6028:	6a1a      	ldr	r2, [r3, #32]
    602a:	9b01      	ldr	r3, [sp, #4]
    602c:	8b9b      	ldrh	r3, [r3, #28]
    602e:	461c      	mov	r4, r3
    6030:	2316      	movs	r3, #22
    6032:	fb04 f303 	mul.w	r3, r4, r3
    6036:	4413      	add	r3, r2
    6038:	7d1b      	ldrb	r3, [r3, #20]
    603a:	461a      	mov	r2, r3
    603c:	f002 fd90 	bl	8b60 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    6040:	9b01      	ldr	r3, [sp, #4]
    6042:	7898      	ldrb	r0, [r3, #2]
    6044:	9b01      	ldr	r3, [sp, #4]
    6046:	6a1a      	ldr	r2, [r3, #32]
    6048:	9b01      	ldr	r3, [sp, #4]
    604a:	8b9b      	ldrh	r3, [r3, #28]
    604c:	4619      	mov	r1, r3
    604e:	2316      	movs	r3, #22
    6050:	fb01 f303 	mul.w	r3, r1, r3
    6054:	4413      	add	r3, r2
    6056:	7c9b      	ldrb	r3, [r3, #18]
    6058:	4619      	mov	r1, r3
    605a:	f002 fdd5 	bl	8c08 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    605e:	9801      	ldr	r0, [sp, #4]
    6060:	f000 f9fc 	bl	645c <Can_Ipw_InitRx>
                break;
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    6064:	9b01      	ldr	r3, [sp, #4]
    6066:	789b      	ldrb	r3, [r3, #2]
    6068:	4618      	mov	r0, r3
    606a:	f002 fbdb 	bl	8824 <FlexCAN_Ip_SetStopMode_Privileged>
    606e:	4603      	mov	r3, r0
    6070:	f88d 300f 	strb.w	r3, [sp, #15]

    return (Std_ReturnType)eRetVal;
    6074:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6078:	4618      	mov	r0, r3
    607a:	b004      	add	sp, #16
    607c:	bd10      	pop	{r4, pc}
    607e:	bf00      	nop
    6080:	1fff8cf4 	.word	0x1fff8cf4
    6084:	1fff8f54 	.word	0x1fff8f54

00006088 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    6088:	b500      	push	{lr}
    608a:	b083      	sub	sp, #12
    608c:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    608e:	9b01      	ldr	r3, [sp, #4]
    6090:	789b      	ldrb	r3, [r3, #2]
    6092:	4618      	mov	r0, r3
    6094:	f002 fa32 	bl	84fc <FlexCAN_Ip_Deinit_Privileged>
}
    6098:	bf00      	nop
    609a:	b003      	add	sp, #12
    609c:	f85d fb04 	ldr.w	pc, [sp], #4

000060a0 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    60a0:	b500      	push	{lr}
    60a2:	b085      	sub	sp, #20
    60a4:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    60a6:	2300      	movs	r3, #0
    60a8:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    60aa:	9b01      	ldr	r3, [sp, #4]
    60ac:	785b      	ldrb	r3, [r3, #1]
    60ae:	461a      	mov	r2, r3
    60b0:	4b0a      	ldr	r3, [pc, #40]	; (60dc <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3c>)
    60b2:	5c9b      	ldrb	r3, [r3, r2]
    60b4:	2b00      	cmp	r3, #0
    60b6:	d004      	beq.n	60c2 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x22>
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    60b8:	9b01      	ldr	r3, [sp, #4]
    60ba:	789b      	ldrb	r3, [r3, #2]
    60bc:	4618      	mov	r0, r3
    60be:	f002 fe33 	bl	8d28 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    60c2:	9b01      	ldr	r3, [sp, #4]
    60c4:	789b      	ldrb	r3, [r3, #2]
    60c6:	4618      	mov	r0, r3
    60c8:	f002 fb8c 	bl	87e4 <FlexCAN_Ip_SetStartMode_Privileged>
    60cc:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    60ce:	9b03      	ldr	r3, [sp, #12]
    60d0:	b2db      	uxtb	r3, r3
}
    60d2:	4618      	mov	r0, r3
    60d4:	b005      	add	sp, #20
    60d6:	f85d fb04 	ldr.w	pc, [sp], #4
    60da:	bf00      	nop
    60dc:	1fff8f54 	.word	0x1fff8f54

000060e0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    60e0:	b500      	push	{lr}
    60e2:	b085      	sub	sp, #20
    60e4:	9001      	str	r0, [sp, #4]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    60e6:	9b01      	ldr	r3, [sp, #4]
    60e8:	7898      	ldrb	r0, [r3, #2]
    60ea:	4913      	ldr	r1, [pc, #76]	; (6138 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x58>)
    60ec:	9b01      	ldr	r3, [sp, #4]
    60ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    60f0:	681b      	ldr	r3, [r3, #0]
    60f2:	461a      	mov	r2, r3
    60f4:	f001 fb82 	bl	77fc <FlexCAN_Ip_Init_Privileged>
    60f8:	9003      	str	r0, [sp, #12]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    60fa:	9b03      	ldr	r3, [sp, #12]
    60fc:	2b00      	cmp	r3, #0
    60fe:	d114      	bne.n	612a <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x4a>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    6100:	9b01      	ldr	r3, [sp, #4]
    6102:	789b      	ldrb	r3, [r3, #2]
    6104:	4618      	mov	r0, r3
    6106:	f002 fe3d 	bl	8d84 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    610a:	9801      	ldr	r0, [sp, #4]
    610c:	f7ff ff18 	bl	5f40 <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    6110:	9801      	ldr	r0, [sp, #4]
    6112:	f000 f9a3 	bl	645c <Can_Ipw_InitRx>
                    }
                }
            }
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    6116:	9801      	ldr	r0, [sp, #4]
    6118:	f7ff ffc2 	bl	60a0 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    611c:	4603      	mov	r3, r0
    611e:	2b00      	cmp	r3, #0
    6120:	bf14      	ite	ne
    6122:	2301      	movne	r3, #1
    6124:	2300      	moveq	r3, #0
    6126:	b2db      	uxtb	r3, r3
    6128:	9303      	str	r3, [sp, #12]
    }
    return (Std_ReturnType)eRetVal;
    612a:	9b03      	ldr	r3, [sp, #12]
    612c:	b2db      	uxtb	r3, r3
}
    612e:	4618      	mov	r0, r3
    6130:	b005      	add	sp, #20
    6132:	f85d fb04 	ldr.w	pc, [sp], #4
    6136:	bf00      	nop
    6138:	1fff8cf4 	.word	0x1fff8cf4

0000613c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    613c:	b500      	push	{lr}
    613e:	b085      	sub	sp, #20
    6140:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    6142:	2300      	movs	r3, #0
    6144:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    6148:	2300      	movs	r3, #0
    614a:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    614e:	9b01      	ldr	r3, [sp, #4]
    6150:	789b      	ldrb	r3, [r3, #2]
    6152:	4618      	mov	r0, r3
    6154:	f002 f910 	bl	8378 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    6158:	4603      	mov	r3, r0
    615a:	2b00      	cmp	r3, #0
    615c:	d152      	bne.n	6204 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc8>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    615e:	9b01      	ldr	r3, [sp, #4]
    6160:	785b      	ldrb	r3, [r3, #1]
    6162:	461a      	mov	r2, r3
    6164:	4b2c      	ldr	r3, [pc, #176]	; (6218 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xdc>)
    6166:	5c9b      	ldrb	r3, [r3, r2]
    6168:	2b00      	cmp	r3, #0
    616a:	d004      	beq.n	6176 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x3a>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    616c:	9b01      	ldr	r3, [sp, #4]
    616e:	789b      	ldrb	r3, [r3, #2]
    6170:	4618      	mov	r0, r3
    6172:	f002 fe07 	bl	8d84 <FlexCAN_Ip_DisableInterrupts_Privileged>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    6176:	2300      	movs	r3, #0
    6178:	f88d 300e 	strb.w	r3, [sp, #14]
    617c:	e032      	b.n	61e4 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xa8>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    617e:	9b01      	ldr	r3, [sp, #4]
    6180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6182:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6186:	009b      	lsls	r3, r3, #2
    6188:	4413      	add	r3, r2
    618a:	681b      	ldr	r3, [r3, #0]
    618c:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    618e:	9b02      	ldr	r3, [sp, #8]
    6190:	699b      	ldr	r3, [r3, #24]
    6192:	2b03      	cmp	r3, #3
    6194:	d119      	bne.n	61ca <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x8e>
        {
            u8Idx = 0U;
    6196:	2300      	movs	r3, #0
    6198:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    619c:	9b01      	ldr	r3, [sp, #4]
    619e:	7898      	ldrb	r0, [r3, #2]
    61a0:	9b02      	ldr	r3, [sp, #8]
    61a2:	7f1a      	ldrb	r2, [r3, #28]
    61a4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    61a8:	4413      	add	r3, r2
    61aa:	b2db      	uxtb	r3, r3
    61ac:	4619      	mov	r1, r3
    61ae:	f002 fe9b 	bl	8ee8 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    61b2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    61b6:	3301      	adds	r3, #1
    61b8:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    61bc:	9b02      	ldr	r3, [sp, #8]
    61be:	7b9b      	ldrb	r3, [r3, #14]
    61c0:	f89d 200d 	ldrb.w	r2, [sp, #13]
    61c4:	429a      	cmp	r2, r3
    61c6:	d3e9      	bcc.n	619c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x60>
    61c8:	e007      	b.n	61da <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x9e>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    61ca:	9b01      	ldr	r3, [sp, #4]
    61cc:	789a      	ldrb	r2, [r3, #2]
    61ce:	9b02      	ldr	r3, [sp, #8]
    61d0:	7f1b      	ldrb	r3, [r3, #28]
    61d2:	4619      	mov	r1, r3
    61d4:	4610      	mov	r0, r2
    61d6:	f002 fe87 	bl	8ee8 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    61da:	f89d 300e 	ldrb.w	r3, [sp, #14]
    61de:	3301      	adds	r3, #1
    61e0:	f88d 300e 	strb.w	r3, [sp, #14]
    61e4:	9b01      	ldr	r3, [sp, #4]
    61e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    61ea:	f89d 200e 	ldrb.w	r2, [sp, #14]
    61ee:	429a      	cmp	r2, r3
    61f0:	d3c5      	bcc.n	617e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x42>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    61f2:	9b01      	ldr	r3, [sp, #4]
    61f4:	789b      	ldrb	r3, [r3, #2]
    61f6:	4618      	mov	r0, r3
    61f8:	f002 fb14 	bl	8824 <FlexCAN_Ip_SetStopMode_Privileged>
    61fc:	4603      	mov	r3, r0
    61fe:	f88d 300f 	strb.w	r3, [sp, #15]
    6202:	e002      	b.n	620a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xce>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    6204:	2301      	movs	r3, #1
    6206:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    620a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    620e:	4618      	mov	r0, r3
    6210:	b005      	add	sp, #20
    6212:	f85d fb04 	ldr.w	pc, [sp], #4
    6216:	bf00      	nop
    6218:	1fff8f54 	.word	0x1fff8f54

0000621c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    621c:	b500      	push	{lr}
    621e:	b083      	sub	sp, #12
    6220:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    6222:	9b01      	ldr	r3, [sp, #4]
    6224:	785b      	ldrb	r3, [r3, #1]
    6226:	461a      	mov	r2, r3
    6228:	4b09      	ldr	r3, [pc, #36]	; (6250 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x34>)
    622a:	5c9b      	ldrb	r3, [r3, r2]
    622c:	2b00      	cmp	r3, #0
    622e:	d00a      	beq.n	6246 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x2a>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    6230:	9b01      	ldr	r3, [sp, #4]
    6232:	789b      	ldrb	r3, [r3, #2]
    6234:	4618      	mov	r0, r3
    6236:	f002 fda5 	bl	8d84 <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    623a:	9b01      	ldr	r3, [sp, #4]
    623c:	785b      	ldrb	r3, [r3, #1]
    623e:	461a      	mov	r2, r3
    6240:	4b03      	ldr	r3, [pc, #12]	; (6250 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x34>)
    6242:	2100      	movs	r1, #0
    6244:	5499      	strb	r1, [r3, r2]
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    6246:	bf00      	nop
    6248:	b003      	add	sp, #12
    624a:	f85d fb04 	ldr.w	pc, [sp], #4
    624e:	bf00      	nop
    6250:	1fff8f54 	.word	0x1fff8f54

00006254 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    6254:	b500      	push	{lr}
    6256:	b083      	sub	sp, #12
    6258:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    625a:	9b01      	ldr	r3, [sp, #4]
    625c:	785b      	ldrb	r3, [r3, #1]
    625e:	461a      	mov	r2, r3
    6260:	4b0a      	ldr	r3, [pc, #40]	; (628c <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x38>)
    6262:	5c9b      	ldrb	r3, [r3, r2]
    6264:	f083 0301 	eor.w	r3, r3, #1
    6268:	b2db      	uxtb	r3, r3
    626a:	2b00      	cmp	r3, #0
    626c:	d00a      	beq.n	6284 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x30>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    626e:	9b01      	ldr	r3, [sp, #4]
    6270:	789b      	ldrb	r3, [r3, #2]
    6272:	4618      	mov	r0, r3
    6274:	f002 fd58 	bl	8d28 <FlexCAN_Ip_EnableInterrupts_Privileged>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    6278:	9b01      	ldr	r3, [sp, #4]
    627a:	785b      	ldrb	r3, [r3, #1]
    627c:	461a      	mov	r2, r3
    627e:	4b03      	ldr	r3, [pc, #12]	; (628c <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x38>)
    6280:	2101      	movs	r1, #1
    6282:	5499      	strb	r1, [r3, r2]
    }
}
    6284:	bf00      	nop
    6286:	b003      	add	sp, #12
    6288:	f85d fb04 	ldr.w	pc, [sp], #4
    628c:	1fff8f54 	.word	0x1fff8f54

00006290 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    6290:	b500      	push	{lr}
    6292:	b085      	sub	sp, #20
    6294:	9001      	str	r0, [sp, #4]
    6296:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    6298:	2300      	movs	r3, #0
    629a:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    629c:	9b01      	ldr	r3, [sp, #4]
    629e:	789b      	ldrb	r3, [r3, #2]
    62a0:	4618      	mov	r0, r3
    62a2:	f001 fe35 	bl	7f10 <FlexCAN_Ip_GetErrorStatus>
    62a6:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    62a8:	9b03      	ldr	r3, [sp, #12]
    62aa:	091b      	lsrs	r3, r3, #4
    62ac:	b2db      	uxtb	r3, r3
    62ae:	f003 0303 	and.w	r3, r3, #3
    62b2:	b2da      	uxtb	r2, r3
    62b4:	9b00      	ldr	r3, [sp, #0]
    62b6:	701a      	strb	r2, [r3, #0]
    return E_OK;
    62b8:	2300      	movs	r3, #0
}
    62ba:	4618      	mov	r0, r3
    62bc:	b005      	add	sp, #20
    62be:	f85d fb04 	ldr.w	pc, [sp], #4

000062c2 <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    62c2:	b500      	push	{lr}
    62c4:	b083      	sub	sp, #12
    62c6:	9001      	str	r0, [sp, #4]
    62c8:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    62ca:	9b01      	ldr	r3, [sp, #4]
    62cc:	789b      	ldrb	r3, [r3, #2]
    62ce:	4618      	mov	r0, r3
    62d0:	f001 fe30 	bl	7f34 <FlexCAN_Ip_GetControllerTxErrorCounter>
    62d4:	4603      	mov	r3, r0
    62d6:	461a      	mov	r2, r3
    62d8:	9b00      	ldr	r3, [sp, #0]
    62da:	701a      	strb	r2, [r3, #0]
     return E_OK;
    62dc:	2300      	movs	r3, #0
}
    62de:	4618      	mov	r0, r3
    62e0:	b003      	add	sp, #12
    62e2:	f85d fb04 	ldr.w	pc, [sp], #4

000062e6 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    62e6:	b500      	push	{lr}
    62e8:	b083      	sub	sp, #12
    62ea:	9001      	str	r0, [sp, #4]
    62ec:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    62ee:	9b01      	ldr	r3, [sp, #4]
    62f0:	789b      	ldrb	r3, [r3, #2]
    62f2:	4618      	mov	r0, r3
    62f4:	f001 fe30 	bl	7f58 <FlexCAN_Ip_GetControllerRxErrorCounter>
    62f8:	4603      	mov	r3, r0
    62fa:	461a      	mov	r2, r3
    62fc:	9b00      	ldr	r3, [sp, #0]
    62fe:	701a      	strb	r2, [r3, #0]
    return E_OK;
    6300:	2300      	movs	r3, #0
}
    6302:	4618      	mov	r0, r3
    6304:	b003      	add	sp, #12
    6306:	f85d fb04 	ldr.w	pc, [sp], #4

0000630a <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    630a:	b510      	push	{r4, lr}
    630c:	b08c      	sub	sp, #48	; 0x30
    630e:	9005      	str	r0, [sp, #20]
    6310:	9104      	str	r1, [sp, #16]
    6312:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    6314:	2301      	movs	r3, #1
    6316:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    6318:	2300      	movs	r3, #0
    631a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    631e:	2300      	movs	r3, #0
    6320:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    6322:	2300      	movs	r3, #0
    6324:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    6326:	2300      	movs	r3, #0
    6328:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    632c:	2300      	movs	r3, #0
    632e:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    6332:	2300      	movs	r3, #0
    6334:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    6338:	2300      	movs	r3, #0
    633a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    633e:	2300      	movs	r3, #0
    6340:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    6344:	9b04      	ldr	r3, [sp, #16]
    6346:	699b      	ldr	r3, [r3, #24]
    6348:	2b03      	cmp	r3, #3
    634a:	d173      	bne.n	6434 <Can_43_FLEXCAN_Ipw_Write+0x12a>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    634c:	9b03      	ldr	r3, [sp, #12]
    634e:	681b      	ldr	r3, [r3, #0]
    6350:	0fdb      	lsrs	r3, r3, #31
    6352:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    6354:	9b04      	ldr	r3, [sp, #16]
    6356:	7c1a      	ldrb	r2, [r3, #16]
    6358:	9b03      	ldr	r3, [sp, #12]
    635a:	799b      	ldrb	r3, [r3, #6]
    635c:	429a      	cmp	r2, r3
    635e:	d803      	bhi.n	6368 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    6360:	9b04      	ldr	r3, [sp, #16]
    6362:	7c1b      	ldrb	r3, [r3, #16]
    6364:	9307      	str	r3, [sp, #28]
    6366:	e002      	b.n	636e <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    6368:	9b03      	ldr	r3, [sp, #12]
    636a:	799b      	ldrb	r3, [r3, #6]
    636c:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    636e:	9b04      	ldr	r3, [sp, #16]
    6370:	7c5b      	ldrb	r3, [r3, #17]
    6372:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    6376:	9b03      	ldr	r3, [sp, #12]
    6378:	681b      	ldr	r3, [r3, #0]
    637a:	0f9b      	lsrs	r3, r3, #30
    637c:	f003 0301 	and.w	r3, r3, #1
    6380:	2b00      	cmp	r3, #0
    6382:	bf14      	ite	ne
    6384:	2301      	movne	r3, #1
    6386:	2300      	moveq	r3, #0
    6388:	b2db      	uxtb	r3, r3
    638a:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    638e:	9b05      	ldr	r3, [sp, #20]
    6390:	6a1a      	ldr	r2, [r3, #32]
    6392:	9b05      	ldr	r3, [sp, #20]
    6394:	8b9b      	ldrh	r3, [r3, #28]
    6396:	4619      	mov	r1, r3
    6398:	2316      	movs	r3, #22
    639a:	fb01 f303 	mul.w	r3, r1, r3
    639e:	4413      	add	r3, r2
    63a0:	781b      	ldrb	r3, [r3, #0]
    63a2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #endif
#endif
        DataInfo.is_remote = FALSE;
    63a6:	2300      	movs	r3, #0
    63a8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    63ac:	9b04      	ldr	r3, [sp, #16]
    63ae:	7b1b      	ldrb	r3, [r3, #12]
    63b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    63b4:	9b05      	ldr	r3, [sp, #20]
    63b6:	7898      	ldrb	r0, [r3, #2]
    63b8:	9b04      	ldr	r3, [sp, #16]
    63ba:	7f1a      	ldrb	r2, [r3, #28]
    63bc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    63c0:	4413      	add	r3, r2
    63c2:	b2db      	uxtb	r3, r3
    63c4:	4619      	mov	r1, r3
    63c6:	f001 fc91 	bl	7cec <FlexCAN_Ip_GetTransferStatus>
    63ca:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    63cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    63ce:	2b00      	cmp	r3, #0
    63d0:	d122      	bne.n	6418 <Can_43_FLEXCAN_Ipw_Write+0x10e>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    63d2:	9b05      	ldr	r3, [sp, #20]
    63d4:	785b      	ldrb	r3, [r3, #1]
    63d6:	461c      	mov	r4, r3
    63d8:	9b04      	ldr	r3, [sp, #16]
    63da:	7f1b      	ldrb	r3, [r3, #28]
    63dc:	461a      	mov	r2, r3
    63de:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    63e2:	4413      	add	r3, r2
    63e4:	9a03      	ldr	r2, [sp, #12]
    63e6:	8890      	ldrh	r0, [r2, #4]
    63e8:	491b      	ldr	r1, [pc, #108]	; (6458 <Can_43_FLEXCAN_Ipw_Write+0x14e>)
    63ea:	0162      	lsls	r2, r4, #5
    63ec:	4413      	add	r3, r2
    63ee:	4602      	mov	r2, r0
    63f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    63f4:	9b05      	ldr	r3, [sp, #20]
    63f6:	7898      	ldrb	r0, [r3, #2]
    63f8:	9b04      	ldr	r3, [sp, #16]
    63fa:	7f1a      	ldrb	r2, [r3, #28]
    63fc:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    6400:	4413      	add	r3, r2
    6402:	b2d9      	uxtb	r1, r3
    6404:	9b03      	ldr	r3, [sp, #12]
    6406:	681c      	ldr	r4, [r3, #0]
    6408:	9b03      	ldr	r3, [sp, #12]
    640a:	689b      	ldr	r3, [r3, #8]
    640c:	aa06      	add	r2, sp, #24
    640e:	9300      	str	r3, [sp, #0]
    6410:	4623      	mov	r3, r4
    6412:	f001 fa6f 	bl	78f4 <FlexCAN_Ip_Send>
    6416:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    6418:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    641c:	3301      	adds	r3, #1
    641e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    6422:	9b04      	ldr	r3, [sp, #16]
    6424:	7b9b      	ldrb	r3, [r3, #14]
    6426:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    642a:	429a      	cmp	r2, r3
    642c:	d202      	bcs.n	6434 <Can_43_FLEXCAN_Ipw_Write+0x12a>
    642e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6430:	2b02      	cmp	r3, #2
    6432:	d0bf      	beq.n	63b4 <Can_43_FLEXCAN_Ipw_Write+0xaa>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    6434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6436:	2b00      	cmp	r3, #0
    6438:	d004      	beq.n	6444 <Can_43_FLEXCAN_Ipw_Write+0x13a>
    643a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    643c:	2b02      	cmp	r3, #2
    643e:	d001      	beq.n	6444 <Can_43_FLEXCAN_Ipw_Write+0x13a>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    6440:	2301      	movs	r3, #1
    6442:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    6444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6446:	2b02      	cmp	r3, #2
    6448:	d002      	beq.n	6450 <Can_43_FLEXCAN_Ipw_Write+0x146>
    644a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    644c:	b2db      	uxtb	r3, r3
    644e:	e000      	b.n	6452 <Can_43_FLEXCAN_Ipw_Write+0x148>
    6450:	2302      	movs	r3, #2
}
    6452:	4618      	mov	r0, r3
    6454:	b00c      	add	sp, #48	; 0x30
    6456:	bd10      	pop	{r4, pc}
    6458:	1fff8f14 	.word	0x1fff8f14

0000645c <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    645c:	b500      	push	{lr}
    645e:	b089      	sub	sp, #36	; 0x24
    6460:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    6462:	2300      	movs	r3, #0
    6464:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    6468:	9b01      	ldr	r3, [sp, #4]
    646a:	789b      	ldrb	r3, [r3, #2]
    646c:	2101      	movs	r1, #1
    646e:	4618      	mov	r0, r3
    6470:	f002 f9f6 	bl	8860 <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    6474:	2300      	movs	r3, #0
    6476:	f88d 301f 	strb.w	r3, [sp, #31]
    647a:	e03a      	b.n	64f2 <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    647c:	9b01      	ldr	r3, [sp, #4]
    647e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6480:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6484:	009b      	lsls	r3, r3, #2
    6486:	4413      	add	r3, r2
    6488:	681b      	ldr	r3, [r3, #0]
    648a:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    648c:	9b06      	ldr	r3, [sp, #24]
    648e:	699b      	ldr	r3, [r3, #24]
    6490:	2b00      	cmp	r3, #0
    6492:	d121      	bne.n	64d8 <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    6494:	2300      	movs	r3, #0
    6496:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    649a:	2300      	movs	r3, #0
    649c:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    649e:	9b06      	ldr	r3, [sp, #24]
    64a0:	689b      	ldr	r3, [r3, #8]
    64a2:	2b00      	cmp	r3, #0
    64a4:	d002      	beq.n	64ac <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    64a6:	2301      	movs	r3, #1
    64a8:	9302      	str	r3, [sp, #8]
    64aa:	e001      	b.n	64b0 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    64ac:	2300      	movs	r3, #0
    64ae:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    64b0:	9b01      	ldr	r3, [sp, #4]
    64b2:	7898      	ldrb	r0, [r3, #2]
    64b4:	9b06      	ldr	r3, [sp, #24]
    64b6:	7f19      	ldrb	r1, [r3, #28]
    64b8:	9b06      	ldr	r3, [sp, #24]
    64ba:	695b      	ldr	r3, [r3, #20]
    64bc:	681b      	ldr	r3, [r3, #0]
    64be:	aa02      	add	r2, sp, #8
    64c0:	f001 fa46 	bl	7950 <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    64c4:	9b01      	ldr	r3, [sp, #4]
    64c6:	7898      	ldrb	r0, [r3, #2]
    64c8:	9b06      	ldr	r3, [sp, #24]
    64ca:	7f19      	ldrb	r1, [r3, #28]
    64cc:	9b06      	ldr	r3, [sp, #24]
    64ce:	695b      	ldr	r3, [r3, #20]
    64d0:	685b      	ldr	r3, [r3, #4]
    64d2:	461a      	mov	r2, r3
    64d4:	f001 ff7c 	bl	83d0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    64d8:	9b06      	ldr	r3, [sp, #24]
    64da:	699b      	ldr	r3, [r3, #24]
    64dc:	2b01      	cmp	r3, #1
    64de:	d103      	bne.n	64e8 <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    64e0:	9906      	ldr	r1, [sp, #24]
    64e2:	9801      	ldr	r0, [sp, #4]
    64e4:	f7ff fa87 	bl	59f6 <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    64e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    64ec:	3301      	adds	r3, #1
    64ee:	f88d 301f 	strb.w	r3, [sp, #31]
    64f2:	9b01      	ldr	r3, [sp, #4]
    64f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    64f8:	f89d 201f 	ldrb.w	r2, [sp, #31]
    64fc:	429a      	cmp	r2, r3
    64fe:	d3bd      	bcc.n	647c <Can_Ipw_InitRx+0x20>
        }
    }
}
    6500:	bf00      	nop
    6502:	bf00      	nop
    6504:	b009      	add	sp, #36	; 0x24
    6506:	f85d fb04 	ldr.w	pc, [sp], #4

0000650a <Can_43_FLEXCAN_Ipw_MainFunction_Write>:
    void Can_43_FLEXCAN_Ipw_MainFunction_Write
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
    )
    {
    650a:	b500      	push	{lr}
    650c:	b085      	sub	sp, #20
    650e:	9001      	str	r0, [sp, #4]
    6510:	9100      	str	r1, [sp, #0]
        uint8 u8ObjIdx = 0U;
    6512:	2300      	movs	r3, #0
    6514:	f88d 300f 	strb.w	r3, [sp, #15]

        do
        {
            if (FLEXCAN_MB_TX_BUSY == ((Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx].state))
    6518:	4a23      	ldr	r2, [pc, #140]	; (65a8 <Can_43_FLEXCAN_Ipw_MainFunction_Write+0x9e>)
    651a:	9b00      	ldr	r3, [sp, #0]
    651c:	7f1b      	ldrb	r3, [r3, #28]
    651e:	4619      	mov	r1, r3
    6520:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6524:	440b      	add	r3, r1
    6526:	011b      	lsls	r3, r3, #4
    6528:	4413      	add	r3, r2
    652a:	3304      	adds	r3, #4
    652c:	681b      	ldr	r3, [r3, #0]
    652e:	2b02      	cmp	r3, #2
    6530:	d129      	bne.n	6586 <Can_43_FLEXCAN_Ipw_MainFunction_Write+0x7c>
            {
                /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
                FlexCAN_Ip_MainFunctionWrite(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    6532:	9b01      	ldr	r3, [sp, #4]
    6534:	7898      	ldrb	r0, [r3, #2]
    6536:	9b00      	ldr	r3, [sp, #0]
    6538:	7f1a      	ldrb	r2, [r3, #28]
    653a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    653e:	4413      	add	r3, r2
    6540:	b2db      	uxtb	r3, r3
    6542:	4619      	mov	r1, r3
    6544:	f002 f88e 	bl	8664 <FlexCAN_Ip_MainFunctionWrite>
                if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx))
    6548:	9b01      	ldr	r3, [sp, #4]
    654a:	7898      	ldrb	r0, [r3, #2]
    654c:	9b00      	ldr	r3, [sp, #0]
    654e:	7f1a      	ldrb	r2, [r3, #28]
    6550:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6554:	4413      	add	r3, r2
    6556:	b2db      	uxtb	r3, r3
    6558:	4619      	mov	r1, r3
    655a:	f001 fbc7 	bl	7cec <FlexCAN_Ip_GetTransferStatus>
    655e:	4603      	mov	r3, r0
    6560:	2b00      	cmp	r3, #0
    6562:	d110      	bne.n	6586 <Can_43_FLEXCAN_Ipw_MainFunction_Write+0x7c>
                {
                    CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx]);
    6564:	9b01      	ldr	r3, [sp, #4]
    6566:	785b      	ldrb	r3, [r3, #1]
    6568:	461a      	mov	r2, r3
    656a:	9b00      	ldr	r3, [sp, #0]
    656c:	7f1b      	ldrb	r3, [r3, #28]
    656e:	4619      	mov	r1, r3
    6570:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6574:	440b      	add	r3, r1
    6576:	490d      	ldr	r1, [pc, #52]	; (65ac <Can_43_FLEXCAN_Ipw_MainFunction_Write+0xa2>)
    6578:	0152      	lsls	r2, r2, #5
    657a:	4413      	add	r3, r2
    657c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    6580:	4618      	mov	r0, r3
    6582:	f7fa f9cb 	bl	91c <CanIf_TxConfirmation>
                }
            }
            u8ObjIdx++;
    6586:	f89d 300f 	ldrb.w	r3, [sp, #15]
    658a:	3301      	adds	r3, #1
    658c:	f88d 300f 	strb.w	r3, [sp, #15]
        }while (u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount);
    6590:	9b00      	ldr	r3, [sp, #0]
    6592:	7b9b      	ldrb	r3, [r3, #14]
    6594:	f89d 200f 	ldrb.w	r2, [sp, #15]
    6598:	429a      	cmp	r2, r3
    659a:	d3bd      	bcc.n	6518 <Can_43_FLEXCAN_Ipw_MainFunction_Write+0xe>
    }
    659c:	bf00      	nop
    659e:	bf00      	nop
    65a0:	b005      	add	sp, #20
    65a2:	f85d fb04 	ldr.w	pc, [sp], #4
    65a6:	bf00      	nop
    65a8:	1fff8cf4 	.word	0x1fff8cf4
    65ac:	1fff8f14 	.word	0x1fff8f14

000065b0 <Can_43_FLEXCAN_Ipw_MainFunction_Read>:
    void Can_43_FLEXCAN_Ipw_MainFunction_Read
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
    )
    {
    65b0:	b500      	push	{lr}
    65b2:	b09f      	sub	sp, #124	; 0x7c
    65b4:	9003      	str	r0, [sp, #12]
    65b6:	9102      	str	r1, [sp, #8]
        Flexcan_Ip_MsgBuffType ReceivedDataBuffer;
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;

        /* set some default values that maybe uninitialized but read in Can_Ipw_ParseData. This prevents Misra violation */
        ReceivedDataBuffer.cs = 0U;
    65b8:	2300      	movs	r3, #0
    65ba:	930a      	str	r3, [sp, #40]	; 0x28
        ReceivedDataBuffer.msgId = 0U;
    65bc:	2300      	movs	r3, #0
    65be:	930b      	str	r3, [sp, #44]	; 0x2c
        ReceivedDataBuffer.dataLen = 0U;
    65c0:	2300      	movs	r3, #0
    65c2:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70

        if (FALSE == FlexCAN_Ip_GetStopMode(Can_pControllerConfig->Can_u8ControllerOffset))
    65c6:	9b03      	ldr	r3, [sp, #12]
    65c8:	789b      	ldrb	r3, [r3, #2]
    65ca:	4618      	mov	r0, r3
    65cc:	f002 f8d8 	bl	8780 <FlexCAN_Ip_GetStopMode_Privileged>
    65d0:	4603      	mov	r3, r0
    65d2:	f083 0301 	eor.w	r3, r3, #1
    65d6:	b2db      	uxtb	r3, r3
    65d8:	2b00      	cmp	r3, #0
    65da:	d034      	beq.n	6646 <Can_43_FLEXCAN_Ipw_MainFunction_Read+0x96>
        {
        if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    65dc:	9b02      	ldr	r3, [sp, #8]
    65de:	699b      	ldr	r3, [r3, #24]
    65e0:	2b00      	cmp	r3, #0
    65e2:	d124      	bne.n	662e <Can_43_FLEXCAN_Ipw_MainFunction_Read+0x7e>
        {
            (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex, &ReceivedDataBuffer, Can_pHwObjectConfig->Can_bHwObjectUsesPolling);
    65e4:	9b03      	ldr	r3, [sp, #12]
    65e6:	7898      	ldrb	r0, [r3, #2]
    65e8:	9b02      	ldr	r3, [sp, #8]
    65ea:	7f19      	ldrb	r1, [r3, #28]
    65ec:	9b02      	ldr	r3, [sp, #8]
    65ee:	7b1b      	ldrb	r3, [r3, #12]
    65f0:	aa0a      	add	r2, sp, #40	; 0x28
    65f2:	f001 f9f1 	bl	79d8 <FlexCAN_Ip_Receive>
            FlexCAN_Ip_MainFunctionRead(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex);
    65f6:	9b03      	ldr	r3, [sp, #12]
    65f8:	789a      	ldrb	r2, [r3, #2]
    65fa:	9b02      	ldr	r3, [sp, #8]
    65fc:	7f1b      	ldrb	r3, [r3, #28]
    65fe:	4619      	mov	r1, r3
    6600:	4610      	mov	r0, r2
    6602:	f001 ffa3 	bl	854c <FlexCAN_Ip_MainFunctionRead>

            if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex))
    6606:	9b03      	ldr	r3, [sp, #12]
    6608:	789a      	ldrb	r2, [r3, #2]
    660a:	9b02      	ldr	r3, [sp, #8]
    660c:	7f1b      	ldrb	r3, [r3, #28]
    660e:	4619      	mov	r1, r3
    6610:	4610      	mov	r0, r2
    6612:	f001 fb6b 	bl	7cec <FlexCAN_Ip_GetTransferStatus>
    6616:	4603      	mov	r3, r0
    6618:	2b00      	cmp	r3, #0
    661a:	d114      	bne.n	6646 <Can_43_FLEXCAN_Ipw_MainFunction_Read+0x96>
            {
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    661c:	aa0a      	add	r2, sp, #40	; 0x28
    661e:	a905      	add	r1, sp, #20
    6620:	a808      	add	r0, sp, #32
    6622:	9b02      	ldr	r3, [sp, #8]
    6624:	9300      	str	r3, [sp, #0]
    6626:	9b03      	ldr	r3, [sp, #12]
    6628:	f7ff f988 	bl	593c <Can_Ipw_ParseData>
        else
        {
            /* prevent misra */
        }
        }
    }
    662c:	e00b      	b.n	6646 <Can_43_FLEXCAN_Ipw_MainFunction_Read+0x96>
        else if (CAN_RX_LEGACY_FIFO == Can_pHwObjectConfig->Can_eReceiveType)
    662e:	9b02      	ldr	r3, [sp, #8]
    6630:	699b      	ldr	r3, [r3, #24]
    6632:	2b01      	cmp	r3, #1
    6634:	d107      	bne.n	6646 <Can_43_FLEXCAN_Ipw_MainFunction_Read+0x96>
            Can_Ipw_ProcessLegacyFifoPolling(&CanIf_Mailbox, \
    6636:	aa0a      	add	r2, sp, #40	; 0x28
    6638:	a905      	add	r1, sp, #20
    663a:	a808      	add	r0, sp, #32
    663c:	9b02      	ldr	r3, [sp, #8]
    663e:	9300      	str	r3, [sp, #0]
    6640:	9b03      	ldr	r3, [sp, #12]
    6642:	f7ff fbfb 	bl	5e3c <Can_Ipw_ProcessLegacyFifoPolling>
    }
    6646:	bf00      	nop
    6648:	b01f      	add	sp, #124	; 0x7c
    664a:	f85d fb04 	ldr.w	pc, [sp], #4

0000664e <Can_43_FLEXCAN_Ipw_MainFunction_BusOff>:
#if (CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON)
    /**
    *   @brief     Polling Bus Off
    */
    void Can_43_FLEXCAN_Ipw_MainFunction_BusOff(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
    {
    664e:	b500      	push	{lr}
    6650:	b083      	sub	sp, #12
    6652:	9001      	str	r0, [sp, #4]
        (void)FlexCAN_Ip_MainFunctionBusOff(Can_pControllerConfig->Can_u8ControllerOffset);
    6654:	9b01      	ldr	r3, [sp, #4]
    6656:	789b      	ldrb	r3, [r3, #2]
    6658:	4618      	mov	r0, r3
    665a:	f001 ffcb 	bl	85f4 <FlexCAN_Ip_MainFunctionBusOff_Privileged>
    }
    665e:	bf00      	nop
    6660:	b003      	add	sp, #12
    6662:	f85d fb04 	ldr.w	pc, [sp], #4

00006666 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    6666:	b500      	push	{lr}
    6668:	b083      	sub	sp, #12
    666a:	9001      	str	r0, [sp, #4]
    666c:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    666e:	9b00      	ldr	r3, [sp, #0]
    6670:	681b      	ldr	r3, [r3, #0]
    6672:	2b01      	cmp	r3, #1
    6674:	d114      	bne.n	66a0 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    6676:	9b01      	ldr	r3, [sp, #4]
    6678:	789b      	ldrb	r3, [r3, #2]
    667a:	4618      	mov	r0, r3
    667c:	f002 f89a 	bl	87b4 <FlexCAN_Ip_GetStartMode_Privileged>
    6680:	4603      	mov	r3, r0
    6682:	f083 0301 	eor.w	r3, r3, #1
    6686:	b2db      	uxtb	r3, r3
    6688:	2b00      	cmp	r3, #0
    668a:	d01e      	beq.n	66ca <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    668c:	9b00      	ldr	r3, [sp, #0]
    668e:	2202      	movs	r2, #2
    6690:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    6692:	9b01      	ldr	r3, [sp, #4]
    6694:	781b      	ldrb	r3, [r3, #0]
    6696:	2102      	movs	r1, #2
    6698:	4618      	mov	r0, r3
    669a:	f7fa f936 	bl	90a <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    669e:	e014      	b.n	66ca <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    66a0:	9b00      	ldr	r3, [sp, #0]
    66a2:	681b      	ldr	r3, [r3, #0]
    66a4:	2b02      	cmp	r3, #2
    66a6:	d110      	bne.n	66ca <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    66a8:	9b01      	ldr	r3, [sp, #4]
    66aa:	789b      	ldrb	r3, [r3, #2]
    66ac:	4618      	mov	r0, r3
    66ae:	f002 f881 	bl	87b4 <FlexCAN_Ip_GetStartMode_Privileged>
    66b2:	4603      	mov	r3, r0
    66b4:	2b00      	cmp	r3, #0
    66b6:	d008      	beq.n	66ca <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    66b8:	9b00      	ldr	r3, [sp, #0]
    66ba:	2201      	movs	r2, #1
    66bc:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    66be:	9b01      	ldr	r3, [sp, #4]
    66c0:	781b      	ldrb	r3, [r3, #0]
    66c2:	2101      	movs	r1, #1
    66c4:	4618      	mov	r0, r3
    66c6:	f7fa f920 	bl	90a <CanIf_ControllerModeIndication>
}
    66ca:	bf00      	nop
    66cc:	b003      	add	sp, #12
    66ce:	f85d fb04 	ldr.w	pc, [sp], #4
    66d2:	bf00      	nop

000066d4 <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    66d4:	b500      	push	{lr}
    66d6:	b085      	sub	sp, #20
    66d8:	9102      	str	r1, [sp, #8]
    66da:	9201      	str	r2, [sp, #4]
    66dc:	9300      	str	r3, [sp, #0]
    66de:	4603      	mov	r3, r0
    66e0:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    66e4:	9b02      	ldr	r3, [sp, #8]
    66e6:	2b07      	cmp	r3, #7
    66e8:	d105      	bne.n	66f6 <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    66ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    66ee:	4618      	mov	r0, r3
    66f0:	f7ff f8de 	bl	58b0 <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    66f4:	e000      	b.n	66f8 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    66f6:	bf00      	nop
        }
    }
}
    66f8:	bf00      	nop
    66fa:	b005      	add	sp, #20
    66fc:	f85d fb04 	ldr.w	pc, [sp], #4

00006700 <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    6700:	b082      	sub	sp, #8
    6702:	9001      	str	r0, [sp, #4]
    6704:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    6706:	9b01      	ldr	r3, [sp, #4]
    6708:	9a00      	ldr	r2, [sp, #0]
    670a:	649a      	str	r2, [r3, #72]	; 0x48
}
    670c:	bf00      	nop
    670e:	b002      	add	sp, #8
    6710:	4770      	bx	lr

00006712 <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    6712:	b084      	sub	sp, #16
    6714:	9001      	str	r0, [sp, #4]
    6716:	460b      	mov	r3, r1
    6718:	f88d 3003 	strb.w	r3, [sp, #3]
    671c:	4613      	mov	r3, r2
    671e:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    6722:	9b01      	ldr	r3, [sp, #4]
    6724:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    6728:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    672a:	9b03      	ldr	r3, [sp, #12]
    672c:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    6730:	9303      	str	r3, [sp, #12]

    if (enable)
    6732:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6736:	2b00      	cmp	r3, #0
    6738:	d00b      	beq.n	6752 <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    673a:	9b03      	ldr	r3, [sp, #12]
    673c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    6740:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    6742:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6746:	021b      	lsls	r3, r3, #8
    6748:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    674c:	9a03      	ldr	r2, [sp, #12]
    674e:	4313      	orrs	r3, r2
    6750:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    6752:	9b01      	ldr	r3, [sp, #4]
    6754:	9a03      	ldr	r2, [sp, #12]
    6756:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    675a:	bf00      	nop
    675c:	b004      	add	sp, #16
    675e:	4770      	bx	lr

00006760 <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    6760:	b082      	sub	sp, #8
    6762:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    6764:	9b01      	ldr	r3, [sp, #4]
    6766:	681b      	ldr	r3, [r3, #0]
    6768:	43db      	mvns	r3, r3
    676a:	0fdb      	lsrs	r3, r3, #31
    676c:	b2db      	uxtb	r3, r3
}
    676e:	4618      	mov	r0, r3
    6770:	b002      	add	sp, #8
    6772:	4770      	bx	lr

00006774 <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    6774:	b082      	sub	sp, #8
    6776:	9001      	str	r0, [sp, #4]
    6778:	460b      	mov	r3, r1
    677a:	f88d 3003 	strb.w	r3, [sp, #3]
    677e:	4613      	mov	r3, r2
    6780:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    6784:	9b01      	ldr	r3, [sp, #4]
    6786:	681b      	ldr	r3, [r3, #0]
    6788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    678c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6790:	2a00      	cmp	r2, #0
    6792:	d002      	beq.n	679a <FlexCAN_SetFDEnabled+0x26>
    6794:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6798:	e000      	b.n	679c <FlexCAN_SetFDEnabled+0x28>
    679a:	2200      	movs	r2, #0
    679c:	431a      	orrs	r2, r3
    679e:	9b01      	ldr	r3, [sp, #4]
    67a0:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    67a2:	9b01      	ldr	r3, [sp, #4]
    67a4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    67a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    67ac:	f89d 2002 	ldrb.w	r2, [sp, #2]
    67b0:	2a00      	cmp	r2, #0
    67b2:	d002      	beq.n	67ba <FlexCAN_SetFDEnabled+0x46>
    67b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    67b8:	e000      	b.n	67bc <FlexCAN_SetFDEnabled+0x48>
    67ba:	2200      	movs	r2, #0
    67bc:	431a      	orrs	r2, r3
    67be:	9b01      	ldr	r3, [sp, #4]
    67c0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    67c4:	9b01      	ldr	r3, [sp, #4]
    67c6:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    67ca:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    67ce:	9b01      	ldr	r3, [sp, #4]
    67d0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    67d4:	bf00      	nop
    67d6:	b002      	add	sp, #8
    67d8:	4770      	bx	lr

000067da <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    67da:	b082      	sub	sp, #8
    67dc:	9001      	str	r0, [sp, #4]
    67de:	460b      	mov	r3, r1
    67e0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    67e4:	9b01      	ldr	r3, [sp, #4]
    67e6:	685b      	ldr	r3, [r3, #4]
    67e8:	f023 0308 	bic.w	r3, r3, #8
    67ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
    67f0:	2a00      	cmp	r2, #0
    67f2:	d001      	beq.n	67f8 <FlexCAN_SetListenOnlyMode+0x1e>
    67f4:	2208      	movs	r2, #8
    67f6:	e000      	b.n	67fa <FlexCAN_SetListenOnlyMode+0x20>
    67f8:	2200      	movs	r2, #0
    67fa:	431a      	orrs	r2, r3
    67fc:	9b01      	ldr	r3, [sp, #4]
    67fe:	605a      	str	r2, [r3, #4]
}
    6800:	bf00      	nop
    6802:	b002      	add	sp, #8
    6804:	4770      	bx	lr

00006806 <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    6806:	b082      	sub	sp, #8
    6808:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    680a:	9b01      	ldr	r3, [sp, #4]
    680c:	689b      	ldr	r3, [r3, #8]
}
    680e:	bf00      	nop
    6810:	b002      	add	sp, #8
    6812:	4770      	bx	lr

00006814 <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    6814:	b084      	sub	sp, #16
    6816:	9001      	str	r0, [sp, #4]
    6818:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    681a:	9b00      	ldr	r3, [sp, #0]
    681c:	f003 031f 	and.w	r3, r3, #31
    6820:	2201      	movs	r2, #1
    6822:	fa02 f303 	lsl.w	r3, r2, r3
    6826:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    6828:	9b00      	ldr	r3, [sp, #0]
    682a:	2b1f      	cmp	r3, #31
    682c:	d802      	bhi.n	6834 <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    682e:	9b01      	ldr	r3, [sp, #4]
    6830:	9a03      	ldr	r2, [sp, #12]
    6832:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    6834:	bf00      	nop
    6836:	b004      	add	sp, #16
    6838:	4770      	bx	lr

0000683a <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    683a:	b084      	sub	sp, #16
    683c:	9001      	str	r0, [sp, #4]
    683e:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    6840:	2300      	movs	r3, #0
    6842:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    6844:	9b00      	ldr	r3, [sp, #0]
    6846:	2b1f      	cmp	r3, #31
    6848:	d80e      	bhi.n	6868 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    684a:	9b01      	ldr	r3, [sp, #4]
    684c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    684e:	9b00      	ldr	r3, [sp, #0]
    6850:	f003 031f 	and.w	r3, r3, #31
    6854:	2101      	movs	r1, #1
    6856:	fa01 f303 	lsl.w	r3, r1, r3
    685a:	401a      	ands	r2, r3
    685c:	9b00      	ldr	r3, [sp, #0]
    685e:	f003 031f 	and.w	r3, r3, #31
    6862:	fa22 f303 	lsr.w	r3, r2, r3
    6866:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    6868:	9b03      	ldr	r3, [sp, #12]
    686a:	b2db      	uxtb	r3, r3
}
    686c:	4618      	mov	r0, r3
    686e:	b004      	add	sp, #16
    6870:	4770      	bx	lr

00006872 <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    6872:	b082      	sub	sp, #8
    6874:	9001      	str	r0, [sp, #4]
    6876:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    6878:	9b01      	ldr	r3, [sp, #4]
    687a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    687e:	4b15      	ldr	r3, [pc, #84]	; (68d4 <FlexCAN_SetFDTimeSegments+0x62>)
    6880:	4013      	ands	r3, r2
    6882:	9a01      	ldr	r2, [sp, #4]
    6884:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    6888:	9b01      	ldr	r3, [sp, #4]
    688a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    688e:	9b00      	ldr	r3, [sp, #0]
    6890:	681b      	ldr	r3, [r3, #0]
    6892:	029b      	lsls	r3, r3, #10
    6894:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    6898:	9b00      	ldr	r3, [sp, #0]
    689a:	689b      	ldr	r3, [r3, #8]
    689c:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    68a0:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    68a2:	9b00      	ldr	r3, [sp, #0]
    68a4:	685b      	ldr	r3, [r3, #4]
    68a6:	015b      	lsls	r3, r3, #5
    68a8:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    68aa:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    68ac:	9b00      	ldr	r3, [sp, #0]
    68ae:	68db      	ldr	r3, [r3, #12]
    68b0:	0518      	lsls	r0, r3, #20
    68b2:	4b09      	ldr	r3, [pc, #36]	; (68d8 <FlexCAN_SetFDTimeSegments+0x66>)
    68b4:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    68b6:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    68b8:	9b00      	ldr	r3, [sp, #0]
    68ba:	691b      	ldr	r3, [r3, #16]
    68bc:	041b      	lsls	r3, r3, #16
    68be:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    68c2:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    68c4:	431a      	orrs	r2, r3
    68c6:	9b01      	ldr	r3, [sp, #4]
    68c8:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    68cc:	bf00      	nop
    68ce:	b002      	add	sp, #8
    68d0:	4770      	bx	lr
    68d2:	bf00      	nop
    68d4:	c0088318 	.word	0xc0088318
    68d8:	3ff00000 	.word	0x3ff00000

000068dc <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    68dc:	b082      	sub	sp, #8
    68de:	9001      	str	r0, [sp, #4]
    68e0:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    68e2:	9b01      	ldr	r3, [sp, #4]
    68e4:	685a      	ldr	r2, [r3, #4]
    68e6:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    68ea:	4013      	ands	r3, r2
    68ec:	9a01      	ldr	r2, [sp, #4]
    68ee:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    68f0:	9b01      	ldr	r3, [sp, #4]
    68f2:	685a      	ldr	r2, [r3, #4]
    68f4:	9b00      	ldr	r3, [sp, #0]
    68f6:	681b      	ldr	r3, [r3, #0]
    68f8:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    68fc:	9b00      	ldr	r3, [sp, #0]
    68fe:	689b      	ldr	r3, [r3, #8]
    6900:	041b      	lsls	r3, r3, #16
    6902:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    6906:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    6908:	9b00      	ldr	r3, [sp, #0]
    690a:	685b      	ldr	r3, [r3, #4]
    690c:	04db      	lsls	r3, r3, #19
    690e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    6912:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    6914:	9b00      	ldr	r3, [sp, #0]
    6916:	68db      	ldr	r3, [r3, #12]
    6918:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    691a:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    691c:	9b00      	ldr	r3, [sp, #0]
    691e:	691b      	ldr	r3, [r3, #16]
    6920:	059b      	lsls	r3, r3, #22
    6922:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    6926:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    6928:	431a      	orrs	r2, r3
    692a:	9b01      	ldr	r3, [sp, #4]
    692c:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    692e:	bf00      	nop
    6930:	b002      	add	sp, #8
    6932:	4770      	bx	lr

00006934 <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    6934:	b082      	sub	sp, #8
    6936:	9001      	str	r0, [sp, #4]
    6938:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    693a:	9b01      	ldr	r3, [sp, #4]
    693c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    693e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    6942:	9b01      	ldr	r3, [sp, #4]
    6944:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    6946:	9b01      	ldr	r3, [sp, #4]
    6948:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    694a:	9b00      	ldr	r3, [sp, #0]
    694c:	681b      	ldr	r3, [r3, #0]
    694e:	029b      	lsls	r3, r3, #10
    6950:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    6952:	9b00      	ldr	r3, [sp, #0]
    6954:	689b      	ldr	r3, [r3, #8]
    6956:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    695a:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    695c:	9b00      	ldr	r3, [sp, #0]
    695e:	685b      	ldr	r3, [r3, #4]
    6960:	015b      	lsls	r3, r3, #5
    6962:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    6966:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    6968:	9b00      	ldr	r3, [sp, #0]
    696a:	68db      	ldr	r3, [r3, #12]
    696c:	0558      	lsls	r0, r3, #21
    696e:	4b07      	ldr	r3, [pc, #28]	; (698c <FlexCAN_SetExtendedTimeSegments+0x58>)
    6970:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    6972:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    6974:	9b00      	ldr	r3, [sp, #0]
    6976:	691b      	ldr	r3, [r3, #16]
    6978:	041b      	lsls	r3, r3, #16
    697a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    697e:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    6980:	431a      	orrs	r2, r3
    6982:	9b01      	ldr	r3, [sp, #4]
    6984:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    6986:	bf00      	nop
    6988:	b002      	add	sp, #8
    698a:	4770      	bx	lr
    698c:	7fe00000 	.word	0x7fe00000

00006990 <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    6990:	b082      	sub	sp, #8
    6992:	9001      	str	r0, [sp, #4]
    6994:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    6996:	9b01      	ldr	r3, [sp, #4]
    6998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    699a:	0d5b      	lsrs	r3, r3, #21
    699c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    69a0:	9b00      	ldr	r3, [sp, #0]
    69a2:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    69a4:	9b01      	ldr	r3, [sp, #4]
    69a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    69a8:	0a9b      	lsrs	r3, r3, #10
    69aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    69ae:	9b00      	ldr	r3, [sp, #0]
    69b0:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    69b2:	9b01      	ldr	r3, [sp, #4]
    69b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    69b6:	095b      	lsrs	r3, r3, #5
    69b8:	f003 021f 	and.w	r2, r3, #31
    69bc:	9b00      	ldr	r3, [sp, #0]
    69be:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    69c0:	9b01      	ldr	r3, [sp, #4]
    69c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    69c4:	f003 021f 	and.w	r2, r3, #31
    69c8:	9b00      	ldr	r3, [sp, #0]
    69ca:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    69cc:	9b01      	ldr	r3, [sp, #4]
    69ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    69d0:	0c1b      	lsrs	r3, r3, #16
    69d2:	f003 021f 	and.w	r2, r3, #31
    69d6:	9b00      	ldr	r3, [sp, #0]
    69d8:	611a      	str	r2, [r3, #16]
}
    69da:	bf00      	nop
    69dc:	b002      	add	sp, #8
    69de:	4770      	bx	lr

000069e0 <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    69e0:	b082      	sub	sp, #8
    69e2:	9001      	str	r0, [sp, #4]
    69e4:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    69e6:	9b01      	ldr	r3, [sp, #4]
    69e8:	685b      	ldr	r3, [r3, #4]
    69ea:	0e1b      	lsrs	r3, r3, #24
    69ec:	b2da      	uxtb	r2, r3
    69ee:	9b00      	ldr	r3, [sp, #0]
    69f0:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    69f2:	9b01      	ldr	r3, [sp, #4]
    69f4:	685b      	ldr	r3, [r3, #4]
    69f6:	f003 0207 	and.w	r2, r3, #7
    69fa:	9b00      	ldr	r3, [sp, #0]
    69fc:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    69fe:	9b01      	ldr	r3, [sp, #4]
    6a00:	685b      	ldr	r3, [r3, #4]
    6a02:	0cdb      	lsrs	r3, r3, #19
    6a04:	f003 0207 	and.w	r2, r3, #7
    6a08:	9b00      	ldr	r3, [sp, #0]
    6a0a:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    6a0c:	9b01      	ldr	r3, [sp, #4]
    6a0e:	685b      	ldr	r3, [r3, #4]
    6a10:	0c1b      	lsrs	r3, r3, #16
    6a12:	f003 0207 	and.w	r2, r3, #7
    6a16:	9b00      	ldr	r3, [sp, #0]
    6a18:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    6a1a:	9b01      	ldr	r3, [sp, #4]
    6a1c:	685b      	ldr	r3, [r3, #4]
    6a1e:	0d9b      	lsrs	r3, r3, #22
    6a20:	f003 0203 	and.w	r2, r3, #3
    6a24:	9b00      	ldr	r3, [sp, #0]
    6a26:	611a      	str	r2, [r3, #16]
}
    6a28:	bf00      	nop
    6a2a:	b002      	add	sp, #8
    6a2c:	4770      	bx	lr

00006a2e <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    6a2e:	b082      	sub	sp, #8
    6a30:	9001      	str	r0, [sp, #4]
    6a32:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    6a34:	9b01      	ldr	r3, [sp, #4]
    6a36:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    6a3a:	0d1b      	lsrs	r3, r3, #20
    6a3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    6a40:	9b00      	ldr	r3, [sp, #0]
    6a42:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    6a44:	9b01      	ldr	r3, [sp, #4]
    6a46:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    6a4a:	0a9b      	lsrs	r3, r3, #10
    6a4c:	f003 021f 	and.w	r2, r3, #31
    6a50:	9b00      	ldr	r3, [sp, #0]
    6a52:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    6a54:	9b01      	ldr	r3, [sp, #4]
    6a56:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    6a5a:	095b      	lsrs	r3, r3, #5
    6a5c:	f003 0207 	and.w	r2, r3, #7
    6a60:	9b00      	ldr	r3, [sp, #0]
    6a62:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    6a64:	9b01      	ldr	r3, [sp, #4]
    6a66:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    6a6a:	f003 0207 	and.w	r2, r3, #7
    6a6e:	9b00      	ldr	r3, [sp, #0]
    6a70:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    6a72:	9b01      	ldr	r3, [sp, #4]
    6a74:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    6a78:	0c1b      	lsrs	r3, r3, #16
    6a7a:	f003 0207 	and.w	r2, r3, #7
    6a7e:	9b00      	ldr	r3, [sp, #0]
    6a80:	611a      	str	r2, [r3, #16]
}
    6a82:	bf00      	nop
    6a84:	b002      	add	sp, #8
    6a86:	4770      	bx	lr

00006a88 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    6a88:	b082      	sub	sp, #8
    6a8a:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    6a8c:	9b01      	ldr	r3, [sp, #4]
    6a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6a90:	0fdb      	lsrs	r3, r3, #31
    6a92:	b2db      	uxtb	r3, r3
}
    6a94:	4618      	mov	r0, r3
    6a96:	b002      	add	sp, #8
    6a98:	4770      	bx	lr

00006a9a <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    6a9a:	b082      	sub	sp, #8
    6a9c:	9001      	str	r0, [sp, #4]
    6a9e:	460b      	mov	r3, r1
    6aa0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    6aa4:	9b01      	ldr	r3, [sp, #4]
    6aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    6aa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    6aac:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6ab0:	2a00      	cmp	r2, #0
    6ab2:	d002      	beq.n	6aba <FlexCAN_EnableExtCbt+0x20>
    6ab4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6ab8:	e000      	b.n	6abc <FlexCAN_EnableExtCbt+0x22>
    6aba:	2200      	movs	r2, #0
    6abc:	431a      	orrs	r2, r3
    6abe:	9b01      	ldr	r3, [sp, #4]
    6ac0:	651a      	str	r2, [r3, #80]	; 0x50
}
    6ac2:	bf00      	nop
    6ac4:	b002      	add	sp, #8
    6ac6:	4770      	bx	lr

00006ac8 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    6ac8:	b082      	sub	sp, #8
    6aca:	9001      	str	r0, [sp, #4]
    6acc:	460b      	mov	r3, r1
    6ace:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    6ad2:	9b01      	ldr	r3, [sp, #4]
    6ad4:	681b      	ldr	r3, [r3, #0]
    6ad6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    6ada:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6ade:	2a00      	cmp	r2, #0
    6ae0:	d001      	beq.n	6ae6 <FlexCAN_SetSelfReception+0x1e>
    6ae2:	2200      	movs	r2, #0
    6ae4:	e001      	b.n	6aea <FlexCAN_SetSelfReception+0x22>
    6ae6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6aea:	431a      	orrs	r2, r3
    6aec:	9b01      	ldr	r3, [sp, #4]
    6aee:	601a      	str	r2, [r3, #0]
}
    6af0:	bf00      	nop
    6af2:	b002      	add	sp, #8
    6af4:	4770      	bx	lr

00006af6 <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    6af6:	b082      	sub	sp, #8
    6af8:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    6afa:	9b01      	ldr	r3, [sp, #4]
    6afc:	681b      	ldr	r3, [r3, #0]
    6afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    6b02:	2b00      	cmp	r3, #0
    6b04:	bf14      	ite	ne
    6b06:	2301      	movne	r3, #1
    6b08:	2300      	moveq	r3, #0
    6b0a:	b2db      	uxtb	r3, r3
}
    6b0c:	4618      	mov	r0, r3
    6b0e:	b002      	add	sp, #8
    6b10:	4770      	bx	lr

00006b12 <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    6b12:	b082      	sub	sp, #8
    6b14:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    6b16:	9b01      	ldr	r3, [sp, #4]
    6b18:	685b      	ldr	r3, [r3, #4]
    6b1a:	f003 0308 	and.w	r3, r3, #8
    6b1e:	2b00      	cmp	r3, #0
    6b20:	bf14      	ite	ne
    6b22:	2301      	movne	r3, #1
    6b24:	2300      	moveq	r3, #0
    6b26:	b2db      	uxtb	r3, r3
}
    6b28:	4618      	mov	r0, r3
    6b2a:	b002      	add	sp, #8
    6b2c:	4770      	bx	lr

00006b2e <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    6b2e:	b082      	sub	sp, #8
    6b30:	4603      	mov	r3, r0
    6b32:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    6b36:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b3a:	3301      	adds	r3, #1
    6b3c:	00db      	lsls	r3, r3, #3
    6b3e:	089b      	lsrs	r3, r3, #2
    6b40:	3305      	adds	r3, #5
}
    6b42:	4618      	mov	r0, r3
    6b44:	b002      	add	sp, #8
    6b46:	4770      	bx	lr

00006b48 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    6b48:	b082      	sub	sp, #8
    6b4a:	9001      	str	r0, [sp, #4]
    6b4c:	460b      	mov	r3, r1
    6b4e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    6b52:	9b01      	ldr	r3, [sp, #4]
    6b54:	685b      	ldr	r3, [r3, #4]
    6b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    6b5a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    6b5e:	2a00      	cmp	r2, #0
    6b60:	d002      	beq.n	6b68 <FlexCAN_SetClkSrc+0x20>
    6b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    6b66:	e000      	b.n	6b6a <FlexCAN_SetClkSrc+0x22>
    6b68:	2200      	movs	r2, #0
    6b6a:	431a      	orrs	r2, r3
    6b6c:	9b01      	ldr	r3, [sp, #4]
    6b6e:	605a      	str	r2, [r3, #4]
}
    6b70:	bf00      	nop
    6b72:	b002      	add	sp, #8
    6b74:	4770      	bx	lr

00006b76 <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    6b76:	b084      	sub	sp, #16
    6b78:	9001      	str	r0, [sp, #4]
    6b7a:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    6b7c:	2300      	movs	r3, #0
    6b7e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    6b82:	9b00      	ldr	r3, [sp, #0]
    6b84:	2b1f      	cmp	r3, #31
    6b86:	d810      	bhi.n	6baa <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    6b88:	9b01      	ldr	r3, [sp, #4]
    6b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b8c:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    6b8e:	9b01      	ldr	r3, [sp, #4]
    6b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    6b92:	9b02      	ldr	r3, [sp, #8]
    6b94:	401a      	ands	r2, r3
    6b96:	9b00      	ldr	r3, [sp, #0]
    6b98:	f003 031f 	and.w	r3, r3, #31
    6b9c:	fa22 f303 	lsr.w	r3, r2, r3
    6ba0:	b2db      	uxtb	r3, r3
    6ba2:	f003 0301 	and.w	r3, r3, #1
    6ba6:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    6baa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6bae:	4618      	mov	r0, r3
    6bb0:	b004      	add	sp, #16
    6bb2:	4770      	bx	lr

00006bb4 <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    6bb4:	b082      	sub	sp, #8
    6bb6:	9001      	str	r0, [sp, #4]
    6bb8:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    6bba:	9b01      	ldr	r3, [sp, #4]
    6bbc:	9a00      	ldr	r2, [sp, #0]
    6bbe:	611a      	str	r2, [r3, #16]
}
    6bc0:	bf00      	nop
    6bc2:	b002      	add	sp, #8
    6bc4:	4770      	bx	lr

00006bc6 <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    6bc6:	b084      	sub	sp, #16
    6bc8:	9003      	str	r0, [sp, #12]
    6bca:	9102      	str	r1, [sp, #8]
    6bcc:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    6bce:	9b03      	ldr	r3, [sp, #12]
    6bd0:	9a02      	ldr	r2, [sp, #8]
    6bd2:	f502 7208 	add.w	r2, r2, #544	; 0x220
    6bd6:	9901      	ldr	r1, [sp, #4]
    6bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6bdc:	bf00      	nop
    6bde:	b004      	add	sp, #16
    6be0:	4770      	bx	lr

00006be2 <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    6be2:	b082      	sub	sp, #8
    6be4:	9001      	str	r0, [sp, #4]
    6be6:	460b      	mov	r3, r1
    6be8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    6bec:	9b01      	ldr	r3, [sp, #4]
    6bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6bf0:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    6bf4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6bf8:	04db      	lsls	r3, r3, #19
    6bfa:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    6bfe:	431a      	orrs	r2, r3
    6c00:	9b01      	ldr	r3, [sp, #4]
    6c02:	635a      	str	r2, [r3, #52]	; 0x34
}
    6c04:	bf00      	nop
    6c06:	b002      	add	sp, #8
    6c08:	4770      	bx	lr

00006c0a <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    6c0a:	b082      	sub	sp, #8
    6c0c:	9001      	str	r0, [sp, #4]
    6c0e:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    6c10:	9b00      	ldr	r3, [sp, #0]
    6c12:	2b00      	cmp	r3, #0
    6c14:	d106      	bne.n	6c24 <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    6c16:	9b01      	ldr	r3, [sp, #4]
    6c18:	681b      	ldr	r3, [r3, #0]
    6c1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    6c1e:	9b01      	ldr	r3, [sp, #4]
    6c20:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    6c22:	e005      	b.n	6c30 <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    6c24:	9b01      	ldr	r3, [sp, #4]
    6c26:	681b      	ldr	r3, [r3, #0]
    6c28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    6c2c:	9b01      	ldr	r3, [sp, #4]
    6c2e:	601a      	str	r2, [r3, #0]
}
    6c30:	bf00      	nop
    6c32:	b002      	add	sp, #8
    6c34:	4770      	bx	lr

00006c36 <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    6c36:	b500      	push	{lr}
    6c38:	b083      	sub	sp, #12
    6c3a:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    6c3c:	9801      	ldr	r0, [sp, #4]
    6c3e:	f002 ff15 	bl	9a6c <FlexCAN_IsFDAvailable>
    6c42:	4603      	mov	r3, r0
    6c44:	2b00      	cmp	r3, #0
    6c46:	d007      	beq.n	6c58 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    6c48:	9b01      	ldr	r3, [sp, #4]
    6c4a:	2200      	movs	r2, #0
    6c4c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    6c50:	9b01      	ldr	r3, [sp, #4]
    6c52:	4a12      	ldr	r2, [pc, #72]	; (6c9c <FlexCAN_SetRegDefaultVal+0x66>)
    6c54:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    6c58:	9b01      	ldr	r3, [sp, #4]
    6c5a:	f04f 32ff 	mov.w	r2, #4294967295
    6c5e:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    6c60:	9b01      	ldr	r3, [sp, #4]
    6c62:	2200      	movs	r2, #0
    6c64:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    6c66:	9b01      	ldr	r3, [sp, #4]
    6c68:	2200      	movs	r2, #0
    6c6a:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    6c6c:	9b01      	ldr	r3, [sp, #4]
    6c6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    6c72:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    6c74:	9b01      	ldr	r3, [sp, #4]
    6c76:	4a0a      	ldr	r2, [pc, #40]	; (6ca0 <FlexCAN_SetRegDefaultVal+0x6a>)
    6c78:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    6c7a:	9b01      	ldr	r3, [sp, #4]
    6c7c:	2200      	movs	r2, #0
    6c7e:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    6c80:	9b01      	ldr	r3, [sp, #4]
    6c82:	2200      	movs	r2, #0
    6c84:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    6c86:	9b01      	ldr	r3, [sp, #4]
    6c88:	2200      	movs	r2, #0
    6c8a:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    6c8c:	9b01      	ldr	r3, [sp, #4]
    6c8e:	4a05      	ldr	r2, [pc, #20]	; (6ca4 <FlexCAN_SetRegDefaultVal+0x6e>)
    6c90:	601a      	str	r2, [r3, #0]
}
    6c92:	bf00      	nop
    6c94:	b003      	add	sp, #12
    6c96:	f85d fb04 	ldr.w	pc, [sp], #4
    6c9a:	bf00      	nop
    6c9c:	80004100 	.word	0x80004100
    6ca0:	0003b006 	.word	0x0003b006
    6ca4:	d890000f 	.word	0xd890000f

00006ca8 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    6ca8:	b500      	push	{lr}
    6caa:	b085      	sub	sp, #20
    6cac:	9001      	str	r0, [sp, #4]
    6cae:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    6cb0:	2300      	movs	r3, #0
    6cb2:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    6cb4:	9b00      	ldr	r3, [sp, #0]
    6cb6:	7a1b      	ldrb	r3, [r3, #8]
    6cb8:	2b00      	cmp	r3, #0
    6cba:	d006      	beq.n	6cca <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    6cbc:	9b00      	ldr	r3, [sp, #0]
    6cbe:	685b      	ldr	r3, [r3, #4]
    6cc0:	4619      	mov	r1, r3
    6cc2:	9801      	ldr	r0, [sp, #4]
    6cc4:	f002 fe8e 	bl	99e4 <FlexCAN_EnableRxFifo>
    6cc8:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    6cca:	9b03      	ldr	r3, [sp, #12]
}
    6ccc:	4618      	mov	r0, r3
    6cce:	b005      	add	sp, #20
    6cd0:	f85d fb04 	ldr.w	pc, [sp], #4

00006cd4 <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    6cd4:	b500      	push	{lr}
    6cd6:	b085      	sub	sp, #20
    6cd8:	9001      	str	r0, [sp, #4]
    6cda:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    6cdc:	2300      	movs	r3, #0
    6cde:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    6ce0:	9b00      	ldr	r3, [sp, #0]
    6ce2:	68db      	ldr	r3, [r3, #12]
    6ce4:	2b02      	cmp	r3, #2
    6ce6:	d003      	beq.n	6cf0 <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    6ce8:	2100      	movs	r1, #0
    6cea:	9801      	ldr	r0, [sp, #4]
    6cec:	f7ff feec 	bl	6ac8 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    6cf0:	9900      	ldr	r1, [sp, #0]
    6cf2:	9801      	ldr	r0, [sp, #4]
    6cf4:	f7ff ffd8 	bl	6ca8 <FlexCAN_InitRxFifo>
    6cf8:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    6cfa:	9b03      	ldr	r3, [sp, #12]
    6cfc:	2b00      	cmp	r3, #0
    6cfe:	d006      	beq.n	6d0e <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    6d00:	9801      	ldr	r0, [sp, #4]
    6d02:	f002 fc93 	bl	962c <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    6d06:	9801      	ldr	r0, [sp, #4]
    6d08:	f002 fd5a 	bl	97c0 <FlexCAN_Disable>
    6d0c:	e00b      	b.n	6d26 <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    6d0e:	9b00      	ldr	r3, [sp, #0]
    6d10:	3314      	adds	r3, #20
    6d12:	4619      	mov	r1, r3
    6d14:	9801      	ldr	r0, [sp, #4]
    6d16:	f002 fecb 	bl	9ab0 <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    6d1a:	9b00      	ldr	r3, [sp, #0]
    6d1c:	681b      	ldr	r3, [r3, #0]
    6d1e:	4619      	mov	r1, r3
    6d20:	9801      	ldr	r0, [sp, #4]
    6d22:	f003 fa47 	bl	a1b4 <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    6d26:	9b03      	ldr	r3, [sp, #12]
}
    6d28:	4618      	mov	r0, r3
    6d2a:	b005      	add	sp, #20
    6d2c:	f85d fb04 	ldr.w	pc, [sp], #4

00006d30 <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    6d30:	b500      	push	{lr}
    6d32:	b087      	sub	sp, #28
    6d34:	4603      	mov	r3, r0
    6d36:	9102      	str	r1, [sp, #8]
    6d38:	9201      	str	r2, [sp, #4]
    6d3a:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    6d3e:	2300      	movs	r3, #0
    6d40:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    6d42:	9802      	ldr	r0, [sp, #8]
    6d44:	f7ff fd0c 	bl	6760 <FlexCAN_IsEnabled>
    6d48:	4603      	mov	r3, r0
    6d4a:	2b00      	cmp	r3, #0
    6d4c:	d00a      	beq.n	6d64 <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    6d4e:	9802      	ldr	r0, [sp, #8]
    6d50:	f002 fc6c 	bl	962c <FlexCAN_EnterFreezeMode>
    6d54:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    6d56:	9b05      	ldr	r3, [sp, #20]
    6d58:	2b00      	cmp	r3, #0
    6d5a:	d103      	bne.n	6d64 <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    6d5c:	9802      	ldr	r0, [sp, #8]
    6d5e:	f002 fd2f 	bl	97c0 <FlexCAN_Disable>
    6d62:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    6d64:	9b05      	ldr	r3, [sp, #20]
    6d66:	2b00      	cmp	r3, #0
    6d68:	d137      	bne.n	6dda <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    6d6a:	9b01      	ldr	r3, [sp, #4]
    6d6c:	7e5b      	ldrb	r3, [r3, #25]
    6d6e:	4619      	mov	r1, r3
    6d70:	9802      	ldr	r0, [sp, #8]
    6d72:	f7ff fee9 	bl	6b48 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    6d76:	9b02      	ldr	r3, [sp, #8]
    6d78:	681b      	ldr	r3, [r3, #0]
    6d7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    6d7e:	9b02      	ldr	r3, [sp, #8]
    6d80:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    6d82:	9802      	ldr	r0, [sp, #8]
    6d84:	f002 fdb8 	bl	98f8 <FlexCAN_Init>
    6d88:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    6d8a:	9b05      	ldr	r3, [sp, #20]
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	d006      	beq.n	6d9e <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    6d90:	9802      	ldr	r0, [sp, #8]
    6d92:	f002 fc4b 	bl	962c <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    6d96:	9802      	ldr	r0, [sp, #8]
    6d98:	f002 fd12 	bl	97c0 <FlexCAN_Disable>
    6d9c:	e01d      	b.n	6dda <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    6d9e:	9802      	ldr	r0, [sp, #8]
    6da0:	f002 fe64 	bl	9a6c <FlexCAN_IsFDAvailable>
    6da4:	4603      	mov	r3, r0
    6da6:	2b00      	cmp	r3, #0
    6da8:	d007      	beq.n	6dba <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    6daa:	9b01      	ldr	r3, [sp, #4]
    6dac:	7e19      	ldrb	r1, [r3, #24]
    6dae:	9b01      	ldr	r3, [sp, #4]
    6db0:	7edb      	ldrb	r3, [r3, #27]
    6db2:	461a      	mov	r2, r3
    6db4:	9802      	ldr	r0, [sp, #8]
    6db6:	f7ff fcdd 	bl	6774 <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    6dba:	9b01      	ldr	r3, [sp, #4]
    6dbc:	691b      	ldr	r3, [r3, #16]
    6dbe:	4619      	mov	r1, r3
    6dc0:	9802      	ldr	r0, [sp, #8]
    6dc2:	f003 fd7b 	bl	a8bc <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    6dc6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6dca:	4618      	mov	r0, r3
    6dcc:	f003 fde6 	bl	a99c <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    6dd0:	9901      	ldr	r1, [sp, #4]
    6dd2:	9802      	ldr	r0, [sp, #8]
    6dd4:	f7ff ff7e 	bl	6cd4 <FlexCAN_InitCtroll>
    6dd8:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    6dda:	9b05      	ldr	r3, [sp, #20]
}
    6ddc:	4618      	mov	r0, r3
    6dde:	b007      	add	sp, #28
    6de0:	f85d fb04 	ldr.w	pc, [sp], #4

00006de4 <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    6de4:	b500      	push	{lr}
    6de6:	b083      	sub	sp, #12
    6de8:	9001      	str	r0, [sp, #4]
    6dea:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    6dec:	9b00      	ldr	r3, [sp, #0]
    6dee:	7e1b      	ldrb	r3, [r3, #24]
    6df0:	4619      	mov	r1, r3
    6df2:	9801      	ldr	r0, [sp, #4]
    6df4:	f7ff fe51 	bl	6a9a <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    6df8:	9b00      	ldr	r3, [sp, #0]
    6dfa:	7e1b      	ldrb	r3, [r3, #24]
    6dfc:	2b00      	cmp	r3, #0
    6dfe:	d00c      	beq.n	6e1a <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    6e00:	9b00      	ldr	r3, [sp, #0]
    6e02:	331c      	adds	r3, #28
    6e04:	4619      	mov	r1, r3
    6e06:	9801      	ldr	r0, [sp, #4]
    6e08:	f7ff fd94 	bl	6934 <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    6e0c:	9b00      	ldr	r3, [sp, #0]
    6e0e:	3330      	adds	r3, #48	; 0x30
    6e10:	4619      	mov	r1, r3
    6e12:	9801      	ldr	r0, [sp, #4]
    6e14:	f7ff fd2d 	bl	6872 <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    6e18:	e005      	b.n	6e26 <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    6e1a:	9b00      	ldr	r3, [sp, #0]
    6e1c:	331c      	adds	r3, #28
    6e1e:	4619      	mov	r1, r3
    6e20:	9801      	ldr	r0, [sp, #4]
    6e22:	f7ff fd5b 	bl	68dc <FlexCAN_SetTimeSegments>
}
    6e26:	bf00      	nop
    6e28:	b003      	add	sp, #12
    6e2a:	f85d fb04 	ldr.w	pc, [sp], #4

00006e2e <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    6e2e:	b500      	push	{lr}
    6e30:	b08d      	sub	sp, #52	; 0x34
    6e32:	4603      	mov	r3, r0
    6e34:	9102      	str	r1, [sp, #8]
    6e36:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    6e3a:	2300      	movs	r3, #0
    6e3c:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    6e3e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e42:	4a46      	ldr	r2, [pc, #280]	; (6f5c <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    6e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e48:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    6e4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e4e:	4a44      	ldr	r2, [pc, #272]	; (6f60 <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    6e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e54:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    6e56:	2300      	movs	r3, #0
    6e58:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    6e5a:	2300      	movs	r3, #0
    6e5c:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    6e5e:	9b02      	ldr	r3, [sp, #8]
    6e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6e64:	fb02 f303 	mul.w	r3, r2, r3
    6e68:	2100      	movs	r1, #0
    6e6a:	4618      	mov	r0, r3
    6e6c:	f7f9 ff1f 	bl	cae <OsIf_MicrosToTicks>
    6e70:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    6e72:	2300      	movs	r3, #0
    6e74:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    6e76:	2000      	movs	r0, #0
    6e78:	f7f9 fecd 	bl	c16 <OsIf_GetCounter>
    6e7c:	4603      	mov	r3, r0
    6e7e:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    6e80:	e02a      	b.n	6ed8 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    6e82:	9b08      	ldr	r3, [sp, #32]
    6e84:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    6e88:	2b01      	cmp	r3, #1
    6e8a:	d115      	bne.n	6eb8 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    6e8c:	2307      	movs	r3, #7
    6e8e:	9309      	str	r3, [sp, #36]	; 0x24
    6e90:	e00f      	b.n	6eb2 <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    6e92:	9909      	ldr	r1, [sp, #36]	; 0x24
    6e94:	9807      	ldr	r0, [sp, #28]
    6e96:	f7ff fcd0 	bl	683a <FlexCAN_GetBuffStatusFlag>
    6e9a:	4603      	mov	r3, r0
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	d005      	beq.n	6eac <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    6ea0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
    6ea6:	4618      	mov	r0, r3
    6ea8:	f000 fb06 	bl	74b8 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    6eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6eae:	3b01      	subs	r3, #1
    6eb0:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    6eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6eb4:	2b04      	cmp	r3, #4
    6eb6:	d8ec      	bhi.n	6e92 <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    6eb8:	ab05      	add	r3, sp, #20
    6eba:	2100      	movs	r1, #0
    6ebc:	4618      	mov	r0, r3
    6ebe:	f7f9 fec3 	bl	c48 <OsIf_GetElapsed>
    6ec2:	4602      	mov	r2, r0
    6ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6ec6:	4413      	add	r3, r2
    6ec8:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    6eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6ecc:	9b06      	ldr	r3, [sp, #24]
    6ece:	429a      	cmp	r2, r3
    6ed0:	d302      	bcc.n	6ed8 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    6ed2:	2303      	movs	r3, #3
    6ed4:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    6ed6:	e003      	b.n	6ee0 <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    6ed8:	9b08      	ldr	r3, [sp, #32]
    6eda:	685b      	ldr	r3, [r3, #4]
    6edc:	2b01      	cmp	r3, #1
    6ede:	d0d0      	beq.n	6e82 <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    6ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6ee2:	2b03      	cmp	r3, #3
    6ee4:	d125      	bne.n	6f32 <FlexCAN_ProccessLegacyRxFIFO+0x104>
    6ee6:	9b08      	ldr	r3, [sp, #32]
    6ee8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    6eec:	2b01      	cmp	r3, #1
    6eee:	d020      	beq.n	6f32 <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    6ef0:	9b08      	ldr	r3, [sp, #32]
    6ef2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    6ef6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    6efa:	9300      	str	r3, [sp, #0]
    6efc:	2300      	movs	r3, #0
    6efe:	2205      	movs	r2, #5
    6f00:	9807      	ldr	r0, [sp, #28]
    6f02:	f002 fe7f 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    6f06:	9b08      	ldr	r3, [sp, #32]
    6f08:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    6f0c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    6f10:	9300      	str	r3, [sp, #0]
    6f12:	2300      	movs	r3, #0
    6f14:	2206      	movs	r2, #6
    6f16:	9807      	ldr	r0, [sp, #28]
    6f18:	f002 fe74 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    6f1c:	9b08      	ldr	r3, [sp, #32]
    6f1e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    6f22:	f89d 100f 	ldrb.w	r1, [sp, #15]
    6f26:	9300      	str	r3, [sp, #0]
    6f28:	2300      	movs	r3, #0
    6f2a:	2207      	movs	r2, #7
    6f2c:	9807      	ldr	r0, [sp, #28]
    6f2e:	f002 fe69 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    6f32:	9b08      	ldr	r3, [sp, #32]
    6f34:	685b      	ldr	r3, [r3, #4]
    6f36:	2b00      	cmp	r3, #0
    6f38:	d005      	beq.n	6f46 <FlexCAN_ProccessLegacyRxFIFO+0x118>
    6f3a:	2b01      	cmp	r3, #1
    6f3c:	d106      	bne.n	6f4c <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    6f3e:	9b08      	ldr	r3, [sp, #32]
    6f40:	2200      	movs	r2, #0
    6f42:	605a      	str	r2, [r3, #4]
                break;
    6f44:	e005      	b.n	6f52 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    6f46:	2300      	movs	r3, #0
    6f48:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    6f4a:	e002      	b.n	6f52 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    6f4c:	2301      	movs	r3, #1
    6f4e:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    6f50:	bf00      	nop
        }

    return eResult;
    6f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    6f54:	4618      	mov	r0, r3
    6f56:	b00d      	add	sp, #52	; 0x34
    6f58:	f85d fb04 	ldr.w	pc, [sp], #4
    6f5c:	1fff8f58 	.word	0x1fff8f58
    6f60:	0000c230 	.word	0x0000c230

00006f64 <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    6f64:	b084      	sub	sp, #16
    6f66:	9200      	str	r2, [sp, #0]
    6f68:	461a      	mov	r2, r3
    6f6a:	4603      	mov	r3, r0
    6f6c:	f88d 3007 	strb.w	r3, [sp, #7]
    6f70:	460b      	mov	r3, r1
    6f72:	f88d 3006 	strb.w	r3, [sp, #6]
    6f76:	4613      	mov	r3, r2
    6f78:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    6f7c:	2300      	movs	r3, #0
    6f7e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    6f80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f84:	4a15      	ldr	r2, [pc, #84]	; (6fdc <FlexCAN_StartRxMessageBufferData+0x78>)
    6f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f8a:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    6f8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6f90:	9a02      	ldr	r2, [sp, #8]
    6f92:	011b      	lsls	r3, r3, #4
    6f94:	4413      	add	r3, r2
    6f96:	3304      	adds	r3, #4
    6f98:	681b      	ldr	r3, [r3, #0]
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	d002      	beq.n	6fa4 <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    6f9e:	2302      	movs	r3, #2
    6fa0:	9303      	str	r3, [sp, #12]
    6fa2:	e017      	b.n	6fd4 <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    6fa4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6fa8:	9a02      	ldr	r2, [sp, #8]
    6faa:	011b      	lsls	r3, r3, #4
    6fac:	4413      	add	r3, r2
    6fae:	3304      	adds	r3, #4
    6fb0:	2201      	movs	r2, #1
    6fb2:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    6fb4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6fb8:	9a02      	ldr	r2, [sp, #8]
    6fba:	011b      	lsls	r3, r3, #4
    6fbc:	4413      	add	r3, r2
    6fbe:	9a00      	ldr	r2, [sp, #0]
    6fc0:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    6fc2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6fc6:	9a02      	ldr	r2, [sp, #8]
    6fc8:	011b      	lsls	r3, r3, #4
    6fca:	4413      	add	r3, r2
    6fcc:	3308      	adds	r3, #8
    6fce:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6fd2:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    6fd4:	9b03      	ldr	r3, [sp, #12]
}
    6fd6:	4618      	mov	r0, r3
    6fd8:	b004      	add	sp, #16
    6fda:	4770      	bx	lr
    6fdc:	1fff8f58 	.word	0x1fff8f58

00006fe0 <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    6fe0:	b500      	push	{lr}
    6fe2:	b08f      	sub	sp, #60	; 0x3c
    6fe4:	9204      	str	r2, [sp, #16]
    6fe6:	9303      	str	r3, [sp, #12]
    6fe8:	4603      	mov	r3, r0
    6fea:	f88d 3017 	strb.w	r3, [sp, #23]
    6fee:	460b      	mov	r3, r1
    6ff0:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    6ff4:	2300      	movs	r3, #0
    6ff6:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    6ff8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6ffc:	4a38      	ldr	r2, [pc, #224]	; (70e0 <FlexCAN_StartSendData+0x100>)
    6ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7002:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    7004:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7008:	4a36      	ldr	r2, [pc, #216]	; (70e4 <FlexCAN_StartSendData+0x104>)
    700a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    700e:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    7010:	2300      	movs	r3, #0
    7012:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    7014:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    701a:	011b      	lsls	r3, r3, #4
    701c:	4413      	add	r3, r2
    701e:	3304      	adds	r3, #4
    7020:	681b      	ldr	r3, [r3, #0]
    7022:	2b00      	cmp	r3, #0
    7024:	d002      	beq.n	702c <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    7026:	2302      	movs	r3, #2
    7028:	930d      	str	r3, [sp, #52]	; 0x34
    702a:	e053      	b.n	70d4 <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    702c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7030:	4619      	mov	r1, r3
    7032:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7034:	f7ff fbee 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    7038:	f89d 3016 	ldrb.w	r3, [sp, #22]
    703c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    703e:	011b      	lsls	r3, r3, #4
    7040:	4413      	add	r3, r2
    7042:	3304      	adds	r3, #4
    7044:	2202      	movs	r2, #2
    7046:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    7048:	f89d 3016 	ldrb.w	r3, [sp, #22]
    704c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    704e:	011b      	lsls	r3, r3, #4
    7050:	4413      	add	r3, r2
    7052:	330c      	adds	r3, #12
    7054:	2200      	movs	r2, #0
    7056:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    7058:	f89d 3016 	ldrb.w	r3, [sp, #22]
    705c:	9a04      	ldr	r2, [sp, #16]
    705e:	7b11      	ldrb	r1, [r2, #12]
    7060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7062:	011b      	lsls	r3, r3, #4
    7064:	4413      	add	r3, r2
    7066:	3308      	adds	r3, #8
    7068:	460a      	mov	r2, r1
    706a:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    706c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7070:	9a04      	ldr	r2, [sp, #16]
    7072:	7ad1      	ldrb	r1, [r2, #11]
    7074:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7076:	011b      	lsls	r3, r3, #4
    7078:	4413      	add	r3, r2
    707a:	3309      	adds	r3, #9
    707c:	460a      	mov	r2, r1
    707e:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    7080:	9b04      	ldr	r3, [sp, #16]
    7082:	685b      	ldr	r3, [r3, #4]
    7084:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    7086:	9b04      	ldr	r3, [sp, #16]
    7088:	681b      	ldr	r3, [r3, #0]
    708a:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    708c:	9b04      	ldr	r3, [sp, #16]
    708e:	7a1b      	ldrb	r3, [r3, #8]
    7090:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    7094:	9b04      	ldr	r3, [sp, #16]
    7096:	7a5b      	ldrb	r3, [r3, #9]
    7098:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    709c:	9b04      	ldr	r3, [sp, #16]
    709e:	7a9b      	ldrb	r3, [r3, #10]
    70a0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    70a4:	9b04      	ldr	r3, [sp, #16]
    70a6:	7adb      	ldrb	r3, [r3, #11]
    70a8:	2b00      	cmp	r3, #0
    70aa:	d002      	beq.n	70b2 <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    70ac:	231c      	movs	r3, #28
    70ae:	9306      	str	r3, [sp, #24]
    70b0:	e001      	b.n	70b6 <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    70b2:	230c      	movs	r3, #12
    70b4:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    70b6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    70ba:	4619      	mov	r1, r3
    70bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    70be:	f002 fa19 	bl	94f4 <FlexCAN_GetMsgBuffRegion>
    70c2:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    70c4:	a906      	add	r1, sp, #24
    70c6:	2300      	movs	r3, #0
    70c8:	9300      	str	r3, [sp, #0]
    70ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    70cc:	9a03      	ldr	r2, [sp, #12]
    70ce:	980a      	ldr	r0, [sp, #40]	; 0x28
    70d0:	f002 ff62 	bl	9f98 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    70d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    70d6:	4618      	mov	r0, r3
    70d8:	b00f      	add	sp, #60	; 0x3c
    70da:	f85d fb04 	ldr.w	pc, [sp], #4
    70de:	bf00      	nop
    70e0:	1fff8f58 	.word	0x1fff8f58
    70e4:	0000c230 	.word	0x0000c230

000070e8 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    70e8:	b500      	push	{lr}
    70ea:	b089      	sub	sp, #36	; 0x24
    70ec:	4603      	mov	r3, r0
    70ee:	9102      	str	r1, [sp, #8]
    70f0:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    70f4:	2300      	movs	r3, #0
    70f6:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    70f8:	2300      	movs	r3, #0
    70fa:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    70fc:	2300      	movs	r3, #0
    70fe:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    7100:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7104:	4a26      	ldr	r2, [pc, #152]	; (71a0 <FlexCAN_StartRxMessageFifoData+0xb8>)
    7106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    710a:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    710c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7110:	4a24      	ldr	r2, [pc, #144]	; (71a4 <FlexCAN_StartRxMessageFifoData+0xbc>)
    7112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7116:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    7118:	9b05      	ldr	r3, [sp, #20]
    711a:	685b      	ldr	r3, [r3, #4]
    711c:	2b01      	cmp	r3, #1
    711e:	d102      	bne.n	7126 <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    7120:	2302      	movs	r3, #2
    7122:	9307      	str	r3, [sp, #28]
    7124:	e036      	b.n	7194 <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    7126:	9b05      	ldr	r3, [sp, #20]
    7128:	2201      	movs	r2, #1
    712a:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    712c:	9b05      	ldr	r3, [sp, #20]
    712e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    7132:	2b01      	cmp	r3, #1
    7134:	d102      	bne.n	713c <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    7136:	9b05      	ldr	r3, [sp, #20]
    7138:	2201      	movs	r2, #1
    713a:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    713c:	9b05      	ldr	r3, [sp, #20]
    713e:	9a02      	ldr	r2, [sp, #8]
    7140:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    7142:	9b05      	ldr	r3, [sp, #20]
    7144:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    7148:	2b00      	cmp	r3, #0
    714a:	d123      	bne.n	7194 <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    714c:	9b05      	ldr	r3, [sp, #20]
    714e:	2200      	movs	r2, #0
    7150:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    7152:	9b05      	ldr	r3, [sp, #20]
    7154:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7158:	f89d 100f 	ldrb.w	r1, [sp, #15]
    715c:	9300      	str	r3, [sp, #0]
    715e:	2301      	movs	r3, #1
    7160:	2206      	movs	r2, #6
    7162:	9806      	ldr	r0, [sp, #24]
    7164:	f002 fd4e 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    7168:	9b05      	ldr	r3, [sp, #20]
    716a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    716e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7172:	9300      	str	r3, [sp, #0]
    7174:	2301      	movs	r3, #1
    7176:	2207      	movs	r2, #7
    7178:	9806      	ldr	r0, [sp, #24]
    717a:	f002 fd43 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    717e:	9b05      	ldr	r3, [sp, #20]
    7180:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7184:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7188:	9300      	str	r3, [sp, #0]
    718a:	2301      	movs	r3, #1
    718c:	2205      	movs	r2, #5
    718e:	9806      	ldr	r0, [sp, #24]
    7190:	f002 fd38 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    7194:	9b07      	ldr	r3, [sp, #28]
}
    7196:	4618      	mov	r0, r3
    7198:	b009      	add	sp, #36	; 0x24
    719a:	f85d fb04 	ldr.w	pc, [sp], #4
    719e:	bf00      	nop
    71a0:	0000c230 	.word	0x0000c230
    71a4:	1fff8f58 	.word	0x1fff8f58

000071a8 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    71a8:	b510      	push	{r4, lr}
    71aa:	b09e      	sub	sp, #120	; 0x78
    71ac:	4603      	mov	r3, r0
    71ae:	9102      	str	r1, [sp, #8]
    71b0:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    71b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    71b8:	4a70      	ldr	r2, [pc, #448]	; (737c <FlexCAN_IRQHandlerRxMB+0x1d4>)
    71ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71be:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    71c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    71c4:	4a6e      	ldr	r2, [pc, #440]	; (7380 <FlexCAN_IRQHandlerRxMB+0x1d8>)
    71c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71ca:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    71cc:	2300      	movs	r3, #0
    71ce:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    71d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    71d4:	9b02      	ldr	r3, [sp, #8]
    71d6:	011b      	lsls	r3, r3, #4
    71d8:	4413      	add	r3, r2
    71da:	681b      	ldr	r3, [r3, #0]
    71dc:	2b00      	cmp	r3, #0
    71de:	d105      	bne.n	71ec <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    71e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    71e2:	9b02      	ldr	r3, [sp, #8]
    71e4:	011b      	lsls	r3, r3, #4
    71e6:	4413      	add	r3, r2
    71e8:	aa05      	add	r2, sp, #20
    71ea:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    71ec:	2300      	movs	r3, #0
    71ee:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    71f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    71f4:	9b02      	ldr	r3, [sp, #8]
    71f6:	011b      	lsls	r3, r3, #4
    71f8:	4413      	add	r3, r2
    71fa:	3308      	adds	r3, #8
    71fc:	781b      	ldrb	r3, [r3, #0]
    71fe:	2b00      	cmp	r3, #0
    7200:	d008      	beq.n	7214 <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    7202:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7204:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    7208:	2b00      	cmp	r3, #0
    720a:	d003      	beq.n	7214 <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    720c:	2301      	movs	r3, #1
    720e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    7212:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    7214:	9902      	ldr	r1, [sp, #8]
    7216:	981c      	ldr	r0, [sp, #112]	; 0x70
    7218:	f002 fce5 	bl	9be6 <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    721c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    721e:	9b02      	ldr	r3, [sp, #8]
    7220:	011b      	lsls	r3, r3, #4
    7222:	4413      	add	r3, r2
    7224:	681b      	ldr	r3, [r3, #0]
    7226:	461a      	mov	r2, r3
    7228:	9902      	ldr	r1, [sp, #8]
    722a:	981c      	ldr	r0, [sp, #112]	; 0x70
    722c:	f002 fe0a 	bl	9e44 <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    7230:	9902      	ldr	r1, [sp, #8]
    7232:	981c      	ldr	r0, [sp, #112]	; 0x70
    7234:	f7ff faee 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    7238:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    723a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    723e:	2b00      	cmp	r3, #0
    7240:	d032      	beq.n	72a8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    7242:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7244:	9b02      	ldr	r3, [sp, #8]
    7246:	011b      	lsls	r3, r3, #4
    7248:	4413      	add	r3, r2
    724a:	681b      	ldr	r3, [r3, #0]
    724c:	681b      	ldr	r3, [r3, #0]
    724e:	0e1b      	lsrs	r3, r3, #24
    7250:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    7254:	2b02      	cmp	r3, #2
    7256:	d027      	beq.n	72a8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    7258:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    725a:	9b02      	ldr	r3, [sp, #8]
    725c:	011b      	lsls	r3, r3, #4
    725e:	4413      	add	r3, r2
    7260:	681b      	ldr	r3, [r3, #0]
    7262:	681b      	ldr	r3, [r3, #0]
    7264:	0e1b      	lsrs	r3, r3, #24
    7266:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    726a:	2b04      	cmp	r3, #4
    726c:	d01c      	beq.n	72a8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    726e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7270:	9b02      	ldr	r3, [sp, #8]
    7272:	011b      	lsls	r3, r3, #4
    7274:	4413      	add	r3, r2
    7276:	681b      	ldr	r3, [r3, #0]
    7278:	681b      	ldr	r3, [r3, #0]
    727a:	0e1b      	lsrs	r3, r3, #24
    727c:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    7280:	2b06      	cmp	r3, #6
    7282:	d011      	beq.n	72a8 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    7284:	9902      	ldr	r1, [sp, #8]
    7286:	981c      	ldr	r0, [sp, #112]	; 0x70
    7288:	f002 f934 	bl	94f4 <FlexCAN_GetMsgBuffRegion>
    728c:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    728e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7290:	681b      	ldr	r3, [r3, #0]
    7292:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    7296:	9b19      	ldr	r3, [sp, #100]	; 0x64
    7298:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    729a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    729c:	681b      	ldr	r3, [r3, #0]
    729e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    72a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    72a4:	601a      	str	r2, [r3, #0]
    {
    72a6:	e002      	b.n	72ae <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    72a8:	981c      	ldr	r0, [sp, #112]	; 0x70
    72aa:	f7ff faac 	bl	6806 <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    72ae:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    72b2:	2b00      	cmp	r3, #0
    72b4:	d000      	beq.n	72b8 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    72b6:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    72b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    72ba:	9b02      	ldr	r3, [sp, #8]
    72bc:	011b      	lsls	r3, r3, #4
    72be:	4413      	add	r3, r2
    72c0:	3304      	adds	r3, #4
    72c2:	2200      	movs	r2, #0
    72c4:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    72c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    72c8:	9b02      	ldr	r3, [sp, #8]
    72ca:	011b      	lsls	r3, r3, #4
    72cc:	4413      	add	r3, r2
    72ce:	3308      	adds	r3, #8
    72d0:	781b      	ldrb	r3, [r3, #0]
    72d2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    72d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    72d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    72dc:	2b00      	cmp	r3, #0
    72de:	d008      	beq.n	72f2 <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    72e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    72e2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    72e6:	f89d 000f 	ldrb.w	r0, [sp, #15]
    72ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    72ec:	9a02      	ldr	r2, [sp, #8]
    72ee:	2100      	movs	r1, #0
    72f0:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    72f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    72f4:	9b02      	ldr	r3, [sp, #8]
    72f6:	011b      	lsls	r3, r3, #4
    72f8:	4413      	add	r3, r2
    72fa:	3304      	adds	r3, #4
    72fc:	681b      	ldr	r3, [r3, #0]
    72fe:	2b00      	cmp	r3, #0
    7300:	d11e      	bne.n	7340 <FlexCAN_IRQHandlerRxMB+0x198>
    7302:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7304:	9b02      	ldr	r3, [sp, #8]
    7306:	011b      	lsls	r3, r3, #4
    7308:	4413      	add	r3, r2
    730a:	3308      	adds	r3, #8
    730c:	781b      	ldrb	r3, [r3, #0]
    730e:	f083 0301 	eor.w	r3, r3, #1
    7312:	b2db      	uxtb	r3, r3
    7314:	2b00      	cmp	r3, #0
    7316:	d013      	beq.n	7340 <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    7318:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    731a:	9b02      	ldr	r3, [sp, #8]
    731c:	011b      	lsls	r3, r3, #4
    731e:	4413      	add	r3, r2
    7320:	3308      	adds	r3, #8
    7322:	2201      	movs	r2, #1
    7324:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    7326:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7328:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    732c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7330:	9300      	str	r3, [sp, #0]
    7332:	2300      	movs	r3, #0
    7334:	9a02      	ldr	r2, [sp, #8]
    7336:	981c      	ldr	r0, [sp, #112]	; 0x70
    7338:	f002 fc64 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
    733c:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    733e:	e019      	b.n	7374 <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    7340:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    7344:	f083 0301 	eor.w	r3, r3, #1
    7348:	b2db      	uxtb	r3, r3
    734a:	2b00      	cmp	r3, #0
    734c:	d012      	beq.n	7374 <FlexCAN_IRQHandlerRxMB+0x1cc>
    734e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    7350:	9b02      	ldr	r3, [sp, #8]
    7352:	011b      	lsls	r3, r3, #4
    7354:	4413      	add	r3, r2
    7356:	3308      	adds	r3, #8
    7358:	781b      	ldrb	r3, [r3, #0]
    735a:	2b00      	cmp	r3, #0
    735c:	d00a      	beq.n	7374 <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    735e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    7360:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7364:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7368:	9300      	str	r3, [sp, #0]
    736a:	2300      	movs	r3, #0
    736c:	9a02      	ldr	r2, [sp, #8]
    736e:	981c      	ldr	r0, [sp, #112]	; 0x70
    7370:	f002 fc48 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
}
    7374:	bf00      	nop
    7376:	b01e      	add	sp, #120	; 0x78
    7378:	bd10      	pop	{r4, pc}
    737a:	bf00      	nop
    737c:	0000c230 	.word	0x0000c230
    7380:	1fff8f58 	.word	0x1fff8f58

00007384 <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    7384:	b510      	push	{r4, lr}
    7386:	b09a      	sub	sp, #104	; 0x68
    7388:	4603      	mov	r3, r0
    738a:	9102      	str	r1, [sp, #8]
    738c:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    7390:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7394:	4a46      	ldr	r2, [pc, #280]	; (74b0 <FlexCAN_IRQHandlerTxMB+0x12c>)
    7396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    739a:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    739c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    73a0:	4a44      	ldr	r2, [pc, #272]	; (74b4 <FlexCAN_IRQHandlerTxMB+0x130>)
    73a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73a6:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    73a8:	2300      	movs	r3, #0
    73aa:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    73ac:	2300      	movs	r3, #0
    73ae:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    73b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    73b2:	9b02      	ldr	r3, [sp, #8]
    73b4:	011b      	lsls	r3, r3, #4
    73b6:	4413      	add	r3, r2
    73b8:	3309      	adds	r3, #9
    73ba:	781b      	ldrb	r3, [r3, #0]
    73bc:	2b00      	cmp	r3, #0
    73be:	d01e      	beq.n	73fe <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    73c0:	9902      	ldr	r1, [sp, #8]
    73c2:	9819      	ldr	r0, [sp, #100]	; 0x64
    73c4:	f002 fc0f 	bl	9be6 <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    73c8:	ab04      	add	r3, sp, #16
    73ca:	461a      	mov	r2, r3
    73cc:	9902      	ldr	r1, [sp, #8]
    73ce:	9819      	ldr	r0, [sp, #100]	; 0x64
    73d0:	f002 fd38 	bl	9e44 <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    73d4:	9819      	ldr	r0, [sp, #100]	; 0x64
    73d6:	f7ff fa16 	bl	6806 <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    73da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    73dc:	9918      	ldr	r1, [sp, #96]	; 0x60
    73de:	9b02      	ldr	r3, [sp, #8]
    73e0:	011b      	lsls	r3, r3, #4
    73e2:	440b      	add	r3, r1
    73e4:	330c      	adds	r3, #12
    73e6:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    73e8:	9b04      	ldr	r3, [sp, #16]
    73ea:	0e1b      	lsrs	r3, r3, #24
    73ec:	f003 030f 	and.w	r3, r3, #15
    73f0:	2b04      	cmp	r3, #4
    73f2:	d116      	bne.n	7422 <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    73f4:	9902      	ldr	r1, [sp, #8]
    73f6:	9819      	ldr	r0, [sp, #100]	; 0x64
    73f8:	f7ff fa0c 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
    73fc:	e011      	b.n	7422 <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    73fe:	9902      	ldr	r1, [sp, #8]
    7400:	9819      	ldr	r0, [sp, #100]	; 0x64
    7402:	f002 fd0b 	bl	9e1c <FlexCAN_GetMsgBuffTimestamp>
    7406:	4601      	mov	r1, r0
    7408:	9a18      	ldr	r2, [sp, #96]	; 0x60
    740a:	9b02      	ldr	r3, [sp, #8]
    740c:	011b      	lsls	r3, r3, #4
    740e:	4413      	add	r3, r2
    7410:	330c      	adds	r3, #12
    7412:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    7414:	9819      	ldr	r0, [sp, #100]	; 0x64
    7416:	f7ff f9f6 	bl	6806 <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    741a:	9902      	ldr	r1, [sp, #8]
    741c:	9819      	ldr	r0, [sp, #100]	; 0x64
    741e:	f7ff f9f9 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    7422:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7424:	9b02      	ldr	r3, [sp, #8]
    7426:	011b      	lsls	r3, r3, #4
    7428:	4413      	add	r3, r2
    742a:	3304      	adds	r3, #4
    742c:	2200      	movs	r2, #0
    742e:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    7430:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7432:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    7436:	2b00      	cmp	r3, #0
    7438:	d008      	beq.n	744c <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    743a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    743c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    7440:	f89d 000f 	ldrb.w	r0, [sp, #15]
    7444:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7446:	9a02      	ldr	r2, [sp, #8]
    7448:	2104      	movs	r1, #4
    744a:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    744c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    744e:	9b02      	ldr	r3, [sp, #8]
    7450:	011b      	lsls	r3, r3, #4
    7452:	4413      	add	r3, r2
    7454:	3304      	adds	r3, #4
    7456:	681b      	ldr	r3, [r3, #0]
    7458:	2b00      	cmp	r3, #0
    745a:	d112      	bne.n	7482 <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    745c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    745e:	9b02      	ldr	r3, [sp, #8]
    7460:	011b      	lsls	r3, r3, #4
    7462:	4413      	add	r3, r2
    7464:	3308      	adds	r3, #8
    7466:	2201      	movs	r2, #1
    7468:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    746a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    746c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7470:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7474:	9300      	str	r3, [sp, #0]
    7476:	2300      	movs	r3, #0
    7478:	9a02      	ldr	r2, [sp, #8]
    747a:	9819      	ldr	r0, [sp, #100]	; 0x64
    747c:	f002 fbc2 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    7480:	e012      	b.n	74a8 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    7482:	9a18      	ldr	r2, [sp, #96]	; 0x60
    7484:	9b02      	ldr	r3, [sp, #8]
    7486:	011b      	lsls	r3, r3, #4
    7488:	4413      	add	r3, r2
    748a:	3308      	adds	r3, #8
    748c:	781b      	ldrb	r3, [r3, #0]
    748e:	2b00      	cmp	r3, #0
    7490:	d00a      	beq.n	74a8 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    7492:	9b18      	ldr	r3, [sp, #96]	; 0x60
    7494:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7498:	f89d 100f 	ldrb.w	r1, [sp, #15]
    749c:	9300      	str	r3, [sp, #0]
    749e:	2300      	movs	r3, #0
    74a0:	9a02      	ldr	r2, [sp, #8]
    74a2:	9819      	ldr	r0, [sp, #100]	; 0x64
    74a4:	f002 fbae 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
}
    74a8:	bf00      	nop
    74aa:	b01a      	add	sp, #104	; 0x68
    74ac:	bd10      	pop	{r4, pc}
    74ae:	bf00      	nop
    74b0:	0000c230 	.word	0x0000c230
    74b4:	1fff8f58 	.word	0x1fff8f58

000074b8 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    74b8:	b510      	push	{r4, lr}
    74ba:	b098      	sub	sp, #96	; 0x60
    74bc:	4603      	mov	r3, r0
    74be:	9100      	str	r1, [sp, #0]
    74c0:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    74c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74c8:	4a3c      	ldr	r2, [pc, #240]	; (75bc <FlexCAN_IRQHandlerRxFIFO+0x104>)
    74ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74ce:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    74d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74d4:	4a3a      	ldr	r2, [pc, #232]	; (75c0 <FlexCAN_IRQHandlerRxFIFO+0x108>)
    74d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    74da:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    74dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    74de:	681b      	ldr	r3, [r3, #0]
    74e0:	2b00      	cmp	r3, #0
    74e2:	d102      	bne.n	74ea <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    74e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    74e6:	aa02      	add	r2, sp, #8
    74e8:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    74ea:	9b00      	ldr	r3, [sp, #0]
    74ec:	2b07      	cmp	r3, #7
    74ee:	d048      	beq.n	7582 <FlexCAN_IRQHandlerRxFIFO+0xca>
    74f0:	9b00      	ldr	r3, [sp, #0]
    74f2:	2b07      	cmp	r3, #7
    74f4:	d858      	bhi.n	75a8 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    74f6:	9b00      	ldr	r3, [sp, #0]
    74f8:	2b05      	cmp	r3, #5
    74fa:	d003      	beq.n	7504 <FlexCAN_IRQHandlerRxFIFO+0x4c>
    74fc:	9b00      	ldr	r3, [sp, #0]
    74fe:	2b06      	cmp	r3, #6
    7500:	d02c      	beq.n	755c <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    7502:	e051      	b.n	75a8 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    7504:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7506:	685b      	ldr	r3, [r3, #4]
    7508:	2b01      	cmp	r3, #1
    750a:	d14f      	bne.n	75ac <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    750c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    750e:	681b      	ldr	r3, [r3, #0]
    7510:	4619      	mov	r1, r3
    7512:	9817      	ldr	r0, [sp, #92]	; 0x5c
    7514:	f003 f91d 	bl	a752 <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    7518:	9900      	ldr	r1, [sp, #0]
    751a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    751c:	f7ff f97a 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    7520:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7522:	2200      	movs	r2, #0
    7524:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    7526:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7528:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    752c:	2b00      	cmp	r3, #0
    752e:	d008      	beq.n	7542 <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    7530:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7532:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    7536:	f89d 0007 	ldrb.w	r0, [sp, #7]
    753a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    753c:	2200      	movs	r2, #0
    753e:	2101      	movs	r1, #1
    7540:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    7542:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7544:	685b      	ldr	r3, [r3, #4]
    7546:	2b00      	cmp	r3, #0
    7548:	d130      	bne.n	75ac <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    754a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    754c:	2201      	movs	r2, #1
    754e:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    7550:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7554:	4618      	mov	r0, r3
    7556:	f000 fbf1 	bl	7d3c <FlexCAN_CompleteRxMessageFifoData>
            break;
    755a:	e027      	b.n	75ac <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    755c:	9900      	ldr	r1, [sp, #0]
    755e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    7560:	f7ff f958 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    7564:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7566:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    756a:	2b00      	cmp	r3, #0
    756c:	d020      	beq.n	75b0 <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    756e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7570:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    7574:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7578:	9b16      	ldr	r3, [sp, #88]	; 0x58
    757a:	2200      	movs	r2, #0
    757c:	2102      	movs	r1, #2
    757e:	47a0      	blx	r4
            break;
    7580:	e016      	b.n	75b0 <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    7582:	9900      	ldr	r1, [sp, #0]
    7584:	9817      	ldr	r0, [sp, #92]	; 0x5c
    7586:	f7ff f945 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    758a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    758c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    7590:	2b00      	cmp	r3, #0
    7592:	d00f      	beq.n	75b4 <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    7594:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7596:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    759a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    759e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    75a0:	2200      	movs	r2, #0
    75a2:	2103      	movs	r1, #3
    75a4:	47a0      	blx	r4
            break;
    75a6:	e005      	b.n	75b4 <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    75a8:	bf00      	nop
    75aa:	e004      	b.n	75b6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    75ac:	bf00      	nop
    75ae:	e002      	b.n	75b6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    75b0:	bf00      	nop
    75b2:	e000      	b.n	75b6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    75b4:	bf00      	nop
    }
}
    75b6:	bf00      	nop
    75b8:	b018      	add	sp, #96	; 0x60
    75ba:	bd10      	pop	{r4, pc}
    75bc:	0000c230 	.word	0x0000c230
    75c0:	1fff8f58 	.word	0x1fff8f58

000075c4 <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    75c4:	b500      	push	{lr}
    75c6:	b08b      	sub	sp, #44	; 0x2c
    75c8:	4603      	mov	r3, r0
    75ca:	460a      	mov	r2, r1
    75cc:	f88d 3007 	strb.w	r3, [sp, #7]
    75d0:	4613      	mov	r3, r2
    75d2:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    75d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75da:	4a3c      	ldr	r2, [pc, #240]	; (76cc <FlexCAN_AbortTxTransfer+0x108>)
    75dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75e0:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    75e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75e6:	4a3a      	ldr	r2, [pc, #232]	; (76d0 <FlexCAN_AbortTxTransfer+0x10c>)
    75e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75ec:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    75ee:	2300      	movs	r3, #0
    75f0:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    75f2:	2300      	movs	r3, #0
    75f4:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    75f6:	2300      	movs	r3, #0
    75f8:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    75fa:	2300      	movs	r3, #0
    75fc:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    75fe:	2300      	movs	r3, #0
    7600:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    7602:	2300      	movs	r3, #0
    7604:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    7606:	f89d 3006 	ldrb.w	r3, [sp, #6]
    760a:	4619      	mov	r1, r3
    760c:	9807      	ldr	r0, [sp, #28]
    760e:	f001 ff71 	bl	94f4 <FlexCAN_GetMsgBuffRegion>
    7612:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    7614:	9b03      	ldr	r3, [sp, #12]
    7616:	681b      	ldr	r3, [r3, #0]
    7618:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    761a:	9b05      	ldr	r3, [sp, #20]
    761c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    7620:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    7622:	9b05      	ldr	r3, [sp, #20]
    7624:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    7628:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    762a:	9b03      	ldr	r3, [sp, #12]
    762c:	9a05      	ldr	r2, [sp, #20]
    762e:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7630:	2100      	movs	r1, #0
    7632:	4828      	ldr	r0, [pc, #160]	; (76d4 <FlexCAN_AbortTxTransfer+0x110>)
    7634:	f7f9 fb3b 	bl	cae <OsIf_MicrosToTicks>
    7638:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    763a:	2000      	movs	r0, #0
    763c:	f7f9 faeb 	bl	c16 <OsIf_GetCounter>
    7640:	4603      	mov	r3, r0
    7642:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    7644:	e00f      	b.n	7666 <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7646:	ab02      	add	r3, sp, #8
    7648:	2100      	movs	r1, #0
    764a:	4618      	mov	r0, r3
    764c:	f7f9 fafc 	bl	c48 <OsIf_GetElapsed>
    7650:	4602      	mov	r2, r0
    7652:	9b08      	ldr	r3, [sp, #32]
    7654:	4413      	add	r3, r2
    7656:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    7658:	9a08      	ldr	r2, [sp, #32]
    765a:	9b04      	ldr	r3, [sp, #16]
    765c:	429a      	cmp	r2, r3
    765e:	d302      	bcc.n	7666 <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    7660:	2303      	movs	r3, #3
    7662:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    7664:	e008      	b.n	7678 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    7666:	f89d 3006 	ldrb.w	r3, [sp, #6]
    766a:	4619      	mov	r1, r3
    766c:	9807      	ldr	r0, [sp, #28]
    766e:	f7ff f8e4 	bl	683a <FlexCAN_GetBuffStatusFlag>
    7672:	4603      	mov	r3, r0
    7674:	2b00      	cmp	r3, #0
    7676:	d0e6      	beq.n	7646 <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    7678:	9b09      	ldr	r3, [sp, #36]	; 0x24
    767a:	2b03      	cmp	r3, #3
    767c:	d012      	beq.n	76a4 <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    767e:	9b03      	ldr	r3, [sp, #12]
    7680:	681b      	ldr	r3, [r3, #0]
    7682:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    7684:	9b05      	ldr	r3, [sp, #20]
    7686:	0e1b      	lsrs	r3, r3, #24
    7688:	f003 030f 	and.w	r3, r3, #15
    768c:	2b08      	cmp	r3, #8
    768e:	d101      	bne.n	7694 <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    7690:	2305      	movs	r3, #5
    7692:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    7694:	9b05      	ldr	r3, [sp, #20]
    7696:	0e1b      	lsrs	r3, r3, #24
    7698:	f003 030f 	and.w	r3, r3, #15
    769c:	2b09      	cmp	r3, #9
    769e:	d101      	bne.n	76a4 <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    76a0:	2300      	movs	r3, #0
    76a2:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    76a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    76a8:	4619      	mov	r1, r3
    76aa:	9807      	ldr	r0, [sp, #28]
    76ac:	f7ff f8b2 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    76b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    76b4:	9a06      	ldr	r2, [sp, #24]
    76b6:	011b      	lsls	r3, r3, #4
    76b8:	4413      	add	r3, r2
    76ba:	3304      	adds	r3, #4
    76bc:	2200      	movs	r2, #0
    76be:	601a      	str	r2, [r3, #0]

    return result;
    76c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    76c2:	4618      	mov	r0, r3
    76c4:	b00b      	add	sp, #44	; 0x2c
    76c6:	f85d fb04 	ldr.w	pc, [sp], #4
    76ca:	bf00      	nop
    76cc:	0000c230 	.word	0x0000c230
    76d0:	1fff8f58 	.word	0x1fff8f58
    76d4:	000f4240 	.word	0x000f4240

000076d8 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    76d8:	b500      	push	{lr}
    76da:	b089      	sub	sp, #36	; 0x24
    76dc:	4603      	mov	r3, r0
    76de:	460a      	mov	r2, r1
    76e0:	f88d 3007 	strb.w	r3, [sp, #7]
    76e4:	4613      	mov	r3, r2
    76e6:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    76ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76ee:	4a41      	ldr	r2, [pc, #260]	; (77f4 <FlexCAN_AbortRxTransfer+0x11c>)
    76f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76f4:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    76f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76fa:	4a3f      	ldr	r2, [pc, #252]	; (77f8 <FlexCAN_AbortRxTransfer+0x120>)
    76fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7700:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    7702:	2300      	movs	r3, #0
    7704:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    7708:	2300      	movs	r3, #0
    770a:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    770c:	2300      	movs	r3, #0
    770e:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    7710:	2300      	movs	r3, #0
    7712:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    7714:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7718:	9a06      	ldr	r2, [sp, #24]
    771a:	011b      	lsls	r3, r3, #4
    771c:	4413      	add	r3, r2
    771e:	3304      	adds	r3, #4
    7720:	2200      	movs	r2, #0
    7722:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    7724:	9b06      	ldr	r3, [sp, #24]
    7726:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    772a:	2b00      	cmp	r3, #0
    772c:	d03c      	beq.n	77a8 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    772e:	9b07      	ldr	r3, [sp, #28]
    7730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7732:	0e1b      	lsrs	r3, r3, #24
    7734:	b2db      	uxtb	r3, r3
    7736:	f003 030f 	and.w	r3, r3, #15
    773a:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    773e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7742:	4618      	mov	r0, r3
    7744:	f7ff f9f3 	bl	6b2e <RxFifoOcuppiedLastMsgBuff>
    7748:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    774a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    774e:	9a04      	ldr	r2, [sp, #16]
    7750:	429a      	cmp	r2, r3
    7752:	d21b      	bcs.n	778c <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    7754:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7758:	4619      	mov	r1, r3
    775a:	9807      	ldr	r0, [sp, #28]
    775c:	f001 feca 	bl	94f4 <FlexCAN_GetMsgBuffRegion>
    7760:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    7762:	9b02      	ldr	r3, [sp, #8]
    7764:	681b      	ldr	r3, [r3, #0]
    7766:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    7768:	9b03      	ldr	r3, [sp, #12]
    776a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    776e:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    7770:	9b02      	ldr	r3, [sp, #8]
    7772:	9a03      	ldr	r2, [sp, #12]
    7774:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    7776:	9b03      	ldr	r3, [sp, #12]
    7778:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    777c:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    777e:	9b03      	ldr	r3, [sp, #12]
    7780:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    7784:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    7786:	9b02      	ldr	r3, [sp, #8]
    7788:	9a03      	ldr	r2, [sp, #12]
    778a:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    778c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7790:	2b00      	cmp	r3, #0
    7792:	d125      	bne.n	77e0 <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    7794:	9b06      	ldr	r3, [sp, #24]
    7796:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    779a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    779e:	2205      	movs	r2, #5
    77a0:	9807      	ldr	r0, [sp, #28]
    77a2:	f002 fa85 	bl	9cb0 <FLEXCAN_ClearMsgBuffIntCmd>
    77a6:	e01b      	b.n	77e0 <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    77a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    77ac:	4619      	mov	r1, r3
    77ae:	9807      	ldr	r0, [sp, #28]
    77b0:	f001 fea0 	bl	94f4 <FlexCAN_GetMsgBuffRegion>
    77b4:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    77b6:	9b02      	ldr	r3, [sp, #8]
    77b8:	681b      	ldr	r3, [r3, #0]
    77ba:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    77bc:	9b03      	ldr	r3, [sp, #12]
    77be:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    77c2:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    77c4:	9b02      	ldr	r3, [sp, #8]
    77c6:	9a03      	ldr	r2, [sp, #12]
    77c8:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    77ca:	9b03      	ldr	r3, [sp, #12]
    77cc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    77d0:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    77d2:	9b03      	ldr	r3, [sp, #12]
    77d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    77d8:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    77da:	9b02      	ldr	r3, [sp, #8]
    77dc:	9a03      	ldr	r2, [sp, #12]
    77de:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    77e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    77e4:	4619      	mov	r1, r3
    77e6:	9807      	ldr	r0, [sp, #28]
    77e8:	f7ff f814 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    77ec:	bf00      	nop
    77ee:	b009      	add	sp, #36	; 0x24
    77f0:	f85d fb04 	ldr.w	pc, [sp], #4
    77f4:	0000c230 	.word	0x0000c230
    77f8:	1fff8f58 	.word	0x1fff8f58

000077fc <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    77fc:	b500      	push	{lr}
    77fe:	b089      	sub	sp, #36	; 0x24
    7800:	4603      	mov	r3, r0
    7802:	9102      	str	r1, [sp, #8]
    7804:	9201      	str	r2, [sp, #4]
    7806:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    780a:	2300      	movs	r3, #0
    780c:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    780e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7812:	4a36      	ldr	r2, [pc, #216]	; (78ec <FlexCAN_Ip_Init_Privileged+0xf0>)
    7814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7818:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    781a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    781e:	9a01      	ldr	r2, [sp, #4]
    7820:	9905      	ldr	r1, [sp, #20]
    7822:	4618      	mov	r0, r3
    7824:	f7ff fa84 	bl	6d30 <FlexCAN_InitController>
    7828:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    782a:	9b06      	ldr	r3, [sp, #24]
    782c:	2b00      	cmp	r3, #0
    782e:	d158      	bne.n	78e2 <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    7830:	9901      	ldr	r1, [sp, #4]
    7832:	9805      	ldr	r0, [sp, #20]
    7834:	f7ff fad6 	bl	6de4 <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    7838:	9b01      	ldr	r3, [sp, #4]
    783a:	68db      	ldr	r3, [r3, #12]
    783c:	4619      	mov	r1, r3
    783e:	9805      	ldr	r0, [sp, #20]
    7840:	f002 fd48 	bl	a2d4 <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    7844:	2300      	movs	r3, #0
    7846:	9307      	str	r3, [sp, #28]
    7848:	e01d      	b.n	7886 <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    784a:	9a02      	ldr	r2, [sp, #8]
    784c:	9b07      	ldr	r3, [sp, #28]
    784e:	011b      	lsls	r3, r3, #4
    7850:	4413      	add	r3, r2
    7852:	3308      	adds	r3, #8
    7854:	2201      	movs	r2, #1
    7856:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    7858:	9a02      	ldr	r2, [sp, #8]
    785a:	9b07      	ldr	r3, [sp, #28]
    785c:	011b      	lsls	r3, r3, #4
    785e:	4413      	add	r3, r2
    7860:	2200      	movs	r2, #0
    7862:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    7864:	9a02      	ldr	r2, [sp, #8]
    7866:	9b07      	ldr	r3, [sp, #28]
    7868:	011b      	lsls	r3, r3, #4
    786a:	4413      	add	r3, r2
    786c:	3304      	adds	r3, #4
    786e:	2200      	movs	r2, #0
    7870:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    7872:	9a02      	ldr	r2, [sp, #8]
    7874:	9b07      	ldr	r3, [sp, #28]
    7876:	011b      	lsls	r3, r3, #4
    7878:	4413      	add	r3, r2
    787a:	330c      	adds	r3, #12
    787c:	2200      	movs	r2, #0
    787e:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    7880:	9b07      	ldr	r3, [sp, #28]
    7882:	3301      	adds	r3, #1
    7884:	9307      	str	r3, [sp, #28]
    7886:	9b07      	ldr	r3, [sp, #28]
    7888:	2b1f      	cmp	r3, #31
    788a:	d9de      	bls.n	784a <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    788c:	9b01      	ldr	r3, [sp, #4]
    788e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    7890:	9b02      	ldr	r3, [sp, #8]
    7892:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    7896:	9b01      	ldr	r3, [sp, #4]
    7898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    789a:	9b02      	ldr	r3, [sp, #8]
    789c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    78a0:	9b02      	ldr	r3, [sp, #8]
    78a2:	2200      	movs	r2, #0
    78a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    78a8:	9b01      	ldr	r3, [sp, #4]
    78aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    78ac:	9b02      	ldr	r3, [sp, #8]
    78ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    78b2:	9b02      	ldr	r3, [sp, #8]
    78b4:	2200      	movs	r2, #0
    78b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    78ba:	9b01      	ldr	r3, [sp, #4]
    78bc:	7a1a      	ldrb	r2, [r3, #8]
    78be:	9b02      	ldr	r3, [sp, #8]
    78c0:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    78c4:	9b01      	ldr	r3, [sp, #4]
    78c6:	681a      	ldr	r2, [r3, #0]
    78c8:	9b02      	ldr	r3, [sp, #8]
    78ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    78ce:	9b02      	ldr	r3, [sp, #8]
    78d0:	2201      	movs	r2, #1
    78d2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    78d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    78da:	4905      	ldr	r1, [pc, #20]	; (78f0 <FlexCAN_Ip_Init_Privileged+0xf4>)
    78dc:	9a02      	ldr	r2, [sp, #8]
    78de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    78e2:	9b06      	ldr	r3, [sp, #24]
}
    78e4:	4618      	mov	r0, r3
    78e6:	b009      	add	sp, #36	; 0x24
    78e8:	f85d fb04 	ldr.w	pc, [sp], #4
    78ec:	0000c230 	.word	0x0000c230
    78f0:	1fff8f58 	.word	0x1fff8f58

000078f4 <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    78f4:	b500      	push	{lr}
    78f6:	b089      	sub	sp, #36	; 0x24
    78f8:	9204      	str	r2, [sp, #16]
    78fa:	9303      	str	r3, [sp, #12]
    78fc:	4603      	mov	r3, r0
    78fe:	f88d 3017 	strb.w	r3, [sp, #23]
    7902:	460b      	mov	r3, r1
    7904:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    7908:	2301      	movs	r3, #1
    790a:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    790c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7910:	4a0e      	ldr	r2, [pc, #56]	; (794c <FlexCAN_Ip_Send+0x58>)
    7912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7916:	9306      	str	r3, [sp, #24]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    7918:	9806      	ldr	r0, [sp, #24]
    791a:	f7ff f8fa 	bl	6b12 <FlexCAN_IsListenOnlyModeEnabled>
    791e:	4603      	mov	r3, r0
    7920:	f083 0301 	eor.w	r3, r3, #1
    7924:	b2db      	uxtb	r3, r3
    7926:	2b00      	cmp	r3, #0
    7928:	d00a      	beq.n	7940 <FlexCAN_Ip_Send+0x4c>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    792a:	f89d 1016 	ldrb.w	r1, [sp, #22]
    792e:	f89d 0017 	ldrb.w	r0, [sp, #23]
    7932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7934:	9300      	str	r3, [sp, #0]
    7936:	9b03      	ldr	r3, [sp, #12]
    7938:	9a04      	ldr	r2, [sp, #16]
    793a:	f7ff fb51 	bl	6fe0 <FlexCAN_StartSendData>
    793e:	9007      	str	r0, [sp, #28]
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
        }
#endif
    }
    return result;
    7940:	9b07      	ldr	r3, [sp, #28]
}
    7942:	4618      	mov	r0, r3
    7944:	b009      	add	sp, #36	; 0x24
    7946:	f85d fb04 	ldr.w	pc, [sp], #4
    794a:	bf00      	nop
    794c:	0000c230 	.word	0x0000c230

00007950 <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    7950:	b500      	push	{lr}
    7952:	b08b      	sub	sp, #44	; 0x2c
    7954:	9202      	str	r2, [sp, #8]
    7956:	9301      	str	r3, [sp, #4]
    7958:	4603      	mov	r3, r0
    795a:	f88d 300f 	strb.w	r3, [sp, #15]
    795e:	460b      	mov	r3, r1
    7960:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    7964:	2300      	movs	r3, #0
    7966:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    7968:	f89d 300f 	ldrb.w	r3, [sp, #15]
    796c:	4a19      	ldr	r2, [pc, #100]	; (79d4 <FlexCAN_Ip_ConfigRxMb+0x84>)
    796e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7972:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    7974:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7978:	4619      	mov	r1, r3
    797a:	9808      	ldr	r0, [sp, #32]
    797c:	f7fe ff4a 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    7980:	9b02      	ldr	r3, [sp, #8]
    7982:	685b      	ldr	r3, [r3, #4]
    7984:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    7986:	9b02      	ldr	r3, [sp, #8]
    7988:	681b      	ldr	r3, [r3, #0]
    798a:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    798c:	9b02      	ldr	r3, [sp, #8]
    798e:	7a1b      	ldrb	r3, [r3, #8]
    7990:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    7994:	230f      	movs	r3, #15
    7996:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    7998:	f89d 100e 	ldrb.w	r1, [sp, #14]
    799c:	aa04      	add	r2, sp, #16
    799e:	9b01      	ldr	r3, [sp, #4]
    79a0:	9808      	ldr	r0, [sp, #32]
    79a2:	f002 f9d3 	bl	9d4c <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    79a6:	2300      	movs	r3, #0
    79a8:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    79aa:	f89d 100e 	ldrb.w	r1, [sp, #14]
    79ae:	aa04      	add	r2, sp, #16
    79b0:	9b01      	ldr	r3, [sp, #4]
    79b2:	9808      	ldr	r0, [sp, #32]
    79b4:	f002 f9ca 	bl	9d4c <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    79b8:	2304      	movs	r3, #4
    79ba:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    79bc:	f89d 100e 	ldrb.w	r1, [sp, #14]
    79c0:	aa04      	add	r2, sp, #16
    79c2:	9b01      	ldr	r3, [sp, #4]
    79c4:	9808      	ldr	r0, [sp, #32]
    79c6:	f002 f9c1 	bl	9d4c <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    79ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    79cc:	4618      	mov	r0, r3
    79ce:	b00b      	add	sp, #44	; 0x2c
    79d0:	f85d fb04 	ldr.w	pc, [sp], #4
    79d4:	0000c230 	.word	0x0000c230

000079d8 <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    79d8:	b500      	push	{lr}
    79da:	b085      	sub	sp, #20
    79dc:	9200      	str	r2, [sp, #0]
    79de:	461a      	mov	r2, r3
    79e0:	4603      	mov	r3, r0
    79e2:	f88d 3007 	strb.w	r3, [sp, #7]
    79e6:	460b      	mov	r3, r1
    79e8:	f88d 3006 	strb.w	r3, [sp, #6]
    79ec:	4613      	mov	r3, r2
    79ee:	f88d 3005 	strb.w	r3, [sp, #5]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    79f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    79f6:	f89d 1006 	ldrb.w	r1, [sp, #6]
    79fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
    79fe:	9a00      	ldr	r2, [sp, #0]
    7a00:	f7ff fab0 	bl	6f64 <FlexCAN_StartRxMessageBufferData>
    7a04:	9003      	str	r0, [sp, #12]
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    }
#endif
    return result;
    7a06:	9b03      	ldr	r3, [sp, #12]
}
    7a08:	4618      	mov	r0, r3
    7a0a:	b005      	add	sp, #20
    7a0c:	f85d fb04 	ldr.w	pc, [sp], #4

00007a10 <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    7a10:	b500      	push	{lr}
    7a12:	b089      	sub	sp, #36	; 0x24
    7a14:	9200      	str	r2, [sp, #0]
    7a16:	461a      	mov	r2, r3
    7a18:	4603      	mov	r3, r0
    7a1a:	f88d 3007 	strb.w	r3, [sp, #7]
    7a1e:	460b      	mov	r3, r1
    7a20:	f88d 3006 	strb.w	r3, [sp, #6]
    7a24:	4613      	mov	r3, r2
    7a26:	f88d 3005 	strb.w	r3, [sp, #5]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    7a2a:	2300      	movs	r3, #0
    7a2c:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    7a2e:	2300      	movs	r3, #0
    7a30:	9306      	str	r3, [sp, #24]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7a38:	fb02 f303 	mul.w	r3, r2, r3
    7a3c:	2100      	movs	r1, #0
    7a3e:	4618      	mov	r0, r3
    7a40:	f7f9 f935 	bl	cae <OsIf_MicrosToTicks>
    7a44:	9005      	str	r0, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    7a46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a4a:	4a37      	ldr	r2, [pc, #220]	; (7b28 <FlexCAN_Ip_ReceiveBlocking+0x118>)
    7a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a50:	9304      	str	r3, [sp, #16]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    7a52:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7a56:	4a35      	ldr	r2, [pc, #212]	; (7b2c <FlexCAN_Ip_ReceiveBlocking+0x11c>)
    7a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a5c:	9303      	str	r3, [sp, #12]
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    7a5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7a62:	f89d 1006 	ldrb.w	r1, [sp, #6]
    7a66:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7a6a:	9a00      	ldr	r2, [sp, #0]
    7a6c:	f7ff fa7a 	bl	6f64 <FlexCAN_StartRxMessageBufferData>
    7a70:	9007      	str	r0, [sp, #28]
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    7a72:	9b07      	ldr	r3, [sp, #28]
    7a74:	2b00      	cmp	r3, #0
    7a76:	d133      	bne.n	7ae0 <FlexCAN_Ip_ReceiveBlocking+0xd0>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7a78:	2000      	movs	r0, #0
    7a7a:	f7f9 f8cc 	bl	c16 <OsIf_GetCounter>
    7a7e:	4603      	mov	r3, r0
    7a80:	9302      	str	r3, [sp, #8]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    7a82:	e024      	b.n	7ace <FlexCAN_Ip_ReceiveBlocking+0xbe>
        {
            if (TRUE == isPolling)
    7a84:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7a88:	2b00      	cmp	r3, #0
    7a8a:	d010      	beq.n	7aae <FlexCAN_Ip_ReceiveBlocking+0x9e>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    7a8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7a90:	4619      	mov	r1, r3
    7a92:	9803      	ldr	r0, [sp, #12]
    7a94:	f7fe fed1 	bl	683a <FlexCAN_GetBuffStatusFlag>
    7a98:	4603      	mov	r3, r0
    7a9a:	2b00      	cmp	r3, #0
    7a9c:	d007      	beq.n	7aae <FlexCAN_Ip_ReceiveBlocking+0x9e>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    7a9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    7aa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7aa6:	4611      	mov	r1, r2
    7aa8:	4618      	mov	r0, r3
    7aaa:	f7ff fb7d 	bl	71a8 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    7aae:	ab02      	add	r3, sp, #8
    7ab0:	2100      	movs	r1, #0
    7ab2:	4618      	mov	r0, r3
    7ab4:	f7f9 f8c8 	bl	c48 <OsIf_GetElapsed>
    7ab8:	4602      	mov	r2, r0
    7aba:	9b06      	ldr	r3, [sp, #24]
    7abc:	4413      	add	r3, r2
    7abe:	9306      	str	r3, [sp, #24]
            if (timeElapsed >= mS2Ticks)
    7ac0:	9a06      	ldr	r2, [sp, #24]
    7ac2:	9b05      	ldr	r3, [sp, #20]
    7ac4:	429a      	cmp	r2, r3
    7ac6:	d302      	bcc.n	7ace <FlexCAN_Ip_ReceiveBlocking+0xbe>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    7ac8:	2303      	movs	r3, #3
    7aca:	9307      	str	r3, [sp, #28]
                break;
    7acc:	e008      	b.n	7ae0 <FlexCAN_Ip_ReceiveBlocking+0xd0>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    7ace:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7ad2:	9a04      	ldr	r2, [sp, #16]
    7ad4:	011b      	lsls	r3, r3, #4
    7ad6:	4413      	add	r3, r2
    7ad8:	3304      	adds	r3, #4
    7ada:	681b      	ldr	r3, [r3, #0]
    7adc:	2b01      	cmp	r3, #1
    7ade:	d0d1      	beq.n	7a84 <FlexCAN_Ip_ReceiveBlocking+0x74>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    7ae0:	9b07      	ldr	r3, [sp, #28]
    7ae2:	2b03      	cmp	r3, #3
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    7ae4:	9b07      	ldr	r3, [sp, #28]
    7ae6:	2b04      	cmp	r3, #4
    7ae8:	d018      	beq.n	7b1c <FlexCAN_Ip_ReceiveBlocking+0x10c>
    7aea:	9b07      	ldr	r3, [sp, #28]
    7aec:	2b02      	cmp	r3, #2
    7aee:	d015      	beq.n	7b1c <FlexCAN_Ip_ReceiveBlocking+0x10c>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    7af0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7af4:	9a04      	ldr	r2, [sp, #16]
    7af6:	011b      	lsls	r3, r3, #4
    7af8:	4413      	add	r3, r2
    7afa:	3304      	adds	r3, #4
    7afc:	681b      	ldr	r3, [r3, #0]
    7afe:	2b00      	cmp	r3, #0
    7b00:	d102      	bne.n	7b08 <FlexCAN_Ip_ReceiveBlocking+0xf8>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    7b02:	2300      	movs	r3, #0
    7b04:	9307      	str	r3, [sp, #28]
    7b06:	e009      	b.n	7b1c <FlexCAN_Ip_ReceiveBlocking+0x10c>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    7b08:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7b0c:	9a04      	ldr	r2, [sp, #16]
    7b0e:	011b      	lsls	r3, r3, #4
    7b10:	4413      	add	r3, r2
    7b12:	3304      	adds	r3, #4
    7b14:	2200      	movs	r2, #0
    7b16:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    7b18:	2303      	movs	r3, #3
    7b1a:	9307      	str	r3, [sp, #28]
        }
    }
    return result;
    7b1c:	9b07      	ldr	r3, [sp, #28]
}
    7b1e:	4618      	mov	r0, r3
    7b20:	b009      	add	sp, #36	; 0x24
    7b22:	f85d fb04 	ldr.w	pc, [sp], #4
    7b26:	bf00      	nop
    7b28:	1fff8f58 	.word	0x1fff8f58
    7b2c:	0000c230 	.word	0x0000c230

00007b30 <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    7b30:	b500      	push	{lr}
    7b32:	b085      	sub	sp, #20
    7b34:	4603      	mov	r3, r0
    7b36:	9100      	str	r1, [sp, #0]
    7b38:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    7b3c:	2300      	movs	r3, #0
    7b3e:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    7b40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b44:	9900      	ldr	r1, [sp, #0]
    7b46:	4618      	mov	r0, r3
    7b48:	f7ff face 	bl	70e8 <FlexCAN_StartRxMessageFifoData>
    7b4c:	9003      	str	r0, [sp, #12]
    }
    return result;
    7b4e:	9b03      	ldr	r3, [sp, #12]
}
    7b50:	4618      	mov	r0, r3
    7b52:	b005      	add	sp, #20
    7b54:	f85d fb04 	ldr.w	pc, [sp], #4

00007b58 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    7b58:	b500      	push	{lr}
    7b5a:	b087      	sub	sp, #28
    7b5c:	4603      	mov	r3, r0
    7b5e:	9102      	str	r1, [sp, #8]
    7b60:	9201      	str	r2, [sp, #4]
    7b62:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    7b66:	2300      	movs	r3, #0
    7b68:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    7b6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7b6e:	9902      	ldr	r1, [sp, #8]
    7b70:	4618      	mov	r0, r3
    7b72:	f7ff fab9 	bl	70e8 <FlexCAN_StartRxMessageFifoData>
    7b76:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    7b78:	9b05      	ldr	r3, [sp, #20]
    7b7a:	2b00      	cmp	r3, #0
    7b7c:	d106      	bne.n	7b8c <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    7b7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7b82:	9901      	ldr	r1, [sp, #4]
    7b84:	4618      	mov	r0, r3
    7b86:	f7ff f952 	bl	6e2e <FlexCAN_ProccessLegacyRxFIFO>
    7b8a:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    7b8c:	9b05      	ldr	r3, [sp, #20]
}
    7b8e:	4618      	mov	r0, r3
    7b90:	b007      	add	sp, #28
    7b92:	f85d fb04 	ldr.w	pc, [sp], #4

00007b96 <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    7b96:	b500      	push	{lr}
    7b98:	b089      	sub	sp, #36	; 0x24
    7b9a:	4603      	mov	r3, r0
    7b9c:	9102      	str	r1, [sp, #8]
    7b9e:	9201      	str	r2, [sp, #4]
    7ba0:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    7ba4:	2300      	movs	r3, #0
    7ba6:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    7ba8:	2300      	movs	r3, #0
    7baa:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    7bac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7bb0:	4a1c      	ldr	r2, [pc, #112]	; (7c24 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    7bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bb6:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    7bb8:	9805      	ldr	r0, [sp, #20]
    7bba:	f7fe fdd1 	bl	6760 <FlexCAN_IsEnabled>
    7bbe:	4603      	mov	r3, r0
    7bc0:	2b00      	cmp	r3, #0
    7bc2:	bf14      	ite	ne
    7bc4:	2301      	movne	r3, #1
    7bc6:	2300      	moveq	r3, #0
    7bc8:	b2db      	uxtb	r3, r3
    7bca:	f083 0301 	eor.w	r3, r3, #1
    7bce:	b2db      	uxtb	r3, r3
    7bd0:	f88d 3013 	strb.w	r3, [sp, #19]
    7bd4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7bd8:	f003 0301 	and.w	r3, r3, #1
    7bdc:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    7be0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7be4:	2b00      	cmp	r3, #0
    7be6:	d003      	beq.n	7bf0 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    7be8:	9805      	ldr	r0, [sp, #20]
    7bea:	f001 fd6b 	bl	96c4 <FlexCAN_Enable>
    7bee:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    7bf0:	9b07      	ldr	r3, [sp, #28]
    7bf2:	2b00      	cmp	r3, #0
    7bf4:	d104      	bne.n	7c00 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    7bf6:	9a01      	ldr	r2, [sp, #4]
    7bf8:	9902      	ldr	r1, [sp, #8]
    7bfa:	9805      	ldr	r0, [sp, #20]
    7bfc:	f002 fba5 	bl	a34a <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    7c00:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7c04:	2b00      	cmp	r3, #0
    7c06:	d008      	beq.n	7c1a <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    7c08:	9805      	ldr	r0, [sp, #20]
    7c0a:	f001 fdd9 	bl	97c0 <FlexCAN_Disable>
    7c0e:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    7c10:	9b06      	ldr	r3, [sp, #24]
    7c12:	2b00      	cmp	r3, #0
    7c14:	d001      	beq.n	7c1a <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    7c16:	9b06      	ldr	r3, [sp, #24]
    7c18:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    7c1a:	9b07      	ldr	r3, [sp, #28]
}
    7c1c:	4618      	mov	r0, r3
    7c1e:	b009      	add	sp, #36	; 0x24
    7c20:	f85d fb04 	ldr.w	pc, [sp], #4
    7c24:	0000c230 	.word	0x0000c230

00007c28 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    7c28:	b500      	push	{lr}
    7c2a:	b08f      	sub	sp, #60	; 0x3c
    7c2c:	9204      	str	r2, [sp, #16]
    7c2e:	9303      	str	r3, [sp, #12]
    7c30:	4603      	mov	r3, r0
    7c32:	f88d 3017 	strb.w	r3, [sp, #23]
    7c36:	460b      	mov	r3, r1
    7c38:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    7c3c:	2300      	movs	r3, #0
    7c3e:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    7c40:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7c44:	4a27      	ldr	r2, [pc, #156]	; (7ce4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    7c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c4a:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    7c4c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7c50:	4a25      	ldr	r2, [pc, #148]	; (7ce8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    7c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7c56:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    7c58:	2300      	movs	r3, #0
    7c5a:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    7c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7c5e:	2b00      	cmp	r3, #0
    7c60:	d13a      	bne.n	7cd8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    7c62:	9b04      	ldr	r3, [sp, #16]
    7c64:	685b      	ldr	r3, [r3, #4]
    7c66:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    7c68:	9b04      	ldr	r3, [sp, #16]
    7c6a:	681b      	ldr	r3, [r3, #0]
    7c6c:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    7c6e:	230a      	movs	r3, #10
    7c70:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    7c72:	2300      	movs	r3, #0
    7c74:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    7c78:	2300      	movs	r3, #0
    7c7a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    7c7e:	2300      	movs	r3, #0
    7c80:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    7c84:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7c88:	4619      	mov	r1, r3
    7c8a:	980c      	ldr	r0, [sp, #48]	; 0x30
    7c8c:	f7fe fdc2 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    7c90:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7c94:	4619      	mov	r1, r3
    7c96:	980c      	ldr	r0, [sp, #48]	; 0x30
    7c98:	f001 fc2c 	bl	94f4 <FlexCAN_GetMsgBuffRegion>
    7c9c:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    7c9e:	9b04      	ldr	r3, [sp, #16]
    7ca0:	7adb      	ldrb	r3, [r3, #11]
    7ca2:	a906      	add	r1, sp, #24
    7ca4:	9300      	str	r3, [sp, #0]
    7ca6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7ca8:	9a03      	ldr	r2, [sp, #12]
    7caa:	980a      	ldr	r0, [sp, #40]	; 0x28
    7cac:	f002 f974 	bl	9f98 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    7cb0:	9b04      	ldr	r3, [sp, #16]
    7cb2:	7b1b      	ldrb	r3, [r3, #12]
    7cb4:	f083 0301 	eor.w	r3, r3, #1
    7cb8:	b2db      	uxtb	r3, r3
    7cba:	2b00      	cmp	r3, #0
    7cbc:	d00c      	beq.n	7cd8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    7cbe:	f89d 2016 	ldrb.w	r2, [sp, #22]
    7cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7cc4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7cc8:	f89d 1017 	ldrb.w	r1, [sp, #23]
    7ccc:	9300      	str	r3, [sp, #0]
    7cce:	2301      	movs	r3, #1
    7cd0:	980c      	ldr	r0, [sp, #48]	; 0x30
    7cd2:	f001 ff97 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
    7cd6:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    7cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    7cda:	4618      	mov	r0, r3
    7cdc:	b00f      	add	sp, #60	; 0x3c
    7cde:	f85d fb04 	ldr.w	pc, [sp], #4
    7ce2:	bf00      	nop
    7ce4:	0000c230 	.word	0x0000c230
    7ce8:	1fff8f58 	.word	0x1fff8f58

00007cec <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    7cec:	b084      	sub	sp, #16
    7cee:	4603      	mov	r3, r0
    7cf0:	460a      	mov	r2, r1
    7cf2:	f88d 3007 	strb.w	r3, [sp, #7]
    7cf6:	4613      	mov	r3, r2
    7cf8:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    7cfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d00:	4a0d      	ldr	r2, [pc, #52]	; (7d38 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    7d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d06:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    7d08:	2301      	movs	r3, #1
    7d0a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    7d0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d10:	2b1f      	cmp	r3, #31
    7d12:	d80d      	bhi.n	7d30 <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    7d14:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7d18:	9a02      	ldr	r2, [sp, #8]
    7d1a:	011b      	lsls	r3, r3, #4
    7d1c:	4413      	add	r3, r2
    7d1e:	3304      	adds	r3, #4
    7d20:	681b      	ldr	r3, [r3, #0]
    7d22:	2b00      	cmp	r3, #0
    7d24:	d102      	bne.n	7d2c <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    7d26:	2300      	movs	r3, #0
    7d28:	9303      	str	r3, [sp, #12]
    7d2a:	e001      	b.n	7d30 <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    7d2c:	2302      	movs	r3, #2
    7d2e:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    7d30:	9b03      	ldr	r3, [sp, #12]
}
    7d32:	4618      	mov	r0, r3
    7d34:	b004      	add	sp, #16
    7d36:	4770      	bx	lr
    7d38:	1fff8f58 	.word	0x1fff8f58

00007d3c <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    7d3c:	b500      	push	{lr}
    7d3e:	b087      	sub	sp, #28
    7d40:	4603      	mov	r3, r0
    7d42:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    7d46:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d4a:	4a1d      	ldr	r2, [pc, #116]	; (7dc0 <FlexCAN_CompleteRxMessageFifoData+0x84>)
    7d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d50:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    7d52:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7d56:	4a1b      	ldr	r2, [pc, #108]	; (7dc4 <FlexCAN_CompleteRxMessageFifoData+0x88>)
    7d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7d5c:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    7d5e:	9b04      	ldr	r3, [sp, #16]
    7d60:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    7d64:	2b00      	cmp	r3, #0
    7d66:	d120      	bne.n	7daa <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    7d68:	9b04      	ldr	r3, [sp, #16]
    7d6a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7d6e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7d72:	9300      	str	r3, [sp, #0]
    7d74:	2300      	movs	r3, #0
    7d76:	2205      	movs	r2, #5
    7d78:	9805      	ldr	r0, [sp, #20]
    7d7a:	f001 ff43 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    7d7e:	9b04      	ldr	r3, [sp, #16]
    7d80:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7d84:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7d88:	9300      	str	r3, [sp, #0]
    7d8a:	2300      	movs	r3, #0
    7d8c:	2206      	movs	r2, #6
    7d8e:	9805      	ldr	r0, [sp, #20]
    7d90:	f001 ff38 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    7d94:	9b04      	ldr	r3, [sp, #16]
    7d96:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    7d9a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    7d9e:	9300      	str	r3, [sp, #0]
    7da0:	2300      	movs	r3, #0
    7da2:	2207      	movs	r2, #7
    7da4:	9805      	ldr	r0, [sp, #20]
    7da6:	f001 ff2d 	bl	9c04 <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    7daa:	9b04      	ldr	r3, [sp, #16]
    7dac:	2200      	movs	r2, #0
    7dae:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    7db0:	9b04      	ldr	r3, [sp, #16]
    7db2:	2200      	movs	r2, #0
    7db4:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    7db6:	bf00      	nop
    7db8:	b007      	add	sp, #28
    7dba:	f85d fb04 	ldr.w	pc, [sp], #4
    7dbe:	bf00      	nop
    7dc0:	0000c230 	.word	0x0000c230
    7dc4:	1fff8f58 	.word	0x1fff8f58

00007dc8 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    7dc8:	b500      	push	{lr}
    7dca:	b08b      	sub	sp, #44	; 0x2c
    7dcc:	4603      	mov	r3, r0
    7dce:	9102      	str	r1, [sp, #8]
    7dd0:	9201      	str	r2, [sp, #4]
    7dd2:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    7dd6:	2300      	movs	r3, #0
    7dd8:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    7dda:	2300      	movs	r3, #0
    7ddc:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    7dde:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7de2:	4a3f      	ldr	r2, [pc, #252]	; (7ee0 <FlexCAN_IRQHandler+0x118>)
    7de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7de8:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    7dea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7dee:	4a3d      	ldr	r2, [pc, #244]	; (7ee4 <FlexCAN_IRQHandler+0x11c>)
    7df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7df4:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    7df6:	9b01      	ldr	r3, [sp, #4]
    7df8:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    7dfa:	9b05      	ldr	r3, [sp, #20]
    7dfc:	2b00      	cmp	r3, #0
    7dfe:	d05c      	beq.n	7eba <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    7e00:	9907      	ldr	r1, [sp, #28]
    7e02:	9806      	ldr	r0, [sp, #24]
    7e04:	f7fe feb7 	bl	6b76 <FlexCAN_GetMsgBuffIntStatusFlag>
    7e08:	4603      	mov	r3, r0
    7e0a:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    7e0c:	e008      	b.n	7e20 <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    7e0e:	9b07      	ldr	r3, [sp, #28]
    7e10:	3b01      	subs	r3, #1
    7e12:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    7e14:	9907      	ldr	r1, [sp, #28]
    7e16:	9806      	ldr	r0, [sp, #24]
    7e18:	f7fe fead 	bl	6b76 <FlexCAN_GetMsgBuffIntStatusFlag>
    7e1c:	4603      	mov	r3, r0
    7e1e:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    7e20:	9b08      	ldr	r3, [sp, #32]
    7e22:	2b00      	cmp	r3, #0
    7e24:	d103      	bne.n	7e2e <FlexCAN_IRQHandler+0x66>
    7e26:	9a07      	ldr	r2, [sp, #28]
    7e28:	9b02      	ldr	r3, [sp, #8]
    7e2a:	429a      	cmp	r2, r3
    7e2c:	d8ef      	bhi.n	7e0e <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    7e2e:	9b08      	ldr	r3, [sp, #32]
    7e30:	2b00      	cmp	r3, #0
    7e32:	d050      	beq.n	7ed6 <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    7e34:	9b07      	ldr	r3, [sp, #28]
    7e36:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    7e38:	9b05      	ldr	r3, [sp, #20]
    7e3a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    7e3e:	2b00      	cmp	r3, #0
    7e40:	d00b      	beq.n	7e5a <FlexCAN_IRQHandler+0x92>
    7e42:	9b07      	ldr	r3, [sp, #28]
    7e44:	2b07      	cmp	r3, #7
    7e46:	d808      	bhi.n	7e5a <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    7e48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e4c:	9907      	ldr	r1, [sp, #28]
    7e4e:	4618      	mov	r0, r3
    7e50:	f7ff fb32 	bl	74b8 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    7e54:	2300      	movs	r3, #0
    7e56:	9309      	str	r3, [sp, #36]	; 0x24
    7e58:	e00d      	b.n	7e76 <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    7e5a:	9a05      	ldr	r2, [sp, #20]
    7e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7e5e:	011b      	lsls	r3, r3, #4
    7e60:	4413      	add	r3, r2
    7e62:	3304      	adds	r3, #4
    7e64:	681b      	ldr	r3, [r3, #0]
    7e66:	2b01      	cmp	r3, #1
    7e68:	d105      	bne.n	7e76 <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    7e6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e6e:	9907      	ldr	r1, [sp, #28]
    7e70:	4618      	mov	r0, r3
    7e72:	f7ff f999 	bl	71a8 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    7e76:	9a05      	ldr	r2, [sp, #20]
    7e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7e7a:	011b      	lsls	r3, r3, #4
    7e7c:	4413      	add	r3, r2
    7e7e:	3304      	adds	r3, #4
    7e80:	681b      	ldr	r3, [r3, #0]
    7e82:	2b02      	cmp	r3, #2
    7e84:	d105      	bne.n	7e92 <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    7e86:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7e8a:	9907      	ldr	r1, [sp, #28]
    7e8c:	4618      	mov	r0, r3
    7e8e:	f7ff fa79 	bl	7384 <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    7e92:	9907      	ldr	r1, [sp, #28]
    7e94:	9806      	ldr	r0, [sp, #24]
    7e96:	f7fe fe6e 	bl	6b76 <FlexCAN_GetMsgBuffIntStatusFlag>
    7e9a:	4603      	mov	r3, r0
    7e9c:	2b00      	cmp	r3, #0
    7e9e:	d01a      	beq.n	7ed6 <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    7ea0:	9a05      	ldr	r2, [sp, #20]
    7ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7ea4:	011b      	lsls	r3, r3, #4
    7ea6:	4413      	add	r3, r2
    7ea8:	3304      	adds	r3, #4
    7eaa:	681b      	ldr	r3, [r3, #0]
    7eac:	2b00      	cmp	r3, #0
    7eae:	d112      	bne.n	7ed6 <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    7eb0:	9907      	ldr	r1, [sp, #28]
    7eb2:	9806      	ldr	r0, [sp, #24]
    7eb4:	f7fe fcae 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    7eb8:	e00d      	b.n	7ed6 <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    7eba:	9b02      	ldr	r3, [sp, #8]
    7ebc:	9307      	str	r3, [sp, #28]
    7ebe:	e006      	b.n	7ece <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    7ec0:	9907      	ldr	r1, [sp, #28]
    7ec2:	9806      	ldr	r0, [sp, #24]
    7ec4:	f7fe fca6 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    7ec8:	9b07      	ldr	r3, [sp, #28]
    7eca:	3301      	adds	r3, #1
    7ecc:	9307      	str	r3, [sp, #28]
    7ece:	9a07      	ldr	r2, [sp, #28]
    7ed0:	9b01      	ldr	r3, [sp, #4]
    7ed2:	429a      	cmp	r2, r3
    7ed4:	d9f4      	bls.n	7ec0 <FlexCAN_IRQHandler+0xf8>
}
    7ed6:	bf00      	nop
    7ed8:	b00b      	add	sp, #44	; 0x2c
    7eda:	f85d fb04 	ldr.w	pc, [sp], #4
    7ede:	bf00      	nop
    7ee0:	0000c230 	.word	0x0000c230
    7ee4:	1fff8f58 	.word	0x1fff8f58

00007ee8 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    7ee8:	b084      	sub	sp, #16
    7eea:	4603      	mov	r3, r0
    7eec:	9100      	str	r1, [sp, #0]
    7eee:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    7ef2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ef6:	4a05      	ldr	r2, [pc, #20]	; (7f0c <FlexCAN_Ip_ClearErrorStatus+0x24>)
    7ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7efc:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    7efe:	9b03      	ldr	r3, [sp, #12]
    7f00:	9a00      	ldr	r2, [sp, #0]
    7f02:	621a      	str	r2, [r3, #32]
}
    7f04:	bf00      	nop
    7f06:	b004      	add	sp, #16
    7f08:	4770      	bx	lr
    7f0a:	bf00      	nop
    7f0c:	0000c230 	.word	0x0000c230

00007f10 <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    7f10:	b084      	sub	sp, #16
    7f12:	4603      	mov	r3, r0
    7f14:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    7f18:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f1c:	4a04      	ldr	r2, [pc, #16]	; (7f30 <FlexCAN_Ip_GetErrorStatus+0x20>)
    7f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f22:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    7f24:	9b03      	ldr	r3, [sp, #12]
    7f26:	6a1b      	ldr	r3, [r3, #32]
}
    7f28:	4618      	mov	r0, r3
    7f2a:	b004      	add	sp, #16
    7f2c:	4770      	bx	lr
    7f2e:	bf00      	nop
    7f30:	0000c230 	.word	0x0000c230

00007f34 <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    7f34:	b084      	sub	sp, #16
    7f36:	4603      	mov	r3, r0
    7f38:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    7f3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f40:	4a04      	ldr	r2, [pc, #16]	; (7f54 <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    7f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f46:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    7f48:	9b03      	ldr	r3, [sp, #12]
    7f4a:	69db      	ldr	r3, [r3, #28]
    7f4c:	b2db      	uxtb	r3, r3
}
    7f4e:	4618      	mov	r0, r3
    7f50:	b004      	add	sp, #16
    7f52:	4770      	bx	lr
    7f54:	0000c230 	.word	0x0000c230

00007f58 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    7f58:	b084      	sub	sp, #16
    7f5a:	4603      	mov	r3, r0
    7f5c:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    7f60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f64:	4a05      	ldr	r2, [pc, #20]	; (7f7c <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    7f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f6a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    7f6c:	9b03      	ldr	r3, [sp, #12]
    7f6e:	69db      	ldr	r3, [r3, #28]
    7f70:	0a1b      	lsrs	r3, r3, #8
    7f72:	b2db      	uxtb	r3, r3
}
    7f74:	4618      	mov	r0, r3
    7f76:	b004      	add	sp, #16
    7f78:	4770      	bx	lr
    7f7a:	bf00      	nop
    7f7c:	0000c230 	.word	0x0000c230

00007f80 <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    7f80:	b510      	push	{r4, lr}
    7f82:	b086      	sub	sp, #24
    7f84:	4603      	mov	r3, r0
    7f86:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    7f8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f8e:	4a29      	ldr	r2, [pc, #164]	; (8034 <FlexCAN_Error_IRQHandler+0xb4>)
    7f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7f94:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    7f96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f9a:	4a27      	ldr	r2, [pc, #156]	; (8038 <FlexCAN_Error_IRQHandler+0xb8>)
    7f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7fa0:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    7fa2:	2300      	movs	r3, #0
    7fa4:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    7fa6:	9b03      	ldr	r3, [sp, #12]
    7fa8:	2b00      	cmp	r3, #0
    7faa:	d03d      	beq.n	8028 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    7fac:	9b04      	ldr	r3, [sp, #16]
    7fae:	6a1b      	ldr	r3, [r3, #32]
    7fb0:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    7fb2:	9b05      	ldr	r3, [sp, #20]
    7fb4:	f003 0302 	and.w	r3, r3, #2
    7fb8:	2b00      	cmp	r3, #0
    7fba:	d019      	beq.n	7ff0 <FlexCAN_Error_IRQHandler+0x70>
    7fbc:	9b04      	ldr	r3, [sp, #16]
    7fbe:	685b      	ldr	r3, [r3, #4]
    7fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    7fc4:	2b00      	cmp	r3, #0
    7fc6:	d013      	beq.n	7ff0 <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    7fc8:	9b04      	ldr	r3, [sp, #16]
    7fca:	2202      	movs	r2, #2
    7fcc:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    7fce:	9b03      	ldr	r3, [sp, #12]
    7fd0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    7fd4:	2b00      	cmp	r3, #0
    7fd6:	d00b      	beq.n	7ff0 <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    7fd8:	9b03      	ldr	r3, [sp, #12]
    7fda:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    7fde:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7fe2:	9b03      	ldr	r3, [sp, #12]
    7fe4:	9a05      	ldr	r2, [sp, #20]
    7fe6:	2105      	movs	r1, #5
    7fe8:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    7fea:	9b04      	ldr	r3, [sp, #16]
    7fec:	6a1b      	ldr	r3, [r3, #32]
    7fee:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    7ff0:	9b05      	ldr	r3, [sp, #20]
    7ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    7ff6:	2b00      	cmp	r3, #0
    7ff8:	d019      	beq.n	802e <FlexCAN_Error_IRQHandler+0xae>
    7ffa:	9b04      	ldr	r3, [sp, #16]
    7ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7ffe:	2b00      	cmp	r3, #0
    8000:	da15      	bge.n	802e <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    8002:	9b04      	ldr	r3, [sp, #16]
    8004:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    8008:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    800a:	9b03      	ldr	r3, [sp, #12]
    800c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    8010:	2b00      	cmp	r3, #0
    8012:	d00c      	beq.n	802e <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    8014:	9b03      	ldr	r3, [sp, #12]
    8016:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    801a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    801e:	9b03      	ldr	r3, [sp, #12]
    8020:	9a05      	ldr	r2, [sp, #20]
    8022:	2106      	movs	r1, #6
    8024:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    8026:	e002      	b.n	802e <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    8028:	9b04      	ldr	r3, [sp, #16]
    802a:	4a04      	ldr	r2, [pc, #16]	; (803c <FlexCAN_Error_IRQHandler+0xbc>)
    802c:	621a      	str	r2, [r3, #32]
}
    802e:	bf00      	nop
    8030:	b006      	add	sp, #24
    8032:	bd10      	pop	{r4, pc}
    8034:	0000c230 	.word	0x0000c230
    8038:	1fff8f58 	.word	0x1fff8f58
    803c:	00300002 	.word	0x00300002

00008040 <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    8040:	b510      	push	{r4, lr}
    8042:	b086      	sub	sp, #24
    8044:	4603      	mov	r3, r0
    8046:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    804a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    804e:	4a3a      	ldr	r2, [pc, #232]	; (8138 <FlexCAN_BusOff_IRQHandler+0xf8>)
    8050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8054:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8056:	f89d 3007 	ldrb.w	r3, [sp, #7]
    805a:	4a38      	ldr	r2, [pc, #224]	; (813c <FlexCAN_BusOff_IRQHandler+0xfc>)
    805c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8060:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    8062:	2300      	movs	r3, #0
    8064:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    8066:	9b03      	ldr	r3, [sp, #12]
    8068:	2b00      	cmp	r3, #0
    806a:	d05f      	beq.n	812c <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    806c:	9b04      	ldr	r3, [sp, #16]
    806e:	6a1b      	ldr	r3, [r3, #32]
    8070:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    8072:	9b05      	ldr	r3, [sp, #20]
    8074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8078:	2b00      	cmp	r3, #0
    807a:	d01a      	beq.n	80b2 <FlexCAN_BusOff_IRQHandler+0x72>
    807c:	9b04      	ldr	r3, [sp, #16]
    807e:	685b      	ldr	r3, [r3, #4]
    8080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    8084:	2b00      	cmp	r3, #0
    8086:	d014      	beq.n	80b2 <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    8088:	9b04      	ldr	r3, [sp, #16]
    808a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    808e:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    8090:	9b03      	ldr	r3, [sp, #12]
    8092:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    8096:	2b00      	cmp	r3, #0
    8098:	d00b      	beq.n	80b2 <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    809a:	9b03      	ldr	r3, [sp, #12]
    809c:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    80a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    80a4:	9b03      	ldr	r3, [sp, #12]
    80a6:	9a05      	ldr	r2, [sp, #20]
    80a8:	2109      	movs	r1, #9
    80aa:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    80ac:	9b04      	ldr	r3, [sp, #16]
    80ae:	6a1b      	ldr	r3, [r3, #32]
    80b0:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    80b2:	9b05      	ldr	r3, [sp, #20]
    80b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    80b8:	2b00      	cmp	r3, #0
    80ba:	d01a      	beq.n	80f2 <FlexCAN_BusOff_IRQHandler+0xb2>
    80bc:	9b04      	ldr	r3, [sp, #16]
    80be:	685b      	ldr	r3, [r3, #4]
    80c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    80c4:	2b00      	cmp	r3, #0
    80c6:	d014      	beq.n	80f2 <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    80c8:	9b04      	ldr	r3, [sp, #16]
    80ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    80ce:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    80d0:	9b03      	ldr	r3, [sp, #12]
    80d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    80d6:	2b00      	cmp	r3, #0
    80d8:	d00b      	beq.n	80f2 <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    80da:	9b03      	ldr	r3, [sp, #12]
    80dc:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    80e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    80e4:	9b03      	ldr	r3, [sp, #12]
    80e6:	9a05      	ldr	r2, [sp, #20]
    80e8:	2108      	movs	r1, #8
    80ea:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    80ec:	9b04      	ldr	r3, [sp, #16]
    80ee:	6a1b      	ldr	r3, [r3, #32]
    80f0:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    80f2:	9b05      	ldr	r3, [sp, #20]
    80f4:	f003 0304 	and.w	r3, r3, #4
    80f8:	2b00      	cmp	r3, #0
    80fa:	d01a      	beq.n	8132 <FlexCAN_BusOff_IRQHandler+0xf2>
    80fc:	9b04      	ldr	r3, [sp, #16]
    80fe:	685b      	ldr	r3, [r3, #4]
    8100:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    8104:	2b00      	cmp	r3, #0
    8106:	d014      	beq.n	8132 <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    8108:	9b04      	ldr	r3, [sp, #16]
    810a:	2204      	movs	r2, #4
    810c:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    810e:	9b03      	ldr	r3, [sp, #12]
    8110:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    8114:	2b00      	cmp	r3, #0
    8116:	d00c      	beq.n	8132 <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    8118:	9b03      	ldr	r3, [sp, #12]
    811a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    811e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8122:	9b03      	ldr	r3, [sp, #12]
    8124:	9a05      	ldr	r2, [sp, #20]
    8126:	2107      	movs	r1, #7
    8128:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    812a:	e002      	b.n	8132 <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    812c:	9b04      	ldr	r3, [sp, #16]
    812e:	4a04      	ldr	r2, [pc, #16]	; (8140 <FlexCAN_BusOff_IRQHandler+0x100>)
    8130:	621a      	str	r2, [r3, #32]
}
    8132:	bf00      	nop
    8134:	b006      	add	sp, #24
    8136:	bd10      	pop	{r4, pc}
    8138:	0000c230 	.word	0x0000c230
    813c:	1fff8f58 	.word	0x1fff8f58
    8140:	000b0004 	.word	0x000b0004

00008144 <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    8144:	b500      	push	{lr}
    8146:	b091      	sub	sp, #68	; 0x44
    8148:	9204      	str	r2, [sp, #16]
    814a:	9303      	str	r3, [sp, #12]
    814c:	4603      	mov	r3, r0
    814e:	f88d 3017 	strb.w	r3, [sp, #23]
    8152:	460b      	mov	r3, r1
    8154:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8158:	f89d 3017 	ldrb.w	r3, [sp, #23]
    815c:	4a5f      	ldr	r2, [pc, #380]	; (82dc <FlexCAN_Ip_SendBlocking+0x198>)
    815e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8162:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8164:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8168:	4a5d      	ldr	r2, [pc, #372]	; (82e0 <FlexCAN_Ip_SendBlocking+0x19c>)
    816a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    816e:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    8170:	2300      	movs	r3, #0
    8172:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    8174:	2300      	movs	r3, #0
    8176:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8178:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    817a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    817e:	fb02 f303 	mul.w	r3, r2, r3
    8182:	2100      	movs	r1, #0
    8184:	4618      	mov	r0, r3
    8186:	f7f8 fd92 	bl	cae <OsIf_MicrosToTicks>
    818a:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    818c:	2300      	movs	r3, #0
    818e:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    8190:	2300      	movs	r3, #0
    8192:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    8194:	2300      	movs	r3, #0
    8196:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    8198:	f89d 1016 	ldrb.w	r1, [sp, #22]
    819c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    81a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    81a2:	9300      	str	r3, [sp, #0]
    81a4:	9b03      	ldr	r3, [sp, #12]
    81a6:	9a04      	ldr	r2, [sp, #16]
    81a8:	f7fe ff1a 	bl	6fe0 <FlexCAN_StartSendData>
    81ac:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    81ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    81b0:	2b00      	cmp	r3, #0
    81b2:	f040 808d 	bne.w	82d0 <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    81b6:	2000      	movs	r0, #0
    81b8:	f7f8 fd2d 	bl	c16 <OsIf_GetCounter>
    81bc:	4603      	mov	r3, r0
    81be:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    81c0:	e00f      	b.n	81e2 <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    81c2:	ab07      	add	r3, sp, #28
    81c4:	2100      	movs	r1, #0
    81c6:	4618      	mov	r0, r3
    81c8:	f7f8 fd3e 	bl	c48 <OsIf_GetElapsed>
    81cc:	4602      	mov	r2, r0
    81ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    81d0:	4413      	add	r3, r2
    81d2:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    81d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    81d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    81d8:	429a      	cmp	r2, r3
    81da:	d302      	bcc.n	81e2 <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    81dc:	2303      	movs	r3, #3
    81de:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    81e0:	e008      	b.n	81f4 <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    81e2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    81e6:	4619      	mov	r1, r3
    81e8:	980d      	ldr	r0, [sp, #52]	; 0x34
    81ea:	f7fe fb26 	bl	683a <FlexCAN_GetBuffStatusFlag>
    81ee:	4603      	mov	r3, r0
    81f0:	2b01      	cmp	r3, #1
    81f2:	d1e6      	bne.n	81c2 <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    81f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    81f6:	2b03      	cmp	r3, #3
    81f8:	d15c      	bne.n	82b4 <FlexCAN_Ip_SendBlocking+0x170>
    81fa:	f89d 3016 	ldrb.w	r3, [sp, #22]
    81fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8200:	011b      	lsls	r3, r3, #4
    8202:	4413      	add	r3, r2
    8204:	3304      	adds	r3, #4
    8206:	681b      	ldr	r3, [r3, #0]
    8208:	2b00      	cmp	r3, #0
    820a:	d053      	beq.n	82b4 <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    820c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8210:	4619      	mov	r1, r3
    8212:	980d      	ldr	r0, [sp, #52]	; 0x34
    8214:	f7fe fafe 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    8218:	f89d 3016 	ldrb.w	r3, [sp, #22]
    821c:	4619      	mov	r1, r3
    821e:	980d      	ldr	r0, [sp, #52]	; 0x34
    8220:	f001 f968 	bl	94f4 <FlexCAN_GetMsgBuffRegion>
    8224:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    8226:	9b08      	ldr	r3, [sp, #32]
    8228:	681b      	ldr	r3, [r3, #0]
    822a:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    822c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    822e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    8232:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    8234:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8236:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    823a:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    823c:	9b08      	ldr	r3, [sp, #32]
    823e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8240:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8242:	2100      	movs	r1, #0
    8244:	4827      	ldr	r0, [pc, #156]	; (82e4 <FlexCAN_Ip_SendBlocking+0x1a0>)
    8246:	f7f8 fd32 	bl	cae <OsIf_MicrosToTicks>
    824a:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    824c:	2000      	movs	r0, #0
    824e:	f7f8 fce2 	bl	c16 <OsIf_GetCounter>
    8252:	4603      	mov	r3, r0
    8254:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    8256:	2300      	movs	r3, #0
    8258:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    825a:	e00f      	b.n	827c <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    825c:	ab07      	add	r3, sp, #28
    825e:	2100      	movs	r1, #0
    8260:	4618      	mov	r0, r3
    8262:	f7f8 fcf1 	bl	c48 <OsIf_GetElapsed>
    8266:	4602      	mov	r2, r0
    8268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    826a:	4413      	add	r3, r2
    826c:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    826e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8272:	429a      	cmp	r2, r3
    8274:	d302      	bcc.n	827c <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    8276:	2303      	movs	r3, #3
    8278:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    827a:	e008      	b.n	828e <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    827c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8280:	4619      	mov	r1, r3
    8282:	980d      	ldr	r0, [sp, #52]	; 0x34
    8284:	f7fe fad9 	bl	683a <FlexCAN_GetBuffStatusFlag>
    8288:	4603      	mov	r3, r0
    828a:	2b00      	cmp	r3, #0
    828c:	d0e6      	beq.n	825c <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    828e:	9b08      	ldr	r3, [sp, #32]
    8290:	681b      	ldr	r3, [r3, #0]
    8292:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    8294:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8296:	0e1b      	lsrs	r3, r3, #24
    8298:	f003 030f 	and.w	r3, r3, #15
    829c:	2b08      	cmp	r3, #8
    829e:	d101      	bne.n	82a4 <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    82a0:	2300      	movs	r3, #0
    82a2:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    82a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    82a6:	0e1b      	lsrs	r3, r3, #24
    82a8:	f003 030f 	and.w	r3, r3, #15
    82ac:	2b09      	cmp	r3, #9
    82ae:	d101      	bne.n	82b4 <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    82b0:	2303      	movs	r3, #3
    82b2:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    82b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    82b8:	4619      	mov	r1, r3
    82ba:	980d      	ldr	r0, [sp, #52]	; 0x34
    82bc:	f7fe faaa 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    82c0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    82c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    82c6:	011b      	lsls	r3, r3, #4
    82c8:	4413      	add	r3, r2
    82ca:	3304      	adds	r3, #4
    82cc:	2200      	movs	r2, #0
    82ce:	601a      	str	r2, [r3, #0]
    }
    return result;
    82d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    82d2:	4618      	mov	r0, r3
    82d4:	b011      	add	sp, #68	; 0x44
    82d6:	f85d fb04 	ldr.w	pc, [sp], #4
    82da:	bf00      	nop
    82dc:	0000c230 	.word	0x0000c230
    82e0:	1fff8f58 	.word	0x1fff8f58
    82e4:	000f4240 	.word	0x000f4240

000082e8 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    82e8:	b500      	push	{lr}
    82ea:	b087      	sub	sp, #28
    82ec:	4603      	mov	r3, r0
    82ee:	9100      	str	r1, [sp, #0]
    82f0:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    82f4:	2300      	movs	r3, #0
    82f6:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    82f8:	2300      	movs	r3, #0
    82fa:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    82fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8300:	4a1c      	ldr	r2, [pc, #112]	; (8374 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    8302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8306:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    8308:	9803      	ldr	r0, [sp, #12]
    830a:	f7fe fa29 	bl	6760 <FlexCAN_IsEnabled>
    830e:	4603      	mov	r3, r0
    8310:	2b00      	cmp	r3, #0
    8312:	bf14      	ite	ne
    8314:	2301      	movne	r3, #1
    8316:	2300      	moveq	r3, #0
    8318:	b2db      	uxtb	r3, r3
    831a:	f083 0301 	eor.w	r3, r3, #1
    831e:	b2db      	uxtb	r3, r3
    8320:	f88d 300b 	strb.w	r3, [sp, #11]
    8324:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8328:	f003 0301 	and.w	r3, r3, #1
    832c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    8330:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8334:	2b00      	cmp	r3, #0
    8336:	d003      	beq.n	8340 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    8338:	9803      	ldr	r0, [sp, #12]
    833a:	f001 f9c3 	bl	96c4 <FlexCAN_Enable>
    833e:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    8340:	9b05      	ldr	r3, [sp, #20]
    8342:	2b00      	cmp	r3, #0
    8344:	d103      	bne.n	834e <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    8346:	9900      	ldr	r1, [sp, #0]
    8348:	9803      	ldr	r0, [sp, #12]
    834a:	f7fe fc33 	bl	6bb4 <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    834e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8352:	2b00      	cmp	r3, #0
    8354:	d008      	beq.n	8368 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    8356:	9803      	ldr	r0, [sp, #12]
    8358:	f001 fa32 	bl	97c0 <FlexCAN_Disable>
    835c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    835e:	9b04      	ldr	r3, [sp, #16]
    8360:	2b00      	cmp	r3, #0
    8362:	d001      	beq.n	8368 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    8364:	9b04      	ldr	r3, [sp, #16]
    8366:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    8368:	9b05      	ldr	r3, [sp, #20]
}
    836a:	4618      	mov	r0, r3
    836c:	b007      	add	sp, #28
    836e:	f85d fb04 	ldr.w	pc, [sp], #4
    8372:	bf00      	nop
    8374:	0000c230 	.word	0x0000c230

00008378 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    8378:	b500      	push	{lr}
    837a:	b085      	sub	sp, #20
    837c:	4603      	mov	r3, r0
    837e:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8382:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8386:	4a06      	ldr	r2, [pc, #24]	; (83a0 <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    8388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    838c:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    838e:	9803      	ldr	r0, [sp, #12]
    8390:	f001 f94c 	bl	962c <FlexCAN_EnterFreezeMode>
    8394:	4603      	mov	r3, r0
}
    8396:	4618      	mov	r0, r3
    8398:	b005      	add	sp, #20
    839a:	f85d fb04 	ldr.w	pc, [sp], #4
    839e:	bf00      	nop
    83a0:	0000c230 	.word	0x0000c230

000083a4 <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    83a4:	b500      	push	{lr}
    83a6:	b085      	sub	sp, #20
    83a8:	4603      	mov	r3, r0
    83aa:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    83ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    83b2:	4a06      	ldr	r2, [pc, #24]	; (83cc <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    83b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83b8:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    83ba:	9803      	ldr	r0, [sp, #12]
    83bc:	f001 f9be 	bl	973c <FlexCAN_ExitFreezeMode>
    83c0:	4603      	mov	r3, r0
}
    83c2:	4618      	mov	r0, r3
    83c4:	b005      	add	sp, #20
    83c6:	f85d fb04 	ldr.w	pc, [sp], #4
    83ca:	bf00      	nop
    83cc:	0000c230 	.word	0x0000c230

000083d0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    83d0:	b500      	push	{lr}
    83d2:	b087      	sub	sp, #28
    83d4:	4603      	mov	r3, r0
    83d6:	9200      	str	r2, [sp, #0]
    83d8:	f88d 3007 	strb.w	r3, [sp, #7]
    83dc:	460b      	mov	r3, r1
    83de:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    83e2:	2300      	movs	r3, #0
    83e4:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    83e6:	2300      	movs	r3, #0
    83e8:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    83ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    83ee:	4a1e      	ldr	r2, [pc, #120]	; (8468 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    83f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    83f4:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    83f6:	9803      	ldr	r0, [sp, #12]
    83f8:	f7fe f9b2 	bl	6760 <FlexCAN_IsEnabled>
    83fc:	4603      	mov	r3, r0
    83fe:	2b00      	cmp	r3, #0
    8400:	bf14      	ite	ne
    8402:	2301      	movne	r3, #1
    8404:	2300      	moveq	r3, #0
    8406:	b2db      	uxtb	r3, r3
    8408:	f083 0301 	eor.w	r3, r3, #1
    840c:	b2db      	uxtb	r3, r3
    840e:	f88d 300b 	strb.w	r3, [sp, #11]
    8412:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8416:	f003 0301 	and.w	r3, r3, #1
    841a:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    841e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8422:	2b00      	cmp	r3, #0
    8424:	d003      	beq.n	842e <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    8426:	9803      	ldr	r0, [sp, #12]
    8428:	f001 f94c 	bl	96c4 <FlexCAN_Enable>
    842c:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    842e:	9b05      	ldr	r3, [sp, #20]
    8430:	2b00      	cmp	r3, #0
    8432:	d106      	bne.n	8442 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    8434:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8438:	9a00      	ldr	r2, [sp, #0]
    843a:	4619      	mov	r1, r3
    843c:	9803      	ldr	r0, [sp, #12]
    843e:	f7fe fbc2 	bl	6bc6 <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    8442:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8446:	2b00      	cmp	r3, #0
    8448:	d008      	beq.n	845c <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    844a:	9803      	ldr	r0, [sp, #12]
    844c:	f001 f9b8 	bl	97c0 <FlexCAN_Disable>
    8450:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    8452:	9b04      	ldr	r3, [sp, #16]
    8454:	2b00      	cmp	r3, #0
    8456:	d001      	beq.n	845c <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    8458:	9b04      	ldr	r3, [sp, #16]
    845a:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    845c:	9b05      	ldr	r3, [sp, #20]
}
    845e:	4618      	mov	r0, r3
    8460:	b007      	add	sp, #28
    8462:	f85d fb04 	ldr.w	pc, [sp], #4
    8466:	bf00      	nop
    8468:	0000c230 	.word	0x0000c230

0000846c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    846c:	b500      	push	{lr}
    846e:	b087      	sub	sp, #28
    8470:	4603      	mov	r3, r0
    8472:	9100      	str	r1, [sp, #0]
    8474:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8478:	2300      	movs	r3, #0
    847a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    847c:	2300      	movs	r3, #0
    847e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8480:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8484:	4a1c      	ldr	r2, [pc, #112]	; (84f8 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    8486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    848a:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    848c:	9803      	ldr	r0, [sp, #12]
    848e:	f7fe f967 	bl	6760 <FlexCAN_IsEnabled>
    8492:	4603      	mov	r3, r0
    8494:	2b00      	cmp	r3, #0
    8496:	bf14      	ite	ne
    8498:	2301      	movne	r3, #1
    849a:	2300      	moveq	r3, #0
    849c:	b2db      	uxtb	r3, r3
    849e:	f083 0301 	eor.w	r3, r3, #1
    84a2:	b2db      	uxtb	r3, r3
    84a4:	f88d 300b 	strb.w	r3, [sp, #11]
    84a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    84ac:	f003 0301 	and.w	r3, r3, #1
    84b0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    84b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    84b8:	2b00      	cmp	r3, #0
    84ba:	d003      	beq.n	84c4 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    84bc:	9803      	ldr	r0, [sp, #12]
    84be:	f001 f901 	bl	96c4 <FlexCAN_Enable>
    84c2:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    84c4:	9b05      	ldr	r3, [sp, #20]
    84c6:	2b00      	cmp	r3, #0
    84c8:	d103      	bne.n	84d2 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    84ca:	9900      	ldr	r1, [sp, #0]
    84cc:	9803      	ldr	r0, [sp, #12]
    84ce:	f7fe f917 	bl	6700 <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    84d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    84d6:	2b00      	cmp	r3, #0
    84d8:	d008      	beq.n	84ec <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    84da:	9803      	ldr	r0, [sp, #12]
    84dc:	f001 f970 	bl	97c0 <FlexCAN_Disable>
    84e0:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    84e2:	9b04      	ldr	r3, [sp, #16]
    84e4:	2b00      	cmp	r3, #0
    84e6:	d001      	beq.n	84ec <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    84e8:	9b04      	ldr	r3, [sp, #16]
    84ea:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    84ec:	9b05      	ldr	r3, [sp, #20]
}
    84ee:	4618      	mov	r0, r3
    84f0:	b007      	add	sp, #28
    84f2:	f85d fb04 	ldr.w	pc, [sp], #4
    84f6:	bf00      	nop
    84f8:	0000c230 	.word	0x0000c230

000084fc <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    84fc:	b500      	push	{lr}
    84fe:	b085      	sub	sp, #20
    8500:	4603      	mov	r3, r0
    8502:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8506:	f89d 3007 	ldrb.w	r3, [sp, #7]
    850a:	4a0e      	ldr	r2, [pc, #56]	; (8544 <FlexCAN_Ip_Deinit_Privileged+0x48>)
    850c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8510:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    8512:	9803      	ldr	r0, [sp, #12]
    8514:	f001 f88a 	bl	962c <FlexCAN_EnterFreezeMode>
    8518:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    851a:	9b02      	ldr	r3, [sp, #8]
    851c:	2b00      	cmp	r3, #0
    851e:	d10b      	bne.n	8538 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    8520:	9803      	ldr	r0, [sp, #12]
    8522:	f7fe fb88 	bl	6c36 <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    8526:	9803      	ldr	r0, [sp, #12]
    8528:	f001 f94a 	bl	97c0 <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    852c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8530:	4a05      	ldr	r2, [pc, #20]	; (8548 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    8532:	2100      	movs	r1, #0
    8534:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    8538:	9b02      	ldr	r3, [sp, #8]
}
    853a:	4618      	mov	r0, r3
    853c:	b005      	add	sp, #20
    853e:	f85d fb04 	ldr.w	pc, [sp], #4
    8542:	bf00      	nop
    8544:	0000c230 	.word	0x0000c230
    8548:	1fff8f58 	.word	0x1fff8f58

0000854c <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    854c:	b500      	push	{lr}
    854e:	b085      	sub	sp, #20
    8550:	4603      	mov	r3, r0
    8552:	460a      	mov	r2, r1
    8554:	f88d 3007 	strb.w	r3, [sp, #7]
    8558:	4613      	mov	r3, r2
    855a:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    855e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8562:	4a22      	ldr	r2, [pc, #136]	; (85ec <FlexCAN_Ip_MainFunctionRead+0xa0>)
    8564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8568:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    856a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    856e:	4a20      	ldr	r2, [pc, #128]	; (85f0 <FlexCAN_Ip_MainFunctionRead+0xa4>)
    8570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8574:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    8576:	9b02      	ldr	r3, [sp, #8]
    8578:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    857c:	2b00      	cmp	r3, #0
    857e:	d015      	beq.n	85ac <FlexCAN_Ip_MainFunctionRead+0x60>
    8580:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8584:	2b07      	cmp	r3, #7
    8586:	d811      	bhi.n	85ac <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    8588:	f89d 3006 	ldrb.w	r3, [sp, #6]
    858c:	2b00      	cmp	r3, #0
    858e:	d128      	bne.n	85e2 <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    8590:	2105      	movs	r1, #5
    8592:	9803      	ldr	r0, [sp, #12]
    8594:	f7fe f951 	bl	683a <FlexCAN_GetBuffStatusFlag>
    8598:	4603      	mov	r3, r0
    859a:	2b00      	cmp	r3, #0
    859c:	d021      	beq.n	85e2 <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    859e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    85a2:	2105      	movs	r1, #5
    85a4:	4618      	mov	r0, r3
    85a6:	f7fe ff87 	bl	74b8 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    85aa:	e01a      	b.n	85e2 <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    85ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    85b0:	4619      	mov	r1, r3
    85b2:	9803      	ldr	r0, [sp, #12]
    85b4:	f7fe f941 	bl	683a <FlexCAN_GetBuffStatusFlag>
    85b8:	4603      	mov	r3, r0
    85ba:	2b00      	cmp	r3, #0
    85bc:	d012      	beq.n	85e4 <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    85be:	f89d 3006 	ldrb.w	r3, [sp, #6]
    85c2:	9a02      	ldr	r2, [sp, #8]
    85c4:	011b      	lsls	r3, r3, #4
    85c6:	4413      	add	r3, r2
    85c8:	3304      	adds	r3, #4
    85ca:	681b      	ldr	r3, [r3, #0]
    85cc:	2b01      	cmp	r3, #1
    85ce:	d109      	bne.n	85e4 <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    85d0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    85d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    85d8:	4611      	mov	r1, r2
    85da:	4618      	mov	r0, r3
    85dc:	f7fe fde4 	bl	71a8 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    85e0:	e000      	b.n	85e4 <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    85e2:	bf00      	nop
}
    85e4:	bf00      	nop
    85e6:	b005      	add	sp, #20
    85e8:	f85d fb04 	ldr.w	pc, [sp], #4
    85ec:	0000c230 	.word	0x0000c230
    85f0:	1fff8f58 	.word	0x1fff8f58

000085f4 <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    85f4:	b510      	push	{r4, lr}
    85f6:	b086      	sub	sp, #24
    85f8:	4603      	mov	r3, r0
    85fa:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    85fe:	2301      	movs	r3, #1
    8600:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8602:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8606:	4a15      	ldr	r2, [pc, #84]	; (865c <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    8608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    860c:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    860e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8612:	4a13      	ldr	r2, [pc, #76]	; (8660 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    8614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8618:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    861a:	2300      	movs	r3, #0
    861c:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    861e:	9b04      	ldr	r3, [sp, #16]
    8620:	6a1b      	ldr	r3, [r3, #32]
    8622:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    8624:	9b02      	ldr	r3, [sp, #8]
    8626:	f003 0304 	and.w	r3, r3, #4
    862a:	2b00      	cmp	r3, #0
    862c:	d012      	beq.n	8654 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    862e:	9b03      	ldr	r3, [sp, #12]
    8630:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    8634:	2b00      	cmp	r3, #0
    8636:	d008      	beq.n	864a <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    8638:	9b03      	ldr	r3, [sp, #12]
    863a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    863e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8642:	9b03      	ldr	r3, [sp, #12]
    8644:	9a02      	ldr	r2, [sp, #8]
    8646:	2107      	movs	r1, #7
    8648:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    864a:	9b04      	ldr	r3, [sp, #16]
    864c:	2204      	movs	r2, #4
    864e:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    8650:	2300      	movs	r3, #0
    8652:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    8654:	9b05      	ldr	r3, [sp, #20]
}
    8656:	4618      	mov	r0, r3
    8658:	b006      	add	sp, #24
    865a:	bd10      	pop	{r4, pc}
    865c:	0000c230 	.word	0x0000c230
    8660:	1fff8f58 	.word	0x1fff8f58

00008664 <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    8664:	b510      	push	{r4, lr}
    8666:	b098      	sub	sp, #96	; 0x60
    8668:	4603      	mov	r3, r0
    866a:	460a      	mov	r2, r1
    866c:	f88d 3007 	strb.w	r3, [sp, #7]
    8670:	4613      	mov	r3, r2
    8672:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8676:	f89d 3007 	ldrb.w	r3, [sp, #7]
    867a:	4a3f      	ldr	r2, [pc, #252]	; (8778 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    867c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8680:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8682:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8686:	4a3d      	ldr	r2, [pc, #244]	; (877c <FlexCAN_Ip_MainFunctionWrite+0x118>)
    8688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    868c:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    868e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8692:	4619      	mov	r1, r3
    8694:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8696:	f7fe f8d0 	bl	683a <FlexCAN_GetBuffStatusFlag>
    869a:	4603      	mov	r3, r0
    869c:	2b00      	cmp	r3, #0
    869e:	d068      	beq.n	8772 <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    86a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    86a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    86a6:	011b      	lsls	r3, r3, #4
    86a8:	4413      	add	r3, r2
    86aa:	3304      	adds	r3, #4
    86ac:	681b      	ldr	r3, [r3, #0]
    86ae:	2b02      	cmp	r3, #2
    86b0:	d15f      	bne.n	8772 <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    86b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    86b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    86b8:	011b      	lsls	r3, r3, #4
    86ba:	4413      	add	r3, r2
    86bc:	3309      	adds	r3, #9
    86be:	781b      	ldrb	r3, [r3, #0]
    86c0:	2b00      	cmp	r3, #0
    86c2:	d028      	beq.n	8716 <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    86c4:	2300      	movs	r3, #0
    86c6:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    86c8:	2300      	movs	r3, #0
    86ca:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    86cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    86d0:	4619      	mov	r1, r3
    86d2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    86d4:	f001 fa87 	bl	9be6 <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    86d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    86dc:	aa02      	add	r2, sp, #8
    86de:	4619      	mov	r1, r3
    86e0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    86e2:	f001 fbaf 	bl	9e44 <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    86e6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    86e8:	f7fe f88d 	bl	6806 <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    86ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
    86f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
    86f2:	9916      	ldr	r1, [sp, #88]	; 0x58
    86f4:	011b      	lsls	r3, r3, #4
    86f6:	440b      	add	r3, r1
    86f8:	330c      	adds	r3, #12
    86fa:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    86fc:	9b02      	ldr	r3, [sp, #8]
    86fe:	0e1b      	lsrs	r3, r3, #24
    8700:	f003 030f 	and.w	r3, r3, #15
    8704:	2b04      	cmp	r3, #4
    8706:	d11d      	bne.n	8744 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8708:	f89d 3006 	ldrb.w	r3, [sp, #6]
    870c:	4619      	mov	r1, r3
    870e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8710:	f7fe f880 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
    8714:	e016      	b.n	8744 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    8716:	f89d 3006 	ldrb.w	r3, [sp, #6]
    871a:	f89d 4006 	ldrb.w	r4, [sp, #6]
    871e:	4619      	mov	r1, r3
    8720:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8722:	f001 fb7b 	bl	9e1c <FlexCAN_GetMsgBuffTimestamp>
    8726:	4601      	mov	r1, r0
    8728:	9a16      	ldr	r2, [sp, #88]	; 0x58
    872a:	0123      	lsls	r3, r4, #4
    872c:	4413      	add	r3, r2
    872e:	330c      	adds	r3, #12
    8730:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    8732:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8734:	f7fe f867 	bl	6806 <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8738:	f89d 3006 	ldrb.w	r3, [sp, #6]
    873c:	4619      	mov	r1, r3
    873e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8740:	f7fe f868 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    8744:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8748:	9a16      	ldr	r2, [sp, #88]	; 0x58
    874a:	011b      	lsls	r3, r3, #4
    874c:	4413      	add	r3, r2
    874e:	3304      	adds	r3, #4
    8750:	2200      	movs	r2, #0
    8752:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    8754:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8756:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    875a:	2b00      	cmp	r3, #0
    875c:	d009      	beq.n	8772 <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    875e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8760:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    8764:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8768:	f89d 0007 	ldrb.w	r0, [sp, #7]
    876c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    876e:	2104      	movs	r1, #4
    8770:	47a0      	blx	r4
            }
        }
    }
}
    8772:	bf00      	nop
    8774:	b018      	add	sp, #96	; 0x60
    8776:	bd10      	pop	{r4, pc}
    8778:	0000c230 	.word	0x0000c230
    877c:	1fff8f58 	.word	0x1fff8f58

00008780 <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    8780:	b084      	sub	sp, #16
    8782:	4603      	mov	r3, r0
    8784:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8788:	f89d 3007 	ldrb.w	r3, [sp, #7]
    878c:	4a08      	ldr	r2, [pc, #32]	; (87b0 <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    878e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8792:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    8794:	9b03      	ldr	r3, [sp, #12]
    8796:	681b      	ldr	r3, [r3, #0]
    8798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    879c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    87a0:	bf0c      	ite	eq
    87a2:	2301      	moveq	r3, #1
    87a4:	2300      	movne	r3, #0
    87a6:	b2db      	uxtb	r3, r3
}
    87a8:	4618      	mov	r0, r3
    87aa:	b004      	add	sp, #16
    87ac:	4770      	bx	lr
    87ae:	bf00      	nop
    87b0:	0000c230 	.word	0x0000c230

000087b4 <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    87b4:	b084      	sub	sp, #16
    87b6:	4603      	mov	r3, r0
    87b8:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    87bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    87c0:	4a07      	ldr	r2, [pc, #28]	; (87e0 <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    87c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87c6:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    87c8:	9b03      	ldr	r3, [sp, #12]
    87ca:	681b      	ldr	r3, [r3, #0]
    87cc:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    87d0:	2b00      	cmp	r3, #0
    87d2:	bf0c      	ite	eq
    87d4:	2301      	moveq	r3, #1
    87d6:	2300      	movne	r3, #0
    87d8:	b2db      	uxtb	r3, r3
}
    87da:	4618      	mov	r0, r3
    87dc:	b004      	add	sp, #16
    87de:	4770      	bx	lr
    87e0:	0000c230 	.word	0x0000c230

000087e4 <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    87e4:	b500      	push	{lr}
    87e6:	b085      	sub	sp, #20
    87e8:	4603      	mov	r3, r0
    87ea:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    87ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    87f2:	4a0b      	ldr	r2, [pc, #44]	; (8820 <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    87f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    87f8:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    87fa:	f002 fb31 	bl	ae60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    87fe:	9b03      	ldr	r3, [sp, #12]
    8800:	681b      	ldr	r3, [r3, #0]
    8802:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    8806:	9b03      	ldr	r3, [sp, #12]
    8808:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    880a:	f002 fb55 	bl	aeb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    880e:	9803      	ldr	r0, [sp, #12]
    8810:	f000 ff94 	bl	973c <FlexCAN_ExitFreezeMode>
    8814:	4603      	mov	r3, r0
}
    8816:	4618      	mov	r0, r3
    8818:	b005      	add	sp, #20
    881a:	f85d fb04 	ldr.w	pc, [sp], #4
    881e:	bf00      	nop
    8820:	0000c230 	.word	0x0000c230

00008824 <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    8824:	b500      	push	{lr}
    8826:	b085      	sub	sp, #20
    8828:	4603      	mov	r3, r0
    882a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    882e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8832:	4a0a      	ldr	r2, [pc, #40]	; (885c <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    8834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8838:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    883a:	9802      	ldr	r0, [sp, #8]
    883c:	f000 fef6 	bl	962c <FlexCAN_EnterFreezeMode>
    8840:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    8842:	9b03      	ldr	r3, [sp, #12]
    8844:	2b00      	cmp	r3, #0
    8846:	d103      	bne.n	8850 <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    8848:	9802      	ldr	r0, [sp, #8]
    884a:	f000 ffb9 	bl	97c0 <FlexCAN_Disable>
    884e:	9003      	str	r0, [sp, #12]
    }
    return status;
    8850:	9b03      	ldr	r3, [sp, #12]
}
    8852:	4618      	mov	r0, r3
    8854:	b005      	add	sp, #20
    8856:	f85d fb04 	ldr.w	pc, [sp], #4
    885a:	bf00      	nop
    885c:	0000c230 	.word	0x0000c230

00008860 <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    8860:	b500      	push	{lr}
    8862:	b087      	sub	sp, #28
    8864:	4603      	mov	r3, r0
    8866:	9100      	str	r1, [sp, #0]
    8868:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    886c:	2300      	movs	r3, #0
    886e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    8870:	2300      	movs	r3, #0
    8872:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8874:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8878:	4a1e      	ldr	r2, [pc, #120]	; (88f4 <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    887a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    887e:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    8880:	9803      	ldr	r0, [sp, #12]
    8882:	f7fd ff6d 	bl	6760 <FlexCAN_IsEnabled>
    8886:	4603      	mov	r3, r0
    8888:	2b00      	cmp	r3, #0
    888a:	bf14      	ite	ne
    888c:	2301      	movne	r3, #1
    888e:	2300      	moveq	r3, #0
    8890:	b2db      	uxtb	r3, r3
    8892:	f083 0301 	eor.w	r3, r3, #1
    8896:	b2db      	uxtb	r3, r3
    8898:	f88d 300b 	strb.w	r3, [sp, #11]
    889c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    88a0:	f003 0301 	and.w	r3, r3, #1
    88a4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    88a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    88ac:	2b00      	cmp	r3, #0
    88ae:	d003      	beq.n	88b8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    88b0:	9803      	ldr	r0, [sp, #12]
    88b2:	f000 ff07 	bl	96c4 <FlexCAN_Enable>
    88b6:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    88b8:	9b05      	ldr	r3, [sp, #20]
    88ba:	2b00      	cmp	r3, #0
    88bc:	d107      	bne.n	88ce <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    88be:	f002 fb21 	bl	af04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    88c2:	9900      	ldr	r1, [sp, #0]
    88c4:	9803      	ldr	r0, [sp, #12]
    88c6:	f7fe f9a0 	bl	6c0a <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    88ca:	f002 fb47 	bl	af5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    88ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
    88d2:	2b00      	cmp	r3, #0
    88d4:	d008      	beq.n	88e8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    88d6:	9803      	ldr	r0, [sp, #12]
    88d8:	f000 ff72 	bl	97c0 <FlexCAN_Disable>
    88dc:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    88de:	9b04      	ldr	r3, [sp, #16]
    88e0:	2b00      	cmp	r3, #0
    88e2:	d001      	beq.n	88e8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    88e4:	9b04      	ldr	r3, [sp, #16]
    88e6:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    88e8:	9b05      	ldr	r3, [sp, #20]
}
    88ea:	4618      	mov	r0, r3
    88ec:	b007      	add	sp, #28
    88ee:	f85d fb04 	ldr.w	pc, [sp], #4
    88f2:	bf00      	nop
    88f4:	0000c230 	.word	0x0000c230

000088f8 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    88f8:	b500      	push	{lr}
    88fa:	b087      	sub	sp, #28
    88fc:	4603      	mov	r3, r0
    88fe:	9100      	str	r1, [sp, #0]
    8900:	f88d 3007 	strb.w	r3, [sp, #7]
    8904:	4613      	mov	r3, r2
    8906:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    890a:	2300      	movs	r3, #0
    890c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    890e:	2300      	movs	r3, #0
    8910:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8912:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8916:	4a1c      	ldr	r2, [pc, #112]	; (8988 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    8918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    891c:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    891e:	9b03      	ldr	r3, [sp, #12]
    8920:	681b      	ldr	r3, [r3, #0]
    8922:	0fdb      	lsrs	r3, r3, #31
    8924:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    8928:	f89d 300b 	ldrb.w	r3, [sp, #11]
    892c:	2b00      	cmp	r3, #0
    892e:	d003      	beq.n	8938 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    8930:	9803      	ldr	r0, [sp, #12]
    8932:	f000 fec7 	bl	96c4 <FlexCAN_Enable>
    8936:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    8938:	9b05      	ldr	r3, [sp, #20]
    893a:	2b00      	cmp	r3, #0
    893c:	d112      	bne.n	8964 <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    893e:	f002 fccd 	bl	b2dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    8942:	9803      	ldr	r0, [sp, #12]
    8944:	f7fe f8a0 	bl	6a88 <FlexCAN_IsExCbtEnabled>
    8948:	4603      	mov	r3, r0
    894a:	2b00      	cmp	r3, #0
    894c:	d004      	beq.n	8958 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    894e:	9900      	ldr	r1, [sp, #0]
    8950:	9803      	ldr	r0, [sp, #12]
    8952:	f7fd ffef 	bl	6934 <FlexCAN_SetExtendedTimeSegments>
    8956:	e003      	b.n	8960 <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    8958:	9900      	ldr	r1, [sp, #0]
    895a:	9803      	ldr	r0, [sp, #12]
    895c:	f7fd ffbe 	bl	68dc <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    8960:	f002 fce8 	bl	b334 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    8964:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8968:	2b00      	cmp	r3, #0
    896a:	d008      	beq.n	897e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    896c:	9803      	ldr	r0, [sp, #12]
    896e:	f000 ff27 	bl	97c0 <FlexCAN_Disable>
    8972:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    8974:	9b04      	ldr	r3, [sp, #16]
    8976:	2b00      	cmp	r3, #0
    8978:	d001      	beq.n	897e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    897a:	9b04      	ldr	r3, [sp, #16]
    897c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    897e:	9b05      	ldr	r3, [sp, #20]
}
    8980:	4618      	mov	r0, r3
    8982:	b007      	add	sp, #28
    8984:	f85d fb04 	ldr.w	pc, [sp], #4
    8988:	0000c230 	.word	0x0000c230

0000898c <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    898c:	b500      	push	{lr}
    898e:	b085      	sub	sp, #20
    8990:	4603      	mov	r3, r0
    8992:	9100      	str	r1, [sp, #0]
    8994:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8998:	f89d 3007 	ldrb.w	r3, [sp, #7]
    899c:	4a0d      	ldr	r2, [pc, #52]	; (89d4 <FlexCAN_Ip_GetBitrate+0x48>)
    899e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89a2:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    89a4:	2300      	movs	r3, #0
    89a6:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    89aa:	9803      	ldr	r0, [sp, #12]
    89ac:	f7fe f86c 	bl	6a88 <FlexCAN_IsExCbtEnabled>
    89b0:	4603      	mov	r3, r0
    89b2:	2b00      	cmp	r3, #0
    89b4:	d004      	beq.n	89c0 <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    89b6:	9900      	ldr	r1, [sp, #0]
    89b8:	9803      	ldr	r0, [sp, #12]
    89ba:	f7fd ffe9 	bl	6990 <FlexCAN_GetExtendedTimeSegments>
    89be:	e003      	b.n	89c8 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    89c0:	9900      	ldr	r1, [sp, #0]
    89c2:	9803      	ldr	r0, [sp, #12]
    89c4:	f7fe f80c 	bl	69e0 <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    89c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    89cc:	4618      	mov	r0, r3
    89ce:	b005      	add	sp, #20
    89d0:	f85d fb04 	ldr.w	pc, [sp], #4
    89d4:	0000c230 	.word	0x0000c230

000089d8 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    89d8:	b500      	push	{lr}
    89da:	b085      	sub	sp, #20
    89dc:	4603      	mov	r3, r0
    89de:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    89e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89e6:	4a0a      	ldr	r2, [pc, #40]	; (8a10 <FlexCAN_Ip_ClearTDCFail+0x38>)
    89e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89ec:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    89ee:	f002 fadb 	bl	afa8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    89f2:	9b03      	ldr	r3, [sp, #12]
    89f4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    89f8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    89fc:	9b03      	ldr	r3, [sp, #12]
    89fe:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    8a02:	f002 fafd 	bl	b000 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    8a06:	bf00      	nop
    8a08:	b005      	add	sp, #20
    8a0a:	f85d fb04 	ldr.w	pc, [sp], #4
    8a0e:	bf00      	nop
    8a10:	0000c230 	.word	0x0000c230

00008a14 <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    8a14:	b084      	sub	sp, #16
    8a16:	4603      	mov	r3, r0
    8a18:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    8a1c:	2300      	movs	r3, #0
    8a1e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    8a22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a26:	4a0a      	ldr	r2, [pc, #40]	; (8a50 <FlexCAN_Ip_GetTDCFail+0x3c>)
    8a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a2c:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    8a2e:	9b02      	ldr	r3, [sp, #8]
    8a30:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    8a3c:	bf0c      	ite	eq
    8a3e:	2301      	moveq	r3, #1
    8a40:	2300      	movne	r3, #0
    8a42:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    8a46:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8a4a:	4618      	mov	r0, r3
    8a4c:	b004      	add	sp, #16
    8a4e:	4770      	bx	lr
    8a50:	0000c230 	.word	0x0000c230

00008a54 <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    8a54:	b084      	sub	sp, #16
    8a56:	4603      	mov	r3, r0
    8a58:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    8a5c:	2300      	movs	r3, #0
    8a5e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    8a62:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8a66:	4a08      	ldr	r2, [pc, #32]	; (8a88 <FlexCAN_Ip_GetTDCValue+0x34>)
    8a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8a6c:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    8a6e:	9b02      	ldr	r3, [sp, #8]
    8a70:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8a74:	b2db      	uxtb	r3, r3
    8a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8a7a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    8a7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8a82:	4618      	mov	r0, r3
    8a84:	b004      	add	sp, #16
    8a86:	4770      	bx	lr
    8a88:	0000c230 	.word	0x0000c230

00008a8c <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    8a8c:	b500      	push	{lr}
    8a8e:	b087      	sub	sp, #28
    8a90:	4603      	mov	r3, r0
    8a92:	9100      	str	r1, [sp, #0]
    8a94:	f88d 3007 	strb.w	r3, [sp, #7]
    8a98:	4613      	mov	r3, r2
    8a9a:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8a9e:	2300      	movs	r3, #0
    8aa0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    8aa2:	2300      	movs	r3, #0
    8aa4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8aa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8aaa:	4a1e      	ldr	r2, [pc, #120]	; (8b24 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    8aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ab0:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    8ab2:	9803      	ldr	r0, [sp, #12]
    8ab4:	f7fe f81f 	bl	6af6 <FlexCAN_IsFDEnabled>
    8ab8:	4603      	mov	r3, r0
    8aba:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    8abe:	9b03      	ldr	r3, [sp, #12]
    8ac0:	681b      	ldr	r3, [r3, #0]
    8ac2:	0fdb      	lsrs	r3, r3, #31
    8ac4:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    8ac8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    8acc:	2b00      	cmp	r3, #0
    8ace:	d003      	beq.n	8ad8 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    8ad0:	9803      	ldr	r0, [sp, #12]
    8ad2:	f000 fdf7 	bl	96c4 <FlexCAN_Enable>
    8ad6:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    8ad8:	9b05      	ldr	r3, [sp, #20]
    8ada:	2b00      	cmp	r3, #0
    8adc:	d10f      	bne.n	8afe <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    8ade:	f002 fc4f 	bl	b380 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    8ae2:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8ae6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8aea:	4619      	mov	r1, r3
    8aec:	9803      	ldr	r0, [sp, #12]
    8aee:	f7fd fe41 	bl	6774 <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    8af2:	9900      	ldr	r1, [sp, #0]
    8af4:	9803      	ldr	r0, [sp, #12]
    8af6:	f7fd febc 	bl	6872 <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    8afa:	f002 fc6d 	bl	b3d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    8afe:	f89d 300a 	ldrb.w	r3, [sp, #10]
    8b02:	2b00      	cmp	r3, #0
    8b04:	d008      	beq.n	8b18 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    8b06:	9803      	ldr	r0, [sp, #12]
    8b08:	f000 fe5a 	bl	97c0 <FlexCAN_Disable>
    8b0c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    8b0e:	9b04      	ldr	r3, [sp, #16]
    8b10:	2b00      	cmp	r3, #0
    8b12:	d001      	beq.n	8b18 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    8b14:	9b04      	ldr	r3, [sp, #16]
    8b16:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    8b18:	9b05      	ldr	r3, [sp, #20]
}
    8b1a:	4618      	mov	r0, r3
    8b1c:	b007      	add	sp, #28
    8b1e:	f85d fb04 	ldr.w	pc, [sp], #4
    8b22:	bf00      	nop
    8b24:	0000c230 	.word	0x0000c230

00008b28 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    8b28:	b500      	push	{lr}
    8b2a:	b085      	sub	sp, #20
    8b2c:	4603      	mov	r3, r0
    8b2e:	9100      	str	r1, [sp, #0]
    8b30:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8b34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8b38:	4a08      	ldr	r2, [pc, #32]	; (8b5c <FlexCAN_Ip_GetBitrateFD+0x34>)
    8b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b3e:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    8b40:	2300      	movs	r3, #0
    8b42:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    8b46:	9900      	ldr	r1, [sp, #0]
    8b48:	9803      	ldr	r0, [sp, #12]
    8b4a:	f7fd ff70 	bl	6a2e <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    8b4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    8b52:	4618      	mov	r0, r3
    8b54:	b005      	add	sp, #20
    8b56:	f85d fb04 	ldr.w	pc, [sp], #4
    8b5a:	bf00      	nop
    8b5c:	0000c230 	.word	0x0000c230

00008b60 <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    8b60:	b500      	push	{lr}
    8b62:	b087      	sub	sp, #28
    8b64:	4603      	mov	r3, r0
    8b66:	f88d 3007 	strb.w	r3, [sp, #7]
    8b6a:	460b      	mov	r3, r1
    8b6c:	f88d 3006 	strb.w	r3, [sp, #6]
    8b70:	4613      	mov	r3, r2
    8b72:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8b76:	2300      	movs	r3, #0
    8b78:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    8b7a:	2300      	movs	r3, #0
    8b7c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8b7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8b82:	4a20      	ldr	r2, [pc, #128]	; (8c04 <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    8b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b88:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    8b8a:	9803      	ldr	r0, [sp, #12]
    8b8c:	f7fd fde8 	bl	6760 <FlexCAN_IsEnabled>
    8b90:	4603      	mov	r3, r0
    8b92:	2b00      	cmp	r3, #0
    8b94:	bf14      	ite	ne
    8b96:	2301      	movne	r3, #1
    8b98:	2300      	moveq	r3, #0
    8b9a:	b2db      	uxtb	r3, r3
    8b9c:	f083 0301 	eor.w	r3, r3, #1
    8ba0:	b2db      	uxtb	r3, r3
    8ba2:	f88d 300b 	strb.w	r3, [sp, #11]
    8ba6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8baa:	f003 0301 	and.w	r3, r3, #1
    8bae:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    8bb2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8bb6:	2b00      	cmp	r3, #0
    8bb8:	d003      	beq.n	8bc2 <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    8bba:	9803      	ldr	r0, [sp, #12]
    8bbc:	f000 fd82 	bl	96c4 <FlexCAN_Enable>
    8bc0:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    8bc2:	9b05      	ldr	r3, [sp, #20]
    8bc4:	2b00      	cmp	r3, #0
    8bc6:	d10b      	bne.n	8be0 <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    8bc8:	f002 fc2c 	bl	b424 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    8bcc:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8bd0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8bd4:	4619      	mov	r1, r3
    8bd6:	9803      	ldr	r0, [sp, #12]
    8bd8:	f7fd fd9b 	bl	6712 <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    8bdc:	f002 fc4e 	bl	b47c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    8be0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8be4:	2b00      	cmp	r3, #0
    8be6:	d008      	beq.n	8bfa <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    8be8:	9803      	ldr	r0, [sp, #12]
    8bea:	f000 fde9 	bl	97c0 <FlexCAN_Disable>
    8bee:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    8bf0:	9b04      	ldr	r3, [sp, #16]
    8bf2:	2b00      	cmp	r3, #0
    8bf4:	d001      	beq.n	8bfa <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    8bf6:	9b04      	ldr	r3, [sp, #16]
    8bf8:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    8bfa:	9b05      	ldr	r3, [sp, #20]
}
    8bfc:	4618      	mov	r0, r3
    8bfe:	b007      	add	sp, #28
    8c00:	f85d fb04 	ldr.w	pc, [sp], #4
    8c04:	0000c230 	.word	0x0000c230

00008c08 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    8c08:	b500      	push	{lr}
    8c0a:	b087      	sub	sp, #28
    8c0c:	4603      	mov	r3, r0
    8c0e:	460a      	mov	r2, r1
    8c10:	f88d 3007 	strb.w	r3, [sp, #7]
    8c14:	4613      	mov	r3, r2
    8c16:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8c1a:	2300      	movs	r3, #0
    8c1c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    8c1e:	2300      	movs	r3, #0
    8c20:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8c22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c26:	4a1f      	ldr	r2, [pc, #124]	; (8ca4 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    8c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c2c:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    8c2e:	9803      	ldr	r0, [sp, #12]
    8c30:	f7fd fd96 	bl	6760 <FlexCAN_IsEnabled>
    8c34:	4603      	mov	r3, r0
    8c36:	2b00      	cmp	r3, #0
    8c38:	bf14      	ite	ne
    8c3a:	2301      	movne	r3, #1
    8c3c:	2300      	moveq	r3, #0
    8c3e:	b2db      	uxtb	r3, r3
    8c40:	f083 0301 	eor.w	r3, r3, #1
    8c44:	b2db      	uxtb	r3, r3
    8c46:	f88d 300b 	strb.w	r3, [sp, #11]
    8c4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8c4e:	f003 0301 	and.w	r3, r3, #1
    8c52:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    8c56:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8c5a:	2b00      	cmp	r3, #0
    8c5c:	d003      	beq.n	8c66 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    8c5e:	9803      	ldr	r0, [sp, #12]
    8c60:	f000 fd30 	bl	96c4 <FlexCAN_Enable>
    8c64:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    8c66:	9b05      	ldr	r3, [sp, #20]
    8c68:	2b00      	cmp	r3, #0
    8c6a:	d109      	bne.n	8c80 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    8c6c:	f002 fc2c 	bl	b4c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    8c70:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8c74:	4619      	mov	r1, r3
    8c76:	9803      	ldr	r0, [sp, #12]
    8c78:	f7fd ffb3 	bl	6be2 <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    8c7c:	f002 fc50 	bl	b520 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    8c80:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8c84:	2b00      	cmp	r3, #0
    8c86:	d008      	beq.n	8c9a <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    8c88:	9803      	ldr	r0, [sp, #12]
    8c8a:	f000 fd99 	bl	97c0 <FlexCAN_Disable>
    8c8e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    8c90:	9b04      	ldr	r3, [sp, #16]
    8c92:	2b00      	cmp	r3, #0
    8c94:	d001      	beq.n	8c9a <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    8c96:	9b04      	ldr	r3, [sp, #16]
    8c98:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    8c9a:	9b05      	ldr	r3, [sp, #20]
}
    8c9c:	4618      	mov	r0, r3
    8c9e:	b007      	add	sp, #28
    8ca0:	f85d fb04 	ldr.w	pc, [sp], #4
    8ca4:	0000c230 	.word	0x0000c230

00008ca8 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    8ca8:	b500      	push	{lr}
    8caa:	b085      	sub	sp, #20
    8cac:	4603      	mov	r3, r0
    8cae:	460a      	mov	r2, r1
    8cb0:	f88d 3007 	strb.w	r3, [sp, #7]
    8cb4:	4613      	mov	r3, r2
    8cb6:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8cba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8cbe:	4a0b      	ldr	r2, [pc, #44]	; (8cec <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    8cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8cc4:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    8cc6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8cca:	4619      	mov	r1, r3
    8ccc:	9803      	ldr	r0, [sp, #12]
    8cce:	f7fd fdb4 	bl	683a <FlexCAN_GetBuffStatusFlag>
    8cd2:	4603      	mov	r3, r0
    8cd4:	2b01      	cmp	r3, #1
    8cd6:	bf0c      	ite	eq
    8cd8:	2301      	moveq	r3, #1
    8cda:	2300      	movne	r3, #0
    8cdc:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    8ce0:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    8ce4:	4618      	mov	r0, r3
    8ce6:	b005      	add	sp, #20
    8ce8:	f85d fb04 	ldr.w	pc, [sp], #4
    8cec:	0000c230 	.word	0x0000c230

00008cf0 <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    8cf0:	b500      	push	{lr}
    8cf2:	b085      	sub	sp, #20
    8cf4:	4603      	mov	r3, r0
    8cf6:	460a      	mov	r2, r1
    8cf8:	f88d 3007 	strb.w	r3, [sp, #7]
    8cfc:	4613      	mov	r3, r2
    8cfe:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8d02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8d06:	4a07      	ldr	r2, [pc, #28]	; (8d24 <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    8d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d0c:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    8d0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8d12:	4619      	mov	r1, r3
    8d14:	9803      	ldr	r0, [sp, #12]
    8d16:	f7fd fd7d 	bl	6814 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    8d1a:	bf00      	nop
    8d1c:	b005      	add	sp, #20
    8d1e:	f85d fb04 	ldr.w	pc, [sp], #4
    8d22:	bf00      	nop
    8d24:	0000c230 	.word	0x0000c230

00008d28 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    8d28:	b500      	push	{lr}
    8d2a:	b087      	sub	sp, #28
    8d2c:	4603      	mov	r3, r0
    8d2e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    8d32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8d36:	4a11      	ldr	r2, [pc, #68]	; (8d7c <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    8d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d3c:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    8d3e:	2301      	movs	r3, #1
    8d40:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    8d42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8d46:	4a0e      	ldr	r2, [pc, #56]	; (8d80 <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    8d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d4c:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    8d4e:	9804      	ldr	r0, [sp, #16]
    8d50:	f7fd fd06 	bl	6760 <FlexCAN_IsEnabled>
    8d54:	4603      	mov	r3, r0
    8d56:	2b00      	cmp	r3, #0
    8d58:	d00b      	beq.n	8d72 <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    8d5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8d5e:	4619      	mov	r1, r3
    8d60:	9804      	ldr	r0, [sp, #16]
    8d62:	f000 ffe1 	bl	9d28 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    8d66:	9b03      	ldr	r3, [sp, #12]
    8d68:	2201      	movs	r2, #1
    8d6a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    8d6e:	2300      	movs	r3, #0
    8d70:	9305      	str	r3, [sp, #20]
    }

    return result;
    8d72:	9b05      	ldr	r3, [sp, #20]
}
    8d74:	4618      	mov	r0, r3
    8d76:	b007      	add	sp, #28
    8d78:	f85d fb04 	ldr.w	pc, [sp], #4
    8d7c:	0000c230 	.word	0x0000c230
    8d80:	1fff8f58 	.word	0x1fff8f58

00008d84 <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    8d84:	b500      	push	{lr}
    8d86:	b087      	sub	sp, #28
    8d88:	4603      	mov	r3, r0
    8d8a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    8d8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8d92:	4a10      	ldr	r2, [pc, #64]	; (8dd4 <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    8d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8d98:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    8d9a:	2301      	movs	r3, #1
    8d9c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    8d9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8da2:	4a0d      	ldr	r2, [pc, #52]	; (8dd8 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    8da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8da8:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    8daa:	9804      	ldr	r0, [sp, #16]
    8dac:	f7fd fcd8 	bl	6760 <FlexCAN_IsEnabled>
    8db0:	4603      	mov	r3, r0
    8db2:	2b00      	cmp	r3, #0
    8db4:	d008      	beq.n	8dc8 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    8db6:	9804      	ldr	r0, [sp, #16]
    8db8:	f000 ffae 	bl	9d18 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    8dbc:	9b03      	ldr	r3, [sp, #12]
    8dbe:	2200      	movs	r2, #0
    8dc0:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    8dc4:	2300      	movs	r3, #0
    8dc6:	9305      	str	r3, [sp, #20]
    }

    return result;
    8dc8:	9b05      	ldr	r3, [sp, #20]
}
    8dca:	4618      	mov	r0, r3
    8dcc:	b007      	add	sp, #28
    8dce:	f85d fb04 	ldr.w	pc, [sp], #4
    8dd2:	bf00      	nop
    8dd4:	0000c230 	.word	0x0000c230
    8dd8:	1fff8f58 	.word	0x1fff8f58

00008ddc <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    8ddc:	b500      	push	{lr}
    8dde:	b087      	sub	sp, #28
    8de0:	4603      	mov	r3, r0
    8de2:	9100      	str	r1, [sp, #0]
    8de4:	f88d 3007 	strb.w	r3, [sp, #7]
    8de8:	4613      	mov	r3, r2
    8dea:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8dee:	2300      	movs	r3, #0
    8df0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    8df2:	2300      	movs	r3, #0
    8df4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    8df6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8dfa:	4a3a      	ldr	r2, [pc, #232]	; (8ee4 <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    8dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e00:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    8e02:	9803      	ldr	r0, [sp, #12]
    8e04:	f7fd fcac 	bl	6760 <FlexCAN_IsEnabled>
    8e08:	4603      	mov	r3, r0
    8e0a:	2b00      	cmp	r3, #0
    8e0c:	bf14      	ite	ne
    8e0e:	2301      	movne	r3, #1
    8e10:	2300      	moveq	r3, #0
    8e12:	b2db      	uxtb	r3, r3
    8e14:	f083 0301 	eor.w	r3, r3, #1
    8e18:	b2db      	uxtb	r3, r3
    8e1a:	f88d 300b 	strb.w	r3, [sp, #11]
    8e1e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8e22:	f003 0301 	and.w	r3, r3, #1
    8e26:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    8e2a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8e2e:	2b00      	cmp	r3, #0
    8e30:	d003      	beq.n	8e3a <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    8e32:	9803      	ldr	r0, [sp, #12]
    8e34:	f000 fc46 	bl	96c4 <FlexCAN_Enable>
    8e38:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    8e3a:	9b05      	ldr	r3, [sp, #20]
    8e3c:	2b00      	cmp	r3, #0
    8e3e:	d13c      	bne.n	8eba <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    8e40:	9b00      	ldr	r3, [sp, #0]
    8e42:	2b04      	cmp	r3, #4
    8e44:	d83b      	bhi.n	8ebe <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    8e46:	a201      	add	r2, pc, #4	; (adr r2, 8e4c <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    8e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8e4c:	00008e97 	.word	0x00008e97
    8e50:	00008ea9 	.word	0x00008ea9
    8e54:	00008e73 	.word	0x00008e73
    8e58:	00008e85 	.word	0x00008e85
    8e5c:	00008e61 	.word	0x00008e61
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    8e60:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e64:	461a      	mov	r2, r3
    8e66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8e6a:	9803      	ldr	r0, [sp, #12]
    8e6c:	f000 fce8 	bl	9840 <FlexCAN_SetErrIntCmd>
                break;
    8e70:	e026      	b.n	8ec0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    8e72:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e76:	461a      	mov	r2, r3
    8e78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    8e7c:	9803      	ldr	r0, [sp, #12]
    8e7e:	f000 fcdf 	bl	9840 <FlexCAN_SetErrIntCmd>
                break;
    8e82:	e01d      	b.n	8ec0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    8e84:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e88:	461a      	mov	r2, r3
    8e8a:	f244 0101 	movw	r1, #16385	; 0x4001
    8e8e:	9803      	ldr	r0, [sp, #12]
    8e90:	f000 fcd6 	bl	9840 <FlexCAN_SetErrIntCmd>
                break;
    8e94:	e014      	b.n	8ec0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    8e96:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e9a:	461a      	mov	r2, r3
    8e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8ea0:	9803      	ldr	r0, [sp, #12]
    8ea2:	f000 fccd 	bl	9840 <FlexCAN_SetErrIntCmd>
                }
                break;
    8ea6:	e00b      	b.n	8ec0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    8ea8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8eac:	461a      	mov	r2, r3
    8eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
    8eb2:	9803      	ldr	r0, [sp, #12]
    8eb4:	f000 fcc4 	bl	9840 <FlexCAN_SetErrIntCmd>
                }
                break;
    8eb8:	e002      	b.n	8ec0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    8eba:	bf00      	nop
    8ebc:	e000      	b.n	8ec0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    8ebe:	bf00      	nop

    if (TRUE == disabled)
    8ec0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8ec4:	2b00      	cmp	r3, #0
    8ec6:	d008      	beq.n	8eda <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    8ec8:	9803      	ldr	r0, [sp, #12]
    8eca:	f000 fc79 	bl	97c0 <FlexCAN_Disable>
    8ece:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    8ed0:	9b04      	ldr	r3, [sp, #16]
    8ed2:	2b00      	cmp	r3, #0
    8ed4:	d001      	beq.n	8eda <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    8ed6:	9b04      	ldr	r3, [sp, #16]
    8ed8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    8eda:	9b05      	ldr	r3, [sp, #20]
}
    8edc:	4618      	mov	r0, r3
    8ede:	b007      	add	sp, #28
    8ee0:	f85d fb04 	ldr.w	pc, [sp], #4
    8ee4:	0000c230 	.word	0x0000c230

00008ee8 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    8ee8:	b500      	push	{lr}
    8eea:	b087      	sub	sp, #28
    8eec:	4603      	mov	r3, r0
    8eee:	460a      	mov	r2, r1
    8ef0:	f88d 3007 	strb.w	r3, [sp, #7]
    8ef4:	4613      	mov	r3, r2
    8ef6:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    8efa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8efe:	4a27      	ldr	r2, [pc, #156]	; (8f9c <FlexCAN_Ip_AbortTransfer+0xb4>)
    8f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f04:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    8f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f0a:	4a25      	ldr	r2, [pc, #148]	; (8fa0 <FlexCAN_Ip_AbortTransfer+0xb8>)
    8f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f10:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8f12:	2300      	movs	r3, #0
    8f14:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    8f16:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f1a:	2b1f      	cmp	r3, #31
    8f1c:	d838      	bhi.n	8f90 <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    8f1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f22:	9a03      	ldr	r2, [sp, #12]
    8f24:	011b      	lsls	r3, r3, #4
    8f26:	4413      	add	r3, r2
    8f28:	3304      	adds	r3, #4
    8f2a:	681b      	ldr	r3, [r3, #0]
    8f2c:	2b00      	cmp	r3, #0
    8f2e:	d102      	bne.n	8f36 <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    8f30:	2305      	movs	r3, #5
    8f32:	9305      	str	r3, [sp, #20]
    8f34:	e02c      	b.n	8f90 <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    8f36:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8f3a:	9b03      	ldr	r3, [sp, #12]
    8f3c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8f40:	f89d 1007 	ldrb.w	r1, [sp, #7]
    8f44:	9804      	ldr	r0, [sp, #16]
    8f46:	f000 feb3 	bl	9cb0 <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    8f4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f4e:	9a03      	ldr	r2, [sp, #12]
    8f50:	011b      	lsls	r3, r3, #4
    8f52:	4413      	add	r3, r2
    8f54:	3304      	adds	r3, #4
    8f56:	681b      	ldr	r3, [r3, #0]
    8f58:	2b02      	cmp	r3, #2
    8f5a:	d108      	bne.n	8f6e <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    8f5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8f60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f64:	4611      	mov	r1, r2
    8f66:	4618      	mov	r0, r3
    8f68:	f7fe fb2c 	bl	75c4 <FlexCAN_AbortTxTransfer>
    8f6c:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    8f6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8f72:	9a03      	ldr	r2, [sp, #12]
    8f74:	011b      	lsls	r3, r3, #4
    8f76:	4413      	add	r3, r2
    8f78:	3304      	adds	r3, #4
    8f7a:	681b      	ldr	r3, [r3, #0]
    8f7c:	2b01      	cmp	r3, #1
    8f7e:	d107      	bne.n	8f90 <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    8f80:	f89d 2006 	ldrb.w	r2, [sp, #6]
    8f84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f88:	4611      	mov	r1, r2
    8f8a:	4618      	mov	r0, r3
    8f8c:	f7fe fba4 	bl	76d8 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    8f90:	9b05      	ldr	r3, [sp, #20]
}
    8f92:	4618      	mov	r0, r3
    8f94:	b007      	add	sp, #28
    8f96:	f85d fb04 	ldr.w	pc, [sp], #4
    8f9a:	bf00      	nop
    8f9c:	0000c230 	.word	0x0000c230
    8fa0:	1fff8f58 	.word	0x1fff8f58

00008fa4 <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    8fa4:	b500      	push	{lr}
    8fa6:	b087      	sub	sp, #28
    8fa8:	4603      	mov	r3, r0
    8faa:	9100      	str	r1, [sp, #0]
    8fac:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8fb0:	2300      	movs	r3, #0
    8fb2:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    8fb4:	2300      	movs	r3, #0
    8fb6:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    8fb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8fbc:	4a1b      	ldr	r2, [pc, #108]	; (902c <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    8fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8fc2:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    8fc4:	9803      	ldr	r0, [sp, #12]
    8fc6:	f7fd fbcb 	bl	6760 <FlexCAN_IsEnabled>
    8fca:	4603      	mov	r3, r0
    8fcc:	2b00      	cmp	r3, #0
    8fce:	bf14      	ite	ne
    8fd0:	2301      	movne	r3, #1
    8fd2:	2300      	moveq	r3, #0
    8fd4:	b2db      	uxtb	r3, r3
    8fd6:	f083 0301 	eor.w	r3, r3, #1
    8fda:	b2db      	uxtb	r3, r3
    8fdc:	f88d 300b 	strb.w	r3, [sp, #11]
    8fe0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8fe4:	f003 0301 	and.w	r3, r3, #1
    8fe8:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    8fec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8ff0:	2b00      	cmp	r3, #0
    8ff2:	d003      	beq.n	8ffc <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    8ff4:	9803      	ldr	r0, [sp, #12]
    8ff6:	f000 fb65 	bl	96c4 <FlexCAN_Enable>
    8ffa:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    8ffc:	9b05      	ldr	r3, [sp, #20]
    8ffe:	2b00      	cmp	r3, #0
    9000:	d102      	bne.n	9008 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    9002:	9b03      	ldr	r3, [sp, #12]
    9004:	9a00      	ldr	r2, [sp, #0]
    9006:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    9008:	f89d 300b 	ldrb.w	r3, [sp, #11]
    900c:	2b00      	cmp	r3, #0
    900e:	d008      	beq.n	9022 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    9010:	9803      	ldr	r0, [sp, #12]
    9012:	f000 fbd5 	bl	97c0 <FlexCAN_Disable>
    9016:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9018:	9b04      	ldr	r3, [sp, #16]
    901a:	2b00      	cmp	r3, #0
    901c:	d001      	beq.n	9022 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    901e:	9b04      	ldr	r3, [sp, #16]
    9020:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    9022:	9b05      	ldr	r3, [sp, #20]
}
    9024:	4618      	mov	r0, r3
    9026:	b007      	add	sp, #28
    9028:	f85d fb04 	ldr.w	pc, [sp], #4
    902c:	0000c230 	.word	0x0000c230

00009030 <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    9030:	b500      	push	{lr}
    9032:	b087      	sub	sp, #28
    9034:	4603      	mov	r3, r0
    9036:	9100      	str	r1, [sp, #0]
    9038:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    903c:	2300      	movs	r3, #0
    903e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9040:	2300      	movs	r3, #0
    9042:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9044:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9048:	4a1b      	ldr	r2, [pc, #108]	; (90b8 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    904a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    904e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9050:	9803      	ldr	r0, [sp, #12]
    9052:	f7fd fb85 	bl	6760 <FlexCAN_IsEnabled>
    9056:	4603      	mov	r3, r0
    9058:	2b00      	cmp	r3, #0
    905a:	bf14      	ite	ne
    905c:	2301      	movne	r3, #1
    905e:	2300      	moveq	r3, #0
    9060:	b2db      	uxtb	r3, r3
    9062:	f083 0301 	eor.w	r3, r3, #1
    9066:	b2db      	uxtb	r3, r3
    9068:	f88d 300b 	strb.w	r3, [sp, #11]
    906c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9070:	f003 0301 	and.w	r3, r3, #1
    9074:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    9078:	f89d 300b 	ldrb.w	r3, [sp, #11]
    907c:	2b00      	cmp	r3, #0
    907e:	d003      	beq.n	9088 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    9080:	9803      	ldr	r0, [sp, #12]
    9082:	f000 fb1f 	bl	96c4 <FlexCAN_Enable>
    9086:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    9088:	9b05      	ldr	r3, [sp, #20]
    908a:	2b00      	cmp	r3, #0
    908c:	d102      	bne.n	9094 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    908e:	9b03      	ldr	r3, [sp, #12]
    9090:	9a00      	ldr	r2, [sp, #0]
    9092:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    9094:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9098:	2b00      	cmp	r3, #0
    909a:	d008      	beq.n	90ae <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    909c:	9803      	ldr	r0, [sp, #12]
    909e:	f000 fb8f 	bl	97c0 <FlexCAN_Disable>
    90a2:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    90a4:	9b04      	ldr	r3, [sp, #16]
    90a6:	2b00      	cmp	r3, #0
    90a8:	d001      	beq.n	90ae <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    90aa:	9b04      	ldr	r3, [sp, #16]
    90ac:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    90ae:	9b05      	ldr	r3, [sp, #20]
}
    90b0:	4618      	mov	r0, r3
    90b2:	b007      	add	sp, #28
    90b4:	f85d fb04 	ldr.w	pc, [sp], #4
    90b8:	0000c230 	.word	0x0000c230

000090bc <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    90bc:	b500      	push	{lr}
    90be:	b087      	sub	sp, #28
    90c0:	4603      	mov	r3, r0
    90c2:	460a      	mov	r2, r1
    90c4:	f88d 3007 	strb.w	r3, [sp, #7]
    90c8:	4613      	mov	r3, r2
    90ca:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    90ce:	2300      	movs	r3, #0
    90d0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    90d2:	2300      	movs	r3, #0
    90d4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    90d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    90da:	4a1f      	ldr	r2, [pc, #124]	; (9158 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    90dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    90e0:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    90e2:	9803      	ldr	r0, [sp, #12]
    90e4:	f7fd fb3c 	bl	6760 <FlexCAN_IsEnabled>
    90e8:	4603      	mov	r3, r0
    90ea:	2b00      	cmp	r3, #0
    90ec:	bf14      	ite	ne
    90ee:	2301      	movne	r3, #1
    90f0:	2300      	moveq	r3, #0
    90f2:	b2db      	uxtb	r3, r3
    90f4:	f083 0301 	eor.w	r3, r3, #1
    90f8:	b2db      	uxtb	r3, r3
    90fa:	f88d 300b 	strb.w	r3, [sp, #11]
    90fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9102:	f003 0301 	and.w	r3, r3, #1
    9106:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    910a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    910e:	2b00      	cmp	r3, #0
    9110:	d003      	beq.n	911a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    9112:	9803      	ldr	r0, [sp, #12]
    9114:	f000 fad6 	bl	96c4 <FlexCAN_Enable>
    9118:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    911a:	9b05      	ldr	r3, [sp, #20]
    911c:	2b00      	cmp	r3, #0
    911e:	d109      	bne.n	9134 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    9120:	f001 ff94 	bl	b04c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    9124:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9128:	4619      	mov	r1, r3
    912a:	9803      	ldr	r0, [sp, #12]
    912c:	f7fd fb55 	bl	67da <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    9130:	f001 ffb8 	bl	b0a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    9134:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9138:	2b00      	cmp	r3, #0
    913a:	d008      	beq.n	914e <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    913c:	9803      	ldr	r0, [sp, #12]
    913e:	f000 fb3f 	bl	97c0 <FlexCAN_Disable>
    9142:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9144:	9b04      	ldr	r3, [sp, #16]
    9146:	2b00      	cmp	r3, #0
    9148:	d001      	beq.n	914e <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    914a:	9b04      	ldr	r3, [sp, #16]
    914c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    914e:	9b05      	ldr	r3, [sp, #20]
}
    9150:	4618      	mov	r0, r3
    9152:	b007      	add	sp, #28
    9154:	f85d fb04 	ldr.w	pc, [sp], #4
    9158:	0000c230 	.word	0x0000c230

0000915c <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    915c:	b500      	push	{lr}
    915e:	b085      	sub	sp, #20
    9160:	4603      	mov	r3, r0
    9162:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9166:	f89d 3007 	ldrb.w	r3, [sp, #7]
    916a:	4a06      	ldr	r2, [pc, #24]	; (9184 <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    916c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9170:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    9172:	9803      	ldr	r0, [sp, #12]
    9174:	f7fd fccd 	bl	6b12 <FlexCAN_IsListenOnlyModeEnabled>
    9178:	4603      	mov	r3, r0
}
    917a:	4618      	mov	r0, r3
    917c:	b005      	add	sp, #20
    917e:	f85d fb04 	ldr.w	pc, [sp], #4
    9182:	bf00      	nop
    9184:	0000c230 	.word	0x0000c230

00009188 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    9188:	b500      	push	{lr}
    918a:	b089      	sub	sp, #36	; 0x24
    918c:	4603      	mov	r3, r0
    918e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    9192:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9196:	4a27      	ldr	r2, [pc, #156]	; (9234 <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    9198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    919c:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    919e:	2300      	movs	r3, #0
    91a0:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    91a2:	2300      	movs	r3, #0
    91a4:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    91a6:	2100      	movs	r1, #0
    91a8:	4823      	ldr	r0, [pc, #140]	; (9238 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    91aa:	f7f7 fd80 	bl	cae <OsIf_MicrosToTicks>
    91ae:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    91b0:	2301      	movs	r3, #1
    91b2:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    91b4:	9b05      	ldr	r3, [sp, #20]
    91b6:	685b      	ldr	r3, [r3, #4]
    91b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    91bc:	2b00      	cmp	r3, #0
    91be:	d033      	beq.n	9228 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    91c0:	2300      	movs	r3, #0
    91c2:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    91c4:	9b05      	ldr	r3, [sp, #20]
    91c6:	6a1b      	ldr	r3, [r3, #32]
    91c8:	f003 0320 	and.w	r3, r3, #32
    91cc:	2b00      	cmp	r3, #0
    91ce:	d02b      	beq.n	9228 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    91d0:	f002 fa70 	bl	b6b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    91d4:	9b05      	ldr	r3, [sp, #20]
    91d6:	685b      	ldr	r3, [r3, #4]
    91d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    91dc:	9b05      	ldr	r3, [sp, #20]
    91de:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    91e0:	9b05      	ldr	r3, [sp, #20]
    91e2:	685b      	ldr	r3, [r3, #4]
    91e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    91e8:	9b05      	ldr	r3, [sp, #20]
    91ea:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    91ec:	f002 fa8e 	bl	b70c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    91f0:	2000      	movs	r0, #0
    91f2:	f7f7 fd10 	bl	c16 <OsIf_GetCounter>
    91f6:	4603      	mov	r3, r0
    91f8:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    91fa:	e00f      	b.n	921c <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    91fc:	ab03      	add	r3, sp, #12
    91fe:	2100      	movs	r1, #0
    9200:	4618      	mov	r0, r3
    9202:	f7f7 fd21 	bl	c48 <OsIf_GetElapsed>
    9206:	4602      	mov	r2, r0
    9208:	9b07      	ldr	r3, [sp, #28]
    920a:	4413      	add	r3, r2
    920c:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    920e:	9a07      	ldr	r2, [sp, #28]
    9210:	9b04      	ldr	r3, [sp, #16]
    9212:	429a      	cmp	r2, r3
    9214:	d302      	bcc.n	921c <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    9216:	2303      	movs	r3, #3
    9218:	9306      	str	r3, [sp, #24]
                    break;
    921a:	e005      	b.n	9228 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    921c:	9b05      	ldr	r3, [sp, #20]
    921e:	6a1b      	ldr	r3, [r3, #32]
    9220:	f003 0320 	and.w	r3, r3, #32
    9224:	2b00      	cmp	r3, #0
    9226:	d1e9      	bne.n	91fc <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    9228:	9b06      	ldr	r3, [sp, #24]
}
    922a:	4618      	mov	r0, r3
    922c:	b009      	add	sp, #36	; 0x24
    922e:	f85d fb04 	ldr.w	pc, [sp], #4
    9232:	bf00      	nop
    9234:	0000c230 	.word	0x0000c230
    9238:	000f4240 	.word	0x000f4240

0000923c <FlexCAN_SetSelfReception>:
{
    923c:	b082      	sub	sp, #8
    923e:	9001      	str	r0, [sp, #4]
    9240:	460b      	mov	r3, r1
    9242:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    9246:	9b01      	ldr	r3, [sp, #4]
    9248:	681b      	ldr	r3, [r3, #0]
    924a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    924e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9252:	2a00      	cmp	r2, #0
    9254:	d001      	beq.n	925a <FlexCAN_SetSelfReception+0x1e>
    9256:	2200      	movs	r2, #0
    9258:	e001      	b.n	925e <FlexCAN_SetSelfReception+0x22>
    925a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    925e:	431a      	orrs	r2, r3
    9260:	9b01      	ldr	r3, [sp, #4]
    9262:	601a      	str	r2, [r3, #0]
}
    9264:	bf00      	nop
    9266:	b002      	add	sp, #8
    9268:	4770      	bx	lr

0000926a <FlexCAN_IsFDEnabled>:
{
    926a:	b082      	sub	sp, #8
    926c:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    926e:	9b01      	ldr	r3, [sp, #4]
    9270:	681b      	ldr	r3, [r3, #0]
    9272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    9276:	2b00      	cmp	r3, #0
    9278:	bf14      	ite	ne
    927a:	2301      	movne	r3, #1
    927c:	2300      	moveq	r3, #0
    927e:	b2db      	uxtb	r3, r3
}
    9280:	4618      	mov	r0, r3
    9282:	b002      	add	sp, #8
    9284:	4770      	bx	lr

00009286 <FlexCAN_SetIsoCan>:
{
    9286:	b082      	sub	sp, #8
    9288:	9001      	str	r0, [sp, #4]
    928a:	460b      	mov	r3, r1
    928c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    9290:	9b01      	ldr	r3, [sp, #4]
    9292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    9298:	f89d 2003 	ldrb.w	r2, [sp, #3]
    929c:	2a00      	cmp	r2, #0
    929e:	d002      	beq.n	92a6 <FlexCAN_SetIsoCan+0x20>
    92a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    92a4:	e000      	b.n	92a8 <FlexCAN_SetIsoCan+0x22>
    92a6:	2200      	movs	r2, #0
    92a8:	431a      	orrs	r2, r3
    92aa:	9b01      	ldr	r3, [sp, #4]
    92ac:	635a      	str	r2, [r3, #52]	; 0x34
}
    92ae:	bf00      	nop
    92b0:	b002      	add	sp, #8
    92b2:	4770      	bx	lr

000092b4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    92b4:	b082      	sub	sp, #8
    92b6:	9001      	str	r0, [sp, #4]
    92b8:	460b      	mov	r3, r1
    92ba:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    92be:	9b01      	ldr	r3, [sp, #4]
    92c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    92c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    92c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    92ca:	2a00      	cmp	r2, #0
    92cc:	d002      	beq.n	92d4 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    92ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    92d2:	e000      	b.n	92d6 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    92d4:	2200      	movs	r2, #0
    92d6:	431a      	orrs	r2, r3
    92d8:	9b01      	ldr	r3, [sp, #4]
    92da:	635a      	str	r2, [r3, #52]	; 0x34
}
    92dc:	bf00      	nop
    92de:	b002      	add	sp, #8
    92e0:	4770      	bx	lr

000092e2 <FlexCAN_SetProtocolException>:
{
    92e2:	b082      	sub	sp, #8
    92e4:	9001      	str	r0, [sp, #4]
    92e6:	460b      	mov	r3, r1
    92e8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    92ec:	9b01      	ldr	r3, [sp, #4]
    92ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    92f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    92f4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    92f8:	2a00      	cmp	r2, #0
    92fa:	d002      	beq.n	9302 <FlexCAN_SetProtocolException+0x20>
    92fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9300:	e000      	b.n	9304 <FlexCAN_SetProtocolException+0x22>
    9302:	2200      	movs	r2, #0
    9304:	431a      	orrs	r2, r3
    9306:	9b01      	ldr	r3, [sp, #4]
    9308:	635a      	str	r2, [r3, #52]	; 0x34
}
    930a:	bf00      	nop
    930c:	b002      	add	sp, #8
    930e:	4770      	bx	lr

00009310 <FlexCAN_SetRemoteReqStore>:
{
    9310:	b082      	sub	sp, #8
    9312:	9001      	str	r0, [sp, #4]
    9314:	460b      	mov	r3, r1
    9316:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    931a:	9b01      	ldr	r3, [sp, #4]
    931c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    931e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    9322:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9326:	2a00      	cmp	r2, #0
    9328:	d002      	beq.n	9330 <FlexCAN_SetRemoteReqStore+0x20>
    932a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    932e:	e000      	b.n	9332 <FlexCAN_SetRemoteReqStore+0x22>
    9330:	2200      	movs	r2, #0
    9332:	431a      	orrs	r2, r3
    9334:	9b01      	ldr	r3, [sp, #4]
    9336:	635a      	str	r2, [r3, #52]	; 0x34
}
    9338:	bf00      	nop
    933a:	b002      	add	sp, #8
    933c:	4770      	bx	lr

0000933e <FlexCAN_SetBusOffAutorecovery>:
{
    933e:	b082      	sub	sp, #8
    9340:	9001      	str	r0, [sp, #4]
    9342:	460b      	mov	r3, r1
    9344:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    9348:	9b01      	ldr	r3, [sp, #4]
    934a:	685b      	ldr	r3, [r3, #4]
    934c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    9350:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9354:	2a00      	cmp	r2, #0
    9356:	d001      	beq.n	935c <FlexCAN_SetBusOffAutorecovery+0x1e>
    9358:	2200      	movs	r2, #0
    935a:	e000      	b.n	935e <FlexCAN_SetBusOffAutorecovery+0x20>
    935c:	2240      	movs	r2, #64	; 0x40
    935e:	431a      	orrs	r2, r3
    9360:	9b01      	ldr	r3, [sp, #4]
    9362:	605a      	str	r2, [r3, #4]
}
    9364:	bf00      	nop
    9366:	b002      	add	sp, #8
    9368:	4770      	bx	lr

0000936a <FlexCAN_SetEdgeFilter>:
{
    936a:	b082      	sub	sp, #8
    936c:	9001      	str	r0, [sp, #4]
    936e:	460b      	mov	r3, r1
    9370:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    9374:	9b01      	ldr	r3, [sp, #4]
    9376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    937c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    9380:	2a00      	cmp	r2, #0
    9382:	d001      	beq.n	9388 <FlexCAN_SetEdgeFilter+0x1e>
    9384:	2200      	movs	r2, #0
    9386:	e001      	b.n	938c <FlexCAN_SetEdgeFilter+0x22>
    9388:	f44f 6200 	mov.w	r2, #2048	; 0x800
    938c:	431a      	orrs	r2, r3
    938e:	9b01      	ldr	r3, [sp, #4]
    9390:	635a      	str	r2, [r3, #52]	; 0x34
}
    9392:	bf00      	nop
    9394:	b002      	add	sp, #8
    9396:	4770      	bx	lr

00009398 <FlexCAN_CanBitSampling>:
{
    9398:	b082      	sub	sp, #8
    939a:	9001      	str	r0, [sp, #4]
    939c:	460b      	mov	r3, r1
    939e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    93a2:	9b01      	ldr	r3, [sp, #4]
    93a4:	685b      	ldr	r3, [r3, #4]
    93a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    93aa:	f89d 2003 	ldrb.w	r2, [sp, #3]
    93ae:	2a00      	cmp	r2, #0
    93b0:	d001      	beq.n	93b6 <FlexCAN_CanBitSampling+0x1e>
    93b2:	2280      	movs	r2, #128	; 0x80
    93b4:	e000      	b.n	93b8 <FlexCAN_CanBitSampling+0x20>
    93b6:	2200      	movs	r2, #0
    93b8:	431a      	orrs	r2, r3
    93ba:	9b01      	ldr	r3, [sp, #4]
    93bc:	605a      	str	r2, [r3, #4]
}
    93be:	bf00      	nop
    93c0:	b002      	add	sp, #8
    93c2:	4770      	bx	lr

000093c4 <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    93c4:	b084      	sub	sp, #16
    93c6:	4603      	mov	r3, r0
    93c8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    93cc:	23ff      	movs	r3, #255	; 0xff
    93ce:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    93d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93d4:	2b40      	cmp	r3, #64	; 0x40
    93d6:	d804      	bhi.n	93e2 <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    93d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93dc:	4a03      	ldr	r2, [pc, #12]	; (93ec <FlexCAN_ComputeDLCValue+0x28>)
    93de:	5cd3      	ldrb	r3, [r2, r3]
    93e0:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    93e2:	9b03      	ldr	r3, [sp, #12]
    93e4:	b2db      	uxtb	r3, r3
}
    93e6:	4618      	mov	r0, r3
    93e8:	b004      	add	sp, #16
    93ea:	4770      	bx	lr
    93ec:	0000c23c 	.word	0x0000c23c

000093f0 <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    93f0:	b500      	push	{lr}
    93f2:	b087      	sub	sp, #28
    93f4:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    93f6:	9801      	ldr	r0, [sp, #4]
    93f8:	f000 f8f6 	bl	95e8 <FlexCAN_GetMaxMbNum>
    93fc:	4603      	mov	r3, r0
    93fe:	009b      	lsls	r3, r3, #2
    9400:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    9402:	9801      	ldr	r0, [sp, #4]
    9404:	f000 f8f0 	bl	95e8 <FlexCAN_GetMaxMbNum>
    9408:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    940a:	9b01      	ldr	r3, [sp, #4]
    940c:	3380      	adds	r3, #128	; 0x80
    940e:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    9410:	2300      	movs	r3, #0
    9412:	9305      	str	r3, [sp, #20]
    9414:	e008      	b.n	9428 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    9416:	9b05      	ldr	r3, [sp, #20]
    9418:	009b      	lsls	r3, r3, #2
    941a:	9a02      	ldr	r2, [sp, #8]
    941c:	4413      	add	r3, r2
    941e:	2200      	movs	r2, #0
    9420:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    9422:	9b05      	ldr	r3, [sp, #20]
    9424:	3301      	adds	r3, #1
    9426:	9305      	str	r3, [sp, #20]
    9428:	9a05      	ldr	r2, [sp, #20]
    942a:	9b04      	ldr	r3, [sp, #16]
    942c:	429a      	cmp	r2, r3
    942e:	d3f2      	bcc.n	9416 <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    9430:	9b01      	ldr	r3, [sp, #4]
    9432:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    9436:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    9438:	2300      	movs	r3, #0
    943a:	9305      	str	r3, [sp, #20]
    943c:	e008      	b.n	9450 <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    943e:	9b05      	ldr	r3, [sp, #20]
    9440:	009b      	lsls	r3, r3, #2
    9442:	9a02      	ldr	r2, [sp, #8]
    9444:	4413      	add	r3, r2
    9446:	2200      	movs	r2, #0
    9448:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    944a:	9b05      	ldr	r3, [sp, #20]
    944c:	3301      	adds	r3, #1
    944e:	9305      	str	r3, [sp, #20]
    9450:	9a05      	ldr	r2, [sp, #20]
    9452:	9b03      	ldr	r3, [sp, #12]
    9454:	429a      	cmp	r2, r3
    9456:	d3f2      	bcc.n	943e <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    9458:	bf00      	nop
    945a:	bf00      	nop
    945c:	b007      	add	sp, #28
    945e:	f85d fb04 	ldr.w	pc, [sp], #4

00009462 <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    9462:	b084      	sub	sp, #16
    9464:	4603      	mov	r3, r0
    9466:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    946a:	2308      	movs	r3, #8
    946c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    9470:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9474:	2b08      	cmp	r3, #8
    9476:	d804      	bhi.n	9482 <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    9478:	f89d 3007 	ldrb.w	r3, [sp, #7]
    947c:	f88d 300f 	strb.w	r3, [sp, #15]
    9480:	e033      	b.n	94ea <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    9482:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9486:	3b09      	subs	r3, #9
    9488:	2b06      	cmp	r3, #6
    948a:	d82d      	bhi.n	94e8 <FlexCAN_ComputePayloadSize+0x86>
    948c:	a201      	add	r2, pc, #4	; (adr r2, 9494 <FlexCAN_ComputePayloadSize+0x32>)
    948e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9492:	bf00      	nop
    9494:	000094b1 	.word	0x000094b1
    9498:	000094b9 	.word	0x000094b9
    949c:	000094c1 	.word	0x000094c1
    94a0:	000094c9 	.word	0x000094c9
    94a4:	000094d1 	.word	0x000094d1
    94a8:	000094d9 	.word	0x000094d9
    94ac:	000094e1 	.word	0x000094e1
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    94b0:	230c      	movs	r3, #12
    94b2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    94b6:	e018      	b.n	94ea <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    94b8:	2310      	movs	r3, #16
    94ba:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    94be:	e014      	b.n	94ea <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    94c0:	2314      	movs	r3, #20
    94c2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    94c6:	e010      	b.n	94ea <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    94c8:	2318      	movs	r3, #24
    94ca:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    94ce:	e00c      	b.n	94ea <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    94d0:	2320      	movs	r3, #32
    94d2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    94d6:	e008      	b.n	94ea <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    94d8:	2330      	movs	r3, #48	; 0x30
    94da:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    94de:	e004      	b.n	94ea <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    94e0:	2340      	movs	r3, #64	; 0x40
    94e2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    94e6:	e000      	b.n	94ea <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    94e8:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    94ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    94ee:	4618      	mov	r0, r3
    94f0:	b004      	add	sp, #16
    94f2:	4770      	bx	lr

000094f4 <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    94f4:	b500      	push	{lr}
    94f6:	b08b      	sub	sp, #44	; 0x2c
    94f8:	9001      	str	r0, [sp, #4]
    94fa:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    94fc:	2308      	movs	r3, #8
    94fe:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    9502:	2300      	movs	r3, #0
    9504:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    9508:	f44f 7300 	mov.w	r3, #512	; 0x200
    950c:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    950e:	2300      	movs	r3, #0
    9510:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    9514:	9b00      	ldr	r3, [sp, #0]
    9516:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    951a:	2300      	movs	r3, #0
    951c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    9520:	2300      	movs	r3, #0
    9522:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    9526:	2300      	movs	r3, #0
    9528:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    952a:	2300      	movs	r3, #0
    952c:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    9530:	9b01      	ldr	r3, [sp, #4]
    9532:	3380      	adds	r3, #128	; 0x80
    9534:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    9536:	2300      	movs	r3, #0
    9538:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    953a:	2300      	movs	r3, #0
    953c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    9540:	e02d      	b.n	959e <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    9542:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    9546:	4619      	mov	r1, r3
    9548:	9801      	ldr	r0, [sp, #4]
    954a:	f000 fad1 	bl	9af0 <FlexCAN_GetPayloadSize>
    954e:	4603      	mov	r3, r0
    9550:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    9554:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9558:	f89d 3020 	ldrb.w	r3, [sp, #32]
    955c:	4413      	add	r3, r2
    955e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    9562:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    9566:	9a07      	ldr	r2, [sp, #28]
    9568:	fbb2 f3f3 	udiv	r3, r2, r3
    956c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    9570:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    9574:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9578:	429a      	cmp	r2, r3
    957a:	d815      	bhi.n	95a8 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    957c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9580:	3380      	adds	r3, #128	; 0x80
    9582:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    9586:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    958a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    958e:	1ad3      	subs	r3, r2, r3
    9590:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    9594:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    9598:	3301      	adds	r3, #1
    959a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    959e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    95a2:	2b00      	cmp	r3, #0
    95a4:	d0cd      	beq.n	9542 <FlexCAN_GetMsgBuffRegion+0x4e>
    95a6:	e000      	b.n	95aa <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    95a8:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    95aa:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    95ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    95b2:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    95b6:	fbb3 f0f2 	udiv	r0, r3, r2
    95ba:	fb00 f202 	mul.w	r2, r0, r2
    95be:	1a9b      	subs	r3, r3, r2
    95c0:	b2db      	uxtb	r3, r3
    95c2:	461a      	mov	r2, r3
    95c4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    95c8:	089b      	lsrs	r3, r3, #2
    95ca:	b2db      	uxtb	r3, r3
    95cc:	fb02 f303 	mul.w	r3, r2, r3
    95d0:	440b      	add	r3, r1
    95d2:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    95d4:	9b06      	ldr	r3, [sp, #24]
    95d6:	009b      	lsls	r3, r3, #2
    95d8:	9a04      	ldr	r2, [sp, #16]
    95da:	4413      	add	r3, r2
    95dc:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    95de:	9b03      	ldr	r3, [sp, #12]
}
    95e0:	4618      	mov	r0, r3
    95e2:	b00b      	add	sp, #44	; 0x2c
    95e4:	f85d fb04 	ldr.w	pc, [sp], #4

000095e8 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    95e8:	b084      	sub	sp, #16
    95ea:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    95ec:	2300      	movs	r3, #0
    95ee:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    95f0:	2300      	movs	r3, #0
    95f2:	9303      	str	r3, [sp, #12]
    95f4:	e00e      	b.n	9614 <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    95f6:	4a0b      	ldr	r2, [pc, #44]	; (9624 <FlexCAN_GetMaxMbNum+0x3c>)
    95f8:	9b03      	ldr	r3, [sp, #12]
    95fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    95fe:	9a01      	ldr	r2, [sp, #4]
    9600:	429a      	cmp	r2, r3
    9602:	d104      	bne.n	960e <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    9604:	4a08      	ldr	r2, [pc, #32]	; (9628 <FlexCAN_GetMaxMbNum+0x40>)
    9606:	9b03      	ldr	r3, [sp, #12]
    9608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    960c:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    960e:	9b03      	ldr	r3, [sp, #12]
    9610:	3301      	adds	r3, #1
    9612:	9303      	str	r3, [sp, #12]
    9614:	9b03      	ldr	r3, [sp, #12]
    9616:	2b02      	cmp	r3, #2
    9618:	d9ed      	bls.n	95f6 <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    961a:	9b02      	ldr	r3, [sp, #8]
}
    961c:	4618      	mov	r0, r3
    961e:	b004      	add	sp, #16
    9620:	4770      	bx	lr
    9622:	bf00      	nop
    9624:	0000c280 	.word	0x0000c280
    9628:	0000c28c 	.word	0x0000c28c

0000962c <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    962c:	b500      	push	{lr}
    962e:	b087      	sub	sp, #28
    9630:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    9632:	2300      	movs	r3, #0
    9634:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    9636:	2300      	movs	r3, #0
    9638:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    963a:	2100      	movs	r1, #0
    963c:	4820      	ldr	r0, [pc, #128]	; (96c0 <FlexCAN_EnterFreezeMode+0x94>)
    963e:	f7f7 fb36 	bl	cae <OsIf_MicrosToTicks>
    9642:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    9644:	2300      	movs	r3, #0
    9646:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    9648:	f001 fa70 	bl	ab2c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    964c:	9b01      	ldr	r3, [sp, #4]
    964e:	681b      	ldr	r3, [r3, #0]
    9650:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    9654:	9b01      	ldr	r3, [sp, #4]
    9656:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    9658:	9b01      	ldr	r3, [sp, #4]
    965a:	681b      	ldr	r3, [r3, #0]
    965c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    9660:	9b01      	ldr	r3, [sp, #4]
    9662:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    9664:	9b01      	ldr	r3, [sp, #4]
    9666:	681b      	ldr	r3, [r3, #0]
    9668:	2b00      	cmp	r3, #0
    966a:	da05      	bge.n	9678 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    966c:	9b01      	ldr	r3, [sp, #4]
    966e:	681b      	ldr	r3, [r3, #0]
    9670:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    9674:	9b01      	ldr	r3, [sp, #4]
    9676:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    9678:	f001 fa84 	bl	ab84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    967c:	2000      	movs	r0, #0
    967e:	f7f7 faca 	bl	c16 <OsIf_GetCounter>
    9682:	4603      	mov	r3, r0
    9684:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    9686:	e00f      	b.n	96a8 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9688:	ab02      	add	r3, sp, #8
    968a:	2100      	movs	r1, #0
    968c:	4618      	mov	r0, r3
    968e:	f7f7 fadb 	bl	c48 <OsIf_GetElapsed>
    9692:	4602      	mov	r2, r0
    9694:	9b05      	ldr	r3, [sp, #20]
    9696:	4413      	add	r3, r2
    9698:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    969a:	9a05      	ldr	r2, [sp, #20]
    969c:	9b03      	ldr	r3, [sp, #12]
    969e:	429a      	cmp	r2, r3
    96a0:	d302      	bcc.n	96a8 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    96a2:	2303      	movs	r3, #3
    96a4:	9304      	str	r3, [sp, #16]
            break;
    96a6:	e005      	b.n	96b4 <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    96a8:	9b01      	ldr	r3, [sp, #4]
    96aa:	681b      	ldr	r3, [r3, #0]
    96ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    96b0:	2b00      	cmp	r3, #0
    96b2:	d0e9      	beq.n	9688 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    96b4:	9b04      	ldr	r3, [sp, #16]
}
    96b6:	4618      	mov	r0, r3
    96b8:	b007      	add	sp, #28
    96ba:	f85d fb04 	ldr.w	pc, [sp], #4
    96be:	bf00      	nop
    96c0:	000f4240 	.word	0x000f4240

000096c4 <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    96c4:	b500      	push	{lr}
    96c6:	b087      	sub	sp, #28
    96c8:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    96ca:	2300      	movs	r3, #0
    96cc:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    96ce:	2300      	movs	r3, #0
    96d0:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    96d2:	2100      	movs	r1, #0
    96d4:	4818      	ldr	r0, [pc, #96]	; (9738 <FlexCAN_Enable+0x74>)
    96d6:	f7f7 faea 	bl	cae <OsIf_MicrosToTicks>
    96da:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    96dc:	2300      	movs	r3, #0
    96de:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    96e0:	f001 fa76 	bl	abd0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    96e4:	9b01      	ldr	r3, [sp, #4]
    96e6:	681b      	ldr	r3, [r3, #0]
    96e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    96ec:	9b01      	ldr	r3, [sp, #4]
    96ee:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    96f0:	f001 fa9a 	bl	ac28 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    96f4:	2000      	movs	r0, #0
    96f6:	f7f7 fa8e 	bl	c16 <OsIf_GetCounter>
    96fa:	4603      	mov	r3, r0
    96fc:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    96fe:	e00f      	b.n	9720 <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9700:	ab02      	add	r3, sp, #8
    9702:	2100      	movs	r1, #0
    9704:	4618      	mov	r0, r3
    9706:	f7f7 fa9f 	bl	c48 <OsIf_GetElapsed>
    970a:	4602      	mov	r2, r0
    970c:	9b05      	ldr	r3, [sp, #20]
    970e:	4413      	add	r3, r2
    9710:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    9712:	9a05      	ldr	r2, [sp, #20]
    9714:	9b03      	ldr	r3, [sp, #12]
    9716:	429a      	cmp	r2, r3
    9718:	d302      	bcc.n	9720 <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    971a:	2303      	movs	r3, #3
    971c:	9304      	str	r3, [sp, #16]
            break;
    971e:	e005      	b.n	972c <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    9720:	9b01      	ldr	r3, [sp, #4]
    9722:	681b      	ldr	r3, [r3, #0]
    9724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9728:	2b00      	cmp	r3, #0
    972a:	d0e9      	beq.n	9700 <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    972c:	9b04      	ldr	r3, [sp, #16]
}
    972e:	4618      	mov	r0, r3
    9730:	b007      	add	sp, #28
    9732:	f85d fb04 	ldr.w	pc, [sp], #4
    9736:	bf00      	nop
    9738:	000f4240 	.word	0x000f4240

0000973c <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    973c:	b500      	push	{lr}
    973e:	b087      	sub	sp, #28
    9740:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    9742:	2300      	movs	r3, #0
    9744:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    9746:	2300      	movs	r3, #0
    9748:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    974a:	2100      	movs	r1, #0
    974c:	481b      	ldr	r0, [pc, #108]	; (97bc <FlexCAN_ExitFreezeMode+0x80>)
    974e:	f7f7 faae 	bl	cae <OsIf_MicrosToTicks>
    9752:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    9754:	2300      	movs	r3, #0
    9756:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    9758:	f001 fa8c 	bl	ac74 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    975c:	9b01      	ldr	r3, [sp, #4]
    975e:	681b      	ldr	r3, [r3, #0]
    9760:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    9764:	9b01      	ldr	r3, [sp, #4]
    9766:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    9768:	9b01      	ldr	r3, [sp, #4]
    976a:	681b      	ldr	r3, [r3, #0]
    976c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    9770:	9b01      	ldr	r3, [sp, #4]
    9772:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    9774:	f001 faaa 	bl	accc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9778:	2000      	movs	r0, #0
    977a:	f7f7 fa4c 	bl	c16 <OsIf_GetCounter>
    977e:	4603      	mov	r3, r0
    9780:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    9782:	e00f      	b.n	97a4 <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9784:	ab02      	add	r3, sp, #8
    9786:	2100      	movs	r1, #0
    9788:	4618      	mov	r0, r3
    978a:	f7f7 fa5d 	bl	c48 <OsIf_GetElapsed>
    978e:	4602      	mov	r2, r0
    9790:	9b05      	ldr	r3, [sp, #20]
    9792:	4413      	add	r3, r2
    9794:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    9796:	9a05      	ldr	r2, [sp, #20]
    9798:	9b03      	ldr	r3, [sp, #12]
    979a:	429a      	cmp	r2, r3
    979c:	d302      	bcc.n	97a4 <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    979e:	2303      	movs	r3, #3
    97a0:	9304      	str	r3, [sp, #16]
            break;
    97a2:	e005      	b.n	97b0 <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    97a4:	9b01      	ldr	r3, [sp, #4]
    97a6:	681b      	ldr	r3, [r3, #0]
    97a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    97ac:	2b00      	cmp	r3, #0
    97ae:	d1e9      	bne.n	9784 <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    97b0:	9b04      	ldr	r3, [sp, #16]
}
    97b2:	4618      	mov	r0, r3
    97b4:	b007      	add	sp, #28
    97b6:	f85d fb04 	ldr.w	pc, [sp], #4
    97ba:	bf00      	nop
    97bc:	000f4240 	.word	0x000f4240

000097c0 <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    97c0:	b500      	push	{lr}
    97c2:	b087      	sub	sp, #28
    97c4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    97c6:	2300      	movs	r3, #0
    97c8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    97ca:	2300      	movs	r3, #0
    97cc:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    97ce:	2100      	movs	r1, #0
    97d0:	481a      	ldr	r0, [pc, #104]	; (983c <FlexCAN_Disable+0x7c>)
    97d2:	f7f7 fa6c 	bl	cae <OsIf_MicrosToTicks>
    97d6:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    97d8:	2300      	movs	r3, #0
    97da:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    97dc:	9b01      	ldr	r3, [sp, #4]
    97de:	681b      	ldr	r3, [r3, #0]
    97e0:	2b00      	cmp	r3, #0
    97e2:	db25      	blt.n	9830 <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    97e4:	f001 fa98 	bl	ad18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    97e8:	9b01      	ldr	r3, [sp, #4]
    97ea:	681b      	ldr	r3, [r3, #0]
    97ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    97f0:	9b01      	ldr	r3, [sp, #4]
    97f2:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    97f4:	f001 fabc 	bl	ad70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    97f8:	2000      	movs	r0, #0
    97fa:	f7f7 fa0c 	bl	c16 <OsIf_GetCounter>
    97fe:	4603      	mov	r3, r0
    9800:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    9802:	e00f      	b.n	9824 <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9804:	ab02      	add	r3, sp, #8
    9806:	2100      	movs	r1, #0
    9808:	4618      	mov	r0, r3
    980a:	f7f7 fa1d 	bl	c48 <OsIf_GetElapsed>
    980e:	4602      	mov	r2, r0
    9810:	9b05      	ldr	r3, [sp, #20]
    9812:	4413      	add	r3, r2
    9814:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    9816:	9a05      	ldr	r2, [sp, #20]
    9818:	9b03      	ldr	r3, [sp, #12]
    981a:	429a      	cmp	r2, r3
    981c:	d302      	bcc.n	9824 <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    981e:	2303      	movs	r3, #3
    9820:	9304      	str	r3, [sp, #16]
                break;
    9822:	e005      	b.n	9830 <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    9824:	9b01      	ldr	r3, [sp, #4]
    9826:	681b      	ldr	r3, [r3, #0]
    9828:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    982c:	2b00      	cmp	r3, #0
    982e:	d0e9      	beq.n	9804 <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    9830:	9b04      	ldr	r3, [sp, #16]
}
    9832:	4618      	mov	r0, r3
    9834:	b007      	add	sp, #28
    9836:	f85d fb04 	ldr.w	pc, [sp], #4
    983a:	bf00      	nop
    983c:	000f4240 	.word	0x000f4240

00009840 <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    9840:	b500      	push	{lr}
    9842:	b087      	sub	sp, #28
    9844:	9003      	str	r0, [sp, #12]
    9846:	9102      	str	r1, [sp, #8]
    9848:	4613      	mov	r3, r2
    984a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    984e:	9b02      	ldr	r3, [sp, #8]
    9850:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    9852:	f001 fab3 	bl	adbc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    9856:	f89d 3007 	ldrb.w	r3, [sp, #7]
    985a:	2b00      	cmp	r3, #0
    985c:	d020      	beq.n	98a0 <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    985e:	9b02      	ldr	r3, [sp, #8]
    9860:	f244 0201 	movw	r2, #16385	; 0x4001
    9864:	4293      	cmp	r3, r2
    9866:	d106      	bne.n	9876 <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    9868:	9b03      	ldr	r3, [sp, #12]
    986a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    986c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    9870:	9b03      	ldr	r3, [sp, #12]
    9872:	635a      	str	r2, [r3, #52]	; 0x34
    9874:	e03a      	b.n	98ec <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    9876:	9b02      	ldr	r3, [sp, #8]
    9878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    987c:	d003      	beq.n	9886 <FlexCAN_SetErrIntCmd+0x46>
    987e:	9b02      	ldr	r3, [sp, #8]
    9880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    9884:	d105      	bne.n	9892 <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    9886:	9b03      	ldr	r3, [sp, #12]
    9888:	681b      	ldr	r3, [r3, #0]
    988a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    988e:	9b03      	ldr	r3, [sp, #12]
    9890:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    9892:	9b03      	ldr	r3, [sp, #12]
    9894:	685a      	ldr	r2, [r3, #4]
    9896:	9b05      	ldr	r3, [sp, #20]
    9898:	431a      	orrs	r2, r3
    989a:	9b03      	ldr	r3, [sp, #12]
    989c:	605a      	str	r2, [r3, #4]
    989e:	e025      	b.n	98ec <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    98a0:	9b02      	ldr	r3, [sp, #8]
    98a2:	f244 0201 	movw	r2, #16385	; 0x4001
    98a6:	4293      	cmp	r3, r2
    98a8:	d106      	bne.n	98b8 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    98aa:	9b03      	ldr	r3, [sp, #12]
    98ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    98ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    98b2:	9b03      	ldr	r3, [sp, #12]
    98b4:	635a      	str	r2, [r3, #52]	; 0x34
    98b6:	e019      	b.n	98ec <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    98b8:	9b03      	ldr	r3, [sp, #12]
    98ba:	685a      	ldr	r2, [r3, #4]
    98bc:	9b05      	ldr	r3, [sp, #20]
    98be:	43db      	mvns	r3, r3
    98c0:	401a      	ands	r2, r3
    98c2:	9b03      	ldr	r3, [sp, #12]
    98c4:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    98c6:	9b03      	ldr	r3, [sp, #12]
    98c8:	685b      	ldr	r3, [r3, #4]
    98ca:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    98cc:	9b05      	ldr	r3, [sp, #20]
    98ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    98d2:	2b00      	cmp	r3, #0
    98d4:	d10a      	bne.n	98ec <FlexCAN_SetErrIntCmd+0xac>
    98d6:	9b05      	ldr	r3, [sp, #20]
    98d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    98dc:	2b00      	cmp	r3, #0
    98de:	d105      	bne.n	98ec <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    98e0:	9b03      	ldr	r3, [sp, #12]
    98e2:	681b      	ldr	r3, [r3, #0]
    98e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    98e8:	9b03      	ldr	r3, [sp, #12]
    98ea:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    98ec:	f001 fa92 	bl	ae14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    98f0:	bf00      	nop
    98f2:	b007      	add	sp, #28
    98f4:	f85d fb04 	ldr.w	pc, [sp], #4

000098f8 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    98f8:	b500      	push	{lr}
    98fa:	b087      	sub	sp, #28
    98fc:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    98fe:	2300      	movs	r3, #0
    9900:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    9902:	2300      	movs	r3, #0
    9904:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9906:	2100      	movs	r1, #0
    9908:	4833      	ldr	r0, [pc, #204]	; (99d8 <FlexCAN_Init+0xe0>)
    990a:	f7f7 f9d0 	bl	cae <OsIf_MicrosToTicks>
    990e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    9910:	2300      	movs	r3, #0
    9912:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    9914:	9b01      	ldr	r3, [sp, #4]
    9916:	681b      	ldr	r3, [r3, #0]
    9918:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    991c:	9b01      	ldr	r3, [sp, #4]
    991e:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9920:	2000      	movs	r0, #0
    9922:	f7f7 f978 	bl	c16 <OsIf_GetCounter>
    9926:	4603      	mov	r3, r0
    9928:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    992a:	e00f      	b.n	994c <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    992c:	ab02      	add	r3, sp, #8
    992e:	2100      	movs	r1, #0
    9930:	4618      	mov	r0, r3
    9932:	f7f7 f989 	bl	c48 <OsIf_GetElapsed>
    9936:	4602      	mov	r2, r0
    9938:	9b05      	ldr	r3, [sp, #20]
    993a:	4413      	add	r3, r2
    993c:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    993e:	9a05      	ldr	r2, [sp, #20]
    9940:	9b03      	ldr	r3, [sp, #12]
    9942:	429a      	cmp	r2, r3
    9944:	d302      	bcc.n	994c <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    9946:	2303      	movs	r3, #3
    9948:	9304      	str	r3, [sp, #16]
            break;
    994a:	e005      	b.n	9958 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    994c:	9b01      	ldr	r3, [sp, #4]
    994e:	681b      	ldr	r3, [r3, #0]
    9950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9954:	2b00      	cmp	r3, #0
    9956:	d1e9      	bne.n	992c <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    9958:	9b04      	ldr	r3, [sp, #16]
    995a:	2b00      	cmp	r3, #0
    995c:	d136      	bne.n	99cc <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    995e:	9b01      	ldr	r3, [sp, #4]
    9960:	681b      	ldr	r3, [r3, #0]
    9962:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    9966:	9b01      	ldr	r3, [sp, #4]
    9968:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    996a:	9801      	ldr	r0, [sp, #4]
    996c:	f7ff fd40 	bl	93f0 <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    9970:	9b01      	ldr	r3, [sp, #4]
    9972:	f04f 32ff 	mov.w	r2, #4294967295
    9976:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    9978:	9b01      	ldr	r3, [sp, #4]
    997a:	f04f 32ff 	mov.w	r2, #4294967295
    997e:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    9980:	9b01      	ldr	r3, [sp, #4]
    9982:	f04f 32ff 	mov.w	r2, #4294967295
    9986:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    9988:	9b01      	ldr	r3, [sp, #4]
    998a:	2200      	movs	r2, #0
    998c:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    998e:	9b01      	ldr	r3, [sp, #4]
    9990:	f04f 32ff 	mov.w	r2, #4294967295
    9994:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    9996:	9b01      	ldr	r3, [sp, #4]
    9998:	4a10      	ldr	r2, [pc, #64]	; (99dc <FlexCAN_Init+0xe4>)
    999a:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    999c:	9b01      	ldr	r3, [sp, #4]
    999e:	2200      	movs	r2, #0
    99a0:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    99a2:	9b01      	ldr	r3, [sp, #4]
    99a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    99a8:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    99aa:	9b01      	ldr	r3, [sp, #4]
    99ac:	2200      	movs	r2, #0
    99ae:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    99b0:	9801      	ldr	r0, [sp, #4]
    99b2:	f000 f85b 	bl	9a6c <FlexCAN_IsFDAvailable>
    99b6:	4603      	mov	r3, r0
    99b8:	2b00      	cmp	r3, #0
    99ba:	d007      	beq.n	99cc <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    99bc:	9b01      	ldr	r3, [sp, #4]
    99be:	2200      	movs	r2, #0
    99c0:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    99c4:	9b01      	ldr	r3, [sp, #4]
    99c6:	4a06      	ldr	r2, [pc, #24]	; (99e0 <FlexCAN_Init+0xe8>)
    99c8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    99cc:	9b04      	ldr	r3, [sp, #16]
}
    99ce:	4618      	mov	r0, r3
    99d0:	b007      	add	sp, #28
    99d2:	f85d fb04 	ldr.w	pc, [sp], #4
    99d6:	bf00      	nop
    99d8:	000f4240 	.word	0x000f4240
    99dc:	003b0006 	.word	0x003b0006
    99e0:	80004100 	.word	0x80004100

000099e4 <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    99e4:	b500      	push	{lr}
    99e6:	b087      	sub	sp, #28
    99e8:	9001      	str	r0, [sp, #4]
    99ea:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    99ec:	9801      	ldr	r0, [sp, #4]
    99ee:	f7ff fdfb 	bl	95e8 <FlexCAN_GetMaxMbNum>
    99f2:	4603      	mov	r3, r0
    99f4:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    99f8:	2300      	movs	r3, #0
    99fa:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    99fc:	9b01      	ldr	r3, [sp, #4]
    99fe:	681b      	ldr	r3, [r3, #0]
    9a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    9a04:	2b00      	cmp	r3, #0
    9a06:	d001      	beq.n	9a0c <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    9a08:	2301      	movs	r3, #1
    9a0a:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    9a0c:	9b04      	ldr	r3, [sp, #16]
    9a0e:	2b00      	cmp	r3, #0
    9a10:	d127      	bne.n	9a62 <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    9a12:	9b01      	ldr	r3, [sp, #4]
    9a14:	681b      	ldr	r3, [r3, #0]
    9a16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    9a1a:	9b01      	ldr	r3, [sp, #4]
    9a1c:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    9a1e:	9b01      	ldr	r3, [sp, #4]
    9a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9a22:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    9a26:	9b00      	ldr	r3, [sp, #0]
    9a28:	061b      	lsls	r3, r3, #24
    9a2a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    9a2e:	431a      	orrs	r2, r3
    9a30:	9b01      	ldr	r3, [sp, #4]
    9a32:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    9a34:	9b01      	ldr	r3, [sp, #4]
    9a36:	f04f 32ff 	mov.w	r2, #4294967295
    9a3a:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    9a3c:	2300      	movs	r3, #0
    9a3e:	9305      	str	r3, [sp, #20]
    9a40:	e00a      	b.n	9a58 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    9a42:	9b01      	ldr	r3, [sp, #4]
    9a44:	9a05      	ldr	r2, [sp, #20]
    9a46:	f502 7208 	add.w	r2, r2, #544	; 0x220
    9a4a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    9a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    9a52:	9b05      	ldr	r3, [sp, #20]
    9a54:	3301      	adds	r3, #1
    9a56:	9305      	str	r3, [sp, #20]
    9a58:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    9a5c:	9a05      	ldr	r2, [sp, #20]
    9a5e:	429a      	cmp	r2, r3
    9a60:	d3ef      	bcc.n	9a42 <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    9a62:	9b04      	ldr	r3, [sp, #16]
}
    9a64:	4618      	mov	r0, r3
    9a66:	b007      	add	sp, #28
    9a68:	f85d fb04 	ldr.w	pc, [sp], #4

00009a6c <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    9a6c:	b084      	sub	sp, #16
    9a6e:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    9a70:	2300      	movs	r3, #0
    9a72:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    9a74:	2300      	movs	r3, #0
    9a76:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    9a7a:	2300      	movs	r3, #0
    9a7c:	9303      	str	r3, [sp, #12]
    9a7e:	e00d      	b.n	9a9c <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    9a80:	4a0a      	ldr	r2, [pc, #40]	; (9aac <FlexCAN_IsFDAvailable+0x40>)
    9a82:	9b03      	ldr	r3, [sp, #12]
    9a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a88:	9a01      	ldr	r2, [sp, #4]
    9a8a:	429a      	cmp	r2, r3
    9a8c:	d103      	bne.n	9a96 <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    9a8e:	2301      	movs	r3, #1
    9a90:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    9a94:	e005      	b.n	9aa2 <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    9a96:	9b03      	ldr	r3, [sp, #12]
    9a98:	3301      	adds	r3, #1
    9a9a:	9303      	str	r3, [sp, #12]
    9a9c:	9b03      	ldr	r3, [sp, #12]
    9a9e:	2b00      	cmp	r3, #0
    9aa0:	d0ee      	beq.n	9a80 <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    9aa2:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    9aa6:	4618      	mov	r0, r3
    9aa8:	b004      	add	sp, #16
    9aaa:	4770      	bx	lr
    9aac:	0000c298 	.word	0x0000c298

00009ab0 <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    9ab0:	b500      	push	{lr}
    9ab2:	b085      	sub	sp, #20
    9ab4:	9001      	str	r0, [sp, #4]
    9ab6:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    9ab8:	9801      	ldr	r0, [sp, #4]
    9aba:	f7ff fbd6 	bl	926a <FlexCAN_IsFDEnabled>
    9abe:	4603      	mov	r3, r0
    9ac0:	2b00      	cmp	r3, #0
    9ac2:	d011      	beq.n	9ae8 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    9ac4:	9b01      	ldr	r3, [sp, #4]
    9ac6:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    9aca:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    9acc:	9b03      	ldr	r3, [sp, #12]
    9ace:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    9ad2:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    9ad4:	9b00      	ldr	r3, [sp, #0]
    9ad6:	681b      	ldr	r3, [r3, #0]
    9ad8:	041b      	lsls	r3, r3, #16
    9ada:	9a03      	ldr	r2, [sp, #12]
    9adc:	4313      	orrs	r3, r2
    9ade:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    9ae0:	9b01      	ldr	r3, [sp, #4]
    9ae2:	9a03      	ldr	r2, [sp, #12]
    9ae4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    9ae8:	bf00      	nop
    9aea:	b005      	add	sp, #20
    9aec:	f85d fb04 	ldr.w	pc, [sp], #4

00009af0 <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    9af0:	b500      	push	{lr}
    9af2:	b085      	sub	sp, #20
    9af4:	9001      	str	r0, [sp, #4]
    9af6:	460b      	mov	r3, r1
    9af8:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    9afc:	2300      	movs	r3, #0
    9afe:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    9b00:	9801      	ldr	r0, [sp, #4]
    9b02:	f7ff ffb3 	bl	9a6c <FlexCAN_IsFDAvailable>
    9b06:	4603      	mov	r3, r0
    9b08:	2b00      	cmp	r3, #0
    9b0a:	d019      	beq.n	9b40 <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    9b0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9b10:	2b00      	cmp	r3, #0
    9b12:	d10a      	bne.n	9b2a <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    9b14:	9b01      	ldr	r3, [sp, #4]
    9b16:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    9b1a:	0c1b      	lsrs	r3, r3, #16
    9b1c:	f003 0303 	and.w	r3, r3, #3
    9b20:	2208      	movs	r2, #8
    9b22:	fa02 f303 	lsl.w	r3, r2, r3
    9b26:	9303      	str	r3, [sp, #12]
    9b28:	e00c      	b.n	9b44 <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    9b2a:	9b01      	ldr	r3, [sp, #4]
    9b2c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    9b30:	0c1b      	lsrs	r3, r3, #16
    9b32:	f003 0303 	and.w	r3, r3, #3
    9b36:	2208      	movs	r2, #8
    9b38:	fa02 f303 	lsl.w	r3, r2, r3
    9b3c:	9303      	str	r3, [sp, #12]
    9b3e:	e001      	b.n	9b44 <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    9b40:	2308      	movs	r3, #8
    9b42:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    9b44:	9b03      	ldr	r3, [sp, #12]
    9b46:	b2db      	uxtb	r3, r3
}
    9b48:	4618      	mov	r0, r3
    9b4a:	b005      	add	sp, #20
    9b4c:	f85d fb04 	ldr.w	pc, [sp], #4

00009b50 <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    9b50:	b500      	push	{lr}
    9b52:	b087      	sub	sp, #28
    9b54:	9001      	str	r0, [sp, #4]
    9b56:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    9b58:	2308      	movs	r3, #8
    9b5a:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    9b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
    9b62:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    9b64:	2308      	movs	r3, #8
    9b66:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    9b6a:	2300      	movs	r3, #0
    9b6c:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    9b70:	2300      	movs	r3, #0
    9b72:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    9b76:	2300      	movs	r3, #0
    9b78:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    9b7c:	2300      	movs	r3, #0
    9b7e:	f88d 3015 	strb.w	r3, [sp, #21]
    9b82:	e024      	b.n	9bce <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    9b84:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9b88:	4619      	mov	r1, r3
    9b8a:	9801      	ldr	r0, [sp, #4]
    9b8c:	f7ff ffb0 	bl	9af0 <FlexCAN_GetPayloadSize>
    9b90:	4603      	mov	r3, r0
    9b92:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    9b96:	f89d 2017 	ldrb.w	r2, [sp, #23]
    9b9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9b9e:	4413      	add	r3, r2
    9ba0:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    9ba4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ba8:	9a04      	ldr	r2, [sp, #16]
    9baa:	fbb2 f3f3 	udiv	r3, r2, r3
    9bae:	b2da      	uxtb	r2, r3
    9bb0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9bb4:	4413      	add	r3, r2
    9bb6:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    9bba:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9bbe:	9a00      	ldr	r2, [sp, #0]
    9bc0:	429a      	cmp	r2, r3
    9bc2:	d309      	bcc.n	9bd8 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    9bc4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9bc8:	3301      	adds	r3, #1
    9bca:	f88d 3015 	strb.w	r3, [sp, #21]
    9bce:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9bd2:	2b00      	cmp	r3, #0
    9bd4:	d0d6      	beq.n	9b84 <FlexCAN_GetMbPayloadSize+0x34>
    9bd6:	e000      	b.n	9bda <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    9bd8:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    9bda:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    9bde:	4618      	mov	r0, r3
    9be0:	b007      	add	sp, #28
    9be2:	f85d fb04 	ldr.w	pc, [sp], #4

00009be6 <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    9be6:	b500      	push	{lr}
    9be8:	b085      	sub	sp, #20
    9bea:	9001      	str	r0, [sp, #4]
    9bec:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    9bee:	9900      	ldr	r1, [sp, #0]
    9bf0:	9801      	ldr	r0, [sp, #4]
    9bf2:	f7ff fc7f 	bl	94f4 <FlexCAN_GetMsgBuffRegion>
    9bf6:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    9bf8:	9b03      	ldr	r3, [sp, #12]
    9bfa:	681b      	ldr	r3, [r3, #0]
}
    9bfc:	bf00      	nop
    9bfe:	b005      	add	sp, #20
    9c00:	f85d fb04 	ldr.w	pc, [sp], #4

00009c04 <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    9c04:	b500      	push	{lr}
    9c06:	b087      	sub	sp, #28
    9c08:	9003      	str	r0, [sp, #12]
    9c0a:	9201      	str	r2, [sp, #4]
    9c0c:	461a      	mov	r2, r3
    9c0e:	460b      	mov	r3, r1
    9c10:	f88d 300b 	strb.w	r3, [sp, #11]
    9c14:	4613      	mov	r3, r2
    9c16:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    9c1a:	2300      	movs	r3, #0
    9c1c:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    9c1e:	9b01      	ldr	r3, [sp, #4]
    9c20:	f003 031f 	and.w	r3, r3, #31
    9c24:	2201      	movs	r2, #1
    9c26:	fa02 f303 	lsl.w	r3, r2, r3
    9c2a:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    9c2c:	9b01      	ldr	r3, [sp, #4]
    9c2e:	2b1f      	cmp	r3, #31
    9c30:	d837      	bhi.n	9ca2 <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    9c32:	f89d 300a 	ldrb.w	r3, [sp, #10]
    9c36:	2b00      	cmp	r3, #0
    9c38:	d01b      	beq.n	9c72 <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    9c3a:	f001 fc97 	bl	b56c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    9c3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9c42:	4a1a      	ldr	r2, [pc, #104]	; (9cac <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    9c44:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    9c48:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9c4c:	9a04      	ldr	r2, [sp, #16]
    9c4e:	430a      	orrs	r2, r1
    9c50:	4916      	ldr	r1, [pc, #88]	; (9cac <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    9c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    9c56:	f89d 3020 	ldrb.w	r3, [sp, #32]
    9c5a:	2b00      	cmp	r3, #0
    9c5c:	d006      	beq.n	9c6c <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    9c5e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9c62:	4a12      	ldr	r2, [pc, #72]	; (9cac <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    9c64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9c68:	9b03      	ldr	r3, [sp, #12]
    9c6a:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    9c6c:	f001 fcaa 	bl	b5c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    9c70:	e017      	b.n	9ca2 <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    9c72:	f001 fc7b 	bl	b56c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    9c76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9c7a:	4a0c      	ldr	r2, [pc, #48]	; (9cac <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    9c7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    9c80:	9b04      	ldr	r3, [sp, #16]
    9c82:	43da      	mvns	r2, r3
    9c84:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9c88:	400a      	ands	r2, r1
    9c8a:	4908      	ldr	r1, [pc, #32]	; (9cac <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    9c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    9c90:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9c94:	4a05      	ldr	r2, [pc, #20]	; (9cac <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    9c96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9c9a:	9b03      	ldr	r3, [sp, #12]
    9c9c:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    9c9e:	f001 fc91 	bl	b5c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    9ca2:	9b05      	ldr	r3, [sp, #20]
}
    9ca4:	4618      	mov	r0, r3
    9ca6:	b007      	add	sp, #28
    9ca8:	f85d fb04 	ldr.w	pc, [sp], #4
    9cac:	1fff8f64 	.word	0x1fff8f64

00009cb0 <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    9cb0:	b500      	push	{lr}
    9cb2:	b087      	sub	sp, #28
    9cb4:	9003      	str	r0, [sp, #12]
    9cb6:	9201      	str	r2, [sp, #4]
    9cb8:	461a      	mov	r2, r3
    9cba:	460b      	mov	r3, r1
    9cbc:	f88d 300b 	strb.w	r3, [sp, #11]
    9cc0:	4613      	mov	r3, r2
    9cc2:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    9cc6:	9b01      	ldr	r3, [sp, #4]
    9cc8:	f003 031f 	and.w	r3, r3, #31
    9ccc:	2201      	movs	r2, #1
    9cce:	fa02 f303 	lsl.w	r3, r2, r3
    9cd2:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    9cd4:	9b01      	ldr	r3, [sp, #4]
    9cd6:	2b1f      	cmp	r3, #31
    9cd8:	d818      	bhi.n	9d0c <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    9cda:	f001 fa09 	bl	b0f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    9cde:	9b03      	ldr	r3, [sp, #12]
    9ce0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    9ce2:	9b05      	ldr	r3, [sp, #20]
    9ce4:	43da      	mvns	r2, r3
    9ce6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9cea:	400a      	ands	r2, r1
    9cec:	4909      	ldr	r1, [pc, #36]	; (9d14 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    9cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    9cf2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    9cf6:	2b00      	cmp	r3, #0
    9cf8:	d006      	beq.n	9d08 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    9cfa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9cfe:	4a05      	ldr	r2, [pc, #20]	; (9d14 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    9d00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9d04:	9b03      	ldr	r3, [sp, #12]
    9d06:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    9d08:	f001 fa1e 	bl	b148 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    9d0c:	bf00      	nop
    9d0e:	b007      	add	sp, #28
    9d10:	f85d fb04 	ldr.w	pc, [sp], #4
    9d14:	1fff8f64 	.word	0x1fff8f64

00009d18 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    9d18:	b082      	sub	sp, #8
    9d1a:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    9d1c:	9b01      	ldr	r3, [sp, #4]
    9d1e:	2200      	movs	r2, #0
    9d20:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    9d22:	bf00      	nop
    9d24:	b002      	add	sp, #8
    9d26:	4770      	bx	lr

00009d28 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    9d28:	b082      	sub	sp, #8
    9d2a:	9001      	str	r0, [sp, #4]
    9d2c:	460b      	mov	r3, r1
    9d2e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    9d32:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9d36:	4a04      	ldr	r2, [pc, #16]	; (9d48 <FlexCAN_EnableInterrupts+0x20>)
    9d38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    9d3c:	9b01      	ldr	r3, [sp, #4]
    9d3e:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    9d40:	bf00      	nop
    9d42:	b002      	add	sp, #8
    9d44:	4770      	bx	lr
    9d46:	bf00      	nop
    9d48:	1fff8f64 	.word	0x1fff8f64

00009d4c <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    9d4c:	b500      	push	{lr}
    9d4e:	b087      	sub	sp, #28
    9d50:	9003      	str	r0, [sp, #12]
    9d52:	9102      	str	r1, [sp, #8]
    9d54:	9201      	str	r2, [sp, #4]
    9d56:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    9d58:	9902      	ldr	r1, [sp, #8]
    9d5a:	9803      	ldr	r0, [sp, #12]
    9d5c:	f7ff fbca 	bl	94f4 <FlexCAN_GetMsgBuffRegion>
    9d60:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    9d62:	9b05      	ldr	r3, [sp, #20]
    9d64:	3304      	adds	r3, #4
    9d66:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    9d68:	9b05      	ldr	r3, [sp, #20]
    9d6a:	2200      	movs	r2, #0
    9d6c:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    9d6e:	9b04      	ldr	r3, [sp, #16]
    9d70:	2200      	movs	r2, #0
    9d72:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    9d74:	9b01      	ldr	r3, [sp, #4]
    9d76:	685b      	ldr	r3, [r3, #4]
    9d78:	2b01      	cmp	r3, #1
    9d7a:	d119      	bne.n	9db0 <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    9d7c:	9b05      	ldr	r3, [sp, #20]
    9d7e:	681b      	ldr	r3, [r3, #0]
    9d80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    9d84:	9b05      	ldr	r3, [sp, #20]
    9d86:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    9d88:	9b05      	ldr	r3, [sp, #20]
    9d8a:	681b      	ldr	r3, [r3, #0]
    9d8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    9d90:	9b05      	ldr	r3, [sp, #20]
    9d92:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    9d94:	9b04      	ldr	r3, [sp, #16]
    9d96:	681b      	ldr	r3, [r3, #0]
    9d98:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    9d9c:	9b04      	ldr	r3, [sp, #16]
    9d9e:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    9da0:	9b04      	ldr	r3, [sp, #16]
    9da2:	681a      	ldr	r2, [r3, #0]
    9da4:	9b00      	ldr	r3, [sp, #0]
    9da6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    9daa:	431a      	orrs	r2, r3
    9dac:	9b04      	ldr	r3, [sp, #16]
    9dae:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    9db0:	9b01      	ldr	r3, [sp, #4]
    9db2:	685b      	ldr	r3, [r3, #4]
    9db4:	2b00      	cmp	r3, #0
    9db6:	d116      	bne.n	9de6 <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    9db8:	9b05      	ldr	r3, [sp, #20]
    9dba:	681b      	ldr	r3, [r3, #0]
    9dbc:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    9dc0:	9b05      	ldr	r3, [sp, #20]
    9dc2:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    9dc4:	9b04      	ldr	r3, [sp, #16]
    9dc6:	681b      	ldr	r3, [r3, #0]
    9dc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    9dcc:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    9dd0:	9a04      	ldr	r2, [sp, #16]
    9dd2:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    9dd4:	9b04      	ldr	r3, [sp, #16]
    9dd6:	681a      	ldr	r2, [r3, #0]
    9dd8:	9b00      	ldr	r3, [sp, #0]
    9dda:	0499      	lsls	r1, r3, #18
    9ddc:	4b0e      	ldr	r3, [pc, #56]	; (9e18 <FlexCAN_SetRxMsgBuff+0xcc>)
    9dde:	400b      	ands	r3, r1
    9de0:	431a      	orrs	r2, r3
    9de2:	9b04      	ldr	r3, [sp, #16]
    9de4:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    9de6:	9b01      	ldr	r3, [sp, #4]
    9de8:	681b      	ldr	r3, [r3, #0]
    9dea:	2b0f      	cmp	r3, #15
    9dec:	d00f      	beq.n	9e0e <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    9dee:	9b05      	ldr	r3, [sp, #20]
    9df0:	681b      	ldr	r3, [r3, #0]
    9df2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    9df6:	9b05      	ldr	r3, [sp, #20]
    9df8:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    9dfa:	9b05      	ldr	r3, [sp, #20]
    9dfc:	681a      	ldr	r2, [r3, #0]
    9dfe:	9b01      	ldr	r3, [sp, #4]
    9e00:	681b      	ldr	r3, [r3, #0]
    9e02:	061b      	lsls	r3, r3, #24
    9e04:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    9e08:	431a      	orrs	r2, r3
    9e0a:	9b05      	ldr	r3, [sp, #20]
    9e0c:	601a      	str	r2, [r3, #0]
    }
}
    9e0e:	bf00      	nop
    9e10:	b007      	add	sp, #28
    9e12:	f85d fb04 	ldr.w	pc, [sp], #4
    9e16:	bf00      	nop
    9e18:	1ffc0000 	.word	0x1ffc0000

00009e1c <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    9e1c:	b500      	push	{lr}
    9e1e:	b085      	sub	sp, #20
    9e20:	9001      	str	r0, [sp, #4]
    9e22:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    9e24:	2300      	movs	r3, #0
    9e26:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    9e28:	9900      	ldr	r1, [sp, #0]
    9e2a:	9801      	ldr	r0, [sp, #4]
    9e2c:	f7ff fb62 	bl	94f4 <FlexCAN_GetMsgBuffRegion>
    9e30:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    9e32:	9b02      	ldr	r3, [sp, #8]
    9e34:	681b      	ldr	r3, [r3, #0]
    9e36:	b29b      	uxth	r3, r3
    9e38:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    9e3a:	9b03      	ldr	r3, [sp, #12]
}
    9e3c:	4618      	mov	r0, r3
    9e3e:	b005      	add	sp, #20
    9e40:	f85d fb04 	ldr.w	pc, [sp], #4

00009e44 <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    9e44:	b500      	push	{lr}
    9e46:	b08d      	sub	sp, #52	; 0x34
    9e48:	9003      	str	r0, [sp, #12]
    9e4a:	9102      	str	r1, [sp, #8]
    9e4c:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    9e4e:	9902      	ldr	r1, [sp, #8]
    9e50:	9803      	ldr	r0, [sp, #12]
    9e52:	f7ff fb4f 	bl	94f4 <FlexCAN_GetMsgBuffRegion>
    9e56:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    9e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e5a:	3304      	adds	r3, #4
    9e5c:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    9e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e60:	3308      	adds	r3, #8
    9e62:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    9e64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e66:	3308      	adds	r3, #8
    9e68:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    9e6a:	2300      	movs	r3, #0
    9e6c:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    9e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9e70:	681b      	ldr	r3, [r3, #0]
    9e72:	0c1b      	lsrs	r3, r3, #16
    9e74:	b2db      	uxtb	r3, r3
    9e76:	f003 030f 	and.w	r3, r3, #15
    9e7a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    9e7e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9e82:	4618      	mov	r0, r3
    9e84:	f7ff faed 	bl	9462 <FlexCAN_ComputePayloadSize>
    9e88:	4603      	mov	r3, r0
    9e8a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    9e8e:	9b01      	ldr	r3, [sp, #4]
    9e90:	3308      	adds	r3, #8
    9e92:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    9e94:	9902      	ldr	r1, [sp, #8]
    9e96:	9803      	ldr	r0, [sp, #12]
    9e98:	f7ff fe5a 	bl	9b50 <FlexCAN_GetMbPayloadSize>
    9e9c:	4603      	mov	r3, r0
    9e9e:	461a      	mov	r2, r3
    9ea0:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    9ea4:	4293      	cmp	r3, r2
    9ea6:	d906      	bls.n	9eb6 <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    9ea8:	9902      	ldr	r1, [sp, #8]
    9eaa:	9803      	ldr	r0, [sp, #12]
    9eac:	f7ff fe50 	bl	9b50 <FlexCAN_GetMbPayloadSize>
    9eb0:	4603      	mov	r3, r0
    9eb2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    9eb6:	9b01      	ldr	r3, [sp, #4]
    9eb8:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    9ebc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    9ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9ec2:	681a      	ldr	r2, [r3, #0]
    9ec4:	9b01      	ldr	r3, [sp, #4]
    9ec6:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    9ec8:	9b01      	ldr	r3, [sp, #4]
    9eca:	681b      	ldr	r3, [r3, #0]
    9ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    9ed0:	2b00      	cmp	r3, #0
    9ed2:	d004      	beq.n	9ede <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    9ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ed6:	681a      	ldr	r2, [r3, #0]
    9ed8:	9b01      	ldr	r3, [sp, #4]
    9eda:	605a      	str	r2, [r3, #4]
    9edc:	e004      	b.n	9ee8 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    9ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ee0:	681b      	ldr	r3, [r3, #0]
    9ee2:	0c9a      	lsrs	r2, r3, #18
    9ee4:	9b01      	ldr	r3, [sp, #4]
    9ee6:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    9ee8:	9b01      	ldr	r3, [sp, #4]
    9eea:	681b      	ldr	r3, [r3, #0]
    9eec:	b29a      	uxth	r2, r3
    9eee:	9b01      	ldr	r3, [sp, #4]
    9ef0:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    9ef2:	2300      	movs	r3, #0
    9ef4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    9ef8:	e025      	b.n	9f46 <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    9efa:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9efe:	089b      	lsrs	r3, r3, #2
    9f00:	b2db      	uxtb	r3, r3
    9f02:	009b      	lsls	r3, r3, #2
    9f04:	9a07      	ldr	r2, [sp, #28]
    9f06:	4413      	add	r3, r2
    9f08:	681b      	ldr	r3, [r3, #0]
    9f0a:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    9f0c:	9b04      	ldr	r3, [sp, #16]
    9f0e:	0e1a      	lsrs	r2, r3, #24
    9f10:	9b04      	ldr	r3, [sp, #16]
    9f12:	0a1b      	lsrs	r3, r3, #8
    9f14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9f18:	431a      	orrs	r2, r3
    9f1a:	9b04      	ldr	r3, [sp, #16]
    9f1c:	021b      	lsls	r3, r3, #8
    9f1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    9f22:	ea42 0103 	orr.w	r1, r2, r3
    9f26:	9b04      	ldr	r3, [sp, #16]
    9f28:	061a      	lsls	r2, r3, #24
    9f2a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9f2e:	089b      	lsrs	r3, r3, #2
    9f30:	b2db      	uxtb	r3, r3
    9f32:	009b      	lsls	r3, r3, #2
    9f34:	9806      	ldr	r0, [sp, #24]
    9f36:	4403      	add	r3, r0
    9f38:	430a      	orrs	r2, r1
    9f3a:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    9f3c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9f40:	3304      	adds	r3, #4
    9f42:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    9f46:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    9f4a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    9f4e:	f023 0303 	bic.w	r3, r3, #3
    9f52:	429a      	cmp	r2, r3
    9f54:	d3d1      	bcc.n	9efa <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    9f56:	e014      	b.n	9f82 <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    9f58:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9f5c:	f083 0303 	eor.w	r3, r3, #3
    9f60:	b2db      	uxtb	r3, r3
    9f62:	461a      	mov	r2, r3
    9f64:	9b08      	ldr	r3, [sp, #32]
    9f66:	441a      	add	r2, r3
    9f68:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9f6c:	7812      	ldrb	r2, [r2, #0]
    9f6e:	b2d1      	uxtb	r1, r2
    9f70:	9a01      	ldr	r2, [sp, #4]
    9f72:	4413      	add	r3, r2
    9f74:	460a      	mov	r2, r1
    9f76:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    9f78:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    9f7c:	3301      	adds	r3, #1
    9f7e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    9f82:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    9f86:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    9f8a:	429a      	cmp	r2, r3
    9f8c:	d3e4      	bcc.n	9f58 <FlexCAN_GetMsgBuff+0x114>
    }
}
    9f8e:	bf00      	nop
    9f90:	bf00      	nop
    9f92:	b00d      	add	sp, #52	; 0x34
    9f94:	f85d fb04 	ldr.w	pc, [sp], #4

00009f98 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    9f98:	b500      	push	{lr}
    9f9a:	b08d      	sub	sp, #52	; 0x34
    9f9c:	9003      	str	r0, [sp, #12]
    9f9e:	9102      	str	r1, [sp, #8]
    9fa0:	9201      	str	r2, [sp, #4]
    9fa2:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    9fa4:	2300      	movs	r3, #0
    9fa6:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    9fa8:	9b03      	ldr	r3, [sp, #12]
    9faa:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    9fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9fae:	3304      	adds	r3, #4
    9fb0:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    9fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9fb4:	3308      	adds	r3, #8
    9fb6:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    9fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9fba:	3308      	adds	r3, #8
    9fbc:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    9fbe:	9b00      	ldr	r3, [sp, #0]
    9fc0:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    9fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9fc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    9fc8:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    9fca:	9b08      	ldr	r3, [sp, #32]
    9fcc:	2200      	movs	r2, #0
    9fce:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    9fd0:	9b02      	ldr	r3, [sp, #8]
    9fd2:	689b      	ldr	r3, [r3, #8]
    9fd4:	b2db      	uxtb	r3, r3
    9fd6:	4618      	mov	r0, r3
    9fd8:	f7ff f9f4 	bl	93c4 <FlexCAN_ComputeDLCValue>
    9fdc:	4603      	mov	r3, r0
    9fde:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    9fe2:	9b00      	ldr	r3, [sp, #0]
    9fe4:	2b00      	cmp	r3, #0
    9fe6:	d065      	beq.n	a0b4 <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    9fe8:	2300      	movs	r3, #0
    9fea:	930a      	str	r3, [sp, #40]	; 0x28
    9fec:	e02c      	b.n	a048 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    9fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9ff0:	089b      	lsrs	r3, r3, #2
    9ff2:	009b      	lsls	r3, r3, #2
    9ff4:	9a05      	ldr	r2, [sp, #20]
    9ff6:	4413      	add	r3, r2
    9ff8:	681b      	ldr	r3, [r3, #0]
    9ffa:	0e1a      	lsrs	r2, r3, #24
    9ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9ffe:	089b      	lsrs	r3, r3, #2
    a000:	009b      	lsls	r3, r3, #2
    a002:	9905      	ldr	r1, [sp, #20]
    a004:	440b      	add	r3, r1
    a006:	681b      	ldr	r3, [r3, #0]
    a008:	0a1b      	lsrs	r3, r3, #8
    a00a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    a00e:	431a      	orrs	r2, r3
    a010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a012:	089b      	lsrs	r3, r3, #2
    a014:	009b      	lsls	r3, r3, #2
    a016:	9905      	ldr	r1, [sp, #20]
    a018:	440b      	add	r3, r1
    a01a:	681b      	ldr	r3, [r3, #0]
    a01c:	021b      	lsls	r3, r3, #8
    a01e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a022:	ea42 0103 	orr.w	r1, r2, r3
    a026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a028:	089b      	lsrs	r3, r3, #2
    a02a:	009b      	lsls	r3, r3, #2
    a02c:	9a05      	ldr	r2, [sp, #20]
    a02e:	4413      	add	r3, r2
    a030:	681b      	ldr	r3, [r3, #0]
    a032:	061a      	lsls	r2, r3, #24
    a034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a036:	089b      	lsrs	r3, r3, #2
    a038:	009b      	lsls	r3, r3, #2
    a03a:	9806      	ldr	r0, [sp, #24]
    a03c:	4403      	add	r3, r0
    a03e:	430a      	orrs	r2, r1
    a040:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    a042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a044:	3304      	adds	r3, #4
    a046:	930a      	str	r3, [sp, #40]	; 0x28
    a048:	9b02      	ldr	r3, [sp, #8]
    a04a:	689b      	ldr	r3, [r3, #8]
    a04c:	f023 0303 	bic.w	r3, r3, #3
    a050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a052:	429a      	cmp	r2, r3
    a054:	d3cb      	bcc.n	9fee <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    a056:	e00c      	b.n	a072 <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    a058:	9a00      	ldr	r2, [sp, #0]
    a05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a05c:	441a      	add	r2, r3
    a05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a060:	f083 0303 	eor.w	r3, r3, #3
    a064:	9907      	ldr	r1, [sp, #28]
    a066:	440b      	add	r3, r1
    a068:	7812      	ldrb	r2, [r2, #0]
    a06a:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    a06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a06e:	3301      	adds	r3, #1
    a070:	930a      	str	r3, [sp, #40]	; 0x28
    a072:	9b02      	ldr	r3, [sp, #8]
    a074:	689b      	ldr	r3, [r3, #8]
    a076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a078:	429a      	cmp	r2, r3
    a07a:	d3ed      	bcc.n	a058 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    a07c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a080:	4618      	mov	r0, r3
    a082:	f7ff f9ee 	bl	9462 <FlexCAN_ComputePayloadSize>
    a086:	4603      	mov	r3, r0
    a088:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    a08c:	9b02      	ldr	r3, [sp, #8]
    a08e:	689b      	ldr	r3, [r3, #8]
    a090:	930a      	str	r3, [sp, #40]	; 0x28
    a092:	e00a      	b.n	a0aa <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    a094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a096:	f083 0303 	eor.w	r3, r3, #3
    a09a:	9a07      	ldr	r2, [sp, #28]
    a09c:	4413      	add	r3, r2
    a09e:	9a02      	ldr	r2, [sp, #8]
    a0a0:	7b52      	ldrb	r2, [r2, #13]
    a0a2:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    a0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a0a6:	3301      	adds	r3, #1
    a0a8:	930a      	str	r3, [sp, #40]	; 0x28
    a0aa:	f89d 3012 	ldrb.w	r3, [sp, #18]
    a0ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a0b0:	429a      	cmp	r2, r3
    a0b2:	d3ef      	bcc.n	a094 <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    a0b4:	9b02      	ldr	r3, [sp, #8]
    a0b6:	685b      	ldr	r3, [r3, #4]
    a0b8:	2b01      	cmp	r3, #1
    a0ba:	d111      	bne.n	a0e0 <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    a0bc:	9b08      	ldr	r3, [sp, #32]
    a0be:	681b      	ldr	r3, [r3, #0]
    a0c0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    a0c4:	9b08      	ldr	r3, [sp, #32]
    a0c6:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    a0c8:	9b08      	ldr	r3, [sp, #32]
    a0ca:	681a      	ldr	r2, [r3, #0]
    a0cc:	9b01      	ldr	r3, [sp, #4]
    a0ce:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    a0d2:	431a      	orrs	r2, r3
    a0d4:	9b08      	ldr	r3, [sp, #32]
    a0d6:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    a0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0da:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    a0de:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    a0e0:	9b02      	ldr	r3, [sp, #8]
    a0e2:	685b      	ldr	r3, [r3, #4]
    a0e4:	2b00      	cmp	r3, #0
    a0e6:	d114      	bne.n	a112 <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    a0e8:	9b08      	ldr	r3, [sp, #32]
    a0ea:	681b      	ldr	r3, [r3, #0]
    a0ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    a0f0:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    a0f4:	9a08      	ldr	r2, [sp, #32]
    a0f6:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    a0f8:	9b08      	ldr	r3, [sp, #32]
    a0fa:	681a      	ldr	r2, [r3, #0]
    a0fc:	9b01      	ldr	r3, [sp, #4]
    a0fe:	0499      	lsls	r1, r3, #18
    a100:	4b2b      	ldr	r3, [pc, #172]	; (a1b0 <FlexCAN_SetTxMsgBuff+0x218>)
    a102:	400b      	ands	r3, r1
    a104:	431a      	orrs	r2, r3
    a106:	9b08      	ldr	r3, [sp, #32]
    a108:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    a10a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a10c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    a110:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    a112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a114:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    a118:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    a11a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a11e:	041b      	lsls	r3, r3, #16
    a120:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    a124:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a126:	4313      	orrs	r3, r2
    a128:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    a12a:	9b02      	ldr	r3, [sp, #8]
    a12c:	681b      	ldr	r3, [r3, #0]
    a12e:	2b0f      	cmp	r3, #15
    a130:	d03a      	beq.n	a1a8 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    a132:	9b02      	ldr	r3, [sp, #8]
    a134:	681b      	ldr	r3, [r3, #0]
    a136:	2b1c      	cmp	r3, #28
    a138:	d104      	bne.n	a144 <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    a13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a13c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    a140:	930b      	str	r3, [sp, #44]	; 0x2c
    a142:	e007      	b.n	a154 <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    a144:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    a148:	2b00      	cmp	r3, #0
    a14a:	d003      	beq.n	a154 <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    a14c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a14e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    a152:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    a154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a156:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    a15a:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    a15c:	9b02      	ldr	r3, [sp, #8]
    a15e:	7b1b      	ldrb	r3, [r3, #12]
    a160:	2b00      	cmp	r3, #0
    a162:	d00e      	beq.n	a182 <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    a164:	9b02      	ldr	r3, [sp, #8]
    a166:	681b      	ldr	r3, [r3, #0]
    a168:	061b      	lsls	r3, r3, #24
    a16a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    a16e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a170:	4313      	orrs	r3, r2
    a172:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a176:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    a178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a17a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    a17e:	930b      	str	r3, [sp, #44]	; 0x2c
    a180:	e007      	b.n	a192 <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    a182:	9b02      	ldr	r3, [sp, #8]
    a184:	681b      	ldr	r3, [r3, #0]
    a186:	061b      	lsls	r3, r3, #24
    a188:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    a18c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a18e:	4313      	orrs	r3, r2
    a190:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    a192:	9b02      	ldr	r3, [sp, #8]
    a194:	7b9b      	ldrb	r3, [r3, #14]
    a196:	2b00      	cmp	r3, #0
    a198:	d003      	beq.n	a1a2 <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    a19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a19c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a1a0:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    a1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a1a6:	601a      	str	r2, [r3, #0]
        }
}
    a1a8:	bf00      	nop
    a1aa:	b00d      	add	sp, #52	; 0x34
    a1ac:	f85d fb04 	ldr.w	pc, [sp], #4
    a1b0:	1ffc0000 	.word	0x1ffc0000

0000a1b4 <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    a1b4:	b500      	push	{lr}
    a1b6:	b08f      	sub	sp, #60	; 0x3c
    a1b8:	9001      	str	r0, [sp, #4]
    a1ba:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    a1bc:	9b01      	ldr	r3, [sp, #4]
    a1be:	3380      	adds	r3, #128	; 0x80
    a1c0:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    a1c2:	2300      	movs	r3, #0
    a1c4:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    a1c6:	2300      	movs	r3, #0
    a1c8:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    a1ca:	2300      	movs	r3, #0
    a1cc:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    a1ce:	2300      	movs	r3, #0
    a1d0:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    a1d2:	2308      	movs	r3, #8
    a1d4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    a1d8:	9b00      	ldr	r3, [sp, #0]
    a1da:	3b01      	subs	r3, #1
    a1dc:	4619      	mov	r1, r3
    a1de:	9801      	ldr	r0, [sp, #4]
    a1e0:	f7ff fcb6 	bl	9b50 <FlexCAN_GetMbPayloadSize>
    a1e4:	4603      	mov	r3, r0
    a1e6:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    a1ea:	2300      	movs	r3, #0
    a1ec:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    a1ee:	2300      	movs	r3, #0
    a1f0:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    a1f2:	2300      	movs	r3, #0
    a1f4:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    a1f6:	9b00      	ldr	r3, [sp, #0]
    a1f8:	3b01      	subs	r3, #1
    a1fa:	4619      	mov	r1, r3
    a1fc:	9801      	ldr	r0, [sp, #4]
    a1fe:	f7ff f979 	bl	94f4 <FlexCAN_GetMsgBuffRegion>
    a202:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    a204:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a208:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a20a:	441a      	add	r2, r3
    a20c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a210:	4413      	add	r3, r2
    a212:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    a214:	9801      	ldr	r0, [sp, #4]
    a216:	f7ff f9e7 	bl	95e8 <FlexCAN_GetMaxMbNum>
    a21a:	4603      	mov	r3, r0
    a21c:	011b      	lsls	r3, r3, #4
    a21e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a220:	4413      	add	r3, r2
    a222:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    a224:	9a04      	ldr	r2, [sp, #16]
    a226:	9b03      	ldr	r3, [sp, #12]
    a228:	429a      	cmp	r2, r3
    a22a:	d806      	bhi.n	a23a <FlexCAN_SetMaxMsgBuffNum+0x86>
    a22c:	9801      	ldr	r0, [sp, #4]
    a22e:	f7ff f9db 	bl	95e8 <FlexCAN_GetMaxMbNum>
    a232:	4602      	mov	r2, r0
    a234:	9b00      	ldr	r3, [sp, #0]
    a236:	4293      	cmp	r3, r2
    a238:	d901      	bls.n	a23e <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    a23a:	2304      	movs	r3, #4
    a23c:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    a23e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a240:	2b00      	cmp	r3, #0
    a242:	d142      	bne.n	a2ca <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    a244:	9b01      	ldr	r3, [sp, #4]
    a246:	681b      	ldr	r3, [r3, #0]
    a248:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    a24c:	9b00      	ldr	r3, [sp, #0]
    a24e:	3b01      	subs	r3, #1
    a250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a254:	431a      	orrs	r2, r3
    a256:	9b01      	ldr	r3, [sp, #4]
    a258:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    a25a:	9b01      	ldr	r3, [sp, #4]
    a25c:	681b      	ldr	r3, [r3, #0]
    a25e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    a262:	2b00      	cmp	r3, #0
    a264:	d131      	bne.n	a2ca <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    a266:	2300      	movs	r3, #0
    a268:	930d      	str	r3, [sp, #52]	; 0x34
    a26a:	e02a      	b.n	a2c2 <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    a26c:	990d      	ldr	r1, [sp, #52]	; 0x34
    a26e:	9801      	ldr	r0, [sp, #4]
    a270:	f7ff f940 	bl	94f4 <FlexCAN_GetMsgBuffRegion>
    a274:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    a276:	9b08      	ldr	r3, [sp, #32]
    a278:	3304      	adds	r3, #4
    a27a:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    a27c:	9b08      	ldr	r3, [sp, #32]
    a27e:	3308      	adds	r3, #8
    a280:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    a282:	9b08      	ldr	r3, [sp, #32]
    a284:	2200      	movs	r2, #0
    a286:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    a288:	9b07      	ldr	r3, [sp, #28]
    a28a:	2200      	movs	r2, #0
    a28c:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    a28e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a290:	9801      	ldr	r0, [sp, #4]
    a292:	f7ff fc5d 	bl	9b50 <FlexCAN_GetMbPayloadSize>
    a296:	4603      	mov	r3, r0
    a298:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    a29c:	2300      	movs	r3, #0
    a29e:	930c      	str	r3, [sp, #48]	; 0x30
    a2a0:	e007      	b.n	a2b2 <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    a2a2:	9a06      	ldr	r2, [sp, #24]
    a2a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a2a6:	4413      	add	r3, r2
    a2a8:	2200      	movs	r2, #0
    a2aa:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    a2ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a2ae:	3301      	adds	r3, #1
    a2b0:	930c      	str	r3, [sp, #48]	; 0x30
    a2b2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a2b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a2b8:	429a      	cmp	r2, r3
    a2ba:	d3f2      	bcc.n	a2a2 <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    a2bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a2be:	3301      	adds	r3, #1
    a2c0:	930d      	str	r3, [sp, #52]	; 0x34
    a2c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a2c4:	9b00      	ldr	r3, [sp, #0]
    a2c6:	429a      	cmp	r2, r3
    a2c8:	d3d0      	bcc.n	a26c <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    a2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    a2cc:	4618      	mov	r0, r3
    a2ce:	b00f      	add	sp, #60	; 0x3c
    a2d0:	f85d fb04 	ldr.w	pc, [sp], #4

0000a2d4 <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    a2d4:	b500      	push	{lr}
    a2d6:	b083      	sub	sp, #12
    a2d8:	9001      	str	r0, [sp, #4]
    a2da:	9100      	str	r1, [sp, #0]
    switch (mode)
    a2dc:	9b00      	ldr	r3, [sp, #0]
    a2de:	2b02      	cmp	r3, #2
    a2e0:	d01d      	beq.n	a31e <FlexCAN_SetOperationMode+0x4a>
    a2e2:	9b00      	ldr	r3, [sp, #0]
    a2e4:	2b02      	cmp	r3, #2
    a2e6:	d82b      	bhi.n	a340 <FlexCAN_SetOperationMode+0x6c>
    a2e8:	9b00      	ldr	r3, [sp, #0]
    a2ea:	2b00      	cmp	r3, #0
    a2ec:	d003      	beq.n	a2f6 <FlexCAN_SetOperationMode+0x22>
    a2ee:	9b00      	ldr	r3, [sp, #0]
    a2f0:	2b01      	cmp	r3, #1
    a2f2:	d00d      	beq.n	a310 <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    a2f4:	e024      	b.n	a340 <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    a2f6:	9b01      	ldr	r3, [sp, #4]
    a2f8:	685b      	ldr	r3, [r3, #4]
    a2fa:	f023 0208 	bic.w	r2, r3, #8
    a2fe:	9b01      	ldr	r3, [sp, #4]
    a300:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    a302:	9b01      	ldr	r3, [sp, #4]
    a304:	685b      	ldr	r3, [r3, #4]
    a306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    a30a:	9b01      	ldr	r3, [sp, #4]
    a30c:	605a      	str	r2, [r3, #4]
            break;
    a30e:	e018      	b.n	a342 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    a310:	9b01      	ldr	r3, [sp, #4]
    a312:	685b      	ldr	r3, [r3, #4]
    a314:	f043 0208 	orr.w	r2, r3, #8
    a318:	9b01      	ldr	r3, [sp, #4]
    a31a:	605a      	str	r2, [r3, #4]
            break;
    a31c:	e011      	b.n	a342 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    a31e:	9b01      	ldr	r3, [sp, #4]
    a320:	685b      	ldr	r3, [r3, #4]
    a322:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    a326:	9b01      	ldr	r3, [sp, #4]
    a328:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    a32a:	9b01      	ldr	r3, [sp, #4]
    a32c:	685b      	ldr	r3, [r3, #4]
    a32e:	f023 0208 	bic.w	r2, r3, #8
    a332:	9b01      	ldr	r3, [sp, #4]
    a334:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    a336:	2101      	movs	r1, #1
    a338:	9801      	ldr	r0, [sp, #4]
    a33a:	f7fe ff7f 	bl	923c <FlexCAN_SetSelfReception>
            break;
    a33e:	e000      	b.n	a342 <FlexCAN_SetOperationMode+0x6e>
            break;
    a340:	bf00      	nop
    }
}
    a342:	bf00      	nop
    a344:	b003      	add	sp, #12
    a346:	f85d fb04 	ldr.w	pc, [sp], #4

0000a34a <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    a34a:	b500      	push	{lr}
    a34c:	b08d      	sub	sp, #52	; 0x34
    a34e:	9003      	str	r0, [sp, #12]
    a350:	9102      	str	r1, [sp, #8]
    a352:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    a354:	2300      	movs	r3, #0
    a356:	9309      	str	r3, [sp, #36]	; 0x24
    a358:	2300      	movs	r3, #0
    a35a:	9308      	str	r3, [sp, #32]
    a35c:	2300      	movs	r3, #0
    a35e:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    a360:	9b03      	ldr	r3, [sp, #12]
    a362:	33e0      	adds	r3, #224	; 0xe0
    a364:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    a366:	9b03      	ldr	r3, [sp, #12]
    a368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a36a:	0e1b      	lsrs	r3, r3, #24
    a36c:	f003 030f 	and.w	r3, r3, #15
    a370:	9305      	str	r3, [sp, #20]
    a372:	9b02      	ldr	r3, [sp, #8]
    a374:	2b03      	cmp	r3, #3
    a376:	f200 81e7 	bhi.w	a748 <FlexCAN_SetRxFifoFilter+0x3fe>
    a37a:	a201      	add	r2, pc, #4	; (adr r2, a380 <FlexCAN_SetRxFifoFilter+0x36>)
    a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a380:	0000a391 	.word	0x0000a391
    a384:	0000a42b 	.word	0x0000a42b
    a388:	0000a565 	.word	0x0000a565
    a38c:	0000a733 	.word	0x0000a733
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    a390:	f000 ff52 	bl	b238 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    a394:	9b03      	ldr	r3, [sp, #12]
    a396:	681b      	ldr	r3, [r3, #0]
    a398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    a39c:	9b03      	ldr	r3, [sp, #12]
    a39e:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    a3a0:	f000 ff76 	bl	b290 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    a3a4:	2300      	movs	r3, #0
    a3a6:	930b      	str	r3, [sp, #44]	; 0x2c
    a3a8:	e038      	b.n	a41c <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    a3aa:	2300      	movs	r3, #0
    a3ac:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    a3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a3b0:	00db      	lsls	r3, r3, #3
    a3b2:	9a01      	ldr	r2, [sp, #4]
    a3b4:	4413      	add	r3, r2
    a3b6:	781b      	ldrb	r3, [r3, #0]
    a3b8:	2b00      	cmp	r3, #0
    a3ba:	d002      	beq.n	a3c2 <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    a3bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    a3c0:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    a3c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a3c4:	00db      	lsls	r3, r3, #3
    a3c6:	9a01      	ldr	r2, [sp, #4]
    a3c8:	4413      	add	r3, r2
    a3ca:	785b      	ldrb	r3, [r3, #1]
    a3cc:	2b00      	cmp	r3, #0
    a3ce:	d013      	beq.n	a3f8 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    a3d0:	9b07      	ldr	r3, [sp, #28]
    a3d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a3d6:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    a3d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a3da:	00db      	lsls	r3, r3, #3
    a3dc:	9a01      	ldr	r2, [sp, #4]
    a3de:	4413      	add	r3, r2
    a3e0:	685b      	ldr	r3, [r3, #4]
    a3e2:	005b      	lsls	r3, r3, #1
    a3e4:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    a3e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a3ea:	009b      	lsls	r3, r3, #2
    a3ec:	9a06      	ldr	r2, [sp, #24]
    a3ee:	4413      	add	r3, r2
    a3f0:	9a07      	ldr	r2, [sp, #28]
    a3f2:	440a      	add	r2, r1
    a3f4:	601a      	str	r2, [r3, #0]
    a3f6:	e00e      	b.n	a416 <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    a3f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a3fa:	00db      	lsls	r3, r3, #3
    a3fc:	9a01      	ldr	r2, [sp, #4]
    a3fe:	4413      	add	r3, r2
    a400:	685b      	ldr	r3, [r3, #4]
    a402:	04da      	lsls	r2, r3, #19
    a404:	4b9d      	ldr	r3, [pc, #628]	; (a67c <FlexCAN_SetRxFifoFilter+0x332>)
    a406:	4013      	ands	r3, r2
    a408:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a40a:	0092      	lsls	r2, r2, #2
    a40c:	9906      	ldr	r1, [sp, #24]
    a40e:	440a      	add	r2, r1
    a410:	9907      	ldr	r1, [sp, #28]
    a412:	440b      	add	r3, r1
    a414:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    a416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a418:	3301      	adds	r3, #1
    a41a:	930b      	str	r3, [sp, #44]	; 0x2c
    a41c:	9b05      	ldr	r3, [sp, #20]
    a41e:	3301      	adds	r3, #1
    a420:	00db      	lsls	r3, r3, #3
    a422:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a424:	429a      	cmp	r2, r3
    a426:	d3c0      	bcc.n	a3aa <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    a428:	e18f      	b.n	a74a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    a42a:	f000 ff05 	bl	b238 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    a42e:	9b03      	ldr	r3, [sp, #12]
    a430:	681b      	ldr	r3, [r3, #0]
    a432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    a436:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    a43a:	9b03      	ldr	r3, [sp, #12]
    a43c:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    a43e:	f000 ff27 	bl	b290 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    a442:	2300      	movs	r3, #0
    a444:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    a446:	2300      	movs	r3, #0
    a448:	930b      	str	r3, [sp, #44]	; 0x2c
    a44a:	e083      	b.n	a554 <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    a44c:	2300      	movs	r3, #0
    a44e:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    a450:	2300      	movs	r3, #0
    a452:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    a454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a456:	00db      	lsls	r3, r3, #3
    a458:	9a01      	ldr	r2, [sp, #4]
    a45a:	4413      	add	r3, r2
    a45c:	781b      	ldrb	r3, [r3, #0]
    a45e:	2b00      	cmp	r3, #0
    a460:	d002      	beq.n	a468 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    a462:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    a466:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    a468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a46a:	3301      	adds	r3, #1
    a46c:	00db      	lsls	r3, r3, #3
    a46e:	9a01      	ldr	r2, [sp, #4]
    a470:	4413      	add	r3, r2
    a472:	781b      	ldrb	r3, [r3, #0]
    a474:	2b00      	cmp	r3, #0
    a476:	d002      	beq.n	a47e <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    a478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    a47c:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    a47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a480:	00db      	lsls	r3, r3, #3
    a482:	9a01      	ldr	r2, [sp, #4]
    a484:	4413      	add	r3, r2
    a486:	785b      	ldrb	r3, [r3, #1]
    a488:	2b00      	cmp	r3, #0
    a48a:	d014      	beq.n	a4b6 <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    a48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a48e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    a492:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    a494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a496:	00db      	lsls	r3, r3, #3
    a498:	9a01      	ldr	r2, [sp, #4]
    a49a:	4413      	add	r3, r2
    a49c:	685b      	ldr	r3, [r3, #4]
    a49e:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    a4a0:	041a      	lsls	r2, r3, #16
    a4a2:	4b77      	ldr	r3, [pc, #476]	; (a680 <FlexCAN_SetRxFifoFilter+0x336>)
    a4a4:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    a4a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a4a8:	0092      	lsls	r2, r2, #2
    a4aa:	9906      	ldr	r1, [sp, #24]
    a4ac:	440a      	add	r2, r1
    a4ae:	9909      	ldr	r1, [sp, #36]	; 0x24
    a4b0:	440b      	add	r3, r1
    a4b2:	6013      	str	r3, [r2, #0]
    a4b4:	e00e      	b.n	a4d4 <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    a4b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a4b8:	00db      	lsls	r3, r3, #3
    a4ba:	9a01      	ldr	r2, [sp, #4]
    a4bc:	4413      	add	r3, r2
    a4be:	685b      	ldr	r3, [r3, #4]
    a4c0:	04da      	lsls	r2, r3, #19
    a4c2:	4b6e      	ldr	r3, [pc, #440]	; (a67c <FlexCAN_SetRxFifoFilter+0x332>)
    a4c4:	4013      	ands	r3, r2
    a4c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a4c8:	0092      	lsls	r2, r2, #2
    a4ca:	9906      	ldr	r1, [sp, #24]
    a4cc:	440a      	add	r2, r1
    a4ce:	9909      	ldr	r1, [sp, #36]	; 0x24
    a4d0:	440b      	add	r3, r1
    a4d2:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    a4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a4d6:	3301      	adds	r3, #1
    a4d8:	00db      	lsls	r3, r3, #3
    a4da:	9a01      	ldr	r2, [sp, #4]
    a4dc:	4413      	add	r3, r2
    a4de:	785b      	ldrb	r3, [r3, #1]
    a4e0:	2b00      	cmp	r3, #0
    a4e2:	d01a      	beq.n	a51a <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    a4e4:	9b08      	ldr	r3, [sp, #32]
    a4e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    a4ea:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    a4ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a4ee:	009b      	lsls	r3, r3, #2
    a4f0:	9a06      	ldr	r2, [sp, #24]
    a4f2:	4413      	add	r3, r2
    a4f4:	6819      	ldr	r1, [r3, #0]
    a4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a4f8:	3301      	adds	r3, #1
    a4fa:	00db      	lsls	r3, r3, #3
    a4fc:	9a01      	ldr	r2, [sp, #4]
    a4fe:	4413      	add	r3, r2
    a500:	685b      	ldr	r3, [r3, #4]
    a502:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    a504:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    a508:	9b08      	ldr	r3, [sp, #32]
    a50a:	441a      	add	r2, r3
    a50c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a50e:	009b      	lsls	r3, r3, #2
    a510:	9806      	ldr	r0, [sp, #24]
    a512:	4403      	add	r3, r0
    a514:	430a      	orrs	r2, r1
    a516:	601a      	str	r2, [r3, #0]
    a518:	e016      	b.n	a548 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    a51a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a51c:	009b      	lsls	r3, r3, #2
    a51e:	9a06      	ldr	r2, [sp, #24]
    a520:	4413      	add	r3, r2
    a522:	6819      	ldr	r1, [r3, #0]
    a524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a526:	3301      	adds	r3, #1
    a528:	00db      	lsls	r3, r3, #3
    a52a:	9a01      	ldr	r2, [sp, #4]
    a52c:	4413      	add	r3, r2
    a52e:	685b      	ldr	r3, [r3, #4]
    a530:	00da      	lsls	r2, r3, #3
    a532:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    a536:	4013      	ands	r3, r2
    a538:	9a08      	ldr	r2, [sp, #32]
    a53a:	441a      	add	r2, r3
    a53c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a53e:	009b      	lsls	r3, r3, #2
    a540:	9806      	ldr	r0, [sp, #24]
    a542:	4403      	add	r3, r0
    a544:	430a      	orrs	r2, r1
    a546:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    a548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a54a:	3302      	adds	r3, #2
    a54c:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    a54e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a550:	3301      	adds	r3, #1
    a552:	930b      	str	r3, [sp, #44]	; 0x2c
    a554:	9b05      	ldr	r3, [sp, #20]
    a556:	3301      	adds	r3, #1
    a558:	00db      	lsls	r3, r3, #3
    a55a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a55c:	429a      	cmp	r2, r3
    a55e:	f4ff af75 	bcc.w	a44c <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    a562:	e0f2      	b.n	a74a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    a564:	f000 fe68 	bl	b238 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    a568:	9b03      	ldr	r3, [sp, #12]
    a56a:	681b      	ldr	r3, [r3, #0]
    a56c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    a570:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    a574:	9b03      	ldr	r3, [sp, #12]
    a576:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    a578:	f000 fe8a 	bl	b290 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    a57c:	2300      	movs	r3, #0
    a57e:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    a580:	2300      	movs	r3, #0
    a582:	930b      	str	r3, [sp, #44]	; 0x2c
    a584:	e0cd      	b.n	a722 <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    a586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a588:	00db      	lsls	r3, r3, #3
    a58a:	9a01      	ldr	r2, [sp, #4]
    a58c:	4413      	add	r3, r2
    a58e:	785b      	ldrb	r3, [r3, #1]
    a590:	2b00      	cmp	r3, #0
    a592:	d00e      	beq.n	a5b2 <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    a594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a596:	00db      	lsls	r3, r3, #3
    a598:	9a01      	ldr	r2, [sp, #4]
    a59a:	4413      	add	r3, r2
    a59c:	685b      	ldr	r3, [r3, #4]
    a59e:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    a5a0:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    a5a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5a4:	009b      	lsls	r3, r3, #2
    a5a6:	9a06      	ldr	r2, [sp, #24]
    a5a8:	4413      	add	r3, r2
    a5aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a5ac:	440a      	add	r2, r1
    a5ae:	601a      	str	r2, [r3, #0]
    a5b0:	e00d      	b.n	a5ce <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    a5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a5b4:	00db      	lsls	r3, r3, #3
    a5b6:	9a01      	ldr	r2, [sp, #4]
    a5b8:	4413      	add	r3, r2
    a5ba:	685b      	ldr	r3, [r3, #4]
    a5bc:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    a5be:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    a5c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5c2:	009b      	lsls	r3, r3, #2
    a5c4:	9a06      	ldr	r2, [sp, #24]
    a5c6:	4413      	add	r3, r2
    a5c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a5ca:	440a      	add	r2, r1
    a5cc:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    a5ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a5d0:	3301      	adds	r3, #1
    a5d2:	00db      	lsls	r3, r3, #3
    a5d4:	9a01      	ldr	r2, [sp, #4]
    a5d6:	4413      	add	r3, r2
    a5d8:	785b      	ldrb	r3, [r3, #1]
    a5da:	2b00      	cmp	r3, #0
    a5dc:	d017      	beq.n	a60e <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    a5de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5e0:	009b      	lsls	r3, r3, #2
    a5e2:	9a06      	ldr	r2, [sp, #24]
    a5e4:	4413      	add	r3, r2
    a5e6:	6819      	ldr	r1, [r3, #0]
    a5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a5ea:	3301      	adds	r3, #1
    a5ec:	00db      	lsls	r3, r3, #3
    a5ee:	9a01      	ldr	r2, [sp, #4]
    a5f0:	4413      	add	r3, r2
    a5f2:	685b      	ldr	r3, [r3, #4]
    a5f4:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    a5f6:	041b      	lsls	r3, r3, #16
    a5f8:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    a5fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a5fe:	441a      	add	r2, r3
    a600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a602:	009b      	lsls	r3, r3, #2
    a604:	9806      	ldr	r0, [sp, #24]
    a606:	4403      	add	r3, r0
    a608:	430a      	orrs	r2, r1
    a60a:	601a      	str	r2, [r3, #0]
    a60c:	e016      	b.n	a63c <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    a60e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a610:	009b      	lsls	r3, r3, #2
    a612:	9a06      	ldr	r2, [sp, #24]
    a614:	4413      	add	r3, r2
    a616:	6819      	ldr	r1, [r3, #0]
    a618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a61a:	3301      	adds	r3, #1
    a61c:	00db      	lsls	r3, r3, #3
    a61e:	9a01      	ldr	r2, [sp, #4]
    a620:	4413      	add	r3, r2
    a622:	685b      	ldr	r3, [r3, #4]
    a624:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    a626:	041b      	lsls	r3, r3, #16
    a628:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    a62c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a62e:	441a      	add	r2, r3
    a630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a632:	009b      	lsls	r3, r3, #2
    a634:	9806      	ldr	r0, [sp, #24]
    a636:	4403      	add	r3, r0
    a638:	430a      	orrs	r2, r1
    a63a:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    a63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a63e:	3302      	adds	r3, #2
    a640:	00db      	lsls	r3, r3, #3
    a642:	9a01      	ldr	r2, [sp, #4]
    a644:	4413      	add	r3, r2
    a646:	785b      	ldrb	r3, [r3, #1]
    a648:	2b00      	cmp	r3, #0
    a64a:	d01b      	beq.n	a684 <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    a64c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a64e:	009b      	lsls	r3, r3, #2
    a650:	9a06      	ldr	r2, [sp, #24]
    a652:	4413      	add	r3, r2
    a654:	6819      	ldr	r1, [r3, #0]
    a656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a658:	3302      	adds	r3, #2
    a65a:	00db      	lsls	r3, r3, #3
    a65c:	9a01      	ldr	r2, [sp, #4]
    a65e:	4413      	add	r3, r2
    a660:	685b      	ldr	r3, [r3, #4]
    a662:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    a664:	021b      	lsls	r3, r3, #8
    a666:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    a668:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a66a:	441a      	add	r2, r3
    a66c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a66e:	009b      	lsls	r3, r3, #2
    a670:	9806      	ldr	r0, [sp, #24]
    a672:	4403      	add	r3, r0
    a674:	430a      	orrs	r2, r1
    a676:	601a      	str	r2, [r3, #0]
    a678:	e01a      	b.n	a6b0 <FlexCAN_SetRxFifoFilter+0x366>
    a67a:	bf00      	nop
    a67c:	3ff80000 	.word	0x3ff80000
    a680:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    a684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a686:	009b      	lsls	r3, r3, #2
    a688:	9a06      	ldr	r2, [sp, #24]
    a68a:	4413      	add	r3, r2
    a68c:	6819      	ldr	r1, [r3, #0]
    a68e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a690:	3302      	adds	r3, #2
    a692:	00db      	lsls	r3, r3, #3
    a694:	9a01      	ldr	r2, [sp, #4]
    a696:	4413      	add	r3, r2
    a698:	685b      	ldr	r3, [r3, #4]
    a69a:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    a69c:	021b      	lsls	r3, r3, #8
    a69e:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    a6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a6a2:	441a      	add	r2, r3
    a6a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a6a6:	009b      	lsls	r3, r3, #2
    a6a8:	9806      	ldr	r0, [sp, #24]
    a6aa:	4403      	add	r3, r0
    a6ac:	430a      	orrs	r2, r1
    a6ae:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    a6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a6b2:	3303      	adds	r3, #3
    a6b4:	00db      	lsls	r3, r3, #3
    a6b6:	9a01      	ldr	r2, [sp, #4]
    a6b8:	4413      	add	r3, r2
    a6ba:	785b      	ldrb	r3, [r3, #1]
    a6bc:	2b00      	cmp	r3, #0
    a6be:	d015      	beq.n	a6ec <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    a6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a6c2:	009b      	lsls	r3, r3, #2
    a6c4:	9a06      	ldr	r2, [sp, #24]
    a6c6:	4413      	add	r3, r2
    a6c8:	6819      	ldr	r1, [r3, #0]
    a6ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a6cc:	3303      	adds	r3, #3
    a6ce:	00db      	lsls	r3, r3, #3
    a6d0:	9a01      	ldr	r2, [sp, #4]
    a6d2:	4413      	add	r3, r2
    a6d4:	685b      	ldr	r3, [r3, #4]
    a6d6:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    a6d8:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    a6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a6dc:	441a      	add	r2, r3
    a6de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a6e0:	009b      	lsls	r3, r3, #2
    a6e2:	9806      	ldr	r0, [sp, #24]
    a6e4:	4403      	add	r3, r0
    a6e6:	430a      	orrs	r2, r1
    a6e8:	601a      	str	r2, [r3, #0]
    a6ea:	e014      	b.n	a716 <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    a6ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a6ee:	009b      	lsls	r3, r3, #2
    a6f0:	9a06      	ldr	r2, [sp, #24]
    a6f2:	4413      	add	r3, r2
    a6f4:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    a6f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a6f8:	3303      	adds	r3, #3
    a6fa:	00db      	lsls	r3, r3, #3
    a6fc:	9a01      	ldr	r2, [sp, #4]
    a6fe:	4413      	add	r3, r2
    a700:	685b      	ldr	r3, [r3, #4]
    a702:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    a704:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    a706:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a708:	441a      	add	r2, r3
    a70a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a70c:	009b      	lsls	r3, r3, #2
    a70e:	9806      	ldr	r0, [sp, #24]
    a710:	4403      	add	r3, r0
    a712:	430a      	orrs	r2, r1
    a714:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    a716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a718:	3304      	adds	r3, #4
    a71a:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    a71c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a71e:	3301      	adds	r3, #1
    a720:	930b      	str	r3, [sp, #44]	; 0x2c
    a722:	9b05      	ldr	r3, [sp, #20]
    a724:	3301      	adds	r3, #1
    a726:	00db      	lsls	r3, r3, #3
    a728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a72a:	429a      	cmp	r2, r3
    a72c:	f4ff af2b 	bcc.w	a586 <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    a730:	e00b      	b.n	a74a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    a732:	f000 fd81 	bl	b238 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    a736:	9b03      	ldr	r3, [sp, #12]
    a738:	681b      	ldr	r3, [r3, #0]
    a73a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    a73e:	9b03      	ldr	r3, [sp, #12]
    a740:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    a742:	f000 fda5 	bl	b290 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    a746:	e000      	b.n	a74a <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    a748:	bf00      	nop
    }
}
    a74a:	bf00      	nop
    a74c:	b00d      	add	sp, #52	; 0x34
    a74e:	f85d fb04 	ldr.w	pc, [sp], #4

0000a752 <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    a752:	b500      	push	{lr}
    a754:	b08b      	sub	sp, #44	; 0x2c
    a756:	9001      	str	r0, [sp, #4]
    a758:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    a75a:	9b01      	ldr	r3, [sp, #4]
    a75c:	3380      	adds	r3, #128	; 0x80
    a75e:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    a760:	9b07      	ldr	r3, [sp, #28]
    a762:	3304      	adds	r3, #4
    a764:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    a766:	9b07      	ldr	r3, [sp, #28]
    a768:	3308      	adds	r3, #8
    a76a:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    a76c:	2300      	movs	r3, #0
    a76e:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    a770:	9b07      	ldr	r3, [sp, #28]
    a772:	681b      	ldr	r3, [r3, #0]
    a774:	0c1b      	lsrs	r3, r3, #16
    a776:	b2db      	uxtb	r3, r3
    a778:	f003 030f 	and.w	r3, r3, #15
    a77c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    a780:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a784:	4618      	mov	r0, r3
    a786:	f7fe fe6c 	bl	9462 <FlexCAN_ComputePayloadSize>
    a78a:	4603      	mov	r3, r0
    a78c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    a790:	9b00      	ldr	r3, [sp, #0]
    a792:	3308      	adds	r3, #8
    a794:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    a796:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a79a:	2b08      	cmp	r3, #8
    a79c:	d902      	bls.n	a7a4 <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    a79e:	2308      	movs	r3, #8
    a7a0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    a7a4:	9b00      	ldr	r3, [sp, #0]
    a7a6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    a7aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    a7ae:	9b07      	ldr	r3, [sp, #28]
    a7b0:	681a      	ldr	r2, [r3, #0]
    a7b2:	9b00      	ldr	r3, [sp, #0]
    a7b4:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    a7b6:	9b00      	ldr	r3, [sp, #0]
    a7b8:	681b      	ldr	r3, [r3, #0]
    a7ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    a7be:	2b00      	cmp	r3, #0
    a7c0:	d004      	beq.n	a7cc <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    a7c2:	9b06      	ldr	r3, [sp, #24]
    a7c4:	681a      	ldr	r2, [r3, #0]
    a7c6:	9b00      	ldr	r3, [sp, #0]
    a7c8:	605a      	str	r2, [r3, #4]
    a7ca:	e004      	b.n	a7d6 <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    a7cc:	9b06      	ldr	r3, [sp, #24]
    a7ce:	681b      	ldr	r3, [r3, #0]
    a7d0:	0c9a      	lsrs	r2, r3, #18
    a7d2:	9b00      	ldr	r3, [sp, #0]
    a7d4:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    a7d6:	9b01      	ldr	r3, [sp, #4]
    a7d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a7da:	b2da      	uxtb	r2, r3
    a7dc:	9b00      	ldr	r3, [sp, #0]
    a7de:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    a7e2:	9b00      	ldr	r3, [sp, #0]
    a7e4:	681b      	ldr	r3, [r3, #0]
    a7e6:	b29a      	uxth	r2, r3
    a7e8:	9b00      	ldr	r3, [sp, #0]
    a7ea:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    a7ec:	2300      	movs	r3, #0
    a7ee:	9309      	str	r3, [sp, #36]	; 0x24
    a7f0:	e01f      	b.n	a832 <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    a7f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7f4:	089b      	lsrs	r3, r3, #2
    a7f6:	009b      	lsls	r3, r3, #2
    a7f8:	9a05      	ldr	r2, [sp, #20]
    a7fa:	4413      	add	r3, r2
    a7fc:	681b      	ldr	r3, [r3, #0]
    a7fe:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    a800:	9b02      	ldr	r3, [sp, #8]
    a802:	0e1a      	lsrs	r2, r3, #24
    a804:	9b02      	ldr	r3, [sp, #8]
    a806:	0a1b      	lsrs	r3, r3, #8
    a808:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    a80c:	431a      	orrs	r2, r3
    a80e:	9b02      	ldr	r3, [sp, #8]
    a810:	021b      	lsls	r3, r3, #8
    a812:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    a816:	ea42 0103 	orr.w	r1, r2, r3
    a81a:	9b02      	ldr	r3, [sp, #8]
    a81c:	061a      	lsls	r2, r3, #24
    a81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a820:	089b      	lsrs	r3, r3, #2
    a822:	009b      	lsls	r3, r3, #2
    a824:	9804      	ldr	r0, [sp, #16]
    a826:	4403      	add	r3, r0
    a828:	430a      	orrs	r2, r1
    a82a:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    a82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a82e:	3304      	adds	r3, #4
    a830:	9309      	str	r3, [sp, #36]	; 0x24
    a832:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    a836:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a838:	429a      	cmp	r2, r3
    a83a:	d3da      	bcc.n	a7f2 <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    a83c:	bf00      	nop
    a83e:	bf00      	nop
    a840:	b00b      	add	sp, #44	; 0x2c
    a842:	f85d fb04 	ldr.w	pc, [sp], #4

0000a846 <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    a846:	b088      	sub	sp, #32
    a848:	9003      	str	r0, [sp, #12]
    a84a:	9301      	str	r3, [sp, #4]
    a84c:	460b      	mov	r3, r1
    a84e:	f88d 300b 	strb.w	r3, [sp, #11]
    a852:	4613      	mov	r3, r2
    a854:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    a858:	2300      	movs	r3, #0
    a85a:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    a85e:	2300      	movs	r3, #0
    a860:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    a862:	2300      	movs	r3, #0
    a864:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    a866:	9b01      	ldr	r3, [sp, #4]
    a868:	b2db      	uxtb	r3, r3
    a86a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a86e:	429a      	cmp	r2, r3
    a870:	d303      	bcc.n	a87a <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    a872:	2301      	movs	r3, #1
    a874:	f88d 301f 	strb.w	r3, [sp, #31]
    a878:	e01b      	b.n	a8b2 <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    a87a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a87e:	2b00      	cmp	r3, #0
    a880:	d014      	beq.n	a8ac <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    a882:	9b03      	ldr	r3, [sp, #12]
    a884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a886:	0e1b      	lsrs	r3, r3, #24
    a888:	f003 030f 	and.w	r3, r3, #15
    a88c:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    a88e:	9b06      	ldr	r3, [sp, #24]
    a890:	3301      	adds	r3, #1
    a892:	00db      	lsls	r3, r3, #3
    a894:	089b      	lsrs	r3, r3, #2
    a896:	3305      	adds	r3, #5
    a898:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    a89a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a89e:	9a05      	ldr	r2, [sp, #20]
    a8a0:	429a      	cmp	r2, r3
    a8a2:	d306      	bcc.n	a8b2 <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    a8a4:	2301      	movs	r3, #1
    a8a6:	f88d 301f 	strb.w	r3, [sp, #31]
    a8aa:	e002      	b.n	a8b2 <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    a8ac:	2300      	movs	r3, #0
    a8ae:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    a8b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    a8b6:	4618      	mov	r0, r3
    a8b8:	b008      	add	sp, #32
    a8ba:	4770      	bx	lr

0000a8bc <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    a8bc:	b500      	push	{lr}
    a8be:	b083      	sub	sp, #12
    a8c0:	9001      	str	r0, [sp, #4]
    a8c2:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    a8c4:	9b00      	ldr	r3, [sp, #0]
    a8c6:	f003 0320 	and.w	r3, r3, #32
    a8ca:	2b00      	cmp	r3, #0
    a8cc:	d004      	beq.n	a8d8 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    a8ce:	2101      	movs	r1, #1
    a8d0:	9801      	ldr	r0, [sp, #4]
    a8d2:	f7fe fcd8 	bl	9286 <FlexCAN_SetIsoCan>
    a8d6:	e003      	b.n	a8e0 <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    a8d8:	2100      	movs	r1, #0
    a8da:	9801      	ldr	r0, [sp, #4]
    a8dc:	f7fe fcd3 	bl	9286 <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    a8e0:	9b00      	ldr	r3, [sp, #0]
    a8e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a8e6:	2b00      	cmp	r3, #0
    a8e8:	d004      	beq.n	a8f4 <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    a8ea:	2101      	movs	r1, #1
    a8ec:	9801      	ldr	r0, [sp, #4]
    a8ee:	f7fe fce1 	bl	92b4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    a8f2:	e003      	b.n	a8fc <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    a8f4:	2100      	movs	r1, #0
    a8f6:	9801      	ldr	r0, [sp, #4]
    a8f8:	f7fe fcdc 	bl	92b4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    a8fc:	9b00      	ldr	r3, [sp, #0]
    a8fe:	f003 0308 	and.w	r3, r3, #8
    a902:	2b00      	cmp	r3, #0
    a904:	d004      	beq.n	a910 <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    a906:	2101      	movs	r1, #1
    a908:	9801      	ldr	r0, [sp, #4]
    a90a:	f7fe fcea 	bl	92e2 <FlexCAN_SetProtocolException>
    a90e:	e003      	b.n	a918 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    a910:	2100      	movs	r1, #0
    a912:	9801      	ldr	r0, [sp, #4]
    a914:	f7fe fce5 	bl	92e2 <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    a918:	9b00      	ldr	r3, [sp, #0]
    a91a:	f003 0302 	and.w	r3, r3, #2
    a91e:	2b00      	cmp	r3, #0
    a920:	d00a      	beq.n	a938 <FlexCAN_ConfigCtrlOptions+0x7c>
    a922:	9b01      	ldr	r3, [sp, #4]
    a924:	681b      	ldr	r3, [r3, #0]
    a926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a92a:	2b00      	cmp	r3, #0
    a92c:	d104      	bne.n	a938 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    a92e:	2101      	movs	r1, #1
    a930:	9801      	ldr	r0, [sp, #4]
    a932:	f7fe fd31 	bl	9398 <FlexCAN_CanBitSampling>
    a936:	e003      	b.n	a940 <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    a938:	2100      	movs	r1, #0
    a93a:	9801      	ldr	r0, [sp, #4]
    a93c:	f7fe fd2c 	bl	9398 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    a940:	9b00      	ldr	r3, [sp, #0]
    a942:	f003 0304 	and.w	r3, r3, #4
    a946:	2b00      	cmp	r3, #0
    a948:	d004      	beq.n	a954 <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    a94a:	2101      	movs	r1, #1
    a94c:	9801      	ldr	r0, [sp, #4]
    a94e:	f7fe fcf6 	bl	933e <FlexCAN_SetBusOffAutorecovery>
    a952:	e003      	b.n	a95c <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    a954:	2100      	movs	r1, #0
    a956:	9801      	ldr	r0, [sp, #4]
    a958:	f7fe fcf1 	bl	933e <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    a95c:	9b00      	ldr	r3, [sp, #0]
    a95e:	f003 0301 	and.w	r3, r3, #1
    a962:	2b00      	cmp	r3, #0
    a964:	d004      	beq.n	a970 <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    a966:	2101      	movs	r1, #1
    a968:	9801      	ldr	r0, [sp, #4]
    a96a:	f7fe fcd1 	bl	9310 <FlexCAN_SetRemoteReqStore>
    a96e:	e003      	b.n	a978 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    a970:	2100      	movs	r1, #0
    a972:	9801      	ldr	r0, [sp, #4]
    a974:	f7fe fccc 	bl	9310 <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    a978:	9b00      	ldr	r3, [sp, #0]
    a97a:	f003 0310 	and.w	r3, r3, #16
    a97e:	2b00      	cmp	r3, #0
    a980:	d004      	beq.n	a98c <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    a982:	2101      	movs	r1, #1
    a984:	9801      	ldr	r0, [sp, #4]
    a986:	f7fe fcf0 	bl	936a <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    a98a:	e003      	b.n	a994 <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    a98c:	2100      	movs	r1, #0
    a98e:	9801      	ldr	r0, [sp, #4]
    a990:	f7fe fceb 	bl	936a <FlexCAN_SetEdgeFilter>
}
    a994:	bf00      	nop
    a996:	b003      	add	sp, #12
    a998:	f85d fb04 	ldr.w	pc, [sp], #4

0000a99c <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    a99c:	b084      	sub	sp, #16
    a99e:	4603      	mov	r3, r0
    a9a0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    a9a4:	2300      	movs	r3, #0
    a9a6:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    a9aa:	2300      	movs	r3, #0
    a9ac:	f88d 300f 	strb.w	r3, [sp, #15]
    a9b0:	e00d      	b.n	a9ce <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    a9b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    a9b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a9ba:	4909      	ldr	r1, [pc, #36]	; (a9e0 <FlexCAN_ResetImaskBuff+0x44>)
    a9bc:	4413      	add	r3, r2
    a9be:	2200      	movs	r2, #0
    a9c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    a9c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a9c8:	3301      	adds	r3, #1
    a9ca:	f88d 300f 	strb.w	r3, [sp, #15]
    a9ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a9d2:	2b00      	cmp	r3, #0
    a9d4:	d0ed      	beq.n	a9b2 <FlexCAN_ResetImaskBuff+0x16>
    }
}
    a9d6:	bf00      	nop
    a9d8:	bf00      	nop
    a9da:	b004      	add	sp, #16
    a9dc:	4770      	bx	lr
    a9de:	bf00      	nop
    a9e0:	1fff8f64 	.word	0x1fff8f64

0000a9e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    a9e4:	b500      	push	{lr}
    a9e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    a9e8:	f7f6 f8ec 	bl	bc4 <Sys_GetCoreID>
    a9ec:	4603      	mov	r3, r0
    a9ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
    a9f0:	4a10      	ldr	r2, [pc, #64]	; (aa34 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    a9f2:	9b01      	ldr	r3, [sp, #4]
    a9f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9f8:	2b00      	cmp	r3, #0
    a9fa:	d10d      	bne.n	aa18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    a9fc:	f7f6 f80a 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    aa00:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aa02:	9b00      	ldr	r3, [sp, #0]
    aa04:	f003 0301 	and.w	r3, r3, #1
    aa08:	2b00      	cmp	r3, #0
    aa0a:	d100      	bne.n	aa0e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aa0c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    aa0e:	490a      	ldr	r1, [pc, #40]	; (aa38 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
    aa10:	9b01      	ldr	r3, [sp, #4]
    aa12:	9a00      	ldr	r2, [sp, #0]
    aa14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
    aa18:	4a06      	ldr	r2, [pc, #24]	; (aa34 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    aa1a:	9b01      	ldr	r3, [sp, #4]
    aa1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa20:	1c5a      	adds	r2, r3, #1
    aa22:	4904      	ldr	r1, [pc, #16]	; (aa34 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    aa24:	9b01      	ldr	r3, [sp, #4]
    aa26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aa2a:	bf00      	nop
    aa2c:	b003      	add	sp, #12
    aa2e:	f85d fb04 	ldr.w	pc, [sp], #4
    aa32:	bf00      	nop
    aa34:	1fff8f74 	.word	0x1fff8f74
    aa38:	1fff8f70 	.word	0x1fff8f70

0000aa3c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    aa3c:	b500      	push	{lr}
    aa3e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa40:	f7f6 f8c0 	bl	bc4 <Sys_GetCoreID>
    aa44:	4603      	mov	r3, r0
    aa46:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
    aa48:	4a0d      	ldr	r2, [pc, #52]	; (aa80 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    aa4a:	9b01      	ldr	r3, [sp, #4]
    aa4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa50:	1e5a      	subs	r2, r3, #1
    aa52:	490b      	ldr	r1, [pc, #44]	; (aa80 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    aa54:	9b01      	ldr	r3, [sp, #4]
    aa56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    aa5a:	4a0a      	ldr	r2, [pc, #40]	; (aa84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
    aa5c:	9b01      	ldr	r3, [sp, #4]
    aa5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa62:	f003 0301 	and.w	r3, r3, #1
    aa66:	2b00      	cmp	r3, #0
    aa68:	d106      	bne.n	aa78 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    aa6a:	4a05      	ldr	r2, [pc, #20]	; (aa80 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    aa6c:	9b01      	ldr	r3, [sp, #4]
    aa6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa72:	2b00      	cmp	r3, #0
    aa74:	d100      	bne.n	aa78 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aa76:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aa78:	bf00      	nop
    aa7a:	b003      	add	sp, #12
    aa7c:	f85d fb04 	ldr.w	pc, [sp], #4
    aa80:	1fff8f74 	.word	0x1fff8f74
    aa84:	1fff8f70 	.word	0x1fff8f70

0000aa88 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    aa88:	b500      	push	{lr}
    aa8a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aa8c:	f7f6 f89a 	bl	bc4 <Sys_GetCoreID>
    aa90:	4603      	mov	r3, r0
    aa92:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
    aa94:	4a10      	ldr	r2, [pc, #64]	; (aad8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    aa96:	9b01      	ldr	r3, [sp, #4]
    aa98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa9c:	2b00      	cmp	r3, #0
    aa9e:	d10d      	bne.n	aabc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    aaa0:	f7f5 ffb8 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    aaa4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    aaa6:	9b00      	ldr	r3, [sp, #0]
    aaa8:	f003 0301 	and.w	r3, r3, #1
    aaac:	2b00      	cmp	r3, #0
    aaae:	d100      	bne.n	aab2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    aab0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    aab2:	490a      	ldr	r1, [pc, #40]	; (aadc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
    aab4:	9b01      	ldr	r3, [sp, #4]
    aab6:	9a00      	ldr	r2, [sp, #0]
    aab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
    aabc:	4a06      	ldr	r2, [pc, #24]	; (aad8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    aabe:	9b01      	ldr	r3, [sp, #4]
    aac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aac4:	1c5a      	adds	r2, r3, #1
    aac6:	4904      	ldr	r1, [pc, #16]	; (aad8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    aac8:	9b01      	ldr	r3, [sp, #4]
    aaca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aace:	bf00      	nop
    aad0:	b003      	add	sp, #12
    aad2:	f85d fb04 	ldr.w	pc, [sp], #4
    aad6:	bf00      	nop
    aad8:	1fff8f7c 	.word	0x1fff8f7c
    aadc:	1fff8f78 	.word	0x1fff8f78

0000aae0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    aae0:	b500      	push	{lr}
    aae2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aae4:	f7f6 f86e 	bl	bc4 <Sys_GetCoreID>
    aae8:	4603      	mov	r3, r0
    aaea:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
    aaec:	4a0d      	ldr	r2, [pc, #52]	; (ab24 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    aaee:	9b01      	ldr	r3, [sp, #4]
    aaf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaf4:	1e5a      	subs	r2, r3, #1
    aaf6:	490b      	ldr	r1, [pc, #44]	; (ab24 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    aaf8:	9b01      	ldr	r3, [sp, #4]
    aafa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    aafe:	4a0a      	ldr	r2, [pc, #40]	; (ab28 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
    ab00:	9b01      	ldr	r3, [sp, #4]
    ab02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab06:	f003 0301 	and.w	r3, r3, #1
    ab0a:	2b00      	cmp	r3, #0
    ab0c:	d106      	bne.n	ab1c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    ab0e:	4a05      	ldr	r2, [pc, #20]	; (ab24 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    ab10:	9b01      	ldr	r3, [sp, #4]
    ab12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab16:	2b00      	cmp	r3, #0
    ab18:	d100      	bne.n	ab1c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ab1a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ab1c:	bf00      	nop
    ab1e:	b003      	add	sp, #12
    ab20:	f85d fb04 	ldr.w	pc, [sp], #4
    ab24:	1fff8f7c 	.word	0x1fff8f7c
    ab28:	1fff8f78 	.word	0x1fff8f78

0000ab2c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    ab2c:	b500      	push	{lr}
    ab2e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab30:	f7f6 f848 	bl	bc4 <Sys_GetCoreID>
    ab34:	4603      	mov	r3, r0
    ab36:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
    ab38:	4a10      	ldr	r2, [pc, #64]	; (ab7c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    ab3a:	9b01      	ldr	r3, [sp, #4]
    ab3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab40:	2b00      	cmp	r3, #0
    ab42:	d10d      	bne.n	ab60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ab44:	f7f5 ff66 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    ab48:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ab4a:	9b00      	ldr	r3, [sp, #0]
    ab4c:	f003 0301 	and.w	r3, r3, #1
    ab50:	2b00      	cmp	r3, #0
    ab52:	d100      	bne.n	ab56 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ab54:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    ab56:	490a      	ldr	r1, [pc, #40]	; (ab80 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
    ab58:	9b01      	ldr	r3, [sp, #4]
    ab5a:	9a00      	ldr	r2, [sp, #0]
    ab5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
    ab60:	4a06      	ldr	r2, [pc, #24]	; (ab7c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    ab62:	9b01      	ldr	r3, [sp, #4]
    ab64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab68:	1c5a      	adds	r2, r3, #1
    ab6a:	4904      	ldr	r1, [pc, #16]	; (ab7c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    ab6c:	9b01      	ldr	r3, [sp, #4]
    ab6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ab72:	bf00      	nop
    ab74:	b003      	add	sp, #12
    ab76:	f85d fb04 	ldr.w	pc, [sp], #4
    ab7a:	bf00      	nop
    ab7c:	1fff8f84 	.word	0x1fff8f84
    ab80:	1fff8f80 	.word	0x1fff8f80

0000ab84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    ab84:	b500      	push	{lr}
    ab86:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ab88:	f7f6 f81c 	bl	bc4 <Sys_GetCoreID>
    ab8c:	4603      	mov	r3, r0
    ab8e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
    ab90:	4a0d      	ldr	r2, [pc, #52]	; (abc8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    ab92:	9b01      	ldr	r3, [sp, #4]
    ab94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab98:	1e5a      	subs	r2, r3, #1
    ab9a:	490b      	ldr	r1, [pc, #44]	; (abc8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    ab9c:	9b01      	ldr	r3, [sp, #4]
    ab9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    aba2:	4a0a      	ldr	r2, [pc, #40]	; (abcc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
    aba4:	9b01      	ldr	r3, [sp, #4]
    aba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abaa:	f003 0301 	and.w	r3, r3, #1
    abae:	2b00      	cmp	r3, #0
    abb0:	d106      	bne.n	abc0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    abb2:	4a05      	ldr	r2, [pc, #20]	; (abc8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    abb4:	9b01      	ldr	r3, [sp, #4]
    abb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abba:	2b00      	cmp	r3, #0
    abbc:	d100      	bne.n	abc0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    abbe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    abc0:	bf00      	nop
    abc2:	b003      	add	sp, #12
    abc4:	f85d fb04 	ldr.w	pc, [sp], #4
    abc8:	1fff8f84 	.word	0x1fff8f84
    abcc:	1fff8f80 	.word	0x1fff8f80

0000abd0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    abd0:	b500      	push	{lr}
    abd2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    abd4:	f7f5 fff6 	bl	bc4 <Sys_GetCoreID>
    abd8:	4603      	mov	r3, r0
    abda:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
    abdc:	4a10      	ldr	r2, [pc, #64]	; (ac20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    abde:	9b01      	ldr	r3, [sp, #4]
    abe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abe4:	2b00      	cmp	r3, #0
    abe6:	d10d      	bne.n	ac04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    abe8:	f7f5 ff14 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    abec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    abee:	9b00      	ldr	r3, [sp, #0]
    abf0:	f003 0301 	and.w	r3, r3, #1
    abf4:	2b00      	cmp	r3, #0
    abf6:	d100      	bne.n	abfa <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    abf8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    abfa:	490a      	ldr	r1, [pc, #40]	; (ac24 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
    abfc:	9b01      	ldr	r3, [sp, #4]
    abfe:	9a00      	ldr	r2, [sp, #0]
    ac00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
    ac04:	4a06      	ldr	r2, [pc, #24]	; (ac20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    ac06:	9b01      	ldr	r3, [sp, #4]
    ac08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac0c:	1c5a      	adds	r2, r3, #1
    ac0e:	4904      	ldr	r1, [pc, #16]	; (ac20 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    ac10:	9b01      	ldr	r3, [sp, #4]
    ac12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ac16:	bf00      	nop
    ac18:	b003      	add	sp, #12
    ac1a:	f85d fb04 	ldr.w	pc, [sp], #4
    ac1e:	bf00      	nop
    ac20:	1fff8f8c 	.word	0x1fff8f8c
    ac24:	1fff8f88 	.word	0x1fff8f88

0000ac28 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    ac28:	b500      	push	{lr}
    ac2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac2c:	f7f5 ffca 	bl	bc4 <Sys_GetCoreID>
    ac30:	4603      	mov	r3, r0
    ac32:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
    ac34:	4a0d      	ldr	r2, [pc, #52]	; (ac6c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    ac36:	9b01      	ldr	r3, [sp, #4]
    ac38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac3c:	1e5a      	subs	r2, r3, #1
    ac3e:	490b      	ldr	r1, [pc, #44]	; (ac6c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    ac40:	9b01      	ldr	r3, [sp, #4]
    ac42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    ac46:	4a0a      	ldr	r2, [pc, #40]	; (ac70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
    ac48:	9b01      	ldr	r3, [sp, #4]
    ac4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac4e:	f003 0301 	and.w	r3, r3, #1
    ac52:	2b00      	cmp	r3, #0
    ac54:	d106      	bne.n	ac64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    ac56:	4a05      	ldr	r2, [pc, #20]	; (ac6c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    ac58:	9b01      	ldr	r3, [sp, #4]
    ac5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac5e:	2b00      	cmp	r3, #0
    ac60:	d100      	bne.n	ac64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ac62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ac64:	bf00      	nop
    ac66:	b003      	add	sp, #12
    ac68:	f85d fb04 	ldr.w	pc, [sp], #4
    ac6c:	1fff8f8c 	.word	0x1fff8f8c
    ac70:	1fff8f88 	.word	0x1fff8f88

0000ac74 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    ac74:	b500      	push	{lr}
    ac76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ac78:	f7f5 ffa4 	bl	bc4 <Sys_GetCoreID>
    ac7c:	4603      	mov	r3, r0
    ac7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
    ac80:	4a10      	ldr	r2, [pc, #64]	; (acc4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    ac82:	9b01      	ldr	r3, [sp, #4]
    ac84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac88:	2b00      	cmp	r3, #0
    ac8a:	d10d      	bne.n	aca8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ac8c:	f7f5 fec2 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    ac90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ac92:	9b00      	ldr	r3, [sp, #0]
    ac94:	f003 0301 	and.w	r3, r3, #1
    ac98:	2b00      	cmp	r3, #0
    ac9a:	d100      	bne.n	ac9e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ac9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    ac9e:	490a      	ldr	r1, [pc, #40]	; (acc8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
    aca0:	9b01      	ldr	r3, [sp, #4]
    aca2:	9a00      	ldr	r2, [sp, #0]
    aca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
    aca8:	4a06      	ldr	r2, [pc, #24]	; (acc4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    acaa:	9b01      	ldr	r3, [sp, #4]
    acac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acb0:	1c5a      	adds	r2, r3, #1
    acb2:	4904      	ldr	r1, [pc, #16]	; (acc4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    acb4:	9b01      	ldr	r3, [sp, #4]
    acb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    acba:	bf00      	nop
    acbc:	b003      	add	sp, #12
    acbe:	f85d fb04 	ldr.w	pc, [sp], #4
    acc2:	bf00      	nop
    acc4:	1fff8f94 	.word	0x1fff8f94
    acc8:	1fff8f90 	.word	0x1fff8f90

0000accc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    accc:	b500      	push	{lr}
    acce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    acd0:	f7f5 ff78 	bl	bc4 <Sys_GetCoreID>
    acd4:	4603      	mov	r3, r0
    acd6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
    acd8:	4a0d      	ldr	r2, [pc, #52]	; (ad10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    acda:	9b01      	ldr	r3, [sp, #4]
    acdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ace0:	1e5a      	subs	r2, r3, #1
    ace2:	490b      	ldr	r1, [pc, #44]	; (ad10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    ace4:	9b01      	ldr	r3, [sp, #4]
    ace6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    acea:	4a0a      	ldr	r2, [pc, #40]	; (ad14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
    acec:	9b01      	ldr	r3, [sp, #4]
    acee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acf2:	f003 0301 	and.w	r3, r3, #1
    acf6:	2b00      	cmp	r3, #0
    acf8:	d106      	bne.n	ad08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    acfa:	4a05      	ldr	r2, [pc, #20]	; (ad10 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    acfc:	9b01      	ldr	r3, [sp, #4]
    acfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad02:	2b00      	cmp	r3, #0
    ad04:	d100      	bne.n	ad08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ad06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ad08:	bf00      	nop
    ad0a:	b003      	add	sp, #12
    ad0c:	f85d fb04 	ldr.w	pc, [sp], #4
    ad10:	1fff8f94 	.word	0x1fff8f94
    ad14:	1fff8f90 	.word	0x1fff8f90

0000ad18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    ad18:	b500      	push	{lr}
    ad1a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad1c:	f7f5 ff52 	bl	bc4 <Sys_GetCoreID>
    ad20:	4603      	mov	r3, r0
    ad22:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
    ad24:	4a10      	ldr	r2, [pc, #64]	; (ad68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    ad26:	9b01      	ldr	r3, [sp, #4]
    ad28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad2c:	2b00      	cmp	r3, #0
    ad2e:	d10d      	bne.n	ad4c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ad30:	f7f5 fe70 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    ad34:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ad36:	9b00      	ldr	r3, [sp, #0]
    ad38:	f003 0301 	and.w	r3, r3, #1
    ad3c:	2b00      	cmp	r3, #0
    ad3e:	d100      	bne.n	ad42 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ad40:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    ad42:	490a      	ldr	r1, [pc, #40]	; (ad6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
    ad44:	9b01      	ldr	r3, [sp, #4]
    ad46:	9a00      	ldr	r2, [sp, #0]
    ad48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
    ad4c:	4a06      	ldr	r2, [pc, #24]	; (ad68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    ad4e:	9b01      	ldr	r3, [sp, #4]
    ad50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad54:	1c5a      	adds	r2, r3, #1
    ad56:	4904      	ldr	r1, [pc, #16]	; (ad68 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    ad58:	9b01      	ldr	r3, [sp, #4]
    ad5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ad5e:	bf00      	nop
    ad60:	b003      	add	sp, #12
    ad62:	f85d fb04 	ldr.w	pc, [sp], #4
    ad66:	bf00      	nop
    ad68:	1fff8f9c 	.word	0x1fff8f9c
    ad6c:	1fff8f98 	.word	0x1fff8f98

0000ad70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    ad70:	b500      	push	{lr}
    ad72:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ad74:	f7f5 ff26 	bl	bc4 <Sys_GetCoreID>
    ad78:	4603      	mov	r3, r0
    ad7a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
    ad7c:	4a0d      	ldr	r2, [pc, #52]	; (adb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    ad7e:	9b01      	ldr	r3, [sp, #4]
    ad80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad84:	1e5a      	subs	r2, r3, #1
    ad86:	490b      	ldr	r1, [pc, #44]	; (adb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    ad88:	9b01      	ldr	r3, [sp, #4]
    ad8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    ad8e:	4a0a      	ldr	r2, [pc, #40]	; (adb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
    ad90:	9b01      	ldr	r3, [sp, #4]
    ad92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad96:	f003 0301 	and.w	r3, r3, #1
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	d106      	bne.n	adac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    ad9e:	4a05      	ldr	r2, [pc, #20]	; (adb4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    ada0:	9b01      	ldr	r3, [sp, #4]
    ada2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ada6:	2b00      	cmp	r3, #0
    ada8:	d100      	bne.n	adac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    adaa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    adac:	bf00      	nop
    adae:	b003      	add	sp, #12
    adb0:	f85d fb04 	ldr.w	pc, [sp], #4
    adb4:	1fff8f9c 	.word	0x1fff8f9c
    adb8:	1fff8f98 	.word	0x1fff8f98

0000adbc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    adbc:	b500      	push	{lr}
    adbe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    adc0:	f7f5 ff00 	bl	bc4 <Sys_GetCoreID>
    adc4:	4603      	mov	r3, r0
    adc6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
    adc8:	4a10      	ldr	r2, [pc, #64]	; (ae0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    adca:	9b01      	ldr	r3, [sp, #4]
    adcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    add0:	2b00      	cmp	r3, #0
    add2:	d10d      	bne.n	adf0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    add4:	f7f5 fe1e 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    add8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    adda:	9b00      	ldr	r3, [sp, #0]
    addc:	f003 0301 	and.w	r3, r3, #1
    ade0:	2b00      	cmp	r3, #0
    ade2:	d100      	bne.n	ade6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ade4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    ade6:	490a      	ldr	r1, [pc, #40]	; (ae10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
    ade8:	9b01      	ldr	r3, [sp, #4]
    adea:	9a00      	ldr	r2, [sp, #0]
    adec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
    adf0:	4a06      	ldr	r2, [pc, #24]	; (ae0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    adf2:	9b01      	ldr	r3, [sp, #4]
    adf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adf8:	1c5a      	adds	r2, r3, #1
    adfa:	4904      	ldr	r1, [pc, #16]	; (ae0c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    adfc:	9b01      	ldr	r3, [sp, #4]
    adfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ae02:	bf00      	nop
    ae04:	b003      	add	sp, #12
    ae06:	f85d fb04 	ldr.w	pc, [sp], #4
    ae0a:	bf00      	nop
    ae0c:	1fff8fa4 	.word	0x1fff8fa4
    ae10:	1fff8fa0 	.word	0x1fff8fa0

0000ae14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    ae14:	b500      	push	{lr}
    ae16:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae18:	f7f5 fed4 	bl	bc4 <Sys_GetCoreID>
    ae1c:	4603      	mov	r3, r0
    ae1e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
    ae20:	4a0d      	ldr	r2, [pc, #52]	; (ae58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    ae22:	9b01      	ldr	r3, [sp, #4]
    ae24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae28:	1e5a      	subs	r2, r3, #1
    ae2a:	490b      	ldr	r1, [pc, #44]	; (ae58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    ae2c:	9b01      	ldr	r3, [sp, #4]
    ae2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    ae32:	4a0a      	ldr	r2, [pc, #40]	; (ae5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
    ae34:	9b01      	ldr	r3, [sp, #4]
    ae36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae3a:	f003 0301 	and.w	r3, r3, #1
    ae3e:	2b00      	cmp	r3, #0
    ae40:	d106      	bne.n	ae50 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    ae42:	4a05      	ldr	r2, [pc, #20]	; (ae58 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    ae44:	9b01      	ldr	r3, [sp, #4]
    ae46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae4a:	2b00      	cmp	r3, #0
    ae4c:	d100      	bne.n	ae50 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ae4e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ae50:	bf00      	nop
    ae52:	b003      	add	sp, #12
    ae54:	f85d fb04 	ldr.w	pc, [sp], #4
    ae58:	1fff8fa4 	.word	0x1fff8fa4
    ae5c:	1fff8fa0 	.word	0x1fff8fa0

0000ae60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    ae60:	b500      	push	{lr}
    ae62:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ae64:	f7f5 feae 	bl	bc4 <Sys_GetCoreID>
    ae68:	4603      	mov	r3, r0
    ae6a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
    ae6c:	4a10      	ldr	r2, [pc, #64]	; (aeb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    ae6e:	9b01      	ldr	r3, [sp, #4]
    ae70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae74:	2b00      	cmp	r3, #0
    ae76:	d10d      	bne.n	ae94 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ae78:	f7f5 fdcc 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    ae7c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ae7e:	9b00      	ldr	r3, [sp, #0]
    ae80:	f003 0301 	and.w	r3, r3, #1
    ae84:	2b00      	cmp	r3, #0
    ae86:	d100      	bne.n	ae8a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ae88:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    ae8a:	490a      	ldr	r1, [pc, #40]	; (aeb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
    ae8c:	9b01      	ldr	r3, [sp, #4]
    ae8e:	9a00      	ldr	r2, [sp, #0]
    ae90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
    ae94:	4a06      	ldr	r2, [pc, #24]	; (aeb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    ae96:	9b01      	ldr	r3, [sp, #4]
    ae98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae9c:	1c5a      	adds	r2, r3, #1
    ae9e:	4904      	ldr	r1, [pc, #16]	; (aeb0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    aea0:	9b01      	ldr	r3, [sp, #4]
    aea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    aea6:	bf00      	nop
    aea8:	b003      	add	sp, #12
    aeaa:	f85d fb04 	ldr.w	pc, [sp], #4
    aeae:	bf00      	nop
    aeb0:	1fff8fac 	.word	0x1fff8fac
    aeb4:	1fff8fa8 	.word	0x1fff8fa8

0000aeb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    aeb8:	b500      	push	{lr}
    aeba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    aebc:	f7f5 fe82 	bl	bc4 <Sys_GetCoreID>
    aec0:	4603      	mov	r3, r0
    aec2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
    aec4:	4a0d      	ldr	r2, [pc, #52]	; (aefc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    aec6:	9b01      	ldr	r3, [sp, #4]
    aec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aecc:	1e5a      	subs	r2, r3, #1
    aece:	490b      	ldr	r1, [pc, #44]	; (aefc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    aed0:	9b01      	ldr	r3, [sp, #4]
    aed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    aed6:	4a0a      	ldr	r2, [pc, #40]	; (af00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
    aed8:	9b01      	ldr	r3, [sp, #4]
    aeda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aede:	f003 0301 	and.w	r3, r3, #1
    aee2:	2b00      	cmp	r3, #0
    aee4:	d106      	bne.n	aef4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    aee6:	4a05      	ldr	r2, [pc, #20]	; (aefc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    aee8:	9b01      	ldr	r3, [sp, #4]
    aeea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aeee:	2b00      	cmp	r3, #0
    aef0:	d100      	bne.n	aef4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    aef2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    aef4:	bf00      	nop
    aef6:	b003      	add	sp, #12
    aef8:	f85d fb04 	ldr.w	pc, [sp], #4
    aefc:	1fff8fac 	.word	0x1fff8fac
    af00:	1fff8fa8 	.word	0x1fff8fa8

0000af04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    af04:	b500      	push	{lr}
    af06:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af08:	f7f5 fe5c 	bl	bc4 <Sys_GetCoreID>
    af0c:	4603      	mov	r3, r0
    af0e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
    af10:	4a10      	ldr	r2, [pc, #64]	; (af54 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    af12:	9b01      	ldr	r3, [sp, #4]
    af14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af18:	2b00      	cmp	r3, #0
    af1a:	d10d      	bne.n	af38 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    af1c:	f7f5 fd7a 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    af20:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    af22:	9b00      	ldr	r3, [sp, #0]
    af24:	f003 0301 	and.w	r3, r3, #1
    af28:	2b00      	cmp	r3, #0
    af2a:	d100      	bne.n	af2e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    af2c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    af2e:	490a      	ldr	r1, [pc, #40]	; (af58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
    af30:	9b01      	ldr	r3, [sp, #4]
    af32:	9a00      	ldr	r2, [sp, #0]
    af34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
    af38:	4a06      	ldr	r2, [pc, #24]	; (af54 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    af3a:	9b01      	ldr	r3, [sp, #4]
    af3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af40:	1c5a      	adds	r2, r3, #1
    af42:	4904      	ldr	r1, [pc, #16]	; (af54 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    af44:	9b01      	ldr	r3, [sp, #4]
    af46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    af4a:	bf00      	nop
    af4c:	b003      	add	sp, #12
    af4e:	f85d fb04 	ldr.w	pc, [sp], #4
    af52:	bf00      	nop
    af54:	1fff8fb4 	.word	0x1fff8fb4
    af58:	1fff8fb0 	.word	0x1fff8fb0

0000af5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    af5c:	b500      	push	{lr}
    af5e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    af60:	f7f5 fe30 	bl	bc4 <Sys_GetCoreID>
    af64:	4603      	mov	r3, r0
    af66:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
    af68:	4a0d      	ldr	r2, [pc, #52]	; (afa0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    af6a:	9b01      	ldr	r3, [sp, #4]
    af6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af70:	1e5a      	subs	r2, r3, #1
    af72:	490b      	ldr	r1, [pc, #44]	; (afa0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    af74:	9b01      	ldr	r3, [sp, #4]
    af76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    af7a:	4a0a      	ldr	r2, [pc, #40]	; (afa4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
    af7c:	9b01      	ldr	r3, [sp, #4]
    af7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af82:	f003 0301 	and.w	r3, r3, #1
    af86:	2b00      	cmp	r3, #0
    af88:	d106      	bne.n	af98 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    af8a:	4a05      	ldr	r2, [pc, #20]	; (afa0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    af8c:	9b01      	ldr	r3, [sp, #4]
    af8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af92:	2b00      	cmp	r3, #0
    af94:	d100      	bne.n	af98 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    af96:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    af98:	bf00      	nop
    af9a:	b003      	add	sp, #12
    af9c:	f85d fb04 	ldr.w	pc, [sp], #4
    afa0:	1fff8fb4 	.word	0x1fff8fb4
    afa4:	1fff8fb0 	.word	0x1fff8fb0

0000afa8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    afa8:	b500      	push	{lr}
    afaa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    afac:	f7f5 fe0a 	bl	bc4 <Sys_GetCoreID>
    afb0:	4603      	mov	r3, r0
    afb2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
    afb4:	4a10      	ldr	r2, [pc, #64]	; (aff8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    afb6:	9b01      	ldr	r3, [sp, #4]
    afb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afbc:	2b00      	cmp	r3, #0
    afbe:	d10d      	bne.n	afdc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    afc0:	f7f5 fd28 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    afc4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    afc6:	9b00      	ldr	r3, [sp, #0]
    afc8:	f003 0301 	and.w	r3, r3, #1
    afcc:	2b00      	cmp	r3, #0
    afce:	d100      	bne.n	afd2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    afd0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    afd2:	490a      	ldr	r1, [pc, #40]	; (affc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
    afd4:	9b01      	ldr	r3, [sp, #4]
    afd6:	9a00      	ldr	r2, [sp, #0]
    afd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
    afdc:	4a06      	ldr	r2, [pc, #24]	; (aff8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    afde:	9b01      	ldr	r3, [sp, #4]
    afe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    afe4:	1c5a      	adds	r2, r3, #1
    afe6:	4904      	ldr	r1, [pc, #16]	; (aff8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    afe8:	9b01      	ldr	r3, [sp, #4]
    afea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    afee:	bf00      	nop
    aff0:	b003      	add	sp, #12
    aff2:	f85d fb04 	ldr.w	pc, [sp], #4
    aff6:	bf00      	nop
    aff8:	1fff8fbc 	.word	0x1fff8fbc
    affc:	1fff8fb8 	.word	0x1fff8fb8

0000b000 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    b000:	b500      	push	{lr}
    b002:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b004:	f7f5 fdde 	bl	bc4 <Sys_GetCoreID>
    b008:	4603      	mov	r3, r0
    b00a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
    b00c:	4a0d      	ldr	r2, [pc, #52]	; (b044 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    b00e:	9b01      	ldr	r3, [sp, #4]
    b010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b014:	1e5a      	subs	r2, r3, #1
    b016:	490b      	ldr	r1, [pc, #44]	; (b044 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    b018:	9b01      	ldr	r3, [sp, #4]
    b01a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    b01e:	4a0a      	ldr	r2, [pc, #40]	; (b048 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
    b020:	9b01      	ldr	r3, [sp, #4]
    b022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b026:	f003 0301 	and.w	r3, r3, #1
    b02a:	2b00      	cmp	r3, #0
    b02c:	d106      	bne.n	b03c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    b02e:	4a05      	ldr	r2, [pc, #20]	; (b044 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    b030:	9b01      	ldr	r3, [sp, #4]
    b032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b036:	2b00      	cmp	r3, #0
    b038:	d100      	bne.n	b03c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b03a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b03c:	bf00      	nop
    b03e:	b003      	add	sp, #12
    b040:	f85d fb04 	ldr.w	pc, [sp], #4
    b044:	1fff8fbc 	.word	0x1fff8fbc
    b048:	1fff8fb8 	.word	0x1fff8fb8

0000b04c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    b04c:	b500      	push	{lr}
    b04e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b050:	f7f5 fdb8 	bl	bc4 <Sys_GetCoreID>
    b054:	4603      	mov	r3, r0
    b056:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
    b058:	4a10      	ldr	r2, [pc, #64]	; (b09c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    b05a:	9b01      	ldr	r3, [sp, #4]
    b05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b060:	2b00      	cmp	r3, #0
    b062:	d10d      	bne.n	b080 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b064:	f7f5 fcd6 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    b068:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b06a:	9b00      	ldr	r3, [sp, #0]
    b06c:	f003 0301 	and.w	r3, r3, #1
    b070:	2b00      	cmp	r3, #0
    b072:	d100      	bne.n	b076 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b074:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    b076:	490a      	ldr	r1, [pc, #40]	; (b0a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
    b078:	9b01      	ldr	r3, [sp, #4]
    b07a:	9a00      	ldr	r2, [sp, #0]
    b07c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
    b080:	4a06      	ldr	r2, [pc, #24]	; (b09c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    b082:	9b01      	ldr	r3, [sp, #4]
    b084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b088:	1c5a      	adds	r2, r3, #1
    b08a:	4904      	ldr	r1, [pc, #16]	; (b09c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    b08c:	9b01      	ldr	r3, [sp, #4]
    b08e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b092:	bf00      	nop
    b094:	b003      	add	sp, #12
    b096:	f85d fb04 	ldr.w	pc, [sp], #4
    b09a:	bf00      	nop
    b09c:	1fff8fc4 	.word	0x1fff8fc4
    b0a0:	1fff8fc0 	.word	0x1fff8fc0

0000b0a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    b0a4:	b500      	push	{lr}
    b0a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0a8:	f7f5 fd8c 	bl	bc4 <Sys_GetCoreID>
    b0ac:	4603      	mov	r3, r0
    b0ae:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
    b0b0:	4a0d      	ldr	r2, [pc, #52]	; (b0e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    b0b2:	9b01      	ldr	r3, [sp, #4]
    b0b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0b8:	1e5a      	subs	r2, r3, #1
    b0ba:	490b      	ldr	r1, [pc, #44]	; (b0e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    b0bc:	9b01      	ldr	r3, [sp, #4]
    b0be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    b0c2:	4a0a      	ldr	r2, [pc, #40]	; (b0ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
    b0c4:	9b01      	ldr	r3, [sp, #4]
    b0c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0ca:	f003 0301 	and.w	r3, r3, #1
    b0ce:	2b00      	cmp	r3, #0
    b0d0:	d106      	bne.n	b0e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    b0d2:	4a05      	ldr	r2, [pc, #20]	; (b0e8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    b0d4:	9b01      	ldr	r3, [sp, #4]
    b0d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0da:	2b00      	cmp	r3, #0
    b0dc:	d100      	bne.n	b0e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b0de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b0e0:	bf00      	nop
    b0e2:	b003      	add	sp, #12
    b0e4:	f85d fb04 	ldr.w	pc, [sp], #4
    b0e8:	1fff8fc4 	.word	0x1fff8fc4
    b0ec:	1fff8fc0 	.word	0x1fff8fc0

0000b0f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    b0f0:	b500      	push	{lr}
    b0f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b0f4:	f7f5 fd66 	bl	bc4 <Sys_GetCoreID>
    b0f8:	4603      	mov	r3, r0
    b0fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
    b0fc:	4a10      	ldr	r2, [pc, #64]	; (b140 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    b0fe:	9b01      	ldr	r3, [sp, #4]
    b100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b104:	2b00      	cmp	r3, #0
    b106:	d10d      	bne.n	b124 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b108:	f7f5 fc84 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    b10c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b10e:	9b00      	ldr	r3, [sp, #0]
    b110:	f003 0301 	and.w	r3, r3, #1
    b114:	2b00      	cmp	r3, #0
    b116:	d100      	bne.n	b11a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b118:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    b11a:	490a      	ldr	r1, [pc, #40]	; (b144 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
    b11c:	9b01      	ldr	r3, [sp, #4]
    b11e:	9a00      	ldr	r2, [sp, #0]
    b120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
    b124:	4a06      	ldr	r2, [pc, #24]	; (b140 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    b126:	9b01      	ldr	r3, [sp, #4]
    b128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b12c:	1c5a      	adds	r2, r3, #1
    b12e:	4904      	ldr	r1, [pc, #16]	; (b140 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    b130:	9b01      	ldr	r3, [sp, #4]
    b132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b136:	bf00      	nop
    b138:	b003      	add	sp, #12
    b13a:	f85d fb04 	ldr.w	pc, [sp], #4
    b13e:	bf00      	nop
    b140:	1fff8fcc 	.word	0x1fff8fcc
    b144:	1fff8fc8 	.word	0x1fff8fc8

0000b148 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    b148:	b500      	push	{lr}
    b14a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b14c:	f7f5 fd3a 	bl	bc4 <Sys_GetCoreID>
    b150:	4603      	mov	r3, r0
    b152:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
    b154:	4a0d      	ldr	r2, [pc, #52]	; (b18c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    b156:	9b01      	ldr	r3, [sp, #4]
    b158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b15c:	1e5a      	subs	r2, r3, #1
    b15e:	490b      	ldr	r1, [pc, #44]	; (b18c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    b160:	9b01      	ldr	r3, [sp, #4]
    b162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    b166:	4a0a      	ldr	r2, [pc, #40]	; (b190 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
    b168:	9b01      	ldr	r3, [sp, #4]
    b16a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b16e:	f003 0301 	and.w	r3, r3, #1
    b172:	2b00      	cmp	r3, #0
    b174:	d106      	bne.n	b184 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    b176:	4a05      	ldr	r2, [pc, #20]	; (b18c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    b178:	9b01      	ldr	r3, [sp, #4]
    b17a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b17e:	2b00      	cmp	r3, #0
    b180:	d100      	bne.n	b184 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b182:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b184:	bf00      	nop
    b186:	b003      	add	sp, #12
    b188:	f85d fb04 	ldr.w	pc, [sp], #4
    b18c:	1fff8fcc 	.word	0x1fff8fcc
    b190:	1fff8fc8 	.word	0x1fff8fc8

0000b194 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    b194:	b500      	push	{lr}
    b196:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b198:	f7f5 fd14 	bl	bc4 <Sys_GetCoreID>
    b19c:	4603      	mov	r3, r0
    b19e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
    b1a0:	4a10      	ldr	r2, [pc, #64]	; (b1e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    b1a2:	9b01      	ldr	r3, [sp, #4]
    b1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1a8:	2b00      	cmp	r3, #0
    b1aa:	d10d      	bne.n	b1c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b1ac:	f7f5 fc32 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    b1b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b1b2:	9b00      	ldr	r3, [sp, #0]
    b1b4:	f003 0301 	and.w	r3, r3, #1
    b1b8:	2b00      	cmp	r3, #0
    b1ba:	d100      	bne.n	b1be <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b1bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    b1be:	490a      	ldr	r1, [pc, #40]	; (b1e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
    b1c0:	9b01      	ldr	r3, [sp, #4]
    b1c2:	9a00      	ldr	r2, [sp, #0]
    b1c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
    b1c8:	4a06      	ldr	r2, [pc, #24]	; (b1e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    b1ca:	9b01      	ldr	r3, [sp, #4]
    b1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b1d0:	1c5a      	adds	r2, r3, #1
    b1d2:	4904      	ldr	r1, [pc, #16]	; (b1e4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    b1d4:	9b01      	ldr	r3, [sp, #4]
    b1d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b1da:	bf00      	nop
    b1dc:	b003      	add	sp, #12
    b1de:	f85d fb04 	ldr.w	pc, [sp], #4
    b1e2:	bf00      	nop
    b1e4:	1fff8fd4 	.word	0x1fff8fd4
    b1e8:	1fff8fd0 	.word	0x1fff8fd0

0000b1ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    b1ec:	b500      	push	{lr}
    b1ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b1f0:	f7f5 fce8 	bl	bc4 <Sys_GetCoreID>
    b1f4:	4603      	mov	r3, r0
    b1f6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
    b1f8:	4a0d      	ldr	r2, [pc, #52]	; (b230 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    b1fa:	9b01      	ldr	r3, [sp, #4]
    b1fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b200:	1e5a      	subs	r2, r3, #1
    b202:	490b      	ldr	r1, [pc, #44]	; (b230 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    b204:	9b01      	ldr	r3, [sp, #4]
    b206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    b20a:	4a0a      	ldr	r2, [pc, #40]	; (b234 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
    b20c:	9b01      	ldr	r3, [sp, #4]
    b20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b212:	f003 0301 	and.w	r3, r3, #1
    b216:	2b00      	cmp	r3, #0
    b218:	d106      	bne.n	b228 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    b21a:	4a05      	ldr	r2, [pc, #20]	; (b230 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    b21c:	9b01      	ldr	r3, [sp, #4]
    b21e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b222:	2b00      	cmp	r3, #0
    b224:	d100      	bne.n	b228 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b226:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b228:	bf00      	nop
    b22a:	b003      	add	sp, #12
    b22c:	f85d fb04 	ldr.w	pc, [sp], #4
    b230:	1fff8fd4 	.word	0x1fff8fd4
    b234:	1fff8fd0 	.word	0x1fff8fd0

0000b238 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    b238:	b500      	push	{lr}
    b23a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b23c:	f7f5 fcc2 	bl	bc4 <Sys_GetCoreID>
    b240:	4603      	mov	r3, r0
    b242:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
    b244:	4a10      	ldr	r2, [pc, #64]	; (b288 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    b246:	9b01      	ldr	r3, [sp, #4]
    b248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b24c:	2b00      	cmp	r3, #0
    b24e:	d10d      	bne.n	b26c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b250:	f7f5 fbe0 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    b254:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b256:	9b00      	ldr	r3, [sp, #0]
    b258:	f003 0301 	and.w	r3, r3, #1
    b25c:	2b00      	cmp	r3, #0
    b25e:	d100      	bne.n	b262 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b260:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    b262:	490a      	ldr	r1, [pc, #40]	; (b28c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
    b264:	9b01      	ldr	r3, [sp, #4]
    b266:	9a00      	ldr	r2, [sp, #0]
    b268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
    b26c:	4a06      	ldr	r2, [pc, #24]	; (b288 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    b26e:	9b01      	ldr	r3, [sp, #4]
    b270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b274:	1c5a      	adds	r2, r3, #1
    b276:	4904      	ldr	r1, [pc, #16]	; (b288 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    b278:	9b01      	ldr	r3, [sp, #4]
    b27a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b27e:	bf00      	nop
    b280:	b003      	add	sp, #12
    b282:	f85d fb04 	ldr.w	pc, [sp], #4
    b286:	bf00      	nop
    b288:	1fff8fdc 	.word	0x1fff8fdc
    b28c:	1fff8fd8 	.word	0x1fff8fd8

0000b290 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    b290:	b500      	push	{lr}
    b292:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b294:	f7f5 fc96 	bl	bc4 <Sys_GetCoreID>
    b298:	4603      	mov	r3, r0
    b29a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
    b29c:	4a0d      	ldr	r2, [pc, #52]	; (b2d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    b29e:	9b01      	ldr	r3, [sp, #4]
    b2a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2a4:	1e5a      	subs	r2, r3, #1
    b2a6:	490b      	ldr	r1, [pc, #44]	; (b2d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    b2a8:	9b01      	ldr	r3, [sp, #4]
    b2aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    b2ae:	4a0a      	ldr	r2, [pc, #40]	; (b2d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
    b2b0:	9b01      	ldr	r3, [sp, #4]
    b2b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2b6:	f003 0301 	and.w	r3, r3, #1
    b2ba:	2b00      	cmp	r3, #0
    b2bc:	d106      	bne.n	b2cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    b2be:	4a05      	ldr	r2, [pc, #20]	; (b2d4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    b2c0:	9b01      	ldr	r3, [sp, #4]
    b2c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2c6:	2b00      	cmp	r3, #0
    b2c8:	d100      	bne.n	b2cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b2ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b2cc:	bf00      	nop
    b2ce:	b003      	add	sp, #12
    b2d0:	f85d fb04 	ldr.w	pc, [sp], #4
    b2d4:	1fff8fdc 	.word	0x1fff8fdc
    b2d8:	1fff8fd8 	.word	0x1fff8fd8

0000b2dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    b2dc:	b500      	push	{lr}
    b2de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b2e0:	f7f5 fc70 	bl	bc4 <Sys_GetCoreID>
    b2e4:	4603      	mov	r3, r0
    b2e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
    b2e8:	4a10      	ldr	r2, [pc, #64]	; (b32c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    b2ea:	9b01      	ldr	r3, [sp, #4]
    b2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2f0:	2b00      	cmp	r3, #0
    b2f2:	d10d      	bne.n	b310 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b2f4:	f7f5 fb8e 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    b2f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b2fa:	9b00      	ldr	r3, [sp, #0]
    b2fc:	f003 0301 	and.w	r3, r3, #1
    b300:	2b00      	cmp	r3, #0
    b302:	d100      	bne.n	b306 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b304:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    b306:	490a      	ldr	r1, [pc, #40]	; (b330 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
    b308:	9b01      	ldr	r3, [sp, #4]
    b30a:	9a00      	ldr	r2, [sp, #0]
    b30c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
    b310:	4a06      	ldr	r2, [pc, #24]	; (b32c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    b312:	9b01      	ldr	r3, [sp, #4]
    b314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b318:	1c5a      	adds	r2, r3, #1
    b31a:	4904      	ldr	r1, [pc, #16]	; (b32c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    b31c:	9b01      	ldr	r3, [sp, #4]
    b31e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b322:	bf00      	nop
    b324:	b003      	add	sp, #12
    b326:	f85d fb04 	ldr.w	pc, [sp], #4
    b32a:	bf00      	nop
    b32c:	1fff8fe4 	.word	0x1fff8fe4
    b330:	1fff8fe0 	.word	0x1fff8fe0

0000b334 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    b334:	b500      	push	{lr}
    b336:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b338:	f7f5 fc44 	bl	bc4 <Sys_GetCoreID>
    b33c:	4603      	mov	r3, r0
    b33e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
    b340:	4a0d      	ldr	r2, [pc, #52]	; (b378 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    b342:	9b01      	ldr	r3, [sp, #4]
    b344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b348:	1e5a      	subs	r2, r3, #1
    b34a:	490b      	ldr	r1, [pc, #44]	; (b378 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    b34c:	9b01      	ldr	r3, [sp, #4]
    b34e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    b352:	4a0a      	ldr	r2, [pc, #40]	; (b37c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
    b354:	9b01      	ldr	r3, [sp, #4]
    b356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b35a:	f003 0301 	and.w	r3, r3, #1
    b35e:	2b00      	cmp	r3, #0
    b360:	d106      	bne.n	b370 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    b362:	4a05      	ldr	r2, [pc, #20]	; (b378 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    b364:	9b01      	ldr	r3, [sp, #4]
    b366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b36a:	2b00      	cmp	r3, #0
    b36c:	d100      	bne.n	b370 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b36e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b370:	bf00      	nop
    b372:	b003      	add	sp, #12
    b374:	f85d fb04 	ldr.w	pc, [sp], #4
    b378:	1fff8fe4 	.word	0x1fff8fe4
    b37c:	1fff8fe0 	.word	0x1fff8fe0

0000b380 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    b380:	b500      	push	{lr}
    b382:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b384:	f7f5 fc1e 	bl	bc4 <Sys_GetCoreID>
    b388:	4603      	mov	r3, r0
    b38a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
    b38c:	4a10      	ldr	r2, [pc, #64]	; (b3d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    b38e:	9b01      	ldr	r3, [sp, #4]
    b390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b394:	2b00      	cmp	r3, #0
    b396:	d10d      	bne.n	b3b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b398:	f7f5 fb3c 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    b39c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b39e:	9b00      	ldr	r3, [sp, #0]
    b3a0:	f003 0301 	and.w	r3, r3, #1
    b3a4:	2b00      	cmp	r3, #0
    b3a6:	d100      	bne.n	b3aa <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b3a8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    b3aa:	490a      	ldr	r1, [pc, #40]	; (b3d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
    b3ac:	9b01      	ldr	r3, [sp, #4]
    b3ae:	9a00      	ldr	r2, [sp, #0]
    b3b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
    b3b4:	4a06      	ldr	r2, [pc, #24]	; (b3d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    b3b6:	9b01      	ldr	r3, [sp, #4]
    b3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3bc:	1c5a      	adds	r2, r3, #1
    b3be:	4904      	ldr	r1, [pc, #16]	; (b3d0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    b3c0:	9b01      	ldr	r3, [sp, #4]
    b3c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b3c6:	bf00      	nop
    b3c8:	b003      	add	sp, #12
    b3ca:	f85d fb04 	ldr.w	pc, [sp], #4
    b3ce:	bf00      	nop
    b3d0:	1fff8fec 	.word	0x1fff8fec
    b3d4:	1fff8fe8 	.word	0x1fff8fe8

0000b3d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    b3d8:	b500      	push	{lr}
    b3da:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b3dc:	f7f5 fbf2 	bl	bc4 <Sys_GetCoreID>
    b3e0:	4603      	mov	r3, r0
    b3e2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
    b3e4:	4a0d      	ldr	r2, [pc, #52]	; (b41c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    b3e6:	9b01      	ldr	r3, [sp, #4]
    b3e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3ec:	1e5a      	subs	r2, r3, #1
    b3ee:	490b      	ldr	r1, [pc, #44]	; (b41c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    b3f0:	9b01      	ldr	r3, [sp, #4]
    b3f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    b3f6:	4a0a      	ldr	r2, [pc, #40]	; (b420 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
    b3f8:	9b01      	ldr	r3, [sp, #4]
    b3fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3fe:	f003 0301 	and.w	r3, r3, #1
    b402:	2b00      	cmp	r3, #0
    b404:	d106      	bne.n	b414 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    b406:	4a05      	ldr	r2, [pc, #20]	; (b41c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    b408:	9b01      	ldr	r3, [sp, #4]
    b40a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b40e:	2b00      	cmp	r3, #0
    b410:	d100      	bne.n	b414 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b412:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b414:	bf00      	nop
    b416:	b003      	add	sp, #12
    b418:	f85d fb04 	ldr.w	pc, [sp], #4
    b41c:	1fff8fec 	.word	0x1fff8fec
    b420:	1fff8fe8 	.word	0x1fff8fe8

0000b424 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    b424:	b500      	push	{lr}
    b426:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b428:	f7f5 fbcc 	bl	bc4 <Sys_GetCoreID>
    b42c:	4603      	mov	r3, r0
    b42e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
    b430:	4a10      	ldr	r2, [pc, #64]	; (b474 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    b432:	9b01      	ldr	r3, [sp, #4]
    b434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b438:	2b00      	cmp	r3, #0
    b43a:	d10d      	bne.n	b458 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b43c:	f7f5 faea 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    b440:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b442:	9b00      	ldr	r3, [sp, #0]
    b444:	f003 0301 	and.w	r3, r3, #1
    b448:	2b00      	cmp	r3, #0
    b44a:	d100      	bne.n	b44e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b44c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    b44e:	490a      	ldr	r1, [pc, #40]	; (b478 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
    b450:	9b01      	ldr	r3, [sp, #4]
    b452:	9a00      	ldr	r2, [sp, #0]
    b454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
    b458:	4a06      	ldr	r2, [pc, #24]	; (b474 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    b45a:	9b01      	ldr	r3, [sp, #4]
    b45c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b460:	1c5a      	adds	r2, r3, #1
    b462:	4904      	ldr	r1, [pc, #16]	; (b474 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    b464:	9b01      	ldr	r3, [sp, #4]
    b466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b46a:	bf00      	nop
    b46c:	b003      	add	sp, #12
    b46e:	f85d fb04 	ldr.w	pc, [sp], #4
    b472:	bf00      	nop
    b474:	1fff8ff4 	.word	0x1fff8ff4
    b478:	1fff8ff0 	.word	0x1fff8ff0

0000b47c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    b47c:	b500      	push	{lr}
    b47e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b480:	f7f5 fba0 	bl	bc4 <Sys_GetCoreID>
    b484:	4603      	mov	r3, r0
    b486:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
    b488:	4a0d      	ldr	r2, [pc, #52]	; (b4c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    b48a:	9b01      	ldr	r3, [sp, #4]
    b48c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b490:	1e5a      	subs	r2, r3, #1
    b492:	490b      	ldr	r1, [pc, #44]	; (b4c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    b494:	9b01      	ldr	r3, [sp, #4]
    b496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    b49a:	4a0a      	ldr	r2, [pc, #40]	; (b4c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
    b49c:	9b01      	ldr	r3, [sp, #4]
    b49e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4a2:	f003 0301 	and.w	r3, r3, #1
    b4a6:	2b00      	cmp	r3, #0
    b4a8:	d106      	bne.n	b4b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    b4aa:	4a05      	ldr	r2, [pc, #20]	; (b4c0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    b4ac:	9b01      	ldr	r3, [sp, #4]
    b4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4b2:	2b00      	cmp	r3, #0
    b4b4:	d100      	bne.n	b4b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b4b6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b4b8:	bf00      	nop
    b4ba:	b003      	add	sp, #12
    b4bc:	f85d fb04 	ldr.w	pc, [sp], #4
    b4c0:	1fff8ff4 	.word	0x1fff8ff4
    b4c4:	1fff8ff0 	.word	0x1fff8ff0

0000b4c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    b4c8:	b500      	push	{lr}
    b4ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b4cc:	f7f5 fb7a 	bl	bc4 <Sys_GetCoreID>
    b4d0:	4603      	mov	r3, r0
    b4d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
    b4d4:	4a10      	ldr	r2, [pc, #64]	; (b518 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    b4d6:	9b01      	ldr	r3, [sp, #4]
    b4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b4dc:	2b00      	cmp	r3, #0
    b4de:	d10d      	bne.n	b4fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b4e0:	f7f5 fa98 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    b4e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b4e6:	9b00      	ldr	r3, [sp, #0]
    b4e8:	f003 0301 	and.w	r3, r3, #1
    b4ec:	2b00      	cmp	r3, #0
    b4ee:	d100      	bne.n	b4f2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b4f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    b4f2:	490a      	ldr	r1, [pc, #40]	; (b51c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
    b4f4:	9b01      	ldr	r3, [sp, #4]
    b4f6:	9a00      	ldr	r2, [sp, #0]
    b4f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
    b4fc:	4a06      	ldr	r2, [pc, #24]	; (b518 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    b4fe:	9b01      	ldr	r3, [sp, #4]
    b500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b504:	1c5a      	adds	r2, r3, #1
    b506:	4904      	ldr	r1, [pc, #16]	; (b518 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    b508:	9b01      	ldr	r3, [sp, #4]
    b50a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b50e:	bf00      	nop
    b510:	b003      	add	sp, #12
    b512:	f85d fb04 	ldr.w	pc, [sp], #4
    b516:	bf00      	nop
    b518:	1fff8ffc 	.word	0x1fff8ffc
    b51c:	1fff8ff8 	.word	0x1fff8ff8

0000b520 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    b520:	b500      	push	{lr}
    b522:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b524:	f7f5 fb4e 	bl	bc4 <Sys_GetCoreID>
    b528:	4603      	mov	r3, r0
    b52a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
    b52c:	4a0d      	ldr	r2, [pc, #52]	; (b564 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    b52e:	9b01      	ldr	r3, [sp, #4]
    b530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b534:	1e5a      	subs	r2, r3, #1
    b536:	490b      	ldr	r1, [pc, #44]	; (b564 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    b538:	9b01      	ldr	r3, [sp, #4]
    b53a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    b53e:	4a0a      	ldr	r2, [pc, #40]	; (b568 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
    b540:	9b01      	ldr	r3, [sp, #4]
    b542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b546:	f003 0301 	and.w	r3, r3, #1
    b54a:	2b00      	cmp	r3, #0
    b54c:	d106      	bne.n	b55c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    b54e:	4a05      	ldr	r2, [pc, #20]	; (b564 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    b550:	9b01      	ldr	r3, [sp, #4]
    b552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b556:	2b00      	cmp	r3, #0
    b558:	d100      	bne.n	b55c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b55a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b55c:	bf00      	nop
    b55e:	b003      	add	sp, #12
    b560:	f85d fb04 	ldr.w	pc, [sp], #4
    b564:	1fff8ffc 	.word	0x1fff8ffc
    b568:	1fff8ff8 	.word	0x1fff8ff8

0000b56c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    b56c:	b500      	push	{lr}
    b56e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b570:	f7f5 fb28 	bl	bc4 <Sys_GetCoreID>
    b574:	4603      	mov	r3, r0
    b576:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
    b578:	4a10      	ldr	r2, [pc, #64]	; (b5bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    b57a:	9b01      	ldr	r3, [sp, #4]
    b57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b580:	2b00      	cmp	r3, #0
    b582:	d10d      	bne.n	b5a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b584:	f7f5 fa46 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    b588:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b58a:	9b00      	ldr	r3, [sp, #0]
    b58c:	f003 0301 	and.w	r3, r3, #1
    b590:	2b00      	cmp	r3, #0
    b592:	d100      	bne.n	b596 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b594:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    b596:	490a      	ldr	r1, [pc, #40]	; (b5c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
    b598:	9b01      	ldr	r3, [sp, #4]
    b59a:	9a00      	ldr	r2, [sp, #0]
    b59c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
    b5a0:	4a06      	ldr	r2, [pc, #24]	; (b5bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    b5a2:	9b01      	ldr	r3, [sp, #4]
    b5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5a8:	1c5a      	adds	r2, r3, #1
    b5aa:	4904      	ldr	r1, [pc, #16]	; (b5bc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    b5ac:	9b01      	ldr	r3, [sp, #4]
    b5ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b5b2:	bf00      	nop
    b5b4:	b003      	add	sp, #12
    b5b6:	f85d fb04 	ldr.w	pc, [sp], #4
    b5ba:	bf00      	nop
    b5bc:	1fff9004 	.word	0x1fff9004
    b5c0:	1fff9000 	.word	0x1fff9000

0000b5c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    b5c4:	b500      	push	{lr}
    b5c6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b5c8:	f7f5 fafc 	bl	bc4 <Sys_GetCoreID>
    b5cc:	4603      	mov	r3, r0
    b5ce:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
    b5d0:	4a0d      	ldr	r2, [pc, #52]	; (b608 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    b5d2:	9b01      	ldr	r3, [sp, #4]
    b5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5d8:	1e5a      	subs	r2, r3, #1
    b5da:	490b      	ldr	r1, [pc, #44]	; (b608 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    b5dc:	9b01      	ldr	r3, [sp, #4]
    b5de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    b5e2:	4a0a      	ldr	r2, [pc, #40]	; (b60c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
    b5e4:	9b01      	ldr	r3, [sp, #4]
    b5e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5ea:	f003 0301 	and.w	r3, r3, #1
    b5ee:	2b00      	cmp	r3, #0
    b5f0:	d106      	bne.n	b600 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    b5f2:	4a05      	ldr	r2, [pc, #20]	; (b608 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    b5f4:	9b01      	ldr	r3, [sp, #4]
    b5f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5fa:	2b00      	cmp	r3, #0
    b5fc:	d100      	bne.n	b600 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b5fe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b600:	bf00      	nop
    b602:	b003      	add	sp, #12
    b604:	f85d fb04 	ldr.w	pc, [sp], #4
    b608:	1fff9004 	.word	0x1fff9004
    b60c:	1fff9000 	.word	0x1fff9000

0000b610 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    b610:	b500      	push	{lr}
    b612:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b614:	f7f5 fad6 	bl	bc4 <Sys_GetCoreID>
    b618:	4603      	mov	r3, r0
    b61a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
    b61c:	4a10      	ldr	r2, [pc, #64]	; (b660 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    b61e:	9b01      	ldr	r3, [sp, #4]
    b620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b624:	2b00      	cmp	r3, #0
    b626:	d10d      	bne.n	b644 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b628:	f7f5 f9f4 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    b62c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b62e:	9b00      	ldr	r3, [sp, #0]
    b630:	f003 0301 	and.w	r3, r3, #1
    b634:	2b00      	cmp	r3, #0
    b636:	d100      	bne.n	b63a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b638:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    b63a:	490a      	ldr	r1, [pc, #40]	; (b664 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
    b63c:	9b01      	ldr	r3, [sp, #4]
    b63e:	9a00      	ldr	r2, [sp, #0]
    b640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
    b644:	4a06      	ldr	r2, [pc, #24]	; (b660 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    b646:	9b01      	ldr	r3, [sp, #4]
    b648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b64c:	1c5a      	adds	r2, r3, #1
    b64e:	4904      	ldr	r1, [pc, #16]	; (b660 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    b650:	9b01      	ldr	r3, [sp, #4]
    b652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b656:	bf00      	nop
    b658:	b003      	add	sp, #12
    b65a:	f85d fb04 	ldr.w	pc, [sp], #4
    b65e:	bf00      	nop
    b660:	1fff900c 	.word	0x1fff900c
    b664:	1fff9008 	.word	0x1fff9008

0000b668 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    b668:	b500      	push	{lr}
    b66a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b66c:	f7f5 faaa 	bl	bc4 <Sys_GetCoreID>
    b670:	4603      	mov	r3, r0
    b672:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
    b674:	4a0d      	ldr	r2, [pc, #52]	; (b6ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    b676:	9b01      	ldr	r3, [sp, #4]
    b678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b67c:	1e5a      	subs	r2, r3, #1
    b67e:	490b      	ldr	r1, [pc, #44]	; (b6ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    b680:	9b01      	ldr	r3, [sp, #4]
    b682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    b686:	4a0a      	ldr	r2, [pc, #40]	; (b6b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
    b688:	9b01      	ldr	r3, [sp, #4]
    b68a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b68e:	f003 0301 	and.w	r3, r3, #1
    b692:	2b00      	cmp	r3, #0
    b694:	d106      	bne.n	b6a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    b696:	4a05      	ldr	r2, [pc, #20]	; (b6ac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    b698:	9b01      	ldr	r3, [sp, #4]
    b69a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b69e:	2b00      	cmp	r3, #0
    b6a0:	d100      	bne.n	b6a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b6a2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b6a4:	bf00      	nop
    b6a6:	b003      	add	sp, #12
    b6a8:	f85d fb04 	ldr.w	pc, [sp], #4
    b6ac:	1fff900c 	.word	0x1fff900c
    b6b0:	1fff9008 	.word	0x1fff9008

0000b6b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    b6b4:	b500      	push	{lr}
    b6b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b6b8:	f7f5 fa84 	bl	bc4 <Sys_GetCoreID>
    b6bc:	4603      	mov	r3, r0
    b6be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
    b6c0:	4a10      	ldr	r2, [pc, #64]	; (b704 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    b6c2:	9b01      	ldr	r3, [sp, #4]
    b6c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6c8:	2b00      	cmp	r3, #0
    b6ca:	d10d      	bne.n	b6e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b6cc:	f7f5 f9a2 	bl	a14 <Can_43_FLEXCAN_schm_read_msr>
    b6d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b6d2:	9b00      	ldr	r3, [sp, #0]
    b6d4:	f003 0301 	and.w	r3, r3, #1
    b6d8:	2b00      	cmp	r3, #0
    b6da:	d100      	bne.n	b6de <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b6dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    b6de:	490a      	ldr	r1, [pc, #40]	; (b708 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
    b6e0:	9b01      	ldr	r3, [sp, #4]
    b6e2:	9a00      	ldr	r2, [sp, #0]
    b6e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
    b6e8:	4a06      	ldr	r2, [pc, #24]	; (b704 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    b6ea:	9b01      	ldr	r3, [sp, #4]
    b6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6f0:	1c5a      	adds	r2, r3, #1
    b6f2:	4904      	ldr	r1, [pc, #16]	; (b704 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    b6f4:	9b01      	ldr	r3, [sp, #4]
    b6f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b6fa:	bf00      	nop
    b6fc:	b003      	add	sp, #12
    b6fe:	f85d fb04 	ldr.w	pc, [sp], #4
    b702:	bf00      	nop
    b704:	1fff9014 	.word	0x1fff9014
    b708:	1fff9010 	.word	0x1fff9010

0000b70c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    b70c:	b500      	push	{lr}
    b70e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b710:	f7f5 fa58 	bl	bc4 <Sys_GetCoreID>
    b714:	4603      	mov	r3, r0
    b716:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
    b718:	4a0d      	ldr	r2, [pc, #52]	; (b750 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    b71a:	9b01      	ldr	r3, [sp, #4]
    b71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b720:	1e5a      	subs	r2, r3, #1
    b722:	490b      	ldr	r1, [pc, #44]	; (b750 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    b724:	9b01      	ldr	r3, [sp, #4]
    b726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    b72a:	4a0a      	ldr	r2, [pc, #40]	; (b754 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
    b72c:	9b01      	ldr	r3, [sp, #4]
    b72e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b732:	f003 0301 	and.w	r3, r3, #1
    b736:	2b00      	cmp	r3, #0
    b738:	d106      	bne.n	b748 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    b73a:	4a05      	ldr	r2, [pc, #20]	; (b750 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    b73c:	9b01      	ldr	r3, [sp, #4]
    b73e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b742:	2b00      	cmp	r3, #0
    b744:	d100      	bne.n	b748 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b746:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b748:	bf00      	nop
    b74a:	b003      	add	sp, #12
    b74c:	f85d fb04 	ldr.w	pc, [sp], #4
    b750:	1fff9014 	.word	0x1fff9014
    b754:	1fff9010 	.word	0x1fff9010

0000b758 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    b758:	b500      	push	{lr}
    b75a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b75c:	f7f5 fa32 	bl	bc4 <Sys_GetCoreID>
    b760:	4603      	mov	r3, r0
    b762:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    b764:	4a10      	ldr	r2, [pc, #64]	; (b7a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    b766:	9b01      	ldr	r3, [sp, #4]
    b768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b76c:	2b00      	cmp	r3, #0
    b76e:	d10d      	bne.n	b78c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b770:	f7f5 f959 	bl	a26 <Mcu_schm_read_msr>
    b774:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b776:	9b00      	ldr	r3, [sp, #0]
    b778:	f003 0301 	and.w	r3, r3, #1
    b77c:	2b00      	cmp	r3, #0
    b77e:	d100      	bne.n	b782 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b780:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    b782:	490a      	ldr	r1, [pc, #40]	; (b7ac <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    b784:	9b01      	ldr	r3, [sp, #4]
    b786:	9a00      	ldr	r2, [sp, #0]
    b788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    b78c:	4a06      	ldr	r2, [pc, #24]	; (b7a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    b78e:	9b01      	ldr	r3, [sp, #4]
    b790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b794:	1c5a      	adds	r2, r3, #1
    b796:	4904      	ldr	r1, [pc, #16]	; (b7a8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    b798:	9b01      	ldr	r3, [sp, #4]
    b79a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b79e:	bf00      	nop
    b7a0:	b003      	add	sp, #12
    b7a2:	f85d fb04 	ldr.w	pc, [sp], #4
    b7a6:	bf00      	nop
    b7a8:	1fff901c 	.word	0x1fff901c
    b7ac:	1fff9018 	.word	0x1fff9018

0000b7b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    b7b0:	b500      	push	{lr}
    b7b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b7b4:	f7f5 fa06 	bl	bc4 <Sys_GetCoreID>
    b7b8:	4603      	mov	r3, r0
    b7ba:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    b7bc:	4a0d      	ldr	r2, [pc, #52]	; (b7f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    b7be:	9b01      	ldr	r3, [sp, #4]
    b7c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7c4:	1e5a      	subs	r2, r3, #1
    b7c6:	490b      	ldr	r1, [pc, #44]	; (b7f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    b7c8:	9b01      	ldr	r3, [sp, #4]
    b7ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    b7ce:	4a0a      	ldr	r2, [pc, #40]	; (b7f8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    b7d0:	9b01      	ldr	r3, [sp, #4]
    b7d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7d6:	f003 0301 	and.w	r3, r3, #1
    b7da:	2b00      	cmp	r3, #0
    b7dc:	d106      	bne.n	b7ec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    b7de:	4a05      	ldr	r2, [pc, #20]	; (b7f4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    b7e0:	9b01      	ldr	r3, [sp, #4]
    b7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b7e6:	2b00      	cmp	r3, #0
    b7e8:	d100      	bne.n	b7ec <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b7ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b7ec:	bf00      	nop
    b7ee:	b003      	add	sp, #12
    b7f0:	f85d fb04 	ldr.w	pc, [sp], #4
    b7f4:	1fff901c 	.word	0x1fff901c
    b7f8:	1fff9018 	.word	0x1fff9018

0000b7fc <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    b7fc:	b500      	push	{lr}
    b7fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b800:	f7f5 f9e0 	bl	bc4 <Sys_GetCoreID>
    b804:	4603      	mov	r3, r0
    b806:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    b808:	4a10      	ldr	r2, [pc, #64]	; (b84c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    b80a:	9b01      	ldr	r3, [sp, #4]
    b80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b810:	2b00      	cmp	r3, #0
    b812:	d10d      	bne.n	b830 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b814:	f7f5 f907 	bl	a26 <Mcu_schm_read_msr>
    b818:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b81a:	9b00      	ldr	r3, [sp, #0]
    b81c:	f003 0301 	and.w	r3, r3, #1
    b820:	2b00      	cmp	r3, #0
    b822:	d100      	bne.n	b826 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b824:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    b826:	490a      	ldr	r1, [pc, #40]	; (b850 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    b828:	9b01      	ldr	r3, [sp, #4]
    b82a:	9a00      	ldr	r2, [sp, #0]
    b82c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    b830:	4a06      	ldr	r2, [pc, #24]	; (b84c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    b832:	9b01      	ldr	r3, [sp, #4]
    b834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b838:	1c5a      	adds	r2, r3, #1
    b83a:	4904      	ldr	r1, [pc, #16]	; (b84c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    b83c:	9b01      	ldr	r3, [sp, #4]
    b83e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b842:	bf00      	nop
    b844:	b003      	add	sp, #12
    b846:	f85d fb04 	ldr.w	pc, [sp], #4
    b84a:	bf00      	nop
    b84c:	1fff9024 	.word	0x1fff9024
    b850:	1fff9020 	.word	0x1fff9020

0000b854 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    b854:	b500      	push	{lr}
    b856:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b858:	f7f5 f9b4 	bl	bc4 <Sys_GetCoreID>
    b85c:	4603      	mov	r3, r0
    b85e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    b860:	4a0d      	ldr	r2, [pc, #52]	; (b898 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    b862:	9b01      	ldr	r3, [sp, #4]
    b864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b868:	1e5a      	subs	r2, r3, #1
    b86a:	490b      	ldr	r1, [pc, #44]	; (b898 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    b86c:	9b01      	ldr	r3, [sp, #4]
    b86e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    b872:	4a0a      	ldr	r2, [pc, #40]	; (b89c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    b874:	9b01      	ldr	r3, [sp, #4]
    b876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b87a:	f003 0301 	and.w	r3, r3, #1
    b87e:	2b00      	cmp	r3, #0
    b880:	d106      	bne.n	b890 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    b882:	4a05      	ldr	r2, [pc, #20]	; (b898 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    b884:	9b01      	ldr	r3, [sp, #4]
    b886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b88a:	2b00      	cmp	r3, #0
    b88c:	d100      	bne.n	b890 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b88e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b890:	bf00      	nop
    b892:	b003      	add	sp, #12
    b894:	f85d fb04 	ldr.w	pc, [sp], #4
    b898:	1fff9024 	.word	0x1fff9024
    b89c:	1fff9020 	.word	0x1fff9020

0000b8a0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    b8a0:	b500      	push	{lr}
    b8a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b8a4:	f7f5 f98e 	bl	bc4 <Sys_GetCoreID>
    b8a8:	4603      	mov	r3, r0
    b8aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    b8ac:	4a10      	ldr	r2, [pc, #64]	; (b8f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    b8ae:	9b01      	ldr	r3, [sp, #4]
    b8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8b4:	2b00      	cmp	r3, #0
    b8b6:	d10d      	bne.n	b8d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    b8b8:	f7f5 f8b5 	bl	a26 <Mcu_schm_read_msr>
    b8bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    b8be:	9b00      	ldr	r3, [sp, #0]
    b8c0:	f003 0301 	and.w	r3, r3, #1
    b8c4:	2b00      	cmp	r3, #0
    b8c6:	d100      	bne.n	b8ca <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    b8c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    b8ca:	490a      	ldr	r1, [pc, #40]	; (b8f4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    b8cc:	9b01      	ldr	r3, [sp, #4]
    b8ce:	9a00      	ldr	r2, [sp, #0]
    b8d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    b8d4:	4a06      	ldr	r2, [pc, #24]	; (b8f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    b8d6:	9b01      	ldr	r3, [sp, #4]
    b8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8dc:	1c5a      	adds	r2, r3, #1
    b8de:	4904      	ldr	r1, [pc, #16]	; (b8f0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    b8e0:	9b01      	ldr	r3, [sp, #4]
    b8e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    b8e6:	bf00      	nop
    b8e8:	b003      	add	sp, #12
    b8ea:	f85d fb04 	ldr.w	pc, [sp], #4
    b8ee:	bf00      	nop
    b8f0:	1fff902c 	.word	0x1fff902c
    b8f4:	1fff9028 	.word	0x1fff9028

0000b8f8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    b8f8:	b500      	push	{lr}
    b8fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b8fc:	f7f5 f962 	bl	bc4 <Sys_GetCoreID>
    b900:	4603      	mov	r3, r0
    b902:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    b904:	4a0d      	ldr	r2, [pc, #52]	; (b93c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    b906:	9b01      	ldr	r3, [sp, #4]
    b908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b90c:	1e5a      	subs	r2, r3, #1
    b90e:	490b      	ldr	r1, [pc, #44]	; (b93c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    b910:	9b01      	ldr	r3, [sp, #4]
    b912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    b916:	4a0a      	ldr	r2, [pc, #40]	; (b940 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    b918:	9b01      	ldr	r3, [sp, #4]
    b91a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b91e:	f003 0301 	and.w	r3, r3, #1
    b922:	2b00      	cmp	r3, #0
    b924:	d106      	bne.n	b934 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    b926:	4a05      	ldr	r2, [pc, #20]	; (b93c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    b928:	9b01      	ldr	r3, [sp, #4]
    b92a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b92e:	2b00      	cmp	r3, #0
    b930:	d100      	bne.n	b934 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    b932:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    b934:	bf00      	nop
    b936:	b003      	add	sp, #12
    b938:	f85d fb04 	ldr.w	pc, [sp], #4
    b93c:	1fff902c 	.word	0x1fff902c
    b940:	1fff9028 	.word	0x1fff9028

0000b944 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    b944:	bf00      	nop
    b946:	4770      	bx	lr

0000b948 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    b948:	b510      	push	{r4, lr}
    b94a:	b084      	sub	sp, #16
    b94c:	4604      	mov	r4, r0
    b94e:	4608      	mov	r0, r1
    b950:	4611      	mov	r1, r2
    b952:	461a      	mov	r2, r3
    b954:	4623      	mov	r3, r4
    b956:	f8ad 3006 	strh.w	r3, [sp, #6]
    b95a:	4603      	mov	r3, r0
    b95c:	f88d 3005 	strb.w	r3, [sp, #5]
    b960:	460b      	mov	r3, r1
    b962:	f88d 3004 	strb.w	r3, [sp, #4]
    b966:	4613      	mov	r3, r2
    b968:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b96c:	f7f5 f92a 	bl	bc4 <Sys_GetCoreID>
    b970:	4603      	mov	r3, r0
    b972:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    b974:	490d      	ldr	r1, [pc, #52]	; (b9ac <Det_ReportError+0x64>)
    b976:	9b03      	ldr	r3, [sp, #12]
    b978:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b97c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    b980:	4a0b      	ldr	r2, [pc, #44]	; (b9b0 <Det_ReportError+0x68>)
    b982:	9b03      	ldr	r3, [sp, #12]
    b984:	4413      	add	r3, r2
    b986:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b98a:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    b98c:	4a09      	ldr	r2, [pc, #36]	; (b9b4 <Det_ReportError+0x6c>)
    b98e:	9b03      	ldr	r3, [sp, #12]
    b990:	4413      	add	r3, r2
    b992:	f89d 2004 	ldrb.w	r2, [sp, #4]
    b996:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    b998:	4a07      	ldr	r2, [pc, #28]	; (b9b8 <Det_ReportError+0x70>)
    b99a:	9b03      	ldr	r3, [sp, #12]
    b99c:	4413      	add	r3, r2
    b99e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b9a2:	701a      	strb	r2, [r3, #0]

    return E_OK;
    b9a4:	2300      	movs	r3, #0
}
    b9a6:	4618      	mov	r0, r3
    b9a8:	b004      	add	sp, #16
    b9aa:	bd10      	pop	{r4, pc}
    b9ac:	1fff9058 	.word	0x1fff9058
    b9b0:	1fff9030 	.word	0x1fff9030
    b9b4:	1fff9034 	.word	0x1fff9034
    b9b8:	1fff9038 	.word	0x1fff9038

0000b9bc <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    b9bc:	b510      	push	{r4, lr}
    b9be:	b084      	sub	sp, #16
    b9c0:	4604      	mov	r4, r0
    b9c2:	4608      	mov	r0, r1
    b9c4:	4611      	mov	r1, r2
    b9c6:	461a      	mov	r2, r3
    b9c8:	4623      	mov	r3, r4
    b9ca:	f8ad 3006 	strh.w	r3, [sp, #6]
    b9ce:	4603      	mov	r3, r0
    b9d0:	f88d 3005 	strb.w	r3, [sp, #5]
    b9d4:	460b      	mov	r3, r1
    b9d6:	f88d 3004 	strb.w	r3, [sp, #4]
    b9da:	4613      	mov	r3, r2
    b9dc:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    b9e0:	f7f5 f8f0 	bl	bc4 <Sys_GetCoreID>
    b9e4:	4603      	mov	r3, r0
    b9e6:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    b9e8:	490d      	ldr	r1, [pc, #52]	; (ba20 <Det_ReportRuntimeError+0x64>)
    b9ea:	9b03      	ldr	r3, [sp, #12]
    b9ec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    b9f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    b9f4:	4a0b      	ldr	r2, [pc, #44]	; (ba24 <Det_ReportRuntimeError+0x68>)
    b9f6:	9b03      	ldr	r3, [sp, #12]
    b9f8:	4413      	add	r3, r2
    b9fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b9fe:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    ba00:	4a09      	ldr	r2, [pc, #36]	; (ba28 <Det_ReportRuntimeError+0x6c>)
    ba02:	9b03      	ldr	r3, [sp, #12]
    ba04:	4413      	add	r3, r2
    ba06:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ba0a:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    ba0c:	4a07      	ldr	r2, [pc, #28]	; (ba2c <Det_ReportRuntimeError+0x70>)
    ba0e:	9b03      	ldr	r3, [sp, #12]
    ba10:	4413      	add	r3, r2
    ba12:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba16:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ba18:	2300      	movs	r3, #0
}
    ba1a:	4618      	mov	r0, r3
    ba1c:	b004      	add	sp, #16
    ba1e:	bd10      	pop	{r4, pc}
    ba20:	1fff905c 	.word	0x1fff905c
    ba24:	1fff903c 	.word	0x1fff903c
    ba28:	1fff9040 	.word	0x1fff9040
    ba2c:	1fff9044 	.word	0x1fff9044

0000ba30 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    ba30:	b510      	push	{r4, lr}
    ba32:	b084      	sub	sp, #16
    ba34:	4604      	mov	r4, r0
    ba36:	4608      	mov	r0, r1
    ba38:	4611      	mov	r1, r2
    ba3a:	461a      	mov	r2, r3
    ba3c:	4623      	mov	r3, r4
    ba3e:	f8ad 3006 	strh.w	r3, [sp, #6]
    ba42:	4603      	mov	r3, r0
    ba44:	f88d 3005 	strb.w	r3, [sp, #5]
    ba48:	460b      	mov	r3, r1
    ba4a:	f88d 3004 	strb.w	r3, [sp, #4]
    ba4e:	4613      	mov	r3, r2
    ba50:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ba54:	f7f5 f8b6 	bl	bc4 <Sys_GetCoreID>
    ba58:	4603      	mov	r3, r0
    ba5a:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    ba5c:	490d      	ldr	r1, [pc, #52]	; (ba94 <Det_ReportTransientFault+0x64>)
    ba5e:	9b03      	ldr	r3, [sp, #12]
    ba60:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ba64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    ba68:	4a0b      	ldr	r2, [pc, #44]	; (ba98 <Det_ReportTransientFault+0x68>)
    ba6a:	9b03      	ldr	r3, [sp, #12]
    ba6c:	4413      	add	r3, r2
    ba6e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ba72:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    ba74:	4a09      	ldr	r2, [pc, #36]	; (ba9c <Det_ReportTransientFault+0x6c>)
    ba76:	9b03      	ldr	r3, [sp, #12]
    ba78:	4413      	add	r3, r2
    ba7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ba7e:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    ba80:	4a07      	ldr	r2, [pc, #28]	; (baa0 <Det_ReportTransientFault+0x70>)
    ba82:	9b03      	ldr	r3, [sp, #12]
    ba84:	4413      	add	r3, r2
    ba86:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ba8a:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ba8c:	2300      	movs	r3, #0
}
    ba8e:	4618      	mov	r0, r3
    ba90:	b004      	add	sp, #16
    ba92:	bd10      	pop	{r4, pc}
    ba94:	1fff9054 	.word	0x1fff9054
    ba98:	1fff9048 	.word	0x1fff9048
    ba9c:	1fff904c 	.word	0x1fff904c
    baa0:	1fff9050 	.word	0x1fff9050

0000baa4 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    baa4:	bf00      	nop
    baa6:	4770      	bx	lr

0000baa8 <Clock_Ip_au8DividerCallbackIndex>:
    baa8:	0c00 0e0d 0201 0603 0409 0a07 0805 000b     ................

0000bab8 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000bac8 <Clock_Ip_au8XoscCallbackIndex>:
    bac8:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000bad8 <Clock_Ip_au8IrcoscCallbackIndex>:
    bad8:	0100 0302 0004 0000 0000 0000 0000 0000     ................

0000bae8 <Clock_Ip_au8GateCallbackIndex>:
    bae8:	0200 0601 0301 0104 0500 0000 0000 0000     ................

0000baf8 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000bb08 <Clock_Ip_au8PllCallbackIndex>:
    bb08:	0100 0000 0000 0000 0000 0000 0000 0000     ................

0000bb18 <Clock_Ip_au8SelectorCallbackIndex>:
    bb18:	0800 0a09 0109 0302 0504 0706 0000 0000     ................

0000bb28 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000bb38 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000bb48 <Clock_Ip_au8ClockFeatures>:
	...
    bb58:	0000 0100 0000 0000 0000 0000 0002 0000     ................
    bb68:	0000 0000 0300 0000 0000 0000 0000 0004     ................
    bb78:	0000 0000 0000 0500 0000 0000 0000 0000     ................
    bb88:	0006 0000 0000 0000 0100 0000 0000 0000     ................
    bb98:	0000 0001 0000 0000 0000 0400 0000 0000     ................
    bba8:	0000 0000 0005 0000 0001 0000 0401 0000     ................
    bbb8:	0200 0000 0100 0005 0000 0003 0000 0402     ................
    bbc8:	0000 0400 0000 0200 0005 0000 0005 0000     ................
    bbd8:	0403 0000 0600 0000 0300 0005 0000 0007     ................
    bbe8:	0000 0500 0000 0000 0000 0000 0006 0000     ................
	...
    bc28:	0000 0005 0000 0000 0000 0600 0100 0000     ................
    bc38:	0000 0000 0007 0003 0000 0000 0000 0000     ................
    bc48:	0000 0000 0000 0006 0000 0000 0000 0700     ................
    bc58:	0100 0000 0000 0000 0008 0003 0000 0000     ................
	...
    bc70:	0000 0009 0000 0000 0000 0a00 0100 0000     ................
    bc80:	0000 0000 000b 0003 0000 0000 0000 0000     ................
    bc90:	0000 0000 0000 000c 0000 0000 0000 0d00     ................
    bca0:	0100 0000 0000 0000 000e 0003 0000 0000     ................
    bcb0:	0800 0000 0000 0000 0000 0009 0000 0000     ................
    bcc0:	0000 0a00 0000 0000 0000 0000 000b 0000     ................
    bcd0:	0000 0000 0b01 0000 0000 0000 0200 000b     ................
    bce0:	0000 0000 0000 0b03 0000 0000 0000 0000     ................
	...
    bcf8:	0400 0000 003b 003b 0000 0004 2700 2700     ....;.;......'.'
    bd08:	0000 0100 0000 0000 0000 0000 0007 0000     ................
    bd18:	7300 0000 0700 0000 0000 0032 0000 0009     .s........2.....
    bd28:	0000 0200 0000 0700 0000 0000 0021 0000     ............!...
    bd38:	0009 0000 0400 0000 0900 0000 0000 0003     ................
    bd48:	0000 0007 0000 6100 0000 0700 0000 0000     .......a........
    bd58:	0024 0000 0007 0000 2500 0000 0700 0000     $........%......
    bd68:	0000 002b 0000 0004 5a00 5a00 0000 0700     ..+......Z.Z....
    bd78:	0000 0000 0020 0000 0004 3800 3800 0000     .... ......8.8..
    bd88:	0400 0000 0039 0039 0000 0004 3a00 3a00     ....9.9......:.:
    bd98:	0000 0400 0000 0026 0026 0000 0004 6600     ......&.&......f
    bda8:	6600 0000 0400 0000 0037 0037 0000 0004     .f......7.7.....
    bdb8:	2c00 2c00 0000 0400 0000 002d 002d 0000     .,.,......-.-...
    bdc8:	0004 2e00 2e00 0000 0200 0000 4040 0040     ............@@@.
    bdd8:	0000 0004 6a00 6a00 0000 0400 0000 006b     .....j.j......k.
    bde8:	006b 0000 0004 6c00 6c00 0000 0900 0000     k......l.l......
    bdf8:	0000 0001 0000 0009 0000 0000 0000 0700     ................
    be08:	0000 0000 0036 0000 0007 0000 3100 0000     ....6........1..
    be18:	0700 0000 0000 0049 0000 0007 0000 4a00     ......I........J
    be28:	0000 0700 0000 0000 004b 0000 0007 0000     ........K.......
    be38:	4c00 0000 0700 0000 0000 004d 0000 0007     .L........M.....
    be48:	0000 3d00 0000 0300 0000 0000 0000 0000     ...=............

0000be58 <Clock_Ip_au16SelectorEntryHardwareValue>:
    be58:	0a03 0101 0001 0101 0002 0404 0603 0200     ................
    be68:	0810 0001 0100 0202 0000 0000 0007 0000     ................
    be78:	0009 0000 0000 0000 0c0e 0000 0000 0000     ................
	...

0000beb0 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    beb0:	0000 0002 0300 0000 0601 0000 0000 0000     ................
	...

0000bee0 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    bee0:	0700 0000 0000 0000 0000 0202 0303 0101     ................
    bef0:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000bf10 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    bf10:	0001 0000 0000 0000 0000 0202 0303 0101     ................
    bf20:	0606 0302 0000 0000 0000 0000 0000 0000     ................
	...

0000bf40 <Clock_Ip_au8DividerValueHardwareValue>:
    bf40:	0100 0002 0003 0000 0004 0000 0000 0000     ................
    bf50:	0005 0000 0000 0000 0000 0000 0000 0000     ................
    bf60:	0006 0000 0000 0000 0000 0000 0000 0000     ................
	...
    bf80:	0007 0000                                   ....

0000bf84 <Clock_Ip_apxScgPeriphAsyncDivs>:
    bf84:	4204 4006 4304 4006 4104 4006 4604 4006     .B.@.C.@.A.@.F.@

0000bf94 <Clock_Ip_aeSourceTypeClockName>:
    bf94:	0000 0000 0001 0000 0001 0000 0001 0000     ................
    bfa4:	0001 0000 0001 0000 0001 0000 0001 0000     ................
    bfb4:	0002 0000 0003 0000 0001 0000 0001 0000     ................
    bfc4:	0001 0000 0001 0000 0002 0000 0002 0000     ................
    bfd4:	0003 0000 0003 0000 0001 0000 0001 0000     ................
    bfe4:	0004 0000 0004 0000 0004 0000 0004 0000     ................
	...

0000c050 <Clock_Ip_aeHwPllName>:
    c050:	0009 0000                                   ....

0000c054 <Clock_Ip_aeHwDfsName>:
    c054:	0057 0000                                   W...

0000c058 <Clock_Ip_axDividerCallbacks>:
    c058:	1cd9 0000 1ce3 0000 1cfd 0000 1d17 0000     ................
    c068:	1d31 0000 1d4b 0000 1d65 0000 1d7f 0000     1...K...e.......
    c078:	1d99 0000 1db3 0000 1dcd 0000 1de7 0000     ................
    c088:	1e01 0000 1e1b 0000 1e35 0000               ........5...

0000c094 <Clock_Ip_axDividerTriggerCallbacks>:
    c094:	21a9 0000 21a9 0000                         .!...!..

0000c09c <Clock_Ip_axExtOscCallbacks>:
    c09c:	21b5 0000 21b5 0000 21b5 0000 21bf 0000     .!...!...!...!..
    c0ac:	21b5 0000 21c9 0000 21e3 0000 21fd 0000     .!...!...!...!..
    c0bc:	2281 0000 2295 0000                         ."..."..

0000c0c4 <Clock_Ip_axFracDivCallbacks>:
    c0c4:	2455 0000 2455 0000 245f 0000               U$..U$.._$..

0000c0d0 <Clock_Ip_axGateCallbacks>:
    c0d0:	2479 0000 2483 0000 2583 0000 259d 0000     y$...$...%...%..
    c0e0:	2533 0000 254d 0000 24e3 0000 24fd 0000     3%..M%...$...$..
    c0f0:	2493 0000 24ad 0000 25d3 0000 25ed 0000     .$...$...%...%..
    c100:	2623 0000 263d 0000                         #&..=&..

0000c108 <Clock_Ip_axIntOscCallbacks>:
    c108:	27e9 0000 27e9 0000 27f3 0000 27fd 0000     .'...'...'...'..
    c118:	2817 0000 2831 0000 2845 0000 285f 0000     .(..1(..E(.._(..
    c128:	2879 0000 288d 0000 28a7 0000 28c1 0000     y(...(...(...(..
    c138:	2969 0000 2983 0000 299d 0000               i)...)...)..

0000c144 <Clock_Ip_axCmuCallbacks>:
    c144:	2f39 0000 2f43 0000 2f4f 0000 2f39 0000     9/..C/..O/..9/..

0000c154 <Clock_Ip_axPllCallbacks>:
    c154:	2f59 0000 2f59 0000 2f63 0000 2f59 0000     Y/..Y/..c/..Y/..
    c164:	2f6f 0000 2f79 0000 2f93 0000 2fad 0000     o/..y/.../.../..
    c174:	3051 0000 303d 0000                         Q0..=0..

0000c17c <Clock_Ip_axPcfsCallbacks>:
    c17c:	31ad 0000                                   .1..

0000c180 <Clock_Ip_axSelectorCallbacks>:
    c180:	31b9 0000 31b9 0000 31c3 0000 31dd 0000     .1...1...1...1..
    c190:	31b9 0000 31f7 0000 3211 0000 322b 0000     .1...1...2..+2..
    c1a0:	3245 0000 325f 0000 3279 0000 3293 0000     E2.._2..y2...2..
    c1b0:	32ad 0000 32c7 0000 32e1 0000 32fb 0000     .2...2...2...2..
    c1c0:	3315 0000 332f 0000 3349 0000 3363 0000     .3../3..I3..c3..
    c1d0:	337d 0000 3397 0000                         }3...3..

0000c1d8 <ClockSource>:
    c1d8:	0000 0000 0008 0000 0002 0000 0005 0000     ................
	...
    c1f0:	0009 0000                                   ....

0000c1f4 <ResetReasonArray>:
    c1f4:	0000 0000 0001 0000 0002 0000 0003 0000     ................
    c204:	0004 0000 0005 0000 0006 0000 0007 0000     ................
    c214:	0008 0000 0009 0000 000a 0000 000b 0000     ................
    c224:	000c 0000 000d 0000 000e 0000               ............

0000c230 <Flexcan_Ip_apxBase>:
    c230:	4000 4002 5000 4002 b000 4002               .@.@.P.@...@

0000c23c <payload_code.3>:
    c23c:	0100 0302 0504 0706 0908 0909 0a09 0a0a     ................
    c24c:	0b0a 0b0b 0c0b 0c0c 0d0c 0d0d 0d0d 0d0d     ................
    c25c:	0e0d 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e 0e0e     ................
    c26c:	0f0e 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
    c27c:	000f 0000                                   ....

0000c280 <flexcanBase.2>:
    c280:	4000 4002 5000 4002 b000 4002               .@.@.P.@...@

0000c28c <maxMbNum.1>:
    c28c:	0020 0000 0010 0000 0010 0000                ...........

0000c298 <flexcanBase.0>:
    c298:	4000 4002                                   .@.@

0000c29c <Can_43_FLEXCANIpwHwChannelConfig0>:
    c29c:	c764 0000                                   d...

0000c2a0 <Can_au32HwBufferAddr_Ctrl0>:
    c2a0:	4080 4002 4090 4002                         .@.@.@.@

0000c2a8 <Can_aHwFilter_Object0>:
    c2a8:	0000 0000 0000 c000                         ........

0000c2b0 <Can_aCtrlOffsetToCtrlIDMap>:
    c2b0:	ff00 00ff                                   ....

0000c2b4 <Can_aHwObjIDToCtrlIDMap>:
    c2b4:	0000 0000                                   ....

0000c2b8 <Can_aHwObjectConfig>:
	...
    c2c4:	0001 0001 0008 0001 c2a8 0000 0000 0000     ................
    c2d4:	0000 0000 c2a0 0000 0001 0000 0001 0000     ................
    c2e4:	0000 0000 0001 0001 0008 0000 0000 0000     ................
    c2f4:	0003 0000 0001 0000 c2a4 0000               ............

0000c300 <Can_aBaudrateConfig_Ctrl0>:
    c300:	0000 0403 0005 001d 0000 0000 0000 0000     ................
	...

0000c318 <Can_apHwObject_Ctrl0>:
    c318:	c2b8 0000 c2dc 0000                         ........

0000c320 <Can_aControllerConfig>:
    c320:	0000 0000 4000 4002 0101 0000 ffff ffff     .....@.@........
	...
    c33c:	0000 0001 c300 0000 c29c 0000 0002 0000     ................
    c34c:	c318 0000                                   ....

0000c350 <Can_apController>:
    c350:	c320 0000                                    ...

0000c354 <Can_43_FLEXCAN_Config>:
    c354:	0000 0000 0001 0000 c2b0 0000 c2b4 0000     ................
    c364:	c2b8 0000 c350 0000                         ....P...

0000c36c <Mcu_aClockConfigPB>:
	...
    c374:	0101 1c00 0010 0400 0029 0100 0005 0000     ........).......
    c384:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    c394:	0000 0000 0008 0000 1200 007a 0001 0000     ..........z.....
    c3a4:	0001 0000 0000 0000 0057 0000 0000 0000     ........W.......
    c3b4:	0057 0000 0000 0000 0000 0000 0000 0000     W...............
	...
    c3d4:	0019 0000 0005 0000 001a 0000 0002 0000     ................
    c3e4:	001b 0000 0005 0000 002a 0000 0005 0000     ........*.......
    c3f4:	0028 0000 000e 0000 0029 0000 0001 0000     (.......).......
    c404:	0056 0000 001c 0000 0032 0000 002a 0000     V.......2...*...
    c414:	002b 0000 0014 0000 002c 0000 0014 0000     +.......,.......
    c424:	002d 0000 0014 0000 002e 0000 0014 0000     -...............
    c434:	003f 0000 0000 0000 0040 0000 0000 0000     ?.......@.......
    c444:	0041 0000 0000 0000 0042 0000 0000 0000     A.......B.......
    c454:	0031 0000 0000 0000 0045 0000 0000 0000     1.......E.......
    c464:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    c474:	0044 0000 0000 0000 0030 0000 0000 0000     D.......0.......
    c484:	003d 0000 0000 0000 0043 0000 0000 0000     =.......C.......
    c494:	0049 0000 0000 0000 004a 0000 0000 0000     I.......J.......
    c4a4:	004b 0000 0000 0000 0048 0000 0000 0000     K.......H.......
    c4b4:	000c 0000 0001 0000 0000 0000 000d 0000     ................
    c4c4:	0002 0000 0000 0000 000e 0000 0001 0000     ................
    c4d4:	0000 0000 000f 0000 0001 0000 0000 0000     ................
    c4e4:	001d 0000 0001 0000 0000 0000 001e 0000     ................
    c4f4:	0008 0000 0000 0000 001f 0000 0001 0000     ................
    c504:	0000 0000 0021 0000 0001 0000 0000 0000     ....!...........
    c514:	0022 0000 0002 0000 0000 0000 0023 0000     "...........#...
    c524:	0001 0000 0000 0000 0025 0000 0003 0000     ........%.......
    c534:	0000 0000 0026 0000 0004 0000 0000 0000     ....&...........
    c544:	0027 0000 0002 0000 0000 0000 0032 0000     '...........2...
    c554:	0001 0000 0000 0000 0048 0000 0001 0000     ........H.......
    c564:	0001 0000 0056 0000 0001 0000 0001 0000     ....V...........
    c574:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    c58c:	0057 0000 0000 0000 0000 0000 0057 0000     W...........W...
	...
    c5a4:	0057 0000 0000 0000 0057 0000 0057 0000     W.......W...W...
	...
    c5c0:	0014 0000 7d00 0000 0015 0000 7d00 0000     .....}.......}..
    c5d0:	0016 0000 7d00 0000 0017 0000 8000 0000     .....}..........
    c5e0:	0012 0000 0001 0000 0013 0000 0001 0000     ................
    c5f0:	0030 0000 0000 0000 0031 0000 0000 0000     0.......1.......
    c600:	0032 0000 0000 0000 0033 0000 0000 0000     2.......3.......
    c610:	0034 0000 0000 0000 0035 0000 0001 0000     4.......5.......
    c620:	0036 0000 0000 0000 0037 0000 0001 0000     6.......7.......
    c630:	0038 0000 0001 0000 0039 0000 0000 0000     8.......9.......
    c640:	003a 0000 0001 0000 003b 0000 0000 0000     :.......;.......
    c650:	003c 0000 0000 0000 003d 0000 0000 0000     <.......=.......
    c660:	003e 0000 0000 0000 003f 0000 0000 0000     >.......?.......
    c670:	0040 0000 0000 0000 0041 0000 0000 0000     @.......A.......
    c680:	0042 0000 0000 0000 0043 0000 0000 0000     B.......C.......
    c690:	0044 0000 0000 0000 0045 0000 0000 0000     D.......E.......
    c6a0:	0046 0000 0000 0000 0047 0000 0000 0000     F.......G.......
    c6b0:	0048 0000 0000 0000 0049 0000 0000 0000     H.......I.......
    c6c0:	004a 0000 0000 0000 004b 0000 0000 0000     J.......K.......
    c6d0:	004c 0000 0001 0000 004d 0000 0001 0000     L.......M.......
    c6e0:	004e 0000 0000 0000 004f 0000 0000 0000     N.......O.......
    c6f0:	0050 0000 0001 0000 0051 0000 0001 0000     P.......Q.......
    c700:	0052 0000 0001 0000 0053 0000 0001 0000     R.......S.......
    c710:	0054 0000 0001 0000 0055 0000 0000 0000     T.......U.......
    c720:	0056 0000 0001 0000 0057 0000 0000 0000     V.......W.......
    c730:	0000 0000 0057 0000 0000 0000 0057 0000     ....W.......W...
	...

0000c764 <Flexcan_aCtrlConfigPB>:
    c764:	0002 0000 0000 0000 0000 0000 0002 0000     ................
    c774:	0040 0000 0000 0000 0100 0000 0003 0000     @...............
    c784:	0004 0000 0005 0000 001d 0000 0000 0000     ................
    c794:	0004 0000 0004 0000 0005 0000 001d 0000     ................
	...
    c7b0:	66d5 0000                                   .f..

0000c7b4 <Mcu_Config>:
    c7b4:	005a 0000 0000 0000 0001 0000 0001 0000     Z...............
    c7c4:	c7ec 0000 c36c 0000 c7f8 0000               ....l.......

0000c7d0 <OsIf_xPredefinedConfig>:
    c7d0:	0000 0000 6c00 02dc                         .....l..

0000c7d8 <OsIf_apxPredefinedConfig>:
    c7d8:	c7d0 0000                                   ....

0000c7dc <Power_Ip_RCM_ConfigPB>:
	...

0000c7e4 <Power_Ip_PMC_ConfigPB>:
    c7e4:	0000 0000                                   ....

0000c7e8 <Power_Ip_SMC_ConfigPB>:
    c7e8:	0000 0000                                   ....

0000c7ec <Power_Ip_aModeConfigPB>:
	...

0000c7f8 <Power_Ip_HwIPsConfigPB>:
    c7f8:	c7dc 0000 c7e4 0000 c7e8 0000               ............

0000c804 <__INIT_TABLE>:
    c804:	00000002 	.word	0x00000002
    c808:	1fff8b10 	.word	0x1fff8b10
    c80c:	0000c82c 	.word	0x0000c82c
    c810:	0000c848 	.word	0x0000c848
    c814:	1fff8800 	.word	0x1fff8800
    c818:	00000000 	.word	0x00000000
    c81c:	00000310 	.word	0x00000310

0000c820 <__ZERO_TABLE>:
    c820:	00000001 	.word	0x00000001
    c824:	1fff8b30 	.word	0x1fff8b30
    c828:	1fff9070 	.word	0x1fff9070
