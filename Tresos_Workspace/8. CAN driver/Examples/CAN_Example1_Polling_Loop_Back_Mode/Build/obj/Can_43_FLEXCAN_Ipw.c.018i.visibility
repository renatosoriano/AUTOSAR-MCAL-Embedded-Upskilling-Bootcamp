
Marking local functions:


Marking externally visible functions: Can_43_FLEXCAN_Ipw_MainFunction_Mode/23 Can_43_FLEXCAN_Ipw_MainFunction_BusOff/22 Can_43_FLEXCAN_Ipw_MainFunction_Read/21 Can_43_FLEXCAN_Ipw_MainFunction_Write/20 Can_43_FLEXCAN_Ipw_Write/18 Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter/17 Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter/16 Can_43_FLEXCAN_Ipw_GetControllerErrorState/15 Can_43_FLEXCAN_Ipw_EnableControllerInterrupts/14 Can_43_FLEXCAN_Ipw_DisableControllerInterrupts/13 Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 Can_43_FLEXCAN_Ipw_DeInit/9 Can_43_FLEXCAN_Ipw_Init/8


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

CanIf_ControllerModeIndication/56 (CanIf_ControllerModeIndication) @0e820620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Mode/23 Can_43_FLEXCAN_Ipw_MainFunction_Mode/23 
  Calls: 
FlexCAN_Ip_GetStartMode_Privileged/55 (FlexCAN_Ip_GetStartMode_Privileged) @0e820540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Mode/23 Can_43_FLEXCAN_Ipw_MainFunction_Mode/23 
  Calls: 
FlexCAN_Ip_MainFunctionBusOff_Privileged/54 (FlexCAN_Ip_MainFunctionBusOff_Privileged) @0e820380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_BusOff/22 
  Calls: 
FlexCAN_Ip_Receive/53 (FlexCAN_Ip_Receive) @0e8201c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Read/21 
  Calls: 
FlexCAN_Ip_GetStopMode_Privileged/52 (FlexCAN_Ip_GetStopMode_Privileged) @0e8200e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Read/21 
  Calls: 
CanIf_TxConfirmation/51 (CanIf_TxConfirmation) @0e813ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Write/20 
  Calls: 
FlexCAN_Ip_MainFunctionWrite/50 (FlexCAN_Ip_MainFunctionWrite) @0e813e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Write/20 
  Calls: 
FlexCAN_Ip_ConfigRxMb/49 (FlexCAN_Ip_ConfigRxMb) @0e813c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_InitRx/19 
  Calls: 
FlexCAN_Ip_SetRxMaskType_Privileged/48 (FlexCAN_Ip_SetRxMaskType_Privileged) @0e813b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_InitRx/19 
  Calls: 
FlexCAN_Ip_Send/47 (FlexCAN_Ip_Send) @0e8139a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_Write/18 
  Calls: 
FlexCAN_Ip_GetControllerRxErrorCounter/46 (FlexCAN_Ip_GetControllerRxErrorCounter) @0e8137e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter/17 
  Calls: 
FlexCAN_Ip_GetControllerTxErrorCounter/45 (FlexCAN_Ip_GetControllerTxErrorCounter) @0e813620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter/16 
  Calls: 
FlexCAN_Ip_GetErrorStatus/44 (FlexCAN_Ip_GetErrorStatus) @0e813460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_GetControllerErrorState/15 
  Calls: 
FlexCAN_Ip_AbortTransfer/43 (FlexCAN_Ip_AbortTransfer) @0e8130e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 
  Calls: 
FlexCAN_Ip_EnterFreezeMode_Privileged/42 (FlexCAN_Ip_EnterFreezeMode_Privileged) @0e813000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 
  Calls: 
FlexCAN_Ip_SetStartMode_Privileged/41 (FlexCAN_Ip_SetStartMode_Privileged) @0e805d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_SetControlerErrorInit/10 
  Calls: 
FlexCAN_Ip_EnableInterrupts_Privileged/40 (FlexCAN_Ip_EnableInterrupts_Privileged) @0e805c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_EnableControllerInterrupts/14 Can_43_FLEXCAN_Ipw_SetControlerErrorInit/10 
  Calls: 
FlexCAN_Ip_Deinit_Privileged/39 (FlexCAN_Ip_Deinit_Privileged) @0e805a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_DeInit/9 
  Calls: 
FlexCAN_Ip_SetStopMode_Privileged/38 (FlexCAN_Ip_SetStopMode_Privileged) @0e8058c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 Can_43_FLEXCAN_Ipw_Init/8 
  Calls: 
FlexCAN_Ip_DisableInterrupts_Privileged/37 (FlexCAN_Ip_DisableInterrupts_Privileged) @0e8057e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_DisableControllerInterrupts/13 Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 Can_43_FLEXCAN_Ipw_Init/8 
  Calls: 
FlexCAN_Ip_Init_Privileged/36 (FlexCAN_Ip_Init_Privileged) @0e805700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 Can_43_FLEXCAN_Ipw_Init/8 
  Calls: 
FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/35 (FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged) @0e805540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_Init/8 Can_Ipw_InitBaudrate/7 
  Calls: 
FlexCAN_Ip_SetTDCOffset_Privileged/34 (FlexCAN_Ip_SetTDCOffset_Privileged) @0e805460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_Init/8 Can_Ipw_InitBaudrate/7 
  Calls: 
FlexCAN_Ip_GetTransferStatus/33 (FlexCAN_Ip_GetTransferStatus) @0e8052a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Read/21 Can_43_FLEXCAN_Ipw_MainFunction_Write/20 Can_43_FLEXCAN_Ipw_Write/18 Can_Ipw_ProcessLegacyFifoPolling/6 
  Calls: 
FlexCAN_Ip_MainFunctionRead/32 (FlexCAN_Ip_MainFunctionRead) @0e8051c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Read/21 Can_Ipw_ProcessLegacyFifoPolling/6 
  Calls: 
FlexCAN_Ip_RxFifo/31 (FlexCAN_Ip_RxFifo) @0e8050e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_ProcessLegacyFifoPolling/6 
  Calls: 
FlexCAN_Ip_ClearBuffStatusFlag/30 (FlexCAN_Ip_ClearBuffStatusFlag) @0e805000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_ProcessLegacyFifoPolling/6 Can_Ipw_ProcessLegacyFifoPolling/6 
  Calls: 
FlexCAN_Ip_GetBuffStatusFlag/29 (FlexCAN_Ip_GetBuffStatusFlag) @0e7dfb60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_ProcessLegacyFifoPolling/6 Can_Ipw_ProcessLegacyFifoPolling/6 Can_Ipw_ProcessLegacyFifoPolling/6 Can_Ipw_ProcessLegacyFifoPolling/6 
  Calls: 
FlexCAN_Ip_ConfigRxFifo_Privileged/28 (FlexCAN_Ip_ConfigRxFifo_Privileged) @0e7df0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_InitLegacyFifoFilter/5 
  Calls: 
FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/27 (FlexCAN_Ip_SetRxFifoGlobalMask_Privileged) @0e7dfee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_InitLegacyFifoFilter/5 
  Calls: 
FlexCAN_Ip_SetRxIndividualMask_Privileged/26 (FlexCAN_Ip_SetRxIndividualMask_Privileged) @0e7dfe00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_InitRx/19 Can_Ipw_InitLegacyFifoFilter/5 
  Calls: 
CanIf_RxIndication/25 (CanIf_RxIndication) @0e7dfa80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_ParseData/4 
  Calls: 
Det_ReportRuntimeError/24 (Det_ReportRuntimeError) @0e7df9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_ProcessLegacyFifoPolling/6 Can_Ipw_ParseData/4 
  Calls: 
Can_43_FLEXCAN_Ipw_MainFunction_Mode/23 (Can_43_FLEXCAN_Ipw_MainFunction_Mode) @0e7df540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: CanIf_ControllerModeIndication/56 FlexCAN_Ip_GetStartMode_Privileged/55 CanIf_ControllerModeIndication/56 FlexCAN_Ip_GetStartMode_Privileged/55 
Can_43_FLEXCAN_Ipw_MainFunction_BusOff/22 (Can_43_FLEXCAN_Ipw_MainFunction_BusOff) @0e7df2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_MainFunctionBusOff_Privileged/54 
Can_43_FLEXCAN_Ipw_MainFunction_Read/21 (Can_43_FLEXCAN_Ipw_MainFunction_Read) @0e7df000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_Ipw_ProcessLegacyFifoPolling/6 Can_Ipw_ParseData/4 FlexCAN_Ip_GetTransferStatus/33 FlexCAN_Ip_MainFunctionRead/32 FlexCAN_Ip_Receive/53 FlexCAN_Ip_GetStopMode_Privileged/52 
Can_43_FLEXCAN_Ipw_MainFunction_Write/20 (Can_43_FLEXCAN_Ipw_MainFunction_Write) @0e7d2b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_xStatus0/0 (addr) Can_Ipw_au16TxPduId/2 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: CanIf_TxConfirmation/51 FlexCAN_Ip_GetTransferStatus/33 FlexCAN_Ip_MainFunctionWrite/50 
Can_Ipw_InitRx/19 (Can_Ipw_InitRx) @0e7d2620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 Can_43_FLEXCAN_Ipw_Init/8 
  Calls: Can_Ipw_InitLegacyFifoFilter/5 FlexCAN_Ip_SetRxIndividualMask_Privileged/26 FlexCAN_Ip_ConfigRxMb/49 FlexCAN_Ip_SetRxMaskType_Privileged/48 
Can_43_FLEXCAN_Ipw_Write/18 (Can_43_FLEXCAN_Ipw_Write) @0e7d2d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_au16TxPduId/2 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_Send/47 FlexCAN_Ip_GetTransferStatus/33 
Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter/17 (Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter) @0e7d2a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_GetControllerRxErrorCounter/46 
Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter/16 (Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter) @0e7d27e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_GetControllerTxErrorCounter/45 
Can_43_FLEXCAN_Ipw_GetControllerErrorState/15 (Can_43_FLEXCAN_Ipw_GetControllerErrorState) @0e7d2540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_GetErrorStatus/44 
Can_43_FLEXCAN_Ipw_EnableControllerInterrupts/14 (Can_43_FLEXCAN_Ipw_EnableControllerInterrupts) @0e7d22a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_abIsInterruptEnabled/3 (read) Can_Ipw_abIsInterruptEnabled/3 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_EnableInterrupts_Privileged/40 
Can_43_FLEXCAN_Ipw_DisableControllerInterrupts/13 (Can_43_FLEXCAN_Ipw_DisableControllerInterrupts) @0e7d2000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_abIsInterruptEnabled/3 (read) Can_Ipw_abIsInterruptEnabled/3 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_DisableInterrupts_Privileged/37 
Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 (Can_43_FLEXCAN_Ipw_SetControllerToStopMode) @0e7439a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_abIsInterruptEnabled/3 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_SetStopMode_Privileged/38 FlexCAN_Ip_AbortTransfer/43 FlexCAN_Ip_AbortTransfer/43 FlexCAN_Ip_DisableInterrupts_Privileged/37 FlexCAN_Ip_EnterFreezeMode_Privileged/42 
Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 (Can_43_FLEXCAN_Ipw_SetControllerToStartMode) @0e743000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_xStatus0/0 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_43_FLEXCAN_Ipw_SetControlerErrorInit/10 Can_Ipw_InitRx/19 Can_Ipw_InitBaudrate/7 FlexCAN_Ip_DisableInterrupts_Privileged/37 FlexCAN_Ip_Init_Privileged/36 
Can_43_FLEXCAN_Ipw_SetControlerErrorInit/10 (Can_43_FLEXCAN_Ipw_SetControlerErrorInit) @0e743b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Can_Ipw_abIsInterruptEnabled/3 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 
  Calls: FlexCAN_Ip_SetStartMode_Privileged/41 FlexCAN_Ip_EnableInterrupts_Privileged/40 
Can_43_FLEXCAN_Ipw_DeInit/9 (Can_43_FLEXCAN_Ipw_DeInit) @0e7438c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_Deinit_Privileged/39 
Can_43_FLEXCAN_Ipw_Init/8 (Can_43_FLEXCAN_Ipw_Init) @0e743620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_xStatus0/0 (addr) Can_Ipw_abIsInterruptEnabled/3 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_SetStopMode_Privileged/38 Can_Ipw_InitRx/19 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/35 FlexCAN_Ip_SetTDCOffset_Privileged/34 FlexCAN_Ip_DisableInterrupts_Privileged/37 FlexCAN_Ip_Init_Privileged/36 
Can_Ipw_InitBaudrate/7 (Can_Ipw_InitBaudrate) @0e5b9ee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 
  Calls: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/35 FlexCAN_Ip_SetTDCOffset_Privileged/34 
Can_Ipw_ProcessLegacyFifoPolling/6 (Can_Ipw_ProcessLegacyFifoPolling) @0e5b9e00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Read/21 
  Calls: FlexCAN_Ip_GetBuffStatusFlag/29 Can_Ipw_ParseData/4 FlexCAN_Ip_GetTransferStatus/33 FlexCAN_Ip_MainFunctionRead/32 FlexCAN_Ip_RxFifo/31 FlexCAN_Ip_ClearBuffStatusFlag/30 FlexCAN_Ip_GetBuffStatusFlag/29 FlexCAN_Ip_ClearBuffStatusFlag/30 Det_ReportRuntimeError/24 FlexCAN_Ip_GetBuffStatusFlag/29 FlexCAN_Ip_GetBuffStatusFlag/29 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
Can_Ipw_InitLegacyFifoFilter/5 (Can_Ipw_InitLegacyFifoFilter) @0e5b9a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_Ipw_InitRx/19 
  Calls: FlexCAN_Ip_ConfigRxFifo_Privileged/28 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/27 FlexCAN_Ip_SetRxIndividualMask_Privileged/26 
Can_Ipw_ParseData/4 (Can_Ipw_ParseData) @0e5b97e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Read/21 Can_Ipw_ProcessLegacyFifoPolling/6 
  Calls: CanIf_RxIndication/25 Det_ReportRuntimeError/24 
Can_Ipw_abIsInterruptEnabled/3 (Can_Ipw_abIsInterruptEnabled) @0e5b2a68
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Can_43_FLEXCAN_Ipw_Init/8 (write) Can_43_FLEXCAN_Ipw_SetControlerErrorInit/10 (read) Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 (read) Can_43_FLEXCAN_Ipw_DisableControllerInterrupts/13 (read) Can_43_FLEXCAN_Ipw_DisableControllerInterrupts/13 (write) Can_43_FLEXCAN_Ipw_EnableControllerInterrupts/14 (read) Can_43_FLEXCAN_Ipw_EnableControllerInterrupts/14 (write) 
  Availability: available
  Varpool flags:
Can_Ipw_au16TxPduId/2 (Can_Ipw_au16TxPduId) @0e5b28b8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Can_43_FLEXCAN_Ipw_Write/18 (write) Can_43_FLEXCAN_Ipw_MainFunction_Write/20 (read) 
  Availability: available
  Varpool flags:
Can_Ipw_apxStatus/1 (Can_Ipw_apxStatus) @0e5b2828
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Can_Ipw_xStatus0/0 (addr) 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
Can_Ipw_xStatus0/0 (Can_Ipw_xStatus0) @0e5b20d8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Can_Ipw_apxStatus/1 (addr) Can_43_FLEXCAN_Ipw_Init/8 (addr) Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 (addr) Can_43_FLEXCAN_Ipw_MainFunction_Write/20 (addr) 
  Availability: available
  Varpool flags:
Can_43_FLEXCAN_Ipw_MainFunction_Mode (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, Can_ControllerStateType * Can_pControllerState)
{
  <bb 2> :
  _1 = *Can_pControllerState;
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = Can_pControllerConfig->Can_u8ControllerOffset;
  _3 = FlexCAN_Ip_GetStartMode_Privileged (_2);
  _4 = ~_3;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  *Can_pControllerState = 2;
  _5 = Can_pControllerConfig->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_5, 2);
  goto <bb 8>; [INV]

  <bb 5> :
  _6 = *Can_pControllerState;
  if (_6 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _7 = Can_pControllerConfig->Can_u8ControllerOffset;
  _8 = FlexCAN_Ip_GetStartMode_Privileged (_7);
  if (_8 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  *Can_pControllerState = 1;
  _9 = Can_pControllerConfig->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_9, 1);

  <bb 8> :
  return;

}


Can_43_FLEXCAN_Ipw_MainFunction_BusOff (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  <bb 2> :
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_MainFunctionBusOff_Privileged (_1);
  return;

}


Can_43_FLEXCAN_Ipw_MainFunction_Read (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig)
{
  struct PduInfoType CanIf_PduInfo;
  struct Can_HwType CanIf_Mailbox;
  struct Flexcan_Ip_MsgBuffType ReceivedDataBuffer;

  <bb 2> :
  ReceivedDataBuffer.cs = 0;
  ReceivedDataBuffer.msgId = 0;
  ReceivedDataBuffer.dataLen = 0;
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  _2 = FlexCAN_Ip_GetStopMode_Privileged (_1);
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _4 = Can_pHwObjectConfig->Can_eReceiveType;
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _5 = Can_pControllerConfig->Can_u8ControllerOffset;
  _6 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  _7 = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
  FlexCAN_Ip_Receive (_5, _6, &ReceivedDataBuffer, _7);
  _8 = Can_pControllerConfig->Can_u8ControllerOffset;
  _9 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  FlexCAN_Ip_MainFunctionRead (_8, _9);
  _10 = Can_pControllerConfig->Can_u8ControllerOffset;
  _11 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  _12 = FlexCAN_Ip_GetTransferStatus (_10, _11);
  if (_12 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  Can_Ipw_ParseData (&CanIf_Mailbox, &CanIf_PduInfo, &ReceivedDataBuffer, Can_pControllerConfig, Can_pHwObjectConfig);
  goto <bb 8>; [INV]

  <bb 6> :
  _13 = Can_pHwObjectConfig->Can_eReceiveType;
  if (_13 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Can_Ipw_ProcessLegacyFifoPolling (&CanIf_Mailbox, &CanIf_PduInfo, &ReceivedDataBuffer, Can_pControllerConfig, Can_pHwObjectConfig);

  <bb 8> :
  ReceivedDataBuffer = {CLOBBER};
  CanIf_Mailbox = {CLOBBER};
  CanIf_PduInfo = {CLOBBER};
  return;

}


Can_43_FLEXCAN_Ipw_MainFunction_Write (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig)
{
  uint8 u8ObjIdx;

  <bb 2> :
  u8ObjIdx = 0;

  <bb 3> :
  _1 = Can_pControllerConfig->Can_u8ControllerID;
  _2 = (int) _1;
  _3 = &Can_Ipw_xStatus0;
  _4 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  _5 = (int) _4;
  _6 = (int) u8ObjIdx;
  _7 = _5 + _6;
  _8 = _3->mbs[_7].state;
  if (_8 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _9 = Can_pControllerConfig->Can_u8ControllerOffset;
  _10 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  _11 = u8ObjIdx + _10;
  FlexCAN_Ip_MainFunctionWrite (_9, _11);
  _12 = Can_pControllerConfig->Can_u8ControllerOffset;
  _13 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  _14 = u8ObjIdx + _13;
  _15 = FlexCAN_Ip_GetTransferStatus (_12, _14);
  if (_15 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _16 = Can_pControllerConfig->Can_u8ControllerID;
  _17 = (int) _16;
  _18 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  _19 = (int) _18;
  _20 = (int) u8ObjIdx;
  _21 = _19 + _20;
  _22 = Can_Ipw_au16TxPduId[_17][_21];
  CanIf_TxConfirmation (_22);

  <bb 6> :
  u8ObjIdx.8_23 = u8ObjIdx;
  u8ObjIdx = u8ObjIdx.8_23 + 1;
  _24 = Can_pHwObjectConfig->Can_u8ObjectCount;
  if (u8ObjIdx < _24)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}


Can_Ipw_InitRx (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
  struct Flexcan_Ip_DataInfoType DataInfo;
  const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
  uint8 u8HwObjRefIdx;

  <bb 2> :
  u8HwObjRefIdx = 0;
  _1 = Can_pController->Can_u8ControllerOffset;
  FlexCAN_Ip_SetRxMaskType_Privileged (_1, 1);
  u8HwObjRefIdx = 0;
  goto <bb 11>; [INV]

  <bb 3> :
  _2 = Can_pController->Can_ppHwObject;
  _3 = (unsigned int) u8HwObjRefIdx;
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pHwObject = *_5;
  _6 = Can_pHwObject->Can_eReceiveType;
  if (_6 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  DataInfo.fd_enable = 0;
  DataInfo.data_length = 0;
  _7 = Can_pHwObject->Can_IdMessage;
  if (_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  DataInfo.msg_id_type = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  DataInfo.msg_id_type = 0;

  <bb 7> :
  _8 = Can_pController->Can_u8ControllerOffset;
  _9 = Can_pHwObject->Can_u8HwBufferIndex;
  _10 = Can_pHwObject->Can_pHwFilterConfig;
  _11 = _10->Can_u32HwFilterCode;
  FlexCAN_Ip_ConfigRxMb (_8, _9, &DataInfo, _11);
  _12 = Can_pController->Can_u8ControllerOffset;
  _13 = Can_pHwObject->Can_u8HwBufferIndex;
  _14 = Can_pHwObject->Can_pHwFilterConfig;
  _15 = _14->Can_u32HwFilterMask;
  FlexCAN_Ip_SetRxIndividualMask_Privileged (_12, _13, _15);

  <bb 8> :
  _16 = Can_pHwObject->Can_eReceiveType;
  if (_16 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Can_Ipw_InitLegacyFifoFilter (Can_pController, Can_pHwObject);

  <bb 10> :
  u8HwObjRefIdx.7_17 = u8HwObjRefIdx;
  u8HwObjRefIdx = u8HwObjRefIdx.7_17 + 1;

  <bb 11> :
  _18 = Can_pController->Can_u8HwObjectRefCount;
  if (u8HwObjRefIdx < _18)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  DataInfo = {CLOBBER};
  return;

}


Can_43_FLEXCAN_Ipw_Write (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig, const struct Can_PduType * PduInfo)
{
  uint8 u8ObjIdx;
  struct Flexcan_Ip_DataInfoType DataInfo;
  Flexcan_Ip_StatusType eRetVal;
  Std_ReturnType iftmp.6;
  Std_ReturnType D.6964;

  <bb 2> :
  eRetVal = 1;
  u8ObjIdx = 0;
  DataInfo.msg_id_type = 0;
  DataInfo.data_length = 0;
  DataInfo.fd_padding = 0;
  DataInfo.fd_enable = 0;
  DataInfo.enable_brs = 0;
  DataInfo.is_remote = 0;
  DataInfo.is_polling = 0;
  _1 = Can_pHwObjectConfig->Can_eReceiveType;
  if (_1 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _2 = PduInfo->id;
  _3 = _2 >> 31;
  DataInfo.msg_id_type = _3;
  _4 = Can_pHwObjectConfig->Can_u8PayloadLength;
  _5 = PduInfo->length;
  if (_4 <= _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = Can_pHwObjectConfig->Can_u8PayloadLength;
  _7 = (long unsigned int) _6;
  DataInfo.data_length = _7;
  goto <bb 6>; [INV]

  <bb 5> :
  _8 = PduInfo->length;
  _9 = (long unsigned int) _8;
  DataInfo.data_length = _9;

  <bb 6> :
  _10 = Can_pHwObjectConfig->Can_u8PaddingValue;
  DataInfo.fd_padding = _10;
  _11 = PduInfo->id;
  _12 = _11 >> 30;
  _13 = (int) _12;
  _14 = _13 & 1;
  _15 = _14 != 0;
  DataInfo.fd_enable = _15;
  _16 = Can_pControllerConfig->Can_pBaudrateConfig;
  _17 = Can_pControllerConfig->Can_u16DefaultBaudrateID;
  _18 = (unsigned int) _17;
  _19 = _18 * 22;
  _20 = _16 + _19;
  _21 = _20->Can_bBitRateSwitch;
  DataInfo.enable_brs = _21;
  DataInfo.is_remote = 0;
  _22 = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
  DataInfo.is_polling = _22;

  <bb 7> :
  _23 = Can_pControllerConfig->Can_u8ControllerOffset;
  _24 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  _25 = u8ObjIdx + _24;
  eRetVal = FlexCAN_Ip_GetTransferStatus (_23, _25);
  if (eRetVal == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _26 = Can_pControllerConfig->Can_u8ControllerID;
  _27 = (int) _26;
  _28 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  _29 = (int) _28;
  _30 = (int) u8ObjIdx;
  _31 = _29 + _30;
  _32 = PduInfo->swPduHandle;
  Can_Ipw_au16TxPduId[_27][_31] = _32;
  _33 = Can_pControllerConfig->Can_u8ControllerOffset;
  _34 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  _35 = u8ObjIdx + _34;
  _36 = PduInfo->id;
  _37 = PduInfo->sdu;
  eRetVal = FlexCAN_Ip_Send (_33, _35, &DataInfo, _36, _37);

  <bb 9> :
  u8ObjIdx.5_38 = u8ObjIdx;
  u8ObjIdx = u8ObjIdx.5_38 + 1;
  _39 = Can_pHwObjectConfig->Can_u8ObjectCount;
  if (u8ObjIdx < _39)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  if (eRetVal == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  if (eRetVal != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  if (eRetVal != 2)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  eRetVal = 1;

  <bb 14> :
  if (eRetVal != 2)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.6 = (Std_ReturnType) eRetVal;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.6 = 2;

  <bb 17> :
  D.6964 = iftmp.6;
  DataInfo = {CLOBBER};

  <bb 18> :
<L18>:
  return D.6964;

}


Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
  Std_ReturnType D.6950;

  <bb 2> :
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  _2 = FlexCAN_Ip_GetControllerRxErrorCounter (_1);
  *pValue = _2;
  D.6950 = 0;

  <bb 3> :
<L0>:
  return D.6950;

}


Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
  Std_ReturnType D.6948;

  <bb 2> :
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  _2 = FlexCAN_Ip_GetControllerTxErrorCounter (_1);
  *pValue = _2;
  D.6948 = 0;

  <bb 3> :
<L0>:
  return D.6948;

}


Can_43_FLEXCAN_Ipw_GetControllerErrorState (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
  uint32 Error;
  Std_ReturnType D.6946;

  <bb 2> :
  Error = 0;
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  Error = FlexCAN_Ip_GetErrorStatus (_1);
  _2 = Error >> 4;
  _3 = (unsigned char) _2;
  _4 = _3 & 3;
  *pValue = _4;
  D.6946 = 0;

  <bb 3> :
<L0>:
  return D.6946;

}


Can_43_FLEXCAN_Ipw_EnableControllerInterrupts (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  <bb 2> :
  _1 = Can_pControllerConfig->Can_u8ControllerID;
  _2 = (int) _1;
  _3 = Can_Ipw_abIsInterruptEnabled[_2];
  _4 = ~_3;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_EnableInterrupts_Privileged (_5);
  _6 = Can_pControllerConfig->Can_u8ControllerID;
  _7 = (int) _6;
  Can_Ipw_abIsInterruptEnabled[_7] = 1;

  <bb 4> :
  return;

}


Can_43_FLEXCAN_Ipw_DisableControllerInterrupts (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  <bb 2> :
  _1 = Can_pControllerConfig->Can_u8ControllerID;
  _2 = (int) _1;
  _3 = Can_Ipw_abIsInterruptEnabled[_2];
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_DisableInterrupts_Privileged (_4);
  _5 = Can_pControllerConfig->Can_u8ControllerID;
  _6 = (int) _5;
  Can_Ipw_abIsInterruptEnabled[_6] = 0;

  <bb 4> :
  return;

}


Can_43_FLEXCAN_Ipw_SetControllerToStopMode (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  uint8 u8Idx;
  const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
  uint8 u8HwObjRefIdx;
  Std_ReturnType eReturnValue;
  Std_ReturnType D.6940;

  <bb 2> :
  u8HwObjRefIdx = 0;
  u8Idx = 0;
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  _2 = FlexCAN_Ip_EnterFreezeMode_Privileged (_1);
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 3> :
  _3 = Can_pControllerConfig->Can_u8ControllerID;
  _4 = (int) _3;
  _5 = Can_Ipw_abIsInterruptEnabled[_4];
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_DisableInterrupts_Privileged (_6);

  <bb 5> :
  u8HwObjRefIdx = 0;
  goto <bb 11>; [INV]

  <bb 6> :
  _7 = Can_pControllerConfig->Can_ppHwObject;
  _8 = (unsigned int) u8HwObjRefIdx;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pHwObject = *_10;
  _11 = Can_pHwObject->Can_eReceiveType;
  if (_11 == 3)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  u8Idx = 0;

  <bb 8> :
  _12 = Can_pControllerConfig->Can_u8ControllerOffset;
  _13 = Can_pHwObject->Can_u8HwBufferIndex;
  _14 = u8Idx + _13;
  FlexCAN_Ip_AbortTransfer (_12, _14);
  u8Idx.3_15 = u8Idx;
  u8Idx = u8Idx.3_15 + 1;
  _16 = Can_pHwObject->Can_u8ObjectCount;
  if (u8Idx < _16)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _17 = Can_pControllerConfig->Can_u8ControllerOffset;
  _18 = Can_pHwObject->Can_u8HwBufferIndex;
  FlexCAN_Ip_AbortTransfer (_17, _18);

  <bb 10> :
  u8HwObjRefIdx.4_19 = u8HwObjRefIdx;
  u8HwObjRefIdx = u8HwObjRefIdx.4_19 + 1;

  <bb 11> :
  _20 = Can_pControllerConfig->Can_u8HwObjectRefCount;
  if (u8HwObjRefIdx < _20)
    goto <bb 6>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _21 = Can_pControllerConfig->Can_u8ControllerOffset;
  _22 = FlexCAN_Ip_SetStopMode_Privileged (_21);
  eReturnValue = (Std_ReturnType) _22;
  goto <bb 14>; [INV]

  <bb 13> :
  eReturnValue = 1;

  <bb 14> :
  D.6940 = eReturnValue;

  <bb 15> :
<L13>:
  return D.6940;

}


Can_43_FLEXCAN_Ipw_SetControllerToStartMode (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  Flexcan_Ip_StatusType eRetVal;
  Std_ReturnType D.6930;

  <bb 2> :
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  _2 = Can_pControllerConfig->Can_u8ControllerID;
  _3 = (int) _2;
  _4 = &Can_Ipw_xStatus0;
  _5 = Can_pControllerConfig->HwChannelIpConfig;
  _6 = _5->pFlexcanIpHwConfig;
  eRetVal = FlexCAN_Ip_Init_Privileged (_1, _4, _6);
  if (eRetVal == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_DisableInterrupts_Privileged (_7);
  Can_Ipw_InitBaudrate (Can_pControllerConfig);
  Can_Ipw_InitRx (Can_pControllerConfig);
  _8 = Can_43_FLEXCAN_Ipw_SetControlerErrorInit (Can_pControllerConfig);
  _9 = _8 != 0;
  eRetVal = (Flexcan_Ip_StatusType) _9;

  <bb 4> :
  D.6930 = (Std_ReturnType) eRetVal;

  <bb 5> :
<L2>:
  return D.6930;

}


Can_43_FLEXCAN_Ipw_SetControlerErrorInit (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  Flexcan_Ip_StatusType eRetVal;
  Std_ReturnType D.6926;

  <bb 2> :
  eRetVal = 0;
  _1 = Can_pControllerConfig->Can_u8ControllerID;
  _2 = (int) _1;
  _3 = Can_Ipw_abIsInterruptEnabled[_2];
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_EnableInterrupts_Privileged (_4);

  <bb 4> :
  _5 = Can_pControllerConfig->Can_u8ControllerOffset;
  eRetVal = FlexCAN_Ip_SetStartMode_Privileged (_5);
  D.6926 = (Std_ReturnType) eRetVal;

  <bb 5> :
<L2>:
  return D.6926;

}


Can_43_FLEXCAN_Ipw_DeInit (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  <bb 2> :
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_Deinit_Privileged (_1);
  return;

}


Can_43_FLEXCAN_Ipw_Init (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  Std_ReturnType eRetVal;
  Std_ReturnType D.6922;

  <bb 2> :
  eRetVal = 1;
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  _2 = Can_pControllerConfig->Can_u8ControllerID;
  _3 = (int) _2;
  _4 = &Can_Ipw_xStatus0;
  _5 = Can_pControllerConfig->HwChannelIpConfig;
  _6 = _5->pFlexcanIpHwConfig;
  _7 = FlexCAN_Ip_Init_Privileged (_1, _4, _6);
  eRetVal = (Std_ReturnType) _7;
  _8 = Can_pControllerConfig->Can_u8ControllerID;
  _9 = (int) _8;
  Can_Ipw_abIsInterruptEnabled[_9] = 1;
  if (eRetVal == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _10 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_DisableInterrupts_Privileged (_10);
  _11 = Can_pControllerConfig->Can_pBaudrateConfig;
  _12 = Can_pControllerConfig->Can_u16DefaultBaudrateID;
  _13 = (unsigned int) _12;
  _14 = _13 * 22;
  _15 = _11 + _14;
  _16 = _15->Can_bFDFrame;
  if (_16 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _17 = Can_pControllerConfig->Can_u8ControllerOffset;
  _18 = Can_pControllerConfig->Can_pBaudrateConfig;
  _19 = Can_pControllerConfig->Can_u16DefaultBaudrateID;
  _20 = (unsigned int) _19;
  _21 = _20 * 22;
  _22 = _18 + _21;
  _23 = _22->Can_bTrcvDelayEnable;
  _24 = Can_pControllerConfig->Can_pBaudrateConfig;
  _25 = Can_pControllerConfig->Can_u16DefaultBaudrateID;
  _26 = (unsigned int) _25;
  _27 = _26 * 22;
  _28 = _24 + _27;
  _29 = _28->Can_u8TrcvDelayCompOffset;
  FlexCAN_Ip_SetTDCOffset_Privileged (_17, _23, _29);

  <bb 5> :
  _30 = Can_pControllerConfig->Can_u8ControllerOffset;
  _31 = Can_pControllerConfig->Can_pBaudrateConfig;
  _32 = Can_pControllerConfig->Can_u16DefaultBaudrateID;
  _33 = (unsigned int) _32;
  _34 = _33 * 22;
  _35 = _31 + _34;
  _36 = _35->Can_u8TxArbitrationStartDelay;
  FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (_30, _36);
  Can_Ipw_InitRx (Can_pControllerConfig);

  <bb 6> :
  _37 = Can_pControllerConfig->Can_u8ControllerOffset;
  _38 = FlexCAN_Ip_SetStopMode_Privileged (_37);
  eRetVal = (Std_ReturnType) _38;
  D.6922 = eRetVal;

  <bb 7> :
<L4>:
  return D.6922;

}


Can_Ipw_InitBaudrate (const struct Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
  uint16 BaudRateConfigID;

  <bb 2> :
  BaudRateConfigID = ControllerConfig->Can_u16DefaultBaudrateID;
  _1 = ControllerConfig->Can_pBaudrateConfig;
  _2 = (unsigned int) BaudRateConfigID;
  _3 = _2 * 22;
  _4 = _1 + _3;
  _5 = _4->Can_bFDFrame;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = ControllerConfig->Can_u8ControllerOffset;
  _7 = ControllerConfig->Can_pBaudrateConfig;
  _8 = (unsigned int) BaudRateConfigID;
  _9 = _8 * 22;
  _10 = _7 + _9;
  _11 = _10->Can_bTrcvDelayEnable;
  _12 = ControllerConfig->Can_pBaudrateConfig;
  _13 = (unsigned int) BaudRateConfigID;
  _14 = _13 * 22;
  _15 = _12 + _14;
  _16 = _15->Can_u8TrcvDelayCompOffset;
  FlexCAN_Ip_SetTDCOffset_Privileged (_6, _11, _16);

  <bb 4> :
  _17 = ControllerConfig->Can_u8ControllerOffset;
  _18 = ControllerConfig->Can_pBaudrateConfig;
  _19 = (unsigned int) BaudRateConfigID;
  _20 = _19 * 22;
  _21 = _18 + _20;
  _22 = _21->Can_u8TxArbitrationStartDelay;
  FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (_17, _22);
  return;

}


Can_Ipw_ProcessLegacyFifoPolling (struct Can_HwType * CanIf_Mailbox, struct PduInfoType * CanIf_PduInfo, struct Flexcan_Ip_MsgBuffType * pReceivedDataBuffer, const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig)
{
  boolean returnResult;
  uint8 u8ObjIdx;

  <bb 2> :
  u8ObjIdx = 0;
  _1 = Can_pControllerConfig->Can_u8ControllerOffset;
  returnResult = FlexCAN_Ip_GetBuffStatusFlag (_1, 5);
  goto <bb 14>; [INV]

  <bb 3> :
  u8ObjIdx.2_2 = u8ObjIdx;
  u8ObjIdx = u8ObjIdx.2_2 + 1;
  _3 = Can_pControllerConfig->Can_u8ControllerOffset;
  _4 = FlexCAN_Ip_GetBuffStatusFlag (_3, 7);
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  Det_ReportRuntimeError (80, 0, 8, 1);
  _5 = Can_pControllerConfig->Can_pLegacyFiFoOvfNotif;
  if (_5 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _6 = Can_pControllerConfig->Can_pLegacyFiFoOvfNotif;
  _6 ();

  <bb 6> :
  _7 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_ClearBuffStatusFlag (_7, 7);

  <bb 7> :
  _8 = Can_pControllerConfig->Can_u8ControllerOffset;
  _9 = FlexCAN_Ip_GetBuffStatusFlag (_8, 6);
  if (_9 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _10 = Can_pControllerConfig->Can_pLegacyFiFoWarnNotif;
  if (_10 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _11 = Can_pControllerConfig->Can_pLegacyFiFoWarnNotif;
  _11 ();

  <bb 10> :
  _12 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_ClearBuffStatusFlag (_12, 6);

  <bb 11> :
  _13 = Can_pControllerConfig->Can_u8ControllerOffset;
  FlexCAN_Ip_RxFifo (_13, pReceivedDataBuffer);
  _14 = Can_pControllerConfig->Can_u8ControllerOffset;
  _15 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  FlexCAN_Ip_MainFunctionRead (_14, _15);
  _16 = Can_pControllerConfig->Can_u8ControllerOffset;
  _17 = Can_pHwObjectConfig->Can_u8HwBufferIndex;
  _18 = FlexCAN_Ip_GetTransferStatus (_16, _17);
  if (_18 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  Can_Ipw_ParseData (CanIf_Mailbox, CanIf_PduInfo, pReceivedDataBuffer, Can_pControllerConfig, Can_pHwObjectConfig);

  <bb 13> :
  _19 = Can_pControllerConfig->Can_u8ControllerOffset;
  returnResult = FlexCAN_Ip_GetBuffStatusFlag (_19, 5);

  <bb 14> :
  _20 = Can_pHwObjectConfig->Can_u8ObjectCount;
  if (u8ObjIdx < _20)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  if (returnResult != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  return;

}


Can_Ipw_InitLegacyFifoFilter (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController, const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
  struct Flexcan_Ip_IdTableType RxFifoFilters[128];
  Flexcan_Ip_RxFifoIdElementFormatType eElementFormat;
  uint8 u8FiFoFilterIndvCount;
  uint32 u32HwFilterMask;
  uint8 u8HwFilterCount;
  uint8 u8FilterIdx;

  <bb 2> :
  u8FilterIdx = 0;
  u8HwFilterCount = 0;
  u32HwFilterMask = 0;
  u8FiFoFilterIndvCount = 0;
  eElementFormat = 0;
  _1 = Can_pHwObject->Can_u8HwFilterCount;
  _2 = _1 / 4;
  _3 = (unsigned int) _2;
  _4 = _3 + 6;
  if (_4 <= 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = Can_pHwObject->Can_u8HwFilterCount;
  _6 = _5 / 4;
  u8FiFoFilterIndvCount = _6 + 6;
  goto <bb 5>; [INV]

  <bb 4> :
  u8FiFoFilterIndvCount = 32;

  <bb 5> :
  u8FilterIdx = 0;
  goto <bb 18>; [INV]

  <bb 6> :
  _7 = Can_pController->Can_eLegacyAcceptanceMode;
  if (_7 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount;
  u32HwFilterMask = 3221225472;
  eElementFormat = 0;
  _8 = Can_pHwObject->Can_IdMessage;
  if (_8 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _9 = Can_pHwObject->Can_pHwFilterConfig;
  _10 = (unsigned int) u8FilterIdx;
  _11 = _10 * 8;
  _12 = _9 + _11;
  _13 = _12->Can_u32HwFilterMask;
  _14 = _13 << 1;
  u32HwFilterMask = u32HwFilterMask | _14;
  goto <bb 17>; [INV]

  <bb 9> :
  _15 = Can_pHwObject->Can_pHwFilterConfig;
  _16 = (unsigned int) u8FilterIdx;
  _17 = _16 * 8;
  _18 = _15 + _17;
  _19 = _18->Can_u32HwFilterMask;
  _20 = _19 << 19;
  u32HwFilterMask = u32HwFilterMask | _20;
  goto <bb 17>; [INV]

  <bb 10> :
  _21 = Can_pController->Can_eLegacyAcceptanceMode;
  if (_21 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  _22 = Can_pHwObject->Can_u8HwFilterCount;
  u8HwFilterCount = _22 * 2;
  u32HwFilterMask = 3221274624;
  eElementFormat = 1;
  _23 = Can_pHwObject->Can_IdMessage;
  if (_23 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _24 = Can_pHwObject->Can_pHwFilterConfig;
  _25 = (unsigned int) u8FilterIdx;
  _26 = _25 * 16;
  _27 = _24 + _26;
  _28 = _27->Can_u32HwFilterMask;
  _29 = _28 >> 15;
  _30 = _29 << 16;
  u32HwFilterMask = u32HwFilterMask | _30;
  _31 = Can_pHwObject->Can_pHwFilterConfig;
  _32 = (unsigned int) u8FilterIdx;
  _33 = _32 * 16;
  _34 = _33 + 8;
  _35 = _31 + _34;
  _36 = _35->Can_u32HwFilterMask;
  _37 = _36 >> 15;
  u32HwFilterMask = u32HwFilterMask | _37;
  goto <bb 17>; [INV]

  <bb 13> :
  _38 = Can_pHwObject->Can_pHwFilterConfig;
  _39 = (unsigned int) u8FilterIdx;
  _40 = _39 * 16;
  _41 = _38 + _40;
  _42 = _41->Can_u32HwFilterMask;
  _43 = _42 << 19;
  u32HwFilterMask = u32HwFilterMask | _43;
  _44 = Can_pHwObject->Can_pHwFilterConfig;
  _45 = (unsigned int) u8FilterIdx;
  _46 = _45 * 16;
  _47 = _46 + 8;
  _48 = _44 + _47;
  _49 = _48->Can_u32HwFilterMask;
  _50 = _49 << 3;
  u32HwFilterMask = u32HwFilterMask | _50;
  goto <bb 17>; [INV]

  <bb 14> :
  _51 = Can_pHwObject->Can_u8HwFilterCount;
  u8HwFilterCount = _51 * 4;
  u32HwFilterMask = 0;
  eElementFormat = 2;
  _52 = Can_pHwObject->Can_IdMessage;
  if (_52 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _53 = Can_pHwObject->Can_pHwFilterConfig;
  _54 = (unsigned int) u8FilterIdx;
  _55 = _54 * 32;
  _56 = _53 + _55;
  _57 = _56->Can_u32HwFilterMask;
  _58 = _57 >> 21;
  _59 = _58 << 24;
  u32HwFilterMask = u32HwFilterMask | _59;
  _60 = Can_pHwObject->Can_pHwFilterConfig;
  _61 = (unsigned int) u8FilterIdx;
  _62 = _61 * 32;
  _63 = _62 + 8;
  _64 = _60 + _63;
  _65 = _64->Can_u32HwFilterMask;
  _66 = _65 >> 21;
  _67 = _66 << 16;
  u32HwFilterMask = u32HwFilterMask | _67;
  _68 = Can_pHwObject->Can_pHwFilterConfig;
  _69 = (unsigned int) u8FilterIdx;
  _70 = _69 * 32;
  _71 = _70 + 16;
  _72 = _68 + _71;
  _73 = _72->Can_u32HwFilterMask;
  _74 = _73 >> 21;
  _75 = _74 << 8;
  u32HwFilterMask = u32HwFilterMask | _75;
  _76 = Can_pHwObject->Can_pHwFilterConfig;
  _77 = (unsigned int) u8FilterIdx;
  _78 = _77 * 32;
  _79 = _78 + 24;
  _80 = _76 + _79;
  _81 = _80->Can_u32HwFilterMask;
  _82 = _81 >> 21;
  u32HwFilterMask = u32HwFilterMask | _82;
  goto <bb 17>; [INV]

  <bb 16> :
  _83 = Can_pHwObject->Can_pHwFilterConfig;
  _84 = (unsigned int) u8FilterIdx;
  _85 = _84 * 32;
  _86 = _83 + _85;
  _87 = _86->Can_u32HwFilterMask;
  _88 = _87 >> 3;
  _89 = _88 << 24;
  u32HwFilterMask = u32HwFilterMask | _89;
  _90 = Can_pHwObject->Can_pHwFilterConfig;
  _91 = (unsigned int) u8FilterIdx;
  _92 = _91 * 32;
  _93 = _92 + 8;
  _94 = _90 + _93;
  _95 = _94->Can_u32HwFilterMask;
  _96 = _95 >> 3;
  _97 = _96 << 16;
  u32HwFilterMask = u32HwFilterMask | _97;
  _98 = Can_pHwObject->Can_pHwFilterConfig;
  _99 = (unsigned int) u8FilterIdx;
  _100 = _99 * 32;
  _101 = _100 + 16;
  _102 = _98 + _101;
  _103 = _102->Can_u32HwFilterMask;
  _104 = _103 >> 3;
  _105 = _104 << 8;
  u32HwFilterMask = u32HwFilterMask | _105;
  _106 = Can_pHwObject->Can_pHwFilterConfig;
  _107 = (unsigned int) u8FilterIdx;
  _108 = _107 * 32;
  _109 = _108 + 24;
  _110 = _106 + _109;
  _111 = _110->Can_u32HwFilterMask;
  _112 = _111 >> 3;
  u32HwFilterMask = u32HwFilterMask | _112;

  <bb 17> :
  _113 = Can_pController->Can_u8ControllerOffset;
  FlexCAN_Ip_SetRxIndividualMask_Privileged (_113, u8FilterIdx, u32HwFilterMask);
  u8FilterIdx.0_114 = u8FilterIdx;
  u8FilterIdx = u8FilterIdx.0_114 + 1;

  <bb 18> :
  if (u8FilterIdx < u8FiFoFilterIndvCount)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _115 = Can_pHwObject->Can_u8HwFilterCount;
  if (u8FilterIdx < _115)
    goto <bb 6>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  _116 = Can_pController->Can_u8ControllerOffset;
  _117 = Can_pController->Can_u32LegacyGlobalMask;
  FlexCAN_Ip_SetRxFifoGlobalMask_Privileged (_116, _117);
  if (u8HwFilterCount != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 21> :
  u8FilterIdx = 0;
  goto <bb 26>; [INV]

  <bb 22> :
  _118 = Can_pHwObject->Can_pHwFilterConfig;
  _119 = (unsigned int) u8FilterIdx;
  _120 = _119 * 8;
  _121 = _118 + _120;
  _122 = (int) u8FilterIdx;
  _123 = _121->Can_u32HwFilterCode;
  RxFifoFilters[_122].id = _123;
  _124 = Can_pHwObject->Can_IdMessage;
  if (_124 != 0)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  _125 = (int) u8FilterIdx;
  RxFifoFilters[_125].isExtendedFrame = 1;
  goto <bb 25>; [INV]

  <bb 24> :
  _126 = (int) u8FilterIdx;
  RxFifoFilters[_126].isExtendedFrame = 0;

  <bb 25> :
  _127 = (int) u8FilterIdx;
  RxFifoFilters[_127].isRemoteFrame = 0;
  u8FilterIdx.1_128 = u8FilterIdx;
  u8FilterIdx = u8FilterIdx.1_128 + 1;

  <bb 26> :
  if (u8FilterIdx < u8HwFilterCount)
    goto <bb 22>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  _129 = Can_pController->Can_u8ControllerOffset;
  FlexCAN_Ip_ConfigRxFifo_Privileged (_129, eElementFormat, &RxFifoFilters);

  <bb 28> :
  RxFifoFilters = {CLOBBER};
  return;

}


Can_Ipw_ParseData (struct Can_HwType * CanIf_Mailbox, struct PduInfoType * CanIf_PduInfo, struct Flexcan_Ip_MsgBuffType * pReceivedDataBuffer, const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig)
{
  <bb 2> :
  _1 = pReceivedDataBuffer->msgId;
  CanIf_Mailbox->CanId = _1;
  _2 = pReceivedDataBuffer->cs;
  _3 = _2 & 2097152;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = CanIf_Mailbox->CanId;
  _5 = _4 | 2147483648;
  CanIf_Mailbox->CanId = _5;

  <bb 4> :
  _6 = Can_pHwObjectConfig->Can_eReceiveType;
  if (_6 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _7 = pReceivedDataBuffer->cs;
  _8 = _7 & 251658240;
  if (_8 == 100663296)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Det_ReportRuntimeError (80, 0, 8, 1);

  <bb 7> :
  _9 = Can_pHwObjectConfig->Can_eReceiveType;
  if (_9 != 1)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _10 = pReceivedDataBuffer->cs;
  _11 = (signed int) _10;
  if (_11 < 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _12 = CanIf_Mailbox->CanId;
  _13 = _12 | 1073741824;
  CanIf_Mailbox->CanId = _13;

  <bb 10> :
  _14 = Can_pHwObjectConfig->Can_u8PayloadLength;
  _15 = pReceivedDataBuffer->dataLen;
  if (_14 <= _15)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _16 = Can_pHwObjectConfig->Can_u8PayloadLength;
  _17 = (long unsigned int) _16;
  CanIf_PduInfo->SduLength = _17;
  goto <bb 13>; [INV]

  <bb 12> :
  _18 = pReceivedDataBuffer->dataLen;
  _19 = (long unsigned int) _18;
  CanIf_PduInfo->SduLength = _19;

  <bb 13> :
  _20 = Can_pHwObjectConfig->Can_HwObjectID;
  CanIf_Mailbox->Hoh = _20;
  _21 = Can_pControllerConfig->Can_u8AbstControllerID;
  CanIf_Mailbox->ControllerId = _21;
  _22 = &pReceivedDataBuffer->data[0];
  CanIf_PduInfo->SduDataPtr = _22;
  CanIf_RxIndication (CanIf_Mailbox, CanIf_PduInfo);
  return;

}


