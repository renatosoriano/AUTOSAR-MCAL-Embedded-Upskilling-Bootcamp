EcuM_Init ()
{
  <bb 2> :
  Mcu_Init (&Mcu_Config);
  Mcu_InitClock (0);
  Mcu_SetMode (0);
  OsIf_Init (0B);
  Can_43_FLEXCAN_Init (&Can_43_FLEXCAN_Config);
  return;

}


main ()
{
  struct Can_PduType PduInfo;
  int D.7353;
  _Bool CanIf_bTxFlag.0_1;
  _Bool _2;
  _Bool CanIf_bRxFlag.1_3;
  _Bool _4;
  unsigned char _5;
  unsigned char _6;
  unsigned char _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;

  <bb 2> :
  EcuM_Init ();
  Can_43_FLEXCAN_SetControllerMode (0, 1);
  PduInfo.id = 0;
  PduInfo.swPduHandle = 0;
  PduInfo.length = 8;
  PduInfo.sdu = &Can_au8Sdu8bytes;

  <bb 3> :
  Can_43_FLEXCAN_Write (1, &PduInfo);
  goto <bb 5>; [INV]

  <bb 4> :
  Can_43_FLEXCAN_MainFunction_Write ();
  Delay (1);

  <bb 5> :
  CanIf_bTxFlag.0_1 = CanIf_bTxFlag;
  _2 = ~CanIf_bTxFlag.0_1;
  if (_2 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  CanIf_bTxFlag = 0;
  goto <bb 8>; [INV]

  <bb 7> :
  Can_43_FLEXCAN_MainFunction_Read ();
  Delay (1);

  <bb 8> :
  CanIf_bRxFlag.1_3 = CanIf_bRxFlag;
  _4 = ~CanIf_bRxFlag.1_3;
  if (_4 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  CanIf_bRxFlag = 0;
  _5 = Can_au8Sdu8bytes[0];
  _6 = _5;
  _7 = _6 + 1;
  Can_au8Sdu8bytes[0] = _7;
  _8 = Can_au8Sdu8bytes[7];
  _9 = _8;
  _10 = _9 + 1;
  Can_au8Sdu8bytes[7] = _10;
  Delay (5000);
  goto <bb 3>; [INV]

}


CanIf_RxIndication (const struct Can_HwType * Mailbox, const struct PduInfoType * PduInfoPtr)
{
  <bb 2> :
  CanIf_bRxFlag = 1;
  return;

}


CanIf_TxConfirmation (PduIdType CanTxPduId)
{
  <bb 2> :
  CanIf_bTxFlag = 1;
  return;

}


CanIf_ControllerModeIndication (uint8 ControllerId, Can_ControllerStateType ControllerMode)
{
  <bb 2> :
  return;

}


CanIf_ControllerBusOff (uint8 ControllerId)
{
  <bb 2> :
  return;

}


Delay (uint32 ms)
{
  uint32 ElapsedTime;
  uint32 SeedTick;
  uint32 Timeout;
  long unsigned int D.7352;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _13;

  <bb 2> :
  _1 = ms_5(D) * 1000;
  Timeout_8 = OsIf_MicrosToTicks (_1, 1);
  _2 = OsIf_GetCounter (1);
  SeedTick = _2;
  ElapsedTime_11 = 0;

  <bb 3> :
  # ElapsedTime_3 = PHI <ElapsedTime_11(2), ElapsedTime_14(3)>
  _13 = OsIf_GetElapsed (&SeedTick, 1);
  ElapsedTime_14 = _13 + ElapsedTime_3;
  if (ElapsedTime_14 < Timeout_8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  SeedTick ={v} {CLOBBER};
  return;

}


