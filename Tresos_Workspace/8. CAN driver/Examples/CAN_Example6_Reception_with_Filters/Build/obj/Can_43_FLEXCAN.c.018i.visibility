
Marking local functions:


Marking externally visible functions: Can_43_FLEXCAN_ProcessBusOffInterrupt/21 Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt/20 Can_43_FLEXCAN_MainFunction_Mode/19 Can_43_FLEXCAN_MainFunction_BusOff/18 Can_43_FLEXCAN_MainFunction_Read/17 Can_43_FLEXCAN_MainFunction_Write/16 Can_43_FLEXCAN_Write/15 Can_43_FLEXCAN_GetControllerTxErrorCounter/14 Can_43_FLEXCAN_GetControllerRxErrorCounter/13 Can_43_FLEXCAN_GetControllerMode/12 Can_43_FLEXCAN_GetControllerErrorState/11 Can_43_FLEXCAN_EnableControllerInterrupts/10 Can_43_FLEXCAN_DisableControllerInterrupts/9 Can_43_FLEXCAN_SetControllerMode/8 Can_43_FLEXCAN_DeInit/7 Can_43_FLEXCAN_Init/6


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

CanIf_ControllerBusOff/39 (CanIf_ControllerBusOff) @0e700460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_ProcessBusOffInterrupt/21 
  Calls: 
Can_43_FLEXCAN_Ipw_ProcessHwObject/38 (Can_43_FLEXCAN_Ipw_ProcessHwObject) @0e7002a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt/20 
  Calls: 
Can_43_FLEXCAN_Ipw_MainFunction_Mode/37 (Can_43_FLEXCAN_Ipw_MainFunction_Mode) @0e7000e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_MainFunction_Mode/19 
  Calls: 
Can_43_FLEXCAN_Ipw_Write/36 (Can_43_FLEXCAN_Ipw_Write) @0dd1cc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Write/15 
  Calls: 
Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter/35 (Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter) @0dd1ca80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_GetControllerTxErrorCounter/14 
  Calls: 
Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter/34 (Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter) @0dd1c8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_GetControllerRxErrorCounter/13 
  Calls: 
Can_43_FLEXCAN_Ipw_GetControllerErrorState/33 (Can_43_FLEXCAN_Ipw_GetControllerErrorState) @0dd1c620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_GetControllerErrorState/11 
  Calls: 
Can_43_FLEXCAN_Ipw_EnableControllerInterrupts/32 (Can_43_FLEXCAN_Ipw_EnableControllerInterrupts) @0dd1c460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_EnableControllerInterrupts/10 
  Calls: 
SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01/31 (SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01) @0dd1c2a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_EnableControllerInterrupts/10 
  Calls: 
SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01/30 (SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01) @0dd1c1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_EnableControllerInterrupts/10 
  Calls: 
Can_43_FLEXCAN_Ipw_DisableControllerInterrupts/29 (Can_43_FLEXCAN_Ipw_DisableControllerInterrupts) @0dd1c000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_DisableControllerInterrupts/9 
  Calls: 
SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00/28 (SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00) @0e656d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_DisableControllerInterrupts/9 
  Calls: 
SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00/27 (SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00) @0e656ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_DisableControllerInterrupts/9 
  Calls: 
Can_43_FLEXCAN_Ipw_SetControllerToStopMode/26 (Can_43_FLEXCAN_Ipw_SetControllerToStopMode) @0e656c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_ProcessBusOffInterrupt/21 Can_43_FLEXCAN_SetControllerMode/8 
  Calls: 
CanIf_ControllerModeIndication/25 (CanIf_ControllerModeIndication) @0e656b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_SetControllerMode/8 Can_43_FLEXCAN_SetControllerMode/8 Can_43_FLEXCAN_SetControllerMode/8 Can_43_FLEXCAN_SetControllerMode/8 
  Calls: 
Can_43_FLEXCAN_Ipw_SetControllerToStartMode/24 (Can_43_FLEXCAN_Ipw_SetControllerToStartMode) @0e656a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_SetControllerMode/8 
  Calls: 
Can_43_FLEXCAN_Ipw_DeInit/23 (Can_43_FLEXCAN_Ipw_DeInit) @0e656620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_DeInitControllers/5 
  Calls: 
Can_43_FLEXCAN_Ipw_Init/22 (Can_43_FLEXCAN_Ipw_Init) @0e656380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_InitControllers/4 
  Calls: 
Can_43_FLEXCAN_ProcessBusOffInterrupt/21 (Can_43_FLEXCAN_ProcessBusOffInterrupt) @0e64cb60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_apxConfig/2 (read) Can_apxConfig/2 (read) Can_apxConfig/2 (read) Can_eControllerState/1 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: CanIf_ControllerBusOff/39 Can_43_FLEXCAN_Ipw_SetControllerToStopMode/26 
Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt/20 (Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt) @0e64c620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_apxConfig/2 (read) Can_apxConfig/2 (read) Can_apxConfig/2 (read) Can_apxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_43_FLEXCAN_Ipw_ProcessHwObject/38 
Can_43_FLEXCAN_MainFunction_Mode/19 (Can_43_FLEXCAN_MainFunction_Mode) @0e64c0e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_apxConfig/2 (read) Can_apxConfig/2 (read) Can_eControllerState/1 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_43_FLEXCAN_Ipw_MainFunction_Mode/37 
Can_43_FLEXCAN_MainFunction_BusOff/18 (Can_43_FLEXCAN_MainFunction_BusOff) @0e64cd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Can_43_FLEXCAN_MainFunction_Read/17 (Can_43_FLEXCAN_MainFunction_Read) @0e64ca80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Can_43_FLEXCAN_MainFunction_Write/16 (Can_43_FLEXCAN_MainFunction_Write) @0e64c7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Can_43_FLEXCAN_Write/15 (Can_43_FLEXCAN_Write) @0e64c540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_apxConfig/2 (read) Can_apxConfig/2 (read) Can_apxConfig/2 (read) Can_eControllerState/1 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_43_FLEXCAN_Ipw_Write/36 
Can_43_FLEXCAN_GetControllerTxErrorCounter/14 (Can_43_FLEXCAN_GetControllerTxErrorCounter) @0e64c2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_apxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter/35 
Can_43_FLEXCAN_GetControllerRxErrorCounter/13 (Can_43_FLEXCAN_GetControllerRxErrorCounter) @0e64c000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_apxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter/34 
Can_43_FLEXCAN_GetControllerMode/12 (Can_43_FLEXCAN_GetControllerMode) @0e631b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_eControllerState/1 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
Can_43_FLEXCAN_GetControllerErrorState/11 (Can_43_FLEXCAN_GetControllerErrorState) @0e631620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_apxConfig/2 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_43_FLEXCAN_Ipw_GetControllerErrorState/33 
Can_43_FLEXCAN_EnableControllerInterrupts/10 (Can_43_FLEXCAN_EnableControllerInterrupts) @0e6310e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_apxConfig/2 (read) Can_au8DisableInterruptLevel/0 (read) Can_au8DisableInterruptLevel/0 (read) Can_au8DisableInterruptLevel/0 (write) Can_au8DisableInterruptLevel/0 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_43_FLEXCAN_Ipw_EnableControllerInterrupts/32 SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01/31 SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01/30 
Can_43_FLEXCAN_DisableControllerInterrupts/9 (Can_43_FLEXCAN_DisableControllerInterrupts) @0e631d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_apxConfig/2 (read) Can_au8DisableInterruptLevel/0 (read) Can_au8DisableInterruptLevel/0 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_43_FLEXCAN_Ipw_DisableControllerInterrupts/29 SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00/28 SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00/27 
Can_43_FLEXCAN_SetControllerMode/8 (Can_43_FLEXCAN_SetControllerMode) @0e631a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_apxConfig/2 (read) Can_eControllerState/1 (read) Can_eControllerState/1 (write) Can_eControllerState/1 (read) Can_eControllerState/1 (write) Can_eControllerState/1 (write) Can_eControllerState/1 (read) Can_eControllerState/1 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: CanIf_ControllerModeIndication/25 CanIf_ControllerModeIndication/25 CanIf_ControllerModeIndication/25 Can_43_FLEXCAN_Ipw_SetControllerToStopMode/26 CanIf_ControllerModeIndication/25 Can_43_FLEXCAN_Ipw_SetControllerToStartMode/24 
Can_43_FLEXCAN_DeInit/7 (Can_43_FLEXCAN_DeInit) @0e6317e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_apxConfig/2 (read) Can_eControllerState/1 (read) Can_apxConfig/2 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_DeInitControllers/5 
Can_43_FLEXCAN_Init/6 (Can_43_FLEXCAN_Init) @0e631540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_apxConfig/2 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_InitControllers/4 Can_IsControllersBusy/3 
Can_DeInitControllers/5 (Can_DeInitControllers) @0e6312a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Can_apxConfig/2 (read) Can_apxConfig/2 (read) Can_eControllerState/1 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_43_FLEXCAN_DeInit/7 
  Calls: Can_43_FLEXCAN_Ipw_DeInit/23 
Can_InitControllers/4 (Can_InitControllers) @0e631000
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Can_apxConfig/2 (read) Can_apxConfig/2 (read) Can_au8DisableInterruptLevel/0 (write) Can_eControllerState/1 (write) Can_apxConfig/2 (read) Can_eControllerState/1 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_43_FLEXCAN_Init/6 
  Calls: Can_43_FLEXCAN_Ipw_Init/22 
Can_IsControllersBusy/3 (Can_IsControllersBusy) @0e629ee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Can_apxConfig/2 (read) Can_eControllerState/1 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_43_FLEXCAN_Init/6 
  Calls: 
Can_apxConfig/2 (Can_apxConfig) @0e628ca8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Can_IsControllersBusy/3 (read) Can_InitControllers/4 (read) Can_InitControllers/4 (read) Can_InitControllers/4 (read) Can_DeInitControllers/5 (read) Can_DeInitControllers/5 (read) Can_43_FLEXCAN_Init/6 (write) Can_43_FLEXCAN_DeInit/7 (read) Can_43_FLEXCAN_DeInit/7 (write) Can_43_FLEXCAN_SetControllerMode/8 (read) Can_43_FLEXCAN_DisableControllerInterrupts/9 (read) Can_43_FLEXCAN_EnableControllerInterrupts/10 (read) Can_43_FLEXCAN_GetControllerErrorState/11 (read) Can_43_FLEXCAN_GetControllerRxErrorCounter/13 (read) Can_43_FLEXCAN_GetControllerTxErrorCounter/14 (read) Can_43_FLEXCAN_Write/15 (read) Can_43_FLEXCAN_Write/15 (read) Can_43_FLEXCAN_Write/15 (read) Can_43_FLEXCAN_MainFunction_Mode/19 (read) Can_43_FLEXCAN_MainFunction_Mode/19 (read) Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt/20 (read) Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt/20 (read) Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt/20 (read) Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt/20 (read) Can_43_FLEXCAN_ProcessBusOffInterrupt/21 (read) Can_43_FLEXCAN_ProcessBusOffInterrupt/21 (read) Can_43_FLEXCAN_ProcessBusOffInterrupt/21 (read) 
  Availability: available
  Varpool flags:
Can_eControllerState/1 (Can_eControllerState) @0e628bd0
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Can_IsControllersBusy/3 (read) Can_InitControllers/4 (write) Can_InitControllers/4 (write) Can_DeInitControllers/5 (write) Can_43_FLEXCAN_DeInit/7 (read) Can_43_FLEXCAN_SetControllerMode/8 (read) Can_43_FLEXCAN_SetControllerMode/8 (write) Can_43_FLEXCAN_SetControllerMode/8 (read) Can_43_FLEXCAN_SetControllerMode/8 (write) Can_43_FLEXCAN_SetControllerMode/8 (write) Can_43_FLEXCAN_SetControllerMode/8 (read) Can_43_FLEXCAN_SetControllerMode/8 (write) Can_43_FLEXCAN_GetControllerMode/12 (read) Can_43_FLEXCAN_Write/15 (read) Can_43_FLEXCAN_MainFunction_Mode/19 (addr) Can_43_FLEXCAN_ProcessBusOffInterrupt/21 (write) 
  Availability: available
  Varpool flags:
Can_au8DisableInterruptLevel/0 (Can_au8DisableInterruptLevel) @0e628af8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Can_InitControllers/4 (write) Can_43_FLEXCAN_DisableControllerInterrupts/9 (read) Can_43_FLEXCAN_DisableControllerInterrupts/9 (write) Can_43_FLEXCAN_EnableControllerInterrupts/10 (read) Can_43_FLEXCAN_EnableControllerInterrupts/10 (read) Can_43_FLEXCAN_EnableControllerInterrupts/10 (write) Can_43_FLEXCAN_EnableControllerInterrupts/10 (read) 
  Availability: available
  Varpool flags:
Can_43_FLEXCAN_ProcessBusOffInterrupt (uint8 u8CtrlOffset)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;

  <bb 2> :
  u8ControllerID = 0;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_apxConfig[u32CoreId];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_pCtrlOffsetToCtrlIDMap;
  _4 = (sizetype) u8CtrlOffset;
  _5 = _3 + _4;
  u8ControllerID = *_5;
  _6 = Can_apxConfig[u32CoreId];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController = *_10;
  if (Can_pController != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _11 = Can_43_FLEXCAN_Ipw_SetControllerToStopMode (Can_pController);
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _12 = (int) u8ControllerID;
  Can_eControllerState[_12] = 2;
  _13 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerBusOff (_13);

  <bb 6> :
  return;

}


Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt (uint8 u8CtrlOffset, uint8 u8MbIdx, Can_43_FLEXCAN_MbType mbType)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;

  <bb 2> :
  u8ControllerID = 0;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_apxConfig[u32CoreId];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_pCtrlOffsetToCtrlIDMap;
  _4 = (sizetype) u8CtrlOffset;
  _5 = _3 + _4;
  u8ControllerID = *_5;
  _6 = Can_apxConfig[u32CoreId];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController = *_10;
  if (Can_pController != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _11 = Can_apxConfig[u32CoreId];
  Can_43_FLEXCAN_Ipw_ProcessHwObject (Can_pController, _11, u8MbIdx, mbType);

  <bb 5> :
  return;

}


Can_43_FLEXCAN_MainFunction_Mode ()
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;

  <bb 2> :
  u8ControllerID = 0;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_apxConfig[u32CoreId];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  goto <bb 8>; [INV]

  <bb 4> :
  _2 = Can_apxConfig[u32CoreId];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) u8ControllerID;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController = *_6;
  if (Can_pController != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _7 = Can_pController->Can_bActivation;
  if (_7 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _8 = (int) u8ControllerID;
  _9 = &Can_eControllerState[_8];
  Can_43_FLEXCAN_Ipw_MainFunction_Mode (Can_pController, _9);

  <bb 7> :
  u8ControllerID.6_10 = u8ControllerID;
  u8ControllerID = u8ControllerID.6_10 + 1;

  <bb 8> :
  if (u8ControllerID == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  return;

}


Can_43_FLEXCAN_MainFunction_BusOff ()
{
  <bb 2> :
  return;

}


Can_43_FLEXCAN_MainFunction_Read ()
{
  <bb 2> :
  return;

}


Can_43_FLEXCAN_MainFunction_Write ()
{
  <bb 2> :
  return;

}


Can_43_FLEXCAN_Write (Can_HwHandleType Hth, const struct Can_PduType * PduInfo)
{
  const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  Can_HwHandleType HwObjectID;
  uint32 u32CoreId;
  uint8 u8ControllerID;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7061;

  <bb 2> :
  eRetVal = 1;
  u8ControllerID = 0;
  u32CoreId = 0;
  HwObjectID = 0;
  Can_pController = 0B;
  Can_pHwObject = 0B;
  u32CoreId = 0;
  HwObjectID = Hth;
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_pHwObjIDToCtrlIDMap;
  _3 = (sizetype) HwObjectID;
  _4 = _2 + _3;
  u8ControllerID = *_4;
  _5 = Can_apxConfig[u32CoreId];
  _6 = _5->Can_ppController;
  _7 = (unsigned int) u8ControllerID;
  _8 = _7 * 4;
  _9 = _6 + _8;
  Can_pController = *_9;
  if (Can_pController != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _10 = Can_apxConfig[u32CoreId];
  _11 = _10->Can_pHwObjectConfig;
  _12 = (unsigned int) HwObjectID;
  _13 = _12 * 36;
  Can_pHwObject = _11 + _13;
  _14 = (int) u8ControllerID;
  _15 = Can_eControllerState[_14];
  if (_15 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  eRetVal = Can_43_FLEXCAN_Ipw_Write (Can_pController, Can_pHwObject, PduInfo);

  <bb 5> :
  D.7061 = eRetVal;

  <bb 6> :
<L4>:
  return D.7061;

}


Can_43_FLEXCAN_GetControllerTxErrorCounter (uint8 ControllerId, uint8 * TxErrorCounterPtr)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7055;

  <bb 2> :
  eRetVal = 1;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) ControllerId;
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pController = *_5;
  eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter (Can_pController, TxErrorCounterPtr);
  D.7055 = eRetVal;

  <bb 3> :
<L0>:
  return D.7055;

}


Can_43_FLEXCAN_GetControllerRxErrorCounter (uint8 ControllerId, uint8 * RxErrorCounterPtr)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7053;

  <bb 2> :
  eRetVal = 1;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) ControllerId;
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pController = *_5;
  eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter (Can_pController, RxErrorCounterPtr);
  D.7053 = eRetVal;

  <bb 3> :
<L0>:
  return D.7053;

}


Can_43_FLEXCAN_GetControllerMode (uint8 Controller, Can_ControllerStateType * ControllerModePtr)
{
  Std_ReturnType eRetVal;
  Std_ReturnType D.7051;

  <bb 2> :
  eRetVal = 1;
  _1 = (int) Controller;
  _2 = Can_eControllerState[_1];
  *ControllerModePtr = _2;
  eRetVal = 0;
  D.7051 = eRetVal;

  <bb 3> :
<L0>:
  return D.7051;

}


Can_43_FLEXCAN_GetControllerErrorState (uint8 ControllerId, Can_ErrorStateType * ErrorStatePtr)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 errorState;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7048;

  <bb 2> :
  eRetVal = 1;
  errorState = 0;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) ControllerId;
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pController = *_5;
  eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState (Can_pController, &errorState);
  if (eRetVal == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  errorState.5_6 = errorState;
  _7 = (int) errorState.5_6;
  switch (_7) <default: <L3> [INV], case 0: <L1> [INV], case 1: <L2> [INV]>

  <bb 4> :
<L1>:
  *ErrorStatePtr = 0;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  *ErrorStatePtr = 1;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:
  *ErrorStatePtr = 2;

  <bb 7> :
  D.7048 = eRetVal;
  errorState = {CLOBBER};

  <bb 8> :
<L7>:
  return D.7048;

}


Can_43_FLEXCAN_EnableControllerInterrupts (uint8 Controller)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;

  <bb 2> :
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) Controller;
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pController = *_5;
  SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01 ();
  _6 = (int) Controller;
  _7 = Can_au8DisableInterruptLevel[_6];
  if (_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _8 = (int) Controller;
  _9 = Can_au8DisableInterruptLevel[_8];
  _10 = (int) Controller;
  _11 = _9 + 255;
  Can_au8DisableInterruptLevel[_10] = _11;

  <bb 4> :
  SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01 ();
  _12 = (int) Controller;
  _13 = Can_au8DisableInterruptLevel[_12];
  if (_13 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Can_43_FLEXCAN_Ipw_EnableControllerInterrupts (Can_pController);

  <bb 6> :
  return;

}


Can_43_FLEXCAN_DisableControllerInterrupts (uint8 Controller)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;

  <bb 2> :
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) Controller;
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pController = *_5;
  SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00 ();
  _6 = (int) Controller;
  _7 = Can_au8DisableInterruptLevel[_6];
  _8 = (int) Controller;
  _9 = _7 + 1;
  Can_au8DisableInterruptLevel[_8] = _9;
  SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00 ();
  Can_43_FLEXCAN_Ipw_DisableControllerInterrupts (Can_pController);
  return;

}


Can_43_FLEXCAN_SetControllerMode (uint8 Controller, Can_ControllerStateType Transition)
{
  unsigned int D.7041;
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7039;

  <bb 2> :
  eRetVal = 1;
  u32CoreId = 0;
  Can_pController = 0B;
  u32CoreId = 0;
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) Controller;
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pController = *_5;
  switch (Transition) <default: <L18> [INV], case 1: <L0> [INV], case 2: <L5> [INV], case 3: <L13> [INV]>

  <bb 3> :
<L0>:
  _6 = (int) Controller;
  _7 = Can_eControllerState[_6];
  if (_7 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _8 = Can_43_FLEXCAN_Ipw_SetControllerToStartMode (Can_pController);
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = (int) Controller;
  Can_eControllerState[_9] = 1;
  _10 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_10, 1);
  eRetVal = 0;

  <bb 6> :
  goto <bb 19>; [INV]

  <bb 7> :
<L5>:
  _11 = (int) Controller;
  _12 = Can_eControllerState[_11];
  switch (_12) <default: <L11> [INV], case 1: <L6> [INV], case 2 ... 3: <L9> [INV]>

  <bb 8> :
<L6>:
  _13 = Can_43_FLEXCAN_Ipw_SetControllerToStopMode (Can_pController);
  if (_13 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _14 = (int) Controller;
  Can_eControllerState[_14] = 2;
  _15 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_15, 2);
  eRetVal = 0;

  <bb 10> :
  goto <bb 13>; [INV]

  <bb 11> :
<L9>:
  _16 = (int) Controller;
  Can_eControllerState[_16] = 2;
  _17 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_17, 2);
  eRetVal = 0;
  goto <bb 13>; [INV]

  <bb 12> :
<L11>:

  <bb 13> :
  goto <bb 19>; [INV]

  <bb 14> :
<L13>:
  _18 = (int) Controller;
  _19 = Can_eControllerState[_18];
  D.7041 = _19 + 4294967294;
  if (D.7041 <= 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
<L14>:
  _20 = (int) Controller;
  Can_eControllerState[_20] = 3;
  _21 = Can_pController->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_21, 3);
  eRetVal = 0;
  goto <bb 17>; [INV]

  <bb 16> :
<L16>:

  <bb 17> :
  goto <bb 19>; [INV]

  <bb 18> :
<L18>:

  <bb 19> :
  D.7039 = eRetVal;

  <bb 20> :
<L20>:
  return D.7039;

}


Can_43_FLEXCAN_DeInit ()
{
  uint32 u32CoreId;
  boolean bCtrlBusy;
  uint8 u8ControllerID;

  <bb 2> :
  u8ControllerID = 0;
  bCtrlBusy = 0;
  u32CoreId = 0;
  u32CoreId = 0;
  u8ControllerID = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _7 = (int) u8ControllerID;
  _8 = Can_eControllerState[_7];
  if (_8 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  bCtrlBusy = 1;
  goto <bb 8>; [INV]

  <bb 6> :
  u8ControllerID.4_9 = u8ControllerID;
  u8ControllerID = u8ControllerID.4_9 + 1;

  <bb 7> :
  if (u8ControllerID == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  _10 = ~bCtrlBusy;
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Can_DeInitControllers (u32CoreId);
  Can_apxConfig[u32CoreId] = 0B;

  <bb 10> :
  return;

}


Can_43_FLEXCAN_Init (const struct Can_43_FLEXCAN_ConfigType * Config)
{
  boolean bCtrlBusy;
  uint32 u32CoreId;

  <bb 2> :
  u32CoreId = 0;
  bCtrlBusy = 0;
  u32CoreId = 0;
  Can_apxConfig[u32CoreId] = Config;
  bCtrlBusy = Can_IsControllersBusy (u32CoreId);
  _1 = ~bCtrlBusy;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Can_InitControllers (u32CoreId);

  <bb 4> :
  return;

}


Can_DeInitControllers (uint32 u32CoreId)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint8 u8ControllerID;

  <bb 2> :
  u8ControllerID = 0;
  Can_pController = 0B;
  u8ControllerID = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _7 = Can_apxConfig[u32CoreId];
  _8 = _7->Can_ppController;
  _9 = (unsigned int) u8ControllerID;
  _10 = _9 * 4;
  _11 = _8 + _10;
  Can_pController = *_11;
  _12 = Can_pController->Can_bActivation;
  if (_12 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _13 = (int) u8ControllerID;
  Can_eControllerState[_13] = 0;
  Can_43_FLEXCAN_Ipw_DeInit (Can_pController);

  <bb 6> :
  u8ControllerID.3_14 = u8ControllerID;
  u8ControllerID = u8ControllerID.3_14 + 1;

  <bb 7> :
  if (u8ControllerID == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Can_InitControllers (uint32 u32CoreId)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint8 u8ControllerID;
  boolean bCtrlBusy;

  <bb 2> :
  bCtrlBusy = 0;
  u8ControllerID = 0;
  Can_pController = 0B;
  u8ControllerID = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _7 = Can_apxConfig[u32CoreId];
  _8 = _7->Can_ppController;
  _9 = (unsigned int) u8ControllerID;
  _10 = _9 * 4;
  _11 = _8 + _10;
  Can_pController = *_11;
  _12 = Can_pController->Can_bActivation;
  if (_12 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _13 = (int) u8ControllerID;
  Can_au8DisableInterruptLevel[_13] = 0;
  _14 = Can_43_FLEXCAN_Ipw_Init (Can_pController);
  if (_14 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _15 = (int) u8ControllerID;
  Can_eControllerState[_15] = 2;
  goto <bb 8>; [INV]

  <bb 7> :
  bCtrlBusy = 1;
  goto <bb 10>; [INV]

  <bb 8> :
  u8ControllerID.1_16 = u8ControllerID;
  u8ControllerID = u8ControllerID.1_16 + 1;

  <bb 9> :
  if (u8ControllerID == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  if (bCtrlBusy != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 11> :
  u8ControllerID = 0;
  goto <bb 15>; [INV]

  <bb 12> :
  _17 = Can_apxConfig[u32CoreId];
  _18 = _17->Can_ppController;
  _19 = (unsigned int) u8ControllerID;
  _20 = _19 * 4;
  _21 = _18 + _20;
  _22 = *_21;
  if (_22 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _23 = (int) u8ControllerID;
  Can_eControllerState[_23] = 0;

  <bb 14> :
  u8ControllerID.2_24 = u8ControllerID;
  u8ControllerID = u8ControllerID.2_24 + 1;

  <bb 15> :
  if (u8ControllerID == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  return;

}


Can_IsControllersBusy (uint32 u32CoreId)
{
  uint8 u8ControllerID;
  boolean bCtrlBusy;
  boolean D.7008;

  <bb 2> :
  bCtrlBusy = 0;
  u8ControllerID = 0;
  u8ControllerID = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = Can_apxConfig[u32CoreId];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _7 = (int) u8ControllerID;
  _8 = Can_eControllerState[_7];
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  bCtrlBusy = 1;
  goto <bb 8>; [INV]

  <bb 6> :
  u8ControllerID.0_9 = u8ControllerID;
  u8ControllerID = u8ControllerID.0_9 + 1;

  <bb 7> :
  if (u8ControllerID == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  D.7008 = bCtrlBusy;

  <bb 9> :
<L7>:
  return D.7008;

}


