
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000c63 	.word	0x00000c63
  10:	00000c65 	.word	0x00000c65
  14:	00000c67 	.word	0x00000c67
  18:	00000c69 	.word	0x00000c69
	...
  2c:	00000c6b 	.word	0x00000c6b
  30:	00000c6d 	.word	0x00000c6d
  34:	00000000 	.word	0x00000000
  38:	00000c6f 	.word	0x00000c6f
  3c:	00000c71 	.word	0x00000c71
  40:	00000c73 	.word	0x00000c73
  44:	00000c73 	.word	0x00000c73
  48:	00000c73 	.word	0x00000c73
  4c:	00000c73 	.word	0x00000c73
  50:	00000c73 	.word	0x00000c73
  54:	00000c73 	.word	0x00000c73
  58:	00000c73 	.word	0x00000c73
  5c:	00000c73 	.word	0x00000c73
  60:	00000c73 	.word	0x00000c73
  64:	00000c73 	.word	0x00000c73
  68:	00000c73 	.word	0x00000c73
  6c:	00000c73 	.word	0x00000c73
  70:	00000c73 	.word	0x00000c73
  74:	00000c73 	.word	0x00000c73
  78:	00000c73 	.word	0x00000c73
  7c:	00000c73 	.word	0x00000c73
  80:	00000c73 	.word	0x00000c73
  84:	00000c73 	.word	0x00000c73
  88:	00000c73 	.word	0x00000c73
  8c:	00000c73 	.word	0x00000c73
  90:	00000c73 	.word	0x00000c73
  94:	00000c73 	.word	0x00000c73
  98:	00000c73 	.word	0x00000c73
  9c:	00000c73 	.word	0x00000c73
  a0:	00000c73 	.word	0x00000c73
  a4:	00000c73 	.word	0x00000c73
  a8:	00000c73 	.word	0x00000c73
  ac:	00000c73 	.word	0x00000c73
  b0:	00000c73 	.word	0x00000c73
  b4:	00000c73 	.word	0x00000c73
  b8:	00000c73 	.word	0x00000c73
  bc:	00000c73 	.word	0x00000c73
  c0:	00000c73 	.word	0x00000c73
  c4:	00000c73 	.word	0x00000c73
  c8:	00000c73 	.word	0x00000c73
  cc:	00000c73 	.word	0x00000c73
  d0:	00000c73 	.word	0x00000c73
  d4:	00000c73 	.word	0x00000c73
  d8:	00000c73 	.word	0x00000c73
  dc:	00000c73 	.word	0x00000c73
  e0:	00000c73 	.word	0x00000c73
  e4:	00000c73 	.word	0x00000c73
  e8:	00000c73 	.word	0x00000c73
  ec:	00000c73 	.word	0x00000c73
  f0:	00000c73 	.word	0x00000c73
  f4:	00000c73 	.word	0x00000c73
  f8:	00000c73 	.word	0x00000c73
  fc:	00000c73 	.word	0x00000c73
 100:	00000c73 	.word	0x00000c73
 104:	00000c73 	.word	0x00000c73
 108:	00000c73 	.word	0x00000c73
 10c:	00000c73 	.word	0x00000c73
 110:	00000c73 	.word	0x00000c73
 114:	00000c73 	.word	0x00000c73
 118:	00000c73 	.word	0x00000c73
 11c:	00000c73 	.word	0x00000c73
 120:	00000c73 	.word	0x00000c73
 124:	00000c73 	.word	0x00000c73
 128:	00000c73 	.word	0x00000c73
 12c:	00000c73 	.word	0x00000c73
 130:	00000c73 	.word	0x00000c73
 134:	00000c73 	.word	0x00000c73
 138:	00000c73 	.word	0x00000c73
 13c:	00000c73 	.word	0x00000c73
 140:	00000c73 	.word	0x00000c73
 144:	00000c73 	.word	0x00000c73
 148:	00000c73 	.word	0x00000c73
 14c:	00000c73 	.word	0x00000c73
 150:	00000c73 	.word	0x00000c73
 154:	00000c73 	.word	0x00000c73
 158:	00000c73 	.word	0x00000c73
 15c:	00000c73 	.word	0x00000c73
 160:	00000c73 	.word	0x00000c73
 164:	00000c73 	.word	0x00000c73
 168:	00000c73 	.word	0x00000c73
 16c:	00000c73 	.word	0x00000c73
 170:	00000c73 	.word	0x00000c73
 174:	00000c73 	.word	0x00000c73
 178:	00000c73 	.word	0x00000c73
 17c:	00000c73 	.word	0x00000c73
 180:	00000c73 	.word	0x00000c73
 184:	00000c73 	.word	0x00000c73
 188:	00000c73 	.word	0x00000c73
 18c:	00000c73 	.word	0x00000c73
 190:	00000c73 	.word	0x00000c73
 194:	00000c73 	.word	0x00000c73
 198:	00000c73 	.word	0x00000c73
 19c:	00000c73 	.word	0x00000c73
 1a0:	00000c73 	.word	0x00000c73
 1a4:	00000c73 	.word	0x00000c73
 1a8:	00000c73 	.word	0x00000c73
 1ac:	00000c73 	.word	0x00000c73
 1b0:	00000c73 	.word	0x00000c73
 1b4:	00000c73 	.word	0x00000c73
 1b8:	00000c73 	.word	0x00000c73
 1bc:	00000c73 	.word	0x00000c73
 1c0:	00000c73 	.word	0x00000c73
 1c4:	00000c73 	.word	0x00000c73
 1c8:	00000c73 	.word	0x00000c73
 1cc:	00000c73 	.word	0x00000c73
 1d0:	00000c73 	.word	0x00000c73
 1d4:	00000c73 	.word	0x00000c73
 1d8:	00000c73 	.word	0x00000c73
 1dc:	00000c73 	.word	0x00000c73
 1e0:	00000c73 	.word	0x00000c73
 1e4:	00000c73 	.word	0x00000c73
 1e8:	00000c73 	.word	0x00000c73
 1ec:	00000c73 	.word	0x00000c73
 1f0:	00000c73 	.word	0x00000c73
 1f4:	00000c73 	.word	0x00000c73
 1f8:	00000c73 	.word	0x00000c73
 1fc:	00000c73 	.word	0x00000c73
 200:	00000c73 	.word	0x00000c73
 204:	00000c73 	.word	0x00000c73
 208:	00000c73 	.word	0x00000c73
 20c:	00000c73 	.word	0x00000c73
 210:	00000c73 	.word	0x00000c73
 214:	00000c73 	.word	0x00000c73
 218:	00000c73 	.word	0x00000c73
 21c:	00000c73 	.word	0x00000c73
 220:	00000c73 	.word	0x00000c73
 224:	00000c73 	.word	0x00000c73
 228:	00000c73 	.word	0x00000c73
 22c:	00000c73 	.word	0x00000c73
 230:	00000c73 	.word	0x00000c73
 234:	00000c73 	.word	0x00000c73
 238:	00000c73 	.word	0x00000c73
 23c:	00000c73 	.word	0x00000c73
 240:	00000c73 	.word	0x00000c73
 244:	00000c73 	.word	0x00000c73
 248:	00000c73 	.word	0x00000c73
 24c:	00000c73 	.word	0x00000c73
 250:	00000c73 	.word	0x00000c73
 254:	00000c73 	.word	0x00000c73
 258:	00000c73 	.word	0x00000c73
 25c:	00000c73 	.word	0x00000c73
 260:	00000c73 	.word	0x00000c73
 264:	00000c73 	.word	0x00000c73
 268:	00000c73 	.word	0x00000c73
 26c:	00000c73 	.word	0x00000c73
 270:	00000c73 	.word	0x00000c73
 274:	00000c73 	.word	0x00000c73
 278:	00000c73 	.word	0x00000c73
 27c:	00000c73 	.word	0x00000c73
 280:	00000c73 	.word	0x00000c73
 284:	00000c73 	.word	0x00000c73
 288:	00000c73 	.word	0x00000c73
 28c:	00000c73 	.word	0x00000c73
 290:	00000c73 	.word	0x00000c73
 294:	00000c73 	.word	0x00000c73
 298:	00000c73 	.word	0x00000c73
 29c:	00000c73 	.word	0x00000c73
 2a0:	00000c73 	.word	0x00000c73
 2a4:	00000c73 	.word	0x00000c73
 2a8:	00000c73 	.word	0x00000c73
 2ac:	00000c73 	.word	0x00000c73
 2b0:	00000c73 	.word	0x00000c73
 2b4:	00000c73 	.word	0x00000c73
 2b8:	00000c73 	.word	0x00000c73
 2bc:	00000c73 	.word	0x00000c73
 2c0:	00000c73 	.word	0x00000c73
 2c4:	00000c73 	.word	0x00000c73
 2c8:	00000c73 	.word	0x00000c73
 2cc:	00000c73 	.word	0x00000c73
 2d0:	00000c73 	.word	0x00000c73
 2d4:	00000c73 	.word	0x00000c73
 2d8:	00000c73 	.word	0x00000c73
 2dc:	00000c73 	.word	0x00000c73
 2e0:	00000c73 	.word	0x00000c73
 2e4:	00000c73 	.word	0x00000c73
 2e8:	00000c73 	.word	0x00000c73
 2ec:	00000c73 	.word	0x00000c73
 2f0:	00000c73 	.word	0x00000c73
 2f4:	00000c73 	.word	0x00000c73
 2f8:	00000c73 	.word	0x00000c73
 2fc:	00000c73 	.word	0x00000c73
 300:	00000c73 	.word	0x00000c73
 304:	00000c73 	.word	0x00000c73
 308:	00000c73 	.word	0x00000c73
 30c:	00000c73 	.word	0x00000c73

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fb25 	bl	ad0 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fbe4 	bl	c58 <startup_go_to_user_mode>
     490:	f000 fa66 	bl	960 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff9188 	.word	0x1fff9188

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fb2f 	bl	bfc <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void EcuM_Init( void );

/*this is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f001 f9d6 	bl	1c74 <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f001 f986 	bl	1bdc <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do{
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f001 f996 	bl	1c0e <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }
    while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <CanIf_ControllerBusOff>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerBusOff(uint8 ControllerId)
{
     8fc:	b082      	sub	sp, #8
     8fe:	4603      	mov	r3, r0
     900:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
     904:	bf00      	nop
     906:	b002      	add	sp, #8
     908:	4770      	bx	lr

0000090a <CanIf_ControllerModeIndication>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerModeIndication(uint8 ControllerId, Can_ControllerStateType ControllerMode )
{
     90a:	b082      	sub	sp, #8
     90c:	4603      	mov	r3, r0
     90e:	9100      	str	r1, [sp, #0]
     910:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)ControllerMode;
}
     914:	bf00      	nop
     916:	b002      	add	sp, #8
     918:	4770      	bx	lr
	...

0000091c <CanIf_TxConfirmation>:

/*CanIf callback function implementation to set the flag when a message is transmited
this function is called by the interrupt function three times, once every message has
been transmitterd. In reality this function is already implemented in CanIf layer*/
void CanIf_TxConfirmation( PduIdType CanTxPduId )
{
     91c:	b082      	sub	sp, #8
     91e:	4603      	mov	r3, r0
     920:	f8ad 3006 	strh.w	r3, [sp, #6]
    static uint8 counter = 0;
    counter++;
     924:	4b09      	ldr	r3, [pc, #36]	; (94c <CanIf_TxConfirmation+0x30>)
     926:	781b      	ldrb	r3, [r3, #0]
     928:	3301      	adds	r3, #1
     92a:	b2da      	uxtb	r2, r3
     92c:	4b07      	ldr	r3, [pc, #28]	; (94c <CanIf_TxConfirmation+0x30>)
     92e:	701a      	strb	r2, [r3, #0]
    if(counter == 3)
     930:	4b06      	ldr	r3, [pc, #24]	; (94c <CanIf_TxConfirmation+0x30>)
     932:	781b      	ldrb	r3, [r3, #0]
     934:	2b03      	cmp	r3, #3
     936:	d105      	bne.n	944 <CanIf_TxConfirmation+0x28>
    {
        counter = 0;
     938:	4b04      	ldr	r3, [pc, #16]	; (94c <CanIf_TxConfirmation+0x30>)
     93a:	2200      	movs	r2, #0
     93c:	701a      	strb	r2, [r3, #0]
        CanIf_bTxFlag = TRUE;
     93e:	4b04      	ldr	r3, [pc, #16]	; (950 <CanIf_TxConfirmation+0x34>)
     940:	2201      	movs	r2, #1
     942:	701a      	strb	r2, [r3, #0]
    }
    (void)CanTxPduId;
}
     944:	bf00      	nop
     946:	b002      	add	sp, #8
     948:	4770      	bx	lr
     94a:	bf00      	nop
     94c:	1fff8b31 	.word	0x1fff8b31
     950:	1fff8b30 	.word	0x1fff8b30

00000954 <CanIf_RxIndication>:

/*CanIf callback function implementation to set the flag when a message is received
this function is called by the CAN interrupt.
In reality this function is already implemented in CanIf layer*/
void CanIf_RxIndication(const Can_HwType* Mailbox, const PduInfoType* PduInfoPtr )
{
     954:	b082      	sub	sp, #8
     956:	9001      	str	r0, [sp, #4]
     958:	9100      	str	r1, [sp, #0]
    (void)Mailbox;
    /*the received message is store in PduInfoPtr->SduDataPtr*/
    (void)PduInfoPtr;
}
     95a:	bf00      	nop
     95c:	b002      	add	sp, #8
     95e:	4770      	bx	lr

00000960 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     960:	b500      	push	{lr}
     962:	b08b      	sub	sp, #44	; 0x2c
    EcuM_Init();
     964:	f000 f87a 	bl	a5c <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     968:	f000 fb16 	bl	f98 <SEGGER_RTT_Init>
    Can_PduType PduInfo1;
    Can_PduType PduInfo2;
    Can_PduType PduInfo3;

    /* Set the specified baudrate */
    if (Can_43_FLEXCAN_SetBaudrate(CanController_0, CAN_BAUDRATE_500kbps_ID ) == E_OK) {
     96c:	2102      	movs	r1, #2
     96e:	2000      	movs	r0, #0
     970:	f006 f932 	bl	6bd8 <Can_43_FLEXCAN_SetBaudrate>
     974:	4603      	mov	r3, r0
     976:	2b00      	cmp	r3, #0
     978:	d104      	bne.n	984 <main+0x24>
        SEGGER_RTT_printf( 0, "CAN baud rate set successfully. \n" );
     97a:	4932      	ldr	r1, [pc, #200]	; (a44 <main+0xe4>)
     97c:	2000      	movs	r0, #0
     97e:	f000 fe73 	bl	1668 <SEGGER_RTT_printf>
     982:	e003      	b.n	98c <main+0x2c>

    } else {
        SEGGER_RTT_printf( 0, "Failed to set CAN baud rate. \n" );
     984:	4930      	ldr	r1, [pc, #192]	; (a48 <main+0xe8>)
     986:	2000      	movs	r0, #0
     988:	f000 fe6e 	bl	1668 <SEGGER_RTT_printf>

    /* The CAN module notifies the upper layer (CanIf_ControllerModeIndication) after 
    a successful state transition about the new state. The monitoring whether the 
    requested state is achieved is part of an upper layer module and is not part of 
    the Can module. */
    if (Can_43_FLEXCAN_SetControllerMode( CanController_0, CAN_CS_STARTED ) == E_OK) {
     98c:	2101      	movs	r1, #1
     98e:	2000      	movs	r0, #0
     990:	f006 f95a 	bl	6c48 <Can_43_FLEXCAN_SetControllerMode>
     994:	4603      	mov	r3, r0
     996:	2b00      	cmp	r3, #0
     998:	d104      	bne.n	9a4 <main+0x44>
        SEGGER_RTT_printf( 0, "CAN controller state machine set successfully. \n" );
     99a:	492c      	ldr	r1, [pc, #176]	; (a4c <main+0xec>)
     99c:	2000      	movs	r0, #0
     99e:	f000 fe63 	bl	1668 <SEGGER_RTT_printf>
     9a2:	e003      	b.n	9ac <main+0x4c>

    } else {
        SEGGER_RTT_printf( 0, "Failed to set CAN controller state machine. \n" );
     9a4:	492a      	ldr	r1, [pc, #168]	; (a50 <main+0xf0>)
     9a6:	2000      	movs	r0, #0
     9a8:	f000 fe5e 	bl	1668 <SEGGER_RTT_printf>
    }

    /*Fill the first PDU structure with the information to be transmitted*/
    PduInfo1.id = 0x123u;
     9ac:	f240 1323 	movw	r3, #291	; 0x123
     9b0:	9307      	str	r3, [sp, #28]
    PduInfo1.swPduHandle = 0u;
     9b2:	2300      	movs	r3, #0
     9b4:	f8ad 3020 	strh.w	r3, [sp, #32]
    PduInfo1.length = 8u;
     9b8:	2308      	movs	r3, #8
     9ba:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    PduInfo1.sdu = Can_au8Sdu8bytes;
     9be:	4b25      	ldr	r3, [pc, #148]	; (a54 <main+0xf4>)
     9c0:	9309      	str	r3, [sp, #36]	; 0x24
    /*Fill the second PDU structure with the information to be transmitted*/
    PduInfo2.id = 0x133u;
     9c2:	f240 1333 	movw	r3, #307	; 0x133
     9c6:	9304      	str	r3, [sp, #16]
    PduInfo2.swPduHandle = 1u;
     9c8:	2301      	movs	r3, #1
     9ca:	f8ad 3014 	strh.w	r3, [sp, #20]
    PduInfo2.length = 8u;
     9ce:	2308      	movs	r3, #8
     9d0:	f88d 3016 	strb.w	r3, [sp, #22]
    PduInfo2.sdu = Can_au8Sdu8bytes;
     9d4:	4b1f      	ldr	r3, [pc, #124]	; (a54 <main+0xf4>)
     9d6:	9306      	str	r3, [sp, #24]
    /*Fill the third PDU structure with the information to be transmitted*/
    PduInfo3.id = 0x143u;
     9d8:	f240 1343 	movw	r3, #323	; 0x143
     9dc:	9301      	str	r3, [sp, #4]
    PduInfo3.swPduHandle = 2u;
     9de:	2302      	movs	r3, #2
     9e0:	f8ad 3008 	strh.w	r3, [sp, #8]
    PduInfo3.length = 8u;
     9e4:	2308      	movs	r3, #8
     9e6:	f88d 300a 	strb.w	r3, [sp, #10]
    PduInfo3.sdu = Can_au8Sdu8bytes;
     9ea:	4b1a      	ldr	r3, [pc, #104]	; (a54 <main+0xf4>)
     9ec:	9303      	str	r3, [sp, #12]

    while( 1u )
    {
        /*Set the three messages to be transmitted, all messages will be
        transmitted by the CAN interrupt*/
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo1 );
     9ee:	ab07      	add	r3, sp, #28
     9f0:	4619      	mov	r1, r3
     9f2:	2000      	movs	r0, #0
     9f4:	f006 faea 	bl	6fcc <Can_43_FLEXCAN_Write>
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo2 );
     9f8:	ab04      	add	r3, sp, #16
     9fa:	4619      	mov	r1, r3
     9fc:	2000      	movs	r0, #0
     9fe:	f006 fae5 	bl	6fcc <Can_43_FLEXCAN_Write>
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo3 );
     a02:	ab01      	add	r3, sp, #4
     a04:	4619      	mov	r1, r3
     a06:	2000      	movs	r0, #0
     a08:	f006 fae0 	bl	6fcc <Can_43_FLEXCAN_Write>

        /*wait until the CAN interrupt transmit message, waiting is not the
        suitable way, but good enough for ilustration purposes, flag is 
        updated by the callback function CanIf_TxConfirmation*/
        while( CanIf_bTxFlag == FALSE );
     a0c:	bf00      	nop
     a0e:	4b12      	ldr	r3, [pc, #72]	; (a58 <main+0xf8>)
     a10:	781b      	ldrb	r3, [r3, #0]
     a12:	f083 0301 	eor.w	r3, r3, #1
     a16:	b2db      	uxtb	r3, r3
     a18:	2b00      	cmp	r3, #0
     a1a:	d1f8      	bne.n	a0e <main+0xae>
        /*Clear the Tx flag*/
        CanIf_bTxFlag = FALSE;
     a1c:	4b0e      	ldr	r3, [pc, #56]	; (a58 <main+0xf8>)
     a1e:	2200      	movs	r2, #0
     a20:	701a      	strb	r2, [r3, #0]

        /*increase some values just for ilustration purposes*/
        Can_au8Sdu8bytes[0]++;
     a22:	4b0c      	ldr	r3, [pc, #48]	; (a54 <main+0xf4>)
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	3301      	adds	r3, #1
     a28:	b2da      	uxtb	r2, r3
     a2a:	4b0a      	ldr	r3, [pc, #40]	; (a54 <main+0xf4>)
     a2c:	701a      	strb	r2, [r3, #0]
        Can_au8Sdu8bytes[7]++;
     a2e:	4b09      	ldr	r3, [pc, #36]	; (a54 <main+0xf4>)
     a30:	79db      	ldrb	r3, [r3, #7]
     a32:	3301      	adds	r3, #1
     a34:	b2da      	uxtb	r2, r3
     a36:	4b07      	ldr	r3, [pc, #28]	; (a54 <main+0xf4>)
     a38:	71da      	strb	r2, [r3, #7]
        
        Delay( 5000u );
     a3a:	f241 3088 	movw	r0, #5000	; 0x1388
     a3e:	f7ff ff37 	bl	8b0 <Delay>
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo1 );
     a42:	e7d4      	b.n	9ee <main+0x8e>
     a44:	0000ec88 	.word	0x0000ec88
     a48:	0000ecac 	.word	0x0000ecac
     a4c:	0000eccc 	.word	0x0000eccc
     a50:	0000ed00 	.word	0x0000ed00
     a54:	1fff8b10 	.word	0x1fff8b10
     a58:	1fff8b30 	.word	0x1fff8b30

00000a5c <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     a5c:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     a5e:	480b      	ldr	r0, [pc, #44]	; (a8c <EcuM_Init+0x30>)
     a60:	f004 fe48 	bl	56f4 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     a64:	2000      	movs	r0, #0
     a66:	f004 fe99 	bl	579c <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     a6a:	2000      	movs	r0, #0
     a6c:	f004 feba 	bl	57e4 <Mcu_SetMode>
    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     a70:	2000      	movs	r0, #0
     a72:	f001 f8aa 	bl	1bca <OsIf_Init>
    
    /*enable and setup interrupts in use by the Can Driver*/
    Platform_Init( NULL_PTR );
     a76:	2000      	movs	r0, #0
     a78:	f000 ffa4 	bl	19c4 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration*/
    Port_Init( &Port_Config );
     a7c:	4804      	ldr	r0, [pc, #16]	; (a90 <EcuM_Init+0x34>)
     a7e:	f005 fa3b 	bl	5ef8 <Port_Init>

    /*init the FlexCAN2 with the paramters set in Tresos WITHOUT loop back mode*/
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );
     a82:	4804      	ldr	r0, [pc, #16]	; (a94 <EcuM_Init+0x38>)
     a84:	f006 f83a 	bl	6afc <Can_43_FLEXCAN_Init>
}
     a88:	bf00      	nop
     a8a:	bd08      	pop	{r3, pc}
     a8c:	0000faa4 	.word	0x0000faa4
     a90:	0000ff74 	.word	0x0000ff74
     a94:	0000f618 	.word	0x0000f618

00000a98 <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     a98:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a9a:	f3ef 8310 	mrs	r3, PRIMASK
     a9e:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     aa0:	4623      	mov	r3, r4
}
     aa2:	4618      	mov	r0, r3
     aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
     aa8:	4770      	bx	lr

00000aaa <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     aaa:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     aac:	f3ef 8310 	mrs	r3, PRIMASK
     ab0:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     ab2:	4623      	mov	r3, r4
}
     ab4:	4618      	mov	r0, r3
     ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
     aba:	4770      	bx	lr

00000abc <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     abc:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     abe:	f3ef 8310 	mrs	r3, PRIMASK
     ac2:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     ac4:	4623      	mov	r3, r4
}
     ac6:	4618      	mov	r0, r3
     ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
     acc:	4770      	bx	lr
	...

00000ad0 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     ad0:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     ad2:	2300      	movs	r3, #0
     ad4:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     ad6:	2300      	movs	r3, #0
     ad8:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     ada:	2300      	movs	r3, #0
     adc:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     ade:	2300      	movs	r3, #0
     ae0:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     ae2:	4b44      	ldr	r3, [pc, #272]	; (bf4 <__BSS_SRAM_SIZE+0xd4>)
     ae4:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     ae6:	4b44      	ldr	r3, [pc, #272]	; (bf8 <__BSS_SRAM_SIZE+0xd8>)
     ae8:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     aea:	9b05      	ldr	r3, [sp, #20]
     aec:	681b      	ldr	r3, [r3, #0]
     aee:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     af0:	9b05      	ldr	r3, [sp, #20]
     af2:	3304      	adds	r3, #4
     af4:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     af6:	9b05      	ldr	r3, [sp, #20]
     af8:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     afa:	2300      	movs	r3, #0
     afc:	9309      	str	r3, [sp, #36]	; 0x24
     afe:	e03d      	b.n	b7c <__BSS_SRAM_SIZE+0x5c>
    {
        rom = copy_layout[i].rom_start;
     b00:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b02:	4613      	mov	r3, r2
     b04:	005b      	lsls	r3, r3, #1
     b06:	4413      	add	r3, r2
     b08:	009b      	lsls	r3, r3, #2
     b0a:	461a      	mov	r2, r3
     b0c:	9b03      	ldr	r3, [sp, #12]
     b0e:	4413      	add	r3, r2
     b10:	685b      	ldr	r3, [r3, #4]
     b12:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b16:	4613      	mov	r3, r2
     b18:	005b      	lsls	r3, r3, #1
     b1a:	4413      	add	r3, r2
     b1c:	009b      	lsls	r3, r3, #2
     b1e:	461a      	mov	r2, r3
     b20:	9b03      	ldr	r3, [sp, #12]
     b22:	4413      	add	r3, r2
     b24:	681b      	ldr	r3, [r3, #0]
     b26:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b2a:	4613      	mov	r3, r2
     b2c:	005b      	lsls	r3, r3, #1
     b2e:	4413      	add	r3, r2
     b30:	009b      	lsls	r3, r3, #2
     b32:	461a      	mov	r2, r3
     b34:	9b03      	ldr	r3, [sp, #12]
     b36:	4413      	add	r3, r2
     b38:	689b      	ldr	r3, [r3, #8]
     b3a:	4619      	mov	r1, r3
     b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b3e:	4613      	mov	r3, r2
     b40:	005b      	lsls	r3, r3, #1
     b42:	4413      	add	r3, r2
     b44:	009b      	lsls	r3, r3, #2
     b46:	461a      	mov	r2, r3
     b48:	9b03      	ldr	r3, [sp, #12]
     b4a:	4413      	add	r3, r2
     b4c:	685b      	ldr	r3, [r3, #4]
     b4e:	1acb      	subs	r3, r1, r3
     b50:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b52:	2300      	movs	r3, #0
     b54:	9308      	str	r3, [sp, #32]
     b56:	e00a      	b.n	b6e <__BSS_SRAM_SIZE+0x4e>
        {
            ram[j] = rom[j];
     b58:	9a00      	ldr	r2, [sp, #0]
     b5a:	9b08      	ldr	r3, [sp, #32]
     b5c:	441a      	add	r2, r3
     b5e:	9901      	ldr	r1, [sp, #4]
     b60:	9b08      	ldr	r3, [sp, #32]
     b62:	440b      	add	r3, r1
     b64:	7812      	ldrb	r2, [r2, #0]
     b66:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b68:	9b08      	ldr	r3, [sp, #32]
     b6a:	3301      	adds	r3, #1
     b6c:	9308      	str	r3, [sp, #32]
     b6e:	9a08      	ldr	r2, [sp, #32]
     b70:	9b06      	ldr	r3, [sp, #24]
     b72:	429a      	cmp	r2, r3
     b74:	d3f0      	bcc.n	b58 <__BSS_SRAM_SIZE+0x38>
    for(i = 0; i < len; i++)
     b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b78:	3301      	adds	r3, #1
     b7a:	9309      	str	r3, [sp, #36]	; 0x24
     b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b7e:	9b07      	ldr	r3, [sp, #28]
     b80:	429a      	cmp	r2, r3
     b82:	d3bd      	bcc.n	b00 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     b84:	9b04      	ldr	r3, [sp, #16]
     b86:	681b      	ldr	r3, [r3, #0]
     b88:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b8a:	9b04      	ldr	r3, [sp, #16]
     b8c:	3304      	adds	r3, #4
     b8e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b90:	9b04      	ldr	r3, [sp, #16]
     b92:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b94:	2300      	movs	r3, #0
     b96:	9309      	str	r3, [sp, #36]	; 0x24
     b98:	e024      	b.n	be4 <__BSS_SRAM_SIZE+0xc4>
    {
        ram = zero_layout[i].ram_start;
     b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b9c:	00db      	lsls	r3, r3, #3
     b9e:	9a02      	ldr	r2, [sp, #8]
     ba0:	4413      	add	r3, r2
     ba2:	681b      	ldr	r3, [r3, #0]
     ba4:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ba8:	00db      	lsls	r3, r3, #3
     baa:	9a02      	ldr	r2, [sp, #8]
     bac:	4413      	add	r3, r2
     bae:	685b      	ldr	r3, [r3, #4]
     bb0:	4619      	mov	r1, r3
     bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bb4:	00db      	lsls	r3, r3, #3
     bb6:	9a02      	ldr	r2, [sp, #8]
     bb8:	4413      	add	r3, r2
     bba:	681b      	ldr	r3, [r3, #0]
     bbc:	1acb      	subs	r3, r1, r3
     bbe:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     bc0:	2300      	movs	r3, #0
     bc2:	9308      	str	r3, [sp, #32]
     bc4:	e007      	b.n	bd6 <__BSS_SRAM_SIZE+0xb6>
        {
            ram[j] = 0U;
     bc6:	9a01      	ldr	r2, [sp, #4]
     bc8:	9b08      	ldr	r3, [sp, #32]
     bca:	4413      	add	r3, r2
     bcc:	2200      	movs	r2, #0
     bce:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     bd0:	9b08      	ldr	r3, [sp, #32]
     bd2:	3301      	adds	r3, #1
     bd4:	9308      	str	r3, [sp, #32]
     bd6:	9a08      	ldr	r2, [sp, #32]
     bd8:	9b06      	ldr	r3, [sp, #24]
     bda:	429a      	cmp	r2, r3
     bdc:	d3f3      	bcc.n	bc6 <__BSS_SRAM_SIZE+0xa6>
    for(i = 0; i < len; i++)
     bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
     be0:	3301      	adds	r3, #1
     be2:	9309      	str	r3, [sp, #36]	; 0x24
     be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     be6:	9b07      	ldr	r3, [sp, #28]
     be8:	429a      	cmp	r2, r3
     bea:	d3d6      	bcc.n	b9a <__BSS_SRAM_SIZE+0x7a>
        }
    }
}
     bec:	bf00      	nop
     bee:	bf00      	nop
     bf0:	b00a      	add	sp, #40	; 0x28
     bf2:	4770      	bx	lr
     bf4:	0000ffe4 	.word	0x0000ffe4
     bf8:	00010000 	.word	0x00010000

00000bfc <sys_m4_cache_init>:
{
     bfc:	b084      	sub	sp, #16
     bfe:	4603      	mov	r3, r0
     c00:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     c04:	2300      	movs	r3, #0
     c06:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     c0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c0e:	2b00      	cmp	r3, #0
     c10:	d118      	bne.n	c44 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     c12:	4b10      	ldr	r3, [pc, #64]	; (c54 <sys_m4_cache_init+0x58>)
     c14:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     c18:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     c1a:	4b0e      	ldr	r3, [pc, #56]	; (c54 <sys_m4_cache_init+0x58>)
     c1c:	681b      	ldr	r3, [r3, #0]
     c1e:	4a0d      	ldr	r2, [pc, #52]	; (c54 <sys_m4_cache_init+0x58>)
     c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     c24:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     c26:	bf00      	nop
     c28:	4b0a      	ldr	r3, [pc, #40]	; (c54 <sys_m4_cache_init+0x58>)
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     c34:	d0f8      	beq.n	c28 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     c36:	4b07      	ldr	r3, [pc, #28]	; (c54 <sys_m4_cache_init+0x58>)
     c38:	681b      	ldr	r3, [r3, #0]
     c3a:	4a06      	ldr	r2, [pc, #24]	; (c54 <sys_m4_cache_init+0x58>)
     c3c:	f043 0301 	orr.w	r3, r3, #1
     c40:	6013      	str	r3, [r2, #0]
     c42:	e002      	b.n	c4a <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     c44:	2301      	movs	r3, #1
     c46:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     c4a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     c4e:	4618      	mov	r0, r3
     c50:	b004      	add	sp, #16
     c52:	4770      	bx	lr
     c54:	e0082000 	.word	0xe0082000

00000c58 <startup_go_to_user_mode>:
}
     c58:	bf00      	nop
     c5a:	4770      	bx	lr

00000c5c <Sys_GetCoreID>:
    return 0U;
     c5c:	2300      	movs	r3, #0
}
     c5e:	4618      	mov	r0, r3
     c60:	4770      	bx	lr

00000c62 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     c62:	e7fe      	b.n	c62 <HardFault_Handler>

00000c64 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     c64:	e7fe      	b.n	c64 <MemManage_Handler>

00000c66 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     c66:	e7fe      	b.n	c66 <BusFault_Handler>

00000c68 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     c68:	e7fe      	b.n	c68 <UsageFault_Handler>

00000c6a <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     c6a:	e7fe      	b.n	c6a <SVC_Handler>

00000c6c <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     c6c:	e7fe      	b.n	c6c <DebugMon_Handler>

00000c6e <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     c6e:	e7fe      	b.n	c6e <PendSV_Handler>

00000c70 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     c70:	e7fe      	b.n	c70 <SysTick_Handler>

00000c72 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     c72:	e7fe      	b.n	c72 <undefined_handler>

00000c74 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     c74:	b500      	push	{lr}
     c76:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     c78:	4b26      	ldr	r3, [pc, #152]	; (d14 <_DoInit+0xa0>)
     c7a:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     c7c:	22a8      	movs	r2, #168	; 0xa8
     c7e:	2100      	movs	r1, #0
     c80:	9800      	ldr	r0, [sp, #0]
     c82:	f000 fd13 	bl	16ac <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     c86:	9b00      	ldr	r3, [sp, #0]
     c88:	2203      	movs	r2, #3
     c8a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     c8c:	9b00      	ldr	r3, [sp, #0]
     c8e:	2203      	movs	r2, #3
     c90:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     c92:	9b00      	ldr	r3, [sp, #0]
     c94:	4a20      	ldr	r2, [pc, #128]	; (d18 <_DoInit+0xa4>)
     c96:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     c98:	9b00      	ldr	r3, [sp, #0]
     c9a:	4a20      	ldr	r2, [pc, #128]	; (d1c <_DoInit+0xa8>)
     c9c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     c9e:	9b00      	ldr	r3, [sp, #0]
     ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
     ca4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     ca6:	9b00      	ldr	r3, [sp, #0]
     ca8:	2200      	movs	r2, #0
     caa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     cac:	9b00      	ldr	r3, [sp, #0]
     cae:	2200      	movs	r2, #0
     cb0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     cb2:	9b00      	ldr	r3, [sp, #0]
     cb4:	2200      	movs	r2, #0
     cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     cb8:	9b00      	ldr	r3, [sp, #0]
     cba:	4a17      	ldr	r2, [pc, #92]	; (d18 <_DoInit+0xa4>)
     cbc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     cbe:	9b00      	ldr	r3, [sp, #0]
     cc0:	4a17      	ldr	r2, [pc, #92]	; (d20 <_DoInit+0xac>)
     cc2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     cc4:	9b00      	ldr	r3, [sp, #0]
     cc6:	2210      	movs	r2, #16
     cc8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     cca:	9b00      	ldr	r3, [sp, #0]
     ccc:	2200      	movs	r2, #0
     cce:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     cd0:	9b00      	ldr	r3, [sp, #0]
     cd2:	2200      	movs	r2, #0
     cd4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     cd6:	9b00      	ldr	r3, [sp, #0]
     cd8:	2200      	movs	r2, #0
     cda:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     cdc:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     ce0:	2300      	movs	r3, #0
     ce2:	9301      	str	r3, [sp, #4]
     ce4:	e00c      	b.n	d00 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     ce6:	9b01      	ldr	r3, [sp, #4]
     ce8:	f1c3 030f 	rsb	r3, r3, #15
     cec:	4a0d      	ldr	r2, [pc, #52]	; (d24 <_DoInit+0xb0>)
     cee:	5cd1      	ldrb	r1, [r2, r3]
     cf0:	9a00      	ldr	r2, [sp, #0]
     cf2:	9b01      	ldr	r3, [sp, #4]
     cf4:	4413      	add	r3, r2
     cf6:	460a      	mov	r2, r1
     cf8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     cfa:	9b01      	ldr	r3, [sp, #4]
     cfc:	3301      	adds	r3, #1
     cfe:	9301      	str	r3, [sp, #4]
     d00:	9b01      	ldr	r3, [sp, #4]
     d02:	2b0f      	cmp	r3, #15
     d04:	d9ef      	bls.n	ce6 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     d06:	f3bf 8f5f 	dmb	sy
}
     d0a:	bf00      	nop
     d0c:	b003      	add	sp, #12
     d0e:	f85d fb04 	ldr.w	pc, [sp], #4
     d12:	bf00      	nop
     d14:	1fff918c 	.word	0x1fff918c
     d18:	0000ed30 	.word	0x0000ed30
     d1c:	1fff9234 	.word	0x1fff9234
     d20:	1fff9634 	.word	0x1fff9634
     d24:	0000ffc0 	.word	0x0000ffc0

00000d28 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     d28:	b500      	push	{lr}
     d2a:	b08b      	sub	sp, #44	; 0x2c
     d2c:	9003      	str	r0, [sp, #12]
     d2e:	9102      	str	r1, [sp, #8]
     d30:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     d32:	2300      	movs	r3, #0
     d34:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     d36:	9b03      	ldr	r3, [sp, #12]
     d38:	68db      	ldr	r3, [r3, #12]
     d3a:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     d3c:	9b03      	ldr	r3, [sp, #12]
     d3e:	691b      	ldr	r3, [r3, #16]
     d40:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     d42:	9a06      	ldr	r2, [sp, #24]
     d44:	9b07      	ldr	r3, [sp, #28]
     d46:	429a      	cmp	r2, r3
     d48:	d905      	bls.n	d56 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     d4a:	9a06      	ldr	r2, [sp, #24]
     d4c:	9b07      	ldr	r3, [sp, #28]
     d4e:	1ad3      	subs	r3, r2, r3
     d50:	3b01      	subs	r3, #1
     d52:	9309      	str	r3, [sp, #36]	; 0x24
     d54:	e007      	b.n	d66 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     d56:	9b03      	ldr	r3, [sp, #12]
     d58:	689a      	ldr	r2, [r3, #8]
     d5a:	9906      	ldr	r1, [sp, #24]
     d5c:	9b07      	ldr	r3, [sp, #28]
     d5e:	1acb      	subs	r3, r1, r3
     d60:	4413      	add	r3, r2
     d62:	3b01      	subs	r3, #1
     d64:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     d66:	9b03      	ldr	r3, [sp, #12]
     d68:	689a      	ldr	r2, [r3, #8]
     d6a:	9b07      	ldr	r3, [sp, #28]
     d6c:	1ad3      	subs	r3, r2, r3
     d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d70:	4293      	cmp	r3, r2
     d72:	bf28      	it	cs
     d74:	4613      	movcs	r3, r2
     d76:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d7a:	9b01      	ldr	r3, [sp, #4]
     d7c:	4293      	cmp	r3, r2
     d7e:	bf28      	it	cs
     d80:	4613      	movcs	r3, r2
     d82:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d84:	9b03      	ldr	r3, [sp, #12]
     d86:	685a      	ldr	r2, [r3, #4]
     d88:	9b07      	ldr	r3, [sp, #28]
     d8a:	4413      	add	r3, r2
     d8c:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d90:	9902      	ldr	r1, [sp, #8]
     d92:	9805      	ldr	r0, [sp, #20]
     d94:	f000 fc7c 	bl	1690 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     d98:	9a08      	ldr	r2, [sp, #32]
     d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d9c:	4413      	add	r3, r2
     d9e:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     da0:	9a02      	ldr	r2, [sp, #8]
     da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     da4:	4413      	add	r3, r2
     da6:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     da8:	9a01      	ldr	r2, [sp, #4]
     daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
     dac:	1ad3      	subs	r3, r2, r3
     dae:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     db0:	9a07      	ldr	r2, [sp, #28]
     db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     db4:	4413      	add	r3, r2
     db6:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     db8:	9b03      	ldr	r3, [sp, #12]
     dba:	689b      	ldr	r3, [r3, #8]
     dbc:	9a07      	ldr	r2, [sp, #28]
     dbe:	429a      	cmp	r2, r3
     dc0:	d101      	bne.n	dc6 <_WriteBlocking+0x9e>
      WrOff = 0u;
     dc2:	2300      	movs	r3, #0
     dc4:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     dc6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     dca:	9b03      	ldr	r3, [sp, #12]
     dcc:	9a07      	ldr	r2, [sp, #28]
     dce:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     dd0:	9b01      	ldr	r3, [sp, #4]
     dd2:	2b00      	cmp	r3, #0
     dd4:	d1b2      	bne.n	d3c <_WriteBlocking+0x14>
  return NumBytesWritten;
     dd6:	9b08      	ldr	r3, [sp, #32]
}
     dd8:	4618      	mov	r0, r3
     dda:	b00b      	add	sp, #44	; 0x2c
     ddc:	f85d fb04 	ldr.w	pc, [sp], #4

00000de0 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     de0:	b500      	push	{lr}
     de2:	b089      	sub	sp, #36	; 0x24
     de4:	9003      	str	r0, [sp, #12]
     de6:	9102      	str	r1, [sp, #8]
     de8:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     dea:	9b03      	ldr	r3, [sp, #12]
     dec:	68db      	ldr	r3, [r3, #12]
     dee:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     df0:	9b03      	ldr	r3, [sp, #12]
     df2:	689a      	ldr	r2, [r3, #8]
     df4:	9b07      	ldr	r3, [sp, #28]
     df6:	1ad3      	subs	r3, r2, r3
     df8:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     dfa:	9a06      	ldr	r2, [sp, #24]
     dfc:	9b01      	ldr	r3, [sp, #4]
     dfe:	429a      	cmp	r2, r3
     e00:	d911      	bls.n	e26 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     e02:	9b03      	ldr	r3, [sp, #12]
     e04:	685a      	ldr	r2, [r3, #4]
     e06:	9b07      	ldr	r3, [sp, #28]
     e08:	4413      	add	r3, r2
     e0a:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     e0c:	9a01      	ldr	r2, [sp, #4]
     e0e:	9902      	ldr	r1, [sp, #8]
     e10:	9804      	ldr	r0, [sp, #16]
     e12:	f000 fc3d 	bl	1690 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e16:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     e1a:	9a07      	ldr	r2, [sp, #28]
     e1c:	9b01      	ldr	r3, [sp, #4]
     e1e:	441a      	add	r2, r3
     e20:	9b03      	ldr	r3, [sp, #12]
     e22:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     e24:	e01f      	b.n	e66 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     e26:	9b06      	ldr	r3, [sp, #24]
     e28:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     e2a:	9b03      	ldr	r3, [sp, #12]
     e2c:	685a      	ldr	r2, [r3, #4]
     e2e:	9b07      	ldr	r3, [sp, #28]
     e30:	4413      	add	r3, r2
     e32:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     e34:	9a05      	ldr	r2, [sp, #20]
     e36:	9902      	ldr	r1, [sp, #8]
     e38:	9804      	ldr	r0, [sp, #16]
     e3a:	f000 fc29 	bl	1690 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     e3e:	9a01      	ldr	r2, [sp, #4]
     e40:	9b06      	ldr	r3, [sp, #24]
     e42:	1ad3      	subs	r3, r2, r3
     e44:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     e46:	9b03      	ldr	r3, [sp, #12]
     e48:	685b      	ldr	r3, [r3, #4]
     e4a:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     e4c:	9a02      	ldr	r2, [sp, #8]
     e4e:	9b06      	ldr	r3, [sp, #24]
     e50:	4413      	add	r3, r2
     e52:	9a05      	ldr	r2, [sp, #20]
     e54:	4619      	mov	r1, r3
     e56:	9804      	ldr	r0, [sp, #16]
     e58:	f000 fc1a 	bl	1690 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e5c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     e60:	9b03      	ldr	r3, [sp, #12]
     e62:	9a05      	ldr	r2, [sp, #20]
     e64:	60da      	str	r2, [r3, #12]
}
     e66:	bf00      	nop
     e68:	b009      	add	sp, #36	; 0x24
     e6a:	f85d fb04 	ldr.w	pc, [sp], #4

00000e6e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     e6e:	b086      	sub	sp, #24
     e70:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     e72:	9b01      	ldr	r3, [sp, #4]
     e74:	691b      	ldr	r3, [r3, #16]
     e76:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     e78:	9b01      	ldr	r3, [sp, #4]
     e7a:	68db      	ldr	r3, [r3, #12]
     e7c:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     e7e:	9a04      	ldr	r2, [sp, #16]
     e80:	9b03      	ldr	r3, [sp, #12]
     e82:	429a      	cmp	r2, r3
     e84:	d808      	bhi.n	e98 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     e86:	9b01      	ldr	r3, [sp, #4]
     e88:	689a      	ldr	r2, [r3, #8]
     e8a:	9b03      	ldr	r3, [sp, #12]
     e8c:	1ad2      	subs	r2, r2, r3
     e8e:	9b04      	ldr	r3, [sp, #16]
     e90:	4413      	add	r3, r2
     e92:	3b01      	subs	r3, #1
     e94:	9305      	str	r3, [sp, #20]
     e96:	e004      	b.n	ea2 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     e98:	9a04      	ldr	r2, [sp, #16]
     e9a:	9b03      	ldr	r3, [sp, #12]
     e9c:	1ad3      	subs	r3, r2, r3
     e9e:	3b01      	subs	r3, #1
     ea0:	9305      	str	r3, [sp, #20]
  }
  return r;
     ea2:	9b05      	ldr	r3, [sp, #20]
}
     ea4:	4618      	mov	r0, r3
     ea6:	b006      	add	sp, #24
     ea8:	4770      	bx	lr
	...

00000eac <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     eac:	b500      	push	{lr}
     eae:	b089      	sub	sp, #36	; 0x24
     eb0:	9003      	str	r0, [sp, #12]
     eb2:	9102      	str	r1, [sp, #8]
     eb4:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     eb6:	9b02      	ldr	r3, [sp, #8]
     eb8:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     eba:	9b03      	ldr	r3, [sp, #12]
     ebc:	1c5a      	adds	r2, r3, #1
     ebe:	4613      	mov	r3, r2
     ec0:	005b      	lsls	r3, r3, #1
     ec2:	4413      	add	r3, r2
     ec4:	00db      	lsls	r3, r3, #3
     ec6:	4a20      	ldr	r2, [pc, #128]	; (f48 <SEGGER_RTT_WriteNoLock+0x9c>)
     ec8:	4413      	add	r3, r2
     eca:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     ecc:	9b05      	ldr	r3, [sp, #20]
     ece:	695b      	ldr	r3, [r3, #20]
     ed0:	2b02      	cmp	r3, #2
     ed2:	d029      	beq.n	f28 <SEGGER_RTT_WriteNoLock+0x7c>
     ed4:	2b02      	cmp	r3, #2
     ed6:	d82e      	bhi.n	f36 <SEGGER_RTT_WriteNoLock+0x8a>
     ed8:	2b00      	cmp	r3, #0
     eda:	d002      	beq.n	ee2 <SEGGER_RTT_WriteNoLock+0x36>
     edc:	2b01      	cmp	r3, #1
     ede:	d013      	beq.n	f08 <SEGGER_RTT_WriteNoLock+0x5c>
     ee0:	e029      	b.n	f36 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     ee2:	9805      	ldr	r0, [sp, #20]
     ee4:	f7ff ffc3 	bl	e6e <_GetAvailWriteSpace>
     ee8:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     eea:	9a04      	ldr	r2, [sp, #16]
     eec:	9b01      	ldr	r3, [sp, #4]
     eee:	429a      	cmp	r2, r3
     ef0:	d202      	bcs.n	ef8 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     ef2:	2300      	movs	r3, #0
     ef4:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     ef6:	e021      	b.n	f3c <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     ef8:	9b01      	ldr	r3, [sp, #4]
     efa:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     efc:	9a01      	ldr	r2, [sp, #4]
     efe:	9906      	ldr	r1, [sp, #24]
     f00:	9805      	ldr	r0, [sp, #20]
     f02:	f7ff ff6d 	bl	de0 <_WriteNoCheck>
    break;
     f06:	e019      	b.n	f3c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     f08:	9805      	ldr	r0, [sp, #20]
     f0a:	f7ff ffb0 	bl	e6e <_GetAvailWriteSpace>
     f0e:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     f10:	9a01      	ldr	r2, [sp, #4]
     f12:	9b04      	ldr	r3, [sp, #16]
     f14:	4293      	cmp	r3, r2
     f16:	bf28      	it	cs
     f18:	4613      	movcs	r3, r2
     f1a:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     f1c:	9a07      	ldr	r2, [sp, #28]
     f1e:	9906      	ldr	r1, [sp, #24]
     f20:	9805      	ldr	r0, [sp, #20]
     f22:	f7ff ff5d 	bl	de0 <_WriteNoCheck>
    break;
     f26:	e009      	b.n	f3c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     f28:	9a01      	ldr	r2, [sp, #4]
     f2a:	9906      	ldr	r1, [sp, #24]
     f2c:	9805      	ldr	r0, [sp, #20]
     f2e:	f7ff fefb 	bl	d28 <_WriteBlocking>
     f32:	9007      	str	r0, [sp, #28]
    break;
     f34:	e002      	b.n	f3c <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     f36:	2300      	movs	r3, #0
     f38:	9307      	str	r3, [sp, #28]
    break;
     f3a:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     f3c:	9b07      	ldr	r3, [sp, #28]
}
     f3e:	4618      	mov	r0, r3
     f40:	b009      	add	sp, #36	; 0x24
     f42:	f85d fb04 	ldr.w	pc, [sp], #4
     f46:	bf00      	nop
     f48:	1fff918c 	.word	0x1fff918c

00000f4c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     f4c:	b500      	push	{lr}
     f4e:	b089      	sub	sp, #36	; 0x24
     f50:	9003      	str	r0, [sp, #12]
     f52:	9102      	str	r1, [sp, #8]
     f54:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     f56:	4b0f      	ldr	r3, [pc, #60]	; (f94 <SEGGER_RTT_Write+0x48>)
     f58:	9307      	str	r3, [sp, #28]
     f5a:	9b07      	ldr	r3, [sp, #28]
     f5c:	781b      	ldrb	r3, [r3, #0]
     f5e:	b2db      	uxtb	r3, r3
     f60:	2b53      	cmp	r3, #83	; 0x53
     f62:	d001      	beq.n	f68 <SEGGER_RTT_Write+0x1c>
     f64:	f7ff fe86 	bl	c74 <_DoInit>
  SEGGER_RTT_LOCK();
     f68:	f3ef 8311 	mrs	r3, BASEPRI
     f6c:	f04f 0120 	mov.w	r1, #32
     f70:	f381 8811 	msr	BASEPRI, r1
     f74:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     f76:	9a01      	ldr	r2, [sp, #4]
     f78:	9902      	ldr	r1, [sp, #8]
     f7a:	9803      	ldr	r0, [sp, #12]
     f7c:	f7ff ff96 	bl	eac <SEGGER_RTT_WriteNoLock>
     f80:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     f82:	9b06      	ldr	r3, [sp, #24]
     f84:	f383 8811 	msr	BASEPRI, r3
  return Status;
     f88:	9b05      	ldr	r3, [sp, #20]
}
     f8a:	4618      	mov	r0, r3
     f8c:	b009      	add	sp, #36	; 0x24
     f8e:	f85d fb04 	ldr.w	pc, [sp], #4
     f92:	bf00      	nop
     f94:	1fff918c 	.word	0x1fff918c

00000f98 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
     f98:	b508      	push	{r3, lr}
  _DoInit();
     f9a:	f7ff fe6b 	bl	c74 <_DoInit>
}
     f9e:	bf00      	nop
     fa0:	bd08      	pop	{r3, pc}

00000fa2 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     fa2:	b500      	push	{lr}
     fa4:	b085      	sub	sp, #20
     fa6:	9001      	str	r0, [sp, #4]
     fa8:	460b      	mov	r3, r1
     faa:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     fae:	9b01      	ldr	r3, [sp, #4]
     fb0:	689b      	ldr	r3, [r3, #8]
     fb2:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     fb4:	9b03      	ldr	r3, [sp, #12]
     fb6:	1c5a      	adds	r2, r3, #1
     fb8:	9b01      	ldr	r3, [sp, #4]
     fba:	685b      	ldr	r3, [r3, #4]
     fbc:	429a      	cmp	r2, r3
     fbe:	d80f      	bhi.n	fe0 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     fc0:	9b01      	ldr	r3, [sp, #4]
     fc2:	681a      	ldr	r2, [r3, #0]
     fc4:	9b03      	ldr	r3, [sp, #12]
     fc6:	4413      	add	r3, r2
     fc8:	f89d 2003 	ldrb.w	r2, [sp, #3]
     fcc:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     fce:	9b03      	ldr	r3, [sp, #12]
     fd0:	1c5a      	adds	r2, r3, #1
     fd2:	9b01      	ldr	r3, [sp, #4]
     fd4:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     fd6:	9b01      	ldr	r3, [sp, #4]
     fd8:	68db      	ldr	r3, [r3, #12]
     fda:	1c5a      	adds	r2, r3, #1
     fdc:	9b01      	ldr	r3, [sp, #4]
     fde:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     fe0:	9b01      	ldr	r3, [sp, #4]
     fe2:	689a      	ldr	r2, [r3, #8]
     fe4:	9b01      	ldr	r3, [sp, #4]
     fe6:	685b      	ldr	r3, [r3, #4]
     fe8:	429a      	cmp	r2, r3
     fea:	d115      	bne.n	1018 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     fec:	9b01      	ldr	r3, [sp, #4]
     fee:	6918      	ldr	r0, [r3, #16]
     ff0:	9b01      	ldr	r3, [sp, #4]
     ff2:	6819      	ldr	r1, [r3, #0]
     ff4:	9b01      	ldr	r3, [sp, #4]
     ff6:	689b      	ldr	r3, [r3, #8]
     ff8:	461a      	mov	r2, r3
     ffa:	f7ff ffa7 	bl	f4c <SEGGER_RTT_Write>
     ffe:	4602      	mov	r2, r0
    1000:	9b01      	ldr	r3, [sp, #4]
    1002:	689b      	ldr	r3, [r3, #8]
    1004:	429a      	cmp	r2, r3
    1006:	d004      	beq.n	1012 <_StoreChar+0x70>
      p->ReturnValue = -1;
    1008:	9b01      	ldr	r3, [sp, #4]
    100a:	f04f 32ff 	mov.w	r2, #4294967295
    100e:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1010:	e002      	b.n	1018 <_StoreChar+0x76>
      p->Cnt = 0u;
    1012:	9b01      	ldr	r3, [sp, #4]
    1014:	2200      	movs	r2, #0
    1016:	609a      	str	r2, [r3, #8]
}
    1018:	bf00      	nop
    101a:	b005      	add	sp, #20
    101c:	f85d fb04 	ldr.w	pc, [sp], #4

00001020 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1020:	b500      	push	{lr}
    1022:	b08b      	sub	sp, #44	; 0x2c
    1024:	9003      	str	r0, [sp, #12]
    1026:	9102      	str	r1, [sp, #8]
    1028:	9201      	str	r2, [sp, #4]
    102a:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    102c:	9b02      	ldr	r3, [sp, #8]
    102e:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1030:	2301      	movs	r3, #1
    1032:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1034:	2301      	movs	r3, #1
    1036:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1038:	e007      	b.n	104a <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    103a:	9a08      	ldr	r2, [sp, #32]
    103c:	9b01      	ldr	r3, [sp, #4]
    103e:	fbb2 f3f3 	udiv	r3, r2, r3
    1042:	9308      	str	r3, [sp, #32]
    Width++;
    1044:	9b07      	ldr	r3, [sp, #28]
    1046:	3301      	adds	r3, #1
    1048:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    104a:	9a08      	ldr	r2, [sp, #32]
    104c:	9b01      	ldr	r3, [sp, #4]
    104e:	429a      	cmp	r2, r3
    1050:	d2f3      	bcs.n	103a <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1052:	9a00      	ldr	r2, [sp, #0]
    1054:	9b07      	ldr	r3, [sp, #28]
    1056:	429a      	cmp	r2, r3
    1058:	d901      	bls.n	105e <_PrintUnsigned+0x3e>
    Width = NumDigits;
    105a:	9b00      	ldr	r3, [sp, #0]
    105c:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    105e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1060:	f003 0301 	and.w	r3, r3, #1
    1064:	2b00      	cmp	r3, #0
    1066:	d128      	bne.n	10ba <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    106a:	2b00      	cmp	r3, #0
    106c:	d025      	beq.n	10ba <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    106e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1070:	f003 0302 	and.w	r3, r3, #2
    1074:	2b00      	cmp	r3, #0
    1076:	d006      	beq.n	1086 <_PrintUnsigned+0x66>
    1078:	9b00      	ldr	r3, [sp, #0]
    107a:	2b00      	cmp	r3, #0
    107c:	d103      	bne.n	1086 <_PrintUnsigned+0x66>
        c = '0';
    107e:	2330      	movs	r3, #48	; 0x30
    1080:	f88d 301b 	strb.w	r3, [sp, #27]
    1084:	e002      	b.n	108c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1086:	2320      	movs	r3, #32
    1088:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    108c:	e00c      	b.n	10a8 <_PrintUnsigned+0x88>
        FieldWidth--;
    108e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1090:	3b01      	subs	r3, #1
    1092:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1094:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1098:	4619      	mov	r1, r3
    109a:	9803      	ldr	r0, [sp, #12]
    109c:	f7ff ff81 	bl	fa2 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    10a0:	9b03      	ldr	r3, [sp, #12]
    10a2:	68db      	ldr	r3, [r3, #12]
    10a4:	2b00      	cmp	r3, #0
    10a6:	db07      	blt.n	10b8 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    10a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10aa:	2b00      	cmp	r3, #0
    10ac:	d005      	beq.n	10ba <_PrintUnsigned+0x9a>
    10ae:	9a07      	ldr	r2, [sp, #28]
    10b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10b2:	429a      	cmp	r2, r3
    10b4:	d3eb      	bcc.n	108e <_PrintUnsigned+0x6e>
    10b6:	e000      	b.n	10ba <_PrintUnsigned+0x9a>
          break;
    10b8:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    10ba:	9b03      	ldr	r3, [sp, #12]
    10bc:	68db      	ldr	r3, [r3, #12]
    10be:	2b00      	cmp	r3, #0
    10c0:	db55      	blt.n	116e <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    10c2:	9b00      	ldr	r3, [sp, #0]
    10c4:	2b01      	cmp	r3, #1
    10c6:	d903      	bls.n	10d0 <_PrintUnsigned+0xb0>
        NumDigits--;
    10c8:	9b00      	ldr	r3, [sp, #0]
    10ca:	3b01      	subs	r3, #1
    10cc:	9300      	str	r3, [sp, #0]
    10ce:	e009      	b.n	10e4 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    10d0:	9a02      	ldr	r2, [sp, #8]
    10d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10d4:	fbb2 f3f3 	udiv	r3, r2, r3
    10d8:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    10da:	9a05      	ldr	r2, [sp, #20]
    10dc:	9b01      	ldr	r3, [sp, #4]
    10de:	429a      	cmp	r2, r3
    10e0:	d200      	bcs.n	10e4 <_PrintUnsigned+0xc4>
          break;
    10e2:	e005      	b.n	10f0 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    10e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10e6:	9a01      	ldr	r2, [sp, #4]
    10e8:	fb02 f303 	mul.w	r3, r2, r3
    10ec:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    10ee:	e7e8      	b.n	10c2 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    10f0:	9a02      	ldr	r2, [sp, #8]
    10f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10f4:	fbb2 f3f3 	udiv	r3, r2, r3
    10f8:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    10fa:	9b05      	ldr	r3, [sp, #20]
    10fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10fe:	fb02 f303 	mul.w	r3, r2, r3
    1102:	9a02      	ldr	r2, [sp, #8]
    1104:	1ad3      	subs	r3, r2, r3
    1106:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1108:	4a1b      	ldr	r2, [pc, #108]	; (1178 <_PrintUnsigned+0x158>)
    110a:	9b05      	ldr	r3, [sp, #20]
    110c:	4413      	add	r3, r2
    110e:	781b      	ldrb	r3, [r3, #0]
    1110:	4619      	mov	r1, r3
    1112:	9803      	ldr	r0, [sp, #12]
    1114:	f7ff ff45 	bl	fa2 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1118:	9b03      	ldr	r3, [sp, #12]
    111a:	68db      	ldr	r3, [r3, #12]
    111c:	2b00      	cmp	r3, #0
    111e:	db08      	blt.n	1132 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1120:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1122:	9b01      	ldr	r3, [sp, #4]
    1124:	fbb2 f3f3 	udiv	r3, r2, r3
    1128:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    112a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    112c:	2b00      	cmp	r3, #0
    112e:	d1df      	bne.n	10f0 <_PrintUnsigned+0xd0>
    1130:	e000      	b.n	1134 <_PrintUnsigned+0x114>
        break;
    1132:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1134:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1136:	f003 0301 	and.w	r3, r3, #1
    113a:	2b00      	cmp	r3, #0
    113c:	d017      	beq.n	116e <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    113e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1140:	2b00      	cmp	r3, #0
    1142:	d014      	beq.n	116e <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1144:	e00a      	b.n	115c <_PrintUnsigned+0x13c>
          FieldWidth--;
    1146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1148:	3b01      	subs	r3, #1
    114a:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    114c:	2120      	movs	r1, #32
    114e:	9803      	ldr	r0, [sp, #12]
    1150:	f7ff ff27 	bl	fa2 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1154:	9b03      	ldr	r3, [sp, #12]
    1156:	68db      	ldr	r3, [r3, #12]
    1158:	2b00      	cmp	r3, #0
    115a:	db07      	blt.n	116c <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    115c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    115e:	2b00      	cmp	r3, #0
    1160:	d005      	beq.n	116e <_PrintUnsigned+0x14e>
    1162:	9a07      	ldr	r2, [sp, #28]
    1164:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1166:	429a      	cmp	r2, r3
    1168:	d3ed      	bcc.n	1146 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    116a:	e000      	b.n	116e <_PrintUnsigned+0x14e>
            break;
    116c:	bf00      	nop
}
    116e:	bf00      	nop
    1170:	b00b      	add	sp, #44	; 0x2c
    1172:	f85d fb04 	ldr.w	pc, [sp], #4
    1176:	bf00      	nop
    1178:	0000ffd4 	.word	0x0000ffd4

0000117c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    117c:	b500      	push	{lr}
    117e:	b089      	sub	sp, #36	; 0x24
    1180:	9005      	str	r0, [sp, #20]
    1182:	9104      	str	r1, [sp, #16]
    1184:	9203      	str	r2, [sp, #12]
    1186:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1188:	9b04      	ldr	r3, [sp, #16]
    118a:	2b00      	cmp	r3, #0
    118c:	bfb8      	it	lt
    118e:	425b      	neglt	r3, r3
    1190:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1192:	2301      	movs	r3, #1
    1194:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1196:	e007      	b.n	11a8 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1198:	9b03      	ldr	r3, [sp, #12]
    119a:	9a06      	ldr	r2, [sp, #24]
    119c:	fb92 f3f3 	sdiv	r3, r2, r3
    11a0:	9306      	str	r3, [sp, #24]
    Width++;
    11a2:	9b07      	ldr	r3, [sp, #28]
    11a4:	3301      	adds	r3, #1
    11a6:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    11a8:	9b03      	ldr	r3, [sp, #12]
    11aa:	9a06      	ldr	r2, [sp, #24]
    11ac:	429a      	cmp	r2, r3
    11ae:	daf3      	bge.n	1198 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    11b0:	9a02      	ldr	r2, [sp, #8]
    11b2:	9b07      	ldr	r3, [sp, #28]
    11b4:	429a      	cmp	r2, r3
    11b6:	d901      	bls.n	11bc <_PrintInt+0x40>
    Width = NumDigits;
    11b8:	9b02      	ldr	r3, [sp, #8]
    11ba:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    11bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11be:	2b00      	cmp	r3, #0
    11c0:	d00a      	beq.n	11d8 <_PrintInt+0x5c>
    11c2:	9b04      	ldr	r3, [sp, #16]
    11c4:	2b00      	cmp	r3, #0
    11c6:	db04      	blt.n	11d2 <_PrintInt+0x56>
    11c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11ca:	f003 0304 	and.w	r3, r3, #4
    11ce:	2b00      	cmp	r3, #0
    11d0:	d002      	beq.n	11d8 <_PrintInt+0x5c>
    FieldWidth--;
    11d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11d4:	3b01      	subs	r3, #1
    11d6:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    11d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11da:	f003 0302 	and.w	r3, r3, #2
    11de:	2b00      	cmp	r3, #0
    11e0:	d002      	beq.n	11e8 <_PrintInt+0x6c>
    11e2:	9b02      	ldr	r3, [sp, #8]
    11e4:	2b00      	cmp	r3, #0
    11e6:	d01c      	beq.n	1222 <_PrintInt+0xa6>
    11e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11ea:	f003 0301 	and.w	r3, r3, #1
    11ee:	2b00      	cmp	r3, #0
    11f0:	d117      	bne.n	1222 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    11f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11f4:	2b00      	cmp	r3, #0
    11f6:	d014      	beq.n	1222 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11f8:	e00a      	b.n	1210 <_PrintInt+0x94>
        FieldWidth--;
    11fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11fc:	3b01      	subs	r3, #1
    11fe:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1200:	2120      	movs	r1, #32
    1202:	9805      	ldr	r0, [sp, #20]
    1204:	f7ff fecd 	bl	fa2 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1208:	9b05      	ldr	r3, [sp, #20]
    120a:	68db      	ldr	r3, [r3, #12]
    120c:	2b00      	cmp	r3, #0
    120e:	db07      	blt.n	1220 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1212:	2b00      	cmp	r3, #0
    1214:	d005      	beq.n	1222 <_PrintInt+0xa6>
    1216:	9a07      	ldr	r2, [sp, #28]
    1218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    121a:	429a      	cmp	r2, r3
    121c:	d3ed      	bcc.n	11fa <_PrintInt+0x7e>
    121e:	e000      	b.n	1222 <_PrintInt+0xa6>
          break;
    1220:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1222:	9b05      	ldr	r3, [sp, #20]
    1224:	68db      	ldr	r3, [r3, #12]
    1226:	2b00      	cmp	r3, #0
    1228:	db4a      	blt.n	12c0 <_PrintInt+0x144>
    if (v < 0) {
    122a:	9b04      	ldr	r3, [sp, #16]
    122c:	2b00      	cmp	r3, #0
    122e:	da07      	bge.n	1240 <_PrintInt+0xc4>
      v = -v;
    1230:	9b04      	ldr	r3, [sp, #16]
    1232:	425b      	negs	r3, r3
    1234:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1236:	212d      	movs	r1, #45	; 0x2d
    1238:	9805      	ldr	r0, [sp, #20]
    123a:	f7ff feb2 	bl	fa2 <_StoreChar>
    123e:	e008      	b.n	1252 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1242:	f003 0304 	and.w	r3, r3, #4
    1246:	2b00      	cmp	r3, #0
    1248:	d003      	beq.n	1252 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    124a:	212b      	movs	r1, #43	; 0x2b
    124c:	9805      	ldr	r0, [sp, #20]
    124e:	f7ff fea8 	bl	fa2 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1252:	9b05      	ldr	r3, [sp, #20]
    1254:	68db      	ldr	r3, [r3, #12]
    1256:	2b00      	cmp	r3, #0
    1258:	db32      	blt.n	12c0 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    125a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    125c:	f003 0302 	and.w	r3, r3, #2
    1260:	2b00      	cmp	r3, #0
    1262:	d01f      	beq.n	12a4 <_PrintInt+0x128>
    1264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1266:	f003 0301 	and.w	r3, r3, #1
    126a:	2b00      	cmp	r3, #0
    126c:	d11a      	bne.n	12a4 <_PrintInt+0x128>
    126e:	9b02      	ldr	r3, [sp, #8]
    1270:	2b00      	cmp	r3, #0
    1272:	d117      	bne.n	12a4 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1276:	2b00      	cmp	r3, #0
    1278:	d014      	beq.n	12a4 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    127a:	e00a      	b.n	1292 <_PrintInt+0x116>
            FieldWidth--;
    127c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    127e:	3b01      	subs	r3, #1
    1280:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1282:	2130      	movs	r1, #48	; 0x30
    1284:	9805      	ldr	r0, [sp, #20]
    1286:	f7ff fe8c 	bl	fa2 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    128a:	9b05      	ldr	r3, [sp, #20]
    128c:	68db      	ldr	r3, [r3, #12]
    128e:	2b00      	cmp	r3, #0
    1290:	db07      	blt.n	12a2 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1294:	2b00      	cmp	r3, #0
    1296:	d005      	beq.n	12a4 <_PrintInt+0x128>
    1298:	9a07      	ldr	r2, [sp, #28]
    129a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    129c:	429a      	cmp	r2, r3
    129e:	d3ed      	bcc.n	127c <_PrintInt+0x100>
    12a0:	e000      	b.n	12a4 <_PrintInt+0x128>
              break;
    12a2:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    12a4:	9b05      	ldr	r3, [sp, #20]
    12a6:	68db      	ldr	r3, [r3, #12]
    12a8:	2b00      	cmp	r3, #0
    12aa:	db09      	blt.n	12c0 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    12ac:	9904      	ldr	r1, [sp, #16]
    12ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    12b0:	9301      	str	r3, [sp, #4]
    12b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12b4:	9300      	str	r3, [sp, #0]
    12b6:	9b02      	ldr	r3, [sp, #8]
    12b8:	9a03      	ldr	r2, [sp, #12]
    12ba:	9805      	ldr	r0, [sp, #20]
    12bc:	f7ff feb0 	bl	1020 <_PrintUnsigned>
      }
    }
  }
}
    12c0:	bf00      	nop
    12c2:	b009      	add	sp, #36	; 0x24
    12c4:	f85d fb04 	ldr.w	pc, [sp], #4

000012c8 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    12c8:	b500      	push	{lr}
    12ca:	b0a3      	sub	sp, #140	; 0x8c
    12cc:	9005      	str	r0, [sp, #20]
    12ce:	9104      	str	r1, [sp, #16]
    12d0:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    12d2:	ab06      	add	r3, sp, #24
    12d4:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    12d6:	2340      	movs	r3, #64	; 0x40
    12d8:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    12da:	2300      	movs	r3, #0
    12dc:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    12de:	9b05      	ldr	r3, [sp, #20]
    12e0:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    12e2:	2300      	movs	r3, #0
    12e4:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    12e6:	9b04      	ldr	r3, [sp, #16]
    12e8:	781b      	ldrb	r3, [r3, #0]
    12ea:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    12ee:	9b04      	ldr	r3, [sp, #16]
    12f0:	3301      	adds	r3, #1
    12f2:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    12f4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12f8:	2b00      	cmp	r3, #0
    12fa:	f000 819c 	beq.w	1636 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    12fe:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1302:	2b25      	cmp	r3, #37	; 0x25
    1304:	f040 818b 	bne.w	161e <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1308:	2300      	movs	r3, #0
    130a:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    130c:	2301      	movs	r3, #1
    130e:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1310:	9b04      	ldr	r3, [sp, #16]
    1312:	781b      	ldrb	r3, [r3, #0]
    1314:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1318:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    131c:	3b23      	subs	r3, #35	; 0x23
    131e:	2b0d      	cmp	r3, #13
    1320:	d83e      	bhi.n	13a0 <SEGGER_RTT_vprintf+0xd8>
    1322:	a201      	add	r2, pc, #4	; (adr r2, 1328 <SEGGER_RTT_vprintf+0x60>)
    1324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1328:	00001391 	.word	0x00001391
    132c:	000013a1 	.word	0x000013a1
    1330:	000013a1 	.word	0x000013a1
    1334:	000013a1 	.word	0x000013a1
    1338:	000013a1 	.word	0x000013a1
    133c:	000013a1 	.word	0x000013a1
    1340:	000013a1 	.word	0x000013a1
    1344:	000013a1 	.word	0x000013a1
    1348:	00001381 	.word	0x00001381
    134c:	000013a1 	.word	0x000013a1
    1350:	00001361 	.word	0x00001361
    1354:	000013a1 	.word	0x000013a1
    1358:	000013a1 	.word	0x000013a1
    135c:	00001371 	.word	0x00001371
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1360:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1362:	f043 0301 	orr.w	r3, r3, #1
    1366:	931e      	str	r3, [sp, #120]	; 0x78
    1368:	9b04      	ldr	r3, [sp, #16]
    136a:	3301      	adds	r3, #1
    136c:	9304      	str	r3, [sp, #16]
    136e:	e01a      	b.n	13a6 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1370:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1372:	f043 0302 	orr.w	r3, r3, #2
    1376:	931e      	str	r3, [sp, #120]	; 0x78
    1378:	9b04      	ldr	r3, [sp, #16]
    137a:	3301      	adds	r3, #1
    137c:	9304      	str	r3, [sp, #16]
    137e:	e012      	b.n	13a6 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1380:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1382:	f043 0304 	orr.w	r3, r3, #4
    1386:	931e      	str	r3, [sp, #120]	; 0x78
    1388:	9b04      	ldr	r3, [sp, #16]
    138a:	3301      	adds	r3, #1
    138c:	9304      	str	r3, [sp, #16]
    138e:	e00a      	b.n	13a6 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1390:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1392:	f043 0308 	orr.w	r3, r3, #8
    1396:	931e      	str	r3, [sp, #120]	; 0x78
    1398:	9b04      	ldr	r3, [sp, #16]
    139a:	3301      	adds	r3, #1
    139c:	9304      	str	r3, [sp, #16]
    139e:	e002      	b.n	13a6 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    13a0:	2300      	movs	r3, #0
    13a2:	9320      	str	r3, [sp, #128]	; 0x80
    13a4:	bf00      	nop
        }
      } while (v);
    13a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    13a8:	2b00      	cmp	r3, #0
    13aa:	d1b1      	bne.n	1310 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    13ac:	2300      	movs	r3, #0
    13ae:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    13b0:	9b04      	ldr	r3, [sp, #16]
    13b2:	781b      	ldrb	r3, [r3, #0]
    13b4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    13b8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13bc:	2b2f      	cmp	r3, #47	; 0x2f
    13be:	d912      	bls.n	13e6 <SEGGER_RTT_vprintf+0x11e>
    13c0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13c4:	2b39      	cmp	r3, #57	; 0x39
    13c6:	d80e      	bhi.n	13e6 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    13c8:	9b04      	ldr	r3, [sp, #16]
    13ca:	3301      	adds	r3, #1
    13cc:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    13ce:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    13d0:	4613      	mov	r3, r2
    13d2:	009b      	lsls	r3, r3, #2
    13d4:	4413      	add	r3, r2
    13d6:	005b      	lsls	r3, r3, #1
    13d8:	461a      	mov	r2, r3
    13da:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13de:	4413      	add	r3, r2
    13e0:	3b30      	subs	r3, #48	; 0x30
    13e2:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    13e4:	e7e4      	b.n	13b0 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    13e6:	2300      	movs	r3, #0
    13e8:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    13ea:	9b04      	ldr	r3, [sp, #16]
    13ec:	781b      	ldrb	r3, [r3, #0]
    13ee:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    13f2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13f6:	2b2e      	cmp	r3, #46	; 0x2e
    13f8:	d11d      	bne.n	1436 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    13fa:	9b04      	ldr	r3, [sp, #16]
    13fc:	3301      	adds	r3, #1
    13fe:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1400:	9b04      	ldr	r3, [sp, #16]
    1402:	781b      	ldrb	r3, [r3, #0]
    1404:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1408:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    140c:	2b2f      	cmp	r3, #47	; 0x2f
    140e:	d912      	bls.n	1436 <SEGGER_RTT_vprintf+0x16e>
    1410:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1414:	2b39      	cmp	r3, #57	; 0x39
    1416:	d80e      	bhi.n	1436 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1418:	9b04      	ldr	r3, [sp, #16]
    141a:	3301      	adds	r3, #1
    141c:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    141e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1420:	4613      	mov	r3, r2
    1422:	009b      	lsls	r3, r3, #2
    1424:	4413      	add	r3, r2
    1426:	005b      	lsls	r3, r3, #1
    1428:	461a      	mov	r2, r3
    142a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    142e:	4413      	add	r3, r2
    1430:	3b30      	subs	r3, #48	; 0x30
    1432:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1434:	e7e4      	b.n	1400 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1436:	9b04      	ldr	r3, [sp, #16]
    1438:	781b      	ldrb	r3, [r3, #0]
    143a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    143e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1442:	2b6c      	cmp	r3, #108	; 0x6c
    1444:	d003      	beq.n	144e <SEGGER_RTT_vprintf+0x186>
    1446:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    144a:	2b68      	cmp	r3, #104	; 0x68
    144c:	d107      	bne.n	145e <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    144e:	9b04      	ldr	r3, [sp, #16]
    1450:	3301      	adds	r3, #1
    1452:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1454:	9b04      	ldr	r3, [sp, #16]
    1456:	781b      	ldrb	r3, [r3, #0]
    1458:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    145c:	e7ef      	b.n	143e <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    145e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1462:	2b25      	cmp	r3, #37	; 0x25
    1464:	f000 80d0 	beq.w	1608 <SEGGER_RTT_vprintf+0x340>
    1468:	2b25      	cmp	r3, #37	; 0x25
    146a:	f2c0 80d3 	blt.w	1614 <SEGGER_RTT_vprintf+0x34c>
    146e:	2b78      	cmp	r3, #120	; 0x78
    1470:	f300 80d0 	bgt.w	1614 <SEGGER_RTT_vprintf+0x34c>
    1474:	2b58      	cmp	r3, #88	; 0x58
    1476:	f2c0 80cd 	blt.w	1614 <SEGGER_RTT_vprintf+0x34c>
    147a:	3b58      	subs	r3, #88	; 0x58
    147c:	2b20      	cmp	r3, #32
    147e:	f200 80c9 	bhi.w	1614 <SEGGER_RTT_vprintf+0x34c>
    1482:	a201      	add	r2, pc, #4	; (adr r2, 1488 <SEGGER_RTT_vprintf+0x1c0>)
    1484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1488:	00001579 	.word	0x00001579
    148c:	00001615 	.word	0x00001615
    1490:	00001615 	.word	0x00001615
    1494:	00001615 	.word	0x00001615
    1498:	00001615 	.word	0x00001615
    149c:	00001615 	.word	0x00001615
    14a0:	00001615 	.word	0x00001615
    14a4:	00001615 	.word	0x00001615
    14a8:	00001615 	.word	0x00001615
    14ac:	00001615 	.word	0x00001615
    14b0:	00001615 	.word	0x00001615
    14b4:	0000150d 	.word	0x0000150d
    14b8:	00001531 	.word	0x00001531
    14bc:	00001615 	.word	0x00001615
    14c0:	00001615 	.word	0x00001615
    14c4:	00001615 	.word	0x00001615
    14c8:	00001615 	.word	0x00001615
    14cc:	00001615 	.word	0x00001615
    14d0:	00001615 	.word	0x00001615
    14d4:	00001615 	.word	0x00001615
    14d8:	00001615 	.word	0x00001615
    14dc:	00001615 	.word	0x00001615
    14e0:	00001615 	.word	0x00001615
    14e4:	00001615 	.word	0x00001615
    14e8:	000015e5 	.word	0x000015e5
    14ec:	00001615 	.word	0x00001615
    14f0:	00001615 	.word	0x00001615
    14f4:	0000159d 	.word	0x0000159d
    14f8:	00001615 	.word	0x00001615
    14fc:	00001555 	.word	0x00001555
    1500:	00001615 	.word	0x00001615
    1504:	00001615 	.word	0x00001615
    1508:	00001579 	.word	0x00001579
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    150c:	9b03      	ldr	r3, [sp, #12]
    150e:	681b      	ldr	r3, [r3, #0]
    1510:	1d19      	adds	r1, r3, #4
    1512:	9a03      	ldr	r2, [sp, #12]
    1514:	6011      	str	r1, [r2, #0]
    1516:	681b      	ldr	r3, [r3, #0]
    1518:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    151a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    151c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1520:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1524:	ab16      	add	r3, sp, #88	; 0x58
    1526:	4611      	mov	r1, r2
    1528:	4618      	mov	r0, r3
    152a:	f7ff fd3a 	bl	fa2 <_StoreChar>
        break;
    152e:	e072      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1530:	9b03      	ldr	r3, [sp, #12]
    1532:	681b      	ldr	r3, [r3, #0]
    1534:	1d19      	adds	r1, r3, #4
    1536:	9a03      	ldr	r2, [sp, #12]
    1538:	6011      	str	r1, [r2, #0]
    153a:	681b      	ldr	r3, [r3, #0]
    153c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    153e:	a816      	add	r0, sp, #88	; 0x58
    1540:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1542:	9301      	str	r3, [sp, #4]
    1544:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1546:	9300      	str	r3, [sp, #0]
    1548:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    154a:	220a      	movs	r2, #10
    154c:	9920      	ldr	r1, [sp, #128]	; 0x80
    154e:	f7ff fe15 	bl	117c <_PrintInt>
        break;
    1552:	e060      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1554:	9b03      	ldr	r3, [sp, #12]
    1556:	681b      	ldr	r3, [r3, #0]
    1558:	1d19      	adds	r1, r3, #4
    155a:	9a03      	ldr	r2, [sp, #12]
    155c:	6011      	str	r1, [r2, #0]
    155e:	681b      	ldr	r3, [r3, #0]
    1560:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1562:	9920      	ldr	r1, [sp, #128]	; 0x80
    1564:	a816      	add	r0, sp, #88	; 0x58
    1566:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1568:	9301      	str	r3, [sp, #4]
    156a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    156c:	9300      	str	r3, [sp, #0]
    156e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1570:	220a      	movs	r2, #10
    1572:	f7ff fd55 	bl	1020 <_PrintUnsigned>
        break;
    1576:	e04e      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1578:	9b03      	ldr	r3, [sp, #12]
    157a:	681b      	ldr	r3, [r3, #0]
    157c:	1d19      	adds	r1, r3, #4
    157e:	9a03      	ldr	r2, [sp, #12]
    1580:	6011      	str	r1, [r2, #0]
    1582:	681b      	ldr	r3, [r3, #0]
    1584:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1586:	9920      	ldr	r1, [sp, #128]	; 0x80
    1588:	a816      	add	r0, sp, #88	; 0x58
    158a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    158c:	9301      	str	r3, [sp, #4]
    158e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1590:	9300      	str	r3, [sp, #0]
    1592:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1594:	2210      	movs	r2, #16
    1596:	f7ff fd43 	bl	1020 <_PrintUnsigned>
        break;
    159a:	e03c      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    159c:	9b03      	ldr	r3, [sp, #12]
    159e:	681b      	ldr	r3, [r3, #0]
    15a0:	1d19      	adds	r1, r3, #4
    15a2:	9a03      	ldr	r2, [sp, #12]
    15a4:	6011      	str	r1, [r2, #0]
    15a6:	681b      	ldr	r3, [r3, #0]
    15a8:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    15aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    15ac:	2b00      	cmp	r3, #0
    15ae:	d101      	bne.n	15b4 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    15b0:	4b2c      	ldr	r3, [pc, #176]	; (1664 <SEGGER_RTT_vprintf+0x39c>)
    15b2:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    15b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    15b6:	781b      	ldrb	r3, [r3, #0]
    15b8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    15bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    15be:	3301      	adds	r3, #1
    15c0:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    15c2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    15c6:	2b00      	cmp	r3, #0
    15c8:	d00a      	beq.n	15e0 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    15ca:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    15ce:	ab16      	add	r3, sp, #88	; 0x58
    15d0:	4611      	mov	r1, r2
    15d2:	4618      	mov	r0, r3
    15d4:	f7ff fce5 	bl	fa2 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    15d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15da:	2b00      	cmp	r3, #0
    15dc:	daea      	bge.n	15b4 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    15de:	e01a      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
              break;
    15e0:	bf00      	nop
        break;
    15e2:	e018      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    15e4:	9b03      	ldr	r3, [sp, #12]
    15e6:	681b      	ldr	r3, [r3, #0]
    15e8:	1d19      	adds	r1, r3, #4
    15ea:	9a03      	ldr	r2, [sp, #12]
    15ec:	6011      	str	r1, [r2, #0]
    15ee:	681b      	ldr	r3, [r3, #0]
    15f0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    15f2:	9920      	ldr	r1, [sp, #128]	; 0x80
    15f4:	a816      	add	r0, sp, #88	; 0x58
    15f6:	2300      	movs	r3, #0
    15f8:	9301      	str	r3, [sp, #4]
    15fa:	2308      	movs	r3, #8
    15fc:	9300      	str	r3, [sp, #0]
    15fe:	2308      	movs	r3, #8
    1600:	2210      	movs	r2, #16
    1602:	f7ff fd0d 	bl	1020 <_PrintUnsigned>
        break;
    1606:	e006      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1608:	ab16      	add	r3, sp, #88	; 0x58
    160a:	2125      	movs	r1, #37	; 0x25
    160c:	4618      	mov	r0, r3
    160e:	f7ff fcc8 	bl	fa2 <_StoreChar>
        break;
    1612:	e000      	b.n	1616 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1614:	bf00      	nop
      }
      sFormat++;
    1616:	9b04      	ldr	r3, [sp, #16]
    1618:	3301      	adds	r3, #1
    161a:	9304      	str	r3, [sp, #16]
    161c:	e006      	b.n	162c <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    161e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1622:	ab16      	add	r3, sp, #88	; 0x58
    1624:	4611      	mov	r1, r2
    1626:	4618      	mov	r0, r3
    1628:	f7ff fcbb 	bl	fa2 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    162c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    162e:	2b00      	cmp	r3, #0
    1630:	f6bf ae59 	bge.w	12e6 <SEGGER_RTT_vprintf+0x1e>
    1634:	e000      	b.n	1638 <SEGGER_RTT_vprintf+0x370>
      break;
    1636:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1638:	9b19      	ldr	r3, [sp, #100]	; 0x64
    163a:	2b00      	cmp	r3, #0
    163c:	dd0c      	ble.n	1658 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    163e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1640:	2b00      	cmp	r3, #0
    1642:	d005      	beq.n	1650 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1644:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1646:	ab06      	add	r3, sp, #24
    1648:	4619      	mov	r1, r3
    164a:	9805      	ldr	r0, [sp, #20]
    164c:	f7ff fc7e 	bl	f4c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1650:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1652:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1654:	4413      	add	r3, r2
    1656:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1658:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    165a:	4618      	mov	r0, r3
    165c:	b023      	add	sp, #140	; 0x8c
    165e:	f85d fb04 	ldr.w	pc, [sp], #4
    1662:	bf00      	nop
    1664:	0000ed3c 	.word	0x0000ed3c

00001668 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1668:	b40e      	push	{r1, r2, r3}
    166a:	b500      	push	{lr}
    166c:	b084      	sub	sp, #16
    166e:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1670:	ab06      	add	r3, sp, #24
    1672:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1674:	ab02      	add	r3, sp, #8
    1676:	461a      	mov	r2, r3
    1678:	9905      	ldr	r1, [sp, #20]
    167a:	9801      	ldr	r0, [sp, #4]
    167c:	f7ff fe24 	bl	12c8 <SEGGER_RTT_vprintf>
    1680:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1682:	9b03      	ldr	r3, [sp, #12]
}
    1684:	4618      	mov	r0, r3
    1686:	b004      	add	sp, #16
    1688:	f85d eb04 	ldr.w	lr, [sp], #4
    168c:	b003      	add	sp, #12
    168e:	4770      	bx	lr

00001690 <memcpy>:
    1690:	440a      	add	r2, r1
    1692:	4291      	cmp	r1, r2
    1694:	f100 33ff 	add.w	r3, r0, #4294967295
    1698:	d100      	bne.n	169c <memcpy+0xc>
    169a:	4770      	bx	lr
    169c:	b510      	push	{r4, lr}
    169e:	f811 4b01 	ldrb.w	r4, [r1], #1
    16a2:	f803 4f01 	strb.w	r4, [r3, #1]!
    16a6:	4291      	cmp	r1, r2
    16a8:	d1f9      	bne.n	169e <memcpy+0xe>
    16aa:	bd10      	pop	{r4, pc}

000016ac <memset>:
    16ac:	4402      	add	r2, r0
    16ae:	4603      	mov	r3, r0
    16b0:	4293      	cmp	r3, r2
    16b2:	d100      	bne.n	16b6 <memset+0xa>
    16b4:	4770      	bx	lr
    16b6:	f803 1b01 	strb.w	r1, [r3], #1
    16ba:	e7f9      	b.n	16b0 <memset+0x4>

000016bc <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    16bc:	b086      	sub	sp, #24
    16be:	9003      	str	r0, [sp, #12]
    16c0:	9102      	str	r1, [sp, #8]
    16c2:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    16c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    16c8:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    16cc:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    16ce:	9b01      	ldr	r3, [sp, #4]
    16d0:	2b00      	cmp	r3, #0
    16d2:	d007      	beq.n	16e4 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    16d4:	9b03      	ldr	r3, [sp, #12]
    16d6:	3310      	adds	r3, #16
    16d8:	009b      	lsls	r3, r3, #2
    16da:	9a05      	ldr	r2, [sp, #20]
    16dc:	4413      	add	r3, r2
    16de:	681a      	ldr	r2, [r3, #0]
    16e0:	9b01      	ldr	r3, [sp, #4]
    16e2:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    16e4:	9b03      	ldr	r3, [sp, #12]
    16e6:	3310      	adds	r3, #16
    16e8:	009b      	lsls	r3, r3, #2
    16ea:	9a05      	ldr	r2, [sp, #20]
    16ec:	4413      	add	r3, r2
    16ee:	9a02      	ldr	r2, [sp, #8]
    16f0:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    16f2:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    16f6:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    16fa:	bf00      	nop
    16fc:	b006      	add	sp, #24
    16fe:	4770      	bx	lr

00001700 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1700:	b082      	sub	sp, #8
    1702:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1704:	9b01      	ldr	r3, [sp, #4]
    1706:	f003 021f 	and.w	r2, r3, #31
    170a:	4905      	ldr	r1, [pc, #20]	; (1720 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    170c:	9b01      	ldr	r3, [sp, #4]
    170e:	095b      	lsrs	r3, r3, #5
    1710:	2001      	movs	r0, #1
    1712:	fa00 f202 	lsl.w	r2, r0, r2
    1716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    171a:	bf00      	nop
    171c:	b002      	add	sp, #8
    171e:	4770      	bx	lr
    1720:	e000e100 	.word	0xe000e100

00001724 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1724:	b082      	sub	sp, #8
    1726:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1728:	9b01      	ldr	r3, [sp, #4]
    172a:	f003 021f 	and.w	r2, r3, #31
    172e:	4906      	ldr	r1, [pc, #24]	; (1748 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    1730:	9b01      	ldr	r3, [sp, #4]
    1732:	095b      	lsrs	r3, r3, #5
    1734:	2001      	movs	r0, #1
    1736:	fa00 f202 	lsl.w	r2, r0, r2
    173a:	3320      	adds	r3, #32
    173c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1740:	bf00      	nop
    1742:	b002      	add	sp, #8
    1744:	4770      	bx	lr
    1746:	bf00      	nop
    1748:	e000e100 	.word	0xe000e100

0000174c <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    174c:	b084      	sub	sp, #16
    174e:	9001      	str	r0, [sp, #4]
    1750:	460b      	mov	r3, r1
    1752:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1756:	2304      	movs	r3, #4
    1758:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    175c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1760:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1764:	fa02 f103 	lsl.w	r1, r2, r3
    1768:	4a04      	ldr	r2, [pc, #16]	; (177c <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    176a:	9b01      	ldr	r3, [sp, #4]
    176c:	b2c9      	uxtb	r1, r1
    176e:	4413      	add	r3, r2
    1770:	460a      	mov	r2, r1
    1772:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1776:	bf00      	nop
    1778:	b004      	add	sp, #16
    177a:	4770      	bx	lr
    177c:	e000e100 	.word	0xe000e100

00001780 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1780:	b084      	sub	sp, #16
    1782:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1784:	2304      	movs	r3, #4
    1786:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    178a:	4a09      	ldr	r2, [pc, #36]	; (17b0 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    178c:	9b01      	ldr	r3, [sp, #4]
    178e:	4413      	add	r3, r2
    1790:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    1794:	b2db      	uxtb	r3, r3
    1796:	461a      	mov	r2, r3
    1798:	f89d 300f 	ldrb.w	r3, [sp, #15]
    179c:	fa42 f303 	asr.w	r3, r2, r3
    17a0:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    17a4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    17a8:	4618      	mov	r0, r3
    17aa:	b004      	add	sp, #16
    17ac:	4770      	bx	lr
    17ae:	bf00      	nop
    17b0:	e000e100 	.word	0xe000e100

000017b4 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    17b4:	b082      	sub	sp, #8
    17b6:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    17b8:	9b01      	ldr	r3, [sp, #4]
    17ba:	f003 021f 	and.w	r2, r3, #31
    17be:	4906      	ldr	r1, [pc, #24]	; (17d8 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    17c0:	9b01      	ldr	r3, [sp, #4]
    17c2:	095b      	lsrs	r3, r3, #5
    17c4:	2001      	movs	r0, #1
    17c6:	fa00 f202 	lsl.w	r2, r0, r2
    17ca:	3360      	adds	r3, #96	; 0x60
    17cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    17d0:	bf00      	nop
    17d2:	b002      	add	sp, #8
    17d4:	4770      	bx	lr
    17d6:	bf00      	nop
    17d8:	e000e100 	.word	0xe000e100

000017dc <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    17dc:	b500      	push	{lr}
    17de:	b085      	sub	sp, #20
    17e0:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    17e2:	2300      	movs	r3, #0
    17e4:	9303      	str	r3, [sp, #12]
    17e6:	e05d      	b.n	18a4 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    17e8:	9b01      	ldr	r3, [sp, #4]
    17ea:	6859      	ldr	r1, [r3, #4]
    17ec:	9a03      	ldr	r2, [sp, #12]
    17ee:	4613      	mov	r3, r2
    17f0:	005b      	lsls	r3, r3, #1
    17f2:	4413      	add	r3, r2
    17f4:	009b      	lsls	r3, r3, #2
    17f6:	440b      	add	r3, r1
    17f8:	681b      	ldr	r3, [r3, #0]
    17fa:	4618      	mov	r0, r3
    17fc:	f000 f899 	bl	1932 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1800:	9b01      	ldr	r3, [sp, #4]
    1802:	6859      	ldr	r1, [r3, #4]
    1804:	9a03      	ldr	r2, [sp, #12]
    1806:	4613      	mov	r3, r2
    1808:	005b      	lsls	r3, r3, #1
    180a:	4413      	add	r3, r2
    180c:	009b      	lsls	r3, r3, #2
    180e:	440b      	add	r3, r1
    1810:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1812:	9b01      	ldr	r3, [sp, #4]
    1814:	6859      	ldr	r1, [r3, #4]
    1816:	9a03      	ldr	r2, [sp, #12]
    1818:	4613      	mov	r3, r2
    181a:	005b      	lsls	r3, r3, #1
    181c:	4413      	add	r3, r2
    181e:	009b      	lsls	r3, r3, #2
    1820:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1822:	795b      	ldrb	r3, [r3, #5]
    1824:	4619      	mov	r1, r3
    1826:	f000 f869 	bl	18fc <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    182a:	9b01      	ldr	r3, [sp, #4]
    182c:	6859      	ldr	r1, [r3, #4]
    182e:	9a03      	ldr	r2, [sp, #12]
    1830:	4613      	mov	r3, r2
    1832:	005b      	lsls	r3, r3, #1
    1834:	4413      	add	r3, r2
    1836:	009b      	lsls	r3, r3, #2
    1838:	440b      	add	r3, r1
    183a:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    183c:	9b01      	ldr	r3, [sp, #4]
    183e:	6859      	ldr	r1, [r3, #4]
    1840:	9a03      	ldr	r2, [sp, #12]
    1842:	4613      	mov	r3, r2
    1844:	005b      	lsls	r3, r3, #1
    1846:	4413      	add	r3, r2
    1848:	009b      	lsls	r3, r3, #2
    184a:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    184c:	689b      	ldr	r3, [r3, #8]
    184e:	2200      	movs	r2, #0
    1850:	4619      	mov	r1, r3
    1852:	f000 f831 	bl	18b8 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1856:	9b01      	ldr	r3, [sp, #4]
    1858:	6859      	ldr	r1, [r3, #4]
    185a:	9a03      	ldr	r2, [sp, #12]
    185c:	4613      	mov	r3, r2
    185e:	005b      	lsls	r3, r3, #1
    1860:	4413      	add	r3, r2
    1862:	009b      	lsls	r3, r3, #2
    1864:	440b      	add	r3, r1
    1866:	791b      	ldrb	r3, [r3, #4]
    1868:	2b00      	cmp	r3, #0
    186a:	d00c      	beq.n	1886 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    186c:	9b01      	ldr	r3, [sp, #4]
    186e:	6859      	ldr	r1, [r3, #4]
    1870:	9a03      	ldr	r2, [sp, #12]
    1872:	4613      	mov	r3, r2
    1874:	005b      	lsls	r3, r3, #1
    1876:	4413      	add	r3, r2
    1878:	009b      	lsls	r3, r3, #2
    187a:	440b      	add	r3, r1
    187c:	681b      	ldr	r3, [r3, #0]
    187e:	4618      	mov	r0, r3
    1880:	f000 f828 	bl	18d4 <IntCtrl_Ip_EnableIrq>
    1884:	e00b      	b.n	189e <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1886:	9b01      	ldr	r3, [sp, #4]
    1888:	6859      	ldr	r1, [r3, #4]
    188a:	9a03      	ldr	r2, [sp, #12]
    188c:	4613      	mov	r3, r2
    188e:	005b      	lsls	r3, r3, #1
    1890:	4413      	add	r3, r2
    1892:	009b      	lsls	r3, r3, #2
    1894:	440b      	add	r3, r1
    1896:	681b      	ldr	r3, [r3, #0]
    1898:	4618      	mov	r0, r3
    189a:	f000 f825 	bl	18e8 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    189e:	9b03      	ldr	r3, [sp, #12]
    18a0:	3301      	adds	r3, #1
    18a2:	9303      	str	r3, [sp, #12]
    18a4:	9b01      	ldr	r3, [sp, #4]
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	9a03      	ldr	r2, [sp, #12]
    18aa:	429a      	cmp	r2, r3
    18ac:	d39c      	bcc.n	17e8 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    18ae:	2300      	movs	r3, #0
}
    18b0:	4618      	mov	r0, r3
    18b2:	b005      	add	sp, #20
    18b4:	f85d fb04 	ldr.w	pc, [sp], #4

000018b8 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    18b8:	b500      	push	{lr}
    18ba:	b085      	sub	sp, #20
    18bc:	9003      	str	r0, [sp, #12]
    18be:	9102      	str	r1, [sp, #8]
    18c0:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    18c2:	9a01      	ldr	r2, [sp, #4]
    18c4:	9902      	ldr	r1, [sp, #8]
    18c6:	9803      	ldr	r0, [sp, #12]
    18c8:	f7ff fef8 	bl	16bc <IntCtrl_Ip_InstallHandlerPrivileged>
}
    18cc:	bf00      	nop
    18ce:	b005      	add	sp, #20
    18d0:	f85d fb04 	ldr.w	pc, [sp], #4

000018d4 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    18d4:	b500      	push	{lr}
    18d6:	b083      	sub	sp, #12
    18d8:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    18da:	9801      	ldr	r0, [sp, #4]
    18dc:	f7ff ff10 	bl	1700 <IntCtrl_Ip_EnableIrqPrivileged>
}
    18e0:	bf00      	nop
    18e2:	b003      	add	sp, #12
    18e4:	f85d fb04 	ldr.w	pc, [sp], #4

000018e8 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    18e8:	b500      	push	{lr}
    18ea:	b083      	sub	sp, #12
    18ec:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    18ee:	9801      	ldr	r0, [sp, #4]
    18f0:	f7ff ff18 	bl	1724 <IntCtrl_Ip_DisableIrqPrivileged>
}
    18f4:	bf00      	nop
    18f6:	b003      	add	sp, #12
    18f8:	f85d fb04 	ldr.w	pc, [sp], #4

000018fc <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    18fc:	b500      	push	{lr}
    18fe:	b083      	sub	sp, #12
    1900:	9001      	str	r0, [sp, #4]
    1902:	460b      	mov	r3, r1
    1904:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1908:	f89d 3003 	ldrb.w	r3, [sp, #3]
    190c:	4619      	mov	r1, r3
    190e:	9801      	ldr	r0, [sp, #4]
    1910:	f7ff ff1c 	bl	174c <IntCtrl_Ip_SetPriorityPrivileged>
}
    1914:	bf00      	nop
    1916:	b003      	add	sp, #12
    1918:	f85d fb04 	ldr.w	pc, [sp], #4

0000191c <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    191c:	b500      	push	{lr}
    191e:	b083      	sub	sp, #12
    1920:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1922:	9801      	ldr	r0, [sp, #4]
    1924:	f7ff ff2c 	bl	1780 <IntCtrl_Ip_GetPriorityPrivileged>
    1928:	4603      	mov	r3, r0
}
    192a:	4618      	mov	r0, r3
    192c:	b003      	add	sp, #12
    192e:	f85d fb04 	ldr.w	pc, [sp], #4

00001932 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1932:	b500      	push	{lr}
    1934:	b083      	sub	sp, #12
    1936:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1938:	9801      	ldr	r0, [sp, #4]
    193a:	f7ff ff3b 	bl	17b4 <IntCtrl_Ip_ClearPendingPrivileged>
}
    193e:	bf00      	nop
    1940:	b003      	add	sp, #12
    1942:	f85d fb04 	ldr.w	pc, [sp], #4
    1946:	bf00      	nop

00001948 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1948:	b500      	push	{lr}
    194a:	b083      	sub	sp, #12
    194c:	9001      	str	r0, [sp, #4]
    194e:	460b      	mov	r3, r1
    1950:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1954:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1958:	2b00      	cmp	r3, #0
    195a:	d003      	beq.n	1964 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    195c:	9801      	ldr	r0, [sp, #4]
    195e:	f7ff ffb9 	bl	18d4 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1962:	e002      	b.n	196a <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1964:	9801      	ldr	r0, [sp, #4]
    1966:	f7ff ffbf 	bl	18e8 <IntCtrl_Ip_DisableIrq>
}
    196a:	bf00      	nop
    196c:	b003      	add	sp, #12
    196e:	f85d fb04 	ldr.w	pc, [sp], #4

00001972 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1972:	b500      	push	{lr}
    1974:	b083      	sub	sp, #12
    1976:	9001      	str	r0, [sp, #4]
    1978:	460b      	mov	r3, r1
    197a:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    197e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1982:	4619      	mov	r1, r3
    1984:	9801      	ldr	r0, [sp, #4]
    1986:	f7ff ffb9 	bl	18fc <IntCtrl_Ip_SetPriority>
}
    198a:	bf00      	nop
    198c:	b003      	add	sp, #12
    198e:	f85d fb04 	ldr.w	pc, [sp], #4

00001992 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1992:	b500      	push	{lr}
    1994:	b083      	sub	sp, #12
    1996:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1998:	9801      	ldr	r0, [sp, #4]
    199a:	f7ff ffbf 	bl	191c <IntCtrl_Ip_GetPriority>
    199e:	4603      	mov	r3, r0
}
    19a0:	4618      	mov	r0, r3
    19a2:	b003      	add	sp, #12
    19a4:	f85d fb04 	ldr.w	pc, [sp], #4

000019a8 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    19a8:	b500      	push	{lr}
    19aa:	b085      	sub	sp, #20
    19ac:	9003      	str	r0, [sp, #12]
    19ae:	9102      	str	r1, [sp, #8]
    19b0:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    19b2:	9a01      	ldr	r2, [sp, #4]
    19b4:	9902      	ldr	r1, [sp, #8]
    19b6:	9803      	ldr	r0, [sp, #12]
    19b8:	f7ff ff7e 	bl	18b8 <IntCtrl_Ip_InstallHandler>
}
    19bc:	bf00      	nop
    19be:	b005      	add	sp, #20
    19c0:	f85d fb04 	ldr.w	pc, [sp], #4

000019c4 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    19c4:	b500      	push	{lr}
    19c6:	b085      	sub	sp, #20
    19c8:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    19ca:	2300      	movs	r3, #0
    19cc:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    19d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    19d4:	4a05      	ldr	r2, [pc, #20]	; (19ec <Platform_Init+0x28>)
    19d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    19da:	681b      	ldr	r3, [r3, #0]
    19dc:	4618      	mov	r0, r3
    19de:	f000 f8c7 	bl	1b70 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    19e2:	bf00      	nop
    19e4:	b005      	add	sp, #20
    19e6:	f85d fb04 	ldr.w	pc, [sp], #4
    19ea:	bf00      	nop
    19ec:	0000fad0 	.word	0x0000fad0

000019f0 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    19f0:	b500      	push	{lr}
    19f2:	b085      	sub	sp, #20
    19f4:	9001      	str	r0, [sp, #4]
    19f6:	460b      	mov	r3, r1
    19f8:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19fc:	2300      	movs	r3, #0
    19fe:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    1a02:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1a06:	4619      	mov	r1, r3
    1a08:	9801      	ldr	r0, [sp, #4]
    1a0a:	f7ff ff9d 	bl	1948 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1a0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1a12:	4618      	mov	r0, r3
    1a14:	b005      	add	sp, #20
    1a16:	f85d fb04 	ldr.w	pc, [sp], #4

00001a1a <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1a1a:	b500      	push	{lr}
    1a1c:	b085      	sub	sp, #20
    1a1e:	9001      	str	r0, [sp, #4]
    1a20:	460b      	mov	r3, r1
    1a22:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a26:	2300      	movs	r3, #0
    1a28:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1a2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1a30:	4619      	mov	r1, r3
    1a32:	9801      	ldr	r0, [sp, #4]
    1a34:	f7ff ff9d 	bl	1972 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1a38:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1a3c:	4618      	mov	r0, r3
    1a3e:	b005      	add	sp, #20
    1a40:	f85d fb04 	ldr.w	pc, [sp], #4

00001a44 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1a44:	b500      	push	{lr}
    1a46:	b085      	sub	sp, #20
    1a48:	9001      	str	r0, [sp, #4]
    1a4a:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a4c:	2300      	movs	r3, #0
    1a4e:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1a52:	9801      	ldr	r0, [sp, #4]
    1a54:	f7ff ff9d 	bl	1992 <Platform_Ipw_GetIrqPriority>
    1a58:	4603      	mov	r3, r0
    1a5a:	461a      	mov	r2, r3
    1a5c:	9b00      	ldr	r3, [sp, #0]
    1a5e:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1a60:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1a64:	4618      	mov	r0, r3
    1a66:	b005      	add	sp, #20
    1a68:	f85d fb04 	ldr.w	pc, [sp], #4

00001a6c <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1a6c:	b500      	push	{lr}
    1a6e:	b087      	sub	sp, #28
    1a70:	9003      	str	r0, [sp, #12]
    1a72:	9102      	str	r1, [sp, #8]
    1a74:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a76:	2300      	movs	r3, #0
    1a78:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1a7c:	9a01      	ldr	r2, [sp, #4]
    1a7e:	9902      	ldr	r1, [sp, #8]
    1a80:	9803      	ldr	r0, [sp, #12]
    1a82:	f7ff ff91 	bl	19a8 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1a86:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1a8a:	4618      	mov	r0, r3
    1a8c:	b007      	add	sp, #28
    1a8e:	f85d fb04 	ldr.w	pc, [sp], #4
    1a92:	bf00      	nop

00001a94 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1a94:	b500      	push	{lr}
    1a96:	b085      	sub	sp, #20
    1a98:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a9a:	2300      	movs	r3, #0
    1a9c:	9303      	str	r3, [sp, #12]
    1a9e:	e05d      	b.n	1b5c <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1aa0:	9b01      	ldr	r3, [sp, #4]
    1aa2:	6859      	ldr	r1, [r3, #4]
    1aa4:	9a03      	ldr	r2, [sp, #12]
    1aa6:	4613      	mov	r3, r2
    1aa8:	005b      	lsls	r3, r3, #1
    1aaa:	4413      	add	r3, r2
    1aac:	009b      	lsls	r3, r3, #2
    1aae:	440b      	add	r3, r1
    1ab0:	681b      	ldr	r3, [r3, #0]
    1ab2:	4618      	mov	r0, r3
    1ab4:	f7ff ff3d 	bl	1932 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1ab8:	9b01      	ldr	r3, [sp, #4]
    1aba:	6859      	ldr	r1, [r3, #4]
    1abc:	9a03      	ldr	r2, [sp, #12]
    1abe:	4613      	mov	r3, r2
    1ac0:	005b      	lsls	r3, r3, #1
    1ac2:	4413      	add	r3, r2
    1ac4:	009b      	lsls	r3, r3, #2
    1ac6:	440b      	add	r3, r1
    1ac8:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1aca:	9b01      	ldr	r3, [sp, #4]
    1acc:	6859      	ldr	r1, [r3, #4]
    1ace:	9a03      	ldr	r2, [sp, #12]
    1ad0:	4613      	mov	r3, r2
    1ad2:	005b      	lsls	r3, r3, #1
    1ad4:	4413      	add	r3, r2
    1ad6:	009b      	lsls	r3, r3, #2
    1ad8:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1ada:	795b      	ldrb	r3, [r3, #5]
    1adc:	4619      	mov	r1, r3
    1ade:	f7ff ff0d 	bl	18fc <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1ae2:	9b01      	ldr	r3, [sp, #4]
    1ae4:	6859      	ldr	r1, [r3, #4]
    1ae6:	9a03      	ldr	r2, [sp, #12]
    1ae8:	4613      	mov	r3, r2
    1aea:	005b      	lsls	r3, r3, #1
    1aec:	4413      	add	r3, r2
    1aee:	009b      	lsls	r3, r3, #2
    1af0:	440b      	add	r3, r1
    1af2:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1af4:	9b01      	ldr	r3, [sp, #4]
    1af6:	6859      	ldr	r1, [r3, #4]
    1af8:	9a03      	ldr	r2, [sp, #12]
    1afa:	4613      	mov	r3, r2
    1afc:	005b      	lsls	r3, r3, #1
    1afe:	4413      	add	r3, r2
    1b00:	009b      	lsls	r3, r3, #2
    1b02:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1b04:	689b      	ldr	r3, [r3, #8]
    1b06:	2200      	movs	r2, #0
    1b08:	4619      	mov	r1, r3
    1b0a:	f7ff fed5 	bl	18b8 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1b0e:	9b01      	ldr	r3, [sp, #4]
    1b10:	6859      	ldr	r1, [r3, #4]
    1b12:	9a03      	ldr	r2, [sp, #12]
    1b14:	4613      	mov	r3, r2
    1b16:	005b      	lsls	r3, r3, #1
    1b18:	4413      	add	r3, r2
    1b1a:	009b      	lsls	r3, r3, #2
    1b1c:	440b      	add	r3, r1
    1b1e:	791b      	ldrb	r3, [r3, #4]
    1b20:	2b00      	cmp	r3, #0
    1b22:	d00c      	beq.n	1b3e <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1b24:	9b01      	ldr	r3, [sp, #4]
    1b26:	6859      	ldr	r1, [r3, #4]
    1b28:	9a03      	ldr	r2, [sp, #12]
    1b2a:	4613      	mov	r3, r2
    1b2c:	005b      	lsls	r3, r3, #1
    1b2e:	4413      	add	r3, r2
    1b30:	009b      	lsls	r3, r3, #2
    1b32:	440b      	add	r3, r1
    1b34:	681b      	ldr	r3, [r3, #0]
    1b36:	4618      	mov	r0, r3
    1b38:	f7ff fecc 	bl	18d4 <IntCtrl_Ip_EnableIrq>
    1b3c:	e00b      	b.n	1b56 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1b3e:	9b01      	ldr	r3, [sp, #4]
    1b40:	6859      	ldr	r1, [r3, #4]
    1b42:	9a03      	ldr	r2, [sp, #12]
    1b44:	4613      	mov	r3, r2
    1b46:	005b      	lsls	r3, r3, #1
    1b48:	4413      	add	r3, r2
    1b4a:	009b      	lsls	r3, r3, #2
    1b4c:	440b      	add	r3, r1
    1b4e:	681b      	ldr	r3, [r3, #0]
    1b50:	4618      	mov	r0, r3
    1b52:	f7ff fec9 	bl	18e8 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1b56:	9b03      	ldr	r3, [sp, #12]
    1b58:	3301      	adds	r3, #1
    1b5a:	9303      	str	r3, [sp, #12]
    1b5c:	9b01      	ldr	r3, [sp, #4]
    1b5e:	681b      	ldr	r3, [r3, #0]
    1b60:	9a03      	ldr	r2, [sp, #12]
    1b62:	429a      	cmp	r2, r3
    1b64:	d39c      	bcc.n	1aa0 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1b66:	2300      	movs	r3, #0
}
    1b68:	4618      	mov	r0, r3
    1b6a:	b005      	add	sp, #20
    1b6c:	f85d fb04 	ldr.w	pc, [sp], #4

00001b70 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1b70:	b500      	push	{lr}
    1b72:	b085      	sub	sp, #20
    1b74:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1b76:	2300      	movs	r3, #0
    1b78:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1b7c:	9b01      	ldr	r3, [sp, #4]
    1b7e:	681b      	ldr	r3, [r3, #0]
    1b80:	2b00      	cmp	r3, #0
    1b82:	d007      	beq.n	1b94 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1b84:	9b01      	ldr	r3, [sp, #4]
    1b86:	681b      	ldr	r3, [r3, #0]
    1b88:	4618      	mov	r0, r3
    1b8a:	f7ff ff83 	bl	1a94 <Platform_Ipw_InitIntCtrl>
    1b8e:	4603      	mov	r3, r0
    1b90:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1b94:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b98:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1b9a:	bf00      	nop
    1b9c:	b005      	add	sp, #20
    1b9e:	f85d fb04 	ldr.w	pc, [sp], #4

00001ba2 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1ba2:	2300      	movs	r3, #0
}
    1ba4:	4618      	mov	r0, r3
    1ba6:	4770      	bx	lr

00001ba8 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1ba8:	b082      	sub	sp, #8
    1baa:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1bac:	2301      	movs	r3, #1
}
    1bae:	4618      	mov	r0, r3
    1bb0:	b002      	add	sp, #8
    1bb2:	4770      	bx	lr

00001bb4 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1bb4:	b082      	sub	sp, #8
    1bb6:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1bb8:	bf00      	nop
    1bba:	b002      	add	sp, #8
    1bbc:	4770      	bx	lr

00001bbe <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1bbe:	b082      	sub	sp, #8
    1bc0:	9001      	str	r0, [sp, #4]
    return Micros;
    1bc2:	9b01      	ldr	r3, [sp, #4]
}
    1bc4:	4618      	mov	r0, r3
    1bc6:	b002      	add	sp, #8
    1bc8:	4770      	bx	lr

00001bca <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1bca:	b500      	push	{lr}
    1bcc:	b083      	sub	sp, #12
    1bce:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1bd0:	f000 f86c 	bl	1cac <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1bd4:	bf00      	nop
    1bd6:	b003      	add	sp, #12
    1bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00001bdc <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1bdc:	b500      	push	{lr}
    1bde:	b085      	sub	sp, #20
    1be0:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1be2:	2300      	movs	r3, #0
    1be4:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1be6:	9b01      	ldr	r3, [sp, #4]
    1be8:	2b00      	cmp	r3, #0
    1bea:	d003      	beq.n	1bf4 <OsIf_GetCounter+0x18>
    1bec:	9b01      	ldr	r3, [sp, #4]
    1bee:	2b01      	cmp	r3, #1
    1bf0:	d004      	beq.n	1bfc <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1bf2:	e007      	b.n	1c04 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1bf4:	f7ff ffd5 	bl	1ba2 <OsIf_Timer_Dummy_GetCounter>
    1bf8:	9003      	str	r0, [sp, #12]
            break;
    1bfa:	e003      	b.n	1c04 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1bfc:	f000 f872 	bl	1ce4 <OsIf_Timer_System_GetCounter>
    1c00:	9003      	str	r0, [sp, #12]
            break;
    1c02:	bf00      	nop
    }

    return Value;
    1c04:	9b03      	ldr	r3, [sp, #12]
}
    1c06:	4618      	mov	r0, r3
    1c08:	b005      	add	sp, #20
    1c0a:	f85d fb04 	ldr.w	pc, [sp], #4

00001c0e <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1c0e:	b500      	push	{lr}
    1c10:	b085      	sub	sp, #20
    1c12:	9001      	str	r0, [sp, #4]
    1c14:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1c16:	2300      	movs	r3, #0
    1c18:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1c1a:	9b00      	ldr	r3, [sp, #0]
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d003      	beq.n	1c28 <OsIf_GetElapsed+0x1a>
    1c20:	9b00      	ldr	r3, [sp, #0]
    1c22:	2b01      	cmp	r3, #1
    1c24:	d005      	beq.n	1c32 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c26:	e009      	b.n	1c3c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1c28:	9801      	ldr	r0, [sp, #4]
    1c2a:	f7ff ffbd 	bl	1ba8 <OsIf_Timer_Dummy_GetElapsed>
    1c2e:	9003      	str	r0, [sp, #12]
            break;
    1c30:	e004      	b.n	1c3c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1c32:	9801      	ldr	r0, [sp, #4]
    1c34:	f000 f864 	bl	1d00 <OsIf_Timer_System_GetElapsed>
    1c38:	9003      	str	r0, [sp, #12]
            break;
    1c3a:	bf00      	nop
    }

    return Value;
    1c3c:	9b03      	ldr	r3, [sp, #12]
}
    1c3e:	4618      	mov	r0, r3
    1c40:	b005      	add	sp, #20
    1c42:	f85d fb04 	ldr.w	pc, [sp], #4

00001c46 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1c46:	b500      	push	{lr}
    1c48:	b083      	sub	sp, #12
    1c4a:	9001      	str	r0, [sp, #4]
    1c4c:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1c4e:	9b00      	ldr	r3, [sp, #0]
    1c50:	2b00      	cmp	r3, #0
    1c52:	d003      	beq.n	1c5c <OsIf_SetTimerFrequency+0x16>
    1c54:	9b00      	ldr	r3, [sp, #0]
    1c56:	2b01      	cmp	r3, #1
    1c58:	d004      	beq.n	1c64 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c5a:	e007      	b.n	1c6c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1c5c:	9801      	ldr	r0, [sp, #4]
    1c5e:	f7ff ffa9 	bl	1bb4 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1c62:	e003      	b.n	1c6c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1c64:	9801      	ldr	r0, [sp, #4]
    1c66:	f000 f85b 	bl	1d20 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1c6a:	bf00      	nop
    }
}
    1c6c:	bf00      	nop
    1c6e:	b003      	add	sp, #12
    1c70:	f85d fb04 	ldr.w	pc, [sp], #4

00001c74 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1c74:	b500      	push	{lr}
    1c76:	b085      	sub	sp, #20
    1c78:	9001      	str	r0, [sp, #4]
    1c7a:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1c7c:	2300      	movs	r3, #0
    1c7e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1c80:	9b00      	ldr	r3, [sp, #0]
    1c82:	2b00      	cmp	r3, #0
    1c84:	d003      	beq.n	1c8e <OsIf_MicrosToTicks+0x1a>
    1c86:	9b00      	ldr	r3, [sp, #0]
    1c88:	2b01      	cmp	r3, #1
    1c8a:	d005      	beq.n	1c98 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c8c:	e009      	b.n	1ca2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1c8e:	9801      	ldr	r0, [sp, #4]
    1c90:	f7ff ff95 	bl	1bbe <OsIf_Timer_Dummy_MicrosToTicks>
    1c94:	9003      	str	r0, [sp, #12]
            break;
    1c96:	e004      	b.n	1ca2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1c98:	9801      	ldr	r0, [sp, #4]
    1c9a:	f000 f84f 	bl	1d3c <OsIf_Timer_System_MicrosToTicks>
    1c9e:	9003      	str	r0, [sp, #12]
            break;
    1ca0:	bf00      	nop
    }

    return Value;
    1ca2:	9b03      	ldr	r3, [sp, #12]
}
    1ca4:	4618      	mov	r0, r3
    1ca6:	b005      	add	sp, #20
    1ca8:	f85d fb04 	ldr.w	pc, [sp], #4

00001cac <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1cac:	b500      	push	{lr}
    1cae:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1cb0:	2300      	movs	r3, #0
    1cb2:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1cb4:	4a09      	ldr	r2, [pc, #36]	; (1cdc <OsIf_Timer_System_Init+0x30>)
    1cb6:	9b01      	ldr	r3, [sp, #4]
    1cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1cbc:	685a      	ldr	r2, [r3, #4]
    1cbe:	4908      	ldr	r1, [pc, #32]	; (1ce0 <OsIf_Timer_System_Init+0x34>)
    1cc0:	9b01      	ldr	r3, [sp, #4]
    1cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1cc6:	4a06      	ldr	r2, [pc, #24]	; (1ce0 <OsIf_Timer_System_Init+0x34>)
    1cc8:	9b01      	ldr	r3, [sp, #4]
    1cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1cce:	4618      	mov	r0, r3
    1cd0:	f000 f868 	bl	1da4 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1cd4:	bf00      	nop
    1cd6:	b003      	add	sp, #12
    1cd8:	f85d fb04 	ldr.w	pc, [sp], #4
    1cdc:	0000fac8 	.word	0x0000fac8
    1ce0:	1fff8b34 	.word	0x1fff8b34

00001ce4 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1ce4:	b500      	push	{lr}
    1ce6:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1ce8:	2300      	movs	r3, #0
    1cea:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1cec:	2300      	movs	r3, #0
    1cee:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1cf0:	f000 f86c 	bl	1dcc <OsIf_Timer_System_Internal_GetCounter>
    1cf4:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1cf6:	9b01      	ldr	r3, [sp, #4]
}
    1cf8:	4618      	mov	r0, r3
    1cfa:	b003      	add	sp, #12
    1cfc:	f85d fb04 	ldr.w	pc, [sp], #4

00001d00 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1d00:	b500      	push	{lr}
    1d02:	b085      	sub	sp, #20
    1d04:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1d06:	2300      	movs	r3, #0
    1d08:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1d0a:	2300      	movs	r3, #0
    1d0c:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1d0e:	9801      	ldr	r0, [sp, #4]
    1d10:	f000 f864 	bl	1ddc <OsIf_Timer_System_Internal_GetElapsed>
    1d14:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1d16:	9b03      	ldr	r3, [sp, #12]
}
    1d18:	4618      	mov	r0, r3
    1d1a:	b005      	add	sp, #20
    1d1c:	f85d fb04 	ldr.w	pc, [sp], #4

00001d20 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1d20:	b084      	sub	sp, #16
    1d22:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1d24:	2300      	movs	r3, #0
    1d26:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1d28:	4903      	ldr	r1, [pc, #12]	; (1d38 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1d2a:	9b03      	ldr	r3, [sp, #12]
    1d2c:	9a01      	ldr	r2, [sp, #4]
    1d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1d32:	bf00      	nop
    1d34:	b004      	add	sp, #16
    1d36:	4770      	bx	lr
    1d38:	1fff8b34 	.word	0x1fff8b34

00001d3c <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d3e:	b087      	sub	sp, #28
    1d40:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1d42:	2100      	movs	r1, #0
    1d44:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1d46:	2100      	movs	r1, #0
    1d48:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1d4a:	9901      	ldr	r1, [sp, #4]
    1d4c:	2000      	movs	r0, #0
    1d4e:	460e      	mov	r6, r1
    1d50:	4607      	mov	r7, r0
    1d52:	4812      	ldr	r0, [pc, #72]	; (1d9c <OsIf_Timer_System_MicrosToTicks+0x60>)
    1d54:	9904      	ldr	r1, [sp, #16]
    1d56:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1d5a:	2000      	movs	r0, #0
    1d5c:	460c      	mov	r4, r1
    1d5e:	4605      	mov	r5, r0
    1d60:	fb04 f007 	mul.w	r0, r4, r7
    1d64:	fb06 f105 	mul.w	r1, r6, r5
    1d68:	4401      	add	r1, r0
    1d6a:	fba6 2304 	umull	r2, r3, r6, r4
    1d6e:	4419      	add	r1, r3
    1d70:	460b      	mov	r3, r1
    1d72:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1d76:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1d7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1d7e:	4a08      	ldr	r2, [pc, #32]	; (1da0 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1d80:	f04f 0300 	mov.w	r3, #0
    1d84:	f7fe fc0e 	bl	5a4 <__aeabi_uldivmod>
    1d88:	4602      	mov	r2, r0
    1d8a:	460b      	mov	r3, r1
    1d8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1d90:	9b02      	ldr	r3, [sp, #8]
    1d92:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1d94:	9b05      	ldr	r3, [sp, #20]
}
    1d96:	4618      	mov	r0, r3
    1d98:	b007      	add	sp, #28
    1d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d9c:	1fff8b34 	.word	0x1fff8b34
    1da0:	000f4240 	.word	0x000f4240

00001da4 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1da4:	b082      	sub	sp, #8
    1da6:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1da8:	4b07      	ldr	r3, [pc, #28]	; (1dc8 <OsIf_Timer_System_Internal_Init+0x24>)
    1daa:	2200      	movs	r2, #0
    1dac:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1dae:	4b06      	ldr	r3, [pc, #24]	; (1dc8 <OsIf_Timer_System_Internal_Init+0x24>)
    1db0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1db4:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1db6:	4b04      	ldr	r3, [pc, #16]	; (1dc8 <OsIf_Timer_System_Internal_Init+0x24>)
    1db8:	2200      	movs	r2, #0
    1dba:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1dbc:	4b02      	ldr	r3, [pc, #8]	; (1dc8 <OsIf_Timer_System_Internal_Init+0x24>)
    1dbe:	2205      	movs	r2, #5
    1dc0:	601a      	str	r2, [r3, #0]
}
    1dc2:	bf00      	nop
    1dc4:	b002      	add	sp, #8
    1dc6:	4770      	bx	lr
    1dc8:	e000e010 	.word	0xe000e010

00001dcc <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1dcc:	4b02      	ldr	r3, [pc, #8]	; (1dd8 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1dce:	689b      	ldr	r3, [r3, #8]
    1dd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1dd4:	4618      	mov	r0, r3
    1dd6:	4770      	bx	lr
    1dd8:	e000e010 	.word	0xe000e010

00001ddc <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1ddc:	b084      	sub	sp, #16
    1dde:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1de0:	4b10      	ldr	r3, [pc, #64]	; (1e24 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1de2:	689b      	ldr	r3, [r3, #8]
    1de4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1de8:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1dea:	2300      	movs	r3, #0
    1dec:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1dee:	9b01      	ldr	r3, [sp, #4]
    1df0:	681b      	ldr	r3, [r3, #0]
    1df2:	9a02      	ldr	r2, [sp, #8]
    1df4:	429a      	cmp	r2, r3
    1df6:	d909      	bls.n	1e0c <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1df8:	9b01      	ldr	r3, [sp, #4]
    1dfa:	681a      	ldr	r2, [r3, #0]
    1dfc:	9b02      	ldr	r3, [sp, #8]
    1dfe:	1ad3      	subs	r3, r2, r3
    1e00:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1e04:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1e08:	9303      	str	r3, [sp, #12]
    1e0a:	e004      	b.n	1e16 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1e0c:	9b01      	ldr	r3, [sp, #4]
    1e0e:	681a      	ldr	r2, [r3, #0]
    1e10:	9b02      	ldr	r3, [sp, #8]
    1e12:	1ad3      	subs	r3, r2, r3
    1e14:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1e16:	9b01      	ldr	r3, [sp, #4]
    1e18:	9a02      	ldr	r2, [sp, #8]
    1e1a:	601a      	str	r2, [r3, #0]

    return dif;
    1e1c:	9b03      	ldr	r3, [sp, #12]
}
    1e1e:	4618      	mov	r0, r3
    1e20:	b004      	add	sp, #16
    1e22:	4770      	bx	lr
    1e24:	e000e010 	.word	0xe000e010

00001e28 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1e28:	b082      	sub	sp, #8
    1e2a:	9001      	str	r0, [sp, #4]
    1e2c:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1e2e:	bf00      	nop
    1e30:	b002      	add	sp, #8
    1e32:	4770      	bx	lr

00001e34 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1e34:	b500      	push	{lr}
    1e36:	b085      	sub	sp, #20
    1e38:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1e3a:	4b24      	ldr	r3, [pc, #144]	; (1ecc <Clock_Ip_UpdateDriverContext+0x98>)
    1e3c:	2201      	movs	r2, #1
    1e3e:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1e40:	4b23      	ldr	r3, [pc, #140]	; (1ed0 <Clock_Ip_UpdateDriverContext+0x9c>)
    1e42:	681b      	ldr	r3, [r3, #0]
    1e44:	2102      	movs	r1, #2
    1e46:	4618      	mov	r0, r3
    1e48:	f003 fc32 	bl	56b0 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e4c:	2300      	movs	r3, #0
    1e4e:	f88d 300f 	strb.w	r3, [sp, #15]
    1e52:	e015      	b.n	1e80 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1e54:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e58:	9a01      	ldr	r2, [sp, #4]
    1e5a:	334a      	adds	r3, #74	; 0x4a
    1e5c:	00db      	lsls	r3, r3, #3
    1e5e:	4413      	add	r3, r2
    1e60:	6858      	ldr	r0, [r3, #4]
    1e62:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e66:	9a01      	ldr	r2, [sp, #4]
    1e68:	334a      	adds	r3, #74	; 0x4a
    1e6a:	00db      	lsls	r3, r3, #3
    1e6c:	4413      	add	r3, r2
    1e6e:	689b      	ldr	r3, [r3, #8]
    1e70:	4619      	mov	r1, r3
    1e72:	f001 fadc 	bl	342e <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e76:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e7a:	3301      	adds	r3, #1
    1e7c:	f88d 300f 	strb.w	r3, [sp, #15]
    1e80:	9b01      	ldr	r3, [sp, #4]
    1e82:	7bdb      	ldrb	r3, [r3, #15]
    1e84:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e88:	429a      	cmp	r2, r3
    1e8a:	d3e3      	bcc.n	1e54 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1e8c:	f000 f824 	bl	1ed8 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e90:	2301      	movs	r3, #1
    1e92:	f88d 300f 	strb.w	r3, [sp, #15]
    1e96:	e00e      	b.n	1eb6 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1e98:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e9c:	9b01      	ldr	r3, [sp, #4]
    1e9e:	327e      	adds	r2, #126	; 0x7e
    1ea0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1ea4:	490b      	ldr	r1, [pc, #44]	; (1ed4 <Clock_Ip_UpdateDriverContext+0xa0>)
    1ea6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1eaa:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1eac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1eb0:	3301      	adds	r3, #1
    1eb2:	f88d 300f 	strb.w	r3, [sp, #15]
    1eb6:	9b01      	ldr	r3, [sp, #4]
    1eb8:	7cdb      	ldrb	r3, [r3, #19]
    1eba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1ebe:	429a      	cmp	r2, r3
    1ec0:	d3ea      	bcc.n	1e98 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1ec2:	bf00      	nop
    1ec4:	bf00      	nop
    1ec6:	b005      	add	sp, #20
    1ec8:	f85d fb04 	ldr.w	pc, [sp], #4
    1ecc:	1fff8b18 	.word	0x1fff8b18
    1ed0:	1fff8b38 	.word	0x1fff8b38
    1ed4:	1fff8b44 	.word	0x1fff8b44

00001ed8 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1ed8:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1eda:	4b23      	ldr	r3, [pc, #140]	; (1f68 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1edc:	781b      	ldrb	r3, [r3, #0]
    1ede:	f083 0301 	eor.w	r3, r3, #1
    1ee2:	b2db      	uxtb	r3, r3
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d03d      	beq.n	1f64 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1ee8:	4b1f      	ldr	r3, [pc, #124]	; (1f68 <Clock_Ip_CallEmptyCallbacks+0x90>)
    1eea:	2201      	movs	r2, #1
    1eec:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1eee:	4b1f      	ldr	r3, [pc, #124]	; (1f6c <Clock_Ip_CallEmptyCallbacks+0x94>)
    1ef0:	685b      	ldr	r3, [r3, #4]
    1ef2:	2100      	movs	r1, #0
    1ef4:	2000      	movs	r0, #0
    1ef6:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1ef8:	4b1c      	ldr	r3, [pc, #112]	; (1f6c <Clock_Ip_CallEmptyCallbacks+0x94>)
    1efa:	689b      	ldr	r3, [r3, #8]
    1efc:	2057      	movs	r0, #87	; 0x57
    1efe:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f00:	4b1b      	ldr	r3, [pc, #108]	; (1f70 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1f02:	681b      	ldr	r3, [r3, #0]
    1f04:	2000      	movs	r0, #0
    1f06:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1f08:	4b1a      	ldr	r3, [pc, #104]	; (1f74 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1f0a:	681b      	ldr	r3, [r3, #0]
    1f0c:	2000      	movs	r0, #0
    1f0e:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1f10:	4b19      	ldr	r3, [pc, #100]	; (1f78 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1f12:	681b      	ldr	r3, [r3, #0]
    1f14:	2000      	movs	r0, #0
    1f16:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f18:	4b18      	ldr	r3, [pc, #96]	; (1f7c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1f1a:	685b      	ldr	r3, [r3, #4]
    1f1c:	2000      	movs	r0, #0
    1f1e:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1f20:	4b16      	ldr	r3, [pc, #88]	; (1f7c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1f22:	689b      	ldr	r3, [r3, #8]
    1f24:	2057      	movs	r0, #87	; 0x57
    1f26:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f28:	4b15      	ldr	r3, [pc, #84]	; (1f80 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1f2a:	681b      	ldr	r3, [r3, #0]
    1f2c:	2000      	movs	r0, #0
    1f2e:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1f30:	4b13      	ldr	r3, [pc, #76]	; (1f80 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1f32:	685b      	ldr	r3, [r3, #4]
    1f34:	2100      	movs	r1, #0
    1f36:	2057      	movs	r0, #87	; 0x57
    1f38:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f3a:	4b12      	ldr	r3, [pc, #72]	; (1f84 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1f3c:	681b      	ldr	r3, [r3, #0]
    1f3e:	2000      	movs	r0, #0
    1f40:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f42:	4b11      	ldr	r3, [pc, #68]	; (1f88 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1f44:	685b      	ldr	r3, [r3, #4]
    1f46:	2000      	movs	r0, #0
    1f48:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1f4a:	4b0f      	ldr	r3, [pc, #60]	; (1f88 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1f4c:	689b      	ldr	r3, [r3, #8]
    1f4e:	2057      	movs	r0, #87	; 0x57
    1f50:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f52:	4b0e      	ldr	r3, [pc, #56]	; (1f8c <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1f54:	685b      	ldr	r3, [r3, #4]
    1f56:	2000      	movs	r0, #0
    1f58:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1f5a:	4b0d      	ldr	r3, [pc, #52]	; (1f90 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1f5c:	681b      	ldr	r3, [r3, #0]
    1f5e:	2100      	movs	r1, #0
    1f60:	2000      	movs	r0, #0
    1f62:	4798      	blx	r3
    }
}
    1f64:	bf00      	nop
    1f66:	bd08      	pop	{r3, pc}
    1f68:	1fff8b3c 	.word	0x1fff8b3c
    1f6c:	0000f3e0 	.word	0x0000f3e0
    1f70:	0000f2f4 	.word	0x0000f2f4
    1f74:	0000f330 	.word	0x0000f330
    1f78:	0000f338 	.word	0x0000f338
    1f7c:	0000f360 	.word	0x0000f360
    1f80:	0000f36c 	.word	0x0000f36c
    1f84:	0000f3a4 	.word	0x0000f3a4
    1f88:	0000f3f0 	.word	0x0000f3f0
    1f8c:	0000f41c 	.word	0x0000f41c
    1f90:	0000f418 	.word	0x0000f418

00001f94 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1f94:	b500      	push	{lr}
    1f96:	b085      	sub	sp, #20
    1f98:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f9a:	9b01      	ldr	r3, [sp, #4]
    1f9c:	7adb      	ldrb	r3, [r3, #11]
    1f9e:	9303      	str	r3, [sp, #12]
    1fa0:	e01f      	b.n	1fe2 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1fa2:	9b03      	ldr	r3, [sp, #12]
    1fa4:	1e5a      	subs	r2, r3, #1
    1fa6:	9b01      	ldr	r3, [sp, #4]
    1fa8:	320d      	adds	r2, #13
    1faa:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1fae:	495a      	ldr	r1, [pc, #360]	; (2118 <Clock_Ip_ResetClockConfiguration+0x184>)
    1fb0:	4613      	mov	r3, r2
    1fb2:	00db      	lsls	r3, r3, #3
    1fb4:	4413      	add	r3, r2
    1fb6:	440b      	add	r3, r1
    1fb8:	3301      	adds	r3, #1
    1fba:	781b      	ldrb	r3, [r3, #0]
    1fbc:	461a      	mov	r2, r3
    1fbe:	4b57      	ldr	r3, [pc, #348]	; (211c <Clock_Ip_ResetClockConfiguration+0x188>)
    1fc0:	5c9b      	ldrb	r3, [r3, r2]
    1fc2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1fc4:	4a56      	ldr	r2, [pc, #344]	; (2120 <Clock_Ip_ResetClockConfiguration+0x18c>)
    1fc6:	9b02      	ldr	r3, [sp, #8]
    1fc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1fcc:	9a03      	ldr	r2, [sp, #12]
    1fce:	3a01      	subs	r2, #1
    1fd0:	320d      	adds	r2, #13
    1fd2:	00d2      	lsls	r2, r2, #3
    1fd4:	9901      	ldr	r1, [sp, #4]
    1fd6:	440a      	add	r2, r1
    1fd8:	4610      	mov	r0, r2
    1fda:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1fdc:	9b03      	ldr	r3, [sp, #12]
    1fde:	3b01      	subs	r3, #1
    1fe0:	9303      	str	r3, [sp, #12]
    1fe2:	9b03      	ldr	r3, [sp, #12]
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d1dc      	bne.n	1fa2 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1fe8:	9b01      	ldr	r3, [sp, #4]
    1fea:	7b9b      	ldrb	r3, [r3, #14]
    1fec:	9303      	str	r3, [sp, #12]
    1fee:	e026      	b.n	203e <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1ff0:	9b03      	ldr	r3, [sp, #12]
    1ff2:	3b01      	subs	r3, #1
    1ff4:	9a01      	ldr	r2, [sp, #4]
    1ff6:	3324      	adds	r3, #36	; 0x24
    1ff8:	011b      	lsls	r3, r3, #4
    1ffa:	4413      	add	r3, r2
    1ffc:	3304      	adds	r3, #4
    1ffe:	681a      	ldr	r2, [r3, #0]
    2000:	4945      	ldr	r1, [pc, #276]	; (2118 <Clock_Ip_ResetClockConfiguration+0x184>)
    2002:	4613      	mov	r3, r2
    2004:	00db      	lsls	r3, r3, #3
    2006:	4413      	add	r3, r2
    2008:	440b      	add	r3, r1
    200a:	3301      	adds	r3, #1
    200c:	781b      	ldrb	r3, [r3, #0]
    200e:	461a      	mov	r2, r3
    2010:	4b44      	ldr	r3, [pc, #272]	; (2124 <Clock_Ip_ResetClockConfiguration+0x190>)
    2012:	5c9b      	ldrb	r3, [r3, r2]
    2014:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    2016:	4944      	ldr	r1, [pc, #272]	; (2128 <Clock_Ip_ResetClockConfiguration+0x194>)
    2018:	9a02      	ldr	r2, [sp, #8]
    201a:	4613      	mov	r3, r2
    201c:	005b      	lsls	r3, r3, #1
    201e:	4413      	add	r3, r2
    2020:	009b      	lsls	r3, r3, #2
    2022:	440b      	add	r3, r1
    2024:	681b      	ldr	r3, [r3, #0]
    2026:	9a03      	ldr	r2, [sp, #12]
    2028:	3a01      	subs	r2, #1
    202a:	3224      	adds	r2, #36	; 0x24
    202c:	0112      	lsls	r2, r2, #4
    202e:	9901      	ldr	r1, [sp, #4]
    2030:	440a      	add	r2, r1
    2032:	3204      	adds	r2, #4
    2034:	4610      	mov	r0, r2
    2036:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2038:	9b03      	ldr	r3, [sp, #12]
    203a:	3b01      	subs	r3, #1
    203c:	9303      	str	r3, [sp, #12]
    203e:	9b03      	ldr	r3, [sp, #12]
    2040:	2b00      	cmp	r3, #0
    2042:	d1d5      	bne.n	1ff0 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2044:	9b01      	ldr	r3, [sp, #4]
    2046:	7a9b      	ldrb	r3, [r3, #10]
    2048:	9303      	str	r3, [sp, #12]
    204a:	e02a      	b.n	20a2 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    204c:	9b03      	ldr	r3, [sp, #12]
    204e:	1e5a      	subs	r2, r3, #1
    2050:	9901      	ldr	r1, [sp, #4]
    2052:	4613      	mov	r3, r2
    2054:	009b      	lsls	r3, r3, #2
    2056:	4413      	add	r3, r2
    2058:	00db      	lsls	r3, r3, #3
    205a:	440b      	add	r3, r1
    205c:	3340      	adds	r3, #64	; 0x40
    205e:	681a      	ldr	r2, [r3, #0]
    2060:	492d      	ldr	r1, [pc, #180]	; (2118 <Clock_Ip_ResetClockConfiguration+0x184>)
    2062:	4613      	mov	r3, r2
    2064:	00db      	lsls	r3, r3, #3
    2066:	4413      	add	r3, r2
    2068:	440b      	add	r3, r1
    206a:	3301      	adds	r3, #1
    206c:	781b      	ldrb	r3, [r3, #0]
    206e:	461a      	mov	r2, r3
    2070:	4b2e      	ldr	r3, [pc, #184]	; (212c <Clock_Ip_ResetClockConfiguration+0x198>)
    2072:	5c9b      	ldrb	r3, [r3, r2]
    2074:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2076:	492e      	ldr	r1, [pc, #184]	; (2130 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2078:	9a02      	ldr	r2, [sp, #8]
    207a:	4613      	mov	r3, r2
    207c:	009b      	lsls	r3, r3, #2
    207e:	4413      	add	r3, r2
    2080:	009b      	lsls	r3, r3, #2
    2082:	440b      	add	r3, r1
    2084:	6819      	ldr	r1, [r3, #0]
    2086:	9b03      	ldr	r3, [sp, #12]
    2088:	1e5a      	subs	r2, r3, #1
    208a:	4613      	mov	r3, r2
    208c:	009b      	lsls	r3, r3, #2
    208e:	4413      	add	r3, r2
    2090:	00db      	lsls	r3, r3, #3
    2092:	3340      	adds	r3, #64	; 0x40
    2094:	9a01      	ldr	r2, [sp, #4]
    2096:	4413      	add	r3, r2
    2098:	4618      	mov	r0, r3
    209a:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    209c:	9b03      	ldr	r3, [sp, #12]
    209e:	3b01      	subs	r3, #1
    20a0:	9303      	str	r3, [sp, #12]
    20a2:	9b03      	ldr	r3, [sp, #12]
    20a4:	2b00      	cmp	r3, #0
    20a6:	d1d1      	bne.n	204c <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    20a8:	9b01      	ldr	r3, [sp, #4]
    20aa:	7a5b      	ldrb	r3, [r3, #9]
    20ac:	9303      	str	r3, [sp, #12]
    20ae:	e02b      	b.n	2108 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    20b0:	9b03      	ldr	r3, [sp, #12]
    20b2:	1e5a      	subs	r2, r3, #1
    20b4:	9901      	ldr	r1, [sp, #4]
    20b6:	4613      	mov	r3, r2
    20b8:	009b      	lsls	r3, r3, #2
    20ba:	4413      	add	r3, r2
    20bc:	009b      	lsls	r3, r3, #2
    20be:	440b      	add	r3, r1
    20c0:	332c      	adds	r3, #44	; 0x2c
    20c2:	681a      	ldr	r2, [r3, #0]
    20c4:	4914      	ldr	r1, [pc, #80]	; (2118 <Clock_Ip_ResetClockConfiguration+0x184>)
    20c6:	4613      	mov	r3, r2
    20c8:	00db      	lsls	r3, r3, #3
    20ca:	4413      	add	r3, r2
    20cc:	440b      	add	r3, r1
    20ce:	3301      	adds	r3, #1
    20d0:	781b      	ldrb	r3, [r3, #0]
    20d2:	461a      	mov	r2, r3
    20d4:	4b17      	ldr	r3, [pc, #92]	; (2134 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    20d6:	5c9b      	ldrb	r3, [r3, r2]
    20d8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    20da:	4917      	ldr	r1, [pc, #92]	; (2138 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    20dc:	9a02      	ldr	r2, [sp, #8]
    20de:	4613      	mov	r3, r2
    20e0:	009b      	lsls	r3, r3, #2
    20e2:	4413      	add	r3, r2
    20e4:	009b      	lsls	r3, r3, #2
    20e6:	440b      	add	r3, r1
    20e8:	6819      	ldr	r1, [r3, #0]
    20ea:	9b03      	ldr	r3, [sp, #12]
    20ec:	1e5a      	subs	r2, r3, #1
    20ee:	4613      	mov	r3, r2
    20f0:	009b      	lsls	r3, r3, #2
    20f2:	4413      	add	r3, r2
    20f4:	009b      	lsls	r3, r3, #2
    20f6:	3328      	adds	r3, #40	; 0x28
    20f8:	9a01      	ldr	r2, [sp, #4]
    20fa:	4413      	add	r3, r2
    20fc:	3304      	adds	r3, #4
    20fe:	4618      	mov	r0, r3
    2100:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2102:	9b03      	ldr	r3, [sp, #12]
    2104:	3b01      	subs	r3, #1
    2106:	9303      	str	r3, [sp, #12]
    2108:	9b03      	ldr	r3, [sp, #12]
    210a:	2b00      	cmp	r3, #0
    210c:	d1d0      	bne.n	20b0 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    210e:	bf00      	nop
    2110:	bf00      	nop
    2112:	b005      	add	sp, #20
    2114:	f85d fb04 	ldr.w	pc, [sp], #4
    2118:	0000ede4 	.word	0x0000ede4
    211c:	0000edb4 	.word	0x0000edb4
    2120:	0000f41c 	.word	0x0000f41c
    2124:	0000ed94 	.word	0x0000ed94
    2128:	0000f360 	.word	0x0000f360
    212c:	0000eda4 	.word	0x0000eda4
    2130:	0000f3f0 	.word	0x0000f3f0
    2134:	0000ed64 	.word	0x0000ed64
    2138:	0000f338 	.word	0x0000f338

0000213c <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    213c:	b500      	push	{lr}
    213e:	b085      	sub	sp, #20
    2140:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2142:	2301      	movs	r3, #1
    2144:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2146:	9801      	ldr	r0, [sp, #4]
    2148:	f000 f818 	bl	217c <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    214c:	4b0a      	ldr	r3, [pc, #40]	; (2178 <Clock_Ip_Init+0x3c>)
    214e:	781b      	ldrb	r3, [r3, #0]
    2150:	2b00      	cmp	r3, #0
    2152:	d00a      	beq.n	216a <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2154:	f000 fb74 	bl	2840 <Clock_Ip_GetPllStatus>
    2158:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    215a:	9b02      	ldr	r3, [sp, #8]
    215c:	2b00      	cmp	r3, #0
    215e:	d106      	bne.n	216e <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2160:	f000 fbf2 	bl	2948 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2164:	2300      	movs	r3, #0
    2166:	9303      	str	r3, [sp, #12]
    2168:	e001      	b.n	216e <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    216a:	2300      	movs	r3, #0
    216c:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    216e:	9b03      	ldr	r3, [sp, #12]
}
    2170:	4618      	mov	r0, r3
    2172:	b005      	add	sp, #20
    2174:	f85d fb04 	ldr.w	pc, [sp], #4
    2178:	1fff8b40 	.word	0x1fff8b40

0000217c <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    217c:	b510      	push	{r4, lr}
    217e:	b084      	sub	sp, #16
    2180:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2182:	4a9f      	ldr	r2, [pc, #636]	; (2400 <Clock_Ip_InitClock+0x284>)
    2184:	9b01      	ldr	r3, [sp, #4]
    2186:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2188:	2101      	movs	r1, #1
    218a:	9801      	ldr	r0, [sp, #4]
    218c:	f003 fa90 	bl	56b0 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2190:	4b9b      	ldr	r3, [pc, #620]	; (2400 <Clock_Ip_InitClock+0x284>)
    2192:	681b      	ldr	r3, [r3, #0]
    2194:	2b00      	cmp	r3, #0
    2196:	d030      	beq.n	21fa <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2198:	2300      	movs	r3, #0
    219a:	9303      	str	r3, [sp, #12]
    219c:	e027      	b.n	21ee <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    219e:	9901      	ldr	r1, [sp, #4]
    21a0:	9a03      	ldr	r2, [sp, #12]
    21a2:	4613      	mov	r3, r2
    21a4:	009b      	lsls	r3, r3, #2
    21a6:	4413      	add	r3, r2
    21a8:	009b      	lsls	r3, r3, #2
    21aa:	440b      	add	r3, r1
    21ac:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    21b0:	681a      	ldr	r2, [r3, #0]
    21b2:	4994      	ldr	r1, [pc, #592]	; (2404 <Clock_Ip_InitClock+0x288>)
    21b4:	4613      	mov	r3, r2
    21b6:	00db      	lsls	r3, r3, #3
    21b8:	4413      	add	r3, r2
    21ba:	440b      	add	r3, r1
    21bc:	3301      	adds	r3, #1
    21be:	781b      	ldrb	r3, [r3, #0]
    21c0:	461a      	mov	r2, r3
    21c2:	4b91      	ldr	r3, [pc, #580]	; (2408 <Clock_Ip_InitClock+0x28c>)
    21c4:	5c9b      	ldrb	r3, [r3, r2]
    21c6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    21c8:	4a90      	ldr	r2, [pc, #576]	; (240c <Clock_Ip_InitClock+0x290>)
    21ca:	9b02      	ldr	r3, [sp, #8]
    21cc:	011b      	lsls	r3, r3, #4
    21ce:	4413      	add	r3, r2
    21d0:	6819      	ldr	r1, [r3, #0]
    21d2:	9a03      	ldr	r2, [sp, #12]
    21d4:	4613      	mov	r3, r2
    21d6:	009b      	lsls	r3, r3, #2
    21d8:	4413      	add	r3, r2
    21da:	009b      	lsls	r3, r3, #2
    21dc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    21e0:	9a01      	ldr	r2, [sp, #4]
    21e2:	4413      	add	r3, r2
    21e4:	4618      	mov	r0, r3
    21e6:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    21e8:	9b03      	ldr	r3, [sp, #12]
    21ea:	3301      	adds	r3, #1
    21ec:	9303      	str	r3, [sp, #12]
    21ee:	9b01      	ldr	r3, [sp, #4]
    21f0:	7c9b      	ldrb	r3, [r3, #18]
    21f2:	461a      	mov	r2, r3
    21f4:	9b03      	ldr	r3, [sp, #12]
    21f6:	4293      	cmp	r3, r2
    21f8:	d3d1      	bcc.n	219e <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    21fa:	9801      	ldr	r0, [sp, #4]
    21fc:	f7ff feca 	bl	1f94 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2200:	2300      	movs	r3, #0
    2202:	9303      	str	r3, [sp, #12]
    2204:	e029      	b.n	225a <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2206:	9901      	ldr	r1, [sp, #4]
    2208:	9a03      	ldr	r2, [sp, #12]
    220a:	4613      	mov	r3, r2
    220c:	005b      	lsls	r3, r3, #1
    220e:	4413      	add	r3, r2
    2210:	009b      	lsls	r3, r3, #2
    2212:	440b      	add	r3, r1
    2214:	3314      	adds	r3, #20
    2216:	681a      	ldr	r2, [r3, #0]
    2218:	497a      	ldr	r1, [pc, #488]	; (2404 <Clock_Ip_InitClock+0x288>)
    221a:	4613      	mov	r3, r2
    221c:	00db      	lsls	r3, r3, #3
    221e:	4413      	add	r3, r2
    2220:	440b      	add	r3, r1
    2222:	3301      	adds	r3, #1
    2224:	781b      	ldrb	r3, [r3, #0]
    2226:	461a      	mov	r2, r3
    2228:	4b79      	ldr	r3, [pc, #484]	; (2410 <Clock_Ip_InitClock+0x294>)
    222a:	5c9b      	ldrb	r3, [r3, r2]
    222c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    222e:	4979      	ldr	r1, [pc, #484]	; (2414 <Clock_Ip_InitClock+0x298>)
    2230:	9a02      	ldr	r2, [sp, #8]
    2232:	4613      	mov	r3, r2
    2234:	005b      	lsls	r3, r3, #1
    2236:	4413      	add	r3, r2
    2238:	009b      	lsls	r3, r3, #2
    223a:	440b      	add	r3, r1
    223c:	6819      	ldr	r1, [r3, #0]
    223e:	9a03      	ldr	r2, [sp, #12]
    2240:	4613      	mov	r3, r2
    2242:	005b      	lsls	r3, r3, #1
    2244:	4413      	add	r3, r2
    2246:	009b      	lsls	r3, r3, #2
    2248:	3310      	adds	r3, #16
    224a:	9a01      	ldr	r2, [sp, #4]
    224c:	4413      	add	r3, r2
    224e:	3304      	adds	r3, #4
    2250:	4618      	mov	r0, r3
    2252:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2254:	9b03      	ldr	r3, [sp, #12]
    2256:	3301      	adds	r3, #1
    2258:	9303      	str	r3, [sp, #12]
    225a:	9b01      	ldr	r3, [sp, #4]
    225c:	7a1b      	ldrb	r3, [r3, #8]
    225e:	461a      	mov	r2, r3
    2260:	9b03      	ldr	r3, [sp, #12]
    2262:	4293      	cmp	r3, r2
    2264:	d3cf      	bcc.n	2206 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2266:	2300      	movs	r3, #0
    2268:	9303      	str	r3, [sp, #12]
    226a:	e02a      	b.n	22c2 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    226c:	9901      	ldr	r1, [sp, #4]
    226e:	9a03      	ldr	r2, [sp, #12]
    2270:	4613      	mov	r3, r2
    2272:	009b      	lsls	r3, r3, #2
    2274:	4413      	add	r3, r2
    2276:	009b      	lsls	r3, r3, #2
    2278:	440b      	add	r3, r1
    227a:	332c      	adds	r3, #44	; 0x2c
    227c:	681a      	ldr	r2, [r3, #0]
    227e:	4961      	ldr	r1, [pc, #388]	; (2404 <Clock_Ip_InitClock+0x288>)
    2280:	4613      	mov	r3, r2
    2282:	00db      	lsls	r3, r3, #3
    2284:	4413      	add	r3, r2
    2286:	440b      	add	r3, r1
    2288:	3301      	adds	r3, #1
    228a:	781b      	ldrb	r3, [r3, #0]
    228c:	461a      	mov	r2, r3
    228e:	4b62      	ldr	r3, [pc, #392]	; (2418 <Clock_Ip_InitClock+0x29c>)
    2290:	5c9b      	ldrb	r3, [r3, r2]
    2292:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2294:	4961      	ldr	r1, [pc, #388]	; (241c <Clock_Ip_InitClock+0x2a0>)
    2296:	9a02      	ldr	r2, [sp, #8]
    2298:	4613      	mov	r3, r2
    229a:	009b      	lsls	r3, r3, #2
    229c:	4413      	add	r3, r2
    229e:	009b      	lsls	r3, r3, #2
    22a0:	440b      	add	r3, r1
    22a2:	3304      	adds	r3, #4
    22a4:	6819      	ldr	r1, [r3, #0]
    22a6:	9a03      	ldr	r2, [sp, #12]
    22a8:	4613      	mov	r3, r2
    22aa:	009b      	lsls	r3, r3, #2
    22ac:	4413      	add	r3, r2
    22ae:	009b      	lsls	r3, r3, #2
    22b0:	3328      	adds	r3, #40	; 0x28
    22b2:	9a01      	ldr	r2, [sp, #4]
    22b4:	4413      	add	r3, r2
    22b6:	3304      	adds	r3, #4
    22b8:	4618      	mov	r0, r3
    22ba:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    22bc:	9b03      	ldr	r3, [sp, #12]
    22be:	3301      	adds	r3, #1
    22c0:	9303      	str	r3, [sp, #12]
    22c2:	9b01      	ldr	r3, [sp, #4]
    22c4:	7a5b      	ldrb	r3, [r3, #9]
    22c6:	461a      	mov	r2, r3
    22c8:	9b03      	ldr	r3, [sp, #12]
    22ca:	4293      	cmp	r3, r2
    22cc:	d3ce      	bcc.n	226c <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    22ce:	9801      	ldr	r0, [sp, #4]
    22d0:	f7ff fdb0 	bl	1e34 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    22d4:	2300      	movs	r3, #0
    22d6:	9303      	str	r3, [sp, #12]
    22d8:	e028      	b.n	232c <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    22da:	9901      	ldr	r1, [sp, #4]
    22dc:	9a03      	ldr	r2, [sp, #12]
    22de:	4613      	mov	r3, r2
    22e0:	009b      	lsls	r3, r3, #2
    22e2:	4413      	add	r3, r2
    22e4:	009b      	lsls	r3, r3, #2
    22e6:	440b      	add	r3, r1
    22e8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    22ec:	681a      	ldr	r2, [r3, #0]
    22ee:	4945      	ldr	r1, [pc, #276]	; (2404 <Clock_Ip_InitClock+0x288>)
    22f0:	4613      	mov	r3, r2
    22f2:	00db      	lsls	r3, r3, #3
    22f4:	4413      	add	r3, r2
    22f6:	440b      	add	r3, r1
    22f8:	3301      	adds	r3, #1
    22fa:	781b      	ldrb	r3, [r3, #0]
    22fc:	461a      	mov	r2, r3
    22fe:	4b48      	ldr	r3, [pc, #288]	; (2420 <Clock_Ip_InitClock+0x2a4>)
    2300:	5c9b      	ldrb	r3, [r3, r2]
    2302:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2304:	4a47      	ldr	r2, [pc, #284]	; (2424 <Clock_Ip_InitClock+0x2a8>)
    2306:	9b02      	ldr	r3, [sp, #8]
    2308:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    230c:	9a03      	ldr	r2, [sp, #12]
    230e:	4613      	mov	r3, r2
    2310:	009b      	lsls	r3, r3, #2
    2312:	4413      	add	r3, r2
    2314:	009b      	lsls	r3, r3, #2
    2316:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    231a:	9a01      	ldr	r2, [sp, #4]
    231c:	4413      	add	r3, r2
    231e:	3304      	adds	r3, #4
    2320:	9903      	ldr	r1, [sp, #12]
    2322:	4618      	mov	r0, r3
    2324:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2326:	9b03      	ldr	r3, [sp, #12]
    2328:	3301      	adds	r3, #1
    232a:	9303      	str	r3, [sp, #12]
    232c:	9b01      	ldr	r3, [sp, #4]
    232e:	7c5b      	ldrb	r3, [r3, #17]
    2330:	461a      	mov	r2, r3
    2332:	9b03      	ldr	r3, [sp, #12]
    2334:	4293      	cmp	r3, r2
    2336:	d3d0      	bcc.n	22da <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2338:	2300      	movs	r3, #0
    233a:	9303      	str	r3, [sp, #12]
    233c:	e026      	b.n	238c <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    233e:	9901      	ldr	r1, [sp, #4]
    2340:	9a03      	ldr	r2, [sp, #12]
    2342:	4613      	mov	r3, r2
    2344:	005b      	lsls	r3, r3, #1
    2346:	4413      	add	r3, r2
    2348:	009b      	lsls	r3, r3, #2
    234a:	440b      	add	r3, r1
    234c:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2350:	681a      	ldr	r2, [r3, #0]
    2352:	492c      	ldr	r1, [pc, #176]	; (2404 <Clock_Ip_InitClock+0x288>)
    2354:	4613      	mov	r3, r2
    2356:	00db      	lsls	r3, r3, #3
    2358:	4413      	add	r3, r2
    235a:	440b      	add	r3, r1
    235c:	3301      	adds	r3, #1
    235e:	781b      	ldrb	r3, [r3, #0]
    2360:	461a      	mov	r2, r3
    2362:	4b31      	ldr	r3, [pc, #196]	; (2428 <Clock_Ip_InitClock+0x2ac>)
    2364:	5c9b      	ldrb	r3, [r3, r2]
    2366:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2368:	4a30      	ldr	r2, [pc, #192]	; (242c <Clock_Ip_InitClock+0x2b0>)
    236a:	9b02      	ldr	r3, [sp, #8]
    236c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2370:	9a03      	ldr	r2, [sp, #12]
    2372:	4613      	mov	r3, r2
    2374:	005b      	lsls	r3, r3, #1
    2376:	4413      	add	r3, r2
    2378:	009b      	lsls	r3, r3, #2
    237a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    237e:	9a01      	ldr	r2, [sp, #4]
    2380:	4413      	add	r3, r2
    2382:	4618      	mov	r0, r3
    2384:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2386:	9b03      	ldr	r3, [sp, #12]
    2388:	3301      	adds	r3, #1
    238a:	9303      	str	r3, [sp, #12]
    238c:	9b01      	ldr	r3, [sp, #4]
    238e:	7b5b      	ldrb	r3, [r3, #13]
    2390:	461a      	mov	r2, r3
    2392:	9b03      	ldr	r3, [sp, #12]
    2394:	4293      	cmp	r3, r2
    2396:	d3d2      	bcc.n	233e <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2398:	2300      	movs	r3, #0
    239a:	9303      	str	r3, [sp, #12]
    239c:	e026      	b.n	23ec <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    239e:	9901      	ldr	r1, [sp, #4]
    23a0:	9a03      	ldr	r2, [sp, #12]
    23a2:	4613      	mov	r3, r2
    23a4:	005b      	lsls	r3, r3, #1
    23a6:	4413      	add	r3, r2
    23a8:	009b      	lsls	r3, r3, #2
    23aa:	440b      	add	r3, r1
    23ac:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    23b0:	681a      	ldr	r2, [r3, #0]
    23b2:	4914      	ldr	r1, [pc, #80]	; (2404 <Clock_Ip_InitClock+0x288>)
    23b4:	4613      	mov	r3, r2
    23b6:	00db      	lsls	r3, r3, #3
    23b8:	4413      	add	r3, r2
    23ba:	440b      	add	r3, r1
    23bc:	3301      	adds	r3, #1
    23be:	781b      	ldrb	r3, [r3, #0]
    23c0:	461a      	mov	r2, r3
    23c2:	4b1b      	ldr	r3, [pc, #108]	; (2430 <Clock_Ip_InitClock+0x2b4>)
    23c4:	5c9b      	ldrb	r3, [r3, r2]
    23c6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    23c8:	4a1a      	ldr	r2, [pc, #104]	; (2434 <Clock_Ip_InitClock+0x2b8>)
    23ca:	9b02      	ldr	r3, [sp, #8]
    23cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    23d0:	9a03      	ldr	r2, [sp, #12]
    23d2:	4613      	mov	r3, r2
    23d4:	005b      	lsls	r3, r3, #1
    23d6:	4413      	add	r3, r2
    23d8:	009b      	lsls	r3, r3, #2
    23da:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    23de:	9a01      	ldr	r2, [sp, #4]
    23e0:	4413      	add	r3, r2
    23e2:	4618      	mov	r0, r3
    23e4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    23e6:	9b03      	ldr	r3, [sp, #12]
    23e8:	3301      	adds	r3, #1
    23ea:	9303      	str	r3, [sp, #12]
    23ec:	9b01      	ldr	r3, [sp, #4]
    23ee:	7b1b      	ldrb	r3, [r3, #12]
    23f0:	461a      	mov	r2, r3
    23f2:	9b03      	ldr	r3, [sp, #12]
    23f4:	4293      	cmp	r3, r2
    23f6:	d3d2      	bcc.n	239e <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    23f8:	2300      	movs	r3, #0
    23fa:	9303      	str	r3, [sp, #12]
    23fc:	e044      	b.n	2488 <Clock_Ip_InitClock+0x30c>
    23fe:	bf00      	nop
    2400:	1fff8b38 	.word	0x1fff8b38
    2404:	0000ede4 	.word	0x0000ede4
    2408:	0000edd4 	.word	0x0000edd4
    240c:	0000f3e0 	.word	0x0000f3e0
    2410:	0000ed74 	.word	0x0000ed74
    2414:	0000f3a4 	.word	0x0000f3a4
    2418:	0000ed64 	.word	0x0000ed64
    241c:	0000f338 	.word	0x0000f338
    2420:	0000edc4 	.word	0x0000edc4
    2424:	0000f418 	.word	0x0000f418
    2428:	0000ed54 	.word	0x0000ed54
    242c:	0000f330 	.word	0x0000f330
    2430:	0000ed44 	.word	0x0000ed44
    2434:	0000f2f4 	.word	0x0000f2f4
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2438:	9901      	ldr	r1, [sp, #4]
    243a:	9a03      	ldr	r2, [sp, #12]
    243c:	4613      	mov	r3, r2
    243e:	005b      	lsls	r3, r3, #1
    2440:	4413      	add	r3, r2
    2442:	009b      	lsls	r3, r3, #2
    2444:	440b      	add	r3, r1
    2446:	f503 730e 	add.w	r3, r3, #568	; 0x238
    244a:	681a      	ldr	r2, [r3, #0]
    244c:	49ac      	ldr	r1, [pc, #688]	; (2700 <Clock_Ip_InitClock+0x584>)
    244e:	4613      	mov	r3, r2
    2450:	00db      	lsls	r3, r3, #3
    2452:	4413      	add	r3, r2
    2454:	440b      	add	r3, r1
    2456:	3301      	adds	r3, #1
    2458:	781b      	ldrb	r3, [r3, #0]
    245a:	461a      	mov	r2, r3
    245c:	4ba9      	ldr	r3, [pc, #676]	; (2704 <Clock_Ip_InitClock+0x588>)
    245e:	5c9b      	ldrb	r3, [r3, r2]
    2460:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    2462:	4aa9      	ldr	r2, [pc, #676]	; (2708 <Clock_Ip_InitClock+0x58c>)
    2464:	9b02      	ldr	r3, [sp, #8]
    2466:	00db      	lsls	r3, r3, #3
    2468:	4413      	add	r3, r2
    246a:	6859      	ldr	r1, [r3, #4]
    246c:	9a03      	ldr	r2, [sp, #12]
    246e:	4613      	mov	r3, r2
    2470:	005b      	lsls	r3, r3, #1
    2472:	4413      	add	r3, r2
    2474:	009b      	lsls	r3, r3, #2
    2476:	f503 730e 	add.w	r3, r3, #568	; 0x238
    247a:	9a01      	ldr	r2, [sp, #4]
    247c:	4413      	add	r3, r2
    247e:	4618      	mov	r0, r3
    2480:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2482:	9b03      	ldr	r3, [sp, #12]
    2484:	3301      	adds	r3, #1
    2486:	9303      	str	r3, [sp, #12]
    2488:	9b01      	ldr	r3, [sp, #4]
    248a:	7b5b      	ldrb	r3, [r3, #13]
    248c:	461a      	mov	r2, r3
    248e:	9b03      	ldr	r3, [sp, #12]
    2490:	4293      	cmp	r3, r2
    2492:	d3d1      	bcc.n	2438 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2494:	2300      	movs	r3, #0
    2496:	9303      	str	r3, [sp, #12]
    2498:	e029      	b.n	24ee <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    249a:	9901      	ldr	r1, [sp, #4]
    249c:	9a03      	ldr	r2, [sp, #12]
    249e:	4613      	mov	r3, r2
    24a0:	009b      	lsls	r3, r3, #2
    24a2:	4413      	add	r3, r2
    24a4:	00db      	lsls	r3, r3, #3
    24a6:	440b      	add	r3, r1
    24a8:	3340      	adds	r3, #64	; 0x40
    24aa:	681a      	ldr	r2, [r3, #0]
    24ac:	4994      	ldr	r1, [pc, #592]	; (2700 <Clock_Ip_InitClock+0x584>)
    24ae:	4613      	mov	r3, r2
    24b0:	00db      	lsls	r3, r3, #3
    24b2:	4413      	add	r3, r2
    24b4:	440b      	add	r3, r1
    24b6:	3301      	adds	r3, #1
    24b8:	781b      	ldrb	r3, [r3, #0]
    24ba:	461a      	mov	r2, r3
    24bc:	4b93      	ldr	r3, [pc, #588]	; (270c <Clock_Ip_InitClock+0x590>)
    24be:	5c9b      	ldrb	r3, [r3, r2]
    24c0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    24c2:	4993      	ldr	r1, [pc, #588]	; (2710 <Clock_Ip_InitClock+0x594>)
    24c4:	9a02      	ldr	r2, [sp, #8]
    24c6:	4613      	mov	r3, r2
    24c8:	009b      	lsls	r3, r3, #2
    24ca:	4413      	add	r3, r2
    24cc:	009b      	lsls	r3, r3, #2
    24ce:	440b      	add	r3, r1
    24d0:	3304      	adds	r3, #4
    24d2:	6819      	ldr	r1, [r3, #0]
    24d4:	9a03      	ldr	r2, [sp, #12]
    24d6:	4613      	mov	r3, r2
    24d8:	009b      	lsls	r3, r3, #2
    24da:	4413      	add	r3, r2
    24dc:	00db      	lsls	r3, r3, #3
    24de:	3340      	adds	r3, #64	; 0x40
    24e0:	9a01      	ldr	r2, [sp, #4]
    24e2:	4413      	add	r3, r2
    24e4:	4618      	mov	r0, r3
    24e6:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    24e8:	9b03      	ldr	r3, [sp, #12]
    24ea:	3301      	adds	r3, #1
    24ec:	9303      	str	r3, [sp, #12]
    24ee:	9b01      	ldr	r3, [sp, #4]
    24f0:	7a9b      	ldrb	r3, [r3, #10]
    24f2:	461a      	mov	r2, r3
    24f4:	9b03      	ldr	r3, [sp, #12]
    24f6:	4293      	cmp	r3, r2
    24f8:	d3cf      	bcc.n	249a <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    24fa:	2300      	movs	r3, #0
    24fc:	9303      	str	r3, [sp, #12]
    24fe:	e029      	b.n	2554 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2500:	9901      	ldr	r1, [sp, #4]
    2502:	9a03      	ldr	r2, [sp, #12]
    2504:	4613      	mov	r3, r2
    2506:	009b      	lsls	r3, r3, #2
    2508:	4413      	add	r3, r2
    250a:	009b      	lsls	r3, r3, #2
    250c:	440b      	add	r3, r1
    250e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2512:	681a      	ldr	r2, [r3, #0]
    2514:	497a      	ldr	r1, [pc, #488]	; (2700 <Clock_Ip_InitClock+0x584>)
    2516:	4613      	mov	r3, r2
    2518:	00db      	lsls	r3, r3, #3
    251a:	4413      	add	r3, r2
    251c:	440b      	add	r3, r1
    251e:	3301      	adds	r3, #1
    2520:	781b      	ldrb	r3, [r3, #0]
    2522:	461a      	mov	r2, r3
    2524:	4b7b      	ldr	r3, [pc, #492]	; (2714 <Clock_Ip_InitClock+0x598>)
    2526:	5c9b      	ldrb	r3, [r3, r2]
    2528:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    252a:	4a7b      	ldr	r2, [pc, #492]	; (2718 <Clock_Ip_InitClock+0x59c>)
    252c:	9b02      	ldr	r3, [sp, #8]
    252e:	011b      	lsls	r3, r3, #4
    2530:	4413      	add	r3, r2
    2532:	3304      	adds	r3, #4
    2534:	681c      	ldr	r4, [r3, #0]
    2536:	9a03      	ldr	r2, [sp, #12]
    2538:	4613      	mov	r3, r2
    253a:	009b      	lsls	r3, r3, #2
    253c:	4413      	add	r3, r2
    253e:	009b      	lsls	r3, r3, #2
    2540:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2544:	9a01      	ldr	r2, [sp, #4]
    2546:	4413      	add	r3, r2
    2548:	9903      	ldr	r1, [sp, #12]
    254a:	4618      	mov	r0, r3
    254c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    254e:	9b03      	ldr	r3, [sp, #12]
    2550:	3301      	adds	r3, #1
    2552:	9303      	str	r3, [sp, #12]
    2554:	9b01      	ldr	r3, [sp, #4]
    2556:	7c9b      	ldrb	r3, [r3, #18]
    2558:	461a      	mov	r2, r3
    255a:	9b03      	ldr	r3, [sp, #12]
    255c:	4293      	cmp	r3, r2
    255e:	d3cf      	bcc.n	2500 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2560:	2300      	movs	r3, #0
    2562:	9303      	str	r3, [sp, #12]
    2564:	e02a      	b.n	25bc <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2566:	9901      	ldr	r1, [sp, #4]
    2568:	9a03      	ldr	r2, [sp, #12]
    256a:	4613      	mov	r3, r2
    256c:	009b      	lsls	r3, r3, #2
    256e:	4413      	add	r3, r2
    2570:	009b      	lsls	r3, r3, #2
    2572:	440b      	add	r3, r1
    2574:	332c      	adds	r3, #44	; 0x2c
    2576:	681a      	ldr	r2, [r3, #0]
    2578:	4961      	ldr	r1, [pc, #388]	; (2700 <Clock_Ip_InitClock+0x584>)
    257a:	4613      	mov	r3, r2
    257c:	00db      	lsls	r3, r3, #3
    257e:	4413      	add	r3, r2
    2580:	440b      	add	r3, r1
    2582:	3301      	adds	r3, #1
    2584:	781b      	ldrb	r3, [r3, #0]
    2586:	461a      	mov	r2, r3
    2588:	4b64      	ldr	r3, [pc, #400]	; (271c <Clock_Ip_InitClock+0x5a0>)
    258a:	5c9b      	ldrb	r3, [r3, r2]
    258c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    258e:	4964      	ldr	r1, [pc, #400]	; (2720 <Clock_Ip_InitClock+0x5a4>)
    2590:	9a02      	ldr	r2, [sp, #8]
    2592:	4613      	mov	r3, r2
    2594:	009b      	lsls	r3, r3, #2
    2596:	4413      	add	r3, r2
    2598:	009b      	lsls	r3, r3, #2
    259a:	440b      	add	r3, r1
    259c:	3308      	adds	r3, #8
    259e:	6819      	ldr	r1, [r3, #0]
    25a0:	9a03      	ldr	r2, [sp, #12]
    25a2:	4613      	mov	r3, r2
    25a4:	009b      	lsls	r3, r3, #2
    25a6:	4413      	add	r3, r2
    25a8:	009b      	lsls	r3, r3, #2
    25aa:	3328      	adds	r3, #40	; 0x28
    25ac:	9a01      	ldr	r2, [sp, #4]
    25ae:	4413      	add	r3, r2
    25b0:	3304      	adds	r3, #4
    25b2:	4618      	mov	r0, r3
    25b4:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    25b6:	9b03      	ldr	r3, [sp, #12]
    25b8:	3301      	adds	r3, #1
    25ba:	9303      	str	r3, [sp, #12]
    25bc:	9b01      	ldr	r3, [sp, #4]
    25be:	7a5b      	ldrb	r3, [r3, #9]
    25c0:	461a      	mov	r2, r3
    25c2:	9b03      	ldr	r3, [sp, #12]
    25c4:	4293      	cmp	r3, r2
    25c6:	d3ce      	bcc.n	2566 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    25c8:	2300      	movs	r3, #0
    25ca:	9303      	str	r3, [sp, #12]
    25cc:	e029      	b.n	2622 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    25ce:	9901      	ldr	r1, [sp, #4]
    25d0:	9a03      	ldr	r2, [sp, #12]
    25d2:	4613      	mov	r3, r2
    25d4:	009b      	lsls	r3, r3, #2
    25d6:	4413      	add	r3, r2
    25d8:	00db      	lsls	r3, r3, #3
    25da:	440b      	add	r3, r1
    25dc:	3340      	adds	r3, #64	; 0x40
    25de:	681a      	ldr	r2, [r3, #0]
    25e0:	4947      	ldr	r1, [pc, #284]	; (2700 <Clock_Ip_InitClock+0x584>)
    25e2:	4613      	mov	r3, r2
    25e4:	00db      	lsls	r3, r3, #3
    25e6:	4413      	add	r3, r2
    25e8:	440b      	add	r3, r1
    25ea:	3301      	adds	r3, #1
    25ec:	781b      	ldrb	r3, [r3, #0]
    25ee:	461a      	mov	r2, r3
    25f0:	4b46      	ldr	r3, [pc, #280]	; (270c <Clock_Ip_InitClock+0x590>)
    25f2:	5c9b      	ldrb	r3, [r3, r2]
    25f4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    25f6:	4946      	ldr	r1, [pc, #280]	; (2710 <Clock_Ip_InitClock+0x594>)
    25f8:	9a02      	ldr	r2, [sp, #8]
    25fa:	4613      	mov	r3, r2
    25fc:	009b      	lsls	r3, r3, #2
    25fe:	4413      	add	r3, r2
    2600:	009b      	lsls	r3, r3, #2
    2602:	440b      	add	r3, r1
    2604:	330c      	adds	r3, #12
    2606:	6819      	ldr	r1, [r3, #0]
    2608:	9a03      	ldr	r2, [sp, #12]
    260a:	4613      	mov	r3, r2
    260c:	009b      	lsls	r3, r3, #2
    260e:	4413      	add	r3, r2
    2610:	00db      	lsls	r3, r3, #3
    2612:	3340      	adds	r3, #64	; 0x40
    2614:	9a01      	ldr	r2, [sp, #4]
    2616:	4413      	add	r3, r2
    2618:	4618      	mov	r0, r3
    261a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    261c:	9b03      	ldr	r3, [sp, #12]
    261e:	3301      	adds	r3, #1
    2620:	9303      	str	r3, [sp, #12]
    2622:	9b01      	ldr	r3, [sp, #4]
    2624:	7a9b      	ldrb	r3, [r3, #10]
    2626:	461a      	mov	r2, r3
    2628:	9b03      	ldr	r3, [sp, #12]
    262a:	4293      	cmp	r3, r2
    262c:	d3cf      	bcc.n	25ce <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    262e:	2300      	movs	r3, #0
    2630:	9303      	str	r3, [sp, #12]
    2632:	e025      	b.n	2680 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2634:	9a01      	ldr	r2, [sp, #4]
    2636:	9b03      	ldr	r3, [sp, #12]
    2638:	3324      	adds	r3, #36	; 0x24
    263a:	011b      	lsls	r3, r3, #4
    263c:	4413      	add	r3, r2
    263e:	3304      	adds	r3, #4
    2640:	681a      	ldr	r2, [r3, #0]
    2642:	492f      	ldr	r1, [pc, #188]	; (2700 <Clock_Ip_InitClock+0x584>)
    2644:	4613      	mov	r3, r2
    2646:	00db      	lsls	r3, r3, #3
    2648:	4413      	add	r3, r2
    264a:	440b      	add	r3, r1
    264c:	3301      	adds	r3, #1
    264e:	781b      	ldrb	r3, [r3, #0]
    2650:	461a      	mov	r2, r3
    2652:	4b34      	ldr	r3, [pc, #208]	; (2724 <Clock_Ip_InitClock+0x5a8>)
    2654:	5c9b      	ldrb	r3, [r3, r2]
    2656:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2658:	4933      	ldr	r1, [pc, #204]	; (2728 <Clock_Ip_InitClock+0x5ac>)
    265a:	9a02      	ldr	r2, [sp, #8]
    265c:	4613      	mov	r3, r2
    265e:	005b      	lsls	r3, r3, #1
    2660:	4413      	add	r3, r2
    2662:	009b      	lsls	r3, r3, #2
    2664:	440b      	add	r3, r1
    2666:	3304      	adds	r3, #4
    2668:	681b      	ldr	r3, [r3, #0]
    266a:	9a03      	ldr	r2, [sp, #12]
    266c:	3224      	adds	r2, #36	; 0x24
    266e:	0112      	lsls	r2, r2, #4
    2670:	9901      	ldr	r1, [sp, #4]
    2672:	440a      	add	r2, r1
    2674:	3204      	adds	r2, #4
    2676:	4610      	mov	r0, r2
    2678:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    267a:	9b03      	ldr	r3, [sp, #12]
    267c:	3301      	adds	r3, #1
    267e:	9303      	str	r3, [sp, #12]
    2680:	9b01      	ldr	r3, [sp, #4]
    2682:	7b9b      	ldrb	r3, [r3, #14]
    2684:	461a      	mov	r2, r3
    2686:	9b03      	ldr	r3, [sp, #12]
    2688:	4293      	cmp	r3, r2
    268a:	d3d3      	bcc.n	2634 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    268c:	4b27      	ldr	r3, [pc, #156]	; (272c <Clock_Ip_InitClock+0x5b0>)
    268e:	2200      	movs	r2, #0
    2690:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2692:	4b26      	ldr	r3, [pc, #152]	; (272c <Clock_Ip_InitClock+0x5b0>)
    2694:	2200      	movs	r2, #0
    2696:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2698:	4b24      	ldr	r3, [pc, #144]	; (272c <Clock_Ip_InitClock+0x5b0>)
    269a:	2201      	movs	r2, #1
    269c:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    269e:	4b23      	ldr	r3, [pc, #140]	; (272c <Clock_Ip_InitClock+0x5b0>)
    26a0:	2200      	movs	r2, #0
    26a2:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    26a4:	f000 fa9c 	bl	2be0 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    26a8:	2300      	movs	r3, #0
    26aa:	9303      	str	r3, [sp, #12]
    26ac:	e04c      	b.n	2748 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    26ae:	9a01      	ldr	r2, [sp, #4]
    26b0:	9b03      	ldr	r3, [sp, #12]
    26b2:	330d      	adds	r3, #13
    26b4:	00db      	lsls	r3, r3, #3
    26b6:	4413      	add	r3, r2
    26b8:	685b      	ldr	r3, [r3, #4]
    26ba:	4a1d      	ldr	r2, [pc, #116]	; (2730 <Clock_Ip_InitClock+0x5b4>)
    26bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    26c0:	2b03      	cmp	r3, #3
    26c2:	d03b      	beq.n	273c <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    26c4:	9b01      	ldr	r3, [sp, #4]
    26c6:	9a03      	ldr	r2, [sp, #12]
    26c8:	320d      	adds	r2, #13
    26ca:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    26ce:	490c      	ldr	r1, [pc, #48]	; (2700 <Clock_Ip_InitClock+0x584>)
    26d0:	4613      	mov	r3, r2
    26d2:	00db      	lsls	r3, r3, #3
    26d4:	4413      	add	r3, r2
    26d6:	440b      	add	r3, r1
    26d8:	3301      	adds	r3, #1
    26da:	781b      	ldrb	r3, [r3, #0]
    26dc:	461a      	mov	r2, r3
    26de:	4b15      	ldr	r3, [pc, #84]	; (2734 <Clock_Ip_InitClock+0x5b8>)
    26e0:	5c9b      	ldrb	r3, [r3, r2]
    26e2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    26e4:	4a14      	ldr	r2, [pc, #80]	; (2738 <Clock_Ip_InitClock+0x5bc>)
    26e6:	9b02      	ldr	r3, [sp, #8]
    26e8:	00db      	lsls	r3, r3, #3
    26ea:	4413      	add	r3, r2
    26ec:	685b      	ldr	r3, [r3, #4]
    26ee:	9a03      	ldr	r2, [sp, #12]
    26f0:	320d      	adds	r2, #13
    26f2:	00d2      	lsls	r2, r2, #3
    26f4:	9901      	ldr	r1, [sp, #4]
    26f6:	440a      	add	r2, r1
    26f8:	4610      	mov	r0, r2
    26fa:	4798      	blx	r3
    26fc:	e021      	b.n	2742 <Clock_Ip_InitClock+0x5c6>
    26fe:	bf00      	nop
    2700:	0000ede4 	.word	0x0000ede4
    2704:	0000ed54 	.word	0x0000ed54
    2708:	0000f330 	.word	0x0000f330
    270c:	0000eda4 	.word	0x0000eda4
    2710:	0000f3f0 	.word	0x0000f3f0
    2714:	0000edd4 	.word	0x0000edd4
    2718:	0000f3e0 	.word	0x0000f3e0
    271c:	0000ed64 	.word	0x0000ed64
    2720:	0000f338 	.word	0x0000f338
    2724:	0000ed94 	.word	0x0000ed94
    2728:	0000f360 	.word	0x0000f360
    272c:	1fff8b40 	.word	0x1fff8b40
    2730:	0000f230 	.word	0x0000f230
    2734:	0000edb4 	.word	0x0000edb4
    2738:	0000f41c 	.word	0x0000f41c
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    273c:	4b3a      	ldr	r3, [pc, #232]	; (2828 <Clock_Ip_InitClock+0x6ac>)
    273e:	2201      	movs	r2, #1
    2740:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2742:	9b03      	ldr	r3, [sp, #12]
    2744:	3301      	adds	r3, #1
    2746:	9303      	str	r3, [sp, #12]
    2748:	9b01      	ldr	r3, [sp, #4]
    274a:	7adb      	ldrb	r3, [r3, #11]
    274c:	461a      	mov	r2, r3
    274e:	9b03      	ldr	r3, [sp, #12]
    2750:	4293      	cmp	r3, r2
    2752:	d3ac      	bcc.n	26ae <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2754:	4b34      	ldr	r3, [pc, #208]	; (2828 <Clock_Ip_InitClock+0x6ac>)
    2756:	781b      	ldrb	r3, [r3, #0]
    2758:	f083 0301 	eor.w	r3, r3, #1
    275c:	b2db      	uxtb	r3, r3
    275e:	2b00      	cmp	r3, #0
    2760:	d05e      	beq.n	2820 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2762:	2300      	movs	r3, #0
    2764:	9303      	str	r3, [sp, #12]
    2766:	e01f      	b.n	27a8 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2768:	9a01      	ldr	r2, [sp, #4]
    276a:	9b03      	ldr	r3, [sp, #12]
    276c:	334e      	adds	r3, #78	; 0x4e
    276e:	00db      	lsls	r3, r3, #3
    2770:	4413      	add	r3, r2
    2772:	685a      	ldr	r2, [r3, #4]
    2774:	492d      	ldr	r1, [pc, #180]	; (282c <Clock_Ip_InitClock+0x6b0>)
    2776:	4613      	mov	r3, r2
    2778:	00db      	lsls	r3, r3, #3
    277a:	4413      	add	r3, r2
    277c:	440b      	add	r3, r1
    277e:	3301      	adds	r3, #1
    2780:	781b      	ldrb	r3, [r3, #0]
    2782:	461a      	mov	r2, r3
    2784:	4b2a      	ldr	r3, [pc, #168]	; (2830 <Clock_Ip_InitClock+0x6b4>)
    2786:	5c9b      	ldrb	r3, [r3, r2]
    2788:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    278a:	4a2a      	ldr	r2, [pc, #168]	; (2834 <Clock_Ip_InitClock+0x6b8>)
    278c:	9b02      	ldr	r3, [sp, #8]
    278e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2792:	9a03      	ldr	r2, [sp, #12]
    2794:	324e      	adds	r2, #78	; 0x4e
    2796:	00d2      	lsls	r2, r2, #3
    2798:	9901      	ldr	r1, [sp, #4]
    279a:	440a      	add	r2, r1
    279c:	3204      	adds	r2, #4
    279e:	4610      	mov	r0, r2
    27a0:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    27a2:	9b03      	ldr	r3, [sp, #12]
    27a4:	3301      	adds	r3, #1
    27a6:	9303      	str	r3, [sp, #12]
    27a8:	9b01      	ldr	r3, [sp, #4]
    27aa:	7c1b      	ldrb	r3, [r3, #16]
    27ac:	461a      	mov	r2, r3
    27ae:	9b03      	ldr	r3, [sp, #12]
    27b0:	4293      	cmp	r3, r2
    27b2:	d3d9      	bcc.n	2768 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    27b4:	2300      	movs	r3, #0
    27b6:	9303      	str	r3, [sp, #12]
    27b8:	e028      	b.n	280c <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    27ba:	9901      	ldr	r1, [sp, #4]
    27bc:	9a03      	ldr	r2, [sp, #12]
    27be:	4613      	mov	r3, r2
    27c0:	009b      	lsls	r3, r3, #2
    27c2:	4413      	add	r3, r2
    27c4:	009b      	lsls	r3, r3, #2
    27c6:	440b      	add	r3, r1
    27c8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27cc:	681a      	ldr	r2, [r3, #0]
    27ce:	4917      	ldr	r1, [pc, #92]	; (282c <Clock_Ip_InitClock+0x6b0>)
    27d0:	4613      	mov	r3, r2
    27d2:	00db      	lsls	r3, r3, #3
    27d4:	4413      	add	r3, r2
    27d6:	440b      	add	r3, r1
    27d8:	3301      	adds	r3, #1
    27da:	781b      	ldrb	r3, [r3, #0]
    27dc:	461a      	mov	r2, r3
    27de:	4b16      	ldr	r3, [pc, #88]	; (2838 <Clock_Ip_InitClock+0x6bc>)
    27e0:	5c9b      	ldrb	r3, [r3, r2]
    27e2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    27e4:	4a15      	ldr	r2, [pc, #84]	; (283c <Clock_Ip_InitClock+0x6c0>)
    27e6:	9b02      	ldr	r3, [sp, #8]
    27e8:	011b      	lsls	r3, r3, #4
    27ea:	4413      	add	r3, r2
    27ec:	330c      	adds	r3, #12
    27ee:	6819      	ldr	r1, [r3, #0]
    27f0:	9a03      	ldr	r2, [sp, #12]
    27f2:	4613      	mov	r3, r2
    27f4:	009b      	lsls	r3, r3, #2
    27f6:	4413      	add	r3, r2
    27f8:	009b      	lsls	r3, r3, #2
    27fa:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27fe:	9a01      	ldr	r2, [sp, #4]
    2800:	4413      	add	r3, r2
    2802:	4618      	mov	r0, r3
    2804:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2806:	9b03      	ldr	r3, [sp, #12]
    2808:	3301      	adds	r3, #1
    280a:	9303      	str	r3, [sp, #12]
    280c:	9b01      	ldr	r3, [sp, #4]
    280e:	7c9b      	ldrb	r3, [r3, #18]
    2810:	461a      	mov	r2, r3
    2812:	9b03      	ldr	r3, [sp, #12]
    2814:	4293      	cmp	r3, r2
    2816:	d3d0      	bcc.n	27ba <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2818:	2104      	movs	r1, #4
    281a:	9801      	ldr	r0, [sp, #4]
    281c:	f002 ff48 	bl	56b0 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2820:	bf00      	nop
    2822:	b004      	add	sp, #16
    2824:	bd10      	pop	{r4, pc}
    2826:	bf00      	nop
    2828:	1fff8b40 	.word	0x1fff8b40
    282c:	0000ede4 	.word	0x0000ede4
    2830:	0000ed84 	.word	0x0000ed84
    2834:	0000f36c 	.word	0x0000f36c
    2838:	0000edd4 	.word	0x0000edd4
    283c:	0000f3e0 	.word	0x0000f3e0

00002840 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2840:	b500      	push	{lr}
    2842:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2844:	2302      	movs	r3, #2
    2846:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2848:	2300      	movs	r3, #0
    284a:	9304      	str	r3, [sp, #16]
    284c:	e02c      	b.n	28a8 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    284e:	4a36      	ldr	r2, [pc, #216]	; (2928 <Clock_Ip_GetPllStatus+0xe8>)
    2850:	9b04      	ldr	r3, [sp, #16]
    2852:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2856:	4935      	ldr	r1, [pc, #212]	; (292c <Clock_Ip_GetPllStatus+0xec>)
    2858:	4613      	mov	r3, r2
    285a:	00db      	lsls	r3, r3, #3
    285c:	4413      	add	r3, r2
    285e:	440b      	add	r3, r1
    2860:	3301      	adds	r3, #1
    2862:	781b      	ldrb	r3, [r3, #0]
    2864:	461a      	mov	r2, r3
    2866:	4b32      	ldr	r3, [pc, #200]	; (2930 <Clock_Ip_GetPllStatus+0xf0>)
    2868:	5c9b      	ldrb	r3, [r3, r2]
    286a:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    286c:	4931      	ldr	r1, [pc, #196]	; (2934 <Clock_Ip_GetPllStatus+0xf4>)
    286e:	9a03      	ldr	r2, [sp, #12]
    2870:	4613      	mov	r3, r2
    2872:	009b      	lsls	r3, r3, #2
    2874:	4413      	add	r3, r2
    2876:	009b      	lsls	r3, r3, #2
    2878:	440b      	add	r3, r1
    287a:	3308      	adds	r3, #8
    287c:	681b      	ldr	r3, [r3, #0]
    287e:	492a      	ldr	r1, [pc, #168]	; (2928 <Clock_Ip_GetPllStatus+0xe8>)
    2880:	9a04      	ldr	r2, [sp, #16]
    2882:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2886:	4610      	mov	r0, r2
    2888:	4798      	blx	r3
    288a:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    288c:	9b02      	ldr	r3, [sp, #8]
    288e:	2b01      	cmp	r3, #1
    2890:	d102      	bne.n	2898 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2892:	2301      	movs	r3, #1
    2894:	9305      	str	r3, [sp, #20]
            break;
    2896:	e00d      	b.n	28b4 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2898:	9b02      	ldr	r3, [sp, #8]
    289a:	2b02      	cmp	r3, #2
    289c:	d101      	bne.n	28a2 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    289e:	2300      	movs	r3, #0
    28a0:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    28a2:	9b04      	ldr	r3, [sp, #16]
    28a4:	3301      	adds	r3, #1
    28a6:	9304      	str	r3, [sp, #16]
    28a8:	4b23      	ldr	r3, [pc, #140]	; (2938 <Clock_Ip_GetPllStatus+0xf8>)
    28aa:	789b      	ldrb	r3, [r3, #2]
    28ac:	461a      	mov	r2, r3
    28ae:	9b04      	ldr	r3, [sp, #16]
    28b0:	4293      	cmp	r3, r2
    28b2:	d3cc      	bcc.n	284e <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    28b4:	9b05      	ldr	r3, [sp, #20]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d130      	bne.n	291c <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    28ba:	2300      	movs	r3, #0
    28bc:	9304      	str	r3, [sp, #16]
    28be:	e027      	b.n	2910 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    28c0:	4a1e      	ldr	r2, [pc, #120]	; (293c <Clock_Ip_GetPllStatus+0xfc>)
    28c2:	9b04      	ldr	r3, [sp, #16]
    28c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    28c8:	4918      	ldr	r1, [pc, #96]	; (292c <Clock_Ip_GetPllStatus+0xec>)
    28ca:	4613      	mov	r3, r2
    28cc:	00db      	lsls	r3, r3, #3
    28ce:	4413      	add	r3, r2
    28d0:	440b      	add	r3, r1
    28d2:	3301      	adds	r3, #1
    28d4:	781b      	ldrb	r3, [r3, #0]
    28d6:	461a      	mov	r2, r3
    28d8:	4b19      	ldr	r3, [pc, #100]	; (2940 <Clock_Ip_GetPllStatus+0x100>)
    28da:	5c9b      	ldrb	r3, [r3, r2]
    28dc:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    28de:	4919      	ldr	r1, [pc, #100]	; (2944 <Clock_Ip_GetPllStatus+0x104>)
    28e0:	9a03      	ldr	r2, [sp, #12]
    28e2:	4613      	mov	r3, r2
    28e4:	005b      	lsls	r3, r3, #1
    28e6:	4413      	add	r3, r2
    28e8:	009b      	lsls	r3, r3, #2
    28ea:	440b      	add	r3, r1
    28ec:	3308      	adds	r3, #8
    28ee:	681b      	ldr	r3, [r3, #0]
    28f0:	4912      	ldr	r1, [pc, #72]	; (293c <Clock_Ip_GetPllStatus+0xfc>)
    28f2:	9a04      	ldr	r2, [sp, #16]
    28f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    28f8:	4610      	mov	r0, r2
    28fa:	4798      	blx	r3
    28fc:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    28fe:	9b01      	ldr	r3, [sp, #4]
    2900:	2b01      	cmp	r3, #1
    2902:	d102      	bne.n	290a <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2904:	2301      	movs	r3, #1
    2906:	9305      	str	r3, [sp, #20]
                break;
    2908:	e008      	b.n	291c <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    290a:	9b04      	ldr	r3, [sp, #16]
    290c:	3301      	adds	r3, #1
    290e:	9304      	str	r3, [sp, #16]
    2910:	4b09      	ldr	r3, [pc, #36]	; (2938 <Clock_Ip_GetPllStatus+0xf8>)
    2912:	78db      	ldrb	r3, [r3, #3]
    2914:	461a      	mov	r2, r3
    2916:	9b04      	ldr	r3, [sp, #16]
    2918:	4293      	cmp	r3, r2
    291a:	d3d1      	bcc.n	28c0 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    291c:	9b05      	ldr	r3, [sp, #20]
}
    291e:	4618      	mov	r0, r3
    2920:	b007      	add	sp, #28
    2922:	f85d fb04 	ldr.w	pc, [sp], #4
    2926:	bf00      	nop
    2928:	0000f2ec 	.word	0x0000f2ec
    292c:	0000ede4 	.word	0x0000ede4
    2930:	0000eda4 	.word	0x0000eda4
    2934:	0000f3f0 	.word	0x0000f3f0
    2938:	1fff8b40 	.word	0x1fff8b40
    293c:	0000f2f0 	.word	0x0000f2f0
    2940:	0000ed94 	.word	0x0000ed94
    2944:	0000f360 	.word	0x0000f360

00002948 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2948:	b500      	push	{lr}
    294a:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    294c:	4b55      	ldr	r3, [pc, #340]	; (2aa4 <Clock_Ip_DistributePll+0x15c>)
    294e:	681b      	ldr	r3, [r3, #0]
    2950:	2b00      	cmp	r3, #0
    2952:	f000 80a2 	beq.w	2a9a <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2956:	2300      	movs	r3, #0
    2958:	9301      	str	r3, [sp, #4]
    295a:	e02c      	b.n	29b6 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    295c:	4b51      	ldr	r3, [pc, #324]	; (2aa4 <Clock_Ip_DistributePll+0x15c>)
    295e:	681a      	ldr	r2, [r3, #0]
    2960:	9b01      	ldr	r3, [sp, #4]
    2962:	330d      	adds	r3, #13
    2964:	00db      	lsls	r3, r3, #3
    2966:	4413      	add	r3, r2
    2968:	685b      	ldr	r3, [r3, #4]
    296a:	4a4f      	ldr	r2, [pc, #316]	; (2aa8 <Clock_Ip_DistributePll+0x160>)
    296c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2970:	2b03      	cmp	r3, #3
    2972:	d11d      	bne.n	29b0 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2974:	4b4b      	ldr	r3, [pc, #300]	; (2aa4 <Clock_Ip_DistributePll+0x15c>)
    2976:	681b      	ldr	r3, [r3, #0]
    2978:	9a01      	ldr	r2, [sp, #4]
    297a:	320d      	adds	r2, #13
    297c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2980:	494a      	ldr	r1, [pc, #296]	; (2aac <Clock_Ip_DistributePll+0x164>)
    2982:	4613      	mov	r3, r2
    2984:	00db      	lsls	r3, r3, #3
    2986:	4413      	add	r3, r2
    2988:	440b      	add	r3, r1
    298a:	3301      	adds	r3, #1
    298c:	781b      	ldrb	r3, [r3, #0]
    298e:	461a      	mov	r2, r3
    2990:	4b47      	ldr	r3, [pc, #284]	; (2ab0 <Clock_Ip_DistributePll+0x168>)
    2992:	5c9b      	ldrb	r3, [r3, r2]
    2994:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2996:	4a47      	ldr	r2, [pc, #284]	; (2ab4 <Clock_Ip_DistributePll+0x16c>)
    2998:	9b00      	ldr	r3, [sp, #0]
    299a:	00db      	lsls	r3, r3, #3
    299c:	4413      	add	r3, r2
    299e:	685b      	ldr	r3, [r3, #4]
    29a0:	4a40      	ldr	r2, [pc, #256]	; (2aa4 <Clock_Ip_DistributePll+0x15c>)
    29a2:	6811      	ldr	r1, [r2, #0]
    29a4:	9a01      	ldr	r2, [sp, #4]
    29a6:	320d      	adds	r2, #13
    29a8:	00d2      	lsls	r2, r2, #3
    29aa:	440a      	add	r2, r1
    29ac:	4610      	mov	r0, r2
    29ae:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    29b0:	9b01      	ldr	r3, [sp, #4]
    29b2:	3301      	adds	r3, #1
    29b4:	9301      	str	r3, [sp, #4]
    29b6:	4b3b      	ldr	r3, [pc, #236]	; (2aa4 <Clock_Ip_DistributePll+0x15c>)
    29b8:	681b      	ldr	r3, [r3, #0]
    29ba:	7adb      	ldrb	r3, [r3, #11]
    29bc:	461a      	mov	r2, r3
    29be:	9b01      	ldr	r3, [sp, #4]
    29c0:	4293      	cmp	r3, r2
    29c2:	d3cb      	bcc.n	295c <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    29c4:	4b3c      	ldr	r3, [pc, #240]	; (2ab8 <Clock_Ip_DistributePll+0x170>)
    29c6:	781b      	ldrb	r3, [r3, #0]
    29c8:	2b00      	cmp	r3, #0
    29ca:	d066      	beq.n	2a9a <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29cc:	2300      	movs	r3, #0
    29ce:	9301      	str	r3, [sp, #4]
    29d0:	e021      	b.n	2a16 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    29d2:	4b34      	ldr	r3, [pc, #208]	; (2aa4 <Clock_Ip_DistributePll+0x15c>)
    29d4:	681a      	ldr	r2, [r3, #0]
    29d6:	9b01      	ldr	r3, [sp, #4]
    29d8:	334e      	adds	r3, #78	; 0x4e
    29da:	00db      	lsls	r3, r3, #3
    29dc:	4413      	add	r3, r2
    29de:	685a      	ldr	r2, [r3, #4]
    29e0:	4932      	ldr	r1, [pc, #200]	; (2aac <Clock_Ip_DistributePll+0x164>)
    29e2:	4613      	mov	r3, r2
    29e4:	00db      	lsls	r3, r3, #3
    29e6:	4413      	add	r3, r2
    29e8:	440b      	add	r3, r1
    29ea:	3301      	adds	r3, #1
    29ec:	781b      	ldrb	r3, [r3, #0]
    29ee:	461a      	mov	r2, r3
    29f0:	4b32      	ldr	r3, [pc, #200]	; (2abc <Clock_Ip_DistributePll+0x174>)
    29f2:	5c9b      	ldrb	r3, [r3, r2]
    29f4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    29f6:	4a32      	ldr	r2, [pc, #200]	; (2ac0 <Clock_Ip_DistributePll+0x178>)
    29f8:	9b00      	ldr	r3, [sp, #0]
    29fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29fe:	4a29      	ldr	r2, [pc, #164]	; (2aa4 <Clock_Ip_DistributePll+0x15c>)
    2a00:	6811      	ldr	r1, [r2, #0]
    2a02:	9a01      	ldr	r2, [sp, #4]
    2a04:	324e      	adds	r2, #78	; 0x4e
    2a06:	00d2      	lsls	r2, r2, #3
    2a08:	440a      	add	r2, r1
    2a0a:	3204      	adds	r2, #4
    2a0c:	4610      	mov	r0, r2
    2a0e:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2a10:	9b01      	ldr	r3, [sp, #4]
    2a12:	3301      	adds	r3, #1
    2a14:	9301      	str	r3, [sp, #4]
    2a16:	4b23      	ldr	r3, [pc, #140]	; (2aa4 <Clock_Ip_DistributePll+0x15c>)
    2a18:	681b      	ldr	r3, [r3, #0]
    2a1a:	7c1b      	ldrb	r3, [r3, #16]
    2a1c:	461a      	mov	r2, r3
    2a1e:	9b01      	ldr	r3, [sp, #4]
    2a20:	4293      	cmp	r3, r2
    2a22:	d3d6      	bcc.n	29d2 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2a24:	2300      	movs	r3, #0
    2a26:	9301      	str	r3, [sp, #4]
    2a28:	e02a      	b.n	2a80 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2a2a:	4b1e      	ldr	r3, [pc, #120]	; (2aa4 <Clock_Ip_DistributePll+0x15c>)
    2a2c:	6819      	ldr	r1, [r3, #0]
    2a2e:	9a01      	ldr	r2, [sp, #4]
    2a30:	4613      	mov	r3, r2
    2a32:	009b      	lsls	r3, r3, #2
    2a34:	4413      	add	r3, r2
    2a36:	009b      	lsls	r3, r3, #2
    2a38:	440b      	add	r3, r1
    2a3a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a3e:	681a      	ldr	r2, [r3, #0]
    2a40:	491a      	ldr	r1, [pc, #104]	; (2aac <Clock_Ip_DistributePll+0x164>)
    2a42:	4613      	mov	r3, r2
    2a44:	00db      	lsls	r3, r3, #3
    2a46:	4413      	add	r3, r2
    2a48:	440b      	add	r3, r1
    2a4a:	3301      	adds	r3, #1
    2a4c:	781b      	ldrb	r3, [r3, #0]
    2a4e:	461a      	mov	r2, r3
    2a50:	4b1c      	ldr	r3, [pc, #112]	; (2ac4 <Clock_Ip_DistributePll+0x17c>)
    2a52:	5c9b      	ldrb	r3, [r3, r2]
    2a54:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2a56:	4a1c      	ldr	r2, [pc, #112]	; (2ac8 <Clock_Ip_DistributePll+0x180>)
    2a58:	9b00      	ldr	r3, [sp, #0]
    2a5a:	011b      	lsls	r3, r3, #4
    2a5c:	4413      	add	r3, r2
    2a5e:	330c      	adds	r3, #12
    2a60:	6819      	ldr	r1, [r3, #0]
    2a62:	4b10      	ldr	r3, [pc, #64]	; (2aa4 <Clock_Ip_DistributePll+0x15c>)
    2a64:	6818      	ldr	r0, [r3, #0]
    2a66:	9a01      	ldr	r2, [sp, #4]
    2a68:	4613      	mov	r3, r2
    2a6a:	009b      	lsls	r3, r3, #2
    2a6c:	4413      	add	r3, r2
    2a6e:	009b      	lsls	r3, r3, #2
    2a70:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a74:	4403      	add	r3, r0
    2a76:	4618      	mov	r0, r3
    2a78:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2a7a:	9b01      	ldr	r3, [sp, #4]
    2a7c:	3301      	adds	r3, #1
    2a7e:	9301      	str	r3, [sp, #4]
    2a80:	4b08      	ldr	r3, [pc, #32]	; (2aa4 <Clock_Ip_DistributePll+0x15c>)
    2a82:	681b      	ldr	r3, [r3, #0]
    2a84:	7c9b      	ldrb	r3, [r3, #18]
    2a86:	461a      	mov	r2, r3
    2a88:	9b01      	ldr	r3, [sp, #4]
    2a8a:	4293      	cmp	r3, r2
    2a8c:	d3cd      	bcc.n	2a2a <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2a8e:	4b05      	ldr	r3, [pc, #20]	; (2aa4 <Clock_Ip_DistributePll+0x15c>)
    2a90:	681b      	ldr	r3, [r3, #0]
    2a92:	2104      	movs	r1, #4
    2a94:	4618      	mov	r0, r3
    2a96:	f002 fe0b 	bl	56b0 <Clock_Ip_Command>
        }
    }
}
    2a9a:	bf00      	nop
    2a9c:	b003      	add	sp, #12
    2a9e:	f85d fb04 	ldr.w	pc, [sp], #4
    2aa2:	bf00      	nop
    2aa4:	1fff8b38 	.word	0x1fff8b38
    2aa8:	0000f230 	.word	0x0000f230
    2aac:	0000ede4 	.word	0x0000ede4
    2ab0:	0000edb4 	.word	0x0000edb4
    2ab4:	0000f41c 	.word	0x0000f41c
    2ab8:	1fff8b40 	.word	0x1fff8b40
    2abc:	0000ed84 	.word	0x0000ed84
    2ac0:	0000f36c 	.word	0x0000f36c
    2ac4:	0000edd4 	.word	0x0000edd4
    2ac8:	0000f3e0 	.word	0x0000f3e0

00002acc <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2acc:	b500      	push	{lr}
    2ace:	b085      	sub	sp, #20
    2ad0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2ad2:	490c      	ldr	r1, [pc, #48]	; (2b04 <Clock_Ip_DisableClockMonitor+0x38>)
    2ad4:	9a01      	ldr	r2, [sp, #4]
    2ad6:	4613      	mov	r3, r2
    2ad8:	00db      	lsls	r3, r3, #3
    2ada:	4413      	add	r3, r2
    2adc:	440b      	add	r3, r1
    2ade:	3301      	adds	r3, #1
    2ae0:	781b      	ldrb	r3, [r3, #0]
    2ae2:	461a      	mov	r2, r3
    2ae4:	4b08      	ldr	r3, [pc, #32]	; (2b08 <Clock_Ip_DisableClockMonitor+0x3c>)
    2ae6:	5c9b      	ldrb	r3, [r3, r2]
    2ae8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2aea:	4a08      	ldr	r2, [pc, #32]	; (2b0c <Clock_Ip_DisableClockMonitor+0x40>)
    2aec:	9b03      	ldr	r3, [sp, #12]
    2aee:	011b      	lsls	r3, r3, #4
    2af0:	4413      	add	r3, r2
    2af2:	3308      	adds	r3, #8
    2af4:	681b      	ldr	r3, [r3, #0]
    2af6:	9801      	ldr	r0, [sp, #4]
    2af8:	4798      	blx	r3
}
    2afa:	bf00      	nop
    2afc:	b005      	add	sp, #20
    2afe:	f85d fb04 	ldr.w	pc, [sp], #4
    2b02:	bf00      	nop
    2b04:	0000ede4 	.word	0x0000ede4
    2b08:	0000edd4 	.word	0x0000edd4
    2b0c:	0000f3e0 	.word	0x0000f3e0

00002b10 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2b10:	b082      	sub	sp, #8
    2b12:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2b14:	4a02      	ldr	r2, [pc, #8]	; (2b20 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2b16:	9b01      	ldr	r3, [sp, #4]
    2b18:	6013      	str	r3, [r2, #0]
}
    2b1a:	bf00      	nop
    2b1c:	b002      	add	sp, #8
    2b1e:	4770      	bx	lr
    2b20:	1fff8b1c 	.word	0x1fff8b1c

00002b24 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2b24:	b500      	push	{lr}
    2b26:	b085      	sub	sp, #20
    2b28:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2b2a:	490c      	ldr	r1, [pc, #48]	; (2b5c <Clock_Ip_DisableModuleClock+0x38>)
    2b2c:	9a01      	ldr	r2, [sp, #4]
    2b2e:	4613      	mov	r3, r2
    2b30:	00db      	lsls	r3, r3, #3
    2b32:	4413      	add	r3, r2
    2b34:	440b      	add	r3, r1
    2b36:	3301      	adds	r3, #1
    2b38:	781b      	ldrb	r3, [r3, #0]
    2b3a:	461a      	mov	r2, r3
    2b3c:	4b08      	ldr	r3, [pc, #32]	; (2b60 <Clock_Ip_DisableModuleClock+0x3c>)
    2b3e:	5c9b      	ldrb	r3, [r3, r2]
    2b40:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2b42:	4a08      	ldr	r2, [pc, #32]	; (2b64 <Clock_Ip_DisableModuleClock+0x40>)
    2b44:	9b03      	ldr	r3, [sp, #12]
    2b46:	00db      	lsls	r3, r3, #3
    2b48:	4413      	add	r3, r2
    2b4a:	685b      	ldr	r3, [r3, #4]
    2b4c:	2101      	movs	r1, #1
    2b4e:	9801      	ldr	r0, [sp, #4]
    2b50:	4798      	blx	r3
}
    2b52:	bf00      	nop
    2b54:	b005      	add	sp, #20
    2b56:	f85d fb04 	ldr.w	pc, [sp], #4
    2b5a:	bf00      	nop
    2b5c:	0000ede4 	.word	0x0000ede4
    2b60:	0000ed84 	.word	0x0000ed84
    2b64:	0000f36c 	.word	0x0000f36c

00002b68 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2b68:	b500      	push	{lr}
    2b6a:	b085      	sub	sp, #20
    2b6c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2b6e:	490c      	ldr	r1, [pc, #48]	; (2ba0 <Clock_Ip_EnableModuleClock+0x38>)
    2b70:	9a01      	ldr	r2, [sp, #4]
    2b72:	4613      	mov	r3, r2
    2b74:	00db      	lsls	r3, r3, #3
    2b76:	4413      	add	r3, r2
    2b78:	440b      	add	r3, r1
    2b7a:	3301      	adds	r3, #1
    2b7c:	781b      	ldrb	r3, [r3, #0]
    2b7e:	461a      	mov	r2, r3
    2b80:	4b08      	ldr	r3, [pc, #32]	; (2ba4 <Clock_Ip_EnableModuleClock+0x3c>)
    2b82:	5c9b      	ldrb	r3, [r3, r2]
    2b84:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2b86:	4a08      	ldr	r2, [pc, #32]	; (2ba8 <Clock_Ip_EnableModuleClock+0x40>)
    2b88:	9b03      	ldr	r3, [sp, #12]
    2b8a:	00db      	lsls	r3, r3, #3
    2b8c:	4413      	add	r3, r2
    2b8e:	685b      	ldr	r3, [r3, #4]
    2b90:	2100      	movs	r1, #0
    2b92:	9801      	ldr	r0, [sp, #4]
    2b94:	4798      	blx	r3
}
    2b96:	bf00      	nop
    2b98:	b005      	add	sp, #20
    2b9a:	f85d fb04 	ldr.w	pc, [sp], #4
    2b9e:	bf00      	nop
    2ba0:	0000ede4 	.word	0x0000ede4
    2ba4:	0000ed84 	.word	0x0000ed84
    2ba8:	0000f36c 	.word	0x0000f36c

00002bac <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2bac:	b500      	push	{lr}
    2bae:	b083      	sub	sp, #12
    2bb0:	9001      	str	r0, [sp, #4]
    2bb2:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2bb4:	4b08      	ldr	r3, [pc, #32]	; (2bd8 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2bb6:	2200      	movs	r2, #0
    2bb8:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2bba:	4b08      	ldr	r3, [pc, #32]	; (2bdc <Clock_Ip_PowerModeChangeNotification+0x30>)
    2bbc:	681b      	ldr	r3, [r3, #0]
    2bbe:	2102      	movs	r1, #2
    2bc0:	4618      	mov	r0, r3
    2bc2:	f002 fd75 	bl	56b0 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2bc6:	9900      	ldr	r1, [sp, #0]
    2bc8:	9801      	ldr	r0, [sp, #4]
    2bca:	f002 fc51 	bl	5470 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2bce:	bf00      	nop
    2bd0:	b003      	add	sp, #12
    2bd2:	f85d fb04 	ldr.w	pc, [sp], #4
    2bd6:	bf00      	nop
    2bd8:	1fff8b18 	.word	0x1fff8b18
    2bdc:	1fff8b38 	.word	0x1fff8b38

00002be0 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2be0:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2be2:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2be6:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2be8:	4b06      	ldr	r3, [pc, #24]	; (2c04 <Clock_Ip_SetWaitStates+0x24>)
    2bea:	785b      	ldrb	r3, [r3, #1]
    2bec:	2b00      	cmp	r3, #0
    2bee:	d005      	beq.n	2bfc <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2bf0:	9b01      	ldr	r3, [sp, #4]
    2bf2:	3b01      	subs	r3, #1
    2bf4:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2bf6:	9b01      	ldr	r3, [sp, #4]
    2bf8:	2b00      	cmp	r3, #0
    2bfa:	d1f9      	bne.n	2bf0 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2bfc:	bf00      	nop
    2bfe:	b002      	add	sp, #8
    2c00:	4770      	bx	lr
    2c02:	bf00      	nop
    2c04:	1fff8b40 	.word	0x1fff8b40

00002c08 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2c08:	b500      	push	{lr}
    2c0a:	b083      	sub	sp, #12
    2c0c:	9001      	str	r0, [sp, #4]
    2c0e:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2c10:	4b04      	ldr	r3, [pc, #16]	; (2c24 <Clock_Ip_ReportClockErrors+0x1c>)
    2c12:	681b      	ldr	r3, [r3, #0]
    2c14:	9900      	ldr	r1, [sp, #0]
    2c16:	9801      	ldr	r0, [sp, #4]
    2c18:	4798      	blx	r3
}
    2c1a:	bf00      	nop
    2c1c:	b003      	add	sp, #12
    2c1e:	f85d fb04 	ldr.w	pc, [sp], #4
    2c22:	bf00      	nop
    2c24:	1fff8b1c 	.word	0x1fff8b1c

00002c28 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2c28:	b500      	push	{lr}
    2c2a:	b085      	sub	sp, #20
    2c2c:	9003      	str	r0, [sp, #12]
    2c2e:	9102      	str	r1, [sp, #8]
    2c30:	9201      	str	r2, [sp, #4]
    2c32:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2c34:	2000      	movs	r0, #0
    2c36:	f7fe ffd1 	bl	1bdc <OsIf_GetCounter>
    2c3a:	4602      	mov	r2, r0
    2c3c:	9b03      	ldr	r3, [sp, #12]
    2c3e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2c40:	9b02      	ldr	r3, [sp, #8]
    2c42:	2200      	movs	r2, #0
    2c44:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2c46:	2100      	movs	r1, #0
    2c48:	9800      	ldr	r0, [sp, #0]
    2c4a:	f7ff f813 	bl	1c74 <OsIf_MicrosToTicks>
    2c4e:	4602      	mov	r2, r0
    2c50:	9b01      	ldr	r3, [sp, #4]
    2c52:	601a      	str	r2, [r3, #0]
}
    2c54:	bf00      	nop
    2c56:	b005      	add	sp, #20
    2c58:	f85d fb04 	ldr.w	pc, [sp], #4

00002c5c <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2c5c:	b500      	push	{lr}
    2c5e:	b087      	sub	sp, #28
    2c60:	9003      	str	r0, [sp, #12]
    2c62:	9102      	str	r1, [sp, #8]
    2c64:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2c66:	2300      	movs	r3, #0
    2c68:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2c6c:	2100      	movs	r1, #0
    2c6e:	9803      	ldr	r0, [sp, #12]
    2c70:	f7fe ffcd 	bl	1c0e <OsIf_GetElapsed>
    2c74:	4602      	mov	r2, r0
    2c76:	9b02      	ldr	r3, [sp, #8]
    2c78:	681b      	ldr	r3, [r3, #0]
    2c7a:	441a      	add	r2, r3
    2c7c:	9b02      	ldr	r3, [sp, #8]
    2c7e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2c80:	9b02      	ldr	r3, [sp, #8]
    2c82:	681b      	ldr	r3, [r3, #0]
    2c84:	9a01      	ldr	r2, [sp, #4]
    2c86:	429a      	cmp	r2, r3
    2c88:	d802      	bhi.n	2c90 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2c8a:	2301      	movs	r3, #1
    2c8c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2c90:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2c94:	4618      	mov	r0, r3
    2c96:	b007      	add	sp, #28
    2c98:	f85d fb04 	ldr.w	pc, [sp], #4

00002c9c <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2c9c:	b082      	sub	sp, #8
    2c9e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2ca0:	bf00      	nop
    2ca2:	b002      	add	sp, #8
    2ca4:	4770      	bx	lr

00002ca6 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2ca6:	b500      	push	{lr}
    2ca8:	b083      	sub	sp, #12
    2caa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cac:	9b01      	ldr	r3, [sp, #4]
    2cae:	2b00      	cmp	r3, #0
    2cb0:	d002      	beq.n	2cb8 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2cb2:	9801      	ldr	r0, [sp, #4]
    2cb4:	f000 f8ad 	bl	2e12 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cb8:	bf00      	nop
    2cba:	b003      	add	sp, #12
    2cbc:	f85d fb04 	ldr.w	pc, [sp], #4

00002cc0 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2cc0:	b500      	push	{lr}
    2cc2:	b083      	sub	sp, #12
    2cc4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cc6:	9b01      	ldr	r3, [sp, #4]
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d002      	beq.n	2cd2 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2ccc:	9801      	ldr	r0, [sp, #4]
    2cce:	f000 f8cd 	bl	2e6c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cd2:	bf00      	nop
    2cd4:	b003      	add	sp, #12
    2cd6:	f85d fb04 	ldr.w	pc, [sp], #4

00002cda <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2cda:	b500      	push	{lr}
    2cdc:	b083      	sub	sp, #12
    2cde:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ce0:	9b01      	ldr	r3, [sp, #4]
    2ce2:	2b00      	cmp	r3, #0
    2ce4:	d002      	beq.n	2cec <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2ce6:	9801      	ldr	r0, [sp, #4]
    2ce8:	f000 f8ee 	bl	2ec8 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cec:	bf00      	nop
    2cee:	b003      	add	sp, #12
    2cf0:	f85d fb04 	ldr.w	pc, [sp], #4

00002cf4 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2cf4:	b500      	push	{lr}
    2cf6:	b083      	sub	sp, #12
    2cf8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cfa:	9b01      	ldr	r3, [sp, #4]
    2cfc:	2b00      	cmp	r3, #0
    2cfe:	d002      	beq.n	2d06 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2d00:	9801      	ldr	r0, [sp, #4]
    2d02:	f000 f8f9 	bl	2ef8 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d06:	bf00      	nop
    2d08:	b003      	add	sp, #12
    2d0a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d0e <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d0e:	b500      	push	{lr}
    2d10:	b083      	sub	sp, #12
    2d12:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d14:	9b01      	ldr	r3, [sp, #4]
    2d16:	2b00      	cmp	r3, #0
    2d18:	d002      	beq.n	2d20 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2d1a:	9801      	ldr	r0, [sp, #4]
    2d1c:	f000 f904 	bl	2f28 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d20:	bf00      	nop
    2d22:	b003      	add	sp, #12
    2d24:	f85d fb04 	ldr.w	pc, [sp], #4

00002d28 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2d28:	b500      	push	{lr}
    2d2a:	b083      	sub	sp, #12
    2d2c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d2e:	9b01      	ldr	r3, [sp, #4]
    2d30:	2b00      	cmp	r3, #0
    2d32:	d002      	beq.n	2d3a <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2d34:	9801      	ldr	r0, [sp, #4]
    2d36:	f000 f90f 	bl	2f58 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d3a:	bf00      	nop
    2d3c:	b003      	add	sp, #12
    2d3e:	f85d fb04 	ldr.w	pc, [sp], #4

00002d42 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2d42:	b500      	push	{lr}
    2d44:	b083      	sub	sp, #12
    2d46:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d48:	9b01      	ldr	r3, [sp, #4]
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d002      	beq.n	2d54 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2d4e:	9801      	ldr	r0, [sp, #4]
    2d50:	f000 f91a 	bl	2f88 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d54:	bf00      	nop
    2d56:	b003      	add	sp, #12
    2d58:	f85d fb04 	ldr.w	pc, [sp], #4

00002d5c <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d5c:	b500      	push	{lr}
    2d5e:	b083      	sub	sp, #12
    2d60:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d62:	9b01      	ldr	r3, [sp, #4]
    2d64:	2b00      	cmp	r3, #0
    2d66:	d002      	beq.n	2d6e <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2d68:	9801      	ldr	r0, [sp, #4]
    2d6a:	f000 f925 	bl	2fb8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d6e:	bf00      	nop
    2d70:	b003      	add	sp, #12
    2d72:	f85d fb04 	ldr.w	pc, [sp], #4

00002d76 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2d76:	b500      	push	{lr}
    2d78:	b083      	sub	sp, #12
    2d7a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d7c:	9b01      	ldr	r3, [sp, #4]
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d002      	beq.n	2d88 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2d82:	9801      	ldr	r0, [sp, #4]
    2d84:	f000 f930 	bl	2fe8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d88:	bf00      	nop
    2d8a:	b003      	add	sp, #12
    2d8c:	f85d fb04 	ldr.w	pc, [sp], #4

00002d90 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2d90:	b500      	push	{lr}
    2d92:	b083      	sub	sp, #12
    2d94:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d96:	9b01      	ldr	r3, [sp, #4]
    2d98:	2b00      	cmp	r3, #0
    2d9a:	d002      	beq.n	2da2 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2d9c:	9801      	ldr	r0, [sp, #4]
    2d9e:	f000 f93b 	bl	3018 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2da2:	bf00      	nop
    2da4:	b003      	add	sp, #12
    2da6:	f85d fb04 	ldr.w	pc, [sp], #4

00002daa <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2daa:	b500      	push	{lr}
    2dac:	b083      	sub	sp, #12
    2dae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2db0:	9b01      	ldr	r3, [sp, #4]
    2db2:	2b00      	cmp	r3, #0
    2db4:	d002      	beq.n	2dbc <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2db6:	9801      	ldr	r0, [sp, #4]
    2db8:	f000 f946 	bl	3048 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dbc:	bf00      	nop
    2dbe:	b003      	add	sp, #12
    2dc0:	f85d fb04 	ldr.w	pc, [sp], #4

00002dc4 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2dc4:	b500      	push	{lr}
    2dc6:	b083      	sub	sp, #12
    2dc8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dca:	9b01      	ldr	r3, [sp, #4]
    2dcc:	2b00      	cmp	r3, #0
    2dce:	d002      	beq.n	2dd6 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2dd0:	9801      	ldr	r0, [sp, #4]
    2dd2:	f000 f951 	bl	3078 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dd6:	bf00      	nop
    2dd8:	b003      	add	sp, #12
    2dda:	f85d fb04 	ldr.w	pc, [sp], #4

00002dde <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2dde:	b500      	push	{lr}
    2de0:	b083      	sub	sp, #12
    2de2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2de4:	9b01      	ldr	r3, [sp, #4]
    2de6:	2b00      	cmp	r3, #0
    2de8:	d002      	beq.n	2df0 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2dea:	9801      	ldr	r0, [sp, #4]
    2dec:	f000 f95e 	bl	30ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2df0:	bf00      	nop
    2df2:	b003      	add	sp, #12
    2df4:	f85d fb04 	ldr.w	pc, [sp], #4

00002df8 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2df8:	b500      	push	{lr}
    2dfa:	b083      	sub	sp, #12
    2dfc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dfe:	9b01      	ldr	r3, [sp, #4]
    2e00:	2b00      	cmp	r3, #0
    2e02:	d002      	beq.n	2e0a <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2e04:	9801      	ldr	r0, [sp, #4]
    2e06:	f000 f98b 	bl	3120 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2e0a:	bf00      	nop
    2e0c:	b003      	add	sp, #12
    2e0e:	f85d fb04 	ldr.w	pc, [sp], #4

00002e12 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e12:	b086      	sub	sp, #24
    2e14:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2e16:	9b01      	ldr	r3, [sp, #4]
    2e18:	681a      	ldr	r2, [r3, #0]
    2e1a:	4911      	ldr	r1, [pc, #68]	; (2e60 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2e1c:	4613      	mov	r3, r2
    2e1e:	00db      	lsls	r3, r3, #3
    2e20:	4413      	add	r3, r2
    2e22:	440b      	add	r3, r1
    2e24:	781b      	ldrb	r3, [r3, #0]
    2e26:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2e28:	9b01      	ldr	r3, [sp, #4]
    2e2a:	685b      	ldr	r3, [r3, #4]
    2e2c:	4a0d      	ldr	r2, [pc, #52]	; (2e64 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2e2e:	5cd3      	ldrb	r3, [r2, r3]
    2e30:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2e32:	4a0d      	ldr	r2, [pc, #52]	; (2e68 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2e34:	9b05      	ldr	r3, [sp, #20]
    2e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e3a:	681b      	ldr	r3, [r3, #0]
    2e3c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2e3e:	9b03      	ldr	r3, [sp, #12]
    2e40:	f023 0307 	bic.w	r3, r3, #7
    2e44:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2e46:	9a03      	ldr	r2, [sp, #12]
    2e48:	9b04      	ldr	r3, [sp, #16]
    2e4a:	4313      	orrs	r3, r2
    2e4c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2e4e:	4a06      	ldr	r2, [pc, #24]	; (2e68 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2e50:	9b05      	ldr	r3, [sp, #20]
    2e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e56:	9a03      	ldr	r2, [sp, #12]
    2e58:	601a      	str	r2, [r3, #0]
}
    2e5a:	bf00      	nop
    2e5c:	b006      	add	sp, #24
    2e5e:	4770      	bx	lr
    2e60:	0000ede4 	.word	0x0000ede4
    2e64:	0000f1dc 	.word	0x0000f1dc
    2e68:	0000f220 	.word	0x0000f220

00002e6c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e6c:	b086      	sub	sp, #24
    2e6e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2e70:	9b01      	ldr	r3, [sp, #4]
    2e72:	681a      	ldr	r2, [r3, #0]
    2e74:	4911      	ldr	r1, [pc, #68]	; (2ebc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2e76:	4613      	mov	r3, r2
    2e78:	00db      	lsls	r3, r3, #3
    2e7a:	4413      	add	r3, r2
    2e7c:	440b      	add	r3, r1
    2e7e:	781b      	ldrb	r3, [r3, #0]
    2e80:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2e82:	9b01      	ldr	r3, [sp, #4]
    2e84:	685b      	ldr	r3, [r3, #4]
    2e86:	4a0e      	ldr	r2, [pc, #56]	; (2ec0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2e88:	5cd3      	ldrb	r3, [r2, r3]
    2e8a:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2e8c:	4a0d      	ldr	r2, [pc, #52]	; (2ec4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e8e:	9b05      	ldr	r3, [sp, #20]
    2e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e94:	681b      	ldr	r3, [r3, #0]
    2e96:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2e98:	9b03      	ldr	r3, [sp, #12]
    2e9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2e9e:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2ea0:	9b04      	ldr	r3, [sp, #16]
    2ea2:	021b      	lsls	r3, r3, #8
    2ea4:	9a03      	ldr	r2, [sp, #12]
    2ea6:	4313      	orrs	r3, r2
    2ea8:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2eaa:	4a06      	ldr	r2, [pc, #24]	; (2ec4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2eac:	9b05      	ldr	r3, [sp, #20]
    2eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2eb2:	9a03      	ldr	r2, [sp, #12]
    2eb4:	601a      	str	r2, [r3, #0]
}
    2eb6:	bf00      	nop
    2eb8:	b006      	add	sp, #24
    2eba:	4770      	bx	lr
    2ebc:	0000ede4 	.word	0x0000ede4
    2ec0:	0000f1dc 	.word	0x0000f1dc
    2ec4:	0000f220 	.word	0x0000f220

00002ec8 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ec8:	b084      	sub	sp, #16
    2eca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2ecc:	4b09      	ldr	r3, [pc, #36]	; (2ef4 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2ece:	695b      	ldr	r3, [r3, #20]
    2ed0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2ed2:	9b03      	ldr	r3, [sp, #12]
    2ed4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2ed8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2eda:	9b01      	ldr	r3, [sp, #4]
    2edc:	685b      	ldr	r3, [r3, #4]
    2ede:	3b01      	subs	r3, #1
    2ee0:	041b      	lsls	r3, r3, #16
    2ee2:	9a03      	ldr	r2, [sp, #12]
    2ee4:	4313      	orrs	r3, r2
    2ee6:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2ee8:	4a02      	ldr	r2, [pc, #8]	; (2ef4 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2eea:	9b03      	ldr	r3, [sp, #12]
    2eec:	6153      	str	r3, [r2, #20]
}
    2eee:	bf00      	nop
    2ef0:	b004      	add	sp, #16
    2ef2:	4770      	bx	lr
    2ef4:	40064000 	.word	0x40064000

00002ef8 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ef8:	b084      	sub	sp, #16
    2efa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2efc:	4b09      	ldr	r3, [pc, #36]	; (2f24 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2efe:	695b      	ldr	r3, [r3, #20]
    2f00:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2f02:	9b03      	ldr	r3, [sp, #12]
    2f04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f08:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2f0a:	9b01      	ldr	r3, [sp, #4]
    2f0c:	685b      	ldr	r3, [r3, #4]
    2f0e:	3b01      	subs	r3, #1
    2f10:	011b      	lsls	r3, r3, #4
    2f12:	9a03      	ldr	r2, [sp, #12]
    2f14:	4313      	orrs	r3, r2
    2f16:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2f18:	4a02      	ldr	r2, [pc, #8]	; (2f24 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2f1a:	9b03      	ldr	r3, [sp, #12]
    2f1c:	6153      	str	r3, [r2, #20]
}
    2f1e:	bf00      	nop
    2f20:	b004      	add	sp, #16
    2f22:	4770      	bx	lr
    2f24:	40064000 	.word	0x40064000

00002f28 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f28:	b084      	sub	sp, #16
    2f2a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2f2c:	4b09      	ldr	r3, [pc, #36]	; (2f54 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2f2e:	695b      	ldr	r3, [r3, #20]
    2f30:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2f32:	9b03      	ldr	r3, [sp, #12]
    2f34:	f023 030f 	bic.w	r3, r3, #15
    2f38:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2f3a:	9b01      	ldr	r3, [sp, #4]
    2f3c:	685b      	ldr	r3, [r3, #4]
    2f3e:	3b01      	subs	r3, #1
    2f40:	9a03      	ldr	r2, [sp, #12]
    2f42:	4313      	orrs	r3, r2
    2f44:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2f46:	4a03      	ldr	r2, [pc, #12]	; (2f54 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2f48:	9b03      	ldr	r3, [sp, #12]
    2f4a:	6153      	str	r3, [r2, #20]
}
    2f4c:	bf00      	nop
    2f4e:	b004      	add	sp, #16
    2f50:	4770      	bx	lr
    2f52:	bf00      	nop
    2f54:	40064000 	.word	0x40064000

00002f58 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f58:	b084      	sub	sp, #16
    2f5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f5c:	4b09      	ldr	r3, [pc, #36]	; (2f84 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f5e:	699b      	ldr	r3, [r3, #24]
    2f60:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2f62:	9b03      	ldr	r3, [sp, #12]
    2f64:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2f68:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2f6a:	9b01      	ldr	r3, [sp, #4]
    2f6c:	685b      	ldr	r3, [r3, #4]
    2f6e:	3b01      	subs	r3, #1
    2f70:	041b      	lsls	r3, r3, #16
    2f72:	9a03      	ldr	r2, [sp, #12]
    2f74:	4313      	orrs	r3, r2
    2f76:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f78:	4a02      	ldr	r2, [pc, #8]	; (2f84 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f7a:	9b03      	ldr	r3, [sp, #12]
    2f7c:	6193      	str	r3, [r2, #24]
}
    2f7e:	bf00      	nop
    2f80:	b004      	add	sp, #16
    2f82:	4770      	bx	lr
    2f84:	40064000 	.word	0x40064000

00002f88 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f88:	b084      	sub	sp, #16
    2f8a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f8c:	4b09      	ldr	r3, [pc, #36]	; (2fb4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f8e:	699b      	ldr	r3, [r3, #24]
    2f90:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2f92:	9b03      	ldr	r3, [sp, #12]
    2f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f98:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2f9a:	9b01      	ldr	r3, [sp, #4]
    2f9c:	685b      	ldr	r3, [r3, #4]
    2f9e:	3b01      	subs	r3, #1
    2fa0:	011b      	lsls	r3, r3, #4
    2fa2:	9a03      	ldr	r2, [sp, #12]
    2fa4:	4313      	orrs	r3, r2
    2fa6:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2fa8:	4a02      	ldr	r2, [pc, #8]	; (2fb4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2faa:	9b03      	ldr	r3, [sp, #12]
    2fac:	6193      	str	r3, [r2, #24]
}
    2fae:	bf00      	nop
    2fb0:	b004      	add	sp, #16
    2fb2:	4770      	bx	lr
    2fb4:	40064000 	.word	0x40064000

00002fb8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fb8:	b084      	sub	sp, #16
    2fba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2fbc:	4b09      	ldr	r3, [pc, #36]	; (2fe4 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2fbe:	699b      	ldr	r3, [r3, #24]
    2fc0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2fc2:	9b03      	ldr	r3, [sp, #12]
    2fc4:	f023 030f 	bic.w	r3, r3, #15
    2fc8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2fca:	9b01      	ldr	r3, [sp, #4]
    2fcc:	685b      	ldr	r3, [r3, #4]
    2fce:	3b01      	subs	r3, #1
    2fd0:	9a03      	ldr	r2, [sp, #12]
    2fd2:	4313      	orrs	r3, r2
    2fd4:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2fd6:	4a03      	ldr	r2, [pc, #12]	; (2fe4 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2fd8:	9b03      	ldr	r3, [sp, #12]
    2fda:	6193      	str	r3, [r2, #24]
}
    2fdc:	bf00      	nop
    2fde:	b004      	add	sp, #16
    2fe0:	4770      	bx	lr
    2fe2:	bf00      	nop
    2fe4:	40064000 	.word	0x40064000

00002fe8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fe8:	b084      	sub	sp, #16
    2fea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2fec:	4b09      	ldr	r3, [pc, #36]	; (3014 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2fee:	69db      	ldr	r3, [r3, #28]
    2ff0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2ff2:	9b03      	ldr	r3, [sp, #12]
    2ff4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2ff8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2ffa:	9b01      	ldr	r3, [sp, #4]
    2ffc:	685b      	ldr	r3, [r3, #4]
    2ffe:	3b01      	subs	r3, #1
    3000:	041b      	lsls	r3, r3, #16
    3002:	9a03      	ldr	r2, [sp, #12]
    3004:	4313      	orrs	r3, r2
    3006:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3008:	4a02      	ldr	r2, [pc, #8]	; (3014 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    300a:	9b03      	ldr	r3, [sp, #12]
    300c:	61d3      	str	r3, [r2, #28]
}
    300e:	bf00      	nop
    3010:	b004      	add	sp, #16
    3012:	4770      	bx	lr
    3014:	40064000 	.word	0x40064000

00003018 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3018:	b084      	sub	sp, #16
    301a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    301c:	4b09      	ldr	r3, [pc, #36]	; (3044 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    301e:	69db      	ldr	r3, [r3, #28]
    3020:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    3022:	9b03      	ldr	r3, [sp, #12]
    3024:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3028:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    302a:	9b01      	ldr	r3, [sp, #4]
    302c:	685b      	ldr	r3, [r3, #4]
    302e:	3b01      	subs	r3, #1
    3030:	011b      	lsls	r3, r3, #4
    3032:	9a03      	ldr	r2, [sp, #12]
    3034:	4313      	orrs	r3, r2
    3036:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3038:	4a02      	ldr	r2, [pc, #8]	; (3044 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    303a:	9b03      	ldr	r3, [sp, #12]
    303c:	61d3      	str	r3, [r2, #28]
}
    303e:	bf00      	nop
    3040:	b004      	add	sp, #16
    3042:	4770      	bx	lr
    3044:	40064000 	.word	0x40064000

00003048 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3048:	b084      	sub	sp, #16
    304a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    304c:	4b09      	ldr	r3, [pc, #36]	; (3074 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    304e:	69db      	ldr	r3, [r3, #28]
    3050:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3052:	9b03      	ldr	r3, [sp, #12]
    3054:	f023 030f 	bic.w	r3, r3, #15
    3058:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    305a:	9b01      	ldr	r3, [sp, #4]
    305c:	685b      	ldr	r3, [r3, #4]
    305e:	3b01      	subs	r3, #1
    3060:	9a03      	ldr	r2, [sp, #12]
    3062:	4313      	orrs	r3, r2
    3064:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3066:	4a03      	ldr	r2, [pc, #12]	; (3074 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3068:	9b03      	ldr	r3, [sp, #12]
    306a:	61d3      	str	r3, [r2, #28]
}
    306c:	bf00      	nop
    306e:	b004      	add	sp, #16
    3070:	4770      	bx	lr
    3072:	bf00      	nop
    3074:	40064000 	.word	0x40064000

00003078 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3078:	b084      	sub	sp, #16
    307a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    307c:	4b0a      	ldr	r3, [pc, #40]	; (30a8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    307e:	685b      	ldr	r3, [r3, #4]
    3080:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3082:	9b03      	ldr	r3, [sp, #12]
    3084:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3088:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    308a:	9b01      	ldr	r3, [sp, #4]
    308c:	685b      	ldr	r3, [r3, #4]
    308e:	3b01      	subs	r3, #1
    3090:	021b      	lsls	r3, r3, #8
    3092:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3096:	9a03      	ldr	r2, [sp, #12]
    3098:	4313      	orrs	r3, r2
    309a:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    309c:	4a02      	ldr	r2, [pc, #8]	; (30a8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    309e:	9b03      	ldr	r3, [sp, #12]
    30a0:	6053      	str	r3, [r2, #4]
}
    30a2:	bf00      	nop
    30a4:	b004      	add	sp, #16
    30a6:	4770      	bx	lr
    30a8:	40048000 	.word	0x40048000

000030ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30ac:	b084      	sub	sp, #16
    30ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    30b0:	4919      	ldr	r1, [pc, #100]	; (3118 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    30b2:	9b01      	ldr	r3, [sp, #4]
    30b4:	681a      	ldr	r2, [r3, #0]
    30b6:	4819      	ldr	r0, [pc, #100]	; (311c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    30b8:	4613      	mov	r3, r2
    30ba:	00db      	lsls	r3, r3, #3
    30bc:	4413      	add	r3, r2
    30be:	4403      	add	r3, r0
    30c0:	3305      	adds	r3, #5
    30c2:	781b      	ldrb	r3, [r3, #0]
    30c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    30c8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    30ca:	9b03      	ldr	r3, [sp, #12]
    30cc:	f023 030f 	bic.w	r3, r3, #15
    30d0:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    30d2:	9b01      	ldr	r3, [sp, #4]
    30d4:	685b      	ldr	r3, [r3, #4]
    30d6:	3b01      	subs	r3, #1
    30d8:	f003 0307 	and.w	r3, r3, #7
    30dc:	9a03      	ldr	r2, [sp, #12]
    30de:	4313      	orrs	r3, r2
    30e0:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    30e2:	9b01      	ldr	r3, [sp, #4]
    30e4:	7a1b      	ldrb	r3, [r3, #8]
    30e6:	3b01      	subs	r3, #1
    30e8:	00db      	lsls	r3, r3, #3
    30ea:	f003 0308 	and.w	r3, r3, #8
    30ee:	9a03      	ldr	r2, [sp, #12]
    30f0:	4313      	orrs	r3, r2
    30f2:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    30f4:	4908      	ldr	r1, [pc, #32]	; (3118 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    30f6:	9b01      	ldr	r3, [sp, #4]
    30f8:	681a      	ldr	r2, [r3, #0]
    30fa:	4808      	ldr	r0, [pc, #32]	; (311c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    30fc:	4613      	mov	r3, r2
    30fe:	00db      	lsls	r3, r3, #3
    3100:	4413      	add	r3, r2
    3102:	4403      	add	r3, r0
    3104:	3305      	adds	r3, #5
    3106:	781b      	ldrb	r3, [r3, #0]
    3108:	461a      	mov	r2, r3
    310a:	9b03      	ldr	r3, [sp, #12]
    310c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3110:	bf00      	nop
    3112:	b004      	add	sp, #16
    3114:	4770      	bx	lr
    3116:	bf00      	nop
    3118:	40065000 	.word	0x40065000
    311c:	0000ede4 	.word	0x0000ede4

00003120 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3120:	b084      	sub	sp, #16
    3122:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3124:	4b10      	ldr	r3, [pc, #64]	; (3168 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3128:	4a0f      	ldr	r2, [pc, #60]	; (3168 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    312a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    312e:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3130:	4b0d      	ldr	r3, [pc, #52]	; (3168 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3134:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3136:	9b03      	ldr	r3, [sp, #12]
    3138:	f023 030f 	bic.w	r3, r3, #15
    313c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    313e:	9b01      	ldr	r3, [sp, #4]
    3140:	685b      	ldr	r3, [r3, #4]
    3142:	3b01      	subs	r3, #1
    3144:	005b      	lsls	r3, r3, #1
    3146:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    314a:	9b01      	ldr	r3, [sp, #4]
    314c:	7a1b      	ldrb	r3, [r3, #8]
    314e:	3b01      	subs	r3, #1
    3150:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3154:	4313      	orrs	r3, r2
    3156:	9a03      	ldr	r2, [sp, #12]
    3158:	4313      	orrs	r3, r2
    315a:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    315c:	4a02      	ldr	r2, [pc, #8]	; (3168 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    315e:	9b03      	ldr	r3, [sp, #12]
    3160:	6693      	str	r3, [r2, #104]	; 0x68
}
    3162:	bf00      	nop
    3164:	b004      	add	sp, #16
    3166:	4770      	bx	lr
    3168:	40048000 	.word	0x40048000

0000316c <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    316c:	b082      	sub	sp, #8
    316e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3170:	bf00      	nop
    3172:	b002      	add	sp, #8
    3174:	4770      	bx	lr
	...

00003178 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3178:	b082      	sub	sp, #8
    317a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    317c:	bf00      	nop
    317e:	b002      	add	sp, #8
    3180:	4770      	bx	lr

00003182 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3182:	b082      	sub	sp, #8
    3184:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3186:	bf00      	nop
    3188:	b002      	add	sp, #8
    318a:	4770      	bx	lr

0000318c <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    318c:	b500      	push	{lr}
    318e:	b083      	sub	sp, #12
    3190:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3192:	9b01      	ldr	r3, [sp, #4]
    3194:	2b00      	cmp	r3, #0
    3196:	d002      	beq.n	319e <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3198:	9801      	ldr	r0, [sp, #4]
    319a:	f000 f86a 	bl	3272 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    319e:	bf00      	nop
    31a0:	b003      	add	sp, #12
    31a2:	f85d fb04 	ldr.w	pc, [sp], #4

000031a6 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    31a6:	b500      	push	{lr}
    31a8:	b083      	sub	sp, #12
    31aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31ac:	9b01      	ldr	r3, [sp, #4]
    31ae:	2b00      	cmp	r3, #0
    31b0:	d002      	beq.n	31b8 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    31b2:	9801      	ldr	r0, [sp, #4]
    31b4:	f000 f884 	bl	32c0 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    31b8:	bf00      	nop
    31ba:	b003      	add	sp, #12
    31bc:	f85d fb04 	ldr.w	pc, [sp], #4

000031c0 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    31c0:	b500      	push	{lr}
    31c2:	b089      	sub	sp, #36	; 0x24
    31c4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    31c6:	2300      	movs	r3, #0
    31c8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    31cc:	9b01      	ldr	r3, [sp, #4]
    31ce:	2b00      	cmp	r3, #0
    31d0:	d031      	beq.n	3236 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    31d2:	4b1b      	ldr	r3, [pc, #108]	; (3240 <Clock_Ip_CompleteSOSC+0x80>)
    31d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31d8:	f003 0301 	and.w	r3, r3, #1
    31dc:	2b00      	cmp	r3, #0
    31de:	d02a      	beq.n	3236 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    31e0:	aa03      	add	r2, sp, #12
    31e2:	a904      	add	r1, sp, #16
    31e4:	a805      	add	r0, sp, #20
    31e6:	f24c 3350 	movw	r3, #50000	; 0xc350
    31ea:	f7ff fd1d 	bl	2c28 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    31ee:	4b14      	ldr	r3, [pc, #80]	; (3240 <Clock_Ip_CompleteSOSC+0x80>)
    31f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31f4:	0e1b      	lsrs	r3, r3, #24
    31f6:	f003 0301 	and.w	r3, r3, #1
    31fa:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    31fc:	9a03      	ldr	r2, [sp, #12]
    31fe:	a904      	add	r1, sp, #16
    3200:	ab05      	add	r3, sp, #20
    3202:	4618      	mov	r0, r3
    3204:	f7ff fd2a 	bl	2c5c <Clock_Ip_TimeoutExpired>
    3208:	4603      	mov	r3, r0
    320a:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    320e:	9b06      	ldr	r3, [sp, #24]
    3210:	2b00      	cmp	r3, #0
    3212:	d106      	bne.n	3222 <Clock_Ip_CompleteSOSC+0x62>
    3214:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3218:	f083 0301 	eor.w	r3, r3, #1
    321c:	b2db      	uxtb	r3, r3
    321e:	2b00      	cmp	r3, #0
    3220:	d1e5      	bne.n	31ee <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3222:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3226:	2b00      	cmp	r3, #0
    3228:	d005      	beq.n	3236 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    322a:	9b01      	ldr	r3, [sp, #4]
    322c:	681b      	ldr	r3, [r3, #0]
    322e:	4619      	mov	r1, r3
    3230:	2001      	movs	r0, #1
    3232:	f7ff fce9 	bl	2c08 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3236:	bf00      	nop
    3238:	b009      	add	sp, #36	; 0x24
    323a:	f85d fb04 	ldr.w	pc, [sp], #4
    323e:	bf00      	nop
    3240:	40064000 	.word	0x40064000

00003244 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3244:	b500      	push	{lr}
    3246:	b083      	sub	sp, #12
    3248:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    324a:	9801      	ldr	r0, [sp, #4]
    324c:	f000 f8c0 	bl	33d0 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3250:	bf00      	nop
    3252:	b003      	add	sp, #12
    3254:	f85d fb04 	ldr.w	pc, [sp], #4

00003258 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3258:	b500      	push	{lr}
    325a:	b083      	sub	sp, #12
    325c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    325e:	9b01      	ldr	r3, [sp, #4]
    3260:	2b00      	cmp	r3, #0
    3262:	d002      	beq.n	326a <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3264:	9801      	ldr	r0, [sp, #4]
    3266:	f000 f8c3 	bl	33f0 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    326a:	bf00      	nop
    326c:	b003      	add	sp, #12
    326e:	f85d fb04 	ldr.w	pc, [sp], #4

00003272 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3272:	b082      	sub	sp, #8
    3274:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3276:	4b11      	ldr	r3, [pc, #68]	; (32bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3278:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    327c:	4a0f      	ldr	r2, [pc, #60]	; (32bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    327e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3282:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3286:	4b0d      	ldr	r3, [pc, #52]	; (32bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3288:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    328c:	4a0b      	ldr	r2, [pc, #44]	; (32bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    328e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3292:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3296:	4b09      	ldr	r3, [pc, #36]	; (32bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3298:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    329c:	4a07      	ldr	r2, [pc, #28]	; (32bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    329e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    32a2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    32a6:	4b05      	ldr	r3, [pc, #20]	; (32bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    32a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    32ac:	4a03      	ldr	r2, [pc, #12]	; (32bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    32ae:	f023 0301 	bic.w	r3, r3, #1
    32b2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    32b6:	bf00      	nop
    32b8:	b002      	add	sp, #8
    32ba:	4770      	bx	lr
    32bc:	40064000 	.word	0x40064000

000032c0 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    32c0:	b082      	sub	sp, #8
    32c2:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    32c4:	9b01      	ldr	r3, [sp, #4]
    32c6:	891b      	ldrh	r3, [r3, #8]
    32c8:	2b01      	cmp	r3, #1
    32ca:	d174      	bne.n	33b6 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    32cc:	9b01      	ldr	r3, [sp, #4]
    32ce:	7bdb      	ldrb	r3, [r3, #15]
    32d0:	2b00      	cmp	r3, #0
    32d2:	d002      	beq.n	32da <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    32d4:	2b01      	cmp	r3, #1
    32d6:	d009      	beq.n	32ec <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    32d8:	e011      	b.n	32fe <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    32da:	4b39      	ldr	r3, [pc, #228]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32e0:	4a37      	ldr	r2, [pc, #220]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32e2:	f023 0308 	bic.w	r3, r3, #8
    32e6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    32ea:	e008      	b.n	32fe <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    32ec:	4b34      	ldr	r3, [pc, #208]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32f2:	4a33      	ldr	r2, [pc, #204]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32f4:	f043 0308 	orr.w	r3, r3, #8
    32f8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    32fc:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    32fe:	4b30      	ldr	r3, [pc, #192]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3300:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3304:	4a2e      	ldr	r2, [pc, #184]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3306:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    330a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    330e:	9b01      	ldr	r3, [sp, #4]
    3310:	685b      	ldr	r3, [r3, #4]
    3312:	4a2c      	ldr	r2, [pc, #176]	; (33c4 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3314:	4293      	cmp	r3, r2
    3316:	d90d      	bls.n	3334 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3318:	9b01      	ldr	r3, [sp, #4]
    331a:	685b      	ldr	r3, [r3, #4]
    331c:	4a2a      	ldr	r2, [pc, #168]	; (33c8 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    331e:	4293      	cmp	r3, r2
    3320:	d208      	bcs.n	3334 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    3322:	4b27      	ldr	r3, [pc, #156]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3324:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3328:	4a25      	ldr	r2, [pc, #148]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    332a:	f043 0320 	orr.w	r3, r3, #32
    332e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3332:	e007      	b.n	3344 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3334:	4b22      	ldr	r3, [pc, #136]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3336:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    333a:	4a21      	ldr	r2, [pc, #132]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    333c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3340:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3344:	9b01      	ldr	r3, [sp, #4]
    3346:	7b1b      	ldrb	r3, [r3, #12]
    3348:	2b00      	cmp	r3, #0
    334a:	d108      	bne.n	335e <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    334c:	4b1c      	ldr	r3, [pc, #112]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    334e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3352:	4a1b      	ldr	r2, [pc, #108]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3354:	f043 0304 	orr.w	r3, r3, #4
    3358:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    335c:	e007      	b.n	336e <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    335e:	4b18      	ldr	r3, [pc, #96]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3360:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3364:	4a16      	ldr	r2, [pc, #88]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3366:	f023 0304 	bic.w	r3, r3, #4
    336a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    336e:	9b01      	ldr	r3, [sp, #4]
    3370:	7c1b      	ldrb	r3, [r3, #16]
    3372:	2b02      	cmp	r3, #2
    3374:	d011      	beq.n	339a <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3376:	2b02      	cmp	r3, #2
    3378:	dc14      	bgt.n	33a4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    337a:	2b00      	cmp	r3, #0
    337c:	d002      	beq.n	3384 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    337e:	2b01      	cmp	r3, #1
    3380:	d005      	beq.n	338e <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3382:	e00f      	b.n	33a4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3384:	4b0e      	ldr	r3, [pc, #56]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3386:	2201      	movs	r2, #1
    3388:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    338c:	e014      	b.n	33b8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    338e:	4b0c      	ldr	r3, [pc, #48]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3390:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3394:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3398:	e00e      	b.n	33b8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    339a:	4b09      	ldr	r3, [pc, #36]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    339c:	4a0b      	ldr	r2, [pc, #44]	; (33cc <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    339e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    33a2:	e009      	b.n	33b8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    33a4:	4b06      	ldr	r3, [pc, #24]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    33a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33aa:	4a05      	ldr	r2, [pc, #20]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    33ac:	f043 0301 	orr.w	r3, r3, #1
    33b0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    33b4:	e000      	b.n	33b8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    33b6:	bf00      	nop
}
    33b8:	bf00      	nop
    33ba:	b002      	add	sp, #8
    33bc:	4770      	bx	lr
    33be:	bf00      	nop
    33c0:	40064000 	.word	0x40064000
    33c4:	003d08ff 	.word	0x003d08ff
    33c8:	007a1200 	.word	0x007a1200
    33cc:	00030001 	.word	0x00030001

000033d0 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    33d0:	b082      	sub	sp, #8
    33d2:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    33d4:	4b05      	ldr	r3, [pc, #20]	; (33ec <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    33d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33da:	4a04      	ldr	r2, [pc, #16]	; (33ec <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    33dc:	f023 0301 	bic.w	r3, r3, #1
    33e0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    33e4:	bf00      	nop
    33e6:	b002      	add	sp, #8
    33e8:	4770      	bx	lr
    33ea:	bf00      	nop
    33ec:	40064000 	.word	0x40064000

000033f0 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    33f0:	b082      	sub	sp, #8
    33f2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    33f4:	9b01      	ldr	r3, [sp, #4]
    33f6:	891b      	ldrh	r3, [r3, #8]
    33f8:	2b01      	cmp	r3, #1
    33fa:	d107      	bne.n	340c <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    33fc:	4b05      	ldr	r3, [pc, #20]	; (3414 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    33fe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3402:	4a04      	ldr	r2, [pc, #16]	; (3414 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3404:	f043 0301 	orr.w	r3, r3, #1
    3408:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    340c:	bf00      	nop
    340e:	b002      	add	sp, #8
    3410:	4770      	bx	lr
    3412:	bf00      	nop
    3414:	40064000 	.word	0x40064000

00003418 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3418:	b082      	sub	sp, #8
    341a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    341c:	bf00      	nop
    341e:	b002      	add	sp, #8
    3420:	4770      	bx	lr

00003422 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    3422:	b082      	sub	sp, #8
    3424:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3426:	2300      	movs	r3, #0
}
    3428:	4618      	mov	r0, r3
    342a:	b002      	add	sp, #8
    342c:	4770      	bx	lr

0000342e <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    342e:	b082      	sub	sp, #8
    3430:	9001      	str	r0, [sp, #4]
    3432:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3434:	bf00      	nop
    3436:	b002      	add	sp, #8
    3438:	4770      	bx	lr
	...

0000343c <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    343c:	b082      	sub	sp, #8
    343e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3440:	bf00      	nop
    3442:	b002      	add	sp, #8
    3444:	4770      	bx	lr

00003446 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3446:	b082      	sub	sp, #8
    3448:	9001      	str	r0, [sp, #4]
    344a:	460b      	mov	r3, r1
    344c:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3450:	bf00      	nop
    3452:	b002      	add	sp, #8
    3454:	4770      	bx	lr

00003456 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3456:	b500      	push	{lr}
    3458:	b083      	sub	sp, #12
    345a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    345c:	9b01      	ldr	r3, [sp, #4]
    345e:	2b00      	cmp	r3, #0
    3460:	d002      	beq.n	3468 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    3462:	9801      	ldr	r0, [sp, #4]
    3464:	f000 f8e7 	bl	3636 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3468:	bf00      	nop
    346a:	b003      	add	sp, #12
    346c:	f85d fb04 	ldr.w	pc, [sp], #4

00003470 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3470:	b500      	push	{lr}
    3472:	b085      	sub	sp, #20
    3474:	9001      	str	r0, [sp, #4]
    3476:	460b      	mov	r3, r1
    3478:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    347c:	9b01      	ldr	r3, [sp, #4]
    347e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3480:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3484:	2b00      	cmp	r3, #0
    3486:	d003      	beq.n	3490 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3488:	2300      	movs	r3, #0
    348a:	f8ad 300c 	strh.w	r3, [sp, #12]
    348e:	e002      	b.n	3496 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3490:	2301      	movs	r3, #1
    3492:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    3496:	ab02      	add	r3, sp, #8
    3498:	4618      	mov	r0, r3
    349a:	f7ff ffdc 	bl	3456 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    349e:	bf00      	nop
    34a0:	b005      	add	sp, #20
    34a2:	f85d fb04 	ldr.w	pc, [sp], #4

000034a6 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    34a6:	b500      	push	{lr}
    34a8:	b083      	sub	sp, #12
    34aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34ac:	9b01      	ldr	r3, [sp, #4]
    34ae:	2b00      	cmp	r3, #0
    34b0:	d002      	beq.n	34b8 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    34b2:	9801      	ldr	r0, [sp, #4]
    34b4:	f000 f8d6 	bl	3664 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34b8:	bf00      	nop
    34ba:	b003      	add	sp, #12
    34bc:	f85d fb04 	ldr.w	pc, [sp], #4

000034c0 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    34c0:	b500      	push	{lr}
    34c2:	b085      	sub	sp, #20
    34c4:	9001      	str	r0, [sp, #4]
    34c6:	460b      	mov	r3, r1
    34c8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34cc:	9b01      	ldr	r3, [sp, #4]
    34ce:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34d4:	2b00      	cmp	r3, #0
    34d6:	d003      	beq.n	34e0 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    34d8:	2300      	movs	r3, #0
    34da:	f8ad 300c 	strh.w	r3, [sp, #12]
    34de:	e002      	b.n	34e6 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34e0:	2301      	movs	r3, #1
    34e2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    34e6:	ab02      	add	r3, sp, #8
    34e8:	4618      	mov	r0, r3
    34ea:	f7ff ffdc 	bl	34a6 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    34ee:	bf00      	nop
    34f0:	b005      	add	sp, #20
    34f2:	f85d fb04 	ldr.w	pc, [sp], #4

000034f6 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    34f6:	b500      	push	{lr}
    34f8:	b083      	sub	sp, #12
    34fa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34fc:	9b01      	ldr	r3, [sp, #4]
    34fe:	2b00      	cmp	r3, #0
    3500:	d002      	beq.n	3508 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3502:	9801      	ldr	r0, [sp, #4]
    3504:	f000 f8c6 	bl	3694 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3508:	bf00      	nop
    350a:	b003      	add	sp, #12
    350c:	f85d fb04 	ldr.w	pc, [sp], #4

00003510 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3510:	b500      	push	{lr}
    3512:	b085      	sub	sp, #20
    3514:	9001      	str	r0, [sp, #4]
    3516:	460b      	mov	r3, r1
    3518:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    351c:	9b01      	ldr	r3, [sp, #4]
    351e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3520:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3524:	2b00      	cmp	r3, #0
    3526:	d003      	beq.n	3530 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3528:	2300      	movs	r3, #0
    352a:	f8ad 300c 	strh.w	r3, [sp, #12]
    352e:	e002      	b.n	3536 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3530:	2301      	movs	r3, #1
    3532:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3536:	ab02      	add	r3, sp, #8
    3538:	4618      	mov	r0, r3
    353a:	f7ff ffdc 	bl	34f6 <Clock_Ip_ClockSetSimClkoutEnable>
}
    353e:	bf00      	nop
    3540:	b005      	add	sp, #20
    3542:	f85d fb04 	ldr.w	pc, [sp], #4

00003546 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3546:	b500      	push	{lr}
    3548:	b083      	sub	sp, #12
    354a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    354c:	9b01      	ldr	r3, [sp, #4]
    354e:	2b00      	cmp	r3, #0
    3550:	d002      	beq.n	3558 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3552:	9801      	ldr	r0, [sp, #4]
    3554:	f000 f8b6 	bl	36c4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3558:	bf00      	nop
    355a:	b003      	add	sp, #12
    355c:	f85d fb04 	ldr.w	pc, [sp], #4

00003560 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3560:	b500      	push	{lr}
    3562:	b085      	sub	sp, #20
    3564:	9001      	str	r0, [sp, #4]
    3566:	460b      	mov	r3, r1
    3568:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    356c:	9b01      	ldr	r3, [sp, #4]
    356e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3570:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3574:	2b00      	cmp	r3, #0
    3576:	d003      	beq.n	3580 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3578:	2300      	movs	r3, #0
    357a:	f8ad 300c 	strh.w	r3, [sp, #12]
    357e:	e002      	b.n	3586 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3580:	2301      	movs	r3, #1
    3582:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3586:	ab02      	add	r3, sp, #8
    3588:	4618      	mov	r0, r3
    358a:	f7ff ffdc 	bl	3546 <Clock_Ip_ClockSetPccCgcEnable>
}
    358e:	bf00      	nop
    3590:	b005      	add	sp, #20
    3592:	f85d fb04 	ldr.w	pc, [sp], #4

00003596 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    3596:	b500      	push	{lr}
    3598:	b083      	sub	sp, #12
    359a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    359c:	9b01      	ldr	r3, [sp, #4]
    359e:	2b00      	cmp	r3, #0
    35a0:	d002      	beq.n	35a8 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    35a2:	9801      	ldr	r0, [sp, #4]
    35a4:	f000 f8bc 	bl	3720 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35a8:	bf00      	nop
    35aa:	b003      	add	sp, #12
    35ac:	f85d fb04 	ldr.w	pc, [sp], #4

000035b0 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    35b0:	b500      	push	{lr}
    35b2:	b085      	sub	sp, #20
    35b4:	9001      	str	r0, [sp, #4]
    35b6:	460b      	mov	r3, r1
    35b8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    35bc:	9b01      	ldr	r3, [sp, #4]
    35be:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    35c0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    35c4:	2b00      	cmp	r3, #0
    35c6:	d003      	beq.n	35d0 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    35c8:	2300      	movs	r3, #0
    35ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    35ce:	e002      	b.n	35d6 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    35d0:	2301      	movs	r3, #1
    35d2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    35d6:	ab02      	add	r3, sp, #8
    35d8:	4618      	mov	r0, r3
    35da:	f7ff ffdc 	bl	3596 <Clock_Ip_ClockSetSimGate>
}
    35de:	bf00      	nop
    35e0:	b005      	add	sp, #20
    35e2:	f85d fb04 	ldr.w	pc, [sp], #4

000035e6 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    35e6:	b500      	push	{lr}
    35e8:	b083      	sub	sp, #12
    35ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    35ec:	9b01      	ldr	r3, [sp, #4]
    35ee:	2b00      	cmp	r3, #0
    35f0:	d002      	beq.n	35f8 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    35f2:	9801      	ldr	r0, [sp, #4]
    35f4:	f000 f8c0 	bl	3778 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35f8:	bf00      	nop
    35fa:	b003      	add	sp, #12
    35fc:	f85d fb04 	ldr.w	pc, [sp], #4

00003600 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3600:	b500      	push	{lr}
    3602:	b085      	sub	sp, #20
    3604:	9001      	str	r0, [sp, #4]
    3606:	460b      	mov	r3, r1
    3608:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    360c:	9b01      	ldr	r3, [sp, #4]
    360e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3610:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3614:	2b00      	cmp	r3, #0
    3616:	d003      	beq.n	3620 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3618:	2300      	movs	r3, #0
    361a:	f8ad 300c 	strh.w	r3, [sp, #12]
    361e:	e002      	b.n	3626 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3620:	2301      	movs	r3, #1
    3622:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3626:	ab02      	add	r3, sp, #8
    3628:	4618      	mov	r0, r3
    362a:	f7ff ffdc 	bl	35e6 <Clock_Ip_ClockSetSimTraceEnable>
}
    362e:	bf00      	nop
    3630:	b005      	add	sp, #20
    3632:	f85d fb04 	ldr.w	pc, [sp], #4

00003636 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3636:	b084      	sub	sp, #16
    3638:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    363a:	4b09      	ldr	r3, [pc, #36]	; (3660 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    363c:	691b      	ldr	r3, [r3, #16]
    363e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3640:	9b03      	ldr	r3, [sp, #12]
    3642:	f023 0301 	bic.w	r3, r3, #1
    3646:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3648:	9b01      	ldr	r3, [sp, #4]
    364a:	889b      	ldrh	r3, [r3, #4]
    364c:	461a      	mov	r2, r3
    364e:	9b03      	ldr	r3, [sp, #12]
    3650:	4313      	orrs	r3, r2
    3652:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3654:	4a02      	ldr	r2, [pc, #8]	; (3660 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3656:	9b03      	ldr	r3, [sp, #12]
    3658:	6113      	str	r3, [r2, #16]
}
    365a:	bf00      	nop
    365c:	b004      	add	sp, #16
    365e:	4770      	bx	lr
    3660:	40048000 	.word	0x40048000

00003664 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3664:	b084      	sub	sp, #16
    3666:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3668:	4b09      	ldr	r3, [pc, #36]	; (3690 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    366a:	691b      	ldr	r3, [r3, #16]
    366c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    366e:	9b03      	ldr	r3, [sp, #12]
    3670:	f023 0302 	bic.w	r3, r3, #2
    3674:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3676:	9b01      	ldr	r3, [sp, #4]
    3678:	889b      	ldrh	r3, [r3, #4]
    367a:	005b      	lsls	r3, r3, #1
    367c:	9a03      	ldr	r2, [sp, #12]
    367e:	4313      	orrs	r3, r2
    3680:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3682:	4a03      	ldr	r2, [pc, #12]	; (3690 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3684:	9b03      	ldr	r3, [sp, #12]
    3686:	6113      	str	r3, [r2, #16]
}
    3688:	bf00      	nop
    368a:	b004      	add	sp, #16
    368c:	4770      	bx	lr
    368e:	bf00      	nop
    3690:	40048000 	.word	0x40048000

00003694 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3694:	b084      	sub	sp, #16
    3696:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3698:	4b09      	ldr	r3, [pc, #36]	; (36c0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    369a:	685b      	ldr	r3, [r3, #4]
    369c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    369e:	9b03      	ldr	r3, [sp, #12]
    36a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    36a4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    36a6:	9b01      	ldr	r3, [sp, #4]
    36a8:	889b      	ldrh	r3, [r3, #4]
    36aa:	02db      	lsls	r3, r3, #11
    36ac:	9a03      	ldr	r2, [sp, #12]
    36ae:	4313      	orrs	r3, r2
    36b0:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    36b2:	4a03      	ldr	r2, [pc, #12]	; (36c0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    36b4:	9b03      	ldr	r3, [sp, #12]
    36b6:	6053      	str	r3, [r2, #4]
}
    36b8:	bf00      	nop
    36ba:	b004      	add	sp, #16
    36bc:	4770      	bx	lr
    36be:	bf00      	nop
    36c0:	40048000 	.word	0x40048000

000036c4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    36c4:	b084      	sub	sp, #16
    36c6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    36c8:	4913      	ldr	r1, [pc, #76]	; (3718 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    36ca:	9b01      	ldr	r3, [sp, #4]
    36cc:	681a      	ldr	r2, [r3, #0]
    36ce:	4813      	ldr	r0, [pc, #76]	; (371c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    36d0:	4613      	mov	r3, r2
    36d2:	00db      	lsls	r3, r3, #3
    36d4:	4413      	add	r3, r2
    36d6:	4403      	add	r3, r0
    36d8:	3306      	adds	r3, #6
    36da:	781b      	ldrb	r3, [r3, #0]
    36dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    36e0:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    36e2:	9b03      	ldr	r3, [sp, #12]
    36e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    36e8:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    36ea:	9b01      	ldr	r3, [sp, #4]
    36ec:	889b      	ldrh	r3, [r3, #4]
    36ee:	079b      	lsls	r3, r3, #30
    36f0:	9a03      	ldr	r2, [sp, #12]
    36f2:	4313      	orrs	r3, r2
    36f4:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    36f6:	4908      	ldr	r1, [pc, #32]	; (3718 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    36f8:	9b01      	ldr	r3, [sp, #4]
    36fa:	681a      	ldr	r2, [r3, #0]
    36fc:	4807      	ldr	r0, [pc, #28]	; (371c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    36fe:	4613      	mov	r3, r2
    3700:	00db      	lsls	r3, r3, #3
    3702:	4413      	add	r3, r2
    3704:	4403      	add	r3, r0
    3706:	3306      	adds	r3, #6
    3708:	781b      	ldrb	r3, [r3, #0]
    370a:	461a      	mov	r2, r3
    370c:	9b03      	ldr	r3, [sp, #12]
    370e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    3712:	bf00      	nop
    3714:	b004      	add	sp, #16
    3716:	4770      	bx	lr
    3718:	40065000 	.word	0x40065000
    371c:	0000ede4 	.word	0x0000ede4

00003720 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3720:	b086      	sub	sp, #24
    3722:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3724:	9b01      	ldr	r3, [sp, #4]
    3726:	889b      	ldrh	r3, [r3, #4]
    3728:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    372a:	9b01      	ldr	r3, [sp, #4]
    372c:	681a      	ldr	r2, [r3, #0]
    372e:	4910      	ldr	r1, [pc, #64]	; (3770 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3730:	4613      	mov	r3, r2
    3732:	00db      	lsls	r3, r3, #3
    3734:	4413      	add	r3, r2
    3736:	440b      	add	r3, r1
    3738:	3306      	adds	r3, #6
    373a:	781b      	ldrb	r3, [r3, #0]
    373c:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    373e:	4b0d      	ldr	r3, [pc, #52]	; (3774 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3742:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3744:	2201      	movs	r2, #1
    3746:	9b04      	ldr	r3, [sp, #16]
    3748:	fa02 f303 	lsl.w	r3, r2, r3
    374c:	43db      	mvns	r3, r3
    374e:	9a03      	ldr	r2, [sp, #12]
    3750:	4013      	ands	r3, r2
    3752:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3754:	9a05      	ldr	r2, [sp, #20]
    3756:	9b04      	ldr	r3, [sp, #16]
    3758:	fa02 f303 	lsl.w	r3, r2, r3
    375c:	9a03      	ldr	r2, [sp, #12]
    375e:	4313      	orrs	r3, r2
    3760:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3762:	4a04      	ldr	r2, [pc, #16]	; (3774 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3764:	9b03      	ldr	r3, [sp, #12]
    3766:	6413      	str	r3, [r2, #64]	; 0x40
}
    3768:	bf00      	nop
    376a:	b006      	add	sp, #24
    376c:	4770      	bx	lr
    376e:	bf00      	nop
    3770:	0000ede4 	.word	0x0000ede4
    3774:	40048000 	.word	0x40048000

00003778 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3778:	b084      	sub	sp, #16
    377a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    377c:	4b0a      	ldr	r3, [pc, #40]	; (37a8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    377e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3780:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3782:	9b01      	ldr	r3, [sp, #4]
    3784:	889b      	ldrh	r3, [r3, #4]
    3786:	2b01      	cmp	r3, #1
    3788:	d104      	bne.n	3794 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    378a:	9b03      	ldr	r3, [sp, #12]
    378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3790:	9303      	str	r3, [sp, #12]
    3792:	e003      	b.n	379c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3794:	9b03      	ldr	r3, [sp, #12]
    3796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    379a:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    379c:	4a02      	ldr	r2, [pc, #8]	; (37a8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    379e:	9b03      	ldr	r3, [sp, #12]
    37a0:	6693      	str	r3, [r2, #104]	; 0x68
}
    37a2:	bf00      	nop
    37a4:	b004      	add	sp, #16
    37a6:	4770      	bx	lr
    37a8:	40048000 	.word	0x40048000

000037ac <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    37ac:	b082      	sub	sp, #8
    37ae:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    37b0:	bf00      	nop
    37b2:	b002      	add	sp, #8
    37b4:	4770      	bx	lr

000037b6 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    37b6:	b082      	sub	sp, #8
    37b8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    37ba:	bf00      	nop
    37bc:	b002      	add	sp, #8
    37be:	4770      	bx	lr

000037c0 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    37c0:	b500      	push	{lr}
    37c2:	b083      	sub	sp, #12
    37c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37c6:	9b01      	ldr	r3, [sp, #4]
    37c8:	2b00      	cmp	r3, #0
    37ca:	d002      	beq.n	37d2 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    37cc:	9801      	ldr	r0, [sp, #4]
    37ce:	f000 f8d1 	bl	3974 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37d2:	bf00      	nop
    37d4:	b003      	add	sp, #12
    37d6:	f85d fb04 	ldr.w	pc, [sp], #4

000037da <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    37da:	b500      	push	{lr}
    37dc:	b083      	sub	sp, #12
    37de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37e0:	9b01      	ldr	r3, [sp, #4]
    37e2:	2b00      	cmp	r3, #0
    37e4:	d002      	beq.n	37ec <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    37e6:	9801      	ldr	r0, [sp, #4]
    37e8:	f000 f950 	bl	3a8c <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37ec:	bf00      	nop
    37ee:	b003      	add	sp, #12
    37f0:	f85d fb04 	ldr.w	pc, [sp], #4

000037f4 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    37f4:	b500      	push	{lr}
    37f6:	b083      	sub	sp, #12
    37f8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    37fa:	9801      	ldr	r0, [sp, #4]
    37fc:	f000 f98e 	bl	3b1c <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3800:	bf00      	nop
    3802:	b003      	add	sp, #12
    3804:	f85d fb04 	ldr.w	pc, [sp], #4

00003808 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3808:	b500      	push	{lr}
    380a:	b083      	sub	sp, #12
    380c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    380e:	9b01      	ldr	r3, [sp, #4]
    3810:	2b00      	cmp	r3, #0
    3812:	d002      	beq.n	381a <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3814:	9801      	ldr	r0, [sp, #4]
    3816:	f000 f999 	bl	3b4c <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    381a:	bf00      	nop
    381c:	b003      	add	sp, #12
    381e:	f85d fb04 	ldr.w	pc, [sp], #4

00003822 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3822:	b500      	push	{lr}
    3824:	b083      	sub	sp, #12
    3826:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3828:	9b01      	ldr	r3, [sp, #4]
    382a:	2b00      	cmp	r3, #0
    382c:	d002      	beq.n	3834 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    382e:	9801      	ldr	r0, [sp, #4]
    3830:	f000 f9b0 	bl	3b94 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3834:	bf00      	nop
    3836:	b003      	add	sp, #12
    3838:	f85d fb04 	ldr.w	pc, [sp], #4

0000383c <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    383c:	b500      	push	{lr}
    383e:	b083      	sub	sp, #12
    3840:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3842:	9801      	ldr	r0, [sp, #4]
    3844:	f000 f9ba 	bl	3bbc <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3848:	bf00      	nop
    384a:	b003      	add	sp, #12
    384c:	f85d fb04 	ldr.w	pc, [sp], #4

00003850 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3850:	b500      	push	{lr}
    3852:	b083      	sub	sp, #12
    3854:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3856:	9b01      	ldr	r3, [sp, #4]
    3858:	2b00      	cmp	r3, #0
    385a:	d002      	beq.n	3862 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    385c:	9801      	ldr	r0, [sp, #4]
    385e:	f000 f9bd 	bl	3bdc <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3862:	bf00      	nop
    3864:	b003      	add	sp, #12
    3866:	f85d fb04 	ldr.w	pc, [sp], #4

0000386a <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    386a:	b500      	push	{lr}
    386c:	b083      	sub	sp, #12
    386e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3870:	9b01      	ldr	r3, [sp, #4]
    3872:	2b00      	cmp	r3, #0
    3874:	d002      	beq.n	387c <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3876:	9801      	ldr	r0, [sp, #4]
    3878:	f000 f9d4 	bl	3c24 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    387c:	bf00      	nop
    387e:	b003      	add	sp, #12
    3880:	f85d fb04 	ldr.w	pc, [sp], #4

00003884 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3884:	b500      	push	{lr}
    3886:	b083      	sub	sp, #12
    3888:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    388a:	9801      	ldr	r0, [sp, #4]
    388c:	f000 f9de 	bl	3c4c <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3890:	bf00      	nop
    3892:	b003      	add	sp, #12
    3894:	f85d fb04 	ldr.w	pc, [sp], #4

00003898 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3898:	b500      	push	{lr}
    389a:	b089      	sub	sp, #36	; 0x24
    389c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    389e:	2300      	movs	r3, #0
    38a0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    38a4:	4b20      	ldr	r3, [pc, #128]	; (3928 <SetInputSouceSytemClock+0x90>)
    38a6:	695b      	ldr	r3, [r3, #20]
    38a8:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    38aa:	9b06      	ldr	r3, [sp, #24]
    38ac:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    38b0:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    38b2:	9b01      	ldr	r3, [sp, #4]
    38b4:	061b      	lsls	r3, r3, #24
    38b6:	9a06      	ldr	r2, [sp, #24]
    38b8:	4313      	orrs	r3, r2
    38ba:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    38bc:	4a1a      	ldr	r2, [pc, #104]	; (3928 <SetInputSouceSytemClock+0x90>)
    38be:	9b06      	ldr	r3, [sp, #24]
    38c0:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    38c2:	aa02      	add	r2, sp, #8
    38c4:	a903      	add	r1, sp, #12
    38c6:	a804      	add	r0, sp, #16
    38c8:	f24c 3350 	movw	r3, #50000	; 0xc350
    38cc:	f7ff f9ac 	bl	2c28 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    38d0:	4b15      	ldr	r3, [pc, #84]	; (3928 <SetInputSouceSytemClock+0x90>)
    38d2:	691b      	ldr	r3, [r3, #16]
    38d4:	0e1b      	lsrs	r3, r3, #24
    38d6:	f003 030f 	and.w	r3, r3, #15
    38da:	9a01      	ldr	r2, [sp, #4]
    38dc:	429a      	cmp	r2, r3
    38de:	bf0c      	ite	eq
    38e0:	2301      	moveq	r3, #1
    38e2:	2300      	movne	r3, #0
    38e4:	b2db      	uxtb	r3, r3
    38e6:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    38e8:	9a02      	ldr	r2, [sp, #8]
    38ea:	a903      	add	r1, sp, #12
    38ec:	ab04      	add	r3, sp, #16
    38ee:	4618      	mov	r0, r3
    38f0:	f7ff f9b4 	bl	2c5c <Clock_Ip_TimeoutExpired>
    38f4:	4603      	mov	r3, r0
    38f6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    38fa:	9b05      	ldr	r3, [sp, #20]
    38fc:	2b00      	cmp	r3, #0
    38fe:	d106      	bne.n	390e <SetInputSouceSytemClock+0x76>
    3900:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3904:	f083 0301 	eor.w	r3, r3, #1
    3908:	b2db      	uxtb	r3, r3
    390a:	2b00      	cmp	r3, #0
    390c:	d1e0      	bne.n	38d0 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    390e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3912:	2b00      	cmp	r3, #0
    3914:	d003      	beq.n	391e <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3916:	2105      	movs	r1, #5
    3918:	2001      	movs	r0, #1
    391a:	f7ff f975 	bl	2c08 <Clock_Ip_ReportClockErrors>
    }
}
    391e:	bf00      	nop
    3920:	b009      	add	sp, #36	; 0x24
    3922:	f85d fb04 	ldr.w	pc, [sp], #4
    3926:	bf00      	nop
    3928:	40064000 	.word	0x40064000

0000392c <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    392c:	b500      	push	{lr}
    392e:	b083      	sub	sp, #12
    3930:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3932:	9b01      	ldr	r3, [sp, #4]
    3934:	2b00      	cmp	r3, #0
    3936:	d002      	beq.n	393e <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3938:	9801      	ldr	r0, [sp, #4]
    393a:	f000 f997 	bl	3c6c <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    393e:	bf00      	nop
    3940:	b003      	add	sp, #12
    3942:	f85d fb04 	ldr.w	pc, [sp], #4

00003946 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3946:	b500      	push	{lr}
    3948:	b083      	sub	sp, #12
    394a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    394c:	9b01      	ldr	r3, [sp, #4]
    394e:	2b00      	cmp	r3, #0
    3950:	d002      	beq.n	3958 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3952:	9801      	ldr	r0, [sp, #4]
    3954:	f000 fa7e 	bl	3e54 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3958:	bf00      	nop
    395a:	b003      	add	sp, #12
    395c:	f85d fb04 	ldr.w	pc, [sp], #4

00003960 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3960:	b500      	push	{lr}
    3962:	b083      	sub	sp, #12
    3964:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3966:	9801      	ldr	r0, [sp, #4]
    3968:	f000 fab8 	bl	3edc <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    396c:	bf00      	nop
    396e:	b003      	add	sp, #12
    3970:	f85d fb04 	ldr.w	pc, [sp], #4

00003974 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3974:	b500      	push	{lr}
    3976:	b08b      	sub	sp, #44	; 0x2c
    3978:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    397a:	2300      	movs	r3, #0
    397c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3980:	9b01      	ldr	r3, [sp, #4]
    3982:	2b00      	cmp	r3, #0
    3984:	d10b      	bne.n	399e <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3986:	2305      	movs	r3, #5
    3988:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    398a:	2301      	movs	r3, #1
    398c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3990:	2301      	movs	r3, #1
    3992:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3996:	2301      	movs	r3, #1
    3998:	f88d 3010 	strb.w	r3, [sp, #16]
    399c:	e00e      	b.n	39bc <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    399e:	9b01      	ldr	r3, [sp, #4]
    39a0:	681b      	ldr	r3, [r3, #0]
    39a2:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    39a4:	9b01      	ldr	r3, [sp, #4]
    39a6:	79db      	ldrb	r3, [r3, #7]
    39a8:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    39ac:	9b01      	ldr	r3, [sp, #4]
    39ae:	889b      	ldrh	r3, [r3, #4]
    39b0:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    39b4:	9b01      	ldr	r3, [sp, #4]
    39b6:	7a1b      	ldrb	r3, [r3, #8]
    39b8:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    39bc:	4b32      	ldr	r3, [pc, #200]	; (3a88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39c2:	4a31      	ldr	r2, [pc, #196]	; (3a88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    39c8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    39cc:	4b2e      	ldr	r3, [pc, #184]	; (3a88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39d2:	4a2d      	ldr	r2, [pc, #180]	; (3a88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39d4:	f023 0301 	bic.w	r3, r3, #1
    39d8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    39dc:	4b2a      	ldr	r3, [pc, #168]	; (3a88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39e2:	4a29      	ldr	r2, [pc, #164]	; (3a88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39e4:	f023 0304 	bic.w	r3, r3, #4
    39e8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    39ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    39f0:	2b01      	cmp	r3, #1
    39f2:	d144      	bne.n	3a7e <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    39f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    39f8:	4a23      	ldr	r2, [pc, #140]	; (3a88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39fa:	f003 0301 	and.w	r3, r3, #1
    39fe:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3a02:	4b21      	ldr	r3, [pc, #132]	; (3a88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a08:	4a1f      	ldr	r2, [pc, #124]	; (3a88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3a0a:	f043 0301 	orr.w	r3, r3, #1
    3a0e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3a12:	4b1d      	ldr	r3, [pc, #116]	; (3a88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3a14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3a18:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3a1c:	009b      	lsls	r3, r3, #2
    3a1e:	f003 0304 	and.w	r3, r3, #4
    3a22:	4919      	ldr	r1, [pc, #100]	; (3a88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3a24:	4313      	orrs	r3, r2
    3a26:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a2a:	aa05      	add	r2, sp, #20
    3a2c:	a906      	add	r1, sp, #24
    3a2e:	a807      	add	r0, sp, #28
    3a30:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a34:	f7ff f8f8 	bl	2c28 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3a38:	4b13      	ldr	r3, [pc, #76]	; (3a88 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3a3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a3e:	0e1b      	lsrs	r3, r3, #24
    3a40:	f003 0301 	and.w	r3, r3, #1
    3a44:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a46:	9a05      	ldr	r2, [sp, #20]
    3a48:	a906      	add	r1, sp, #24
    3a4a:	ab07      	add	r3, sp, #28
    3a4c:	4618      	mov	r0, r3
    3a4e:	f7ff f905 	bl	2c5c <Clock_Ip_TimeoutExpired>
    3a52:	4603      	mov	r3, r0
    3a54:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a58:	9b08      	ldr	r3, [sp, #32]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d106      	bne.n	3a6c <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3a5e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a62:	f083 0301 	eor.w	r3, r3, #1
    3a66:	b2db      	uxtb	r3, r3
    3a68:	2b00      	cmp	r3, #0
    3a6a:	d1e5      	bne.n	3a38 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3a6c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a70:	2b00      	cmp	r3, #0
    3a72:	d004      	beq.n	3a7e <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3a74:	9b02      	ldr	r3, [sp, #8]
    3a76:	4619      	mov	r1, r3
    3a78:	2001      	movs	r0, #1
    3a7a:	f7ff f8c5 	bl	2c08 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3a7e:	bf00      	nop
    3a80:	b00b      	add	sp, #44	; 0x2c
    3a82:	f85d fb04 	ldr.w	pc, [sp], #4
    3a86:	bf00      	nop
    3a88:	40064000 	.word	0x40064000

00003a8c <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a8c:	b500      	push	{lr}
    3a8e:	b089      	sub	sp, #36	; 0x24
    3a90:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3a92:	2300      	movs	r3, #0
    3a94:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3a98:	4b1f      	ldr	r3, [pc, #124]	; (3b18 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a9e:	4a1e      	ldr	r2, [pc, #120]	; (3b18 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3aa0:	f043 0301 	orr.w	r3, r3, #1
    3aa4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3aa8:	4b1b      	ldr	r3, [pc, #108]	; (3b18 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3aaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3aae:	4a1a      	ldr	r2, [pc, #104]	; (3b18 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3ab0:	f043 0304 	orr.w	r3, r3, #4
    3ab4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3ab8:	aa03      	add	r2, sp, #12
    3aba:	a904      	add	r1, sp, #16
    3abc:	a805      	add	r0, sp, #20
    3abe:	f24c 3350 	movw	r3, #50000	; 0xc350
    3ac2:	f7ff f8b1 	bl	2c28 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3ac6:	4b14      	ldr	r3, [pc, #80]	; (3b18 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3ac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3acc:	0e1b      	lsrs	r3, r3, #24
    3ace:	f003 0301 	and.w	r3, r3, #1
    3ad2:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3ad4:	9a03      	ldr	r2, [sp, #12]
    3ad6:	a904      	add	r1, sp, #16
    3ad8:	ab05      	add	r3, sp, #20
    3ada:	4618      	mov	r0, r3
    3adc:	f7ff f8be 	bl	2c5c <Clock_Ip_TimeoutExpired>
    3ae0:	4603      	mov	r3, r0
    3ae2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3ae6:	9b06      	ldr	r3, [sp, #24]
    3ae8:	2b00      	cmp	r3, #0
    3aea:	d106      	bne.n	3afa <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3aec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3af0:	f083 0301 	eor.w	r3, r3, #1
    3af4:	b2db      	uxtb	r3, r3
    3af6:	2b00      	cmp	r3, #0
    3af8:	d1e5      	bne.n	3ac6 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3afa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3afe:	2b00      	cmp	r3, #0
    3b00:	d005      	beq.n	3b0e <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3b02:	9b01      	ldr	r3, [sp, #4]
    3b04:	681b      	ldr	r3, [r3, #0]
    3b06:	4619      	mov	r1, r3
    3b08:	2001      	movs	r0, #1
    3b0a:	f7ff f87d 	bl	2c08 <Clock_Ip_ReportClockErrors>
    }
}
    3b0e:	bf00      	nop
    3b10:	b009      	add	sp, #36	; 0x24
    3b12:	f85d fb04 	ldr.w	pc, [sp], #4
    3b16:	bf00      	nop
    3b18:	40064000 	.word	0x40064000

00003b1c <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3b1c:	b082      	sub	sp, #8
    3b1e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3b20:	4b09      	ldr	r3, [pc, #36]	; (3b48 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3b22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b26:	4a08      	ldr	r2, [pc, #32]	; (3b48 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3b28:	f023 0301 	bic.w	r3, r3, #1
    3b2c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b30:	4b05      	ldr	r3, [pc, #20]	; (3b48 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3b32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b36:	4a04      	ldr	r2, [pc, #16]	; (3b48 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3b38:	f023 0304 	bic.w	r3, r3, #4
    3b3c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b40:	bf00      	nop
    3b42:	b002      	add	sp, #8
    3b44:	4770      	bx	lr
    3b46:	bf00      	nop
    3b48:	40064000 	.word	0x40064000

00003b4c <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b4c:	b082      	sub	sp, #8
    3b4e:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b50:	4b0f      	ldr	r3, [pc, #60]	; (3b90 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b56:	4a0e      	ldr	r2, [pc, #56]	; (3b90 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b60:	4b0b      	ldr	r3, [pc, #44]	; (3b90 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b66:	4a0a      	ldr	r2, [pc, #40]	; (3b90 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b68:	f023 0304 	bic.w	r3, r3, #4
    3b6c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3b70:	4b07      	ldr	r3, [pc, #28]	; (3b90 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b72:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b76:	9b01      	ldr	r3, [sp, #4]
    3b78:	7a1b      	ldrb	r3, [r3, #8]
    3b7a:	009b      	lsls	r3, r3, #2
    3b7c:	f003 0304 	and.w	r3, r3, #4
    3b80:	4903      	ldr	r1, [pc, #12]	; (3b90 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b82:	4313      	orrs	r3, r2
    3b84:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b88:	bf00      	nop
    3b8a:	b002      	add	sp, #8
    3b8c:	4770      	bx	lr
    3b8e:	bf00      	nop
    3b90:	40064000 	.word	0x40064000

00003b94 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b94:	b082      	sub	sp, #8
    3b96:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b98:	9b01      	ldr	r3, [sp, #4]
    3b9a:	889b      	ldrh	r3, [r3, #4]
    3b9c:	2b01      	cmp	r3, #1
    3b9e:	d107      	bne.n	3bb0 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3ba0:	4b05      	ldr	r3, [pc, #20]	; (3bb8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3ba2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ba6:	4a04      	ldr	r2, [pc, #16]	; (3bb8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3ba8:	f043 0304 	orr.w	r3, r3, #4
    3bac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3bb0:	bf00      	nop
    3bb2:	b002      	add	sp, #8
    3bb4:	4770      	bx	lr
    3bb6:	bf00      	nop
    3bb8:	40064000 	.word	0x40064000

00003bbc <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3bbc:	b082      	sub	sp, #8
    3bbe:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3bc0:	4b05      	ldr	r3, [pc, #20]	; (3bd8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3bc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bc6:	4a04      	ldr	r2, [pc, #16]	; (3bd8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3bc8:	f023 0304 	bic.w	r3, r3, #4
    3bcc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3bd0:	bf00      	nop
    3bd2:	b002      	add	sp, #8
    3bd4:	4770      	bx	lr
    3bd6:	bf00      	nop
    3bd8:	40064000 	.word	0x40064000

00003bdc <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3bdc:	b082      	sub	sp, #8
    3bde:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3be0:	4b0f      	ldr	r3, [pc, #60]	; (3c20 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3be2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3be6:	4a0e      	ldr	r2, [pc, #56]	; (3c20 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3be8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3bec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3bf0:	4b0b      	ldr	r3, [pc, #44]	; (3c20 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bf6:	4a0a      	ldr	r2, [pc, #40]	; (3c20 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bf8:	f023 0302 	bic.w	r3, r3, #2
    3bfc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3c00:	4b07      	ldr	r3, [pc, #28]	; (3c20 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3c02:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3c06:	9b01      	ldr	r3, [sp, #4]
    3c08:	7a5b      	ldrb	r3, [r3, #9]
    3c0a:	005b      	lsls	r3, r3, #1
    3c0c:	f003 0302 	and.w	r3, r3, #2
    3c10:	4903      	ldr	r1, [pc, #12]	; (3c20 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3c12:	4313      	orrs	r3, r2
    3c14:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3c18:	bf00      	nop
    3c1a:	b002      	add	sp, #8
    3c1c:	4770      	bx	lr
    3c1e:	bf00      	nop
    3c20:	40064000 	.word	0x40064000

00003c24 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c24:	b082      	sub	sp, #8
    3c26:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3c28:	9b01      	ldr	r3, [sp, #4]
    3c2a:	889b      	ldrh	r3, [r3, #4]
    3c2c:	2b01      	cmp	r3, #1
    3c2e:	d107      	bne.n	3c40 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3c30:	4b05      	ldr	r3, [pc, #20]	; (3c48 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3c32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c36:	4a04      	ldr	r2, [pc, #16]	; (3c48 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3c38:	f043 0302 	orr.w	r3, r3, #2
    3c3c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3c40:	bf00      	nop
    3c42:	b002      	add	sp, #8
    3c44:	4770      	bx	lr
    3c46:	bf00      	nop
    3c48:	40064000 	.word	0x40064000

00003c4c <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3c4c:	b082      	sub	sp, #8
    3c4e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3c50:	4b05      	ldr	r3, [pc, #20]	; (3c68 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3c52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c56:	4a04      	ldr	r2, [pc, #16]	; (3c68 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3c58:	f023 0302 	bic.w	r3, r3, #2
    3c5c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3c60:	bf00      	nop
    3c62:	b002      	add	sp, #8
    3c64:	4770      	bx	lr
    3c66:	bf00      	nop
    3c68:	40064000 	.word	0x40064000

00003c6c <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c6c:	b500      	push	{lr}
    3c6e:	b08b      	sub	sp, #44	; 0x2c
    3c70:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c72:	9b01      	ldr	r3, [sp, #4]
    3c74:	681a      	ldr	r2, [r3, #0]
    3c76:	4975      	ldr	r1, [pc, #468]	; (3e4c <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3c78:	4613      	mov	r3, r2
    3c7a:	00db      	lsls	r3, r3, #3
    3c7c:	4413      	add	r3, r2
    3c7e:	440b      	add	r3, r1
    3c80:	781b      	ldrb	r3, [r3, #0]
    3c82:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3c84:	2300      	movs	r3, #0
    3c86:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3c8a:	2300      	movs	r3, #0
    3c8c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3c90:	4b6f      	ldr	r3, [pc, #444]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c96:	4a6e      	ldr	r2, [pc, #440]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3c9c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3ca0:	4b6b      	ldr	r3, [pc, #428]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3ca2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3caa:	2b00      	cmp	r3, #0
    3cac:	d07d      	beq.n	3daa <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3cae:	9b01      	ldr	r3, [sp, #4]
    3cb0:	79db      	ldrb	r3, [r3, #7]
    3cb2:	461a      	mov	r2, r3
    3cb4:	4b66      	ldr	r3, [pc, #408]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cb6:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3cba:	f003 0303 	and.w	r3, r3, #3
    3cbe:	429a      	cmp	r2, r3
    3cc0:	d10b      	bne.n	3cda <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3cc2:	9b01      	ldr	r3, [sp, #4]
    3cc4:	799b      	ldrb	r3, [r3, #6]
    3cc6:	461a      	mov	r2, r3
    3cc8:	4b61      	ldr	r3, [pc, #388]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cce:	08db      	lsrs	r3, r3, #3
    3cd0:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3cd4:	429a      	cmp	r2, r3
    3cd6:	f000 80b4 	beq.w	3e42 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3cda:	4b5d      	ldr	r3, [pc, #372]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ce0:	f003 0301 	and.w	r3, r3, #1
    3ce4:	2b00      	cmp	r3, #0
    3ce6:	d105      	bne.n	3cf4 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3ce8:	2301      	movs	r3, #1
    3cea:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3cee:	2000      	movs	r0, #0
    3cf0:	f7ff fd66 	bl	37c0 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3cf4:	2002      	movs	r0, #2
    3cf6:	f7ff fdcf 	bl	3898 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3cfa:	4b55      	ldr	r3, [pc, #340]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cfc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d00:	4a53      	ldr	r2, [pc, #332]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d02:	f023 0301 	bic.w	r3, r3, #1
    3d06:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3d0a:	9b01      	ldr	r3, [sp, #4]
    3d0c:	889b      	ldrh	r3, [r3, #4]
    3d0e:	2b01      	cmp	r3, #1
    3d10:	f040 8097 	bne.w	3e42 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3d14:	9b01      	ldr	r3, [sp, #4]
    3d16:	79db      	ldrb	r3, [r3, #7]
    3d18:	4a4d      	ldr	r2, [pc, #308]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d1a:	f003 0303 	and.w	r3, r3, #3
    3d1e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3d22:	4b4b      	ldr	r3, [pc, #300]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d24:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3d28:	9b01      	ldr	r3, [sp, #4]
    3d2a:	799b      	ldrb	r3, [r3, #6]
    3d2c:	00db      	lsls	r3, r3, #3
    3d2e:	f003 0308 	and.w	r3, r3, #8
    3d32:	4313      	orrs	r3, r2
    3d34:	4a46      	ldr	r2, [pc, #280]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d36:	f043 0301 	orr.w	r3, r3, #1
    3d3a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d3e:	aa03      	add	r2, sp, #12
    3d40:	a904      	add	r1, sp, #16
    3d42:	a805      	add	r0, sp, #20
    3d44:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d48:	f7fe ff6e 	bl	2c28 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3d4c:	4b40      	ldr	r3, [pc, #256]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d52:	0e1b      	lsrs	r3, r3, #24
    3d54:	f003 0301 	and.w	r3, r3, #1
    3d58:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d5a:	9a03      	ldr	r2, [sp, #12]
    3d5c:	a904      	add	r1, sp, #16
    3d5e:	ab05      	add	r3, sp, #20
    3d60:	4618      	mov	r0, r3
    3d62:	f7fe ff7b 	bl	2c5c <Clock_Ip_TimeoutExpired>
    3d66:	4603      	mov	r3, r0
    3d68:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d6c:	9b06      	ldr	r3, [sp, #24]
    3d6e:	2b00      	cmp	r3, #0
    3d70:	d106      	bne.n	3d80 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3d72:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d76:	f083 0301 	eor.w	r3, r3, #1
    3d7a:	b2db      	uxtb	r3, r3
    3d7c:	2b00      	cmp	r3, #0
    3d7e:	d1e5      	bne.n	3d4c <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3d80:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d84:	2b00      	cmp	r3, #0
    3d86:	d005      	beq.n	3d94 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d88:	9b01      	ldr	r3, [sp, #4]
    3d8a:	681b      	ldr	r3, [r3, #0]
    3d8c:	4619      	mov	r1, r3
    3d8e:	2001      	movs	r0, #1
    3d90:	f7fe ff3a 	bl	2c08 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3d94:	2003      	movs	r0, #3
    3d96:	f7ff fd7f 	bl	3898 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3d9a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d9e:	2b00      	cmp	r3, #0
    3da0:	d04f      	beq.n	3e42 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3da2:	2002      	movs	r0, #2
    3da4:	f7ff fd26 	bl	37f4 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3da8:	e04b      	b.n	3e42 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3daa:	4b29      	ldr	r3, [pc, #164]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3dac:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3db0:	4a27      	ldr	r2, [pc, #156]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3db2:	f023 0301 	bic.w	r3, r3, #1
    3db6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3dba:	9b01      	ldr	r3, [sp, #4]
    3dbc:	889b      	ldrh	r3, [r3, #4]
    3dbe:	2b01      	cmp	r3, #1
    3dc0:	d13f      	bne.n	3e42 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3dc2:	9b01      	ldr	r3, [sp, #4]
    3dc4:	79db      	ldrb	r3, [r3, #7]
    3dc6:	4a22      	ldr	r2, [pc, #136]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3dc8:	f003 0303 	and.w	r3, r3, #3
    3dcc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3dd0:	4b1f      	ldr	r3, [pc, #124]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3dd2:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3dd6:	9b01      	ldr	r3, [sp, #4]
    3dd8:	799b      	ldrb	r3, [r3, #6]
    3dda:	00db      	lsls	r3, r3, #3
    3ddc:	f003 0308 	and.w	r3, r3, #8
    3de0:	4313      	orrs	r3, r2
    3de2:	4a1b      	ldr	r2, [pc, #108]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3de4:	f043 0301 	orr.w	r3, r3, #1
    3de8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3dec:	aa03      	add	r2, sp, #12
    3dee:	a904      	add	r1, sp, #16
    3df0:	a805      	add	r0, sp, #20
    3df2:	f24c 3350 	movw	r3, #50000	; 0xc350
    3df6:	f7fe ff17 	bl	2c28 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3dfa:	4b15      	ldr	r3, [pc, #84]	; (3e50 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3dfc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e00:	0e1b      	lsrs	r3, r3, #24
    3e02:	f003 0301 	and.w	r3, r3, #1
    3e06:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e08:	9a03      	ldr	r2, [sp, #12]
    3e0a:	a904      	add	r1, sp, #16
    3e0c:	ab05      	add	r3, sp, #20
    3e0e:	4618      	mov	r0, r3
    3e10:	f7fe ff24 	bl	2c5c <Clock_Ip_TimeoutExpired>
    3e14:	4603      	mov	r3, r0
    3e16:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3e1a:	9b06      	ldr	r3, [sp, #24]
    3e1c:	2b00      	cmp	r3, #0
    3e1e:	d106      	bne.n	3e2e <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3e20:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e24:	f083 0301 	eor.w	r3, r3, #1
    3e28:	b2db      	uxtb	r3, r3
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d1e5      	bne.n	3dfa <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3e2e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e32:	2b00      	cmp	r3, #0
    3e34:	d005      	beq.n	3e42 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e36:	9b01      	ldr	r3, [sp, #4]
    3e38:	681b      	ldr	r3, [r3, #0]
    3e3a:	4619      	mov	r1, r3
    3e3c:	2001      	movs	r0, #1
    3e3e:	f7fe fee3 	bl	2c08 <Clock_Ip_ReportClockErrors>
}
    3e42:	bf00      	nop
    3e44:	b00b      	add	sp, #44	; 0x2c
    3e46:	f85d fb04 	ldr.w	pc, [sp], #4
    3e4a:	bf00      	nop
    3e4c:	0000ede4 	.word	0x0000ede4
    3e50:	40064000 	.word	0x40064000

00003e54 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e54:	b500      	push	{lr}
    3e56:	b089      	sub	sp, #36	; 0x24
    3e58:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3e5a:	2300      	movs	r3, #0
    3e5c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3e60:	9b01      	ldr	r3, [sp, #4]
    3e62:	889b      	ldrh	r3, [r3, #4]
    3e64:	2b01      	cmp	r3, #1
    3e66:	d132      	bne.n	3ece <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3e68:	4b1b      	ldr	r3, [pc, #108]	; (3ed8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e6e:	4a1a      	ldr	r2, [pc, #104]	; (3ed8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e70:	f043 0301 	orr.w	r3, r3, #1
    3e74:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e78:	aa03      	add	r2, sp, #12
    3e7a:	a904      	add	r1, sp, #16
    3e7c:	a805      	add	r0, sp, #20
    3e7e:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e82:	f7fe fed1 	bl	2c28 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3e86:	4b14      	ldr	r3, [pc, #80]	; (3ed8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e88:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e8c:	0e1b      	lsrs	r3, r3, #24
    3e8e:	f003 0301 	and.w	r3, r3, #1
    3e92:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e94:	9a03      	ldr	r2, [sp, #12]
    3e96:	a904      	add	r1, sp, #16
    3e98:	ab05      	add	r3, sp, #20
    3e9a:	4618      	mov	r0, r3
    3e9c:	f7fe fede 	bl	2c5c <Clock_Ip_TimeoutExpired>
    3ea0:	4603      	mov	r3, r0
    3ea2:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3ea6:	9b06      	ldr	r3, [sp, #24]
    3ea8:	2b00      	cmp	r3, #0
    3eaa:	d106      	bne.n	3eba <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3eac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3eb0:	f083 0301 	eor.w	r3, r3, #1
    3eb4:	b2db      	uxtb	r3, r3
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	d1e5      	bne.n	3e86 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3eba:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d005      	beq.n	3ece <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3ec2:	9b01      	ldr	r3, [sp, #4]
    3ec4:	681b      	ldr	r3, [r3, #0]
    3ec6:	4619      	mov	r1, r3
    3ec8:	2001      	movs	r0, #1
    3eca:	f7fe fe9d 	bl	2c08 <Clock_Ip_ReportClockErrors>
        }
    }
}
    3ece:	bf00      	nop
    3ed0:	b009      	add	sp, #36	; 0x24
    3ed2:	f85d fb04 	ldr.w	pc, [sp], #4
    3ed6:	bf00      	nop
    3ed8:	40064000 	.word	0x40064000

00003edc <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3edc:	b082      	sub	sp, #8
    3ede:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3ee0:	4b05      	ldr	r3, [pc, #20]	; (3ef8 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3ee2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3ee6:	4a04      	ldr	r2, [pc, #16]	; (3ef8 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3ee8:	f023 0301 	bic.w	r3, r3, #1
    3eec:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3ef0:	bf00      	nop
    3ef2:	b002      	add	sp, #8
    3ef4:	4770      	bx	lr
    3ef6:	bf00      	nop
    3ef8:	40064000 	.word	0x40064000

00003efc <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3efc:	b082      	sub	sp, #8
    3efe:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3f00:	bf00      	nop
    3f02:	b002      	add	sp, #8
    3f04:	4770      	bx	lr

00003f06 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3f06:	b082      	sub	sp, #8
    3f08:	9001      	str	r0, [sp, #4]
    3f0a:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3f0c:	bf00      	nop
    3f0e:	b002      	add	sp, #8
    3f10:	4770      	bx	lr

00003f12 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3f12:	b082      	sub	sp, #8
    3f14:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3f16:	bf00      	nop
    3f18:	b002      	add	sp, #8
    3f1a:	4770      	bx	lr

00003f1c <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3f1c:	b082      	sub	sp, #8
    3f1e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3f20:	bf00      	nop
    3f22:	b002      	add	sp, #8
    3f24:	4770      	bx	lr

00003f26 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3f26:	b082      	sub	sp, #8
    3f28:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3f2a:	2302      	movs	r3, #2
}
    3f2c:	4618      	mov	r0, r3
    3f2e:	b002      	add	sp, #8
    3f30:	4770      	bx	lr

00003f32 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3f32:	b082      	sub	sp, #8
    3f34:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3f36:	bf00      	nop
    3f38:	b002      	add	sp, #8
    3f3a:	4770      	bx	lr

00003f3c <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3f3c:	b500      	push	{lr}
    3f3e:	b083      	sub	sp, #12
    3f40:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f42:	9b01      	ldr	r3, [sp, #4]
    3f44:	2b00      	cmp	r3, #0
    3f46:	d002      	beq.n	3f4e <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3f48:	9801      	ldr	r0, [sp, #4]
    3f4a:	f000 f870 	bl	402e <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f4e:	bf00      	nop
    3f50:	b003      	add	sp, #12
    3f52:	f85d fb04 	ldr.w	pc, [sp], #4

00003f56 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3f56:	b500      	push	{lr}
    3f58:	b083      	sub	sp, #12
    3f5a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f5c:	9b01      	ldr	r3, [sp, #4]
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d002      	beq.n	3f68 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3f62:	9801      	ldr	r0, [sp, #4]
    3f64:	f000 f89a 	bl	409c <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f68:	bf00      	nop
    3f6a:	b003      	add	sp, #12
    3f6c:	f85d fb04 	ldr.w	pc, [sp], #4

00003f70 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3f70:	b500      	push	{lr}
    3f72:	b089      	sub	sp, #36	; 0x24
    3f74:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3f76:	2301      	movs	r3, #1
    3f78:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3f7a:	2300      	movs	r3, #0
    3f7c:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3f80:	4b1e      	ldr	r3, [pc, #120]	; (3ffc <Clock_Ip_CompleteSpll+0x8c>)
    3f82:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f86:	f003 0301 	and.w	r3, r3, #1
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d02f      	beq.n	3fee <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f8e:	aa02      	add	r2, sp, #8
    3f90:	a903      	add	r1, sp, #12
    3f92:	a804      	add	r0, sp, #16
    3f94:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f98:	f7fe fe46 	bl	2c28 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3f9c:	4b17      	ldr	r3, [pc, #92]	; (3ffc <Clock_Ip_CompleteSpll+0x8c>)
    3f9e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3fa2:	0e1b      	lsrs	r3, r3, #24
    3fa4:	f003 0301 	and.w	r3, r3, #1
    3fa8:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3faa:	9a02      	ldr	r2, [sp, #8]
    3fac:	a903      	add	r1, sp, #12
    3fae:	ab04      	add	r3, sp, #16
    3fb0:	4618      	mov	r0, r3
    3fb2:	f7fe fe53 	bl	2c5c <Clock_Ip_TimeoutExpired>
    3fb6:	4603      	mov	r3, r0
    3fb8:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3fbc:	9b05      	ldr	r3, [sp, #20]
    3fbe:	2b00      	cmp	r3, #0
    3fc0:	d106      	bne.n	3fd0 <Clock_Ip_CompleteSpll+0x60>
    3fc2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3fc6:	f083 0301 	eor.w	r3, r3, #1
    3fca:	b2db      	uxtb	r3, r3
    3fcc:	2b00      	cmp	r3, #0
    3fce:	d1e5      	bne.n	3f9c <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3fd0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3fd4:	f083 0301 	eor.w	r3, r3, #1
    3fd8:	b2db      	uxtb	r3, r3
    3fda:	2b00      	cmp	r3, #0
    3fdc:	d002      	beq.n	3fe4 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3fde:	2302      	movs	r3, #2
    3fe0:	9307      	str	r3, [sp, #28]
    3fe2:	e006      	b.n	3ff2 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3fe4:	9901      	ldr	r1, [sp, #4]
    3fe6:	2001      	movs	r0, #1
    3fe8:	f7fe fe0e 	bl	2c08 <Clock_Ip_ReportClockErrors>
    3fec:	e001      	b.n	3ff2 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3fee:	2300      	movs	r3, #0
    3ff0:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3ff2:	9b07      	ldr	r3, [sp, #28]
}
    3ff4:	4618      	mov	r0, r3
    3ff6:	b009      	add	sp, #36	; 0x24
    3ff8:	f85d fb04 	ldr.w	pc, [sp], #4
    3ffc:	40064000 	.word	0x40064000

00004000 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4000:	b500      	push	{lr}
    4002:	b083      	sub	sp, #12
    4004:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    4006:	9801      	ldr	r0, [sp, #4]
    4008:	f000 f886 	bl	4118 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    400c:	bf00      	nop
    400e:	b003      	add	sp, #12
    4010:	f85d fb04 	ldr.w	pc, [sp], #4

00004014 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4014:	b500      	push	{lr}
    4016:	b083      	sub	sp, #12
    4018:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    401a:	9b01      	ldr	r3, [sp, #4]
    401c:	2b00      	cmp	r3, #0
    401e:	d002      	beq.n	4026 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4020:	9801      	ldr	r0, [sp, #4]
    4022:	f000 f891 	bl	4148 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4026:	bf00      	nop
    4028:	b003      	add	sp, #12
    402a:	f85d fb04 	ldr.w	pc, [sp], #4

0000402e <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    402e:	b082      	sub	sp, #8
    4030:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4032:	4b19      	ldr	r3, [pc, #100]	; (4098 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4034:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4038:	4a17      	ldr	r2, [pc, #92]	; (4098 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    403a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    403e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4042:	4b15      	ldr	r3, [pc, #84]	; (4098 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4044:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4048:	4a13      	ldr	r2, [pc, #76]	; (4098 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    404a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    404e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4052:	4b11      	ldr	r3, [pc, #68]	; (4098 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4054:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4058:	4a0f      	ldr	r2, [pc, #60]	; (4098 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    405a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    405e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4062:	4b0d      	ldr	r3, [pc, #52]	; (4098 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4064:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4068:	4a0b      	ldr	r2, [pc, #44]	; (4098 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    406a:	f023 0301 	bic.w	r3, r3, #1
    406e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4072:	4b09      	ldr	r3, [pc, #36]	; (4098 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4074:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4078:	4a07      	ldr	r2, [pc, #28]	; (4098 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    407a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    407e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4082:	4b05      	ldr	r3, [pc, #20]	; (4098 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4084:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4088:	4a03      	ldr	r2, [pc, #12]	; (4098 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    408a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    408e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4092:	bf00      	nop
    4094:	b002      	add	sp, #8
    4096:	4770      	bx	lr
    4098:	40064000 	.word	0x40064000

0000409c <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    409c:	b082      	sub	sp, #8
    409e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    40a0:	9b01      	ldr	r3, [sp, #4]
    40a2:	889b      	ldrh	r3, [r3, #4]
    40a4:	2b01      	cmp	r3, #1
    40a6:	d12f      	bne.n	4108 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    40a8:	4b1a      	ldr	r3, [pc, #104]	; (4114 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40aa:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    40ae:	9b01      	ldr	r3, [sp, #4]
    40b0:	7b5b      	ldrb	r3, [r3, #13]
    40b2:	3b01      	subs	r3, #1
    40b4:	021b      	lsls	r3, r3, #8
    40b6:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    40ba:	9b01      	ldr	r3, [sp, #4]
    40bc:	7d1b      	ldrb	r3, [r3, #20]
    40be:	3b10      	subs	r3, #16
    40c0:	041b      	lsls	r3, r3, #16
    40c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    40c6:	430b      	orrs	r3, r1
    40c8:	4912      	ldr	r1, [pc, #72]	; (4114 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40ca:	4313      	orrs	r3, r2
    40cc:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    40d0:	9b01      	ldr	r3, [sp, #4]
    40d2:	7fdb      	ldrb	r3, [r3, #31]
    40d4:	2b02      	cmp	r3, #2
    40d6:	d011      	beq.n	40fc <Clock_Ip_SetSpll_TrustedCall+0x60>
    40d8:	2b02      	cmp	r3, #2
    40da:	dc17      	bgt.n	410c <Clock_Ip_SetSpll_TrustedCall+0x70>
    40dc:	2b00      	cmp	r3, #0
    40de:	d002      	beq.n	40e6 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    40e0:	2b01      	cmp	r3, #1
    40e2:	d005      	beq.n	40f0 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    40e4:	e012      	b.n	410c <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    40e6:	4b0b      	ldr	r3, [pc, #44]	; (4114 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40e8:	2200      	movs	r2, #0
    40ea:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40ee:	e00e      	b.n	410e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    40f0:	4b08      	ldr	r3, [pc, #32]	; (4114 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    40f6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40fa:	e008      	b.n	410e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    40fc:	4b05      	ldr	r3, [pc, #20]	; (4114 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4102:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4106:	e002      	b.n	410e <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4108:	bf00      	nop
    410a:	e000      	b.n	410e <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    410c:	bf00      	nop
}
    410e:	bf00      	nop
    4110:	b002      	add	sp, #8
    4112:	4770      	bx	lr
    4114:	40064000 	.word	0x40064000

00004118 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4118:	b082      	sub	sp, #8
    411a:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    411c:	4b09      	ldr	r3, [pc, #36]	; (4144 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    411e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4122:	4a08      	ldr	r2, [pc, #32]	; (4144 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4124:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4128:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    412c:	4b05      	ldr	r3, [pc, #20]	; (4144 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    412e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4132:	4a04      	ldr	r2, [pc, #16]	; (4144 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4134:	f023 0301 	bic.w	r3, r3, #1
    4138:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    413c:	bf00      	nop
    413e:	b002      	add	sp, #8
    4140:	4770      	bx	lr
    4142:	bf00      	nop
    4144:	40064000 	.word	0x40064000

00004148 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4148:	b082      	sub	sp, #8
    414a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    414c:	9b01      	ldr	r3, [sp, #4]
    414e:	889b      	ldrh	r3, [r3, #4]
    4150:	2b01      	cmp	r3, #1
    4152:	d107      	bne.n	4164 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4154:	4b05      	ldr	r3, [pc, #20]	; (416c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4156:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    415a:	4a04      	ldr	r2, [pc, #16]	; (416c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    415c:	f043 0301 	orr.w	r3, r3, #1
    4160:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4164:	bf00      	nop
    4166:	b002      	add	sp, #8
    4168:	4770      	bx	lr
    416a:	bf00      	nop
    416c:	40064000 	.word	0x40064000

00004170 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4170:	b082      	sub	sp, #8
    4172:	9001      	str	r0, [sp, #4]
    4174:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4176:	bf00      	nop
    4178:	b002      	add	sp, #8
    417a:	4770      	bx	lr

0000417c <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    417c:	b082      	sub	sp, #8
    417e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4180:	bf00      	nop
    4182:	b002      	add	sp, #8
    4184:	4770      	bx	lr

00004186 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4186:	b500      	push	{lr}
    4188:	b083      	sub	sp, #12
    418a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    418c:	9b01      	ldr	r3, [sp, #4]
    418e:	2b00      	cmp	r3, #0
    4190:	d002      	beq.n	4198 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4192:	9801      	ldr	r0, [sp, #4]
    4194:	f000 f8ee 	bl	4374 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4198:	bf00      	nop
    419a:	b003      	add	sp, #12
    419c:	f85d fb04 	ldr.w	pc, [sp], #4

000041a0 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    41a0:	b500      	push	{lr}
    41a2:	b083      	sub	sp, #12
    41a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41a6:	9b01      	ldr	r3, [sp, #4]
    41a8:	2b00      	cmp	r3, #0
    41aa:	d002      	beq.n	41b2 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    41ac:	9801      	ldr	r0, [sp, #4]
    41ae:	f000 f8ff 	bl	43b0 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41b2:	bf00      	nop
    41b4:	b003      	add	sp, #12
    41b6:	f85d fb04 	ldr.w	pc, [sp], #4

000041ba <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    41ba:	b500      	push	{lr}
    41bc:	b083      	sub	sp, #12
    41be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41c0:	9b01      	ldr	r3, [sp, #4]
    41c2:	2b00      	cmp	r3, #0
    41c4:	d002      	beq.n	41cc <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    41c6:	9801      	ldr	r0, [sp, #4]
    41c8:	f000 f912 	bl	43f0 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41cc:	bf00      	nop
    41ce:	b003      	add	sp, #12
    41d0:	f85d fb04 	ldr.w	pc, [sp], #4

000041d4 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    41d4:	b500      	push	{lr}
    41d6:	b083      	sub	sp, #12
    41d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41da:	9b01      	ldr	r3, [sp, #4]
    41dc:	2b00      	cmp	r3, #0
    41de:	d002      	beq.n	41e6 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    41e0:	9801      	ldr	r0, [sp, #4]
    41e2:	f000 f925 	bl	4430 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41e6:	bf00      	nop
    41e8:	b003      	add	sp, #12
    41ea:	f85d fb04 	ldr.w	pc, [sp], #4

000041ee <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    41ee:	b500      	push	{lr}
    41f0:	b083      	sub	sp, #12
    41f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41f4:	9b01      	ldr	r3, [sp, #4]
    41f6:	2b00      	cmp	r3, #0
    41f8:	d002      	beq.n	4200 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    41fa:	9801      	ldr	r0, [sp, #4]
    41fc:	f000 f936 	bl	446c <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4200:	bf00      	nop
    4202:	b003      	add	sp, #12
    4204:	f85d fb04 	ldr.w	pc, [sp], #4

00004208 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4208:	b500      	push	{lr}
    420a:	b083      	sub	sp, #12
    420c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    420e:	9b01      	ldr	r3, [sp, #4]
    4210:	2b00      	cmp	r3, #0
    4212:	d002      	beq.n	421a <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4214:	9801      	ldr	r0, [sp, #4]
    4216:	f000 f949 	bl	44ac <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    421a:	bf00      	nop
    421c:	b003      	add	sp, #12
    421e:	f85d fb04 	ldr.w	pc, [sp], #4

00004222 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4222:	b500      	push	{lr}
    4224:	b083      	sub	sp, #12
    4226:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4228:	9b01      	ldr	r3, [sp, #4]
    422a:	2b00      	cmp	r3, #0
    422c:	d002      	beq.n	4234 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    422e:	9801      	ldr	r0, [sp, #4]
    4230:	f000 f958 	bl	44e4 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4234:	bf00      	nop
    4236:	b003      	add	sp, #12
    4238:	f85d fb04 	ldr.w	pc, [sp], #4

0000423c <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    423c:	b500      	push	{lr}
    423e:	b083      	sub	sp, #12
    4240:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4242:	9b01      	ldr	r3, [sp, #4]
    4244:	2b00      	cmp	r3, #0
    4246:	d002      	beq.n	424e <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4248:	9801      	ldr	r0, [sp, #4]
    424a:	f000 f969 	bl	4520 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    424e:	bf00      	nop
    4250:	b003      	add	sp, #12
    4252:	f85d fb04 	ldr.w	pc, [sp], #4

00004256 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4256:	b500      	push	{lr}
    4258:	b083      	sub	sp, #12
    425a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    425c:	9b01      	ldr	r3, [sp, #4]
    425e:	2b00      	cmp	r3, #0
    4260:	d002      	beq.n	4268 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4262:	9801      	ldr	r0, [sp, #4]
    4264:	f000 f978 	bl	4558 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4268:	bf00      	nop
    426a:	b003      	add	sp, #12
    426c:	f85d fb04 	ldr.w	pc, [sp], #4

00004270 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4270:	b500      	push	{lr}
    4272:	b083      	sub	sp, #12
    4274:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4276:	9b01      	ldr	r3, [sp, #4]
    4278:	2b00      	cmp	r3, #0
    427a:	d002      	beq.n	4282 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    427c:	9801      	ldr	r0, [sp, #4]
    427e:	f000 f989 	bl	4594 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4282:	bf00      	nop
    4284:	b003      	add	sp, #12
    4286:	f85d fb04 	ldr.w	pc, [sp], #4

0000428a <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    428a:	b500      	push	{lr}
    428c:	b083      	sub	sp, #12
    428e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4290:	9b01      	ldr	r3, [sp, #4]
    4292:	2b00      	cmp	r3, #0
    4294:	d002      	beq.n	429c <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4296:	9801      	ldr	r0, [sp, #4]
    4298:	f000 f998 	bl	45cc <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    429c:	bf00      	nop
    429e:	b003      	add	sp, #12
    42a0:	f85d fb04 	ldr.w	pc, [sp], #4

000042a4 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    42a4:	b500      	push	{lr}
    42a6:	b083      	sub	sp, #12
    42a8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42aa:	9b01      	ldr	r3, [sp, #4]
    42ac:	2b00      	cmp	r3, #0
    42ae:	d002      	beq.n	42b6 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    42b0:	9801      	ldr	r0, [sp, #4]
    42b2:	f000 f9a9 	bl	4608 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42b6:	bf00      	nop
    42b8:	b003      	add	sp, #12
    42ba:	f85d fb04 	ldr.w	pc, [sp], #4

000042be <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    42be:	b500      	push	{lr}
    42c0:	b083      	sub	sp, #12
    42c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42c4:	9b01      	ldr	r3, [sp, #4]
    42c6:	2b00      	cmp	r3, #0
    42c8:	d002      	beq.n	42d0 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    42ca:	9801      	ldr	r0, [sp, #4]
    42cc:	f000 f9e6 	bl	469c <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42d0:	bf00      	nop
    42d2:	b003      	add	sp, #12
    42d4:	f85d fb04 	ldr.w	pc, [sp], #4

000042d8 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    42d8:	b500      	push	{lr}
    42da:	b083      	sub	sp, #12
    42dc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42de:	9b01      	ldr	r3, [sp, #4]
    42e0:	2b00      	cmp	r3, #0
    42e2:	d002      	beq.n	42ea <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    42e4:	9801      	ldr	r0, [sp, #4]
    42e6:	f000 fa25 	bl	4734 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42ea:	bf00      	nop
    42ec:	b003      	add	sp, #12
    42ee:	f85d fb04 	ldr.w	pc, [sp], #4

000042f2 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    42f2:	b500      	push	{lr}
    42f4:	b083      	sub	sp, #12
    42f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42f8:	9b01      	ldr	r3, [sp, #4]
    42fa:	2b00      	cmp	r3, #0
    42fc:	d002      	beq.n	4304 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    42fe:	9801      	ldr	r0, [sp, #4]
    4300:	f000 fa2a 	bl	4758 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4304:	bf00      	nop
    4306:	b003      	add	sp, #12
    4308:	f85d fb04 	ldr.w	pc, [sp], #4

0000430c <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    430c:	b500      	push	{lr}
    430e:	b083      	sub	sp, #12
    4310:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4312:	9b01      	ldr	r3, [sp, #4]
    4314:	2b00      	cmp	r3, #0
    4316:	d002      	beq.n	431e <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4318:	9801      	ldr	r0, [sp, #4]
    431a:	f000 fa3b 	bl	4794 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    431e:	bf00      	nop
    4320:	b003      	add	sp, #12
    4322:	f85d fb04 	ldr.w	pc, [sp], #4

00004326 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4326:	b500      	push	{lr}
    4328:	b083      	sub	sp, #12
    432a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    432c:	9b01      	ldr	r3, [sp, #4]
    432e:	2b00      	cmp	r3, #0
    4330:	d002      	beq.n	4338 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4332:	9801      	ldr	r0, [sp, #4]
    4334:	f000 fa56 	bl	47e4 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4338:	bf00      	nop
    433a:	b003      	add	sp, #12
    433c:	f85d fb04 	ldr.w	pc, [sp], #4

00004340 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4340:	b500      	push	{lr}
    4342:	b083      	sub	sp, #12
    4344:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4346:	9b01      	ldr	r3, [sp, #4]
    4348:	2b00      	cmp	r3, #0
    434a:	d002      	beq.n	4352 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    434c:	9801      	ldr	r0, [sp, #4]
    434e:	f000 fa79 	bl	4844 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4352:	bf00      	nop
    4354:	b003      	add	sp, #12
    4356:	f85d fb04 	ldr.w	pc, [sp], #4

0000435a <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    435a:	b500      	push	{lr}
    435c:	b083      	sub	sp, #12
    435e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4360:	9b01      	ldr	r3, [sp, #4]
    4362:	2b00      	cmp	r3, #0
    4364:	d002      	beq.n	436c <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4366:	9801      	ldr	r0, [sp, #4]
    4368:	f000 fa8a 	bl	4880 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    436c:	bf00      	nop
    436e:	b003      	add	sp, #12
    4370:	f85d fb04 	ldr.w	pc, [sp], #4

00004374 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4374:	b084      	sub	sp, #16
    4376:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4378:	4b0b      	ldr	r3, [pc, #44]	; (43a8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    437a:	795b      	ldrb	r3, [r3, #5]
    437c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    437e:	4b0b      	ldr	r3, [pc, #44]	; (43ac <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4380:	695b      	ldr	r3, [r3, #20]
    4382:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4384:	9b02      	ldr	r3, [sp, #8]
    4386:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    438a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    438c:	9b03      	ldr	r3, [sp, #12]
    438e:	061b      	lsls	r3, r3, #24
    4390:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4394:	9a02      	ldr	r2, [sp, #8]
    4396:	4313      	orrs	r3, r2
    4398:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    439a:	4a04      	ldr	r2, [pc, #16]	; (43ac <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    439c:	9b02      	ldr	r3, [sp, #8]
    439e:	6153      	str	r3, [r2, #20]
}
    43a0:	bf00      	nop
    43a2:	b004      	add	sp, #16
    43a4:	4770      	bx	lr
    43a6:	bf00      	nop
    43a8:	0000f14c 	.word	0x0000f14c
    43ac:	40064000 	.word	0x40064000

000043b0 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43b0:	b084      	sub	sp, #16
    43b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43b4:	9b01      	ldr	r3, [sp, #4]
    43b6:	685b      	ldr	r3, [r3, #4]
    43b8:	4a0b      	ldr	r2, [pc, #44]	; (43e8 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    43ba:	5cd3      	ldrb	r3, [r2, r3]
    43bc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    43be:	4b0b      	ldr	r3, [pc, #44]	; (43ec <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    43c0:	695b      	ldr	r3, [r3, #20]
    43c2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    43c4:	9b02      	ldr	r3, [sp, #8]
    43c6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43ca:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    43cc:	9b03      	ldr	r3, [sp, #12]
    43ce:	061b      	lsls	r3, r3, #24
    43d0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43d4:	9a02      	ldr	r2, [sp, #8]
    43d6:	4313      	orrs	r3, r2
    43d8:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    43da:	4a04      	ldr	r2, [pc, #16]	; (43ec <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    43dc:	9b02      	ldr	r3, [sp, #8]
    43de:	6153      	str	r3, [r2, #20]
}
    43e0:	bf00      	nop
    43e2:	b004      	add	sp, #16
    43e4:	4770      	bx	lr
    43e6:	bf00      	nop
    43e8:	0000f14c 	.word	0x0000f14c
    43ec:	40064000 	.word	0x40064000

000043f0 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43f0:	b084      	sub	sp, #16
    43f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43f4:	9b01      	ldr	r3, [sp, #4]
    43f6:	685b      	ldr	r3, [r3, #4]
    43f8:	4a0b      	ldr	r2, [pc, #44]	; (4428 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    43fa:	5cd3      	ldrb	r3, [r2, r3]
    43fc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    43fe:	4b0b      	ldr	r3, [pc, #44]	; (442c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4400:	699b      	ldr	r3, [r3, #24]
    4402:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4404:	9b02      	ldr	r3, [sp, #8]
    4406:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    440a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    440c:	9b03      	ldr	r3, [sp, #12]
    440e:	061b      	lsls	r3, r3, #24
    4410:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4414:	9a02      	ldr	r2, [sp, #8]
    4416:	4313      	orrs	r3, r2
    4418:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    441a:	4a04      	ldr	r2, [pc, #16]	; (442c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    441c:	9b02      	ldr	r3, [sp, #8]
    441e:	6193      	str	r3, [r2, #24]
}
    4420:	bf00      	nop
    4422:	b004      	add	sp, #16
    4424:	4770      	bx	lr
    4426:	bf00      	nop
    4428:	0000f14c 	.word	0x0000f14c
    442c:	40064000 	.word	0x40064000

00004430 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4430:	b084      	sub	sp, #16
    4432:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4434:	4b0b      	ldr	r3, [pc, #44]	; (4464 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4436:	795b      	ldrb	r3, [r3, #5]
    4438:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    443a:	4b0b      	ldr	r3, [pc, #44]	; (4468 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    443c:	69db      	ldr	r3, [r3, #28]
    443e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4440:	9b02      	ldr	r3, [sp, #8]
    4442:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4446:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4448:	9b03      	ldr	r3, [sp, #12]
    444a:	061b      	lsls	r3, r3, #24
    444c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4450:	9a02      	ldr	r2, [sp, #8]
    4452:	4313      	orrs	r3, r2
    4454:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4456:	4a04      	ldr	r2, [pc, #16]	; (4468 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4458:	9b02      	ldr	r3, [sp, #8]
    445a:	61d3      	str	r3, [r2, #28]
}
    445c:	bf00      	nop
    445e:	b004      	add	sp, #16
    4460:	4770      	bx	lr
    4462:	bf00      	nop
    4464:	0000f14c 	.word	0x0000f14c
    4468:	40064000 	.word	0x40064000

0000446c <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    446c:	b084      	sub	sp, #16
    446e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4470:	9b01      	ldr	r3, [sp, #4]
    4472:	685b      	ldr	r3, [r3, #4]
    4474:	4a0b      	ldr	r2, [pc, #44]	; (44a4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4476:	5cd3      	ldrb	r3, [r2, r3]
    4478:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    447a:	4b0b      	ldr	r3, [pc, #44]	; (44a8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    447c:	69db      	ldr	r3, [r3, #28]
    447e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4480:	9b02      	ldr	r3, [sp, #8]
    4482:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4486:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4488:	9b03      	ldr	r3, [sp, #12]
    448a:	061b      	lsls	r3, r3, #24
    448c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4490:	9a02      	ldr	r2, [sp, #8]
    4492:	4313      	orrs	r3, r2
    4494:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4496:	4a04      	ldr	r2, [pc, #16]	; (44a8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4498:	9b02      	ldr	r3, [sp, #8]
    449a:	61d3      	str	r3, [r2, #28]
}
    449c:	bf00      	nop
    449e:	b004      	add	sp, #16
    44a0:	4770      	bx	lr
    44a2:	bf00      	nop
    44a4:	0000f14c 	.word	0x0000f14c
    44a8:	40064000 	.word	0x40064000

000044ac <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44ac:	b084      	sub	sp, #16
    44ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44b0:	4b0a      	ldr	r3, [pc, #40]	; (44dc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    44b2:	7b9b      	ldrb	r3, [r3, #14]
    44b4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    44b6:	4b0a      	ldr	r3, [pc, #40]	; (44e0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    44b8:	691b      	ldr	r3, [r3, #16]
    44ba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    44bc:	9b02      	ldr	r3, [sp, #8]
    44be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    44c2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    44c4:	9b03      	ldr	r3, [sp, #12]
    44c6:	011b      	lsls	r3, r3, #4
    44c8:	9a02      	ldr	r2, [sp, #8]
    44ca:	4313      	orrs	r3, r2
    44cc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44ce:	4a04      	ldr	r2, [pc, #16]	; (44e0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    44d0:	9b02      	ldr	r3, [sp, #8]
    44d2:	6113      	str	r3, [r2, #16]
}
    44d4:	bf00      	nop
    44d6:	b004      	add	sp, #16
    44d8:	4770      	bx	lr
    44da:	bf00      	nop
    44dc:	0000f0f4 	.word	0x0000f0f4
    44e0:	40048000 	.word	0x40048000

000044e4 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44e4:	b084      	sub	sp, #16
    44e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44e8:	9b01      	ldr	r3, [sp, #4]
    44ea:	685b      	ldr	r3, [r3, #4]
    44ec:	4a0a      	ldr	r2, [pc, #40]	; (4518 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    44ee:	5cd3      	ldrb	r3, [r2, r3]
    44f0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    44f2:	4b0a      	ldr	r3, [pc, #40]	; (451c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    44f4:	691b      	ldr	r3, [r3, #16]
    44f6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    44f8:	9b02      	ldr	r3, [sp, #8]
    44fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    44fe:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4500:	9b03      	ldr	r3, [sp, #12]
    4502:	011b      	lsls	r3, r3, #4
    4504:	9a02      	ldr	r2, [sp, #8]
    4506:	4313      	orrs	r3, r2
    4508:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    450a:	4a04      	ldr	r2, [pc, #16]	; (451c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    450c:	9b02      	ldr	r3, [sp, #8]
    450e:	6113      	str	r3, [r2, #16]
}
    4510:	bf00      	nop
    4512:	b004      	add	sp, #16
    4514:	4770      	bx	lr
    4516:	bf00      	nop
    4518:	0000f0f4 	.word	0x0000f0f4
    451c:	40048000 	.word	0x40048000

00004520 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4520:	b084      	sub	sp, #16
    4522:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4524:	4b0a      	ldr	r3, [pc, #40]	; (4550 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4526:	785b      	ldrb	r3, [r3, #1]
    4528:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    452a:	4b0a      	ldr	r3, [pc, #40]	; (4554 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    452c:	691b      	ldr	r3, [r3, #16]
    452e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4530:	9b02      	ldr	r3, [sp, #8]
    4532:	f023 030c 	bic.w	r3, r3, #12
    4536:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4538:	9b03      	ldr	r3, [sp, #12]
    453a:	009b      	lsls	r3, r3, #2
    453c:	9a02      	ldr	r2, [sp, #8]
    453e:	4313      	orrs	r3, r2
    4540:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4542:	4a04      	ldr	r2, [pc, #16]	; (4554 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4544:	9b02      	ldr	r3, [sp, #8]
    4546:	6113      	str	r3, [r2, #16]
}
    4548:	bf00      	nop
    454a:	b004      	add	sp, #16
    454c:	4770      	bx	lr
    454e:	bf00      	nop
    4550:	0000f1ac 	.word	0x0000f1ac
    4554:	40048000 	.word	0x40048000

00004558 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4558:	b084      	sub	sp, #16
    455a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    455c:	9b01      	ldr	r3, [sp, #4]
    455e:	685b      	ldr	r3, [r3, #4]
    4560:	4a0a      	ldr	r2, [pc, #40]	; (458c <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    4562:	5cd3      	ldrb	r3, [r2, r3]
    4564:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4566:	4b0a      	ldr	r3, [pc, #40]	; (4590 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4568:	691b      	ldr	r3, [r3, #16]
    456a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    456c:	9b02      	ldr	r3, [sp, #8]
    456e:	f023 030c 	bic.w	r3, r3, #12
    4572:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4574:	9b03      	ldr	r3, [sp, #12]
    4576:	009b      	lsls	r3, r3, #2
    4578:	9a02      	ldr	r2, [sp, #8]
    457a:	4313      	orrs	r3, r2
    457c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    457e:	4a04      	ldr	r2, [pc, #16]	; (4590 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4580:	9b02      	ldr	r3, [sp, #8]
    4582:	6113      	str	r3, [r2, #16]
}
    4584:	bf00      	nop
    4586:	b004      	add	sp, #16
    4588:	4770      	bx	lr
    458a:	bf00      	nop
    458c:	0000f1ac 	.word	0x0000f1ac
    4590:	40048000 	.word	0x40048000

00004594 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4594:	b084      	sub	sp, #16
    4596:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4598:	4b0a      	ldr	r3, [pc, #40]	; (45c4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    459a:	795b      	ldrb	r3, [r3, #5]
    459c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    459e:	4b0a      	ldr	r3, [pc, #40]	; (45c8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    45a0:	6a1b      	ldr	r3, [r3, #32]
    45a2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    45a4:	9b02      	ldr	r3, [sp, #8]
    45a6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    45aa:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    45ac:	9b03      	ldr	r3, [sp, #12]
    45ae:	061b      	lsls	r3, r3, #24
    45b0:	9a02      	ldr	r2, [sp, #8]
    45b2:	4313      	orrs	r3, r2
    45b4:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    45b6:	4a04      	ldr	r2, [pc, #16]	; (45c8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    45b8:	9b02      	ldr	r3, [sp, #8]
    45ba:	6213      	str	r3, [r2, #32]
}
    45bc:	bf00      	nop
    45be:	b004      	add	sp, #16
    45c0:	4770      	bx	lr
    45c2:	bf00      	nop
    45c4:	0000f14c 	.word	0x0000f14c
    45c8:	40064000 	.word	0x40064000

000045cc <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45cc:	b084      	sub	sp, #16
    45ce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45d0:	9b01      	ldr	r3, [sp, #4]
    45d2:	685b      	ldr	r3, [r3, #4]
    45d4:	4a0a      	ldr	r2, [pc, #40]	; (4600 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    45d6:	5cd3      	ldrb	r3, [r2, r3]
    45d8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    45da:	4b0a      	ldr	r3, [pc, #40]	; (4604 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    45dc:	6a1b      	ldr	r3, [r3, #32]
    45de:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    45e0:	9b02      	ldr	r3, [sp, #8]
    45e2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    45e6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    45e8:	9b03      	ldr	r3, [sp, #12]
    45ea:	061b      	lsls	r3, r3, #24
    45ec:	9a02      	ldr	r2, [sp, #8]
    45ee:	4313      	orrs	r3, r2
    45f0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    45f2:	4a04      	ldr	r2, [pc, #16]	; (4604 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    45f4:	9b02      	ldr	r3, [sp, #8]
    45f6:	6213      	str	r3, [r2, #32]
}
    45f8:	bf00      	nop
    45fa:	b004      	add	sp, #16
    45fc:	4770      	bx	lr
    45fe:	bf00      	nop
    4600:	0000f14c 	.word	0x0000f14c
    4604:	40064000 	.word	0x40064000

00004608 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4608:	b086      	sub	sp, #24
    460a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    460c:	4b20      	ldr	r3, [pc, #128]	; (4690 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    460e:	795b      	ldrb	r3, [r3, #5]
    4610:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4612:	9b01      	ldr	r3, [sp, #4]
    4614:	681a      	ldr	r2, [r3, #0]
    4616:	491f      	ldr	r1, [pc, #124]	; (4694 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4618:	4613      	mov	r3, r2
    461a:	00db      	lsls	r3, r3, #3
    461c:	4413      	add	r3, r2
    461e:	440b      	add	r3, r1
    4620:	781b      	ldrb	r3, [r3, #0]
    4622:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4624:	4b1c      	ldr	r3, [pc, #112]	; (4698 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4626:	68db      	ldr	r3, [r3, #12]
    4628:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    462a:	9b03      	ldr	r3, [sp, #12]
    462c:	2b03      	cmp	r3, #3
    462e:	d813      	bhi.n	4658 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4630:	9b03      	ldr	r3, [sp, #12]
    4632:	005b      	lsls	r3, r3, #1
    4634:	3318      	adds	r3, #24
    4636:	2203      	movs	r2, #3
    4638:	fa02 f303 	lsl.w	r3, r2, r3
    463c:	43db      	mvns	r3, r3
    463e:	9a05      	ldr	r2, [sp, #20]
    4640:	4013      	ands	r3, r2
    4642:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4644:	9b03      	ldr	r3, [sp, #12]
    4646:	005b      	lsls	r3, r3, #1
    4648:	3318      	adds	r3, #24
    464a:	9a04      	ldr	r2, [sp, #16]
    464c:	fa02 f303 	lsl.w	r3, r2, r3
    4650:	9a05      	ldr	r2, [sp, #20]
    4652:	4313      	orrs	r3, r2
    4654:	9305      	str	r3, [sp, #20]
    4656:	e014      	b.n	4682 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4658:	9b03      	ldr	r3, [sp, #12]
    465a:	3b04      	subs	r3, #4
    465c:	005b      	lsls	r3, r3, #1
    465e:	3310      	adds	r3, #16
    4660:	2203      	movs	r2, #3
    4662:	fa02 f303 	lsl.w	r3, r2, r3
    4666:	43db      	mvns	r3, r3
    4668:	9a05      	ldr	r2, [sp, #20]
    466a:	4013      	ands	r3, r2
    466c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    466e:	9b03      	ldr	r3, [sp, #12]
    4670:	3b04      	subs	r3, #4
    4672:	005b      	lsls	r3, r3, #1
    4674:	3310      	adds	r3, #16
    4676:	9a04      	ldr	r2, [sp, #16]
    4678:	fa02 f303 	lsl.w	r3, r2, r3
    467c:	9a05      	ldr	r2, [sp, #20]
    467e:	4313      	orrs	r3, r2
    4680:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4682:	4a05      	ldr	r2, [pc, #20]	; (4698 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4684:	9b05      	ldr	r3, [sp, #20]
    4686:	60d3      	str	r3, [r2, #12]
}
    4688:	bf00      	nop
    468a:	b006      	add	sp, #24
    468c:	4770      	bx	lr
    468e:	bf00      	nop
    4690:	0000f0f4 	.word	0x0000f0f4
    4694:	0000ede4 	.word	0x0000ede4
    4698:	40048000 	.word	0x40048000

0000469c <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    469c:	b086      	sub	sp, #24
    469e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    46a0:	9b01      	ldr	r3, [sp, #4]
    46a2:	685b      	ldr	r3, [r3, #4]
    46a4:	4a20      	ldr	r2, [pc, #128]	; (4728 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    46a6:	5cd3      	ldrb	r3, [r2, r3]
    46a8:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    46aa:	9b01      	ldr	r3, [sp, #4]
    46ac:	681a      	ldr	r2, [r3, #0]
    46ae:	491f      	ldr	r1, [pc, #124]	; (472c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    46b0:	4613      	mov	r3, r2
    46b2:	00db      	lsls	r3, r3, #3
    46b4:	4413      	add	r3, r2
    46b6:	440b      	add	r3, r1
    46b8:	781b      	ldrb	r3, [r3, #0]
    46ba:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    46bc:	4b1c      	ldr	r3, [pc, #112]	; (4730 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    46be:	68db      	ldr	r3, [r3, #12]
    46c0:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    46c2:	9b03      	ldr	r3, [sp, #12]
    46c4:	2b03      	cmp	r3, #3
    46c6:	d813      	bhi.n	46f0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    46c8:	9b03      	ldr	r3, [sp, #12]
    46ca:	005b      	lsls	r3, r3, #1
    46cc:	3318      	adds	r3, #24
    46ce:	2203      	movs	r2, #3
    46d0:	fa02 f303 	lsl.w	r3, r2, r3
    46d4:	43db      	mvns	r3, r3
    46d6:	9a05      	ldr	r2, [sp, #20]
    46d8:	4013      	ands	r3, r2
    46da:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    46dc:	9b03      	ldr	r3, [sp, #12]
    46de:	005b      	lsls	r3, r3, #1
    46e0:	3318      	adds	r3, #24
    46e2:	9a04      	ldr	r2, [sp, #16]
    46e4:	fa02 f303 	lsl.w	r3, r2, r3
    46e8:	9a05      	ldr	r2, [sp, #20]
    46ea:	4313      	orrs	r3, r2
    46ec:	9305      	str	r3, [sp, #20]
    46ee:	e014      	b.n	471a <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    46f0:	9b03      	ldr	r3, [sp, #12]
    46f2:	3b04      	subs	r3, #4
    46f4:	005b      	lsls	r3, r3, #1
    46f6:	3310      	adds	r3, #16
    46f8:	2203      	movs	r2, #3
    46fa:	fa02 f303 	lsl.w	r3, r2, r3
    46fe:	43db      	mvns	r3, r3
    4700:	9a05      	ldr	r2, [sp, #20]
    4702:	4013      	ands	r3, r2
    4704:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4706:	9b03      	ldr	r3, [sp, #12]
    4708:	3b04      	subs	r3, #4
    470a:	005b      	lsls	r3, r3, #1
    470c:	3310      	adds	r3, #16
    470e:	9a04      	ldr	r2, [sp, #16]
    4710:	fa02 f303 	lsl.w	r3, r2, r3
    4714:	9a05      	ldr	r2, [sp, #20]
    4716:	4313      	orrs	r3, r2
    4718:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    471a:	4a05      	ldr	r2, [pc, #20]	; (4730 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    471c:	9b05      	ldr	r3, [sp, #20]
    471e:	60d3      	str	r3, [r2, #12]
}
    4720:	bf00      	nop
    4722:	b006      	add	sp, #24
    4724:	4770      	bx	lr
    4726:	bf00      	nop
    4728:	0000f0f4 	.word	0x0000f0f4
    472c:	0000ede4 	.word	0x0000ede4
    4730:	40048000 	.word	0x40048000

00004734 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4734:	b084      	sub	sp, #16
    4736:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4738:	4b06      	ldr	r3, [pc, #24]	; (4754 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    473a:	685b      	ldr	r3, [r3, #4]
    473c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    473e:	9b03      	ldr	r3, [sp, #12]
    4740:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4744:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4746:	4a03      	ldr	r2, [pc, #12]	; (4754 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4748:	9b03      	ldr	r3, [sp, #12]
    474a:	6053      	str	r3, [r2, #4]
}
    474c:	bf00      	nop
    474e:	b004      	add	sp, #16
    4750:	4770      	bx	lr
    4752:	bf00      	nop
    4754:	40048000 	.word	0x40048000

00004758 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4758:	b084      	sub	sp, #16
    475a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    475c:	9b01      	ldr	r3, [sp, #4]
    475e:	685b      	ldr	r3, [r3, #4]
    4760:	4a0a      	ldr	r2, [pc, #40]	; (478c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4762:	5cd3      	ldrb	r3, [r2, r3]
    4764:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4766:	4b0a      	ldr	r3, [pc, #40]	; (4790 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4768:	685b      	ldr	r3, [r3, #4]
    476a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    476c:	9b02      	ldr	r3, [sp, #8]
    476e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4772:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4774:	9b03      	ldr	r3, [sp, #12]
    4776:	011b      	lsls	r3, r3, #4
    4778:	9a02      	ldr	r2, [sp, #8]
    477a:	4313      	orrs	r3, r2
    477c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    477e:	4a04      	ldr	r2, [pc, #16]	; (4790 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4780:	9b02      	ldr	r3, [sp, #8]
    4782:	6053      	str	r3, [r2, #4]
}
    4784:	bf00      	nop
    4786:	b004      	add	sp, #16
    4788:	4770      	bx	lr
    478a:	bf00      	nop
    478c:	0000f0f4 	.word	0x0000f0f4
    4790:	40048000 	.word	0x40048000

00004794 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4794:	b084      	sub	sp, #16
    4796:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4798:	9b01      	ldr	r3, [sp, #4]
    479a:	681a      	ldr	r2, [r3, #0]
    479c:	490f      	ldr	r1, [pc, #60]	; (47dc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    479e:	4613      	mov	r3, r2
    47a0:	00db      	lsls	r3, r3, #3
    47a2:	4413      	add	r3, r2
    47a4:	440b      	add	r3, r1
    47a6:	3304      	adds	r3, #4
    47a8:	781b      	ldrb	r3, [r3, #0]
    47aa:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    47ac:	4a0c      	ldr	r2, [pc, #48]	; (47e0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    47ae:	9b03      	ldr	r3, [sp, #12]
    47b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    47b4:	490a      	ldr	r1, [pc, #40]	; (47e0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    47b6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    47ba:	9b03      	ldr	r3, [sp, #12]
    47bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    47c0:	4a07      	ldr	r2, [pc, #28]	; (47e0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    47c2:	9b03      	ldr	r3, [sp, #12]
    47c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    47c8:	4905      	ldr	r1, [pc, #20]	; (47e0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    47ca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    47ce:	9b03      	ldr	r3, [sp, #12]
    47d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    47d4:	bf00      	nop
    47d6:	b004      	add	sp, #16
    47d8:	4770      	bx	lr
    47da:	bf00      	nop
    47dc:	0000ede4 	.word	0x0000ede4
    47e0:	40065000 	.word	0x40065000

000047e4 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47e4:	b086      	sub	sp, #24
    47e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    47e8:	9b01      	ldr	r3, [sp, #4]
    47ea:	681a      	ldr	r2, [r3, #0]
    47ec:	4912      	ldr	r1, [pc, #72]	; (4838 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    47ee:	4613      	mov	r3, r2
    47f0:	00db      	lsls	r3, r3, #3
    47f2:	4413      	add	r3, r2
    47f4:	440b      	add	r3, r1
    47f6:	3304      	adds	r3, #4
    47f8:	781b      	ldrb	r3, [r3, #0]
    47fa:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47fc:	9b01      	ldr	r3, [sp, #4]
    47fe:	685b      	ldr	r3, [r3, #4]
    4800:	4a0e      	ldr	r2, [pc, #56]	; (483c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4802:	5cd3      	ldrb	r3, [r2, r3]
    4804:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4806:	4a0e      	ldr	r2, [pc, #56]	; (4840 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4808:	9b05      	ldr	r3, [sp, #20]
    480a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    480e:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4810:	9b03      	ldr	r3, [sp, #12]
    4812:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4816:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4818:	9b04      	ldr	r3, [sp, #16]
    481a:	061b      	lsls	r3, r3, #24
    481c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4820:	9a03      	ldr	r2, [sp, #12]
    4822:	4313      	orrs	r3, r2
    4824:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4826:	4906      	ldr	r1, [pc, #24]	; (4840 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4828:	9b05      	ldr	r3, [sp, #20]
    482a:	9a03      	ldr	r2, [sp, #12]
    482c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4830:	bf00      	nop
    4832:	b006      	add	sp, #24
    4834:	4770      	bx	lr
    4836:	bf00      	nop
    4838:	0000ede4 	.word	0x0000ede4
    483c:	0000f17c 	.word	0x0000f17c
    4840:	40065000 	.word	0x40065000

00004844 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4844:	b084      	sub	sp, #16
    4846:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4848:	4b0b      	ldr	r3, [pc, #44]	; (4878 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    484a:	7f1b      	ldrb	r3, [r3, #28]
    484c:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    484e:	4b0b      	ldr	r3, [pc, #44]	; (487c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4850:	685b      	ldr	r3, [r3, #4]
    4852:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4854:	9b02      	ldr	r3, [sp, #8]
    4856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    485a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    485c:	9b03      	ldr	r3, [sp, #12]
    485e:	031b      	lsls	r3, r3, #12
    4860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4864:	9a02      	ldr	r2, [sp, #8]
    4866:	4313      	orrs	r3, r2
    4868:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    486a:	4a04      	ldr	r2, [pc, #16]	; (487c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    486c:	9b02      	ldr	r3, [sp, #8]
    486e:	6053      	str	r3, [r2, #4]
}
    4870:	bf00      	nop
    4872:	b004      	add	sp, #16
    4874:	4770      	bx	lr
    4876:	bf00      	nop
    4878:	0000f0f4 	.word	0x0000f0f4
    487c:	40048000 	.word	0x40048000

00004880 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4880:	b084      	sub	sp, #16
    4882:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4884:	9b01      	ldr	r3, [sp, #4]
    4886:	685b      	ldr	r3, [r3, #4]
    4888:	4a0b      	ldr	r2, [pc, #44]	; (48b8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    488a:	5cd3      	ldrb	r3, [r2, r3]
    488c:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    488e:	4b0b      	ldr	r3, [pc, #44]	; (48bc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4890:	685b      	ldr	r3, [r3, #4]
    4892:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4894:	9b02      	ldr	r3, [sp, #8]
    4896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    489a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    489c:	9b03      	ldr	r3, [sp, #12]
    489e:	031b      	lsls	r3, r3, #12
    48a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    48a4:	9a02      	ldr	r2, [sp, #8]
    48a6:	4313      	orrs	r3, r2
    48a8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    48aa:	4a04      	ldr	r2, [pc, #16]	; (48bc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    48ac:	9b02      	ldr	r3, [sp, #8]
    48ae:	6053      	str	r3, [r2, #4]
}
    48b0:	bf00      	nop
    48b2:	b004      	add	sp, #16
    48b4:	4770      	bx	lr
    48b6:	bf00      	nop
    48b8:	0000f0f4 	.word	0x0000f0f4
    48bc:	40048000 	.word	0x40048000

000048c0 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    48c0:	b500      	push	{lr}
    48c2:	b085      	sub	sp, #20
    48c4:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    48c6:	2300      	movs	r3, #0
    48c8:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    48cc:	9b01      	ldr	r3, [sp, #4]
    48ce:	2b00      	cmp	r3, #0
    48d0:	d037      	beq.n	4942 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    48d2:	2300      	movs	r3, #0
    48d4:	9303      	str	r3, [sp, #12]
    48d6:	e02b      	b.n	4930 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    48d8:	4b29      	ldr	r3, [pc, #164]	; (4980 <DisableSafeClock+0xc0>)
    48da:	6819      	ldr	r1, [r3, #0]
    48dc:	9a03      	ldr	r2, [sp, #12]
    48de:	4613      	mov	r3, r2
    48e0:	005b      	lsls	r3, r3, #1
    48e2:	4413      	add	r3, r2
    48e4:	009b      	lsls	r3, r3, #2
    48e6:	440b      	add	r3, r1
    48e8:	3314      	adds	r3, #20
    48ea:	681b      	ldr	r3, [r3, #0]
    48ec:	2b05      	cmp	r3, #5
    48ee:	d11c      	bne.n	492a <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    48f0:	2301      	movs	r3, #1
    48f2:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    48f6:	4b22      	ldr	r3, [pc, #136]	; (4980 <DisableSafeClock+0xc0>)
    48f8:	6819      	ldr	r1, [r3, #0]
    48fa:	9a03      	ldr	r2, [sp, #12]
    48fc:	4613      	mov	r3, r2
    48fe:	005b      	lsls	r3, r3, #1
    4900:	4413      	add	r3, r2
    4902:	009b      	lsls	r3, r3, #2
    4904:	440b      	add	r3, r1
    4906:	3318      	adds	r3, #24
    4908:	881b      	ldrh	r3, [r3, #0]
    490a:	2b00      	cmp	r3, #0
    490c:	d118      	bne.n	4940 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    490e:	4b1d      	ldr	r3, [pc, #116]	; (4984 <DisableSafeClock+0xc4>)
    4910:	791b      	ldrb	r3, [r3, #4]
    4912:	4619      	mov	r1, r3
    4914:	4a1c      	ldr	r2, [pc, #112]	; (4988 <DisableSafeClock+0xc8>)
    4916:	460b      	mov	r3, r1
    4918:	005b      	lsls	r3, r3, #1
    491a:	440b      	add	r3, r1
    491c:	009b      	lsls	r3, r3, #2
    491e:	4413      	add	r3, r2
    4920:	3308      	adds	r3, #8
    4922:	681b      	ldr	r3, [r3, #0]
    4924:	2005      	movs	r0, #5
    4926:	4798      	blx	r3
                }
                break;
    4928:	e00a      	b.n	4940 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    492a:	9b03      	ldr	r3, [sp, #12]
    492c:	3301      	adds	r3, #1
    492e:	9303      	str	r3, [sp, #12]
    4930:	4b13      	ldr	r3, [pc, #76]	; (4980 <DisableSafeClock+0xc0>)
    4932:	681b      	ldr	r3, [r3, #0]
    4934:	7a1b      	ldrb	r3, [r3, #8]
    4936:	461a      	mov	r2, r3
    4938:	9b03      	ldr	r3, [sp, #12]
    493a:	4293      	cmp	r3, r2
    493c:	d3cc      	bcc.n	48d8 <DisableSafeClock+0x18>
    493e:	e000      	b.n	4942 <DisableSafeClock+0x82>
                break;
    4940:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4942:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4946:	f083 0301 	eor.w	r3, r3, #1
    494a:	b2db      	uxtb	r3, r3
    494c:	2b00      	cmp	r3, #0
    494e:	d013      	beq.n	4978 <DisableSafeClock+0xb8>
    4950:	4b0e      	ldr	r3, [pc, #56]	; (498c <DisableSafeClock+0xcc>)
    4952:	781b      	ldrb	r3, [r3, #0]
    4954:	f083 0301 	eor.w	r3, r3, #1
    4958:	b2db      	uxtb	r3, r3
    495a:	2b00      	cmp	r3, #0
    495c:	d00c      	beq.n	4978 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    495e:	4b09      	ldr	r3, [pc, #36]	; (4984 <DisableSafeClock+0xc4>)
    4960:	791b      	ldrb	r3, [r3, #4]
    4962:	4619      	mov	r1, r3
    4964:	4a08      	ldr	r2, [pc, #32]	; (4988 <DisableSafeClock+0xc8>)
    4966:	460b      	mov	r3, r1
    4968:	005b      	lsls	r3, r3, #1
    496a:	440b      	add	r3, r1
    496c:	009b      	lsls	r3, r3, #2
    496e:	4413      	add	r3, r2
    4970:	3308      	adds	r3, #8
    4972:	681b      	ldr	r3, [r3, #0]
    4974:	2005      	movs	r0, #5
    4976:	4798      	blx	r3
    }
}
    4978:	bf00      	nop
    497a:	b005      	add	sp, #20
    497c:	f85d fb04 	ldr.w	pc, [sp], #4
    4980:	1fff8b9c 	.word	0x1fff8b9c
    4984:	0000ed74 	.word	0x0000ed74
    4988:	0000f3a4 	.word	0x0000f3a4
    498c:	1fff8b20 	.word	0x1fff8b20

00004990 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4990:	4b06      	ldr	r3, [pc, #24]	; (49ac <SetFircToResetValue_TrustedCall+0x1c>)
    4992:	2200      	movs	r2, #0
    4994:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4998:	4b04      	ldr	r3, [pc, #16]	; (49ac <SetFircToResetValue_TrustedCall+0x1c>)
    499a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    499e:	4a03      	ldr	r2, [pc, #12]	; (49ac <SetFircToResetValue_TrustedCall+0x1c>)
    49a0:	f043 0301 	orr.w	r3, r3, #1
    49a4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    49a8:	bf00      	nop
    49aa:	4770      	bx	lr
    49ac:	40064000 	.word	0x40064000

000049b0 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    49b0:	b084      	sub	sp, #16
    49b2:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    49b4:	2303      	movs	r3, #3
    49b6:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    49b8:	2300      	movs	r3, #0
    49ba:	9302      	str	r3, [sp, #8]
    49bc:	e028      	b.n	4a10 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    49be:	9b01      	ldr	r3, [sp, #4]
    49c0:	9a02      	ldr	r2, [sp, #8]
    49c2:	320d      	adds	r2, #13
    49c4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    49c8:	2b28      	cmp	r3, #40	; 0x28
    49ca:	d10b      	bne.n	49e4 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    49cc:	9a01      	ldr	r2, [sp, #4]
    49ce:	9b02      	ldr	r3, [sp, #8]
    49d0:	330d      	adds	r3, #13
    49d2:	00db      	lsls	r3, r3, #3
    49d4:	4413      	add	r3, r2
    49d6:	685b      	ldr	r3, [r3, #4]
    49d8:	4a2b      	ldr	r2, [pc, #172]	; (4a88 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    49da:	5cd3      	ldrb	r3, [r2, r3]
    49dc:	011b      	lsls	r3, r3, #4
    49de:	9a03      	ldr	r2, [sp, #12]
    49e0:	4313      	orrs	r3, r2
    49e2:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    49e4:	9b01      	ldr	r3, [sp, #4]
    49e6:	9a02      	ldr	r2, [sp, #8]
    49e8:	320d      	adds	r2, #13
    49ea:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    49ee:	2b29      	cmp	r3, #41	; 0x29
    49f0:	d10b      	bne.n	4a0a <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    49f2:	9a01      	ldr	r2, [sp, #4]
    49f4:	9b02      	ldr	r3, [sp, #8]
    49f6:	330d      	adds	r3, #13
    49f8:	00db      	lsls	r3, r3, #3
    49fa:	4413      	add	r3, r2
    49fc:	685b      	ldr	r3, [r3, #4]
    49fe:	4a23      	ldr	r2, [pc, #140]	; (4a8c <SetSimLpoclksRegister_TrustedCall+0xdc>)
    4a00:	5cd3      	ldrb	r3, [r2, r3]
    4a02:	009b      	lsls	r3, r3, #2
    4a04:	9a03      	ldr	r2, [sp, #12]
    4a06:	4313      	orrs	r3, r2
    4a08:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4a0a:	9b02      	ldr	r3, [sp, #8]
    4a0c:	3301      	adds	r3, #1
    4a0e:	9302      	str	r3, [sp, #8]
    4a10:	9b01      	ldr	r3, [sp, #4]
    4a12:	7adb      	ldrb	r3, [r3, #11]
    4a14:	461a      	mov	r2, r3
    4a16:	9b02      	ldr	r3, [sp, #8]
    4a18:	4293      	cmp	r3, r2
    4a1a:	d3d0      	bcc.n	49be <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4a1c:	2300      	movs	r3, #0
    4a1e:	9302      	str	r3, [sp, #8]
    4a20:	e026      	b.n	4a70 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4a22:	9a01      	ldr	r2, [sp, #4]
    4a24:	9b02      	ldr	r3, [sp, #8]
    4a26:	334e      	adds	r3, #78	; 0x4e
    4a28:	00db      	lsls	r3, r3, #3
    4a2a:	4413      	add	r3, r2
    4a2c:	685b      	ldr	r3, [r3, #4]
    4a2e:	2b12      	cmp	r3, #18
    4a30:	d109      	bne.n	4a46 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4a32:	9a01      	ldr	r2, [sp, #4]
    4a34:	9b02      	ldr	r3, [sp, #8]
    4a36:	334e      	adds	r3, #78	; 0x4e
    4a38:	00db      	lsls	r3, r3, #3
    4a3a:	4413      	add	r3, r2
    4a3c:	891b      	ldrh	r3, [r3, #8]
    4a3e:	005b      	lsls	r3, r3, #1
    4a40:	9a03      	ldr	r2, [sp, #12]
    4a42:	4313      	orrs	r3, r2
    4a44:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4a46:	9a01      	ldr	r2, [sp, #4]
    4a48:	9b02      	ldr	r3, [sp, #8]
    4a4a:	334e      	adds	r3, #78	; 0x4e
    4a4c:	00db      	lsls	r3, r3, #3
    4a4e:	4413      	add	r3, r2
    4a50:	685b      	ldr	r3, [r3, #4]
    4a52:	2b13      	cmp	r3, #19
    4a54:	d109      	bne.n	4a6a <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4a56:	9a01      	ldr	r2, [sp, #4]
    4a58:	9b02      	ldr	r3, [sp, #8]
    4a5a:	334e      	adds	r3, #78	; 0x4e
    4a5c:	00db      	lsls	r3, r3, #3
    4a5e:	4413      	add	r3, r2
    4a60:	891b      	ldrh	r3, [r3, #8]
    4a62:	461a      	mov	r2, r3
    4a64:	9b03      	ldr	r3, [sp, #12]
    4a66:	4313      	orrs	r3, r2
    4a68:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4a6a:	9b02      	ldr	r3, [sp, #8]
    4a6c:	3301      	adds	r3, #1
    4a6e:	9302      	str	r3, [sp, #8]
    4a70:	9b01      	ldr	r3, [sp, #4]
    4a72:	7c1b      	ldrb	r3, [r3, #16]
    4a74:	461a      	mov	r2, r3
    4a76:	9b02      	ldr	r3, [sp, #8]
    4a78:	4293      	cmp	r3, r2
    4a7a:	d3d2      	bcc.n	4a22 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4a7c:	4a04      	ldr	r2, [pc, #16]	; (4a90 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4a7e:	9b03      	ldr	r3, [sp, #12]
    4a80:	6113      	str	r3, [r2, #16]
}
    4a82:	bf00      	nop
    4a84:	b004      	add	sp, #16
    4a86:	4770      	bx	lr
    4a88:	0000f0f4 	.word	0x0000f0f4
    4a8c:	0000f1ac 	.word	0x0000f1ac
    4a90:	40048000 	.word	0x40048000

00004a94 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4a94:	b500      	push	{lr}
    4a96:	b089      	sub	sp, #36	; 0x24
    4a98:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4a9a:	2300      	movs	r3, #0
    4a9c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4aa0:	4a21      	ldr	r2, [pc, #132]	; (4b28 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4aa2:	9b01      	ldr	r3, [sp, #4]
    4aa4:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4aa6:	4b21      	ldr	r3, [pc, #132]	; (4b2c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4aa8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4aac:	f003 0301 	and.w	r3, r3, #1
    4ab0:	2b00      	cmp	r3, #0
    4ab2:	d12e      	bne.n	4b12 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4ab4:	4b1e      	ldr	r3, [pc, #120]	; (4b30 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4ab6:	2200      	movs	r2, #0
    4ab8:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4aba:	f7ff ff69 	bl	4990 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4abe:	aa03      	add	r2, sp, #12
    4ac0:	a904      	add	r1, sp, #16
    4ac2:	a805      	add	r0, sp, #20
    4ac4:	f24c 3350 	movw	r3, #50000	; 0xc350
    4ac8:	f7fe f8ae 	bl	2c28 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4acc:	4b17      	ldr	r3, [pc, #92]	; (4b2c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4ace:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ad2:	0e1b      	lsrs	r3, r3, #24
    4ad4:	f003 0301 	and.w	r3, r3, #1
    4ad8:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4ada:	9a03      	ldr	r2, [sp, #12]
    4adc:	a904      	add	r1, sp, #16
    4ade:	ab05      	add	r3, sp, #20
    4ae0:	4618      	mov	r0, r3
    4ae2:	f7fe f8bb 	bl	2c5c <Clock_Ip_TimeoutExpired>
    4ae6:	4603      	mov	r3, r0
    4ae8:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4aec:	9b06      	ldr	r3, [sp, #24]
    4aee:	2b00      	cmp	r3, #0
    4af0:	d106      	bne.n	4b00 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4af2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4af6:	f083 0301 	eor.w	r3, r3, #1
    4afa:	b2db      	uxtb	r3, r3
    4afc:	2b00      	cmp	r3, #0
    4afe:	d1e5      	bne.n	4acc <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4b00:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4b04:	2b00      	cmp	r3, #0
    4b06:	d007      	beq.n	4b18 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4b08:	2105      	movs	r1, #5
    4b0a:	2001      	movs	r0, #1
    4b0c:	f7fe f87c 	bl	2c08 <Clock_Ip_ReportClockErrors>
    4b10:	e002      	b.n	4b18 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4b12:	4b07      	ldr	r3, [pc, #28]	; (4b30 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4b14:	2201      	movs	r2, #1
    4b16:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4b18:	9801      	ldr	r0, [sp, #4]
    4b1a:	f7ff ff49 	bl	49b0 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4b1e:	bf00      	nop
    4b20:	b009      	add	sp, #36	; 0x24
    4b22:	f85d fb04 	ldr.w	pc, [sp], #4
    4b26:	bf00      	nop
    4b28:	1fff8b9c 	.word	0x1fff8b9c
    4b2c:	40064000 	.word	0x40064000
    4b30:	1fff8b20 	.word	0x1fff8b20

00004b34 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4b34:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4b36:	2300      	movs	r3, #0
    4b38:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4b3a:	4b29      	ldr	r3, [pc, #164]	; (4be0 <getFircConfig+0xac>)
    4b3c:	681b      	ldr	r3, [r3, #0]
    4b3e:	2b00      	cmp	r3, #0
    4b40:	d024      	beq.n	4b8c <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b42:	2300      	movs	r3, #0
    4b44:	9301      	str	r3, [sp, #4]
    4b46:	e01a      	b.n	4b7e <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4b48:	4b25      	ldr	r3, [pc, #148]	; (4be0 <getFircConfig+0xac>)
    4b4a:	6819      	ldr	r1, [r3, #0]
    4b4c:	9a01      	ldr	r2, [sp, #4]
    4b4e:	4613      	mov	r3, r2
    4b50:	005b      	lsls	r3, r3, #1
    4b52:	4413      	add	r3, r2
    4b54:	009b      	lsls	r3, r3, #2
    4b56:	440b      	add	r3, r1
    4b58:	3314      	adds	r3, #20
    4b5a:	681b      	ldr	r3, [r3, #0]
    4b5c:	2b05      	cmp	r3, #5
    4b5e:	d10b      	bne.n	4b78 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4b60:	4b1f      	ldr	r3, [pc, #124]	; (4be0 <getFircConfig+0xac>)
    4b62:	6819      	ldr	r1, [r3, #0]
    4b64:	9a01      	ldr	r2, [sp, #4]
    4b66:	4613      	mov	r3, r2
    4b68:	005b      	lsls	r3, r3, #1
    4b6a:	4413      	add	r3, r2
    4b6c:	009b      	lsls	r3, r3, #2
    4b6e:	3310      	adds	r3, #16
    4b70:	440b      	add	r3, r1
    4b72:	3304      	adds	r3, #4
    4b74:	9300      	str	r3, [sp, #0]
                break;
    4b76:	e009      	b.n	4b8c <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b78:	9b01      	ldr	r3, [sp, #4]
    4b7a:	3301      	adds	r3, #1
    4b7c:	9301      	str	r3, [sp, #4]
    4b7e:	4b18      	ldr	r3, [pc, #96]	; (4be0 <getFircConfig+0xac>)
    4b80:	681b      	ldr	r3, [r3, #0]
    4b82:	7a1b      	ldrb	r3, [r3, #8]
    4b84:	461a      	mov	r2, r3
    4b86:	9b01      	ldr	r3, [sp, #4]
    4b88:	4293      	cmp	r3, r2
    4b8a:	d3dd      	bcc.n	4b48 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b8c:	9b00      	ldr	r3, [sp, #0]
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d121      	bne.n	4bd6 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4b92:	4b14      	ldr	r3, [pc, #80]	; (4be4 <getFircConfig+0xb0>)
    4b94:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4b96:	4b13      	ldr	r3, [pc, #76]	; (4be4 <getFircConfig+0xb0>)
    4b98:	2205      	movs	r2, #5
    4b9a:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4b9c:	4b12      	ldr	r3, [pc, #72]	; (4be8 <getFircConfig+0xb4>)
    4b9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ba2:	b29b      	uxth	r3, r3
    4ba4:	f003 0301 	and.w	r3, r3, #1
    4ba8:	b29a      	uxth	r2, r3
    4baa:	4b0e      	ldr	r3, [pc, #56]	; (4be4 <getFircConfig+0xb0>)
    4bac:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4bae:	4b0e      	ldr	r3, [pc, #56]	; (4be8 <getFircConfig+0xb4>)
    4bb0:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4bb4:	b2db      	uxtb	r3, r3
    4bb6:	f003 0303 	and.w	r3, r3, #3
    4bba:	b2da      	uxtb	r2, r3
    4bbc:	4b09      	ldr	r3, [pc, #36]	; (4be4 <getFircConfig+0xb0>)
    4bbe:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4bc0:	4b09      	ldr	r3, [pc, #36]	; (4be8 <getFircConfig+0xb4>)
    4bc2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4bc6:	b2db      	uxtb	r3, r3
    4bc8:	10db      	asrs	r3, r3, #3
    4bca:	b2db      	uxtb	r3, r3
    4bcc:	f003 0301 	and.w	r3, r3, #1
    4bd0:	b2da      	uxtb	r2, r3
    4bd2:	4b04      	ldr	r3, [pc, #16]	; (4be4 <getFircConfig+0xb0>)
    4bd4:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4bd6:	9b00      	ldr	r3, [sp, #0]
}
    4bd8:	4618      	mov	r0, r3
    4bda:	b002      	add	sp, #8
    4bdc:	4770      	bx	lr
    4bde:	bf00      	nop
    4be0:	1fff8b9c 	.word	0x1fff8b9c
    4be4:	1fff8c08 	.word	0x1fff8c08
    4be8:	40064000 	.word	0x40064000

00004bec <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4bec:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4bee:	2300      	movs	r3, #0
    4bf0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4bf2:	4b20      	ldr	r3, [pc, #128]	; (4c74 <getSoscConfig+0x88>)
    4bf4:	681b      	ldr	r3, [r3, #0]
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d024      	beq.n	4c44 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4bfa:	2300      	movs	r3, #0
    4bfc:	9301      	str	r3, [sp, #4]
    4bfe:	e01a      	b.n	4c36 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4c00:	4b1c      	ldr	r3, [pc, #112]	; (4c74 <getSoscConfig+0x88>)
    4c02:	6819      	ldr	r1, [r3, #0]
    4c04:	9a01      	ldr	r2, [sp, #4]
    4c06:	4613      	mov	r3, r2
    4c08:	009b      	lsls	r3, r3, #2
    4c0a:	4413      	add	r3, r2
    4c0c:	009b      	lsls	r3, r3, #2
    4c0e:	440b      	add	r3, r1
    4c10:	332c      	adds	r3, #44	; 0x2c
    4c12:	681b      	ldr	r3, [r3, #0]
    4c14:	2b08      	cmp	r3, #8
    4c16:	d10b      	bne.n	4c30 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4c18:	4b16      	ldr	r3, [pc, #88]	; (4c74 <getSoscConfig+0x88>)
    4c1a:	6819      	ldr	r1, [r3, #0]
    4c1c:	9a01      	ldr	r2, [sp, #4]
    4c1e:	4613      	mov	r3, r2
    4c20:	009b      	lsls	r3, r3, #2
    4c22:	4413      	add	r3, r2
    4c24:	009b      	lsls	r3, r3, #2
    4c26:	3328      	adds	r3, #40	; 0x28
    4c28:	440b      	add	r3, r1
    4c2a:	3304      	adds	r3, #4
    4c2c:	9300      	str	r3, [sp, #0]
                break;
    4c2e:	e009      	b.n	4c44 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4c30:	9b01      	ldr	r3, [sp, #4]
    4c32:	3301      	adds	r3, #1
    4c34:	9301      	str	r3, [sp, #4]
    4c36:	4b0f      	ldr	r3, [pc, #60]	; (4c74 <getSoscConfig+0x88>)
    4c38:	681b      	ldr	r3, [r3, #0]
    4c3a:	7a5b      	ldrb	r3, [r3, #9]
    4c3c:	461a      	mov	r2, r3
    4c3e:	9b01      	ldr	r3, [sp, #4]
    4c40:	4293      	cmp	r3, r2
    4c42:	d3dd      	bcc.n	4c00 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4c44:	9b00      	ldr	r3, [sp, #0]
    4c46:	2b00      	cmp	r3, #0
    4c48:	d110      	bne.n	4c6c <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4c4a:	4b0b      	ldr	r3, [pc, #44]	; (4c78 <getSoscConfig+0x8c>)
    4c4c:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4c4e:	4b0a      	ldr	r3, [pc, #40]	; (4c78 <getSoscConfig+0x8c>)
    4c50:	2208      	movs	r2, #8
    4c52:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4c54:	4b09      	ldr	r3, [pc, #36]	; (4c7c <getSoscConfig+0x90>)
    4c56:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4c5a:	b29b      	uxth	r3, r3
    4c5c:	f003 0301 	and.w	r3, r3, #1
    4c60:	b29a      	uxth	r2, r3
    4c62:	4b05      	ldr	r3, [pc, #20]	; (4c78 <getSoscConfig+0x8c>)
    4c64:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4c66:	4b04      	ldr	r3, [pc, #16]	; (4c78 <getSoscConfig+0x8c>)
    4c68:	4a05      	ldr	r2, [pc, #20]	; (4c80 <getSoscConfig+0x94>)
    4c6a:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4c6c:	9b00      	ldr	r3, [sp, #0]
}
    4c6e:	4618      	mov	r0, r3
    4c70:	b002      	add	sp, #8
    4c72:	4770      	bx	lr
    4c74:	1fff8b9c 	.word	0x1fff8b9c
    4c78:	1fff8c14 	.word	0x1fff8c14
    4c7c:	40064000 	.word	0x40064000
    4c80:	02625a00 	.word	0x02625a00

00004c84 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4c84:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4c86:	2300      	movs	r3, #0
    4c88:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4c8a:	4b28      	ldr	r3, [pc, #160]	; (4d2c <getSpllConfig+0xa8>)
    4c8c:	681b      	ldr	r3, [r3, #0]
    4c8e:	2b00      	cmp	r3, #0
    4c90:	d023      	beq.n	4cda <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c92:	2300      	movs	r3, #0
    4c94:	9301      	str	r3, [sp, #4]
    4c96:	e019      	b.n	4ccc <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4c98:	4b24      	ldr	r3, [pc, #144]	; (4d2c <getSpllConfig+0xa8>)
    4c9a:	6819      	ldr	r1, [r3, #0]
    4c9c:	9a01      	ldr	r2, [sp, #4]
    4c9e:	4613      	mov	r3, r2
    4ca0:	009b      	lsls	r3, r3, #2
    4ca2:	4413      	add	r3, r2
    4ca4:	00db      	lsls	r3, r3, #3
    4ca6:	440b      	add	r3, r1
    4ca8:	3340      	adds	r3, #64	; 0x40
    4caa:	681b      	ldr	r3, [r3, #0]
    4cac:	2b09      	cmp	r3, #9
    4cae:	d10a      	bne.n	4cc6 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4cb0:	4b1e      	ldr	r3, [pc, #120]	; (4d2c <getSpllConfig+0xa8>)
    4cb2:	6819      	ldr	r1, [r3, #0]
    4cb4:	9a01      	ldr	r2, [sp, #4]
    4cb6:	4613      	mov	r3, r2
    4cb8:	009b      	lsls	r3, r3, #2
    4cba:	4413      	add	r3, r2
    4cbc:	00db      	lsls	r3, r3, #3
    4cbe:	3340      	adds	r3, #64	; 0x40
    4cc0:	440b      	add	r3, r1
    4cc2:	9300      	str	r3, [sp, #0]
                break;
    4cc4:	e009      	b.n	4cda <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4cc6:	9b01      	ldr	r3, [sp, #4]
    4cc8:	3301      	adds	r3, #1
    4cca:	9301      	str	r3, [sp, #4]
    4ccc:	4b17      	ldr	r3, [pc, #92]	; (4d2c <getSpllConfig+0xa8>)
    4cce:	681b      	ldr	r3, [r3, #0]
    4cd0:	7a9b      	ldrb	r3, [r3, #10]
    4cd2:	461a      	mov	r2, r3
    4cd4:	9b01      	ldr	r3, [sp, #4]
    4cd6:	4293      	cmp	r3, r2
    4cd8:	d3de      	bcc.n	4c98 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4cda:	9b00      	ldr	r3, [sp, #0]
    4cdc:	2b00      	cmp	r3, #0
    4cde:	d121      	bne.n	4d24 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4ce0:	4b13      	ldr	r3, [pc, #76]	; (4d30 <getSpllConfig+0xac>)
    4ce2:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4ce4:	4b12      	ldr	r3, [pc, #72]	; (4d30 <getSpllConfig+0xac>)
    4ce6:	2209      	movs	r2, #9
    4ce8:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4cea:	4b12      	ldr	r3, [pc, #72]	; (4d34 <getSpllConfig+0xb0>)
    4cec:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4cf0:	b29b      	uxth	r3, r3
    4cf2:	f003 0301 	and.w	r3, r3, #1
    4cf6:	b29a      	uxth	r2, r3
    4cf8:	4b0d      	ldr	r3, [pc, #52]	; (4d30 <getSpllConfig+0xac>)
    4cfa:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4cfc:	4b0d      	ldr	r3, [pc, #52]	; (4d34 <getSpllConfig+0xb0>)
    4cfe:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4d02:	0a1b      	lsrs	r3, r3, #8
    4d04:	b2db      	uxtb	r3, r3
    4d06:	f003 0307 	and.w	r3, r3, #7
    4d0a:	b2da      	uxtb	r2, r3
    4d0c:	4b08      	ldr	r3, [pc, #32]	; (4d30 <getSpllConfig+0xac>)
    4d0e:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4d10:	4b08      	ldr	r3, [pc, #32]	; (4d34 <getSpllConfig+0xb0>)
    4d12:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4d16:	0c1b      	lsrs	r3, r3, #16
    4d18:	b2db      	uxtb	r3, r3
    4d1a:	f003 031f 	and.w	r3, r3, #31
    4d1e:	b2da      	uxtb	r2, r3
    4d20:	4b03      	ldr	r3, [pc, #12]	; (4d30 <getSpllConfig+0xac>)
    4d22:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4d24:	9b00      	ldr	r3, [sp, #0]
}
    4d26:	4618      	mov	r0, r3
    4d28:	b002      	add	sp, #8
    4d2a:	4770      	bx	lr
    4d2c:	1fff8b9c 	.word	0x1fff8b9c
    4d30:	1fff8c28 	.word	0x1fff8c28
    4d34:	40064000 	.word	0x40064000

00004d38 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4d38:	b086      	sub	sp, #24
    4d3a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4d3c:	2300      	movs	r3, #0
    4d3e:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4d40:	9b01      	ldr	r3, [sp, #4]
    4d42:	2b1b      	cmp	r3, #27
    4d44:	d00f      	beq.n	4d66 <getSelectorConfig+0x2e>
    4d46:	9b01      	ldr	r3, [sp, #4]
    4d48:	2b1b      	cmp	r3, #27
    4d4a:	d80f      	bhi.n	4d6c <getSelectorConfig+0x34>
    4d4c:	9b01      	ldr	r3, [sp, #4]
    4d4e:	2b19      	cmp	r3, #25
    4d50:	d003      	beq.n	4d5a <getSelectorConfig+0x22>
    4d52:	9b01      	ldr	r3, [sp, #4]
    4d54:	2b1a      	cmp	r3, #26
    4d56:	d003      	beq.n	4d60 <getSelectorConfig+0x28>
    4d58:	e008      	b.n	4d6c <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4d5a:	2300      	movs	r3, #0
    4d5c:	9304      	str	r3, [sp, #16]
            break;
    4d5e:	e008      	b.n	4d72 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4d60:	2301      	movs	r3, #1
    4d62:	9304      	str	r3, [sp, #16]
            break;
    4d64:	e005      	b.n	4d72 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4d66:	2302      	movs	r3, #2
    4d68:	9304      	str	r3, [sp, #16]
            break;
    4d6a:	e002      	b.n	4d72 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4d6c:	2300      	movs	r3, #0
    4d6e:	9304      	str	r3, [sp, #16]
            break;
    4d70:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4d72:	4b36      	ldr	r3, [pc, #216]	; (4e4c <getSelectorConfig+0x114>)
    4d74:	681b      	ldr	r3, [r3, #0]
    4d76:	2b00      	cmp	r3, #0
    4d78:	d01d      	beq.n	4db6 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d7a:	2300      	movs	r3, #0
    4d7c:	9303      	str	r3, [sp, #12]
    4d7e:	e013      	b.n	4da8 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4d80:	4b32      	ldr	r3, [pc, #200]	; (4e4c <getSelectorConfig+0x114>)
    4d82:	681b      	ldr	r3, [r3, #0]
    4d84:	9a03      	ldr	r2, [sp, #12]
    4d86:	320d      	adds	r2, #13
    4d88:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4d8c:	9a01      	ldr	r2, [sp, #4]
    4d8e:	429a      	cmp	r2, r3
    4d90:	d107      	bne.n	4da2 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4d92:	4b2e      	ldr	r3, [pc, #184]	; (4e4c <getSelectorConfig+0x114>)
    4d94:	681a      	ldr	r2, [r3, #0]
    4d96:	9b03      	ldr	r3, [sp, #12]
    4d98:	330d      	adds	r3, #13
    4d9a:	00db      	lsls	r3, r3, #3
    4d9c:	4413      	add	r3, r2
    4d9e:	9305      	str	r3, [sp, #20]
                break;
    4da0:	e009      	b.n	4db6 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4da2:	9b03      	ldr	r3, [sp, #12]
    4da4:	3301      	adds	r3, #1
    4da6:	9303      	str	r3, [sp, #12]
    4da8:	4b28      	ldr	r3, [pc, #160]	; (4e4c <getSelectorConfig+0x114>)
    4daa:	681b      	ldr	r3, [r3, #0]
    4dac:	7adb      	ldrb	r3, [r3, #11]
    4dae:	461a      	mov	r2, r3
    4db0:	9b03      	ldr	r3, [sp, #12]
    4db2:	4293      	cmp	r3, r2
    4db4:	d3e4      	bcc.n	4d80 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4db6:	9b05      	ldr	r3, [sp, #20]
    4db8:	2b00      	cmp	r3, #0
    4dba:	d140      	bne.n	4e3e <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4dbc:	9b04      	ldr	r3, [sp, #16]
    4dbe:	00db      	lsls	r3, r3, #3
    4dc0:	4a23      	ldr	r2, [pc, #140]	; (4e50 <getSelectorConfig+0x118>)
    4dc2:	4413      	add	r3, r2
    4dc4:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4dc6:	4922      	ldr	r1, [pc, #136]	; (4e50 <getSelectorConfig+0x118>)
    4dc8:	9b04      	ldr	r3, [sp, #16]
    4dca:	9a01      	ldr	r2, [sp, #4]
    4dcc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4dd0:	9b01      	ldr	r3, [sp, #4]
    4dd2:	2b1b      	cmp	r3, #27
    4dd4:	d025      	beq.n	4e22 <getSelectorConfig+0xea>
    4dd6:	9b01      	ldr	r3, [sp, #4]
    4dd8:	2b1b      	cmp	r3, #27
    4dda:	d832      	bhi.n	4e42 <getSelectorConfig+0x10a>
    4ddc:	9b01      	ldr	r3, [sp, #4]
    4dde:	2b19      	cmp	r3, #25
    4de0:	d003      	beq.n	4dea <getSelectorConfig+0xb2>
    4de2:	9b01      	ldr	r3, [sp, #4]
    4de4:	2b1a      	cmp	r3, #26
    4de6:	d00e      	beq.n	4e06 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4de8:	e02b      	b.n	4e42 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4dea:	4b1a      	ldr	r3, [pc, #104]	; (4e54 <getSelectorConfig+0x11c>)
    4dec:	695b      	ldr	r3, [r3, #20]
    4dee:	0e1b      	lsrs	r3, r3, #24
    4df0:	f003 030f 	and.w	r3, r3, #15
    4df4:	4a18      	ldr	r2, [pc, #96]	; (4e58 <getSelectorConfig+0x120>)
    4df6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4dfa:	4915      	ldr	r1, [pc, #84]	; (4e50 <getSelectorConfig+0x118>)
    4dfc:	9b04      	ldr	r3, [sp, #16]
    4dfe:	00db      	lsls	r3, r3, #3
    4e00:	440b      	add	r3, r1
    4e02:	605a      	str	r2, [r3, #4]
                break;
    4e04:	e01e      	b.n	4e44 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4e06:	4b13      	ldr	r3, [pc, #76]	; (4e54 <getSelectorConfig+0x11c>)
    4e08:	699b      	ldr	r3, [r3, #24]
    4e0a:	0e1b      	lsrs	r3, r3, #24
    4e0c:	f003 030f 	and.w	r3, r3, #15
    4e10:	4a11      	ldr	r2, [pc, #68]	; (4e58 <getSelectorConfig+0x120>)
    4e12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4e16:	490e      	ldr	r1, [pc, #56]	; (4e50 <getSelectorConfig+0x118>)
    4e18:	9b04      	ldr	r3, [sp, #16]
    4e1a:	00db      	lsls	r3, r3, #3
    4e1c:	440b      	add	r3, r1
    4e1e:	605a      	str	r2, [r3, #4]
                break;
    4e20:	e010      	b.n	4e44 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4e22:	4b0c      	ldr	r3, [pc, #48]	; (4e54 <getSelectorConfig+0x11c>)
    4e24:	69db      	ldr	r3, [r3, #28]
    4e26:	0e1b      	lsrs	r3, r3, #24
    4e28:	f003 030f 	and.w	r3, r3, #15
    4e2c:	4a0a      	ldr	r2, [pc, #40]	; (4e58 <getSelectorConfig+0x120>)
    4e2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4e32:	4907      	ldr	r1, [pc, #28]	; (4e50 <getSelectorConfig+0x118>)
    4e34:	9b04      	ldr	r3, [sp, #16]
    4e36:	00db      	lsls	r3, r3, #3
    4e38:	440b      	add	r3, r1
    4e3a:	605a      	str	r2, [r3, #4]
                break;
    4e3c:	e002      	b.n	4e44 <getSelectorConfig+0x10c>
        }
    }
    4e3e:	bf00      	nop
    4e40:	e000      	b.n	4e44 <getSelectorConfig+0x10c>
                break;
    4e42:	bf00      	nop

    return ReturnValue;
    4e44:	9b05      	ldr	r3, [sp, #20]
}
    4e46:	4618      	mov	r0, r3
    4e48:	b006      	add	sp, #24
    4e4a:	4770      	bx	lr
    4e4c:	1fff8b9c 	.word	0x1fff8b9c
    4e50:	1fff8c50 	.word	0x1fff8c50
    4e54:	40064000 	.word	0x40064000
    4e58:	0000f474 	.word	0x0000f474

00004e5c <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4e5c:	b086      	sub	sp, #24
    4e5e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4e60:	2300      	movs	r3, #0
    4e62:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4e64:	2300      	movs	r3, #0
    4e66:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4e68:	9b01      	ldr	r3, [sp, #4]
    4e6a:	2b1f      	cmp	r3, #31
    4e6c:	d00f      	beq.n	4e8e <getCoreDividerConfig+0x32>
    4e6e:	9b01      	ldr	r3, [sp, #4]
    4e70:	2b1f      	cmp	r3, #31
    4e72:	d80f      	bhi.n	4e94 <getCoreDividerConfig+0x38>
    4e74:	9b01      	ldr	r3, [sp, #4]
    4e76:	2b1d      	cmp	r3, #29
    4e78:	d003      	beq.n	4e82 <getCoreDividerConfig+0x26>
    4e7a:	9b01      	ldr	r3, [sp, #4]
    4e7c:	2b1e      	cmp	r3, #30
    4e7e:	d003      	beq.n	4e88 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e80:	e008      	b.n	4e94 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4e82:	2300      	movs	r3, #0
    4e84:	9304      	str	r3, [sp, #16]
            break;
    4e86:	e006      	b.n	4e96 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4e88:	2301      	movs	r3, #1
    4e8a:	9304      	str	r3, [sp, #16]
            break;
    4e8c:	e003      	b.n	4e96 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4e8e:	2302      	movs	r3, #2
    4e90:	9304      	str	r3, [sp, #16]
            break;
    4e92:	e000      	b.n	4e96 <getCoreDividerConfig+0x3a>
                break;
    4e94:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4e96:	4b41      	ldr	r3, [pc, #260]	; (4f9c <getCoreDividerConfig+0x140>)
    4e98:	681b      	ldr	r3, [r3, #0]
    4e9a:	2b00      	cmp	r3, #0
    4e9c:	d026      	beq.n	4eec <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e9e:	2300      	movs	r3, #0
    4ea0:	9303      	str	r3, [sp, #12]
    4ea2:	e01c      	b.n	4ede <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4ea4:	4b3d      	ldr	r3, [pc, #244]	; (4f9c <getCoreDividerConfig+0x140>)
    4ea6:	6819      	ldr	r1, [r3, #0]
    4ea8:	9a03      	ldr	r2, [sp, #12]
    4eaa:	4613      	mov	r3, r2
    4eac:	005b      	lsls	r3, r3, #1
    4eae:	4413      	add	r3, r2
    4eb0:	009b      	lsls	r3, r3, #2
    4eb2:	440b      	add	r3, r1
    4eb4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4eb8:	681b      	ldr	r3, [r3, #0]
    4eba:	9a01      	ldr	r2, [sp, #4]
    4ebc:	429a      	cmp	r2, r3
    4ebe:	d10b      	bne.n	4ed8 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4ec0:	4b36      	ldr	r3, [pc, #216]	; (4f9c <getCoreDividerConfig+0x140>)
    4ec2:	6819      	ldr	r1, [r3, #0]
    4ec4:	9a03      	ldr	r2, [sp, #12]
    4ec6:	4613      	mov	r3, r2
    4ec8:	005b      	lsls	r3, r3, #1
    4eca:	4413      	add	r3, r2
    4ecc:	009b      	lsls	r3, r3, #2
    4ece:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4ed2:	440b      	add	r3, r1
    4ed4:	9305      	str	r3, [sp, #20]
                break;
    4ed6:	e009      	b.n	4eec <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4ed8:	9b03      	ldr	r3, [sp, #12]
    4eda:	3301      	adds	r3, #1
    4edc:	9303      	str	r3, [sp, #12]
    4ede:	4b2f      	ldr	r3, [pc, #188]	; (4f9c <getCoreDividerConfig+0x140>)
    4ee0:	681b      	ldr	r3, [r3, #0]
    4ee2:	7b1b      	ldrb	r3, [r3, #12]
    4ee4:	461a      	mov	r2, r3
    4ee6:	9b03      	ldr	r3, [sp, #12]
    4ee8:	4293      	cmp	r3, r2
    4eea:	d3db      	bcc.n	4ea4 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4eec:	9b05      	ldr	r3, [sp, #20]
    4eee:	2b00      	cmp	r3, #0
    4ef0:	d14d      	bne.n	4f8e <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4ef2:	9a04      	ldr	r2, [sp, #16]
    4ef4:	4613      	mov	r3, r2
    4ef6:	005b      	lsls	r3, r3, #1
    4ef8:	4413      	add	r3, r2
    4efa:	009b      	lsls	r3, r3, #2
    4efc:	4a28      	ldr	r2, [pc, #160]	; (4fa0 <getCoreDividerConfig+0x144>)
    4efe:	4413      	add	r3, r2
    4f00:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4f02:	4927      	ldr	r1, [pc, #156]	; (4fa0 <getCoreDividerConfig+0x144>)
    4f04:	9a04      	ldr	r2, [sp, #16]
    4f06:	4613      	mov	r3, r2
    4f08:	005b      	lsls	r3, r3, #1
    4f0a:	4413      	add	r3, r2
    4f0c:	009b      	lsls	r3, r3, #2
    4f0e:	440b      	add	r3, r1
    4f10:	9a01      	ldr	r2, [sp, #4]
    4f12:	601a      	str	r2, [r3, #0]
        switch(Name)
    4f14:	9b01      	ldr	r3, [sp, #4]
    4f16:	2b1f      	cmp	r3, #31
    4f18:	d029      	beq.n	4f6e <getCoreDividerConfig+0x112>
    4f1a:	9b01      	ldr	r3, [sp, #4]
    4f1c:	2b1f      	cmp	r3, #31
    4f1e:	d838      	bhi.n	4f92 <getCoreDividerConfig+0x136>
    4f20:	9b01      	ldr	r3, [sp, #4]
    4f22:	2b1d      	cmp	r3, #29
    4f24:	d003      	beq.n	4f2e <getCoreDividerConfig+0xd2>
    4f26:	9b01      	ldr	r3, [sp, #4]
    4f28:	2b1e      	cmp	r3, #30
    4f2a:	d010      	beq.n	4f4e <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f2c:	e031      	b.n	4f92 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4f2e:	4b1d      	ldr	r3, [pc, #116]	; (4fa4 <getCoreDividerConfig+0x148>)
    4f30:	695b      	ldr	r3, [r3, #20]
    4f32:	0c1b      	lsrs	r3, r3, #16
    4f34:	f003 030f 	and.w	r3, r3, #15
    4f38:	1c59      	adds	r1, r3, #1
    4f3a:	4819      	ldr	r0, [pc, #100]	; (4fa0 <getCoreDividerConfig+0x144>)
    4f3c:	9a04      	ldr	r2, [sp, #16]
    4f3e:	4613      	mov	r3, r2
    4f40:	005b      	lsls	r3, r3, #1
    4f42:	4413      	add	r3, r2
    4f44:	009b      	lsls	r3, r3, #2
    4f46:	4403      	add	r3, r0
    4f48:	3304      	adds	r3, #4
    4f4a:	6019      	str	r1, [r3, #0]
                break;
    4f4c:	e022      	b.n	4f94 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4f4e:	4b15      	ldr	r3, [pc, #84]	; (4fa4 <getCoreDividerConfig+0x148>)
    4f50:	699b      	ldr	r3, [r3, #24]
    4f52:	0c1b      	lsrs	r3, r3, #16
    4f54:	f003 030f 	and.w	r3, r3, #15
    4f58:	1c59      	adds	r1, r3, #1
    4f5a:	4811      	ldr	r0, [pc, #68]	; (4fa0 <getCoreDividerConfig+0x144>)
    4f5c:	9a04      	ldr	r2, [sp, #16]
    4f5e:	4613      	mov	r3, r2
    4f60:	005b      	lsls	r3, r3, #1
    4f62:	4413      	add	r3, r2
    4f64:	009b      	lsls	r3, r3, #2
    4f66:	4403      	add	r3, r0
    4f68:	3304      	adds	r3, #4
    4f6a:	6019      	str	r1, [r3, #0]
                break;
    4f6c:	e012      	b.n	4f94 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4f6e:	4b0d      	ldr	r3, [pc, #52]	; (4fa4 <getCoreDividerConfig+0x148>)
    4f70:	69db      	ldr	r3, [r3, #28]
    4f72:	0c1b      	lsrs	r3, r3, #16
    4f74:	f003 030f 	and.w	r3, r3, #15
    4f78:	1c59      	adds	r1, r3, #1
    4f7a:	4809      	ldr	r0, [pc, #36]	; (4fa0 <getCoreDividerConfig+0x144>)
    4f7c:	9a04      	ldr	r2, [sp, #16]
    4f7e:	4613      	mov	r3, r2
    4f80:	005b      	lsls	r3, r3, #1
    4f82:	4413      	add	r3, r2
    4f84:	009b      	lsls	r3, r3, #2
    4f86:	4403      	add	r3, r0
    4f88:	3304      	adds	r3, #4
    4f8a:	6019      	str	r1, [r3, #0]
                break;
    4f8c:	e002      	b.n	4f94 <getCoreDividerConfig+0x138>
        }
    }
    4f8e:	bf00      	nop
    4f90:	e000      	b.n	4f94 <getCoreDividerConfig+0x138>
                break;
    4f92:	bf00      	nop

    return ReturnValue;
    4f94:	9b05      	ldr	r3, [sp, #20]
}
    4f96:	4618      	mov	r0, r3
    4f98:	b006      	add	sp, #24
    4f9a:	4770      	bx	lr
    4f9c:	1fff8b9c 	.word	0x1fff8b9c
    4fa0:	1fff8c68 	.word	0x1fff8c68
    4fa4:	40064000 	.word	0x40064000

00004fa8 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4fa8:	b086      	sub	sp, #24
    4faa:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4fac:	2300      	movs	r3, #0
    4fae:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4fb0:	2300      	movs	r3, #0
    4fb2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4fb4:	9b01      	ldr	r3, [sp, #4]
    4fb6:	2b23      	cmp	r3, #35	; 0x23
    4fb8:	d00f      	beq.n	4fda <getBusDividerConfig+0x32>
    4fba:	9b01      	ldr	r3, [sp, #4]
    4fbc:	2b23      	cmp	r3, #35	; 0x23
    4fbe:	d80f      	bhi.n	4fe0 <getBusDividerConfig+0x38>
    4fc0:	9b01      	ldr	r3, [sp, #4]
    4fc2:	2b21      	cmp	r3, #33	; 0x21
    4fc4:	d003      	beq.n	4fce <getBusDividerConfig+0x26>
    4fc6:	9b01      	ldr	r3, [sp, #4]
    4fc8:	2b22      	cmp	r3, #34	; 0x22
    4fca:	d003      	beq.n	4fd4 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4fcc:	e008      	b.n	4fe0 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4fce:	2300      	movs	r3, #0
    4fd0:	9304      	str	r3, [sp, #16]
            break;
    4fd2:	e006      	b.n	4fe2 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4fd4:	2301      	movs	r3, #1
    4fd6:	9304      	str	r3, [sp, #16]
            break;
    4fd8:	e003      	b.n	4fe2 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4fda:	2302      	movs	r3, #2
    4fdc:	9304      	str	r3, [sp, #16]
            break;
    4fde:	e000      	b.n	4fe2 <getBusDividerConfig+0x3a>
                break;
    4fe0:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4fe2:	4b41      	ldr	r3, [pc, #260]	; (50e8 <getBusDividerConfig+0x140>)
    4fe4:	681b      	ldr	r3, [r3, #0]
    4fe6:	2b00      	cmp	r3, #0
    4fe8:	d026      	beq.n	5038 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fea:	2300      	movs	r3, #0
    4fec:	9303      	str	r3, [sp, #12]
    4fee:	e01c      	b.n	502a <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4ff0:	4b3d      	ldr	r3, [pc, #244]	; (50e8 <getBusDividerConfig+0x140>)
    4ff2:	6819      	ldr	r1, [r3, #0]
    4ff4:	9a03      	ldr	r2, [sp, #12]
    4ff6:	4613      	mov	r3, r2
    4ff8:	005b      	lsls	r3, r3, #1
    4ffa:	4413      	add	r3, r2
    4ffc:	009b      	lsls	r3, r3, #2
    4ffe:	440b      	add	r3, r1
    5000:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5004:	681b      	ldr	r3, [r3, #0]
    5006:	9a01      	ldr	r2, [sp, #4]
    5008:	429a      	cmp	r2, r3
    500a:	d10b      	bne.n	5024 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    500c:	4b36      	ldr	r3, [pc, #216]	; (50e8 <getBusDividerConfig+0x140>)
    500e:	6819      	ldr	r1, [r3, #0]
    5010:	9a03      	ldr	r2, [sp, #12]
    5012:	4613      	mov	r3, r2
    5014:	005b      	lsls	r3, r3, #1
    5016:	4413      	add	r3, r2
    5018:	009b      	lsls	r3, r3, #2
    501a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    501e:	440b      	add	r3, r1
    5020:	9305      	str	r3, [sp, #20]
                break;
    5022:	e009      	b.n	5038 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5024:	9b03      	ldr	r3, [sp, #12]
    5026:	3301      	adds	r3, #1
    5028:	9303      	str	r3, [sp, #12]
    502a:	4b2f      	ldr	r3, [pc, #188]	; (50e8 <getBusDividerConfig+0x140>)
    502c:	681b      	ldr	r3, [r3, #0]
    502e:	7b1b      	ldrb	r3, [r3, #12]
    5030:	461a      	mov	r2, r3
    5032:	9b03      	ldr	r3, [sp, #12]
    5034:	4293      	cmp	r3, r2
    5036:	d3db      	bcc.n	4ff0 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5038:	9b05      	ldr	r3, [sp, #20]
    503a:	2b00      	cmp	r3, #0
    503c:	d14d      	bne.n	50da <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    503e:	9a04      	ldr	r2, [sp, #16]
    5040:	4613      	mov	r3, r2
    5042:	005b      	lsls	r3, r3, #1
    5044:	4413      	add	r3, r2
    5046:	009b      	lsls	r3, r3, #2
    5048:	4a28      	ldr	r2, [pc, #160]	; (50ec <getBusDividerConfig+0x144>)
    504a:	4413      	add	r3, r2
    504c:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    504e:	4927      	ldr	r1, [pc, #156]	; (50ec <getBusDividerConfig+0x144>)
    5050:	9a04      	ldr	r2, [sp, #16]
    5052:	4613      	mov	r3, r2
    5054:	005b      	lsls	r3, r3, #1
    5056:	4413      	add	r3, r2
    5058:	009b      	lsls	r3, r3, #2
    505a:	440b      	add	r3, r1
    505c:	9a01      	ldr	r2, [sp, #4]
    505e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5060:	9b01      	ldr	r3, [sp, #4]
    5062:	2b23      	cmp	r3, #35	; 0x23
    5064:	d029      	beq.n	50ba <getBusDividerConfig+0x112>
    5066:	9b01      	ldr	r3, [sp, #4]
    5068:	2b23      	cmp	r3, #35	; 0x23
    506a:	d838      	bhi.n	50de <getBusDividerConfig+0x136>
    506c:	9b01      	ldr	r3, [sp, #4]
    506e:	2b21      	cmp	r3, #33	; 0x21
    5070:	d003      	beq.n	507a <getBusDividerConfig+0xd2>
    5072:	9b01      	ldr	r3, [sp, #4]
    5074:	2b22      	cmp	r3, #34	; 0x22
    5076:	d010      	beq.n	509a <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5078:	e031      	b.n	50de <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    507a:	4b1d      	ldr	r3, [pc, #116]	; (50f0 <getBusDividerConfig+0x148>)
    507c:	695b      	ldr	r3, [r3, #20]
    507e:	091b      	lsrs	r3, r3, #4
    5080:	f003 030f 	and.w	r3, r3, #15
    5084:	1c59      	adds	r1, r3, #1
    5086:	4819      	ldr	r0, [pc, #100]	; (50ec <getBusDividerConfig+0x144>)
    5088:	9a04      	ldr	r2, [sp, #16]
    508a:	4613      	mov	r3, r2
    508c:	005b      	lsls	r3, r3, #1
    508e:	4413      	add	r3, r2
    5090:	009b      	lsls	r3, r3, #2
    5092:	4403      	add	r3, r0
    5094:	3304      	adds	r3, #4
    5096:	6019      	str	r1, [r3, #0]
                break;
    5098:	e022      	b.n	50e0 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    509a:	4b15      	ldr	r3, [pc, #84]	; (50f0 <getBusDividerConfig+0x148>)
    509c:	699b      	ldr	r3, [r3, #24]
    509e:	091b      	lsrs	r3, r3, #4
    50a0:	f003 030f 	and.w	r3, r3, #15
    50a4:	1c59      	adds	r1, r3, #1
    50a6:	4811      	ldr	r0, [pc, #68]	; (50ec <getBusDividerConfig+0x144>)
    50a8:	9a04      	ldr	r2, [sp, #16]
    50aa:	4613      	mov	r3, r2
    50ac:	005b      	lsls	r3, r3, #1
    50ae:	4413      	add	r3, r2
    50b0:	009b      	lsls	r3, r3, #2
    50b2:	4403      	add	r3, r0
    50b4:	3304      	adds	r3, #4
    50b6:	6019      	str	r1, [r3, #0]
                break;
    50b8:	e012      	b.n	50e0 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    50ba:	4b0d      	ldr	r3, [pc, #52]	; (50f0 <getBusDividerConfig+0x148>)
    50bc:	69db      	ldr	r3, [r3, #28]
    50be:	091b      	lsrs	r3, r3, #4
    50c0:	f003 030f 	and.w	r3, r3, #15
    50c4:	1c59      	adds	r1, r3, #1
    50c6:	4809      	ldr	r0, [pc, #36]	; (50ec <getBusDividerConfig+0x144>)
    50c8:	9a04      	ldr	r2, [sp, #16]
    50ca:	4613      	mov	r3, r2
    50cc:	005b      	lsls	r3, r3, #1
    50ce:	4413      	add	r3, r2
    50d0:	009b      	lsls	r3, r3, #2
    50d2:	4403      	add	r3, r0
    50d4:	3304      	adds	r3, #4
    50d6:	6019      	str	r1, [r3, #0]
                break;
    50d8:	e002      	b.n	50e0 <getBusDividerConfig+0x138>
        }
    }
    50da:	bf00      	nop
    50dc:	e000      	b.n	50e0 <getBusDividerConfig+0x138>
                break;
    50de:	bf00      	nop

    return ReturnValue;
    50e0:	9b05      	ldr	r3, [sp, #20]
}
    50e2:	4618      	mov	r0, r3
    50e4:	b006      	add	sp, #24
    50e6:	4770      	bx	lr
    50e8:	1fff8b9c 	.word	0x1fff8b9c
    50ec:	1fff8c8c 	.word	0x1fff8c8c
    50f0:	40064000 	.word	0x40064000

000050f4 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    50f4:	b086      	sub	sp, #24
    50f6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    50f8:	2300      	movs	r3, #0
    50fa:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    50fc:	2300      	movs	r3, #0
    50fe:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5100:	9b01      	ldr	r3, [sp, #4]
    5102:	2b27      	cmp	r3, #39	; 0x27
    5104:	d00f      	beq.n	5126 <getSlowDividerConfig+0x32>
    5106:	9b01      	ldr	r3, [sp, #4]
    5108:	2b27      	cmp	r3, #39	; 0x27
    510a:	d80f      	bhi.n	512c <getSlowDividerConfig+0x38>
    510c:	9b01      	ldr	r3, [sp, #4]
    510e:	2b25      	cmp	r3, #37	; 0x25
    5110:	d003      	beq.n	511a <getSlowDividerConfig+0x26>
    5112:	9b01      	ldr	r3, [sp, #4]
    5114:	2b26      	cmp	r3, #38	; 0x26
    5116:	d003      	beq.n	5120 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5118:	e008      	b.n	512c <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    511a:	2300      	movs	r3, #0
    511c:	9304      	str	r3, [sp, #16]
            break;
    511e:	e006      	b.n	512e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5120:	2301      	movs	r3, #1
    5122:	9304      	str	r3, [sp, #16]
            break;
    5124:	e003      	b.n	512e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5126:	2302      	movs	r3, #2
    5128:	9304      	str	r3, [sp, #16]
            break;
    512a:	e000      	b.n	512e <getSlowDividerConfig+0x3a>
                break;
    512c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    512e:	4b40      	ldr	r3, [pc, #256]	; (5230 <getSlowDividerConfig+0x13c>)
    5130:	681b      	ldr	r3, [r3, #0]
    5132:	2b00      	cmp	r3, #0
    5134:	d026      	beq.n	5184 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5136:	2300      	movs	r3, #0
    5138:	9303      	str	r3, [sp, #12]
    513a:	e01c      	b.n	5176 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    513c:	4b3c      	ldr	r3, [pc, #240]	; (5230 <getSlowDividerConfig+0x13c>)
    513e:	6819      	ldr	r1, [r3, #0]
    5140:	9a03      	ldr	r2, [sp, #12]
    5142:	4613      	mov	r3, r2
    5144:	005b      	lsls	r3, r3, #1
    5146:	4413      	add	r3, r2
    5148:	009b      	lsls	r3, r3, #2
    514a:	440b      	add	r3, r1
    514c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5150:	681b      	ldr	r3, [r3, #0]
    5152:	9a01      	ldr	r2, [sp, #4]
    5154:	429a      	cmp	r2, r3
    5156:	d10b      	bne.n	5170 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5158:	4b35      	ldr	r3, [pc, #212]	; (5230 <getSlowDividerConfig+0x13c>)
    515a:	6819      	ldr	r1, [r3, #0]
    515c:	9a03      	ldr	r2, [sp, #12]
    515e:	4613      	mov	r3, r2
    5160:	005b      	lsls	r3, r3, #1
    5162:	4413      	add	r3, r2
    5164:	009b      	lsls	r3, r3, #2
    5166:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    516a:	440b      	add	r3, r1
    516c:	9305      	str	r3, [sp, #20]
                break;
    516e:	e009      	b.n	5184 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5170:	9b03      	ldr	r3, [sp, #12]
    5172:	3301      	adds	r3, #1
    5174:	9303      	str	r3, [sp, #12]
    5176:	4b2e      	ldr	r3, [pc, #184]	; (5230 <getSlowDividerConfig+0x13c>)
    5178:	681b      	ldr	r3, [r3, #0]
    517a:	7b1b      	ldrb	r3, [r3, #12]
    517c:	461a      	mov	r2, r3
    517e:	9b03      	ldr	r3, [sp, #12]
    5180:	4293      	cmp	r3, r2
    5182:	d3db      	bcc.n	513c <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5184:	9b05      	ldr	r3, [sp, #20]
    5186:	2b00      	cmp	r3, #0
    5188:	d14a      	bne.n	5220 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    518a:	9a04      	ldr	r2, [sp, #16]
    518c:	4613      	mov	r3, r2
    518e:	005b      	lsls	r3, r3, #1
    5190:	4413      	add	r3, r2
    5192:	009b      	lsls	r3, r3, #2
    5194:	4a27      	ldr	r2, [pc, #156]	; (5234 <getSlowDividerConfig+0x140>)
    5196:	4413      	add	r3, r2
    5198:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    519a:	4926      	ldr	r1, [pc, #152]	; (5234 <getSlowDividerConfig+0x140>)
    519c:	9a04      	ldr	r2, [sp, #16]
    519e:	4613      	mov	r3, r2
    51a0:	005b      	lsls	r3, r3, #1
    51a2:	4413      	add	r3, r2
    51a4:	009b      	lsls	r3, r3, #2
    51a6:	440b      	add	r3, r1
    51a8:	9a01      	ldr	r2, [sp, #4]
    51aa:	601a      	str	r2, [r3, #0]
        switch(Name)
    51ac:	9b01      	ldr	r3, [sp, #4]
    51ae:	2b27      	cmp	r3, #39	; 0x27
    51b0:	d027      	beq.n	5202 <getSlowDividerConfig+0x10e>
    51b2:	9b01      	ldr	r3, [sp, #4]
    51b4:	2b27      	cmp	r3, #39	; 0x27
    51b6:	d835      	bhi.n	5224 <getSlowDividerConfig+0x130>
    51b8:	9b01      	ldr	r3, [sp, #4]
    51ba:	2b25      	cmp	r3, #37	; 0x25
    51bc:	d003      	beq.n	51c6 <getSlowDividerConfig+0xd2>
    51be:	9b01      	ldr	r3, [sp, #4]
    51c0:	2b26      	cmp	r3, #38	; 0x26
    51c2:	d00f      	beq.n	51e4 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    51c4:	e02e      	b.n	5224 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    51c6:	4b1c      	ldr	r3, [pc, #112]	; (5238 <getSlowDividerConfig+0x144>)
    51c8:	695b      	ldr	r3, [r3, #20]
    51ca:	f003 030f 	and.w	r3, r3, #15
    51ce:	1c59      	adds	r1, r3, #1
    51d0:	4818      	ldr	r0, [pc, #96]	; (5234 <getSlowDividerConfig+0x140>)
    51d2:	9a04      	ldr	r2, [sp, #16]
    51d4:	4613      	mov	r3, r2
    51d6:	005b      	lsls	r3, r3, #1
    51d8:	4413      	add	r3, r2
    51da:	009b      	lsls	r3, r3, #2
    51dc:	4403      	add	r3, r0
    51de:	3304      	adds	r3, #4
    51e0:	6019      	str	r1, [r3, #0]
                break;
    51e2:	e020      	b.n	5226 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    51e4:	4b14      	ldr	r3, [pc, #80]	; (5238 <getSlowDividerConfig+0x144>)
    51e6:	699b      	ldr	r3, [r3, #24]
    51e8:	f003 030f 	and.w	r3, r3, #15
    51ec:	1c59      	adds	r1, r3, #1
    51ee:	4811      	ldr	r0, [pc, #68]	; (5234 <getSlowDividerConfig+0x140>)
    51f0:	9a04      	ldr	r2, [sp, #16]
    51f2:	4613      	mov	r3, r2
    51f4:	005b      	lsls	r3, r3, #1
    51f6:	4413      	add	r3, r2
    51f8:	009b      	lsls	r3, r3, #2
    51fa:	4403      	add	r3, r0
    51fc:	3304      	adds	r3, #4
    51fe:	6019      	str	r1, [r3, #0]
                break;
    5200:	e011      	b.n	5226 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5202:	4b0d      	ldr	r3, [pc, #52]	; (5238 <getSlowDividerConfig+0x144>)
    5204:	69db      	ldr	r3, [r3, #28]
    5206:	f003 030f 	and.w	r3, r3, #15
    520a:	1c59      	adds	r1, r3, #1
    520c:	4809      	ldr	r0, [pc, #36]	; (5234 <getSlowDividerConfig+0x140>)
    520e:	9a04      	ldr	r2, [sp, #16]
    5210:	4613      	mov	r3, r2
    5212:	005b      	lsls	r3, r3, #1
    5214:	4413      	add	r3, r2
    5216:	009b      	lsls	r3, r3, #2
    5218:	4403      	add	r3, r0
    521a:	3304      	adds	r3, #4
    521c:	6019      	str	r1, [r3, #0]
                break;
    521e:	e002      	b.n	5226 <getSlowDividerConfig+0x132>
        }
    }
    5220:	bf00      	nop
    5222:	e000      	b.n	5226 <getSlowDividerConfig+0x132>
                break;
    5224:	bf00      	nop

    return ReturnValue;
    5226:	9b05      	ldr	r3, [sp, #20]
}
    5228:	4618      	mov	r0, r3
    522a:	b006      	add	sp, #24
    522c:	4770      	bx	lr
    522e:	bf00      	nop
    5230:	1fff8b9c 	.word	0x1fff8b9c
    5234:	1fff8cb0 	.word	0x1fff8cb0
    5238:	40064000 	.word	0x40064000

0000523c <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    523c:	b500      	push	{lr}
    523e:	b083      	sub	sp, #12
    5240:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5242:	4b64      	ldr	r3, [pc, #400]	; (53d4 <Clock_Ip_ClockInitializeObjects+0x198>)
    5244:	781b      	ldrb	r3, [r3, #0]
    5246:	f083 0301 	eor.w	r3, r3, #1
    524a:	b2db      	uxtb	r3, r3
    524c:	2b00      	cmp	r3, #0
    524e:	d05b      	beq.n	5308 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5250:	4b60      	ldr	r3, [pc, #384]	; (53d4 <Clock_Ip_ClockInitializeObjects+0x198>)
    5252:	2201      	movs	r2, #1
    5254:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5256:	4b60      	ldr	r3, [pc, #384]	; (53d8 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5258:	785b      	ldrb	r3, [r3, #1]
    525a:	461a      	mov	r2, r3
    525c:	4613      	mov	r3, r2
    525e:	009b      	lsls	r3, r3, #2
    5260:	4413      	add	r3, r2
    5262:	009b      	lsls	r3, r3, #2
    5264:	4a5d      	ldr	r2, [pc, #372]	; (53dc <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5266:	4413      	add	r3, r2
    5268:	4a5d      	ldr	r2, [pc, #372]	; (53e0 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    526a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    526c:	4b5d      	ldr	r3, [pc, #372]	; (53e4 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    526e:	785b      	ldrb	r3, [r3, #1]
    5270:	461a      	mov	r2, r3
    5272:	4613      	mov	r3, r2
    5274:	009b      	lsls	r3, r3, #2
    5276:	4413      	add	r3, r2
    5278:	009b      	lsls	r3, r3, #2
    527a:	4a5b      	ldr	r2, [pc, #364]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    527c:	4413      	add	r3, r2
    527e:	4a5b      	ldr	r2, [pc, #364]	; (53ec <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5280:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5282:	4b5b      	ldr	r3, [pc, #364]	; (53f0 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5284:	791b      	ldrb	r3, [r3, #4]
    5286:	461a      	mov	r2, r3
    5288:	4613      	mov	r3, r2
    528a:	005b      	lsls	r3, r3, #1
    528c:	4413      	add	r3, r2
    528e:	009b      	lsls	r3, r3, #2
    5290:	4a58      	ldr	r2, [pc, #352]	; (53f4 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5292:	4413      	add	r3, r2
    5294:	4a58      	ldr	r2, [pc, #352]	; (53f8 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5296:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5298:	4b58      	ldr	r3, [pc, #352]	; (53fc <Clock_Ip_ClockInitializeObjects+0x1c0>)
    529a:	795b      	ldrb	r3, [r3, #5]
    529c:	00db      	lsls	r3, r3, #3
    529e:	4a58      	ldr	r2, [pc, #352]	; (5400 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    52a0:	4413      	add	r3, r2
    52a2:	4a58      	ldr	r2, [pc, #352]	; (5404 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    52a4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    52a6:	4b55      	ldr	r3, [pc, #340]	; (53fc <Clock_Ip_ClockInitializeObjects+0x1c0>)
    52a8:	79db      	ldrb	r3, [r3, #7]
    52aa:	00db      	lsls	r3, r3, #3
    52ac:	4a54      	ldr	r2, [pc, #336]	; (5400 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    52ae:	4413      	add	r3, r2
    52b0:	4a55      	ldr	r2, [pc, #340]	; (5408 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    52b2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    52b4:	4b55      	ldr	r3, [pc, #340]	; (540c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52b6:	799b      	ldrb	r3, [r3, #6]
    52b8:	009b      	lsls	r3, r3, #2
    52ba:	4a55      	ldr	r2, [pc, #340]	; (5410 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52bc:	4413      	add	r3, r2
    52be:	4a55      	ldr	r2, [pc, #340]	; (5414 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    52c0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    52c2:	4b52      	ldr	r3, [pc, #328]	; (540c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52c4:	7a1b      	ldrb	r3, [r3, #8]
    52c6:	009b      	lsls	r3, r3, #2
    52c8:	4a51      	ldr	r2, [pc, #324]	; (5410 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52ca:	4413      	add	r3, r2
    52cc:	4a52      	ldr	r2, [pc, #328]	; (5418 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    52ce:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    52d0:	4b4e      	ldr	r3, [pc, #312]	; (540c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52d2:	7a5b      	ldrb	r3, [r3, #9]
    52d4:	009b      	lsls	r3, r3, #2
    52d6:	4a4e      	ldr	r2, [pc, #312]	; (5410 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52d8:	4413      	add	r3, r2
    52da:	4a50      	ldr	r2, [pc, #320]	; (541c <Clock_Ip_ClockInitializeObjects+0x1e0>)
    52dc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    52de:	4b4b      	ldr	r3, [pc, #300]	; (540c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52e0:	7adb      	ldrb	r3, [r3, #11]
    52e2:	009b      	lsls	r3, r3, #2
    52e4:	4a4a      	ldr	r2, [pc, #296]	; (5410 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52e6:	4413      	add	r3, r2
    52e8:	4a4d      	ldr	r2, [pc, #308]	; (5420 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    52ea:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    52ec:	4b47      	ldr	r3, [pc, #284]	; (540c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52ee:	7b1b      	ldrb	r3, [r3, #12]
    52f0:	009b      	lsls	r3, r3, #2
    52f2:	4a47      	ldr	r2, [pc, #284]	; (5410 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52f4:	4413      	add	r3, r2
    52f6:	4a4b      	ldr	r2, [pc, #300]	; (5424 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    52f8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    52fa:	4b44      	ldr	r3, [pc, #272]	; (540c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52fc:	7b9b      	ldrb	r3, [r3, #14]
    52fe:	009b      	lsls	r3, r3, #2
    5300:	4a43      	ldr	r2, [pc, #268]	; (5410 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5302:	4413      	add	r3, r2
    5304:	4a48      	ldr	r2, [pc, #288]	; (5428 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5306:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5308:	4b48      	ldr	r3, [pc, #288]	; (542c <Clock_Ip_ClockInitializeObjects+0x1f0>)
    530a:	781b      	ldrb	r3, [r3, #0]
    530c:	2b00      	cmp	r3, #0
    530e:	d002      	beq.n	5316 <Clock_Ip_ClockInitializeObjects+0xda>
    5310:	9b01      	ldr	r3, [sp, #4]
    5312:	2b00      	cmp	r3, #0
    5314:	d003      	beq.n	531e <Clock_Ip_ClockInitializeObjects+0xe2>
    5316:	4b46      	ldr	r3, [pc, #280]	; (5430 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5318:	781b      	ldrb	r3, [r3, #0]
    531a:	2b00      	cmp	r3, #0
    531c:	d056      	beq.n	53cc <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    531e:	f7ff fc09 	bl	4b34 <getFircConfig>
    5322:	4603      	mov	r3, r0
    5324:	4a43      	ldr	r2, [pc, #268]	; (5434 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5326:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5328:	f7ff fc60 	bl	4bec <getSoscConfig>
    532c:	4603      	mov	r3, r0
    532e:	4a42      	ldr	r2, [pc, #264]	; (5438 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5330:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5332:	f7ff fca7 	bl	4c84 <getSpllConfig>
    5336:	4603      	mov	r3, r0
    5338:	4a40      	ldr	r2, [pc, #256]	; (543c <Clock_Ip_ClockInitializeObjects+0x200>)
    533a:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    533c:	2019      	movs	r0, #25
    533e:	f7ff fcfb 	bl	4d38 <getSelectorConfig>
    5342:	4603      	mov	r3, r0
    5344:	4a3e      	ldr	r2, [pc, #248]	; (5440 <Clock_Ip_ClockInitializeObjects+0x204>)
    5346:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5348:	201a      	movs	r0, #26
    534a:	f7ff fcf5 	bl	4d38 <getSelectorConfig>
    534e:	4603      	mov	r3, r0
    5350:	4a3c      	ldr	r2, [pc, #240]	; (5444 <Clock_Ip_ClockInitializeObjects+0x208>)
    5352:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5354:	201b      	movs	r0, #27
    5356:	f7ff fcef 	bl	4d38 <getSelectorConfig>
    535a:	4603      	mov	r3, r0
    535c:	4a3a      	ldr	r2, [pc, #232]	; (5448 <Clock_Ip_ClockInitializeObjects+0x20c>)
    535e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5360:	201d      	movs	r0, #29
    5362:	f7ff fd7b 	bl	4e5c <getCoreDividerConfig>
    5366:	4603      	mov	r3, r0
    5368:	4a38      	ldr	r2, [pc, #224]	; (544c <Clock_Ip_ClockInitializeObjects+0x210>)
    536a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    536c:	201e      	movs	r0, #30
    536e:	f7ff fd75 	bl	4e5c <getCoreDividerConfig>
    5372:	4603      	mov	r3, r0
    5374:	4a36      	ldr	r2, [pc, #216]	; (5450 <Clock_Ip_ClockInitializeObjects+0x214>)
    5376:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5378:	201f      	movs	r0, #31
    537a:	f7ff fd6f 	bl	4e5c <getCoreDividerConfig>
    537e:	4603      	mov	r3, r0
    5380:	4a34      	ldr	r2, [pc, #208]	; (5454 <Clock_Ip_ClockInitializeObjects+0x218>)
    5382:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5384:	2021      	movs	r0, #33	; 0x21
    5386:	f7ff fe0f 	bl	4fa8 <getBusDividerConfig>
    538a:	4603      	mov	r3, r0
    538c:	4a32      	ldr	r2, [pc, #200]	; (5458 <Clock_Ip_ClockInitializeObjects+0x21c>)
    538e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5390:	2022      	movs	r0, #34	; 0x22
    5392:	f7ff fe09 	bl	4fa8 <getBusDividerConfig>
    5396:	4603      	mov	r3, r0
    5398:	4a30      	ldr	r2, [pc, #192]	; (545c <Clock_Ip_ClockInitializeObjects+0x220>)
    539a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    539c:	2023      	movs	r0, #35	; 0x23
    539e:	f7ff fe03 	bl	4fa8 <getBusDividerConfig>
    53a2:	4603      	mov	r3, r0
    53a4:	4a2e      	ldr	r2, [pc, #184]	; (5460 <Clock_Ip_ClockInitializeObjects+0x224>)
    53a6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    53a8:	2025      	movs	r0, #37	; 0x25
    53aa:	f7ff fea3 	bl	50f4 <getSlowDividerConfig>
    53ae:	4603      	mov	r3, r0
    53b0:	4a2c      	ldr	r2, [pc, #176]	; (5464 <Clock_Ip_ClockInitializeObjects+0x228>)
    53b2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    53b4:	2026      	movs	r0, #38	; 0x26
    53b6:	f7ff fe9d 	bl	50f4 <getSlowDividerConfig>
    53ba:	4603      	mov	r3, r0
    53bc:	4a2a      	ldr	r2, [pc, #168]	; (5468 <Clock_Ip_ClockInitializeObjects+0x22c>)
    53be:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    53c0:	2027      	movs	r0, #39	; 0x27
    53c2:	f7ff fe97 	bl	50f4 <getSlowDividerConfig>
    53c6:	4603      	mov	r3, r0
    53c8:	4a28      	ldr	r2, [pc, #160]	; (546c <Clock_Ip_ClockInitializeObjects+0x230>)
    53ca:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    53cc:	bf00      	nop
    53ce:	b003      	add	sp, #12
    53d0:	f85d fb04 	ldr.w	pc, [sp], #4
    53d4:	1fff8cd4 	.word	0x1fff8cd4
    53d8:	0000eda4 	.word	0x0000eda4
    53dc:	0000f3f0 	.word	0x0000f3f0
    53e0:	1fff8ba0 	.word	0x1fff8ba0
    53e4:	0000ed64 	.word	0x0000ed64
    53e8:	0000f338 	.word	0x0000f338
    53ec:	1fff8ba4 	.word	0x1fff8ba4
    53f0:	0000ed74 	.word	0x0000ed74
    53f4:	0000f3a4 	.word	0x0000f3a4
    53f8:	1fff8ba8 	.word	0x1fff8ba8
    53fc:	0000edb4 	.word	0x0000edb4
    5400:	0000f41c 	.word	0x0000f41c
    5404:	1fff8bac 	.word	0x1fff8bac
    5408:	1fff8be8 	.word	0x1fff8be8
    540c:	0000ed44 	.word	0x0000ed44
    5410:	0000f2f4 	.word	0x0000f2f4
    5414:	1fff8bb0 	.word	0x1fff8bb0
    5418:	1fff8bec 	.word	0x1fff8bec
    541c:	1fff8bb4 	.word	0x1fff8bb4
    5420:	1fff8bf0 	.word	0x1fff8bf0
    5424:	1fff8bb8 	.word	0x1fff8bb8
    5428:	1fff8bf4 	.word	0x1fff8bf4
    542c:	1fff8b21 	.word	0x1fff8b21
    5430:	1fff8b18 	.word	0x1fff8b18
    5434:	1fff8bbc 	.word	0x1fff8bbc
    5438:	1fff8bc0 	.word	0x1fff8bc0
    543c:	1fff8bc4 	.word	0x1fff8bc4
    5440:	1fff8bc8 	.word	0x1fff8bc8
    5444:	1fff8bcc 	.word	0x1fff8bcc
    5448:	1fff8bf8 	.word	0x1fff8bf8
    544c:	1fff8bd0 	.word	0x1fff8bd0
    5450:	1fff8bd4 	.word	0x1fff8bd4
    5454:	1fff8bfc 	.word	0x1fff8bfc
    5458:	1fff8bd8 	.word	0x1fff8bd8
    545c:	1fff8bdc 	.word	0x1fff8bdc
    5460:	1fff8c00 	.word	0x1fff8c00
    5464:	1fff8be0 	.word	0x1fff8be0
    5468:	1fff8be4 	.word	0x1fff8be4
    546c:	1fff8c04 	.word	0x1fff8c04

00005470 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5470:	b500      	push	{lr}
    5472:	b083      	sub	sp, #12
    5474:	9001      	str	r0, [sp, #4]
    5476:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5478:	9b01      	ldr	r3, [sp, #4]
    547a:	2b03      	cmp	r3, #3
    547c:	f000 8090 	beq.w	55a0 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5480:	9b01      	ldr	r3, [sp, #4]
    5482:	2b03      	cmp	r3, #3
    5484:	f200 80d3 	bhi.w	562e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5488:	9b01      	ldr	r3, [sp, #4]
    548a:	2b00      	cmp	r3, #0
    548c:	d040      	beq.n	5510 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    548e:	9b01      	ldr	r3, [sp, #4]
    5490:	3b01      	subs	r3, #1
    5492:	2b01      	cmp	r3, #1
    5494:	f200 80cb 	bhi.w	562e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5498:	9b00      	ldr	r3, [sp, #0]
    549a:	2b00      	cmp	r3, #0
    549c:	f040 80c9 	bne.w	5632 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    54a0:	4b68      	ldr	r3, [pc, #416]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    54a2:	2200      	movs	r2, #0
    54a4:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    54a6:	4b68      	ldr	r3, [pc, #416]	; (5648 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    54a8:	681b      	ldr	r3, [r3, #0]
    54aa:	685b      	ldr	r3, [r3, #4]
    54ac:	4a67      	ldr	r2, [pc, #412]	; (564c <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    54ae:	6812      	ldr	r2, [r2, #0]
    54b0:	4610      	mov	r0, r2
    54b2:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    54b4:	4b66      	ldr	r3, [pc, #408]	; (5650 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    54b6:	681b      	ldr	r3, [r3, #0]
    54b8:	681b      	ldr	r3, [r3, #0]
    54ba:	4a66      	ldr	r2, [pc, #408]	; (5654 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    54bc:	6812      	ldr	r2, [r2, #0]
    54be:	4610      	mov	r0, r2
    54c0:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    54c2:	4b65      	ldr	r3, [pc, #404]	; (5658 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    54c4:	681b      	ldr	r3, [r3, #0]
    54c6:	681b      	ldr	r3, [r3, #0]
    54c8:	4a64      	ldr	r2, [pc, #400]	; (565c <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    54ca:	6812      	ldr	r2, [r2, #0]
    54cc:	4610      	mov	r0, r2
    54ce:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    54d0:	4b63      	ldr	r3, [pc, #396]	; (5660 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    54d2:	681b      	ldr	r3, [r3, #0]
    54d4:	681b      	ldr	r3, [r3, #0]
    54d6:	4a63      	ldr	r2, [pc, #396]	; (5664 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    54d8:	6812      	ldr	r2, [r2, #0]
    54da:	4610      	mov	r0, r2
    54dc:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    54de:	4b62      	ldr	r3, [pc, #392]	; (5668 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54e0:	681b      	ldr	r3, [r3, #0]
    54e2:	691b      	ldr	r3, [r3, #16]
    54e4:	4a61      	ldr	r2, [pc, #388]	; (566c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54e6:	6812      	ldr	r2, [r2, #0]
    54e8:	6812      	ldr	r2, [r2, #0]
    54ea:	4610      	mov	r0, r2
    54ec:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    54ee:	4b60      	ldr	r3, [pc, #384]	; (5670 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54f0:	681b      	ldr	r3, [r3, #0]
    54f2:	68db      	ldr	r3, [r3, #12]
    54f4:	4a5f      	ldr	r2, [pc, #380]	; (5674 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54f6:	6812      	ldr	r2, [r2, #0]
    54f8:	6812      	ldr	r2, [r2, #0]
    54fa:	4610      	mov	r0, r2
    54fc:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    54fe:	4b5e      	ldr	r3, [pc, #376]	; (5678 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5500:	681b      	ldr	r3, [r3, #0]
    5502:	689b      	ldr	r3, [r3, #8]
    5504:	4a5d      	ldr	r2, [pc, #372]	; (567c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5506:	6812      	ldr	r2, [r2, #0]
    5508:	6812      	ldr	r2, [r2, #0]
    550a:	4610      	mov	r0, r2
    550c:	4798      	blx	r3
            }
        }
        break;
    550e:	e090      	b.n	5632 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5510:	9b00      	ldr	r3, [sp, #0]
    5512:	2b02      	cmp	r3, #2
    5514:	f040 808f 	bne.w	5636 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5518:	4b4a      	ldr	r3, [pc, #296]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    551a:	2201      	movs	r2, #1
    551c:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    551e:	4b56      	ldr	r3, [pc, #344]	; (5678 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	685b      	ldr	r3, [r3, #4]
    5524:	4a55      	ldr	r2, [pc, #340]	; (567c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5526:	6812      	ldr	r2, [r2, #0]
    5528:	4610      	mov	r0, r2
    552a:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    552c:	4b50      	ldr	r3, [pc, #320]	; (5670 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    552e:	681b      	ldr	r3, [r3, #0]
    5530:	691b      	ldr	r3, [r3, #16]
    5532:	4a50      	ldr	r2, [pc, #320]	; (5674 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5534:	6812      	ldr	r2, [r2, #0]
    5536:	4610      	mov	r0, r2
    5538:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    553a:	4b4d      	ldr	r3, [pc, #308]	; (5670 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    553c:	681b      	ldr	r3, [r3, #0]
    553e:	689b      	ldr	r3, [r3, #8]
    5540:	4a4c      	ldr	r2, [pc, #304]	; (5674 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5542:	6812      	ldr	r2, [r2, #0]
    5544:	4610      	mov	r0, r2
    5546:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5548:	4b47      	ldr	r3, [pc, #284]	; (5668 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    554a:	681b      	ldr	r3, [r3, #0]
    554c:	68db      	ldr	r3, [r3, #12]
    554e:	4a47      	ldr	r2, [pc, #284]	; (566c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5550:	6812      	ldr	r2, [r2, #0]
    5552:	4610      	mov	r0, r2
    5554:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5556:	4b44      	ldr	r3, [pc, #272]	; (5668 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5558:	681b      	ldr	r3, [r3, #0]
    555a:	689b      	ldr	r3, [r3, #8]
    555c:	4a43      	ldr	r2, [pc, #268]	; (566c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    555e:	6812      	ldr	r2, [r2, #0]
    5560:	6812      	ldr	r2, [r2, #0]
    5562:	4610      	mov	r0, r2
    5564:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5566:	4b38      	ldr	r3, [pc, #224]	; (5648 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5568:	681b      	ldr	r3, [r3, #0]
    556a:	685b      	ldr	r3, [r3, #4]
    556c:	4a44      	ldr	r2, [pc, #272]	; (5680 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    556e:	6812      	ldr	r2, [r2, #0]
    5570:	4610      	mov	r0, r2
    5572:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5574:	4b36      	ldr	r3, [pc, #216]	; (5650 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5576:	681b      	ldr	r3, [r3, #0]
    5578:	681b      	ldr	r3, [r3, #0]
    557a:	4a42      	ldr	r2, [pc, #264]	; (5684 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    557c:	6812      	ldr	r2, [r2, #0]
    557e:	4610      	mov	r0, r2
    5580:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5582:	4b35      	ldr	r3, [pc, #212]	; (5658 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5584:	681b      	ldr	r3, [r3, #0]
    5586:	681b      	ldr	r3, [r3, #0]
    5588:	4a3f      	ldr	r2, [pc, #252]	; (5688 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    558a:	6812      	ldr	r2, [r2, #0]
    558c:	4610      	mov	r0, r2
    558e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5590:	4b33      	ldr	r3, [pc, #204]	; (5660 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5592:	681b      	ldr	r3, [r3, #0]
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	4a3d      	ldr	r2, [pc, #244]	; (568c <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5598:	6812      	ldr	r2, [r2, #0]
    559a:	4610      	mov	r0, r2
    559c:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    559e:	e04a      	b.n	5636 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    55a0:	9b00      	ldr	r3, [sp, #0]
    55a2:	2b02      	cmp	r3, #2
    55a4:	d149      	bne.n	563a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    55a6:	4b27      	ldr	r3, [pc, #156]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    55a8:	2201      	movs	r2, #1
    55aa:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    55ac:	4b32      	ldr	r3, [pc, #200]	; (5678 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    55ae:	681b      	ldr	r3, [r3, #0]
    55b0:	685b      	ldr	r3, [r3, #4]
    55b2:	4a32      	ldr	r2, [pc, #200]	; (567c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    55b4:	6812      	ldr	r2, [r2, #0]
    55b6:	4610      	mov	r0, r2
    55b8:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    55ba:	4b2d      	ldr	r3, [pc, #180]	; (5670 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    55bc:	681b      	ldr	r3, [r3, #0]
    55be:	691b      	ldr	r3, [r3, #16]
    55c0:	4a2c      	ldr	r2, [pc, #176]	; (5674 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    55c2:	6812      	ldr	r2, [r2, #0]
    55c4:	4610      	mov	r0, r2
    55c6:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    55c8:	4b29      	ldr	r3, [pc, #164]	; (5670 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    55ca:	681b      	ldr	r3, [r3, #0]
    55cc:	689b      	ldr	r3, [r3, #8]
    55ce:	4a29      	ldr	r2, [pc, #164]	; (5674 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    55d0:	6812      	ldr	r2, [r2, #0]
    55d2:	4610      	mov	r0, r2
    55d4:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    55d6:	4b24      	ldr	r3, [pc, #144]	; (5668 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    55d8:	681b      	ldr	r3, [r3, #0]
    55da:	68db      	ldr	r3, [r3, #12]
    55dc:	4a23      	ldr	r2, [pc, #140]	; (566c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    55de:	6812      	ldr	r2, [r2, #0]
    55e0:	4610      	mov	r0, r2
    55e2:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    55e4:	4b20      	ldr	r3, [pc, #128]	; (5668 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    55e6:	681b      	ldr	r3, [r3, #0]
    55e8:	689b      	ldr	r3, [r3, #8]
    55ea:	4a20      	ldr	r2, [pc, #128]	; (566c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    55ec:	6812      	ldr	r2, [r2, #0]
    55ee:	6812      	ldr	r2, [r2, #0]
    55f0:	4610      	mov	r0, r2
    55f2:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    55f4:	4b26      	ldr	r3, [pc, #152]	; (5690 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    55f6:	681b      	ldr	r3, [r3, #0]
    55f8:	685b      	ldr	r3, [r3, #4]
    55fa:	4a26      	ldr	r2, [pc, #152]	; (5694 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    55fc:	6812      	ldr	r2, [r2, #0]
    55fe:	4610      	mov	r0, r2
    5600:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5602:	4b25      	ldr	r3, [pc, #148]	; (5698 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5604:	681b      	ldr	r3, [r3, #0]
    5606:	681b      	ldr	r3, [r3, #0]
    5608:	4a24      	ldr	r2, [pc, #144]	; (569c <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    560a:	6812      	ldr	r2, [r2, #0]
    560c:	4610      	mov	r0, r2
    560e:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5610:	4b23      	ldr	r3, [pc, #140]	; (56a0 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    5612:	681b      	ldr	r3, [r3, #0]
    5614:	681b      	ldr	r3, [r3, #0]
    5616:	4a23      	ldr	r2, [pc, #140]	; (56a4 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5618:	6812      	ldr	r2, [r2, #0]
    561a:	4610      	mov	r0, r2
    561c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    561e:	4b22      	ldr	r3, [pc, #136]	; (56a8 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    5620:	681b      	ldr	r3, [r3, #0]
    5622:	681b      	ldr	r3, [r3, #0]
    5624:	4a21      	ldr	r2, [pc, #132]	; (56ac <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5626:	6812      	ldr	r2, [r2, #0]
    5628:	4610      	mov	r0, r2
    562a:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    562c:	e005      	b.n	563a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    562e:	bf00      	nop
    5630:	e004      	b.n	563c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5632:	bf00      	nop
    5634:	e002      	b.n	563c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5636:	bf00      	nop
    5638:	e000      	b.n	563c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    563a:	bf00      	nop
    }

}
    563c:	bf00      	nop
    563e:	b003      	add	sp, #12
    5640:	f85d fb04 	ldr.w	pc, [sp], #4
    5644:	1fff8b21 	.word	0x1fff8b21
    5648:	1fff8bac 	.word	0x1fff8bac
    564c:	1fff8bcc 	.word	0x1fff8bcc
    5650:	1fff8bb0 	.word	0x1fff8bb0
    5654:	1fff8bd4 	.word	0x1fff8bd4
    5658:	1fff8bb4 	.word	0x1fff8bb4
    565c:	1fff8bdc 	.word	0x1fff8bdc
    5660:	1fff8bb8 	.word	0x1fff8bb8
    5664:	1fff8be4 	.word	0x1fff8be4
    5668:	1fff8ba0 	.word	0x1fff8ba0
    566c:	1fff8bc4 	.word	0x1fff8bc4
    5670:	1fff8ba4 	.word	0x1fff8ba4
    5674:	1fff8bc0 	.word	0x1fff8bc0
    5678:	1fff8ba8 	.word	0x1fff8ba8
    567c:	1fff8bbc 	.word	0x1fff8bbc
    5680:	1fff8bc8 	.word	0x1fff8bc8
    5684:	1fff8bd0 	.word	0x1fff8bd0
    5688:	1fff8bd8 	.word	0x1fff8bd8
    568c:	1fff8be0 	.word	0x1fff8be0
    5690:	1fff8be8 	.word	0x1fff8be8
    5694:	1fff8bf8 	.word	0x1fff8bf8
    5698:	1fff8bec 	.word	0x1fff8bec
    569c:	1fff8bfc 	.word	0x1fff8bfc
    56a0:	1fff8bf0 	.word	0x1fff8bf0
    56a4:	1fff8c00 	.word	0x1fff8c00
    56a8:	1fff8bf4 	.word	0x1fff8bf4
    56ac:	1fff8c04 	.word	0x1fff8c04

000056b0 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    56b0:	b500      	push	{lr}
    56b2:	b083      	sub	sp, #12
    56b4:	9001      	str	r0, [sp, #4]
    56b6:	9100      	str	r1, [sp, #0]
    switch(Command)
    56b8:	9b00      	ldr	r3, [sp, #0]
    56ba:	2b04      	cmp	r3, #4
    56bc:	d010      	beq.n	56e0 <Clock_Ip_Command+0x30>
    56be:	9b00      	ldr	r3, [sp, #0]
    56c0:	2b04      	cmp	r3, #4
    56c2:	d811      	bhi.n	56e8 <Clock_Ip_Command+0x38>
    56c4:	9b00      	ldr	r3, [sp, #0]
    56c6:	2b01      	cmp	r3, #1
    56c8:	d006      	beq.n	56d8 <Clock_Ip_Command+0x28>
    56ca:	9b00      	ldr	r3, [sp, #0]
    56cc:	2b02      	cmp	r3, #2
    56ce:	d10b      	bne.n	56e8 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    56d0:	9801      	ldr	r0, [sp, #4]
    56d2:	f7ff fdb3 	bl	523c <Clock_Ip_ClockInitializeObjects>
            break;
    56d6:	e008      	b.n	56ea <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    56d8:	9801      	ldr	r0, [sp, #4]
    56da:	f7ff f9db 	bl	4a94 <Clock_Ip_SpecificPlatformInitClock>
            break;
    56de:	e004      	b.n	56ea <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    56e0:	9801      	ldr	r0, [sp, #4]
    56e2:	f7ff f8ed 	bl	48c0 <DisableSafeClock>
            break;
    56e6:	e000      	b.n	56ea <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    56e8:	bf00      	nop
    }
}
    56ea:	bf00      	nop
    56ec:	b003      	add	sp, #12
    56ee:	f85d fb04 	ldr.w	pc, [sp], #4
    56f2:	bf00      	nop

000056f4 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    56f4:	b500      	push	{lr}
    56f6:	b085      	sub	sp, #20
    56f8:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    56fa:	4a20      	ldr	r2, [pc, #128]	; (577c <Mcu_Init+0x88>)
    56fc:	9b01      	ldr	r3, [sp, #4]
    56fe:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5700:	2300      	movs	r3, #0
    5702:	9303      	str	r3, [sp, #12]
    5704:	e010      	b.n	5728 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5706:	4b1d      	ldr	r3, [pc, #116]	; (577c <Mcu_Init+0x88>)
    5708:	681b      	ldr	r3, [r3, #0]
    570a:	6919      	ldr	r1, [r3, #16]
    570c:	9a03      	ldr	r2, [sp, #12]
    570e:	4613      	mov	r3, r2
    5710:	005b      	lsls	r3, r3, #1
    5712:	4413      	add	r3, r2
    5714:	009b      	lsls	r3, r3, #2
    5716:	440b      	add	r3, r1
    5718:	681b      	ldr	r3, [r3, #0]
    571a:	9a03      	ldr	r2, [sp, #12]
    571c:	b2d1      	uxtb	r1, r2
    571e:	4a18      	ldr	r2, [pc, #96]	; (5780 <Mcu_Init+0x8c>)
    5720:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5722:	9b03      	ldr	r3, [sp, #12]
    5724:	3301      	adds	r3, #1
    5726:	9303      	str	r3, [sp, #12]
    5728:	4b14      	ldr	r3, [pc, #80]	; (577c <Mcu_Init+0x88>)
    572a:	681b      	ldr	r3, [r3, #0]
    572c:	689b      	ldr	r3, [r3, #8]
    572e:	9a03      	ldr	r2, [sp, #12]
    5730:	429a      	cmp	r2, r3
    5732:	d3e8      	bcc.n	5706 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5734:	2300      	movs	r3, #0
    5736:	9303      	str	r3, [sp, #12]
    5738:	e010      	b.n	575c <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    573a:	4b10      	ldr	r3, [pc, #64]	; (577c <Mcu_Init+0x88>)
    573c:	681b      	ldr	r3, [r3, #0]
    573e:	6959      	ldr	r1, [r3, #20]
    5740:	9a03      	ldr	r2, [sp, #12]
    5742:	4613      	mov	r3, r2
    5744:	01db      	lsls	r3, r3, #7
    5746:	1a9b      	subs	r3, r3, r2
    5748:	00db      	lsls	r3, r3, #3
    574a:	440b      	add	r3, r1
    574c:	681b      	ldr	r3, [r3, #0]
    574e:	9a03      	ldr	r2, [sp, #12]
    5750:	b2d1      	uxtb	r1, r2
    5752:	4a0c      	ldr	r2, [pc, #48]	; (5784 <Mcu_Init+0x90>)
    5754:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5756:	9b03      	ldr	r3, [sp, #12]
    5758:	3301      	adds	r3, #1
    575a:	9303      	str	r3, [sp, #12]
    575c:	4b07      	ldr	r3, [pc, #28]	; (577c <Mcu_Init+0x88>)
    575e:	681b      	ldr	r3, [r3, #0]
    5760:	68db      	ldr	r3, [r3, #12]
    5762:	9a03      	ldr	r2, [sp, #12]
    5764:	429a      	cmp	r2, r3
    5766:	d3e8      	bcc.n	573a <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5768:	4b04      	ldr	r3, [pc, #16]	; (577c <Mcu_Init+0x88>)
    576a:	681b      	ldr	r3, [r3, #0]
    576c:	699b      	ldr	r3, [r3, #24]
    576e:	4618      	mov	r0, r3
    5770:	f000 f88a 	bl	5888 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5774:	bf00      	nop
    5776:	b005      	add	sp, #20
    5778:	f85d fb04 	ldr.w	pc, [sp], #4
    577c:	1fff8ce0 	.word	0x1fff8ce0
    5780:	1fff8cdc 	.word	0x1fff8cdc
    5784:	1fff8cd8 	.word	0x1fff8cd8

00005788 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5788:	b084      	sub	sp, #16
    578a:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    578c:	2301      	movs	r3, #1
    578e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5792:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5796:	4618      	mov	r0, r3
    5798:	b004      	add	sp, #16
    579a:	4770      	bx	lr

0000579c <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    579c:	b500      	push	{lr}
    579e:	b085      	sub	sp, #20
    57a0:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    57a2:	4a0e      	ldr	r2, [pc, #56]	; (57dc <Mcu_InitClock+0x40>)
    57a4:	9b01      	ldr	r3, [sp, #4]
    57a6:	4413      	add	r3, r2
    57a8:	781b      	ldrb	r3, [r3, #0]
    57aa:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    57ae:	4b0c      	ldr	r3, [pc, #48]	; (57e0 <Mcu_InitClock+0x44>)
    57b0:	681b      	ldr	r3, [r3, #0]
    57b2:	6959      	ldr	r1, [r3, #20]
    57b4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    57b8:	4613      	mov	r3, r2
    57ba:	01db      	lsls	r3, r3, #7
    57bc:	1a9b      	subs	r3, r3, r2
    57be:	00db      	lsls	r3, r3, #3
    57c0:	440b      	add	r3, r1
    57c2:	4618      	mov	r0, r3
    57c4:	f000 f86a 	bl	589c <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    57c8:	2300      	movs	r3, #0
    57ca:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    57ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    57d2:	4618      	mov	r0, r3
    57d4:	b005      	add	sp, #20
    57d6:	f85d fb04 	ldr.w	pc, [sp], #4
    57da:	bf00      	nop
    57dc:	1fff8cd8 	.word	0x1fff8cd8
    57e0:	1fff8ce0 	.word	0x1fff8ce0

000057e4 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    57e4:	b500      	push	{lr}
    57e6:	b085      	sub	sp, #20
    57e8:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    57ea:	4a0d      	ldr	r2, [pc, #52]	; (5820 <Mcu_SetMode+0x3c>)
    57ec:	9b01      	ldr	r3, [sp, #4]
    57ee:	4413      	add	r3, r2
    57f0:	781b      	ldrb	r3, [r3, #0]
    57f2:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    57f6:	f007 ffa7 	bl	d748 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    57fa:	4b0a      	ldr	r3, [pc, #40]	; (5824 <Mcu_SetMode+0x40>)
    57fc:	681b      	ldr	r3, [r3, #0]
    57fe:	6919      	ldr	r1, [r3, #16]
    5800:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5804:	4613      	mov	r3, r2
    5806:	005b      	lsls	r3, r3, #1
    5808:	4413      	add	r3, r2
    580a:	009b      	lsls	r3, r3, #2
    580c:	440b      	add	r3, r1
    580e:	4618      	mov	r0, r3
    5810:	f000 f84e 	bl	58b0 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5814:	f007 ffc4 	bl	d7a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5818:	bf00      	nop
    581a:	b005      	add	sp, #20
    581c:	f85d fb04 	ldr.w	pc, [sp], #4
    5820:	1fff8cdc 	.word	0x1fff8cdc
    5824:	1fff8ce0 	.word	0x1fff8ce0

00005828 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5828:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    582a:	2302      	movs	r3, #2
    582c:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    582e:	9b01      	ldr	r3, [sp, #4]
}
    5830:	4618      	mov	r0, r3
    5832:	b002      	add	sp, #8
    5834:	4770      	bx	lr

00005836 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5836:	b500      	push	{lr}
    5838:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    583a:	f000 f843 	bl	58c4 <Mcu_Ipw_GetResetReason>
    583e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5840:	9b01      	ldr	r3, [sp, #4]
}
    5842:	4618      	mov	r0, r3
    5844:	b003      	add	sp, #12
    5846:	f85d fb04 	ldr.w	pc, [sp], #4

0000584a <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    584a:	b500      	push	{lr}
    584c:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    584e:	f000 f83f 	bl	58d0 <Mcu_Ipw_GetResetRawValue>
    5852:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5854:	9b01      	ldr	r3, [sp, #4]
}
    5856:	4618      	mov	r0, r3
    5858:	b003      	add	sp, #12
    585a:	f85d fb04 	ldr.w	pc, [sp], #4

0000585e <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    585e:	b500      	push	{lr}
    5860:	b083      	sub	sp, #12
    5862:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5864:	9801      	ldr	r0, [sp, #4]
    5866:	f000 f839 	bl	58dc <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    586a:	bf00      	nop
    586c:	b003      	add	sp, #12
    586e:	f85d fb04 	ldr.w	pc, [sp], #4

00005872 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5872:	b082      	sub	sp, #8
    5874:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5876:	4b03      	ldr	r3, [pc, #12]	; (5884 <Mcu_ClkSrcFailureNotification+0x12>)
    5878:	681b      	ldr	r3, [r3, #0]
    587a:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    587c:	bf00      	nop
    587e:	b002      	add	sp, #8
    5880:	4770      	bx	lr
    5882:	bf00      	nop
    5884:	1fff8ce0 	.word	0x1fff8ce0

00005888 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5888:	b500      	push	{lr}
    588a:	b083      	sub	sp, #12
    588c:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    588e:	9801      	ldr	r0, [sp, #4]
    5890:	f000 f882 	bl	5998 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5894:	bf00      	nop
    5896:	b003      	add	sp, #12
    5898:	f85d fb04 	ldr.w	pc, [sp], #4

0000589c <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    589c:	b500      	push	{lr}
    589e:	b083      	sub	sp, #12
    58a0:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    58a2:	9801      	ldr	r0, [sp, #4]
    58a4:	f7fc fc6a 	bl	217c <Clock_Ip_InitClock>
}
    58a8:	bf00      	nop
    58aa:	b003      	add	sp, #12
    58ac:	f85d fb04 	ldr.w	pc, [sp], #4

000058b0 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    58b0:	b500      	push	{lr}
    58b2:	b083      	sub	sp, #12
    58b4:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    58b6:	9801      	ldr	r0, [sp, #4]
    58b8:	f000 f820 	bl	58fc <Power_Ip_SetMode>
}
    58bc:	bf00      	nop
    58be:	b003      	add	sp, #12
    58c0:	f85d fb04 	ldr.w	pc, [sp], #4

000058c4 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    58c4:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    58c6:	f000 f84f 	bl	5968 <Power_Ip_GetResetReason>
    58ca:	4603      	mov	r3, r0
}
    58cc:	4618      	mov	r0, r3
    58ce:	bd08      	pop	{r3, pc}

000058d0 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    58d0:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    58d2:	f000 f857 	bl	5984 <Power_Ip_GetResetRawValue>
    58d6:	4603      	mov	r3, r0
}
    58d8:	4618      	mov	r0, r3
    58da:	bd08      	pop	{r3, pc}

000058dc <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    58dc:	b500      	push	{lr}
    58de:	b083      	sub	sp, #12
    58e0:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    58e2:	9b01      	ldr	r3, [sp, #4]
    58e4:	2b00      	cmp	r3, #0
    58e6:	d102      	bne.n	58ee <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    58e8:	f000 f86c 	bl	59c4 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    58ec:	e001      	b.n	58f2 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    58ee:	f000 f86e 	bl	59ce <Power_Ip_EnableSleepOnExit>
}
    58f2:	bf00      	nop
    58f4:	b003      	add	sp, #12
    58f6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000058fc <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    58fc:	b500      	push	{lr}
    58fe:	b085      	sub	sp, #20
    5900:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5902:	9b01      	ldr	r3, [sp, #4]
    5904:	685b      	ldr	r3, [r3, #4]
    5906:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5908:	9802      	ldr	r0, [sp, #8]
    590a:	f000 f9f5 	bl	5cf8 <Power_Ip_SMC_ModeCheckEntry>
    590e:	4603      	mov	r3, r0
    5910:	2b00      	cmp	r3, #0
    5912:	d002      	beq.n	591a <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5914:	2301      	movs	r3, #1
    5916:	9303      	str	r3, [sp, #12]
    5918:	e003      	b.n	5922 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    591a:	9801      	ldr	r0, [sp, #4]
    591c:	f000 fa1e 	bl	5d5c <Power_Ip_SMC_ModeConfig>
    5920:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5922:	9b03      	ldr	r3, [sp, #12]
    5924:	2b01      	cmp	r3, #1
    5926:	d103      	bne.n	5930 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5928:	21ff      	movs	r1, #255	; 0xff
    592a:	2003      	movs	r0, #3
    592c:	f000 f8f4 	bl	5b18 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5930:	bf00      	nop
    5932:	b005      	add	sp, #20
    5934:	f85d fb04 	ldr.w	pc, [sp], #4

00005938 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5938:	b084      	sub	sp, #16
    593a:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    593c:	230c      	movs	r3, #12
    593e:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5940:	4a08      	ldr	r2, [pc, #32]	; (5964 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5942:	9b01      	ldr	r3, [sp, #4]
    5944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5948:	2b0e      	cmp	r3, #14
    594a:	d805      	bhi.n	5958 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    594c:	4a05      	ldr	r2, [pc, #20]	; (5964 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    594e:	9b01      	ldr	r3, [sp, #4]
    5950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5954:	9303      	str	r3, [sp, #12]
    5956:	e001      	b.n	595c <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5958:	230c      	movs	r3, #12
    595a:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    595c:	9b03      	ldr	r3, [sp, #12]
}
    595e:	4618      	mov	r0, r3
    5960:	b004      	add	sp, #16
    5962:	4770      	bx	lr
    5964:	0000f490 	.word	0x0000f490

00005968 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5968:	b500      	push	{lr}
    596a:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    596c:	f000 f940 	bl	5bf0 <Power_Ip_RCM_GetResetReason>
    5970:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5972:	9801      	ldr	r0, [sp, #4]
    5974:	f7ff ffe0 	bl	5938 <Power_Ip_ConvertIntergeToResetType>
    5978:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    597a:	9b00      	ldr	r3, [sp, #0]
}
    597c:	4618      	mov	r0, r3
    597e:	b003      	add	sp, #12
    5980:	f85d fb04 	ldr.w	pc, [sp], #4

00005984 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5984:	b500      	push	{lr}
    5986:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5988:	f000 f98a 	bl	5ca0 <Power_Ip_RCM_GetResetRawValue>
    598c:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    598e:	9b01      	ldr	r3, [sp, #4]
}
    5990:	4618      	mov	r0, r3
    5992:	b003      	add	sp, #12
    5994:	f85d fb04 	ldr.w	pc, [sp], #4

00005998 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5998:	b500      	push	{lr}
    599a:	b083      	sub	sp, #12
    599c:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    599e:	9b01      	ldr	r3, [sp, #4]
    59a0:	681b      	ldr	r3, [r3, #0]
    59a2:	4618      	mov	r0, r3
    59a4:	f000 f90e 	bl	5bc4 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    59a8:	9b01      	ldr	r3, [sp, #4]
    59aa:	685b      	ldr	r3, [r3, #4]
    59ac:	4618      	mov	r0, r3
    59ae:	f000 f86d 	bl	5a8c <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    59b2:	9b01      	ldr	r3, [sp, #4]
    59b4:	689b      	ldr	r3, [r3, #8]
    59b6:	4618      	mov	r0, r3
    59b8:	f000 f990 	bl	5cdc <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    59bc:	bf00      	nop
    59be:	b003      	add	sp, #12
    59c0:	f85d fb04 	ldr.w	pc, [sp], #4

000059c4 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    59c4:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    59c6:	f000 f811 	bl	59ec <Power_Ip_CM4_DisableSleepOnExit>
}
    59ca:	bf00      	nop
    59cc:	bd08      	pop	{r3, pc}

000059ce <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    59ce:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    59d0:	f000 f820 	bl	5a14 <Power_Ip_CM4_EnableSleepOnExit>
}
    59d4:	bf00      	nop
    59d6:	bd08      	pop	{r3, pc}

000059d8 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    59d8:	b082      	sub	sp, #8
    59da:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    59dc:	4a02      	ldr	r2, [pc, #8]	; (59e8 <Power_Ip_InstallNotificationsCallback+0x10>)
    59de:	9b01      	ldr	r3, [sp, #4]
    59e0:	6013      	str	r3, [r2, #0]
}
    59e2:	bf00      	nop
    59e4:	b002      	add	sp, #8
    59e6:	4770      	bx	lr
    59e8:	1fff8b24 	.word	0x1fff8b24

000059ec <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    59ec:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59ee:	2300      	movs	r3, #0
    59f0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59f2:	4b07      	ldr	r3, [pc, #28]	; (5a10 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    59f4:	681b      	ldr	r3, [r3, #0]
    59f6:	685b      	ldr	r3, [r3, #4]
    59f8:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    59fa:	9b01      	ldr	r3, [sp, #4]
    59fc:	f023 0302 	bic.w	r3, r3, #2
    5a00:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a02:	4b03      	ldr	r3, [pc, #12]	; (5a10 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5a04:	681b      	ldr	r3, [r3, #0]
    5a06:	9a01      	ldr	r2, [sp, #4]
    5a08:	605a      	str	r2, [r3, #4]
}
    5a0a:	bf00      	nop
    5a0c:	b002      	add	sp, #8
    5a0e:	4770      	bx	lr
    5a10:	1fff8b28 	.word	0x1fff8b28

00005a14 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5a14:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5a16:	2300      	movs	r3, #0
    5a18:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5a1a:	4b07      	ldr	r3, [pc, #28]	; (5a38 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5a1c:	681b      	ldr	r3, [r3, #0]
    5a1e:	685b      	ldr	r3, [r3, #4]
    5a20:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5a22:	9b01      	ldr	r3, [sp, #4]
    5a24:	f043 0302 	orr.w	r3, r3, #2
    5a28:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a2a:	4b03      	ldr	r3, [pc, #12]	; (5a38 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5a2c:	681b      	ldr	r3, [r3, #0]
    5a2e:	9a01      	ldr	r2, [sp, #4]
    5a30:	605a      	str	r2, [r3, #4]
}
    5a32:	bf00      	nop
    5a34:	b002      	add	sp, #8
    5a36:	4770      	bx	lr
    5a38:	1fff8b28 	.word	0x1fff8b28

00005a3c <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5a3c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5a3e:	2300      	movs	r3, #0
    5a40:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5a42:	4b07      	ldr	r3, [pc, #28]	; (5a60 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5a44:	681b      	ldr	r3, [r3, #0]
    5a46:	685b      	ldr	r3, [r3, #4]
    5a48:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5a4a:	9b01      	ldr	r3, [sp, #4]
    5a4c:	f043 0304 	orr.w	r3, r3, #4
    5a50:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a52:	4b03      	ldr	r3, [pc, #12]	; (5a60 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5a54:	681b      	ldr	r3, [r3, #0]
    5a56:	9a01      	ldr	r2, [sp, #4]
    5a58:	605a      	str	r2, [r3, #4]
}
    5a5a:	bf00      	nop
    5a5c:	b002      	add	sp, #8
    5a5e:	4770      	bx	lr
    5a60:	1fff8b28 	.word	0x1fff8b28

00005a64 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5a64:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5a66:	2300      	movs	r3, #0
    5a68:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5a6a:	4b07      	ldr	r3, [pc, #28]	; (5a88 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a6c:	681b      	ldr	r3, [r3, #0]
    5a6e:	685b      	ldr	r3, [r3, #4]
    5a70:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5a72:	9b01      	ldr	r3, [sp, #4]
    5a74:	f023 0304 	bic.w	r3, r3, #4
    5a78:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a7a:	4b03      	ldr	r3, [pc, #12]	; (5a88 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a7c:	681b      	ldr	r3, [r3, #0]
    5a7e:	9a01      	ldr	r2, [sp, #4]
    5a80:	605a      	str	r2, [r3, #4]
}
    5a82:	bf00      	nop
    5a84:	b002      	add	sp, #8
    5a86:	4770      	bx	lr
    5a88:	1fff8b28 	.word	0x1fff8b28

00005a8c <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5a8c:	b084      	sub	sp, #16
    5a8e:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5a90:	4b20      	ldr	r3, [pc, #128]	; (5b14 <Power_Ip_PMC_PowerInit+0x88>)
    5a92:	781b      	ldrb	r3, [r3, #0]
    5a94:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5a98:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a9c:	f003 030f 	and.w	r3, r3, #15
    5aa0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5aa4:	9b01      	ldr	r3, [sp, #4]
    5aa6:	781a      	ldrb	r2, [r3, #0]
    5aa8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5aac:	4313      	orrs	r3, r2
    5aae:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5ab2:	4a18      	ldr	r2, [pc, #96]	; (5b14 <Power_Ip_PMC_PowerInit+0x88>)
    5ab4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ab8:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5aba:	4b16      	ldr	r3, [pc, #88]	; (5b14 <Power_Ip_PMC_PowerInit+0x88>)
    5abc:	785b      	ldrb	r3, [r3, #1]
    5abe:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5ac2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ac6:	f003 031f 	and.w	r3, r3, #31
    5aca:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5ace:	9b01      	ldr	r3, [sp, #4]
    5ad0:	785a      	ldrb	r2, [r3, #1]
    5ad2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ad6:	4313      	orrs	r3, r2
    5ad8:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5adc:	4a0d      	ldr	r2, [pc, #52]	; (5b14 <Power_Ip_PMC_PowerInit+0x88>)
    5ade:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ae2:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5ae4:	4b0b      	ldr	r3, [pc, #44]	; (5b14 <Power_Ip_PMC_PowerInit+0x88>)
    5ae6:	789b      	ldrb	r3, [r3, #2]
    5ae8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5aec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5af0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5af4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5af8:	9b01      	ldr	r3, [sp, #4]
    5afa:	789a      	ldrb	r2, [r3, #2]
    5afc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5b00:	4313      	orrs	r3, r2
    5b02:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5b06:	4a03      	ldr	r2, [pc, #12]	; (5b14 <Power_Ip_PMC_PowerInit+0x88>)
    5b08:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5b0c:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5b0e:	bf00      	nop
    5b10:	b004      	add	sp, #16
    5b12:	4770      	bx	lr
    5b14:	4007d000 	.word	0x4007d000

00005b18 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5b18:	b500      	push	{lr}
    5b1a:	b083      	sub	sp, #12
    5b1c:	9001      	str	r0, [sp, #4]
    5b1e:	460b      	mov	r3, r1
    5b20:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5b24:	4b05      	ldr	r3, [pc, #20]	; (5b3c <Power_Ip_ReportPowerErrors+0x24>)
    5b26:	681b      	ldr	r3, [r3, #0]
    5b28:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5b2c:	4611      	mov	r1, r2
    5b2e:	9801      	ldr	r0, [sp, #4]
    5b30:	4798      	blx	r3
}
    5b32:	bf00      	nop
    5b34:	b003      	add	sp, #12
    5b36:	f85d fb04 	ldr.w	pc, [sp], #4
    5b3a:	bf00      	nop
    5b3c:	1fff8b24 	.word	0x1fff8b24

00005b40 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5b40:	b082      	sub	sp, #8
    5b42:	9001      	str	r0, [sp, #4]
    5b44:	460b      	mov	r3, r1
    5b46:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5b4a:	bf00      	nop
    5b4c:	b002      	add	sp, #8
    5b4e:	4770      	bx	lr

00005b50 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5b50:	b500      	push	{lr}
    5b52:	b085      	sub	sp, #20
    5b54:	9003      	str	r0, [sp, #12]
    5b56:	9102      	str	r1, [sp, #8]
    5b58:	9201      	str	r2, [sp, #4]
    5b5a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5b5c:	2000      	movs	r0, #0
    5b5e:	f7fc f83d 	bl	1bdc <OsIf_GetCounter>
    5b62:	4602      	mov	r2, r0
    5b64:	9b03      	ldr	r3, [sp, #12]
    5b66:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5b68:	9b02      	ldr	r3, [sp, #8]
    5b6a:	2200      	movs	r2, #0
    5b6c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5b6e:	2100      	movs	r1, #0
    5b70:	9800      	ldr	r0, [sp, #0]
    5b72:	f7fc f87f 	bl	1c74 <OsIf_MicrosToTicks>
    5b76:	4602      	mov	r2, r0
    5b78:	9b01      	ldr	r3, [sp, #4]
    5b7a:	601a      	str	r2, [r3, #0]
}
    5b7c:	bf00      	nop
    5b7e:	b005      	add	sp, #20
    5b80:	f85d fb04 	ldr.w	pc, [sp], #4

00005b84 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5b84:	b500      	push	{lr}
    5b86:	b087      	sub	sp, #28
    5b88:	9003      	str	r0, [sp, #12]
    5b8a:	9102      	str	r1, [sp, #8]
    5b8c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5b8e:	2300      	movs	r3, #0
    5b90:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5b94:	2100      	movs	r1, #0
    5b96:	9803      	ldr	r0, [sp, #12]
    5b98:	f7fc f839 	bl	1c0e <OsIf_GetElapsed>
    5b9c:	4602      	mov	r2, r0
    5b9e:	9b02      	ldr	r3, [sp, #8]
    5ba0:	681b      	ldr	r3, [r3, #0]
    5ba2:	441a      	add	r2, r3
    5ba4:	9b02      	ldr	r3, [sp, #8]
    5ba6:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5ba8:	9b02      	ldr	r3, [sp, #8]
    5baa:	681b      	ldr	r3, [r3, #0]
    5bac:	9a01      	ldr	r2, [sp, #4]
    5bae:	429a      	cmp	r2, r3
    5bb0:	d802      	bhi.n	5bb8 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5bb2:	2301      	movs	r3, #1
    5bb4:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5bb8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5bbc:	4618      	mov	r0, r3
    5bbe:	b007      	add	sp, #28
    5bc0:	f85d fb04 	ldr.w	pc, [sp], #4

00005bc4 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5bc4:	b082      	sub	sp, #8
    5bc6:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5bc8:	9b01      	ldr	r3, [sp, #4]
    5bca:	681a      	ldr	r2, [r3, #0]
    5bcc:	4907      	ldr	r1, [pc, #28]	; (5bec <Power_Ip_RCM_ResetInit+0x28>)
    5bce:	f641 7307 	movw	r3, #7943	; 0x1f07
    5bd2:	4013      	ands	r3, r2
    5bd4:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5bd6:	9b01      	ldr	r3, [sp, #4]
    5bd8:	685a      	ldr	r2, [r3, #4]
    5bda:	4904      	ldr	r1, [pc, #16]	; (5bec <Power_Ip_RCM_ResetInit+0x28>)
    5bdc:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5be0:	4013      	ands	r3, r2
    5be2:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5be4:	bf00      	nop
    5be6:	b002      	add	sp, #8
    5be8:	4770      	bx	lr
    5bea:	bf00      	nop
    5bec:	4007f000 	.word	0x4007f000

00005bf0 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5bf0:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5bf2:	230c      	movs	r3, #12
    5bf4:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5bf6:	2300      	movs	r3, #0
    5bf8:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5bfa:	2300      	movs	r3, #0
    5bfc:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5bfe:	2300      	movs	r3, #0
    5c00:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5c02:	4b25      	ldr	r3, [pc, #148]	; (5c98 <Power_Ip_RCM_GetResetReason+0xa8>)
    5c04:	699a      	ldr	r2, [r3, #24]
    5c06:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c0a:	4013      	ands	r3, r2
    5c0c:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5c0e:	9b03      	ldr	r3, [sp, #12]
    5c10:	2b00      	cmp	r3, #0
    5c12:	d008      	beq.n	5c26 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5c14:	4920      	ldr	r1, [pc, #128]	; (5c98 <Power_Ip_RCM_GetResetReason+0xa8>)
    5c16:	9a03      	ldr	r2, [sp, #12]
    5c18:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c1c:	4013      	ands	r3, r2
    5c1e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5c20:	4a1e      	ldr	r2, [pc, #120]	; (5c9c <Power_Ip_RCM_GetResetReason+0xac>)
    5c22:	9b03      	ldr	r3, [sp, #12]
    5c24:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5c26:	4b1d      	ldr	r3, [pc, #116]	; (5c9c <Power_Ip_RCM_GetResetReason+0xac>)
    5c28:	681b      	ldr	r3, [r3, #0]
    5c2a:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5c2c:	9a02      	ldr	r2, [sp, #8]
    5c2e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c32:	4013      	ands	r3, r2
    5c34:	2b82      	cmp	r3, #130	; 0x82
    5c36:	d102      	bne.n	5c3e <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5c38:	2305      	movs	r3, #5
    5c3a:	9307      	str	r3, [sp, #28]
    5c3c:	e027      	b.n	5c8e <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5c3e:	2300      	movs	r3, #0
    5c40:	9306      	str	r3, [sp, #24]
    5c42:	e021      	b.n	5c88 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5c44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5c48:	9b06      	ldr	r3, [sp, #24]
    5c4a:	fa22 f303 	lsr.w	r3, r2, r3
    5c4e:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5c50:	9a01      	ldr	r2, [sp, #4]
    5c52:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5c56:	4013      	ands	r3, r2
    5c58:	2b00      	cmp	r3, #0
    5c5a:	d012      	beq.n	5c82 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5c5c:	9a01      	ldr	r2, [sp, #4]
    5c5e:	9b02      	ldr	r3, [sp, #8]
    5c60:	4013      	ands	r3, r2
    5c62:	2b00      	cmp	r3, #0
    5c64:	d00a      	beq.n	5c7c <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5c66:	9b05      	ldr	r3, [sp, #20]
    5c68:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5c6a:	9b04      	ldr	r3, [sp, #16]
    5c6c:	3301      	adds	r3, #1
    5c6e:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5c70:	9b04      	ldr	r3, [sp, #16]
    5c72:	2b01      	cmp	r3, #1
    5c74:	d902      	bls.n	5c7c <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5c76:	230d      	movs	r3, #13
    5c78:	9307      	str	r3, [sp, #28]
                        break;
    5c7a:	e008      	b.n	5c8e <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5c7c:	9b05      	ldr	r3, [sp, #20]
    5c7e:	3301      	adds	r3, #1
    5c80:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5c82:	9b06      	ldr	r3, [sp, #24]
    5c84:	3301      	adds	r3, #1
    5c86:	9306      	str	r3, [sp, #24]
    5c88:	9b06      	ldr	r3, [sp, #24]
    5c8a:	2b1f      	cmp	r3, #31
    5c8c:	d9da      	bls.n	5c44 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5c8e:	9b07      	ldr	r3, [sp, #28]
}
    5c90:	4618      	mov	r0, r3
    5c92:	b008      	add	sp, #32
    5c94:	4770      	bx	lr
    5c96:	bf00      	nop
    5c98:	4007f000 	.word	0x4007f000
    5c9c:	1fff8ce4 	.word	0x1fff8ce4

00005ca0 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5ca0:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5ca2:	4b0c      	ldr	r3, [pc, #48]	; (5cd4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5ca4:	699a      	ldr	r2, [r3, #24]
    5ca6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5caa:	4013      	ands	r3, r2
    5cac:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5cae:	9b01      	ldr	r3, [sp, #4]
    5cb0:	2b00      	cmp	r3, #0
    5cb2:	d008      	beq.n	5cc6 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5cb4:	4907      	ldr	r1, [pc, #28]	; (5cd4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5cb6:	9a01      	ldr	r2, [sp, #4]
    5cb8:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5cbc:	4013      	ands	r3, r2
    5cbe:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5cc0:	4a05      	ldr	r2, [pc, #20]	; (5cd8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5cc2:	9b01      	ldr	r3, [sp, #4]
    5cc4:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5cc6:	4b04      	ldr	r3, [pc, #16]	; (5cd8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    5cc8:	681b      	ldr	r3, [r3, #0]
    5cca:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5ccc:	9b00      	ldr	r3, [sp, #0]
}
    5cce:	4618      	mov	r0, r3
    5cd0:	b002      	add	sp, #8
    5cd2:	4770      	bx	lr
    5cd4:	4007f000 	.word	0x4007f000
    5cd8:	1fff8ce4 	.word	0x1fff8ce4

00005cdc <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5cdc:	b082      	sub	sp, #8
    5cde:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5ce0:	9b01      	ldr	r3, [sp, #4]
    5ce2:	681b      	ldr	r3, [r3, #0]
    5ce4:	4a03      	ldr	r2, [pc, #12]	; (5cf4 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5ce6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5cea:	6093      	str	r3, [r2, #8]
}
    5cec:	bf00      	nop
    5cee:	b002      	add	sp, #8
    5cf0:	4770      	bx	lr
    5cf2:	bf00      	nop
    5cf4:	4007e000 	.word	0x4007e000

00005cf8 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5cf8:	b084      	sub	sp, #16
    5cfa:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5cfc:	2301      	movs	r3, #1
    5cfe:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5d00:	4b15      	ldr	r3, [pc, #84]	; (5d58 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5d02:	695b      	ldr	r3, [r3, #20]
    5d04:	b2db      	uxtb	r3, r3
    5d06:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5d08:	9b01      	ldr	r3, [sp, #4]
    5d0a:	2b02      	cmp	r3, #2
    5d0c:	d012      	beq.n	5d34 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5d0e:	9b01      	ldr	r3, [sp, #4]
    5d10:	2b02      	cmp	r3, #2
    5d12:	d818      	bhi.n	5d46 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5d14:	9b01      	ldr	r3, [sp, #4]
    5d16:	2b00      	cmp	r3, #0
    5d18:	d003      	beq.n	5d22 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5d1a:	9b01      	ldr	r3, [sp, #4]
    5d1c:	2b01      	cmp	r3, #1
    5d1e:	d003      	beq.n	5d28 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5d20:	e011      	b.n	5d46 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5d22:	2300      	movs	r3, #0
    5d24:	9303      	str	r3, [sp, #12]
            break;
    5d26:	e013      	b.n	5d50 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5d28:	9b02      	ldr	r3, [sp, #8]
    5d2a:	2b01      	cmp	r3, #1
    5d2c:	d10d      	bne.n	5d4a <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5d2e:	2300      	movs	r3, #0
    5d30:	9303      	str	r3, [sp, #12]
            break;
    5d32:	e00a      	b.n	5d4a <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5d34:	9b02      	ldr	r3, [sp, #8]
    5d36:	2b01      	cmp	r3, #1
    5d38:	d002      	beq.n	5d40 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5d3a:	9b02      	ldr	r3, [sp, #8]
    5d3c:	2b10      	cmp	r3, #16
    5d3e:	d106      	bne.n	5d4e <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5d40:	2300      	movs	r3, #0
    5d42:	9303      	str	r3, [sp, #12]
            break;
    5d44:	e003      	b.n	5d4e <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5d46:	bf00      	nop
    5d48:	e002      	b.n	5d50 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5d4a:	bf00      	nop
    5d4c:	e000      	b.n	5d50 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5d4e:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5d50:	9b03      	ldr	r3, [sp, #12]
}
    5d52:	4618      	mov	r0, r3
    5d54:	b004      	add	sp, #16
    5d56:	4770      	bx	lr
    5d58:	4007e000 	.word	0x4007e000

00005d5c <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5d5c:	b500      	push	{lr}
    5d5e:	b08b      	sub	sp, #44	; 0x2c
    5d60:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5d62:	2300      	movs	r3, #0
    5d64:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5d66:	2300      	movs	r3, #0
    5d68:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5d6a:	2300      	movs	r3, #0
    5d6c:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5d70:	9b01      	ldr	r3, [sp, #4]
    5d72:	685b      	ldr	r3, [r3, #4]
    5d74:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5d76:	9b08      	ldr	r3, [sp, #32]
    5d78:	2b02      	cmp	r3, #2
    5d7a:	d076      	beq.n	5e6a <Power_Ip_SMC_ModeConfig+0x10e>
    5d7c:	9b08      	ldr	r3, [sp, #32]
    5d7e:	2b02      	cmp	r3, #2
    5d80:	f200 80ab 	bhi.w	5eda <Power_Ip_SMC_ModeConfig+0x17e>
    5d84:	9b08      	ldr	r3, [sp, #32]
    5d86:	2b00      	cmp	r3, #0
    5d88:	d003      	beq.n	5d92 <Power_Ip_SMC_ModeConfig+0x36>
    5d8a:	9b08      	ldr	r3, [sp, #32]
    5d8c:	2b01      	cmp	r3, #1
    5d8e:	d034      	beq.n	5dfa <Power_Ip_SMC_ModeConfig+0x9e>
    5d90:	e0a3      	b.n	5eda <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5d92:	4b58      	ldr	r3, [pc, #352]	; (5ef4 <Power_Ip_SMC_ModeConfig+0x198>)
    5d94:	68db      	ldr	r3, [r3, #12]
    5d96:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d98:	9b06      	ldr	r3, [sp, #24]
    5d9a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d9e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5da0:	4a54      	ldr	r2, [pc, #336]	; (5ef4 <Power_Ip_SMC_ModeConfig+0x198>)
    5da2:	9b06      	ldr	r3, [sp, #24]
    5da4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5da6:	aa02      	add	r2, sp, #8
    5da8:	a903      	add	r1, sp, #12
    5daa:	a804      	add	r0, sp, #16
    5dac:	f24c 3350 	movw	r3, #50000	; 0xc350
    5db0:	f7ff fece 	bl	5b50 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5db4:	9a02      	ldr	r2, [sp, #8]
    5db6:	a903      	add	r1, sp, #12
    5db8:	ab04      	add	r3, sp, #16
    5dba:	4618      	mov	r0, r3
    5dbc:	f7ff fee2 	bl	5b84 <Power_Ip_TimeoutExpired>
    5dc0:	4603      	mov	r3, r0
    5dc2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5dc6:	4b4b      	ldr	r3, [pc, #300]	; (5ef4 <Power_Ip_SMC_ModeConfig+0x198>)
    5dc8:	695b      	ldr	r3, [r3, #20]
    5dca:	f003 0301 	and.w	r3, r3, #1
    5dce:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5dd0:	9b05      	ldr	r3, [sp, #20]
    5dd2:	2b01      	cmp	r3, #1
    5dd4:	d006      	beq.n	5de4 <Power_Ip_SMC_ModeConfig+0x88>
    5dd6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5dda:	f083 0301 	eor.w	r3, r3, #1
    5dde:	b2db      	uxtb	r3, r3
    5de0:	2b00      	cmp	r3, #0
    5de2:	d1e7      	bne.n	5db4 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5de4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5de8:	2b00      	cmp	r3, #0
    5dea:	d079      	beq.n	5ee0 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5dec:	2301      	movs	r3, #1
    5dee:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5df0:	21ff      	movs	r1, #255	; 0xff
    5df2:	2000      	movs	r0, #0
    5df4:	f7ff fe90 	bl	5b18 <Power_Ip_ReportPowerErrors>
            }

            break;
    5df8:	e072      	b.n	5ee0 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5dfa:	4b3e      	ldr	r3, [pc, #248]	; (5ef4 <Power_Ip_SMC_ModeConfig+0x198>)
    5dfc:	68db      	ldr	r3, [r3, #12]
    5dfe:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5e00:	9b06      	ldr	r3, [sp, #24]
    5e02:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5e06:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5e08:	9b06      	ldr	r3, [sp, #24]
    5e0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5e0e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5e10:	4a38      	ldr	r2, [pc, #224]	; (5ef4 <Power_Ip_SMC_ModeConfig+0x198>)
    5e12:	9b06      	ldr	r3, [sp, #24]
    5e14:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5e16:	aa02      	add	r2, sp, #8
    5e18:	a903      	add	r1, sp, #12
    5e1a:	a804      	add	r0, sp, #16
    5e1c:	f24c 3350 	movw	r3, #50000	; 0xc350
    5e20:	f7ff fe96 	bl	5b50 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5e24:	9a02      	ldr	r2, [sp, #8]
    5e26:	a903      	add	r1, sp, #12
    5e28:	ab04      	add	r3, sp, #16
    5e2a:	4618      	mov	r0, r3
    5e2c:	f7ff feaa 	bl	5b84 <Power_Ip_TimeoutExpired>
    5e30:	4603      	mov	r3, r0
    5e32:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5e36:	4b2f      	ldr	r3, [pc, #188]	; (5ef4 <Power_Ip_SMC_ModeConfig+0x198>)
    5e38:	695b      	ldr	r3, [r3, #20]
    5e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5e3e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5e40:	9b05      	ldr	r3, [sp, #20]
    5e42:	2b80      	cmp	r3, #128	; 0x80
    5e44:	d006      	beq.n	5e54 <Power_Ip_SMC_ModeConfig+0xf8>
    5e46:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e4a:	f083 0301 	eor.w	r3, r3, #1
    5e4e:	b2db      	uxtb	r3, r3
    5e50:	2b00      	cmp	r3, #0
    5e52:	d1e7      	bne.n	5e24 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5e54:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e58:	2b00      	cmp	r3, #0
    5e5a:	d043      	beq.n	5ee4 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e5c:	2301      	movs	r3, #1
    5e5e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e60:	21ff      	movs	r1, #255	; 0xff
    5e62:	2000      	movs	r0, #0
    5e64:	f7ff fe58 	bl	5b18 <Power_Ip_ReportPowerErrors>
            }

            break;
    5e68:	e03c      	b.n	5ee4 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5e6a:	4b22      	ldr	r3, [pc, #136]	; (5ef4 <Power_Ip_SMC_ModeConfig+0x198>)
    5e6c:	68db      	ldr	r3, [r3, #12]
    5e6e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5e70:	9b06      	ldr	r3, [sp, #24]
    5e72:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5e76:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5e78:	9b06      	ldr	r3, [sp, #24]
    5e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5e7e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5e80:	4a1c      	ldr	r2, [pc, #112]	; (5ef4 <Power_Ip_SMC_ModeConfig+0x198>)
    5e82:	9b06      	ldr	r3, [sp, #24]
    5e84:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5e86:	aa02      	add	r2, sp, #8
    5e88:	a903      	add	r1, sp, #12
    5e8a:	a804      	add	r0, sp, #16
    5e8c:	f24c 3350 	movw	r3, #50000	; 0xc350
    5e90:	f7ff fe5e 	bl	5b50 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5e94:	9a02      	ldr	r2, [sp, #8]
    5e96:	a903      	add	r1, sp, #12
    5e98:	ab04      	add	r3, sp, #16
    5e9a:	4618      	mov	r0, r3
    5e9c:	f7ff fe72 	bl	5b84 <Power_Ip_TimeoutExpired>
    5ea0:	4603      	mov	r3, r0
    5ea2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5ea6:	4b13      	ldr	r3, [pc, #76]	; (5ef4 <Power_Ip_SMC_ModeConfig+0x198>)
    5ea8:	695b      	ldr	r3, [r3, #20]
    5eaa:	f003 0304 	and.w	r3, r3, #4
    5eae:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5eb0:	9b05      	ldr	r3, [sp, #20]
    5eb2:	2b04      	cmp	r3, #4
    5eb4:	d006      	beq.n	5ec4 <Power_Ip_SMC_ModeConfig+0x168>
    5eb6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5eba:	f083 0301 	eor.w	r3, r3, #1
    5ebe:	b2db      	uxtb	r3, r3
    5ec0:	2b00      	cmp	r3, #0
    5ec2:	d1e7      	bne.n	5e94 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5ec4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5ec8:	2b00      	cmp	r3, #0
    5eca:	d00d      	beq.n	5ee8 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5ecc:	2301      	movs	r3, #1
    5ece:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5ed0:	21ff      	movs	r1, #255	; 0xff
    5ed2:	2000      	movs	r0, #0
    5ed4:	f7ff fe20 	bl	5b18 <Power_Ip_ReportPowerErrors>
            }

            break;
    5ed8:	e006      	b.n	5ee8 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5eda:	2301      	movs	r3, #1
    5edc:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5ede:	e004      	b.n	5eea <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5ee0:	bf00      	nop
    5ee2:	e002      	b.n	5eea <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5ee4:	bf00      	nop
    5ee6:	e000      	b.n	5eea <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5ee8:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5eec:	4618      	mov	r0, r3
    5eee:	b00b      	add	sp, #44	; 0x2c
    5ef0:	f85d fb04 	ldr.w	pc, [sp], #4
    5ef4:	4007e000 	.word	0x4007e000

00005ef8 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5ef8:	b500      	push	{lr}
    5efa:	b085      	sub	sp, #20
    5efc:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5efe:	9b01      	ldr	r3, [sp, #4]
    5f00:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5f02:	9803      	ldr	r0, [sp, #12]
    5f04:	f000 fbc8 	bl	6698 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5f08:	4a03      	ldr	r2, [pc, #12]	; (5f18 <Port_Init+0x20>)
    5f0a:	9b03      	ldr	r3, [sp, #12]
    5f0c:	6013      	str	r3, [r2, #0]
        }
    }
}
    5f0e:	bf00      	nop
    5f10:	b005      	add	sp, #20
    5f12:	f85d fb04 	ldr.w	pc, [sp], #4
    5f16:	bf00      	nop
    5f18:	1fff8ce8 	.word	0x1fff8ce8

00005f1c <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5f1c:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5f1e:	4b03      	ldr	r3, [pc, #12]	; (5f2c <Port_RefreshPortDirection+0x10>)
    5f20:	681b      	ldr	r3, [r3, #0]
    5f22:	4618      	mov	r0, r3
    5f24:	f000 fc10 	bl	6748 <Port_Ipw_RefreshPortDirection>
    }
}
    5f28:	bf00      	nop
    5f2a:	bd08      	pop	{r3, pc}
    5f2c:	1fff8ce8 	.word	0x1fff8ce8

00005f30 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5f30:	b086      	sub	sp, #24
    5f32:	9003      	str	r0, [sp, #12]
    5f34:	9102      	str	r1, [sp, #8]
    5f36:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5f38:	23ff      	movs	r3, #255	; 0xff
    5f3a:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5f3c:	9b03      	ldr	r3, [sp, #12]
    5f3e:	4a39      	ldr	r2, [pc, #228]	; (6024 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5f40:	4293      	cmp	r3, r2
    5f42:	d151      	bne.n	5fe8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5f44:	9b02      	ldr	r3, [sp, #8]
    5f46:	2b10      	cmp	r3, #16
    5f48:	d867      	bhi.n	601a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5f4a:	a201      	add	r2, pc, #4	; (adr r2, 5f50 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5f50:	00005f95 	.word	0x00005f95
    5f54:	00005fa3 	.word	0x00005fa3
    5f58:	0000601b 	.word	0x0000601b
    5f5c:	0000601b 	.word	0x0000601b
    5f60:	0000601b 	.word	0x0000601b
    5f64:	0000601b 	.word	0x0000601b
    5f68:	0000601b 	.word	0x0000601b
    5f6c:	0000601b 	.word	0x0000601b
    5f70:	0000601b 	.word	0x0000601b
    5f74:	0000601b 	.word	0x0000601b
    5f78:	0000601b 	.word	0x0000601b
    5f7c:	0000601b 	.word	0x0000601b
    5f80:	0000601b 	.word	0x0000601b
    5f84:	00005fb1 	.word	0x00005fb1
    5f88:	00005fbf 	.word	0x00005fbf
    5f8c:	00005fcd 	.word	0x00005fcd
    5f90:	00005fdb 	.word	0x00005fdb
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5f94:	2301      	movs	r3, #1
    5f96:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f98:	9a05      	ldr	r2, [sp, #20]
    5f9a:	9b01      	ldr	r3, [sp, #4]
    5f9c:	4313      	orrs	r3, r2
    5f9e:	9305      	str	r3, [sp, #20]
                break;
    5fa0:	e03c      	b.n	601c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5fa2:	2302      	movs	r3, #2
    5fa4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5fa6:	9a05      	ldr	r2, [sp, #20]
    5fa8:	9b01      	ldr	r3, [sp, #4]
    5faa:	4313      	orrs	r3, r2
    5fac:	9305      	str	r3, [sp, #20]
                break;
    5fae:	e035      	b.n	601c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5fb0:	2304      	movs	r3, #4
    5fb2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5fb4:	9a05      	ldr	r2, [sp, #20]
    5fb6:	9b01      	ldr	r3, [sp, #4]
    5fb8:	4313      	orrs	r3, r2
    5fba:	9305      	str	r3, [sp, #20]
                break;
    5fbc:	e02e      	b.n	601c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5fbe:	2308      	movs	r3, #8
    5fc0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5fc2:	9a05      	ldr	r2, [sp, #20]
    5fc4:	9b01      	ldr	r3, [sp, #4]
    5fc6:	4313      	orrs	r3, r2
    5fc8:	9305      	str	r3, [sp, #20]
                break;
    5fca:	e027      	b.n	601c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5fcc:	230e      	movs	r3, #14
    5fce:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fd0:	9a05      	ldr	r2, [sp, #20]
    5fd2:	9b01      	ldr	r3, [sp, #4]
    5fd4:	4013      	ands	r3, r2
    5fd6:	9305      	str	r3, [sp, #20]
                break;
    5fd8:	e020      	b.n	601c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5fda:	230d      	movs	r3, #13
    5fdc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fde:	9a05      	ldr	r2, [sp, #20]
    5fe0:	9b01      	ldr	r3, [sp, #4]
    5fe2:	4013      	ands	r3, r2
    5fe4:	9305      	str	r3, [sp, #20]
                break;
    5fe6:	e019      	b.n	601c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5fe8:	9b03      	ldr	r3, [sp, #12]
    5fea:	4a0f      	ldr	r2, [pc, #60]	; (6028 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5fec:	4293      	cmp	r3, r2
    5fee:	d115      	bne.n	601c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5ff0:	9b02      	ldr	r3, [sp, #8]
    5ff2:	2b00      	cmp	r3, #0
    5ff4:	d003      	beq.n	5ffe <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5ff6:	9b02      	ldr	r3, [sp, #8]
    5ff8:	2b01      	cmp	r3, #1
    5ffa:	d007      	beq.n	600c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5ffc:	e00e      	b.n	601c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5ffe:	230b      	movs	r3, #11
    6000:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6002:	9a05      	ldr	r2, [sp, #20]
    6004:	9b01      	ldr	r3, [sp, #4]
    6006:	4013      	ands	r3, r2
    6008:	9305      	str	r3, [sp, #20]
                break;
    600a:	e007      	b.n	601c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    600c:	2307      	movs	r3, #7
    600e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6010:	9a05      	ldr	r2, [sp, #20]
    6012:	9b01      	ldr	r3, [sp, #4]
    6014:	4013      	ands	r3, r2
    6016:	9305      	str	r3, [sp, #20]
                break;
    6018:	e000      	b.n	601c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    601a:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    601c:	9b05      	ldr	r3, [sp, #20]
}
    601e:	4618      	mov	r0, r3
    6020:	b006      	add	sp, #24
    6022:	4770      	bx	lr
    6024:	4004a000 	.word	0x4004a000
    6028:	4004b000 	.word	0x4004b000

0000602c <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    602c:	b500      	push	{lr}
    602e:	b089      	sub	sp, #36	; 0x24
    6030:	9003      	str	r0, [sp, #12]
    6032:	9102      	str	r1, [sp, #8]
    6034:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    6036:	9b01      	ldr	r3, [sp, #4]
    6038:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    603a:	9b01      	ldr	r3, [sp, #4]
    603c:	2b08      	cmp	r3, #8
    603e:	d121      	bne.n	6084 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6040:	4b13      	ldr	r3, [pc, #76]	; (6090 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6042:	685b      	ldr	r3, [r3, #4]
    6044:	f003 030f 	and.w	r3, r3, #15
    6048:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    604a:	9a06      	ldr	r2, [sp, #24]
    604c:	9902      	ldr	r1, [sp, #8]
    604e:	9803      	ldr	r0, [sp, #12]
    6050:	f7ff ff6e 	bl	5f30 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6054:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6056:	9b05      	ldr	r3, [sp, #20]
    6058:	2bff      	cmp	r3, #255	; 0xff
    605a:	d011      	beq.n	6080 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    605c:	f007 fe04 	bl	dc68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6060:	4b0b      	ldr	r3, [pc, #44]	; (6090 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6062:	685b      	ldr	r3, [r3, #4]
    6064:	4a0a      	ldr	r2, [pc, #40]	; (6090 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6066:	f023 030f 	bic.w	r3, r3, #15
    606a:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    606c:	4b08      	ldr	r3, [pc, #32]	; (6090 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    606e:	685a      	ldr	r2, [r3, #4]
    6070:	9b05      	ldr	r3, [sp, #20]
    6072:	f003 030f 	and.w	r3, r3, #15
    6076:	4906      	ldr	r1, [pc, #24]	; (6090 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6078:	4313      	orrs	r3, r2
    607a:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    607c:	f007 fe20 	bl	dcc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6080:	2300      	movs	r3, #0
    6082:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6084:	9b07      	ldr	r3, [sp, #28]
}
    6086:	4618      	mov	r0, r3
    6088:	b009      	add	sp, #36	; 0x24
    608a:	f85d fb04 	ldr.w	pc, [sp], #4
    608e:	bf00      	nop
    6090:	40048000 	.word	0x40048000

00006094 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6094:	b500      	push	{lr}
    6096:	b087      	sub	sp, #28
    6098:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    609a:	2300      	movs	r3, #0
    609c:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    609e:	2300      	movs	r3, #0
    60a0:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    60a2:	2300      	movs	r3, #0
    60a4:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    60a6:	9b01      	ldr	r3, [sp, #4]
    60a8:	68db      	ldr	r3, [r3, #12]
    60aa:	2b02      	cmp	r3, #2
    60ac:	d00a      	beq.n	60c4 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    60ae:	9b05      	ldr	r3, [sp, #20]
    60b0:	f043 0302 	orr.w	r3, r3, #2
    60b4:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    60b6:	9b01      	ldr	r3, [sp, #4]
    60b8:	68db      	ldr	r3, [r3, #12]
    60ba:	f003 0301 	and.w	r3, r3, #1
    60be:	9a05      	ldr	r2, [sp, #20]
    60c0:	4313      	orrs	r3, r2
    60c2:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    60c4:	9b01      	ldr	r3, [sp, #4]
    60c6:	699b      	ldr	r3, [r3, #24]
    60c8:	019b      	lsls	r3, r3, #6
    60ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
    60ce:	9a05      	ldr	r2, [sp, #20]
    60d0:	4313      	orrs	r3, r2
    60d2:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    60d4:	9b01      	ldr	r3, [sp, #4]
    60d6:	6a1b      	ldr	r3, [r3, #32]
    60d8:	03db      	lsls	r3, r3, #15
    60da:	b29b      	uxth	r3, r3
    60dc:	9a05      	ldr	r2, [sp, #20]
    60de:	4313      	orrs	r3, r2
    60e0:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    60e2:	9b01      	ldr	r3, [sp, #4]
    60e4:	7f1b      	ldrb	r3, [r3, #28]
    60e6:	2b00      	cmp	r3, #0
    60e8:	d001      	beq.n	60ee <Port_Ci_Port_Ip_PinInit+0x5a>
    60ea:	2310      	movs	r3, #16
    60ec:	e000      	b.n	60f0 <Port_Ci_Port_Ip_PinInit+0x5c>
    60ee:	2300      	movs	r3, #0
    60f0:	9a05      	ldr	r2, [sp, #20]
    60f2:	4313      	orrs	r3, r2
    60f4:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    60f6:	9b01      	ldr	r3, [sp, #4]
    60f8:	691b      	ldr	r3, [r3, #16]
    60fa:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    60fc:	9b01      	ldr	r3, [sp, #4]
    60fe:	6818      	ldr	r0, [r3, #0]
    6100:	9b01      	ldr	r3, [sp, #4]
    6102:	689b      	ldr	r3, [r3, #8]
    6104:	9a04      	ldr	r2, [sp, #16]
    6106:	4619      	mov	r1, r3
    6108:	f7ff ff90 	bl	602c <Port_Ci_Port_Ip_ConfigureInterleave>
    610c:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    610e:	9b03      	ldr	r3, [sp, #12]
    6110:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6112:	9b04      	ldr	r3, [sp, #16]
    6114:	021b      	lsls	r3, r3, #8
    6116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    611a:	9a05      	ldr	r2, [sp, #20]
    611c:	4313      	orrs	r3, r2
    611e:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6120:	f007 fc08 	bl	d934 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6124:	9b01      	ldr	r3, [sp, #4]
    6126:	681b      	ldr	r3, [r3, #0]
    6128:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    612c:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    612e:	9b01      	ldr	r3, [sp, #4]
    6130:	689b      	ldr	r3, [r3, #8]
    6132:	2201      	movs	r2, #1
    6134:	fa02 f303 	lsl.w	r3, r2, r3
    6138:	43db      	mvns	r3, r3
    613a:	9a02      	ldr	r2, [sp, #8]
    613c:	4013      	ands	r3, r2
    613e:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6140:	9b01      	ldr	r3, [sp, #4]
    6142:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6146:	2b00      	cmp	r3, #0
    6148:	d001      	beq.n	614e <Port_Ci_Port_Ip_PinInit+0xba>
    614a:	2201      	movs	r2, #1
    614c:	e000      	b.n	6150 <Port_Ci_Port_Ip_PinInit+0xbc>
    614e:	2200      	movs	r2, #0
    6150:	9b01      	ldr	r3, [sp, #4]
    6152:	689b      	ldr	r3, [r3, #8]
    6154:	fa02 f303 	lsl.w	r3, r2, r3
    6158:	9a02      	ldr	r2, [sp, #8]
    615a:	4313      	orrs	r3, r2
    615c:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    615e:	9b01      	ldr	r3, [sp, #4]
    6160:	681b      	ldr	r3, [r3, #0]
    6162:	9a02      	ldr	r2, [sp, #8]
    6164:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6168:	f007 fc10 	bl	d98c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    616c:	9b04      	ldr	r3, [sp, #16]
    616e:	2b01      	cmp	r3, #1
    6170:	d16d      	bne.n	624e <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6172:	9b01      	ldr	r3, [sp, #4]
    6174:	695b      	ldr	r3, [r3, #20]
    6176:	2b02      	cmp	r3, #2
    6178:	d138      	bne.n	61ec <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    617a:	9b01      	ldr	r3, [sp, #4]
    617c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6180:	2b01      	cmp	r3, #1
    6182:	d10f      	bne.n	61a4 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6184:	f007 fc28 	bl	d9d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6188:	9b01      	ldr	r3, [sp, #4]
    618a:	685b      	ldr	r3, [r3, #4]
    618c:	6859      	ldr	r1, [r3, #4]
    618e:	9b01      	ldr	r3, [sp, #4]
    6190:	689b      	ldr	r3, [r3, #8]
    6192:	2201      	movs	r2, #1
    6194:	409a      	lsls	r2, r3
    6196:	9b01      	ldr	r3, [sp, #4]
    6198:	685b      	ldr	r3, [r3, #4]
    619a:	430a      	orrs	r2, r1
    619c:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    619e:	f007 fc47 	bl	da30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    61a2:	e013      	b.n	61cc <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    61a4:	9b01      	ldr	r3, [sp, #4]
    61a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    61aa:	2b00      	cmp	r3, #0
    61ac:	d10e      	bne.n	61cc <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    61ae:	f007 fc65 	bl	da7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    61b2:	9b01      	ldr	r3, [sp, #4]
    61b4:	685b      	ldr	r3, [r3, #4]
    61b6:	6899      	ldr	r1, [r3, #8]
    61b8:	9b01      	ldr	r3, [sp, #4]
    61ba:	689b      	ldr	r3, [r3, #8]
    61bc:	2201      	movs	r2, #1
    61be:	409a      	lsls	r2, r3
    61c0:	9b01      	ldr	r3, [sp, #4]
    61c2:	685b      	ldr	r3, [r3, #4]
    61c4:	430a      	orrs	r2, r1
    61c6:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    61c8:	f007 fc84 	bl	dad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    61cc:	f007 fca8 	bl	db20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    61d0:	9b01      	ldr	r3, [sp, #4]
    61d2:	685b      	ldr	r3, [r3, #4]
    61d4:	6959      	ldr	r1, [r3, #20]
    61d6:	9b01      	ldr	r3, [sp, #4]
    61d8:	689b      	ldr	r3, [r3, #8]
    61da:	2201      	movs	r2, #1
    61dc:	409a      	lsls	r2, r3
    61de:	9b01      	ldr	r3, [sp, #4]
    61e0:	685b      	ldr	r3, [r3, #4]
    61e2:	430a      	orrs	r2, r1
    61e4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    61e6:	f007 fcc7 	bl	db78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    61ea:	e030      	b.n	624e <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    61ec:	f007 fc98 	bl	db20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    61f0:	9b01      	ldr	r3, [sp, #4]
    61f2:	685b      	ldr	r3, [r3, #4]
    61f4:	6959      	ldr	r1, [r3, #20]
    61f6:	9b01      	ldr	r3, [sp, #4]
    61f8:	689b      	ldr	r3, [r3, #8]
    61fa:	2201      	movs	r2, #1
    61fc:	fa02 f303 	lsl.w	r3, r2, r3
    6200:	43da      	mvns	r2, r3
    6202:	9b01      	ldr	r3, [sp, #4]
    6204:	685b      	ldr	r3, [r3, #4]
    6206:	400a      	ands	r2, r1
    6208:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    620a:	f007 fcb5 	bl	db78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    620e:	f007 fcd9 	bl	dbc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6212:	9b01      	ldr	r3, [sp, #4]
    6214:	685b      	ldr	r3, [r3, #4]
    6216:	6999      	ldr	r1, [r3, #24]
    6218:	9b01      	ldr	r3, [sp, #4]
    621a:	689b      	ldr	r3, [r3, #8]
    621c:	2201      	movs	r2, #1
    621e:	fa02 f303 	lsl.w	r3, r2, r3
    6222:	43da      	mvns	r2, r3
    6224:	9b01      	ldr	r3, [sp, #4]
    6226:	685b      	ldr	r3, [r3, #4]
    6228:	400a      	ands	r2, r1
    622a:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    622c:	9b01      	ldr	r3, [sp, #4]
    622e:	695b      	ldr	r3, [r3, #20]
    6230:	2b03      	cmp	r3, #3
    6232:	d10a      	bne.n	624a <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6234:	9b01      	ldr	r3, [sp, #4]
    6236:	685b      	ldr	r3, [r3, #4]
    6238:	6999      	ldr	r1, [r3, #24]
    623a:	9b01      	ldr	r3, [sp, #4]
    623c:	689b      	ldr	r3, [r3, #8]
    623e:	2201      	movs	r2, #1
    6240:	409a      	lsls	r2, r3
    6242:	9b01      	ldr	r3, [sp, #4]
    6244:	685b      	ldr	r3, [r3, #4]
    6246:	430a      	orrs	r2, r1
    6248:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    624a:	f007 fce7 	bl	dc1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    624e:	9b01      	ldr	r3, [sp, #4]
    6250:	681b      	ldr	r3, [r3, #0]
    6252:	9a01      	ldr	r2, [sp, #4]
    6254:	6892      	ldr	r2, [r2, #8]
    6256:	9905      	ldr	r1, [sp, #20]
    6258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    625c:	bf00      	nop
    625e:	b007      	add	sp, #28
    6260:	f85d fb04 	ldr.w	pc, [sp], #4

00006264 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6264:	b500      	push	{lr}
    6266:	b085      	sub	sp, #20
    6268:	9001      	str	r0, [sp, #4]
    626a:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    626c:	2300      	movs	r3, #0
    626e:	9303      	str	r3, [sp, #12]
    6270:	e00d      	b.n	628e <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6272:	9a03      	ldr	r2, [sp, #12]
    6274:	4613      	mov	r3, r2
    6276:	009b      	lsls	r3, r3, #2
    6278:	4413      	add	r3, r2
    627a:	00db      	lsls	r3, r3, #3
    627c:	461a      	mov	r2, r3
    627e:	9b00      	ldr	r3, [sp, #0]
    6280:	4413      	add	r3, r2
    6282:	4618      	mov	r0, r3
    6284:	f7ff ff06 	bl	6094 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6288:	9b03      	ldr	r3, [sp, #12]
    628a:	3301      	adds	r3, #1
    628c:	9303      	str	r3, [sp, #12]
    628e:	9a03      	ldr	r2, [sp, #12]
    6290:	9b01      	ldr	r3, [sp, #4]
    6292:	429a      	cmp	r2, r3
    6294:	d3ed      	bcc.n	6272 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6296:	2300      	movs	r3, #0
}
    6298:	4618      	mov	r0, r3
    629a:	b005      	add	sp, #20
    629c:	f85d fb04 	ldr.w	pc, [sp], #4

000062a0 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    62a0:	b500      	push	{lr}
    62a2:	b087      	sub	sp, #28
    62a4:	9003      	str	r0, [sp, #12]
    62a6:	9102      	str	r1, [sp, #8]
    62a8:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    62aa:	9a01      	ldr	r2, [sp, #4]
    62ac:	9902      	ldr	r1, [sp, #8]
    62ae:	9803      	ldr	r0, [sp, #12]
    62b0:	f7ff febc 	bl	602c <Port_Ci_Port_Ip_ConfigureInterleave>
    62b4:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    62b6:	f007 fd29 	bl	dd0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    62ba:	9b03      	ldr	r3, [sp, #12]
    62bc:	9a02      	ldr	r2, [sp, #8]
    62be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    62c2:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    62c4:	9b04      	ldr	r3, [sp, #16]
    62c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    62ca:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    62cc:	9b05      	ldr	r3, [sp, #20]
    62ce:	021b      	lsls	r3, r3, #8
    62d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    62d4:	9a04      	ldr	r2, [sp, #16]
    62d6:	4313      	orrs	r3, r2
    62d8:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    62da:	9b03      	ldr	r3, [sp, #12]
    62dc:	9a02      	ldr	r2, [sp, #8]
    62de:	9904      	ldr	r1, [sp, #16]
    62e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    62e4:	f007 fd3e 	bl	dd64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    62e8:	bf00      	nop
    62ea:	b007      	add	sp, #28
    62ec:	f85d fb04 	ldr.w	pc, [sp], #4

000062f0 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    62f0:	b500      	push	{lr}
    62f2:	b083      	sub	sp, #12
    62f4:	9001      	str	r0, [sp, #4]
    62f6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    62f8:	f007 fd5a 	bl	ddb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    62fc:	9b01      	ldr	r3, [sp, #4]
    62fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6302:	2101      	movs	r1, #1
    6304:	9b00      	ldr	r3, [sp, #0]
    6306:	fa01 f303 	lsl.w	r3, r1, r3
    630a:	431a      	orrs	r2, r3
    630c:	9b01      	ldr	r3, [sp, #4]
    630e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6312:	f007 fd79 	bl	de08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6316:	bf00      	nop
    6318:	b003      	add	sp, #12
    631a:	f85d fb04 	ldr.w	pc, [sp], #4

0000631e <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    631e:	b500      	push	{lr}
    6320:	b083      	sub	sp, #12
    6322:	9001      	str	r0, [sp, #4]
    6324:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6326:	f007 fd95 	bl	de54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    632a:	9b01      	ldr	r3, [sp, #4]
    632c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6330:	2101      	movs	r1, #1
    6332:	9b00      	ldr	r3, [sp, #0]
    6334:	fa01 f303 	lsl.w	r3, r1, r3
    6338:	43db      	mvns	r3, r3
    633a:	401a      	ands	r2, r3
    633c:	9b01      	ldr	r3, [sp, #4]
    633e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6342:	f007 fdb3 	bl	deac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6346:	bf00      	nop
    6348:	b003      	add	sp, #12
    634a:	f85d fb04 	ldr.w	pc, [sp], #4

0000634e <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    634e:	b082      	sub	sp, #8
    6350:	9001      	str	r0, [sp, #4]
    6352:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6354:	9b00      	ldr	r3, [sp, #0]
    6356:	785b      	ldrb	r3, [r3, #1]
    6358:	f003 0201 	and.w	r2, r3, #1
    635c:	9b01      	ldr	r3, [sp, #4]
    635e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6362:	9b00      	ldr	r3, [sp, #0]
    6364:	789b      	ldrb	r3, [r3, #2]
    6366:	f003 021f 	and.w	r2, r3, #31
    636a:	9b01      	ldr	r3, [sp, #4]
    636c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6370:	bf00      	nop
    6372:	b002      	add	sp, #8
    6374:	4770      	bx	lr

00006376 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6376:	b086      	sub	sp, #24
    6378:	9003      	str	r0, [sp, #12]
    637a:	9301      	str	r3, [sp, #4]
    637c:	460b      	mov	r3, r1
    637e:	f8ad 300a 	strh.w	r3, [sp, #10]
    6382:	4613      	mov	r3, r2
    6384:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6388:	2300      	movs	r3, #0
    638a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    638e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6392:	f043 0301 	orr.w	r3, r3, #1
    6396:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    639a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    639e:	f043 0302 	orr.w	r3, r3, #2
    63a2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    63a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63aa:	f043 0310 	orr.w	r3, r3, #16
    63ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    63b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    63ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    63be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    63c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    63ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    63d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    63d6:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    63da:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    63de:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    63e2:	4013      	ands	r3, r2
    63e4:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    63e8:	9b01      	ldr	r3, [sp, #4]
    63ea:	2b00      	cmp	r3, #0
    63ec:	d003      	beq.n	63f6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    63ee:	9b01      	ldr	r3, [sp, #4]
    63f0:	2b01      	cmp	r3, #1
    63f2:	d00a      	beq.n	640a <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    63f4:	e013      	b.n	641e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    63f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    63fa:	041a      	lsls	r2, r3, #16
    63fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6400:	431a      	orrs	r2, r3
    6402:	9b03      	ldr	r3, [sp, #12]
    6404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6408:	e009      	b.n	641e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    640a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    640e:	041a      	lsls	r2, r3, #16
    6410:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6414:	431a      	orrs	r2, r3
    6416:	9b03      	ldr	r3, [sp, #12]
    6418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    641c:	bf00      	nop
    }
}
    641e:	bf00      	nop
    6420:	b006      	add	sp, #24
    6422:	4770      	bx	lr

00006424 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6424:	b500      	push	{lr}
    6426:	b087      	sub	sp, #28
    6428:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    642a:	9b01      	ldr	r3, [sp, #4]
    642c:	885b      	ldrh	r3, [r3, #2]
    642e:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6432:	9b01      	ldr	r3, [sp, #4]
    6434:	689b      	ldr	r3, [r3, #8]
    6436:	7a1b      	ldrb	r3, [r3, #8]
    6438:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    643c:	9b01      	ldr	r3, [sp, #4]
    643e:	689b      	ldr	r3, [r3, #8]
    6440:	681b      	ldr	r3, [r3, #0]
    6442:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6444:	9b01      	ldr	r3, [sp, #4]
    6446:	689b      	ldr	r3, [r3, #8]
    6448:	685b      	ldr	r3, [r3, #4]
    644a:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    644c:	2300      	movs	r3, #0
    644e:	f8ad 3016 	strh.w	r3, [sp, #22]
    6452:	e111      	b.n	6678 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6454:	9b02      	ldr	r3, [sp, #8]
    6456:	2b02      	cmp	r3, #2
    6458:	d169      	bne.n	652e <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    645a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    645e:	2b01      	cmp	r3, #1
    6460:	d11a      	bne.n	6498 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6462:	9b01      	ldr	r3, [sp, #4]
    6464:	685a      	ldr	r2, [r3, #4]
    6466:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    646a:	005b      	lsls	r3, r3, #1
    646c:	4413      	add	r3, r2
    646e:	881b      	ldrh	r3, [r3, #0]
    6470:	f003 021f 	and.w	r2, r3, #31
    6474:	9b01      	ldr	r3, [sp, #4]
    6476:	6859      	ldr	r1, [r3, #4]
    6478:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    647c:	005b      	lsls	r3, r3, #1
    647e:	440b      	add	r3, r1
    6480:	881b      	ldrh	r3, [r3, #0]
    6482:	095b      	lsrs	r3, r3, #5
    6484:	b29b      	uxth	r3, r3
    6486:	4619      	mov	r1, r3
    6488:	4b81      	ldr	r3, [pc, #516]	; (6690 <Port_Ipw_Init_UnusedPins+0x26c>)
    648a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    648e:	2101      	movs	r1, #1
    6490:	fa01 f202 	lsl.w	r2, r1, r2
    6494:	605a      	str	r2, [r3, #4]
    6496:	e01d      	b.n	64d4 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6498:	f89d 3013 	ldrb.w	r3, [sp, #19]
    649c:	2b00      	cmp	r3, #0
    649e:	d119      	bne.n	64d4 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    64a0:	9b01      	ldr	r3, [sp, #4]
    64a2:	685a      	ldr	r2, [r3, #4]
    64a4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64a8:	005b      	lsls	r3, r3, #1
    64aa:	4413      	add	r3, r2
    64ac:	881b      	ldrh	r3, [r3, #0]
    64ae:	f003 021f 	and.w	r2, r3, #31
    64b2:	9b01      	ldr	r3, [sp, #4]
    64b4:	6859      	ldr	r1, [r3, #4]
    64b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ba:	005b      	lsls	r3, r3, #1
    64bc:	440b      	add	r3, r1
    64be:	881b      	ldrh	r3, [r3, #0]
    64c0:	095b      	lsrs	r3, r3, #5
    64c2:	b29b      	uxth	r3, r3
    64c4:	4619      	mov	r1, r3
    64c6:	4b72      	ldr	r3, [pc, #456]	; (6690 <Port_Ipw_Init_UnusedPins+0x26c>)
    64c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    64cc:	2101      	movs	r1, #1
    64ce:	fa01 f202 	lsl.w	r2, r1, r2
    64d2:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    64d4:	f007 fd10 	bl	def8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    64d8:	9b01      	ldr	r3, [sp, #4]
    64da:	685a      	ldr	r2, [r3, #4]
    64dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64e0:	005b      	lsls	r3, r3, #1
    64e2:	4413      	add	r3, r2
    64e4:	881b      	ldrh	r3, [r3, #0]
    64e6:	095b      	lsrs	r3, r3, #5
    64e8:	b29b      	uxth	r3, r3
    64ea:	461a      	mov	r2, r3
    64ec:	4b68      	ldr	r3, [pc, #416]	; (6690 <Port_Ipw_Init_UnusedPins+0x26c>)
    64ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64f2:	6959      	ldr	r1, [r3, #20]
    64f4:	9b01      	ldr	r3, [sp, #4]
    64f6:	685a      	ldr	r2, [r3, #4]
    64f8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64fc:	005b      	lsls	r3, r3, #1
    64fe:	4413      	add	r3, r2
    6500:	881b      	ldrh	r3, [r3, #0]
    6502:	f003 031f 	and.w	r3, r3, #31
    6506:	2201      	movs	r2, #1
    6508:	409a      	lsls	r2, r3
    650a:	9b01      	ldr	r3, [sp, #4]
    650c:	6858      	ldr	r0, [r3, #4]
    650e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6512:	005b      	lsls	r3, r3, #1
    6514:	4403      	add	r3, r0
    6516:	881b      	ldrh	r3, [r3, #0]
    6518:	095b      	lsrs	r3, r3, #5
    651a:	b29b      	uxth	r3, r3
    651c:	4618      	mov	r0, r3
    651e:	4b5c      	ldr	r3, [pc, #368]	; (6690 <Port_Ipw_Init_UnusedPins+0x26c>)
    6520:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6524:	430a      	orrs	r2, r1
    6526:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6528:	f007 fd12 	bl	df50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    652c:	e086      	b.n	663c <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    652e:	f007 fce3 	bl	def8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6532:	9b01      	ldr	r3, [sp, #4]
    6534:	685a      	ldr	r2, [r3, #4]
    6536:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    653a:	005b      	lsls	r3, r3, #1
    653c:	4413      	add	r3, r2
    653e:	881b      	ldrh	r3, [r3, #0]
    6540:	095b      	lsrs	r3, r3, #5
    6542:	b29b      	uxth	r3, r3
    6544:	461a      	mov	r2, r3
    6546:	4b52      	ldr	r3, [pc, #328]	; (6690 <Port_Ipw_Init_UnusedPins+0x26c>)
    6548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    654c:	6959      	ldr	r1, [r3, #20]
    654e:	9b01      	ldr	r3, [sp, #4]
    6550:	685a      	ldr	r2, [r3, #4]
    6552:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6556:	005b      	lsls	r3, r3, #1
    6558:	4413      	add	r3, r2
    655a:	881b      	ldrh	r3, [r3, #0]
    655c:	f003 031f 	and.w	r3, r3, #31
    6560:	2201      	movs	r2, #1
    6562:	fa02 f303 	lsl.w	r3, r2, r3
    6566:	43da      	mvns	r2, r3
    6568:	9b01      	ldr	r3, [sp, #4]
    656a:	6858      	ldr	r0, [r3, #4]
    656c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6570:	005b      	lsls	r3, r3, #1
    6572:	4403      	add	r3, r0
    6574:	881b      	ldrh	r3, [r3, #0]
    6576:	095b      	lsrs	r3, r3, #5
    6578:	b29b      	uxth	r3, r3
    657a:	4618      	mov	r0, r3
    657c:	4b44      	ldr	r3, [pc, #272]	; (6690 <Port_Ipw_Init_UnusedPins+0x26c>)
    657e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6582:	400a      	ands	r2, r1
    6584:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6586:	f007 fce3 	bl	df50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    658a:	f007 fd07 	bl	df9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    658e:	9b01      	ldr	r3, [sp, #4]
    6590:	685a      	ldr	r2, [r3, #4]
    6592:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6596:	005b      	lsls	r3, r3, #1
    6598:	4413      	add	r3, r2
    659a:	881b      	ldrh	r3, [r3, #0]
    659c:	095b      	lsrs	r3, r3, #5
    659e:	b29b      	uxth	r3, r3
    65a0:	461a      	mov	r2, r3
    65a2:	4b3b      	ldr	r3, [pc, #236]	; (6690 <Port_Ipw_Init_UnusedPins+0x26c>)
    65a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65a8:	6999      	ldr	r1, [r3, #24]
    65aa:	9b01      	ldr	r3, [sp, #4]
    65ac:	685a      	ldr	r2, [r3, #4]
    65ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65b2:	005b      	lsls	r3, r3, #1
    65b4:	4413      	add	r3, r2
    65b6:	881b      	ldrh	r3, [r3, #0]
    65b8:	f003 031f 	and.w	r3, r3, #31
    65bc:	2201      	movs	r2, #1
    65be:	fa02 f303 	lsl.w	r3, r2, r3
    65c2:	43da      	mvns	r2, r3
    65c4:	9b01      	ldr	r3, [sp, #4]
    65c6:	6858      	ldr	r0, [r3, #4]
    65c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65cc:	005b      	lsls	r3, r3, #1
    65ce:	4403      	add	r3, r0
    65d0:	881b      	ldrh	r3, [r3, #0]
    65d2:	095b      	lsrs	r3, r3, #5
    65d4:	b29b      	uxth	r3, r3
    65d6:	4618      	mov	r0, r3
    65d8:	4b2d      	ldr	r3, [pc, #180]	; (6690 <Port_Ipw_Init_UnusedPins+0x26c>)
    65da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    65de:	400a      	ands	r2, r1
    65e0:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    65e2:	9b02      	ldr	r3, [sp, #8]
    65e4:	2b03      	cmp	r3, #3
    65e6:	d127      	bne.n	6638 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    65e8:	9b01      	ldr	r3, [sp, #4]
    65ea:	685a      	ldr	r2, [r3, #4]
    65ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65f0:	005b      	lsls	r3, r3, #1
    65f2:	4413      	add	r3, r2
    65f4:	881b      	ldrh	r3, [r3, #0]
    65f6:	095b      	lsrs	r3, r3, #5
    65f8:	b29b      	uxth	r3, r3
    65fa:	461a      	mov	r2, r3
    65fc:	4b24      	ldr	r3, [pc, #144]	; (6690 <Port_Ipw_Init_UnusedPins+0x26c>)
    65fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6602:	6999      	ldr	r1, [r3, #24]
    6604:	9b01      	ldr	r3, [sp, #4]
    6606:	685a      	ldr	r2, [r3, #4]
    6608:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    660c:	005b      	lsls	r3, r3, #1
    660e:	4413      	add	r3, r2
    6610:	881b      	ldrh	r3, [r3, #0]
    6612:	f003 031f 	and.w	r3, r3, #31
    6616:	2201      	movs	r2, #1
    6618:	409a      	lsls	r2, r3
    661a:	9b01      	ldr	r3, [sp, #4]
    661c:	6858      	ldr	r0, [r3, #4]
    661e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6622:	005b      	lsls	r3, r3, #1
    6624:	4403      	add	r3, r0
    6626:	881b      	ldrh	r3, [r3, #0]
    6628:	095b      	lsrs	r3, r3, #5
    662a:	b29b      	uxth	r3, r3
    662c:	4618      	mov	r0, r3
    662e:	4b18      	ldr	r3, [pc, #96]	; (6690 <Port_Ipw_Init_UnusedPins+0x26c>)
    6630:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6634:	430a      	orrs	r2, r1
    6636:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6638:	f007 fcdc 	bl	dff4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    663c:	9b01      	ldr	r3, [sp, #4]
    663e:	685a      	ldr	r2, [r3, #4]
    6640:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6644:	005b      	lsls	r3, r3, #1
    6646:	4413      	add	r3, r2
    6648:	881b      	ldrh	r3, [r3, #0]
    664a:	095b      	lsrs	r3, r3, #5
    664c:	b29b      	uxth	r3, r3
    664e:	461a      	mov	r2, r3
    6650:	4b10      	ldr	r3, [pc, #64]	; (6694 <Port_Ipw_Init_UnusedPins+0x270>)
    6652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6656:	9a01      	ldr	r2, [sp, #4]
    6658:	6851      	ldr	r1, [r2, #4]
    665a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    665e:	0052      	lsls	r2, r2, #1
    6660:	440a      	add	r2, r1
    6662:	8812      	ldrh	r2, [r2, #0]
    6664:	f002 021f 	and.w	r2, r2, #31
    6668:	9903      	ldr	r1, [sp, #12]
    666a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    666e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6672:	3301      	adds	r3, #1
    6674:	f8ad 3016 	strh.w	r3, [sp, #22]
    6678:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    667c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6680:	429a      	cmp	r2, r3
    6682:	f4ff aee7 	bcc.w	6454 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6686:	bf00      	nop
    6688:	bf00      	nop
    668a:	b007      	add	sp, #28
    668c:	f85d fb04 	ldr.w	pc, [sp], #4
    6690:	0000f4e0 	.word	0x0000f4e0
    6694:	0000f4cc 	.word	0x0000f4cc

00006698 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6698:	b500      	push	{lr}
    669a:	b085      	sub	sp, #20
    669c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    669e:	9b01      	ldr	r3, [sp, #4]
    66a0:	7c1b      	ldrb	r3, [r3, #16]
    66a2:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    66a6:	2300      	movs	r3, #0
    66a8:	f8ad 300e 	strh.w	r3, [sp, #14]
    66ac:	e035      	b.n	671a <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    66ae:	9b01      	ldr	r3, [sp, #4]
    66b0:	695a      	ldr	r2, [r3, #20]
    66b2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66b6:	00db      	lsls	r3, r3, #3
    66b8:	4413      	add	r3, r2
    66ba:	781b      	ldrb	r3, [r3, #0]
    66bc:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    66c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    66c4:	4a1f      	ldr	r2, [pc, #124]	; (6744 <Port_Ipw_Init+0xac>)
    66c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    66ca:	9b01      	ldr	r3, [sp, #4]
    66cc:	695a      	ldr	r2, [r3, #20]
    66ce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66d2:	00db      	lsls	r3, r3, #3
    66d4:	4413      	add	r3, r2
    66d6:	4619      	mov	r1, r3
    66d8:	f7ff fe39 	bl	634e <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    66dc:	f007 fdf8 	bl	e2d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    66e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    66e4:	4a17      	ldr	r2, [pc, #92]	; (6744 <Port_Ipw_Init+0xac>)
    66e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66ea:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    66ee:	9b01      	ldr	r3, [sp, #4]
    66f0:	695a      	ldr	r2, [r3, #20]
    66f2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66f6:	00db      	lsls	r3, r3, #3
    66f8:	4413      	add	r3, r2
    66fa:	685a      	ldr	r2, [r3, #4]
    66fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6700:	4810      	ldr	r0, [pc, #64]	; (6744 <Port_Ipw_Init+0xac>)
    6702:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6706:	430a      	orrs	r2, r1
    6708:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    670c:	f007 fe0c 	bl	e328 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6710:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6714:	3301      	adds	r3, #1
    6716:	f8ad 300e 	strh.w	r3, [sp, #14]
    671a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    671e:	b29b      	uxth	r3, r3
    6720:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6724:	429a      	cmp	r2, r3
    6726:	d3c2      	bcc.n	66ae <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6728:	9b01      	ldr	r3, [sp, #4]
    672a:	6a1b      	ldr	r3, [r3, #32]
    672c:	4619      	mov	r1, r3
    672e:	2010      	movs	r0, #16
    6730:	f7ff fd98 	bl	6264 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6734:	9801      	ldr	r0, [sp, #4]
    6736:	f7ff fe75 	bl	6424 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    673a:	bf00      	nop
    673c:	b005      	add	sp, #20
    673e:	f85d fb04 	ldr.w	pc, [sp], #4
    6742:	bf00      	nop
    6744:	0000f4cc 	.word	0x0000f4cc

00006748 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6748:	b500      	push	{lr}
    674a:	b085      	sub	sp, #20
    674c:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    674e:	9b01      	ldr	r3, [sp, #4]
    6750:	881b      	ldrh	r3, [r3, #0]
    6752:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6756:	2300      	movs	r3, #0
    6758:	f8ad 300e 	strh.w	r3, [sp, #14]
    675c:	e0d2      	b.n	6904 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    675e:	9b01      	ldr	r3, [sp, #4]
    6760:	68d9      	ldr	r1, [r3, #12]
    6762:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6766:	4613      	mov	r3, r2
    6768:	009b      	lsls	r3, r3, #2
    676a:	4413      	add	r3, r2
    676c:	009b      	lsls	r3, r3, #2
    676e:	440b      	add	r3, r1
    6770:	7c5b      	ldrb	r3, [r3, #17]
    6772:	f083 0301 	eor.w	r3, r3, #1
    6776:	b2db      	uxtb	r3, r3
    6778:	2b00      	cmp	r3, #0
    677a:	f000 80be 	beq.w	68fa <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    677e:	9b01      	ldr	r3, [sp, #4]
    6780:	68d9      	ldr	r1, [r3, #12]
    6782:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6786:	4613      	mov	r3, r2
    6788:	009b      	lsls	r3, r3, #2
    678a:	4413      	add	r3, r2
    678c:	009b      	lsls	r3, r3, #2
    678e:	440b      	add	r3, r1
    6790:	7c1b      	ldrb	r3, [r3, #16]
    6792:	2b00      	cmp	r3, #0
    6794:	f000 80b1 	beq.w	68fa <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6798:	9b01      	ldr	r3, [sp, #4]
    679a:	68d9      	ldr	r1, [r3, #12]
    679c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67a0:	4613      	mov	r3, r2
    67a2:	009b      	lsls	r3, r3, #2
    67a4:	4413      	add	r3, r2
    67a6:	009b      	lsls	r3, r3, #2
    67a8:	440b      	add	r3, r1
    67aa:	881b      	ldrh	r3, [r3, #0]
    67ac:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    67b0:	9b01      	ldr	r3, [sp, #4]
    67b2:	68d9      	ldr	r1, [r3, #12]
    67b4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67b8:	4613      	mov	r3, r2
    67ba:	009b      	lsls	r3, r3, #2
    67bc:	4413      	add	r3, r2
    67be:	009b      	lsls	r3, r3, #2
    67c0:	440b      	add	r3, r1
    67c2:	68db      	ldr	r3, [r3, #12]
    67c4:	2b02      	cmp	r3, #2
    67c6:	d11d      	bne.n	6804 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    67c8:	f007 feca 	bl	e560 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67d0:	095b      	lsrs	r3, r3, #5
    67d2:	b29b      	uxth	r3, r3
    67d4:	461a      	mov	r2, r3
    67d6:	4b51      	ldr	r3, [pc, #324]	; (691c <Port_Ipw_RefreshPortDirection+0x1d4>)
    67d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67dc:	6959      	ldr	r1, [r3, #20]
    67de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67e2:	f003 031f 	and.w	r3, r3, #31
    67e6:	2201      	movs	r2, #1
    67e8:	409a      	lsls	r2, r3
    67ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67ee:	095b      	lsrs	r3, r3, #5
    67f0:	b29b      	uxth	r3, r3
    67f2:	4618      	mov	r0, r3
    67f4:	4b49      	ldr	r3, [pc, #292]	; (691c <Port_Ipw_RefreshPortDirection+0x1d4>)
    67f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67fa:	430a      	orrs	r2, r1
    67fc:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    67fe:	f007 fedb 	bl	e5b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    6802:	e07a      	b.n	68fa <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6804:	9b01      	ldr	r3, [sp, #4]
    6806:	68d9      	ldr	r1, [r3, #12]
    6808:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    680c:	4613      	mov	r3, r2
    680e:	009b      	lsls	r3, r3, #2
    6810:	4413      	add	r3, r2
    6812:	009b      	lsls	r3, r3, #2
    6814:	440b      	add	r3, r1
    6816:	68db      	ldr	r3, [r3, #12]
    6818:	2b01      	cmp	r3, #1
    681a:	d00b      	beq.n	6834 <Port_Ipw_RefreshPortDirection+0xec>
    681c:	9b01      	ldr	r3, [sp, #4]
    681e:	68d9      	ldr	r1, [r3, #12]
    6820:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6824:	4613      	mov	r3, r2
    6826:	009b      	lsls	r3, r3, #2
    6828:	4413      	add	r3, r2
    682a:	009b      	lsls	r3, r3, #2
    682c:	440b      	add	r3, r1
    682e:	68db      	ldr	r3, [r3, #12]
    6830:	2b03      	cmp	r3, #3
    6832:	d162      	bne.n	68fa <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6834:	f007 fe94 	bl	e560 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6838:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    683c:	095b      	lsrs	r3, r3, #5
    683e:	b29b      	uxth	r3, r3
    6840:	461a      	mov	r2, r3
    6842:	4b36      	ldr	r3, [pc, #216]	; (691c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6848:	6959      	ldr	r1, [r3, #20]
    684a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    684e:	f003 031f 	and.w	r3, r3, #31
    6852:	2201      	movs	r2, #1
    6854:	fa02 f303 	lsl.w	r3, r2, r3
    6858:	43da      	mvns	r2, r3
    685a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    685e:	095b      	lsrs	r3, r3, #5
    6860:	b29b      	uxth	r3, r3
    6862:	4618      	mov	r0, r3
    6864:	4b2d      	ldr	r3, [pc, #180]	; (691c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6866:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    686a:	400a      	ands	r2, r1
    686c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    686e:	f007 fea3 	bl	e5b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6872:	f007 fec7 	bl	e604 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6876:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    687a:	095b      	lsrs	r3, r3, #5
    687c:	b29b      	uxth	r3, r3
    687e:	461a      	mov	r2, r3
    6880:	4b26      	ldr	r3, [pc, #152]	; (691c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6886:	6999      	ldr	r1, [r3, #24]
    6888:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    688c:	f003 031f 	and.w	r3, r3, #31
    6890:	2201      	movs	r2, #1
    6892:	fa02 f303 	lsl.w	r3, r2, r3
    6896:	43da      	mvns	r2, r3
    6898:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    689c:	095b      	lsrs	r3, r3, #5
    689e:	b29b      	uxth	r3, r3
    68a0:	4618      	mov	r0, r3
    68a2:	4b1e      	ldr	r3, [pc, #120]	; (691c <Port_Ipw_RefreshPortDirection+0x1d4>)
    68a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    68a8:	400a      	ands	r2, r1
    68aa:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    68ac:	9b01      	ldr	r3, [sp, #4]
    68ae:	68d9      	ldr	r1, [r3, #12]
    68b0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    68b4:	4613      	mov	r3, r2
    68b6:	009b      	lsls	r3, r3, #2
    68b8:	4413      	add	r3, r2
    68ba:	009b      	lsls	r3, r3, #2
    68bc:	440b      	add	r3, r1
    68be:	68db      	ldr	r3, [r3, #12]
    68c0:	2b03      	cmp	r3, #3
    68c2:	d118      	bne.n	68f6 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    68c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    68c8:	095b      	lsrs	r3, r3, #5
    68ca:	b29b      	uxth	r3, r3
    68cc:	461a      	mov	r2, r3
    68ce:	4b13      	ldr	r3, [pc, #76]	; (691c <Port_Ipw_RefreshPortDirection+0x1d4>)
    68d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    68d4:	6999      	ldr	r1, [r3, #24]
    68d6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    68da:	f003 031f 	and.w	r3, r3, #31
    68de:	2201      	movs	r2, #1
    68e0:	409a      	lsls	r2, r3
    68e2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    68e6:	095b      	lsrs	r3, r3, #5
    68e8:	b29b      	uxth	r3, r3
    68ea:	4618      	mov	r0, r3
    68ec:	4b0b      	ldr	r3, [pc, #44]	; (691c <Port_Ipw_RefreshPortDirection+0x1d4>)
    68ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    68f2:	430a      	orrs	r2, r1
    68f4:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    68f6:	f007 feb1 	bl	e65c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    68fa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    68fe:	3301      	adds	r3, #1
    6900:	f8ad 300e 	strh.w	r3, [sp, #14]
    6904:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6908:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    690c:	429a      	cmp	r2, r3
    690e:	f4ff af26 	bcc.w	675e <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    6912:	bf00      	nop
    6914:	bf00      	nop
    6916:	b005      	add	sp, #20
    6918:	f85d fb04 	ldr.w	pc, [sp], #4
    691c:	0000f4e0 	.word	0x0000f4e0

00006920 <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    6920:	b084      	sub	sp, #16
    6922:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    6924:	2300      	movs	r3, #0
    6926:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    692a:	2300      	movs	r3, #0
    692c:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6930:	2300      	movs	r3, #0
    6932:	f88d 300e 	strb.w	r3, [sp, #14]
    6936:	e01b      	b.n	6970 <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    6938:	4a12      	ldr	r2, [pc, #72]	; (6984 <Can_IsControllersBusy+0x64>)
    693a:	9b01      	ldr	r3, [sp, #4]
    693c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6940:	695a      	ldr	r2, [r3, #20]
    6942:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6946:	009b      	lsls	r3, r3, #2
    6948:	4413      	add	r3, r2
    694a:	681b      	ldr	r3, [r3, #0]
    694c:	2b00      	cmp	r3, #0
    694e:	d00a      	beq.n	6966 <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    6950:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6954:	4a0c      	ldr	r2, [pc, #48]	; (6988 <Can_IsControllersBusy+0x68>)
    6956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    695a:	2b00      	cmp	r3, #0
    695c:	d003      	beq.n	6966 <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    695e:	2301      	movs	r3, #1
    6960:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    6964:	e008      	b.n	6978 <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6966:	f89d 300e 	ldrb.w	r3, [sp, #14]
    696a:	3301      	adds	r3, #1
    696c:	f88d 300e 	strb.w	r3, [sp, #14]
    6970:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6974:	2b00      	cmp	r3, #0
    6976:	d0df      	beq.n	6938 <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    6978:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    697c:	4618      	mov	r0, r3
    697e:	b004      	add	sp, #16
    6980:	4770      	bx	lr
    6982:	bf00      	nop
    6984:	1fff8cf4 	.word	0x1fff8cf4
    6988:	1fff8cf0 	.word	0x1fff8cf0

0000698c <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    698c:	b500      	push	{lr}
    698e:	b085      	sub	sp, #20
    6990:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    6992:	2300      	movs	r3, #0
    6994:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    6998:	2300      	movs	r3, #0
    699a:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    699e:	2300      	movs	r3, #0
    69a0:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    69a2:	2300      	movs	r3, #0
    69a4:	f88d 300e 	strb.w	r3, [sp, #14]
    69a8:	e035      	b.n	6a16 <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    69aa:	4a30      	ldr	r2, [pc, #192]	; (6a6c <Can_InitControllers+0xe0>)
    69ac:	9b01      	ldr	r3, [sp, #4]
    69ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69b2:	695a      	ldr	r2, [r3, #20]
    69b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    69b8:	009b      	lsls	r3, r3, #2
    69ba:	4413      	add	r3, r2
    69bc:	681b      	ldr	r3, [r3, #0]
    69be:	2b00      	cmp	r3, #0
    69c0:	d024      	beq.n	6a0c <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    69c2:	4a2a      	ldr	r2, [pc, #168]	; (6a6c <Can_InitControllers+0xe0>)
    69c4:	9b01      	ldr	r3, [sp, #4]
    69c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69ca:	695a      	ldr	r2, [r3, #20]
    69cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    69d0:	009b      	lsls	r3, r3, #2
    69d2:	4413      	add	r3, r2
    69d4:	681b      	ldr	r3, [r3, #0]
    69d6:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    69d8:	9b02      	ldr	r3, [sp, #8]
    69da:	7a1b      	ldrb	r3, [r3, #8]
    69dc:	2b00      	cmp	r3, #0
    69de:	d015      	beq.n	6a0c <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    69e0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    69e4:	4a22      	ldr	r2, [pc, #136]	; (6a70 <Can_InitControllers+0xe4>)
    69e6:	2100      	movs	r1, #0
    69e8:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    69ea:	9802      	ldr	r0, [sp, #8]
    69ec:	f001 f830 	bl	7a50 <Can_43_FLEXCAN_Ipw_Init>
    69f0:	4603      	mov	r3, r0
    69f2:	2b00      	cmp	r3, #0
    69f4:	d106      	bne.n	6a04 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    69f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    69fa:	4a1e      	ldr	r2, [pc, #120]	; (6a74 <Can_InitControllers+0xe8>)
    69fc:	2102      	movs	r1, #2
    69fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    6a02:	e003      	b.n	6a0c <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    6a04:	2301      	movs	r3, #1
    6a06:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    6a0a:	e008      	b.n	6a1e <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6a0c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6a10:	3301      	adds	r3, #1
    6a12:	f88d 300e 	strb.w	r3, [sp, #14]
    6a16:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6a1a:	2b00      	cmp	r3, #0
    6a1c:	d0c5      	beq.n	69aa <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    6a1e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a22:	2b00      	cmp	r3, #0
    6a24:	d01e      	beq.n	6a64 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6a26:	2300      	movs	r3, #0
    6a28:	f88d 300e 	strb.w	r3, [sp, #14]
    6a2c:	e016      	b.n	6a5c <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    6a2e:	4a0f      	ldr	r2, [pc, #60]	; (6a6c <Can_InitControllers+0xe0>)
    6a30:	9b01      	ldr	r3, [sp, #4]
    6a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a36:	695a      	ldr	r2, [r3, #20]
    6a38:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6a3c:	009b      	lsls	r3, r3, #2
    6a3e:	4413      	add	r3, r2
    6a40:	681b      	ldr	r3, [r3, #0]
    6a42:	2b00      	cmp	r3, #0
    6a44:	d005      	beq.n	6a52 <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    6a46:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6a4a:	4a0a      	ldr	r2, [pc, #40]	; (6a74 <Can_InitControllers+0xe8>)
    6a4c:	2100      	movs	r1, #0
    6a4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6a52:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6a56:	3301      	adds	r3, #1
    6a58:	f88d 300e 	strb.w	r3, [sp, #14]
    6a5c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6a60:	2b00      	cmp	r3, #0
    6a62:	d0e4      	beq.n	6a2e <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    6a64:	bf00      	nop
    6a66:	b005      	add	sp, #20
    6a68:	f85d fb04 	ldr.w	pc, [sp], #4
    6a6c:	1fff8cf4 	.word	0x1fff8cf4
    6a70:	1fff8cec 	.word	0x1fff8cec
    6a74:	1fff8cf0 	.word	0x1fff8cf0

00006a78 <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    6a78:	b500      	push	{lr}
    6a7a:	b085      	sub	sp, #20
    6a7c:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    6a7e:	2300      	movs	r3, #0
    6a80:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6a84:	2300      	movs	r3, #0
    6a86:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6a88:	2300      	movs	r3, #0
    6a8a:	f88d 300f 	strb.w	r3, [sp, #15]
    6a8e:	e028      	b.n	6ae2 <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    6a90:	4a18      	ldr	r2, [pc, #96]	; (6af4 <Can_DeInitControllers+0x7c>)
    6a92:	9b01      	ldr	r3, [sp, #4]
    6a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a98:	695a      	ldr	r2, [r3, #20]
    6a9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a9e:	009b      	lsls	r3, r3, #2
    6aa0:	4413      	add	r3, r2
    6aa2:	681b      	ldr	r3, [r3, #0]
    6aa4:	2b00      	cmp	r3, #0
    6aa6:	d017      	beq.n	6ad8 <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    6aa8:	4a12      	ldr	r2, [pc, #72]	; (6af4 <Can_DeInitControllers+0x7c>)
    6aaa:	9b01      	ldr	r3, [sp, #4]
    6aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ab0:	695a      	ldr	r2, [r3, #20]
    6ab2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ab6:	009b      	lsls	r3, r3, #2
    6ab8:	4413      	add	r3, r2
    6aba:	681b      	ldr	r3, [r3, #0]
    6abc:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    6abe:	9b02      	ldr	r3, [sp, #8]
    6ac0:	7a1b      	ldrb	r3, [r3, #8]
    6ac2:	2b00      	cmp	r3, #0
    6ac4:	d008      	beq.n	6ad8 <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    6ac6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6aca:	4a0b      	ldr	r2, [pc, #44]	; (6af8 <Can_DeInitControllers+0x80>)
    6acc:	2100      	movs	r1, #0
    6ace:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    6ad2:	9802      	ldr	r0, [sp, #8]
    6ad4:	f001 f8cc 	bl	7c70 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6ad8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6adc:	3301      	adds	r3, #1
    6ade:	f88d 300f 	strb.w	r3, [sp, #15]
    6ae2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ae6:	2b00      	cmp	r3, #0
    6ae8:	d0d2      	beq.n	6a90 <Can_DeInitControllers+0x18>
            }
        }
    }
}
    6aea:	bf00      	nop
    6aec:	bf00      	nop
    6aee:	b005      	add	sp, #20
    6af0:	f85d fb04 	ldr.w	pc, [sp], #4
    6af4:	1fff8cf4 	.word	0x1fff8cf4
    6af8:	1fff8cf0 	.word	0x1fff8cf0

00006afc <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    6afc:	b500      	push	{lr}
    6afe:	b085      	sub	sp, #20
    6b00:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    6b02:	2300      	movs	r3, #0
    6b04:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    6b06:	2300      	movs	r3, #0
    6b08:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    6b0c:	2300      	movs	r3, #0
    6b0e:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    6b10:	490c      	ldr	r1, [pc, #48]	; (6b44 <Can_43_FLEXCAN_Init+0x48>)
    6b12:	9b03      	ldr	r3, [sp, #12]
    6b14:	9a01      	ldr	r2, [sp, #4]
    6b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    6b1a:	9803      	ldr	r0, [sp, #12]
    6b1c:	f7ff ff00 	bl	6920 <Can_IsControllersBusy>
    6b20:	4603      	mov	r3, r0
    6b22:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    6b26:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6b2a:	f083 0301 	eor.w	r3, r3, #1
    6b2e:	b2db      	uxtb	r3, r3
    6b30:	2b00      	cmp	r3, #0
    6b32:	d002      	beq.n	6b3a <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    6b34:	9803      	ldr	r0, [sp, #12]
    6b36:	f7ff ff29 	bl	698c <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    6b3a:	bf00      	nop
    6b3c:	b005      	add	sp, #20
    6b3e:	f85d fb04 	ldr.w	pc, [sp], #4
    6b42:	bf00      	nop
    6b44:	1fff8cf4 	.word	0x1fff8cf4

00006b48 <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    6b48:	b500      	push	{lr}
    6b4a:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    6b4c:	2300      	movs	r3, #0
    6b4e:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    6b52:	2300      	movs	r3, #0
    6b54:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    6b58:	2300      	movs	r3, #0
    6b5a:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    6b5c:	2300      	movs	r3, #0
    6b5e:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6b60:	2300      	movs	r3, #0
    6b62:	f88d 3007 	strb.w	r3, [sp, #7]
    6b66:	e01b      	b.n	6ba0 <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    6b68:	4a19      	ldr	r2, [pc, #100]	; (6bd0 <Can_43_FLEXCAN_DeInit+0x88>)
    6b6a:	9b00      	ldr	r3, [sp, #0]
    6b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b70:	695a      	ldr	r2, [r3, #20]
    6b72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b76:	009b      	lsls	r3, r3, #2
    6b78:	4413      	add	r3, r2
    6b7a:	681b      	ldr	r3, [r3, #0]
    6b7c:	2b00      	cmp	r3, #0
    6b7e:	d00a      	beq.n	6b96 <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    6b80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b84:	4a13      	ldr	r2, [pc, #76]	; (6bd4 <Can_43_FLEXCAN_DeInit+0x8c>)
    6b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b8a:	2b01      	cmp	r3, #1
    6b8c:	d103      	bne.n	6b96 <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    6b8e:	2301      	movs	r3, #1
    6b90:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    6b94:	e008      	b.n	6ba8 <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6b96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b9a:	3301      	adds	r3, #1
    6b9c:	f88d 3007 	strb.w	r3, [sp, #7]
    6ba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d0df      	beq.n	6b68 <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    6ba8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6bac:	f083 0301 	eor.w	r3, r3, #1
    6bb0:	b2db      	uxtb	r3, r3
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	d007      	beq.n	6bc6 <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    6bb6:	9800      	ldr	r0, [sp, #0]
    6bb8:	f7ff ff5e 	bl	6a78 <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    6bbc:	4a04      	ldr	r2, [pc, #16]	; (6bd0 <Can_43_FLEXCAN_DeInit+0x88>)
    6bbe:	9b00      	ldr	r3, [sp, #0]
    6bc0:	2100      	movs	r1, #0
    6bc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    6bc6:	bf00      	nop
    6bc8:	b003      	add	sp, #12
    6bca:	f85d fb04 	ldr.w	pc, [sp], #4
    6bce:	bf00      	nop
    6bd0:	1fff8cf4 	.word	0x1fff8cf4
    6bd4:	1fff8cf0 	.word	0x1fff8cf0

00006bd8 <Can_43_FLEXCAN_SetBaudrate>:
    Std_ReturnType Can_43_FLEXCAN_SetBaudrate
    (
        uint8 Controller,
        uint16 BaudRateConfigID
    )
    {
    6bd8:	b500      	push	{lr}
    6bda:	b087      	sub	sp, #28
    6bdc:	4603      	mov	r3, r0
    6bde:	460a      	mov	r2, r1
    6be0:	f88d 3007 	strb.w	r3, [sp, #7]
    6be4:	4613      	mov	r3, r2
    6be6:	f8ad 3004 	strh.w	r3, [sp, #4]
        /* Returns the result of CAN set baudrate */
        Std_ReturnType eRetVal = (Std_ReturnType)E_NOT_OK;
    6bea:	2301      	movs	r3, #1
    6bec:	f88d 3017 	strb.w	r3, [sp, #23]
        uint32 u32CoreId = 0U;
    6bf0:	2300      	movs	r3, #0
    6bf2:	9304      	str	r3, [sp, #16]
        const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6bf4:	2300      	movs	r3, #0
    6bf6:	9303      	str	r3, [sp, #12]

        u32CoreId = Can_GetCoreID();
    6bf8:	2300      	movs	r3, #0
    6bfa:	9304      	str	r3, [sp, #16]
    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_BAUDRATE))
        {
    #endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    6bfc:	4a10      	ldr	r2, [pc, #64]	; (6c40 <Can_43_FLEXCAN_SetBaudrate+0x68>)
    6bfe:	9b04      	ldr	r3, [sp, #16]
    6c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c04:	695a      	ldr	r2, [r3, #20]
    6c06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c0a:	009b      	lsls	r3, r3, #2
    6c0c:	4413      	add	r3, r2
    6c0e:	681b      	ldr	r3, [r3, #0]
    6c10:	9303      	str	r3, [sp, #12]
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_BAUDRATE, CAN_43_FLEXCAN_E_PARAM_BAUDRATE);
                    }
                    else
                    {
                #endif
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    6c12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c16:	4a0b      	ldr	r2, [pc, #44]	; (6c44 <Can_43_FLEXCAN_SetBaudrate+0x6c>)
    6c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c1c:	2b02      	cmp	r3, #2
    6c1e:	d108      	bne.n	6c32 <Can_43_FLEXCAN_SetBaudrate+0x5a>
                        {
                            eRetVal = Can_43_FLEXCAN_Ipw_SetBaudrate(Can_pController, BaudRateConfigID);
    6c20:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6c24:	4619      	mov	r1, r3
    6c26:	9803      	ldr	r0, [sp, #12]
    6c28:	f001 f82e 	bl	7c88 <Can_43_FLEXCAN_Ipw_SetBaudrate>
    6c2c:	4603      	mov	r3, r0
    6c2e:	f88d 3017 	strb.w	r3, [sp, #23]
                        }
    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    }
        }
    #endif
        return eRetVal;
    6c32:	f89d 3017 	ldrb.w	r3, [sp, #23]
    }
    6c36:	4618      	mov	r0, r3
    6c38:	b007      	add	sp, #28
    6c3a:	f85d fb04 	ldr.w	pc, [sp], #4
    6c3e:	bf00      	nop
    6c40:	1fff8cf4 	.word	0x1fff8cf4
    6c44:	1fff8cf0 	.word	0x1fff8cf0

00006c48 <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    6c48:	b500      	push	{lr}
    6c4a:	b087      	sub	sp, #28
    6c4c:	4603      	mov	r3, r0
    6c4e:	9100      	str	r1, [sp, #0]
    6c50:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6c54:	2301      	movs	r3, #1
    6c56:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    6c5a:	2300      	movs	r3, #0
    6c5c:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6c5e:	2300      	movs	r3, #0
    6c60:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6c62:	2300      	movs	r3, #0
    6c64:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    6c66:	4a47      	ldr	r2, [pc, #284]	; (6d84 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    6c68:	9b04      	ldr	r3, [sp, #16]
    6c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c6e:	695a      	ldr	r2, [r3, #20]
    6c70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c74:	009b      	lsls	r3, r3, #2
    6c76:	4413      	add	r3, r2
    6c78:	681b      	ldr	r3, [r3, #0]
    6c7a:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    6c7c:	9b00      	ldr	r3, [sp, #0]
    6c7e:	2b03      	cmp	r3, #3
    6c80:	d05d      	beq.n	6d3e <Can_43_FLEXCAN_SetControllerMode+0xf6>
    6c82:	9b00      	ldr	r3, [sp, #0]
    6c84:	2b03      	cmp	r3, #3
    6c86:	d874      	bhi.n	6d72 <Can_43_FLEXCAN_SetControllerMode+0x12a>
    6c88:	9b00      	ldr	r3, [sp, #0]
    6c8a:	2b01      	cmp	r3, #1
    6c8c:	d003      	beq.n	6c96 <Can_43_FLEXCAN_SetControllerMode+0x4e>
    6c8e:	9b00      	ldr	r3, [sp, #0]
    6c90:	2b02      	cmp	r3, #2
    6c92:	d01d      	beq.n	6cd0 <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    6c94:	e06d      	b.n	6d72 <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    6c96:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c9a:	4a3b      	ldr	r2, [pc, #236]	; (6d88 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ca0:	2b02      	cmp	r3, #2
    6ca2:	d168      	bne.n	6d76 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    6ca4:	9803      	ldr	r0, [sp, #12]
    6ca6:	f001 f8f5 	bl	7e94 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    6caa:	4603      	mov	r3, r0
    6cac:	2b00      	cmp	r3, #0
    6cae:	d162      	bne.n	6d76 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    6cb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cb4:	4a34      	ldr	r2, [pc, #208]	; (6d88 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6cb6:	2101      	movs	r1, #1
    6cb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    6cbc:	9b03      	ldr	r3, [sp, #12]
    6cbe:	781b      	ldrb	r3, [r3, #0]
    6cc0:	2101      	movs	r1, #1
    6cc2:	4618      	mov	r0, r3
    6cc4:	f7f9 fe21 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    6cc8:	2300      	movs	r3, #0
    6cca:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    6cce:	e052      	b.n	6d76 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    6cd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cd4:	4a2c      	ldr	r2, [pc, #176]	; (6d88 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cda:	2b01      	cmp	r3, #1
    6cdc:	d005      	beq.n	6cea <Can_43_FLEXCAN_SetControllerMode+0xa2>
    6cde:	2b00      	cmp	r3, #0
    6ce0:	d029      	beq.n	6d36 <Can_43_FLEXCAN_SetControllerMode+0xee>
    6ce2:	3b02      	subs	r3, #2
    6ce4:	2b01      	cmp	r3, #1
    6ce6:	d826      	bhi.n	6d36 <Can_43_FLEXCAN_SetControllerMode+0xee>
    6ce8:	e015      	b.n	6d16 <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    6cea:	9803      	ldr	r0, [sp, #12]
    6cec:	f001 f940 	bl	7f70 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    6cf0:	4603      	mov	r3, r0
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d121      	bne.n	6d3a <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    6cf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cfa:	4a23      	ldr	r2, [pc, #140]	; (6d88 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6cfc:	2102      	movs	r1, #2
    6cfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    6d02:	9b03      	ldr	r3, [sp, #12]
    6d04:	781b      	ldrb	r3, [r3, #0]
    6d06:	2102      	movs	r1, #2
    6d08:	4618      	mov	r0, r3
    6d0a:	f7f9 fdfe 	bl	90a <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    6d0e:	2300      	movs	r3, #0
    6d10:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    6d14:	e011      	b.n	6d3a <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    6d16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d1a:	4a1b      	ldr	r2, [pc, #108]	; (6d88 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6d1c:	2102      	movs	r1, #2
    6d1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    6d22:	9b03      	ldr	r3, [sp, #12]
    6d24:	781b      	ldrb	r3, [r3, #0]
    6d26:	2102      	movs	r1, #2
    6d28:	4618      	mov	r0, r3
    6d2a:	f7f9 fdee 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    6d2e:	2300      	movs	r3, #0
    6d30:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    6d34:	e002      	b.n	6d3c <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    6d36:	bf00      	nop
    6d38:	e01e      	b.n	6d78 <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    6d3a:	bf00      	nop
                        break;
    6d3c:	e01c      	b.n	6d78 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    6d3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d42:	4a11      	ldr	r2, [pc, #68]	; (6d88 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d48:	3b02      	subs	r3, #2
    6d4a:	2b01      	cmp	r3, #1
    6d4c:	d80f      	bhi.n	6d6e <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    6d4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d52:	4a0d      	ldr	r2, [pc, #52]	; (6d88 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6d54:	2103      	movs	r1, #3
    6d56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    6d5a:	9b03      	ldr	r3, [sp, #12]
    6d5c:	781b      	ldrb	r3, [r3, #0]
    6d5e:	2103      	movs	r1, #3
    6d60:	4618      	mov	r0, r3
    6d62:	f7f9 fdd2 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    6d66:	2300      	movs	r3, #0
    6d68:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    6d6c:	e000      	b.n	6d70 <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    6d6e:	bf00      	nop
                        break;
    6d70:	e002      	b.n	6d78 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    6d72:	bf00      	nop
    6d74:	e000      	b.n	6d78 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    6d76:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    6d78:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6d7c:	4618      	mov	r0, r3
    6d7e:	b007      	add	sp, #28
    6d80:	f85d fb04 	ldr.w	pc, [sp], #4
    6d84:	1fff8cf4 	.word	0x1fff8cf4
    6d88:	1fff8cf0 	.word	0x1fff8cf0

00006d8c <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    6d8c:	b500      	push	{lr}
    6d8e:	b085      	sub	sp, #20
    6d90:	4603      	mov	r3, r0
    6d92:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    6d96:	2300      	movs	r3, #0
    6d98:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6d9a:	2300      	movs	r3, #0
    6d9c:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    6d9e:	2300      	movs	r3, #0
    6da0:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    6da2:	4a10      	ldr	r2, [pc, #64]	; (6de4 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    6da4:	9b03      	ldr	r3, [sp, #12]
    6da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6daa:	695a      	ldr	r2, [r3, #20]
    6dac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6db0:	009b      	lsls	r3, r3, #2
    6db2:	4413      	add	r3, r2
    6db4:	681b      	ldr	r3, [r3, #0]
    6db6:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    6db8:	f005 fe0c 	bl	c9d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    6dbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6dc0:	4a09      	ldr	r2, [pc, #36]	; (6de8 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    6dc2:	5cd2      	ldrb	r2, [r2, r3]
    6dc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6dc8:	3201      	adds	r2, #1
    6dca:	b2d1      	uxtb	r1, r2
    6dcc:	4a06      	ldr	r2, [pc, #24]	; (6de8 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    6dce:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    6dd0:	f005 fe2c 	bl	ca2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    6dd4:	9802      	ldr	r0, [sp, #8]
    6dd6:	f001 f949 	bl	806c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    6dda:	bf00      	nop
    6ddc:	b005      	add	sp, #20
    6dde:	f85d fb04 	ldr.w	pc, [sp], #4
    6de2:	bf00      	nop
    6de4:	1fff8cf4 	.word	0x1fff8cf4
    6de8:	1fff8cec 	.word	0x1fff8cec

00006dec <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    6dec:	b500      	push	{lr}
    6dee:	b085      	sub	sp, #20
    6df0:	4603      	mov	r3, r0
    6df2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    6df6:	2300      	movs	r3, #0
    6df8:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6dfa:	2300      	movs	r3, #0
    6dfc:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    6dfe:	2300      	movs	r3, #0
    6e00:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    6e02:	4a16      	ldr	r2, [pc, #88]	; (6e5c <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    6e04:	9b03      	ldr	r3, [sp, #12]
    6e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e0a:	695a      	ldr	r2, [r3, #20]
    6e0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e10:	009b      	lsls	r3, r3, #2
    6e12:	4413      	add	r3, r2
    6e14:	681b      	ldr	r3, [r3, #0]
    6e16:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    6e18:	f005 fe2e 	bl	ca78 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    6e1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e20:	4a0f      	ldr	r2, [pc, #60]	; (6e60 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    6e22:	5cd3      	ldrb	r3, [r2, r3]
    6e24:	2b00      	cmp	r3, #0
    6e26:	d009      	beq.n	6e3c <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    6e28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e2c:	4a0c      	ldr	r2, [pc, #48]	; (6e60 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    6e2e:	5cd2      	ldrb	r2, [r2, r3]
    6e30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e34:	3a01      	subs	r2, #1
    6e36:	b2d1      	uxtb	r1, r2
    6e38:	4a09      	ldr	r2, [pc, #36]	; (6e60 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    6e3a:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    6e3c:	f005 fe48 	bl	cad0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    6e40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e44:	4a06      	ldr	r2, [pc, #24]	; (6e60 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    6e46:	5cd3      	ldrb	r3, [r2, r3]
    6e48:	2b00      	cmp	r3, #0
    6e4a:	d102      	bne.n	6e52 <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    6e4c:	9802      	ldr	r0, [sp, #8]
    6e4e:	f001 f937 	bl	80c0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    6e52:	bf00      	nop
    6e54:	b005      	add	sp, #20
    6e56:	f85d fb04 	ldr.w	pc, [sp], #4
    6e5a:	bf00      	nop
    6e5c:	1fff8cf4 	.word	0x1fff8cf4
    6e60:	1fff8cec 	.word	0x1fff8cec

00006e64 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    6e64:	b500      	push	{lr}
    6e66:	b087      	sub	sp, #28
    6e68:	4603      	mov	r3, r0
    6e6a:	9100      	str	r1, [sp, #0]
    6e6c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6e70:	2301      	movs	r3, #1
    6e72:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    6e76:	2300      	movs	r3, #0
    6e78:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    6e7c:	2300      	movs	r3, #0
    6e7e:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6e80:	2300      	movs	r3, #0
    6e82:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6e84:	2300      	movs	r3, #0
    6e86:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    6e88:	4a18      	ldr	r2, [pc, #96]	; (6eec <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    6e8a:	9b04      	ldr	r3, [sp, #16]
    6e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e90:	695a      	ldr	r2, [r3, #20]
    6e92:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e96:	009b      	lsls	r3, r3, #2
    6e98:	4413      	add	r3, r2
    6e9a:	681b      	ldr	r3, [r3, #0]
    6e9c:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    6e9e:	f10d 030b 	add.w	r3, sp, #11
    6ea2:	4619      	mov	r1, r3
    6ea4:	9803      	ldr	r0, [sp, #12]
    6ea6:	f001 f937 	bl	8118 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    6eaa:	4603      	mov	r3, r0
    6eac:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    6eb0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	d112      	bne.n	6ede <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    6eb8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	d002      	beq.n	6ec6 <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    6ec0:	2b01      	cmp	r3, #1
    6ec2:	d004      	beq.n	6ece <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    6ec4:	e007      	b.n	6ed6 <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    6ec6:	9b00      	ldr	r3, [sp, #0]
    6ec8:	2200      	movs	r2, #0
    6eca:	601a      	str	r2, [r3, #0]
                                break;
    6ecc:	e008      	b.n	6ee0 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    6ece:	9b00      	ldr	r3, [sp, #0]
    6ed0:	2201      	movs	r2, #1
    6ed2:	601a      	str	r2, [r3, #0]
                                break;
    6ed4:	e004      	b.n	6ee0 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    6ed6:	9b00      	ldr	r3, [sp, #0]
    6ed8:	2202      	movs	r2, #2
    6eda:	601a      	str	r2, [r3, #0]
                                break;
    6edc:	e000      	b.n	6ee0 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    6ede:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    6ee0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6ee4:	4618      	mov	r0, r3
    6ee6:	b007      	add	sp, #28
    6ee8:	f85d fb04 	ldr.w	pc, [sp], #4
    6eec:	1fff8cf4 	.word	0x1fff8cf4

00006ef0 <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    6ef0:	b084      	sub	sp, #16
    6ef2:	4603      	mov	r3, r0
    6ef4:	9100      	str	r1, [sp, #0]
    6ef6:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6efa:	2301      	movs	r3, #1
    6efc:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    6f00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f04:	4a06      	ldr	r2, [pc, #24]	; (6f20 <Can_43_FLEXCAN_GetControllerMode+0x30>)
    6f06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6f0a:	9b00      	ldr	r3, [sp, #0]
    6f0c:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    6f0e:	2300      	movs	r3, #0
    6f10:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    6f14:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6f18:	4618      	mov	r0, r3
    6f1a:	b004      	add	sp, #16
    6f1c:	4770      	bx	lr
    6f1e:	bf00      	nop
    6f20:	1fff8cf0 	.word	0x1fff8cf0

00006f24 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    6f24:	b500      	push	{lr}
    6f26:	b087      	sub	sp, #28
    6f28:	4603      	mov	r3, r0
    6f2a:	9100      	str	r1, [sp, #0]
    6f2c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6f30:	2301      	movs	r3, #1
    6f32:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    6f36:	2300      	movs	r3, #0
    6f38:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6f3a:	2300      	movs	r3, #0
    6f3c:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6f3e:	2300      	movs	r3, #0
    6f40:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    6f42:	4a0c      	ldr	r2, [pc, #48]	; (6f74 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    6f44:	9b04      	ldr	r3, [sp, #16]
    6f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f4a:	695a      	ldr	r2, [r3, #20]
    6f4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f50:	009b      	lsls	r3, r3, #2
    6f52:	4413      	add	r3, r2
    6f54:	681b      	ldr	r3, [r3, #0]
    6f56:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    6f58:	9900      	ldr	r1, [sp, #0]
    6f5a:	9803      	ldr	r0, [sp, #12]
    6f5c:	f001 f907 	bl	816e <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    6f60:	4603      	mov	r3, r0
    6f62:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    6f66:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6f6a:	4618      	mov	r0, r3
    6f6c:	b007      	add	sp, #28
    6f6e:	f85d fb04 	ldr.w	pc, [sp], #4
    6f72:	bf00      	nop
    6f74:	1fff8cf4 	.word	0x1fff8cf4

00006f78 <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    6f78:	b500      	push	{lr}
    6f7a:	b087      	sub	sp, #28
    6f7c:	4603      	mov	r3, r0
    6f7e:	9100      	str	r1, [sp, #0]
    6f80:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6f84:	2301      	movs	r3, #1
    6f86:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    6f8a:	2300      	movs	r3, #0
    6f8c:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6f8e:	2300      	movs	r3, #0
    6f90:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6f92:	2300      	movs	r3, #0
    6f94:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    6f96:	4a0c      	ldr	r2, [pc, #48]	; (6fc8 <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    6f98:	9b04      	ldr	r3, [sp, #16]
    6f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f9e:	695a      	ldr	r2, [r3, #20]
    6fa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6fa4:	009b      	lsls	r3, r3, #2
    6fa6:	4413      	add	r3, r2
    6fa8:	681b      	ldr	r3, [r3, #0]
    6faa:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    6fac:	9900      	ldr	r1, [sp, #0]
    6fae:	9803      	ldr	r0, [sp, #12]
    6fb0:	f001 f8cb 	bl	814a <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    6fb4:	4603      	mov	r3, r0
    6fb6:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    6fba:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6fbe:	4618      	mov	r0, r3
    6fc0:	b007      	add	sp, #28
    6fc2:	f85d fb04 	ldr.w	pc, [sp], #4
    6fc6:	bf00      	nop
    6fc8:	1fff8cf4 	.word	0x1fff8cf4

00006fcc <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    6fcc:	b500      	push	{lr}
    6fce:	b089      	sub	sp, #36	; 0x24
    6fd0:	4603      	mov	r3, r0
    6fd2:	9100      	str	r1, [sp, #0]
    6fd4:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    6fd8:	2301      	movs	r3, #1
    6fda:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    6fde:	2300      	movs	r3, #0
    6fe0:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    6fe4:	2300      	movs	r3, #0
    6fe6:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    6fe8:	2300      	movs	r3, #0
    6fea:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6fee:	2300      	movs	r3, #0
    6ff0:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    6ff2:	2300      	movs	r3, #0
    6ff4:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6ff6:	2300      	movs	r3, #0
    6ff8:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    6ffa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6ffe:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    7002:	4a1d      	ldr	r2, [pc, #116]	; (7078 <Can_43_FLEXCAN_Write+0xac>)
    7004:	9b06      	ldr	r3, [sp, #24]
    7006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    700a:	68da      	ldr	r2, [r3, #12]
    700c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7010:	4413      	add	r3, r2
    7012:	781b      	ldrb	r3, [r3, #0]
    7014:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7018:	4a17      	ldr	r2, [pc, #92]	; (7078 <Can_43_FLEXCAN_Write+0xac>)
    701a:	9b06      	ldr	r3, [sp, #24]
    701c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7020:	695a      	ldr	r2, [r3, #20]
    7022:	f89d 301e 	ldrb.w	r3, [sp, #30]
    7026:	009b      	lsls	r3, r3, #2
    7028:	4413      	add	r3, r2
    702a:	681b      	ldr	r3, [r3, #0]
    702c:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    702e:	9b04      	ldr	r3, [sp, #16]
    7030:	2b00      	cmp	r3, #0
    7032:	d01b      	beq.n	706c <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    7034:	4a10      	ldr	r2, [pc, #64]	; (7078 <Can_43_FLEXCAN_Write+0xac>)
    7036:	9b06      	ldr	r3, [sp, #24]
    7038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    703c:	6919      	ldr	r1, [r3, #16]
    703e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7042:	4613      	mov	r3, r2
    7044:	00db      	lsls	r3, r3, #3
    7046:	4413      	add	r3, r2
    7048:	009b      	lsls	r3, r3, #2
    704a:	440b      	add	r3, r1
    704c:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    704e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    7052:	4a0a      	ldr	r2, [pc, #40]	; (707c <Can_43_FLEXCAN_Write+0xb0>)
    7054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7058:	2b01      	cmp	r3, #1
    705a:	d107      	bne.n	706c <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    705c:	9a00      	ldr	r2, [sp, #0]
    705e:	9903      	ldr	r1, [sp, #12]
    7060:	9804      	ldr	r0, [sp, #16]
    7062:	f001 f896 	bl	8192 <Can_43_FLEXCAN_Ipw_Write>
    7066:	4603      	mov	r3, r0
    7068:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    706c:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    7070:	4618      	mov	r0, r3
    7072:	b009      	add	sp, #36	; 0x24
    7074:	f85d fb04 	ldr.w	pc, [sp], #4
    7078:	1fff8cf4 	.word	0x1fff8cf4
    707c:	1fff8cf0 	.word	0x1fff8cf0

00007080 <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    7080:	bf00      	nop
    7082:	4770      	bx	lr

00007084 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    7084:	bf00      	nop
    7086:	4770      	bx	lr

00007088 <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    7088:	bf00      	nop
    708a:	4770      	bx	lr

0000708c <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    708c:	b500      	push	{lr}
    708e:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    7090:	2300      	movs	r3, #0
    7092:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    7096:	2300      	movs	r3, #0
    7098:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    709a:	2300      	movs	r3, #0
    709c:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    709e:	2300      	movs	r3, #0
    70a0:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    70a2:	4a17      	ldr	r2, [pc, #92]	; (7100 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    70a4:	9b02      	ldr	r3, [sp, #8]
    70a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70aa:	2b00      	cmp	r3, #0
    70ac:	d024      	beq.n	70f8 <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    70ae:	e01f      	b.n	70f0 <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    70b0:	4a13      	ldr	r2, [pc, #76]	; (7100 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    70b2:	9b02      	ldr	r3, [sp, #8]
    70b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70b8:	695a      	ldr	r2, [r3, #20]
    70ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70be:	009b      	lsls	r3, r3, #2
    70c0:	4413      	add	r3, r2
    70c2:	681b      	ldr	r3, [r3, #0]
    70c4:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    70c6:	9b01      	ldr	r3, [sp, #4]
    70c8:	2b00      	cmp	r3, #0
    70ca:	d00c      	beq.n	70e6 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    70cc:	9b01      	ldr	r3, [sp, #4]
    70ce:	7a1b      	ldrb	r3, [r3, #8]
    70d0:	2b00      	cmp	r3, #0
    70d2:	d008      	beq.n	70e6 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    70d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70d8:	009b      	lsls	r3, r3, #2
    70da:	4a0a      	ldr	r2, [pc, #40]	; (7104 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    70dc:	4413      	add	r3, r2
    70de:	4619      	mov	r1, r3
    70e0:	9801      	ldr	r0, [sp, #4]
    70e2:	f001 f95c 	bl	839e <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    70e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70ea:	3301      	adds	r3, #1
    70ec:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    70f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70f4:	2b00      	cmp	r3, #0
    70f6:	d0db      	beq.n	70b0 <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    70f8:	bf00      	nop
    70fa:	b005      	add	sp, #20
    70fc:	f85d fb04 	ldr.w	pc, [sp], #4
    7100:	1fff8cf4 	.word	0x1fff8cf4
    7104:	1fff8cf0 	.word	0x1fff8cf0

00007108 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    7108:	b500      	push	{lr}
    710a:	b087      	sub	sp, #28
    710c:	4603      	mov	r3, r0
    710e:	9200      	str	r2, [sp, #0]
    7110:	f88d 3007 	strb.w	r3, [sp, #7]
    7114:	460b      	mov	r3, r1
    7116:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    711a:	2300      	movs	r3, #0
    711c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    7120:	2300      	movs	r3, #0
    7122:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7124:	2300      	movs	r3, #0
    7126:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    7128:	2300      	movs	r3, #0
    712a:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    712c:	4a16      	ldr	r2, [pc, #88]	; (7188 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    712e:	9b04      	ldr	r3, [sp, #16]
    7130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7134:	2b00      	cmp	r3, #0
    7136:	d022      	beq.n	717e <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    7138:	4a13      	ldr	r2, [pc, #76]	; (7188 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    713a:	9b04      	ldr	r3, [sp, #16]
    713c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7140:	689a      	ldr	r2, [r3, #8]
    7142:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7146:	4413      	add	r3, r2
    7148:	781b      	ldrb	r3, [r3, #0]
    714a:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    714e:	4a0e      	ldr	r2, [pc, #56]	; (7188 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7150:	9b04      	ldr	r3, [sp, #16]
    7152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7156:	695a      	ldr	r2, [r3, #20]
    7158:	f89d 3017 	ldrb.w	r3, [sp, #23]
    715c:	009b      	lsls	r3, r3, #2
    715e:	4413      	add	r3, r2
    7160:	681b      	ldr	r3, [r3, #0]
    7162:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    7164:	9b03      	ldr	r3, [sp, #12]
    7166:	2b00      	cmp	r3, #0
    7168:	d009      	beq.n	717e <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    716a:	4a07      	ldr	r2, [pc, #28]	; (7188 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    716c:	9b04      	ldr	r3, [sp, #16]
    716e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    7172:	f89d 2006 	ldrb.w	r2, [sp, #6]
    7176:	9b00      	ldr	r3, [sp, #0]
    7178:	9803      	ldr	r0, [sp, #12]
    717a:	f001 f946 	bl	840a <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    717e:	bf00      	nop
    7180:	b007      	add	sp, #28
    7182:	f85d fb04 	ldr.w	pc, [sp], #4
    7186:	bf00      	nop
    7188:	1fff8cf4 	.word	0x1fff8cf4

0000718c <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    718c:	b500      	push	{lr}
    718e:	b087      	sub	sp, #28
    7190:	4603      	mov	r3, r0
    7192:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    7196:	2300      	movs	r3, #0
    7198:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    719c:	2300      	movs	r3, #0
    719e:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    71a0:	2300      	movs	r3, #0
    71a2:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    71a4:	2300      	movs	r3, #0
    71a6:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    71a8:	4a19      	ldr	r2, [pc, #100]	; (7210 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    71aa:	9b04      	ldr	r3, [sp, #16]
    71ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71b0:	2b00      	cmp	r3, #0
    71b2:	d029      	beq.n	7208 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    71b4:	4a16      	ldr	r2, [pc, #88]	; (7210 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    71b6:	9b04      	ldr	r3, [sp, #16]
    71b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71bc:	689a      	ldr	r2, [r3, #8]
    71be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71c2:	4413      	add	r3, r2
    71c4:	781b      	ldrb	r3, [r3, #0]
    71c6:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    71ca:	4a11      	ldr	r2, [pc, #68]	; (7210 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    71cc:	9b04      	ldr	r3, [sp, #16]
    71ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71d2:	695a      	ldr	r2, [r3, #20]
    71d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    71d8:	009b      	lsls	r3, r3, #2
    71da:	4413      	add	r3, r2
    71dc:	681b      	ldr	r3, [r3, #0]
    71de:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    71e0:	9b03      	ldr	r3, [sp, #12]
    71e2:	2b00      	cmp	r3, #0
    71e4:	d010      	beq.n	7208 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    71e6:	9803      	ldr	r0, [sp, #12]
    71e8:	f000 fec2 	bl	7f70 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    71ec:	4603      	mov	r3, r0
    71ee:	2b00      	cmp	r3, #0
    71f0:	d10a      	bne.n	7208 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    71f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    71f6:	4a07      	ldr	r2, [pc, #28]	; (7214 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    71f8:	2102      	movs	r1, #2
    71fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    71fe:	9b03      	ldr	r3, [sp, #12]
    7200:	781b      	ldrb	r3, [r3, #0]
    7202:	4618      	mov	r0, r3
    7204:	f7f9 fb7a 	bl	8fc <CanIf_ControllerBusOff>
            }
        }
    }
}
    7208:	bf00      	nop
    720a:	b007      	add	sp, #28
    720c:	f85d fb04 	ldr.w	pc, [sp], #4
    7210:	1fff8cf4 	.word	0x1fff8cf4
    7214:	1fff8cf0 	.word	0x1fff8cf0

00007218 <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    7218:	b500      	push	{lr}
    721a:	b085      	sub	sp, #20
    721c:	9003      	str	r0, [sp, #12]
    721e:	9102      	str	r1, [sp, #8]
    7220:	9201      	str	r2, [sp, #4]
    7222:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    7224:	9b01      	ldr	r3, [sp, #4]
    7226:	685a      	ldr	r2, [r3, #4]
    7228:	9b03      	ldr	r3, [sp, #12]
    722a:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    722c:	9b01      	ldr	r3, [sp, #4]
    722e:	681b      	ldr	r3, [r3, #0]
    7230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    7234:	2b00      	cmp	r3, #0
    7236:	d005      	beq.n	7244 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    7238:	9b03      	ldr	r3, [sp, #12]
    723a:	681b      	ldr	r3, [r3, #0]
    723c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    7240:	9b03      	ldr	r3, [sp, #12]
    7242:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    7244:	9b06      	ldr	r3, [sp, #24]
    7246:	699b      	ldr	r3, [r3, #24]
    7248:	2b00      	cmp	r3, #0
    724a:	d10c      	bne.n	7266 <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    724c:	9b01      	ldr	r3, [sp, #4]
    724e:	681b      	ldr	r3, [r3, #0]
    7250:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    7254:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    7258:	d105      	bne.n	7266 <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    725a:	2301      	movs	r3, #1
    725c:	2208      	movs	r2, #8
    725e:	2100      	movs	r1, #0
    7260:	2050      	movs	r0, #80	; 0x50
    7262:	f007 fc9b 	bl	eb9c <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    7266:	9b06      	ldr	r3, [sp, #24]
    7268:	699b      	ldr	r3, [r3, #24]
    726a:	2b01      	cmp	r3, #1
    726c:	d009      	beq.n	7282 <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    726e:	9b01      	ldr	r3, [sp, #4]
    7270:	681b      	ldr	r3, [r3, #0]
    7272:	2b00      	cmp	r3, #0
    7274:	da05      	bge.n	7282 <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    7276:	9b03      	ldr	r3, [sp, #12]
    7278:	681b      	ldr	r3, [r3, #0]
    727a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    727e:	9b03      	ldr	r3, [sp, #12]
    7280:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    7282:	9b06      	ldr	r3, [sp, #24]
    7284:	7c1a      	ldrb	r2, [r3, #16]
    7286:	9b01      	ldr	r3, [sp, #4]
    7288:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    728c:	429a      	cmp	r2, r3
    728e:	d805      	bhi.n	729c <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    7290:	9b06      	ldr	r3, [sp, #24]
    7292:	7c1b      	ldrb	r3, [r3, #16]
    7294:	461a      	mov	r2, r3
    7296:	9b02      	ldr	r3, [sp, #8]
    7298:	609a      	str	r2, [r3, #8]
    729a:	e005      	b.n	72a8 <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    729c:	9b01      	ldr	r3, [sp, #4]
    729e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    72a2:	461a      	mov	r2, r3
    72a4:	9b02      	ldr	r3, [sp, #8]
    72a6:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    72a8:	9b06      	ldr	r3, [sp, #24]
    72aa:	881a      	ldrh	r2, [r3, #0]
    72ac:	9b03      	ldr	r3, [sp, #12]
    72ae:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    72b0:	9b00      	ldr	r3, [sp, #0]
    72b2:	781a      	ldrb	r2, [r3, #0]
    72b4:	9b03      	ldr	r3, [sp, #12]
    72b6:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    72b8:	9b01      	ldr	r3, [sp, #4]
    72ba:	f103 0208 	add.w	r2, r3, #8
    72be:	9b02      	ldr	r3, [sp, #8]
    72c0:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    72c2:	9902      	ldr	r1, [sp, #8]
    72c4:	9803      	ldr	r0, [sp, #12]
    72c6:	f7f9 fb45 	bl	954 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    72ca:	bf00      	nop
    72cc:	b005      	add	sp, #20
    72ce:	f85d fb04 	ldr.w	pc, [sp], #4

000072d2 <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    72d2:	b500      	push	{lr}
    72d4:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    72d8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    72dc:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    72e0:	6018      	str	r0, [r3, #0]
    72e2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    72e6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    72ea:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    72ec:	2300      	movs	r3, #0
    72ee:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    72f2:	2300      	movs	r3, #0
    72f4:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    72f8:	2300      	movs	r3, #0
    72fa:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    72fe:	2300      	movs	r3, #0
    7300:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    7304:	2300      	movs	r3, #0
    7306:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    730a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    730e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7312:	681b      	ldr	r3, [r3, #0]
    7314:	7c9b      	ldrb	r3, [r3, #18]
    7316:	089b      	lsrs	r3, r3, #2
    7318:	b2db      	uxtb	r3, r3
    731a:	3306      	adds	r3, #6
    731c:	2b20      	cmp	r3, #32
    731e:	d80b      	bhi.n	7338 <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    7320:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7324:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7328:	681b      	ldr	r3, [r3, #0]
    732a:	7c9b      	ldrb	r3, [r3, #18]
    732c:	089b      	lsrs	r3, r3, #2
    732e:	b2db      	uxtb	r3, r3
    7330:	3306      	adds	r3, #6
    7332:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    7336:	e002      	b.n	733e <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    7338:	2320      	movs	r3, #32
    733a:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    733e:	2300      	movs	r3, #0
    7340:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    7344:	e169      	b.n	761a <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    7346:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    734a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    734e:	681b      	ldr	r3, [r3, #0]
    7350:	691b      	ldr	r3, [r3, #16]
    7352:	2b00      	cmp	r3, #0
    7354:	d13a      	bne.n	73cc <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    7356:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    735a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    735e:	681b      	ldr	r3, [r3, #0]
    7360:	7c9b      	ldrb	r3, [r3, #18]
    7362:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    7366:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    736a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    736e:	2300      	movs	r3, #0
    7370:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7374:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7378:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    737c:	681b      	ldr	r3, [r3, #0]
    737e:	689b      	ldr	r3, [r3, #8]
    7380:	2b00      	cmp	r3, #0
    7382:	d011      	beq.n	73a8 <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    7384:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7388:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    738c:	681b      	ldr	r3, [r3, #0]
    738e:	695a      	ldr	r2, [r3, #20]
    7390:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7394:	00db      	lsls	r3, r3, #3
    7396:	4413      	add	r3, r2
    7398:	685b      	ldr	r3, [r3, #4]
    739a:	005b      	lsls	r3, r3, #1
    739c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    73a0:	4313      	orrs	r3, r2
    73a2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    73a6:	e126      	b.n	75f6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    73a8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    73ac:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    73b0:	681b      	ldr	r3, [r3, #0]
    73b2:	695a      	ldr	r2, [r3, #20]
    73b4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    73b8:	00db      	lsls	r3, r3, #3
    73ba:	4413      	add	r3, r2
    73bc:	685b      	ldr	r3, [r3, #4]
    73be:	04db      	lsls	r3, r3, #19
    73c0:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    73c4:	4313      	orrs	r3, r2
    73c6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    73ca:	e114      	b.n	75f6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    73cc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    73d0:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    73d4:	681b      	ldr	r3, [r3, #0]
    73d6:	691b      	ldr	r3, [r3, #16]
    73d8:	2b01      	cmp	r3, #1
    73da:	d160      	bne.n	749e <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    73dc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    73e0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    73e4:	681b      	ldr	r3, [r3, #0]
    73e6:	7c9b      	ldrb	r3, [r3, #18]
    73e8:	005b      	lsls	r3, r3, #1
    73ea:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    73ee:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    73f2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    73f6:	2301      	movs	r3, #1
    73f8:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    73fc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7400:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7404:	681b      	ldr	r3, [r3, #0]
    7406:	689b      	ldr	r3, [r3, #8]
    7408:	2b00      	cmp	r3, #0
    740a:	d024      	beq.n	7456 <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    740c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7410:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7414:	681b      	ldr	r3, [r3, #0]
    7416:	695a      	ldr	r2, [r3, #20]
    7418:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    741c:	011b      	lsls	r3, r3, #4
    741e:	4413      	add	r3, r2
    7420:	685b      	ldr	r3, [r3, #4]
    7422:	0bdb      	lsrs	r3, r3, #15
    7424:	041b      	lsls	r3, r3, #16
    7426:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    742a:	4313      	orrs	r3, r2
    742c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    7430:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7434:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7438:	681b      	ldr	r3, [r3, #0]
    743a:	695a      	ldr	r2, [r3, #20]
    743c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7440:	011b      	lsls	r3, r3, #4
    7442:	3308      	adds	r3, #8
    7444:	4413      	add	r3, r2
    7446:	685b      	ldr	r3, [r3, #4]
    7448:	0bdb      	lsrs	r3, r3, #15
    744a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    744e:	4313      	orrs	r3, r2
    7450:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7454:	e0cf      	b.n	75f6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    7456:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    745a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    745e:	681b      	ldr	r3, [r3, #0]
    7460:	695a      	ldr	r2, [r3, #20]
    7462:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7466:	011b      	lsls	r3, r3, #4
    7468:	4413      	add	r3, r2
    746a:	685b      	ldr	r3, [r3, #4]
    746c:	04db      	lsls	r3, r3, #19
    746e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7472:	4313      	orrs	r3, r2
    7474:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    7478:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    747c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7480:	681b      	ldr	r3, [r3, #0]
    7482:	695a      	ldr	r2, [r3, #20]
    7484:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7488:	011b      	lsls	r3, r3, #4
    748a:	3308      	adds	r3, #8
    748c:	4413      	add	r3, r2
    748e:	685b      	ldr	r3, [r3, #4]
    7490:	00db      	lsls	r3, r3, #3
    7492:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7496:	4313      	orrs	r3, r2
    7498:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    749c:	e0ab      	b.n	75f6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    749e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    74a2:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    74a6:	681b      	ldr	r3, [r3, #0]
    74a8:	7c9b      	ldrb	r3, [r3, #18]
    74aa:	009b      	lsls	r3, r3, #2
    74ac:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    74b0:	2300      	movs	r3, #0
    74b2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    74b6:	2302      	movs	r3, #2
    74b8:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    74bc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    74c0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    74c4:	681b      	ldr	r3, [r3, #0]
    74c6:	689b      	ldr	r3, [r3, #8]
    74c8:	2b00      	cmp	r3, #0
    74ca:	d04a      	beq.n	7562 <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    74cc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    74d0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    74d4:	681b      	ldr	r3, [r3, #0]
    74d6:	695a      	ldr	r2, [r3, #20]
    74d8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    74dc:	015b      	lsls	r3, r3, #5
    74de:	4413      	add	r3, r2
    74e0:	685b      	ldr	r3, [r3, #4]
    74e2:	0d5b      	lsrs	r3, r3, #21
    74e4:	061b      	lsls	r3, r3, #24
    74e6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    74ea:	4313      	orrs	r3, r2
    74ec:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    74f0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    74f4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    74f8:	681b      	ldr	r3, [r3, #0]
    74fa:	695a      	ldr	r2, [r3, #20]
    74fc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7500:	015b      	lsls	r3, r3, #5
    7502:	3308      	adds	r3, #8
    7504:	4413      	add	r3, r2
    7506:	685b      	ldr	r3, [r3, #4]
    7508:	0d5b      	lsrs	r3, r3, #21
    750a:	041b      	lsls	r3, r3, #16
    750c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7510:	4313      	orrs	r3, r2
    7512:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    7516:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    751a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    751e:	681b      	ldr	r3, [r3, #0]
    7520:	695a      	ldr	r2, [r3, #20]
    7522:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7526:	015b      	lsls	r3, r3, #5
    7528:	3310      	adds	r3, #16
    752a:	4413      	add	r3, r2
    752c:	685b      	ldr	r3, [r3, #4]
    752e:	0d5b      	lsrs	r3, r3, #21
    7530:	021b      	lsls	r3, r3, #8
    7532:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7536:	4313      	orrs	r3, r2
    7538:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    753c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7540:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7544:	681b      	ldr	r3, [r3, #0]
    7546:	695a      	ldr	r2, [r3, #20]
    7548:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    754c:	015b      	lsls	r3, r3, #5
    754e:	3318      	adds	r3, #24
    7550:	4413      	add	r3, r2
    7552:	685b      	ldr	r3, [r3, #4]
    7554:	0d5b      	lsrs	r3, r3, #21
    7556:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    755a:	4313      	orrs	r3, r2
    755c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7560:	e049      	b.n	75f6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    7562:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7566:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    756a:	681b      	ldr	r3, [r3, #0]
    756c:	695a      	ldr	r2, [r3, #20]
    756e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7572:	015b      	lsls	r3, r3, #5
    7574:	4413      	add	r3, r2
    7576:	685b      	ldr	r3, [r3, #4]
    7578:	08db      	lsrs	r3, r3, #3
    757a:	061b      	lsls	r3, r3, #24
    757c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7580:	4313      	orrs	r3, r2
    7582:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    7586:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    758a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    758e:	681b      	ldr	r3, [r3, #0]
    7590:	695a      	ldr	r2, [r3, #20]
    7592:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7596:	015b      	lsls	r3, r3, #5
    7598:	3308      	adds	r3, #8
    759a:	4413      	add	r3, r2
    759c:	685b      	ldr	r3, [r3, #4]
    759e:	08db      	lsrs	r3, r3, #3
    75a0:	041b      	lsls	r3, r3, #16
    75a2:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    75a6:	4313      	orrs	r3, r2
    75a8:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    75ac:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    75b0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    75b4:	681b      	ldr	r3, [r3, #0]
    75b6:	695a      	ldr	r2, [r3, #20]
    75b8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    75bc:	015b      	lsls	r3, r3, #5
    75be:	3310      	adds	r3, #16
    75c0:	4413      	add	r3, r2
    75c2:	685b      	ldr	r3, [r3, #4]
    75c4:	08db      	lsrs	r3, r3, #3
    75c6:	021b      	lsls	r3, r3, #8
    75c8:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    75cc:	4313      	orrs	r3, r2
    75ce:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    75d2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    75d6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    75da:	681b      	ldr	r3, [r3, #0]
    75dc:	695a      	ldr	r2, [r3, #20]
    75de:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    75e2:	015b      	lsls	r3, r3, #5
    75e4:	3318      	adds	r3, #24
    75e6:	4413      	add	r3, r2
    75e8:	685b      	ldr	r3, [r3, #4]
    75ea:	08db      	lsrs	r3, r3, #3
    75ec:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    75f0:	4313      	orrs	r3, r2
    75f2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    75f6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    75fa:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    75fe:	681b      	ldr	r3, [r3, #0]
    7600:	789b      	ldrb	r3, [r3, #2]
    7602:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    7606:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    760a:	4618      	mov	r0, r3
    760c:	f002 fe76 	bl	a2fc <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    7610:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7614:	3301      	adds	r3, #1
    7616:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    761a:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    761e:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    7622:	429a      	cmp	r2, r3
    7624:	d20a      	bcs.n	763c <Can_Ipw_InitLegacyFifoFilter+0x36a>
    7626:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    762a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    762e:	681b      	ldr	r3, [r3, #0]
    7630:	7c9b      	ldrb	r3, [r3, #18]
    7632:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    7636:	429a      	cmp	r2, r3
    7638:	f4ff ae85 	bcc.w	7346 <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    763c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7640:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7644:	681b      	ldr	r3, [r3, #0]
    7646:	789a      	ldrb	r2, [r3, #2]
    7648:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    764c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7650:	681b      	ldr	r3, [r3, #0]
    7652:	68db      	ldr	r3, [r3, #12]
    7654:	4619      	mov	r1, r3
    7656:	4610      	mov	r0, r2
    7658:	f002 fe9e 	bl	a398 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    765c:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    7660:	2b00      	cmp	r3, #0
    7662:	d054      	beq.n	770e <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    7664:	2300      	movs	r3, #0
    7666:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    766a:	e03e      	b.n	76ea <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    766c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7670:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7674:	681b      	ldr	r3, [r3, #0]
    7676:	695a      	ldr	r2, [r3, #20]
    7678:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    767c:	00db      	lsls	r3, r3, #3
    767e:	441a      	add	r2, r3
    7680:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7684:	6812      	ldr	r2, [r2, #0]
    7686:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    768a:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    768e:	00db      	lsls	r3, r3, #3
    7690:	440b      	add	r3, r1
    7692:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7694:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7698:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    769c:	681b      	ldr	r3, [r3, #0]
    769e:	689b      	ldr	r3, [r3, #8]
    76a0:	2b00      	cmp	r3, #0
    76a2:	d00a      	beq.n	76ba <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    76a4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    76a8:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    76ac:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    76b0:	00db      	lsls	r3, r3, #3
    76b2:	4413      	add	r3, r2
    76b4:	2201      	movs	r2, #1
    76b6:	705a      	strb	r2, [r3, #1]
    76b8:	e009      	b.n	76ce <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    76ba:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    76be:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    76c2:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    76c6:	00db      	lsls	r3, r3, #3
    76c8:	4413      	add	r3, r2
    76ca:	2200      	movs	r2, #0
    76cc:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    76ce:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    76d2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    76d6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    76da:	2100      	movs	r1, #0
    76dc:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    76e0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    76e4:	3301      	adds	r3, #1
    76e6:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    76ea:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    76ee:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    76f2:	429a      	cmp	r2, r3
    76f4:	d3ba      	bcc.n	766c <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    76f6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    76fa:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    76fe:	681b      	ldr	r3, [r3, #0]
    7700:	789b      	ldrb	r3, [r3, #2]
    7702:	aa02      	add	r2, sp, #8
    7704:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    7708:	4618      	mov	r0, r3
    770a:	f002 f9da 	bl	9ac2 <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    770e:	bf00      	nop
    7710:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    7714:	f85d fb04 	ldr.w	pc, [sp], #4

00007718 <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    7718:	b510      	push	{r4, lr}
    771a:	b088      	sub	sp, #32
    771c:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
    771e:	9b01      	ldr	r3, [sp, #4]
    7720:	785b      	ldrb	r3, [r3, #1]
    7722:	461a      	mov	r2, r3
    7724:	4b58      	ldr	r3, [pc, #352]	; (7888 <Can_Ipw_InitBaudrate+0x170>)
    7726:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    772a:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON))
    #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
        if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[ControllerConfig->Can_u8ControllerID])
        {
    #endif
            FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16Prescaler;
    772e:	9b01      	ldr	r3, [sp, #4]
    7730:	6a1a      	ldr	r2, [r3, #32]
    7732:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7736:	2116      	movs	r1, #22
    7738:	fb01 f303 	mul.w	r3, r1, r3
    773c:	4413      	add	r3, r2
    773e:	88db      	ldrh	r3, [r3, #6]
    7740:	9305      	str	r3, [sp, #20]
        {
            FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16PrescalerAlternate;
        }
    #endif

        FlexCANTimeSeg.propSeg    = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PropSeg;
    7742:	9b01      	ldr	r3, [sp, #4]
    7744:	6a1a      	ldr	r2, [r3, #32]
    7746:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    774a:	2116      	movs	r1, #22
    774c:	fb01 f303 	mul.w	r3, r1, r3
    7750:	4413      	add	r3, r2
    7752:	789b      	ldrb	r3, [r3, #2]
    7754:	9302      	str	r3, [sp, #8]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
    7756:	9b01      	ldr	r3, [sp, #4]
    7758:	6a1a      	ldr	r2, [r3, #32]
    775a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    775e:	2116      	movs	r1, #22
    7760:	fb01 f303 	mul.w	r3, r1, r3
    7764:	4413      	add	r3, r2
    7766:	78db      	ldrb	r3, [r3, #3]
    7768:	9303      	str	r3, [sp, #12]
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
    776a:	9b01      	ldr	r3, [sp, #4]
    776c:	6a1a      	ldr	r2, [r3, #32]
    776e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7772:	2116      	movs	r1, #22
    7774:	fb01 f303 	mul.w	r3, r1, r3
    7778:	4413      	add	r3, r2
    777a:	791b      	ldrb	r3, [r3, #4]
    777c:	9304      	str	r3, [sp, #16]
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
    777e:	9b01      	ldr	r3, [sp, #4]
    7780:	6a1a      	ldr	r2, [r3, #32]
    7782:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7786:	2116      	movs	r1, #22
    7788:	fb01 f303 	mul.w	r3, r1, r3
    778c:	4413      	add	r3, r2
    778e:	7a1b      	ldrb	r3, [r3, #8]
    7790:	9306      	str	r3, [sp, #24]
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
    7792:	9b01      	ldr	r3, [sp, #4]
    7794:	789b      	ldrb	r3, [r3, #2]
    7796:	a902      	add	r1, sp, #8
    7798:	2200      	movs	r2, #0
    779a:	4618      	mov	r0, r3
    779c:	f003 f842 	bl	a824 <FlexCAN_Ip_SetBitrate_Privileged>
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    77a0:	9b01      	ldr	r3, [sp, #4]
    77a2:	6a1a      	ldr	r2, [r3, #32]
    77a4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    77a8:	2116      	movs	r1, #22
    77aa:	fb01 f303 	mul.w	r3, r1, r3
    77ae:	4413      	add	r3, r2
    77b0:	785b      	ldrb	r3, [r3, #1]
    77b2:	2b00      	cmp	r3, #0
    77b4:	d057      	beq.n	7866 <Can_Ipw_InitBaudrate+0x14e>
    #if ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON))
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[ControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16Prescaler;
    77b6:	9b01      	ldr	r3, [sp, #4]
    77b8:	6a1a      	ldr	r2, [r3, #32]
    77ba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    77be:	2116      	movs	r1, #22
    77c0:	fb01 f303 	mul.w	r3, r1, r3
    77c4:	4413      	add	r3, r2
    77c6:	89db      	ldrh	r3, [r3, #14]
    77c8:	9305      	str	r3, [sp, #20]
            else
            {
                FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16PrescalerAlternate;
            }
        #endif
            FlexCANTimeSeg.propSeg    = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PropSeg;
    77ca:	9b01      	ldr	r3, [sp, #4]
    77cc:	6a1a      	ldr	r2, [r3, #32]
    77ce:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    77d2:	2116      	movs	r1, #22
    77d4:	fb01 f303 	mul.w	r3, r1, r3
    77d8:	4413      	add	r3, r2
    77da:	7a9b      	ldrb	r3, [r3, #10]
    77dc:	9302      	str	r3, [sp, #8]
            FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg1;
    77de:	9b01      	ldr	r3, [sp, #4]
    77e0:	6a1a      	ldr	r2, [r3, #32]
    77e2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    77e6:	2116      	movs	r1, #22
    77e8:	fb01 f303 	mul.w	r3, r1, r3
    77ec:	4413      	add	r3, r2
    77ee:	7adb      	ldrb	r3, [r3, #11]
    77f0:	9303      	str	r3, [sp, #12]
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
    77f2:	9b01      	ldr	r3, [sp, #4]
    77f4:	6a1a      	ldr	r2, [r3, #32]
    77f6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    77fa:	2116      	movs	r1, #22
    77fc:	fb01 f303 	mul.w	r3, r1, r3
    7800:	4413      	add	r3, r2
    7802:	7b1b      	ldrb	r3, [r3, #12]
    7804:	9304      	str	r3, [sp, #16]
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;
    7806:	9b01      	ldr	r3, [sp, #4]
    7808:	6a1a      	ldr	r2, [r3, #32]
    780a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    780e:	2116      	movs	r1, #22
    7810:	fb01 f303 	mul.w	r3, r1, r3
    7814:	4413      	add	r3, r2
    7816:	7c1b      	ldrb	r3, [r3, #16]
    7818:	9306      	str	r3, [sp, #24]

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    781a:	9b01      	ldr	r3, [sp, #4]
    781c:	7898      	ldrb	r0, [r3, #2]
    781e:	9b01      	ldr	r3, [sp, #4]
    7820:	6a1a      	ldr	r2, [r3, #32]
    7822:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7826:	2116      	movs	r1, #22
    7828:	fb01 f303 	mul.w	r3, r1, r3
    782c:	4413      	add	r3, r2
    782e:	781a      	ldrb	r2, [r3, #0]
    7830:	ab02      	add	r3, sp, #8
    7832:	4619      	mov	r1, r3
    7834:	f003 f8c0 	bl	a9b8 <FlexCAN_Ip_SetBitrateCbt_Privileged>
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    7838:	9b01      	ldr	r3, [sp, #4]
    783a:	7898      	ldrb	r0, [r3, #2]
    783c:	9b01      	ldr	r3, [sp, #4]
    783e:	6a1a      	ldr	r2, [r3, #32]
    7840:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7844:	2116      	movs	r1, #22
    7846:	fb01 f303 	mul.w	r3, r1, r3
    784a:	4413      	add	r3, r2
    784c:	7cd9      	ldrb	r1, [r3, #19]
    784e:	9b01      	ldr	r3, [sp, #4]
    7850:	6a1a      	ldr	r2, [r3, #32]
    7852:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7856:	2416      	movs	r4, #22
    7858:	fb04 f303 	mul.w	r3, r4, r3
    785c:	4413      	add	r3, r2
    785e:	7d1b      	ldrb	r3, [r3, #20]
    7860:	461a      	mov	r2, r3
    7862:	f003 f913 	bl	aa8c <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    7866:	9b01      	ldr	r3, [sp, #4]
    7868:	7898      	ldrb	r0, [r3, #2]
    786a:	9b01      	ldr	r3, [sp, #4]
    786c:	6a1a      	ldr	r2, [r3, #32]
    786e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7872:	2116      	movs	r1, #22
    7874:	fb01 f303 	mul.w	r3, r1, r3
    7878:	4413      	add	r3, r2
    787a:	7c9b      	ldrb	r3, [r3, #18]
    787c:	4619      	mov	r1, r3
    787e:	f003 f959 	bl	ab34 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    7882:	bf00      	nop
    7884:	b008      	add	sp, #32
    7886:	bd10      	pop	{r4, pc}
    7888:	1fff8f98 	.word	0x1fff8f98

0000788c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    788c:	b500      	push	{lr}
    788e:	b087      	sub	sp, #28
    7890:	9003      	str	r0, [sp, #12]
    7892:	9102      	str	r1, [sp, #8]
    7894:	4613      	mov	r3, r2
    7896:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    789a:	2300      	movs	r3, #0
    789c:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    78a0:	9b03      	ldr	r3, [sp, #12]
    78a2:	785b      	ldrb	r3, [r3, #1]
    78a4:	461a      	mov	r2, r3
    78a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78aa:	491c      	ldr	r1, [pc, #112]	; (791c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    78ac:	0152      	lsls	r2, r2, #5
    78ae:	4413      	add	r3, r2
    78b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    78b4:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    78b8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    78bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    78c0:	4293      	cmp	r3, r2
    78c2:	d027      	beq.n	7914 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    78c4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    78c8:	4613      	mov	r3, r2
    78ca:	00db      	lsls	r3, r3, #3
    78cc:	4413      	add	r3, r2
    78ce:	009b      	lsls	r3, r3, #2
    78d0:	461a      	mov	r2, r3
    78d2:	9b02      	ldr	r3, [sp, #8]
    78d4:	4413      	add	r3, r2
    78d6:	7b1b      	ldrb	r3, [r3, #12]
    78d8:	f083 0301 	eor.w	r3, r3, #1
    78dc:	b2db      	uxtb	r3, r3
    78de:	2b00      	cmp	r3, #0
    78e0:	d018      	beq.n	7914 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    78e2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    78e6:	4613      	mov	r3, r2
    78e8:	00db      	lsls	r3, r3, #3
    78ea:	4413      	add	r3, r2
    78ec:	009b      	lsls	r3, r3, #2
    78ee:	461a      	mov	r2, r3
    78f0:	9b02      	ldr	r3, [sp, #8]
    78f2:	4413      	add	r3, r2
    78f4:	699b      	ldr	r3, [r3, #24]
    78f6:	2b03      	cmp	r3, #3
    78f8:	d10c      	bne.n	7914 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    78fa:	9b03      	ldr	r3, [sp, #12]
    78fc:	785b      	ldrb	r3, [r3, #1]
    78fe:	461a      	mov	r2, r3
    7900:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7904:	4906      	ldr	r1, [pc, #24]	; (7920 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    7906:	0152      	lsls	r2, r2, #5
    7908:	4413      	add	r3, r2
    790a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    790e:	4618      	mov	r0, r3
    7910:	f7f9 f804 	bl	91c <CanIf_TxConfirmation>
            }
        }
    }
    7914:	bf00      	nop
    7916:	b007      	add	sp, #28
    7918:	f85d fb04 	ldr.w	pc, [sp], #4
    791c:	1fff8f58 	.word	0x1fff8f58
    7920:	1fff8f18 	.word	0x1fff8f18

00007924 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    7924:	b500      	push	{lr}
    7926:	b08f      	sub	sp, #60	; 0x3c
    7928:	9005      	str	r0, [sp, #20]
    792a:	9104      	str	r1, [sp, #16]
    792c:	4613      	mov	r3, r2
    792e:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    7932:	2300      	movs	r3, #0
    7934:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    7938:	2300      	movs	r3, #0
    793a:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    793c:	2300      	movs	r3, #0
    793e:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    7940:	9b05      	ldr	r3, [sp, #20]
    7942:	785b      	ldrb	r3, [r3, #1]
    7944:	461a      	mov	r2, r3
    7946:	f89d 300f 	ldrb.w	r3, [sp, #15]
    794a:	493f      	ldr	r1, [pc, #252]	; (7a48 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x124>)
    794c:	0152      	lsls	r2, r2, #5
    794e:	4413      	add	r3, r2
    7950:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7954:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    7958:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    795c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7960:	4293      	cmp	r3, r2
    7962:	d06c      	beq.n	7a3e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
    7964:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    7968:	4613      	mov	r3, r2
    796a:	00db      	lsls	r3, r3, #3
    796c:	4413      	add	r3, r2
    796e:	009b      	lsls	r3, r3, #2
    7970:	461a      	mov	r2, r3
    7972:	9b04      	ldr	r3, [sp, #16]
    7974:	4413      	add	r3, r2
    7976:	7b1b      	ldrb	r3, [r3, #12]
    7978:	f083 0301 	eor.w	r3, r3, #1
    797c:	b2db      	uxtb	r3, r3
    797e:	2b00      	cmp	r3, #0
    7980:	d05d      	beq.n	7a3e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    7982:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    7986:	4613      	mov	r3, r2
    7988:	00db      	lsls	r3, r3, #3
    798a:	4413      	add	r3, r2
    798c:	009b      	lsls	r3, r3, #2
    798e:	461a      	mov	r2, r3
    7990:	9b04      	ldr	r3, [sp, #16]
    7992:	4413      	add	r3, r2
    7994:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    7996:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7998:	699b      	ldr	r3, [r3, #24]
    799a:	2b00      	cmp	r3, #0
    799c:	d118      	bne.n	79d0 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xac>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    799e:	4a2b      	ldr	r2, [pc, #172]	; (7a4c <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    79a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79a2:	7f1b      	ldrb	r3, [r3, #28]
    79a4:	011b      	lsls	r3, r3, #4
    79a6:	4413      	add	r3, r2
    79a8:	681b      	ldr	r3, [r3, #0]
    79aa:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    79ac:	a906      	add	r1, sp, #24
    79ae:	a809      	add	r0, sp, #36	; 0x24
    79b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79b2:	9300      	str	r3, [sp, #0]
    79b4:	9b05      	ldr	r3, [sp, #20]
    79b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    79b8:	f7ff fc2e 	bl	7218 <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    79bc:	9b05      	ldr	r3, [sp, #20]
    79be:	7898      	ldrb	r0, [r3, #2]
    79c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79c2:	7f19      	ldrb	r1, [r3, #28]
    79c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79c6:	7b1b      	ldrb	r3, [r3, #12]
    79c8:	2200      	movs	r2, #0
    79ca:	f001 ff49 	bl	9860 <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    79ce:	e036      	b.n	7a3e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    79d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79d2:	699b      	ldr	r3, [r3, #24]
    79d4:	2b01      	cmp	r3, #1
    79d6:	d132      	bne.n	7a3e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                if ((uint8)7U == u8MbIdx)
    79d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    79dc:	2b07      	cmp	r3, #7
    79de:	d10d      	bne.n	79fc <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xd8>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    79e0:	2301      	movs	r3, #1
    79e2:	2208      	movs	r2, #8
    79e4:	2100      	movs	r1, #0
    79e6:	2050      	movs	r0, #80	; 0x50
    79e8:	f007 f8d8 	bl	eb9c <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    79ec:	9b05      	ldr	r3, [sp, #20]
    79ee:	699b      	ldr	r3, [r3, #24]
    79f0:	2b00      	cmp	r3, #0
    79f2:	d024      	beq.n	7a3e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    79f4:	9b05      	ldr	r3, [sp, #20]
    79f6:	699b      	ldr	r3, [r3, #24]
    79f8:	4798      	blx	r3
    }
    79fa:	e020      	b.n	7a3e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                else if ((uint8)6U == u8MbIdx)
    79fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7a00:	2b06      	cmp	r3, #6
    7a02:	d107      	bne.n	7a14 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xf0>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    7a04:	9b05      	ldr	r3, [sp, #20]
    7a06:	695b      	ldr	r3, [r3, #20]
    7a08:	2b00      	cmp	r3, #0
    7a0a:	d018      	beq.n	7a3e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    7a0c:	9b05      	ldr	r3, [sp, #20]
    7a0e:	695b      	ldr	r3, [r3, #20]
    7a10:	4798      	blx	r3
    }
    7a12:	e014      	b.n	7a3e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    7a14:	4a0d      	ldr	r2, [pc, #52]	; (7a4c <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    7a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7a18:	7f1b      	ldrb	r3, [r3, #28]
    7a1a:	011b      	lsls	r3, r3, #4
    7a1c:	4413      	add	r3, r2
    7a1e:	681b      	ldr	r3, [r3, #0]
    7a20:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    7a22:	a906      	add	r1, sp, #24
    7a24:	a809      	add	r0, sp, #36	; 0x24
    7a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7a28:	9300      	str	r3, [sp, #0]
    7a2a:	9b05      	ldr	r3, [sp, #20]
    7a2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7a2e:	f7ff fbf3 	bl	7218 <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    7a32:	9b05      	ldr	r3, [sp, #20]
    7a34:	789b      	ldrb	r3, [r3, #2]
    7a36:	2100      	movs	r1, #0
    7a38:	4618      	mov	r0, r3
    7a3a:	f002 f80f 	bl	9a5c <FlexCAN_Ip_RxFifo>
    }
    7a3e:	bf00      	nop
    7a40:	b00f      	add	sp, #60	; 0x3c
    7a42:	f85d fb04 	ldr.w	pc, [sp], #4
    7a46:	bf00      	nop
    7a48:	1fff8f58 	.word	0x1fff8f58
    7a4c:	1fff8cf8 	.word	0x1fff8cf8

00007a50 <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7a50:	b510      	push	{r4, lr}
    7a52:	b084      	sub	sp, #16
    7a54:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    7a56:	2301      	movs	r3, #1
    7a58:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    7a5c:	2300      	movs	r3, #0
    7a5e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    7a62:	2300      	movs	r3, #0
    7a64:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    7a68:	2300      	movs	r3, #0
    7a6a:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    7a6c:	2300      	movs	r3, #0
    7a6e:	f88d 300d 	strb.w	r3, [sp, #13]
#endif

#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID] = Can_pControllerConfig->Can_u16DefaultBaudrateID;
    7a72:	9b01      	ldr	r3, [sp, #4]
    7a74:	785b      	ldrb	r3, [r3, #1]
    7a76:	461a      	mov	r2, r3
    7a78:	9b01      	ldr	r3, [sp, #4]
    7a7a:	8b99      	ldrh	r1, [r3, #28]
    7a7c:	4b78      	ldr	r3, [pc, #480]	; (7c60 <Can_43_FLEXCAN_Ipw_Init+0x210>)
    7a7e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    7a82:	9b01      	ldr	r3, [sp, #4]
    7a84:	7898      	ldrb	r0, [r3, #2]
    7a86:	4977      	ldr	r1, [pc, #476]	; (7c64 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    7a88:	9b01      	ldr	r3, [sp, #4]
    7a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7a8c:	681b      	ldr	r3, [r3, #0]
    7a8e:	461a      	mov	r2, r3
    7a90:	f001 fdda 	bl	9648 <FlexCAN_Ip_Init_Privileged>
    7a94:	4603      	mov	r3, r0
    7a96:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    7a9a:	9b01      	ldr	r3, [sp, #4]
    7a9c:	785b      	ldrb	r3, [r3, #1]
    7a9e:	461a      	mov	r2, r3
    7aa0:	4b71      	ldr	r3, [pc, #452]	; (7c68 <Can_43_FLEXCAN_Ipw_Init+0x218>)
    7aa2:	2101      	movs	r1, #1
    7aa4:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    7aa6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7aaa:	2b00      	cmp	r3, #0
    7aac:	d13b      	bne.n	7b26 <Can_43_FLEXCAN_Ipw_Init+0xd6>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    7aae:	9b01      	ldr	r3, [sp, #4]
    7ab0:	789b      	ldrb	r3, [r3, #2]
    7ab2:	4618      	mov	r0, r3
    7ab4:	f003 f8fc 	bl	acb0 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    7ab8:	9b01      	ldr	r3, [sp, #4]
    7aba:	6a1a      	ldr	r2, [r3, #32]
    7abc:	9b01      	ldr	r3, [sp, #4]
    7abe:	8b9b      	ldrh	r3, [r3, #28]
    7ac0:	4619      	mov	r1, r3
    7ac2:	2316      	movs	r3, #22
    7ac4:	fb01 f303 	mul.w	r3, r1, r3
    7ac8:	4413      	add	r3, r2
    7aca:	785b      	ldrb	r3, [r3, #1]
    7acc:	2b00      	cmp	r3, #0
    7ace:	d018      	beq.n	7b02 <Can_43_FLEXCAN_Ipw_Init+0xb2>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    7ad0:	9b01      	ldr	r3, [sp, #4]
    7ad2:	7898      	ldrb	r0, [r3, #2]
    7ad4:	9b01      	ldr	r3, [sp, #4]
    7ad6:	6a1a      	ldr	r2, [r3, #32]
    7ad8:	9b01      	ldr	r3, [sp, #4]
    7ada:	8b9b      	ldrh	r3, [r3, #28]
    7adc:	4619      	mov	r1, r3
    7ade:	2316      	movs	r3, #22
    7ae0:	fb01 f303 	mul.w	r3, r1, r3
    7ae4:	4413      	add	r3, r2
    7ae6:	7cd9      	ldrb	r1, [r3, #19]
    7ae8:	9b01      	ldr	r3, [sp, #4]
    7aea:	6a1a      	ldr	r2, [r3, #32]
    7aec:	9b01      	ldr	r3, [sp, #4]
    7aee:	8b9b      	ldrh	r3, [r3, #28]
    7af0:	461c      	mov	r4, r3
    7af2:	2316      	movs	r3, #22
    7af4:	fb04 f303 	mul.w	r3, r4, r3
    7af8:	4413      	add	r3, r2
    7afa:	7d1b      	ldrb	r3, [r3, #20]
    7afc:	461a      	mov	r2, r3
    7afe:	f002 ffc5 	bl	aa8c <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    7b02:	9b01      	ldr	r3, [sp, #4]
    7b04:	7898      	ldrb	r0, [r3, #2]
    7b06:	9b01      	ldr	r3, [sp, #4]
    7b08:	6a1a      	ldr	r2, [r3, #32]
    7b0a:	9b01      	ldr	r3, [sp, #4]
    7b0c:	8b9b      	ldrh	r3, [r3, #28]
    7b0e:	4619      	mov	r1, r3
    7b10:	2316      	movs	r3, #22
    7b12:	fb01 f303 	mul.w	r3, r1, r3
    7b16:	4413      	add	r3, r2
    7b18:	7c9b      	ldrb	r3, [r3, #18]
    7b1a:	4619      	mov	r1, r3
    7b1c:	f003 f80a 	bl	ab34 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    7b20:	9801      	ldr	r0, [sp, #4]
    7b22:	f000 fbe5 	bl	82f0 <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    7b26:	2300      	movs	r3, #0
    7b28:	f88d 300d 	strb.w	r3, [sp, #13]
    7b2c:	e010      	b.n	7b50 <Can_43_FLEXCAN_Ipw_Init+0x100>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    7b2e:	9b01      	ldr	r3, [sp, #4]
    7b30:	785b      	ldrb	r3, [r3, #1]
    7b32:	461a      	mov	r2, r3
    7b34:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7b38:	494c      	ldr	r1, [pc, #304]	; (7c6c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    7b3a:	0152      	lsls	r2, r2, #5
    7b3c:	4413      	add	r3, r2
    7b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7b42:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    7b46:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7b4a:	3301      	adds	r3, #1
    7b4c:	f88d 300d 	strb.w	r3, [sp, #13]
    7b50:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7b54:	2b1f      	cmp	r3, #31
    7b56:	d9ea      	bls.n	7b2e <Can_43_FLEXCAN_Ipw_Init+0xde>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7b58:	2300      	movs	r3, #0
    7b5a:	f88d 300f 	strb.w	r3, [sp, #15]
    7b5e:	e06b      	b.n	7c38 <Can_43_FLEXCAN_Ipw_Init+0x1e8>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    7b60:	9b01      	ldr	r3, [sp, #4]
    7b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b64:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7b68:	009b      	lsls	r3, r3, #2
    7b6a:	4413      	add	r3, r2
    7b6c:	681b      	ldr	r3, [r3, #0]
    7b6e:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    7b70:	9b02      	ldr	r3, [sp, #8]
    7b72:	699b      	ldr	r3, [r3, #24]
    7b74:	2b03      	cmp	r3, #3
    7b76:	d006      	beq.n	7b86 <Can_43_FLEXCAN_Ipw_Init+0x136>
    7b78:	2b03      	cmp	r3, #3
    7b7a:	d857      	bhi.n	7c2c <Can_43_FLEXCAN_Ipw_Init+0x1dc>
    7b7c:	2b00      	cmp	r3, #0
    7b7e:	d023      	beq.n	7bc8 <Can_43_FLEXCAN_Ipw_Init+0x178>
    7b80:	2b01      	cmp	r3, #1
    7b82:	d02f      	beq.n	7be4 <Can_43_FLEXCAN_Ipw_Init+0x194>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    7b84:	e052      	b.n	7c2c <Can_43_FLEXCAN_Ipw_Init+0x1dc>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    7b86:	2300      	movs	r3, #0
    7b88:	f88d 300e 	strb.w	r3, [sp, #14]
    7b8c:	e015      	b.n	7bba <Can_43_FLEXCAN_Ipw_Init+0x16a>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    7b8e:	9b01      	ldr	r3, [sp, #4]
    7b90:	785b      	ldrb	r3, [r3, #1]
    7b92:	461c      	mov	r4, r3
    7b94:	9b02      	ldr	r3, [sp, #8]
    7b96:	7f1b      	ldrb	r3, [r3, #28]
    7b98:	461a      	mov	r2, r3
    7b9a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7b9e:	4413      	add	r3, r2
    7ba0:	9a02      	ldr	r2, [sp, #8]
    7ba2:	8810      	ldrh	r0, [r2, #0]
    7ba4:	4931      	ldr	r1, [pc, #196]	; (7c6c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    7ba6:	0162      	lsls	r2, r4, #5
    7ba8:	4413      	add	r3, r2
    7baa:	4602      	mov	r2, r0
    7bac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    7bb0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7bb4:	3301      	adds	r3, #1
    7bb6:	f88d 300e 	strb.w	r3, [sp, #14]
    7bba:	9b02      	ldr	r3, [sp, #8]
    7bbc:	7b9b      	ldrb	r3, [r3, #14]
    7bbe:	f89d 200e 	ldrb.w	r2, [sp, #14]
    7bc2:	429a      	cmp	r2, r3
    7bc4:	d3e3      	bcc.n	7b8e <Can_43_FLEXCAN_Ipw_Init+0x13e>
                break;
    7bc6:	e032      	b.n	7c2e <Can_43_FLEXCAN_Ipw_Init+0x1de>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    7bc8:	9b01      	ldr	r3, [sp, #4]
    7bca:	785b      	ldrb	r3, [r3, #1]
    7bcc:	461c      	mov	r4, r3
    7bce:	9b02      	ldr	r3, [sp, #8]
    7bd0:	7f1b      	ldrb	r3, [r3, #28]
    7bd2:	4618      	mov	r0, r3
    7bd4:	9b02      	ldr	r3, [sp, #8]
    7bd6:	8819      	ldrh	r1, [r3, #0]
    7bd8:	4a24      	ldr	r2, [pc, #144]	; (7c6c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    7bda:	0163      	lsls	r3, r4, #5
    7bdc:	4403      	add	r3, r0
    7bde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    7be2:	e024      	b.n	7c2e <Can_43_FLEXCAN_Ipw_Init+0x1de>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    7be4:	9b01      	ldr	r3, [sp, #4]
    7be6:	785b      	ldrb	r3, [r3, #1]
    7be8:	461c      	mov	r4, r3
    7bea:	9b02      	ldr	r3, [sp, #8]
    7bec:	7f1b      	ldrb	r3, [r3, #28]
    7bee:	4618      	mov	r0, r3
    7bf0:	9b02      	ldr	r3, [sp, #8]
    7bf2:	8819      	ldrh	r1, [r3, #0]
    7bf4:	4a1d      	ldr	r2, [pc, #116]	; (7c6c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    7bf6:	0163      	lsls	r3, r4, #5
    7bf8:	4403      	add	r3, r0
    7bfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    7bfe:	9b01      	ldr	r3, [sp, #4]
    7c00:	785b      	ldrb	r3, [r3, #1]
    7c02:	4618      	mov	r0, r3
    7c04:	9b02      	ldr	r3, [sp, #8]
    7c06:	8819      	ldrh	r1, [r3, #0]
    7c08:	4a18      	ldr	r2, [pc, #96]	; (7c6c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    7c0a:	0183      	lsls	r3, r0, #6
    7c0c:	4413      	add	r3, r2
    7c0e:	330c      	adds	r3, #12
    7c10:	460a      	mov	r2, r1
    7c12:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    7c14:	9b01      	ldr	r3, [sp, #4]
    7c16:	785b      	ldrb	r3, [r3, #1]
    7c18:	4618      	mov	r0, r3
    7c1a:	9b02      	ldr	r3, [sp, #8]
    7c1c:	8819      	ldrh	r1, [r3, #0]
    7c1e:	4a13      	ldr	r2, [pc, #76]	; (7c6c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    7c20:	0183      	lsls	r3, r0, #6
    7c22:	4413      	add	r3, r2
    7c24:	330e      	adds	r3, #14
    7c26:	460a      	mov	r2, r1
    7c28:	801a      	strh	r2, [r3, #0]
                break;
    7c2a:	e000      	b.n	7c2e <Can_43_FLEXCAN_Ipw_Init+0x1de>
                break;
    7c2c:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7c2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7c32:	3301      	adds	r3, #1
    7c34:	f88d 300f 	strb.w	r3, [sp, #15]
    7c38:	9b01      	ldr	r3, [sp, #4]
    7c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    7c3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7c42:	429a      	cmp	r2, r3
    7c44:	d38c      	bcc.n	7b60 <Can_43_FLEXCAN_Ipw_Init+0x110>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    7c46:	9b01      	ldr	r3, [sp, #4]
    7c48:	789b      	ldrb	r3, [r3, #2]
    7c4a:	4618      	mov	r0, r3
    7c4c:	f002 fd80 	bl	a750 <FlexCAN_Ip_SetStopMode_Privileged>
    7c50:	4603      	mov	r3, r0
    7c52:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    7c56:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    7c5a:	4618      	mov	r0, r3
    7c5c:	b004      	add	sp, #16
    7c5e:	bd10      	pop	{r4, pc}
    7c60:	1fff8f98 	.word	0x1fff8f98
    7c64:	1fff8cf8 	.word	0x1fff8cf8
    7c68:	1fff8f9c 	.word	0x1fff8f9c
    7c6c:	1fff8f58 	.word	0x1fff8f58

00007c70 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7c70:	b500      	push	{lr}
    7c72:	b083      	sub	sp, #12
    7c74:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    7c76:	9b01      	ldr	r3, [sp, #4]
    7c78:	789b      	ldrb	r3, [r3, #2]
    7c7a:	4618      	mov	r0, r3
    7c7c:	f002 fbd4 	bl	a428 <FlexCAN_Ip_Deinit_Privileged>
}
    7c80:	bf00      	nop
    7c82:	b003      	add	sp, #12
    7c84:	f85d fb04 	ldr.w	pc, [sp], #4

00007c88 <Can_43_FLEXCAN_Ipw_SetBaudrate>:
    Std_ReturnType Can_43_FLEXCAN_Ipw_SetBaudrate
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        uint16 BaudRateConfigID
    )
    {
    7c88:	b510      	push	{r4, lr}
    7c8a:	b088      	sub	sp, #32
    7c8c:	9001      	str	r0, [sp, #4]
    7c8e:	460b      	mov	r3, r1
    7c90:	f8ad 3002 	strh.w	r3, [sp, #2]
        Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    7c94:	2301      	movs	r3, #1
    7c96:	9307      	str	r3, [sp, #28]
        Flexcan_Ip_TimeSegmentType FlexCANTimeSeg;

        eRetVal = FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset);
    7c98:	9b01      	ldr	r3, [sp, #4]
    7c9a:	789b      	ldrb	r3, [r3, #2]
    7c9c:	4618      	mov	r0, r3
    7c9e:	f002 fb01 	bl	a2a4 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    7ca2:	9007      	str	r0, [sp, #28]
        if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    7ca4:	9b07      	ldr	r3, [sp, #28]
    7ca6:	2b00      	cmp	r3, #0
    7ca8:	f040 80bb 	bne.w	7e22 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x19a>
        {
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[Can_pControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16Prescaler;
    7cac:	9b01      	ldr	r3, [sp, #4]
    7cae:	6a1a      	ldr	r2, [r3, #32]
    7cb0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7cb4:	2116      	movs	r1, #22
    7cb6:	fb01 f303 	mul.w	r3, r1, r3
    7cba:	4413      	add	r3, r2
    7cbc:	88db      	ldrh	r3, [r3, #6]
    7cbe:	9305      	str	r3, [sp, #20]
            {
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16PrescalerAlternate;
            }
        #endif

            FlexCANTimeSeg.propSeg    = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PropSeg;
    7cc0:	9b01      	ldr	r3, [sp, #4]
    7cc2:	6a1a      	ldr	r2, [r3, #32]
    7cc4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7cc8:	2116      	movs	r1, #22
    7cca:	fb01 f303 	mul.w	r3, r1, r3
    7cce:	4413      	add	r3, r2
    7cd0:	789b      	ldrb	r3, [r3, #2]
    7cd2:	9302      	str	r3, [sp, #8]
            FlexCANTimeSeg.phaseSeg1  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
    7cd4:	9b01      	ldr	r3, [sp, #4]
    7cd6:	6a1a      	ldr	r2, [r3, #32]
    7cd8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7cdc:	2116      	movs	r1, #22
    7cde:	fb01 f303 	mul.w	r3, r1, r3
    7ce2:	4413      	add	r3, r2
    7ce4:	78db      	ldrb	r3, [r3, #3]
    7ce6:	9303      	str	r3, [sp, #12]
            FlexCANTimeSeg.phaseSeg2  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
    7ce8:	9b01      	ldr	r3, [sp, #4]
    7cea:	6a1a      	ldr	r2, [r3, #32]
    7cec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7cf0:	2116      	movs	r1, #22
    7cf2:	fb01 f303 	mul.w	r3, r1, r3
    7cf6:	4413      	add	r3, r2
    7cf8:	791b      	ldrb	r3, [r3, #4]
    7cfa:	9304      	str	r3, [sp, #16]
            FlexCANTimeSeg.rJumpwidth = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
    7cfc:	9b01      	ldr	r3, [sp, #4]
    7cfe:	6a1a      	ldr	r2, [r3, #32]
    7d00:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d04:	2116      	movs	r1, #22
    7d06:	fb01 f303 	mul.w	r3, r1, r3
    7d0a:	4413      	add	r3, r2
    7d0c:	7a1b      	ldrb	r3, [r3, #8]
    7d0e:	9306      	str	r3, [sp, #24]

            
            (void)FlexCAN_Ip_SetBitrate(Can_pControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
    7d10:	9b01      	ldr	r3, [sp, #4]
    7d12:	789b      	ldrb	r3, [r3, #2]
    7d14:	a902      	add	r1, sp, #8
    7d16:	2200      	movs	r2, #0
    7d18:	4618      	mov	r0, r3
    7d1a:	f002 fd83 	bl	a824 <FlexCAN_Ip_SetBitrate_Privileged>
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[Can_pControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16Prescaler;
    7d1e:	9b01      	ldr	r3, [sp, #4]
    7d20:	6a1a      	ldr	r2, [r3, #32]
    7d22:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d26:	2116      	movs	r1, #22
    7d28:	fb01 f303 	mul.w	r3, r1, r3
    7d2c:	4413      	add	r3, r2
    7d2e:	89db      	ldrh	r3, [r3, #14]
    7d30:	9305      	str	r3, [sp, #20]
            {
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16PrescalerAlternate;
            }
        #endif

            if (TRUE == Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    7d32:	9b01      	ldr	r3, [sp, #4]
    7d34:	6a1a      	ldr	r2, [r3, #32]
    7d36:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d3a:	2116      	movs	r1, #22
    7d3c:	fb01 f303 	mul.w	r3, r1, r3
    7d40:	4413      	add	r3, r2
    7d42:	785b      	ldrb	r3, [r3, #1]
    7d44:	2b00      	cmp	r3, #0
    7d46:	d04d      	beq.n	7de4 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x15c>
            {
                FlexCANTimeSeg.propSeg    = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PropSeg;
    7d48:	9b01      	ldr	r3, [sp, #4]
    7d4a:	6a1a      	ldr	r2, [r3, #32]
    7d4c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d50:	2116      	movs	r1, #22
    7d52:	fb01 f303 	mul.w	r3, r1, r3
    7d56:	4413      	add	r3, r2
    7d58:	7a9b      	ldrb	r3, [r3, #10]
    7d5a:	9302      	str	r3, [sp, #8]
                FlexCANTimeSeg.phaseSeg1  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg1;
    7d5c:	9b01      	ldr	r3, [sp, #4]
    7d5e:	6a1a      	ldr	r2, [r3, #32]
    7d60:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d64:	2116      	movs	r1, #22
    7d66:	fb01 f303 	mul.w	r3, r1, r3
    7d6a:	4413      	add	r3, r2
    7d6c:	7adb      	ldrb	r3, [r3, #11]
    7d6e:	9303      	str	r3, [sp, #12]
                FlexCANTimeSeg.phaseSeg2  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
    7d70:	9b01      	ldr	r3, [sp, #4]
    7d72:	6a1a      	ldr	r2, [r3, #32]
    7d74:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d78:	2116      	movs	r1, #22
    7d7a:	fb01 f303 	mul.w	r3, r1, r3
    7d7e:	4413      	add	r3, r2
    7d80:	7b1b      	ldrb	r3, [r3, #12]
    7d82:	9304      	str	r3, [sp, #16]
                FlexCANTimeSeg.rJumpwidth = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;
    7d84:	9b01      	ldr	r3, [sp, #4]
    7d86:	6a1a      	ldr	r2, [r3, #32]
    7d88:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d8c:	2116      	movs	r1, #22
    7d8e:	fb01 f303 	mul.w	r3, r1, r3
    7d92:	4413      	add	r3, r2
    7d94:	7c1b      	ldrb	r3, [r3, #16]
    7d96:	9306      	str	r3, [sp, #24]

                (void)FlexCAN_Ip_SetBitrateCbt(Can_pControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    7d98:	9b01      	ldr	r3, [sp, #4]
    7d9a:	7898      	ldrb	r0, [r3, #2]
    7d9c:	9b01      	ldr	r3, [sp, #4]
    7d9e:	6a1a      	ldr	r2, [r3, #32]
    7da0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7da4:	2116      	movs	r1, #22
    7da6:	fb01 f303 	mul.w	r3, r1, r3
    7daa:	4413      	add	r3, r2
    7dac:	781a      	ldrb	r2, [r3, #0]
    7dae:	ab02      	add	r3, sp, #8
    7db0:	4619      	mov	r1, r3
    7db2:	f002 fe01 	bl	a9b8 <FlexCAN_Ip_SetBitrateCbt_Privileged>

                (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    7db6:	9b01      	ldr	r3, [sp, #4]
    7db8:	7898      	ldrb	r0, [r3, #2]
    7dba:	9b01      	ldr	r3, [sp, #4]
    7dbc:	6a1a      	ldr	r2, [r3, #32]
    7dbe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7dc2:	2116      	movs	r1, #22
    7dc4:	fb01 f303 	mul.w	r3, r1, r3
    7dc8:	4413      	add	r3, r2
    7dca:	7cd9      	ldrb	r1, [r3, #19]
    7dcc:	9b01      	ldr	r3, [sp, #4]
    7dce:	6a1a      	ldr	r2, [r3, #32]
    7dd0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7dd4:	2416      	movs	r4, #22
    7dd6:	fb04 f303 	mul.w	r3, r4, r3
    7dda:	4413      	add	r3, r2
    7ddc:	7d1b      	ldrb	r3, [r3, #20]
    7dde:	461a      	mov	r2, r3
    7de0:	f002 fe54 	bl	aa8c <FlexCAN_Ip_SetTDCOffset_Privileged>
                                            Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                            Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset \
                                            );
            }

            (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    7de4:	9b01      	ldr	r3, [sp, #4]
    7de6:	7898      	ldrb	r0, [r3, #2]
    7de8:	9b01      	ldr	r3, [sp, #4]
    7dea:	6a1a      	ldr	r2, [r3, #32]
    7dec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7df0:	2116      	movs	r1, #22
    7df2:	fb01 f303 	mul.w	r3, r1, r3
    7df6:	4413      	add	r3, r2
    7df8:	7c9b      	ldrb	r3, [r3, #18]
    7dfa:	4619      	mov	r1, r3
    7dfc:	f002 fe9a 	bl	ab34 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>

            eRetVal = FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    7e00:	9b01      	ldr	r3, [sp, #4]
    7e02:	789b      	ldrb	r3, [r3, #2]
    7e04:	4618      	mov	r0, r3
    7e06:	f002 fca3 	bl	a750 <FlexCAN_Ip_SetStopMode_Privileged>
    7e0a:	9007      	str	r0, [sp, #28]
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    7e0c:	9b07      	ldr	r3, [sp, #28]
    7e0e:	2b00      	cmp	r3, #0
    7e10:	d107      	bne.n	7e22 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x19a>
            {
                Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID] = BaudRateConfigID;
    7e12:	9b01      	ldr	r3, [sp, #4]
    7e14:	785b      	ldrb	r3, [r3, #1]
    7e16:	4619      	mov	r1, r3
    7e18:	4a06      	ldr	r2, [pc, #24]	; (7e34 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x1ac>)
    7e1a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7e1e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            }
        }
        return ((FLEXCAN_STATUS_SUCCESS == eRetVal) ? ((Std_ReturnType)E_OK) : ((Std_ReturnType)E_NOT_OK));
    7e22:	9b07      	ldr	r3, [sp, #28]
    7e24:	2b00      	cmp	r3, #0
    7e26:	bf14      	ite	ne
    7e28:	2301      	movne	r3, #1
    7e2a:	2300      	moveq	r3, #0
    7e2c:	b2db      	uxtb	r3, r3
    }
    7e2e:	4618      	mov	r0, r3
    7e30:	b008      	add	sp, #32
    7e32:	bd10      	pop	{r4, pc}
    7e34:	1fff8f98 	.word	0x1fff8f98

00007e38 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7e38:	b500      	push	{lr}
    7e3a:	b085      	sub	sp, #20
    7e3c:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    7e3e:	2300      	movs	r3, #0
    7e40:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    7e42:	9b01      	ldr	r3, [sp, #4]
    7e44:	785b      	ldrb	r3, [r3, #1]
    7e46:	461a      	mov	r2, r3
    7e48:	4b11      	ldr	r3, [pc, #68]	; (7e90 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    7e4a:	5c9b      	ldrb	r3, [r3, r2]
    7e4c:	2b00      	cmp	r3, #0
    7e4e:	d012      	beq.n	7e76 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    7e50:	9b01      	ldr	r3, [sp, #4]
    7e52:	7a5b      	ldrb	r3, [r3, #9]
    7e54:	f083 0301 	eor.w	r3, r3, #1
    7e58:	b2db      	uxtb	r3, r3
    7e5a:	2b00      	cmp	r3, #0
    7e5c:	d006      	beq.n	7e6c <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    7e5e:	9b01      	ldr	r3, [sp, #4]
    7e60:	789b      	ldrb	r3, [r3, #2]
    7e62:	2201      	movs	r2, #1
    7e64:	2104      	movs	r1, #4
    7e66:	4618      	mov	r0, r3
    7e68:	f002 ff4e 	bl	ad08 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    7e6c:	9b01      	ldr	r3, [sp, #4]
    7e6e:	789b      	ldrb	r3, [r3, #2]
    7e70:	4618      	mov	r0, r3
    7e72:	f002 feef 	bl	ac54 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    7e76:	9b01      	ldr	r3, [sp, #4]
    7e78:	789b      	ldrb	r3, [r3, #2]
    7e7a:	4618      	mov	r0, r3
    7e7c:	f002 fc48 	bl	a710 <FlexCAN_Ip_SetStartMode_Privileged>
    7e80:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    7e82:	9b03      	ldr	r3, [sp, #12]
    7e84:	b2db      	uxtb	r3, r3
}
    7e86:	4618      	mov	r0, r3
    7e88:	b005      	add	sp, #20
    7e8a:	f85d fb04 	ldr.w	pc, [sp], #4
    7e8e:	bf00      	nop
    7e90:	1fff8f9c 	.word	0x1fff8f9c

00007e94 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7e94:	b500      	push	{lr}
    7e96:	b087      	sub	sp, #28
    7e98:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    7e9a:	2300      	movs	r3, #0
    7e9c:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    7ea0:	2300      	movs	r3, #0
    7ea2:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    7ea4:	9b01      	ldr	r3, [sp, #4]
    7ea6:	7898      	ldrb	r0, [r3, #2]
    7ea8:	4930      	ldr	r1, [pc, #192]	; (7f6c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd8>)
    7eaa:	9b01      	ldr	r3, [sp, #4]
    7eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7eae:	681b      	ldr	r3, [r3, #0]
    7eb0:	461a      	mov	r2, r3
    7eb2:	f001 fbc9 	bl	9648 <FlexCAN_Ip_Init_Privileged>
    7eb6:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    7eb8:	9b04      	ldr	r3, [sp, #16]
    7eba:	2b00      	cmp	r3, #0
    7ebc:	d14f      	bne.n	7f5e <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xca>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    7ebe:	9b01      	ldr	r3, [sp, #4]
    7ec0:	789b      	ldrb	r3, [r3, #2]
    7ec2:	4618      	mov	r0, r3
    7ec4:	f002 fef4 	bl	acb0 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    7ec8:	9801      	ldr	r0, [sp, #4]
    7eca:	f7ff fc25 	bl	7718 <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    7ece:	9801      	ldr	r0, [sp, #4]
    7ed0:	f000 fa0e 	bl	82f0 <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7ed4:	2300      	movs	r3, #0
    7ed6:	f88d 3017 	strb.w	r3, [sp, #23]
    7eda:	e02f      	b.n	7f3c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    7edc:	9b01      	ldr	r3, [sp, #4]
    7ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7ee0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7ee4:	009b      	lsls	r3, r3, #2
    7ee6:	4413      	add	r3, r2
    7ee8:	681b      	ldr	r3, [r3, #0]
    7eea:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    7eec:	9b03      	ldr	r3, [sp, #12]
    7eee:	7b1b      	ldrb	r3, [r3, #12]
    7ef0:	f083 0301 	eor.w	r3, r3, #1
    7ef4:	b2db      	uxtb	r3, r3
    7ef6:	2b00      	cmp	r3, #0
    7ef8:	d018      	beq.n	7f2c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x98>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    7efa:	9b03      	ldr	r3, [sp, #12]
    7efc:	699b      	ldr	r3, [r3, #24]
    7efe:	2b00      	cmp	r3, #0
    7f00:	d003      	beq.n	7f0a <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x76>
    7f02:	3b01      	subs	r3, #1
    7f04:	2b01      	cmp	r3, #1
    7f06:	d813      	bhi.n	7f30 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9c>
    7f08:	e009      	b.n	7f1e <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x8a>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    7f0a:	9b01      	ldr	r3, [sp, #4]
    7f0c:	7898      	ldrb	r0, [r3, #2]
    7f0e:	9b03      	ldr	r3, [sp, #12]
    7f10:	7f19      	ldrb	r1, [r3, #28]
    7f12:	9b03      	ldr	r3, [sp, #12]
    7f14:	7b1b      	ldrb	r3, [r3, #12]
    7f16:	2200      	movs	r2, #0
    7f18:	f001 fca2 	bl	9860 <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    7f1c:	e009      	b.n	7f32 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    7f1e:	9b01      	ldr	r3, [sp, #4]
    7f20:	789b      	ldrb	r3, [r3, #2]
    7f22:	2100      	movs	r1, #0
    7f24:	4618      	mov	r0, r3
    7f26:	f001 fd99 	bl	9a5c <FlexCAN_Ip_RxFifo>
                        }
                        break;
    7f2a:	e002      	b.n	7f32 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    7f2c:	bf00      	nop
    7f2e:	e000      	b.n	7f32 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                        break;
    7f30:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7f32:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7f36:	3301      	adds	r3, #1
    7f38:	f88d 3017 	strb.w	r3, [sp, #23]
    7f3c:	9b01      	ldr	r3, [sp, #4]
    7f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    7f42:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7f46:	429a      	cmp	r2, r3
    7f48:	d3c8      	bcc.n	7edc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x48>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    7f4a:	9801      	ldr	r0, [sp, #4]
    7f4c:	f7ff ff74 	bl	7e38 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    7f50:	4603      	mov	r3, r0
    7f52:	2b00      	cmp	r3, #0
    7f54:	bf14      	ite	ne
    7f56:	2301      	movne	r3, #1
    7f58:	2300      	moveq	r3, #0
    7f5a:	b2db      	uxtb	r3, r3
    7f5c:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    7f5e:	9b04      	ldr	r3, [sp, #16]
    7f60:	b2db      	uxtb	r3, r3
}
    7f62:	4618      	mov	r0, r3
    7f64:	b007      	add	sp, #28
    7f66:	f85d fb04 	ldr.w	pc, [sp], #4
    7f6a:	bf00      	nop
    7f6c:	1fff8cf8 	.word	0x1fff8cf8

00007f70 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7f70:	b500      	push	{lr}
    7f72:	b085      	sub	sp, #20
    7f74:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    7f76:	2300      	movs	r3, #0
    7f78:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    7f7c:	2300      	movs	r3, #0
    7f7e:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    7f82:	9b01      	ldr	r3, [sp, #4]
    7f84:	789b      	ldrb	r3, [r3, #2]
    7f86:	4618      	mov	r0, r3
    7f88:	f002 f98c 	bl	a2a4 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    7f8c:	4603      	mov	r3, r0
    7f8e:	2b00      	cmp	r3, #0
    7f90:	d160      	bne.n	8054 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    7f92:	9b01      	ldr	r3, [sp, #4]
    7f94:	785b      	ldrb	r3, [r3, #1]
    7f96:	461a      	mov	r2, r3
    7f98:	4b33      	ldr	r3, [pc, #204]	; (8068 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    7f9a:	5c9b      	ldrb	r3, [r3, r2]
    7f9c:	2b00      	cmp	r3, #0
    7f9e:	d012      	beq.n	7fc6 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    7fa0:	9b01      	ldr	r3, [sp, #4]
    7fa2:	789b      	ldrb	r3, [r3, #2]
    7fa4:	4618      	mov	r0, r3
    7fa6:	f002 fe83 	bl	acb0 <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    7faa:	9b01      	ldr	r3, [sp, #4]
    7fac:	7a5b      	ldrb	r3, [r3, #9]
    7fae:	f083 0301 	eor.w	r3, r3, #1
    7fb2:	b2db      	uxtb	r3, r3
    7fb4:	2b00      	cmp	r3, #0
    7fb6:	d006      	beq.n	7fc6 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    7fb8:	9b01      	ldr	r3, [sp, #4]
    7fba:	789b      	ldrb	r3, [r3, #2]
    7fbc:	2200      	movs	r2, #0
    7fbe:	2104      	movs	r1, #4
    7fc0:	4618      	mov	r0, r3
    7fc2:	f002 fea1 	bl	ad08 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7fc6:	2300      	movs	r3, #0
    7fc8:	f88d 300e 	strb.w	r3, [sp, #14]
    7fcc:	e032      	b.n	8034 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    7fce:	9b01      	ldr	r3, [sp, #4]
    7fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7fd2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7fd6:	009b      	lsls	r3, r3, #2
    7fd8:	4413      	add	r3, r2
    7fda:	681b      	ldr	r3, [r3, #0]
    7fdc:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    7fde:	9b02      	ldr	r3, [sp, #8]
    7fe0:	699b      	ldr	r3, [r3, #24]
    7fe2:	2b03      	cmp	r3, #3
    7fe4:	d119      	bne.n	801a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    7fe6:	2300      	movs	r3, #0
    7fe8:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    7fec:	9b01      	ldr	r3, [sp, #4]
    7fee:	7898      	ldrb	r0, [r3, #2]
    7ff0:	9b02      	ldr	r3, [sp, #8]
    7ff2:	7f1a      	ldrb	r2, [r3, #28]
    7ff4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7ff8:	4413      	add	r3, r2
    7ffa:	b2db      	uxtb	r3, r3
    7ffc:	4619      	mov	r1, r3
    7ffe:	f002 ff09 	bl	ae14 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    8002:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8006:	3301      	adds	r3, #1
    8008:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    800c:	9b02      	ldr	r3, [sp, #8]
    800e:	7b9b      	ldrb	r3, [r3, #14]
    8010:	f89d 200d 	ldrb.w	r2, [sp, #13]
    8014:	429a      	cmp	r2, r3
    8016:	d3e9      	bcc.n	7fec <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    8018:	e007      	b.n	802a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    801a:	9b01      	ldr	r3, [sp, #4]
    801c:	789a      	ldrb	r2, [r3, #2]
    801e:	9b02      	ldr	r3, [sp, #8]
    8020:	7f1b      	ldrb	r3, [r3, #28]
    8022:	4619      	mov	r1, r3
    8024:	4610      	mov	r0, r2
    8026:	f002 fef5 	bl	ae14 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    802a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    802e:	3301      	adds	r3, #1
    8030:	f88d 300e 	strb.w	r3, [sp, #14]
    8034:	9b01      	ldr	r3, [sp, #4]
    8036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    803a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    803e:	429a      	cmp	r2, r3
    8040:	d3c5      	bcc.n	7fce <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    8042:	9b01      	ldr	r3, [sp, #4]
    8044:	789b      	ldrb	r3, [r3, #2]
    8046:	4618      	mov	r0, r3
    8048:	f002 fb82 	bl	a750 <FlexCAN_Ip_SetStopMode_Privileged>
    804c:	4603      	mov	r3, r0
    804e:	f88d 300f 	strb.w	r3, [sp, #15]
    8052:	e002      	b.n	805a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    8054:	2301      	movs	r3, #1
    8056:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    805a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    805e:	4618      	mov	r0, r3
    8060:	b005      	add	sp, #20
    8062:	f85d fb04 	ldr.w	pc, [sp], #4
    8066:	bf00      	nop
    8068:	1fff8f9c 	.word	0x1fff8f9c

0000806c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    806c:	b500      	push	{lr}
    806e:	b083      	sub	sp, #12
    8070:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    8072:	9b01      	ldr	r3, [sp, #4]
    8074:	785b      	ldrb	r3, [r3, #1]
    8076:	461a      	mov	r2, r3
    8078:	4b10      	ldr	r3, [pc, #64]	; (80bc <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    807a:	5c9b      	ldrb	r3, [r3, r2]
    807c:	2b00      	cmp	r3, #0
    807e:	d018      	beq.n	80b2 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8080:	9b01      	ldr	r3, [sp, #4]
    8082:	789b      	ldrb	r3, [r3, #2]
    8084:	4618      	mov	r0, r3
    8086:	f002 fe13 	bl	acb0 <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    808a:	9b01      	ldr	r3, [sp, #4]
    808c:	785b      	ldrb	r3, [r3, #1]
    808e:	461a      	mov	r2, r3
    8090:	4b0a      	ldr	r3, [pc, #40]	; (80bc <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    8092:	2100      	movs	r1, #0
    8094:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    8096:	9b01      	ldr	r3, [sp, #4]
    8098:	7a5b      	ldrb	r3, [r3, #9]
    809a:	f083 0301 	eor.w	r3, r3, #1
    809e:	b2db      	uxtb	r3, r3
    80a0:	2b00      	cmp	r3, #0
    80a2:	d006      	beq.n	80b2 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    80a4:	9b01      	ldr	r3, [sp, #4]
    80a6:	789b      	ldrb	r3, [r3, #2]
    80a8:	2200      	movs	r2, #0
    80aa:	2104      	movs	r1, #4
    80ac:	4618      	mov	r0, r3
    80ae:	f002 fe2b 	bl	ad08 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    80b2:	bf00      	nop
    80b4:	b003      	add	sp, #12
    80b6:	f85d fb04 	ldr.w	pc, [sp], #4
    80ba:	bf00      	nop
    80bc:	1fff8f9c 	.word	0x1fff8f9c

000080c0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    80c0:	b500      	push	{lr}
    80c2:	b083      	sub	sp, #12
    80c4:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    80c6:	9b01      	ldr	r3, [sp, #4]
    80c8:	785b      	ldrb	r3, [r3, #1]
    80ca:	461a      	mov	r2, r3
    80cc:	4b11      	ldr	r3, [pc, #68]	; (8114 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    80ce:	5c9b      	ldrb	r3, [r3, r2]
    80d0:	f083 0301 	eor.w	r3, r3, #1
    80d4:	b2db      	uxtb	r3, r3
    80d6:	2b00      	cmp	r3, #0
    80d8:	d018      	beq.n	810c <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    80da:	9b01      	ldr	r3, [sp, #4]
    80dc:	789b      	ldrb	r3, [r3, #2]
    80de:	4618      	mov	r0, r3
    80e0:	f002 fdb8 	bl	ac54 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    80e4:	9b01      	ldr	r3, [sp, #4]
    80e6:	7a5b      	ldrb	r3, [r3, #9]
    80e8:	f083 0301 	eor.w	r3, r3, #1
    80ec:	b2db      	uxtb	r3, r3
    80ee:	2b00      	cmp	r3, #0
    80f0:	d006      	beq.n	8100 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    80f2:	9b01      	ldr	r3, [sp, #4]
    80f4:	789b      	ldrb	r3, [r3, #2]
    80f6:	2201      	movs	r2, #1
    80f8:	2104      	movs	r1, #4
    80fa:	4618      	mov	r0, r3
    80fc:	f002 fe04 	bl	ad08 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    8100:	9b01      	ldr	r3, [sp, #4]
    8102:	785b      	ldrb	r3, [r3, #1]
    8104:	461a      	mov	r2, r3
    8106:	4b03      	ldr	r3, [pc, #12]	; (8114 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    8108:	2101      	movs	r1, #1
    810a:	5499      	strb	r1, [r3, r2]
    }
}
    810c:	bf00      	nop
    810e:	b003      	add	sp, #12
    8110:	f85d fb04 	ldr.w	pc, [sp], #4
    8114:	1fff8f9c 	.word	0x1fff8f9c

00008118 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    8118:	b500      	push	{lr}
    811a:	b085      	sub	sp, #20
    811c:	9001      	str	r0, [sp, #4]
    811e:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    8120:	2300      	movs	r3, #0
    8122:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    8124:	9b01      	ldr	r3, [sp, #4]
    8126:	789b      	ldrb	r3, [r3, #2]
    8128:	4618      	mov	r0, r3
    812a:	f001 fe87 	bl	9e3c <FlexCAN_Ip_GetErrorStatus>
    812e:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    8130:	9b03      	ldr	r3, [sp, #12]
    8132:	091b      	lsrs	r3, r3, #4
    8134:	b2db      	uxtb	r3, r3
    8136:	f003 0303 	and.w	r3, r3, #3
    813a:	b2da      	uxtb	r2, r3
    813c:	9b00      	ldr	r3, [sp, #0]
    813e:	701a      	strb	r2, [r3, #0]
    return E_OK;
    8140:	2300      	movs	r3, #0
}
    8142:	4618      	mov	r0, r3
    8144:	b005      	add	sp, #20
    8146:	f85d fb04 	ldr.w	pc, [sp], #4

0000814a <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    814a:	b500      	push	{lr}
    814c:	b083      	sub	sp, #12
    814e:	9001      	str	r0, [sp, #4]
    8150:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    8152:	9b01      	ldr	r3, [sp, #4]
    8154:	789b      	ldrb	r3, [r3, #2]
    8156:	4618      	mov	r0, r3
    8158:	f001 fe82 	bl	9e60 <FlexCAN_Ip_GetControllerTxErrorCounter>
    815c:	4603      	mov	r3, r0
    815e:	461a      	mov	r2, r3
    8160:	9b00      	ldr	r3, [sp, #0]
    8162:	701a      	strb	r2, [r3, #0]
     return E_OK;
    8164:	2300      	movs	r3, #0
}
    8166:	4618      	mov	r0, r3
    8168:	b003      	add	sp, #12
    816a:	f85d fb04 	ldr.w	pc, [sp], #4

0000816e <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    816e:	b500      	push	{lr}
    8170:	b083      	sub	sp, #12
    8172:	9001      	str	r0, [sp, #4]
    8174:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    8176:	9b01      	ldr	r3, [sp, #4]
    8178:	789b      	ldrb	r3, [r3, #2]
    817a:	4618      	mov	r0, r3
    817c:	f001 fe82 	bl	9e84 <FlexCAN_Ip_GetControllerRxErrorCounter>
    8180:	4603      	mov	r3, r0
    8182:	461a      	mov	r2, r3
    8184:	9b00      	ldr	r3, [sp, #0]
    8186:	701a      	strb	r2, [r3, #0]
    return E_OK;
    8188:	2300      	movs	r3, #0
}
    818a:	4618      	mov	r0, r3
    818c:	b003      	add	sp, #12
    818e:	f85d fb04 	ldr.w	pc, [sp], #4

00008192 <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    8192:	b510      	push	{r4, lr}
    8194:	b08c      	sub	sp, #48	; 0x30
    8196:	9005      	str	r0, [sp, #20]
    8198:	9104      	str	r1, [sp, #16]
    819a:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    819c:	2301      	movs	r3, #1
    819e:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    81a0:	2300      	movs	r3, #0
    81a2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    81a6:	2300      	movs	r3, #0
    81a8:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    81aa:	2300      	movs	r3, #0
    81ac:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    81ae:	2300      	movs	r3, #0
    81b0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    81b4:	2300      	movs	r3, #0
    81b6:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    81ba:	2300      	movs	r3, #0
    81bc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    81c0:	2300      	movs	r3, #0
    81c2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    81c6:	2300      	movs	r3, #0
    81c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    81cc:	9b04      	ldr	r3, [sp, #16]
    81ce:	699b      	ldr	r3, [r3, #24]
    81d0:	2b03      	cmp	r3, #3
    81d2:	d177      	bne.n	82c4 <Can_43_FLEXCAN_Ipw_Write+0x132>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    81d4:	9b03      	ldr	r3, [sp, #12]
    81d6:	681b      	ldr	r3, [r3, #0]
    81d8:	0fdb      	lsrs	r3, r3, #31
    81da:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    81dc:	9b04      	ldr	r3, [sp, #16]
    81de:	7c1a      	ldrb	r2, [r3, #16]
    81e0:	9b03      	ldr	r3, [sp, #12]
    81e2:	799b      	ldrb	r3, [r3, #6]
    81e4:	429a      	cmp	r2, r3
    81e6:	d803      	bhi.n	81f0 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    81e8:	9b04      	ldr	r3, [sp, #16]
    81ea:	7c1b      	ldrb	r3, [r3, #16]
    81ec:	9307      	str	r3, [sp, #28]
    81ee:	e002      	b.n	81f6 <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    81f0:	9b03      	ldr	r3, [sp, #12]
    81f2:	799b      	ldrb	r3, [r3, #6]
    81f4:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    81f6:	9b04      	ldr	r3, [sp, #16]
    81f8:	7c5b      	ldrb	r3, [r3, #17]
    81fa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    81fe:	9b03      	ldr	r3, [sp, #12]
    8200:	681b      	ldr	r3, [r3, #0]
    8202:	0f9b      	lsrs	r3, r3, #30
    8204:	f003 0301 	and.w	r3, r3, #1
    8208:	2b00      	cmp	r3, #0
    820a:	bf14      	ite	ne
    820c:	2301      	movne	r3, #1
    820e:	2300      	moveq	r3, #0
    8210:	b2db      	uxtb	r3, r3
    8212:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    8216:	9b05      	ldr	r3, [sp, #20]
    8218:	6a1a      	ldr	r2, [r3, #32]
    821a:	9b05      	ldr	r3, [sp, #20]
    821c:	785b      	ldrb	r3, [r3, #1]
    821e:	4619      	mov	r1, r3
    8220:	4b31      	ldr	r3, [pc, #196]	; (82e8 <Can_43_FLEXCAN_Ipw_Write+0x156>)
    8222:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    8226:	4619      	mov	r1, r3
    8228:	2316      	movs	r3, #22
    822a:	fb01 f303 	mul.w	r3, r1, r3
    822e:	4413      	add	r3, r2
    8230:	781b      	ldrb	r3, [r3, #0]
    8232:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    #endif
#endif
        DataInfo.is_remote = FALSE;
    8236:	2300      	movs	r3, #0
    8238:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    823c:	9b04      	ldr	r3, [sp, #16]
    823e:	7b1b      	ldrb	r3, [r3, #12]
    8240:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    8244:	9b05      	ldr	r3, [sp, #20]
    8246:	7898      	ldrb	r0, [r3, #2]
    8248:	9b04      	ldr	r3, [sp, #16]
    824a:	7f1a      	ldrb	r2, [r3, #28]
    824c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8250:	4413      	add	r3, r2
    8252:	b2db      	uxtb	r3, r3
    8254:	4619      	mov	r1, r3
    8256:	f001 fcdf 	bl	9c18 <FlexCAN_Ip_GetTransferStatus>
    825a:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    825c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    825e:	2b00      	cmp	r3, #0
    8260:	d122      	bne.n	82a8 <Can_43_FLEXCAN_Ipw_Write+0x116>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    8262:	9b05      	ldr	r3, [sp, #20]
    8264:	785b      	ldrb	r3, [r3, #1]
    8266:	461c      	mov	r4, r3
    8268:	9b04      	ldr	r3, [sp, #16]
    826a:	7f1b      	ldrb	r3, [r3, #28]
    826c:	461a      	mov	r2, r3
    826e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8272:	4413      	add	r3, r2
    8274:	9a03      	ldr	r2, [sp, #12]
    8276:	8890      	ldrh	r0, [r2, #4]
    8278:	491c      	ldr	r1, [pc, #112]	; (82ec <Can_43_FLEXCAN_Ipw_Write+0x15a>)
    827a:	0162      	lsls	r2, r4, #5
    827c:	4413      	add	r3, r2
    827e:	4602      	mov	r2, r0
    8280:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    8284:	9b05      	ldr	r3, [sp, #20]
    8286:	7898      	ldrb	r0, [r3, #2]
    8288:	9b04      	ldr	r3, [sp, #16]
    828a:	7f1a      	ldrb	r2, [r3, #28]
    828c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8290:	4413      	add	r3, r2
    8292:	b2d9      	uxtb	r1, r3
    8294:	9b03      	ldr	r3, [sp, #12]
    8296:	681c      	ldr	r4, [r3, #0]
    8298:	9b03      	ldr	r3, [sp, #12]
    829a:	689b      	ldr	r3, [r3, #8]
    829c:	aa06      	add	r2, sp, #24
    829e:	9300      	str	r3, [sp, #0]
    82a0:	4623      	mov	r3, r4
    82a2:	f001 fa4d 	bl	9740 <FlexCAN_Ip_Send>
    82a6:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    82a8:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    82ac:	3301      	adds	r3, #1
    82ae:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    82b2:	9b04      	ldr	r3, [sp, #16]
    82b4:	7b9b      	ldrb	r3, [r3, #14]
    82b6:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    82ba:	429a      	cmp	r2, r3
    82bc:	d202      	bcs.n	82c4 <Can_43_FLEXCAN_Ipw_Write+0x132>
    82be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82c0:	2b02      	cmp	r3, #2
    82c2:	d0bf      	beq.n	8244 <Can_43_FLEXCAN_Ipw_Write+0xb2>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    82c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82c6:	2b00      	cmp	r3, #0
    82c8:	d004      	beq.n	82d4 <Can_43_FLEXCAN_Ipw_Write+0x142>
    82ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82cc:	2b02      	cmp	r3, #2
    82ce:	d001      	beq.n	82d4 <Can_43_FLEXCAN_Ipw_Write+0x142>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    82d0:	2301      	movs	r3, #1
    82d2:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    82d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82d6:	2b02      	cmp	r3, #2
    82d8:	d002      	beq.n	82e0 <Can_43_FLEXCAN_Ipw_Write+0x14e>
    82da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82dc:	b2db      	uxtb	r3, r3
    82de:	e000      	b.n	82e2 <Can_43_FLEXCAN_Ipw_Write+0x150>
    82e0:	2302      	movs	r3, #2
}
    82e2:	4618      	mov	r0, r3
    82e4:	b00c      	add	sp, #48	; 0x30
    82e6:	bd10      	pop	{r4, pc}
    82e8:	1fff8f98 	.word	0x1fff8f98
    82ec:	1fff8f18 	.word	0x1fff8f18

000082f0 <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    82f0:	b500      	push	{lr}
    82f2:	b089      	sub	sp, #36	; 0x24
    82f4:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    82f6:	2300      	movs	r3, #0
    82f8:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    82fc:	9b01      	ldr	r3, [sp, #4]
    82fe:	789b      	ldrb	r3, [r3, #2]
    8300:	2101      	movs	r1, #1
    8302:	4618      	mov	r0, r3
    8304:	f002 fa42 	bl	a78c <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8308:	2300      	movs	r3, #0
    830a:	f88d 301f 	strb.w	r3, [sp, #31]
    830e:	e03a      	b.n	8386 <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    8310:	9b01      	ldr	r3, [sp, #4]
    8312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8314:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8318:	009b      	lsls	r3, r3, #2
    831a:	4413      	add	r3, r2
    831c:	681b      	ldr	r3, [r3, #0]
    831e:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    8320:	9b06      	ldr	r3, [sp, #24]
    8322:	699b      	ldr	r3, [r3, #24]
    8324:	2b00      	cmp	r3, #0
    8326:	d121      	bne.n	836c <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    8328:	2300      	movs	r3, #0
    832a:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    832e:	2300      	movs	r3, #0
    8330:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    8332:	9b06      	ldr	r3, [sp, #24]
    8334:	689b      	ldr	r3, [r3, #8]
    8336:	2b00      	cmp	r3, #0
    8338:	d002      	beq.n	8340 <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    833a:	2301      	movs	r3, #1
    833c:	9302      	str	r3, [sp, #8]
    833e:	e001      	b.n	8344 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    8340:	2300      	movs	r3, #0
    8342:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    8344:	9b01      	ldr	r3, [sp, #4]
    8346:	7898      	ldrb	r0, [r3, #2]
    8348:	9b06      	ldr	r3, [sp, #24]
    834a:	7f19      	ldrb	r1, [r3, #28]
    834c:	9b06      	ldr	r3, [sp, #24]
    834e:	695b      	ldr	r3, [r3, #20]
    8350:	681b      	ldr	r3, [r3, #0]
    8352:	aa02      	add	r2, sp, #8
    8354:	f001 fa40 	bl	97d8 <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    8358:	9b01      	ldr	r3, [sp, #4]
    835a:	7898      	ldrb	r0, [r3, #2]
    835c:	9b06      	ldr	r3, [sp, #24]
    835e:	7f19      	ldrb	r1, [r3, #28]
    8360:	9b06      	ldr	r3, [sp, #24]
    8362:	695b      	ldr	r3, [r3, #20]
    8364:	685b      	ldr	r3, [r3, #4]
    8366:	461a      	mov	r2, r3
    8368:	f001 ffc8 	bl	a2fc <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    836c:	9b06      	ldr	r3, [sp, #24]
    836e:	699b      	ldr	r3, [r3, #24]
    8370:	2b01      	cmp	r3, #1
    8372:	d103      	bne.n	837c <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    8374:	9906      	ldr	r1, [sp, #24]
    8376:	9801      	ldr	r0, [sp, #4]
    8378:	f7fe ffab 	bl	72d2 <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    837c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8380:	3301      	adds	r3, #1
    8382:	f88d 301f 	strb.w	r3, [sp, #31]
    8386:	9b01      	ldr	r3, [sp, #4]
    8388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    838c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8390:	429a      	cmp	r2, r3
    8392:	d3bd      	bcc.n	8310 <Can_Ipw_InitRx+0x20>
        }
    }
}
    8394:	bf00      	nop
    8396:	bf00      	nop
    8398:	b009      	add	sp, #36	; 0x24
    839a:	f85d fb04 	ldr.w	pc, [sp], #4

0000839e <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    839e:	b500      	push	{lr}
    83a0:	b083      	sub	sp, #12
    83a2:	9001      	str	r0, [sp, #4]
    83a4:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    83a6:	9b00      	ldr	r3, [sp, #0]
    83a8:	681b      	ldr	r3, [r3, #0]
    83aa:	2b01      	cmp	r3, #1
    83ac:	d114      	bne.n	83d8 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    83ae:	9b01      	ldr	r3, [sp, #4]
    83b0:	789b      	ldrb	r3, [r3, #2]
    83b2:	4618      	mov	r0, r3
    83b4:	f002 f994 	bl	a6e0 <FlexCAN_Ip_GetStartMode_Privileged>
    83b8:	4603      	mov	r3, r0
    83ba:	f083 0301 	eor.w	r3, r3, #1
    83be:	b2db      	uxtb	r3, r3
    83c0:	2b00      	cmp	r3, #0
    83c2:	d01e      	beq.n	8402 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    83c4:	9b00      	ldr	r3, [sp, #0]
    83c6:	2202      	movs	r2, #2
    83c8:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    83ca:	9b01      	ldr	r3, [sp, #4]
    83cc:	781b      	ldrb	r3, [r3, #0]
    83ce:	2102      	movs	r1, #2
    83d0:	4618      	mov	r0, r3
    83d2:	f7f8 fa9a 	bl	90a <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    83d6:	e014      	b.n	8402 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    83d8:	9b00      	ldr	r3, [sp, #0]
    83da:	681b      	ldr	r3, [r3, #0]
    83dc:	2b02      	cmp	r3, #2
    83de:	d110      	bne.n	8402 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    83e0:	9b01      	ldr	r3, [sp, #4]
    83e2:	789b      	ldrb	r3, [r3, #2]
    83e4:	4618      	mov	r0, r3
    83e6:	f002 f97b 	bl	a6e0 <FlexCAN_Ip_GetStartMode_Privileged>
    83ea:	4603      	mov	r3, r0
    83ec:	2b00      	cmp	r3, #0
    83ee:	d008      	beq.n	8402 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    83f0:	9b00      	ldr	r3, [sp, #0]
    83f2:	2201      	movs	r2, #1
    83f4:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    83f6:	9b01      	ldr	r3, [sp, #4]
    83f8:	781b      	ldrb	r3, [r3, #0]
    83fa:	2101      	movs	r1, #1
    83fc:	4618      	mov	r0, r3
    83fe:	f7f8 fa84 	bl	90a <CanIf_ControllerModeIndication>
}
    8402:	bf00      	nop
    8404:	b003      	add	sp, #12
    8406:	f85d fb04 	ldr.w	pc, [sp], #4

0000840a <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    840a:	b500      	push	{lr}
    840c:	b085      	sub	sp, #20
    840e:	9003      	str	r0, [sp, #12]
    8410:	9102      	str	r1, [sp, #8]
    8412:	9300      	str	r3, [sp, #0]
    8414:	4613      	mov	r3, r2
    8416:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    841a:	9b00      	ldr	r3, [sp, #0]
    841c:	2b03      	cmp	r3, #3
    841e:	d009      	beq.n	8434 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    8420:	9b00      	ldr	r3, [sp, #0]
    8422:	2b03      	cmp	r3, #3
    8424:	d821      	bhi.n	846a <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    8426:	9b00      	ldr	r3, [sp, #0]
    8428:	2b00      	cmp	r3, #0
    842a:	d00c      	beq.n	8446 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    842c:	9b00      	ldr	r3, [sp, #0]
    842e:	2b01      	cmp	r3, #1
    8430:	d012      	beq.n	8458 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    8432:	e01a      	b.n	846a <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    8434:	9b02      	ldr	r3, [sp, #8]
    8436:	691b      	ldr	r3, [r3, #16]
    8438:	f89d 2007 	ldrb.w	r2, [sp, #7]
    843c:	4619      	mov	r1, r3
    843e:	9803      	ldr	r0, [sp, #12]
    8440:	f7ff fa24 	bl	788c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    8444:	e012      	b.n	846c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    8446:	9b02      	ldr	r3, [sp, #8]
    8448:	691b      	ldr	r3, [r3, #16]
    844a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    844e:	4619      	mov	r1, r3
    8450:	9803      	ldr	r0, [sp, #12]
    8452:	f7ff fa67 	bl	7924 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    8456:	e009      	b.n	846c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    8458:	9b02      	ldr	r3, [sp, #8]
    845a:	691b      	ldr	r3, [r3, #16]
    845c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8460:	4619      	mov	r1, r3
    8462:	9803      	ldr	r0, [sp, #12]
    8464:	f7ff fa5e 	bl	7924 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    8468:	e000      	b.n	846c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    846a:	bf00      	nop
            }
        }
    }
    846c:	bf00      	nop
    846e:	b005      	add	sp, #20
    8470:	f85d fb04 	ldr.w	pc, [sp], #4

00008474 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    8474:	b500      	push	{lr}
    8476:	b085      	sub	sp, #20
    8478:	9102      	str	r1, [sp, #8]
    847a:	9201      	str	r2, [sp, #4]
    847c:	9300      	str	r3, [sp, #0]
    847e:	4603      	mov	r3, r0
    8480:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    8484:	9a00      	ldr	r2, [sp, #0]
    8486:	9b01      	ldr	r3, [sp, #4]
    8488:	011b      	lsls	r3, r3, #4
    848a:	4413      	add	r3, r2
    848c:	3308      	adds	r3, #8
    848e:	781b      	ldrb	r3, [r3, #0]
    8490:	f083 0301 	eor.w	r3, r3, #1
    8494:	b2db      	uxtb	r3, r3
    8496:	2b00      	cmp	r3, #0
    8498:	d03b      	beq.n	8512 <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    849a:	9b02      	ldr	r3, [sp, #8]
    849c:	2b04      	cmp	r3, #4
    849e:	d83a      	bhi.n	8516 <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    84a0:	a201      	add	r2, pc, #4	; (adr r2, 84a8 <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    84a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    84a6:	bf00      	nop
    84a8:	000084cf 	.word	0x000084cf
    84ac:	000084e1 	.word	0x000084e1
    84b0:	000084f3 	.word	0x000084f3
    84b4:	00008503 	.word	0x00008503
    84b8:	000084bd 	.word	0x000084bd
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    84bc:	9b01      	ldr	r3, [sp, #4]
    84be:	b2d9      	uxtb	r1, r3
    84c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84c4:	2203      	movs	r2, #3
    84c6:	4618      	mov	r0, r3
    84c8:	f7fe fe1e 	bl	7108 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    84cc:	e024      	b.n	8518 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    84ce:	9b01      	ldr	r3, [sp, #4]
    84d0:	b2d9      	uxtb	r1, r3
    84d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84d6:	2200      	movs	r2, #0
    84d8:	4618      	mov	r0, r3
    84da:	f7fe fe15 	bl	7108 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    84de:	e01b      	b.n	8518 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    84e0:	9b01      	ldr	r3, [sp, #4]
    84e2:	b2d9      	uxtb	r1, r3
    84e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84e8:	2201      	movs	r2, #1
    84ea:	4618      	mov	r0, r3
    84ec:	f7fe fe0c 	bl	7108 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    84f0:	e012      	b.n	8518 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    84f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84f6:	2201      	movs	r2, #1
    84f8:	2106      	movs	r1, #6
    84fa:	4618      	mov	r0, r3
    84fc:	f7fe fe04 	bl	7108 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8500:	e00a      	b.n	8518 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    8502:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8506:	2201      	movs	r2, #1
    8508:	2107      	movs	r1, #7
    850a:	4618      	mov	r0, r3
    850c:	f7fe fdfc 	bl	7108 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8510:	e002      	b.n	8518 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    8512:	bf00      	nop
    8514:	e000      	b.n	8518 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    8516:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    8518:	bf00      	nop
    851a:	b005      	add	sp, #20
    851c:	f85d fb04 	ldr.w	pc, [sp], #4

00008520 <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    8520:	b500      	push	{lr}
    8522:	b085      	sub	sp, #20
    8524:	9102      	str	r1, [sp, #8]
    8526:	9201      	str	r2, [sp, #4]
    8528:	9300      	str	r3, [sp, #0]
    852a:	4603      	mov	r3, r0
    852c:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    8530:	9b02      	ldr	r3, [sp, #8]
    8532:	2b07      	cmp	r3, #7
    8534:	d105      	bne.n	8542 <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    8536:	f89d 300f 	ldrb.w	r3, [sp, #15]
    853a:	4618      	mov	r0, r3
    853c:	f7fe fe26 	bl	718c <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    8540:	e000      	b.n	8544 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    8542:	bf00      	nop
        }
    }
}
    8544:	bf00      	nop
    8546:	b005      	add	sp, #20
    8548:	f85d fb04 	ldr.w	pc, [sp], #4

0000854c <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    854c:	b082      	sub	sp, #8
    854e:	9001      	str	r0, [sp, #4]
    8550:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    8552:	9b01      	ldr	r3, [sp, #4]
    8554:	9a00      	ldr	r2, [sp, #0]
    8556:	649a      	str	r2, [r3, #72]	; 0x48
}
    8558:	bf00      	nop
    855a:	b002      	add	sp, #8
    855c:	4770      	bx	lr

0000855e <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    855e:	b084      	sub	sp, #16
    8560:	9001      	str	r0, [sp, #4]
    8562:	460b      	mov	r3, r1
    8564:	f88d 3003 	strb.w	r3, [sp, #3]
    8568:	4613      	mov	r3, r2
    856a:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    856e:	9b01      	ldr	r3, [sp, #4]
    8570:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8574:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    8576:	9b03      	ldr	r3, [sp, #12]
    8578:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    857c:	9303      	str	r3, [sp, #12]

    if (enable)
    857e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8582:	2b00      	cmp	r3, #0
    8584:	d00b      	beq.n	859e <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    8586:	9b03      	ldr	r3, [sp, #12]
    8588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    858c:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    858e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8592:	021b      	lsls	r3, r3, #8
    8594:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    8598:	9a03      	ldr	r2, [sp, #12]
    859a:	4313      	orrs	r3, r2
    859c:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    859e:	9b01      	ldr	r3, [sp, #4]
    85a0:	9a03      	ldr	r2, [sp, #12]
    85a2:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    85a6:	bf00      	nop
    85a8:	b004      	add	sp, #16
    85aa:	4770      	bx	lr

000085ac <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    85ac:	b082      	sub	sp, #8
    85ae:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    85b0:	9b01      	ldr	r3, [sp, #4]
    85b2:	681b      	ldr	r3, [r3, #0]
    85b4:	43db      	mvns	r3, r3
    85b6:	0fdb      	lsrs	r3, r3, #31
    85b8:	b2db      	uxtb	r3, r3
}
    85ba:	4618      	mov	r0, r3
    85bc:	b002      	add	sp, #8
    85be:	4770      	bx	lr

000085c0 <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    85c0:	b082      	sub	sp, #8
    85c2:	9001      	str	r0, [sp, #4]
    85c4:	460b      	mov	r3, r1
    85c6:	f88d 3003 	strb.w	r3, [sp, #3]
    85ca:	4613      	mov	r3, r2
    85cc:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    85d0:	9b01      	ldr	r3, [sp, #4]
    85d2:	681b      	ldr	r3, [r3, #0]
    85d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    85d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    85dc:	2a00      	cmp	r2, #0
    85de:	d002      	beq.n	85e6 <FlexCAN_SetFDEnabled+0x26>
    85e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    85e4:	e000      	b.n	85e8 <FlexCAN_SetFDEnabled+0x28>
    85e6:	2200      	movs	r2, #0
    85e8:	431a      	orrs	r2, r3
    85ea:	9b01      	ldr	r3, [sp, #4]
    85ec:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    85ee:	9b01      	ldr	r3, [sp, #4]
    85f0:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    85f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    85f8:	f89d 2002 	ldrb.w	r2, [sp, #2]
    85fc:	2a00      	cmp	r2, #0
    85fe:	d002      	beq.n	8606 <FlexCAN_SetFDEnabled+0x46>
    8600:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8604:	e000      	b.n	8608 <FlexCAN_SetFDEnabled+0x48>
    8606:	2200      	movs	r2, #0
    8608:	431a      	orrs	r2, r3
    860a:	9b01      	ldr	r3, [sp, #4]
    860c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    8610:	9b01      	ldr	r3, [sp, #4]
    8612:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8616:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    861a:	9b01      	ldr	r3, [sp, #4]
    861c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    8620:	bf00      	nop
    8622:	b002      	add	sp, #8
    8624:	4770      	bx	lr

00008626 <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    8626:	b082      	sub	sp, #8
    8628:	9001      	str	r0, [sp, #4]
    862a:	460b      	mov	r3, r1
    862c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    8630:	9b01      	ldr	r3, [sp, #4]
    8632:	685b      	ldr	r3, [r3, #4]
    8634:	f023 0308 	bic.w	r3, r3, #8
    8638:	f89d 2003 	ldrb.w	r2, [sp, #3]
    863c:	2a00      	cmp	r2, #0
    863e:	d001      	beq.n	8644 <FlexCAN_SetListenOnlyMode+0x1e>
    8640:	2208      	movs	r2, #8
    8642:	e000      	b.n	8646 <FlexCAN_SetListenOnlyMode+0x20>
    8644:	2200      	movs	r2, #0
    8646:	431a      	orrs	r2, r3
    8648:	9b01      	ldr	r3, [sp, #4]
    864a:	605a      	str	r2, [r3, #4]
}
    864c:	bf00      	nop
    864e:	b002      	add	sp, #8
    8650:	4770      	bx	lr

00008652 <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    8652:	b082      	sub	sp, #8
    8654:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    8656:	9b01      	ldr	r3, [sp, #4]
    8658:	689b      	ldr	r3, [r3, #8]
}
    865a:	bf00      	nop
    865c:	b002      	add	sp, #8
    865e:	4770      	bx	lr

00008660 <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    8660:	b084      	sub	sp, #16
    8662:	9001      	str	r0, [sp, #4]
    8664:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    8666:	9b00      	ldr	r3, [sp, #0]
    8668:	f003 031f 	and.w	r3, r3, #31
    866c:	2201      	movs	r2, #1
    866e:	fa02 f303 	lsl.w	r3, r2, r3
    8672:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    8674:	9b00      	ldr	r3, [sp, #0]
    8676:	2b1f      	cmp	r3, #31
    8678:	d802      	bhi.n	8680 <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    867a:	9b01      	ldr	r3, [sp, #4]
    867c:	9a03      	ldr	r2, [sp, #12]
    867e:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    8680:	bf00      	nop
    8682:	b004      	add	sp, #16
    8684:	4770      	bx	lr

00008686 <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    8686:	b084      	sub	sp, #16
    8688:	9001      	str	r0, [sp, #4]
    868a:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    868c:	2300      	movs	r3, #0
    868e:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    8690:	9b00      	ldr	r3, [sp, #0]
    8692:	2b1f      	cmp	r3, #31
    8694:	d80e      	bhi.n	86b4 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    8696:	9b01      	ldr	r3, [sp, #4]
    8698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    869a:	9b00      	ldr	r3, [sp, #0]
    869c:	f003 031f 	and.w	r3, r3, #31
    86a0:	2101      	movs	r1, #1
    86a2:	fa01 f303 	lsl.w	r3, r1, r3
    86a6:	401a      	ands	r2, r3
    86a8:	9b00      	ldr	r3, [sp, #0]
    86aa:	f003 031f 	and.w	r3, r3, #31
    86ae:	fa22 f303 	lsr.w	r3, r2, r3
    86b2:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    86b4:	9b03      	ldr	r3, [sp, #12]
    86b6:	b2db      	uxtb	r3, r3
}
    86b8:	4618      	mov	r0, r3
    86ba:	b004      	add	sp, #16
    86bc:	4770      	bx	lr

000086be <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    86be:	b082      	sub	sp, #8
    86c0:	9001      	str	r0, [sp, #4]
    86c2:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    86c4:	9b01      	ldr	r3, [sp, #4]
    86c6:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    86ca:	4b15      	ldr	r3, [pc, #84]	; (8720 <FlexCAN_SetFDTimeSegments+0x62>)
    86cc:	4013      	ands	r3, r2
    86ce:	9a01      	ldr	r2, [sp, #4]
    86d0:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    86d4:	9b01      	ldr	r3, [sp, #4]
    86d6:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    86da:	9b00      	ldr	r3, [sp, #0]
    86dc:	681b      	ldr	r3, [r3, #0]
    86de:	029b      	lsls	r3, r3, #10
    86e0:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    86e4:	9b00      	ldr	r3, [sp, #0]
    86e6:	689b      	ldr	r3, [r3, #8]
    86e8:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    86ec:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    86ee:	9b00      	ldr	r3, [sp, #0]
    86f0:	685b      	ldr	r3, [r3, #4]
    86f2:	015b      	lsls	r3, r3, #5
    86f4:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    86f6:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    86f8:	9b00      	ldr	r3, [sp, #0]
    86fa:	68db      	ldr	r3, [r3, #12]
    86fc:	0518      	lsls	r0, r3, #20
    86fe:	4b09      	ldr	r3, [pc, #36]	; (8724 <FlexCAN_SetFDTimeSegments+0x66>)
    8700:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    8702:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    8704:	9b00      	ldr	r3, [sp, #0]
    8706:	691b      	ldr	r3, [r3, #16]
    8708:	041b      	lsls	r3, r3, #16
    870a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    870e:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    8710:	431a      	orrs	r2, r3
    8712:	9b01      	ldr	r3, [sp, #4]
    8714:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    8718:	bf00      	nop
    871a:	b002      	add	sp, #8
    871c:	4770      	bx	lr
    871e:	bf00      	nop
    8720:	c0088318 	.word	0xc0088318
    8724:	3ff00000 	.word	0x3ff00000

00008728 <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8728:	b082      	sub	sp, #8
    872a:	9001      	str	r0, [sp, #4]
    872c:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    872e:	9b01      	ldr	r3, [sp, #4]
    8730:	685a      	ldr	r2, [r3, #4]
    8732:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    8736:	4013      	ands	r3, r2
    8738:	9a01      	ldr	r2, [sp, #4]
    873a:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    873c:	9b01      	ldr	r3, [sp, #4]
    873e:	685a      	ldr	r2, [r3, #4]
    8740:	9b00      	ldr	r3, [sp, #0]
    8742:	681b      	ldr	r3, [r3, #0]
    8744:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    8748:	9b00      	ldr	r3, [sp, #0]
    874a:	689b      	ldr	r3, [r3, #8]
    874c:	041b      	lsls	r3, r3, #16
    874e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    8752:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    8754:	9b00      	ldr	r3, [sp, #0]
    8756:	685b      	ldr	r3, [r3, #4]
    8758:	04db      	lsls	r3, r3, #19
    875a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    875e:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    8760:	9b00      	ldr	r3, [sp, #0]
    8762:	68db      	ldr	r3, [r3, #12]
    8764:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    8766:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    8768:	9b00      	ldr	r3, [sp, #0]
    876a:	691b      	ldr	r3, [r3, #16]
    876c:	059b      	lsls	r3, r3, #22
    876e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    8772:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    8774:	431a      	orrs	r2, r3
    8776:	9b01      	ldr	r3, [sp, #4]
    8778:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    877a:	bf00      	nop
    877c:	b002      	add	sp, #8
    877e:	4770      	bx	lr

00008780 <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8780:	b082      	sub	sp, #8
    8782:	9001      	str	r0, [sp, #4]
    8784:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    8786:	9b01      	ldr	r3, [sp, #4]
    8788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    878a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    878e:	9b01      	ldr	r3, [sp, #4]
    8790:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    8792:	9b01      	ldr	r3, [sp, #4]
    8794:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    8796:	9b00      	ldr	r3, [sp, #0]
    8798:	681b      	ldr	r3, [r3, #0]
    879a:	029b      	lsls	r3, r3, #10
    879c:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    879e:	9b00      	ldr	r3, [sp, #0]
    87a0:	689b      	ldr	r3, [r3, #8]
    87a2:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    87a6:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    87a8:	9b00      	ldr	r3, [sp, #0]
    87aa:	685b      	ldr	r3, [r3, #4]
    87ac:	015b      	lsls	r3, r3, #5
    87ae:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    87b2:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    87b4:	9b00      	ldr	r3, [sp, #0]
    87b6:	68db      	ldr	r3, [r3, #12]
    87b8:	0558      	lsls	r0, r3, #21
    87ba:	4b07      	ldr	r3, [pc, #28]	; (87d8 <FlexCAN_SetExtendedTimeSegments+0x58>)
    87bc:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    87be:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    87c0:	9b00      	ldr	r3, [sp, #0]
    87c2:	691b      	ldr	r3, [r3, #16]
    87c4:	041b      	lsls	r3, r3, #16
    87c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    87ca:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    87cc:	431a      	orrs	r2, r3
    87ce:	9b01      	ldr	r3, [sp, #4]
    87d0:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    87d2:	bf00      	nop
    87d4:	b002      	add	sp, #8
    87d6:	4770      	bx	lr
    87d8:	7fe00000 	.word	0x7fe00000

000087dc <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    87dc:	b082      	sub	sp, #8
    87de:	9001      	str	r0, [sp, #4]
    87e0:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    87e2:	9b01      	ldr	r3, [sp, #4]
    87e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    87e6:	0d5b      	lsrs	r3, r3, #21
    87e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
    87ec:	9b00      	ldr	r3, [sp, #0]
    87ee:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    87f0:	9b01      	ldr	r3, [sp, #4]
    87f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    87f4:	0a9b      	lsrs	r3, r3, #10
    87f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    87fa:	9b00      	ldr	r3, [sp, #0]
    87fc:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    87fe:	9b01      	ldr	r3, [sp, #4]
    8800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8802:	095b      	lsrs	r3, r3, #5
    8804:	f003 021f 	and.w	r2, r3, #31
    8808:	9b00      	ldr	r3, [sp, #0]
    880a:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    880c:	9b01      	ldr	r3, [sp, #4]
    880e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8810:	f003 021f 	and.w	r2, r3, #31
    8814:	9b00      	ldr	r3, [sp, #0]
    8816:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    8818:	9b01      	ldr	r3, [sp, #4]
    881a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    881c:	0c1b      	lsrs	r3, r3, #16
    881e:	f003 021f 	and.w	r2, r3, #31
    8822:	9b00      	ldr	r3, [sp, #0]
    8824:	611a      	str	r2, [r3, #16]
}
    8826:	bf00      	nop
    8828:	b002      	add	sp, #8
    882a:	4770      	bx	lr

0000882c <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    882c:	b082      	sub	sp, #8
    882e:	9001      	str	r0, [sp, #4]
    8830:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    8832:	9b01      	ldr	r3, [sp, #4]
    8834:	685b      	ldr	r3, [r3, #4]
    8836:	0e1b      	lsrs	r3, r3, #24
    8838:	b2da      	uxtb	r2, r3
    883a:	9b00      	ldr	r3, [sp, #0]
    883c:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    883e:	9b01      	ldr	r3, [sp, #4]
    8840:	685b      	ldr	r3, [r3, #4]
    8842:	f003 0207 	and.w	r2, r3, #7
    8846:	9b00      	ldr	r3, [sp, #0]
    8848:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    884a:	9b01      	ldr	r3, [sp, #4]
    884c:	685b      	ldr	r3, [r3, #4]
    884e:	0cdb      	lsrs	r3, r3, #19
    8850:	f003 0207 	and.w	r2, r3, #7
    8854:	9b00      	ldr	r3, [sp, #0]
    8856:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    8858:	9b01      	ldr	r3, [sp, #4]
    885a:	685b      	ldr	r3, [r3, #4]
    885c:	0c1b      	lsrs	r3, r3, #16
    885e:	f003 0207 	and.w	r2, r3, #7
    8862:	9b00      	ldr	r3, [sp, #0]
    8864:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    8866:	9b01      	ldr	r3, [sp, #4]
    8868:	685b      	ldr	r3, [r3, #4]
    886a:	0d9b      	lsrs	r3, r3, #22
    886c:	f003 0203 	and.w	r2, r3, #3
    8870:	9b00      	ldr	r3, [sp, #0]
    8872:	611a      	str	r2, [r3, #16]
}
    8874:	bf00      	nop
    8876:	b002      	add	sp, #8
    8878:	4770      	bx	lr

0000887a <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    887a:	b082      	sub	sp, #8
    887c:	9001      	str	r0, [sp, #4]
    887e:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    8880:	9b01      	ldr	r3, [sp, #4]
    8882:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    8886:	0d1b      	lsrs	r3, r3, #20
    8888:	f3c3 0209 	ubfx	r2, r3, #0, #10
    888c:	9b00      	ldr	r3, [sp, #0]
    888e:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    8890:	9b01      	ldr	r3, [sp, #4]
    8892:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    8896:	0a9b      	lsrs	r3, r3, #10
    8898:	f003 021f 	and.w	r2, r3, #31
    889c:	9b00      	ldr	r3, [sp, #0]
    889e:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    88a0:	9b01      	ldr	r3, [sp, #4]
    88a2:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    88a6:	095b      	lsrs	r3, r3, #5
    88a8:	f003 0207 	and.w	r2, r3, #7
    88ac:	9b00      	ldr	r3, [sp, #0]
    88ae:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    88b0:	9b01      	ldr	r3, [sp, #4]
    88b2:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    88b6:	f003 0207 	and.w	r2, r3, #7
    88ba:	9b00      	ldr	r3, [sp, #0]
    88bc:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    88be:	9b01      	ldr	r3, [sp, #4]
    88c0:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    88c4:	0c1b      	lsrs	r3, r3, #16
    88c6:	f003 0207 	and.w	r2, r3, #7
    88ca:	9b00      	ldr	r3, [sp, #0]
    88cc:	611a      	str	r2, [r3, #16]
}
    88ce:	bf00      	nop
    88d0:	b002      	add	sp, #8
    88d2:	4770      	bx	lr

000088d4 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    88d4:	b082      	sub	sp, #8
    88d6:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    88d8:	9b01      	ldr	r3, [sp, #4]
    88da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    88dc:	0fdb      	lsrs	r3, r3, #31
    88de:	b2db      	uxtb	r3, r3
}
    88e0:	4618      	mov	r0, r3
    88e2:	b002      	add	sp, #8
    88e4:	4770      	bx	lr

000088e6 <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    88e6:	b082      	sub	sp, #8
    88e8:	9001      	str	r0, [sp, #4]
    88ea:	460b      	mov	r3, r1
    88ec:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    88f0:	9b01      	ldr	r3, [sp, #4]
    88f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    88f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    88f8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    88fc:	2a00      	cmp	r2, #0
    88fe:	d002      	beq.n	8906 <FlexCAN_EnableExtCbt+0x20>
    8900:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8904:	e000      	b.n	8908 <FlexCAN_EnableExtCbt+0x22>
    8906:	2200      	movs	r2, #0
    8908:	431a      	orrs	r2, r3
    890a:	9b01      	ldr	r3, [sp, #4]
    890c:	651a      	str	r2, [r3, #80]	; 0x50
}
    890e:	bf00      	nop
    8910:	b002      	add	sp, #8
    8912:	4770      	bx	lr

00008914 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    8914:	b082      	sub	sp, #8
    8916:	9001      	str	r0, [sp, #4]
    8918:	460b      	mov	r3, r1
    891a:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    891e:	9b01      	ldr	r3, [sp, #4]
    8920:	681b      	ldr	r3, [r3, #0]
    8922:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    8926:	f89d 2003 	ldrb.w	r2, [sp, #3]
    892a:	2a00      	cmp	r2, #0
    892c:	d001      	beq.n	8932 <FlexCAN_SetSelfReception+0x1e>
    892e:	2200      	movs	r2, #0
    8930:	e001      	b.n	8936 <FlexCAN_SetSelfReception+0x22>
    8932:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    8936:	431a      	orrs	r2, r3
    8938:	9b01      	ldr	r3, [sp, #4]
    893a:	601a      	str	r2, [r3, #0]
}
    893c:	bf00      	nop
    893e:	b002      	add	sp, #8
    8940:	4770      	bx	lr

00008942 <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    8942:	b082      	sub	sp, #8
    8944:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    8946:	9b01      	ldr	r3, [sp, #4]
    8948:	681b      	ldr	r3, [r3, #0]
    894a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    894e:	2b00      	cmp	r3, #0
    8950:	bf14      	ite	ne
    8952:	2301      	movne	r3, #1
    8954:	2300      	moveq	r3, #0
    8956:	b2db      	uxtb	r3, r3
}
    8958:	4618      	mov	r0, r3
    895a:	b002      	add	sp, #8
    895c:	4770      	bx	lr

0000895e <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    895e:	b082      	sub	sp, #8
    8960:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    8962:	9b01      	ldr	r3, [sp, #4]
    8964:	685b      	ldr	r3, [r3, #4]
    8966:	f003 0308 	and.w	r3, r3, #8
    896a:	2b00      	cmp	r3, #0
    896c:	bf14      	ite	ne
    896e:	2301      	movne	r3, #1
    8970:	2300      	moveq	r3, #0
    8972:	b2db      	uxtb	r3, r3
}
    8974:	4618      	mov	r0, r3
    8976:	b002      	add	sp, #8
    8978:	4770      	bx	lr

0000897a <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    897a:	b082      	sub	sp, #8
    897c:	4603      	mov	r3, r0
    897e:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    8982:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8986:	3301      	adds	r3, #1
    8988:	00db      	lsls	r3, r3, #3
    898a:	089b      	lsrs	r3, r3, #2
    898c:	3305      	adds	r3, #5
}
    898e:	4618      	mov	r0, r3
    8990:	b002      	add	sp, #8
    8992:	4770      	bx	lr

00008994 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    8994:	b082      	sub	sp, #8
    8996:	9001      	str	r0, [sp, #4]
    8998:	460b      	mov	r3, r1
    899a:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    899e:	9b01      	ldr	r3, [sp, #4]
    89a0:	685b      	ldr	r3, [r3, #4]
    89a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    89a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    89aa:	2a00      	cmp	r2, #0
    89ac:	d002      	beq.n	89b4 <FlexCAN_SetClkSrc+0x20>
    89ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    89b2:	e000      	b.n	89b6 <FlexCAN_SetClkSrc+0x22>
    89b4:	2200      	movs	r2, #0
    89b6:	431a      	orrs	r2, r3
    89b8:	9b01      	ldr	r3, [sp, #4]
    89ba:	605a      	str	r2, [r3, #4]
}
    89bc:	bf00      	nop
    89be:	b002      	add	sp, #8
    89c0:	4770      	bx	lr

000089c2 <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    89c2:	b084      	sub	sp, #16
    89c4:	9001      	str	r0, [sp, #4]
    89c6:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    89c8:	2300      	movs	r3, #0
    89ca:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    89ce:	9b00      	ldr	r3, [sp, #0]
    89d0:	2b1f      	cmp	r3, #31
    89d2:	d810      	bhi.n	89f6 <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    89d4:	9b01      	ldr	r3, [sp, #4]
    89d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89d8:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    89da:	9b01      	ldr	r3, [sp, #4]
    89dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    89de:	9b02      	ldr	r3, [sp, #8]
    89e0:	401a      	ands	r2, r3
    89e2:	9b00      	ldr	r3, [sp, #0]
    89e4:	f003 031f 	and.w	r3, r3, #31
    89e8:	fa22 f303 	lsr.w	r3, r2, r3
    89ec:	b2db      	uxtb	r3, r3
    89ee:	f003 0301 	and.w	r3, r3, #1
    89f2:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    89f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    89fa:	4618      	mov	r0, r3
    89fc:	b004      	add	sp, #16
    89fe:	4770      	bx	lr

00008a00 <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    8a00:	b082      	sub	sp, #8
    8a02:	9001      	str	r0, [sp, #4]
    8a04:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    8a06:	9b01      	ldr	r3, [sp, #4]
    8a08:	9a00      	ldr	r2, [sp, #0]
    8a0a:	611a      	str	r2, [r3, #16]
}
    8a0c:	bf00      	nop
    8a0e:	b002      	add	sp, #8
    8a10:	4770      	bx	lr

00008a12 <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    8a12:	b084      	sub	sp, #16
    8a14:	9003      	str	r0, [sp, #12]
    8a16:	9102      	str	r1, [sp, #8]
    8a18:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    8a1a:	9b03      	ldr	r3, [sp, #12]
    8a1c:	9a02      	ldr	r2, [sp, #8]
    8a1e:	f502 7208 	add.w	r2, r2, #544	; 0x220
    8a22:	9901      	ldr	r1, [sp, #4]
    8a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    8a28:	bf00      	nop
    8a2a:	b004      	add	sp, #16
    8a2c:	4770      	bx	lr

00008a2e <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    8a2e:	b082      	sub	sp, #8
    8a30:	9001      	str	r0, [sp, #4]
    8a32:	460b      	mov	r3, r1
    8a34:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    8a38:	9b01      	ldr	r3, [sp, #4]
    8a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8a3c:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    8a40:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8a44:	04db      	lsls	r3, r3, #19
    8a46:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    8a4a:	431a      	orrs	r2, r3
    8a4c:	9b01      	ldr	r3, [sp, #4]
    8a4e:	635a      	str	r2, [r3, #52]	; 0x34
}
    8a50:	bf00      	nop
    8a52:	b002      	add	sp, #8
    8a54:	4770      	bx	lr

00008a56 <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    8a56:	b082      	sub	sp, #8
    8a58:	9001      	str	r0, [sp, #4]
    8a5a:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    8a5c:	9b00      	ldr	r3, [sp, #0]
    8a5e:	2b00      	cmp	r3, #0
    8a60:	d106      	bne.n	8a70 <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    8a62:	9b01      	ldr	r3, [sp, #4]
    8a64:	681b      	ldr	r3, [r3, #0]
    8a66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    8a6a:	9b01      	ldr	r3, [sp, #4]
    8a6c:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    8a6e:	e005      	b.n	8a7c <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    8a70:	9b01      	ldr	r3, [sp, #4]
    8a72:	681b      	ldr	r3, [r3, #0]
    8a74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    8a78:	9b01      	ldr	r3, [sp, #4]
    8a7a:	601a      	str	r2, [r3, #0]
}
    8a7c:	bf00      	nop
    8a7e:	b002      	add	sp, #8
    8a80:	4770      	bx	lr

00008a82 <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    8a82:	b500      	push	{lr}
    8a84:	b083      	sub	sp, #12
    8a86:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    8a88:	9801      	ldr	r0, [sp, #4]
    8a8a:	f002 ff85 	bl	b998 <FlexCAN_IsFDAvailable>
    8a8e:	4603      	mov	r3, r0
    8a90:	2b00      	cmp	r3, #0
    8a92:	d007      	beq.n	8aa4 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    8a94:	9b01      	ldr	r3, [sp, #4]
    8a96:	2200      	movs	r2, #0
    8a98:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    8a9c:	9b01      	ldr	r3, [sp, #4]
    8a9e:	4a12      	ldr	r2, [pc, #72]	; (8ae8 <FlexCAN_SetRegDefaultVal+0x66>)
    8aa0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    8aa4:	9b01      	ldr	r3, [sp, #4]
    8aa6:	f04f 32ff 	mov.w	r2, #4294967295
    8aaa:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    8aac:	9b01      	ldr	r3, [sp, #4]
    8aae:	2200      	movs	r2, #0
    8ab0:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    8ab2:	9b01      	ldr	r3, [sp, #4]
    8ab4:	2200      	movs	r2, #0
    8ab6:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    8ab8:	9b01      	ldr	r3, [sp, #4]
    8aba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    8abe:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    8ac0:	9b01      	ldr	r3, [sp, #4]
    8ac2:	4a0a      	ldr	r2, [pc, #40]	; (8aec <FlexCAN_SetRegDefaultVal+0x6a>)
    8ac4:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    8ac6:	9b01      	ldr	r3, [sp, #4]
    8ac8:	2200      	movs	r2, #0
    8aca:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    8acc:	9b01      	ldr	r3, [sp, #4]
    8ace:	2200      	movs	r2, #0
    8ad0:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    8ad2:	9b01      	ldr	r3, [sp, #4]
    8ad4:	2200      	movs	r2, #0
    8ad6:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    8ad8:	9b01      	ldr	r3, [sp, #4]
    8ada:	4a05      	ldr	r2, [pc, #20]	; (8af0 <FlexCAN_SetRegDefaultVal+0x6e>)
    8adc:	601a      	str	r2, [r3, #0]
}
    8ade:	bf00      	nop
    8ae0:	b003      	add	sp, #12
    8ae2:	f85d fb04 	ldr.w	pc, [sp], #4
    8ae6:	bf00      	nop
    8ae8:	80004100 	.word	0x80004100
    8aec:	0003b006 	.word	0x0003b006
    8af0:	d890000f 	.word	0xd890000f

00008af4 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    8af4:	b500      	push	{lr}
    8af6:	b085      	sub	sp, #20
    8af8:	9001      	str	r0, [sp, #4]
    8afa:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8afc:	2300      	movs	r3, #0
    8afe:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    8b00:	9b00      	ldr	r3, [sp, #0]
    8b02:	7a1b      	ldrb	r3, [r3, #8]
    8b04:	2b00      	cmp	r3, #0
    8b06:	d006      	beq.n	8b16 <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    8b08:	9b00      	ldr	r3, [sp, #0]
    8b0a:	685b      	ldr	r3, [r3, #4]
    8b0c:	4619      	mov	r1, r3
    8b0e:	9801      	ldr	r0, [sp, #4]
    8b10:	f002 fefe 	bl	b910 <FlexCAN_EnableRxFifo>
    8b14:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    8b16:	9b03      	ldr	r3, [sp, #12]
}
    8b18:	4618      	mov	r0, r3
    8b1a:	b005      	add	sp, #20
    8b1c:	f85d fb04 	ldr.w	pc, [sp], #4

00008b20 <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    8b20:	b500      	push	{lr}
    8b22:	b085      	sub	sp, #20
    8b24:	9001      	str	r0, [sp, #4]
    8b26:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8b28:	2300      	movs	r3, #0
    8b2a:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    8b2c:	9b00      	ldr	r3, [sp, #0]
    8b2e:	68db      	ldr	r3, [r3, #12]
    8b30:	2b02      	cmp	r3, #2
    8b32:	d003      	beq.n	8b3c <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    8b34:	2100      	movs	r1, #0
    8b36:	9801      	ldr	r0, [sp, #4]
    8b38:	f7ff feec 	bl	8914 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    8b3c:	9900      	ldr	r1, [sp, #0]
    8b3e:	9801      	ldr	r0, [sp, #4]
    8b40:	f7ff ffd8 	bl	8af4 <FlexCAN_InitRxFifo>
    8b44:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    8b46:	9b03      	ldr	r3, [sp, #12]
    8b48:	2b00      	cmp	r3, #0
    8b4a:	d006      	beq.n	8b5a <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    8b4c:	9801      	ldr	r0, [sp, #4]
    8b4e:	f002 fd03 	bl	b558 <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    8b52:	9801      	ldr	r0, [sp, #4]
    8b54:	f002 fdca 	bl	b6ec <FlexCAN_Disable>
    8b58:	e00b      	b.n	8b72 <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    8b5a:	9b00      	ldr	r3, [sp, #0]
    8b5c:	3314      	adds	r3, #20
    8b5e:	4619      	mov	r1, r3
    8b60:	9801      	ldr	r0, [sp, #4]
    8b62:	f002 ff3b 	bl	b9dc <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    8b66:	9b00      	ldr	r3, [sp, #0]
    8b68:	681b      	ldr	r3, [r3, #0]
    8b6a:	4619      	mov	r1, r3
    8b6c:	9801      	ldr	r0, [sp, #4]
    8b6e:	f003 fab7 	bl	c0e0 <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    8b72:	9b03      	ldr	r3, [sp, #12]
}
    8b74:	4618      	mov	r0, r3
    8b76:	b005      	add	sp, #20
    8b78:	f85d fb04 	ldr.w	pc, [sp], #4

00008b7c <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    8b7c:	b500      	push	{lr}
    8b7e:	b087      	sub	sp, #28
    8b80:	4603      	mov	r3, r0
    8b82:	9102      	str	r1, [sp, #8]
    8b84:	9201      	str	r2, [sp, #4]
    8b86:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8b8a:	2300      	movs	r3, #0
    8b8c:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    8b8e:	9802      	ldr	r0, [sp, #8]
    8b90:	f7ff fd0c 	bl	85ac <FlexCAN_IsEnabled>
    8b94:	4603      	mov	r3, r0
    8b96:	2b00      	cmp	r3, #0
    8b98:	d00a      	beq.n	8bb0 <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    8b9a:	9802      	ldr	r0, [sp, #8]
    8b9c:	f002 fcdc 	bl	b558 <FlexCAN_EnterFreezeMode>
    8ba0:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    8ba2:	9b05      	ldr	r3, [sp, #20]
    8ba4:	2b00      	cmp	r3, #0
    8ba6:	d103      	bne.n	8bb0 <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    8ba8:	9802      	ldr	r0, [sp, #8]
    8baa:	f002 fd9f 	bl	b6ec <FlexCAN_Disable>
    8bae:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    8bb0:	9b05      	ldr	r3, [sp, #20]
    8bb2:	2b00      	cmp	r3, #0
    8bb4:	d137      	bne.n	8c26 <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    8bb6:	9b01      	ldr	r3, [sp, #4]
    8bb8:	7e5b      	ldrb	r3, [r3, #25]
    8bba:	4619      	mov	r1, r3
    8bbc:	9802      	ldr	r0, [sp, #8]
    8bbe:	f7ff fee9 	bl	8994 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    8bc2:	9b02      	ldr	r3, [sp, #8]
    8bc4:	681b      	ldr	r3, [r3, #0]
    8bc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    8bca:	9b02      	ldr	r3, [sp, #8]
    8bcc:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    8bce:	9802      	ldr	r0, [sp, #8]
    8bd0:	f002 fe28 	bl	b824 <FlexCAN_Init>
    8bd4:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    8bd6:	9b05      	ldr	r3, [sp, #20]
    8bd8:	2b00      	cmp	r3, #0
    8bda:	d006      	beq.n	8bea <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    8bdc:	9802      	ldr	r0, [sp, #8]
    8bde:	f002 fcbb 	bl	b558 <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    8be2:	9802      	ldr	r0, [sp, #8]
    8be4:	f002 fd82 	bl	b6ec <FlexCAN_Disable>
    8be8:	e01d      	b.n	8c26 <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    8bea:	9802      	ldr	r0, [sp, #8]
    8bec:	f002 fed4 	bl	b998 <FlexCAN_IsFDAvailable>
    8bf0:	4603      	mov	r3, r0
    8bf2:	2b00      	cmp	r3, #0
    8bf4:	d007      	beq.n	8c06 <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    8bf6:	9b01      	ldr	r3, [sp, #4]
    8bf8:	7e19      	ldrb	r1, [r3, #24]
    8bfa:	9b01      	ldr	r3, [sp, #4]
    8bfc:	7edb      	ldrb	r3, [r3, #27]
    8bfe:	461a      	mov	r2, r3
    8c00:	9802      	ldr	r0, [sp, #8]
    8c02:	f7ff fcdd 	bl	85c0 <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    8c06:	9b01      	ldr	r3, [sp, #4]
    8c08:	691b      	ldr	r3, [r3, #16]
    8c0a:	4619      	mov	r1, r3
    8c0c:	9802      	ldr	r0, [sp, #8]
    8c0e:	f003 fdeb 	bl	c7e8 <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    8c12:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8c16:	4618      	mov	r0, r3
    8c18:	f003 fe56 	bl	c8c8 <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    8c1c:	9901      	ldr	r1, [sp, #4]
    8c1e:	9802      	ldr	r0, [sp, #8]
    8c20:	f7ff ff7e 	bl	8b20 <FlexCAN_InitCtroll>
    8c24:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    8c26:	9b05      	ldr	r3, [sp, #20]
}
    8c28:	4618      	mov	r0, r3
    8c2a:	b007      	add	sp, #28
    8c2c:	f85d fb04 	ldr.w	pc, [sp], #4

00008c30 <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    8c30:	b500      	push	{lr}
    8c32:	b083      	sub	sp, #12
    8c34:	9001      	str	r0, [sp, #4]
    8c36:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    8c38:	9b00      	ldr	r3, [sp, #0]
    8c3a:	7e1b      	ldrb	r3, [r3, #24]
    8c3c:	4619      	mov	r1, r3
    8c3e:	9801      	ldr	r0, [sp, #4]
    8c40:	f7ff fe51 	bl	88e6 <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    8c44:	9b00      	ldr	r3, [sp, #0]
    8c46:	7e1b      	ldrb	r3, [r3, #24]
    8c48:	2b00      	cmp	r3, #0
    8c4a:	d00c      	beq.n	8c66 <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    8c4c:	9b00      	ldr	r3, [sp, #0]
    8c4e:	331c      	adds	r3, #28
    8c50:	4619      	mov	r1, r3
    8c52:	9801      	ldr	r0, [sp, #4]
    8c54:	f7ff fd94 	bl	8780 <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    8c58:	9b00      	ldr	r3, [sp, #0]
    8c5a:	3330      	adds	r3, #48	; 0x30
    8c5c:	4619      	mov	r1, r3
    8c5e:	9801      	ldr	r0, [sp, #4]
    8c60:	f7ff fd2d 	bl	86be <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    8c64:	e005      	b.n	8c72 <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    8c66:	9b00      	ldr	r3, [sp, #0]
    8c68:	331c      	adds	r3, #28
    8c6a:	4619      	mov	r1, r3
    8c6c:	9801      	ldr	r0, [sp, #4]
    8c6e:	f7ff fd5b 	bl	8728 <FlexCAN_SetTimeSegments>
}
    8c72:	bf00      	nop
    8c74:	b003      	add	sp, #12
    8c76:	f85d fb04 	ldr.w	pc, [sp], #4

00008c7a <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    8c7a:	b500      	push	{lr}
    8c7c:	b08d      	sub	sp, #52	; 0x34
    8c7e:	4603      	mov	r3, r0
    8c80:	9102      	str	r1, [sp, #8]
    8c82:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8c86:	2300      	movs	r3, #0
    8c88:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    8c8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8c8e:	4a46      	ldr	r2, [pc, #280]	; (8da8 <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    8c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c94:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    8c96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8c9a:	4a44      	ldr	r2, [pc, #272]	; (8dac <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    8c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ca0:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    8ca2:	2300      	movs	r3, #0
    8ca4:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    8ca6:	2300      	movs	r3, #0
    8ca8:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8caa:	9b02      	ldr	r3, [sp, #8]
    8cac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8cb0:	fb02 f303 	mul.w	r3, r2, r3
    8cb4:	2100      	movs	r1, #0
    8cb6:	4618      	mov	r0, r3
    8cb8:	f7f8 ffdc 	bl	1c74 <OsIf_MicrosToTicks>
    8cbc:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    8cbe:	2300      	movs	r3, #0
    8cc0:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8cc2:	2000      	movs	r0, #0
    8cc4:	f7f8 ff8a 	bl	1bdc <OsIf_GetCounter>
    8cc8:	4603      	mov	r3, r0
    8cca:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    8ccc:	e02a      	b.n	8d24 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    8cce:	9b08      	ldr	r3, [sp, #32]
    8cd0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    8cd4:	2b01      	cmp	r3, #1
    8cd6:	d115      	bne.n	8d04 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    8cd8:	2307      	movs	r3, #7
    8cda:	9309      	str	r3, [sp, #36]	; 0x24
    8cdc:	e00f      	b.n	8cfe <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    8cde:	9909      	ldr	r1, [sp, #36]	; 0x24
    8ce0:	9807      	ldr	r0, [sp, #28]
    8ce2:	f7ff fcd0 	bl	8686 <FlexCAN_GetBuffStatusFlag>
    8ce6:	4603      	mov	r3, r0
    8ce8:	2b00      	cmp	r3, #0
    8cea:	d005      	beq.n	8cf8 <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    8cec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
    8cf2:	4618      	mov	r0, r3
    8cf4:	f000 fb06 	bl	9304 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    8cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8cfa:	3b01      	subs	r3, #1
    8cfc:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    8cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8d00:	2b04      	cmp	r3, #4
    8d02:	d8ec      	bhi.n	8cde <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8d04:	ab05      	add	r3, sp, #20
    8d06:	2100      	movs	r1, #0
    8d08:	4618      	mov	r0, r3
    8d0a:	f7f8 ff80 	bl	1c0e <OsIf_GetElapsed>
    8d0e:	4602      	mov	r2, r0
    8d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d12:	4413      	add	r3, r2
    8d14:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    8d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8d18:	9b06      	ldr	r3, [sp, #24]
    8d1a:	429a      	cmp	r2, r3
    8d1c:	d302      	bcc.n	8d24 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    8d1e:	2303      	movs	r3, #3
    8d20:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    8d22:	e003      	b.n	8d2c <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    8d24:	9b08      	ldr	r3, [sp, #32]
    8d26:	685b      	ldr	r3, [r3, #4]
    8d28:	2b01      	cmp	r3, #1
    8d2a:	d0d0      	beq.n	8cce <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    8d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d2e:	2b03      	cmp	r3, #3
    8d30:	d125      	bne.n	8d7e <FlexCAN_ProccessLegacyRxFIFO+0x104>
    8d32:	9b08      	ldr	r3, [sp, #32]
    8d34:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    8d38:	2b01      	cmp	r3, #1
    8d3a:	d020      	beq.n	8d7e <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    8d3c:	9b08      	ldr	r3, [sp, #32]
    8d3e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8d42:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8d46:	9300      	str	r3, [sp, #0]
    8d48:	2300      	movs	r3, #0
    8d4a:	2205      	movs	r2, #5
    8d4c:	9807      	ldr	r0, [sp, #28]
    8d4e:	f002 feef 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    8d52:	9b08      	ldr	r3, [sp, #32]
    8d54:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8d58:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8d5c:	9300      	str	r3, [sp, #0]
    8d5e:	2300      	movs	r3, #0
    8d60:	2206      	movs	r2, #6
    8d62:	9807      	ldr	r0, [sp, #28]
    8d64:	f002 fee4 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    8d68:	9b08      	ldr	r3, [sp, #32]
    8d6a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8d6e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8d72:	9300      	str	r3, [sp, #0]
    8d74:	2300      	movs	r3, #0
    8d76:	2207      	movs	r2, #7
    8d78:	9807      	ldr	r0, [sp, #28]
    8d7a:	f002 fed9 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    8d7e:	9b08      	ldr	r3, [sp, #32]
    8d80:	685b      	ldr	r3, [r3, #4]
    8d82:	2b00      	cmp	r3, #0
    8d84:	d005      	beq.n	8d92 <FlexCAN_ProccessLegacyRxFIFO+0x118>
    8d86:	2b01      	cmp	r3, #1
    8d88:	d106      	bne.n	8d98 <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    8d8a:	9b08      	ldr	r3, [sp, #32]
    8d8c:	2200      	movs	r2, #0
    8d8e:	605a      	str	r2, [r3, #4]
                break;
    8d90:	e005      	b.n	8d9e <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    8d92:	2300      	movs	r3, #0
    8d94:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    8d96:	e002      	b.n	8d9e <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    8d98:	2301      	movs	r3, #1
    8d9a:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    8d9c:	bf00      	nop
        }

    return eResult;
    8d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    8da0:	4618      	mov	r0, r3
    8da2:	b00d      	add	sp, #52	; 0x34
    8da4:	f85d fb04 	ldr.w	pc, [sp], #4
    8da8:	1fff8fa0 	.word	0x1fff8fa0
    8dac:	0000f4f4 	.word	0x0000f4f4

00008db0 <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    8db0:	b084      	sub	sp, #16
    8db2:	9200      	str	r2, [sp, #0]
    8db4:	461a      	mov	r2, r3
    8db6:	4603      	mov	r3, r0
    8db8:	f88d 3007 	strb.w	r3, [sp, #7]
    8dbc:	460b      	mov	r3, r1
    8dbe:	f88d 3006 	strb.w	r3, [sp, #6]
    8dc2:	4613      	mov	r3, r2
    8dc4:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8dc8:	2300      	movs	r3, #0
    8dca:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8dcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8dd0:	4a15      	ldr	r2, [pc, #84]	; (8e28 <FlexCAN_StartRxMessageBufferData+0x78>)
    8dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dd6:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    8dd8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8ddc:	9a02      	ldr	r2, [sp, #8]
    8dde:	011b      	lsls	r3, r3, #4
    8de0:	4413      	add	r3, r2
    8de2:	3304      	adds	r3, #4
    8de4:	681b      	ldr	r3, [r3, #0]
    8de6:	2b00      	cmp	r3, #0
    8de8:	d002      	beq.n	8df0 <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    8dea:	2302      	movs	r3, #2
    8dec:	9303      	str	r3, [sp, #12]
    8dee:	e017      	b.n	8e20 <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    8df0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8df4:	9a02      	ldr	r2, [sp, #8]
    8df6:	011b      	lsls	r3, r3, #4
    8df8:	4413      	add	r3, r2
    8dfa:	3304      	adds	r3, #4
    8dfc:	2201      	movs	r2, #1
    8dfe:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    8e00:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e04:	9a02      	ldr	r2, [sp, #8]
    8e06:	011b      	lsls	r3, r3, #4
    8e08:	4413      	add	r3, r2
    8e0a:	9a00      	ldr	r2, [sp, #0]
    8e0c:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    8e0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e12:	9a02      	ldr	r2, [sp, #8]
    8e14:	011b      	lsls	r3, r3, #4
    8e16:	4413      	add	r3, r2
    8e18:	3308      	adds	r3, #8
    8e1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8e1e:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    8e20:	9b03      	ldr	r3, [sp, #12]
}
    8e22:	4618      	mov	r0, r3
    8e24:	b004      	add	sp, #16
    8e26:	4770      	bx	lr
    8e28:	1fff8fa0 	.word	0x1fff8fa0

00008e2c <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    8e2c:	b500      	push	{lr}
    8e2e:	b08f      	sub	sp, #60	; 0x3c
    8e30:	9204      	str	r2, [sp, #16]
    8e32:	9303      	str	r3, [sp, #12]
    8e34:	4603      	mov	r3, r0
    8e36:	f88d 3017 	strb.w	r3, [sp, #23]
    8e3a:	460b      	mov	r3, r1
    8e3c:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8e40:	2300      	movs	r3, #0
    8e42:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    8e44:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8e48:	4a38      	ldr	r2, [pc, #224]	; (8f2c <FlexCAN_StartSendData+0x100>)
    8e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e4e:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    8e50:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8e54:	4a36      	ldr	r2, [pc, #216]	; (8f30 <FlexCAN_StartSendData+0x104>)
    8e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e5a:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    8e5c:	2300      	movs	r3, #0
    8e5e:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    8e60:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8e66:	011b      	lsls	r3, r3, #4
    8e68:	4413      	add	r3, r2
    8e6a:	3304      	adds	r3, #4
    8e6c:	681b      	ldr	r3, [r3, #0]
    8e6e:	2b00      	cmp	r3, #0
    8e70:	d002      	beq.n	8e78 <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    8e72:	2302      	movs	r3, #2
    8e74:	930d      	str	r3, [sp, #52]	; 0x34
    8e76:	e053      	b.n	8f20 <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8e78:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8e7c:	4619      	mov	r1, r3
    8e7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e80:	f7ff fbee 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    8e84:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8e8a:	011b      	lsls	r3, r3, #4
    8e8c:	4413      	add	r3, r2
    8e8e:	3304      	adds	r3, #4
    8e90:	2202      	movs	r2, #2
    8e92:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    8e94:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8e9a:	011b      	lsls	r3, r3, #4
    8e9c:	4413      	add	r3, r2
    8e9e:	330c      	adds	r3, #12
    8ea0:	2200      	movs	r2, #0
    8ea2:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    8ea4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8ea8:	9a04      	ldr	r2, [sp, #16]
    8eaa:	7b11      	ldrb	r1, [r2, #12]
    8eac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8eae:	011b      	lsls	r3, r3, #4
    8eb0:	4413      	add	r3, r2
    8eb2:	3308      	adds	r3, #8
    8eb4:	460a      	mov	r2, r1
    8eb6:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    8eb8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8ebc:	9a04      	ldr	r2, [sp, #16]
    8ebe:	7ad1      	ldrb	r1, [r2, #11]
    8ec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8ec2:	011b      	lsls	r3, r3, #4
    8ec4:	4413      	add	r3, r2
    8ec6:	3309      	adds	r3, #9
    8ec8:	460a      	mov	r2, r1
    8eca:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    8ecc:	9b04      	ldr	r3, [sp, #16]
    8ece:	685b      	ldr	r3, [r3, #4]
    8ed0:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    8ed2:	9b04      	ldr	r3, [sp, #16]
    8ed4:	681b      	ldr	r3, [r3, #0]
    8ed6:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    8ed8:	9b04      	ldr	r3, [sp, #16]
    8eda:	7a1b      	ldrb	r3, [r3, #8]
    8edc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    8ee0:	9b04      	ldr	r3, [sp, #16]
    8ee2:	7a5b      	ldrb	r3, [r3, #9]
    8ee4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    8ee8:	9b04      	ldr	r3, [sp, #16]
    8eea:	7a9b      	ldrb	r3, [r3, #10]
    8eec:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    8ef0:	9b04      	ldr	r3, [sp, #16]
    8ef2:	7adb      	ldrb	r3, [r3, #11]
    8ef4:	2b00      	cmp	r3, #0
    8ef6:	d002      	beq.n	8efe <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    8ef8:	231c      	movs	r3, #28
    8efa:	9306      	str	r3, [sp, #24]
    8efc:	e001      	b.n	8f02 <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    8efe:	230c      	movs	r3, #12
    8f00:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    8f02:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8f06:	4619      	mov	r1, r3
    8f08:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8f0a:	f002 fa89 	bl	b420 <FlexCAN_GetMsgBuffRegion>
    8f0e:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    8f10:	a906      	add	r1, sp, #24
    8f12:	2300      	movs	r3, #0
    8f14:	9300      	str	r3, [sp, #0]
    8f16:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8f18:	9a03      	ldr	r2, [sp, #12]
    8f1a:	980a      	ldr	r0, [sp, #40]	; 0x28
    8f1c:	f002 ffd2 	bl	bec4 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    8f20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    8f22:	4618      	mov	r0, r3
    8f24:	b00f      	add	sp, #60	; 0x3c
    8f26:	f85d fb04 	ldr.w	pc, [sp], #4
    8f2a:	bf00      	nop
    8f2c:	1fff8fa0 	.word	0x1fff8fa0
    8f30:	0000f4f4 	.word	0x0000f4f4

00008f34 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    8f34:	b500      	push	{lr}
    8f36:	b089      	sub	sp, #36	; 0x24
    8f38:	4603      	mov	r3, r0
    8f3a:	9102      	str	r1, [sp, #8]
    8f3c:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    8f40:	2300      	movs	r3, #0
    8f42:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    8f44:	2300      	movs	r3, #0
    8f46:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8f48:	2300      	movs	r3, #0
    8f4a:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    8f4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f50:	4a26      	ldr	r2, [pc, #152]	; (8fec <FlexCAN_StartRxMessageFifoData+0xb8>)
    8f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f56:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    8f58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f5c:	4a24      	ldr	r2, [pc, #144]	; (8ff0 <FlexCAN_StartRxMessageFifoData+0xbc>)
    8f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f62:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    8f64:	9b05      	ldr	r3, [sp, #20]
    8f66:	685b      	ldr	r3, [r3, #4]
    8f68:	2b01      	cmp	r3, #1
    8f6a:	d102      	bne.n	8f72 <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    8f6c:	2302      	movs	r3, #2
    8f6e:	9307      	str	r3, [sp, #28]
    8f70:	e036      	b.n	8fe0 <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    8f72:	9b05      	ldr	r3, [sp, #20]
    8f74:	2201      	movs	r2, #1
    8f76:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    8f78:	9b05      	ldr	r3, [sp, #20]
    8f7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    8f7e:	2b01      	cmp	r3, #1
    8f80:	d102      	bne.n	8f88 <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    8f82:	9b05      	ldr	r3, [sp, #20]
    8f84:	2201      	movs	r2, #1
    8f86:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    8f88:	9b05      	ldr	r3, [sp, #20]
    8f8a:	9a02      	ldr	r2, [sp, #8]
    8f8c:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    8f8e:	9b05      	ldr	r3, [sp, #20]
    8f90:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    8f94:	2b00      	cmp	r3, #0
    8f96:	d123      	bne.n	8fe0 <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    8f98:	9b05      	ldr	r3, [sp, #20]
    8f9a:	2200      	movs	r2, #0
    8f9c:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    8f9e:	9b05      	ldr	r3, [sp, #20]
    8fa0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8fa4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8fa8:	9300      	str	r3, [sp, #0]
    8faa:	2301      	movs	r3, #1
    8fac:	2206      	movs	r2, #6
    8fae:	9806      	ldr	r0, [sp, #24]
    8fb0:	f002 fdbe 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    8fb4:	9b05      	ldr	r3, [sp, #20]
    8fb6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8fba:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8fbe:	9300      	str	r3, [sp, #0]
    8fc0:	2301      	movs	r3, #1
    8fc2:	2207      	movs	r2, #7
    8fc4:	9806      	ldr	r0, [sp, #24]
    8fc6:	f002 fdb3 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    8fca:	9b05      	ldr	r3, [sp, #20]
    8fcc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8fd0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8fd4:	9300      	str	r3, [sp, #0]
    8fd6:	2301      	movs	r3, #1
    8fd8:	2205      	movs	r2, #5
    8fda:	9806      	ldr	r0, [sp, #24]
    8fdc:	f002 fda8 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    8fe0:	9b07      	ldr	r3, [sp, #28]
}
    8fe2:	4618      	mov	r0, r3
    8fe4:	b009      	add	sp, #36	; 0x24
    8fe6:	f85d fb04 	ldr.w	pc, [sp], #4
    8fea:	bf00      	nop
    8fec:	0000f4f4 	.word	0x0000f4f4
    8ff0:	1fff8fa0 	.word	0x1fff8fa0

00008ff4 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    8ff4:	b510      	push	{r4, lr}
    8ff6:	b09e      	sub	sp, #120	; 0x78
    8ff8:	4603      	mov	r3, r0
    8ffa:	9102      	str	r1, [sp, #8]
    8ffc:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9000:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9004:	4a70      	ldr	r2, [pc, #448]	; (91c8 <FlexCAN_IRQHandlerRxMB+0x1d4>)
    9006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    900a:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    900c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9010:	4a6e      	ldr	r2, [pc, #440]	; (91cc <FlexCAN_IRQHandlerRxMB+0x1d8>)
    9012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9016:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    9018:	2300      	movs	r3, #0
    901a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    901e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9020:	9b02      	ldr	r3, [sp, #8]
    9022:	011b      	lsls	r3, r3, #4
    9024:	4413      	add	r3, r2
    9026:	681b      	ldr	r3, [r3, #0]
    9028:	2b00      	cmp	r3, #0
    902a:	d105      	bne.n	9038 <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    902c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    902e:	9b02      	ldr	r3, [sp, #8]
    9030:	011b      	lsls	r3, r3, #4
    9032:	4413      	add	r3, r2
    9034:	aa05      	add	r2, sp, #20
    9036:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    9038:	2300      	movs	r3, #0
    903a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    903e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9040:	9b02      	ldr	r3, [sp, #8]
    9042:	011b      	lsls	r3, r3, #4
    9044:	4413      	add	r3, r2
    9046:	3308      	adds	r3, #8
    9048:	781b      	ldrb	r3, [r3, #0]
    904a:	2b00      	cmp	r3, #0
    904c:	d008      	beq.n	9060 <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    904e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9050:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9054:	2b00      	cmp	r3, #0
    9056:	d003      	beq.n	9060 <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    9058:	2301      	movs	r3, #1
    905a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    905e:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    9060:	9902      	ldr	r1, [sp, #8]
    9062:	981c      	ldr	r0, [sp, #112]	; 0x70
    9064:	f002 fd55 	bl	bb12 <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    9068:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    906a:	9b02      	ldr	r3, [sp, #8]
    906c:	011b      	lsls	r3, r3, #4
    906e:	4413      	add	r3, r2
    9070:	681b      	ldr	r3, [r3, #0]
    9072:	461a      	mov	r2, r3
    9074:	9902      	ldr	r1, [sp, #8]
    9076:	981c      	ldr	r0, [sp, #112]	; 0x70
    9078:	f002 fe7a 	bl	bd70 <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    907c:	9902      	ldr	r1, [sp, #8]
    907e:	981c      	ldr	r0, [sp, #112]	; 0x70
    9080:	f7ff faee 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    9084:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9086:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    908a:	2b00      	cmp	r3, #0
    908c:	d032      	beq.n	90f4 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    908e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9090:	9b02      	ldr	r3, [sp, #8]
    9092:	011b      	lsls	r3, r3, #4
    9094:	4413      	add	r3, r2
    9096:	681b      	ldr	r3, [r3, #0]
    9098:	681b      	ldr	r3, [r3, #0]
    909a:	0e1b      	lsrs	r3, r3, #24
    909c:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    90a0:	2b02      	cmp	r3, #2
    90a2:	d027      	beq.n	90f4 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    90a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    90a6:	9b02      	ldr	r3, [sp, #8]
    90a8:	011b      	lsls	r3, r3, #4
    90aa:	4413      	add	r3, r2
    90ac:	681b      	ldr	r3, [r3, #0]
    90ae:	681b      	ldr	r3, [r3, #0]
    90b0:	0e1b      	lsrs	r3, r3, #24
    90b2:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    90b6:	2b04      	cmp	r3, #4
    90b8:	d01c      	beq.n	90f4 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    90ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    90bc:	9b02      	ldr	r3, [sp, #8]
    90be:	011b      	lsls	r3, r3, #4
    90c0:	4413      	add	r3, r2
    90c2:	681b      	ldr	r3, [r3, #0]
    90c4:	681b      	ldr	r3, [r3, #0]
    90c6:	0e1b      	lsrs	r3, r3, #24
    90c8:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    90cc:	2b06      	cmp	r3, #6
    90ce:	d011      	beq.n	90f4 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    90d0:	9902      	ldr	r1, [sp, #8]
    90d2:	981c      	ldr	r0, [sp, #112]	; 0x70
    90d4:	f002 f9a4 	bl	b420 <FlexCAN_GetMsgBuffRegion>
    90d8:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    90da:	9b19      	ldr	r3, [sp, #100]	; 0x64
    90dc:	681b      	ldr	r3, [r3, #0]
    90de:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    90e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    90e4:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    90e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    90e8:	681b      	ldr	r3, [r3, #0]
    90ea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    90ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
    90f0:	601a      	str	r2, [r3, #0]
    {
    90f2:	e002      	b.n	90fa <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    90f4:	981c      	ldr	r0, [sp, #112]	; 0x70
    90f6:	f7ff faac 	bl	8652 <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    90fa:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    90fe:	2b00      	cmp	r3, #0
    9100:	d000      	beq.n	9104 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    9102:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9104:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9106:	9b02      	ldr	r3, [sp, #8]
    9108:	011b      	lsls	r3, r3, #4
    910a:	4413      	add	r3, r2
    910c:	3304      	adds	r3, #4
    910e:	2200      	movs	r2, #0
    9110:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    9112:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9114:	9b02      	ldr	r3, [sp, #8]
    9116:	011b      	lsls	r3, r3, #4
    9118:	4413      	add	r3, r2
    911a:	3308      	adds	r3, #8
    911c:	781b      	ldrb	r3, [r3, #0]
    911e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    9122:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9124:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9128:	2b00      	cmp	r3, #0
    912a:	d008      	beq.n	913e <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    912c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    912e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9132:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9136:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9138:	9a02      	ldr	r2, [sp, #8]
    913a:	2100      	movs	r1, #0
    913c:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    913e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9140:	9b02      	ldr	r3, [sp, #8]
    9142:	011b      	lsls	r3, r3, #4
    9144:	4413      	add	r3, r2
    9146:	3304      	adds	r3, #4
    9148:	681b      	ldr	r3, [r3, #0]
    914a:	2b00      	cmp	r3, #0
    914c:	d11e      	bne.n	918c <FlexCAN_IRQHandlerRxMB+0x198>
    914e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9150:	9b02      	ldr	r3, [sp, #8]
    9152:	011b      	lsls	r3, r3, #4
    9154:	4413      	add	r3, r2
    9156:	3308      	adds	r3, #8
    9158:	781b      	ldrb	r3, [r3, #0]
    915a:	f083 0301 	eor.w	r3, r3, #1
    915e:	b2db      	uxtb	r3, r3
    9160:	2b00      	cmp	r3, #0
    9162:	d013      	beq.n	918c <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    9164:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9166:	9b02      	ldr	r3, [sp, #8]
    9168:	011b      	lsls	r3, r3, #4
    916a:	4413      	add	r3, r2
    916c:	3308      	adds	r3, #8
    916e:	2201      	movs	r2, #1
    9170:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    9172:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9174:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9178:	f89d 100f 	ldrb.w	r1, [sp, #15]
    917c:	9300      	str	r3, [sp, #0]
    917e:	2300      	movs	r3, #0
    9180:	9a02      	ldr	r2, [sp, #8]
    9182:	981c      	ldr	r0, [sp, #112]	; 0x70
    9184:	f002 fcd4 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
    9188:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    918a:	e019      	b.n	91c0 <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    918c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    9190:	f083 0301 	eor.w	r3, r3, #1
    9194:	b2db      	uxtb	r3, r3
    9196:	2b00      	cmp	r3, #0
    9198:	d012      	beq.n	91c0 <FlexCAN_IRQHandlerRxMB+0x1cc>
    919a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    919c:	9b02      	ldr	r3, [sp, #8]
    919e:	011b      	lsls	r3, r3, #4
    91a0:	4413      	add	r3, r2
    91a2:	3308      	adds	r3, #8
    91a4:	781b      	ldrb	r3, [r3, #0]
    91a6:	2b00      	cmp	r3, #0
    91a8:	d00a      	beq.n	91c0 <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    91aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    91ac:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    91b0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    91b4:	9300      	str	r3, [sp, #0]
    91b6:	2300      	movs	r3, #0
    91b8:	9a02      	ldr	r2, [sp, #8]
    91ba:	981c      	ldr	r0, [sp, #112]	; 0x70
    91bc:	f002 fcb8 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
}
    91c0:	bf00      	nop
    91c2:	b01e      	add	sp, #120	; 0x78
    91c4:	bd10      	pop	{r4, pc}
    91c6:	bf00      	nop
    91c8:	0000f4f4 	.word	0x0000f4f4
    91cc:	1fff8fa0 	.word	0x1fff8fa0

000091d0 <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    91d0:	b510      	push	{r4, lr}
    91d2:	b09a      	sub	sp, #104	; 0x68
    91d4:	4603      	mov	r3, r0
    91d6:	9102      	str	r1, [sp, #8]
    91d8:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    91dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    91e0:	4a46      	ldr	r2, [pc, #280]	; (92fc <FlexCAN_IRQHandlerTxMB+0x12c>)
    91e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91e6:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    91e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    91ec:	4a44      	ldr	r2, [pc, #272]	; (9300 <FlexCAN_IRQHandlerTxMB+0x130>)
    91ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91f2:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    91f4:	2300      	movs	r3, #0
    91f6:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    91f8:	2300      	movs	r3, #0
    91fa:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    91fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    91fe:	9b02      	ldr	r3, [sp, #8]
    9200:	011b      	lsls	r3, r3, #4
    9202:	4413      	add	r3, r2
    9204:	3309      	adds	r3, #9
    9206:	781b      	ldrb	r3, [r3, #0]
    9208:	2b00      	cmp	r3, #0
    920a:	d01e      	beq.n	924a <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    920c:	9902      	ldr	r1, [sp, #8]
    920e:	9819      	ldr	r0, [sp, #100]	; 0x64
    9210:	f002 fc7f 	bl	bb12 <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    9214:	ab04      	add	r3, sp, #16
    9216:	461a      	mov	r2, r3
    9218:	9902      	ldr	r1, [sp, #8]
    921a:	9819      	ldr	r0, [sp, #100]	; 0x64
    921c:	f002 fda8 	bl	bd70 <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    9220:	9819      	ldr	r0, [sp, #100]	; 0x64
    9222:	f7ff fa16 	bl	8652 <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    9226:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9228:	9918      	ldr	r1, [sp, #96]	; 0x60
    922a:	9b02      	ldr	r3, [sp, #8]
    922c:	011b      	lsls	r3, r3, #4
    922e:	440b      	add	r3, r1
    9230:	330c      	adds	r3, #12
    9232:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    9234:	9b04      	ldr	r3, [sp, #16]
    9236:	0e1b      	lsrs	r3, r3, #24
    9238:	f003 030f 	and.w	r3, r3, #15
    923c:	2b04      	cmp	r3, #4
    923e:	d116      	bne.n	926e <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    9240:	9902      	ldr	r1, [sp, #8]
    9242:	9819      	ldr	r0, [sp, #100]	; 0x64
    9244:	f7ff fa0c 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
    9248:	e011      	b.n	926e <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    924a:	9902      	ldr	r1, [sp, #8]
    924c:	9819      	ldr	r0, [sp, #100]	; 0x64
    924e:	f002 fd7b 	bl	bd48 <FlexCAN_GetMsgBuffTimestamp>
    9252:	4601      	mov	r1, r0
    9254:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9256:	9b02      	ldr	r3, [sp, #8]
    9258:	011b      	lsls	r3, r3, #4
    925a:	4413      	add	r3, r2
    925c:	330c      	adds	r3, #12
    925e:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    9260:	9819      	ldr	r0, [sp, #100]	; 0x64
    9262:	f7ff f9f6 	bl	8652 <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    9266:	9902      	ldr	r1, [sp, #8]
    9268:	9819      	ldr	r0, [sp, #100]	; 0x64
    926a:	f7ff f9f9 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    926e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9270:	9b02      	ldr	r3, [sp, #8]
    9272:	011b      	lsls	r3, r3, #4
    9274:	4413      	add	r3, r2
    9276:	3304      	adds	r3, #4
    9278:	2200      	movs	r2, #0
    927a:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    927c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    927e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9282:	2b00      	cmp	r3, #0
    9284:	d008      	beq.n	9298 <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    9286:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9288:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    928c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9290:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9292:	9a02      	ldr	r2, [sp, #8]
    9294:	2104      	movs	r1, #4
    9296:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    9298:	9a18      	ldr	r2, [sp, #96]	; 0x60
    929a:	9b02      	ldr	r3, [sp, #8]
    929c:	011b      	lsls	r3, r3, #4
    929e:	4413      	add	r3, r2
    92a0:	3304      	adds	r3, #4
    92a2:	681b      	ldr	r3, [r3, #0]
    92a4:	2b00      	cmp	r3, #0
    92a6:	d112      	bne.n	92ce <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    92a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    92aa:	9b02      	ldr	r3, [sp, #8]
    92ac:	011b      	lsls	r3, r3, #4
    92ae:	4413      	add	r3, r2
    92b0:	3308      	adds	r3, #8
    92b2:	2201      	movs	r2, #1
    92b4:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    92b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    92b8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    92bc:	f89d 100f 	ldrb.w	r1, [sp, #15]
    92c0:	9300      	str	r3, [sp, #0]
    92c2:	2300      	movs	r3, #0
    92c4:	9a02      	ldr	r2, [sp, #8]
    92c6:	9819      	ldr	r0, [sp, #100]	; 0x64
    92c8:	f002 fc32 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    92cc:	e012      	b.n	92f4 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    92ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
    92d0:	9b02      	ldr	r3, [sp, #8]
    92d2:	011b      	lsls	r3, r3, #4
    92d4:	4413      	add	r3, r2
    92d6:	3308      	adds	r3, #8
    92d8:	781b      	ldrb	r3, [r3, #0]
    92da:	2b00      	cmp	r3, #0
    92dc:	d00a      	beq.n	92f4 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    92de:	9b18      	ldr	r3, [sp, #96]	; 0x60
    92e0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    92e4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    92e8:	9300      	str	r3, [sp, #0]
    92ea:	2300      	movs	r3, #0
    92ec:	9a02      	ldr	r2, [sp, #8]
    92ee:	9819      	ldr	r0, [sp, #100]	; 0x64
    92f0:	f002 fc1e 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
}
    92f4:	bf00      	nop
    92f6:	b01a      	add	sp, #104	; 0x68
    92f8:	bd10      	pop	{r4, pc}
    92fa:	bf00      	nop
    92fc:	0000f4f4 	.word	0x0000f4f4
    9300:	1fff8fa0 	.word	0x1fff8fa0

00009304 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    9304:	b510      	push	{r4, lr}
    9306:	b098      	sub	sp, #96	; 0x60
    9308:	4603      	mov	r3, r0
    930a:	9100      	str	r1, [sp, #0]
    930c:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9310:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9314:	4a3c      	ldr	r2, [pc, #240]	; (9408 <FlexCAN_IRQHandlerRxFIFO+0x104>)
    9316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    931a:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    931c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9320:	4a3a      	ldr	r2, [pc, #232]	; (940c <FlexCAN_IRQHandlerRxFIFO+0x108>)
    9322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9326:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    9328:	9b16      	ldr	r3, [sp, #88]	; 0x58
    932a:	681b      	ldr	r3, [r3, #0]
    932c:	2b00      	cmp	r3, #0
    932e:	d102      	bne.n	9336 <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    9330:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9332:	aa02      	add	r2, sp, #8
    9334:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    9336:	9b00      	ldr	r3, [sp, #0]
    9338:	2b07      	cmp	r3, #7
    933a:	d048      	beq.n	93ce <FlexCAN_IRQHandlerRxFIFO+0xca>
    933c:	9b00      	ldr	r3, [sp, #0]
    933e:	2b07      	cmp	r3, #7
    9340:	d858      	bhi.n	93f4 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    9342:	9b00      	ldr	r3, [sp, #0]
    9344:	2b05      	cmp	r3, #5
    9346:	d003      	beq.n	9350 <FlexCAN_IRQHandlerRxFIFO+0x4c>
    9348:	9b00      	ldr	r3, [sp, #0]
    934a:	2b06      	cmp	r3, #6
    934c:	d02c      	beq.n	93a8 <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    934e:	e051      	b.n	93f4 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9350:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9352:	685b      	ldr	r3, [r3, #4]
    9354:	2b01      	cmp	r3, #1
    9356:	d14f      	bne.n	93f8 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    9358:	9b16      	ldr	r3, [sp, #88]	; 0x58
    935a:	681b      	ldr	r3, [r3, #0]
    935c:	4619      	mov	r1, r3
    935e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9360:	f003 f98d 	bl	c67e <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9364:	9900      	ldr	r1, [sp, #0]
    9366:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9368:	f7ff f97a 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    936c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    936e:	2200      	movs	r2, #0
    9370:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    9372:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9374:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9378:	2b00      	cmp	r3, #0
    937a:	d008      	beq.n	938e <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    937c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    937e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9382:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9386:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9388:	2200      	movs	r2, #0
    938a:	2101      	movs	r1, #1
    938c:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    938e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9390:	685b      	ldr	r3, [r3, #4]
    9392:	2b00      	cmp	r3, #0
    9394:	d130      	bne.n	93f8 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    9396:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9398:	2201      	movs	r2, #1
    939a:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    939c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    93a0:	4618      	mov	r0, r3
    93a2:	f000 fc61 	bl	9c68 <FlexCAN_CompleteRxMessageFifoData>
            break;
    93a6:	e027      	b.n	93f8 <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    93a8:	9900      	ldr	r1, [sp, #0]
    93aa:	9817      	ldr	r0, [sp, #92]	; 0x5c
    93ac:	f7ff f958 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    93b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    93b6:	2b00      	cmp	r3, #0
    93b8:	d020      	beq.n	93fc <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    93ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93bc:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    93c0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    93c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93c6:	2200      	movs	r2, #0
    93c8:	2102      	movs	r1, #2
    93ca:	47a0      	blx	r4
            break;
    93cc:	e016      	b.n	93fc <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    93ce:	9900      	ldr	r1, [sp, #0]
    93d0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    93d2:	f7ff f945 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    93d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    93dc:	2b00      	cmp	r3, #0
    93de:	d00f      	beq.n	9400 <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    93e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93e2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    93e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    93ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93ec:	2200      	movs	r2, #0
    93ee:	2103      	movs	r1, #3
    93f0:	47a0      	blx	r4
            break;
    93f2:	e005      	b.n	9400 <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    93f4:	bf00      	nop
    93f6:	e004      	b.n	9402 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    93f8:	bf00      	nop
    93fa:	e002      	b.n	9402 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    93fc:	bf00      	nop
    93fe:	e000      	b.n	9402 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    9400:	bf00      	nop
    }
}
    9402:	bf00      	nop
    9404:	b018      	add	sp, #96	; 0x60
    9406:	bd10      	pop	{r4, pc}
    9408:	0000f4f4 	.word	0x0000f4f4
    940c:	1fff8fa0 	.word	0x1fff8fa0

00009410 <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    9410:	b500      	push	{lr}
    9412:	b08b      	sub	sp, #44	; 0x2c
    9414:	4603      	mov	r3, r0
    9416:	460a      	mov	r2, r1
    9418:	f88d 3007 	strb.w	r3, [sp, #7]
    941c:	4613      	mov	r3, r2
    941e:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9422:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9426:	4a3c      	ldr	r2, [pc, #240]	; (9518 <FlexCAN_AbortTxTransfer+0x108>)
    9428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    942c:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    942e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9432:	4a3a      	ldr	r2, [pc, #232]	; (951c <FlexCAN_AbortTxTransfer+0x10c>)
    9434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9438:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    943a:	2300      	movs	r3, #0
    943c:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    943e:	2300      	movs	r3, #0
    9440:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    9442:	2300      	movs	r3, #0
    9444:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    9446:	2300      	movs	r3, #0
    9448:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    944a:	2300      	movs	r3, #0
    944c:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    944e:	2300      	movs	r3, #0
    9450:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9452:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9456:	4619      	mov	r1, r3
    9458:	9807      	ldr	r0, [sp, #28]
    945a:	f001 ffe1 	bl	b420 <FlexCAN_GetMsgBuffRegion>
    945e:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    9460:	9b03      	ldr	r3, [sp, #12]
    9462:	681b      	ldr	r3, [r3, #0]
    9464:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9466:	9b05      	ldr	r3, [sp, #20]
    9468:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    946c:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    946e:	9b05      	ldr	r3, [sp, #20]
    9470:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    9474:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    9476:	9b03      	ldr	r3, [sp, #12]
    9478:	9a05      	ldr	r2, [sp, #20]
    947a:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    947c:	2100      	movs	r1, #0
    947e:	4828      	ldr	r0, [pc, #160]	; (9520 <FlexCAN_AbortTxTransfer+0x110>)
    9480:	f7f8 fbf8 	bl	1c74 <OsIf_MicrosToTicks>
    9484:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9486:	2000      	movs	r0, #0
    9488:	f7f8 fba8 	bl	1bdc <OsIf_GetCounter>
    948c:	4603      	mov	r3, r0
    948e:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    9490:	e00f      	b.n	94b2 <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9492:	ab02      	add	r3, sp, #8
    9494:	2100      	movs	r1, #0
    9496:	4618      	mov	r0, r3
    9498:	f7f8 fbb9 	bl	1c0e <OsIf_GetElapsed>
    949c:	4602      	mov	r2, r0
    949e:	9b08      	ldr	r3, [sp, #32]
    94a0:	4413      	add	r3, r2
    94a2:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    94a4:	9a08      	ldr	r2, [sp, #32]
    94a6:	9b04      	ldr	r3, [sp, #16]
    94a8:	429a      	cmp	r2, r3
    94aa:	d302      	bcc.n	94b2 <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    94ac:	2303      	movs	r3, #3
    94ae:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    94b0:	e008      	b.n	94c4 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    94b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    94b6:	4619      	mov	r1, r3
    94b8:	9807      	ldr	r0, [sp, #28]
    94ba:	f7ff f8e4 	bl	8686 <FlexCAN_GetBuffStatusFlag>
    94be:	4603      	mov	r3, r0
    94c0:	2b00      	cmp	r3, #0
    94c2:	d0e6      	beq.n	9492 <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    94c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    94c6:	2b03      	cmp	r3, #3
    94c8:	d012      	beq.n	94f0 <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    94ca:	9b03      	ldr	r3, [sp, #12]
    94cc:	681b      	ldr	r3, [r3, #0]
    94ce:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    94d0:	9b05      	ldr	r3, [sp, #20]
    94d2:	0e1b      	lsrs	r3, r3, #24
    94d4:	f003 030f 	and.w	r3, r3, #15
    94d8:	2b08      	cmp	r3, #8
    94da:	d101      	bne.n	94e0 <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    94dc:	2305      	movs	r3, #5
    94de:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    94e0:	9b05      	ldr	r3, [sp, #20]
    94e2:	0e1b      	lsrs	r3, r3, #24
    94e4:	f003 030f 	and.w	r3, r3, #15
    94e8:	2b09      	cmp	r3, #9
    94ea:	d101      	bne.n	94f0 <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    94ec:	2300      	movs	r3, #0
    94ee:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    94f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    94f4:	4619      	mov	r1, r3
    94f6:	9807      	ldr	r0, [sp, #28]
    94f8:	f7ff f8b2 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    94fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9500:	9a06      	ldr	r2, [sp, #24]
    9502:	011b      	lsls	r3, r3, #4
    9504:	4413      	add	r3, r2
    9506:	3304      	adds	r3, #4
    9508:	2200      	movs	r2, #0
    950a:	601a      	str	r2, [r3, #0]

    return result;
    950c:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    950e:	4618      	mov	r0, r3
    9510:	b00b      	add	sp, #44	; 0x2c
    9512:	f85d fb04 	ldr.w	pc, [sp], #4
    9516:	bf00      	nop
    9518:	0000f4f4 	.word	0x0000f4f4
    951c:	1fff8fa0 	.word	0x1fff8fa0
    9520:	000f4240 	.word	0x000f4240

00009524 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    9524:	b500      	push	{lr}
    9526:	b089      	sub	sp, #36	; 0x24
    9528:	4603      	mov	r3, r0
    952a:	460a      	mov	r2, r1
    952c:	f88d 3007 	strb.w	r3, [sp, #7]
    9530:	4613      	mov	r3, r2
    9532:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9536:	f89d 3007 	ldrb.w	r3, [sp, #7]
    953a:	4a41      	ldr	r2, [pc, #260]	; (9640 <FlexCAN_AbortRxTransfer+0x11c>)
    953c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9540:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9542:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9546:	4a3f      	ldr	r2, [pc, #252]	; (9644 <FlexCAN_AbortRxTransfer+0x120>)
    9548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    954c:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    954e:	2300      	movs	r3, #0
    9550:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    9554:	2300      	movs	r3, #0
    9556:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    9558:	2300      	movs	r3, #0
    955a:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    955c:	2300      	movs	r3, #0
    955e:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9560:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9564:	9a06      	ldr	r2, [sp, #24]
    9566:	011b      	lsls	r3, r3, #4
    9568:	4413      	add	r3, r2
    956a:	3304      	adds	r3, #4
    956c:	2200      	movs	r2, #0
    956e:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    9570:	9b06      	ldr	r3, [sp, #24]
    9572:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9576:	2b00      	cmp	r3, #0
    9578:	d03c      	beq.n	95f4 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    957a:	9b07      	ldr	r3, [sp, #28]
    957c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    957e:	0e1b      	lsrs	r3, r3, #24
    9580:	b2db      	uxtb	r3, r3
    9582:	f003 030f 	and.w	r3, r3, #15
    9586:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    958a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    958e:	4618      	mov	r0, r3
    9590:	f7ff f9f3 	bl	897a <RxFifoOcuppiedLastMsgBuff>
    9594:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    9596:	f89d 3006 	ldrb.w	r3, [sp, #6]
    959a:	9a04      	ldr	r2, [sp, #16]
    959c:	429a      	cmp	r2, r3
    959e:	d21b      	bcs.n	95d8 <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    95a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    95a4:	4619      	mov	r1, r3
    95a6:	9807      	ldr	r0, [sp, #28]
    95a8:	f001 ff3a 	bl	b420 <FlexCAN_GetMsgBuffRegion>
    95ac:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    95ae:	9b02      	ldr	r3, [sp, #8]
    95b0:	681b      	ldr	r3, [r3, #0]
    95b2:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    95b4:	9b03      	ldr	r3, [sp, #12]
    95b6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    95ba:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    95bc:	9b02      	ldr	r3, [sp, #8]
    95be:	9a03      	ldr	r2, [sp, #12]
    95c0:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    95c2:	9b03      	ldr	r3, [sp, #12]
    95c4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    95c8:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    95ca:	9b03      	ldr	r3, [sp, #12]
    95cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    95d0:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    95d2:	9b02      	ldr	r3, [sp, #8]
    95d4:	9a03      	ldr	r2, [sp, #12]
    95d6:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    95d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    95dc:	2b00      	cmp	r3, #0
    95de:	d125      	bne.n	962c <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    95e0:	9b06      	ldr	r3, [sp, #24]
    95e2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    95e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    95ea:	2205      	movs	r2, #5
    95ec:	9807      	ldr	r0, [sp, #28]
    95ee:	f002 faf5 	bl	bbdc <FLEXCAN_ClearMsgBuffIntCmd>
    95f2:	e01b      	b.n	962c <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    95f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    95f8:	4619      	mov	r1, r3
    95fa:	9807      	ldr	r0, [sp, #28]
    95fc:	f001 ff10 	bl	b420 <FlexCAN_GetMsgBuffRegion>
    9600:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    9602:	9b02      	ldr	r3, [sp, #8]
    9604:	681b      	ldr	r3, [r3, #0]
    9606:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9608:	9b03      	ldr	r3, [sp, #12]
    960a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    960e:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    9610:	9b02      	ldr	r3, [sp, #8]
    9612:	9a03      	ldr	r2, [sp, #12]
    9614:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9616:	9b03      	ldr	r3, [sp, #12]
    9618:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    961c:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    961e:	9b03      	ldr	r3, [sp, #12]
    9620:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    9624:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    9626:	9b02      	ldr	r3, [sp, #8]
    9628:	9a03      	ldr	r2, [sp, #12]
    962a:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    962c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9630:	4619      	mov	r1, r3
    9632:	9807      	ldr	r0, [sp, #28]
    9634:	f7ff f814 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    9638:	bf00      	nop
    963a:	b009      	add	sp, #36	; 0x24
    963c:	f85d fb04 	ldr.w	pc, [sp], #4
    9640:	0000f4f4 	.word	0x0000f4f4
    9644:	1fff8fa0 	.word	0x1fff8fa0

00009648 <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    9648:	b500      	push	{lr}
    964a:	b089      	sub	sp, #36	; 0x24
    964c:	4603      	mov	r3, r0
    964e:	9102      	str	r1, [sp, #8]
    9650:	9201      	str	r2, [sp, #4]
    9652:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    9656:	2300      	movs	r3, #0
    9658:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    965a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    965e:	4a36      	ldr	r2, [pc, #216]	; (9738 <FlexCAN_Ip_Init_Privileged+0xf0>)
    9660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9664:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    9666:	f89d 300f 	ldrb.w	r3, [sp, #15]
    966a:	9a01      	ldr	r2, [sp, #4]
    966c:	9905      	ldr	r1, [sp, #20]
    966e:	4618      	mov	r0, r3
    9670:	f7ff fa84 	bl	8b7c <FlexCAN_InitController>
    9674:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    9676:	9b06      	ldr	r3, [sp, #24]
    9678:	2b00      	cmp	r3, #0
    967a:	d158      	bne.n	972e <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    967c:	9901      	ldr	r1, [sp, #4]
    967e:	9805      	ldr	r0, [sp, #20]
    9680:	f7ff fad6 	bl	8c30 <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    9684:	9b01      	ldr	r3, [sp, #4]
    9686:	68db      	ldr	r3, [r3, #12]
    9688:	4619      	mov	r1, r3
    968a:	9805      	ldr	r0, [sp, #20]
    968c:	f002 fdb8 	bl	c200 <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    9690:	2300      	movs	r3, #0
    9692:	9307      	str	r3, [sp, #28]
    9694:	e01d      	b.n	96d2 <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    9696:	9a02      	ldr	r2, [sp, #8]
    9698:	9b07      	ldr	r3, [sp, #28]
    969a:	011b      	lsls	r3, r3, #4
    969c:	4413      	add	r3, r2
    969e:	3308      	adds	r3, #8
    96a0:	2201      	movs	r2, #1
    96a2:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    96a4:	9a02      	ldr	r2, [sp, #8]
    96a6:	9b07      	ldr	r3, [sp, #28]
    96a8:	011b      	lsls	r3, r3, #4
    96aa:	4413      	add	r3, r2
    96ac:	2200      	movs	r2, #0
    96ae:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    96b0:	9a02      	ldr	r2, [sp, #8]
    96b2:	9b07      	ldr	r3, [sp, #28]
    96b4:	011b      	lsls	r3, r3, #4
    96b6:	4413      	add	r3, r2
    96b8:	3304      	adds	r3, #4
    96ba:	2200      	movs	r2, #0
    96bc:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    96be:	9a02      	ldr	r2, [sp, #8]
    96c0:	9b07      	ldr	r3, [sp, #28]
    96c2:	011b      	lsls	r3, r3, #4
    96c4:	4413      	add	r3, r2
    96c6:	330c      	adds	r3, #12
    96c8:	2200      	movs	r2, #0
    96ca:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    96cc:	9b07      	ldr	r3, [sp, #28]
    96ce:	3301      	adds	r3, #1
    96d0:	9307      	str	r3, [sp, #28]
    96d2:	9b07      	ldr	r3, [sp, #28]
    96d4:	2b1f      	cmp	r3, #31
    96d6:	d9de      	bls.n	9696 <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    96d8:	9b01      	ldr	r3, [sp, #4]
    96da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    96dc:	9b02      	ldr	r3, [sp, #8]
    96de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    96e2:	9b01      	ldr	r3, [sp, #4]
    96e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    96e6:	9b02      	ldr	r3, [sp, #8]
    96e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    96ec:	9b02      	ldr	r3, [sp, #8]
    96ee:	2200      	movs	r2, #0
    96f0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    96f4:	9b01      	ldr	r3, [sp, #4]
    96f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    96f8:	9b02      	ldr	r3, [sp, #8]
    96fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    96fe:	9b02      	ldr	r3, [sp, #8]
    9700:	2200      	movs	r2, #0
    9702:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    9706:	9b01      	ldr	r3, [sp, #4]
    9708:	7a1a      	ldrb	r2, [r3, #8]
    970a:	9b02      	ldr	r3, [sp, #8]
    970c:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    9710:	9b01      	ldr	r3, [sp, #4]
    9712:	681a      	ldr	r2, [r3, #0]
    9714:	9b02      	ldr	r3, [sp, #8]
    9716:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    971a:	9b02      	ldr	r3, [sp, #8]
    971c:	2201      	movs	r2, #1
    971e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    9722:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9726:	4905      	ldr	r1, [pc, #20]	; (973c <FlexCAN_Ip_Init_Privileged+0xf4>)
    9728:	9a02      	ldr	r2, [sp, #8]
    972a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    972e:	9b06      	ldr	r3, [sp, #24]
}
    9730:	4618      	mov	r0, r3
    9732:	b009      	add	sp, #36	; 0x24
    9734:	f85d fb04 	ldr.w	pc, [sp], #4
    9738:	0000f4f4 	.word	0x0000f4f4
    973c:	1fff8fa0 	.word	0x1fff8fa0

00009740 <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    9740:	b500      	push	{lr}
    9742:	b08b      	sub	sp, #44	; 0x2c
    9744:	9204      	str	r2, [sp, #16]
    9746:	9303      	str	r3, [sp, #12]
    9748:	4603      	mov	r3, r0
    974a:	f88d 3017 	strb.w	r3, [sp, #23]
    974e:	460b      	mov	r3, r1
    9750:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    9754:	2301      	movs	r3, #1
    9756:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9758:	f89d 3017 	ldrb.w	r3, [sp, #23]
    975c:	4a1c      	ldr	r2, [pc, #112]	; (97d0 <FlexCAN_Ip_Send+0x90>)
    975e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9762:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9764:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9768:	4a1a      	ldr	r2, [pc, #104]	; (97d4 <FlexCAN_Ip_Send+0x94>)
    976a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    976e:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    9770:	9808      	ldr	r0, [sp, #32]
    9772:	f7ff f8f4 	bl	895e <FlexCAN_IsListenOnlyModeEnabled>
    9776:	4603      	mov	r3, r0
    9778:	f083 0301 	eor.w	r3, r3, #1
    977c:	b2db      	uxtb	r3, r3
    977e:	2b00      	cmp	r3, #0
    9780:	d021      	beq.n	97c6 <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    9782:	f89d 1016 	ldrb.w	r1, [sp, #22]
    9786:	f89d 0017 	ldrb.w	r0, [sp, #23]
    978a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    978c:	9300      	str	r3, [sp, #0]
    978e:	9b03      	ldr	r3, [sp, #12]
    9790:	9a04      	ldr	r2, [sp, #16]
    9792:	f7ff fb4b 	bl	8e2c <FlexCAN_StartSendData>
    9796:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    9798:	9b09      	ldr	r3, [sp, #36]	; 0x24
    979a:	2b00      	cmp	r3, #0
    979c:	d113      	bne.n	97c6 <FlexCAN_Ip_Send+0x86>
    979e:	9b04      	ldr	r3, [sp, #16]
    97a0:	7b1b      	ldrb	r3, [r3, #12]
    97a2:	f083 0301 	eor.w	r3, r3, #1
    97a6:	b2db      	uxtb	r3, r3
    97a8:	2b00      	cmp	r3, #0
    97aa:	d00c      	beq.n	97c6 <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    97ac:	f89d 2016 	ldrb.w	r2, [sp, #22]
    97b0:	9b07      	ldr	r3, [sp, #28]
    97b2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    97b6:	f89d 1017 	ldrb.w	r1, [sp, #23]
    97ba:	9300      	str	r3, [sp, #0]
    97bc:	2301      	movs	r3, #1
    97be:	9808      	ldr	r0, [sp, #32]
    97c0:	f002 f9b6 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
    97c4:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    97c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    97c8:	4618      	mov	r0, r3
    97ca:	b00b      	add	sp, #44	; 0x2c
    97cc:	f85d fb04 	ldr.w	pc, [sp], #4
    97d0:	0000f4f4 	.word	0x0000f4f4
    97d4:	1fff8fa0 	.word	0x1fff8fa0

000097d8 <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    97d8:	b500      	push	{lr}
    97da:	b08b      	sub	sp, #44	; 0x2c
    97dc:	9202      	str	r2, [sp, #8]
    97de:	9301      	str	r3, [sp, #4]
    97e0:	4603      	mov	r3, r0
    97e2:	f88d 300f 	strb.w	r3, [sp, #15]
    97e6:	460b      	mov	r3, r1
    97e8:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    97ec:	2300      	movs	r3, #0
    97ee:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    97f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    97f4:	4a19      	ldr	r2, [pc, #100]	; (985c <FlexCAN_Ip_ConfigRxMb+0x84>)
    97f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97fa:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    97fc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9800:	4619      	mov	r1, r3
    9802:	9808      	ldr	r0, [sp, #32]
    9804:	f7fe ff2c 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    9808:	9b02      	ldr	r3, [sp, #8]
    980a:	685b      	ldr	r3, [r3, #4]
    980c:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    980e:	9b02      	ldr	r3, [sp, #8]
    9810:	681b      	ldr	r3, [r3, #0]
    9812:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    9814:	9b02      	ldr	r3, [sp, #8]
    9816:	7a1b      	ldrb	r3, [r3, #8]
    9818:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    981c:	230f      	movs	r3, #15
    981e:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    9820:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9824:	aa04      	add	r2, sp, #16
    9826:	9b01      	ldr	r3, [sp, #4]
    9828:	9808      	ldr	r0, [sp, #32]
    982a:	f002 fa25 	bl	bc78 <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    982e:	2300      	movs	r3, #0
    9830:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    9832:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9836:	aa04      	add	r2, sp, #16
    9838:	9b01      	ldr	r3, [sp, #4]
    983a:	9808      	ldr	r0, [sp, #32]
    983c:	f002 fa1c 	bl	bc78 <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    9840:	2304      	movs	r3, #4
    9842:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    9844:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9848:	aa04      	add	r2, sp, #16
    984a:	9b01      	ldr	r3, [sp, #4]
    984c:	9808      	ldr	r0, [sp, #32]
    984e:	f002 fa13 	bl	bc78 <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    9852:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9854:	4618      	mov	r0, r3
    9856:	b00b      	add	sp, #44	; 0x2c
    9858:	f85d fb04 	ldr.w	pc, [sp], #4
    985c:	0000f4f4 	.word	0x0000f4f4

00009860 <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    9860:	b500      	push	{lr}
    9862:	b089      	sub	sp, #36	; 0x24
    9864:	9202      	str	r2, [sp, #8]
    9866:	461a      	mov	r2, r3
    9868:	4603      	mov	r3, r0
    986a:	f88d 300f 	strb.w	r3, [sp, #15]
    986e:	460b      	mov	r3, r1
    9870:	f88d 300e 	strb.w	r3, [sp, #14]
    9874:	4613      	mov	r3, r2
    9876:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    987a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    987e:	4a18      	ldr	r2, [pc, #96]	; (98e0 <FlexCAN_Ip_Receive+0x80>)
    9880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9884:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9886:	f89d 300f 	ldrb.w	r3, [sp, #15]
    988a:	4a16      	ldr	r2, [pc, #88]	; (98e4 <FlexCAN_Ip_Receive+0x84>)
    988c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9890:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    9892:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9896:	f89d 100e 	ldrb.w	r1, [sp, #14]
    989a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    989e:	9a02      	ldr	r2, [sp, #8]
    98a0:	f7ff fa86 	bl	8db0 <FlexCAN_StartRxMessageBufferData>
    98a4:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    98a6:	9b07      	ldr	r3, [sp, #28]
    98a8:	2b00      	cmp	r3, #0
    98aa:	d113      	bne.n	98d4 <FlexCAN_Ip_Receive+0x74>
    98ac:	f89d 300d 	ldrb.w	r3, [sp, #13]
    98b0:	f083 0301 	eor.w	r3, r3, #1
    98b4:	b2db      	uxtb	r3, r3
    98b6:	2b00      	cmp	r3, #0
    98b8:	d00c      	beq.n	98d4 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    98ba:	f89d 200e 	ldrb.w	r2, [sp, #14]
    98be:	9b05      	ldr	r3, [sp, #20]
    98c0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    98c4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    98c8:	9300      	str	r3, [sp, #0]
    98ca:	2301      	movs	r3, #1
    98cc:	9806      	ldr	r0, [sp, #24]
    98ce:	f002 f92f 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
    98d2:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    98d4:	9b07      	ldr	r3, [sp, #28]
}
    98d6:	4618      	mov	r0, r3
    98d8:	b009      	add	sp, #36	; 0x24
    98da:	f85d fb04 	ldr.w	pc, [sp], #4
    98de:	bf00      	nop
    98e0:	0000f4f4 	.word	0x0000f4f4
    98e4:	1fff8fa0 	.word	0x1fff8fa0

000098e8 <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    98e8:	b500      	push	{lr}
    98ea:	b08b      	sub	sp, #44	; 0x2c
    98ec:	9202      	str	r2, [sp, #8]
    98ee:	461a      	mov	r2, r3
    98f0:	4603      	mov	r3, r0
    98f2:	f88d 300f 	strb.w	r3, [sp, #15]
    98f6:	460b      	mov	r3, r1
    98f8:	f88d 300e 	strb.w	r3, [sp, #14]
    98fc:	4613      	mov	r3, r2
    98fe:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    9902:	2300      	movs	r3, #0
    9904:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    9906:	2300      	movs	r3, #0
    9908:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    990a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    990c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9910:	fb02 f303 	mul.w	r3, r2, r3
    9914:	2100      	movs	r1, #0
    9916:	4618      	mov	r0, r3
    9918:	f7f8 f9ac 	bl	1c74 <OsIf_MicrosToTicks>
    991c:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    991e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9922:	4a4c      	ldr	r2, [pc, #304]	; (9a54 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    9924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9928:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    992a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    992e:	4a4a      	ldr	r2, [pc, #296]	; (9a58 <FlexCAN_Ip_ReceiveBlocking+0x170>)
    9930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9934:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    9936:	f89d 300d 	ldrb.w	r3, [sp, #13]
    993a:	f89d 100e 	ldrb.w	r1, [sp, #14]
    993e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9942:	9a02      	ldr	r2, [sp, #8]
    9944:	f7ff fa34 	bl	8db0 <FlexCAN_StartRxMessageBufferData>
    9948:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    994a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    994c:	2b00      	cmp	r3, #0
    994e:	d113      	bne.n	9978 <FlexCAN_Ip_ReceiveBlocking+0x90>
    9950:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9954:	f083 0301 	eor.w	r3, r3, #1
    9958:	b2db      	uxtb	r3, r3
    995a:	2b00      	cmp	r3, #0
    995c:	d00c      	beq.n	9978 <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    995e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9962:	9b06      	ldr	r3, [sp, #24]
    9964:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9968:	f89d 100f 	ldrb.w	r1, [sp, #15]
    996c:	9300      	str	r3, [sp, #0]
    996e:	2301      	movs	r3, #1
    9970:	9805      	ldr	r0, [sp, #20]
    9972:	f002 f8dd 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
    9976:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    9978:	9b09      	ldr	r3, [sp, #36]	; 0x24
    997a:	2b00      	cmp	r3, #0
    997c:	d133      	bne.n	99e6 <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    997e:	2000      	movs	r0, #0
    9980:	f7f8 f92c 	bl	1bdc <OsIf_GetCounter>
    9984:	4603      	mov	r3, r0
    9986:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    9988:	e024      	b.n	99d4 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    998a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    998e:	2b00      	cmp	r3, #0
    9990:	d010      	beq.n	99b4 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    9992:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9996:	4619      	mov	r1, r3
    9998:	9805      	ldr	r0, [sp, #20]
    999a:	f7fe fe74 	bl	8686 <FlexCAN_GetBuffStatusFlag>
    999e:	4603      	mov	r3, r0
    99a0:	2b00      	cmp	r3, #0
    99a2:	d007      	beq.n	99b4 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    99a4:	f89d 200e 	ldrb.w	r2, [sp, #14]
    99a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    99ac:	4611      	mov	r1, r2
    99ae:	4618      	mov	r0, r3
    99b0:	f7ff fb20 	bl	8ff4 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    99b4:	ab04      	add	r3, sp, #16
    99b6:	2100      	movs	r1, #0
    99b8:	4618      	mov	r0, r3
    99ba:	f7f8 f928 	bl	1c0e <OsIf_GetElapsed>
    99be:	4602      	mov	r2, r0
    99c0:	9b08      	ldr	r3, [sp, #32]
    99c2:	4413      	add	r3, r2
    99c4:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    99c6:	9a08      	ldr	r2, [sp, #32]
    99c8:	9b07      	ldr	r3, [sp, #28]
    99ca:	429a      	cmp	r2, r3
    99cc:	d302      	bcc.n	99d4 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    99ce:	2303      	movs	r3, #3
    99d0:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    99d2:	e008      	b.n	99e6 <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    99d4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    99d8:	9a06      	ldr	r2, [sp, #24]
    99da:	011b      	lsls	r3, r3, #4
    99dc:	4413      	add	r3, r2
    99de:	3304      	adds	r3, #4
    99e0:	681b      	ldr	r3, [r3, #0]
    99e2:	2b01      	cmp	r3, #1
    99e4:	d0d1      	beq.n	998a <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    99e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    99e8:	2b03      	cmp	r3, #3
    99ea:	d112      	bne.n	9a12 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    99ec:	f89d 300d 	ldrb.w	r3, [sp, #13]
    99f0:	f083 0301 	eor.w	r3, r3, #1
    99f4:	b2db      	uxtb	r3, r3
    99f6:	2b00      	cmp	r3, #0
    99f8:	d00b      	beq.n	9a12 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    99fa:	f89d 200e 	ldrb.w	r2, [sp, #14]
    99fe:	9b06      	ldr	r3, [sp, #24]
    9a00:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9a04:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9a08:	9300      	str	r3, [sp, #0]
    9a0a:	2300      	movs	r3, #0
    9a0c:	9805      	ldr	r0, [sp, #20]
    9a0e:	f002 f88f 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    9a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a14:	2b04      	cmp	r3, #4
    9a16:	d018      	beq.n	9a4a <FlexCAN_Ip_ReceiveBlocking+0x162>
    9a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a1a:	2b02      	cmp	r3, #2
    9a1c:	d015      	beq.n	9a4a <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    9a1e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9a22:	9a06      	ldr	r2, [sp, #24]
    9a24:	011b      	lsls	r3, r3, #4
    9a26:	4413      	add	r3, r2
    9a28:	3304      	adds	r3, #4
    9a2a:	681b      	ldr	r3, [r3, #0]
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	d102      	bne.n	9a36 <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    9a30:	2300      	movs	r3, #0
    9a32:	9309      	str	r3, [sp, #36]	; 0x24
    9a34:	e009      	b.n	9a4a <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9a36:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9a3a:	9a06      	ldr	r2, [sp, #24]
    9a3c:	011b      	lsls	r3, r3, #4
    9a3e:	4413      	add	r3, r2
    9a40:	3304      	adds	r3, #4
    9a42:	2200      	movs	r2, #0
    9a44:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    9a46:	2303      	movs	r3, #3
    9a48:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    9a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9a4c:	4618      	mov	r0, r3
    9a4e:	b00b      	add	sp, #44	; 0x2c
    9a50:	f85d fb04 	ldr.w	pc, [sp], #4
    9a54:	1fff8fa0 	.word	0x1fff8fa0
    9a58:	0000f4f4 	.word	0x0000f4f4

00009a5c <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    9a5c:	b500      	push	{lr}
    9a5e:	b085      	sub	sp, #20
    9a60:	4603      	mov	r3, r0
    9a62:	9100      	str	r1, [sp, #0]
    9a64:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9a68:	2300      	movs	r3, #0
    9a6a:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    9a6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a70:	9900      	ldr	r1, [sp, #0]
    9a72:	4618      	mov	r0, r3
    9a74:	f7ff fa5e 	bl	8f34 <FlexCAN_StartRxMessageFifoData>
    9a78:	9003      	str	r0, [sp, #12]
    }
    return result;
    9a7a:	9b03      	ldr	r3, [sp, #12]
}
    9a7c:	4618      	mov	r0, r3
    9a7e:	b005      	add	sp, #20
    9a80:	f85d fb04 	ldr.w	pc, [sp], #4

00009a84 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    9a84:	b500      	push	{lr}
    9a86:	b087      	sub	sp, #28
    9a88:	4603      	mov	r3, r0
    9a8a:	9102      	str	r1, [sp, #8]
    9a8c:	9201      	str	r2, [sp, #4]
    9a8e:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9a92:	2300      	movs	r3, #0
    9a94:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    9a96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9a9a:	9902      	ldr	r1, [sp, #8]
    9a9c:	4618      	mov	r0, r3
    9a9e:	f7ff fa49 	bl	8f34 <FlexCAN_StartRxMessageFifoData>
    9aa2:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    9aa4:	9b05      	ldr	r3, [sp, #20]
    9aa6:	2b00      	cmp	r3, #0
    9aa8:	d106      	bne.n	9ab8 <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    9aaa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9aae:	9901      	ldr	r1, [sp, #4]
    9ab0:	4618      	mov	r0, r3
    9ab2:	f7ff f8e2 	bl	8c7a <FlexCAN_ProccessLegacyRxFIFO>
    9ab6:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    9ab8:	9b05      	ldr	r3, [sp, #20]
}
    9aba:	4618      	mov	r0, r3
    9abc:	b007      	add	sp, #28
    9abe:	f85d fb04 	ldr.w	pc, [sp], #4

00009ac2 <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    9ac2:	b500      	push	{lr}
    9ac4:	b089      	sub	sp, #36	; 0x24
    9ac6:	4603      	mov	r3, r0
    9ac8:	9102      	str	r1, [sp, #8]
    9aca:	9201      	str	r2, [sp, #4]
    9acc:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9ad0:	2300      	movs	r3, #0
    9ad2:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9ad4:	2300      	movs	r3, #0
    9ad6:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9ad8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9adc:	4a1c      	ldr	r2, [pc, #112]	; (9b50 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    9ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ae2:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9ae4:	9805      	ldr	r0, [sp, #20]
    9ae6:	f7fe fd61 	bl	85ac <FlexCAN_IsEnabled>
    9aea:	4603      	mov	r3, r0
    9aec:	2b00      	cmp	r3, #0
    9aee:	bf14      	ite	ne
    9af0:	2301      	movne	r3, #1
    9af2:	2300      	moveq	r3, #0
    9af4:	b2db      	uxtb	r3, r3
    9af6:	f083 0301 	eor.w	r3, r3, #1
    9afa:	b2db      	uxtb	r3, r3
    9afc:	f88d 3013 	strb.w	r3, [sp, #19]
    9b00:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9b04:	f003 0301 	and.w	r3, r3, #1
    9b08:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    9b0c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9b10:	2b00      	cmp	r3, #0
    9b12:	d003      	beq.n	9b1c <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    9b14:	9805      	ldr	r0, [sp, #20]
    9b16:	f001 fd6b 	bl	b5f0 <FlexCAN_Enable>
    9b1a:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    9b1c:	9b07      	ldr	r3, [sp, #28]
    9b1e:	2b00      	cmp	r3, #0
    9b20:	d104      	bne.n	9b2c <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    9b22:	9a01      	ldr	r2, [sp, #4]
    9b24:	9902      	ldr	r1, [sp, #8]
    9b26:	9805      	ldr	r0, [sp, #20]
    9b28:	f002 fba5 	bl	c276 <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    9b2c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9b30:	2b00      	cmp	r3, #0
    9b32:	d008      	beq.n	9b46 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    9b34:	9805      	ldr	r0, [sp, #20]
    9b36:	f001 fdd9 	bl	b6ec <FlexCAN_Disable>
    9b3a:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9b3c:	9b06      	ldr	r3, [sp, #24]
    9b3e:	2b00      	cmp	r3, #0
    9b40:	d001      	beq.n	9b46 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    9b42:	9b06      	ldr	r3, [sp, #24]
    9b44:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    9b46:	9b07      	ldr	r3, [sp, #28]
}
    9b48:	4618      	mov	r0, r3
    9b4a:	b009      	add	sp, #36	; 0x24
    9b4c:	f85d fb04 	ldr.w	pc, [sp], #4
    9b50:	0000f4f4 	.word	0x0000f4f4

00009b54 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    9b54:	b500      	push	{lr}
    9b56:	b08f      	sub	sp, #60	; 0x3c
    9b58:	9204      	str	r2, [sp, #16]
    9b5a:	9303      	str	r3, [sp, #12]
    9b5c:	4603      	mov	r3, r0
    9b5e:	f88d 3017 	strb.w	r3, [sp, #23]
    9b62:	460b      	mov	r3, r1
    9b64:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9b68:	2300      	movs	r3, #0
    9b6a:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9b6c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9b70:	4a27      	ldr	r2, [pc, #156]	; (9c10 <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    9b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b76:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    9b78:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9b7c:	4a25      	ldr	r2, [pc, #148]	; (9c14 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    9b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b82:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    9b84:	2300      	movs	r3, #0
    9b86:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    9b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9b8a:	2b00      	cmp	r3, #0
    9b8c:	d13a      	bne.n	9c04 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    9b8e:	9b04      	ldr	r3, [sp, #16]
    9b90:	685b      	ldr	r3, [r3, #4]
    9b92:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    9b94:	9b04      	ldr	r3, [sp, #16]
    9b96:	681b      	ldr	r3, [r3, #0]
    9b98:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    9b9a:	230a      	movs	r3, #10
    9b9c:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    9b9e:	2300      	movs	r3, #0
    9ba0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    9ba4:	2300      	movs	r3, #0
    9ba6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    9baa:	2300      	movs	r3, #0
    9bac:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    9bb0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9bb4:	4619      	mov	r1, r3
    9bb6:	980c      	ldr	r0, [sp, #48]	; 0x30
    9bb8:	f7fe fd52 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9bbc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9bc0:	4619      	mov	r1, r3
    9bc2:	980c      	ldr	r0, [sp, #48]	; 0x30
    9bc4:	f001 fc2c 	bl	b420 <FlexCAN_GetMsgBuffRegion>
    9bc8:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    9bca:	9b04      	ldr	r3, [sp, #16]
    9bcc:	7adb      	ldrb	r3, [r3, #11]
    9bce:	a906      	add	r1, sp, #24
    9bd0:	9300      	str	r3, [sp, #0]
    9bd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9bd4:	9a03      	ldr	r2, [sp, #12]
    9bd6:	980a      	ldr	r0, [sp, #40]	; 0x28
    9bd8:	f002 f974 	bl	bec4 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    9bdc:	9b04      	ldr	r3, [sp, #16]
    9bde:	7b1b      	ldrb	r3, [r3, #12]
    9be0:	f083 0301 	eor.w	r3, r3, #1
    9be4:	b2db      	uxtb	r3, r3
    9be6:	2b00      	cmp	r3, #0
    9be8:	d00c      	beq.n	9c04 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    9bea:	f89d 2016 	ldrb.w	r2, [sp, #22]
    9bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9bf0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9bf4:	f89d 1017 	ldrb.w	r1, [sp, #23]
    9bf8:	9300      	str	r3, [sp, #0]
    9bfa:	2301      	movs	r3, #1
    9bfc:	980c      	ldr	r0, [sp, #48]	; 0x30
    9bfe:	f001 ff97 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
    9c02:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    9c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    9c06:	4618      	mov	r0, r3
    9c08:	b00f      	add	sp, #60	; 0x3c
    9c0a:	f85d fb04 	ldr.w	pc, [sp], #4
    9c0e:	bf00      	nop
    9c10:	0000f4f4 	.word	0x0000f4f4
    9c14:	1fff8fa0 	.word	0x1fff8fa0

00009c18 <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    9c18:	b084      	sub	sp, #16
    9c1a:	4603      	mov	r3, r0
    9c1c:	460a      	mov	r2, r1
    9c1e:	f88d 3007 	strb.w	r3, [sp, #7]
    9c22:	4613      	mov	r3, r2
    9c24:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9c28:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c2c:	4a0d      	ldr	r2, [pc, #52]	; (9c64 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    9c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c32:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    9c34:	2301      	movs	r3, #1
    9c36:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    9c38:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9c3c:	2b1f      	cmp	r3, #31
    9c3e:	d80d      	bhi.n	9c5c <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    9c40:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9c44:	9a02      	ldr	r2, [sp, #8]
    9c46:	011b      	lsls	r3, r3, #4
    9c48:	4413      	add	r3, r2
    9c4a:	3304      	adds	r3, #4
    9c4c:	681b      	ldr	r3, [r3, #0]
    9c4e:	2b00      	cmp	r3, #0
    9c50:	d102      	bne.n	9c58 <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    9c52:	2300      	movs	r3, #0
    9c54:	9303      	str	r3, [sp, #12]
    9c56:	e001      	b.n	9c5c <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    9c58:	2302      	movs	r3, #2
    9c5a:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    9c5c:	9b03      	ldr	r3, [sp, #12]
}
    9c5e:	4618      	mov	r0, r3
    9c60:	b004      	add	sp, #16
    9c62:	4770      	bx	lr
    9c64:	1fff8fa0 	.word	0x1fff8fa0

00009c68 <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    9c68:	b500      	push	{lr}
    9c6a:	b087      	sub	sp, #28
    9c6c:	4603      	mov	r3, r0
    9c6e:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9c72:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9c76:	4a1d      	ldr	r2, [pc, #116]	; (9cec <FlexCAN_CompleteRxMessageFifoData+0x84>)
    9c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c7c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9c7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9c82:	4a1b      	ldr	r2, [pc, #108]	; (9cf0 <FlexCAN_CompleteRxMessageFifoData+0x88>)
    9c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c88:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    9c8a:	9b04      	ldr	r3, [sp, #16]
    9c8c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    9c90:	2b00      	cmp	r3, #0
    9c92:	d120      	bne.n	9cd6 <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    9c94:	9b04      	ldr	r3, [sp, #16]
    9c96:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9c9a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9c9e:	9300      	str	r3, [sp, #0]
    9ca0:	2300      	movs	r3, #0
    9ca2:	2205      	movs	r2, #5
    9ca4:	9805      	ldr	r0, [sp, #20]
    9ca6:	f001 ff43 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    9caa:	9b04      	ldr	r3, [sp, #16]
    9cac:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9cb0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9cb4:	9300      	str	r3, [sp, #0]
    9cb6:	2300      	movs	r3, #0
    9cb8:	2206      	movs	r2, #6
    9cba:	9805      	ldr	r0, [sp, #20]
    9cbc:	f001 ff38 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    9cc0:	9b04      	ldr	r3, [sp, #16]
    9cc2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9cc6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9cca:	9300      	str	r3, [sp, #0]
    9ccc:	2300      	movs	r3, #0
    9cce:	2207      	movs	r2, #7
    9cd0:	9805      	ldr	r0, [sp, #20]
    9cd2:	f001 ff2d 	bl	bb30 <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    9cd6:	9b04      	ldr	r3, [sp, #16]
    9cd8:	2200      	movs	r2, #0
    9cda:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    9cdc:	9b04      	ldr	r3, [sp, #16]
    9cde:	2200      	movs	r2, #0
    9ce0:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    9ce2:	bf00      	nop
    9ce4:	b007      	add	sp, #28
    9ce6:	f85d fb04 	ldr.w	pc, [sp], #4
    9cea:	bf00      	nop
    9cec:	0000f4f4 	.word	0x0000f4f4
    9cf0:	1fff8fa0 	.word	0x1fff8fa0

00009cf4 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    9cf4:	b500      	push	{lr}
    9cf6:	b08b      	sub	sp, #44	; 0x2c
    9cf8:	4603      	mov	r3, r0
    9cfa:	9102      	str	r1, [sp, #8]
    9cfc:	9201      	str	r2, [sp, #4]
    9cfe:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    9d02:	2300      	movs	r3, #0
    9d04:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    9d06:	2300      	movs	r3, #0
    9d08:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9d0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d0e:	4a3f      	ldr	r2, [pc, #252]	; (9e0c <FlexCAN_IRQHandler+0x118>)
    9d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d14:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9d16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d1a:	4a3d      	ldr	r2, [pc, #244]	; (9e10 <FlexCAN_IRQHandler+0x11c>)
    9d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d20:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    9d22:	9b01      	ldr	r3, [sp, #4]
    9d24:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    9d26:	9b05      	ldr	r3, [sp, #20]
    9d28:	2b00      	cmp	r3, #0
    9d2a:	d05c      	beq.n	9de6 <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    9d2c:	9907      	ldr	r1, [sp, #28]
    9d2e:	9806      	ldr	r0, [sp, #24]
    9d30:	f7fe fe47 	bl	89c2 <FlexCAN_GetMsgBuffIntStatusFlag>
    9d34:	4603      	mov	r3, r0
    9d36:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    9d38:	e008      	b.n	9d4c <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    9d3a:	9b07      	ldr	r3, [sp, #28]
    9d3c:	3b01      	subs	r3, #1
    9d3e:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    9d40:	9907      	ldr	r1, [sp, #28]
    9d42:	9806      	ldr	r0, [sp, #24]
    9d44:	f7fe fe3d 	bl	89c2 <FlexCAN_GetMsgBuffIntStatusFlag>
    9d48:	4603      	mov	r3, r0
    9d4a:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    9d4c:	9b08      	ldr	r3, [sp, #32]
    9d4e:	2b00      	cmp	r3, #0
    9d50:	d103      	bne.n	9d5a <FlexCAN_IRQHandler+0x66>
    9d52:	9a07      	ldr	r2, [sp, #28]
    9d54:	9b02      	ldr	r3, [sp, #8]
    9d56:	429a      	cmp	r2, r3
    9d58:	d8ef      	bhi.n	9d3a <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    9d5a:	9b08      	ldr	r3, [sp, #32]
    9d5c:	2b00      	cmp	r3, #0
    9d5e:	d050      	beq.n	9e02 <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    9d60:	9b07      	ldr	r3, [sp, #28]
    9d62:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    9d64:	9b05      	ldr	r3, [sp, #20]
    9d66:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9d6a:	2b00      	cmp	r3, #0
    9d6c:	d00b      	beq.n	9d86 <FlexCAN_IRQHandler+0x92>
    9d6e:	9b07      	ldr	r3, [sp, #28]
    9d70:	2b07      	cmp	r3, #7
    9d72:	d808      	bhi.n	9d86 <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    9d74:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d78:	9907      	ldr	r1, [sp, #28]
    9d7a:	4618      	mov	r0, r3
    9d7c:	f7ff fac2 	bl	9304 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    9d80:	2300      	movs	r3, #0
    9d82:	9309      	str	r3, [sp, #36]	; 0x24
    9d84:	e00d      	b.n	9da2 <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    9d86:	9a05      	ldr	r2, [sp, #20]
    9d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d8a:	011b      	lsls	r3, r3, #4
    9d8c:	4413      	add	r3, r2
    9d8e:	3304      	adds	r3, #4
    9d90:	681b      	ldr	r3, [r3, #0]
    9d92:	2b01      	cmp	r3, #1
    9d94:	d105      	bne.n	9da2 <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    9d96:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d9a:	9907      	ldr	r1, [sp, #28]
    9d9c:	4618      	mov	r0, r3
    9d9e:	f7ff f929 	bl	8ff4 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    9da2:	9a05      	ldr	r2, [sp, #20]
    9da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9da6:	011b      	lsls	r3, r3, #4
    9da8:	4413      	add	r3, r2
    9daa:	3304      	adds	r3, #4
    9dac:	681b      	ldr	r3, [r3, #0]
    9dae:	2b02      	cmp	r3, #2
    9db0:	d105      	bne.n	9dbe <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    9db2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9db6:	9907      	ldr	r1, [sp, #28]
    9db8:	4618      	mov	r0, r3
    9dba:	f7ff fa09 	bl	91d0 <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    9dbe:	9907      	ldr	r1, [sp, #28]
    9dc0:	9806      	ldr	r0, [sp, #24]
    9dc2:	f7fe fdfe 	bl	89c2 <FlexCAN_GetMsgBuffIntStatusFlag>
    9dc6:	4603      	mov	r3, r0
    9dc8:	2b00      	cmp	r3, #0
    9dca:	d01a      	beq.n	9e02 <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    9dcc:	9a05      	ldr	r2, [sp, #20]
    9dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9dd0:	011b      	lsls	r3, r3, #4
    9dd2:	4413      	add	r3, r2
    9dd4:	3304      	adds	r3, #4
    9dd6:	681b      	ldr	r3, [r3, #0]
    9dd8:	2b00      	cmp	r3, #0
    9dda:	d112      	bne.n	9e02 <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9ddc:	9907      	ldr	r1, [sp, #28]
    9dde:	9806      	ldr	r0, [sp, #24]
    9de0:	f7fe fc3e 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    9de4:	e00d      	b.n	9e02 <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    9de6:	9b02      	ldr	r3, [sp, #8]
    9de8:	9307      	str	r3, [sp, #28]
    9dea:	e006      	b.n	9dfa <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9dec:	9907      	ldr	r1, [sp, #28]
    9dee:	9806      	ldr	r0, [sp, #24]
    9df0:	f7fe fc36 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    9df4:	9b07      	ldr	r3, [sp, #28]
    9df6:	3301      	adds	r3, #1
    9df8:	9307      	str	r3, [sp, #28]
    9dfa:	9a07      	ldr	r2, [sp, #28]
    9dfc:	9b01      	ldr	r3, [sp, #4]
    9dfe:	429a      	cmp	r2, r3
    9e00:	d9f4      	bls.n	9dec <FlexCAN_IRQHandler+0xf8>
}
    9e02:	bf00      	nop
    9e04:	b00b      	add	sp, #44	; 0x2c
    9e06:	f85d fb04 	ldr.w	pc, [sp], #4
    9e0a:	bf00      	nop
    9e0c:	0000f4f4 	.word	0x0000f4f4
    9e10:	1fff8fa0 	.word	0x1fff8fa0

00009e14 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    9e14:	b084      	sub	sp, #16
    9e16:	4603      	mov	r3, r0
    9e18:	9100      	str	r1, [sp, #0]
    9e1a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9e1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e22:	4a05      	ldr	r2, [pc, #20]	; (9e38 <FlexCAN_Ip_ClearErrorStatus+0x24>)
    9e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e28:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    9e2a:	9b03      	ldr	r3, [sp, #12]
    9e2c:	9a00      	ldr	r2, [sp, #0]
    9e2e:	621a      	str	r2, [r3, #32]
}
    9e30:	bf00      	nop
    9e32:	b004      	add	sp, #16
    9e34:	4770      	bx	lr
    9e36:	bf00      	nop
    9e38:	0000f4f4 	.word	0x0000f4f4

00009e3c <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    9e3c:	b084      	sub	sp, #16
    9e3e:	4603      	mov	r3, r0
    9e40:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9e44:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e48:	4a04      	ldr	r2, [pc, #16]	; (9e5c <FlexCAN_Ip_GetErrorStatus+0x20>)
    9e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e4e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    9e50:	9b03      	ldr	r3, [sp, #12]
    9e52:	6a1b      	ldr	r3, [r3, #32]
}
    9e54:	4618      	mov	r0, r3
    9e56:	b004      	add	sp, #16
    9e58:	4770      	bx	lr
    9e5a:	bf00      	nop
    9e5c:	0000f4f4 	.word	0x0000f4f4

00009e60 <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    9e60:	b084      	sub	sp, #16
    9e62:	4603      	mov	r3, r0
    9e64:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9e68:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e6c:	4a04      	ldr	r2, [pc, #16]	; (9e80 <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    9e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e72:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    9e74:	9b03      	ldr	r3, [sp, #12]
    9e76:	69db      	ldr	r3, [r3, #28]
    9e78:	b2db      	uxtb	r3, r3
}
    9e7a:	4618      	mov	r0, r3
    9e7c:	b004      	add	sp, #16
    9e7e:	4770      	bx	lr
    9e80:	0000f4f4 	.word	0x0000f4f4

00009e84 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    9e84:	b084      	sub	sp, #16
    9e86:	4603      	mov	r3, r0
    9e88:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9e8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e90:	4a05      	ldr	r2, [pc, #20]	; (9ea8 <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    9e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e96:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    9e98:	9b03      	ldr	r3, [sp, #12]
    9e9a:	69db      	ldr	r3, [r3, #28]
    9e9c:	0a1b      	lsrs	r3, r3, #8
    9e9e:	b2db      	uxtb	r3, r3
}
    9ea0:	4618      	mov	r0, r3
    9ea2:	b004      	add	sp, #16
    9ea4:	4770      	bx	lr
    9ea6:	bf00      	nop
    9ea8:	0000f4f4 	.word	0x0000f4f4

00009eac <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    9eac:	b510      	push	{r4, lr}
    9eae:	b086      	sub	sp, #24
    9eb0:	4603      	mov	r3, r0
    9eb2:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9eb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9eba:	4a29      	ldr	r2, [pc, #164]	; (9f60 <FlexCAN_Error_IRQHandler+0xb4>)
    9ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ec0:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9ec2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ec6:	4a27      	ldr	r2, [pc, #156]	; (9f64 <FlexCAN_Error_IRQHandler+0xb8>)
    9ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ecc:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    9ece:	2300      	movs	r3, #0
    9ed0:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    9ed2:	9b03      	ldr	r3, [sp, #12]
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	d03d      	beq.n	9f54 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    9ed8:	9b04      	ldr	r3, [sp, #16]
    9eda:	6a1b      	ldr	r3, [r3, #32]
    9edc:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    9ede:	9b05      	ldr	r3, [sp, #20]
    9ee0:	f003 0302 	and.w	r3, r3, #2
    9ee4:	2b00      	cmp	r3, #0
    9ee6:	d019      	beq.n	9f1c <FlexCAN_Error_IRQHandler+0x70>
    9ee8:	9b04      	ldr	r3, [sp, #16]
    9eea:	685b      	ldr	r3, [r3, #4]
    9eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9ef0:	2b00      	cmp	r3, #0
    9ef2:	d013      	beq.n	9f1c <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    9ef4:	9b04      	ldr	r3, [sp, #16]
    9ef6:	2202      	movs	r2, #2
    9ef8:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    9efa:	9b03      	ldr	r3, [sp, #12]
    9efc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    9f00:	2b00      	cmp	r3, #0
    9f02:	d00b      	beq.n	9f1c <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    9f04:	9b03      	ldr	r3, [sp, #12]
    9f06:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    9f0a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9f0e:	9b03      	ldr	r3, [sp, #12]
    9f10:	9a05      	ldr	r2, [sp, #20]
    9f12:	2105      	movs	r1, #5
    9f14:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    9f16:	9b04      	ldr	r3, [sp, #16]
    9f18:	6a1b      	ldr	r3, [r3, #32]
    9f1a:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    9f1c:	9b05      	ldr	r3, [sp, #20]
    9f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    9f22:	2b00      	cmp	r3, #0
    9f24:	d019      	beq.n	9f5a <FlexCAN_Error_IRQHandler+0xae>
    9f26:	9b04      	ldr	r3, [sp, #16]
    9f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9f2a:	2b00      	cmp	r3, #0
    9f2c:	da15      	bge.n	9f5a <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    9f2e:	9b04      	ldr	r3, [sp, #16]
    9f30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    9f34:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    9f36:	9b03      	ldr	r3, [sp, #12]
    9f38:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    9f3c:	2b00      	cmp	r3, #0
    9f3e:	d00c      	beq.n	9f5a <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    9f40:	9b03      	ldr	r3, [sp, #12]
    9f42:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    9f46:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9f4a:	9b03      	ldr	r3, [sp, #12]
    9f4c:	9a05      	ldr	r2, [sp, #20]
    9f4e:	2106      	movs	r1, #6
    9f50:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    9f52:	e002      	b.n	9f5a <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    9f54:	9b04      	ldr	r3, [sp, #16]
    9f56:	4a04      	ldr	r2, [pc, #16]	; (9f68 <FlexCAN_Error_IRQHandler+0xbc>)
    9f58:	621a      	str	r2, [r3, #32]
}
    9f5a:	bf00      	nop
    9f5c:	b006      	add	sp, #24
    9f5e:	bd10      	pop	{r4, pc}
    9f60:	0000f4f4 	.word	0x0000f4f4
    9f64:	1fff8fa0 	.word	0x1fff8fa0
    9f68:	00300002 	.word	0x00300002

00009f6c <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    9f6c:	b510      	push	{r4, lr}
    9f6e:	b086      	sub	sp, #24
    9f70:	4603      	mov	r3, r0
    9f72:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9f76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f7a:	4a3a      	ldr	r2, [pc, #232]	; (a064 <FlexCAN_BusOff_IRQHandler+0xf8>)
    9f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f80:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9f82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f86:	4a38      	ldr	r2, [pc, #224]	; (a068 <FlexCAN_BusOff_IRQHandler+0xfc>)
    9f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f8c:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    9f8e:	2300      	movs	r3, #0
    9f90:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    9f92:	9b03      	ldr	r3, [sp, #12]
    9f94:	2b00      	cmp	r3, #0
    9f96:	d05f      	beq.n	a058 <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    9f98:	9b04      	ldr	r3, [sp, #16]
    9f9a:	6a1b      	ldr	r3, [r3, #32]
    9f9c:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    9f9e:	9b05      	ldr	r3, [sp, #20]
    9fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    9fa4:	2b00      	cmp	r3, #0
    9fa6:	d01a      	beq.n	9fde <FlexCAN_BusOff_IRQHandler+0x72>
    9fa8:	9b04      	ldr	r3, [sp, #16]
    9faa:	685b      	ldr	r3, [r3, #4]
    9fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    9fb0:	2b00      	cmp	r3, #0
    9fb2:	d014      	beq.n	9fde <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    9fb4:	9b04      	ldr	r3, [sp, #16]
    9fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9fba:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    9fbc:	9b03      	ldr	r3, [sp, #12]
    9fbe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    9fc2:	2b00      	cmp	r3, #0
    9fc4:	d00b      	beq.n	9fde <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    9fc6:	9b03      	ldr	r3, [sp, #12]
    9fc8:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    9fcc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9fd0:	9b03      	ldr	r3, [sp, #12]
    9fd2:	9a05      	ldr	r2, [sp, #20]
    9fd4:	2109      	movs	r1, #9
    9fd6:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    9fd8:	9b04      	ldr	r3, [sp, #16]
    9fda:	6a1b      	ldr	r3, [r3, #32]
    9fdc:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    9fde:	9b05      	ldr	r3, [sp, #20]
    9fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    9fe4:	2b00      	cmp	r3, #0
    9fe6:	d01a      	beq.n	a01e <FlexCAN_BusOff_IRQHandler+0xb2>
    9fe8:	9b04      	ldr	r3, [sp, #16]
    9fea:	685b      	ldr	r3, [r3, #4]
    9fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9ff0:	2b00      	cmp	r3, #0
    9ff2:	d014      	beq.n	a01e <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    9ff4:	9b04      	ldr	r3, [sp, #16]
    9ff6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9ffa:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    9ffc:	9b03      	ldr	r3, [sp, #12]
    9ffe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a002:	2b00      	cmp	r3, #0
    a004:	d00b      	beq.n	a01e <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    a006:	9b03      	ldr	r3, [sp, #12]
    a008:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a00c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a010:	9b03      	ldr	r3, [sp, #12]
    a012:	9a05      	ldr	r2, [sp, #20]
    a014:	2108      	movs	r1, #8
    a016:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    a018:	9b04      	ldr	r3, [sp, #16]
    a01a:	6a1b      	ldr	r3, [r3, #32]
    a01c:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    a01e:	9b05      	ldr	r3, [sp, #20]
    a020:	f003 0304 	and.w	r3, r3, #4
    a024:	2b00      	cmp	r3, #0
    a026:	d01a      	beq.n	a05e <FlexCAN_BusOff_IRQHandler+0xf2>
    a028:	9b04      	ldr	r3, [sp, #16]
    a02a:	685b      	ldr	r3, [r3, #4]
    a02c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a030:	2b00      	cmp	r3, #0
    a032:	d014      	beq.n	a05e <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    a034:	9b04      	ldr	r3, [sp, #16]
    a036:	2204      	movs	r2, #4
    a038:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a03a:	9b03      	ldr	r3, [sp, #12]
    a03c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a040:	2b00      	cmp	r3, #0
    a042:	d00c      	beq.n	a05e <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    a044:	9b03      	ldr	r3, [sp, #12]
    a046:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a04a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a04e:	9b03      	ldr	r3, [sp, #12]
    a050:	9a05      	ldr	r2, [sp, #20]
    a052:	2107      	movs	r1, #7
    a054:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    a056:	e002      	b.n	a05e <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    a058:	9b04      	ldr	r3, [sp, #16]
    a05a:	4a04      	ldr	r2, [pc, #16]	; (a06c <FlexCAN_BusOff_IRQHandler+0x100>)
    a05c:	621a      	str	r2, [r3, #32]
}
    a05e:	bf00      	nop
    a060:	b006      	add	sp, #24
    a062:	bd10      	pop	{r4, pc}
    a064:	0000f4f4 	.word	0x0000f4f4
    a068:	1fff8fa0 	.word	0x1fff8fa0
    a06c:	000b0004 	.word	0x000b0004

0000a070 <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    a070:	b500      	push	{lr}
    a072:	b091      	sub	sp, #68	; 0x44
    a074:	9204      	str	r2, [sp, #16]
    a076:	9303      	str	r3, [sp, #12]
    a078:	4603      	mov	r3, r0
    a07a:	f88d 3017 	strb.w	r3, [sp, #23]
    a07e:	460b      	mov	r3, r1
    a080:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a084:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a088:	4a5f      	ldr	r2, [pc, #380]	; (a208 <FlexCAN_Ip_SendBlocking+0x198>)
    a08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a08e:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a090:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a094:	4a5d      	ldr	r2, [pc, #372]	; (a20c <FlexCAN_Ip_SendBlocking+0x19c>)
    a096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a09a:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    a09c:	2300      	movs	r3, #0
    a09e:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    a0a0:	2300      	movs	r3, #0
    a0a2:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a0a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a0a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a0aa:	fb02 f303 	mul.w	r3, r2, r3
    a0ae:	2100      	movs	r1, #0
    a0b0:	4618      	mov	r0, r3
    a0b2:	f7f7 fddf 	bl	1c74 <OsIf_MicrosToTicks>
    a0b6:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    a0b8:	2300      	movs	r3, #0
    a0ba:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    a0bc:	2300      	movs	r3, #0
    a0be:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    a0c0:	2300      	movs	r3, #0
    a0c2:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    a0c4:	f89d 1016 	ldrb.w	r1, [sp, #22]
    a0c8:	f89d 0017 	ldrb.w	r0, [sp, #23]
    a0cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a0ce:	9300      	str	r3, [sp, #0]
    a0d0:	9b03      	ldr	r3, [sp, #12]
    a0d2:	9a04      	ldr	r2, [sp, #16]
    a0d4:	f7fe feaa 	bl	8e2c <FlexCAN_StartSendData>
    a0d8:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    a0da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0dc:	2b00      	cmp	r3, #0
    a0de:	f040 808d 	bne.w	a1fc <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a0e2:	2000      	movs	r0, #0
    a0e4:	f7f7 fd7a 	bl	1bdc <OsIf_GetCounter>
    a0e8:	4603      	mov	r3, r0
    a0ea:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    a0ec:	e00f      	b.n	a10e <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a0ee:	ab07      	add	r3, sp, #28
    a0f0:	2100      	movs	r1, #0
    a0f2:	4618      	mov	r0, r3
    a0f4:	f7f7 fd8b 	bl	1c0e <OsIf_GetElapsed>
    a0f8:	4602      	mov	r2, r0
    a0fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a0fc:	4413      	add	r3, r2
    a0fe:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    a100:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a104:	429a      	cmp	r2, r3
    a106:	d302      	bcc.n	a10e <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    a108:	2303      	movs	r3, #3
    a10a:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    a10c:	e008      	b.n	a120 <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    a10e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a112:	4619      	mov	r1, r3
    a114:	980d      	ldr	r0, [sp, #52]	; 0x34
    a116:	f7fe fab6 	bl	8686 <FlexCAN_GetBuffStatusFlag>
    a11a:	4603      	mov	r3, r0
    a11c:	2b01      	cmp	r3, #1
    a11e:	d1e6      	bne.n	a0ee <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    a120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a122:	2b03      	cmp	r3, #3
    a124:	d15c      	bne.n	a1e0 <FlexCAN_Ip_SendBlocking+0x170>
    a126:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a12a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a12c:	011b      	lsls	r3, r3, #4
    a12e:	4413      	add	r3, r2
    a130:	3304      	adds	r3, #4
    a132:	681b      	ldr	r3, [r3, #0]
    a134:	2b00      	cmp	r3, #0
    a136:	d053      	beq.n	a1e0 <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a138:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a13c:	4619      	mov	r1, r3
    a13e:	980d      	ldr	r0, [sp, #52]	; 0x34
    a140:	f7fe fa8e 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    a144:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a148:	4619      	mov	r1, r3
    a14a:	980d      	ldr	r0, [sp, #52]	; 0x34
    a14c:	f001 f968 	bl	b420 <FlexCAN_GetMsgBuffRegion>
    a150:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    a152:	9b08      	ldr	r3, [sp, #32]
    a154:	681b      	ldr	r3, [r3, #0]
    a156:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    a158:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a15a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    a15e:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    a160:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a162:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    a166:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    a168:	9b08      	ldr	r3, [sp, #32]
    a16a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a16c:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a16e:	2100      	movs	r1, #0
    a170:	4827      	ldr	r0, [pc, #156]	; (a210 <FlexCAN_Ip_SendBlocking+0x1a0>)
    a172:	f7f7 fd7f 	bl	1c74 <OsIf_MicrosToTicks>
    a176:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a178:	2000      	movs	r0, #0
    a17a:	f7f7 fd2f 	bl	1bdc <OsIf_GetCounter>
    a17e:	4603      	mov	r3, r0
    a180:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    a182:	2300      	movs	r3, #0
    a184:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    a186:	e00f      	b.n	a1a8 <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a188:	ab07      	add	r3, sp, #28
    a18a:	2100      	movs	r1, #0
    a18c:	4618      	mov	r0, r3
    a18e:	f7f7 fd3e 	bl	1c0e <OsIf_GetElapsed>
    a192:	4602      	mov	r2, r0
    a194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a196:	4413      	add	r3, r2
    a198:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    a19a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a19e:	429a      	cmp	r2, r3
    a1a0:	d302      	bcc.n	a1a8 <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    a1a2:	2303      	movs	r3, #3
    a1a4:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    a1a6:	e008      	b.n	a1ba <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    a1a8:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a1ac:	4619      	mov	r1, r3
    a1ae:	980d      	ldr	r0, [sp, #52]	; 0x34
    a1b0:	f7fe fa69 	bl	8686 <FlexCAN_GetBuffStatusFlag>
    a1b4:	4603      	mov	r3, r0
    a1b6:	2b00      	cmp	r3, #0
    a1b8:	d0e6      	beq.n	a188 <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    a1ba:	9b08      	ldr	r3, [sp, #32]
    a1bc:	681b      	ldr	r3, [r3, #0]
    a1be:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    a1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1c2:	0e1b      	lsrs	r3, r3, #24
    a1c4:	f003 030f 	and.w	r3, r3, #15
    a1c8:	2b08      	cmp	r3, #8
    a1ca:	d101      	bne.n	a1d0 <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    a1cc:	2300      	movs	r3, #0
    a1ce:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    a1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1d2:	0e1b      	lsrs	r3, r3, #24
    a1d4:	f003 030f 	and.w	r3, r3, #15
    a1d8:	2b09      	cmp	r3, #9
    a1da:	d101      	bne.n	a1e0 <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    a1dc:	2303      	movs	r3, #3
    a1de:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a1e0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a1e4:	4619      	mov	r1, r3
    a1e6:	980d      	ldr	r0, [sp, #52]	; 0x34
    a1e8:	f7fe fa3a 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    a1ec:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a1f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a1f2:	011b      	lsls	r3, r3, #4
    a1f4:	4413      	add	r3, r2
    a1f6:	3304      	adds	r3, #4
    a1f8:	2200      	movs	r2, #0
    a1fa:	601a      	str	r2, [r3, #0]
    }
    return result;
    a1fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    a1fe:	4618      	mov	r0, r3
    a200:	b011      	add	sp, #68	; 0x44
    a202:	f85d fb04 	ldr.w	pc, [sp], #4
    a206:	bf00      	nop
    a208:	0000f4f4 	.word	0x0000f4f4
    a20c:	1fff8fa0 	.word	0x1fff8fa0
    a210:	000f4240 	.word	0x000f4240

0000a214 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    a214:	b500      	push	{lr}
    a216:	b087      	sub	sp, #28
    a218:	4603      	mov	r3, r0
    a21a:	9100      	str	r1, [sp, #0]
    a21c:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a220:	2300      	movs	r3, #0
    a222:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a224:	2300      	movs	r3, #0
    a226:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a228:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a22c:	4a1c      	ldr	r2, [pc, #112]	; (a2a0 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    a22e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a232:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a234:	9803      	ldr	r0, [sp, #12]
    a236:	f7fe f9b9 	bl	85ac <FlexCAN_IsEnabled>
    a23a:	4603      	mov	r3, r0
    a23c:	2b00      	cmp	r3, #0
    a23e:	bf14      	ite	ne
    a240:	2301      	movne	r3, #1
    a242:	2300      	moveq	r3, #0
    a244:	b2db      	uxtb	r3, r3
    a246:	f083 0301 	eor.w	r3, r3, #1
    a24a:	b2db      	uxtb	r3, r3
    a24c:	f88d 300b 	strb.w	r3, [sp, #11]
    a250:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a254:	f003 0301 	and.w	r3, r3, #1
    a258:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a25c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a260:	2b00      	cmp	r3, #0
    a262:	d003      	beq.n	a26c <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a264:	9803      	ldr	r0, [sp, #12]
    a266:	f001 f9c3 	bl	b5f0 <FlexCAN_Enable>
    a26a:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a26c:	9b05      	ldr	r3, [sp, #20]
    a26e:	2b00      	cmp	r3, #0
    a270:	d103      	bne.n	a27a <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    a272:	9900      	ldr	r1, [sp, #0]
    a274:	9803      	ldr	r0, [sp, #12]
    a276:	f7fe fbc3 	bl	8a00 <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    a27a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a27e:	2b00      	cmp	r3, #0
    a280:	d008      	beq.n	a294 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    a282:	9803      	ldr	r0, [sp, #12]
    a284:	f001 fa32 	bl	b6ec <FlexCAN_Disable>
    a288:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a28a:	9b04      	ldr	r3, [sp, #16]
    a28c:	2b00      	cmp	r3, #0
    a28e:	d001      	beq.n	a294 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    a290:	9b04      	ldr	r3, [sp, #16]
    a292:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    a294:	9b05      	ldr	r3, [sp, #20]
}
    a296:	4618      	mov	r0, r3
    a298:	b007      	add	sp, #28
    a29a:	f85d fb04 	ldr.w	pc, [sp], #4
    a29e:	bf00      	nop
    a2a0:	0000f4f4 	.word	0x0000f4f4

0000a2a4 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    a2a4:	b500      	push	{lr}
    a2a6:	b085      	sub	sp, #20
    a2a8:	4603      	mov	r3, r0
    a2aa:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a2ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2b2:	4a06      	ldr	r2, [pc, #24]	; (a2cc <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    a2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2b8:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    a2ba:	9803      	ldr	r0, [sp, #12]
    a2bc:	f001 f94c 	bl	b558 <FlexCAN_EnterFreezeMode>
    a2c0:	4603      	mov	r3, r0
}
    a2c2:	4618      	mov	r0, r3
    a2c4:	b005      	add	sp, #20
    a2c6:	f85d fb04 	ldr.w	pc, [sp], #4
    a2ca:	bf00      	nop
    a2cc:	0000f4f4 	.word	0x0000f4f4

0000a2d0 <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    a2d0:	b500      	push	{lr}
    a2d2:	b085      	sub	sp, #20
    a2d4:	4603      	mov	r3, r0
    a2d6:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a2da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2de:	4a06      	ldr	r2, [pc, #24]	; (a2f8 <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    a2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2e4:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    a2e6:	9803      	ldr	r0, [sp, #12]
    a2e8:	f001 f9be 	bl	b668 <FlexCAN_ExitFreezeMode>
    a2ec:	4603      	mov	r3, r0
}
    a2ee:	4618      	mov	r0, r3
    a2f0:	b005      	add	sp, #20
    a2f2:	f85d fb04 	ldr.w	pc, [sp], #4
    a2f6:	bf00      	nop
    a2f8:	0000f4f4 	.word	0x0000f4f4

0000a2fc <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    a2fc:	b500      	push	{lr}
    a2fe:	b087      	sub	sp, #28
    a300:	4603      	mov	r3, r0
    a302:	9200      	str	r2, [sp, #0]
    a304:	f88d 3007 	strb.w	r3, [sp, #7]
    a308:	460b      	mov	r3, r1
    a30a:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a30e:	2300      	movs	r3, #0
    a310:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a312:	2300      	movs	r3, #0
    a314:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a316:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a31a:	4a1e      	ldr	r2, [pc, #120]	; (a394 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    a31c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a320:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a322:	9803      	ldr	r0, [sp, #12]
    a324:	f7fe f942 	bl	85ac <FlexCAN_IsEnabled>
    a328:	4603      	mov	r3, r0
    a32a:	2b00      	cmp	r3, #0
    a32c:	bf14      	ite	ne
    a32e:	2301      	movne	r3, #1
    a330:	2300      	moveq	r3, #0
    a332:	b2db      	uxtb	r3, r3
    a334:	f083 0301 	eor.w	r3, r3, #1
    a338:	b2db      	uxtb	r3, r3
    a33a:	f88d 300b 	strb.w	r3, [sp, #11]
    a33e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a342:	f003 0301 	and.w	r3, r3, #1
    a346:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a34a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a34e:	2b00      	cmp	r3, #0
    a350:	d003      	beq.n	a35a <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    a352:	9803      	ldr	r0, [sp, #12]
    a354:	f001 f94c 	bl	b5f0 <FlexCAN_Enable>
    a358:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a35a:	9b05      	ldr	r3, [sp, #20]
    a35c:	2b00      	cmp	r3, #0
    a35e:	d106      	bne.n	a36e <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    a360:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a364:	9a00      	ldr	r2, [sp, #0]
    a366:	4619      	mov	r1, r3
    a368:	9803      	ldr	r0, [sp, #12]
    a36a:	f7fe fb52 	bl	8a12 <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    a36e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a372:	2b00      	cmp	r3, #0
    a374:	d008      	beq.n	a388 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    a376:	9803      	ldr	r0, [sp, #12]
    a378:	f001 f9b8 	bl	b6ec <FlexCAN_Disable>
    a37c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a37e:	9b04      	ldr	r3, [sp, #16]
    a380:	2b00      	cmp	r3, #0
    a382:	d001      	beq.n	a388 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    a384:	9b04      	ldr	r3, [sp, #16]
    a386:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    a388:	9b05      	ldr	r3, [sp, #20]
}
    a38a:	4618      	mov	r0, r3
    a38c:	b007      	add	sp, #28
    a38e:	f85d fb04 	ldr.w	pc, [sp], #4
    a392:	bf00      	nop
    a394:	0000f4f4 	.word	0x0000f4f4

0000a398 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    a398:	b500      	push	{lr}
    a39a:	b087      	sub	sp, #28
    a39c:	4603      	mov	r3, r0
    a39e:	9100      	str	r1, [sp, #0]
    a3a0:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a3a4:	2300      	movs	r3, #0
    a3a6:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a3a8:	2300      	movs	r3, #0
    a3aa:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a3ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3b0:	4a1c      	ldr	r2, [pc, #112]	; (a424 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    a3b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3b6:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a3b8:	9803      	ldr	r0, [sp, #12]
    a3ba:	f7fe f8f7 	bl	85ac <FlexCAN_IsEnabled>
    a3be:	4603      	mov	r3, r0
    a3c0:	2b00      	cmp	r3, #0
    a3c2:	bf14      	ite	ne
    a3c4:	2301      	movne	r3, #1
    a3c6:	2300      	moveq	r3, #0
    a3c8:	b2db      	uxtb	r3, r3
    a3ca:	f083 0301 	eor.w	r3, r3, #1
    a3ce:	b2db      	uxtb	r3, r3
    a3d0:	f88d 300b 	strb.w	r3, [sp, #11]
    a3d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a3d8:	f003 0301 	and.w	r3, r3, #1
    a3dc:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a3e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a3e4:	2b00      	cmp	r3, #0
    a3e6:	d003      	beq.n	a3f0 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a3e8:	9803      	ldr	r0, [sp, #12]
    a3ea:	f001 f901 	bl	b5f0 <FlexCAN_Enable>
    a3ee:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a3f0:	9b05      	ldr	r3, [sp, #20]
    a3f2:	2b00      	cmp	r3, #0
    a3f4:	d103      	bne.n	a3fe <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    a3f6:	9900      	ldr	r1, [sp, #0]
    a3f8:	9803      	ldr	r0, [sp, #12]
    a3fa:	f7fe f8a7 	bl	854c <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    a3fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a402:	2b00      	cmp	r3, #0
    a404:	d008      	beq.n	a418 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    a406:	9803      	ldr	r0, [sp, #12]
    a408:	f001 f970 	bl	b6ec <FlexCAN_Disable>
    a40c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a40e:	9b04      	ldr	r3, [sp, #16]
    a410:	2b00      	cmp	r3, #0
    a412:	d001      	beq.n	a418 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    a414:	9b04      	ldr	r3, [sp, #16]
    a416:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a418:	9b05      	ldr	r3, [sp, #20]
}
    a41a:	4618      	mov	r0, r3
    a41c:	b007      	add	sp, #28
    a41e:	f85d fb04 	ldr.w	pc, [sp], #4
    a422:	bf00      	nop
    a424:	0000f4f4 	.word	0x0000f4f4

0000a428 <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    a428:	b500      	push	{lr}
    a42a:	b085      	sub	sp, #20
    a42c:	4603      	mov	r3, r0
    a42e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a432:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a436:	4a0e      	ldr	r2, [pc, #56]	; (a470 <FlexCAN_Ip_Deinit_Privileged+0x48>)
    a438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a43c:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    a43e:	9803      	ldr	r0, [sp, #12]
    a440:	f001 f88a 	bl	b558 <FlexCAN_EnterFreezeMode>
    a444:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    a446:	9b02      	ldr	r3, [sp, #8]
    a448:	2b00      	cmp	r3, #0
    a44a:	d10b      	bne.n	a464 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    a44c:	9803      	ldr	r0, [sp, #12]
    a44e:	f7fe fb18 	bl	8a82 <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    a452:	9803      	ldr	r0, [sp, #12]
    a454:	f001 f94a 	bl	b6ec <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    a458:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a45c:	4a05      	ldr	r2, [pc, #20]	; (a474 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    a45e:	2100      	movs	r1, #0
    a460:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    a464:	9b02      	ldr	r3, [sp, #8]
}
    a466:	4618      	mov	r0, r3
    a468:	b005      	add	sp, #20
    a46a:	f85d fb04 	ldr.w	pc, [sp], #4
    a46e:	bf00      	nop
    a470:	0000f4f4 	.word	0x0000f4f4
    a474:	1fff8fa0 	.word	0x1fff8fa0

0000a478 <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    a478:	b500      	push	{lr}
    a47a:	b085      	sub	sp, #20
    a47c:	4603      	mov	r3, r0
    a47e:	460a      	mov	r2, r1
    a480:	f88d 3007 	strb.w	r3, [sp, #7]
    a484:	4613      	mov	r3, r2
    a486:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a48a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a48e:	4a22      	ldr	r2, [pc, #136]	; (a518 <FlexCAN_Ip_MainFunctionRead+0xa0>)
    a490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a494:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a496:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a49a:	4a20      	ldr	r2, [pc, #128]	; (a51c <FlexCAN_Ip_MainFunctionRead+0xa4>)
    a49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4a0:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    a4a2:	9b02      	ldr	r3, [sp, #8]
    a4a4:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    a4a8:	2b00      	cmp	r3, #0
    a4aa:	d015      	beq.n	a4d8 <FlexCAN_Ip_MainFunctionRead+0x60>
    a4ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a4b0:	2b07      	cmp	r3, #7
    a4b2:	d811      	bhi.n	a4d8 <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    a4b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a4b8:	2b00      	cmp	r3, #0
    a4ba:	d128      	bne.n	a50e <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    a4bc:	2105      	movs	r1, #5
    a4be:	9803      	ldr	r0, [sp, #12]
    a4c0:	f7fe f8e1 	bl	8686 <FlexCAN_GetBuffStatusFlag>
    a4c4:	4603      	mov	r3, r0
    a4c6:	2b00      	cmp	r3, #0
    a4c8:	d021      	beq.n	a50e <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    a4ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4ce:	2105      	movs	r1, #5
    a4d0:	4618      	mov	r0, r3
    a4d2:	f7fe ff17 	bl	9304 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    a4d6:	e01a      	b.n	a50e <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    a4d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a4dc:	4619      	mov	r1, r3
    a4de:	9803      	ldr	r0, [sp, #12]
    a4e0:	f7fe f8d1 	bl	8686 <FlexCAN_GetBuffStatusFlag>
    a4e4:	4603      	mov	r3, r0
    a4e6:	2b00      	cmp	r3, #0
    a4e8:	d012      	beq.n	a510 <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    a4ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a4ee:	9a02      	ldr	r2, [sp, #8]
    a4f0:	011b      	lsls	r3, r3, #4
    a4f2:	4413      	add	r3, r2
    a4f4:	3304      	adds	r3, #4
    a4f6:	681b      	ldr	r3, [r3, #0]
    a4f8:	2b01      	cmp	r3, #1
    a4fa:	d109      	bne.n	a510 <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    a4fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a500:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a504:	4611      	mov	r1, r2
    a506:	4618      	mov	r0, r3
    a508:	f7fe fd74 	bl	8ff4 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    a50c:	e000      	b.n	a510 <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    a50e:	bf00      	nop
}
    a510:	bf00      	nop
    a512:	b005      	add	sp, #20
    a514:	f85d fb04 	ldr.w	pc, [sp], #4
    a518:	0000f4f4 	.word	0x0000f4f4
    a51c:	1fff8fa0 	.word	0x1fff8fa0

0000a520 <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    a520:	b510      	push	{r4, lr}
    a522:	b086      	sub	sp, #24
    a524:	4603      	mov	r3, r0
    a526:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    a52a:	2301      	movs	r3, #1
    a52c:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a52e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a532:	4a15      	ldr	r2, [pc, #84]	; (a588 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    a534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a538:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a53a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a53e:	4a13      	ldr	r2, [pc, #76]	; (a58c <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    a540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a544:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    a546:	2300      	movs	r3, #0
    a548:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    a54a:	9b04      	ldr	r3, [sp, #16]
    a54c:	6a1b      	ldr	r3, [r3, #32]
    a54e:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    a550:	9b02      	ldr	r3, [sp, #8]
    a552:	f003 0304 	and.w	r3, r3, #4
    a556:	2b00      	cmp	r3, #0
    a558:	d012      	beq.n	a580 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    a55a:	9b03      	ldr	r3, [sp, #12]
    a55c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a560:	2b00      	cmp	r3, #0
    a562:	d008      	beq.n	a576 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    a564:	9b03      	ldr	r3, [sp, #12]
    a566:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a56a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a56e:	9b03      	ldr	r3, [sp, #12]
    a570:	9a02      	ldr	r2, [sp, #8]
    a572:	2107      	movs	r1, #7
    a574:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    a576:	9b04      	ldr	r3, [sp, #16]
    a578:	2204      	movs	r2, #4
    a57a:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    a57c:	2300      	movs	r3, #0
    a57e:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    a580:	9b05      	ldr	r3, [sp, #20]
}
    a582:	4618      	mov	r0, r3
    a584:	b006      	add	sp, #24
    a586:	bd10      	pop	{r4, pc}
    a588:	0000f4f4 	.word	0x0000f4f4
    a58c:	1fff8fa0 	.word	0x1fff8fa0

0000a590 <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    a590:	b510      	push	{r4, lr}
    a592:	b098      	sub	sp, #96	; 0x60
    a594:	4603      	mov	r3, r0
    a596:	460a      	mov	r2, r1
    a598:	f88d 3007 	strb.w	r3, [sp, #7]
    a59c:	4613      	mov	r3, r2
    a59e:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a5a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5a6:	4a3f      	ldr	r2, [pc, #252]	; (a6a4 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    a5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5ac:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a5ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5b2:	4a3d      	ldr	r2, [pc, #244]	; (a6a8 <FlexCAN_Ip_MainFunctionWrite+0x118>)
    a5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5b8:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    a5ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5be:	4619      	mov	r1, r3
    a5c0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a5c2:	f7fe f860 	bl	8686 <FlexCAN_GetBuffStatusFlag>
    a5c6:	4603      	mov	r3, r0
    a5c8:	2b00      	cmp	r3, #0
    a5ca:	d068      	beq.n	a69e <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    a5cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a5d2:	011b      	lsls	r3, r3, #4
    a5d4:	4413      	add	r3, r2
    a5d6:	3304      	adds	r3, #4
    a5d8:	681b      	ldr	r3, [r3, #0]
    a5da:	2b02      	cmp	r3, #2
    a5dc:	d15f      	bne.n	a69e <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    a5de:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a5e4:	011b      	lsls	r3, r3, #4
    a5e6:	4413      	add	r3, r2
    a5e8:	3309      	adds	r3, #9
    a5ea:	781b      	ldrb	r3, [r3, #0]
    a5ec:	2b00      	cmp	r3, #0
    a5ee:	d028      	beq.n	a642 <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    a5f0:	2300      	movs	r3, #0
    a5f2:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    a5f4:	2300      	movs	r3, #0
    a5f6:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    a5f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5fc:	4619      	mov	r1, r3
    a5fe:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a600:	f001 fa87 	bl	bb12 <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    a604:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a608:	aa02      	add	r2, sp, #8
    a60a:	4619      	mov	r1, r3
    a60c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a60e:	f001 fbaf 	bl	bd70 <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    a612:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a614:	f7fe f81d 	bl	8652 <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    a618:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a61c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a61e:	9916      	ldr	r1, [sp, #88]	; 0x58
    a620:	011b      	lsls	r3, r3, #4
    a622:	440b      	add	r3, r1
    a624:	330c      	adds	r3, #12
    a626:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    a628:	9b02      	ldr	r3, [sp, #8]
    a62a:	0e1b      	lsrs	r3, r3, #24
    a62c:	f003 030f 	and.w	r3, r3, #15
    a630:	2b04      	cmp	r3, #4
    a632:	d11d      	bne.n	a670 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a634:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a638:	4619      	mov	r1, r3
    a63a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a63c:	f7fe f810 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
    a640:	e016      	b.n	a670 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    a642:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a646:	f89d 4006 	ldrb.w	r4, [sp, #6]
    a64a:	4619      	mov	r1, r3
    a64c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a64e:	f001 fb7b 	bl	bd48 <FlexCAN_GetMsgBuffTimestamp>
    a652:	4601      	mov	r1, r0
    a654:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a656:	0123      	lsls	r3, r4, #4
    a658:	4413      	add	r3, r2
    a65a:	330c      	adds	r3, #12
    a65c:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    a65e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a660:	f7fd fff7 	bl	8652 <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a664:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a668:	4619      	mov	r1, r3
    a66a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a66c:	f7fd fff8 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    a670:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a674:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a676:	011b      	lsls	r3, r3, #4
    a678:	4413      	add	r3, r2
    a67a:	3304      	adds	r3, #4
    a67c:	2200      	movs	r2, #0
    a67e:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    a680:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a682:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    a686:	2b00      	cmp	r3, #0
    a688:	d009      	beq.n	a69e <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    a68a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a68c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    a690:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a694:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a698:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a69a:	2104      	movs	r1, #4
    a69c:	47a0      	blx	r4
            }
        }
    }
}
    a69e:	bf00      	nop
    a6a0:	b018      	add	sp, #96	; 0x60
    a6a2:	bd10      	pop	{r4, pc}
    a6a4:	0000f4f4 	.word	0x0000f4f4
    a6a8:	1fff8fa0 	.word	0x1fff8fa0

0000a6ac <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    a6ac:	b084      	sub	sp, #16
    a6ae:	4603      	mov	r3, r0
    a6b0:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a6b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a6b8:	4a08      	ldr	r2, [pc, #32]	; (a6dc <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    a6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6be:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    a6c0:	9b03      	ldr	r3, [sp, #12]
    a6c2:	681b      	ldr	r3, [r3, #0]
    a6c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    a6c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    a6cc:	bf0c      	ite	eq
    a6ce:	2301      	moveq	r3, #1
    a6d0:	2300      	movne	r3, #0
    a6d2:	b2db      	uxtb	r3, r3
}
    a6d4:	4618      	mov	r0, r3
    a6d6:	b004      	add	sp, #16
    a6d8:	4770      	bx	lr
    a6da:	bf00      	nop
    a6dc:	0000f4f4 	.word	0x0000f4f4

0000a6e0 <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    a6e0:	b084      	sub	sp, #16
    a6e2:	4603      	mov	r3, r0
    a6e4:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a6e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a6ec:	4a07      	ldr	r2, [pc, #28]	; (a70c <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    a6ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6f2:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    a6f4:	9b03      	ldr	r3, [sp, #12]
    a6f6:	681b      	ldr	r3, [r3, #0]
    a6f8:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    a6fc:	2b00      	cmp	r3, #0
    a6fe:	bf0c      	ite	eq
    a700:	2301      	moveq	r3, #1
    a702:	2300      	movne	r3, #0
    a704:	b2db      	uxtb	r3, r3
}
    a706:	4618      	mov	r0, r3
    a708:	b004      	add	sp, #16
    a70a:	4770      	bx	lr
    a70c:	0000f4f4 	.word	0x0000f4f4

0000a710 <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    a710:	b500      	push	{lr}
    a712:	b085      	sub	sp, #20
    a714:	4603      	mov	r3, r0
    a716:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a71a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a71e:	4a0b      	ldr	r2, [pc, #44]	; (a74c <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    a720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a724:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    a726:	f002 fb93 	bl	ce50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    a72a:	9b03      	ldr	r3, [sp, #12]
    a72c:	681b      	ldr	r3, [r3, #0]
    a72e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    a732:	9b03      	ldr	r3, [sp, #12]
    a734:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    a736:	f002 fbb7 	bl	cea8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    a73a:	9803      	ldr	r0, [sp, #12]
    a73c:	f000 ff94 	bl	b668 <FlexCAN_ExitFreezeMode>
    a740:	4603      	mov	r3, r0
}
    a742:	4618      	mov	r0, r3
    a744:	b005      	add	sp, #20
    a746:	f85d fb04 	ldr.w	pc, [sp], #4
    a74a:	bf00      	nop
    a74c:	0000f4f4 	.word	0x0000f4f4

0000a750 <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    a750:	b500      	push	{lr}
    a752:	b085      	sub	sp, #20
    a754:	4603      	mov	r3, r0
    a756:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a75a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a75e:	4a0a      	ldr	r2, [pc, #40]	; (a788 <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    a760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a764:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    a766:	9802      	ldr	r0, [sp, #8]
    a768:	f000 fef6 	bl	b558 <FlexCAN_EnterFreezeMode>
    a76c:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    a76e:	9b03      	ldr	r3, [sp, #12]
    a770:	2b00      	cmp	r3, #0
    a772:	d103      	bne.n	a77c <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    a774:	9802      	ldr	r0, [sp, #8]
    a776:	f000 ffb9 	bl	b6ec <FlexCAN_Disable>
    a77a:	9003      	str	r0, [sp, #12]
    }
    return status;
    a77c:	9b03      	ldr	r3, [sp, #12]
}
    a77e:	4618      	mov	r0, r3
    a780:	b005      	add	sp, #20
    a782:	f85d fb04 	ldr.w	pc, [sp], #4
    a786:	bf00      	nop
    a788:	0000f4f4 	.word	0x0000f4f4

0000a78c <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    a78c:	b500      	push	{lr}
    a78e:	b087      	sub	sp, #28
    a790:	4603      	mov	r3, r0
    a792:	9100      	str	r1, [sp, #0]
    a794:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a798:	2300      	movs	r3, #0
    a79a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a79c:	2300      	movs	r3, #0
    a79e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a7a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a7a4:	4a1e      	ldr	r2, [pc, #120]	; (a820 <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    a7a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a7aa:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a7ac:	9803      	ldr	r0, [sp, #12]
    a7ae:	f7fd fefd 	bl	85ac <FlexCAN_IsEnabled>
    a7b2:	4603      	mov	r3, r0
    a7b4:	2b00      	cmp	r3, #0
    a7b6:	bf14      	ite	ne
    a7b8:	2301      	movne	r3, #1
    a7ba:	2300      	moveq	r3, #0
    a7bc:	b2db      	uxtb	r3, r3
    a7be:	f083 0301 	eor.w	r3, r3, #1
    a7c2:	b2db      	uxtb	r3, r3
    a7c4:	f88d 300b 	strb.w	r3, [sp, #11]
    a7c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a7cc:	f003 0301 	and.w	r3, r3, #1
    a7d0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a7d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a7d8:	2b00      	cmp	r3, #0
    a7da:	d003      	beq.n	a7e4 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a7dc:	9803      	ldr	r0, [sp, #12]
    a7de:	f000 ff07 	bl	b5f0 <FlexCAN_Enable>
    a7e2:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a7e4:	9b05      	ldr	r3, [sp, #20]
    a7e6:	2b00      	cmp	r3, #0
    a7e8:	d107      	bne.n	a7fa <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    a7ea:	f002 fb83 	bl	cef4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    a7ee:	9900      	ldr	r1, [sp, #0]
    a7f0:	9803      	ldr	r0, [sp, #12]
    a7f2:	f7fe f930 	bl	8a56 <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    a7f6:	f002 fba9 	bl	cf4c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    a7fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a7fe:	2b00      	cmp	r3, #0
    a800:	d008      	beq.n	a814 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    a802:	9803      	ldr	r0, [sp, #12]
    a804:	f000 ff72 	bl	b6ec <FlexCAN_Disable>
    a808:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a80a:	9b04      	ldr	r3, [sp, #16]
    a80c:	2b00      	cmp	r3, #0
    a80e:	d001      	beq.n	a814 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    a810:	9b04      	ldr	r3, [sp, #16]
    a812:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a814:	9b05      	ldr	r3, [sp, #20]
}
    a816:	4618      	mov	r0, r3
    a818:	b007      	add	sp, #28
    a81a:	f85d fb04 	ldr.w	pc, [sp], #4
    a81e:	bf00      	nop
    a820:	0000f4f4 	.word	0x0000f4f4

0000a824 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    a824:	b500      	push	{lr}
    a826:	b087      	sub	sp, #28
    a828:	4603      	mov	r3, r0
    a82a:	9100      	str	r1, [sp, #0]
    a82c:	f88d 3007 	strb.w	r3, [sp, #7]
    a830:	4613      	mov	r3, r2
    a832:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a836:	2300      	movs	r3, #0
    a838:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a83a:	2300      	movs	r3, #0
    a83c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a83e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a842:	4a1c      	ldr	r2, [pc, #112]	; (a8b4 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    a844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a848:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    a84a:	9b03      	ldr	r3, [sp, #12]
    a84c:	681b      	ldr	r3, [r3, #0]
    a84e:	0fdb      	lsrs	r3, r3, #31
    a850:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    a854:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a858:	2b00      	cmp	r3, #0
    a85a:	d003      	beq.n	a864 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    a85c:	9803      	ldr	r0, [sp, #12]
    a85e:	f000 fec7 	bl	b5f0 <FlexCAN_Enable>
    a862:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a864:	9b05      	ldr	r3, [sp, #20]
    a866:	2b00      	cmp	r3, #0
    a868:	d112      	bne.n	a890 <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    a86a:	f002 fd2f 	bl	d2cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    a86e:	9803      	ldr	r0, [sp, #12]
    a870:	f7fe f830 	bl	88d4 <FlexCAN_IsExCbtEnabled>
    a874:	4603      	mov	r3, r0
    a876:	2b00      	cmp	r3, #0
    a878:	d004      	beq.n	a884 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    a87a:	9900      	ldr	r1, [sp, #0]
    a87c:	9803      	ldr	r0, [sp, #12]
    a87e:	f7fd ff7f 	bl	8780 <FlexCAN_SetExtendedTimeSegments>
    a882:	e003      	b.n	a88c <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    a884:	9900      	ldr	r1, [sp, #0]
    a886:	9803      	ldr	r0, [sp, #12]
    a888:	f7fd ff4e 	bl	8728 <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    a88c:	f002 fd4a 	bl	d324 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    a890:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a894:	2b00      	cmp	r3, #0
    a896:	d008      	beq.n	a8aa <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    a898:	9803      	ldr	r0, [sp, #12]
    a89a:	f000 ff27 	bl	b6ec <FlexCAN_Disable>
    a89e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a8a0:	9b04      	ldr	r3, [sp, #16]
    a8a2:	2b00      	cmp	r3, #0
    a8a4:	d001      	beq.n	a8aa <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    a8a6:	9b04      	ldr	r3, [sp, #16]
    a8a8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a8aa:	9b05      	ldr	r3, [sp, #20]
}
    a8ac:	4618      	mov	r0, r3
    a8ae:	b007      	add	sp, #28
    a8b0:	f85d fb04 	ldr.w	pc, [sp], #4
    a8b4:	0000f4f4 	.word	0x0000f4f4

0000a8b8 <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    a8b8:	b500      	push	{lr}
    a8ba:	b085      	sub	sp, #20
    a8bc:	4603      	mov	r3, r0
    a8be:	9100      	str	r1, [sp, #0]
    a8c0:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a8c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a8c8:	4a0d      	ldr	r2, [pc, #52]	; (a900 <FlexCAN_Ip_GetBitrate+0x48>)
    a8ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8ce:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    a8d0:	2300      	movs	r3, #0
    a8d2:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    a8d6:	9803      	ldr	r0, [sp, #12]
    a8d8:	f7fd fffc 	bl	88d4 <FlexCAN_IsExCbtEnabled>
    a8dc:	4603      	mov	r3, r0
    a8de:	2b00      	cmp	r3, #0
    a8e0:	d004      	beq.n	a8ec <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    a8e2:	9900      	ldr	r1, [sp, #0]
    a8e4:	9803      	ldr	r0, [sp, #12]
    a8e6:	f7fd ff79 	bl	87dc <FlexCAN_GetExtendedTimeSegments>
    a8ea:	e003      	b.n	a8f4 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    a8ec:	9900      	ldr	r1, [sp, #0]
    a8ee:	9803      	ldr	r0, [sp, #12]
    a8f0:	f7fd ff9c 	bl	882c <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    a8f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    a8f8:	4618      	mov	r0, r3
    a8fa:	b005      	add	sp, #20
    a8fc:	f85d fb04 	ldr.w	pc, [sp], #4
    a900:	0000f4f4 	.word	0x0000f4f4

0000a904 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    a904:	b500      	push	{lr}
    a906:	b085      	sub	sp, #20
    a908:	4603      	mov	r3, r0
    a90a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    a90e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a912:	4a0a      	ldr	r2, [pc, #40]	; (a93c <FlexCAN_Ip_ClearTDCFail+0x38>)
    a914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a918:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    a91a:	f002 fb3d 	bl	cf98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    a91e:	9b03      	ldr	r3, [sp, #12]
    a920:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    a924:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    a928:	9b03      	ldr	r3, [sp, #12]
    a92a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    a92e:	f002 fb5f 	bl	cff0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    a932:	bf00      	nop
    a934:	b005      	add	sp, #20
    a936:	f85d fb04 	ldr.w	pc, [sp], #4
    a93a:	bf00      	nop
    a93c:	0000f4f4 	.word	0x0000f4f4

0000a940 <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    a940:	b084      	sub	sp, #16
    a942:	4603      	mov	r3, r0
    a944:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    a948:	2300      	movs	r3, #0
    a94a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    a94e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a952:	4a0a      	ldr	r2, [pc, #40]	; (a97c <FlexCAN_Ip_GetTDCFail+0x3c>)
    a954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a958:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    a95a:	9b02      	ldr	r3, [sp, #8]
    a95c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    a960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    a968:	bf0c      	ite	eq
    a96a:	2301      	moveq	r3, #1
    a96c:	2300      	movne	r3, #0
    a96e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    a972:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a976:	4618      	mov	r0, r3
    a978:	b004      	add	sp, #16
    a97a:	4770      	bx	lr
    a97c:	0000f4f4 	.word	0x0000f4f4

0000a980 <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    a980:	b084      	sub	sp, #16
    a982:	4603      	mov	r3, r0
    a984:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    a988:	2300      	movs	r3, #0
    a98a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    a98e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a992:	4a08      	ldr	r2, [pc, #32]	; (a9b4 <FlexCAN_Ip_GetTDCValue+0x34>)
    a994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a998:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    a99a:	9b02      	ldr	r3, [sp, #8]
    a99c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    a9a0:	b2db      	uxtb	r3, r3
    a9a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a9a6:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    a9aa:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a9ae:	4618      	mov	r0, r3
    a9b0:	b004      	add	sp, #16
    a9b2:	4770      	bx	lr
    a9b4:	0000f4f4 	.word	0x0000f4f4

0000a9b8 <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    a9b8:	b500      	push	{lr}
    a9ba:	b087      	sub	sp, #28
    a9bc:	4603      	mov	r3, r0
    a9be:	9100      	str	r1, [sp, #0]
    a9c0:	f88d 3007 	strb.w	r3, [sp, #7]
    a9c4:	4613      	mov	r3, r2
    a9c6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a9ca:	2300      	movs	r3, #0
    a9cc:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a9ce:	2300      	movs	r3, #0
    a9d0:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a9d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9d6:	4a1e      	ldr	r2, [pc, #120]	; (aa50 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    a9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9dc:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    a9de:	9803      	ldr	r0, [sp, #12]
    a9e0:	f7fd ffaf 	bl	8942 <FlexCAN_IsFDEnabled>
    a9e4:	4603      	mov	r3, r0
    a9e6:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    a9ea:	9b03      	ldr	r3, [sp, #12]
    a9ec:	681b      	ldr	r3, [r3, #0]
    a9ee:	0fdb      	lsrs	r3, r3, #31
    a9f0:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    a9f4:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a9f8:	2b00      	cmp	r3, #0
    a9fa:	d003      	beq.n	aa04 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    a9fc:	9803      	ldr	r0, [sp, #12]
    a9fe:	f000 fdf7 	bl	b5f0 <FlexCAN_Enable>
    aa02:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    aa04:	9b05      	ldr	r3, [sp, #20]
    aa06:	2b00      	cmp	r3, #0
    aa08:	d10f      	bne.n	aa2a <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    aa0a:	f002 fcb1 	bl	d370 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    aa0e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    aa12:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aa16:	4619      	mov	r1, r3
    aa18:	9803      	ldr	r0, [sp, #12]
    aa1a:	f7fd fdd1 	bl	85c0 <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    aa1e:	9900      	ldr	r1, [sp, #0]
    aa20:	9803      	ldr	r0, [sp, #12]
    aa22:	f7fd fe4c 	bl	86be <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    aa26:	f002 fccf 	bl	d3c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    aa2a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    aa2e:	2b00      	cmp	r3, #0
    aa30:	d008      	beq.n	aa44 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    aa32:	9803      	ldr	r0, [sp, #12]
    aa34:	f000 fe5a 	bl	b6ec <FlexCAN_Disable>
    aa38:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    aa3a:	9b04      	ldr	r3, [sp, #16]
    aa3c:	2b00      	cmp	r3, #0
    aa3e:	d001      	beq.n	aa44 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    aa40:	9b04      	ldr	r3, [sp, #16]
    aa42:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    aa44:	9b05      	ldr	r3, [sp, #20]
}
    aa46:	4618      	mov	r0, r3
    aa48:	b007      	add	sp, #28
    aa4a:	f85d fb04 	ldr.w	pc, [sp], #4
    aa4e:	bf00      	nop
    aa50:	0000f4f4 	.word	0x0000f4f4

0000aa54 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    aa54:	b500      	push	{lr}
    aa56:	b085      	sub	sp, #20
    aa58:	4603      	mov	r3, r0
    aa5a:	9100      	str	r1, [sp, #0]
    aa5c:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    aa60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aa64:	4a08      	ldr	r2, [pc, #32]	; (aa88 <FlexCAN_Ip_GetBitrateFD+0x34>)
    aa66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa6a:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    aa6c:	2300      	movs	r3, #0
    aa6e:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    aa72:	9900      	ldr	r1, [sp, #0]
    aa74:	9803      	ldr	r0, [sp, #12]
    aa76:	f7fd ff00 	bl	887a <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    aa7a:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    aa7e:	4618      	mov	r0, r3
    aa80:	b005      	add	sp, #20
    aa82:	f85d fb04 	ldr.w	pc, [sp], #4
    aa86:	bf00      	nop
    aa88:	0000f4f4 	.word	0x0000f4f4

0000aa8c <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    aa8c:	b500      	push	{lr}
    aa8e:	b087      	sub	sp, #28
    aa90:	4603      	mov	r3, r0
    aa92:	f88d 3007 	strb.w	r3, [sp, #7]
    aa96:	460b      	mov	r3, r1
    aa98:	f88d 3006 	strb.w	r3, [sp, #6]
    aa9c:	4613      	mov	r3, r2
    aa9e:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    aaa2:	2300      	movs	r3, #0
    aaa4:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    aaa6:	2300      	movs	r3, #0
    aaa8:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    aaaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aaae:	4a20      	ldr	r2, [pc, #128]	; (ab30 <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    aab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aab4:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    aab6:	9803      	ldr	r0, [sp, #12]
    aab8:	f7fd fd78 	bl	85ac <FlexCAN_IsEnabled>
    aabc:	4603      	mov	r3, r0
    aabe:	2b00      	cmp	r3, #0
    aac0:	bf14      	ite	ne
    aac2:	2301      	movne	r3, #1
    aac4:	2300      	moveq	r3, #0
    aac6:	b2db      	uxtb	r3, r3
    aac8:	f083 0301 	eor.w	r3, r3, #1
    aacc:	b2db      	uxtb	r3, r3
    aace:	f88d 300b 	strb.w	r3, [sp, #11]
    aad2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aad6:	f003 0301 	and.w	r3, r3, #1
    aada:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    aade:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aae2:	2b00      	cmp	r3, #0
    aae4:	d003      	beq.n	aaee <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    aae6:	9803      	ldr	r0, [sp, #12]
    aae8:	f000 fd82 	bl	b5f0 <FlexCAN_Enable>
    aaec:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    aaee:	9b05      	ldr	r3, [sp, #20]
    aaf0:	2b00      	cmp	r3, #0
    aaf2:	d10b      	bne.n	ab0c <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    aaf4:	f002 fc8e 	bl	d414 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    aaf8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    aafc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ab00:	4619      	mov	r1, r3
    ab02:	9803      	ldr	r0, [sp, #12]
    ab04:	f7fd fd2b 	bl	855e <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    ab08:	f002 fcb0 	bl	d46c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    ab0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ab10:	2b00      	cmp	r3, #0
    ab12:	d008      	beq.n	ab26 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    ab14:	9803      	ldr	r0, [sp, #12]
    ab16:	f000 fde9 	bl	b6ec <FlexCAN_Disable>
    ab1a:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ab1c:	9b04      	ldr	r3, [sp, #16]
    ab1e:	2b00      	cmp	r3, #0
    ab20:	d001      	beq.n	ab26 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    ab22:	9b04      	ldr	r3, [sp, #16]
    ab24:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    ab26:	9b05      	ldr	r3, [sp, #20]
}
    ab28:	4618      	mov	r0, r3
    ab2a:	b007      	add	sp, #28
    ab2c:	f85d fb04 	ldr.w	pc, [sp], #4
    ab30:	0000f4f4 	.word	0x0000f4f4

0000ab34 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    ab34:	b500      	push	{lr}
    ab36:	b087      	sub	sp, #28
    ab38:	4603      	mov	r3, r0
    ab3a:	460a      	mov	r2, r1
    ab3c:	f88d 3007 	strb.w	r3, [sp, #7]
    ab40:	4613      	mov	r3, r2
    ab42:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ab46:	2300      	movs	r3, #0
    ab48:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    ab4a:	2300      	movs	r3, #0
    ab4c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ab4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ab52:	4a1f      	ldr	r2, [pc, #124]	; (abd0 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    ab54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab58:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    ab5a:	9803      	ldr	r0, [sp, #12]
    ab5c:	f7fd fd26 	bl	85ac <FlexCAN_IsEnabled>
    ab60:	4603      	mov	r3, r0
    ab62:	2b00      	cmp	r3, #0
    ab64:	bf14      	ite	ne
    ab66:	2301      	movne	r3, #1
    ab68:	2300      	moveq	r3, #0
    ab6a:	b2db      	uxtb	r3, r3
    ab6c:	f083 0301 	eor.w	r3, r3, #1
    ab70:	b2db      	uxtb	r3, r3
    ab72:	f88d 300b 	strb.w	r3, [sp, #11]
    ab76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ab7a:	f003 0301 	and.w	r3, r3, #1
    ab7e:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    ab82:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ab86:	2b00      	cmp	r3, #0
    ab88:	d003      	beq.n	ab92 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    ab8a:	9803      	ldr	r0, [sp, #12]
    ab8c:	f000 fd30 	bl	b5f0 <FlexCAN_Enable>
    ab90:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    ab92:	9b05      	ldr	r3, [sp, #20]
    ab94:	2b00      	cmp	r3, #0
    ab96:	d109      	bne.n	abac <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    ab98:	f002 fc8e 	bl	d4b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    ab9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aba0:	4619      	mov	r1, r3
    aba2:	9803      	ldr	r0, [sp, #12]
    aba4:	f7fd ff43 	bl	8a2e <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    aba8:	f002 fcb2 	bl	d510 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    abac:	f89d 300b 	ldrb.w	r3, [sp, #11]
    abb0:	2b00      	cmp	r3, #0
    abb2:	d008      	beq.n	abc6 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    abb4:	9803      	ldr	r0, [sp, #12]
    abb6:	f000 fd99 	bl	b6ec <FlexCAN_Disable>
    abba:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    abbc:	9b04      	ldr	r3, [sp, #16]
    abbe:	2b00      	cmp	r3, #0
    abc0:	d001      	beq.n	abc6 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    abc2:	9b04      	ldr	r3, [sp, #16]
    abc4:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    abc6:	9b05      	ldr	r3, [sp, #20]
}
    abc8:	4618      	mov	r0, r3
    abca:	b007      	add	sp, #28
    abcc:	f85d fb04 	ldr.w	pc, [sp], #4
    abd0:	0000f4f4 	.word	0x0000f4f4

0000abd4 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    abd4:	b500      	push	{lr}
    abd6:	b085      	sub	sp, #20
    abd8:	4603      	mov	r3, r0
    abda:	460a      	mov	r2, r1
    abdc:	f88d 3007 	strb.w	r3, [sp, #7]
    abe0:	4613      	mov	r3, r2
    abe2:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    abe6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    abea:	4a0b      	ldr	r2, [pc, #44]	; (ac18 <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    abec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abf0:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    abf2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abf6:	4619      	mov	r1, r3
    abf8:	9803      	ldr	r0, [sp, #12]
    abfa:	f7fd fd44 	bl	8686 <FlexCAN_GetBuffStatusFlag>
    abfe:	4603      	mov	r3, r0
    ac00:	2b01      	cmp	r3, #1
    ac02:	bf0c      	ite	eq
    ac04:	2301      	moveq	r3, #1
    ac06:	2300      	movne	r3, #0
    ac08:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    ac0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    ac10:	4618      	mov	r0, r3
    ac12:	b005      	add	sp, #20
    ac14:	f85d fb04 	ldr.w	pc, [sp], #4
    ac18:	0000f4f4 	.word	0x0000f4f4

0000ac1c <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    ac1c:	b500      	push	{lr}
    ac1e:	b085      	sub	sp, #20
    ac20:	4603      	mov	r3, r0
    ac22:	460a      	mov	r2, r1
    ac24:	f88d 3007 	strb.w	r3, [sp, #7]
    ac28:	4613      	mov	r3, r2
    ac2a:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ac2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac32:	4a07      	ldr	r2, [pc, #28]	; (ac50 <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    ac34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac38:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    ac3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ac3e:	4619      	mov	r1, r3
    ac40:	9803      	ldr	r0, [sp, #12]
    ac42:	f7fd fd0d 	bl	8660 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    ac46:	bf00      	nop
    ac48:	b005      	add	sp, #20
    ac4a:	f85d fb04 	ldr.w	pc, [sp], #4
    ac4e:	bf00      	nop
    ac50:	0000f4f4 	.word	0x0000f4f4

0000ac54 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    ac54:	b500      	push	{lr}
    ac56:	b087      	sub	sp, #28
    ac58:	4603      	mov	r3, r0
    ac5a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    ac5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac62:	4a11      	ldr	r2, [pc, #68]	; (aca8 <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    ac64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac68:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    ac6a:	2301      	movs	r3, #1
    ac6c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    ac6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac72:	4a0e      	ldr	r2, [pc, #56]	; (acac <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    ac74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac78:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    ac7a:	9804      	ldr	r0, [sp, #16]
    ac7c:	f7fd fc96 	bl	85ac <FlexCAN_IsEnabled>
    ac80:	4603      	mov	r3, r0
    ac82:	2b00      	cmp	r3, #0
    ac84:	d00b      	beq.n	ac9e <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    ac86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac8a:	4619      	mov	r1, r3
    ac8c:	9804      	ldr	r0, [sp, #16]
    ac8e:	f000 ffe1 	bl	bc54 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    ac92:	9b03      	ldr	r3, [sp, #12]
    ac94:	2201      	movs	r2, #1
    ac96:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    ac9a:	2300      	movs	r3, #0
    ac9c:	9305      	str	r3, [sp, #20]
    }

    return result;
    ac9e:	9b05      	ldr	r3, [sp, #20]
}
    aca0:	4618      	mov	r0, r3
    aca2:	b007      	add	sp, #28
    aca4:	f85d fb04 	ldr.w	pc, [sp], #4
    aca8:	0000f4f4 	.word	0x0000f4f4
    acac:	1fff8fa0 	.word	0x1fff8fa0

0000acb0 <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    acb0:	b500      	push	{lr}
    acb2:	b087      	sub	sp, #28
    acb4:	4603      	mov	r3, r0
    acb6:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    acba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    acbe:	4a10      	ldr	r2, [pc, #64]	; (ad00 <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    acc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acc4:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    acc6:	2301      	movs	r3, #1
    acc8:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    acca:	f89d 3007 	ldrb.w	r3, [sp, #7]
    acce:	4a0d      	ldr	r2, [pc, #52]	; (ad04 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    acd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acd4:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    acd6:	9804      	ldr	r0, [sp, #16]
    acd8:	f7fd fc68 	bl	85ac <FlexCAN_IsEnabled>
    acdc:	4603      	mov	r3, r0
    acde:	2b00      	cmp	r3, #0
    ace0:	d008      	beq.n	acf4 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    ace2:	9804      	ldr	r0, [sp, #16]
    ace4:	f000 ffae 	bl	bc44 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    ace8:	9b03      	ldr	r3, [sp, #12]
    acea:	2200      	movs	r2, #0
    acec:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    acf0:	2300      	movs	r3, #0
    acf2:	9305      	str	r3, [sp, #20]
    }

    return result;
    acf4:	9b05      	ldr	r3, [sp, #20]
}
    acf6:	4618      	mov	r0, r3
    acf8:	b007      	add	sp, #28
    acfa:	f85d fb04 	ldr.w	pc, [sp], #4
    acfe:	bf00      	nop
    ad00:	0000f4f4 	.word	0x0000f4f4
    ad04:	1fff8fa0 	.word	0x1fff8fa0

0000ad08 <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    ad08:	b500      	push	{lr}
    ad0a:	b087      	sub	sp, #28
    ad0c:	4603      	mov	r3, r0
    ad0e:	9100      	str	r1, [sp, #0]
    ad10:	f88d 3007 	strb.w	r3, [sp, #7]
    ad14:	4613      	mov	r3, r2
    ad16:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ad1a:	2300      	movs	r3, #0
    ad1c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    ad1e:	2300      	movs	r3, #0
    ad20:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    ad22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ad26:	4a3a      	ldr	r2, [pc, #232]	; (ae10 <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    ad28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad2c:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    ad2e:	9803      	ldr	r0, [sp, #12]
    ad30:	f7fd fc3c 	bl	85ac <FlexCAN_IsEnabled>
    ad34:	4603      	mov	r3, r0
    ad36:	2b00      	cmp	r3, #0
    ad38:	bf14      	ite	ne
    ad3a:	2301      	movne	r3, #1
    ad3c:	2300      	moveq	r3, #0
    ad3e:	b2db      	uxtb	r3, r3
    ad40:	f083 0301 	eor.w	r3, r3, #1
    ad44:	b2db      	uxtb	r3, r3
    ad46:	f88d 300b 	strb.w	r3, [sp, #11]
    ad4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad4e:	f003 0301 	and.w	r3, r3, #1
    ad52:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    ad56:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad5a:	2b00      	cmp	r3, #0
    ad5c:	d003      	beq.n	ad66 <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    ad5e:	9803      	ldr	r0, [sp, #12]
    ad60:	f000 fc46 	bl	b5f0 <FlexCAN_Enable>
    ad64:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    ad66:	9b05      	ldr	r3, [sp, #20]
    ad68:	2b00      	cmp	r3, #0
    ad6a:	d13c      	bne.n	ade6 <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    ad6c:	9b00      	ldr	r3, [sp, #0]
    ad6e:	2b04      	cmp	r3, #4
    ad70:	d83b      	bhi.n	adea <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    ad72:	a201      	add	r2, pc, #4	; (adr r2, ad78 <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    ad74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ad78:	0000adc3 	.word	0x0000adc3
    ad7c:	0000add5 	.word	0x0000add5
    ad80:	0000ad9f 	.word	0x0000ad9f
    ad84:	0000adb1 	.word	0x0000adb1
    ad88:	0000ad8d 	.word	0x0000ad8d
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    ad8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ad90:	461a      	mov	r2, r3
    ad92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    ad96:	9803      	ldr	r0, [sp, #12]
    ad98:	f000 fce8 	bl	b76c <FlexCAN_SetErrIntCmd>
                break;
    ad9c:	e026      	b.n	adec <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    ad9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ada2:	461a      	mov	r2, r3
    ada4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    ada8:	9803      	ldr	r0, [sp, #12]
    adaa:	f000 fcdf 	bl	b76c <FlexCAN_SetErrIntCmd>
                break;
    adae:	e01d      	b.n	adec <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    adb0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    adb4:	461a      	mov	r2, r3
    adb6:	f244 0101 	movw	r1, #16385	; 0x4001
    adba:	9803      	ldr	r0, [sp, #12]
    adbc:	f000 fcd6 	bl	b76c <FlexCAN_SetErrIntCmd>
                break;
    adc0:	e014      	b.n	adec <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    adc2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    adc6:	461a      	mov	r2, r3
    adc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    adcc:	9803      	ldr	r0, [sp, #12]
    adce:	f000 fccd 	bl	b76c <FlexCAN_SetErrIntCmd>
                }
                break;
    add2:	e00b      	b.n	adec <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    add4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    add8:	461a      	mov	r2, r3
    adda:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adde:	9803      	ldr	r0, [sp, #12]
    ade0:	f000 fcc4 	bl	b76c <FlexCAN_SetErrIntCmd>
                }
                break;
    ade4:	e002      	b.n	adec <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    ade6:	bf00      	nop
    ade8:	e000      	b.n	adec <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    adea:	bf00      	nop

    if (TRUE == disabled)
    adec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    adf0:	2b00      	cmp	r3, #0
    adf2:	d008      	beq.n	ae06 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    adf4:	9803      	ldr	r0, [sp, #12]
    adf6:	f000 fc79 	bl	b6ec <FlexCAN_Disable>
    adfa:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    adfc:	9b04      	ldr	r3, [sp, #16]
    adfe:	2b00      	cmp	r3, #0
    ae00:	d001      	beq.n	ae06 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    ae02:	9b04      	ldr	r3, [sp, #16]
    ae04:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    ae06:	9b05      	ldr	r3, [sp, #20]
}
    ae08:	4618      	mov	r0, r3
    ae0a:	b007      	add	sp, #28
    ae0c:	f85d fb04 	ldr.w	pc, [sp], #4
    ae10:	0000f4f4 	.word	0x0000f4f4

0000ae14 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    ae14:	b500      	push	{lr}
    ae16:	b087      	sub	sp, #28
    ae18:	4603      	mov	r3, r0
    ae1a:	460a      	mov	r2, r1
    ae1c:	f88d 3007 	strb.w	r3, [sp, #7]
    ae20:	4613      	mov	r3, r2
    ae22:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    ae26:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae2a:	4a27      	ldr	r2, [pc, #156]	; (aec8 <FlexCAN_Ip_AbortTransfer+0xb4>)
    ae2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae30:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    ae32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae36:	4a25      	ldr	r2, [pc, #148]	; (aecc <FlexCAN_Ip_AbortTransfer+0xb8>)
    ae38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae3c:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ae3e:	2300      	movs	r3, #0
    ae40:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    ae42:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae46:	2b1f      	cmp	r3, #31
    ae48:	d838      	bhi.n	aebc <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    ae4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae4e:	9a03      	ldr	r2, [sp, #12]
    ae50:	011b      	lsls	r3, r3, #4
    ae52:	4413      	add	r3, r2
    ae54:	3304      	adds	r3, #4
    ae56:	681b      	ldr	r3, [r3, #0]
    ae58:	2b00      	cmp	r3, #0
    ae5a:	d102      	bne.n	ae62 <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    ae5c:	2305      	movs	r3, #5
    ae5e:	9305      	str	r3, [sp, #20]
    ae60:	e02c      	b.n	aebc <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    ae62:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ae66:	9b03      	ldr	r3, [sp, #12]
    ae68:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    ae6c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    ae70:	9804      	ldr	r0, [sp, #16]
    ae72:	f000 feb3 	bl	bbdc <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    ae76:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae7a:	9a03      	ldr	r2, [sp, #12]
    ae7c:	011b      	lsls	r3, r3, #4
    ae7e:	4413      	add	r3, r2
    ae80:	3304      	adds	r3, #4
    ae82:	681b      	ldr	r3, [r3, #0]
    ae84:	2b02      	cmp	r3, #2
    ae86:	d108      	bne.n	ae9a <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    ae88:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ae8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae90:	4611      	mov	r1, r2
    ae92:	4618      	mov	r0, r3
    ae94:	f7fe fabc 	bl	9410 <FlexCAN_AbortTxTransfer>
    ae98:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    ae9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae9e:	9a03      	ldr	r2, [sp, #12]
    aea0:	011b      	lsls	r3, r3, #4
    aea2:	4413      	add	r3, r2
    aea4:	3304      	adds	r3, #4
    aea6:	681b      	ldr	r3, [r3, #0]
    aea8:	2b01      	cmp	r3, #1
    aeaa:	d107      	bne.n	aebc <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    aeac:	f89d 2006 	ldrb.w	r2, [sp, #6]
    aeb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aeb4:	4611      	mov	r1, r2
    aeb6:	4618      	mov	r0, r3
    aeb8:	f7fe fb34 	bl	9524 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    aebc:	9b05      	ldr	r3, [sp, #20]
}
    aebe:	4618      	mov	r0, r3
    aec0:	b007      	add	sp, #28
    aec2:	f85d fb04 	ldr.w	pc, [sp], #4
    aec6:	bf00      	nop
    aec8:	0000f4f4 	.word	0x0000f4f4
    aecc:	1fff8fa0 	.word	0x1fff8fa0

0000aed0 <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    aed0:	b500      	push	{lr}
    aed2:	b087      	sub	sp, #28
    aed4:	4603      	mov	r3, r0
    aed6:	9100      	str	r1, [sp, #0]
    aed8:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    aedc:	2300      	movs	r3, #0
    aede:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    aee0:	2300      	movs	r3, #0
    aee2:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    aee4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aee8:	4a1b      	ldr	r2, [pc, #108]	; (af58 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    aeea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aeee:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    aef0:	9803      	ldr	r0, [sp, #12]
    aef2:	f7fd fb5b 	bl	85ac <FlexCAN_IsEnabled>
    aef6:	4603      	mov	r3, r0
    aef8:	2b00      	cmp	r3, #0
    aefa:	bf14      	ite	ne
    aefc:	2301      	movne	r3, #1
    aefe:	2300      	moveq	r3, #0
    af00:	b2db      	uxtb	r3, r3
    af02:	f083 0301 	eor.w	r3, r3, #1
    af06:	b2db      	uxtb	r3, r3
    af08:	f88d 300b 	strb.w	r3, [sp, #11]
    af0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    af10:	f003 0301 	and.w	r3, r3, #1
    af14:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    af18:	f89d 300b 	ldrb.w	r3, [sp, #11]
    af1c:	2b00      	cmp	r3, #0
    af1e:	d003      	beq.n	af28 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    af20:	9803      	ldr	r0, [sp, #12]
    af22:	f000 fb65 	bl	b5f0 <FlexCAN_Enable>
    af26:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    af28:	9b05      	ldr	r3, [sp, #20]
    af2a:	2b00      	cmp	r3, #0
    af2c:	d102      	bne.n	af34 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    af2e:	9b03      	ldr	r3, [sp, #12]
    af30:	9a00      	ldr	r2, [sp, #0]
    af32:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    af34:	f89d 300b 	ldrb.w	r3, [sp, #11]
    af38:	2b00      	cmp	r3, #0
    af3a:	d008      	beq.n	af4e <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    af3c:	9803      	ldr	r0, [sp, #12]
    af3e:	f000 fbd5 	bl	b6ec <FlexCAN_Disable>
    af42:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    af44:	9b04      	ldr	r3, [sp, #16]
    af46:	2b00      	cmp	r3, #0
    af48:	d001      	beq.n	af4e <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    af4a:	9b04      	ldr	r3, [sp, #16]
    af4c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    af4e:	9b05      	ldr	r3, [sp, #20]
}
    af50:	4618      	mov	r0, r3
    af52:	b007      	add	sp, #28
    af54:	f85d fb04 	ldr.w	pc, [sp], #4
    af58:	0000f4f4 	.word	0x0000f4f4

0000af5c <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    af5c:	b500      	push	{lr}
    af5e:	b087      	sub	sp, #28
    af60:	4603      	mov	r3, r0
    af62:	9100      	str	r1, [sp, #0]
    af64:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    af68:	2300      	movs	r3, #0
    af6a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    af6c:	2300      	movs	r3, #0
    af6e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    af70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af74:	4a1b      	ldr	r2, [pc, #108]	; (afe4 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    af76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af7a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    af7c:	9803      	ldr	r0, [sp, #12]
    af7e:	f7fd fb15 	bl	85ac <FlexCAN_IsEnabled>
    af82:	4603      	mov	r3, r0
    af84:	2b00      	cmp	r3, #0
    af86:	bf14      	ite	ne
    af88:	2301      	movne	r3, #1
    af8a:	2300      	moveq	r3, #0
    af8c:	b2db      	uxtb	r3, r3
    af8e:	f083 0301 	eor.w	r3, r3, #1
    af92:	b2db      	uxtb	r3, r3
    af94:	f88d 300b 	strb.w	r3, [sp, #11]
    af98:	f89d 300b 	ldrb.w	r3, [sp, #11]
    af9c:	f003 0301 	and.w	r3, r3, #1
    afa0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    afa4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    afa8:	2b00      	cmp	r3, #0
    afaa:	d003      	beq.n	afb4 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    afac:	9803      	ldr	r0, [sp, #12]
    afae:	f000 fb1f 	bl	b5f0 <FlexCAN_Enable>
    afb2:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    afb4:	9b05      	ldr	r3, [sp, #20]
    afb6:	2b00      	cmp	r3, #0
    afb8:	d102      	bne.n	afc0 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    afba:	9b03      	ldr	r3, [sp, #12]
    afbc:	9a00      	ldr	r2, [sp, #0]
    afbe:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    afc0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    afc4:	2b00      	cmp	r3, #0
    afc6:	d008      	beq.n	afda <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    afc8:	9803      	ldr	r0, [sp, #12]
    afca:	f000 fb8f 	bl	b6ec <FlexCAN_Disable>
    afce:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    afd0:	9b04      	ldr	r3, [sp, #16]
    afd2:	2b00      	cmp	r3, #0
    afd4:	d001      	beq.n	afda <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    afd6:	9b04      	ldr	r3, [sp, #16]
    afd8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    afda:	9b05      	ldr	r3, [sp, #20]
}
    afdc:	4618      	mov	r0, r3
    afde:	b007      	add	sp, #28
    afe0:	f85d fb04 	ldr.w	pc, [sp], #4
    afe4:	0000f4f4 	.word	0x0000f4f4

0000afe8 <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    afe8:	b500      	push	{lr}
    afea:	b087      	sub	sp, #28
    afec:	4603      	mov	r3, r0
    afee:	460a      	mov	r2, r1
    aff0:	f88d 3007 	strb.w	r3, [sp, #7]
    aff4:	4613      	mov	r3, r2
    aff6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    affa:	2300      	movs	r3, #0
    affc:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    affe:	2300      	movs	r3, #0
    b000:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b002:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b006:	4a1f      	ldr	r2, [pc, #124]	; (b084 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    b008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b00c:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b00e:	9803      	ldr	r0, [sp, #12]
    b010:	f7fd facc 	bl	85ac <FlexCAN_IsEnabled>
    b014:	4603      	mov	r3, r0
    b016:	2b00      	cmp	r3, #0
    b018:	bf14      	ite	ne
    b01a:	2301      	movne	r3, #1
    b01c:	2300      	moveq	r3, #0
    b01e:	b2db      	uxtb	r3, r3
    b020:	f083 0301 	eor.w	r3, r3, #1
    b024:	b2db      	uxtb	r3, r3
    b026:	f88d 300b 	strb.w	r3, [sp, #11]
    b02a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b02e:	f003 0301 	and.w	r3, r3, #1
    b032:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b036:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b03a:	2b00      	cmp	r3, #0
    b03c:	d003      	beq.n	b046 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    b03e:	9803      	ldr	r0, [sp, #12]
    b040:	f000 fad6 	bl	b5f0 <FlexCAN_Enable>
    b044:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b046:	9b05      	ldr	r3, [sp, #20]
    b048:	2b00      	cmp	r3, #0
    b04a:	d109      	bne.n	b060 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    b04c:	f001 fff6 	bl	d03c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    b050:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b054:	4619      	mov	r1, r3
    b056:	9803      	ldr	r0, [sp, #12]
    b058:	f7fd fae5 	bl	8626 <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    b05c:	f002 f81a 	bl	d094 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    b060:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b064:	2b00      	cmp	r3, #0
    b066:	d008      	beq.n	b07a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    b068:	9803      	ldr	r0, [sp, #12]
    b06a:	f000 fb3f 	bl	b6ec <FlexCAN_Disable>
    b06e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b070:	9b04      	ldr	r3, [sp, #16]
    b072:	2b00      	cmp	r3, #0
    b074:	d001      	beq.n	b07a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    b076:	9b04      	ldr	r3, [sp, #16]
    b078:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b07a:	9b05      	ldr	r3, [sp, #20]
}
    b07c:	4618      	mov	r0, r3
    b07e:	b007      	add	sp, #28
    b080:	f85d fb04 	ldr.w	pc, [sp], #4
    b084:	0000f4f4 	.word	0x0000f4f4

0000b088 <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    b088:	b500      	push	{lr}
    b08a:	b085      	sub	sp, #20
    b08c:	4603      	mov	r3, r0
    b08e:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    b092:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b096:	4a06      	ldr	r2, [pc, #24]	; (b0b0 <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    b098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b09c:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    b09e:	9803      	ldr	r0, [sp, #12]
    b0a0:	f7fd fc5d 	bl	895e <FlexCAN_IsListenOnlyModeEnabled>
    b0a4:	4603      	mov	r3, r0
}
    b0a6:	4618      	mov	r0, r3
    b0a8:	b005      	add	sp, #20
    b0aa:	f85d fb04 	ldr.w	pc, [sp], #4
    b0ae:	bf00      	nop
    b0b0:	0000f4f4 	.word	0x0000f4f4

0000b0b4 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    b0b4:	b500      	push	{lr}
    b0b6:	b089      	sub	sp, #36	; 0x24
    b0b8:	4603      	mov	r3, r0
    b0ba:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    b0be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b0c2:	4a27      	ldr	r2, [pc, #156]	; (b160 <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    b0c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0c8:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    b0ca:	2300      	movs	r3, #0
    b0cc:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    b0ce:	2300      	movs	r3, #0
    b0d0:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b0d2:	2100      	movs	r1, #0
    b0d4:	4823      	ldr	r0, [pc, #140]	; (b164 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    b0d6:	f7f6 fdcd 	bl	1c74 <OsIf_MicrosToTicks>
    b0da:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    b0dc:	2301      	movs	r3, #1
    b0de:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    b0e0:	9b05      	ldr	r3, [sp, #20]
    b0e2:	685b      	ldr	r3, [r3, #4]
    b0e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b0e8:	2b00      	cmp	r3, #0
    b0ea:	d033      	beq.n	b154 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    b0ec:	2300      	movs	r3, #0
    b0ee:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    b0f0:	9b05      	ldr	r3, [sp, #20]
    b0f2:	6a1b      	ldr	r3, [r3, #32]
    b0f4:	f003 0320 	and.w	r3, r3, #32
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d02b      	beq.n	b154 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    b0fc:	f002 fad2 	bl	d6a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    b100:	9b05      	ldr	r3, [sp, #20]
    b102:	685b      	ldr	r3, [r3, #4]
    b104:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    b108:	9b05      	ldr	r3, [sp, #20]
    b10a:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    b10c:	9b05      	ldr	r3, [sp, #20]
    b10e:	685b      	ldr	r3, [r3, #4]
    b110:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    b114:	9b05      	ldr	r3, [sp, #20]
    b116:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    b118:	f002 faf0 	bl	d6fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b11c:	2000      	movs	r0, #0
    b11e:	f7f6 fd5d 	bl	1bdc <OsIf_GetCounter>
    b122:	4603      	mov	r3, r0
    b124:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    b126:	e00f      	b.n	b148 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b128:	ab03      	add	r3, sp, #12
    b12a:	2100      	movs	r1, #0
    b12c:	4618      	mov	r0, r3
    b12e:	f7f6 fd6e 	bl	1c0e <OsIf_GetElapsed>
    b132:	4602      	mov	r2, r0
    b134:	9b07      	ldr	r3, [sp, #28]
    b136:	4413      	add	r3, r2
    b138:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    b13a:	9a07      	ldr	r2, [sp, #28]
    b13c:	9b04      	ldr	r3, [sp, #16]
    b13e:	429a      	cmp	r2, r3
    b140:	d302      	bcc.n	b148 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    b142:	2303      	movs	r3, #3
    b144:	9306      	str	r3, [sp, #24]
                    break;
    b146:	e005      	b.n	b154 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    b148:	9b05      	ldr	r3, [sp, #20]
    b14a:	6a1b      	ldr	r3, [r3, #32]
    b14c:	f003 0320 	and.w	r3, r3, #32
    b150:	2b00      	cmp	r3, #0
    b152:	d1e9      	bne.n	b128 <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    b154:	9b06      	ldr	r3, [sp, #24]
}
    b156:	4618      	mov	r0, r3
    b158:	b009      	add	sp, #36	; 0x24
    b15a:	f85d fb04 	ldr.w	pc, [sp], #4
    b15e:	bf00      	nop
    b160:	0000f4f4 	.word	0x0000f4f4
    b164:	000f4240 	.word	0x000f4240

0000b168 <FlexCAN_SetSelfReception>:
{
    b168:	b082      	sub	sp, #8
    b16a:	9001      	str	r0, [sp, #4]
    b16c:	460b      	mov	r3, r1
    b16e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    b172:	9b01      	ldr	r3, [sp, #4]
    b174:	681b      	ldr	r3, [r3, #0]
    b176:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    b17a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b17e:	2a00      	cmp	r2, #0
    b180:	d001      	beq.n	b186 <FlexCAN_SetSelfReception+0x1e>
    b182:	2200      	movs	r2, #0
    b184:	e001      	b.n	b18a <FlexCAN_SetSelfReception+0x22>
    b186:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b18a:	431a      	orrs	r2, r3
    b18c:	9b01      	ldr	r3, [sp, #4]
    b18e:	601a      	str	r2, [r3, #0]
}
    b190:	bf00      	nop
    b192:	b002      	add	sp, #8
    b194:	4770      	bx	lr

0000b196 <FlexCAN_IsFDEnabled>:
{
    b196:	b082      	sub	sp, #8
    b198:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    b19a:	9b01      	ldr	r3, [sp, #4]
    b19c:	681b      	ldr	r3, [r3, #0]
    b19e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b1a2:	2b00      	cmp	r3, #0
    b1a4:	bf14      	ite	ne
    b1a6:	2301      	movne	r3, #1
    b1a8:	2300      	moveq	r3, #0
    b1aa:	b2db      	uxtb	r3, r3
}
    b1ac:	4618      	mov	r0, r3
    b1ae:	b002      	add	sp, #8
    b1b0:	4770      	bx	lr

0000b1b2 <FlexCAN_SetIsoCan>:
{
    b1b2:	b082      	sub	sp, #8
    b1b4:	9001      	str	r0, [sp, #4]
    b1b6:	460b      	mov	r3, r1
    b1b8:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    b1bc:	9b01      	ldr	r3, [sp, #4]
    b1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b1c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b1c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b1c8:	2a00      	cmp	r2, #0
    b1ca:	d002      	beq.n	b1d2 <FlexCAN_SetIsoCan+0x20>
    b1cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    b1d0:	e000      	b.n	b1d4 <FlexCAN_SetIsoCan+0x22>
    b1d2:	2200      	movs	r2, #0
    b1d4:	431a      	orrs	r2, r3
    b1d6:	9b01      	ldr	r3, [sp, #4]
    b1d8:	635a      	str	r2, [r3, #52]	; 0x34
}
    b1da:	bf00      	nop
    b1dc:	b002      	add	sp, #8
    b1de:	4770      	bx	lr

0000b1e0 <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    b1e0:	b082      	sub	sp, #8
    b1e2:	9001      	str	r0, [sp, #4]
    b1e4:	460b      	mov	r3, r1
    b1e6:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    b1ea:	9b01      	ldr	r3, [sp, #4]
    b1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b1ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b1f2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b1f6:	2a00      	cmp	r2, #0
    b1f8:	d002      	beq.n	b200 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    b1fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b1fe:	e000      	b.n	b202 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    b200:	2200      	movs	r2, #0
    b202:	431a      	orrs	r2, r3
    b204:	9b01      	ldr	r3, [sp, #4]
    b206:	635a      	str	r2, [r3, #52]	; 0x34
}
    b208:	bf00      	nop
    b20a:	b002      	add	sp, #8
    b20c:	4770      	bx	lr

0000b20e <FlexCAN_SetProtocolException>:
{
    b20e:	b082      	sub	sp, #8
    b210:	9001      	str	r0, [sp, #4]
    b212:	460b      	mov	r3, r1
    b214:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    b218:	9b01      	ldr	r3, [sp, #4]
    b21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b21c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    b220:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b224:	2a00      	cmp	r2, #0
    b226:	d002      	beq.n	b22e <FlexCAN_SetProtocolException+0x20>
    b228:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b22c:	e000      	b.n	b230 <FlexCAN_SetProtocolException+0x22>
    b22e:	2200      	movs	r2, #0
    b230:	431a      	orrs	r2, r3
    b232:	9b01      	ldr	r3, [sp, #4]
    b234:	635a      	str	r2, [r3, #52]	; 0x34
}
    b236:	bf00      	nop
    b238:	b002      	add	sp, #8
    b23a:	4770      	bx	lr

0000b23c <FlexCAN_SetRemoteReqStore>:
{
    b23c:	b082      	sub	sp, #8
    b23e:	9001      	str	r0, [sp, #4]
    b240:	460b      	mov	r3, r1
    b242:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    b246:	9b01      	ldr	r3, [sp, #4]
    b248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b24a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    b24e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b252:	2a00      	cmp	r2, #0
    b254:	d002      	beq.n	b25c <FlexCAN_SetRemoteReqStore+0x20>
    b256:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b25a:	e000      	b.n	b25e <FlexCAN_SetRemoteReqStore+0x22>
    b25c:	2200      	movs	r2, #0
    b25e:	431a      	orrs	r2, r3
    b260:	9b01      	ldr	r3, [sp, #4]
    b262:	635a      	str	r2, [r3, #52]	; 0x34
}
    b264:	bf00      	nop
    b266:	b002      	add	sp, #8
    b268:	4770      	bx	lr

0000b26a <FlexCAN_SetBusOffAutorecovery>:
{
    b26a:	b082      	sub	sp, #8
    b26c:	9001      	str	r0, [sp, #4]
    b26e:	460b      	mov	r3, r1
    b270:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    b274:	9b01      	ldr	r3, [sp, #4]
    b276:	685b      	ldr	r3, [r3, #4]
    b278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    b27c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b280:	2a00      	cmp	r2, #0
    b282:	d001      	beq.n	b288 <FlexCAN_SetBusOffAutorecovery+0x1e>
    b284:	2200      	movs	r2, #0
    b286:	e000      	b.n	b28a <FlexCAN_SetBusOffAutorecovery+0x20>
    b288:	2240      	movs	r2, #64	; 0x40
    b28a:	431a      	orrs	r2, r3
    b28c:	9b01      	ldr	r3, [sp, #4]
    b28e:	605a      	str	r2, [r3, #4]
}
    b290:	bf00      	nop
    b292:	b002      	add	sp, #8
    b294:	4770      	bx	lr

0000b296 <FlexCAN_SetEdgeFilter>:
{
    b296:	b082      	sub	sp, #8
    b298:	9001      	str	r0, [sp, #4]
    b29a:	460b      	mov	r3, r1
    b29c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    b2a0:	9b01      	ldr	r3, [sp, #4]
    b2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b2a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b2a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b2ac:	2a00      	cmp	r2, #0
    b2ae:	d001      	beq.n	b2b4 <FlexCAN_SetEdgeFilter+0x1e>
    b2b0:	2200      	movs	r2, #0
    b2b2:	e001      	b.n	b2b8 <FlexCAN_SetEdgeFilter+0x22>
    b2b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b2b8:	431a      	orrs	r2, r3
    b2ba:	9b01      	ldr	r3, [sp, #4]
    b2bc:	635a      	str	r2, [r3, #52]	; 0x34
}
    b2be:	bf00      	nop
    b2c0:	b002      	add	sp, #8
    b2c2:	4770      	bx	lr

0000b2c4 <FlexCAN_CanBitSampling>:
{
    b2c4:	b082      	sub	sp, #8
    b2c6:	9001      	str	r0, [sp, #4]
    b2c8:	460b      	mov	r3, r1
    b2ca:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    b2ce:	9b01      	ldr	r3, [sp, #4]
    b2d0:	685b      	ldr	r3, [r3, #4]
    b2d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b2d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b2da:	2a00      	cmp	r2, #0
    b2dc:	d001      	beq.n	b2e2 <FlexCAN_CanBitSampling+0x1e>
    b2de:	2280      	movs	r2, #128	; 0x80
    b2e0:	e000      	b.n	b2e4 <FlexCAN_CanBitSampling+0x20>
    b2e2:	2200      	movs	r2, #0
    b2e4:	431a      	orrs	r2, r3
    b2e6:	9b01      	ldr	r3, [sp, #4]
    b2e8:	605a      	str	r2, [r3, #4]
}
    b2ea:	bf00      	nop
    b2ec:	b002      	add	sp, #8
    b2ee:	4770      	bx	lr

0000b2f0 <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    b2f0:	b084      	sub	sp, #16
    b2f2:	4603      	mov	r3, r0
    b2f4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    b2f8:	23ff      	movs	r3, #255	; 0xff
    b2fa:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    b2fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b300:	2b40      	cmp	r3, #64	; 0x40
    b302:	d804      	bhi.n	b30e <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    b304:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b308:	4a03      	ldr	r2, [pc, #12]	; (b318 <FlexCAN_ComputeDLCValue+0x28>)
    b30a:	5cd3      	ldrb	r3, [r2, r3]
    b30c:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    b30e:	9b03      	ldr	r3, [sp, #12]
    b310:	b2db      	uxtb	r3, r3
}
    b312:	4618      	mov	r0, r3
    b314:	b004      	add	sp, #16
    b316:	4770      	bx	lr
    b318:	0000f500 	.word	0x0000f500

0000b31c <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    b31c:	b500      	push	{lr}
    b31e:	b087      	sub	sp, #28
    b320:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    b322:	9801      	ldr	r0, [sp, #4]
    b324:	f000 f8f6 	bl	b514 <FlexCAN_GetMaxMbNum>
    b328:	4603      	mov	r3, r0
    b32a:	009b      	lsls	r3, r3, #2
    b32c:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    b32e:	9801      	ldr	r0, [sp, #4]
    b330:	f000 f8f0 	bl	b514 <FlexCAN_GetMaxMbNum>
    b334:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    b336:	9b01      	ldr	r3, [sp, #4]
    b338:	3380      	adds	r3, #128	; 0x80
    b33a:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    b33c:	2300      	movs	r3, #0
    b33e:	9305      	str	r3, [sp, #20]
    b340:	e008      	b.n	b354 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    b342:	9b05      	ldr	r3, [sp, #20]
    b344:	009b      	lsls	r3, r3, #2
    b346:	9a02      	ldr	r2, [sp, #8]
    b348:	4413      	add	r3, r2
    b34a:	2200      	movs	r2, #0
    b34c:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    b34e:	9b05      	ldr	r3, [sp, #20]
    b350:	3301      	adds	r3, #1
    b352:	9305      	str	r3, [sp, #20]
    b354:	9a05      	ldr	r2, [sp, #20]
    b356:	9b04      	ldr	r3, [sp, #16]
    b358:	429a      	cmp	r2, r3
    b35a:	d3f2      	bcc.n	b342 <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    b35c:	9b01      	ldr	r3, [sp, #4]
    b35e:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    b362:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    b364:	2300      	movs	r3, #0
    b366:	9305      	str	r3, [sp, #20]
    b368:	e008      	b.n	b37c <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    b36a:	9b05      	ldr	r3, [sp, #20]
    b36c:	009b      	lsls	r3, r3, #2
    b36e:	9a02      	ldr	r2, [sp, #8]
    b370:	4413      	add	r3, r2
    b372:	2200      	movs	r2, #0
    b374:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    b376:	9b05      	ldr	r3, [sp, #20]
    b378:	3301      	adds	r3, #1
    b37a:	9305      	str	r3, [sp, #20]
    b37c:	9a05      	ldr	r2, [sp, #20]
    b37e:	9b03      	ldr	r3, [sp, #12]
    b380:	429a      	cmp	r2, r3
    b382:	d3f2      	bcc.n	b36a <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    b384:	bf00      	nop
    b386:	bf00      	nop
    b388:	b007      	add	sp, #28
    b38a:	f85d fb04 	ldr.w	pc, [sp], #4

0000b38e <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    b38e:	b084      	sub	sp, #16
    b390:	4603      	mov	r3, r0
    b392:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    b396:	2308      	movs	r3, #8
    b398:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    b39c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b3a0:	2b08      	cmp	r3, #8
    b3a2:	d804      	bhi.n	b3ae <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    b3a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b3a8:	f88d 300f 	strb.w	r3, [sp, #15]
    b3ac:	e033      	b.n	b416 <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    b3ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b3b2:	3b09      	subs	r3, #9
    b3b4:	2b06      	cmp	r3, #6
    b3b6:	d82d      	bhi.n	b414 <FlexCAN_ComputePayloadSize+0x86>
    b3b8:	a201      	add	r2, pc, #4	; (adr r2, b3c0 <FlexCAN_ComputePayloadSize+0x32>)
    b3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b3be:	bf00      	nop
    b3c0:	0000b3dd 	.word	0x0000b3dd
    b3c4:	0000b3e5 	.word	0x0000b3e5
    b3c8:	0000b3ed 	.word	0x0000b3ed
    b3cc:	0000b3f5 	.word	0x0000b3f5
    b3d0:	0000b3fd 	.word	0x0000b3fd
    b3d4:	0000b405 	.word	0x0000b405
    b3d8:	0000b40d 	.word	0x0000b40d
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    b3dc:	230c      	movs	r3, #12
    b3de:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b3e2:	e018      	b.n	b416 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    b3e4:	2310      	movs	r3, #16
    b3e6:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b3ea:	e014      	b.n	b416 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    b3ec:	2314      	movs	r3, #20
    b3ee:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b3f2:	e010      	b.n	b416 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    b3f4:	2318      	movs	r3, #24
    b3f6:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b3fa:	e00c      	b.n	b416 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    b3fc:	2320      	movs	r3, #32
    b3fe:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b402:	e008      	b.n	b416 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    b404:	2330      	movs	r3, #48	; 0x30
    b406:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b40a:	e004      	b.n	b416 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    b40c:	2340      	movs	r3, #64	; 0x40
    b40e:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b412:	e000      	b.n	b416 <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    b414:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    b416:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b41a:	4618      	mov	r0, r3
    b41c:	b004      	add	sp, #16
    b41e:	4770      	bx	lr

0000b420 <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    b420:	b500      	push	{lr}
    b422:	b08b      	sub	sp, #44	; 0x2c
    b424:	9001      	str	r0, [sp, #4]
    b426:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    b428:	2308      	movs	r3, #8
    b42a:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    b42e:	2300      	movs	r3, #0
    b430:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    b434:	f44f 7300 	mov.w	r3, #512	; 0x200
    b438:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    b43a:	2300      	movs	r3, #0
    b43c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    b440:	9b00      	ldr	r3, [sp, #0]
    b442:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    b446:	2300      	movs	r3, #0
    b448:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    b44c:	2300      	movs	r3, #0
    b44e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    b452:	2300      	movs	r3, #0
    b454:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    b456:	2300      	movs	r3, #0
    b458:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    b45c:	9b01      	ldr	r3, [sp, #4]
    b45e:	3380      	adds	r3, #128	; 0x80
    b460:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    b462:	2300      	movs	r3, #0
    b464:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    b466:	2300      	movs	r3, #0
    b468:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    b46c:	e02d      	b.n	b4ca <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    b46e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    b472:	4619      	mov	r1, r3
    b474:	9801      	ldr	r0, [sp, #4]
    b476:	f000 fad1 	bl	ba1c <FlexCAN_GetPayloadSize>
    b47a:	4603      	mov	r3, r0
    b47c:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    b480:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b484:	f89d 3020 	ldrb.w	r3, [sp, #32]
    b488:	4413      	add	r3, r2
    b48a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    b48e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    b492:	9a07      	ldr	r2, [sp, #28]
    b494:	fbb2 f3f3 	udiv	r3, r2, r3
    b498:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    b49c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    b4a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    b4a4:	429a      	cmp	r2, r3
    b4a6:	d815      	bhi.n	b4d4 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    b4a8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    b4ac:	3380      	adds	r3, #128	; 0x80
    b4ae:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    b4b2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b4b6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    b4ba:	1ad3      	subs	r3, r2, r3
    b4bc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    b4c0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    b4c4:	3301      	adds	r3, #1
    b4c6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    b4ca:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	d0cd      	beq.n	b46e <FlexCAN_GetMsgBuffRegion+0x4e>
    b4d2:	e000      	b.n	b4d6 <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    b4d4:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    b4d6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    b4da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    b4de:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    b4e2:	fbb3 f0f2 	udiv	r0, r3, r2
    b4e6:	fb00 f202 	mul.w	r2, r0, r2
    b4ea:	1a9b      	subs	r3, r3, r2
    b4ec:	b2db      	uxtb	r3, r3
    b4ee:	461a      	mov	r2, r3
    b4f0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    b4f4:	089b      	lsrs	r3, r3, #2
    b4f6:	b2db      	uxtb	r3, r3
    b4f8:	fb02 f303 	mul.w	r3, r2, r3
    b4fc:	440b      	add	r3, r1
    b4fe:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    b500:	9b06      	ldr	r3, [sp, #24]
    b502:	009b      	lsls	r3, r3, #2
    b504:	9a04      	ldr	r2, [sp, #16]
    b506:	4413      	add	r3, r2
    b508:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    b50a:	9b03      	ldr	r3, [sp, #12]
}
    b50c:	4618      	mov	r0, r3
    b50e:	b00b      	add	sp, #44	; 0x2c
    b510:	f85d fb04 	ldr.w	pc, [sp], #4

0000b514 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    b514:	b084      	sub	sp, #16
    b516:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    b518:	2300      	movs	r3, #0
    b51a:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    b51c:	2300      	movs	r3, #0
    b51e:	9303      	str	r3, [sp, #12]
    b520:	e00e      	b.n	b540 <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    b522:	4a0b      	ldr	r2, [pc, #44]	; (b550 <FlexCAN_GetMaxMbNum+0x3c>)
    b524:	9b03      	ldr	r3, [sp, #12]
    b526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b52a:	9a01      	ldr	r2, [sp, #4]
    b52c:	429a      	cmp	r2, r3
    b52e:	d104      	bne.n	b53a <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    b530:	4a08      	ldr	r2, [pc, #32]	; (b554 <FlexCAN_GetMaxMbNum+0x40>)
    b532:	9b03      	ldr	r3, [sp, #12]
    b534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b538:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    b53a:	9b03      	ldr	r3, [sp, #12]
    b53c:	3301      	adds	r3, #1
    b53e:	9303      	str	r3, [sp, #12]
    b540:	9b03      	ldr	r3, [sp, #12]
    b542:	2b02      	cmp	r3, #2
    b544:	d9ed      	bls.n	b522 <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    b546:	9b02      	ldr	r3, [sp, #8]
}
    b548:	4618      	mov	r0, r3
    b54a:	b004      	add	sp, #16
    b54c:	4770      	bx	lr
    b54e:	bf00      	nop
    b550:	0000f544 	.word	0x0000f544
    b554:	0000f550 	.word	0x0000f550

0000b558 <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    b558:	b500      	push	{lr}
    b55a:	b087      	sub	sp, #28
    b55c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    b55e:	2300      	movs	r3, #0
    b560:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    b562:	2300      	movs	r3, #0
    b564:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b566:	2100      	movs	r1, #0
    b568:	4820      	ldr	r0, [pc, #128]	; (b5ec <FlexCAN_EnterFreezeMode+0x94>)
    b56a:	f7f6 fb83 	bl	1c74 <OsIf_MicrosToTicks>
    b56e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    b570:	2300      	movs	r3, #0
    b572:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    b574:	f001 fad2 	bl	cb1c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    b578:	9b01      	ldr	r3, [sp, #4]
    b57a:	681b      	ldr	r3, [r3, #0]
    b57c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b580:	9b01      	ldr	r3, [sp, #4]
    b582:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    b584:	9b01      	ldr	r3, [sp, #4]
    b586:	681b      	ldr	r3, [r3, #0]
    b588:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    b58c:	9b01      	ldr	r3, [sp, #4]
    b58e:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    b590:	9b01      	ldr	r3, [sp, #4]
    b592:	681b      	ldr	r3, [r3, #0]
    b594:	2b00      	cmp	r3, #0
    b596:	da05      	bge.n	b5a4 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    b598:	9b01      	ldr	r3, [sp, #4]
    b59a:	681b      	ldr	r3, [r3, #0]
    b59c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    b5a0:	9b01      	ldr	r3, [sp, #4]
    b5a2:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    b5a4:	f001 fae6 	bl	cb74 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b5a8:	2000      	movs	r0, #0
    b5aa:	f7f6 fb17 	bl	1bdc <OsIf_GetCounter>
    b5ae:	4603      	mov	r3, r0
    b5b0:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    b5b2:	e00f      	b.n	b5d4 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b5b4:	ab02      	add	r3, sp, #8
    b5b6:	2100      	movs	r1, #0
    b5b8:	4618      	mov	r0, r3
    b5ba:	f7f6 fb28 	bl	1c0e <OsIf_GetElapsed>
    b5be:	4602      	mov	r2, r0
    b5c0:	9b05      	ldr	r3, [sp, #20]
    b5c2:	4413      	add	r3, r2
    b5c4:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    b5c6:	9a05      	ldr	r2, [sp, #20]
    b5c8:	9b03      	ldr	r3, [sp, #12]
    b5ca:	429a      	cmp	r2, r3
    b5cc:	d302      	bcc.n	b5d4 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    b5ce:	2303      	movs	r3, #3
    b5d0:	9304      	str	r3, [sp, #16]
            break;
    b5d2:	e005      	b.n	b5e0 <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    b5d4:	9b01      	ldr	r3, [sp, #4]
    b5d6:	681b      	ldr	r3, [r3, #0]
    b5d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    b5dc:	2b00      	cmp	r3, #0
    b5de:	d0e9      	beq.n	b5b4 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    b5e0:	9b04      	ldr	r3, [sp, #16]
}
    b5e2:	4618      	mov	r0, r3
    b5e4:	b007      	add	sp, #28
    b5e6:	f85d fb04 	ldr.w	pc, [sp], #4
    b5ea:	bf00      	nop
    b5ec:	000f4240 	.word	0x000f4240

0000b5f0 <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    b5f0:	b500      	push	{lr}
    b5f2:	b087      	sub	sp, #28
    b5f4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    b5f6:	2300      	movs	r3, #0
    b5f8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    b5fa:	2300      	movs	r3, #0
    b5fc:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b5fe:	2100      	movs	r1, #0
    b600:	4818      	ldr	r0, [pc, #96]	; (b664 <FlexCAN_Enable+0x74>)
    b602:	f7f6 fb37 	bl	1c74 <OsIf_MicrosToTicks>
    b606:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    b608:	2300      	movs	r3, #0
    b60a:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    b60c:	f001 fad8 	bl	cbc0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    b610:	9b01      	ldr	r3, [sp, #4]
    b612:	681b      	ldr	r3, [r3, #0]
    b614:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    b618:	9b01      	ldr	r3, [sp, #4]
    b61a:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    b61c:	f001 fafc 	bl	cc18 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b620:	2000      	movs	r0, #0
    b622:	f7f6 fadb 	bl	1bdc <OsIf_GetCounter>
    b626:	4603      	mov	r3, r0
    b628:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    b62a:	e00f      	b.n	b64c <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b62c:	ab02      	add	r3, sp, #8
    b62e:	2100      	movs	r1, #0
    b630:	4618      	mov	r0, r3
    b632:	f7f6 faec 	bl	1c0e <OsIf_GetElapsed>
    b636:	4602      	mov	r2, r0
    b638:	9b05      	ldr	r3, [sp, #20]
    b63a:	4413      	add	r3, r2
    b63c:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    b63e:	9a05      	ldr	r2, [sp, #20]
    b640:	9b03      	ldr	r3, [sp, #12]
    b642:	429a      	cmp	r2, r3
    b644:	d302      	bcc.n	b64c <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    b646:	2303      	movs	r3, #3
    b648:	9304      	str	r3, [sp, #16]
            break;
    b64a:	e005      	b.n	b658 <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    b64c:	9b01      	ldr	r3, [sp, #4]
    b64e:	681b      	ldr	r3, [r3, #0]
    b650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    b654:	2b00      	cmp	r3, #0
    b656:	d0e9      	beq.n	b62c <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    b658:	9b04      	ldr	r3, [sp, #16]
}
    b65a:	4618      	mov	r0, r3
    b65c:	b007      	add	sp, #28
    b65e:	f85d fb04 	ldr.w	pc, [sp], #4
    b662:	bf00      	nop
    b664:	000f4240 	.word	0x000f4240

0000b668 <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    b668:	b500      	push	{lr}
    b66a:	b087      	sub	sp, #28
    b66c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    b66e:	2300      	movs	r3, #0
    b670:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    b672:	2300      	movs	r3, #0
    b674:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b676:	2100      	movs	r1, #0
    b678:	481b      	ldr	r0, [pc, #108]	; (b6e8 <FlexCAN_ExitFreezeMode+0x80>)
    b67a:	f7f6 fafb 	bl	1c74 <OsIf_MicrosToTicks>
    b67e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    b680:	2300      	movs	r3, #0
    b682:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    b684:	f001 faee 	bl	cc64 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    b688:	9b01      	ldr	r3, [sp, #4]
    b68a:	681b      	ldr	r3, [r3, #0]
    b68c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    b690:	9b01      	ldr	r3, [sp, #4]
    b692:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    b694:	9b01      	ldr	r3, [sp, #4]
    b696:	681b      	ldr	r3, [r3, #0]
    b698:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    b69c:	9b01      	ldr	r3, [sp, #4]
    b69e:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    b6a0:	f001 fb0c 	bl	ccbc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b6a4:	2000      	movs	r0, #0
    b6a6:	f7f6 fa99 	bl	1bdc <OsIf_GetCounter>
    b6aa:	4603      	mov	r3, r0
    b6ac:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    b6ae:	e00f      	b.n	b6d0 <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b6b0:	ab02      	add	r3, sp, #8
    b6b2:	2100      	movs	r1, #0
    b6b4:	4618      	mov	r0, r3
    b6b6:	f7f6 faaa 	bl	1c0e <OsIf_GetElapsed>
    b6ba:	4602      	mov	r2, r0
    b6bc:	9b05      	ldr	r3, [sp, #20]
    b6be:	4413      	add	r3, r2
    b6c0:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    b6c2:	9a05      	ldr	r2, [sp, #20]
    b6c4:	9b03      	ldr	r3, [sp, #12]
    b6c6:	429a      	cmp	r2, r3
    b6c8:	d302      	bcc.n	b6d0 <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    b6ca:	2303      	movs	r3, #3
    b6cc:	9304      	str	r3, [sp, #16]
            break;
    b6ce:	e005      	b.n	b6dc <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    b6d0:	9b01      	ldr	r3, [sp, #4]
    b6d2:	681b      	ldr	r3, [r3, #0]
    b6d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    b6d8:	2b00      	cmp	r3, #0
    b6da:	d1e9      	bne.n	b6b0 <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    b6dc:	9b04      	ldr	r3, [sp, #16]
}
    b6de:	4618      	mov	r0, r3
    b6e0:	b007      	add	sp, #28
    b6e2:	f85d fb04 	ldr.w	pc, [sp], #4
    b6e6:	bf00      	nop
    b6e8:	000f4240 	.word	0x000f4240

0000b6ec <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    b6ec:	b500      	push	{lr}
    b6ee:	b087      	sub	sp, #28
    b6f0:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    b6f2:	2300      	movs	r3, #0
    b6f4:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    b6f6:	2300      	movs	r3, #0
    b6f8:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b6fa:	2100      	movs	r1, #0
    b6fc:	481a      	ldr	r0, [pc, #104]	; (b768 <FlexCAN_Disable+0x7c>)
    b6fe:	f7f6 fab9 	bl	1c74 <OsIf_MicrosToTicks>
    b702:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    b704:	2300      	movs	r3, #0
    b706:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    b708:	9b01      	ldr	r3, [sp, #4]
    b70a:	681b      	ldr	r3, [r3, #0]
    b70c:	2b00      	cmp	r3, #0
    b70e:	db25      	blt.n	b75c <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    b710:	f001 fafa 	bl	cd08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    b714:	9b01      	ldr	r3, [sp, #4]
    b716:	681b      	ldr	r3, [r3, #0]
    b718:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    b71c:	9b01      	ldr	r3, [sp, #4]
    b71e:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    b720:	f001 fb1e 	bl	cd60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b724:	2000      	movs	r0, #0
    b726:	f7f6 fa59 	bl	1bdc <OsIf_GetCounter>
    b72a:	4603      	mov	r3, r0
    b72c:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    b72e:	e00f      	b.n	b750 <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b730:	ab02      	add	r3, sp, #8
    b732:	2100      	movs	r1, #0
    b734:	4618      	mov	r0, r3
    b736:	f7f6 fa6a 	bl	1c0e <OsIf_GetElapsed>
    b73a:	4602      	mov	r2, r0
    b73c:	9b05      	ldr	r3, [sp, #20]
    b73e:	4413      	add	r3, r2
    b740:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    b742:	9a05      	ldr	r2, [sp, #20]
    b744:	9b03      	ldr	r3, [sp, #12]
    b746:	429a      	cmp	r2, r3
    b748:	d302      	bcc.n	b750 <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    b74a:	2303      	movs	r3, #3
    b74c:	9304      	str	r3, [sp, #16]
                break;
    b74e:	e005      	b.n	b75c <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    b750:	9b01      	ldr	r3, [sp, #4]
    b752:	681b      	ldr	r3, [r3, #0]
    b754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    b758:	2b00      	cmp	r3, #0
    b75a:	d0e9      	beq.n	b730 <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    b75c:	9b04      	ldr	r3, [sp, #16]
}
    b75e:	4618      	mov	r0, r3
    b760:	b007      	add	sp, #28
    b762:	f85d fb04 	ldr.w	pc, [sp], #4
    b766:	bf00      	nop
    b768:	000f4240 	.word	0x000f4240

0000b76c <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    b76c:	b500      	push	{lr}
    b76e:	b087      	sub	sp, #28
    b770:	9003      	str	r0, [sp, #12]
    b772:	9102      	str	r1, [sp, #8]
    b774:	4613      	mov	r3, r2
    b776:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    b77a:	9b02      	ldr	r3, [sp, #8]
    b77c:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    b77e:	f001 fb15 	bl	cdac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    b782:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b786:	2b00      	cmp	r3, #0
    b788:	d020      	beq.n	b7cc <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    b78a:	9b02      	ldr	r3, [sp, #8]
    b78c:	f244 0201 	movw	r2, #16385	; 0x4001
    b790:	4293      	cmp	r3, r2
    b792:	d106      	bne.n	b7a2 <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    b794:	9b03      	ldr	r3, [sp, #12]
    b796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b798:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    b79c:	9b03      	ldr	r3, [sp, #12]
    b79e:	635a      	str	r2, [r3, #52]	; 0x34
    b7a0:	e03a      	b.n	b818 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    b7a2:	9b02      	ldr	r3, [sp, #8]
    b7a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    b7a8:	d003      	beq.n	b7b2 <FlexCAN_SetErrIntCmd+0x46>
    b7aa:	9b02      	ldr	r3, [sp, #8]
    b7ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    b7b0:	d105      	bne.n	b7be <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    b7b2:	9b03      	ldr	r3, [sp, #12]
    b7b4:	681b      	ldr	r3, [r3, #0]
    b7b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    b7ba:	9b03      	ldr	r3, [sp, #12]
    b7bc:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    b7be:	9b03      	ldr	r3, [sp, #12]
    b7c0:	685a      	ldr	r2, [r3, #4]
    b7c2:	9b05      	ldr	r3, [sp, #20]
    b7c4:	431a      	orrs	r2, r3
    b7c6:	9b03      	ldr	r3, [sp, #12]
    b7c8:	605a      	str	r2, [r3, #4]
    b7ca:	e025      	b.n	b818 <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    b7cc:	9b02      	ldr	r3, [sp, #8]
    b7ce:	f244 0201 	movw	r2, #16385	; 0x4001
    b7d2:	4293      	cmp	r3, r2
    b7d4:	d106      	bne.n	b7e4 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    b7d6:	9b03      	ldr	r3, [sp, #12]
    b7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b7da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    b7de:	9b03      	ldr	r3, [sp, #12]
    b7e0:	635a      	str	r2, [r3, #52]	; 0x34
    b7e2:	e019      	b.n	b818 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    b7e4:	9b03      	ldr	r3, [sp, #12]
    b7e6:	685a      	ldr	r2, [r3, #4]
    b7e8:	9b05      	ldr	r3, [sp, #20]
    b7ea:	43db      	mvns	r3, r3
    b7ec:	401a      	ands	r2, r3
    b7ee:	9b03      	ldr	r3, [sp, #12]
    b7f0:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    b7f2:	9b03      	ldr	r3, [sp, #12]
    b7f4:	685b      	ldr	r3, [r3, #4]
    b7f6:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    b7f8:	9b05      	ldr	r3, [sp, #20]
    b7fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b7fe:	2b00      	cmp	r3, #0
    b800:	d10a      	bne.n	b818 <FlexCAN_SetErrIntCmd+0xac>
    b802:	9b05      	ldr	r3, [sp, #20]
    b804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b808:	2b00      	cmp	r3, #0
    b80a:	d105      	bne.n	b818 <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    b80c:	9b03      	ldr	r3, [sp, #12]
    b80e:	681b      	ldr	r3, [r3, #0]
    b810:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    b814:	9b03      	ldr	r3, [sp, #12]
    b816:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    b818:	f001 faf4 	bl	ce04 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    b81c:	bf00      	nop
    b81e:	b007      	add	sp, #28
    b820:	f85d fb04 	ldr.w	pc, [sp], #4

0000b824 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    b824:	b500      	push	{lr}
    b826:	b087      	sub	sp, #28
    b828:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    b82a:	2300      	movs	r3, #0
    b82c:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    b82e:	2300      	movs	r3, #0
    b830:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b832:	2100      	movs	r1, #0
    b834:	4833      	ldr	r0, [pc, #204]	; (b904 <FlexCAN_Init+0xe0>)
    b836:	f7f6 fa1d 	bl	1c74 <OsIf_MicrosToTicks>
    b83a:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    b83c:	2300      	movs	r3, #0
    b83e:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    b840:	9b01      	ldr	r3, [sp, #4]
    b842:	681b      	ldr	r3, [r3, #0]
    b844:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    b848:	9b01      	ldr	r3, [sp, #4]
    b84a:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b84c:	2000      	movs	r0, #0
    b84e:	f7f6 f9c5 	bl	1bdc <OsIf_GetCounter>
    b852:	4603      	mov	r3, r0
    b854:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    b856:	e00f      	b.n	b878 <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b858:	ab02      	add	r3, sp, #8
    b85a:	2100      	movs	r1, #0
    b85c:	4618      	mov	r0, r3
    b85e:	f7f6 f9d6 	bl	1c0e <OsIf_GetElapsed>
    b862:	4602      	mov	r2, r0
    b864:	9b05      	ldr	r3, [sp, #20]
    b866:	4413      	add	r3, r2
    b868:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    b86a:	9a05      	ldr	r2, [sp, #20]
    b86c:	9b03      	ldr	r3, [sp, #12]
    b86e:	429a      	cmp	r2, r3
    b870:	d302      	bcc.n	b878 <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    b872:	2303      	movs	r3, #3
    b874:	9304      	str	r3, [sp, #16]
            break;
    b876:	e005      	b.n	b884 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    b878:	9b01      	ldr	r3, [sp, #4]
    b87a:	681b      	ldr	r3, [r3, #0]
    b87c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    b880:	2b00      	cmp	r3, #0
    b882:	d1e9      	bne.n	b858 <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    b884:	9b04      	ldr	r3, [sp, #16]
    b886:	2b00      	cmp	r3, #0
    b888:	d136      	bne.n	b8f8 <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    b88a:	9b01      	ldr	r3, [sp, #4]
    b88c:	681b      	ldr	r3, [r3, #0]
    b88e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    b892:	9b01      	ldr	r3, [sp, #4]
    b894:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    b896:	9801      	ldr	r0, [sp, #4]
    b898:	f7ff fd40 	bl	b31c <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    b89c:	9b01      	ldr	r3, [sp, #4]
    b89e:	f04f 32ff 	mov.w	r2, #4294967295
    b8a2:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    b8a4:	9b01      	ldr	r3, [sp, #4]
    b8a6:	f04f 32ff 	mov.w	r2, #4294967295
    b8aa:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    b8ac:	9b01      	ldr	r3, [sp, #4]
    b8ae:	f04f 32ff 	mov.w	r2, #4294967295
    b8b2:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    b8b4:	9b01      	ldr	r3, [sp, #4]
    b8b6:	2200      	movs	r2, #0
    b8b8:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    b8ba:	9b01      	ldr	r3, [sp, #4]
    b8bc:	f04f 32ff 	mov.w	r2, #4294967295
    b8c0:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    b8c2:	9b01      	ldr	r3, [sp, #4]
    b8c4:	4a10      	ldr	r2, [pc, #64]	; (b908 <FlexCAN_Init+0xe4>)
    b8c6:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    b8c8:	9b01      	ldr	r3, [sp, #4]
    b8ca:	2200      	movs	r2, #0
    b8cc:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    b8ce:	9b01      	ldr	r3, [sp, #4]
    b8d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    b8d4:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    b8d6:	9b01      	ldr	r3, [sp, #4]
    b8d8:	2200      	movs	r2, #0
    b8da:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    b8dc:	9801      	ldr	r0, [sp, #4]
    b8de:	f000 f85b 	bl	b998 <FlexCAN_IsFDAvailable>
    b8e2:	4603      	mov	r3, r0
    b8e4:	2b00      	cmp	r3, #0
    b8e6:	d007      	beq.n	b8f8 <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    b8e8:	9b01      	ldr	r3, [sp, #4]
    b8ea:	2200      	movs	r2, #0
    b8ec:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    b8f0:	9b01      	ldr	r3, [sp, #4]
    b8f2:	4a06      	ldr	r2, [pc, #24]	; (b90c <FlexCAN_Init+0xe8>)
    b8f4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    b8f8:	9b04      	ldr	r3, [sp, #16]
}
    b8fa:	4618      	mov	r0, r3
    b8fc:	b007      	add	sp, #28
    b8fe:	f85d fb04 	ldr.w	pc, [sp], #4
    b902:	bf00      	nop
    b904:	000f4240 	.word	0x000f4240
    b908:	003b0006 	.word	0x003b0006
    b90c:	80004100 	.word	0x80004100

0000b910 <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    b910:	b500      	push	{lr}
    b912:	b087      	sub	sp, #28
    b914:	9001      	str	r0, [sp, #4]
    b916:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    b918:	9801      	ldr	r0, [sp, #4]
    b91a:	f7ff fdfb 	bl	b514 <FlexCAN_GetMaxMbNum>
    b91e:	4603      	mov	r3, r0
    b920:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    b924:	2300      	movs	r3, #0
    b926:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    b928:	9b01      	ldr	r3, [sp, #4]
    b92a:	681b      	ldr	r3, [r3, #0]
    b92c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b930:	2b00      	cmp	r3, #0
    b932:	d001      	beq.n	b938 <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    b934:	2301      	movs	r3, #1
    b936:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    b938:	9b04      	ldr	r3, [sp, #16]
    b93a:	2b00      	cmp	r3, #0
    b93c:	d127      	bne.n	b98e <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    b93e:	9b01      	ldr	r3, [sp, #4]
    b940:	681b      	ldr	r3, [r3, #0]
    b942:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    b946:	9b01      	ldr	r3, [sp, #4]
    b948:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    b94a:	9b01      	ldr	r3, [sp, #4]
    b94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b94e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    b952:	9b00      	ldr	r3, [sp, #0]
    b954:	061b      	lsls	r3, r3, #24
    b956:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    b95a:	431a      	orrs	r2, r3
    b95c:	9b01      	ldr	r3, [sp, #4]
    b95e:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    b960:	9b01      	ldr	r3, [sp, #4]
    b962:	f04f 32ff 	mov.w	r2, #4294967295
    b966:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    b968:	2300      	movs	r3, #0
    b96a:	9305      	str	r3, [sp, #20]
    b96c:	e00a      	b.n	b984 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    b96e:	9b01      	ldr	r3, [sp, #4]
    b970:	9a05      	ldr	r2, [sp, #20]
    b972:	f502 7208 	add.w	r2, r2, #544	; 0x220
    b976:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    b97a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    b97e:	9b05      	ldr	r3, [sp, #20]
    b980:	3301      	adds	r3, #1
    b982:	9305      	str	r3, [sp, #20]
    b984:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b988:	9a05      	ldr	r2, [sp, #20]
    b98a:	429a      	cmp	r2, r3
    b98c:	d3ef      	bcc.n	b96e <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    b98e:	9b04      	ldr	r3, [sp, #16]
}
    b990:	4618      	mov	r0, r3
    b992:	b007      	add	sp, #28
    b994:	f85d fb04 	ldr.w	pc, [sp], #4

0000b998 <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    b998:	b084      	sub	sp, #16
    b99a:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    b99c:	2300      	movs	r3, #0
    b99e:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    b9a0:	2300      	movs	r3, #0
    b9a2:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    b9a6:	2300      	movs	r3, #0
    b9a8:	9303      	str	r3, [sp, #12]
    b9aa:	e00d      	b.n	b9c8 <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    b9ac:	4a0a      	ldr	r2, [pc, #40]	; (b9d8 <FlexCAN_IsFDAvailable+0x40>)
    b9ae:	9b03      	ldr	r3, [sp, #12]
    b9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9b4:	9a01      	ldr	r2, [sp, #4]
    b9b6:	429a      	cmp	r2, r3
    b9b8:	d103      	bne.n	b9c2 <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    b9ba:	2301      	movs	r3, #1
    b9bc:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    b9c0:	e005      	b.n	b9ce <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    b9c2:	9b03      	ldr	r3, [sp, #12]
    b9c4:	3301      	adds	r3, #1
    b9c6:	9303      	str	r3, [sp, #12]
    b9c8:	9b03      	ldr	r3, [sp, #12]
    b9ca:	2b00      	cmp	r3, #0
    b9cc:	d0ee      	beq.n	b9ac <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    b9ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    b9d2:	4618      	mov	r0, r3
    b9d4:	b004      	add	sp, #16
    b9d6:	4770      	bx	lr
    b9d8:	0000f55c 	.word	0x0000f55c

0000b9dc <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    b9dc:	b500      	push	{lr}
    b9de:	b085      	sub	sp, #20
    b9e0:	9001      	str	r0, [sp, #4]
    b9e2:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    b9e4:	9801      	ldr	r0, [sp, #4]
    b9e6:	f7ff fbd6 	bl	b196 <FlexCAN_IsFDEnabled>
    b9ea:	4603      	mov	r3, r0
    b9ec:	2b00      	cmp	r3, #0
    b9ee:	d011      	beq.n	ba14 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    b9f0:	9b01      	ldr	r3, [sp, #4]
    b9f2:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b9f6:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    b9f8:	9b03      	ldr	r3, [sp, #12]
    b9fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    b9fe:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    ba00:	9b00      	ldr	r3, [sp, #0]
    ba02:	681b      	ldr	r3, [r3, #0]
    ba04:	041b      	lsls	r3, r3, #16
    ba06:	9a03      	ldr	r2, [sp, #12]
    ba08:	4313      	orrs	r3, r2
    ba0a:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    ba0c:	9b01      	ldr	r3, [sp, #4]
    ba0e:	9a03      	ldr	r2, [sp, #12]
    ba10:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    ba14:	bf00      	nop
    ba16:	b005      	add	sp, #20
    ba18:	f85d fb04 	ldr.w	pc, [sp], #4

0000ba1c <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    ba1c:	b500      	push	{lr}
    ba1e:	b085      	sub	sp, #20
    ba20:	9001      	str	r0, [sp, #4]
    ba22:	460b      	mov	r3, r1
    ba24:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    ba28:	2300      	movs	r3, #0
    ba2a:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    ba2c:	9801      	ldr	r0, [sp, #4]
    ba2e:	f7ff ffb3 	bl	b998 <FlexCAN_IsFDAvailable>
    ba32:	4603      	mov	r3, r0
    ba34:	2b00      	cmp	r3, #0
    ba36:	d019      	beq.n	ba6c <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    ba38:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ba3c:	2b00      	cmp	r3, #0
    ba3e:	d10a      	bne.n	ba56 <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ba40:	9b01      	ldr	r3, [sp, #4]
    ba42:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ba46:	0c1b      	lsrs	r3, r3, #16
    ba48:	f003 0303 	and.w	r3, r3, #3
    ba4c:	2208      	movs	r2, #8
    ba4e:	fa02 f303 	lsl.w	r3, r2, r3
    ba52:	9303      	str	r3, [sp, #12]
    ba54:	e00c      	b.n	ba70 <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ba56:	9b01      	ldr	r3, [sp, #4]
    ba58:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ba5c:	0c1b      	lsrs	r3, r3, #16
    ba5e:	f003 0303 	and.w	r3, r3, #3
    ba62:	2208      	movs	r2, #8
    ba64:	fa02 f303 	lsl.w	r3, r2, r3
    ba68:	9303      	str	r3, [sp, #12]
    ba6a:	e001      	b.n	ba70 <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    ba6c:	2308      	movs	r3, #8
    ba6e:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    ba70:	9b03      	ldr	r3, [sp, #12]
    ba72:	b2db      	uxtb	r3, r3
}
    ba74:	4618      	mov	r0, r3
    ba76:	b005      	add	sp, #20
    ba78:	f85d fb04 	ldr.w	pc, [sp], #4

0000ba7c <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    ba7c:	b500      	push	{lr}
    ba7e:	b087      	sub	sp, #28
    ba80:	9001      	str	r0, [sp, #4]
    ba82:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    ba84:	2308      	movs	r3, #8
    ba86:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    ba8a:	f44f 7300 	mov.w	r3, #512	; 0x200
    ba8e:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    ba90:	2308      	movs	r3, #8
    ba92:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    ba96:	2300      	movs	r3, #0
    ba98:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    ba9c:	2300      	movs	r3, #0
    ba9e:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    baa2:	2300      	movs	r3, #0
    baa4:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    baa8:	2300      	movs	r3, #0
    baaa:	f88d 3015 	strb.w	r3, [sp, #21]
    baae:	e024      	b.n	bafa <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    bab0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    bab4:	4619      	mov	r1, r3
    bab6:	9801      	ldr	r0, [sp, #4]
    bab8:	f7ff ffb0 	bl	ba1c <FlexCAN_GetPayloadSize>
    babc:	4603      	mov	r3, r0
    babe:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    bac2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    bac6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    baca:	4413      	add	r3, r2
    bacc:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    bad0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bad4:	9a04      	ldr	r2, [sp, #16]
    bad6:	fbb2 f3f3 	udiv	r3, r2, r3
    bada:	b2da      	uxtb	r2, r3
    badc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    bae0:	4413      	add	r3, r2
    bae2:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    bae6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    baea:	9a00      	ldr	r2, [sp, #0]
    baec:	429a      	cmp	r2, r3
    baee:	d309      	bcc.n	bb04 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    baf0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    baf4:	3301      	adds	r3, #1
    baf6:	f88d 3015 	strb.w	r3, [sp, #21]
    bafa:	f89d 3015 	ldrb.w	r3, [sp, #21]
    bafe:	2b00      	cmp	r3, #0
    bb00:	d0d6      	beq.n	bab0 <FlexCAN_GetMbPayloadSize+0x34>
    bb02:	e000      	b.n	bb06 <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    bb04:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    bb06:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    bb0a:	4618      	mov	r0, r3
    bb0c:	b007      	add	sp, #28
    bb0e:	f85d fb04 	ldr.w	pc, [sp], #4

0000bb12 <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    bb12:	b500      	push	{lr}
    bb14:	b085      	sub	sp, #20
    bb16:	9001      	str	r0, [sp, #4]
    bb18:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    bb1a:	9900      	ldr	r1, [sp, #0]
    bb1c:	9801      	ldr	r0, [sp, #4]
    bb1e:	f7ff fc7f 	bl	b420 <FlexCAN_GetMsgBuffRegion>
    bb22:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    bb24:	9b03      	ldr	r3, [sp, #12]
    bb26:	681b      	ldr	r3, [r3, #0]
}
    bb28:	bf00      	nop
    bb2a:	b005      	add	sp, #20
    bb2c:	f85d fb04 	ldr.w	pc, [sp], #4

0000bb30 <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    bb30:	b500      	push	{lr}
    bb32:	b087      	sub	sp, #28
    bb34:	9003      	str	r0, [sp, #12]
    bb36:	9201      	str	r2, [sp, #4]
    bb38:	461a      	mov	r2, r3
    bb3a:	460b      	mov	r3, r1
    bb3c:	f88d 300b 	strb.w	r3, [sp, #11]
    bb40:	4613      	mov	r3, r2
    bb42:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    bb46:	2300      	movs	r3, #0
    bb48:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    bb4a:	9b01      	ldr	r3, [sp, #4]
    bb4c:	f003 031f 	and.w	r3, r3, #31
    bb50:	2201      	movs	r2, #1
    bb52:	fa02 f303 	lsl.w	r3, r2, r3
    bb56:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    bb58:	9b01      	ldr	r3, [sp, #4]
    bb5a:	2b1f      	cmp	r3, #31
    bb5c:	d837      	bhi.n	bbce <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    bb5e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    bb62:	2b00      	cmp	r3, #0
    bb64:	d01b      	beq.n	bb9e <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    bb66:	f001 fcf9 	bl	d55c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    bb6a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bb6e:	4a1a      	ldr	r2, [pc, #104]	; (bbd8 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    bb70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    bb74:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bb78:	9a04      	ldr	r2, [sp, #16]
    bb7a:	430a      	orrs	r2, r1
    bb7c:	4916      	ldr	r1, [pc, #88]	; (bbd8 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    bb7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    bb82:	f89d 3020 	ldrb.w	r3, [sp, #32]
    bb86:	2b00      	cmp	r3, #0
    bb88:	d006      	beq.n	bb98 <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    bb8a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bb8e:	4a12      	ldr	r2, [pc, #72]	; (bbd8 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    bb90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    bb94:	9b03      	ldr	r3, [sp, #12]
    bb96:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    bb98:	f001 fd0c 	bl	d5b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    bb9c:	e017      	b.n	bbce <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    bb9e:	f001 fcdd 	bl	d55c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    bba2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bba6:	4a0c      	ldr	r2, [pc, #48]	; (bbd8 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    bba8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    bbac:	9b04      	ldr	r3, [sp, #16]
    bbae:	43da      	mvns	r2, r3
    bbb0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bbb4:	400a      	ands	r2, r1
    bbb6:	4908      	ldr	r1, [pc, #32]	; (bbd8 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    bbb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    bbbc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bbc0:	4a05      	ldr	r2, [pc, #20]	; (bbd8 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    bbc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    bbc6:	9b03      	ldr	r3, [sp, #12]
    bbc8:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    bbca:	f001 fcf3 	bl	d5b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    bbce:	9b05      	ldr	r3, [sp, #20]
}
    bbd0:	4618      	mov	r0, r3
    bbd2:	b007      	add	sp, #28
    bbd4:	f85d fb04 	ldr.w	pc, [sp], #4
    bbd8:	1fff8fac 	.word	0x1fff8fac

0000bbdc <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    bbdc:	b500      	push	{lr}
    bbde:	b087      	sub	sp, #28
    bbe0:	9003      	str	r0, [sp, #12]
    bbe2:	9201      	str	r2, [sp, #4]
    bbe4:	461a      	mov	r2, r3
    bbe6:	460b      	mov	r3, r1
    bbe8:	f88d 300b 	strb.w	r3, [sp, #11]
    bbec:	4613      	mov	r3, r2
    bbee:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    bbf2:	9b01      	ldr	r3, [sp, #4]
    bbf4:	f003 031f 	and.w	r3, r3, #31
    bbf8:	2201      	movs	r2, #1
    bbfa:	fa02 f303 	lsl.w	r3, r2, r3
    bbfe:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    bc00:	9b01      	ldr	r3, [sp, #4]
    bc02:	2b1f      	cmp	r3, #31
    bc04:	d818      	bhi.n	bc38 <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    bc06:	f001 fa6b 	bl	d0e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    bc0a:	9b03      	ldr	r3, [sp, #12]
    bc0c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    bc0e:	9b05      	ldr	r3, [sp, #20]
    bc10:	43da      	mvns	r2, r3
    bc12:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc16:	400a      	ands	r2, r1
    bc18:	4909      	ldr	r1, [pc, #36]	; (bc40 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    bc1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    bc1e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    bc22:	2b00      	cmp	r3, #0
    bc24:	d006      	beq.n	bc34 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    bc26:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc2a:	4a05      	ldr	r2, [pc, #20]	; (bc40 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    bc2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    bc30:	9b03      	ldr	r3, [sp, #12]
    bc32:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    bc34:	f001 fa80 	bl	d138 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    bc38:	bf00      	nop
    bc3a:	b007      	add	sp, #28
    bc3c:	f85d fb04 	ldr.w	pc, [sp], #4
    bc40:	1fff8fac 	.word	0x1fff8fac

0000bc44 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    bc44:	b082      	sub	sp, #8
    bc46:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    bc48:	9b01      	ldr	r3, [sp, #4]
    bc4a:	2200      	movs	r2, #0
    bc4c:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    bc4e:	bf00      	nop
    bc50:	b002      	add	sp, #8
    bc52:	4770      	bx	lr

0000bc54 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    bc54:	b082      	sub	sp, #8
    bc56:	9001      	str	r0, [sp, #4]
    bc58:	460b      	mov	r3, r1
    bc5a:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    bc5e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bc62:	4a04      	ldr	r2, [pc, #16]	; (bc74 <FlexCAN_EnableInterrupts+0x20>)
    bc64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    bc68:	9b01      	ldr	r3, [sp, #4]
    bc6a:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    bc6c:	bf00      	nop
    bc6e:	b002      	add	sp, #8
    bc70:	4770      	bx	lr
    bc72:	bf00      	nop
    bc74:	1fff8fac 	.word	0x1fff8fac

0000bc78 <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    bc78:	b500      	push	{lr}
    bc7a:	b087      	sub	sp, #28
    bc7c:	9003      	str	r0, [sp, #12]
    bc7e:	9102      	str	r1, [sp, #8]
    bc80:	9201      	str	r2, [sp, #4]
    bc82:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    bc84:	9902      	ldr	r1, [sp, #8]
    bc86:	9803      	ldr	r0, [sp, #12]
    bc88:	f7ff fbca 	bl	b420 <FlexCAN_GetMsgBuffRegion>
    bc8c:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    bc8e:	9b05      	ldr	r3, [sp, #20]
    bc90:	3304      	adds	r3, #4
    bc92:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    bc94:	9b05      	ldr	r3, [sp, #20]
    bc96:	2200      	movs	r2, #0
    bc98:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    bc9a:	9b04      	ldr	r3, [sp, #16]
    bc9c:	2200      	movs	r2, #0
    bc9e:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    bca0:	9b01      	ldr	r3, [sp, #4]
    bca2:	685b      	ldr	r3, [r3, #4]
    bca4:	2b01      	cmp	r3, #1
    bca6:	d119      	bne.n	bcdc <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    bca8:	9b05      	ldr	r3, [sp, #20]
    bcaa:	681b      	ldr	r3, [r3, #0]
    bcac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    bcb0:	9b05      	ldr	r3, [sp, #20]
    bcb2:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    bcb4:	9b05      	ldr	r3, [sp, #20]
    bcb6:	681b      	ldr	r3, [r3, #0]
    bcb8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    bcbc:	9b05      	ldr	r3, [sp, #20]
    bcbe:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    bcc0:	9b04      	ldr	r3, [sp, #16]
    bcc2:	681b      	ldr	r3, [r3, #0]
    bcc4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    bcc8:	9b04      	ldr	r3, [sp, #16]
    bcca:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    bccc:	9b04      	ldr	r3, [sp, #16]
    bcce:	681a      	ldr	r2, [r3, #0]
    bcd0:	9b00      	ldr	r3, [sp, #0]
    bcd2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    bcd6:	431a      	orrs	r2, r3
    bcd8:	9b04      	ldr	r3, [sp, #16]
    bcda:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    bcdc:	9b01      	ldr	r3, [sp, #4]
    bcde:	685b      	ldr	r3, [r3, #4]
    bce0:	2b00      	cmp	r3, #0
    bce2:	d116      	bne.n	bd12 <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    bce4:	9b05      	ldr	r3, [sp, #20]
    bce6:	681b      	ldr	r3, [r3, #0]
    bce8:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    bcec:	9b05      	ldr	r3, [sp, #20]
    bcee:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    bcf0:	9b04      	ldr	r3, [sp, #16]
    bcf2:	681b      	ldr	r3, [r3, #0]
    bcf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    bcf8:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    bcfc:	9a04      	ldr	r2, [sp, #16]
    bcfe:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    bd00:	9b04      	ldr	r3, [sp, #16]
    bd02:	681a      	ldr	r2, [r3, #0]
    bd04:	9b00      	ldr	r3, [sp, #0]
    bd06:	0499      	lsls	r1, r3, #18
    bd08:	4b0e      	ldr	r3, [pc, #56]	; (bd44 <FlexCAN_SetRxMsgBuff+0xcc>)
    bd0a:	400b      	ands	r3, r1
    bd0c:	431a      	orrs	r2, r3
    bd0e:	9b04      	ldr	r3, [sp, #16]
    bd10:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    bd12:	9b01      	ldr	r3, [sp, #4]
    bd14:	681b      	ldr	r3, [r3, #0]
    bd16:	2b0f      	cmp	r3, #15
    bd18:	d00f      	beq.n	bd3a <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    bd1a:	9b05      	ldr	r3, [sp, #20]
    bd1c:	681b      	ldr	r3, [r3, #0]
    bd1e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    bd22:	9b05      	ldr	r3, [sp, #20]
    bd24:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    bd26:	9b05      	ldr	r3, [sp, #20]
    bd28:	681a      	ldr	r2, [r3, #0]
    bd2a:	9b01      	ldr	r3, [sp, #4]
    bd2c:	681b      	ldr	r3, [r3, #0]
    bd2e:	061b      	lsls	r3, r3, #24
    bd30:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    bd34:	431a      	orrs	r2, r3
    bd36:	9b05      	ldr	r3, [sp, #20]
    bd38:	601a      	str	r2, [r3, #0]
    }
}
    bd3a:	bf00      	nop
    bd3c:	b007      	add	sp, #28
    bd3e:	f85d fb04 	ldr.w	pc, [sp], #4
    bd42:	bf00      	nop
    bd44:	1ffc0000 	.word	0x1ffc0000

0000bd48 <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    bd48:	b500      	push	{lr}
    bd4a:	b085      	sub	sp, #20
    bd4c:	9001      	str	r0, [sp, #4]
    bd4e:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    bd50:	2300      	movs	r3, #0
    bd52:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    bd54:	9900      	ldr	r1, [sp, #0]
    bd56:	9801      	ldr	r0, [sp, #4]
    bd58:	f7ff fb62 	bl	b420 <FlexCAN_GetMsgBuffRegion>
    bd5c:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    bd5e:	9b02      	ldr	r3, [sp, #8]
    bd60:	681b      	ldr	r3, [r3, #0]
    bd62:	b29b      	uxth	r3, r3
    bd64:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    bd66:	9b03      	ldr	r3, [sp, #12]
}
    bd68:	4618      	mov	r0, r3
    bd6a:	b005      	add	sp, #20
    bd6c:	f85d fb04 	ldr.w	pc, [sp], #4

0000bd70 <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    bd70:	b500      	push	{lr}
    bd72:	b08d      	sub	sp, #52	; 0x34
    bd74:	9003      	str	r0, [sp, #12]
    bd76:	9102      	str	r1, [sp, #8]
    bd78:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    bd7a:	9902      	ldr	r1, [sp, #8]
    bd7c:	9803      	ldr	r0, [sp, #12]
    bd7e:	f7ff fb4f 	bl	b420 <FlexCAN_GetMsgBuffRegion>
    bd82:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    bd84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bd86:	3304      	adds	r3, #4
    bd88:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    bd8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bd8c:	3308      	adds	r3, #8
    bd8e:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    bd90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bd92:	3308      	adds	r3, #8
    bd94:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    bd96:	2300      	movs	r3, #0
    bd98:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    bd9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bd9c:	681b      	ldr	r3, [r3, #0]
    bd9e:	0c1b      	lsrs	r3, r3, #16
    bda0:	b2db      	uxtb	r3, r3
    bda2:	f003 030f 	and.w	r3, r3, #15
    bda6:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    bdaa:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bdae:	4618      	mov	r0, r3
    bdb0:	f7ff faed 	bl	b38e <FlexCAN_ComputePayloadSize>
    bdb4:	4603      	mov	r3, r0
    bdb6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    bdba:	9b01      	ldr	r3, [sp, #4]
    bdbc:	3308      	adds	r3, #8
    bdbe:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    bdc0:	9902      	ldr	r1, [sp, #8]
    bdc2:	9803      	ldr	r0, [sp, #12]
    bdc4:	f7ff fe5a 	bl	ba7c <FlexCAN_GetMbPayloadSize>
    bdc8:	4603      	mov	r3, r0
    bdca:	461a      	mov	r2, r3
    bdcc:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    bdd0:	4293      	cmp	r3, r2
    bdd2:	d906      	bls.n	bde2 <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    bdd4:	9902      	ldr	r1, [sp, #8]
    bdd6:	9803      	ldr	r0, [sp, #12]
    bdd8:	f7ff fe50 	bl	ba7c <FlexCAN_GetMbPayloadSize>
    bddc:	4603      	mov	r3, r0
    bdde:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    bde2:	9b01      	ldr	r3, [sp, #4]
    bde4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    bde8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    bdec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bdee:	681a      	ldr	r2, [r3, #0]
    bdf0:	9b01      	ldr	r3, [sp, #4]
    bdf2:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    bdf4:	9b01      	ldr	r3, [sp, #4]
    bdf6:	681b      	ldr	r3, [r3, #0]
    bdf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    bdfc:	2b00      	cmp	r3, #0
    bdfe:	d004      	beq.n	be0a <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    be00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    be02:	681a      	ldr	r2, [r3, #0]
    be04:	9b01      	ldr	r3, [sp, #4]
    be06:	605a      	str	r2, [r3, #4]
    be08:	e004      	b.n	be14 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    be0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    be0c:	681b      	ldr	r3, [r3, #0]
    be0e:	0c9a      	lsrs	r2, r3, #18
    be10:	9b01      	ldr	r3, [sp, #4]
    be12:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    be14:	9b01      	ldr	r3, [sp, #4]
    be16:	681b      	ldr	r3, [r3, #0]
    be18:	b29a      	uxth	r2, r3
    be1a:	9b01      	ldr	r3, [sp, #4]
    be1c:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    be1e:	2300      	movs	r3, #0
    be20:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    be24:	e025      	b.n	be72 <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    be26:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    be2a:	089b      	lsrs	r3, r3, #2
    be2c:	b2db      	uxtb	r3, r3
    be2e:	009b      	lsls	r3, r3, #2
    be30:	9a07      	ldr	r2, [sp, #28]
    be32:	4413      	add	r3, r2
    be34:	681b      	ldr	r3, [r3, #0]
    be36:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    be38:	9b04      	ldr	r3, [sp, #16]
    be3a:	0e1a      	lsrs	r2, r3, #24
    be3c:	9b04      	ldr	r3, [sp, #16]
    be3e:	0a1b      	lsrs	r3, r3, #8
    be40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    be44:	431a      	orrs	r2, r3
    be46:	9b04      	ldr	r3, [sp, #16]
    be48:	021b      	lsls	r3, r3, #8
    be4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    be4e:	ea42 0103 	orr.w	r1, r2, r3
    be52:	9b04      	ldr	r3, [sp, #16]
    be54:	061a      	lsls	r2, r3, #24
    be56:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    be5a:	089b      	lsrs	r3, r3, #2
    be5c:	b2db      	uxtb	r3, r3
    be5e:	009b      	lsls	r3, r3, #2
    be60:	9806      	ldr	r0, [sp, #24]
    be62:	4403      	add	r3, r0
    be64:	430a      	orrs	r2, r1
    be66:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    be68:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    be6c:	3304      	adds	r3, #4
    be6e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    be72:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    be76:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    be7a:	f023 0303 	bic.w	r3, r3, #3
    be7e:	429a      	cmp	r2, r3
    be80:	d3d1      	bcc.n	be26 <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    be82:	e014      	b.n	beae <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    be84:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    be88:	f083 0303 	eor.w	r3, r3, #3
    be8c:	b2db      	uxtb	r3, r3
    be8e:	461a      	mov	r2, r3
    be90:	9b08      	ldr	r3, [sp, #32]
    be92:	441a      	add	r2, r3
    be94:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    be98:	7812      	ldrb	r2, [r2, #0]
    be9a:	b2d1      	uxtb	r1, r2
    be9c:	9a01      	ldr	r2, [sp, #4]
    be9e:	4413      	add	r3, r2
    bea0:	460a      	mov	r2, r1
    bea2:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    bea4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    bea8:	3301      	adds	r3, #1
    beaa:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    beae:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    beb2:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    beb6:	429a      	cmp	r2, r3
    beb8:	d3e4      	bcc.n	be84 <FlexCAN_GetMsgBuff+0x114>
    }
}
    beba:	bf00      	nop
    bebc:	bf00      	nop
    bebe:	b00d      	add	sp, #52	; 0x34
    bec0:	f85d fb04 	ldr.w	pc, [sp], #4

0000bec4 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    bec4:	b500      	push	{lr}
    bec6:	b08d      	sub	sp, #52	; 0x34
    bec8:	9003      	str	r0, [sp, #12]
    beca:	9102      	str	r1, [sp, #8]
    becc:	9201      	str	r2, [sp, #4]
    bece:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    bed0:	2300      	movs	r3, #0
    bed2:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    bed4:	9b03      	ldr	r3, [sp, #12]
    bed6:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    bed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    beda:	3304      	adds	r3, #4
    bedc:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    bede:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bee0:	3308      	adds	r3, #8
    bee2:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    bee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bee6:	3308      	adds	r3, #8
    bee8:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    beea:	9b00      	ldr	r3, [sp, #0]
    beec:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    beee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bef0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    bef4:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    bef6:	9b08      	ldr	r3, [sp, #32]
    bef8:	2200      	movs	r2, #0
    befa:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    befc:	9b02      	ldr	r3, [sp, #8]
    befe:	689b      	ldr	r3, [r3, #8]
    bf00:	b2db      	uxtb	r3, r3
    bf02:	4618      	mov	r0, r3
    bf04:	f7ff f9f4 	bl	b2f0 <FlexCAN_ComputeDLCValue>
    bf08:	4603      	mov	r3, r0
    bf0a:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    bf0e:	9b00      	ldr	r3, [sp, #0]
    bf10:	2b00      	cmp	r3, #0
    bf12:	d065      	beq.n	bfe0 <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    bf14:	2300      	movs	r3, #0
    bf16:	930a      	str	r3, [sp, #40]	; 0x28
    bf18:	e02c      	b.n	bf74 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    bf1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf1c:	089b      	lsrs	r3, r3, #2
    bf1e:	009b      	lsls	r3, r3, #2
    bf20:	9a05      	ldr	r2, [sp, #20]
    bf22:	4413      	add	r3, r2
    bf24:	681b      	ldr	r3, [r3, #0]
    bf26:	0e1a      	lsrs	r2, r3, #24
    bf28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf2a:	089b      	lsrs	r3, r3, #2
    bf2c:	009b      	lsls	r3, r3, #2
    bf2e:	9905      	ldr	r1, [sp, #20]
    bf30:	440b      	add	r3, r1
    bf32:	681b      	ldr	r3, [r3, #0]
    bf34:	0a1b      	lsrs	r3, r3, #8
    bf36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    bf3a:	431a      	orrs	r2, r3
    bf3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf3e:	089b      	lsrs	r3, r3, #2
    bf40:	009b      	lsls	r3, r3, #2
    bf42:	9905      	ldr	r1, [sp, #20]
    bf44:	440b      	add	r3, r1
    bf46:	681b      	ldr	r3, [r3, #0]
    bf48:	021b      	lsls	r3, r3, #8
    bf4a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    bf4e:	ea42 0103 	orr.w	r1, r2, r3
    bf52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf54:	089b      	lsrs	r3, r3, #2
    bf56:	009b      	lsls	r3, r3, #2
    bf58:	9a05      	ldr	r2, [sp, #20]
    bf5a:	4413      	add	r3, r2
    bf5c:	681b      	ldr	r3, [r3, #0]
    bf5e:	061a      	lsls	r2, r3, #24
    bf60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf62:	089b      	lsrs	r3, r3, #2
    bf64:	009b      	lsls	r3, r3, #2
    bf66:	9806      	ldr	r0, [sp, #24]
    bf68:	4403      	add	r3, r0
    bf6a:	430a      	orrs	r2, r1
    bf6c:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    bf6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf70:	3304      	adds	r3, #4
    bf72:	930a      	str	r3, [sp, #40]	; 0x28
    bf74:	9b02      	ldr	r3, [sp, #8]
    bf76:	689b      	ldr	r3, [r3, #8]
    bf78:	f023 0303 	bic.w	r3, r3, #3
    bf7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bf7e:	429a      	cmp	r2, r3
    bf80:	d3cb      	bcc.n	bf1a <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    bf82:	e00c      	b.n	bf9e <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    bf84:	9a00      	ldr	r2, [sp, #0]
    bf86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf88:	441a      	add	r2, r3
    bf8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf8c:	f083 0303 	eor.w	r3, r3, #3
    bf90:	9907      	ldr	r1, [sp, #28]
    bf92:	440b      	add	r3, r1
    bf94:	7812      	ldrb	r2, [r2, #0]
    bf96:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    bf98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf9a:	3301      	adds	r3, #1
    bf9c:	930a      	str	r3, [sp, #40]	; 0x28
    bf9e:	9b02      	ldr	r3, [sp, #8]
    bfa0:	689b      	ldr	r3, [r3, #8]
    bfa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bfa4:	429a      	cmp	r2, r3
    bfa6:	d3ed      	bcc.n	bf84 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    bfa8:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bfac:	4618      	mov	r0, r3
    bfae:	f7ff f9ee 	bl	b38e <FlexCAN_ComputePayloadSize>
    bfb2:	4603      	mov	r3, r0
    bfb4:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    bfb8:	9b02      	ldr	r3, [sp, #8]
    bfba:	689b      	ldr	r3, [r3, #8]
    bfbc:	930a      	str	r3, [sp, #40]	; 0x28
    bfbe:	e00a      	b.n	bfd6 <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    bfc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bfc2:	f083 0303 	eor.w	r3, r3, #3
    bfc6:	9a07      	ldr	r2, [sp, #28]
    bfc8:	4413      	add	r3, r2
    bfca:	9a02      	ldr	r2, [sp, #8]
    bfcc:	7b52      	ldrb	r2, [r2, #13]
    bfce:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    bfd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bfd2:	3301      	adds	r3, #1
    bfd4:	930a      	str	r3, [sp, #40]	; 0x28
    bfd6:	f89d 3012 	ldrb.w	r3, [sp, #18]
    bfda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bfdc:	429a      	cmp	r2, r3
    bfde:	d3ef      	bcc.n	bfc0 <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    bfe0:	9b02      	ldr	r3, [sp, #8]
    bfe2:	685b      	ldr	r3, [r3, #4]
    bfe4:	2b01      	cmp	r3, #1
    bfe6:	d111      	bne.n	c00c <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    bfe8:	9b08      	ldr	r3, [sp, #32]
    bfea:	681b      	ldr	r3, [r3, #0]
    bfec:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    bff0:	9b08      	ldr	r3, [sp, #32]
    bff2:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    bff4:	9b08      	ldr	r3, [sp, #32]
    bff6:	681a      	ldr	r2, [r3, #0]
    bff8:	9b01      	ldr	r3, [sp, #4]
    bffa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    bffe:	431a      	orrs	r2, r3
    c000:	9b08      	ldr	r3, [sp, #32]
    c002:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c006:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    c00a:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    c00c:	9b02      	ldr	r3, [sp, #8]
    c00e:	685b      	ldr	r3, [r3, #4]
    c010:	2b00      	cmp	r3, #0
    c012:	d114      	bne.n	c03e <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    c014:	9b08      	ldr	r3, [sp, #32]
    c016:	681b      	ldr	r3, [r3, #0]
    c018:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    c01c:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    c020:	9a08      	ldr	r2, [sp, #32]
    c022:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    c024:	9b08      	ldr	r3, [sp, #32]
    c026:	681a      	ldr	r2, [r3, #0]
    c028:	9b01      	ldr	r3, [sp, #4]
    c02a:	0499      	lsls	r1, r3, #18
    c02c:	4b2b      	ldr	r3, [pc, #172]	; (c0dc <FlexCAN_SetTxMsgBuff+0x218>)
    c02e:	400b      	ands	r3, r1
    c030:	431a      	orrs	r2, r3
    c032:	9b08      	ldr	r3, [sp, #32]
    c034:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c038:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    c03c:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    c03e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c040:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    c044:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    c046:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c04a:	041b      	lsls	r3, r3, #16
    c04c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    c050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c052:	4313      	orrs	r3, r2
    c054:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    c056:	9b02      	ldr	r3, [sp, #8]
    c058:	681b      	ldr	r3, [r3, #0]
    c05a:	2b0f      	cmp	r3, #15
    c05c:	d03a      	beq.n	c0d4 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    c05e:	9b02      	ldr	r3, [sp, #8]
    c060:	681b      	ldr	r3, [r3, #0]
    c062:	2b1c      	cmp	r3, #28
    c064:	d104      	bne.n	c070 <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    c066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c06c:	930b      	str	r3, [sp, #44]	; 0x2c
    c06e:	e007      	b.n	c080 <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    c070:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    c074:	2b00      	cmp	r3, #0
    c076:	d003      	beq.n	c080 <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    c078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c07a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c07e:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    c080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c082:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c086:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    c088:	9b02      	ldr	r3, [sp, #8]
    c08a:	7b1b      	ldrb	r3, [r3, #12]
    c08c:	2b00      	cmp	r3, #0
    c08e:	d00e      	beq.n	c0ae <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    c090:	9b02      	ldr	r3, [sp, #8]
    c092:	681b      	ldr	r3, [r3, #0]
    c094:	061b      	lsls	r3, r3, #24
    c096:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    c09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c09c:	4313      	orrs	r3, r2
    c09e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c0a2:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    c0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c0a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    c0aa:	930b      	str	r3, [sp, #44]	; 0x2c
    c0ac:	e007      	b.n	c0be <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c0ae:	9b02      	ldr	r3, [sp, #8]
    c0b0:	681b      	ldr	r3, [r3, #0]
    c0b2:	061b      	lsls	r3, r3, #24
    c0b4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    c0b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c0ba:	4313      	orrs	r3, r2
    c0bc:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    c0be:	9b02      	ldr	r3, [sp, #8]
    c0c0:	7b9b      	ldrb	r3, [r3, #14]
    c0c2:	2b00      	cmp	r3, #0
    c0c4:	d003      	beq.n	c0ce <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    c0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c0c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c0cc:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    c0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c0d2:	601a      	str	r2, [r3, #0]
        }
}
    c0d4:	bf00      	nop
    c0d6:	b00d      	add	sp, #52	; 0x34
    c0d8:	f85d fb04 	ldr.w	pc, [sp], #4
    c0dc:	1ffc0000 	.word	0x1ffc0000

0000c0e0 <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    c0e0:	b500      	push	{lr}
    c0e2:	b08f      	sub	sp, #60	; 0x3c
    c0e4:	9001      	str	r0, [sp, #4]
    c0e6:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    c0e8:	9b01      	ldr	r3, [sp, #4]
    c0ea:	3380      	adds	r3, #128	; 0x80
    c0ec:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    c0ee:	2300      	movs	r3, #0
    c0f0:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    c0f2:	2300      	movs	r3, #0
    c0f4:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    c0f6:	2300      	movs	r3, #0
    c0f8:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    c0fa:	2300      	movs	r3, #0
    c0fc:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    c0fe:	2308      	movs	r3, #8
    c100:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    c104:	9b00      	ldr	r3, [sp, #0]
    c106:	3b01      	subs	r3, #1
    c108:	4619      	mov	r1, r3
    c10a:	9801      	ldr	r0, [sp, #4]
    c10c:	f7ff fcb6 	bl	ba7c <FlexCAN_GetMbPayloadSize>
    c110:	4603      	mov	r3, r0
    c112:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    c116:	2300      	movs	r3, #0
    c118:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    c11a:	2300      	movs	r3, #0
    c11c:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    c11e:	2300      	movs	r3, #0
    c120:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    c122:	9b00      	ldr	r3, [sp, #0]
    c124:	3b01      	subs	r3, #1
    c126:	4619      	mov	r1, r3
    c128:	9801      	ldr	r0, [sp, #4]
    c12a:	f7ff f979 	bl	b420 <FlexCAN_GetMsgBuffRegion>
    c12e:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    c130:	f89d 2016 	ldrb.w	r2, [sp, #22]
    c134:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c136:	441a      	add	r2, r3
    c138:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c13c:	4413      	add	r3, r2
    c13e:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    c140:	9801      	ldr	r0, [sp, #4]
    c142:	f7ff f9e7 	bl	b514 <FlexCAN_GetMaxMbNum>
    c146:	4603      	mov	r3, r0
    c148:	011b      	lsls	r3, r3, #4
    c14a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c14c:	4413      	add	r3, r2
    c14e:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    c150:	9a04      	ldr	r2, [sp, #16]
    c152:	9b03      	ldr	r3, [sp, #12]
    c154:	429a      	cmp	r2, r3
    c156:	d806      	bhi.n	c166 <FlexCAN_SetMaxMsgBuffNum+0x86>
    c158:	9801      	ldr	r0, [sp, #4]
    c15a:	f7ff f9db 	bl	b514 <FlexCAN_GetMaxMbNum>
    c15e:	4602      	mov	r2, r0
    c160:	9b00      	ldr	r3, [sp, #0]
    c162:	4293      	cmp	r3, r2
    c164:	d901      	bls.n	c16a <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    c166:	2304      	movs	r3, #4
    c168:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    c16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c16c:	2b00      	cmp	r3, #0
    c16e:	d142      	bne.n	c1f6 <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    c170:	9b01      	ldr	r3, [sp, #4]
    c172:	681b      	ldr	r3, [r3, #0]
    c174:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    c178:	9b00      	ldr	r3, [sp, #0]
    c17a:	3b01      	subs	r3, #1
    c17c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c180:	431a      	orrs	r2, r3
    c182:	9b01      	ldr	r3, [sp, #4]
    c184:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    c186:	9b01      	ldr	r3, [sp, #4]
    c188:	681b      	ldr	r3, [r3, #0]
    c18a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    c18e:	2b00      	cmp	r3, #0
    c190:	d131      	bne.n	c1f6 <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    c192:	2300      	movs	r3, #0
    c194:	930d      	str	r3, [sp, #52]	; 0x34
    c196:	e02a      	b.n	c1ee <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    c198:	990d      	ldr	r1, [sp, #52]	; 0x34
    c19a:	9801      	ldr	r0, [sp, #4]
    c19c:	f7ff f940 	bl	b420 <FlexCAN_GetMsgBuffRegion>
    c1a0:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    c1a2:	9b08      	ldr	r3, [sp, #32]
    c1a4:	3304      	adds	r3, #4
    c1a6:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    c1a8:	9b08      	ldr	r3, [sp, #32]
    c1aa:	3308      	adds	r3, #8
    c1ac:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    c1ae:	9b08      	ldr	r3, [sp, #32]
    c1b0:	2200      	movs	r2, #0
    c1b2:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    c1b4:	9b07      	ldr	r3, [sp, #28]
    c1b6:	2200      	movs	r2, #0
    c1b8:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    c1ba:	990d      	ldr	r1, [sp, #52]	; 0x34
    c1bc:	9801      	ldr	r0, [sp, #4]
    c1be:	f7ff fc5d 	bl	ba7c <FlexCAN_GetMbPayloadSize>
    c1c2:	4603      	mov	r3, r0
    c1c4:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    c1c8:	2300      	movs	r3, #0
    c1ca:	930c      	str	r3, [sp, #48]	; 0x30
    c1cc:	e007      	b.n	c1de <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    c1ce:	9a06      	ldr	r2, [sp, #24]
    c1d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c1d2:	4413      	add	r3, r2
    c1d4:	2200      	movs	r2, #0
    c1d6:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    c1d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c1da:	3301      	adds	r3, #1
    c1dc:	930c      	str	r3, [sp, #48]	; 0x30
    c1de:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c1e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c1e4:	429a      	cmp	r2, r3
    c1e6:	d3f2      	bcc.n	c1ce <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    c1e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c1ea:	3301      	adds	r3, #1
    c1ec:	930d      	str	r3, [sp, #52]	; 0x34
    c1ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c1f0:	9b00      	ldr	r3, [sp, #0]
    c1f2:	429a      	cmp	r2, r3
    c1f4:	d3d0      	bcc.n	c198 <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    c1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    c1f8:	4618      	mov	r0, r3
    c1fa:	b00f      	add	sp, #60	; 0x3c
    c1fc:	f85d fb04 	ldr.w	pc, [sp], #4

0000c200 <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    c200:	b500      	push	{lr}
    c202:	b083      	sub	sp, #12
    c204:	9001      	str	r0, [sp, #4]
    c206:	9100      	str	r1, [sp, #0]
    switch (mode)
    c208:	9b00      	ldr	r3, [sp, #0]
    c20a:	2b02      	cmp	r3, #2
    c20c:	d01d      	beq.n	c24a <FlexCAN_SetOperationMode+0x4a>
    c20e:	9b00      	ldr	r3, [sp, #0]
    c210:	2b02      	cmp	r3, #2
    c212:	d82b      	bhi.n	c26c <FlexCAN_SetOperationMode+0x6c>
    c214:	9b00      	ldr	r3, [sp, #0]
    c216:	2b00      	cmp	r3, #0
    c218:	d003      	beq.n	c222 <FlexCAN_SetOperationMode+0x22>
    c21a:	9b00      	ldr	r3, [sp, #0]
    c21c:	2b01      	cmp	r3, #1
    c21e:	d00d      	beq.n	c23c <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    c220:	e024      	b.n	c26c <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    c222:	9b01      	ldr	r3, [sp, #4]
    c224:	685b      	ldr	r3, [r3, #4]
    c226:	f023 0208 	bic.w	r2, r3, #8
    c22a:	9b01      	ldr	r3, [sp, #4]
    c22c:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    c22e:	9b01      	ldr	r3, [sp, #4]
    c230:	685b      	ldr	r3, [r3, #4]
    c232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    c236:	9b01      	ldr	r3, [sp, #4]
    c238:	605a      	str	r2, [r3, #4]
            break;
    c23a:	e018      	b.n	c26e <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    c23c:	9b01      	ldr	r3, [sp, #4]
    c23e:	685b      	ldr	r3, [r3, #4]
    c240:	f043 0208 	orr.w	r2, r3, #8
    c244:	9b01      	ldr	r3, [sp, #4]
    c246:	605a      	str	r2, [r3, #4]
            break;
    c248:	e011      	b.n	c26e <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    c24a:	9b01      	ldr	r3, [sp, #4]
    c24c:	685b      	ldr	r3, [r3, #4]
    c24e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    c252:	9b01      	ldr	r3, [sp, #4]
    c254:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    c256:	9b01      	ldr	r3, [sp, #4]
    c258:	685b      	ldr	r3, [r3, #4]
    c25a:	f023 0208 	bic.w	r2, r3, #8
    c25e:	9b01      	ldr	r3, [sp, #4]
    c260:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    c262:	2101      	movs	r1, #1
    c264:	9801      	ldr	r0, [sp, #4]
    c266:	f7fe ff7f 	bl	b168 <FlexCAN_SetSelfReception>
            break;
    c26a:	e000      	b.n	c26e <FlexCAN_SetOperationMode+0x6e>
            break;
    c26c:	bf00      	nop
    }
}
    c26e:	bf00      	nop
    c270:	b003      	add	sp, #12
    c272:	f85d fb04 	ldr.w	pc, [sp], #4

0000c276 <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    c276:	b500      	push	{lr}
    c278:	b08d      	sub	sp, #52	; 0x34
    c27a:	9003      	str	r0, [sp, #12]
    c27c:	9102      	str	r1, [sp, #8]
    c27e:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    c280:	2300      	movs	r3, #0
    c282:	9309      	str	r3, [sp, #36]	; 0x24
    c284:	2300      	movs	r3, #0
    c286:	9308      	str	r3, [sp, #32]
    c288:	2300      	movs	r3, #0
    c28a:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    c28c:	9b03      	ldr	r3, [sp, #12]
    c28e:	33e0      	adds	r3, #224	; 0xe0
    c290:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    c292:	9b03      	ldr	r3, [sp, #12]
    c294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c296:	0e1b      	lsrs	r3, r3, #24
    c298:	f003 030f 	and.w	r3, r3, #15
    c29c:	9305      	str	r3, [sp, #20]
    c29e:	9b02      	ldr	r3, [sp, #8]
    c2a0:	2b03      	cmp	r3, #3
    c2a2:	f200 81e7 	bhi.w	c674 <FlexCAN_SetRxFifoFilter+0x3fe>
    c2a6:	a201      	add	r2, pc, #4	; (adr r2, c2ac <FlexCAN_SetRxFifoFilter+0x36>)
    c2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c2ac:	0000c2bd 	.word	0x0000c2bd
    c2b0:	0000c357 	.word	0x0000c357
    c2b4:	0000c491 	.word	0x0000c491
    c2b8:	0000c65f 	.word	0x0000c65f
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c2bc:	f000 ffb4 	bl	d228 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    c2c0:	9b03      	ldr	r3, [sp, #12]
    c2c2:	681b      	ldr	r3, [r3, #0]
    c2c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    c2c8:	9b03      	ldr	r3, [sp, #12]
    c2ca:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c2cc:	f000 ffd8 	bl	d280 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c2d0:	2300      	movs	r3, #0
    c2d2:	930b      	str	r3, [sp, #44]	; 0x2c
    c2d4:	e038      	b.n	c348 <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    c2d6:	2300      	movs	r3, #0
    c2d8:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    c2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c2dc:	00db      	lsls	r3, r3, #3
    c2de:	9a01      	ldr	r2, [sp, #4]
    c2e0:	4413      	add	r3, r2
    c2e2:	781b      	ldrb	r3, [r3, #0]
    c2e4:	2b00      	cmp	r3, #0
    c2e6:	d002      	beq.n	c2ee <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    c2e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c2ec:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    c2ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c2f0:	00db      	lsls	r3, r3, #3
    c2f2:	9a01      	ldr	r2, [sp, #4]
    c2f4:	4413      	add	r3, r2
    c2f6:	785b      	ldrb	r3, [r3, #1]
    c2f8:	2b00      	cmp	r3, #0
    c2fa:	d013      	beq.n	c324 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    c2fc:	9b07      	ldr	r3, [sp, #28]
    c2fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c302:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    c304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c306:	00db      	lsls	r3, r3, #3
    c308:	9a01      	ldr	r2, [sp, #4]
    c30a:	4413      	add	r3, r2
    c30c:	685b      	ldr	r3, [r3, #4]
    c30e:	005b      	lsls	r3, r3, #1
    c310:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    c314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c316:	009b      	lsls	r3, r3, #2
    c318:	9a06      	ldr	r2, [sp, #24]
    c31a:	4413      	add	r3, r2
    c31c:	9a07      	ldr	r2, [sp, #28]
    c31e:	440a      	add	r2, r1
    c320:	601a      	str	r2, [r3, #0]
    c322:	e00e      	b.n	c342 <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    c324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c326:	00db      	lsls	r3, r3, #3
    c328:	9a01      	ldr	r2, [sp, #4]
    c32a:	4413      	add	r3, r2
    c32c:	685b      	ldr	r3, [r3, #4]
    c32e:	04da      	lsls	r2, r3, #19
    c330:	4b9d      	ldr	r3, [pc, #628]	; (c5a8 <FlexCAN_SetRxFifoFilter+0x332>)
    c332:	4013      	ands	r3, r2
    c334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c336:	0092      	lsls	r2, r2, #2
    c338:	9906      	ldr	r1, [sp, #24]
    c33a:	440a      	add	r2, r1
    c33c:	9907      	ldr	r1, [sp, #28]
    c33e:	440b      	add	r3, r1
    c340:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c344:	3301      	adds	r3, #1
    c346:	930b      	str	r3, [sp, #44]	; 0x2c
    c348:	9b05      	ldr	r3, [sp, #20]
    c34a:	3301      	adds	r3, #1
    c34c:	00db      	lsls	r3, r3, #3
    c34e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c350:	429a      	cmp	r2, r3
    c352:	d3c0      	bcc.n	c2d6 <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    c354:	e18f      	b.n	c676 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c356:	f000 ff67 	bl	d228 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    c35a:	9b03      	ldr	r3, [sp, #12]
    c35c:	681b      	ldr	r3, [r3, #0]
    c35e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    c362:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    c366:	9b03      	ldr	r3, [sp, #12]
    c368:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c36a:	f000 ff89 	bl	d280 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    c36e:	2300      	movs	r3, #0
    c370:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c372:	2300      	movs	r3, #0
    c374:	930b      	str	r3, [sp, #44]	; 0x2c
    c376:	e083      	b.n	c480 <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    c378:	2300      	movs	r3, #0
    c37a:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    c37c:	2300      	movs	r3, #0
    c37e:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    c380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c382:	00db      	lsls	r3, r3, #3
    c384:	9a01      	ldr	r2, [sp, #4]
    c386:	4413      	add	r3, r2
    c388:	781b      	ldrb	r3, [r3, #0]
    c38a:	2b00      	cmp	r3, #0
    c38c:	d002      	beq.n	c394 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    c38e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c392:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    c394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c396:	3301      	adds	r3, #1
    c398:	00db      	lsls	r3, r3, #3
    c39a:	9a01      	ldr	r2, [sp, #4]
    c39c:	4413      	add	r3, r2
    c39e:	781b      	ldrb	r3, [r3, #0]
    c3a0:	2b00      	cmp	r3, #0
    c3a2:	d002      	beq.n	c3aa <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    c3a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    c3a8:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    c3aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3ac:	00db      	lsls	r3, r3, #3
    c3ae:	9a01      	ldr	r2, [sp, #4]
    c3b0:	4413      	add	r3, r2
    c3b2:	785b      	ldrb	r3, [r3, #1]
    c3b4:	2b00      	cmp	r3, #0
    c3b6:	d014      	beq.n	c3e2 <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    c3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c3ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c3be:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3c2:	00db      	lsls	r3, r3, #3
    c3c4:	9a01      	ldr	r2, [sp, #4]
    c3c6:	4413      	add	r3, r2
    c3c8:	685b      	ldr	r3, [r3, #4]
    c3ca:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    c3cc:	041a      	lsls	r2, r3, #16
    c3ce:	4b77      	ldr	r3, [pc, #476]	; (c5ac <FlexCAN_SetRxFifoFilter+0x336>)
    c3d0:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c3d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c3d4:	0092      	lsls	r2, r2, #2
    c3d6:	9906      	ldr	r1, [sp, #24]
    c3d8:	440a      	add	r2, r1
    c3da:	9909      	ldr	r1, [sp, #36]	; 0x24
    c3dc:	440b      	add	r3, r1
    c3de:	6013      	str	r3, [r2, #0]
    c3e0:	e00e      	b.n	c400 <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    c3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3e4:	00db      	lsls	r3, r3, #3
    c3e6:	9a01      	ldr	r2, [sp, #4]
    c3e8:	4413      	add	r3, r2
    c3ea:	685b      	ldr	r3, [r3, #4]
    c3ec:	04da      	lsls	r2, r3, #19
    c3ee:	4b6e      	ldr	r3, [pc, #440]	; (c5a8 <FlexCAN_SetRxFifoFilter+0x332>)
    c3f0:	4013      	ands	r3, r2
    c3f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c3f4:	0092      	lsls	r2, r2, #2
    c3f6:	9906      	ldr	r1, [sp, #24]
    c3f8:	440a      	add	r2, r1
    c3fa:	9909      	ldr	r1, [sp, #36]	; 0x24
    c3fc:	440b      	add	r3, r1
    c3fe:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    c400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c402:	3301      	adds	r3, #1
    c404:	00db      	lsls	r3, r3, #3
    c406:	9a01      	ldr	r2, [sp, #4]
    c408:	4413      	add	r3, r2
    c40a:	785b      	ldrb	r3, [r3, #1]
    c40c:	2b00      	cmp	r3, #0
    c40e:	d01a      	beq.n	c446 <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    c410:	9b08      	ldr	r3, [sp, #32]
    c412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    c416:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c41a:	009b      	lsls	r3, r3, #2
    c41c:	9a06      	ldr	r2, [sp, #24]
    c41e:	4413      	add	r3, r2
    c420:	6819      	ldr	r1, [r3, #0]
    c422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c424:	3301      	adds	r3, #1
    c426:	00db      	lsls	r3, r3, #3
    c428:	9a01      	ldr	r2, [sp, #4]
    c42a:	4413      	add	r3, r2
    c42c:	685b      	ldr	r3, [r3, #4]
    c42e:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    c430:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c434:	9b08      	ldr	r3, [sp, #32]
    c436:	441a      	add	r2, r3
    c438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c43a:	009b      	lsls	r3, r3, #2
    c43c:	9806      	ldr	r0, [sp, #24]
    c43e:	4403      	add	r3, r0
    c440:	430a      	orrs	r2, r1
    c442:	601a      	str	r2, [r3, #0]
    c444:	e016      	b.n	c474 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    c446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c448:	009b      	lsls	r3, r3, #2
    c44a:	9a06      	ldr	r2, [sp, #24]
    c44c:	4413      	add	r3, r2
    c44e:	6819      	ldr	r1, [r3, #0]
    c450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c452:	3301      	adds	r3, #1
    c454:	00db      	lsls	r3, r3, #3
    c456:	9a01      	ldr	r2, [sp, #4]
    c458:	4413      	add	r3, r2
    c45a:	685b      	ldr	r3, [r3, #4]
    c45c:	00da      	lsls	r2, r3, #3
    c45e:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    c462:	4013      	ands	r3, r2
    c464:	9a08      	ldr	r2, [sp, #32]
    c466:	441a      	add	r2, r3
    c468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c46a:	009b      	lsls	r3, r3, #2
    c46c:	9806      	ldr	r0, [sp, #24]
    c46e:	4403      	add	r3, r0
    c470:	430a      	orrs	r2, r1
    c472:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    c474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c476:	3302      	adds	r3, #2
    c478:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c47a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c47c:	3301      	adds	r3, #1
    c47e:	930b      	str	r3, [sp, #44]	; 0x2c
    c480:	9b05      	ldr	r3, [sp, #20]
    c482:	3301      	adds	r3, #1
    c484:	00db      	lsls	r3, r3, #3
    c486:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c488:	429a      	cmp	r2, r3
    c48a:	f4ff af75 	bcc.w	c378 <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    c48e:	e0f2      	b.n	c676 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c490:	f000 feca 	bl	d228 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    c494:	9b03      	ldr	r3, [sp, #12]
    c496:	681b      	ldr	r3, [r3, #0]
    c498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    c49c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    c4a0:	9b03      	ldr	r3, [sp, #12]
    c4a2:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c4a4:	f000 feec 	bl	d280 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    c4a8:	2300      	movs	r3, #0
    c4aa:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c4ac:	2300      	movs	r3, #0
    c4ae:	930b      	str	r3, [sp, #44]	; 0x2c
    c4b0:	e0cd      	b.n	c64e <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    c4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4b4:	00db      	lsls	r3, r3, #3
    c4b6:	9a01      	ldr	r2, [sp, #4]
    c4b8:	4413      	add	r3, r2
    c4ba:	785b      	ldrb	r3, [r3, #1]
    c4bc:	2b00      	cmp	r3, #0
    c4be:	d00e      	beq.n	c4de <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4c2:	00db      	lsls	r3, r3, #3
    c4c4:	9a01      	ldr	r2, [sp, #4]
    c4c6:	4413      	add	r3, r2
    c4c8:	685b      	ldr	r3, [r3, #4]
    c4ca:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    c4cc:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c4ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c4d0:	009b      	lsls	r3, r3, #2
    c4d2:	9a06      	ldr	r2, [sp, #24]
    c4d4:	4413      	add	r3, r2
    c4d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c4d8:	440a      	add	r2, r1
    c4da:	601a      	str	r2, [r3, #0]
    c4dc:	e00d      	b.n	c4fa <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4e0:	00db      	lsls	r3, r3, #3
    c4e2:	9a01      	ldr	r2, [sp, #4]
    c4e4:	4413      	add	r3, r2
    c4e6:	685b      	ldr	r3, [r3, #4]
    c4e8:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    c4ea:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c4ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c4ee:	009b      	lsls	r3, r3, #2
    c4f0:	9a06      	ldr	r2, [sp, #24]
    c4f2:	4413      	add	r3, r2
    c4f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c4f6:	440a      	add	r2, r1
    c4f8:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    c4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4fc:	3301      	adds	r3, #1
    c4fe:	00db      	lsls	r3, r3, #3
    c500:	9a01      	ldr	r2, [sp, #4]
    c502:	4413      	add	r3, r2
    c504:	785b      	ldrb	r3, [r3, #1]
    c506:	2b00      	cmp	r3, #0
    c508:	d017      	beq.n	c53a <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c50a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c50c:	009b      	lsls	r3, r3, #2
    c50e:	9a06      	ldr	r2, [sp, #24]
    c510:	4413      	add	r3, r2
    c512:	6819      	ldr	r1, [r3, #0]
    c514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c516:	3301      	adds	r3, #1
    c518:	00db      	lsls	r3, r3, #3
    c51a:	9a01      	ldr	r2, [sp, #4]
    c51c:	4413      	add	r3, r2
    c51e:	685b      	ldr	r3, [r3, #4]
    c520:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    c522:	041b      	lsls	r3, r3, #16
    c524:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c528:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c52a:	441a      	add	r2, r3
    c52c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c52e:	009b      	lsls	r3, r3, #2
    c530:	9806      	ldr	r0, [sp, #24]
    c532:	4403      	add	r3, r0
    c534:	430a      	orrs	r2, r1
    c536:	601a      	str	r2, [r3, #0]
    c538:	e016      	b.n	c568 <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c53c:	009b      	lsls	r3, r3, #2
    c53e:	9a06      	ldr	r2, [sp, #24]
    c540:	4413      	add	r3, r2
    c542:	6819      	ldr	r1, [r3, #0]
    c544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c546:	3301      	adds	r3, #1
    c548:	00db      	lsls	r3, r3, #3
    c54a:	9a01      	ldr	r2, [sp, #4]
    c54c:	4413      	add	r3, r2
    c54e:	685b      	ldr	r3, [r3, #4]
    c550:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    c552:	041b      	lsls	r3, r3, #16
    c554:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c558:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c55a:	441a      	add	r2, r3
    c55c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c55e:	009b      	lsls	r3, r3, #2
    c560:	9806      	ldr	r0, [sp, #24]
    c562:	4403      	add	r3, r0
    c564:	430a      	orrs	r2, r1
    c566:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    c568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c56a:	3302      	adds	r3, #2
    c56c:	00db      	lsls	r3, r3, #3
    c56e:	9a01      	ldr	r2, [sp, #4]
    c570:	4413      	add	r3, r2
    c572:	785b      	ldrb	r3, [r3, #1]
    c574:	2b00      	cmp	r3, #0
    c576:	d01b      	beq.n	c5b0 <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c57a:	009b      	lsls	r3, r3, #2
    c57c:	9a06      	ldr	r2, [sp, #24]
    c57e:	4413      	add	r3, r2
    c580:	6819      	ldr	r1, [r3, #0]
    c582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c584:	3302      	adds	r3, #2
    c586:	00db      	lsls	r3, r3, #3
    c588:	9a01      	ldr	r2, [sp, #4]
    c58a:	4413      	add	r3, r2
    c58c:	685b      	ldr	r3, [r3, #4]
    c58e:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    c590:	021b      	lsls	r3, r3, #8
    c592:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c594:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c596:	441a      	add	r2, r3
    c598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c59a:	009b      	lsls	r3, r3, #2
    c59c:	9806      	ldr	r0, [sp, #24]
    c59e:	4403      	add	r3, r0
    c5a0:	430a      	orrs	r2, r1
    c5a2:	601a      	str	r2, [r3, #0]
    c5a4:	e01a      	b.n	c5dc <FlexCAN_SetRxFifoFilter+0x366>
    c5a6:	bf00      	nop
    c5a8:	3ff80000 	.word	0x3ff80000
    c5ac:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c5b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5b2:	009b      	lsls	r3, r3, #2
    c5b4:	9a06      	ldr	r2, [sp, #24]
    c5b6:	4413      	add	r3, r2
    c5b8:	6819      	ldr	r1, [r3, #0]
    c5ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c5bc:	3302      	adds	r3, #2
    c5be:	00db      	lsls	r3, r3, #3
    c5c0:	9a01      	ldr	r2, [sp, #4]
    c5c2:	4413      	add	r3, r2
    c5c4:	685b      	ldr	r3, [r3, #4]
    c5c6:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    c5c8:	021b      	lsls	r3, r3, #8
    c5ca:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c5ce:	441a      	add	r2, r3
    c5d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5d2:	009b      	lsls	r3, r3, #2
    c5d4:	9806      	ldr	r0, [sp, #24]
    c5d6:	4403      	add	r3, r0
    c5d8:	430a      	orrs	r2, r1
    c5da:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    c5dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c5de:	3303      	adds	r3, #3
    c5e0:	00db      	lsls	r3, r3, #3
    c5e2:	9a01      	ldr	r2, [sp, #4]
    c5e4:	4413      	add	r3, r2
    c5e6:	785b      	ldrb	r3, [r3, #1]
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	d015      	beq.n	c618 <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c5ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5ee:	009b      	lsls	r3, r3, #2
    c5f0:	9a06      	ldr	r2, [sp, #24]
    c5f2:	4413      	add	r3, r2
    c5f4:	6819      	ldr	r1, [r3, #0]
    c5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c5f8:	3303      	adds	r3, #3
    c5fa:	00db      	lsls	r3, r3, #3
    c5fc:	9a01      	ldr	r2, [sp, #4]
    c5fe:	4413      	add	r3, r2
    c600:	685b      	ldr	r3, [r3, #4]
    c602:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    c604:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c606:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c608:	441a      	add	r2, r3
    c60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c60c:	009b      	lsls	r3, r3, #2
    c60e:	9806      	ldr	r0, [sp, #24]
    c610:	4403      	add	r3, r0
    c612:	430a      	orrs	r2, r1
    c614:	601a      	str	r2, [r3, #0]
    c616:	e014      	b.n	c642 <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    c618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c61a:	009b      	lsls	r3, r3, #2
    c61c:	9a06      	ldr	r2, [sp, #24]
    c61e:	4413      	add	r3, r2
    c620:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c624:	3303      	adds	r3, #3
    c626:	00db      	lsls	r3, r3, #3
    c628:	9a01      	ldr	r2, [sp, #4]
    c62a:	4413      	add	r3, r2
    c62c:	685b      	ldr	r3, [r3, #4]
    c62e:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    c630:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    c632:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c634:	441a      	add	r2, r3
    c636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c638:	009b      	lsls	r3, r3, #2
    c63a:	9806      	ldr	r0, [sp, #24]
    c63c:	4403      	add	r3, r0
    c63e:	430a      	orrs	r2, r1
    c640:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    c642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c644:	3304      	adds	r3, #4
    c646:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c64a:	3301      	adds	r3, #1
    c64c:	930b      	str	r3, [sp, #44]	; 0x2c
    c64e:	9b05      	ldr	r3, [sp, #20]
    c650:	3301      	adds	r3, #1
    c652:	00db      	lsls	r3, r3, #3
    c654:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c656:	429a      	cmp	r2, r3
    c658:	f4ff af2b 	bcc.w	c4b2 <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    c65c:	e00b      	b.n	c676 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c65e:	f000 fde3 	bl	d228 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    c662:	9b03      	ldr	r3, [sp, #12]
    c664:	681b      	ldr	r3, [r3, #0]
    c666:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    c66a:	9b03      	ldr	r3, [sp, #12]
    c66c:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c66e:	f000 fe07 	bl	d280 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    c672:	e000      	b.n	c676 <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    c674:	bf00      	nop
    }
}
    c676:	bf00      	nop
    c678:	b00d      	add	sp, #52	; 0x34
    c67a:	f85d fb04 	ldr.w	pc, [sp], #4

0000c67e <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    c67e:	b500      	push	{lr}
    c680:	b08b      	sub	sp, #44	; 0x2c
    c682:	9001      	str	r0, [sp, #4]
    c684:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    c686:	9b01      	ldr	r3, [sp, #4]
    c688:	3380      	adds	r3, #128	; 0x80
    c68a:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    c68c:	9b07      	ldr	r3, [sp, #28]
    c68e:	3304      	adds	r3, #4
    c690:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    c692:	9b07      	ldr	r3, [sp, #28]
    c694:	3308      	adds	r3, #8
    c696:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    c698:	2300      	movs	r3, #0
    c69a:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    c69c:	9b07      	ldr	r3, [sp, #28]
    c69e:	681b      	ldr	r3, [r3, #0]
    c6a0:	0c1b      	lsrs	r3, r3, #16
    c6a2:	b2db      	uxtb	r3, r3
    c6a4:	f003 030f 	and.w	r3, r3, #15
    c6a8:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    c6ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c6b0:	4618      	mov	r0, r3
    c6b2:	f7fe fe6c 	bl	b38e <FlexCAN_ComputePayloadSize>
    c6b6:	4603      	mov	r3, r0
    c6b8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    c6bc:	9b00      	ldr	r3, [sp, #0]
    c6be:	3308      	adds	r3, #8
    c6c0:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    c6c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c6c6:	2b08      	cmp	r3, #8
    c6c8:	d902      	bls.n	c6d0 <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    c6ca:	2308      	movs	r3, #8
    c6cc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    c6d0:	9b00      	ldr	r3, [sp, #0]
    c6d2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c6d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    c6da:	9b07      	ldr	r3, [sp, #28]
    c6dc:	681a      	ldr	r2, [r3, #0]
    c6de:	9b00      	ldr	r3, [sp, #0]
    c6e0:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    c6e2:	9b00      	ldr	r3, [sp, #0]
    c6e4:	681b      	ldr	r3, [r3, #0]
    c6e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    c6ea:	2b00      	cmp	r3, #0
    c6ec:	d004      	beq.n	c6f8 <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    c6ee:	9b06      	ldr	r3, [sp, #24]
    c6f0:	681a      	ldr	r2, [r3, #0]
    c6f2:	9b00      	ldr	r3, [sp, #0]
    c6f4:	605a      	str	r2, [r3, #4]
    c6f6:	e004      	b.n	c702 <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    c6f8:	9b06      	ldr	r3, [sp, #24]
    c6fa:	681b      	ldr	r3, [r3, #0]
    c6fc:	0c9a      	lsrs	r2, r3, #18
    c6fe:	9b00      	ldr	r3, [sp, #0]
    c700:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    c702:	9b01      	ldr	r3, [sp, #4]
    c704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c706:	b2da      	uxtb	r2, r3
    c708:	9b00      	ldr	r3, [sp, #0]
    c70a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    c70e:	9b00      	ldr	r3, [sp, #0]
    c710:	681b      	ldr	r3, [r3, #0]
    c712:	b29a      	uxth	r2, r3
    c714:	9b00      	ldr	r3, [sp, #0]
    c716:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    c718:	2300      	movs	r3, #0
    c71a:	9309      	str	r3, [sp, #36]	; 0x24
    c71c:	e01f      	b.n	c75e <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    c71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c720:	089b      	lsrs	r3, r3, #2
    c722:	009b      	lsls	r3, r3, #2
    c724:	9a05      	ldr	r2, [sp, #20]
    c726:	4413      	add	r3, r2
    c728:	681b      	ldr	r3, [r3, #0]
    c72a:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    c72c:	9b02      	ldr	r3, [sp, #8]
    c72e:	0e1a      	lsrs	r2, r3, #24
    c730:	9b02      	ldr	r3, [sp, #8]
    c732:	0a1b      	lsrs	r3, r3, #8
    c734:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    c738:	431a      	orrs	r2, r3
    c73a:	9b02      	ldr	r3, [sp, #8]
    c73c:	021b      	lsls	r3, r3, #8
    c73e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    c742:	ea42 0103 	orr.w	r1, r2, r3
    c746:	9b02      	ldr	r3, [sp, #8]
    c748:	061a      	lsls	r2, r3, #24
    c74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c74c:	089b      	lsrs	r3, r3, #2
    c74e:	009b      	lsls	r3, r3, #2
    c750:	9804      	ldr	r0, [sp, #16]
    c752:	4403      	add	r3, r0
    c754:	430a      	orrs	r2, r1
    c756:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    c758:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c75a:	3304      	adds	r3, #4
    c75c:	9309      	str	r3, [sp, #36]	; 0x24
    c75e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c762:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c764:	429a      	cmp	r2, r3
    c766:	d3da      	bcc.n	c71e <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    c768:	bf00      	nop
    c76a:	bf00      	nop
    c76c:	b00b      	add	sp, #44	; 0x2c
    c76e:	f85d fb04 	ldr.w	pc, [sp], #4

0000c772 <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    c772:	b088      	sub	sp, #32
    c774:	9003      	str	r0, [sp, #12]
    c776:	9301      	str	r3, [sp, #4]
    c778:	460b      	mov	r3, r1
    c77a:	f88d 300b 	strb.w	r3, [sp, #11]
    c77e:	4613      	mov	r3, r2
    c780:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    c784:	2300      	movs	r3, #0
    c786:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    c78a:	2300      	movs	r3, #0
    c78c:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    c78e:	2300      	movs	r3, #0
    c790:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    c792:	9b01      	ldr	r3, [sp, #4]
    c794:	b2db      	uxtb	r3, r3
    c796:	f89d 200b 	ldrb.w	r2, [sp, #11]
    c79a:	429a      	cmp	r2, r3
    c79c:	d303      	bcc.n	c7a6 <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    c79e:	2301      	movs	r3, #1
    c7a0:	f88d 301f 	strb.w	r3, [sp, #31]
    c7a4:	e01b      	b.n	c7de <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    c7a6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c7aa:	2b00      	cmp	r3, #0
    c7ac:	d014      	beq.n	c7d8 <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    c7ae:	9b03      	ldr	r3, [sp, #12]
    c7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c7b2:	0e1b      	lsrs	r3, r3, #24
    c7b4:	f003 030f 	and.w	r3, r3, #15
    c7b8:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    c7ba:	9b06      	ldr	r3, [sp, #24]
    c7bc:	3301      	adds	r3, #1
    c7be:	00db      	lsls	r3, r3, #3
    c7c0:	089b      	lsrs	r3, r3, #2
    c7c2:	3305      	adds	r3, #5
    c7c4:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    c7c6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c7ca:	9a05      	ldr	r2, [sp, #20]
    c7cc:	429a      	cmp	r2, r3
    c7ce:	d306      	bcc.n	c7de <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    c7d0:	2301      	movs	r3, #1
    c7d2:	f88d 301f 	strb.w	r3, [sp, #31]
    c7d6:	e002      	b.n	c7de <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    c7d8:	2300      	movs	r3, #0
    c7da:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    c7de:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    c7e2:	4618      	mov	r0, r3
    c7e4:	b008      	add	sp, #32
    c7e6:	4770      	bx	lr

0000c7e8 <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    c7e8:	b500      	push	{lr}
    c7ea:	b083      	sub	sp, #12
    c7ec:	9001      	str	r0, [sp, #4]
    c7ee:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    c7f0:	9b00      	ldr	r3, [sp, #0]
    c7f2:	f003 0320 	and.w	r3, r3, #32
    c7f6:	2b00      	cmp	r3, #0
    c7f8:	d004      	beq.n	c804 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    c7fa:	2101      	movs	r1, #1
    c7fc:	9801      	ldr	r0, [sp, #4]
    c7fe:	f7fe fcd8 	bl	b1b2 <FlexCAN_SetIsoCan>
    c802:	e003      	b.n	c80c <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    c804:	2100      	movs	r1, #0
    c806:	9801      	ldr	r0, [sp, #4]
    c808:	f7fe fcd3 	bl	b1b2 <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    c80c:	9b00      	ldr	r3, [sp, #0]
    c80e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c812:	2b00      	cmp	r3, #0
    c814:	d004      	beq.n	c820 <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    c816:	2101      	movs	r1, #1
    c818:	9801      	ldr	r0, [sp, #4]
    c81a:	f7fe fce1 	bl	b1e0 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    c81e:	e003      	b.n	c828 <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    c820:	2100      	movs	r1, #0
    c822:	9801      	ldr	r0, [sp, #4]
    c824:	f7fe fcdc 	bl	b1e0 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    c828:	9b00      	ldr	r3, [sp, #0]
    c82a:	f003 0308 	and.w	r3, r3, #8
    c82e:	2b00      	cmp	r3, #0
    c830:	d004      	beq.n	c83c <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    c832:	2101      	movs	r1, #1
    c834:	9801      	ldr	r0, [sp, #4]
    c836:	f7fe fcea 	bl	b20e <FlexCAN_SetProtocolException>
    c83a:	e003      	b.n	c844 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    c83c:	2100      	movs	r1, #0
    c83e:	9801      	ldr	r0, [sp, #4]
    c840:	f7fe fce5 	bl	b20e <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    c844:	9b00      	ldr	r3, [sp, #0]
    c846:	f003 0302 	and.w	r3, r3, #2
    c84a:	2b00      	cmp	r3, #0
    c84c:	d00a      	beq.n	c864 <FlexCAN_ConfigCtrlOptions+0x7c>
    c84e:	9b01      	ldr	r3, [sp, #4]
    c850:	681b      	ldr	r3, [r3, #0]
    c852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    c856:	2b00      	cmp	r3, #0
    c858:	d104      	bne.n	c864 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    c85a:	2101      	movs	r1, #1
    c85c:	9801      	ldr	r0, [sp, #4]
    c85e:	f7fe fd31 	bl	b2c4 <FlexCAN_CanBitSampling>
    c862:	e003      	b.n	c86c <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    c864:	2100      	movs	r1, #0
    c866:	9801      	ldr	r0, [sp, #4]
    c868:	f7fe fd2c 	bl	b2c4 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    c86c:	9b00      	ldr	r3, [sp, #0]
    c86e:	f003 0304 	and.w	r3, r3, #4
    c872:	2b00      	cmp	r3, #0
    c874:	d004      	beq.n	c880 <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    c876:	2101      	movs	r1, #1
    c878:	9801      	ldr	r0, [sp, #4]
    c87a:	f7fe fcf6 	bl	b26a <FlexCAN_SetBusOffAutorecovery>
    c87e:	e003      	b.n	c888 <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    c880:	2100      	movs	r1, #0
    c882:	9801      	ldr	r0, [sp, #4]
    c884:	f7fe fcf1 	bl	b26a <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    c888:	9b00      	ldr	r3, [sp, #0]
    c88a:	f003 0301 	and.w	r3, r3, #1
    c88e:	2b00      	cmp	r3, #0
    c890:	d004      	beq.n	c89c <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    c892:	2101      	movs	r1, #1
    c894:	9801      	ldr	r0, [sp, #4]
    c896:	f7fe fcd1 	bl	b23c <FlexCAN_SetRemoteReqStore>
    c89a:	e003      	b.n	c8a4 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    c89c:	2100      	movs	r1, #0
    c89e:	9801      	ldr	r0, [sp, #4]
    c8a0:	f7fe fccc 	bl	b23c <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    c8a4:	9b00      	ldr	r3, [sp, #0]
    c8a6:	f003 0310 	and.w	r3, r3, #16
    c8aa:	2b00      	cmp	r3, #0
    c8ac:	d004      	beq.n	c8b8 <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    c8ae:	2101      	movs	r1, #1
    c8b0:	9801      	ldr	r0, [sp, #4]
    c8b2:	f7fe fcf0 	bl	b296 <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    c8b6:	e003      	b.n	c8c0 <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    c8b8:	2100      	movs	r1, #0
    c8ba:	9801      	ldr	r0, [sp, #4]
    c8bc:	f7fe fceb 	bl	b296 <FlexCAN_SetEdgeFilter>
}
    c8c0:	bf00      	nop
    c8c2:	b003      	add	sp, #12
    c8c4:	f85d fb04 	ldr.w	pc, [sp], #4

0000c8c8 <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    c8c8:	b084      	sub	sp, #16
    c8ca:	4603      	mov	r3, r0
    c8cc:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    c8d0:	2300      	movs	r3, #0
    c8d2:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    c8d6:	2300      	movs	r3, #0
    c8d8:	f88d 300f 	strb.w	r3, [sp, #15]
    c8dc:	e00d      	b.n	c8fa <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    c8de:	f89d 2007 	ldrb.w	r2, [sp, #7]
    c8e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c8e6:	4909      	ldr	r1, [pc, #36]	; (c90c <FlexCAN_ResetImaskBuff+0x44>)
    c8e8:	4413      	add	r3, r2
    c8ea:	2200      	movs	r2, #0
    c8ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    c8f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c8f4:	3301      	adds	r3, #1
    c8f6:	f88d 300f 	strb.w	r3, [sp, #15]
    c8fa:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c8fe:	2b00      	cmp	r3, #0
    c900:	d0ed      	beq.n	c8de <FlexCAN_ResetImaskBuff+0x16>
    }
}
    c902:	bf00      	nop
    c904:	bf00      	nop
    c906:	b004      	add	sp, #16
    c908:	4770      	bx	lr
    c90a:	bf00      	nop
    c90c:	1fff8fac 	.word	0x1fff8fac

0000c910 <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    c910:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    c912:	2000      	movs	r0, #0
    c914:	f7fd fb2a 	bl	9f6c <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    c918:	f3bf 8f4f 	dsb	sy
}
    c91c:	bf00      	nop
    c91e:	bd08      	pop	{r3, pc}

0000c920 <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    c920:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    c922:	2000      	movs	r0, #0
    c924:	f7fd fac2 	bl	9eac <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    c928:	f3bf 8f4f 	dsb	sy
}
    c92c:	bf00      	nop
    c92e:	bd08      	pop	{r3, pc}

0000c930 <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    c930:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    c932:	220f      	movs	r2, #15
    c934:	2100      	movs	r1, #0
    c936:	2000      	movs	r0, #0
    c938:	f7fd f9dc 	bl	9cf4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    c93c:	f3bf 8f4f 	dsb	sy
}
    c940:	bf00      	nop
    c942:	bd08      	pop	{r3, pc}

0000c944 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    c944:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    c946:	221f      	movs	r2, #31
    c948:	2110      	movs	r1, #16
    c94a:	2000      	movs	r0, #0
    c94c:	f7fd f9d2 	bl	9cf4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    c950:	f3bf 8f4f 	dsb	sy
}
    c954:	bf00      	nop
    c956:	bd08      	pop	{r3, pc}

0000c958 <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    c958:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    c95a:	2001      	movs	r0, #1
    c95c:	f7fd fb06 	bl	9f6c <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    c960:	f3bf 8f4f 	dsb	sy
}
    c964:	bf00      	nop
    c966:	bd08      	pop	{r3, pc}

0000c968 <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    c968:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    c96a:	2001      	movs	r0, #1
    c96c:	f7fd fa9e 	bl	9eac <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    c970:	f3bf 8f4f 	dsb	sy
}
    c974:	bf00      	nop
    c976:	bd08      	pop	{r3, pc}

0000c978 <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    c978:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    c97a:	220f      	movs	r2, #15
    c97c:	2100      	movs	r1, #0
    c97e:	2001      	movs	r0, #1
    c980:	f7fd f9b8 	bl	9cf4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    c984:	f3bf 8f4f 	dsb	sy
}
    c988:	bf00      	nop
    c98a:	bd08      	pop	{r3, pc}

0000c98c <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    c98c:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    c98e:	221f      	movs	r2, #31
    c990:	2110      	movs	r1, #16
    c992:	2001      	movs	r0, #1
    c994:	f7fd f9ae 	bl	9cf4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    c998:	f3bf 8f4f 	dsb	sy
}
    c99c:	bf00      	nop
    c99e:	bd08      	pop	{r3, pc}

0000c9a0 <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    c9a0:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    c9a2:	2002      	movs	r0, #2
    c9a4:	f7fd fae2 	bl	9f6c <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    c9a8:	f3bf 8f4f 	dsb	sy
}
    c9ac:	bf00      	nop
    c9ae:	bd08      	pop	{r3, pc}

0000c9b0 <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    c9b0:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    c9b2:	2002      	movs	r0, #2
    c9b4:	f7fd fa7a 	bl	9eac <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    c9b8:	f3bf 8f4f 	dsb	sy
}
    c9bc:	bf00      	nop
    c9be:	bd08      	pop	{r3, pc}

0000c9c0 <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    c9c0:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    c9c2:	220f      	movs	r2, #15
    c9c4:	2100      	movs	r1, #0
    c9c6:	2002      	movs	r0, #2
    c9c8:	f7fd f994 	bl	9cf4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    c9cc:	f3bf 8f4f 	dsb	sy
}
    c9d0:	bf00      	nop
    c9d2:	bd08      	pop	{r3, pc}

0000c9d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    c9d4:	b500      	push	{lr}
    c9d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c9d8:	f7f4 f940 	bl	c5c <Sys_GetCoreID>
    c9dc:	4603      	mov	r3, r0
    c9de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
    c9e0:	4a10      	ldr	r2, [pc, #64]	; (ca24 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    c9e2:	9b01      	ldr	r3, [sp, #4]
    c9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9e8:	2b00      	cmp	r3, #0
    c9ea:	d10d      	bne.n	ca08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c9ec:	f7f4 f854 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    c9f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c9f2:	9b00      	ldr	r3, [sp, #0]
    c9f4:	f003 0301 	and.w	r3, r3, #1
    c9f8:	2b00      	cmp	r3, #0
    c9fa:	d100      	bne.n	c9fe <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c9fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    c9fe:	490a      	ldr	r1, [pc, #40]	; (ca28 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
    ca00:	9b01      	ldr	r3, [sp, #4]
    ca02:	9a00      	ldr	r2, [sp, #0]
    ca04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
    ca08:	4a06      	ldr	r2, [pc, #24]	; (ca24 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    ca0a:	9b01      	ldr	r3, [sp, #4]
    ca0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca10:	1c5a      	adds	r2, r3, #1
    ca12:	4904      	ldr	r1, [pc, #16]	; (ca24 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    ca14:	9b01      	ldr	r3, [sp, #4]
    ca16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca1a:	bf00      	nop
    ca1c:	b003      	add	sp, #12
    ca1e:	f85d fb04 	ldr.w	pc, [sp], #4
    ca22:	bf00      	nop
    ca24:	1fff8fbc 	.word	0x1fff8fbc
    ca28:	1fff8fb8 	.word	0x1fff8fb8

0000ca2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    ca2c:	b500      	push	{lr}
    ca2e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca30:	f7f4 f914 	bl	c5c <Sys_GetCoreID>
    ca34:	4603      	mov	r3, r0
    ca36:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
    ca38:	4a0d      	ldr	r2, [pc, #52]	; (ca70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    ca3a:	9b01      	ldr	r3, [sp, #4]
    ca3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca40:	1e5a      	subs	r2, r3, #1
    ca42:	490b      	ldr	r1, [pc, #44]	; (ca70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    ca44:	9b01      	ldr	r3, [sp, #4]
    ca46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ca4a:	4a0a      	ldr	r2, [pc, #40]	; (ca74 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
    ca4c:	9b01      	ldr	r3, [sp, #4]
    ca4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca52:	f003 0301 	and.w	r3, r3, #1
    ca56:	2b00      	cmp	r3, #0
    ca58:	d106      	bne.n	ca68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    ca5a:	4a05      	ldr	r2, [pc, #20]	; (ca70 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    ca5c:	9b01      	ldr	r3, [sp, #4]
    ca5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca62:	2b00      	cmp	r3, #0
    ca64:	d100      	bne.n	ca68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ca66:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ca68:	bf00      	nop
    ca6a:	b003      	add	sp, #12
    ca6c:	f85d fb04 	ldr.w	pc, [sp], #4
    ca70:	1fff8fbc 	.word	0x1fff8fbc
    ca74:	1fff8fb8 	.word	0x1fff8fb8

0000ca78 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    ca78:	b500      	push	{lr}
    ca7a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca7c:	f7f4 f8ee 	bl	c5c <Sys_GetCoreID>
    ca80:	4603      	mov	r3, r0
    ca82:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
    ca84:	4a10      	ldr	r2, [pc, #64]	; (cac8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    ca86:	9b01      	ldr	r3, [sp, #4]
    ca88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca8c:	2b00      	cmp	r3, #0
    ca8e:	d10d      	bne.n	caac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ca90:	f7f4 f802 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    ca94:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ca96:	9b00      	ldr	r3, [sp, #0]
    ca98:	f003 0301 	and.w	r3, r3, #1
    ca9c:	2b00      	cmp	r3, #0
    ca9e:	d100      	bne.n	caa2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    caa0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    caa2:	490a      	ldr	r1, [pc, #40]	; (cacc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
    caa4:	9b01      	ldr	r3, [sp, #4]
    caa6:	9a00      	ldr	r2, [sp, #0]
    caa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
    caac:	4a06      	ldr	r2, [pc, #24]	; (cac8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    caae:	9b01      	ldr	r3, [sp, #4]
    cab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cab4:	1c5a      	adds	r2, r3, #1
    cab6:	4904      	ldr	r1, [pc, #16]	; (cac8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    cab8:	9b01      	ldr	r3, [sp, #4]
    caba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cabe:	bf00      	nop
    cac0:	b003      	add	sp, #12
    cac2:	f85d fb04 	ldr.w	pc, [sp], #4
    cac6:	bf00      	nop
    cac8:	1fff8fc4 	.word	0x1fff8fc4
    cacc:	1fff8fc0 	.word	0x1fff8fc0

0000cad0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    cad0:	b500      	push	{lr}
    cad2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cad4:	f7f4 f8c2 	bl	c5c <Sys_GetCoreID>
    cad8:	4603      	mov	r3, r0
    cada:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
    cadc:	4a0d      	ldr	r2, [pc, #52]	; (cb14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    cade:	9b01      	ldr	r3, [sp, #4]
    cae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cae4:	1e5a      	subs	r2, r3, #1
    cae6:	490b      	ldr	r1, [pc, #44]	; (cb14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    cae8:	9b01      	ldr	r3, [sp, #4]
    caea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    caee:	4a0a      	ldr	r2, [pc, #40]	; (cb18 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
    caf0:	9b01      	ldr	r3, [sp, #4]
    caf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caf6:	f003 0301 	and.w	r3, r3, #1
    cafa:	2b00      	cmp	r3, #0
    cafc:	d106      	bne.n	cb0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    cafe:	4a05      	ldr	r2, [pc, #20]	; (cb14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    cb00:	9b01      	ldr	r3, [sp, #4]
    cb02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb06:	2b00      	cmp	r3, #0
    cb08:	d100      	bne.n	cb0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cb0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cb0c:	bf00      	nop
    cb0e:	b003      	add	sp, #12
    cb10:	f85d fb04 	ldr.w	pc, [sp], #4
    cb14:	1fff8fc4 	.word	0x1fff8fc4
    cb18:	1fff8fc0 	.word	0x1fff8fc0

0000cb1c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    cb1c:	b500      	push	{lr}
    cb1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb20:	f7f4 f89c 	bl	c5c <Sys_GetCoreID>
    cb24:	4603      	mov	r3, r0
    cb26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
    cb28:	4a10      	ldr	r2, [pc, #64]	; (cb6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    cb2a:	9b01      	ldr	r3, [sp, #4]
    cb2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb30:	2b00      	cmp	r3, #0
    cb32:	d10d      	bne.n	cb50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cb34:	f7f3 ffb0 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    cb38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cb3a:	9b00      	ldr	r3, [sp, #0]
    cb3c:	f003 0301 	and.w	r3, r3, #1
    cb40:	2b00      	cmp	r3, #0
    cb42:	d100      	bne.n	cb46 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cb44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    cb46:	490a      	ldr	r1, [pc, #40]	; (cb70 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
    cb48:	9b01      	ldr	r3, [sp, #4]
    cb4a:	9a00      	ldr	r2, [sp, #0]
    cb4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
    cb50:	4a06      	ldr	r2, [pc, #24]	; (cb6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    cb52:	9b01      	ldr	r3, [sp, #4]
    cb54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb58:	1c5a      	adds	r2, r3, #1
    cb5a:	4904      	ldr	r1, [pc, #16]	; (cb6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    cb5c:	9b01      	ldr	r3, [sp, #4]
    cb5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb62:	bf00      	nop
    cb64:	b003      	add	sp, #12
    cb66:	f85d fb04 	ldr.w	pc, [sp], #4
    cb6a:	bf00      	nop
    cb6c:	1fff8fcc 	.word	0x1fff8fcc
    cb70:	1fff8fc8 	.word	0x1fff8fc8

0000cb74 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    cb74:	b500      	push	{lr}
    cb76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb78:	f7f4 f870 	bl	c5c <Sys_GetCoreID>
    cb7c:	4603      	mov	r3, r0
    cb7e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
    cb80:	4a0d      	ldr	r2, [pc, #52]	; (cbb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    cb82:	9b01      	ldr	r3, [sp, #4]
    cb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb88:	1e5a      	subs	r2, r3, #1
    cb8a:	490b      	ldr	r1, [pc, #44]	; (cbb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    cb8c:	9b01      	ldr	r3, [sp, #4]
    cb8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    cb92:	4a0a      	ldr	r2, [pc, #40]	; (cbbc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
    cb94:	9b01      	ldr	r3, [sp, #4]
    cb96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb9a:	f003 0301 	and.w	r3, r3, #1
    cb9e:	2b00      	cmp	r3, #0
    cba0:	d106      	bne.n	cbb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    cba2:	4a05      	ldr	r2, [pc, #20]	; (cbb8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    cba4:	9b01      	ldr	r3, [sp, #4]
    cba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbaa:	2b00      	cmp	r3, #0
    cbac:	d100      	bne.n	cbb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cbae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cbb0:	bf00      	nop
    cbb2:	b003      	add	sp, #12
    cbb4:	f85d fb04 	ldr.w	pc, [sp], #4
    cbb8:	1fff8fcc 	.word	0x1fff8fcc
    cbbc:	1fff8fc8 	.word	0x1fff8fc8

0000cbc0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    cbc0:	b500      	push	{lr}
    cbc2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbc4:	f7f4 f84a 	bl	c5c <Sys_GetCoreID>
    cbc8:	4603      	mov	r3, r0
    cbca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
    cbcc:	4a10      	ldr	r2, [pc, #64]	; (cc10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    cbce:	9b01      	ldr	r3, [sp, #4]
    cbd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbd4:	2b00      	cmp	r3, #0
    cbd6:	d10d      	bne.n	cbf4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cbd8:	f7f3 ff5e 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    cbdc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cbde:	9b00      	ldr	r3, [sp, #0]
    cbe0:	f003 0301 	and.w	r3, r3, #1
    cbe4:	2b00      	cmp	r3, #0
    cbe6:	d100      	bne.n	cbea <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cbe8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    cbea:	490a      	ldr	r1, [pc, #40]	; (cc14 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
    cbec:	9b01      	ldr	r3, [sp, #4]
    cbee:	9a00      	ldr	r2, [sp, #0]
    cbf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
    cbf4:	4a06      	ldr	r2, [pc, #24]	; (cc10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    cbf6:	9b01      	ldr	r3, [sp, #4]
    cbf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbfc:	1c5a      	adds	r2, r3, #1
    cbfe:	4904      	ldr	r1, [pc, #16]	; (cc10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    cc00:	9b01      	ldr	r3, [sp, #4]
    cc02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cc06:	bf00      	nop
    cc08:	b003      	add	sp, #12
    cc0a:	f85d fb04 	ldr.w	pc, [sp], #4
    cc0e:	bf00      	nop
    cc10:	1fff8fd4 	.word	0x1fff8fd4
    cc14:	1fff8fd0 	.word	0x1fff8fd0

0000cc18 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    cc18:	b500      	push	{lr}
    cc1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc1c:	f7f4 f81e 	bl	c5c <Sys_GetCoreID>
    cc20:	4603      	mov	r3, r0
    cc22:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
    cc24:	4a0d      	ldr	r2, [pc, #52]	; (cc5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    cc26:	9b01      	ldr	r3, [sp, #4]
    cc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc2c:	1e5a      	subs	r2, r3, #1
    cc2e:	490b      	ldr	r1, [pc, #44]	; (cc5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    cc30:	9b01      	ldr	r3, [sp, #4]
    cc32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    cc36:	4a0a      	ldr	r2, [pc, #40]	; (cc60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
    cc38:	9b01      	ldr	r3, [sp, #4]
    cc3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc3e:	f003 0301 	and.w	r3, r3, #1
    cc42:	2b00      	cmp	r3, #0
    cc44:	d106      	bne.n	cc54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    cc46:	4a05      	ldr	r2, [pc, #20]	; (cc5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    cc48:	9b01      	ldr	r3, [sp, #4]
    cc4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc4e:	2b00      	cmp	r3, #0
    cc50:	d100      	bne.n	cc54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cc52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cc54:	bf00      	nop
    cc56:	b003      	add	sp, #12
    cc58:	f85d fb04 	ldr.w	pc, [sp], #4
    cc5c:	1fff8fd4 	.word	0x1fff8fd4
    cc60:	1fff8fd0 	.word	0x1fff8fd0

0000cc64 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    cc64:	b500      	push	{lr}
    cc66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc68:	f7f3 fff8 	bl	c5c <Sys_GetCoreID>
    cc6c:	4603      	mov	r3, r0
    cc6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
    cc70:	4a10      	ldr	r2, [pc, #64]	; (ccb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    cc72:	9b01      	ldr	r3, [sp, #4]
    cc74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc78:	2b00      	cmp	r3, #0
    cc7a:	d10d      	bne.n	cc98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cc7c:	f7f3 ff0c 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    cc80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cc82:	9b00      	ldr	r3, [sp, #0]
    cc84:	f003 0301 	and.w	r3, r3, #1
    cc88:	2b00      	cmp	r3, #0
    cc8a:	d100      	bne.n	cc8e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cc8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    cc8e:	490a      	ldr	r1, [pc, #40]	; (ccb8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
    cc90:	9b01      	ldr	r3, [sp, #4]
    cc92:	9a00      	ldr	r2, [sp, #0]
    cc94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
    cc98:	4a06      	ldr	r2, [pc, #24]	; (ccb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    cc9a:	9b01      	ldr	r3, [sp, #4]
    cc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cca0:	1c5a      	adds	r2, r3, #1
    cca2:	4904      	ldr	r1, [pc, #16]	; (ccb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    cca4:	9b01      	ldr	r3, [sp, #4]
    cca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ccaa:	bf00      	nop
    ccac:	b003      	add	sp, #12
    ccae:	f85d fb04 	ldr.w	pc, [sp], #4
    ccb2:	bf00      	nop
    ccb4:	1fff8fdc 	.word	0x1fff8fdc
    ccb8:	1fff8fd8 	.word	0x1fff8fd8

0000ccbc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    ccbc:	b500      	push	{lr}
    ccbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccc0:	f7f3 ffcc 	bl	c5c <Sys_GetCoreID>
    ccc4:	4603      	mov	r3, r0
    ccc6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
    ccc8:	4a0d      	ldr	r2, [pc, #52]	; (cd00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    ccca:	9b01      	ldr	r3, [sp, #4]
    cccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccd0:	1e5a      	subs	r2, r3, #1
    ccd2:	490b      	ldr	r1, [pc, #44]	; (cd00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    ccd4:	9b01      	ldr	r3, [sp, #4]
    ccd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    ccda:	4a0a      	ldr	r2, [pc, #40]	; (cd04 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
    ccdc:	9b01      	ldr	r3, [sp, #4]
    ccde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cce2:	f003 0301 	and.w	r3, r3, #1
    cce6:	2b00      	cmp	r3, #0
    cce8:	d106      	bne.n	ccf8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    ccea:	4a05      	ldr	r2, [pc, #20]	; (cd00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    ccec:	9b01      	ldr	r3, [sp, #4]
    ccee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccf2:	2b00      	cmp	r3, #0
    ccf4:	d100      	bne.n	ccf8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ccf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ccf8:	bf00      	nop
    ccfa:	b003      	add	sp, #12
    ccfc:	f85d fb04 	ldr.w	pc, [sp], #4
    cd00:	1fff8fdc 	.word	0x1fff8fdc
    cd04:	1fff8fd8 	.word	0x1fff8fd8

0000cd08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    cd08:	b500      	push	{lr}
    cd0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd0c:	f7f3 ffa6 	bl	c5c <Sys_GetCoreID>
    cd10:	4603      	mov	r3, r0
    cd12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
    cd14:	4a10      	ldr	r2, [pc, #64]	; (cd58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    cd16:	9b01      	ldr	r3, [sp, #4]
    cd18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd1c:	2b00      	cmp	r3, #0
    cd1e:	d10d      	bne.n	cd3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cd20:	f7f3 feba 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    cd24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cd26:	9b00      	ldr	r3, [sp, #0]
    cd28:	f003 0301 	and.w	r3, r3, #1
    cd2c:	2b00      	cmp	r3, #0
    cd2e:	d100      	bne.n	cd32 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cd30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    cd32:	490a      	ldr	r1, [pc, #40]	; (cd5c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
    cd34:	9b01      	ldr	r3, [sp, #4]
    cd36:	9a00      	ldr	r2, [sp, #0]
    cd38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
    cd3c:	4a06      	ldr	r2, [pc, #24]	; (cd58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    cd3e:	9b01      	ldr	r3, [sp, #4]
    cd40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd44:	1c5a      	adds	r2, r3, #1
    cd46:	4904      	ldr	r1, [pc, #16]	; (cd58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    cd48:	9b01      	ldr	r3, [sp, #4]
    cd4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd4e:	bf00      	nop
    cd50:	b003      	add	sp, #12
    cd52:	f85d fb04 	ldr.w	pc, [sp], #4
    cd56:	bf00      	nop
    cd58:	1fff8fe4 	.word	0x1fff8fe4
    cd5c:	1fff8fe0 	.word	0x1fff8fe0

0000cd60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    cd60:	b500      	push	{lr}
    cd62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd64:	f7f3 ff7a 	bl	c5c <Sys_GetCoreID>
    cd68:	4603      	mov	r3, r0
    cd6a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
    cd6c:	4a0d      	ldr	r2, [pc, #52]	; (cda4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    cd6e:	9b01      	ldr	r3, [sp, #4]
    cd70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd74:	1e5a      	subs	r2, r3, #1
    cd76:	490b      	ldr	r1, [pc, #44]	; (cda4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    cd78:	9b01      	ldr	r3, [sp, #4]
    cd7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    cd7e:	4a0a      	ldr	r2, [pc, #40]	; (cda8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
    cd80:	9b01      	ldr	r3, [sp, #4]
    cd82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd86:	f003 0301 	and.w	r3, r3, #1
    cd8a:	2b00      	cmp	r3, #0
    cd8c:	d106      	bne.n	cd9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    cd8e:	4a05      	ldr	r2, [pc, #20]	; (cda4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    cd90:	9b01      	ldr	r3, [sp, #4]
    cd92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd96:	2b00      	cmp	r3, #0
    cd98:	d100      	bne.n	cd9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cd9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cd9c:	bf00      	nop
    cd9e:	b003      	add	sp, #12
    cda0:	f85d fb04 	ldr.w	pc, [sp], #4
    cda4:	1fff8fe4 	.word	0x1fff8fe4
    cda8:	1fff8fe0 	.word	0x1fff8fe0

0000cdac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    cdac:	b500      	push	{lr}
    cdae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cdb0:	f7f3 ff54 	bl	c5c <Sys_GetCoreID>
    cdb4:	4603      	mov	r3, r0
    cdb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
    cdb8:	4a10      	ldr	r2, [pc, #64]	; (cdfc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    cdba:	9b01      	ldr	r3, [sp, #4]
    cdbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdc0:	2b00      	cmp	r3, #0
    cdc2:	d10d      	bne.n	cde0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cdc4:	f7f3 fe68 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    cdc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cdca:	9b00      	ldr	r3, [sp, #0]
    cdcc:	f003 0301 	and.w	r3, r3, #1
    cdd0:	2b00      	cmp	r3, #0
    cdd2:	d100      	bne.n	cdd6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cdd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    cdd6:	490a      	ldr	r1, [pc, #40]	; (ce00 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
    cdd8:	9b01      	ldr	r3, [sp, #4]
    cdda:	9a00      	ldr	r2, [sp, #0]
    cddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
    cde0:	4a06      	ldr	r2, [pc, #24]	; (cdfc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    cde2:	9b01      	ldr	r3, [sp, #4]
    cde4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cde8:	1c5a      	adds	r2, r3, #1
    cdea:	4904      	ldr	r1, [pc, #16]	; (cdfc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    cdec:	9b01      	ldr	r3, [sp, #4]
    cdee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cdf2:	bf00      	nop
    cdf4:	b003      	add	sp, #12
    cdf6:	f85d fb04 	ldr.w	pc, [sp], #4
    cdfa:	bf00      	nop
    cdfc:	1fff8fec 	.word	0x1fff8fec
    ce00:	1fff8fe8 	.word	0x1fff8fe8

0000ce04 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    ce04:	b500      	push	{lr}
    ce06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce08:	f7f3 ff28 	bl	c5c <Sys_GetCoreID>
    ce0c:	4603      	mov	r3, r0
    ce0e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
    ce10:	4a0d      	ldr	r2, [pc, #52]	; (ce48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    ce12:	9b01      	ldr	r3, [sp, #4]
    ce14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce18:	1e5a      	subs	r2, r3, #1
    ce1a:	490b      	ldr	r1, [pc, #44]	; (ce48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    ce1c:	9b01      	ldr	r3, [sp, #4]
    ce1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    ce22:	4a0a      	ldr	r2, [pc, #40]	; (ce4c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
    ce24:	9b01      	ldr	r3, [sp, #4]
    ce26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce2a:	f003 0301 	and.w	r3, r3, #1
    ce2e:	2b00      	cmp	r3, #0
    ce30:	d106      	bne.n	ce40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    ce32:	4a05      	ldr	r2, [pc, #20]	; (ce48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    ce34:	9b01      	ldr	r3, [sp, #4]
    ce36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce3a:	2b00      	cmp	r3, #0
    ce3c:	d100      	bne.n	ce40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ce3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ce40:	bf00      	nop
    ce42:	b003      	add	sp, #12
    ce44:	f85d fb04 	ldr.w	pc, [sp], #4
    ce48:	1fff8fec 	.word	0x1fff8fec
    ce4c:	1fff8fe8 	.word	0x1fff8fe8

0000ce50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    ce50:	b500      	push	{lr}
    ce52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce54:	f7f3 ff02 	bl	c5c <Sys_GetCoreID>
    ce58:	4603      	mov	r3, r0
    ce5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
    ce5c:	4a10      	ldr	r2, [pc, #64]	; (cea0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    ce5e:	9b01      	ldr	r3, [sp, #4]
    ce60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce64:	2b00      	cmp	r3, #0
    ce66:	d10d      	bne.n	ce84 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ce68:	f7f3 fe16 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    ce6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ce6e:	9b00      	ldr	r3, [sp, #0]
    ce70:	f003 0301 	and.w	r3, r3, #1
    ce74:	2b00      	cmp	r3, #0
    ce76:	d100      	bne.n	ce7a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ce78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    ce7a:	490a      	ldr	r1, [pc, #40]	; (cea4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
    ce7c:	9b01      	ldr	r3, [sp, #4]
    ce7e:	9a00      	ldr	r2, [sp, #0]
    ce80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
    ce84:	4a06      	ldr	r2, [pc, #24]	; (cea0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    ce86:	9b01      	ldr	r3, [sp, #4]
    ce88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce8c:	1c5a      	adds	r2, r3, #1
    ce8e:	4904      	ldr	r1, [pc, #16]	; (cea0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    ce90:	9b01      	ldr	r3, [sp, #4]
    ce92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce96:	bf00      	nop
    ce98:	b003      	add	sp, #12
    ce9a:	f85d fb04 	ldr.w	pc, [sp], #4
    ce9e:	bf00      	nop
    cea0:	1fff8ff4 	.word	0x1fff8ff4
    cea4:	1fff8ff0 	.word	0x1fff8ff0

0000cea8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    cea8:	b500      	push	{lr}
    ceaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ceac:	f7f3 fed6 	bl	c5c <Sys_GetCoreID>
    ceb0:	4603      	mov	r3, r0
    ceb2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
    ceb4:	4a0d      	ldr	r2, [pc, #52]	; (ceec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    ceb6:	9b01      	ldr	r3, [sp, #4]
    ceb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cebc:	1e5a      	subs	r2, r3, #1
    cebe:	490b      	ldr	r1, [pc, #44]	; (ceec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    cec0:	9b01      	ldr	r3, [sp, #4]
    cec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    cec6:	4a0a      	ldr	r2, [pc, #40]	; (cef0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
    cec8:	9b01      	ldr	r3, [sp, #4]
    ceca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cece:	f003 0301 	and.w	r3, r3, #1
    ced2:	2b00      	cmp	r3, #0
    ced4:	d106      	bne.n	cee4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    ced6:	4a05      	ldr	r2, [pc, #20]	; (ceec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    ced8:	9b01      	ldr	r3, [sp, #4]
    ceda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cede:	2b00      	cmp	r3, #0
    cee0:	d100      	bne.n	cee4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cee2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cee4:	bf00      	nop
    cee6:	b003      	add	sp, #12
    cee8:	f85d fb04 	ldr.w	pc, [sp], #4
    ceec:	1fff8ff4 	.word	0x1fff8ff4
    cef0:	1fff8ff0 	.word	0x1fff8ff0

0000cef4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    cef4:	b500      	push	{lr}
    cef6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cef8:	f7f3 feb0 	bl	c5c <Sys_GetCoreID>
    cefc:	4603      	mov	r3, r0
    cefe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
    cf00:	4a10      	ldr	r2, [pc, #64]	; (cf44 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    cf02:	9b01      	ldr	r3, [sp, #4]
    cf04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf08:	2b00      	cmp	r3, #0
    cf0a:	d10d      	bne.n	cf28 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cf0c:	f7f3 fdc4 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    cf10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf12:	9b00      	ldr	r3, [sp, #0]
    cf14:	f003 0301 	and.w	r3, r3, #1
    cf18:	2b00      	cmp	r3, #0
    cf1a:	d100      	bne.n	cf1e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    cf1e:	490a      	ldr	r1, [pc, #40]	; (cf48 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
    cf20:	9b01      	ldr	r3, [sp, #4]
    cf22:	9a00      	ldr	r2, [sp, #0]
    cf24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
    cf28:	4a06      	ldr	r2, [pc, #24]	; (cf44 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    cf2a:	9b01      	ldr	r3, [sp, #4]
    cf2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf30:	1c5a      	adds	r2, r3, #1
    cf32:	4904      	ldr	r1, [pc, #16]	; (cf44 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    cf34:	9b01      	ldr	r3, [sp, #4]
    cf36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf3a:	bf00      	nop
    cf3c:	b003      	add	sp, #12
    cf3e:	f85d fb04 	ldr.w	pc, [sp], #4
    cf42:	bf00      	nop
    cf44:	1fff8ffc 	.word	0x1fff8ffc
    cf48:	1fff8ff8 	.word	0x1fff8ff8

0000cf4c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    cf4c:	b500      	push	{lr}
    cf4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf50:	f7f3 fe84 	bl	c5c <Sys_GetCoreID>
    cf54:	4603      	mov	r3, r0
    cf56:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
    cf58:	4a0d      	ldr	r2, [pc, #52]	; (cf90 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    cf5a:	9b01      	ldr	r3, [sp, #4]
    cf5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf60:	1e5a      	subs	r2, r3, #1
    cf62:	490b      	ldr	r1, [pc, #44]	; (cf90 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    cf64:	9b01      	ldr	r3, [sp, #4]
    cf66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    cf6a:	4a0a      	ldr	r2, [pc, #40]	; (cf94 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
    cf6c:	9b01      	ldr	r3, [sp, #4]
    cf6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf72:	f003 0301 	and.w	r3, r3, #1
    cf76:	2b00      	cmp	r3, #0
    cf78:	d106      	bne.n	cf88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    cf7a:	4a05      	ldr	r2, [pc, #20]	; (cf90 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    cf7c:	9b01      	ldr	r3, [sp, #4]
    cf7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf82:	2b00      	cmp	r3, #0
    cf84:	d100      	bne.n	cf88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cf86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cf88:	bf00      	nop
    cf8a:	b003      	add	sp, #12
    cf8c:	f85d fb04 	ldr.w	pc, [sp], #4
    cf90:	1fff8ffc 	.word	0x1fff8ffc
    cf94:	1fff8ff8 	.word	0x1fff8ff8

0000cf98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    cf98:	b500      	push	{lr}
    cf9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf9c:	f7f3 fe5e 	bl	c5c <Sys_GetCoreID>
    cfa0:	4603      	mov	r3, r0
    cfa2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
    cfa4:	4a10      	ldr	r2, [pc, #64]	; (cfe8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    cfa6:	9b01      	ldr	r3, [sp, #4]
    cfa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfac:	2b00      	cmp	r3, #0
    cfae:	d10d      	bne.n	cfcc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cfb0:	f7f3 fd72 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    cfb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cfb6:	9b00      	ldr	r3, [sp, #0]
    cfb8:	f003 0301 	and.w	r3, r3, #1
    cfbc:	2b00      	cmp	r3, #0
    cfbe:	d100      	bne.n	cfc2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cfc0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    cfc2:	490a      	ldr	r1, [pc, #40]	; (cfec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
    cfc4:	9b01      	ldr	r3, [sp, #4]
    cfc6:	9a00      	ldr	r2, [sp, #0]
    cfc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
    cfcc:	4a06      	ldr	r2, [pc, #24]	; (cfe8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    cfce:	9b01      	ldr	r3, [sp, #4]
    cfd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfd4:	1c5a      	adds	r2, r3, #1
    cfd6:	4904      	ldr	r1, [pc, #16]	; (cfe8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    cfd8:	9b01      	ldr	r3, [sp, #4]
    cfda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cfde:	bf00      	nop
    cfe0:	b003      	add	sp, #12
    cfe2:	f85d fb04 	ldr.w	pc, [sp], #4
    cfe6:	bf00      	nop
    cfe8:	1fff9004 	.word	0x1fff9004
    cfec:	1fff9000 	.word	0x1fff9000

0000cff0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    cff0:	b500      	push	{lr}
    cff2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cff4:	f7f3 fe32 	bl	c5c <Sys_GetCoreID>
    cff8:	4603      	mov	r3, r0
    cffa:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
    cffc:	4a0d      	ldr	r2, [pc, #52]	; (d034 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    cffe:	9b01      	ldr	r3, [sp, #4]
    d000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d004:	1e5a      	subs	r2, r3, #1
    d006:	490b      	ldr	r1, [pc, #44]	; (d034 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d008:	9b01      	ldr	r3, [sp, #4]
    d00a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    d00e:	4a0a      	ldr	r2, [pc, #40]	; (d038 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
    d010:	9b01      	ldr	r3, [sp, #4]
    d012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d016:	f003 0301 	and.w	r3, r3, #1
    d01a:	2b00      	cmp	r3, #0
    d01c:	d106      	bne.n	d02c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    d01e:	4a05      	ldr	r2, [pc, #20]	; (d034 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d020:	9b01      	ldr	r3, [sp, #4]
    d022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d026:	2b00      	cmp	r3, #0
    d028:	d100      	bne.n	d02c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d02a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d02c:	bf00      	nop
    d02e:	b003      	add	sp, #12
    d030:	f85d fb04 	ldr.w	pc, [sp], #4
    d034:	1fff9004 	.word	0x1fff9004
    d038:	1fff9000 	.word	0x1fff9000

0000d03c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    d03c:	b500      	push	{lr}
    d03e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d040:	f7f3 fe0c 	bl	c5c <Sys_GetCoreID>
    d044:	4603      	mov	r3, r0
    d046:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
    d048:	4a10      	ldr	r2, [pc, #64]	; (d08c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    d04a:	9b01      	ldr	r3, [sp, #4]
    d04c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d050:	2b00      	cmp	r3, #0
    d052:	d10d      	bne.n	d070 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d054:	f7f3 fd20 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    d058:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d05a:	9b00      	ldr	r3, [sp, #0]
    d05c:	f003 0301 	and.w	r3, r3, #1
    d060:	2b00      	cmp	r3, #0
    d062:	d100      	bne.n	d066 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d064:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    d066:	490a      	ldr	r1, [pc, #40]	; (d090 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
    d068:	9b01      	ldr	r3, [sp, #4]
    d06a:	9a00      	ldr	r2, [sp, #0]
    d06c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
    d070:	4a06      	ldr	r2, [pc, #24]	; (d08c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    d072:	9b01      	ldr	r3, [sp, #4]
    d074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d078:	1c5a      	adds	r2, r3, #1
    d07a:	4904      	ldr	r1, [pc, #16]	; (d08c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    d07c:	9b01      	ldr	r3, [sp, #4]
    d07e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d082:	bf00      	nop
    d084:	b003      	add	sp, #12
    d086:	f85d fb04 	ldr.w	pc, [sp], #4
    d08a:	bf00      	nop
    d08c:	1fff900c 	.word	0x1fff900c
    d090:	1fff9008 	.word	0x1fff9008

0000d094 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    d094:	b500      	push	{lr}
    d096:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d098:	f7f3 fde0 	bl	c5c <Sys_GetCoreID>
    d09c:	4603      	mov	r3, r0
    d09e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
    d0a0:	4a0d      	ldr	r2, [pc, #52]	; (d0d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    d0a2:	9b01      	ldr	r3, [sp, #4]
    d0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0a8:	1e5a      	subs	r2, r3, #1
    d0aa:	490b      	ldr	r1, [pc, #44]	; (d0d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    d0ac:	9b01      	ldr	r3, [sp, #4]
    d0ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    d0b2:	4a0a      	ldr	r2, [pc, #40]	; (d0dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
    d0b4:	9b01      	ldr	r3, [sp, #4]
    d0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ba:	f003 0301 	and.w	r3, r3, #1
    d0be:	2b00      	cmp	r3, #0
    d0c0:	d106      	bne.n	d0d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    d0c2:	4a05      	ldr	r2, [pc, #20]	; (d0d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    d0c4:	9b01      	ldr	r3, [sp, #4]
    d0c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ca:	2b00      	cmp	r3, #0
    d0cc:	d100      	bne.n	d0d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d0ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d0d0:	bf00      	nop
    d0d2:	b003      	add	sp, #12
    d0d4:	f85d fb04 	ldr.w	pc, [sp], #4
    d0d8:	1fff900c 	.word	0x1fff900c
    d0dc:	1fff9008 	.word	0x1fff9008

0000d0e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    d0e0:	b500      	push	{lr}
    d0e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0e4:	f7f3 fdba 	bl	c5c <Sys_GetCoreID>
    d0e8:	4603      	mov	r3, r0
    d0ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
    d0ec:	4a10      	ldr	r2, [pc, #64]	; (d130 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    d0ee:	9b01      	ldr	r3, [sp, #4]
    d0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0f4:	2b00      	cmp	r3, #0
    d0f6:	d10d      	bne.n	d114 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d0f8:	f7f3 fcce 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    d0fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d0fe:	9b00      	ldr	r3, [sp, #0]
    d100:	f003 0301 	and.w	r3, r3, #1
    d104:	2b00      	cmp	r3, #0
    d106:	d100      	bne.n	d10a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d108:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    d10a:	490a      	ldr	r1, [pc, #40]	; (d134 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
    d10c:	9b01      	ldr	r3, [sp, #4]
    d10e:	9a00      	ldr	r2, [sp, #0]
    d110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
    d114:	4a06      	ldr	r2, [pc, #24]	; (d130 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    d116:	9b01      	ldr	r3, [sp, #4]
    d118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d11c:	1c5a      	adds	r2, r3, #1
    d11e:	4904      	ldr	r1, [pc, #16]	; (d130 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    d120:	9b01      	ldr	r3, [sp, #4]
    d122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d126:	bf00      	nop
    d128:	b003      	add	sp, #12
    d12a:	f85d fb04 	ldr.w	pc, [sp], #4
    d12e:	bf00      	nop
    d130:	1fff9014 	.word	0x1fff9014
    d134:	1fff9010 	.word	0x1fff9010

0000d138 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    d138:	b500      	push	{lr}
    d13a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d13c:	f7f3 fd8e 	bl	c5c <Sys_GetCoreID>
    d140:	4603      	mov	r3, r0
    d142:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
    d144:	4a0d      	ldr	r2, [pc, #52]	; (d17c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    d146:	9b01      	ldr	r3, [sp, #4]
    d148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d14c:	1e5a      	subs	r2, r3, #1
    d14e:	490b      	ldr	r1, [pc, #44]	; (d17c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    d150:	9b01      	ldr	r3, [sp, #4]
    d152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    d156:	4a0a      	ldr	r2, [pc, #40]	; (d180 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
    d158:	9b01      	ldr	r3, [sp, #4]
    d15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d15e:	f003 0301 	and.w	r3, r3, #1
    d162:	2b00      	cmp	r3, #0
    d164:	d106      	bne.n	d174 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    d166:	4a05      	ldr	r2, [pc, #20]	; (d17c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    d168:	9b01      	ldr	r3, [sp, #4]
    d16a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d16e:	2b00      	cmp	r3, #0
    d170:	d100      	bne.n	d174 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d172:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d174:	bf00      	nop
    d176:	b003      	add	sp, #12
    d178:	f85d fb04 	ldr.w	pc, [sp], #4
    d17c:	1fff9014 	.word	0x1fff9014
    d180:	1fff9010 	.word	0x1fff9010

0000d184 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    d184:	b500      	push	{lr}
    d186:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d188:	f7f3 fd68 	bl	c5c <Sys_GetCoreID>
    d18c:	4603      	mov	r3, r0
    d18e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
    d190:	4a10      	ldr	r2, [pc, #64]	; (d1d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    d192:	9b01      	ldr	r3, [sp, #4]
    d194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d198:	2b00      	cmp	r3, #0
    d19a:	d10d      	bne.n	d1b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d19c:	f7f3 fc7c 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    d1a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d1a2:	9b00      	ldr	r3, [sp, #0]
    d1a4:	f003 0301 	and.w	r3, r3, #1
    d1a8:	2b00      	cmp	r3, #0
    d1aa:	d100      	bne.n	d1ae <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d1ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    d1ae:	490a      	ldr	r1, [pc, #40]	; (d1d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
    d1b0:	9b01      	ldr	r3, [sp, #4]
    d1b2:	9a00      	ldr	r2, [sp, #0]
    d1b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
    d1b8:	4a06      	ldr	r2, [pc, #24]	; (d1d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    d1ba:	9b01      	ldr	r3, [sp, #4]
    d1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1c0:	1c5a      	adds	r2, r3, #1
    d1c2:	4904      	ldr	r1, [pc, #16]	; (d1d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    d1c4:	9b01      	ldr	r3, [sp, #4]
    d1c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d1ca:	bf00      	nop
    d1cc:	b003      	add	sp, #12
    d1ce:	f85d fb04 	ldr.w	pc, [sp], #4
    d1d2:	bf00      	nop
    d1d4:	1fff901c 	.word	0x1fff901c
    d1d8:	1fff9018 	.word	0x1fff9018

0000d1dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    d1dc:	b500      	push	{lr}
    d1de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1e0:	f7f3 fd3c 	bl	c5c <Sys_GetCoreID>
    d1e4:	4603      	mov	r3, r0
    d1e6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
    d1e8:	4a0d      	ldr	r2, [pc, #52]	; (d220 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    d1ea:	9b01      	ldr	r3, [sp, #4]
    d1ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1f0:	1e5a      	subs	r2, r3, #1
    d1f2:	490b      	ldr	r1, [pc, #44]	; (d220 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    d1f4:	9b01      	ldr	r3, [sp, #4]
    d1f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    d1fa:	4a0a      	ldr	r2, [pc, #40]	; (d224 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
    d1fc:	9b01      	ldr	r3, [sp, #4]
    d1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d202:	f003 0301 	and.w	r3, r3, #1
    d206:	2b00      	cmp	r3, #0
    d208:	d106      	bne.n	d218 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    d20a:	4a05      	ldr	r2, [pc, #20]	; (d220 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    d20c:	9b01      	ldr	r3, [sp, #4]
    d20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d212:	2b00      	cmp	r3, #0
    d214:	d100      	bne.n	d218 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d216:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d218:	bf00      	nop
    d21a:	b003      	add	sp, #12
    d21c:	f85d fb04 	ldr.w	pc, [sp], #4
    d220:	1fff901c 	.word	0x1fff901c
    d224:	1fff9018 	.word	0x1fff9018

0000d228 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    d228:	b500      	push	{lr}
    d22a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d22c:	f7f3 fd16 	bl	c5c <Sys_GetCoreID>
    d230:	4603      	mov	r3, r0
    d232:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
    d234:	4a10      	ldr	r2, [pc, #64]	; (d278 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    d236:	9b01      	ldr	r3, [sp, #4]
    d238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d23c:	2b00      	cmp	r3, #0
    d23e:	d10d      	bne.n	d25c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d240:	f7f3 fc2a 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    d244:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d246:	9b00      	ldr	r3, [sp, #0]
    d248:	f003 0301 	and.w	r3, r3, #1
    d24c:	2b00      	cmp	r3, #0
    d24e:	d100      	bne.n	d252 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d250:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    d252:	490a      	ldr	r1, [pc, #40]	; (d27c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
    d254:	9b01      	ldr	r3, [sp, #4]
    d256:	9a00      	ldr	r2, [sp, #0]
    d258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
    d25c:	4a06      	ldr	r2, [pc, #24]	; (d278 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    d25e:	9b01      	ldr	r3, [sp, #4]
    d260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d264:	1c5a      	adds	r2, r3, #1
    d266:	4904      	ldr	r1, [pc, #16]	; (d278 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    d268:	9b01      	ldr	r3, [sp, #4]
    d26a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d26e:	bf00      	nop
    d270:	b003      	add	sp, #12
    d272:	f85d fb04 	ldr.w	pc, [sp], #4
    d276:	bf00      	nop
    d278:	1fff9024 	.word	0x1fff9024
    d27c:	1fff9020 	.word	0x1fff9020

0000d280 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    d280:	b500      	push	{lr}
    d282:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d284:	f7f3 fcea 	bl	c5c <Sys_GetCoreID>
    d288:	4603      	mov	r3, r0
    d28a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
    d28c:	4a0d      	ldr	r2, [pc, #52]	; (d2c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    d28e:	9b01      	ldr	r3, [sp, #4]
    d290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d294:	1e5a      	subs	r2, r3, #1
    d296:	490b      	ldr	r1, [pc, #44]	; (d2c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    d298:	9b01      	ldr	r3, [sp, #4]
    d29a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    d29e:	4a0a      	ldr	r2, [pc, #40]	; (d2c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
    d2a0:	9b01      	ldr	r3, [sp, #4]
    d2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2a6:	f003 0301 	and.w	r3, r3, #1
    d2aa:	2b00      	cmp	r3, #0
    d2ac:	d106      	bne.n	d2bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    d2ae:	4a05      	ldr	r2, [pc, #20]	; (d2c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    d2b0:	9b01      	ldr	r3, [sp, #4]
    d2b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d100      	bne.n	d2bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d2ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d2bc:	bf00      	nop
    d2be:	b003      	add	sp, #12
    d2c0:	f85d fb04 	ldr.w	pc, [sp], #4
    d2c4:	1fff9024 	.word	0x1fff9024
    d2c8:	1fff9020 	.word	0x1fff9020

0000d2cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    d2cc:	b500      	push	{lr}
    d2ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2d0:	f7f3 fcc4 	bl	c5c <Sys_GetCoreID>
    d2d4:	4603      	mov	r3, r0
    d2d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
    d2d8:	4a10      	ldr	r2, [pc, #64]	; (d31c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    d2da:	9b01      	ldr	r3, [sp, #4]
    d2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2e0:	2b00      	cmp	r3, #0
    d2e2:	d10d      	bne.n	d300 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d2e4:	f7f3 fbd8 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    d2e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d2ea:	9b00      	ldr	r3, [sp, #0]
    d2ec:	f003 0301 	and.w	r3, r3, #1
    d2f0:	2b00      	cmp	r3, #0
    d2f2:	d100      	bne.n	d2f6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d2f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    d2f6:	490a      	ldr	r1, [pc, #40]	; (d320 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
    d2f8:	9b01      	ldr	r3, [sp, #4]
    d2fa:	9a00      	ldr	r2, [sp, #0]
    d2fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
    d300:	4a06      	ldr	r2, [pc, #24]	; (d31c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    d302:	9b01      	ldr	r3, [sp, #4]
    d304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d308:	1c5a      	adds	r2, r3, #1
    d30a:	4904      	ldr	r1, [pc, #16]	; (d31c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    d30c:	9b01      	ldr	r3, [sp, #4]
    d30e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d312:	bf00      	nop
    d314:	b003      	add	sp, #12
    d316:	f85d fb04 	ldr.w	pc, [sp], #4
    d31a:	bf00      	nop
    d31c:	1fff902c 	.word	0x1fff902c
    d320:	1fff9028 	.word	0x1fff9028

0000d324 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    d324:	b500      	push	{lr}
    d326:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d328:	f7f3 fc98 	bl	c5c <Sys_GetCoreID>
    d32c:	4603      	mov	r3, r0
    d32e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
    d330:	4a0d      	ldr	r2, [pc, #52]	; (d368 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    d332:	9b01      	ldr	r3, [sp, #4]
    d334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d338:	1e5a      	subs	r2, r3, #1
    d33a:	490b      	ldr	r1, [pc, #44]	; (d368 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    d33c:	9b01      	ldr	r3, [sp, #4]
    d33e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    d342:	4a0a      	ldr	r2, [pc, #40]	; (d36c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
    d344:	9b01      	ldr	r3, [sp, #4]
    d346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d34a:	f003 0301 	and.w	r3, r3, #1
    d34e:	2b00      	cmp	r3, #0
    d350:	d106      	bne.n	d360 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    d352:	4a05      	ldr	r2, [pc, #20]	; (d368 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    d354:	9b01      	ldr	r3, [sp, #4]
    d356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d35a:	2b00      	cmp	r3, #0
    d35c:	d100      	bne.n	d360 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d35e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d360:	bf00      	nop
    d362:	b003      	add	sp, #12
    d364:	f85d fb04 	ldr.w	pc, [sp], #4
    d368:	1fff902c 	.word	0x1fff902c
    d36c:	1fff9028 	.word	0x1fff9028

0000d370 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    d370:	b500      	push	{lr}
    d372:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d374:	f7f3 fc72 	bl	c5c <Sys_GetCoreID>
    d378:	4603      	mov	r3, r0
    d37a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
    d37c:	4a10      	ldr	r2, [pc, #64]	; (d3c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    d37e:	9b01      	ldr	r3, [sp, #4]
    d380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d384:	2b00      	cmp	r3, #0
    d386:	d10d      	bne.n	d3a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d388:	f7f3 fb86 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    d38c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d38e:	9b00      	ldr	r3, [sp, #0]
    d390:	f003 0301 	and.w	r3, r3, #1
    d394:	2b00      	cmp	r3, #0
    d396:	d100      	bne.n	d39a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d398:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    d39a:	490a      	ldr	r1, [pc, #40]	; (d3c4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
    d39c:	9b01      	ldr	r3, [sp, #4]
    d39e:	9a00      	ldr	r2, [sp, #0]
    d3a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
    d3a4:	4a06      	ldr	r2, [pc, #24]	; (d3c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    d3a6:	9b01      	ldr	r3, [sp, #4]
    d3a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3ac:	1c5a      	adds	r2, r3, #1
    d3ae:	4904      	ldr	r1, [pc, #16]	; (d3c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    d3b0:	9b01      	ldr	r3, [sp, #4]
    d3b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d3b6:	bf00      	nop
    d3b8:	b003      	add	sp, #12
    d3ba:	f85d fb04 	ldr.w	pc, [sp], #4
    d3be:	bf00      	nop
    d3c0:	1fff9034 	.word	0x1fff9034
    d3c4:	1fff9030 	.word	0x1fff9030

0000d3c8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    d3c8:	b500      	push	{lr}
    d3ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3cc:	f7f3 fc46 	bl	c5c <Sys_GetCoreID>
    d3d0:	4603      	mov	r3, r0
    d3d2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
    d3d4:	4a0d      	ldr	r2, [pc, #52]	; (d40c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    d3d6:	9b01      	ldr	r3, [sp, #4]
    d3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3dc:	1e5a      	subs	r2, r3, #1
    d3de:	490b      	ldr	r1, [pc, #44]	; (d40c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    d3e0:	9b01      	ldr	r3, [sp, #4]
    d3e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    d3e6:	4a0a      	ldr	r2, [pc, #40]	; (d410 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
    d3e8:	9b01      	ldr	r3, [sp, #4]
    d3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3ee:	f003 0301 	and.w	r3, r3, #1
    d3f2:	2b00      	cmp	r3, #0
    d3f4:	d106      	bne.n	d404 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    d3f6:	4a05      	ldr	r2, [pc, #20]	; (d40c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    d3f8:	9b01      	ldr	r3, [sp, #4]
    d3fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3fe:	2b00      	cmp	r3, #0
    d400:	d100      	bne.n	d404 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d402:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d404:	bf00      	nop
    d406:	b003      	add	sp, #12
    d408:	f85d fb04 	ldr.w	pc, [sp], #4
    d40c:	1fff9034 	.word	0x1fff9034
    d410:	1fff9030 	.word	0x1fff9030

0000d414 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    d414:	b500      	push	{lr}
    d416:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d418:	f7f3 fc20 	bl	c5c <Sys_GetCoreID>
    d41c:	4603      	mov	r3, r0
    d41e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
    d420:	4a10      	ldr	r2, [pc, #64]	; (d464 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    d422:	9b01      	ldr	r3, [sp, #4]
    d424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d428:	2b00      	cmp	r3, #0
    d42a:	d10d      	bne.n	d448 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d42c:	f7f3 fb34 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    d430:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d432:	9b00      	ldr	r3, [sp, #0]
    d434:	f003 0301 	and.w	r3, r3, #1
    d438:	2b00      	cmp	r3, #0
    d43a:	d100      	bne.n	d43e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d43c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    d43e:	490a      	ldr	r1, [pc, #40]	; (d468 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
    d440:	9b01      	ldr	r3, [sp, #4]
    d442:	9a00      	ldr	r2, [sp, #0]
    d444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
    d448:	4a06      	ldr	r2, [pc, #24]	; (d464 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    d44a:	9b01      	ldr	r3, [sp, #4]
    d44c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d450:	1c5a      	adds	r2, r3, #1
    d452:	4904      	ldr	r1, [pc, #16]	; (d464 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    d454:	9b01      	ldr	r3, [sp, #4]
    d456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d45a:	bf00      	nop
    d45c:	b003      	add	sp, #12
    d45e:	f85d fb04 	ldr.w	pc, [sp], #4
    d462:	bf00      	nop
    d464:	1fff903c 	.word	0x1fff903c
    d468:	1fff9038 	.word	0x1fff9038

0000d46c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    d46c:	b500      	push	{lr}
    d46e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d470:	f7f3 fbf4 	bl	c5c <Sys_GetCoreID>
    d474:	4603      	mov	r3, r0
    d476:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
    d478:	4a0d      	ldr	r2, [pc, #52]	; (d4b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    d47a:	9b01      	ldr	r3, [sp, #4]
    d47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d480:	1e5a      	subs	r2, r3, #1
    d482:	490b      	ldr	r1, [pc, #44]	; (d4b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    d484:	9b01      	ldr	r3, [sp, #4]
    d486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    d48a:	4a0a      	ldr	r2, [pc, #40]	; (d4b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
    d48c:	9b01      	ldr	r3, [sp, #4]
    d48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d492:	f003 0301 	and.w	r3, r3, #1
    d496:	2b00      	cmp	r3, #0
    d498:	d106      	bne.n	d4a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    d49a:	4a05      	ldr	r2, [pc, #20]	; (d4b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    d49c:	9b01      	ldr	r3, [sp, #4]
    d49e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4a2:	2b00      	cmp	r3, #0
    d4a4:	d100      	bne.n	d4a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d4a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d4a8:	bf00      	nop
    d4aa:	b003      	add	sp, #12
    d4ac:	f85d fb04 	ldr.w	pc, [sp], #4
    d4b0:	1fff903c 	.word	0x1fff903c
    d4b4:	1fff9038 	.word	0x1fff9038

0000d4b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    d4b8:	b500      	push	{lr}
    d4ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4bc:	f7f3 fbce 	bl	c5c <Sys_GetCoreID>
    d4c0:	4603      	mov	r3, r0
    d4c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
    d4c4:	4a10      	ldr	r2, [pc, #64]	; (d508 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    d4c6:	9b01      	ldr	r3, [sp, #4]
    d4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4cc:	2b00      	cmp	r3, #0
    d4ce:	d10d      	bne.n	d4ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d4d0:	f7f3 fae2 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    d4d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d4d6:	9b00      	ldr	r3, [sp, #0]
    d4d8:	f003 0301 	and.w	r3, r3, #1
    d4dc:	2b00      	cmp	r3, #0
    d4de:	d100      	bne.n	d4e2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d4e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    d4e2:	490a      	ldr	r1, [pc, #40]	; (d50c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
    d4e4:	9b01      	ldr	r3, [sp, #4]
    d4e6:	9a00      	ldr	r2, [sp, #0]
    d4e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
    d4ec:	4a06      	ldr	r2, [pc, #24]	; (d508 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    d4ee:	9b01      	ldr	r3, [sp, #4]
    d4f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4f4:	1c5a      	adds	r2, r3, #1
    d4f6:	4904      	ldr	r1, [pc, #16]	; (d508 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    d4f8:	9b01      	ldr	r3, [sp, #4]
    d4fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d4fe:	bf00      	nop
    d500:	b003      	add	sp, #12
    d502:	f85d fb04 	ldr.w	pc, [sp], #4
    d506:	bf00      	nop
    d508:	1fff9044 	.word	0x1fff9044
    d50c:	1fff9040 	.word	0x1fff9040

0000d510 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    d510:	b500      	push	{lr}
    d512:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d514:	f7f3 fba2 	bl	c5c <Sys_GetCoreID>
    d518:	4603      	mov	r3, r0
    d51a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
    d51c:	4a0d      	ldr	r2, [pc, #52]	; (d554 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    d51e:	9b01      	ldr	r3, [sp, #4]
    d520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d524:	1e5a      	subs	r2, r3, #1
    d526:	490b      	ldr	r1, [pc, #44]	; (d554 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    d528:	9b01      	ldr	r3, [sp, #4]
    d52a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    d52e:	4a0a      	ldr	r2, [pc, #40]	; (d558 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
    d530:	9b01      	ldr	r3, [sp, #4]
    d532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d536:	f003 0301 	and.w	r3, r3, #1
    d53a:	2b00      	cmp	r3, #0
    d53c:	d106      	bne.n	d54c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    d53e:	4a05      	ldr	r2, [pc, #20]	; (d554 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    d540:	9b01      	ldr	r3, [sp, #4]
    d542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d546:	2b00      	cmp	r3, #0
    d548:	d100      	bne.n	d54c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d54a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d54c:	bf00      	nop
    d54e:	b003      	add	sp, #12
    d550:	f85d fb04 	ldr.w	pc, [sp], #4
    d554:	1fff9044 	.word	0x1fff9044
    d558:	1fff9040 	.word	0x1fff9040

0000d55c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    d55c:	b500      	push	{lr}
    d55e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d560:	f7f3 fb7c 	bl	c5c <Sys_GetCoreID>
    d564:	4603      	mov	r3, r0
    d566:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
    d568:	4a10      	ldr	r2, [pc, #64]	; (d5ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    d56a:	9b01      	ldr	r3, [sp, #4]
    d56c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d570:	2b00      	cmp	r3, #0
    d572:	d10d      	bne.n	d590 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d574:	f7f3 fa90 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    d578:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d57a:	9b00      	ldr	r3, [sp, #0]
    d57c:	f003 0301 	and.w	r3, r3, #1
    d580:	2b00      	cmp	r3, #0
    d582:	d100      	bne.n	d586 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d584:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    d586:	490a      	ldr	r1, [pc, #40]	; (d5b0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
    d588:	9b01      	ldr	r3, [sp, #4]
    d58a:	9a00      	ldr	r2, [sp, #0]
    d58c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
    d590:	4a06      	ldr	r2, [pc, #24]	; (d5ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    d592:	9b01      	ldr	r3, [sp, #4]
    d594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d598:	1c5a      	adds	r2, r3, #1
    d59a:	4904      	ldr	r1, [pc, #16]	; (d5ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    d59c:	9b01      	ldr	r3, [sp, #4]
    d59e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d5a2:	bf00      	nop
    d5a4:	b003      	add	sp, #12
    d5a6:	f85d fb04 	ldr.w	pc, [sp], #4
    d5aa:	bf00      	nop
    d5ac:	1fff904c 	.word	0x1fff904c
    d5b0:	1fff9048 	.word	0x1fff9048

0000d5b4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    d5b4:	b500      	push	{lr}
    d5b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5b8:	f7f3 fb50 	bl	c5c <Sys_GetCoreID>
    d5bc:	4603      	mov	r3, r0
    d5be:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
    d5c0:	4a0d      	ldr	r2, [pc, #52]	; (d5f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    d5c2:	9b01      	ldr	r3, [sp, #4]
    d5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5c8:	1e5a      	subs	r2, r3, #1
    d5ca:	490b      	ldr	r1, [pc, #44]	; (d5f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    d5cc:	9b01      	ldr	r3, [sp, #4]
    d5ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    d5d2:	4a0a      	ldr	r2, [pc, #40]	; (d5fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
    d5d4:	9b01      	ldr	r3, [sp, #4]
    d5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5da:	f003 0301 	and.w	r3, r3, #1
    d5de:	2b00      	cmp	r3, #0
    d5e0:	d106      	bne.n	d5f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    d5e2:	4a05      	ldr	r2, [pc, #20]	; (d5f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    d5e4:	9b01      	ldr	r3, [sp, #4]
    d5e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5ea:	2b00      	cmp	r3, #0
    d5ec:	d100      	bne.n	d5f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d5ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d5f0:	bf00      	nop
    d5f2:	b003      	add	sp, #12
    d5f4:	f85d fb04 	ldr.w	pc, [sp], #4
    d5f8:	1fff904c 	.word	0x1fff904c
    d5fc:	1fff9048 	.word	0x1fff9048

0000d600 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    d600:	b500      	push	{lr}
    d602:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d604:	f7f3 fb2a 	bl	c5c <Sys_GetCoreID>
    d608:	4603      	mov	r3, r0
    d60a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
    d60c:	4a10      	ldr	r2, [pc, #64]	; (d650 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    d60e:	9b01      	ldr	r3, [sp, #4]
    d610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d614:	2b00      	cmp	r3, #0
    d616:	d10d      	bne.n	d634 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d618:	f7f3 fa3e 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    d61c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d61e:	9b00      	ldr	r3, [sp, #0]
    d620:	f003 0301 	and.w	r3, r3, #1
    d624:	2b00      	cmp	r3, #0
    d626:	d100      	bne.n	d62a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d628:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    d62a:	490a      	ldr	r1, [pc, #40]	; (d654 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
    d62c:	9b01      	ldr	r3, [sp, #4]
    d62e:	9a00      	ldr	r2, [sp, #0]
    d630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
    d634:	4a06      	ldr	r2, [pc, #24]	; (d650 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    d636:	9b01      	ldr	r3, [sp, #4]
    d638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d63c:	1c5a      	adds	r2, r3, #1
    d63e:	4904      	ldr	r1, [pc, #16]	; (d650 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    d640:	9b01      	ldr	r3, [sp, #4]
    d642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d646:	bf00      	nop
    d648:	b003      	add	sp, #12
    d64a:	f85d fb04 	ldr.w	pc, [sp], #4
    d64e:	bf00      	nop
    d650:	1fff9054 	.word	0x1fff9054
    d654:	1fff9050 	.word	0x1fff9050

0000d658 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    d658:	b500      	push	{lr}
    d65a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d65c:	f7f3 fafe 	bl	c5c <Sys_GetCoreID>
    d660:	4603      	mov	r3, r0
    d662:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
    d664:	4a0d      	ldr	r2, [pc, #52]	; (d69c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    d666:	9b01      	ldr	r3, [sp, #4]
    d668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d66c:	1e5a      	subs	r2, r3, #1
    d66e:	490b      	ldr	r1, [pc, #44]	; (d69c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    d670:	9b01      	ldr	r3, [sp, #4]
    d672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    d676:	4a0a      	ldr	r2, [pc, #40]	; (d6a0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
    d678:	9b01      	ldr	r3, [sp, #4]
    d67a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d67e:	f003 0301 	and.w	r3, r3, #1
    d682:	2b00      	cmp	r3, #0
    d684:	d106      	bne.n	d694 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    d686:	4a05      	ldr	r2, [pc, #20]	; (d69c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    d688:	9b01      	ldr	r3, [sp, #4]
    d68a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d68e:	2b00      	cmp	r3, #0
    d690:	d100      	bne.n	d694 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d692:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d694:	bf00      	nop
    d696:	b003      	add	sp, #12
    d698:	f85d fb04 	ldr.w	pc, [sp], #4
    d69c:	1fff9054 	.word	0x1fff9054
    d6a0:	1fff9050 	.word	0x1fff9050

0000d6a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    d6a4:	b500      	push	{lr}
    d6a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6a8:	f7f3 fad8 	bl	c5c <Sys_GetCoreID>
    d6ac:	4603      	mov	r3, r0
    d6ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
    d6b0:	4a10      	ldr	r2, [pc, #64]	; (d6f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    d6b2:	9b01      	ldr	r3, [sp, #4]
    d6b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6b8:	2b00      	cmp	r3, #0
    d6ba:	d10d      	bne.n	d6d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d6bc:	f7f3 f9ec 	bl	a98 <Can_43_FLEXCAN_schm_read_msr>
    d6c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d6c2:	9b00      	ldr	r3, [sp, #0]
    d6c4:	f003 0301 	and.w	r3, r3, #1
    d6c8:	2b00      	cmp	r3, #0
    d6ca:	d100      	bne.n	d6ce <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d6cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    d6ce:	490a      	ldr	r1, [pc, #40]	; (d6f8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
    d6d0:	9b01      	ldr	r3, [sp, #4]
    d6d2:	9a00      	ldr	r2, [sp, #0]
    d6d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
    d6d8:	4a06      	ldr	r2, [pc, #24]	; (d6f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    d6da:	9b01      	ldr	r3, [sp, #4]
    d6dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6e0:	1c5a      	adds	r2, r3, #1
    d6e2:	4904      	ldr	r1, [pc, #16]	; (d6f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    d6e4:	9b01      	ldr	r3, [sp, #4]
    d6e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d6ea:	bf00      	nop
    d6ec:	b003      	add	sp, #12
    d6ee:	f85d fb04 	ldr.w	pc, [sp], #4
    d6f2:	bf00      	nop
    d6f4:	1fff905c 	.word	0x1fff905c
    d6f8:	1fff9058 	.word	0x1fff9058

0000d6fc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    d6fc:	b500      	push	{lr}
    d6fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d700:	f7f3 faac 	bl	c5c <Sys_GetCoreID>
    d704:	4603      	mov	r3, r0
    d706:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
    d708:	4a0d      	ldr	r2, [pc, #52]	; (d740 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    d70a:	9b01      	ldr	r3, [sp, #4]
    d70c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d710:	1e5a      	subs	r2, r3, #1
    d712:	490b      	ldr	r1, [pc, #44]	; (d740 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    d714:	9b01      	ldr	r3, [sp, #4]
    d716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    d71a:	4a0a      	ldr	r2, [pc, #40]	; (d744 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
    d71c:	9b01      	ldr	r3, [sp, #4]
    d71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d722:	f003 0301 	and.w	r3, r3, #1
    d726:	2b00      	cmp	r3, #0
    d728:	d106      	bne.n	d738 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    d72a:	4a05      	ldr	r2, [pc, #20]	; (d740 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    d72c:	9b01      	ldr	r3, [sp, #4]
    d72e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d732:	2b00      	cmp	r3, #0
    d734:	d100      	bne.n	d738 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d736:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d738:	bf00      	nop
    d73a:	b003      	add	sp, #12
    d73c:	f85d fb04 	ldr.w	pc, [sp], #4
    d740:	1fff905c 	.word	0x1fff905c
    d744:	1fff9058 	.word	0x1fff9058

0000d748 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    d748:	b500      	push	{lr}
    d74a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d74c:	f7f3 fa86 	bl	c5c <Sys_GetCoreID>
    d750:	4603      	mov	r3, r0
    d752:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    d754:	4a10      	ldr	r2, [pc, #64]	; (d798 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    d756:	9b01      	ldr	r3, [sp, #4]
    d758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d75c:	2b00      	cmp	r3, #0
    d75e:	d10d      	bne.n	d77c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d760:	f7f3 f9a3 	bl	aaa <Mcu_schm_read_msr>
    d764:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d766:	9b00      	ldr	r3, [sp, #0]
    d768:	f003 0301 	and.w	r3, r3, #1
    d76c:	2b00      	cmp	r3, #0
    d76e:	d100      	bne.n	d772 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d770:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    d772:	490a      	ldr	r1, [pc, #40]	; (d79c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    d774:	9b01      	ldr	r3, [sp, #4]
    d776:	9a00      	ldr	r2, [sp, #0]
    d778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    d77c:	4a06      	ldr	r2, [pc, #24]	; (d798 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    d77e:	9b01      	ldr	r3, [sp, #4]
    d780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d784:	1c5a      	adds	r2, r3, #1
    d786:	4904      	ldr	r1, [pc, #16]	; (d798 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    d788:	9b01      	ldr	r3, [sp, #4]
    d78a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d78e:	bf00      	nop
    d790:	b003      	add	sp, #12
    d792:	f85d fb04 	ldr.w	pc, [sp], #4
    d796:	bf00      	nop
    d798:	1fff9064 	.word	0x1fff9064
    d79c:	1fff9060 	.word	0x1fff9060

0000d7a0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    d7a0:	b500      	push	{lr}
    d7a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7a4:	f7f3 fa5a 	bl	c5c <Sys_GetCoreID>
    d7a8:	4603      	mov	r3, r0
    d7aa:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    d7ac:	4a0d      	ldr	r2, [pc, #52]	; (d7e4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    d7ae:	9b01      	ldr	r3, [sp, #4]
    d7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7b4:	1e5a      	subs	r2, r3, #1
    d7b6:	490b      	ldr	r1, [pc, #44]	; (d7e4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    d7b8:	9b01      	ldr	r3, [sp, #4]
    d7ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    d7be:	4a0a      	ldr	r2, [pc, #40]	; (d7e8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    d7c0:	9b01      	ldr	r3, [sp, #4]
    d7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7c6:	f003 0301 	and.w	r3, r3, #1
    d7ca:	2b00      	cmp	r3, #0
    d7cc:	d106      	bne.n	d7dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    d7ce:	4a05      	ldr	r2, [pc, #20]	; (d7e4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    d7d0:	9b01      	ldr	r3, [sp, #4]
    d7d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7d6:	2b00      	cmp	r3, #0
    d7d8:	d100      	bne.n	d7dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d7da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d7dc:	bf00      	nop
    d7de:	b003      	add	sp, #12
    d7e0:	f85d fb04 	ldr.w	pc, [sp], #4
    d7e4:	1fff9064 	.word	0x1fff9064
    d7e8:	1fff9060 	.word	0x1fff9060

0000d7ec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    d7ec:	b500      	push	{lr}
    d7ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7f0:	f7f3 fa34 	bl	c5c <Sys_GetCoreID>
    d7f4:	4603      	mov	r3, r0
    d7f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    d7f8:	4a10      	ldr	r2, [pc, #64]	; (d83c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    d7fa:	9b01      	ldr	r3, [sp, #4]
    d7fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d800:	2b00      	cmp	r3, #0
    d802:	d10d      	bne.n	d820 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d804:	f7f3 f951 	bl	aaa <Mcu_schm_read_msr>
    d808:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d80a:	9b00      	ldr	r3, [sp, #0]
    d80c:	f003 0301 	and.w	r3, r3, #1
    d810:	2b00      	cmp	r3, #0
    d812:	d100      	bne.n	d816 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d814:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    d816:	490a      	ldr	r1, [pc, #40]	; (d840 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    d818:	9b01      	ldr	r3, [sp, #4]
    d81a:	9a00      	ldr	r2, [sp, #0]
    d81c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    d820:	4a06      	ldr	r2, [pc, #24]	; (d83c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    d822:	9b01      	ldr	r3, [sp, #4]
    d824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d828:	1c5a      	adds	r2, r3, #1
    d82a:	4904      	ldr	r1, [pc, #16]	; (d83c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    d82c:	9b01      	ldr	r3, [sp, #4]
    d82e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d832:	bf00      	nop
    d834:	b003      	add	sp, #12
    d836:	f85d fb04 	ldr.w	pc, [sp], #4
    d83a:	bf00      	nop
    d83c:	1fff906c 	.word	0x1fff906c
    d840:	1fff9068 	.word	0x1fff9068

0000d844 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    d844:	b500      	push	{lr}
    d846:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d848:	f7f3 fa08 	bl	c5c <Sys_GetCoreID>
    d84c:	4603      	mov	r3, r0
    d84e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    d850:	4a0d      	ldr	r2, [pc, #52]	; (d888 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    d852:	9b01      	ldr	r3, [sp, #4]
    d854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d858:	1e5a      	subs	r2, r3, #1
    d85a:	490b      	ldr	r1, [pc, #44]	; (d888 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    d85c:	9b01      	ldr	r3, [sp, #4]
    d85e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    d862:	4a0a      	ldr	r2, [pc, #40]	; (d88c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    d864:	9b01      	ldr	r3, [sp, #4]
    d866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d86a:	f003 0301 	and.w	r3, r3, #1
    d86e:	2b00      	cmp	r3, #0
    d870:	d106      	bne.n	d880 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    d872:	4a05      	ldr	r2, [pc, #20]	; (d888 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    d874:	9b01      	ldr	r3, [sp, #4]
    d876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d87a:	2b00      	cmp	r3, #0
    d87c:	d100      	bne.n	d880 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d87e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d880:	bf00      	nop
    d882:	b003      	add	sp, #12
    d884:	f85d fb04 	ldr.w	pc, [sp], #4
    d888:	1fff906c 	.word	0x1fff906c
    d88c:	1fff9068 	.word	0x1fff9068

0000d890 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    d890:	b500      	push	{lr}
    d892:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d894:	f7f3 f9e2 	bl	c5c <Sys_GetCoreID>
    d898:	4603      	mov	r3, r0
    d89a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    d89c:	4a10      	ldr	r2, [pc, #64]	; (d8e0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    d89e:	9b01      	ldr	r3, [sp, #4]
    d8a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	d10d      	bne.n	d8c4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d8a8:	f7f3 f8ff 	bl	aaa <Mcu_schm_read_msr>
    d8ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d8ae:	9b00      	ldr	r3, [sp, #0]
    d8b0:	f003 0301 	and.w	r3, r3, #1
    d8b4:	2b00      	cmp	r3, #0
    d8b6:	d100      	bne.n	d8ba <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    d8ba:	490a      	ldr	r1, [pc, #40]	; (d8e4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    d8bc:	9b01      	ldr	r3, [sp, #4]
    d8be:	9a00      	ldr	r2, [sp, #0]
    d8c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    d8c4:	4a06      	ldr	r2, [pc, #24]	; (d8e0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    d8c6:	9b01      	ldr	r3, [sp, #4]
    d8c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8cc:	1c5a      	adds	r2, r3, #1
    d8ce:	4904      	ldr	r1, [pc, #16]	; (d8e0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    d8d0:	9b01      	ldr	r3, [sp, #4]
    d8d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d8d6:	bf00      	nop
    d8d8:	b003      	add	sp, #12
    d8da:	f85d fb04 	ldr.w	pc, [sp], #4
    d8de:	bf00      	nop
    d8e0:	1fff9074 	.word	0x1fff9074
    d8e4:	1fff9070 	.word	0x1fff9070

0000d8e8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    d8e8:	b500      	push	{lr}
    d8ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8ec:	f7f3 f9b6 	bl	c5c <Sys_GetCoreID>
    d8f0:	4603      	mov	r3, r0
    d8f2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    d8f4:	4a0d      	ldr	r2, [pc, #52]	; (d92c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    d8f6:	9b01      	ldr	r3, [sp, #4]
    d8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8fc:	1e5a      	subs	r2, r3, #1
    d8fe:	490b      	ldr	r1, [pc, #44]	; (d92c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    d900:	9b01      	ldr	r3, [sp, #4]
    d902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    d906:	4a0a      	ldr	r2, [pc, #40]	; (d930 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    d908:	9b01      	ldr	r3, [sp, #4]
    d90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d90e:	f003 0301 	and.w	r3, r3, #1
    d912:	2b00      	cmp	r3, #0
    d914:	d106      	bne.n	d924 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    d916:	4a05      	ldr	r2, [pc, #20]	; (d92c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    d918:	9b01      	ldr	r3, [sp, #4]
    d91a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d91e:	2b00      	cmp	r3, #0
    d920:	d100      	bne.n	d924 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d922:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d924:	bf00      	nop
    d926:	b003      	add	sp, #12
    d928:	f85d fb04 	ldr.w	pc, [sp], #4
    d92c:	1fff9074 	.word	0x1fff9074
    d930:	1fff9070 	.word	0x1fff9070

0000d934 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    d934:	b500      	push	{lr}
    d936:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d938:	f7f3 f990 	bl	c5c <Sys_GetCoreID>
    d93c:	4603      	mov	r3, r0
    d93e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    d940:	4a10      	ldr	r2, [pc, #64]	; (d984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    d942:	9b01      	ldr	r3, [sp, #4]
    d944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d948:	2b00      	cmp	r3, #0
    d94a:	d10d      	bne.n	d968 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d94c:	f7f3 f8b6 	bl	abc <Port_schm_read_msr>
    d950:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d952:	9b00      	ldr	r3, [sp, #0]
    d954:	f003 0301 	and.w	r3, r3, #1
    d958:	2b00      	cmp	r3, #0
    d95a:	d100      	bne.n	d95e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d95c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    d95e:	490a      	ldr	r1, [pc, #40]	; (d988 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    d960:	9b01      	ldr	r3, [sp, #4]
    d962:	9a00      	ldr	r2, [sp, #0]
    d964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    d968:	4a06      	ldr	r2, [pc, #24]	; (d984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    d96a:	9b01      	ldr	r3, [sp, #4]
    d96c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d970:	1c5a      	adds	r2, r3, #1
    d972:	4904      	ldr	r1, [pc, #16]	; (d984 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    d974:	9b01      	ldr	r3, [sp, #4]
    d976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d97a:	bf00      	nop
    d97c:	b003      	add	sp, #12
    d97e:	f85d fb04 	ldr.w	pc, [sp], #4
    d982:	bf00      	nop
    d984:	1fff907c 	.word	0x1fff907c
    d988:	1fff9078 	.word	0x1fff9078

0000d98c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    d98c:	b500      	push	{lr}
    d98e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d990:	f7f3 f964 	bl	c5c <Sys_GetCoreID>
    d994:	4603      	mov	r3, r0
    d996:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    d998:	4a0d      	ldr	r2, [pc, #52]	; (d9d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    d99a:	9b01      	ldr	r3, [sp, #4]
    d99c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9a0:	1e5a      	subs	r2, r3, #1
    d9a2:	490b      	ldr	r1, [pc, #44]	; (d9d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    d9a4:	9b01      	ldr	r3, [sp, #4]
    d9a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    d9aa:	4a0a      	ldr	r2, [pc, #40]	; (d9d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    d9ac:	9b01      	ldr	r3, [sp, #4]
    d9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9b2:	f003 0301 	and.w	r3, r3, #1
    d9b6:	2b00      	cmp	r3, #0
    d9b8:	d106      	bne.n	d9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    d9ba:	4a05      	ldr	r2, [pc, #20]	; (d9d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    d9bc:	9b01      	ldr	r3, [sp, #4]
    d9be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9c2:	2b00      	cmp	r3, #0
    d9c4:	d100      	bne.n	d9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d9c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d9c8:	bf00      	nop
    d9ca:	b003      	add	sp, #12
    d9cc:	f85d fb04 	ldr.w	pc, [sp], #4
    d9d0:	1fff907c 	.word	0x1fff907c
    d9d4:	1fff9078 	.word	0x1fff9078

0000d9d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    d9d8:	b500      	push	{lr}
    d9da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9dc:	f7f3 f93e 	bl	c5c <Sys_GetCoreID>
    d9e0:	4603      	mov	r3, r0
    d9e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    d9e4:	4a10      	ldr	r2, [pc, #64]	; (da28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    d9e6:	9b01      	ldr	r3, [sp, #4]
    d9e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9ec:	2b00      	cmp	r3, #0
    d9ee:	d10d      	bne.n	da0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d9f0:	f7f3 f864 	bl	abc <Port_schm_read_msr>
    d9f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d9f6:	9b00      	ldr	r3, [sp, #0]
    d9f8:	f003 0301 	and.w	r3, r3, #1
    d9fc:	2b00      	cmp	r3, #0
    d9fe:	d100      	bne.n	da02 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da00:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    da02:	490a      	ldr	r1, [pc, #40]	; (da2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    da04:	9b01      	ldr	r3, [sp, #4]
    da06:	9a00      	ldr	r2, [sp, #0]
    da08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    da0c:	4a06      	ldr	r2, [pc, #24]	; (da28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    da0e:	9b01      	ldr	r3, [sp, #4]
    da10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da14:	1c5a      	adds	r2, r3, #1
    da16:	4904      	ldr	r1, [pc, #16]	; (da28 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    da18:	9b01      	ldr	r3, [sp, #4]
    da1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da1e:	bf00      	nop
    da20:	b003      	add	sp, #12
    da22:	f85d fb04 	ldr.w	pc, [sp], #4
    da26:	bf00      	nop
    da28:	1fff9084 	.word	0x1fff9084
    da2c:	1fff9080 	.word	0x1fff9080

0000da30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    da30:	b500      	push	{lr}
    da32:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da34:	f7f3 f912 	bl	c5c <Sys_GetCoreID>
    da38:	4603      	mov	r3, r0
    da3a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    da3c:	4a0d      	ldr	r2, [pc, #52]	; (da74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    da3e:	9b01      	ldr	r3, [sp, #4]
    da40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da44:	1e5a      	subs	r2, r3, #1
    da46:	490b      	ldr	r1, [pc, #44]	; (da74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    da48:	9b01      	ldr	r3, [sp, #4]
    da4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    da4e:	4a0a      	ldr	r2, [pc, #40]	; (da78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    da50:	9b01      	ldr	r3, [sp, #4]
    da52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da56:	f003 0301 	and.w	r3, r3, #1
    da5a:	2b00      	cmp	r3, #0
    da5c:	d106      	bne.n	da6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    da5e:	4a05      	ldr	r2, [pc, #20]	; (da74 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    da60:	9b01      	ldr	r3, [sp, #4]
    da62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da66:	2b00      	cmp	r3, #0
    da68:	d100      	bne.n	da6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da6a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da6c:	bf00      	nop
    da6e:	b003      	add	sp, #12
    da70:	f85d fb04 	ldr.w	pc, [sp], #4
    da74:	1fff9084 	.word	0x1fff9084
    da78:	1fff9080 	.word	0x1fff9080

0000da7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    da7c:	b500      	push	{lr}
    da7e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da80:	f7f3 f8ec 	bl	c5c <Sys_GetCoreID>
    da84:	4603      	mov	r3, r0
    da86:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    da88:	4a10      	ldr	r2, [pc, #64]	; (dacc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    da8a:	9b01      	ldr	r3, [sp, #4]
    da8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da90:	2b00      	cmp	r3, #0
    da92:	d10d      	bne.n	dab0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da94:	f7f3 f812 	bl	abc <Port_schm_read_msr>
    da98:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da9a:	9b00      	ldr	r3, [sp, #0]
    da9c:	f003 0301 	and.w	r3, r3, #1
    daa0:	2b00      	cmp	r3, #0
    daa2:	d100      	bne.n	daa6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    daa4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    daa6:	490a      	ldr	r1, [pc, #40]	; (dad0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    daa8:	9b01      	ldr	r3, [sp, #4]
    daaa:	9a00      	ldr	r2, [sp, #0]
    daac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    dab0:	4a06      	ldr	r2, [pc, #24]	; (dacc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    dab2:	9b01      	ldr	r3, [sp, #4]
    dab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dab8:	1c5a      	adds	r2, r3, #1
    daba:	4904      	ldr	r1, [pc, #16]	; (dacc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    dabc:	9b01      	ldr	r3, [sp, #4]
    dabe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dac2:	bf00      	nop
    dac4:	b003      	add	sp, #12
    dac6:	f85d fb04 	ldr.w	pc, [sp], #4
    daca:	bf00      	nop
    dacc:	1fff908c 	.word	0x1fff908c
    dad0:	1fff9088 	.word	0x1fff9088

0000dad4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    dad4:	b500      	push	{lr}
    dad6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dad8:	f7f3 f8c0 	bl	c5c <Sys_GetCoreID>
    dadc:	4603      	mov	r3, r0
    dade:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    dae0:	4a0d      	ldr	r2, [pc, #52]	; (db18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    dae2:	9b01      	ldr	r3, [sp, #4]
    dae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dae8:	1e5a      	subs	r2, r3, #1
    daea:	490b      	ldr	r1, [pc, #44]	; (db18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    daec:	9b01      	ldr	r3, [sp, #4]
    daee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    daf2:	4a0a      	ldr	r2, [pc, #40]	; (db1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    daf4:	9b01      	ldr	r3, [sp, #4]
    daf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dafa:	f003 0301 	and.w	r3, r3, #1
    dafe:	2b00      	cmp	r3, #0
    db00:	d106      	bne.n	db10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    db02:	4a05      	ldr	r2, [pc, #20]	; (db18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    db04:	9b01      	ldr	r3, [sp, #4]
    db06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db0a:	2b00      	cmp	r3, #0
    db0c:	d100      	bne.n	db10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db10:	bf00      	nop
    db12:	b003      	add	sp, #12
    db14:	f85d fb04 	ldr.w	pc, [sp], #4
    db18:	1fff908c 	.word	0x1fff908c
    db1c:	1fff9088 	.word	0x1fff9088

0000db20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    db20:	b500      	push	{lr}
    db22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db24:	f7f3 f89a 	bl	c5c <Sys_GetCoreID>
    db28:	4603      	mov	r3, r0
    db2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    db2c:	4a10      	ldr	r2, [pc, #64]	; (db70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    db2e:	9b01      	ldr	r3, [sp, #4]
    db30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db34:	2b00      	cmp	r3, #0
    db36:	d10d      	bne.n	db54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db38:	f7f2 ffc0 	bl	abc <Port_schm_read_msr>
    db3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db3e:	9b00      	ldr	r3, [sp, #0]
    db40:	f003 0301 	and.w	r3, r3, #1
    db44:	2b00      	cmp	r3, #0
    db46:	d100      	bne.n	db4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    db4a:	490a      	ldr	r1, [pc, #40]	; (db74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    db4c:	9b01      	ldr	r3, [sp, #4]
    db4e:	9a00      	ldr	r2, [sp, #0]
    db50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    db54:	4a06      	ldr	r2, [pc, #24]	; (db70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    db56:	9b01      	ldr	r3, [sp, #4]
    db58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db5c:	1c5a      	adds	r2, r3, #1
    db5e:	4904      	ldr	r1, [pc, #16]	; (db70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    db60:	9b01      	ldr	r3, [sp, #4]
    db62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db66:	bf00      	nop
    db68:	b003      	add	sp, #12
    db6a:	f85d fb04 	ldr.w	pc, [sp], #4
    db6e:	bf00      	nop
    db70:	1fff9094 	.word	0x1fff9094
    db74:	1fff9090 	.word	0x1fff9090

0000db78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    db78:	b500      	push	{lr}
    db7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db7c:	f7f3 f86e 	bl	c5c <Sys_GetCoreID>
    db80:	4603      	mov	r3, r0
    db82:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    db84:	4a0d      	ldr	r2, [pc, #52]	; (dbbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    db86:	9b01      	ldr	r3, [sp, #4]
    db88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db8c:	1e5a      	subs	r2, r3, #1
    db8e:	490b      	ldr	r1, [pc, #44]	; (dbbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    db90:	9b01      	ldr	r3, [sp, #4]
    db92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    db96:	4a0a      	ldr	r2, [pc, #40]	; (dbc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    db98:	9b01      	ldr	r3, [sp, #4]
    db9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db9e:	f003 0301 	and.w	r3, r3, #1
    dba2:	2b00      	cmp	r3, #0
    dba4:	d106      	bne.n	dbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    dba6:	4a05      	ldr	r2, [pc, #20]	; (dbbc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    dba8:	9b01      	ldr	r3, [sp, #4]
    dbaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbae:	2b00      	cmp	r3, #0
    dbb0:	d100      	bne.n	dbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dbb2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dbb4:	bf00      	nop
    dbb6:	b003      	add	sp, #12
    dbb8:	f85d fb04 	ldr.w	pc, [sp], #4
    dbbc:	1fff9094 	.word	0x1fff9094
    dbc0:	1fff9090 	.word	0x1fff9090

0000dbc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    dbc4:	b500      	push	{lr}
    dbc6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbc8:	f7f3 f848 	bl	c5c <Sys_GetCoreID>
    dbcc:	4603      	mov	r3, r0
    dbce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    dbd0:	4a10      	ldr	r2, [pc, #64]	; (dc14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    dbd2:	9b01      	ldr	r3, [sp, #4]
    dbd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbd8:	2b00      	cmp	r3, #0
    dbda:	d10d      	bne.n	dbf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dbdc:	f7f2 ff6e 	bl	abc <Port_schm_read_msr>
    dbe0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dbe2:	9b00      	ldr	r3, [sp, #0]
    dbe4:	f003 0301 	and.w	r3, r3, #1
    dbe8:	2b00      	cmp	r3, #0
    dbea:	d100      	bne.n	dbee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dbec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    dbee:	490a      	ldr	r1, [pc, #40]	; (dc18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    dbf0:	9b01      	ldr	r3, [sp, #4]
    dbf2:	9a00      	ldr	r2, [sp, #0]
    dbf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    dbf8:	4a06      	ldr	r2, [pc, #24]	; (dc14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    dbfa:	9b01      	ldr	r3, [sp, #4]
    dbfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc00:	1c5a      	adds	r2, r3, #1
    dc02:	4904      	ldr	r1, [pc, #16]	; (dc14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    dc04:	9b01      	ldr	r3, [sp, #4]
    dc06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc0a:	bf00      	nop
    dc0c:	b003      	add	sp, #12
    dc0e:	f85d fb04 	ldr.w	pc, [sp], #4
    dc12:	bf00      	nop
    dc14:	1fff909c 	.word	0x1fff909c
    dc18:	1fff9098 	.word	0x1fff9098

0000dc1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    dc1c:	b500      	push	{lr}
    dc1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc20:	f7f3 f81c 	bl	c5c <Sys_GetCoreID>
    dc24:	4603      	mov	r3, r0
    dc26:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    dc28:	4a0d      	ldr	r2, [pc, #52]	; (dc60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    dc2a:	9b01      	ldr	r3, [sp, #4]
    dc2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc30:	1e5a      	subs	r2, r3, #1
    dc32:	490b      	ldr	r1, [pc, #44]	; (dc60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    dc34:	9b01      	ldr	r3, [sp, #4]
    dc36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    dc3a:	4a0a      	ldr	r2, [pc, #40]	; (dc64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    dc3c:	9b01      	ldr	r3, [sp, #4]
    dc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc42:	f003 0301 	and.w	r3, r3, #1
    dc46:	2b00      	cmp	r3, #0
    dc48:	d106      	bne.n	dc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    dc4a:	4a05      	ldr	r2, [pc, #20]	; (dc60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    dc4c:	9b01      	ldr	r3, [sp, #4]
    dc4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc52:	2b00      	cmp	r3, #0
    dc54:	d100      	bne.n	dc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc58:	bf00      	nop
    dc5a:	b003      	add	sp, #12
    dc5c:	f85d fb04 	ldr.w	pc, [sp], #4
    dc60:	1fff909c 	.word	0x1fff909c
    dc64:	1fff9098 	.word	0x1fff9098

0000dc68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    dc68:	b500      	push	{lr}
    dc6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc6c:	f7f2 fff6 	bl	c5c <Sys_GetCoreID>
    dc70:	4603      	mov	r3, r0
    dc72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    dc74:	4a10      	ldr	r2, [pc, #64]	; (dcb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    dc76:	9b01      	ldr	r3, [sp, #4]
    dc78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc7c:	2b00      	cmp	r3, #0
    dc7e:	d10d      	bne.n	dc9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc80:	f7f2 ff1c 	bl	abc <Port_schm_read_msr>
    dc84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc86:	9b00      	ldr	r3, [sp, #0]
    dc88:	f003 0301 	and.w	r3, r3, #1
    dc8c:	2b00      	cmp	r3, #0
    dc8e:	d100      	bne.n	dc92 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    dc92:	490a      	ldr	r1, [pc, #40]	; (dcbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    dc94:	9b01      	ldr	r3, [sp, #4]
    dc96:	9a00      	ldr	r2, [sp, #0]
    dc98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    dc9c:	4a06      	ldr	r2, [pc, #24]	; (dcb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    dc9e:	9b01      	ldr	r3, [sp, #4]
    dca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dca4:	1c5a      	adds	r2, r3, #1
    dca6:	4904      	ldr	r1, [pc, #16]	; (dcb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    dca8:	9b01      	ldr	r3, [sp, #4]
    dcaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dcae:	bf00      	nop
    dcb0:	b003      	add	sp, #12
    dcb2:	f85d fb04 	ldr.w	pc, [sp], #4
    dcb6:	bf00      	nop
    dcb8:	1fff90a4 	.word	0x1fff90a4
    dcbc:	1fff90a0 	.word	0x1fff90a0

0000dcc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    dcc0:	b500      	push	{lr}
    dcc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcc4:	f7f2 ffca 	bl	c5c <Sys_GetCoreID>
    dcc8:	4603      	mov	r3, r0
    dcca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    dccc:	4a0d      	ldr	r2, [pc, #52]	; (dd04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    dcce:	9b01      	ldr	r3, [sp, #4]
    dcd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcd4:	1e5a      	subs	r2, r3, #1
    dcd6:	490b      	ldr	r1, [pc, #44]	; (dd04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    dcd8:	9b01      	ldr	r3, [sp, #4]
    dcda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    dcde:	4a0a      	ldr	r2, [pc, #40]	; (dd08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    dce0:	9b01      	ldr	r3, [sp, #4]
    dce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dce6:	f003 0301 	and.w	r3, r3, #1
    dcea:	2b00      	cmp	r3, #0
    dcec:	d106      	bne.n	dcfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    dcee:	4a05      	ldr	r2, [pc, #20]	; (dd04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    dcf0:	9b01      	ldr	r3, [sp, #4]
    dcf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcf6:	2b00      	cmp	r3, #0
    dcf8:	d100      	bne.n	dcfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dcfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dcfc:	bf00      	nop
    dcfe:	b003      	add	sp, #12
    dd00:	f85d fb04 	ldr.w	pc, [sp], #4
    dd04:	1fff90a4 	.word	0x1fff90a4
    dd08:	1fff90a0 	.word	0x1fff90a0

0000dd0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    dd0c:	b500      	push	{lr}
    dd0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd10:	f7f2 ffa4 	bl	c5c <Sys_GetCoreID>
    dd14:	4603      	mov	r3, r0
    dd16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    dd18:	4a10      	ldr	r2, [pc, #64]	; (dd5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    dd1a:	9b01      	ldr	r3, [sp, #4]
    dd1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd20:	2b00      	cmp	r3, #0
    dd22:	d10d      	bne.n	dd40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd24:	f7f2 feca 	bl	abc <Port_schm_read_msr>
    dd28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd2a:	9b00      	ldr	r3, [sp, #0]
    dd2c:	f003 0301 	and.w	r3, r3, #1
    dd30:	2b00      	cmp	r3, #0
    dd32:	d100      	bne.n	dd36 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    dd36:	490a      	ldr	r1, [pc, #40]	; (dd60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    dd38:	9b01      	ldr	r3, [sp, #4]
    dd3a:	9a00      	ldr	r2, [sp, #0]
    dd3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    dd40:	4a06      	ldr	r2, [pc, #24]	; (dd5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    dd42:	9b01      	ldr	r3, [sp, #4]
    dd44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd48:	1c5a      	adds	r2, r3, #1
    dd4a:	4904      	ldr	r1, [pc, #16]	; (dd5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    dd4c:	9b01      	ldr	r3, [sp, #4]
    dd4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd52:	bf00      	nop
    dd54:	b003      	add	sp, #12
    dd56:	f85d fb04 	ldr.w	pc, [sp], #4
    dd5a:	bf00      	nop
    dd5c:	1fff90ac 	.word	0x1fff90ac
    dd60:	1fff90a8 	.word	0x1fff90a8

0000dd64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    dd64:	b500      	push	{lr}
    dd66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd68:	f7f2 ff78 	bl	c5c <Sys_GetCoreID>
    dd6c:	4603      	mov	r3, r0
    dd6e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    dd70:	4a0d      	ldr	r2, [pc, #52]	; (dda8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    dd72:	9b01      	ldr	r3, [sp, #4]
    dd74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd78:	1e5a      	subs	r2, r3, #1
    dd7a:	490b      	ldr	r1, [pc, #44]	; (dda8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    dd7c:	9b01      	ldr	r3, [sp, #4]
    dd7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    dd82:	4a0a      	ldr	r2, [pc, #40]	; (ddac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    dd84:	9b01      	ldr	r3, [sp, #4]
    dd86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd8a:	f003 0301 	and.w	r3, r3, #1
    dd8e:	2b00      	cmp	r3, #0
    dd90:	d106      	bne.n	dda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    dd92:	4a05      	ldr	r2, [pc, #20]	; (dda8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    dd94:	9b01      	ldr	r3, [sp, #4]
    dd96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd9a:	2b00      	cmp	r3, #0
    dd9c:	d100      	bne.n	dda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dda0:	bf00      	nop
    dda2:	b003      	add	sp, #12
    dda4:	f85d fb04 	ldr.w	pc, [sp], #4
    dda8:	1fff90ac 	.word	0x1fff90ac
    ddac:	1fff90a8 	.word	0x1fff90a8

0000ddb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    ddb0:	b500      	push	{lr}
    ddb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddb4:	f7f2 ff52 	bl	c5c <Sys_GetCoreID>
    ddb8:	4603      	mov	r3, r0
    ddba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    ddbc:	4a10      	ldr	r2, [pc, #64]	; (de00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    ddbe:	9b01      	ldr	r3, [sp, #4]
    ddc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddc4:	2b00      	cmp	r3, #0
    ddc6:	d10d      	bne.n	dde4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ddc8:	f7f2 fe78 	bl	abc <Port_schm_read_msr>
    ddcc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ddce:	9b00      	ldr	r3, [sp, #0]
    ddd0:	f003 0301 	and.w	r3, r3, #1
    ddd4:	2b00      	cmp	r3, #0
    ddd6:	d100      	bne.n	ddda <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ddd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    ddda:	490a      	ldr	r1, [pc, #40]	; (de04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    dddc:	9b01      	ldr	r3, [sp, #4]
    ddde:	9a00      	ldr	r2, [sp, #0]
    dde0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    dde4:	4a06      	ldr	r2, [pc, #24]	; (de00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    dde6:	9b01      	ldr	r3, [sp, #4]
    dde8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddec:	1c5a      	adds	r2, r3, #1
    ddee:	4904      	ldr	r1, [pc, #16]	; (de00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    ddf0:	9b01      	ldr	r3, [sp, #4]
    ddf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ddf6:	bf00      	nop
    ddf8:	b003      	add	sp, #12
    ddfa:	f85d fb04 	ldr.w	pc, [sp], #4
    ddfe:	bf00      	nop
    de00:	1fff90b4 	.word	0x1fff90b4
    de04:	1fff90b0 	.word	0x1fff90b0

0000de08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    de08:	b500      	push	{lr}
    de0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de0c:	f7f2 ff26 	bl	c5c <Sys_GetCoreID>
    de10:	4603      	mov	r3, r0
    de12:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    de14:	4a0d      	ldr	r2, [pc, #52]	; (de4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    de16:	9b01      	ldr	r3, [sp, #4]
    de18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de1c:	1e5a      	subs	r2, r3, #1
    de1e:	490b      	ldr	r1, [pc, #44]	; (de4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    de20:	9b01      	ldr	r3, [sp, #4]
    de22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    de26:	4a0a      	ldr	r2, [pc, #40]	; (de50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    de28:	9b01      	ldr	r3, [sp, #4]
    de2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de2e:	f003 0301 	and.w	r3, r3, #1
    de32:	2b00      	cmp	r3, #0
    de34:	d106      	bne.n	de44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    de36:	4a05      	ldr	r2, [pc, #20]	; (de4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    de38:	9b01      	ldr	r3, [sp, #4]
    de3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de3e:	2b00      	cmp	r3, #0
    de40:	d100      	bne.n	de44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de44:	bf00      	nop
    de46:	b003      	add	sp, #12
    de48:	f85d fb04 	ldr.w	pc, [sp], #4
    de4c:	1fff90b4 	.word	0x1fff90b4
    de50:	1fff90b0 	.word	0x1fff90b0

0000de54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    de54:	b500      	push	{lr}
    de56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de58:	f7f2 ff00 	bl	c5c <Sys_GetCoreID>
    de5c:	4603      	mov	r3, r0
    de5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    de60:	4a10      	ldr	r2, [pc, #64]	; (dea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    de62:	9b01      	ldr	r3, [sp, #4]
    de64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de68:	2b00      	cmp	r3, #0
    de6a:	d10d      	bne.n	de88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de6c:	f7f2 fe26 	bl	abc <Port_schm_read_msr>
    de70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de72:	9b00      	ldr	r3, [sp, #0]
    de74:	f003 0301 	and.w	r3, r3, #1
    de78:	2b00      	cmp	r3, #0
    de7a:	d100      	bne.n	de7e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    de7e:	490a      	ldr	r1, [pc, #40]	; (dea8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    de80:	9b01      	ldr	r3, [sp, #4]
    de82:	9a00      	ldr	r2, [sp, #0]
    de84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    de88:	4a06      	ldr	r2, [pc, #24]	; (dea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    de8a:	9b01      	ldr	r3, [sp, #4]
    de8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de90:	1c5a      	adds	r2, r3, #1
    de92:	4904      	ldr	r1, [pc, #16]	; (dea4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    de94:	9b01      	ldr	r3, [sp, #4]
    de96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de9a:	bf00      	nop
    de9c:	b003      	add	sp, #12
    de9e:	f85d fb04 	ldr.w	pc, [sp], #4
    dea2:	bf00      	nop
    dea4:	1fff90bc 	.word	0x1fff90bc
    dea8:	1fff90b8 	.word	0x1fff90b8

0000deac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    deac:	b500      	push	{lr}
    deae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    deb0:	f7f2 fed4 	bl	c5c <Sys_GetCoreID>
    deb4:	4603      	mov	r3, r0
    deb6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    deb8:	4a0d      	ldr	r2, [pc, #52]	; (def0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    deba:	9b01      	ldr	r3, [sp, #4]
    debc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dec0:	1e5a      	subs	r2, r3, #1
    dec2:	490b      	ldr	r1, [pc, #44]	; (def0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    dec4:	9b01      	ldr	r3, [sp, #4]
    dec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    deca:	4a0a      	ldr	r2, [pc, #40]	; (def4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    decc:	9b01      	ldr	r3, [sp, #4]
    dece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ded2:	f003 0301 	and.w	r3, r3, #1
    ded6:	2b00      	cmp	r3, #0
    ded8:	d106      	bne.n	dee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    deda:	4a05      	ldr	r2, [pc, #20]	; (def0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    dedc:	9b01      	ldr	r3, [sp, #4]
    dede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dee2:	2b00      	cmp	r3, #0
    dee4:	d100      	bne.n	dee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dee6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dee8:	bf00      	nop
    deea:	b003      	add	sp, #12
    deec:	f85d fb04 	ldr.w	pc, [sp], #4
    def0:	1fff90bc 	.word	0x1fff90bc
    def4:	1fff90b8 	.word	0x1fff90b8

0000def8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    def8:	b500      	push	{lr}
    defa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    defc:	f7f2 feae 	bl	c5c <Sys_GetCoreID>
    df00:	4603      	mov	r3, r0
    df02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    df04:	4a10      	ldr	r2, [pc, #64]	; (df48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    df06:	9b01      	ldr	r3, [sp, #4]
    df08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df0c:	2b00      	cmp	r3, #0
    df0e:	d10d      	bne.n	df2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df10:	f7f2 fdd4 	bl	abc <Port_schm_read_msr>
    df14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df16:	9b00      	ldr	r3, [sp, #0]
    df18:	f003 0301 	and.w	r3, r3, #1
    df1c:	2b00      	cmp	r3, #0
    df1e:	d100      	bne.n	df22 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    df22:	490a      	ldr	r1, [pc, #40]	; (df4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    df24:	9b01      	ldr	r3, [sp, #4]
    df26:	9a00      	ldr	r2, [sp, #0]
    df28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    df2c:	4a06      	ldr	r2, [pc, #24]	; (df48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    df2e:	9b01      	ldr	r3, [sp, #4]
    df30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df34:	1c5a      	adds	r2, r3, #1
    df36:	4904      	ldr	r1, [pc, #16]	; (df48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    df38:	9b01      	ldr	r3, [sp, #4]
    df3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df3e:	bf00      	nop
    df40:	b003      	add	sp, #12
    df42:	f85d fb04 	ldr.w	pc, [sp], #4
    df46:	bf00      	nop
    df48:	1fff90c4 	.word	0x1fff90c4
    df4c:	1fff90c0 	.word	0x1fff90c0

0000df50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    df50:	b500      	push	{lr}
    df52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df54:	f7f2 fe82 	bl	c5c <Sys_GetCoreID>
    df58:	4603      	mov	r3, r0
    df5a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    df5c:	4a0d      	ldr	r2, [pc, #52]	; (df94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    df5e:	9b01      	ldr	r3, [sp, #4]
    df60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df64:	1e5a      	subs	r2, r3, #1
    df66:	490b      	ldr	r1, [pc, #44]	; (df94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    df68:	9b01      	ldr	r3, [sp, #4]
    df6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    df6e:	4a0a      	ldr	r2, [pc, #40]	; (df98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    df70:	9b01      	ldr	r3, [sp, #4]
    df72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df76:	f003 0301 	and.w	r3, r3, #1
    df7a:	2b00      	cmp	r3, #0
    df7c:	d106      	bne.n	df8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    df7e:	4a05      	ldr	r2, [pc, #20]	; (df94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    df80:	9b01      	ldr	r3, [sp, #4]
    df82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df86:	2b00      	cmp	r3, #0
    df88:	d100      	bne.n	df8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df8c:	bf00      	nop
    df8e:	b003      	add	sp, #12
    df90:	f85d fb04 	ldr.w	pc, [sp], #4
    df94:	1fff90c4 	.word	0x1fff90c4
    df98:	1fff90c0 	.word	0x1fff90c0

0000df9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    df9c:	b500      	push	{lr}
    df9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfa0:	f7f2 fe5c 	bl	c5c <Sys_GetCoreID>
    dfa4:	4603      	mov	r3, r0
    dfa6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    dfa8:	4a10      	ldr	r2, [pc, #64]	; (dfec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    dfaa:	9b01      	ldr	r3, [sp, #4]
    dfac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfb0:	2b00      	cmp	r3, #0
    dfb2:	d10d      	bne.n	dfd0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dfb4:	f7f2 fd82 	bl	abc <Port_schm_read_msr>
    dfb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dfba:	9b00      	ldr	r3, [sp, #0]
    dfbc:	f003 0301 	and.w	r3, r3, #1
    dfc0:	2b00      	cmp	r3, #0
    dfc2:	d100      	bne.n	dfc6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dfc4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    dfc6:	490a      	ldr	r1, [pc, #40]	; (dff0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    dfc8:	9b01      	ldr	r3, [sp, #4]
    dfca:	9a00      	ldr	r2, [sp, #0]
    dfcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    dfd0:	4a06      	ldr	r2, [pc, #24]	; (dfec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    dfd2:	9b01      	ldr	r3, [sp, #4]
    dfd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfd8:	1c5a      	adds	r2, r3, #1
    dfda:	4904      	ldr	r1, [pc, #16]	; (dfec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    dfdc:	9b01      	ldr	r3, [sp, #4]
    dfde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dfe2:	bf00      	nop
    dfe4:	b003      	add	sp, #12
    dfe6:	f85d fb04 	ldr.w	pc, [sp], #4
    dfea:	bf00      	nop
    dfec:	1fff90cc 	.word	0x1fff90cc
    dff0:	1fff90c8 	.word	0x1fff90c8

0000dff4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    dff4:	b500      	push	{lr}
    dff6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dff8:	f7f2 fe30 	bl	c5c <Sys_GetCoreID>
    dffc:	4603      	mov	r3, r0
    dffe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    e000:	4a0d      	ldr	r2, [pc, #52]	; (e038 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    e002:	9b01      	ldr	r3, [sp, #4]
    e004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e008:	1e5a      	subs	r2, r3, #1
    e00a:	490b      	ldr	r1, [pc, #44]	; (e038 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    e00c:	9b01      	ldr	r3, [sp, #4]
    e00e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    e012:	4a0a      	ldr	r2, [pc, #40]	; (e03c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    e014:	9b01      	ldr	r3, [sp, #4]
    e016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e01a:	f003 0301 	and.w	r3, r3, #1
    e01e:	2b00      	cmp	r3, #0
    e020:	d106      	bne.n	e030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    e022:	4a05      	ldr	r2, [pc, #20]	; (e038 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    e024:	9b01      	ldr	r3, [sp, #4]
    e026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e02a:	2b00      	cmp	r3, #0
    e02c:	d100      	bne.n	e030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e02e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e030:	bf00      	nop
    e032:	b003      	add	sp, #12
    e034:	f85d fb04 	ldr.w	pc, [sp], #4
    e038:	1fff90cc 	.word	0x1fff90cc
    e03c:	1fff90c8 	.word	0x1fff90c8

0000e040 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    e040:	b500      	push	{lr}
    e042:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e044:	f7f2 fe0a 	bl	c5c <Sys_GetCoreID>
    e048:	4603      	mov	r3, r0
    e04a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    e04c:	4a10      	ldr	r2, [pc, #64]	; (e090 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    e04e:	9b01      	ldr	r3, [sp, #4]
    e050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e054:	2b00      	cmp	r3, #0
    e056:	d10d      	bne.n	e074 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e058:	f7f2 fd30 	bl	abc <Port_schm_read_msr>
    e05c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e05e:	9b00      	ldr	r3, [sp, #0]
    e060:	f003 0301 	and.w	r3, r3, #1
    e064:	2b00      	cmp	r3, #0
    e066:	d100      	bne.n	e06a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e068:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    e06a:	490a      	ldr	r1, [pc, #40]	; (e094 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    e06c:	9b01      	ldr	r3, [sp, #4]
    e06e:	9a00      	ldr	r2, [sp, #0]
    e070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    e074:	4a06      	ldr	r2, [pc, #24]	; (e090 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    e076:	9b01      	ldr	r3, [sp, #4]
    e078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e07c:	1c5a      	adds	r2, r3, #1
    e07e:	4904      	ldr	r1, [pc, #16]	; (e090 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    e080:	9b01      	ldr	r3, [sp, #4]
    e082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e086:	bf00      	nop
    e088:	b003      	add	sp, #12
    e08a:	f85d fb04 	ldr.w	pc, [sp], #4
    e08e:	bf00      	nop
    e090:	1fff90d4 	.word	0x1fff90d4
    e094:	1fff90d0 	.word	0x1fff90d0

0000e098 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    e098:	b500      	push	{lr}
    e09a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e09c:	f7f2 fdde 	bl	c5c <Sys_GetCoreID>
    e0a0:	4603      	mov	r3, r0
    e0a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    e0a4:	4a0d      	ldr	r2, [pc, #52]	; (e0dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    e0a6:	9b01      	ldr	r3, [sp, #4]
    e0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0ac:	1e5a      	subs	r2, r3, #1
    e0ae:	490b      	ldr	r1, [pc, #44]	; (e0dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    e0b0:	9b01      	ldr	r3, [sp, #4]
    e0b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    e0b6:	4a0a      	ldr	r2, [pc, #40]	; (e0e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    e0b8:	9b01      	ldr	r3, [sp, #4]
    e0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0be:	f003 0301 	and.w	r3, r3, #1
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	d106      	bne.n	e0d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    e0c6:	4a05      	ldr	r2, [pc, #20]	; (e0dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    e0c8:	9b01      	ldr	r3, [sp, #4]
    e0ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0ce:	2b00      	cmp	r3, #0
    e0d0:	d100      	bne.n	e0d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e0d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e0d4:	bf00      	nop
    e0d6:	b003      	add	sp, #12
    e0d8:	f85d fb04 	ldr.w	pc, [sp], #4
    e0dc:	1fff90d4 	.word	0x1fff90d4
    e0e0:	1fff90d0 	.word	0x1fff90d0

0000e0e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    e0e4:	b500      	push	{lr}
    e0e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0e8:	f7f2 fdb8 	bl	c5c <Sys_GetCoreID>
    e0ec:	4603      	mov	r3, r0
    e0ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    e0f0:	4a10      	ldr	r2, [pc, #64]	; (e134 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    e0f2:	9b01      	ldr	r3, [sp, #4]
    e0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0f8:	2b00      	cmp	r3, #0
    e0fa:	d10d      	bne.n	e118 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e0fc:	f7f2 fcde 	bl	abc <Port_schm_read_msr>
    e100:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e102:	9b00      	ldr	r3, [sp, #0]
    e104:	f003 0301 	and.w	r3, r3, #1
    e108:	2b00      	cmp	r3, #0
    e10a:	d100      	bne.n	e10e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e10c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    e10e:	490a      	ldr	r1, [pc, #40]	; (e138 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    e110:	9b01      	ldr	r3, [sp, #4]
    e112:	9a00      	ldr	r2, [sp, #0]
    e114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    e118:	4a06      	ldr	r2, [pc, #24]	; (e134 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    e11a:	9b01      	ldr	r3, [sp, #4]
    e11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e120:	1c5a      	adds	r2, r3, #1
    e122:	4904      	ldr	r1, [pc, #16]	; (e134 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    e124:	9b01      	ldr	r3, [sp, #4]
    e126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e12a:	bf00      	nop
    e12c:	b003      	add	sp, #12
    e12e:	f85d fb04 	ldr.w	pc, [sp], #4
    e132:	bf00      	nop
    e134:	1fff90dc 	.word	0x1fff90dc
    e138:	1fff90d8 	.word	0x1fff90d8

0000e13c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    e13c:	b500      	push	{lr}
    e13e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e140:	f7f2 fd8c 	bl	c5c <Sys_GetCoreID>
    e144:	4603      	mov	r3, r0
    e146:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    e148:	4a0d      	ldr	r2, [pc, #52]	; (e180 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    e14a:	9b01      	ldr	r3, [sp, #4]
    e14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e150:	1e5a      	subs	r2, r3, #1
    e152:	490b      	ldr	r1, [pc, #44]	; (e180 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    e154:	9b01      	ldr	r3, [sp, #4]
    e156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    e15a:	4a0a      	ldr	r2, [pc, #40]	; (e184 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    e15c:	9b01      	ldr	r3, [sp, #4]
    e15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e162:	f003 0301 	and.w	r3, r3, #1
    e166:	2b00      	cmp	r3, #0
    e168:	d106      	bne.n	e178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    e16a:	4a05      	ldr	r2, [pc, #20]	; (e180 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    e16c:	9b01      	ldr	r3, [sp, #4]
    e16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e172:	2b00      	cmp	r3, #0
    e174:	d100      	bne.n	e178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e176:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e178:	bf00      	nop
    e17a:	b003      	add	sp, #12
    e17c:	f85d fb04 	ldr.w	pc, [sp], #4
    e180:	1fff90dc 	.word	0x1fff90dc
    e184:	1fff90d8 	.word	0x1fff90d8

0000e188 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    e188:	b500      	push	{lr}
    e18a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e18c:	f7f2 fd66 	bl	c5c <Sys_GetCoreID>
    e190:	4603      	mov	r3, r0
    e192:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    e194:	4a10      	ldr	r2, [pc, #64]	; (e1d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    e196:	9b01      	ldr	r3, [sp, #4]
    e198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e19c:	2b00      	cmp	r3, #0
    e19e:	d10d      	bne.n	e1bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e1a0:	f7f2 fc8c 	bl	abc <Port_schm_read_msr>
    e1a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e1a6:	9b00      	ldr	r3, [sp, #0]
    e1a8:	f003 0301 	and.w	r3, r3, #1
    e1ac:	2b00      	cmp	r3, #0
    e1ae:	d100      	bne.n	e1b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e1b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    e1b2:	490a      	ldr	r1, [pc, #40]	; (e1dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    e1b4:	9b01      	ldr	r3, [sp, #4]
    e1b6:	9a00      	ldr	r2, [sp, #0]
    e1b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    e1bc:	4a06      	ldr	r2, [pc, #24]	; (e1d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    e1be:	9b01      	ldr	r3, [sp, #4]
    e1c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1c4:	1c5a      	adds	r2, r3, #1
    e1c6:	4904      	ldr	r1, [pc, #16]	; (e1d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    e1c8:	9b01      	ldr	r3, [sp, #4]
    e1ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e1ce:	bf00      	nop
    e1d0:	b003      	add	sp, #12
    e1d2:	f85d fb04 	ldr.w	pc, [sp], #4
    e1d6:	bf00      	nop
    e1d8:	1fff90e4 	.word	0x1fff90e4
    e1dc:	1fff90e0 	.word	0x1fff90e0

0000e1e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    e1e0:	b500      	push	{lr}
    e1e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1e4:	f7f2 fd3a 	bl	c5c <Sys_GetCoreID>
    e1e8:	4603      	mov	r3, r0
    e1ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    e1ec:	4a0d      	ldr	r2, [pc, #52]	; (e224 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    e1ee:	9b01      	ldr	r3, [sp, #4]
    e1f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1f4:	1e5a      	subs	r2, r3, #1
    e1f6:	490b      	ldr	r1, [pc, #44]	; (e224 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    e1f8:	9b01      	ldr	r3, [sp, #4]
    e1fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    e1fe:	4a0a      	ldr	r2, [pc, #40]	; (e228 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    e200:	9b01      	ldr	r3, [sp, #4]
    e202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e206:	f003 0301 	and.w	r3, r3, #1
    e20a:	2b00      	cmp	r3, #0
    e20c:	d106      	bne.n	e21c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    e20e:	4a05      	ldr	r2, [pc, #20]	; (e224 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    e210:	9b01      	ldr	r3, [sp, #4]
    e212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e216:	2b00      	cmp	r3, #0
    e218:	d100      	bne.n	e21c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e21a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e21c:	bf00      	nop
    e21e:	b003      	add	sp, #12
    e220:	f85d fb04 	ldr.w	pc, [sp], #4
    e224:	1fff90e4 	.word	0x1fff90e4
    e228:	1fff90e0 	.word	0x1fff90e0

0000e22c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    e22c:	b500      	push	{lr}
    e22e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e230:	f7f2 fd14 	bl	c5c <Sys_GetCoreID>
    e234:	4603      	mov	r3, r0
    e236:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    e238:	4a10      	ldr	r2, [pc, #64]	; (e27c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    e23a:	9b01      	ldr	r3, [sp, #4]
    e23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e240:	2b00      	cmp	r3, #0
    e242:	d10d      	bne.n	e260 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e244:	f7f2 fc3a 	bl	abc <Port_schm_read_msr>
    e248:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e24a:	9b00      	ldr	r3, [sp, #0]
    e24c:	f003 0301 	and.w	r3, r3, #1
    e250:	2b00      	cmp	r3, #0
    e252:	d100      	bne.n	e256 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e254:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    e256:	490a      	ldr	r1, [pc, #40]	; (e280 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    e258:	9b01      	ldr	r3, [sp, #4]
    e25a:	9a00      	ldr	r2, [sp, #0]
    e25c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    e260:	4a06      	ldr	r2, [pc, #24]	; (e27c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    e262:	9b01      	ldr	r3, [sp, #4]
    e264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e268:	1c5a      	adds	r2, r3, #1
    e26a:	4904      	ldr	r1, [pc, #16]	; (e27c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    e26c:	9b01      	ldr	r3, [sp, #4]
    e26e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e272:	bf00      	nop
    e274:	b003      	add	sp, #12
    e276:	f85d fb04 	ldr.w	pc, [sp], #4
    e27a:	bf00      	nop
    e27c:	1fff90ec 	.word	0x1fff90ec
    e280:	1fff90e8 	.word	0x1fff90e8

0000e284 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    e284:	b500      	push	{lr}
    e286:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e288:	f7f2 fce8 	bl	c5c <Sys_GetCoreID>
    e28c:	4603      	mov	r3, r0
    e28e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    e290:	4a0d      	ldr	r2, [pc, #52]	; (e2c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    e292:	9b01      	ldr	r3, [sp, #4]
    e294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e298:	1e5a      	subs	r2, r3, #1
    e29a:	490b      	ldr	r1, [pc, #44]	; (e2c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    e29c:	9b01      	ldr	r3, [sp, #4]
    e29e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    e2a2:	4a0a      	ldr	r2, [pc, #40]	; (e2cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    e2a4:	9b01      	ldr	r3, [sp, #4]
    e2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2aa:	f003 0301 	and.w	r3, r3, #1
    e2ae:	2b00      	cmp	r3, #0
    e2b0:	d106      	bne.n	e2c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    e2b2:	4a05      	ldr	r2, [pc, #20]	; (e2c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    e2b4:	9b01      	ldr	r3, [sp, #4]
    e2b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2ba:	2b00      	cmp	r3, #0
    e2bc:	d100      	bne.n	e2c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e2be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e2c0:	bf00      	nop
    e2c2:	b003      	add	sp, #12
    e2c4:	f85d fb04 	ldr.w	pc, [sp], #4
    e2c8:	1fff90ec 	.word	0x1fff90ec
    e2cc:	1fff90e8 	.word	0x1fff90e8

0000e2d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    e2d0:	b500      	push	{lr}
    e2d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2d4:	f7f2 fcc2 	bl	c5c <Sys_GetCoreID>
    e2d8:	4603      	mov	r3, r0
    e2da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    e2dc:	4a10      	ldr	r2, [pc, #64]	; (e320 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    e2de:	9b01      	ldr	r3, [sp, #4]
    e2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	d10d      	bne.n	e304 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e2e8:	f7f2 fbe8 	bl	abc <Port_schm_read_msr>
    e2ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e2ee:	9b00      	ldr	r3, [sp, #0]
    e2f0:	f003 0301 	and.w	r3, r3, #1
    e2f4:	2b00      	cmp	r3, #0
    e2f6:	d100      	bne.n	e2fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e2f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    e2fa:	490a      	ldr	r1, [pc, #40]	; (e324 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    e2fc:	9b01      	ldr	r3, [sp, #4]
    e2fe:	9a00      	ldr	r2, [sp, #0]
    e300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    e304:	4a06      	ldr	r2, [pc, #24]	; (e320 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    e306:	9b01      	ldr	r3, [sp, #4]
    e308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e30c:	1c5a      	adds	r2, r3, #1
    e30e:	4904      	ldr	r1, [pc, #16]	; (e320 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    e310:	9b01      	ldr	r3, [sp, #4]
    e312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e316:	bf00      	nop
    e318:	b003      	add	sp, #12
    e31a:	f85d fb04 	ldr.w	pc, [sp], #4
    e31e:	bf00      	nop
    e320:	1fff90f4 	.word	0x1fff90f4
    e324:	1fff90f0 	.word	0x1fff90f0

0000e328 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    e328:	b500      	push	{lr}
    e32a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e32c:	f7f2 fc96 	bl	c5c <Sys_GetCoreID>
    e330:	4603      	mov	r3, r0
    e332:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    e334:	4a0d      	ldr	r2, [pc, #52]	; (e36c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    e336:	9b01      	ldr	r3, [sp, #4]
    e338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e33c:	1e5a      	subs	r2, r3, #1
    e33e:	490b      	ldr	r1, [pc, #44]	; (e36c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    e340:	9b01      	ldr	r3, [sp, #4]
    e342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    e346:	4a0a      	ldr	r2, [pc, #40]	; (e370 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    e348:	9b01      	ldr	r3, [sp, #4]
    e34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e34e:	f003 0301 	and.w	r3, r3, #1
    e352:	2b00      	cmp	r3, #0
    e354:	d106      	bne.n	e364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    e356:	4a05      	ldr	r2, [pc, #20]	; (e36c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    e358:	9b01      	ldr	r3, [sp, #4]
    e35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e35e:	2b00      	cmp	r3, #0
    e360:	d100      	bne.n	e364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e362:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e364:	bf00      	nop
    e366:	b003      	add	sp, #12
    e368:	f85d fb04 	ldr.w	pc, [sp], #4
    e36c:	1fff90f4 	.word	0x1fff90f4
    e370:	1fff90f0 	.word	0x1fff90f0

0000e374 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    e374:	b500      	push	{lr}
    e376:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e378:	f7f2 fc70 	bl	c5c <Sys_GetCoreID>
    e37c:	4603      	mov	r3, r0
    e37e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    e380:	4a10      	ldr	r2, [pc, #64]	; (e3c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    e382:	9b01      	ldr	r3, [sp, #4]
    e384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e388:	2b00      	cmp	r3, #0
    e38a:	d10d      	bne.n	e3a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e38c:	f7f2 fb96 	bl	abc <Port_schm_read_msr>
    e390:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e392:	9b00      	ldr	r3, [sp, #0]
    e394:	f003 0301 	and.w	r3, r3, #1
    e398:	2b00      	cmp	r3, #0
    e39a:	d100      	bne.n	e39e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e39c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    e39e:	490a      	ldr	r1, [pc, #40]	; (e3c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    e3a0:	9b01      	ldr	r3, [sp, #4]
    e3a2:	9a00      	ldr	r2, [sp, #0]
    e3a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    e3a8:	4a06      	ldr	r2, [pc, #24]	; (e3c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    e3aa:	9b01      	ldr	r3, [sp, #4]
    e3ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3b0:	1c5a      	adds	r2, r3, #1
    e3b2:	4904      	ldr	r1, [pc, #16]	; (e3c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    e3b4:	9b01      	ldr	r3, [sp, #4]
    e3b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e3ba:	bf00      	nop
    e3bc:	b003      	add	sp, #12
    e3be:	f85d fb04 	ldr.w	pc, [sp], #4
    e3c2:	bf00      	nop
    e3c4:	1fff90fc 	.word	0x1fff90fc
    e3c8:	1fff90f8 	.word	0x1fff90f8

0000e3cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    e3cc:	b500      	push	{lr}
    e3ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3d0:	f7f2 fc44 	bl	c5c <Sys_GetCoreID>
    e3d4:	4603      	mov	r3, r0
    e3d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    e3d8:	4a0d      	ldr	r2, [pc, #52]	; (e410 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    e3da:	9b01      	ldr	r3, [sp, #4]
    e3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3e0:	1e5a      	subs	r2, r3, #1
    e3e2:	490b      	ldr	r1, [pc, #44]	; (e410 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    e3e4:	9b01      	ldr	r3, [sp, #4]
    e3e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    e3ea:	4a0a      	ldr	r2, [pc, #40]	; (e414 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    e3ec:	9b01      	ldr	r3, [sp, #4]
    e3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3f2:	f003 0301 	and.w	r3, r3, #1
    e3f6:	2b00      	cmp	r3, #0
    e3f8:	d106      	bne.n	e408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    e3fa:	4a05      	ldr	r2, [pc, #20]	; (e410 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    e3fc:	9b01      	ldr	r3, [sp, #4]
    e3fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e402:	2b00      	cmp	r3, #0
    e404:	d100      	bne.n	e408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e406:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e408:	bf00      	nop
    e40a:	b003      	add	sp, #12
    e40c:	f85d fb04 	ldr.w	pc, [sp], #4
    e410:	1fff90fc 	.word	0x1fff90fc
    e414:	1fff90f8 	.word	0x1fff90f8

0000e418 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    e418:	b500      	push	{lr}
    e41a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e41c:	f7f2 fc1e 	bl	c5c <Sys_GetCoreID>
    e420:	4603      	mov	r3, r0
    e422:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    e424:	4a10      	ldr	r2, [pc, #64]	; (e468 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    e426:	9b01      	ldr	r3, [sp, #4]
    e428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e42c:	2b00      	cmp	r3, #0
    e42e:	d10d      	bne.n	e44c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e430:	f7f2 fb44 	bl	abc <Port_schm_read_msr>
    e434:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e436:	9b00      	ldr	r3, [sp, #0]
    e438:	f003 0301 	and.w	r3, r3, #1
    e43c:	2b00      	cmp	r3, #0
    e43e:	d100      	bne.n	e442 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e440:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    e442:	490a      	ldr	r1, [pc, #40]	; (e46c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    e444:	9b01      	ldr	r3, [sp, #4]
    e446:	9a00      	ldr	r2, [sp, #0]
    e448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    e44c:	4a06      	ldr	r2, [pc, #24]	; (e468 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    e44e:	9b01      	ldr	r3, [sp, #4]
    e450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e454:	1c5a      	adds	r2, r3, #1
    e456:	4904      	ldr	r1, [pc, #16]	; (e468 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    e458:	9b01      	ldr	r3, [sp, #4]
    e45a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e45e:	bf00      	nop
    e460:	b003      	add	sp, #12
    e462:	f85d fb04 	ldr.w	pc, [sp], #4
    e466:	bf00      	nop
    e468:	1fff9104 	.word	0x1fff9104
    e46c:	1fff9100 	.word	0x1fff9100

0000e470 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    e470:	b500      	push	{lr}
    e472:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e474:	f7f2 fbf2 	bl	c5c <Sys_GetCoreID>
    e478:	4603      	mov	r3, r0
    e47a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    e47c:	4a0d      	ldr	r2, [pc, #52]	; (e4b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    e47e:	9b01      	ldr	r3, [sp, #4]
    e480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e484:	1e5a      	subs	r2, r3, #1
    e486:	490b      	ldr	r1, [pc, #44]	; (e4b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    e488:	9b01      	ldr	r3, [sp, #4]
    e48a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    e48e:	4a0a      	ldr	r2, [pc, #40]	; (e4b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    e490:	9b01      	ldr	r3, [sp, #4]
    e492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e496:	f003 0301 	and.w	r3, r3, #1
    e49a:	2b00      	cmp	r3, #0
    e49c:	d106      	bne.n	e4ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    e49e:	4a05      	ldr	r2, [pc, #20]	; (e4b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    e4a0:	9b01      	ldr	r3, [sp, #4]
    e4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4a6:	2b00      	cmp	r3, #0
    e4a8:	d100      	bne.n	e4ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e4aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e4ac:	bf00      	nop
    e4ae:	b003      	add	sp, #12
    e4b0:	f85d fb04 	ldr.w	pc, [sp], #4
    e4b4:	1fff9104 	.word	0x1fff9104
    e4b8:	1fff9100 	.word	0x1fff9100

0000e4bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    e4bc:	b500      	push	{lr}
    e4be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4c0:	f7f2 fbcc 	bl	c5c <Sys_GetCoreID>
    e4c4:	4603      	mov	r3, r0
    e4c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    e4c8:	4a10      	ldr	r2, [pc, #64]	; (e50c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    e4ca:	9b01      	ldr	r3, [sp, #4]
    e4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4d0:	2b00      	cmp	r3, #0
    e4d2:	d10d      	bne.n	e4f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e4d4:	f7f2 faf2 	bl	abc <Port_schm_read_msr>
    e4d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e4da:	9b00      	ldr	r3, [sp, #0]
    e4dc:	f003 0301 	and.w	r3, r3, #1
    e4e0:	2b00      	cmp	r3, #0
    e4e2:	d100      	bne.n	e4e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e4e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    e4e6:	490a      	ldr	r1, [pc, #40]	; (e510 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    e4e8:	9b01      	ldr	r3, [sp, #4]
    e4ea:	9a00      	ldr	r2, [sp, #0]
    e4ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    e4f0:	4a06      	ldr	r2, [pc, #24]	; (e50c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    e4f2:	9b01      	ldr	r3, [sp, #4]
    e4f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4f8:	1c5a      	adds	r2, r3, #1
    e4fa:	4904      	ldr	r1, [pc, #16]	; (e50c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    e4fc:	9b01      	ldr	r3, [sp, #4]
    e4fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e502:	bf00      	nop
    e504:	b003      	add	sp, #12
    e506:	f85d fb04 	ldr.w	pc, [sp], #4
    e50a:	bf00      	nop
    e50c:	1fff910c 	.word	0x1fff910c
    e510:	1fff9108 	.word	0x1fff9108

0000e514 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    e514:	b500      	push	{lr}
    e516:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e518:	f7f2 fba0 	bl	c5c <Sys_GetCoreID>
    e51c:	4603      	mov	r3, r0
    e51e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    e520:	4a0d      	ldr	r2, [pc, #52]	; (e558 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    e522:	9b01      	ldr	r3, [sp, #4]
    e524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e528:	1e5a      	subs	r2, r3, #1
    e52a:	490b      	ldr	r1, [pc, #44]	; (e558 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    e52c:	9b01      	ldr	r3, [sp, #4]
    e52e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    e532:	4a0a      	ldr	r2, [pc, #40]	; (e55c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    e534:	9b01      	ldr	r3, [sp, #4]
    e536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e53a:	f003 0301 	and.w	r3, r3, #1
    e53e:	2b00      	cmp	r3, #0
    e540:	d106      	bne.n	e550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    e542:	4a05      	ldr	r2, [pc, #20]	; (e558 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    e544:	9b01      	ldr	r3, [sp, #4]
    e546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e54a:	2b00      	cmp	r3, #0
    e54c:	d100      	bne.n	e550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e54e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e550:	bf00      	nop
    e552:	b003      	add	sp, #12
    e554:	f85d fb04 	ldr.w	pc, [sp], #4
    e558:	1fff910c 	.word	0x1fff910c
    e55c:	1fff9108 	.word	0x1fff9108

0000e560 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    e560:	b500      	push	{lr}
    e562:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e564:	f7f2 fb7a 	bl	c5c <Sys_GetCoreID>
    e568:	4603      	mov	r3, r0
    e56a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    e56c:	4a10      	ldr	r2, [pc, #64]	; (e5b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    e56e:	9b01      	ldr	r3, [sp, #4]
    e570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e574:	2b00      	cmp	r3, #0
    e576:	d10d      	bne.n	e594 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e578:	f7f2 faa0 	bl	abc <Port_schm_read_msr>
    e57c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e57e:	9b00      	ldr	r3, [sp, #0]
    e580:	f003 0301 	and.w	r3, r3, #1
    e584:	2b00      	cmp	r3, #0
    e586:	d100      	bne.n	e58a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e588:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    e58a:	490a      	ldr	r1, [pc, #40]	; (e5b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    e58c:	9b01      	ldr	r3, [sp, #4]
    e58e:	9a00      	ldr	r2, [sp, #0]
    e590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    e594:	4a06      	ldr	r2, [pc, #24]	; (e5b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    e596:	9b01      	ldr	r3, [sp, #4]
    e598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e59c:	1c5a      	adds	r2, r3, #1
    e59e:	4904      	ldr	r1, [pc, #16]	; (e5b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    e5a0:	9b01      	ldr	r3, [sp, #4]
    e5a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e5a6:	bf00      	nop
    e5a8:	b003      	add	sp, #12
    e5aa:	f85d fb04 	ldr.w	pc, [sp], #4
    e5ae:	bf00      	nop
    e5b0:	1fff9114 	.word	0x1fff9114
    e5b4:	1fff9110 	.word	0x1fff9110

0000e5b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    e5b8:	b500      	push	{lr}
    e5ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5bc:	f7f2 fb4e 	bl	c5c <Sys_GetCoreID>
    e5c0:	4603      	mov	r3, r0
    e5c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    e5c4:	4a0d      	ldr	r2, [pc, #52]	; (e5fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    e5c6:	9b01      	ldr	r3, [sp, #4]
    e5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5cc:	1e5a      	subs	r2, r3, #1
    e5ce:	490b      	ldr	r1, [pc, #44]	; (e5fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    e5d0:	9b01      	ldr	r3, [sp, #4]
    e5d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    e5d6:	4a0a      	ldr	r2, [pc, #40]	; (e600 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    e5d8:	9b01      	ldr	r3, [sp, #4]
    e5da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5de:	f003 0301 	and.w	r3, r3, #1
    e5e2:	2b00      	cmp	r3, #0
    e5e4:	d106      	bne.n	e5f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    e5e6:	4a05      	ldr	r2, [pc, #20]	; (e5fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    e5e8:	9b01      	ldr	r3, [sp, #4]
    e5ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5ee:	2b00      	cmp	r3, #0
    e5f0:	d100      	bne.n	e5f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e5f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e5f4:	bf00      	nop
    e5f6:	b003      	add	sp, #12
    e5f8:	f85d fb04 	ldr.w	pc, [sp], #4
    e5fc:	1fff9114 	.word	0x1fff9114
    e600:	1fff9110 	.word	0x1fff9110

0000e604 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    e604:	b500      	push	{lr}
    e606:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e608:	f7f2 fb28 	bl	c5c <Sys_GetCoreID>
    e60c:	4603      	mov	r3, r0
    e60e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    e610:	4a10      	ldr	r2, [pc, #64]	; (e654 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    e612:	9b01      	ldr	r3, [sp, #4]
    e614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e618:	2b00      	cmp	r3, #0
    e61a:	d10d      	bne.n	e638 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e61c:	f7f2 fa4e 	bl	abc <Port_schm_read_msr>
    e620:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e622:	9b00      	ldr	r3, [sp, #0]
    e624:	f003 0301 	and.w	r3, r3, #1
    e628:	2b00      	cmp	r3, #0
    e62a:	d100      	bne.n	e62e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e62c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    e62e:	490a      	ldr	r1, [pc, #40]	; (e658 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    e630:	9b01      	ldr	r3, [sp, #4]
    e632:	9a00      	ldr	r2, [sp, #0]
    e634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    e638:	4a06      	ldr	r2, [pc, #24]	; (e654 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    e63a:	9b01      	ldr	r3, [sp, #4]
    e63c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e640:	1c5a      	adds	r2, r3, #1
    e642:	4904      	ldr	r1, [pc, #16]	; (e654 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    e644:	9b01      	ldr	r3, [sp, #4]
    e646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e64a:	bf00      	nop
    e64c:	b003      	add	sp, #12
    e64e:	f85d fb04 	ldr.w	pc, [sp], #4
    e652:	bf00      	nop
    e654:	1fff911c 	.word	0x1fff911c
    e658:	1fff9118 	.word	0x1fff9118

0000e65c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    e65c:	b500      	push	{lr}
    e65e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e660:	f7f2 fafc 	bl	c5c <Sys_GetCoreID>
    e664:	4603      	mov	r3, r0
    e666:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    e668:	4a0d      	ldr	r2, [pc, #52]	; (e6a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    e66a:	9b01      	ldr	r3, [sp, #4]
    e66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e670:	1e5a      	subs	r2, r3, #1
    e672:	490b      	ldr	r1, [pc, #44]	; (e6a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    e674:	9b01      	ldr	r3, [sp, #4]
    e676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    e67a:	4a0a      	ldr	r2, [pc, #40]	; (e6a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    e67c:	9b01      	ldr	r3, [sp, #4]
    e67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e682:	f003 0301 	and.w	r3, r3, #1
    e686:	2b00      	cmp	r3, #0
    e688:	d106      	bne.n	e698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    e68a:	4a05      	ldr	r2, [pc, #20]	; (e6a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    e68c:	9b01      	ldr	r3, [sp, #4]
    e68e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e692:	2b00      	cmp	r3, #0
    e694:	d100      	bne.n	e698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e696:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e698:	bf00      	nop
    e69a:	b003      	add	sp, #12
    e69c:	f85d fb04 	ldr.w	pc, [sp], #4
    e6a0:	1fff911c 	.word	0x1fff911c
    e6a4:	1fff9118 	.word	0x1fff9118

0000e6a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    e6a8:	b500      	push	{lr}
    e6aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6ac:	f7f2 fad6 	bl	c5c <Sys_GetCoreID>
    e6b0:	4603      	mov	r3, r0
    e6b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    e6b4:	4a10      	ldr	r2, [pc, #64]	; (e6f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    e6b6:	9b01      	ldr	r3, [sp, #4]
    e6b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6bc:	2b00      	cmp	r3, #0
    e6be:	d10d      	bne.n	e6dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e6c0:	f7f2 f9fc 	bl	abc <Port_schm_read_msr>
    e6c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e6c6:	9b00      	ldr	r3, [sp, #0]
    e6c8:	f003 0301 	and.w	r3, r3, #1
    e6cc:	2b00      	cmp	r3, #0
    e6ce:	d100      	bne.n	e6d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e6d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    e6d2:	490a      	ldr	r1, [pc, #40]	; (e6fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    e6d4:	9b01      	ldr	r3, [sp, #4]
    e6d6:	9a00      	ldr	r2, [sp, #0]
    e6d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    e6dc:	4a06      	ldr	r2, [pc, #24]	; (e6f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    e6de:	9b01      	ldr	r3, [sp, #4]
    e6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6e4:	1c5a      	adds	r2, r3, #1
    e6e6:	4904      	ldr	r1, [pc, #16]	; (e6f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    e6e8:	9b01      	ldr	r3, [sp, #4]
    e6ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e6ee:	bf00      	nop
    e6f0:	b003      	add	sp, #12
    e6f2:	f85d fb04 	ldr.w	pc, [sp], #4
    e6f6:	bf00      	nop
    e6f8:	1fff9124 	.word	0x1fff9124
    e6fc:	1fff9120 	.word	0x1fff9120

0000e700 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    e700:	b500      	push	{lr}
    e702:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e704:	f7f2 faaa 	bl	c5c <Sys_GetCoreID>
    e708:	4603      	mov	r3, r0
    e70a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    e70c:	4a0d      	ldr	r2, [pc, #52]	; (e744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    e70e:	9b01      	ldr	r3, [sp, #4]
    e710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e714:	1e5a      	subs	r2, r3, #1
    e716:	490b      	ldr	r1, [pc, #44]	; (e744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    e718:	9b01      	ldr	r3, [sp, #4]
    e71a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    e71e:	4a0a      	ldr	r2, [pc, #40]	; (e748 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    e720:	9b01      	ldr	r3, [sp, #4]
    e722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e726:	f003 0301 	and.w	r3, r3, #1
    e72a:	2b00      	cmp	r3, #0
    e72c:	d106      	bne.n	e73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    e72e:	4a05      	ldr	r2, [pc, #20]	; (e744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    e730:	9b01      	ldr	r3, [sp, #4]
    e732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e736:	2b00      	cmp	r3, #0
    e738:	d100      	bne.n	e73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e73a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e73c:	bf00      	nop
    e73e:	b003      	add	sp, #12
    e740:	f85d fb04 	ldr.w	pc, [sp], #4
    e744:	1fff9124 	.word	0x1fff9124
    e748:	1fff9120 	.word	0x1fff9120

0000e74c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    e74c:	b500      	push	{lr}
    e74e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e750:	f7f2 fa84 	bl	c5c <Sys_GetCoreID>
    e754:	4603      	mov	r3, r0
    e756:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    e758:	4a10      	ldr	r2, [pc, #64]	; (e79c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    e75a:	9b01      	ldr	r3, [sp, #4]
    e75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e760:	2b00      	cmp	r3, #0
    e762:	d10d      	bne.n	e780 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e764:	f7f2 f9aa 	bl	abc <Port_schm_read_msr>
    e768:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e76a:	9b00      	ldr	r3, [sp, #0]
    e76c:	f003 0301 	and.w	r3, r3, #1
    e770:	2b00      	cmp	r3, #0
    e772:	d100      	bne.n	e776 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e774:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    e776:	490a      	ldr	r1, [pc, #40]	; (e7a0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    e778:	9b01      	ldr	r3, [sp, #4]
    e77a:	9a00      	ldr	r2, [sp, #0]
    e77c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    e780:	4a06      	ldr	r2, [pc, #24]	; (e79c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    e782:	9b01      	ldr	r3, [sp, #4]
    e784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e788:	1c5a      	adds	r2, r3, #1
    e78a:	4904      	ldr	r1, [pc, #16]	; (e79c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    e78c:	9b01      	ldr	r3, [sp, #4]
    e78e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e792:	bf00      	nop
    e794:	b003      	add	sp, #12
    e796:	f85d fb04 	ldr.w	pc, [sp], #4
    e79a:	bf00      	nop
    e79c:	1fff912c 	.word	0x1fff912c
    e7a0:	1fff9128 	.word	0x1fff9128

0000e7a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    e7a4:	b500      	push	{lr}
    e7a6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7a8:	f7f2 fa58 	bl	c5c <Sys_GetCoreID>
    e7ac:	4603      	mov	r3, r0
    e7ae:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    e7b0:	4a0d      	ldr	r2, [pc, #52]	; (e7e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    e7b2:	9b01      	ldr	r3, [sp, #4]
    e7b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7b8:	1e5a      	subs	r2, r3, #1
    e7ba:	490b      	ldr	r1, [pc, #44]	; (e7e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    e7bc:	9b01      	ldr	r3, [sp, #4]
    e7be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    e7c2:	4a0a      	ldr	r2, [pc, #40]	; (e7ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    e7c4:	9b01      	ldr	r3, [sp, #4]
    e7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ca:	f003 0301 	and.w	r3, r3, #1
    e7ce:	2b00      	cmp	r3, #0
    e7d0:	d106      	bne.n	e7e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    e7d2:	4a05      	ldr	r2, [pc, #20]	; (e7e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    e7d4:	9b01      	ldr	r3, [sp, #4]
    e7d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7da:	2b00      	cmp	r3, #0
    e7dc:	d100      	bne.n	e7e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e7de:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e7e0:	bf00      	nop
    e7e2:	b003      	add	sp, #12
    e7e4:	f85d fb04 	ldr.w	pc, [sp], #4
    e7e8:	1fff912c 	.word	0x1fff912c
    e7ec:	1fff9128 	.word	0x1fff9128

0000e7f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    e7f0:	b500      	push	{lr}
    e7f2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7f4:	f7f2 fa32 	bl	c5c <Sys_GetCoreID>
    e7f8:	4603      	mov	r3, r0
    e7fa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    e7fc:	4a10      	ldr	r2, [pc, #64]	; (e840 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    e7fe:	9b01      	ldr	r3, [sp, #4]
    e800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e804:	2b00      	cmp	r3, #0
    e806:	d10d      	bne.n	e824 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e808:	f7f2 f958 	bl	abc <Port_schm_read_msr>
    e80c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e80e:	9b00      	ldr	r3, [sp, #0]
    e810:	f003 0301 	and.w	r3, r3, #1
    e814:	2b00      	cmp	r3, #0
    e816:	d100      	bne.n	e81a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e818:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    e81a:	490a      	ldr	r1, [pc, #40]	; (e844 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    e81c:	9b01      	ldr	r3, [sp, #4]
    e81e:	9a00      	ldr	r2, [sp, #0]
    e820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    e824:	4a06      	ldr	r2, [pc, #24]	; (e840 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    e826:	9b01      	ldr	r3, [sp, #4]
    e828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e82c:	1c5a      	adds	r2, r3, #1
    e82e:	4904      	ldr	r1, [pc, #16]	; (e840 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    e830:	9b01      	ldr	r3, [sp, #4]
    e832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e836:	bf00      	nop
    e838:	b003      	add	sp, #12
    e83a:	f85d fb04 	ldr.w	pc, [sp], #4
    e83e:	bf00      	nop
    e840:	1fff9134 	.word	0x1fff9134
    e844:	1fff9130 	.word	0x1fff9130

0000e848 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    e848:	b500      	push	{lr}
    e84a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e84c:	f7f2 fa06 	bl	c5c <Sys_GetCoreID>
    e850:	4603      	mov	r3, r0
    e852:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    e854:	4a0d      	ldr	r2, [pc, #52]	; (e88c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    e856:	9b01      	ldr	r3, [sp, #4]
    e858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e85c:	1e5a      	subs	r2, r3, #1
    e85e:	490b      	ldr	r1, [pc, #44]	; (e88c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    e860:	9b01      	ldr	r3, [sp, #4]
    e862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    e866:	4a0a      	ldr	r2, [pc, #40]	; (e890 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    e868:	9b01      	ldr	r3, [sp, #4]
    e86a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e86e:	f003 0301 	and.w	r3, r3, #1
    e872:	2b00      	cmp	r3, #0
    e874:	d106      	bne.n	e884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    e876:	4a05      	ldr	r2, [pc, #20]	; (e88c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    e878:	9b01      	ldr	r3, [sp, #4]
    e87a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e87e:	2b00      	cmp	r3, #0
    e880:	d100      	bne.n	e884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e882:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e884:	bf00      	nop
    e886:	b003      	add	sp, #12
    e888:	f85d fb04 	ldr.w	pc, [sp], #4
    e88c:	1fff9134 	.word	0x1fff9134
    e890:	1fff9130 	.word	0x1fff9130

0000e894 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    e894:	b500      	push	{lr}
    e896:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e898:	f7f2 f9e0 	bl	c5c <Sys_GetCoreID>
    e89c:	4603      	mov	r3, r0
    e89e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    e8a0:	4a10      	ldr	r2, [pc, #64]	; (e8e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    e8a2:	9b01      	ldr	r3, [sp, #4]
    e8a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8a8:	2b00      	cmp	r3, #0
    e8aa:	d10d      	bne.n	e8c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e8ac:	f7f2 f906 	bl	abc <Port_schm_read_msr>
    e8b0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e8b2:	9b00      	ldr	r3, [sp, #0]
    e8b4:	f003 0301 	and.w	r3, r3, #1
    e8b8:	2b00      	cmp	r3, #0
    e8ba:	d100      	bne.n	e8be <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e8bc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    e8be:	490a      	ldr	r1, [pc, #40]	; (e8e8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    e8c0:	9b01      	ldr	r3, [sp, #4]
    e8c2:	9a00      	ldr	r2, [sp, #0]
    e8c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    e8c8:	4a06      	ldr	r2, [pc, #24]	; (e8e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    e8ca:	9b01      	ldr	r3, [sp, #4]
    e8cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8d0:	1c5a      	adds	r2, r3, #1
    e8d2:	4904      	ldr	r1, [pc, #16]	; (e8e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    e8d4:	9b01      	ldr	r3, [sp, #4]
    e8d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e8da:	bf00      	nop
    e8dc:	b003      	add	sp, #12
    e8de:	f85d fb04 	ldr.w	pc, [sp], #4
    e8e2:	bf00      	nop
    e8e4:	1fff913c 	.word	0x1fff913c
    e8e8:	1fff9138 	.word	0x1fff9138

0000e8ec <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    e8ec:	b500      	push	{lr}
    e8ee:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8f0:	f7f2 f9b4 	bl	c5c <Sys_GetCoreID>
    e8f4:	4603      	mov	r3, r0
    e8f6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    e8f8:	4a0d      	ldr	r2, [pc, #52]	; (e930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    e8fa:	9b01      	ldr	r3, [sp, #4]
    e8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e900:	1e5a      	subs	r2, r3, #1
    e902:	490b      	ldr	r1, [pc, #44]	; (e930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    e904:	9b01      	ldr	r3, [sp, #4]
    e906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    e90a:	4a0a      	ldr	r2, [pc, #40]	; (e934 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    e90c:	9b01      	ldr	r3, [sp, #4]
    e90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e912:	f003 0301 	and.w	r3, r3, #1
    e916:	2b00      	cmp	r3, #0
    e918:	d106      	bne.n	e928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    e91a:	4a05      	ldr	r2, [pc, #20]	; (e930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    e91c:	9b01      	ldr	r3, [sp, #4]
    e91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e922:	2b00      	cmp	r3, #0
    e924:	d100      	bne.n	e928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e926:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e928:	bf00      	nop
    e92a:	b003      	add	sp, #12
    e92c:	f85d fb04 	ldr.w	pc, [sp], #4
    e930:	1fff913c 	.word	0x1fff913c
    e934:	1fff9138 	.word	0x1fff9138

0000e938 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    e938:	b500      	push	{lr}
    e93a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e93c:	f7f2 f98e 	bl	c5c <Sys_GetCoreID>
    e940:	4603      	mov	r3, r0
    e942:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    e944:	4a10      	ldr	r2, [pc, #64]	; (e988 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    e946:	9b01      	ldr	r3, [sp, #4]
    e948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e94c:	2b00      	cmp	r3, #0
    e94e:	d10d      	bne.n	e96c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e950:	f7f2 f8b4 	bl	abc <Port_schm_read_msr>
    e954:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e956:	9b00      	ldr	r3, [sp, #0]
    e958:	f003 0301 	and.w	r3, r3, #1
    e95c:	2b00      	cmp	r3, #0
    e95e:	d100      	bne.n	e962 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e960:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    e962:	490a      	ldr	r1, [pc, #40]	; (e98c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    e964:	9b01      	ldr	r3, [sp, #4]
    e966:	9a00      	ldr	r2, [sp, #0]
    e968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    e96c:	4a06      	ldr	r2, [pc, #24]	; (e988 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    e96e:	9b01      	ldr	r3, [sp, #4]
    e970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e974:	1c5a      	adds	r2, r3, #1
    e976:	4904      	ldr	r1, [pc, #16]	; (e988 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    e978:	9b01      	ldr	r3, [sp, #4]
    e97a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e97e:	bf00      	nop
    e980:	b003      	add	sp, #12
    e982:	f85d fb04 	ldr.w	pc, [sp], #4
    e986:	bf00      	nop
    e988:	1fff9144 	.word	0x1fff9144
    e98c:	1fff9140 	.word	0x1fff9140

0000e990 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    e990:	b500      	push	{lr}
    e992:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e994:	f7f2 f962 	bl	c5c <Sys_GetCoreID>
    e998:	4603      	mov	r3, r0
    e99a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    e99c:	4a0d      	ldr	r2, [pc, #52]	; (e9d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    e99e:	9b01      	ldr	r3, [sp, #4]
    e9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9a4:	1e5a      	subs	r2, r3, #1
    e9a6:	490b      	ldr	r1, [pc, #44]	; (e9d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    e9a8:	9b01      	ldr	r3, [sp, #4]
    e9aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    e9ae:	4a0a      	ldr	r2, [pc, #40]	; (e9d8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    e9b0:	9b01      	ldr	r3, [sp, #4]
    e9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9b6:	f003 0301 	and.w	r3, r3, #1
    e9ba:	2b00      	cmp	r3, #0
    e9bc:	d106      	bne.n	e9cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    e9be:	4a05      	ldr	r2, [pc, #20]	; (e9d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    e9c0:	9b01      	ldr	r3, [sp, #4]
    e9c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9c6:	2b00      	cmp	r3, #0
    e9c8:	d100      	bne.n	e9cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e9ca:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e9cc:	bf00      	nop
    e9ce:	b003      	add	sp, #12
    e9d0:	f85d fb04 	ldr.w	pc, [sp], #4
    e9d4:	1fff9144 	.word	0x1fff9144
    e9d8:	1fff9140 	.word	0x1fff9140

0000e9dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    e9dc:	b500      	push	{lr}
    e9de:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9e0:	f7f2 f93c 	bl	c5c <Sys_GetCoreID>
    e9e4:	4603      	mov	r3, r0
    e9e6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    e9e8:	4a10      	ldr	r2, [pc, #64]	; (ea2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    e9ea:	9b01      	ldr	r3, [sp, #4]
    e9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9f0:	2b00      	cmp	r3, #0
    e9f2:	d10d      	bne.n	ea10 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e9f4:	f7f2 f862 	bl	abc <Port_schm_read_msr>
    e9f8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e9fa:	9b00      	ldr	r3, [sp, #0]
    e9fc:	f003 0301 	and.w	r3, r3, #1
    ea00:	2b00      	cmp	r3, #0
    ea02:	d100      	bne.n	ea06 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea04:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    ea06:	490a      	ldr	r1, [pc, #40]	; (ea30 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    ea08:	9b01      	ldr	r3, [sp, #4]
    ea0a:	9a00      	ldr	r2, [sp, #0]
    ea0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    ea10:	4a06      	ldr	r2, [pc, #24]	; (ea2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    ea12:	9b01      	ldr	r3, [sp, #4]
    ea14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea18:	1c5a      	adds	r2, r3, #1
    ea1a:	4904      	ldr	r1, [pc, #16]	; (ea2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    ea1c:	9b01      	ldr	r3, [sp, #4]
    ea1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea22:	bf00      	nop
    ea24:	b003      	add	sp, #12
    ea26:	f85d fb04 	ldr.w	pc, [sp], #4
    ea2a:	bf00      	nop
    ea2c:	1fff914c 	.word	0x1fff914c
    ea30:	1fff9148 	.word	0x1fff9148

0000ea34 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    ea34:	b500      	push	{lr}
    ea36:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea38:	f7f2 f910 	bl	c5c <Sys_GetCoreID>
    ea3c:	4603      	mov	r3, r0
    ea3e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    ea40:	4a0d      	ldr	r2, [pc, #52]	; (ea78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    ea42:	9b01      	ldr	r3, [sp, #4]
    ea44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea48:	1e5a      	subs	r2, r3, #1
    ea4a:	490b      	ldr	r1, [pc, #44]	; (ea78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    ea4c:	9b01      	ldr	r3, [sp, #4]
    ea4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    ea52:	4a0a      	ldr	r2, [pc, #40]	; (ea7c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    ea54:	9b01      	ldr	r3, [sp, #4]
    ea56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea5a:	f003 0301 	and.w	r3, r3, #1
    ea5e:	2b00      	cmp	r3, #0
    ea60:	d106      	bne.n	ea70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    ea62:	4a05      	ldr	r2, [pc, #20]	; (ea78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    ea64:	9b01      	ldr	r3, [sp, #4]
    ea66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea6a:	2b00      	cmp	r3, #0
    ea6c:	d100      	bne.n	ea70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea6e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea70:	bf00      	nop
    ea72:	b003      	add	sp, #12
    ea74:	f85d fb04 	ldr.w	pc, [sp], #4
    ea78:	1fff914c 	.word	0x1fff914c
    ea7c:	1fff9148 	.word	0x1fff9148

0000ea80 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    ea80:	b500      	push	{lr}
    ea82:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea84:	f7f2 f8ea 	bl	c5c <Sys_GetCoreID>
    ea88:	4603      	mov	r3, r0
    ea8a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    ea8c:	4a10      	ldr	r2, [pc, #64]	; (ead0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    ea8e:	9b01      	ldr	r3, [sp, #4]
    ea90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea94:	2b00      	cmp	r3, #0
    ea96:	d10d      	bne.n	eab4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea98:	f7f2 f810 	bl	abc <Port_schm_read_msr>
    ea9c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea9e:	9b00      	ldr	r3, [sp, #0]
    eaa0:	f003 0301 	and.w	r3, r3, #1
    eaa4:	2b00      	cmp	r3, #0
    eaa6:	d100      	bne.n	eaaa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eaa8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    eaaa:	490a      	ldr	r1, [pc, #40]	; (ead4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    eaac:	9b01      	ldr	r3, [sp, #4]
    eaae:	9a00      	ldr	r2, [sp, #0]
    eab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    eab4:	4a06      	ldr	r2, [pc, #24]	; (ead0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    eab6:	9b01      	ldr	r3, [sp, #4]
    eab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eabc:	1c5a      	adds	r2, r3, #1
    eabe:	4904      	ldr	r1, [pc, #16]	; (ead0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    eac0:	9b01      	ldr	r3, [sp, #4]
    eac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eac6:	bf00      	nop
    eac8:	b003      	add	sp, #12
    eaca:	f85d fb04 	ldr.w	pc, [sp], #4
    eace:	bf00      	nop
    ead0:	1fff9154 	.word	0x1fff9154
    ead4:	1fff9150 	.word	0x1fff9150

0000ead8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    ead8:	b500      	push	{lr}
    eada:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eadc:	f7f2 f8be 	bl	c5c <Sys_GetCoreID>
    eae0:	4603      	mov	r3, r0
    eae2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    eae4:	4a0d      	ldr	r2, [pc, #52]	; (eb1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    eae6:	9b01      	ldr	r3, [sp, #4]
    eae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaec:	1e5a      	subs	r2, r3, #1
    eaee:	490b      	ldr	r1, [pc, #44]	; (eb1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    eaf0:	9b01      	ldr	r3, [sp, #4]
    eaf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    eaf6:	4a0a      	ldr	r2, [pc, #40]	; (eb20 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    eaf8:	9b01      	ldr	r3, [sp, #4]
    eafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eafe:	f003 0301 	and.w	r3, r3, #1
    eb02:	2b00      	cmp	r3, #0
    eb04:	d106      	bne.n	eb14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    eb06:	4a05      	ldr	r2, [pc, #20]	; (eb1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    eb08:	9b01      	ldr	r3, [sp, #4]
    eb0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb0e:	2b00      	cmp	r3, #0
    eb10:	d100      	bne.n	eb14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb12:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb14:	bf00      	nop
    eb16:	b003      	add	sp, #12
    eb18:	f85d fb04 	ldr.w	pc, [sp], #4
    eb1c:	1fff9154 	.word	0x1fff9154
    eb20:	1fff9150 	.word	0x1fff9150

0000eb24 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    eb24:	bf00      	nop
    eb26:	4770      	bx	lr

0000eb28 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    eb28:	b510      	push	{r4, lr}
    eb2a:	b084      	sub	sp, #16
    eb2c:	4604      	mov	r4, r0
    eb2e:	4608      	mov	r0, r1
    eb30:	4611      	mov	r1, r2
    eb32:	461a      	mov	r2, r3
    eb34:	4623      	mov	r3, r4
    eb36:	f8ad 3006 	strh.w	r3, [sp, #6]
    eb3a:	4603      	mov	r3, r0
    eb3c:	f88d 3005 	strb.w	r3, [sp, #5]
    eb40:	460b      	mov	r3, r1
    eb42:	f88d 3004 	strb.w	r3, [sp, #4]
    eb46:	4613      	mov	r3, r2
    eb48:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb4c:	f7f2 f886 	bl	c5c <Sys_GetCoreID>
    eb50:	4603      	mov	r3, r0
    eb52:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    eb54:	490d      	ldr	r1, [pc, #52]	; (eb8c <Det_ReportError+0x64>)
    eb56:	9b03      	ldr	r3, [sp, #12]
    eb58:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    eb5c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    eb60:	4a0b      	ldr	r2, [pc, #44]	; (eb90 <Det_ReportError+0x68>)
    eb62:	9b03      	ldr	r3, [sp, #12]
    eb64:	4413      	add	r3, r2
    eb66:	f89d 2005 	ldrb.w	r2, [sp, #5]
    eb6a:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    eb6c:	4a09      	ldr	r2, [pc, #36]	; (eb94 <Det_ReportError+0x6c>)
    eb6e:	9b03      	ldr	r3, [sp, #12]
    eb70:	4413      	add	r3, r2
    eb72:	f89d 2004 	ldrb.w	r2, [sp, #4]
    eb76:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    eb78:	4a07      	ldr	r2, [pc, #28]	; (eb98 <Det_ReportError+0x70>)
    eb7a:	9b03      	ldr	r3, [sp, #12]
    eb7c:	4413      	add	r3, r2
    eb7e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    eb82:	701a      	strb	r2, [r3, #0]

    return E_OK;
    eb84:	2300      	movs	r3, #0
}
    eb86:	4618      	mov	r0, r3
    eb88:	b004      	add	sp, #16
    eb8a:	bd10      	pop	{r4, pc}
    eb8c:	1fff9180 	.word	0x1fff9180
    eb90:	1fff9158 	.word	0x1fff9158
    eb94:	1fff915c 	.word	0x1fff915c
    eb98:	1fff9160 	.word	0x1fff9160

0000eb9c <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    eb9c:	b510      	push	{r4, lr}
    eb9e:	b084      	sub	sp, #16
    eba0:	4604      	mov	r4, r0
    eba2:	4608      	mov	r0, r1
    eba4:	4611      	mov	r1, r2
    eba6:	461a      	mov	r2, r3
    eba8:	4623      	mov	r3, r4
    ebaa:	f8ad 3006 	strh.w	r3, [sp, #6]
    ebae:	4603      	mov	r3, r0
    ebb0:	f88d 3005 	strb.w	r3, [sp, #5]
    ebb4:	460b      	mov	r3, r1
    ebb6:	f88d 3004 	strb.w	r3, [sp, #4]
    ebba:	4613      	mov	r3, r2
    ebbc:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebc0:	f7f2 f84c 	bl	c5c <Sys_GetCoreID>
    ebc4:	4603      	mov	r3, r0
    ebc6:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    ebc8:	490d      	ldr	r1, [pc, #52]	; (ec00 <Det_ReportRuntimeError+0x64>)
    ebca:	9b03      	ldr	r3, [sp, #12]
    ebcc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ebd0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    ebd4:	4a0b      	ldr	r2, [pc, #44]	; (ec04 <Det_ReportRuntimeError+0x68>)
    ebd6:	9b03      	ldr	r3, [sp, #12]
    ebd8:	4413      	add	r3, r2
    ebda:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ebde:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    ebe0:	4a09      	ldr	r2, [pc, #36]	; (ec08 <Det_ReportRuntimeError+0x6c>)
    ebe2:	9b03      	ldr	r3, [sp, #12]
    ebe4:	4413      	add	r3, r2
    ebe6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ebea:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    ebec:	4a07      	ldr	r2, [pc, #28]	; (ec0c <Det_ReportRuntimeError+0x70>)
    ebee:	9b03      	ldr	r3, [sp, #12]
    ebf0:	4413      	add	r3, r2
    ebf2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ebf6:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ebf8:	2300      	movs	r3, #0
}
    ebfa:	4618      	mov	r0, r3
    ebfc:	b004      	add	sp, #16
    ebfe:	bd10      	pop	{r4, pc}
    ec00:	1fff9184 	.word	0x1fff9184
    ec04:	1fff9164 	.word	0x1fff9164
    ec08:	1fff9168 	.word	0x1fff9168
    ec0c:	1fff916c 	.word	0x1fff916c

0000ec10 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    ec10:	b510      	push	{r4, lr}
    ec12:	b084      	sub	sp, #16
    ec14:	4604      	mov	r4, r0
    ec16:	4608      	mov	r0, r1
    ec18:	4611      	mov	r1, r2
    ec1a:	461a      	mov	r2, r3
    ec1c:	4623      	mov	r3, r4
    ec1e:	f8ad 3006 	strh.w	r3, [sp, #6]
    ec22:	4603      	mov	r3, r0
    ec24:	f88d 3005 	strb.w	r3, [sp, #5]
    ec28:	460b      	mov	r3, r1
    ec2a:	f88d 3004 	strb.w	r3, [sp, #4]
    ec2e:	4613      	mov	r3, r2
    ec30:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec34:	f7f2 f812 	bl	c5c <Sys_GetCoreID>
    ec38:	4603      	mov	r3, r0
    ec3a:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    ec3c:	490d      	ldr	r1, [pc, #52]	; (ec74 <Det_ReportTransientFault+0x64>)
    ec3e:	9b03      	ldr	r3, [sp, #12]
    ec40:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ec44:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    ec48:	4a0b      	ldr	r2, [pc, #44]	; (ec78 <Det_ReportTransientFault+0x68>)
    ec4a:	9b03      	ldr	r3, [sp, #12]
    ec4c:	4413      	add	r3, r2
    ec4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ec52:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    ec54:	4a09      	ldr	r2, [pc, #36]	; (ec7c <Det_ReportTransientFault+0x6c>)
    ec56:	9b03      	ldr	r3, [sp, #12]
    ec58:	4413      	add	r3, r2
    ec5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ec5e:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    ec60:	4a07      	ldr	r2, [pc, #28]	; (ec80 <Det_ReportTransientFault+0x70>)
    ec62:	9b03      	ldr	r3, [sp, #12]
    ec64:	4413      	add	r3, r2
    ec66:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ec6a:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ec6c:	2300      	movs	r3, #0
}
    ec6e:	4618      	mov	r0, r3
    ec70:	b004      	add	sp, #16
    ec72:	bd10      	pop	{r4, pc}
    ec74:	1fff917c 	.word	0x1fff917c
    ec78:	1fff9170 	.word	0x1fff9170
    ec7c:	1fff9174 	.word	0x1fff9174
    ec80:	1fff9178 	.word	0x1fff9178

0000ec84 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    ec84:	bf00      	nop
    ec86:	4770      	bx	lr

0000ec88 <Fls_ACEraseRomEnd>:
    ec88:	204e4143 	.word	0x204e4143
    ec8c:	64756162 	.word	0x64756162
    ec90:	74617220 	.word	0x74617220
    ec94:	65732065 	.word	0x65732065
    ec98:	75732074 	.word	0x75732074
    ec9c:	73656363 	.word	0x73656363
    eca0:	6c756673 	.word	0x6c756673
    eca4:	202e796c 	.word	0x202e796c
    eca8:	0000000a 	.word	0x0000000a
    ecac:	6c696146 	.word	0x6c696146
    ecb0:	74206465 	.word	0x74206465
    ecb4:	6573206f 	.word	0x6573206f
    ecb8:	41432074 	.word	0x41432074
    ecbc:	6162204e 	.word	0x6162204e
    ecc0:	72206475 	.word	0x72206475
    ecc4:	2e657461 	.word	0x2e657461
    ecc8:	00000a20 	.word	0x00000a20
    eccc:	204e4143 	.word	0x204e4143
    ecd0:	746e6f63 	.word	0x746e6f63
    ecd4:	6c6c6f72 	.word	0x6c6c6f72
    ecd8:	73207265 	.word	0x73207265
    ecdc:	65746174 	.word	0x65746174
    ece0:	63616d20 	.word	0x63616d20
    ece4:	656e6968 	.word	0x656e6968
    ece8:	74657320 	.word	0x74657320
    ecec:	63757320 	.word	0x63757320
    ecf0:	73736563 	.word	0x73736563
    ecf4:	6c6c7566 	.word	0x6c6c7566
    ecf8:	0a202e79 	.word	0x0a202e79
    ecfc:	00000000 	.word	0x00000000
    ed00:	6c696146 	.word	0x6c696146
    ed04:	74206465 	.word	0x74206465
    ed08:	6573206f 	.word	0x6573206f
    ed0c:	41432074 	.word	0x41432074
    ed10:	6f63204e 	.word	0x6f63204e
    ed14:	6f72746e 	.word	0x6f72746e
    ed18:	72656c6c 	.word	0x72656c6c
    ed1c:	61747320 	.word	0x61747320
    ed20:	6d206574 	.word	0x6d206574
    ed24:	69686361 	.word	0x69686361
    ed28:	202e656e 	.word	0x202e656e
    ed2c:	0000000a 	.word	0x0000000a
    ed30:	6d726554 	.word	0x6d726554
    ed34:	6c616e69 	.word	0x6c616e69
    ed38:	00000000 	.word	0x00000000
    ed3c:	4c554e28 	.word	0x4c554e28
    ed40:	0000294c 	.word	0x0000294c

0000ed44 <Clock_Ip_au8DividerCallbackIndex>:
    ed44:	0e0d0c00 06030201 0a070409 000b0805     ................

0000ed54 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000ed64 <Clock_Ip_au8XoscCallbackIndex>:
    ed64:	00000100 00000000 00000000 00000000     ................

0000ed74 <Clock_Ip_au8IrcoscCallbackIndex>:
    ed74:	03020100 00000004 00000000 00000000     ................

0000ed84 <Clock_Ip_au8GateCallbackIndex>:
    ed84:	06010200 01040301 00000500 00000000     ................

0000ed94 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000eda4 <Clock_Ip_au8PllCallbackIndex>:
    eda4:	00000100 00000000 00000000 00000000     ................

0000edb4 <Clock_Ip_au8SelectorCallbackIndex>:
    edb4:	0a090800 03020109 07060504 00000000     ................

0000edc4 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000edd4 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000ede4 <Clock_Ip_au8ClockFeatures>:
	...
    edf4:	01000000 00000000 00000000 00000002     ................
    ee04:	00000000 00000300 00000000 00040000     ................
    ee14:	00000000 05000000 00000000 00000000     ................
    ee24:	00000006 00000000 00000100 00000000     ................
    ee34:	00010000 00000000 04000000 00000000     ................
    ee44:	00000000 00000005 00000001 00000401     ................
    ee54:	00000200 00050100 00030000 04020000     ................
    ee64:	04000000 02000000 00000005 00000005     ................
    ee74:	00000403 00000600 00050300 00070000     ................
    ee84:	05000000 00000000 00000000 00000006     ................
	...
    eec4:	00050000 00000000 06000000 00000100     ................
    eed4:	00000000 00030007 00000000 00000000     ................
    eee4:	00000000 00060000 00000000 07000000     ................
    eef4:	00000100 00000000 00030008 00000000     ................
	...
    ef0c:	00090000 00000000 0a000000 00000100     ................
    ef1c:	00000000 0003000b 00000000 00000000     ................
    ef2c:	00000000 000c0000 00000000 0d000000     ................
    ef3c:	00000100 00000000 0003000e 00000000     ................
    ef4c:	00000800 00000000 00090000 00000000     ................
    ef5c:	0a000000 00000000 00000000 0000000b     ................
    ef6c:	00000000 00000b01 00000000 000b0200     ................
    ef7c:	00000000 0b030000 00000000 00000000     ................
	...
    ef94:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    efa4:	01000000 00000000 00000000 00000007     ................
    efb4:	00007300 00000700 00320000 00090000     .s........2.....
    efc4:	02000000 07000000 00000000 00000021     ............!...
    efd4:	00000009 00000400 00000900 00030000     ................
    efe4:	00070000 61000000 07000000 00000000     .......a........
    eff4:	00000024 00000007 00002500 00000700     $........%......
    f004:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    f014:	00000000 00000020 38000004 00003800     .... ......8.8..
    f024:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    f034:	04000000 00260000 00000026 66000004     ......&.&......f
    f044:	00006600 00000400 00370037 00040000     .f......7.7.....
    f054:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    f064:	2e000004 00002e00 00000200 00404040     ............@@@.
    f074:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    f084:	0000006b 6c000004 00006c00 00000900     k......l.l......
    f094:	00010000 00090000 00000000 07000000     ................
    f0a4:	00000000 00000036 00000007 00003100     ....6........1..
    f0b4:	00000700 00490000 00070000 4a000000     ......I........J
    f0c4:	07000000 00000000 0000004b 00000007     ........K.......
    f0d4:	00004c00 00000700 004d0000 00070000     .L........M.....
    f0e4:	3d000000 03000000 00000000 00000000     ...=............

0000f0f4 <Clock_Ip_au16SelectorEntryHardwareValue>:
    f0f4:	01010a03 01010001 04040002 02000603     ................
    f104:	00010810 02020100 00000000 00000007     ................
    f114:	00000009 00000000 00000c0e 00000000     ................
	...

0000f14c <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    f14c:	00020000 00000300 00000601 00000000     ................
	...

0000f17c <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    f17c:	00000700 00000000 02020000 01010303     ................
    f18c:	03020606 00000000 00000000 00000000     ................
	...

0000f1ac <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    f1ac:	00000001 00000000 02020000 01010303     ................
    f1bc:	03020606 00000000 00000000 00000000     ................
	...

0000f1dc <Clock_Ip_au8DividerValueHardwareValue>:
    f1dc:	00020100 00000003 00000004 00000000     ................
    f1ec:	00000005 00000000 00000000 00000000     ................
    f1fc:	00000006 00000000 00000000 00000000     ................
	...
    f21c:	00000007                                ....

0000f220 <Clock_Ip_apxScgPeriphAsyncDivs>:
    f220:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000f230 <Clock_Ip_aeSourceTypeClockName>:
    f230:	00000000 00000001 00000001 00000001     ................
    f240:	00000001 00000001 00000001 00000001     ................
    f250:	00000002 00000003 00000001 00000001     ................
    f260:	00000001 00000001 00000002 00000002     ................
    f270:	00000003 00000003 00000001 00000001     ................
    f280:	00000004 00000004 00000004 00000004     ................
	...

0000f2ec <Clock_Ip_aeHwPllName>:
    f2ec:	00000009                                ....

0000f2f0 <Clock_Ip_aeHwDfsName>:
    f2f0:	00000057                                W...

0000f2f4 <Clock_Ip_axDividerCallbacks>:
    f2f4:	00002c9d 00002ca7 00002cc1 00002cdb     .,...,...,...,..
    f304:	00002cf5 00002d0f 00002d29 00002d43     .,...-..)-..C-..
    f314:	00002d5d 00002d77 00002d91 00002dab     ]-..w-...-...-..
    f324:	00002dc5 00002ddf 00002df9              .-...-...-..

0000f330 <Clock_Ip_axDividerTriggerCallbacks>:
    f330:	0000316d 0000316d                       m1..m1..

0000f338 <Clock_Ip_axExtOscCallbacks>:
    f338:	00003179 00003179 00003179 00003183     y1..y1..y1...1..
    f348:	00003179 0000318d 000031a7 000031c1     y1...1...1...1..
    f358:	00003245 00003259                       E2..Y2..

0000f360 <Clock_Ip_axFracDivCallbacks>:
    f360:	00003419 00003419 00003423              .4...4..#4..

0000f36c <Clock_Ip_axGateCallbacks>:
    f36c:	0000343d 00003447 00003547 00003561     =4..G4..G5..a5..
    f37c:	000034f7 00003511 000034a7 000034c1     .4...5...4...4..
    f38c:	00003457 00003471 00003597 000035b1     W4..q4...5...5..
    f39c:	000035e7 00003601                       .5...6..

0000f3a4 <Clock_Ip_axIntOscCallbacks>:
    f3a4:	000037ad 000037ad 000037b7 000037c1     .7...7...7...7..
    f3b4:	000037db 000037f5 00003809 00003823     .7...7...8..#8..
    f3c4:	0000383d 00003851 0000386b 00003885     =8..Q8..k8...8..
    f3d4:	0000392d 00003947 00003961              -9..G9..a9..

0000f3e0 <Clock_Ip_axCmuCallbacks>:
    f3e0:	00003efd 00003f07 00003f13 00003efd     .>...?...?...>..

0000f3f0 <Clock_Ip_axPllCallbacks>:
    f3f0:	00003f1d 00003f1d 00003f27 00003f1d     .?...?..'?...?..
    f400:	00003f33 00003f3d 00003f57 00003f71     3?..=?..W?..q?..
    f410:	00004015 00004001                       .@...@..

0000f418 <Clock_Ip_axPcfsCallbacks>:
    f418:	00004171                                qA..

0000f41c <Clock_Ip_axSelectorCallbacks>:
    f41c:	0000417d 0000417d 00004187 000041a1     }A..}A...A...A..
    f42c:	0000417d 000041bb 000041d5 000041ef     }A...A...A...A..
    f43c:	00004209 00004223 0000423d 00004257     .B..#B..=B..WB..
    f44c:	00004271 0000428b 000042a5 000042bf     qB...B...B...B..
    f45c:	000042d9 000042f3 0000430d 00004327     .B...B...C..'C..
    f46c:	00004341 0000435b                       AC..[C..

0000f474 <ClockSource>:
    f474:	00000000 00000008 00000002 00000005     ................
	...
    f48c:	00000009                                ....

0000f490 <ResetReasonArray>:
    f490:	00000000 00000001 00000002 00000003     ................
    f4a0:	00000004 00000005 00000006 00000007     ................
    f4b0:	00000008 00000009 0000000a 0000000b     ................
    f4c0:	0000000c 0000000d 0000000e              ............

0000f4cc <Port_au32PortCiPortBaseAddr>:
    f4cc:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    f4dc:	4004d000                                ...@

0000f4e0 <Port_au32PortCiGpioBaseAddr>:
    f4e0:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    f4f0:	400ff100                                ...@

0000f4f4 <Flexcan_Ip_apxBase>:
    f4f4:	40024000 40025000 4002b000              .@.@.P.@...@

0000f500 <payload_code.3>:
    f500:	03020100 07060504 09090908 0a0a0a09     ................
    f510:	0b0b0b0a 0c0c0c0b 0d0d0d0c 0d0d0d0d     ................
    f520:	0e0e0e0d 0e0e0e0e 0e0e0e0e 0e0e0e0e     ................
    f530:	0f0f0f0e 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
    f540:	0000000f                                ....

0000f544 <flexcanBase.2>:
    f544:	40024000 40025000 4002b000              .@.@.P.@...@

0000f550 <maxMbNum.1>:
    f550:	00000020 00000010 00000010               ...........

0000f55c <flexcanBase.0>:
    f55c:	40024000                                .@.@

0000f560 <Can_43_FLEXCANIpwHwChannelConfig0>:
    f560:	0000fa28                                (...

0000f564 <Can_au32HwBufferAddr_Ctrl0>:
    f564:	4002b080 4002b090 4002b0a0              ...@...@...@

0000f570 <Can_aCtrlOffsetToCtrlIDMap>:
    f570:	0000ffff                                ....

0000f574 <Can_aHwObjIDToCtrlIDMap>:
    f574:	00000000                                ....

0000f578 <Can_aHwObjectConfig>:
    f578:	00000000 00000001 00000000 ff030000     ................
    f588:	00000008 00000000 00000003 00000000     ................
    f598:	0000f564                                d...

0000f59c <Can_aBaudrateConfig_Ctrl0>:
    f59c:	04030000 001d0005 00000000 00000000     ................
	...
    f5b4:	00050403 0000000b 00000000 00000000     ................
    f5c4:	00000000 04030000 00050005 00000000     ................
	...

0000f5e0 <Can_apHwObject_Ctrl0>:
    f5e0:	0000f578                                x...

0000f5e4 <Can_aControllerConfig>:
    f5e4:	00020000 4002b000 00000001 ffffffff     .......@........
	...
    f600:	00030001 0000f59c 0000f560 00000001     ........`.......
    f610:	0000f5e0                                ....

0000f614 <Can_apController>:
    f614:	0000f5e4                                ....

0000f618 <Can_43_FLEXCAN_Config>:
	...
    f620:	0000f570 0000f574 0000f578 0000f614     p...t...x.......

0000f630 <Mcu_aClockConfigPB>:
	...
    f638:	1c000101 04000010 01000029 00000005     ........).......
    f648:	00000001 00000000 00000057 00000000     ........W.......
    f658:	00000000 00000008 007a1200 00000001     ..........z.....
    f668:	00000001 00000000 00000057 00000000     ........W.......
    f678:	00000057 00000000 00000000 00000000     W...............
	...
    f698:	00000019 00000005 0000001a 00000002     ................
    f6a8:	0000001b 00000005 0000002a 00000005     ........*.......
    f6b8:	00000028 0000000e 00000029 00000001     (.......).......
    f6c8:	00000056 0000001c 00000032 0000002a     V.......2...*...
    f6d8:	0000002b 00000014 0000002c 00000014     +.......,.......
    f6e8:	0000002d 00000014 0000002e 00000014     -...............
    f6f8:	0000003f 00000000 00000040 00000000     ?.......@.......
    f708:	00000041 00000000 00000042 00000000     A.......B.......
    f718:	00000031 00000000 00000045 00000000     1.......E.......
    f728:	00000046 00000000 00000047 00000000     F.......G.......
    f738:	00000044 00000000 00000030 00000000     D.......0.......
    f748:	0000003d 00000000 00000043 00000000     =.......C.......
    f758:	00000049 00000000 0000004a 00000000     I.......J.......
    f768:	0000004b 00000000 00000048 00000000     K.......H.......
    f778:	0000000c 00000001 00000000 0000000d     ................
    f788:	00000002 00000000 0000000e 00000001     ................
    f798:	00000000 0000000f 00000001 00000000     ................
    f7a8:	0000001d 00000001 00000000 0000001e     ................
    f7b8:	00000008 00000000 0000001f 00000001     ................
    f7c8:	00000000 00000021 00000001 00000000     ....!...........
    f7d8:	00000022 00000002 00000000 00000023     "...........#...
    f7e8:	00000001 00000000 00000025 00000003     ........%.......
    f7f8:	00000000 00000026 00000004 00000000     ....&...........
    f808:	00000027 00000002 00000000 00000032     '...........2...
    f818:	00000001 00000000 00000048 00000001     ........H.......
    f828:	00000001 00000056 00000001 00000001     ....V...........
    f838:	00000057 00000000 00000000 00000057     W...........W...
	...
    f850:	00000057 00000000 00000000 00000057     W...........W...
	...
    f868:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    f884:	00000014 00007d00 00000015 00007d00     .....}.......}..
    f894:	00000016 00007d00 00000017 00008000     .....}..........
    f8a4:	00000012 00000001 00000013 00000001     ................
    f8b4:	00000030 00000000 00000031 00000000     0.......1.......
    f8c4:	00000032 00000000 00000033 00000000     2.......3.......
    f8d4:	00000034 00000000 00000035 00000001     4.......5.......
    f8e4:	00000036 00000000 00000037 00000001     6.......7.......
    f8f4:	00000038 00000001 00000039 00000000     8.......9.......
    f904:	0000003a 00000000 0000003b 00000000     :.......;.......
    f914:	0000003c 00000001 0000003d 00000000     <.......=.......
    f924:	0000003e 00000000 0000003f 00000000     >.......?.......
    f934:	00000040 00000000 00000041 00000000     @.......A.......
    f944:	00000042 00000000 00000043 00000000     B.......C.......
    f954:	00000044 00000000 00000045 00000000     D.......E.......
    f964:	00000046 00000000 00000047 00000000     F.......G.......
    f974:	00000048 00000000 00000049 00000000     H.......I.......
    f984:	0000004a 00000000 0000004b 00000000     J.......K.......
    f994:	0000004c 00000001 0000004d 00000001     L.......M.......
    f9a4:	0000004e 00000000 0000004f 00000000     N.......O.......
    f9b4:	00000050 00000001 00000051 00000001     P.......Q.......
    f9c4:	00000052 00000001 00000053 00000001     R.......S.......
    f9d4:	00000054 00000001 00000055 00000000     T.......U.......
    f9e4:	00000056 00000001 00000057 00000000     V.......W.......
    f9f4:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0000fa28 <Flexcan_aCtrlConfigPB>:
    fa28:	00000003 00000000 00000000 00000000     ................
    fa38:	00000060 00000000 00000100 00000003     `...............
    fa48:	00000004 00000005 0000000b 00000000     ................
    fa58:	00000004 00000004 00000005 0000000b     ................
	...
    fa70:	00008475 00008521                       u...!...

0000fa78 <aIrqConfiguration>:
    fa78:	0000005c 00000f01 0000c9a1 0000005d     \...........]...
    fa88:	00000f01 0000c9b1 0000005f 00000f01     ........_.......
    fa98:	0000c9c1                                ....

0000fa9c <intCtrlConfig>:
    fa9c:	00000003 0000fa78                       ....x...

0000faa4 <Mcu_Config>:
    faa4:	0000005a 00000000 00000001 00000001     Z...............
    fab4:	0000ffa8 0000f630 0000ffb4              ....0.......

0000fac0 <OsIf_xPredefinedConfig>:
    fac0:	00000000 02dc6c00                       .....l..

0000fac8 <OsIf_apxPredefinedConfig>:
    fac8:	0000fac0                                ....

0000facc <Platform_uConfiguration>:
    facc:	0000fad4                                ....

0000fad0 <Platform_Config>:
    fad0:	0000facc                                ....

0000fad4 <ipwConfig>:
    fad4:	0000fa9c 00000000                       ........

0000fadc <g_pin_mux_InitConfigArr>:
    fadc:	4004c000 400ff0c0 00000010 00000002     ...@...@........
    faec:	00000001 00000002 00000000 00000000     ................
    fafc:	00000000 00000100 4004c000 400ff0c0     ...........@...@
    fb0c:	0000000f 00000002 00000001 00000002     ................
	...
    fb28:	00000100 4004c000 400ff0c0 00000000     .......@...@....
    fb38:	00000002 00000001 00000002 00000000     ................
	...
    fb50:	00000100 4004c000 400ff0c0 00000011     .......@...@....
    fb60:	00000002 00000001 00000001 00000000     ................
	...
    fb7c:	4004d000 400ff100 0000000c 00000002     ...@...@........
    fb8c:	00000001 00000001 00000000 00000000     ................
	...
    fba4:	40049000 400ff000 0000000c 00000002     ...@...@........
    fbb4:	00000001 00000001 00000000 00000000     ................
	...
    fbcc:	4004b000 400ff080 00000008 00000002     ...@...@........
    fbdc:	00000001 00000002 00000000 00000000     ................
	...
    fbf4:	4004b000 400ff080 00000009 00000002     ...@...@........
    fc04:	00000001 00000002 00000000 00000000     ................
	...
    fc1c:	4004b000 400ff080 0000000a 00000002     ...@...@........
    fc2c:	00000001 00000002 00000000 00000000     ................
	...
    fc44:	4004b000 400ff080 0000000b 00000002     ...@...@........
    fc54:	00000001 00000002 00000000 00000000     ................
	...
    fc6c:	4004b000 400ff080 0000000c 00000002     ...@...@........
    fc7c:	00000001 00000002 00000000 00000000     ................
	...
    fc94:	4004b000 400ff080 0000000d 00000002     ...@...@........
    fca4:	00000001 00000002 00000000 00000000     ................
	...
    fcbc:	4004b000 400ff080 0000000e 00000002     ...@...@........
    fccc:	00000001 00000002 00000000 00000000     ................
	...
    fce4:	4004b000 400ff080 0000000f 00000002     ...@...@........
    fcf4:	00000001 00000002 00000000 00000000     ................
	...
    fd0c:	4004b000 00000000 00000011 00000002     ...@............
    fd1c:	00000003 00000001 00000000 00000000     ................
	...
    fd34:	4004b000 00000000 00000010 00000002     ...@............
    fd44:	00000003 00000001 00000000 00000000     ................
	...

0000fd5c <au8Port_PartitionList>:
    fd5c:	00000001                                ....

0000fd60 <au32Port_PinToPartitionMap>:
    fd60:	00000001 00000001 00000001 00000001     ................
    fd70:	00000001 00000001 00000001 00000001     ................
    fd80:	00000001 00000001 00000001 00000001     ................
    fd90:	00000001 00000001 00000001 00000001     ................

0000fda0 <Port_au16NoUnUsedPadsArrayDefault>:
    fda0:	00010000 00030002 00070006 00090008     ................
    fdb0:	000d000b 000f000e 00110010 00210020     ............ .!.
    fdc0:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
    fdd0:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
    fde0:	00410040 00430042 00470046 00620061     @.A.B.C.F.G.a.b.
    fdf0:	00640063 00660065 00680067 006a0069     c.d.e.f.g.h.i.j.
    fe00:	006c006b 006e006d 00810080 00830082     k.l.m.n.........
    fe10:	00850084 00870086 00890088 008b008a     ................
    fe20:	008e008d 0090008f                       ........

0000fe28 <Port_UnUsedPin>:
    fe28:	00000100 00000001 00000000              ............

0000fe34 <Port_aPinConfigDefault>:
    fe34:	00000070 00000100 00000001 00000002     p...............
    fe44:	00010001 00000051 00000300 00000000     ....Q...........
    fe54:	00000001 00010000 00000050 00000300     ........P.......
    fe64:	00000000 00000001 00010000 0000006f     ............o...
    fe74:	00000100 00000001 00000002 00010001     ................
    fe84:	00000060 00000100 00000001 00000002     `...............
    fe94:	00010001 00000071 00000100 00000000     ....q...........
    fea4:	00000001 00010001 0000008c 00000100     ................
    feb4:	00000000 00000001 00010001 0000000c     ................
    fec4:	00000100 00000000 00000001 00010001     ................
    fed4:	00000048 00000100 00000000 00000002     H...............
    fee4:	00010001 00000049 00000100 00000000     ....I...........
    fef4:	00000002 00010001 0000004a 00000100     ........J.......
    ff04:	00000000 00000002 00010001 0000004b     ............K...
    ff14:	00000100 00000000 00000002 00010001     ................
    ff24:	0000004c 00000100 00000000 00000002     L...............
    ff34:	00010001 0000004d 00000100 00000000     ....M...........
    ff44:	00000002 00010001 0000004e 00000100     ........N.......
    ff54:	00000000 00000002 00010001 0000004f     ............O...
    ff64:	00000100 00000000 00000002 00010001     ................

0000ff74 <Port_Config>:
    ff74:	00440010 0000fda0 0000fe28 0000fe34     ..D.....(...4...
	...
    ff8c:	0000fd60 0000fd5c 0000fadc              `...\.......

0000ff98 <Power_Ip_RCM_ConfigPB>:
	...

0000ffa0 <Power_Ip_PMC_ConfigPB>:
    ffa0:	00000000                                ....

0000ffa4 <Power_Ip_SMC_ConfigPB>:
    ffa4:	00000000                                ....

0000ffa8 <Power_Ip_aModeConfigPB>:
	...

0000ffb4 <Power_Ip_HwIPsConfigPB>:
    ffb4:	0000ff98 0000ffa0 0000ffa4              ............

0000ffc0 <_aInitStr.0>:
    ffc0:	00000000 54540000 45522052 53454747     ......TTR REGGES
    ffd0:	00000000                                ....

0000ffd4 <_aV2C.0>:
    ffd4:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0000ffe4 <__INIT_TABLE>:
    ffe4:	00000002 	.word	0x00000002
    ffe8:	1fff8b10 	.word	0x1fff8b10
    ffec:	0001000c 	.word	0x0001000c
    fff0:	00010028 	.word	0x00010028
    fff4:	1fff8800 	.word	0x1fff8800
    fff8:	00000000 	.word	0x00000000
    fffc:	00000310 	.word	0x00000310

00010000 <__ZERO_TABLE>:
   10000:	00000001 	.word	0x00000001
   10004:	1fff8b30 	.word	0x1fff8b30
   10008:	1fff9650 	.word	0x1fff9650
