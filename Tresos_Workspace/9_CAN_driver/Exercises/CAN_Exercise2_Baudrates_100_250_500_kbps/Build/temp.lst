
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00000c5f 	.word	0x00000c5f
  10:	00000c61 	.word	0x00000c61
  14:	00000c63 	.word	0x00000c63
  18:	00000c65 	.word	0x00000c65
	...
  2c:	00000c67 	.word	0x00000c67
  30:	00000c69 	.word	0x00000c69
  34:	00000000 	.word	0x00000000
  38:	00000c6b 	.word	0x00000c6b
  3c:	00000c6d 	.word	0x00000c6d
  40:	00000c6f 	.word	0x00000c6f
  44:	00000c6f 	.word	0x00000c6f
  48:	00000c6f 	.word	0x00000c6f
  4c:	00000c6f 	.word	0x00000c6f
  50:	00000c6f 	.word	0x00000c6f
  54:	00000c6f 	.word	0x00000c6f
  58:	00000c6f 	.word	0x00000c6f
  5c:	00000c6f 	.word	0x00000c6f
  60:	00000c6f 	.word	0x00000c6f
  64:	00000c6f 	.word	0x00000c6f
  68:	00000c6f 	.word	0x00000c6f
  6c:	00000c6f 	.word	0x00000c6f
  70:	00000c6f 	.word	0x00000c6f
  74:	00000c6f 	.word	0x00000c6f
  78:	00000c6f 	.word	0x00000c6f
  7c:	00000c6f 	.word	0x00000c6f
  80:	00000c6f 	.word	0x00000c6f
  84:	00000c6f 	.word	0x00000c6f
  88:	00000c6f 	.word	0x00000c6f
  8c:	00000c6f 	.word	0x00000c6f
  90:	00000c6f 	.word	0x00000c6f
  94:	00000c6f 	.word	0x00000c6f
  98:	00000c6f 	.word	0x00000c6f
  9c:	00000c6f 	.word	0x00000c6f
  a0:	00000c6f 	.word	0x00000c6f
  a4:	00000c6f 	.word	0x00000c6f
  a8:	00000c6f 	.word	0x00000c6f
  ac:	00000c6f 	.word	0x00000c6f
  b0:	00000c6f 	.word	0x00000c6f
  b4:	00000c6f 	.word	0x00000c6f
  b8:	00000c6f 	.word	0x00000c6f
  bc:	00000c6f 	.word	0x00000c6f
  c0:	00000c6f 	.word	0x00000c6f
  c4:	00000c6f 	.word	0x00000c6f
  c8:	00000c6f 	.word	0x00000c6f
  cc:	00000c6f 	.word	0x00000c6f
  d0:	00000c6f 	.word	0x00000c6f
  d4:	00000c6f 	.word	0x00000c6f
  d8:	00000c6f 	.word	0x00000c6f
  dc:	00000c6f 	.word	0x00000c6f
  e0:	00000c6f 	.word	0x00000c6f
  e4:	00000c6f 	.word	0x00000c6f
  e8:	00000c6f 	.word	0x00000c6f
  ec:	00000c6f 	.word	0x00000c6f
  f0:	00000c6f 	.word	0x00000c6f
  f4:	00000c6f 	.word	0x00000c6f
  f8:	00000c6f 	.word	0x00000c6f
  fc:	00000c6f 	.word	0x00000c6f
 100:	00000c6f 	.word	0x00000c6f
 104:	00000c6f 	.word	0x00000c6f
 108:	00000c6f 	.word	0x00000c6f
 10c:	00000c6f 	.word	0x00000c6f
 110:	00000c6f 	.word	0x00000c6f
 114:	00000c6f 	.word	0x00000c6f
 118:	00000c6f 	.word	0x00000c6f
 11c:	00000c6f 	.word	0x00000c6f
 120:	00000c6f 	.word	0x00000c6f
 124:	00000c6f 	.word	0x00000c6f
 128:	00000c6f 	.word	0x00000c6f
 12c:	00000c6f 	.word	0x00000c6f
 130:	00000c6f 	.word	0x00000c6f
 134:	00000c6f 	.word	0x00000c6f
 138:	00000c6f 	.word	0x00000c6f
 13c:	00000c6f 	.word	0x00000c6f
 140:	00000c6f 	.word	0x00000c6f
 144:	00000c6f 	.word	0x00000c6f
 148:	00000c6f 	.word	0x00000c6f
 14c:	00000c6f 	.word	0x00000c6f
 150:	00000c6f 	.word	0x00000c6f
 154:	00000c6f 	.word	0x00000c6f
 158:	00000c6f 	.word	0x00000c6f
 15c:	00000c6f 	.word	0x00000c6f
 160:	00000c6f 	.word	0x00000c6f
 164:	00000c6f 	.word	0x00000c6f
 168:	00000c6f 	.word	0x00000c6f
 16c:	00000c6f 	.word	0x00000c6f
 170:	00000c6f 	.word	0x00000c6f
 174:	00000c6f 	.word	0x00000c6f
 178:	00000c6f 	.word	0x00000c6f
 17c:	00000c6f 	.word	0x00000c6f
 180:	00000c6f 	.word	0x00000c6f
 184:	00000c6f 	.word	0x00000c6f
 188:	00000c6f 	.word	0x00000c6f
 18c:	00000c6f 	.word	0x00000c6f
 190:	00000c6f 	.word	0x00000c6f
 194:	00000c6f 	.word	0x00000c6f
 198:	00000c6f 	.word	0x00000c6f
 19c:	00000c6f 	.word	0x00000c6f
 1a0:	00000c6f 	.word	0x00000c6f
 1a4:	00000c6f 	.word	0x00000c6f
 1a8:	00000c6f 	.word	0x00000c6f
 1ac:	00000c6f 	.word	0x00000c6f
 1b0:	00000c6f 	.word	0x00000c6f
 1b4:	00000c6f 	.word	0x00000c6f
 1b8:	00000c6f 	.word	0x00000c6f
 1bc:	00000c6f 	.word	0x00000c6f
 1c0:	00000c6f 	.word	0x00000c6f
 1c4:	00000c6f 	.word	0x00000c6f
 1c8:	00000c6f 	.word	0x00000c6f
 1cc:	00000c6f 	.word	0x00000c6f
 1d0:	00000c6f 	.word	0x00000c6f
 1d4:	00000c6f 	.word	0x00000c6f
 1d8:	00000c6f 	.word	0x00000c6f
 1dc:	00000c6f 	.word	0x00000c6f
 1e0:	00000c6f 	.word	0x00000c6f
 1e4:	00000c6f 	.word	0x00000c6f
 1e8:	00000c6f 	.word	0x00000c6f
 1ec:	00000c6f 	.word	0x00000c6f
 1f0:	00000c6f 	.word	0x00000c6f
 1f4:	00000c6f 	.word	0x00000c6f
 1f8:	00000c6f 	.word	0x00000c6f
 1fc:	00000c6f 	.word	0x00000c6f
 200:	00000c6f 	.word	0x00000c6f
 204:	00000c6f 	.word	0x00000c6f
 208:	00000c6f 	.word	0x00000c6f
 20c:	00000c6f 	.word	0x00000c6f
 210:	00000c6f 	.word	0x00000c6f
 214:	00000c6f 	.word	0x00000c6f
 218:	00000c6f 	.word	0x00000c6f
 21c:	00000c6f 	.word	0x00000c6f
 220:	00000c6f 	.word	0x00000c6f
 224:	00000c6f 	.word	0x00000c6f
 228:	00000c6f 	.word	0x00000c6f
 22c:	00000c6f 	.word	0x00000c6f
 230:	00000c6f 	.word	0x00000c6f
 234:	00000c6f 	.word	0x00000c6f
 238:	00000c6f 	.word	0x00000c6f
 23c:	00000c6f 	.word	0x00000c6f
 240:	00000c6f 	.word	0x00000c6f
 244:	00000c6f 	.word	0x00000c6f
 248:	00000c6f 	.word	0x00000c6f
 24c:	00000c6f 	.word	0x00000c6f
 250:	00000c6f 	.word	0x00000c6f
 254:	00000c6f 	.word	0x00000c6f
 258:	00000c6f 	.word	0x00000c6f
 25c:	00000c6f 	.word	0x00000c6f
 260:	00000c6f 	.word	0x00000c6f
 264:	00000c6f 	.word	0x00000c6f
 268:	00000c6f 	.word	0x00000c6f
 26c:	00000c6f 	.word	0x00000c6f
 270:	00000c6f 	.word	0x00000c6f
 274:	00000c6f 	.word	0x00000c6f
 278:	00000c6f 	.word	0x00000c6f
 27c:	00000c6f 	.word	0x00000c6f
 280:	00000c6f 	.word	0x00000c6f
 284:	00000c6f 	.word	0x00000c6f
 288:	00000c6f 	.word	0x00000c6f
 28c:	00000c6f 	.word	0x00000c6f
 290:	00000c6f 	.word	0x00000c6f
 294:	00000c6f 	.word	0x00000c6f
 298:	00000c6f 	.word	0x00000c6f
 29c:	00000c6f 	.word	0x00000c6f
 2a0:	00000c6f 	.word	0x00000c6f
 2a4:	00000c6f 	.word	0x00000c6f
 2a8:	00000c6f 	.word	0x00000c6f
 2ac:	00000c6f 	.word	0x00000c6f
 2b0:	00000c6f 	.word	0x00000c6f
 2b4:	00000c6f 	.word	0x00000c6f
 2b8:	00000c6f 	.word	0x00000c6f
 2bc:	00000c6f 	.word	0x00000c6f
 2c0:	00000c6f 	.word	0x00000c6f
 2c4:	00000c6f 	.word	0x00000c6f
 2c8:	00000c6f 	.word	0x00000c6f
 2cc:	00000c6f 	.word	0x00000c6f
 2d0:	00000c6f 	.word	0x00000c6f
 2d4:	00000c6f 	.word	0x00000c6f
 2d8:	00000c6f 	.word	0x00000c6f
 2dc:	00000c6f 	.word	0x00000c6f
 2e0:	00000c6f 	.word	0x00000c6f
 2e4:	00000c6f 	.word	0x00000c6f
 2e8:	00000c6f 	.word	0x00000c6f
 2ec:	00000c6f 	.word	0x00000c6f
 2f0:	00000c6f 	.word	0x00000c6f
 2f4:	00000c6f 	.word	0x00000c6f
 2f8:	00000c6f 	.word	0x00000c6f
 2fc:	00000c6f 	.word	0x00000c6f
 300:	00000c6f 	.word	0x00000c6f
 304:	00000c6f 	.word	0x00000c6f
 308:	00000c6f 	.word	0x00000c6f
 30c:	00000c6f 	.word	0x00000c6f

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fb23 	bl	acc <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fbe2 	bl	c54 <startup_go_to_user_mode>
     490:	f000 fa66 	bl	960 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff9188 	.word	0x1fff9188

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fb2d 	bl	bf8 <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void EcuM_Init( void );

/*this is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f001 f9d0 	bl	1c68 <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f001 f980 	bl	1bd0 <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do{
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f001 f990 	bl	1c02 <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }
    while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <CanIf_ControllerBusOff>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerBusOff(uint8 ControllerId)
{
     8fc:	b082      	sub	sp, #8
     8fe:	4603      	mov	r3, r0
     900:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
     904:	bf00      	nop
     906:	b002      	add	sp, #8
     908:	4770      	bx	lr

0000090a <CanIf_ControllerModeIndication>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerModeIndication(uint8 ControllerId, Can_ControllerStateType ControllerMode )
{
     90a:	b082      	sub	sp, #8
     90c:	4603      	mov	r3, r0
     90e:	9100      	str	r1, [sp, #0]
     910:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)ControllerMode;
}
     914:	bf00      	nop
     916:	b002      	add	sp, #8
     918:	4770      	bx	lr
	...

0000091c <CanIf_TxConfirmation>:

/*CanIf callback function implementation to set the flag when a message is transmited
this function is called by the interrupt function three times, once every message has
been transmitterd. In reality this function is already implemented in CanIf layer*/
void CanIf_TxConfirmation( PduIdType CanTxPduId )
{
     91c:	b082      	sub	sp, #8
     91e:	4603      	mov	r3, r0
     920:	f8ad 3006 	strh.w	r3, [sp, #6]
    static uint8 counter = 0;
    counter++;
     924:	4b09      	ldr	r3, [pc, #36]	; (94c <CanIf_TxConfirmation+0x30>)
     926:	781b      	ldrb	r3, [r3, #0]
     928:	3301      	adds	r3, #1
     92a:	b2da      	uxtb	r2, r3
     92c:	4b07      	ldr	r3, [pc, #28]	; (94c <CanIf_TxConfirmation+0x30>)
     92e:	701a      	strb	r2, [r3, #0]
    if(counter == 3)
     930:	4b06      	ldr	r3, [pc, #24]	; (94c <CanIf_TxConfirmation+0x30>)
     932:	781b      	ldrb	r3, [r3, #0]
     934:	2b03      	cmp	r3, #3
     936:	d105      	bne.n	944 <CanIf_TxConfirmation+0x28>
    {
        counter = 0;
     938:	4b04      	ldr	r3, [pc, #16]	; (94c <CanIf_TxConfirmation+0x30>)
     93a:	2200      	movs	r2, #0
     93c:	701a      	strb	r2, [r3, #0]
        CanIf_bTxFlag = TRUE;
     93e:	4b04      	ldr	r3, [pc, #16]	; (950 <CanIf_TxConfirmation+0x34>)
     940:	2201      	movs	r2, #1
     942:	701a      	strb	r2, [r3, #0]
    }
    (void)CanTxPduId;
}
     944:	bf00      	nop
     946:	b002      	add	sp, #8
     948:	4770      	bx	lr
     94a:	bf00      	nop
     94c:	1fff8b31 	.word	0x1fff8b31
     950:	1fff8b30 	.word	0x1fff8b30

00000954 <CanIf_RxIndication>:

/*CanIf callback function implementation to set the flag when a message is received
this function is called by the CAN interrupt.
In reality this function is already implemented in CanIf layer*/
void CanIf_RxIndication(const Can_HwType* Mailbox, const PduInfoType* PduInfoPtr )
{
     954:	b082      	sub	sp, #8
     956:	9001      	str	r0, [sp, #4]
     958:	9100      	str	r1, [sp, #0]
    (void)Mailbox;
    /*the received message is store in PduInfoPtr->SduDataPtr*/
    (void)PduInfoPtr;
}
     95a:	bf00      	nop
     95c:	b002      	add	sp, #8
     95e:	4770      	bx	lr

00000960 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     960:	b500      	push	{lr}
     962:	b08b      	sub	sp, #44	; 0x2c
    EcuM_Init();
     964:	f000 f878 	bl	a58 <EcuM_Init>
    Can_PduType PduInfo1;
    Can_PduType PduInfo2;
    Can_PduType PduInfo3;

    /* Set the specified baudrate */
    if (Can_43_FLEXCAN_SetBaudrate(CanController_0, CAN_BAUDRATE_500kbps_ID ) == E_OK) {
     968:	2102      	movs	r1, #2
     96a:	2000      	movs	r0, #0
     96c:	f006 f92e 	bl	6bcc <Can_43_FLEXCAN_SetBaudrate>
     970:	4603      	mov	r3, r0
     972:	2b00      	cmp	r3, #0
     974:	d104      	bne.n	980 <main+0x20>
        SEGGER_RTT_printf( 0, "CAN baud rate set successfully. \n" );
     976:	4932      	ldr	r1, [pc, #200]	; (a40 <main+0xe0>)
     978:	2000      	movs	r0, #0
     97a:	f000 fe6f 	bl	165c <SEGGER_RTT_printf>
     97e:	e003      	b.n	988 <main+0x28>

    } else {
        SEGGER_RTT_printf( 0, "Failed to set CAN baud rate. \n" );
     980:	4930      	ldr	r1, [pc, #192]	; (a44 <main+0xe4>)
     982:	2000      	movs	r0, #0
     984:	f000 fe6a 	bl	165c <SEGGER_RTT_printf>

    /* The CAN module notifies the upper layer (CanIf_ControllerModeIndication) after 
    a successful state transition about the new state. The monitoring whether the 
    requested state is achieved is part of an upper layer module and is not part of 
    the Can module. */
    if (Can_43_FLEXCAN_SetControllerMode( CanController_0, CAN_CS_STARTED ) == E_OK) {
     988:	2101      	movs	r1, #1
     98a:	2000      	movs	r0, #0
     98c:	f006 f956 	bl	6c3c <Can_43_FLEXCAN_SetControllerMode>
     990:	4603      	mov	r3, r0
     992:	2b00      	cmp	r3, #0
     994:	d104      	bne.n	9a0 <main+0x40>
        SEGGER_RTT_printf( 0, "CAN controller state machine set successfully. \n" );
     996:	492c      	ldr	r1, [pc, #176]	; (a48 <main+0xe8>)
     998:	2000      	movs	r0, #0
     99a:	f000 fe5f 	bl	165c <SEGGER_RTT_printf>
     99e:	e003      	b.n	9a8 <main+0x48>

    } else {
        SEGGER_RTT_printf( 0, "Failed to set CAN controller state machine. \n" );
     9a0:	492a      	ldr	r1, [pc, #168]	; (a4c <main+0xec>)
     9a2:	2000      	movs	r0, #0
     9a4:	f000 fe5a 	bl	165c <SEGGER_RTT_printf>
    }

    /*Fill the first PDU structure with the information to be transmitted*/
    PduInfo1.id = 0x123u;
     9a8:	f240 1323 	movw	r3, #291	; 0x123
     9ac:	9307      	str	r3, [sp, #28]
    PduInfo1.swPduHandle = 0u;
     9ae:	2300      	movs	r3, #0
     9b0:	f8ad 3020 	strh.w	r3, [sp, #32]
    PduInfo1.length = 8u;
     9b4:	2308      	movs	r3, #8
     9b6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    PduInfo1.sdu = Can_au8Sdu8bytes;
     9ba:	4b25      	ldr	r3, [pc, #148]	; (a50 <main+0xf0>)
     9bc:	9309      	str	r3, [sp, #36]	; 0x24
    /*Fill the second PDU structure with the information to be transmitted*/
    PduInfo2.id = 0x133u;
     9be:	f240 1333 	movw	r3, #307	; 0x133
     9c2:	9304      	str	r3, [sp, #16]
    PduInfo2.swPduHandle = 1u;
     9c4:	2301      	movs	r3, #1
     9c6:	f8ad 3014 	strh.w	r3, [sp, #20]
    PduInfo2.length = 8u;
     9ca:	2308      	movs	r3, #8
     9cc:	f88d 3016 	strb.w	r3, [sp, #22]
    PduInfo2.sdu = Can_au8Sdu8bytes;
     9d0:	4b1f      	ldr	r3, [pc, #124]	; (a50 <main+0xf0>)
     9d2:	9306      	str	r3, [sp, #24]
    /*Fill the third PDU structure with the information to be transmitted*/
    PduInfo3.id = 0x143u;
     9d4:	f240 1343 	movw	r3, #323	; 0x143
     9d8:	9301      	str	r3, [sp, #4]
    PduInfo3.swPduHandle = 2u;
     9da:	2302      	movs	r3, #2
     9dc:	f8ad 3008 	strh.w	r3, [sp, #8]
    PduInfo3.length = 8u;
     9e0:	2308      	movs	r3, #8
     9e2:	f88d 300a 	strb.w	r3, [sp, #10]
    PduInfo3.sdu = Can_au8Sdu8bytes;
     9e6:	4b1a      	ldr	r3, [pc, #104]	; (a50 <main+0xf0>)
     9e8:	9303      	str	r3, [sp, #12]

    while( 1u )
    {
        /*Set the three messages to be transmitted, all messages will be
        transmitted by the CAN interrupt*/
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo1 );
     9ea:	ab07      	add	r3, sp, #28
     9ec:	4619      	mov	r1, r3
     9ee:	2000      	movs	r0, #0
     9f0:	f006 fae6 	bl	6fc0 <Can_43_FLEXCAN_Write>
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo2 );
     9f4:	ab04      	add	r3, sp, #16
     9f6:	4619      	mov	r1, r3
     9f8:	2000      	movs	r0, #0
     9fa:	f006 fae1 	bl	6fc0 <Can_43_FLEXCAN_Write>
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo3 );
     9fe:	ab01      	add	r3, sp, #4
     a00:	4619      	mov	r1, r3
     a02:	2000      	movs	r0, #0
     a04:	f006 fadc 	bl	6fc0 <Can_43_FLEXCAN_Write>

        /*wait until the CAN interrupt transmit message, waiting is not the
        suitable way, but good enough for ilustration purposes, flag is 
        updated by the callback function CanIf_TxConfirmation*/
        while( CanIf_bTxFlag == FALSE );
     a08:	bf00      	nop
     a0a:	4b12      	ldr	r3, [pc, #72]	; (a54 <main+0xf4>)
     a0c:	781b      	ldrb	r3, [r3, #0]
     a0e:	f083 0301 	eor.w	r3, r3, #1
     a12:	b2db      	uxtb	r3, r3
     a14:	2b00      	cmp	r3, #0
     a16:	d1f8      	bne.n	a0a <main+0xaa>
        /*Clear the Tx flag*/
        CanIf_bTxFlag = FALSE;
     a18:	4b0e      	ldr	r3, [pc, #56]	; (a54 <main+0xf4>)
     a1a:	2200      	movs	r2, #0
     a1c:	701a      	strb	r2, [r3, #0]

        /*increase some values just for ilustration purposes*/
        Can_au8Sdu8bytes[0]++;
     a1e:	4b0c      	ldr	r3, [pc, #48]	; (a50 <main+0xf0>)
     a20:	781b      	ldrb	r3, [r3, #0]
     a22:	3301      	adds	r3, #1
     a24:	b2da      	uxtb	r2, r3
     a26:	4b0a      	ldr	r3, [pc, #40]	; (a50 <main+0xf0>)
     a28:	701a      	strb	r2, [r3, #0]
        Can_au8Sdu8bytes[7]++;
     a2a:	4b09      	ldr	r3, [pc, #36]	; (a50 <main+0xf0>)
     a2c:	79db      	ldrb	r3, [r3, #7]
     a2e:	3301      	adds	r3, #1
     a30:	b2da      	uxtb	r2, r3
     a32:	4b07      	ldr	r3, [pc, #28]	; (a50 <main+0xf0>)
     a34:	71da      	strb	r2, [r3, #7]
        
        Delay( 5000u );
     a36:	f241 3088 	movw	r0, #5000	; 0x1388
     a3a:	f7ff ff39 	bl	8b0 <Delay>
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo1 );
     a3e:	e7d4      	b.n	9ea <main+0x8a>
     a40:	0000ec7c 	.word	0x0000ec7c
     a44:	0000eca0 	.word	0x0000eca0
     a48:	0000ecc0 	.word	0x0000ecc0
     a4c:	0000ecf4 	.word	0x0000ecf4
     a50:	1fff8b10 	.word	0x1fff8b10
     a54:	1fff8b30 	.word	0x1fff8b30

00000a58 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     a58:	b508      	push	{r3, lr}
    /*Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h*/
    Mcu_Init( &Mcu_Config );
     a5a:	480b      	ldr	r0, [pc, #44]	; (a88 <EcuM_Init+0x30>)
     a5c:	f004 fe44 	bl	56e8 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     a60:	2000      	movs	r0, #0
     a62:	f004 fe95 	bl	5790 <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     a66:	2000      	movs	r0, #0
     a68:	f004 feb6 	bl	57d8 <Mcu_SetMode>
    /*Init the internal tick reference Systick Timer*/
    OsIf_Init( NULL_PTR );
     a6c:	2000      	movs	r0, #0
     a6e:	f001 f8a6 	bl	1bbe <OsIf_Init>
    
    /*enable and setup interrupts in use by the Can Driver*/
    Platform_Init( NULL_PTR );
     a72:	2000      	movs	r0, #0
     a74:	f000 ffa0 	bl	19b8 <Platform_Init>

    /*Apply all the Pin Port microcontroller configuration*/
    Port_Init( &Port_Config );
     a78:	4804      	ldr	r0, [pc, #16]	; (a8c <EcuM_Init+0x34>)
     a7a:	f005 fa37 	bl	5eec <Port_Init>

    /*init the FlexCAN2 with the paramters set in Tresos WITHOUT loop back mode*/
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );
     a7e:	4804      	ldr	r0, [pc, #16]	; (a90 <EcuM_Init+0x38>)
     a80:	f006 f836 	bl	6af0 <Can_43_FLEXCAN_Init>
}
     a84:	bf00      	nop
     a86:	bd08      	pop	{r3, pc}
     a88:	0000fa98 	.word	0x0000fa98
     a8c:	0000ff68 	.word	0x0000ff68
     a90:	0000f60c 	.word	0x0000f60c

00000a94 <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     a94:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     a96:	f3ef 8310 	mrs	r3, PRIMASK
     a9a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     a9c:	4623      	mov	r3, r4
}
     a9e:	4618      	mov	r0, r3
     aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
     aa4:	4770      	bx	lr

00000aa6 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     aa6:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     aa8:	f3ef 8310 	mrs	r3, PRIMASK
     aac:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     aae:	4623      	mov	r3, r4
}
     ab0:	4618      	mov	r0, r3
     ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
     ab6:	4770      	bx	lr

00000ab8 <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     ab8:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     aba:	f3ef 8310 	mrs	r3, PRIMASK
     abe:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     ac0:	4623      	mov	r3, r4
}
     ac2:	4618      	mov	r0, r3
     ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
     ac8:	4770      	bx	lr
	...

00000acc <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
     acc:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
     ace:	2300      	movs	r3, #0
     ad0:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
     ad2:	2300      	movs	r3, #0
     ad4:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
     ad6:	2300      	movs	r3, #0
     ad8:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
     ada:	2300      	movs	r3, #0
     adc:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
     ade:	4b44      	ldr	r3, [pc, #272]	; (bf0 <__BSS_SRAM_SIZE+0xd0>)
     ae0:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
     ae2:	4b44      	ldr	r3, [pc, #272]	; (bf4 <__BSS_SRAM_SIZE+0xd4>)
     ae4:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
     ae6:	9b05      	ldr	r3, [sp, #20]
     ae8:	681b      	ldr	r3, [r3, #0]
     aea:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
     aec:	9b05      	ldr	r3, [sp, #20]
     aee:	3304      	adds	r3, #4
     af0:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
     af2:	9b05      	ldr	r3, [sp, #20]
     af4:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
     af6:	2300      	movs	r3, #0
     af8:	9309      	str	r3, [sp, #36]	; 0x24
     afa:	e03d      	b.n	b78 <__BSS_SRAM_SIZE+0x58>
    {
        rom = copy_layout[i].rom_start;
     afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
     afe:	4613      	mov	r3, r2
     b00:	005b      	lsls	r3, r3, #1
     b02:	4413      	add	r3, r2
     b04:	009b      	lsls	r3, r3, #2
     b06:	461a      	mov	r2, r3
     b08:	9b03      	ldr	r3, [sp, #12]
     b0a:	4413      	add	r3, r2
     b0c:	685b      	ldr	r3, [r3, #4]
     b0e:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
     b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b12:	4613      	mov	r3, r2
     b14:	005b      	lsls	r3, r3, #1
     b16:	4413      	add	r3, r2
     b18:	009b      	lsls	r3, r3, #2
     b1a:	461a      	mov	r2, r3
     b1c:	9b03      	ldr	r3, [sp, #12]
     b1e:	4413      	add	r3, r2
     b20:	681b      	ldr	r3, [r3, #0]
     b22:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
     b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b26:	4613      	mov	r3, r2
     b28:	005b      	lsls	r3, r3, #1
     b2a:	4413      	add	r3, r2
     b2c:	009b      	lsls	r3, r3, #2
     b2e:	461a      	mov	r2, r3
     b30:	9b03      	ldr	r3, [sp, #12]
     b32:	4413      	add	r3, r2
     b34:	689b      	ldr	r3, [r3, #8]
     b36:	4619      	mov	r1, r3
     b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b3a:	4613      	mov	r3, r2
     b3c:	005b      	lsls	r3, r3, #1
     b3e:	4413      	add	r3, r2
     b40:	009b      	lsls	r3, r3, #2
     b42:	461a      	mov	r2, r3
     b44:	9b03      	ldr	r3, [sp, #12]
     b46:	4413      	add	r3, r2
     b48:	685b      	ldr	r3, [r3, #4]
     b4a:	1acb      	subs	r3, r1, r3
     b4c:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     b4e:	2300      	movs	r3, #0
     b50:	9308      	str	r3, [sp, #32]
     b52:	e00a      	b.n	b6a <__BSS_SRAM_SIZE+0x4a>
        {
            ram[j] = rom[j];
     b54:	9a00      	ldr	r2, [sp, #0]
     b56:	9b08      	ldr	r3, [sp, #32]
     b58:	441a      	add	r2, r3
     b5a:	9901      	ldr	r1, [sp, #4]
     b5c:	9b08      	ldr	r3, [sp, #32]
     b5e:	440b      	add	r3, r1
     b60:	7812      	ldrb	r2, [r2, #0]
     b62:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     b64:	9b08      	ldr	r3, [sp, #32]
     b66:	3301      	adds	r3, #1
     b68:	9308      	str	r3, [sp, #32]
     b6a:	9a08      	ldr	r2, [sp, #32]
     b6c:	9b06      	ldr	r3, [sp, #24]
     b6e:	429a      	cmp	r2, r3
     b70:	d3f0      	bcc.n	b54 <__BSS_SRAM_SIZE+0x34>
    for(i = 0; i < len; i++)
     b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b74:	3301      	adds	r3, #1
     b76:	9309      	str	r3, [sp, #36]	; 0x24
     b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
     b7a:	9b07      	ldr	r3, [sp, #28]
     b7c:	429a      	cmp	r2, r3
     b7e:	d3bd      	bcc.n	afc <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
     b80:	9b04      	ldr	r3, [sp, #16]
     b82:	681b      	ldr	r3, [r3, #0]
     b84:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
     b86:	9b04      	ldr	r3, [sp, #16]
     b88:	3304      	adds	r3, #4
     b8a:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
     b8c:	9b04      	ldr	r3, [sp, #16]
     b8e:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
     b90:	2300      	movs	r3, #0
     b92:	9309      	str	r3, [sp, #36]	; 0x24
     b94:	e024      	b.n	be0 <__BSS_SRAM_SIZE+0xc0>
    {
        ram = zero_layout[i].ram_start;
     b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b98:	00db      	lsls	r3, r3, #3
     b9a:	9a02      	ldr	r2, [sp, #8]
     b9c:	4413      	add	r3, r2
     b9e:	681b      	ldr	r3, [r3, #0]
     ba0:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
     ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ba4:	00db      	lsls	r3, r3, #3
     ba6:	9a02      	ldr	r2, [sp, #8]
     ba8:	4413      	add	r3, r2
     baa:	685b      	ldr	r3, [r3, #4]
     bac:	4619      	mov	r1, r3
     bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bb0:	00db      	lsls	r3, r3, #3
     bb2:	9a02      	ldr	r2, [sp, #8]
     bb4:	4413      	add	r3, r2
     bb6:	681b      	ldr	r3, [r3, #0]
     bb8:	1acb      	subs	r3, r1, r3
     bba:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
     bbc:	2300      	movs	r3, #0
     bbe:	9308      	str	r3, [sp, #32]
     bc0:	e007      	b.n	bd2 <__BSS_SRAM_SIZE+0xb2>
        {
            ram[j] = 0U;
     bc2:	9a01      	ldr	r2, [sp, #4]
     bc4:	9b08      	ldr	r3, [sp, #32]
     bc6:	4413      	add	r3, r2
     bc8:	2200      	movs	r2, #0
     bca:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
     bcc:	9b08      	ldr	r3, [sp, #32]
     bce:	3301      	adds	r3, #1
     bd0:	9308      	str	r3, [sp, #32]
     bd2:	9a08      	ldr	r2, [sp, #32]
     bd4:	9b06      	ldr	r3, [sp, #24]
     bd6:	429a      	cmp	r2, r3
     bd8:	d3f3      	bcc.n	bc2 <__BSS_SRAM_SIZE+0xa2>
    for(i = 0; i < len; i++)
     bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bdc:	3301      	adds	r3, #1
     bde:	9309      	str	r3, [sp, #36]	; 0x24
     be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
     be2:	9b07      	ldr	r3, [sp, #28]
     be4:	429a      	cmp	r2, r3
     be6:	d3d6      	bcc.n	b96 <__BSS_SRAM_SIZE+0x76>
        }
    }
}
     be8:	bf00      	nop
     bea:	bf00      	nop
     bec:	b00a      	add	sp, #40	; 0x28
     bee:	4770      	bx	lr
     bf0:	0000ffd8 	.word	0x0000ffd8
     bf4:	0000fff4 	.word	0x0000fff4

00000bf8 <sys_m4_cache_init>:
{
     bf8:	b084      	sub	sp, #16
     bfa:	4603      	mov	r3, r0
     bfc:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
     c00:	2300      	movs	r3, #0
     c02:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
     c06:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c0a:	2b00      	cmp	r3, #0
     c0c:	d118      	bne.n	c40 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
     c0e:	4b10      	ldr	r3, [pc, #64]	; (c50 <sys_m4_cache_init+0x58>)
     c10:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
     c14:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
     c16:	4b0e      	ldr	r3, [pc, #56]	; (c50 <sys_m4_cache_init+0x58>)
     c18:	681b      	ldr	r3, [r3, #0]
     c1a:	4a0d      	ldr	r2, [pc, #52]	; (c50 <sys_m4_cache_init+0x58>)
     c1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     c20:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
     c22:	bf00      	nop
     c24:	4b0a      	ldr	r3, [pc, #40]	; (c50 <sys_m4_cache_init+0x58>)
     c26:	681b      	ldr	r3, [r3, #0]
     c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     c30:	d0f8      	beq.n	c24 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
     c32:	4b07      	ldr	r3, [pc, #28]	; (c50 <sys_m4_cache_init+0x58>)
     c34:	681b      	ldr	r3, [r3, #0]
     c36:	4a06      	ldr	r2, [pc, #24]	; (c50 <sys_m4_cache_init+0x58>)
     c38:	f043 0301 	orr.w	r3, r3, #1
     c3c:	6013      	str	r3, [r2, #0]
     c3e:	e002      	b.n	c46 <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
     c40:	2301      	movs	r3, #1
     c42:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
     c46:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     c4a:	4618      	mov	r0, r3
     c4c:	b004      	add	sp, #16
     c4e:	4770      	bx	lr
     c50:	e0082000 	.word	0xe0082000

00000c54 <startup_go_to_user_mode>:
}
     c54:	bf00      	nop
     c56:	4770      	bx	lr

00000c58 <Sys_GetCoreID>:
    return 0U;
     c58:	2300      	movs	r3, #0
}
     c5a:	4618      	mov	r0, r3
     c5c:	4770      	bx	lr

00000c5e <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
     c5e:	e7fe      	b.n	c5e <HardFault_Handler>

00000c60 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
     c60:	e7fe      	b.n	c60 <MemManage_Handler>

00000c62 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
     c62:	e7fe      	b.n	c62 <BusFault_Handler>

00000c64 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
     c64:	e7fe      	b.n	c64 <UsageFault_Handler>

00000c66 <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
     c66:	e7fe      	b.n	c66 <SVC_Handler>

00000c68 <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
     c68:	e7fe      	b.n	c68 <DebugMon_Handler>

00000c6a <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
     c6a:	e7fe      	b.n	c6a <PendSV_Handler>

00000c6c <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
     c6c:	e7fe      	b.n	c6c <SysTick_Handler>

00000c6e <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
     c6e:	e7fe      	b.n	c6e <undefined_handler>

00000c70 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
     c70:	b500      	push	{lr}
     c72:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
     c74:	4b26      	ldr	r3, [pc, #152]	; (d10 <_DoInit+0xa0>)
     c76:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
     c78:	22a8      	movs	r2, #168	; 0xa8
     c7a:	2100      	movs	r1, #0
     c7c:	9800      	ldr	r0, [sp, #0]
     c7e:	f000 fd0f 	bl	16a0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
     c82:	9b00      	ldr	r3, [sp, #0]
     c84:	2203      	movs	r2, #3
     c86:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
     c88:	9b00      	ldr	r3, [sp, #0]
     c8a:	2203      	movs	r2, #3
     c8c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
     c8e:	9b00      	ldr	r3, [sp, #0]
     c90:	4a20      	ldr	r2, [pc, #128]	; (d14 <_DoInit+0xa4>)
     c92:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
     c94:	9b00      	ldr	r3, [sp, #0]
     c96:	4a20      	ldr	r2, [pc, #128]	; (d18 <_DoInit+0xa8>)
     c98:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
     c9a:	9b00      	ldr	r3, [sp, #0]
     c9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     ca0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
     ca2:	9b00      	ldr	r3, [sp, #0]
     ca4:	2200      	movs	r2, #0
     ca6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
     ca8:	9b00      	ldr	r3, [sp, #0]
     caa:	2200      	movs	r2, #0
     cac:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     cae:	9b00      	ldr	r3, [sp, #0]
     cb0:	2200      	movs	r2, #0
     cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
     cb4:	9b00      	ldr	r3, [sp, #0]
     cb6:	4a17      	ldr	r2, [pc, #92]	; (d14 <_DoInit+0xa4>)
     cb8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
     cba:	9b00      	ldr	r3, [sp, #0]
     cbc:	4a17      	ldr	r2, [pc, #92]	; (d1c <_DoInit+0xac>)
     cbe:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
     cc0:	9b00      	ldr	r3, [sp, #0]
     cc2:	2210      	movs	r2, #16
     cc4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
     cc6:	9b00      	ldr	r3, [sp, #0]
     cc8:	2200      	movs	r2, #0
     cca:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
     ccc:	9b00      	ldr	r3, [sp, #0]
     cce:	2200      	movs	r2, #0
     cd0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
     cd2:	9b00      	ldr	r3, [sp, #0]
     cd4:	2200      	movs	r2, #0
     cd6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     cd8:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     cdc:	2300      	movs	r3, #0
     cde:	9301      	str	r3, [sp, #4]
     ce0:	e00c      	b.n	cfc <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
     ce2:	9b01      	ldr	r3, [sp, #4]
     ce4:	f1c3 030f 	rsb	r3, r3, #15
     ce8:	4a0d      	ldr	r2, [pc, #52]	; (d20 <_DoInit+0xb0>)
     cea:	5cd1      	ldrb	r1, [r2, r3]
     cec:	9a00      	ldr	r2, [sp, #0]
     cee:	9b01      	ldr	r3, [sp, #4]
     cf0:	4413      	add	r3, r2
     cf2:	460a      	mov	r2, r1
     cf4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
     cf6:	9b01      	ldr	r3, [sp, #4]
     cf8:	3301      	adds	r3, #1
     cfa:	9301      	str	r3, [sp, #4]
     cfc:	9b01      	ldr	r3, [sp, #4]
     cfe:	2b0f      	cmp	r3, #15
     d00:	d9ef      	bls.n	ce2 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
     d02:	f3bf 8f5f 	dmb	sy
}
     d06:	bf00      	nop
     d08:	b003      	add	sp, #12
     d0a:	f85d fb04 	ldr.w	pc, [sp], #4
     d0e:	bf00      	nop
     d10:	1fff918c 	.word	0x1fff918c
     d14:	0000ed24 	.word	0x0000ed24
     d18:	1fff9234 	.word	0x1fff9234
     d1c:	1fff9634 	.word	0x1fff9634
     d20:	0000ffb4 	.word	0x0000ffb4

00000d24 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
     d24:	b500      	push	{lr}
     d26:	b08b      	sub	sp, #44	; 0x2c
     d28:	9003      	str	r0, [sp, #12]
     d2a:	9102      	str	r1, [sp, #8]
     d2c:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
     d2e:	2300      	movs	r3, #0
     d30:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
     d32:	9b03      	ldr	r3, [sp, #12]
     d34:	68db      	ldr	r3, [r3, #12]
     d36:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
     d38:	9b03      	ldr	r3, [sp, #12]
     d3a:	691b      	ldr	r3, [r3, #16]
     d3c:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
     d3e:	9a06      	ldr	r2, [sp, #24]
     d40:	9b07      	ldr	r3, [sp, #28]
     d42:	429a      	cmp	r2, r3
     d44:	d905      	bls.n	d52 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
     d46:	9a06      	ldr	r2, [sp, #24]
     d48:	9b07      	ldr	r3, [sp, #28]
     d4a:	1ad3      	subs	r3, r2, r3
     d4c:	3b01      	subs	r3, #1
     d4e:	9309      	str	r3, [sp, #36]	; 0x24
     d50:	e007      	b.n	d62 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
     d52:	9b03      	ldr	r3, [sp, #12]
     d54:	689a      	ldr	r2, [r3, #8]
     d56:	9906      	ldr	r1, [sp, #24]
     d58:	9b07      	ldr	r3, [sp, #28]
     d5a:	1acb      	subs	r3, r1, r3
     d5c:	4413      	add	r3, r2
     d5e:	3b01      	subs	r3, #1
     d60:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
     d62:	9b03      	ldr	r3, [sp, #12]
     d64:	689a      	ldr	r2, [r3, #8]
     d66:	9b07      	ldr	r3, [sp, #28]
     d68:	1ad3      	subs	r3, r2, r3
     d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d6c:	4293      	cmp	r3, r2
     d6e:	bf28      	it	cs
     d70:	4613      	movcs	r3, r2
     d72:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
     d74:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d76:	9b01      	ldr	r3, [sp, #4]
     d78:	4293      	cmp	r3, r2
     d7a:	bf28      	it	cs
     d7c:	4613      	movcs	r3, r2
     d7e:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     d80:	9b03      	ldr	r3, [sp, #12]
     d82:	685a      	ldr	r2, [r3, #4]
     d84:	9b07      	ldr	r3, [sp, #28]
     d86:	4413      	add	r3, r2
     d88:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
     d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
     d8c:	9902      	ldr	r1, [sp, #8]
     d8e:	9805      	ldr	r0, [sp, #20]
     d90:	f000 fc78 	bl	1684 <memcpy>
    NumBytesWritten += NumBytesToWrite;
     d94:	9a08      	ldr	r2, [sp, #32]
     d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
     d98:	4413      	add	r3, r2
     d9a:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
     d9c:	9a02      	ldr	r2, [sp, #8]
     d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     da0:	4413      	add	r3, r2
     da2:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
     da4:	9a01      	ldr	r2, [sp, #4]
     da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     da8:	1ad3      	subs	r3, r2, r3
     daa:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
     dac:	9a07      	ldr	r2, [sp, #28]
     dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
     db0:	4413      	add	r3, r2
     db2:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
     db4:	9b03      	ldr	r3, [sp, #12]
     db6:	689b      	ldr	r3, [r3, #8]
     db8:	9a07      	ldr	r2, [sp, #28]
     dba:	429a      	cmp	r2, r3
     dbc:	d101      	bne.n	dc2 <_WriteBlocking+0x9e>
      WrOff = 0u;
     dbe:	2300      	movs	r3, #0
     dc0:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     dc2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
     dc6:	9b03      	ldr	r3, [sp, #12]
     dc8:	9a07      	ldr	r2, [sp, #28]
     dca:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
     dcc:	9b01      	ldr	r3, [sp, #4]
     dce:	2b00      	cmp	r3, #0
     dd0:	d1b2      	bne.n	d38 <_WriteBlocking+0x14>
  return NumBytesWritten;
     dd2:	9b08      	ldr	r3, [sp, #32]
}
     dd4:	4618      	mov	r0, r3
     dd6:	b00b      	add	sp, #44	; 0x2c
     dd8:	f85d fb04 	ldr.w	pc, [sp], #4

00000ddc <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
     ddc:	b500      	push	{lr}
     dde:	b089      	sub	sp, #36	; 0x24
     de0:	9003      	str	r0, [sp, #12]
     de2:	9102      	str	r1, [sp, #8]
     de4:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
     de6:	9b03      	ldr	r3, [sp, #12]
     de8:	68db      	ldr	r3, [r3, #12]
     dea:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
     dec:	9b03      	ldr	r3, [sp, #12]
     dee:	689a      	ldr	r2, [r3, #8]
     df0:	9b07      	ldr	r3, [sp, #28]
     df2:	1ad3      	subs	r3, r2, r3
     df4:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
     df6:	9a06      	ldr	r2, [sp, #24]
     df8:	9b01      	ldr	r3, [sp, #4]
     dfa:	429a      	cmp	r2, r3
     dfc:	d911      	bls.n	e22 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     dfe:	9b03      	ldr	r3, [sp, #12]
     e00:	685a      	ldr	r2, [r3, #4]
     e02:	9b07      	ldr	r3, [sp, #28]
     e04:	4413      	add	r3, r2
     e06:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
     e08:	9a01      	ldr	r2, [sp, #4]
     e0a:	9902      	ldr	r1, [sp, #8]
     e0c:	9804      	ldr	r0, [sp, #16]
     e0e:	f000 fc39 	bl	1684 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e12:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
     e16:	9a07      	ldr	r2, [sp, #28]
     e18:	9b01      	ldr	r3, [sp, #4]
     e1a:	441a      	add	r2, r3
     e1c:	9b03      	ldr	r3, [sp, #12]
     e1e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
     e20:	e01f      	b.n	e62 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
     e22:	9b06      	ldr	r3, [sp, #24]
     e24:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
     e26:	9b03      	ldr	r3, [sp, #12]
     e28:	685a      	ldr	r2, [r3, #4]
     e2a:	9b07      	ldr	r3, [sp, #28]
     e2c:	4413      	add	r3, r2
     e2e:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
     e30:	9a05      	ldr	r2, [sp, #20]
     e32:	9902      	ldr	r1, [sp, #8]
     e34:	9804      	ldr	r0, [sp, #16]
     e36:	f000 fc25 	bl	1684 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
     e3a:	9a01      	ldr	r2, [sp, #4]
     e3c:	9b06      	ldr	r3, [sp, #24]
     e3e:	1ad3      	subs	r3, r2, r3
     e40:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
     e42:	9b03      	ldr	r3, [sp, #12]
     e44:	685b      	ldr	r3, [r3, #4]
     e46:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
     e48:	9a02      	ldr	r2, [sp, #8]
     e4a:	9b06      	ldr	r3, [sp, #24]
     e4c:	4413      	add	r3, r2
     e4e:	9a05      	ldr	r2, [sp, #20]
     e50:	4619      	mov	r1, r3
     e52:	9804      	ldr	r0, [sp, #16]
     e54:	f000 fc16 	bl	1684 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
     e58:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
     e5c:	9b03      	ldr	r3, [sp, #12]
     e5e:	9a05      	ldr	r2, [sp, #20]
     e60:	60da      	str	r2, [r3, #12]
}
     e62:	bf00      	nop
     e64:	b009      	add	sp, #36	; 0x24
     e66:	f85d fb04 	ldr.w	pc, [sp], #4

00000e6a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
     e6a:	b086      	sub	sp, #24
     e6c:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
     e6e:	9b01      	ldr	r3, [sp, #4]
     e70:	691b      	ldr	r3, [r3, #16]
     e72:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
     e74:	9b01      	ldr	r3, [sp, #4]
     e76:	68db      	ldr	r3, [r3, #12]
     e78:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
     e7a:	9a04      	ldr	r2, [sp, #16]
     e7c:	9b03      	ldr	r3, [sp, #12]
     e7e:	429a      	cmp	r2, r3
     e80:	d808      	bhi.n	e94 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
     e82:	9b01      	ldr	r3, [sp, #4]
     e84:	689a      	ldr	r2, [r3, #8]
     e86:	9b03      	ldr	r3, [sp, #12]
     e88:	1ad2      	subs	r2, r2, r3
     e8a:	9b04      	ldr	r3, [sp, #16]
     e8c:	4413      	add	r3, r2
     e8e:	3b01      	subs	r3, #1
     e90:	9305      	str	r3, [sp, #20]
     e92:	e004      	b.n	e9e <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
     e94:	9a04      	ldr	r2, [sp, #16]
     e96:	9b03      	ldr	r3, [sp, #12]
     e98:	1ad3      	subs	r3, r2, r3
     e9a:	3b01      	subs	r3, #1
     e9c:	9305      	str	r3, [sp, #20]
  }
  return r;
     e9e:	9b05      	ldr	r3, [sp, #20]
}
     ea0:	4618      	mov	r0, r3
     ea2:	b006      	add	sp, #24
     ea4:	4770      	bx	lr
	...

00000ea8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     ea8:	b500      	push	{lr}
     eaa:	b089      	sub	sp, #36	; 0x24
     eac:	9003      	str	r0, [sp, #12]
     eae:	9102      	str	r1, [sp, #8]
     eb0:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
     eb2:	9b02      	ldr	r3, [sp, #8]
     eb4:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
     eb6:	9b03      	ldr	r3, [sp, #12]
     eb8:	1c5a      	adds	r2, r3, #1
     eba:	4613      	mov	r3, r2
     ebc:	005b      	lsls	r3, r3, #1
     ebe:	4413      	add	r3, r2
     ec0:	00db      	lsls	r3, r3, #3
     ec2:	4a20      	ldr	r2, [pc, #128]	; (f44 <SEGGER_RTT_WriteNoLock+0x9c>)
     ec4:	4413      	add	r3, r2
     ec6:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
     ec8:	9b05      	ldr	r3, [sp, #20]
     eca:	695b      	ldr	r3, [r3, #20]
     ecc:	2b02      	cmp	r3, #2
     ece:	d029      	beq.n	f24 <SEGGER_RTT_WriteNoLock+0x7c>
     ed0:	2b02      	cmp	r3, #2
     ed2:	d82e      	bhi.n	f32 <SEGGER_RTT_WriteNoLock+0x8a>
     ed4:	2b00      	cmp	r3, #0
     ed6:	d002      	beq.n	ede <SEGGER_RTT_WriteNoLock+0x36>
     ed8:	2b01      	cmp	r3, #1
     eda:	d013      	beq.n	f04 <SEGGER_RTT_WriteNoLock+0x5c>
     edc:	e029      	b.n	f32 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
     ede:	9805      	ldr	r0, [sp, #20]
     ee0:	f7ff ffc3 	bl	e6a <_GetAvailWriteSpace>
     ee4:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
     ee6:	9a04      	ldr	r2, [sp, #16]
     ee8:	9b01      	ldr	r3, [sp, #4]
     eea:	429a      	cmp	r2, r3
     eec:	d202      	bcs.n	ef4 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
     eee:	2300      	movs	r3, #0
     ef0:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
     ef2:	e021      	b.n	f38 <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
     ef4:	9b01      	ldr	r3, [sp, #4]
     ef6:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
     ef8:	9a01      	ldr	r2, [sp, #4]
     efa:	9906      	ldr	r1, [sp, #24]
     efc:	9805      	ldr	r0, [sp, #20]
     efe:	f7ff ff6d 	bl	ddc <_WriteNoCheck>
    break;
     f02:	e019      	b.n	f38 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
     f04:	9805      	ldr	r0, [sp, #20]
     f06:	f7ff ffb0 	bl	e6a <_GetAvailWriteSpace>
     f0a:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
     f0c:	9a01      	ldr	r2, [sp, #4]
     f0e:	9b04      	ldr	r3, [sp, #16]
     f10:	4293      	cmp	r3, r2
     f12:	bf28      	it	cs
     f14:	4613      	movcs	r3, r2
     f16:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
     f18:	9a07      	ldr	r2, [sp, #28]
     f1a:	9906      	ldr	r1, [sp, #24]
     f1c:	9805      	ldr	r0, [sp, #20]
     f1e:	f7ff ff5d 	bl	ddc <_WriteNoCheck>
    break;
     f22:	e009      	b.n	f38 <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
     f24:	9a01      	ldr	r2, [sp, #4]
     f26:	9906      	ldr	r1, [sp, #24]
     f28:	9805      	ldr	r0, [sp, #20]
     f2a:	f7ff fefb 	bl	d24 <_WriteBlocking>
     f2e:	9007      	str	r0, [sp, #28]
    break;
     f30:	e002      	b.n	f38 <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
     f32:	2300      	movs	r3, #0
     f34:	9307      	str	r3, [sp, #28]
    break;
     f36:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
     f38:	9b07      	ldr	r3, [sp, #28]
}
     f3a:	4618      	mov	r0, r3
     f3c:	b009      	add	sp, #36	; 0x24
     f3e:	f85d fb04 	ldr.w	pc, [sp], #4
     f42:	bf00      	nop
     f44:	1fff918c 	.word	0x1fff918c

00000f48 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
     f48:	b500      	push	{lr}
     f4a:	b089      	sub	sp, #36	; 0x24
     f4c:	9003      	str	r0, [sp, #12]
     f4e:	9102      	str	r1, [sp, #8]
     f50:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
     f52:	4b0f      	ldr	r3, [pc, #60]	; (f90 <SEGGER_RTT_Write+0x48>)
     f54:	9307      	str	r3, [sp, #28]
     f56:	9b07      	ldr	r3, [sp, #28]
     f58:	781b      	ldrb	r3, [r3, #0]
     f5a:	b2db      	uxtb	r3, r3
     f5c:	2b53      	cmp	r3, #83	; 0x53
     f5e:	d001      	beq.n	f64 <SEGGER_RTT_Write+0x1c>
     f60:	f7ff fe86 	bl	c70 <_DoInit>
  SEGGER_RTT_LOCK();
     f64:	f3ef 8311 	mrs	r3, BASEPRI
     f68:	f04f 0120 	mov.w	r1, #32
     f6c:	f381 8811 	msr	BASEPRI, r1
     f70:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
     f72:	9a01      	ldr	r2, [sp, #4]
     f74:	9902      	ldr	r1, [sp, #8]
     f76:	9803      	ldr	r0, [sp, #12]
     f78:	f7ff ff96 	bl	ea8 <SEGGER_RTT_WriteNoLock>
     f7c:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
     f7e:	9b06      	ldr	r3, [sp, #24]
     f80:	f383 8811 	msr	BASEPRI, r3
  return Status;
     f84:	9b05      	ldr	r3, [sp, #20]
}
     f86:	4618      	mov	r0, r3
     f88:	b009      	add	sp, #36	; 0x24
     f8a:	f85d fb04 	ldr.w	pc, [sp], #4
     f8e:	bf00      	nop
     f90:	1fff918c 	.word	0x1fff918c

00000f94 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
     f94:	b500      	push	{lr}
     f96:	b085      	sub	sp, #20
     f98:	9001      	str	r0, [sp, #4]
     f9a:	460b      	mov	r3, r1
     f9c:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
     fa0:	9b01      	ldr	r3, [sp, #4]
     fa2:	689b      	ldr	r3, [r3, #8]
     fa4:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
     fa6:	9b03      	ldr	r3, [sp, #12]
     fa8:	1c5a      	adds	r2, r3, #1
     faa:	9b01      	ldr	r3, [sp, #4]
     fac:	685b      	ldr	r3, [r3, #4]
     fae:	429a      	cmp	r2, r3
     fb0:	d80f      	bhi.n	fd2 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
     fb2:	9b01      	ldr	r3, [sp, #4]
     fb4:	681a      	ldr	r2, [r3, #0]
     fb6:	9b03      	ldr	r3, [sp, #12]
     fb8:	4413      	add	r3, r2
     fba:	f89d 2003 	ldrb.w	r2, [sp, #3]
     fbe:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
     fc0:	9b03      	ldr	r3, [sp, #12]
     fc2:	1c5a      	adds	r2, r3, #1
     fc4:	9b01      	ldr	r3, [sp, #4]
     fc6:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
     fc8:	9b01      	ldr	r3, [sp, #4]
     fca:	68db      	ldr	r3, [r3, #12]
     fcc:	1c5a      	adds	r2, r3, #1
     fce:	9b01      	ldr	r3, [sp, #4]
     fd0:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
     fd2:	9b01      	ldr	r3, [sp, #4]
     fd4:	689a      	ldr	r2, [r3, #8]
     fd6:	9b01      	ldr	r3, [sp, #4]
     fd8:	685b      	ldr	r3, [r3, #4]
     fda:	429a      	cmp	r2, r3
     fdc:	d115      	bne.n	100a <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
     fde:	9b01      	ldr	r3, [sp, #4]
     fe0:	6918      	ldr	r0, [r3, #16]
     fe2:	9b01      	ldr	r3, [sp, #4]
     fe4:	6819      	ldr	r1, [r3, #0]
     fe6:	9b01      	ldr	r3, [sp, #4]
     fe8:	689b      	ldr	r3, [r3, #8]
     fea:	461a      	mov	r2, r3
     fec:	f7ff ffac 	bl	f48 <SEGGER_RTT_Write>
     ff0:	4602      	mov	r2, r0
     ff2:	9b01      	ldr	r3, [sp, #4]
     ff4:	689b      	ldr	r3, [r3, #8]
     ff6:	429a      	cmp	r2, r3
     ff8:	d004      	beq.n	1004 <_StoreChar+0x70>
      p->ReturnValue = -1;
     ffa:	9b01      	ldr	r3, [sp, #4]
     ffc:	f04f 32ff 	mov.w	r2, #4294967295
    1000:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1002:	e002      	b.n	100a <_StoreChar+0x76>
      p->Cnt = 0u;
    1004:	9b01      	ldr	r3, [sp, #4]
    1006:	2200      	movs	r2, #0
    1008:	609a      	str	r2, [r3, #8]
}
    100a:	bf00      	nop
    100c:	b005      	add	sp, #20
    100e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00001014 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1014:	b500      	push	{lr}
    1016:	b08b      	sub	sp, #44	; 0x2c
    1018:	9003      	str	r0, [sp, #12]
    101a:	9102      	str	r1, [sp, #8]
    101c:	9201      	str	r2, [sp, #4]
    101e:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    1020:	9b02      	ldr	r3, [sp, #8]
    1022:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1024:	2301      	movs	r3, #1
    1026:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1028:	2301      	movs	r3, #1
    102a:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    102c:	e007      	b.n	103e <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    102e:	9a08      	ldr	r2, [sp, #32]
    1030:	9b01      	ldr	r3, [sp, #4]
    1032:	fbb2 f3f3 	udiv	r3, r2, r3
    1036:	9308      	str	r3, [sp, #32]
    Width++;
    1038:	9b07      	ldr	r3, [sp, #28]
    103a:	3301      	adds	r3, #1
    103c:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    103e:	9a08      	ldr	r2, [sp, #32]
    1040:	9b01      	ldr	r3, [sp, #4]
    1042:	429a      	cmp	r2, r3
    1044:	d2f3      	bcs.n	102e <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1046:	9a00      	ldr	r2, [sp, #0]
    1048:	9b07      	ldr	r3, [sp, #28]
    104a:	429a      	cmp	r2, r3
    104c:	d901      	bls.n	1052 <_PrintUnsigned+0x3e>
    Width = NumDigits;
    104e:	9b00      	ldr	r3, [sp, #0]
    1050:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    1052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1054:	f003 0301 	and.w	r3, r3, #1
    1058:	2b00      	cmp	r3, #0
    105a:	d128      	bne.n	10ae <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    105c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    105e:	2b00      	cmp	r3, #0
    1060:	d025      	beq.n	10ae <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    1062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1064:	f003 0302 	and.w	r3, r3, #2
    1068:	2b00      	cmp	r3, #0
    106a:	d006      	beq.n	107a <_PrintUnsigned+0x66>
    106c:	9b00      	ldr	r3, [sp, #0]
    106e:	2b00      	cmp	r3, #0
    1070:	d103      	bne.n	107a <_PrintUnsigned+0x66>
        c = '0';
    1072:	2330      	movs	r3, #48	; 0x30
    1074:	f88d 301b 	strb.w	r3, [sp, #27]
    1078:	e002      	b.n	1080 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    107a:	2320      	movs	r3, #32
    107c:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1080:	e00c      	b.n	109c <_PrintUnsigned+0x88>
        FieldWidth--;
    1082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1084:	3b01      	subs	r3, #1
    1086:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1088:	f89d 301b 	ldrb.w	r3, [sp, #27]
    108c:	4619      	mov	r1, r3
    108e:	9803      	ldr	r0, [sp, #12]
    1090:	f7ff ff80 	bl	f94 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1094:	9b03      	ldr	r3, [sp, #12]
    1096:	68db      	ldr	r3, [r3, #12]
    1098:	2b00      	cmp	r3, #0
    109a:	db07      	blt.n	10ac <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    109c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    109e:	2b00      	cmp	r3, #0
    10a0:	d005      	beq.n	10ae <_PrintUnsigned+0x9a>
    10a2:	9a07      	ldr	r2, [sp, #28]
    10a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    10a6:	429a      	cmp	r2, r3
    10a8:	d3eb      	bcc.n	1082 <_PrintUnsigned+0x6e>
    10aa:	e000      	b.n	10ae <_PrintUnsigned+0x9a>
          break;
    10ac:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    10ae:	9b03      	ldr	r3, [sp, #12]
    10b0:	68db      	ldr	r3, [r3, #12]
    10b2:	2b00      	cmp	r3, #0
    10b4:	db55      	blt.n	1162 <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    10b6:	9b00      	ldr	r3, [sp, #0]
    10b8:	2b01      	cmp	r3, #1
    10ba:	d903      	bls.n	10c4 <_PrintUnsigned+0xb0>
        NumDigits--;
    10bc:	9b00      	ldr	r3, [sp, #0]
    10be:	3b01      	subs	r3, #1
    10c0:	9300      	str	r3, [sp, #0]
    10c2:	e009      	b.n	10d8 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    10c4:	9a02      	ldr	r2, [sp, #8]
    10c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10c8:	fbb2 f3f3 	udiv	r3, r2, r3
    10cc:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    10ce:	9a05      	ldr	r2, [sp, #20]
    10d0:	9b01      	ldr	r3, [sp, #4]
    10d2:	429a      	cmp	r2, r3
    10d4:	d200      	bcs.n	10d8 <_PrintUnsigned+0xc4>
          break;
    10d6:	e005      	b.n	10e4 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    10d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10da:	9a01      	ldr	r2, [sp, #4]
    10dc:	fb02 f303 	mul.w	r3, r2, r3
    10e0:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    10e2:	e7e8      	b.n	10b6 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    10e4:	9a02      	ldr	r2, [sp, #8]
    10e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    10e8:	fbb2 f3f3 	udiv	r3, r2, r3
    10ec:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    10ee:	9b05      	ldr	r3, [sp, #20]
    10f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    10f2:	fb02 f303 	mul.w	r3, r2, r3
    10f6:	9a02      	ldr	r2, [sp, #8]
    10f8:	1ad3      	subs	r3, r2, r3
    10fa:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    10fc:	4a1b      	ldr	r2, [pc, #108]	; (116c <_PrintUnsigned+0x158>)
    10fe:	9b05      	ldr	r3, [sp, #20]
    1100:	4413      	add	r3, r2
    1102:	781b      	ldrb	r3, [r3, #0]
    1104:	4619      	mov	r1, r3
    1106:	9803      	ldr	r0, [sp, #12]
    1108:	f7ff ff44 	bl	f94 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    110c:	9b03      	ldr	r3, [sp, #12]
    110e:	68db      	ldr	r3, [r3, #12]
    1110:	2b00      	cmp	r3, #0
    1112:	db08      	blt.n	1126 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1114:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1116:	9b01      	ldr	r3, [sp, #4]
    1118:	fbb2 f3f3 	udiv	r3, r2, r3
    111c:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    111e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1120:	2b00      	cmp	r3, #0
    1122:	d1df      	bne.n	10e4 <_PrintUnsigned+0xd0>
    1124:	e000      	b.n	1128 <_PrintUnsigned+0x114>
        break;
    1126:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    112a:	f003 0301 	and.w	r3, r3, #1
    112e:	2b00      	cmp	r3, #0
    1130:	d017      	beq.n	1162 <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    1132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1134:	2b00      	cmp	r3, #0
    1136:	d014      	beq.n	1162 <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1138:	e00a      	b.n	1150 <_PrintUnsigned+0x13c>
          FieldWidth--;
    113a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    113c:	3b01      	subs	r3, #1
    113e:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    1140:	2120      	movs	r1, #32
    1142:	9803      	ldr	r0, [sp, #12]
    1144:	f7ff ff26 	bl	f94 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1148:	9b03      	ldr	r3, [sp, #12]
    114a:	68db      	ldr	r3, [r3, #12]
    114c:	2b00      	cmp	r3, #0
    114e:	db07      	blt.n	1160 <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1152:	2b00      	cmp	r3, #0
    1154:	d005      	beq.n	1162 <_PrintUnsigned+0x14e>
    1156:	9a07      	ldr	r2, [sp, #28]
    1158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    115a:	429a      	cmp	r2, r3
    115c:	d3ed      	bcc.n	113a <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    115e:	e000      	b.n	1162 <_PrintUnsigned+0x14e>
            break;
    1160:	bf00      	nop
}
    1162:	bf00      	nop
    1164:	b00b      	add	sp, #44	; 0x2c
    1166:	f85d fb04 	ldr.w	pc, [sp], #4
    116a:	bf00      	nop
    116c:	0000ffc8 	.word	0x0000ffc8

00001170 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1170:	b500      	push	{lr}
    1172:	b089      	sub	sp, #36	; 0x24
    1174:	9005      	str	r0, [sp, #20]
    1176:	9104      	str	r1, [sp, #16]
    1178:	9203      	str	r2, [sp, #12]
    117a:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    117c:	9b04      	ldr	r3, [sp, #16]
    117e:	2b00      	cmp	r3, #0
    1180:	bfb8      	it	lt
    1182:	425b      	neglt	r3, r3
    1184:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1186:	2301      	movs	r3, #1
    1188:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    118a:	e007      	b.n	119c <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    118c:	9b03      	ldr	r3, [sp, #12]
    118e:	9a06      	ldr	r2, [sp, #24]
    1190:	fb92 f3f3 	sdiv	r3, r2, r3
    1194:	9306      	str	r3, [sp, #24]
    Width++;
    1196:	9b07      	ldr	r3, [sp, #28]
    1198:	3301      	adds	r3, #1
    119a:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    119c:	9b03      	ldr	r3, [sp, #12]
    119e:	9a06      	ldr	r2, [sp, #24]
    11a0:	429a      	cmp	r2, r3
    11a2:	daf3      	bge.n	118c <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    11a4:	9a02      	ldr	r2, [sp, #8]
    11a6:	9b07      	ldr	r3, [sp, #28]
    11a8:	429a      	cmp	r2, r3
    11aa:	d901      	bls.n	11b0 <_PrintInt+0x40>
    Width = NumDigits;
    11ac:	9b02      	ldr	r3, [sp, #8]
    11ae:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    11b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11b2:	2b00      	cmp	r3, #0
    11b4:	d00a      	beq.n	11cc <_PrintInt+0x5c>
    11b6:	9b04      	ldr	r3, [sp, #16]
    11b8:	2b00      	cmp	r3, #0
    11ba:	db04      	blt.n	11c6 <_PrintInt+0x56>
    11bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11be:	f003 0304 	and.w	r3, r3, #4
    11c2:	2b00      	cmp	r3, #0
    11c4:	d002      	beq.n	11cc <_PrintInt+0x5c>
    FieldWidth--;
    11c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11c8:	3b01      	subs	r3, #1
    11ca:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    11cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11ce:	f003 0302 	and.w	r3, r3, #2
    11d2:	2b00      	cmp	r3, #0
    11d4:	d002      	beq.n	11dc <_PrintInt+0x6c>
    11d6:	9b02      	ldr	r3, [sp, #8]
    11d8:	2b00      	cmp	r3, #0
    11da:	d01c      	beq.n	1216 <_PrintInt+0xa6>
    11dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    11de:	f003 0301 	and.w	r3, r3, #1
    11e2:	2b00      	cmp	r3, #0
    11e4:	d117      	bne.n	1216 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    11e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11e8:	2b00      	cmp	r3, #0
    11ea:	d014      	beq.n	1216 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    11ec:	e00a      	b.n	1204 <_PrintInt+0x94>
        FieldWidth--;
    11ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    11f0:	3b01      	subs	r3, #1
    11f2:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    11f4:	2120      	movs	r1, #32
    11f6:	9805      	ldr	r0, [sp, #20]
    11f8:	f7ff fecc 	bl	f94 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    11fc:	9b05      	ldr	r3, [sp, #20]
    11fe:	68db      	ldr	r3, [r3, #12]
    1200:	2b00      	cmp	r3, #0
    1202:	db07      	blt.n	1214 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1206:	2b00      	cmp	r3, #0
    1208:	d005      	beq.n	1216 <_PrintInt+0xa6>
    120a:	9a07      	ldr	r2, [sp, #28]
    120c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    120e:	429a      	cmp	r2, r3
    1210:	d3ed      	bcc.n	11ee <_PrintInt+0x7e>
    1212:	e000      	b.n	1216 <_PrintInt+0xa6>
          break;
    1214:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1216:	9b05      	ldr	r3, [sp, #20]
    1218:	68db      	ldr	r3, [r3, #12]
    121a:	2b00      	cmp	r3, #0
    121c:	db4a      	blt.n	12b4 <_PrintInt+0x144>
    if (v < 0) {
    121e:	9b04      	ldr	r3, [sp, #16]
    1220:	2b00      	cmp	r3, #0
    1222:	da07      	bge.n	1234 <_PrintInt+0xc4>
      v = -v;
    1224:	9b04      	ldr	r3, [sp, #16]
    1226:	425b      	negs	r3, r3
    1228:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    122a:	212d      	movs	r1, #45	; 0x2d
    122c:	9805      	ldr	r0, [sp, #20]
    122e:	f7ff feb1 	bl	f94 <_StoreChar>
    1232:	e008      	b.n	1246 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1236:	f003 0304 	and.w	r3, r3, #4
    123a:	2b00      	cmp	r3, #0
    123c:	d003      	beq.n	1246 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    123e:	212b      	movs	r1, #43	; 0x2b
    1240:	9805      	ldr	r0, [sp, #20]
    1242:	f7ff fea7 	bl	f94 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1246:	9b05      	ldr	r3, [sp, #20]
    1248:	68db      	ldr	r3, [r3, #12]
    124a:	2b00      	cmp	r3, #0
    124c:	db32      	blt.n	12b4 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    124e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1250:	f003 0302 	and.w	r3, r3, #2
    1254:	2b00      	cmp	r3, #0
    1256:	d01f      	beq.n	1298 <_PrintInt+0x128>
    1258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    125a:	f003 0301 	and.w	r3, r3, #1
    125e:	2b00      	cmp	r3, #0
    1260:	d11a      	bne.n	1298 <_PrintInt+0x128>
    1262:	9b02      	ldr	r3, [sp, #8]
    1264:	2b00      	cmp	r3, #0
    1266:	d117      	bne.n	1298 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    126a:	2b00      	cmp	r3, #0
    126c:	d014      	beq.n	1298 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    126e:	e00a      	b.n	1286 <_PrintInt+0x116>
            FieldWidth--;
    1270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1272:	3b01      	subs	r3, #1
    1274:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1276:	2130      	movs	r1, #48	; 0x30
    1278:	9805      	ldr	r0, [sp, #20]
    127a:	f7ff fe8b 	bl	f94 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    127e:	9b05      	ldr	r3, [sp, #20]
    1280:	68db      	ldr	r3, [r3, #12]
    1282:	2b00      	cmp	r3, #0
    1284:	db07      	blt.n	1296 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1288:	2b00      	cmp	r3, #0
    128a:	d005      	beq.n	1298 <_PrintInt+0x128>
    128c:	9a07      	ldr	r2, [sp, #28]
    128e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1290:	429a      	cmp	r2, r3
    1292:	d3ed      	bcc.n	1270 <_PrintInt+0x100>
    1294:	e000      	b.n	1298 <_PrintInt+0x128>
              break;
    1296:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    1298:	9b05      	ldr	r3, [sp, #20]
    129a:	68db      	ldr	r3, [r3, #12]
    129c:	2b00      	cmp	r3, #0
    129e:	db09      	blt.n	12b4 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    12a0:	9904      	ldr	r1, [sp, #16]
    12a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    12a4:	9301      	str	r3, [sp, #4]
    12a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12a8:	9300      	str	r3, [sp, #0]
    12aa:	9b02      	ldr	r3, [sp, #8]
    12ac:	9a03      	ldr	r2, [sp, #12]
    12ae:	9805      	ldr	r0, [sp, #20]
    12b0:	f7ff feb0 	bl	1014 <_PrintUnsigned>
      }
    }
  }
}
    12b4:	bf00      	nop
    12b6:	b009      	add	sp, #36	; 0x24
    12b8:	f85d fb04 	ldr.w	pc, [sp], #4

000012bc <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    12bc:	b500      	push	{lr}
    12be:	b0a3      	sub	sp, #140	; 0x8c
    12c0:	9005      	str	r0, [sp, #20]
    12c2:	9104      	str	r1, [sp, #16]
    12c4:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    12c6:	ab06      	add	r3, sp, #24
    12c8:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    12ca:	2340      	movs	r3, #64	; 0x40
    12cc:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    12ce:	2300      	movs	r3, #0
    12d0:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    12d2:	9b05      	ldr	r3, [sp, #20]
    12d4:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    12d6:	2300      	movs	r3, #0
    12d8:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    12da:	9b04      	ldr	r3, [sp, #16]
    12dc:	781b      	ldrb	r3, [r3, #0]
    12de:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    12e2:	9b04      	ldr	r3, [sp, #16]
    12e4:	3301      	adds	r3, #1
    12e6:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    12e8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12ec:	2b00      	cmp	r3, #0
    12ee:	f000 819c 	beq.w	162a <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    12f2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    12f6:	2b25      	cmp	r3, #37	; 0x25
    12f8:	f040 818b 	bne.w	1612 <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    12fc:	2300      	movs	r3, #0
    12fe:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    1300:	2301      	movs	r3, #1
    1302:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1304:	9b04      	ldr	r3, [sp, #16]
    1306:	781b      	ldrb	r3, [r3, #0]
    1308:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    130c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1310:	3b23      	subs	r3, #35	; 0x23
    1312:	2b0d      	cmp	r3, #13
    1314:	d83e      	bhi.n	1394 <SEGGER_RTT_vprintf+0xd8>
    1316:	a201      	add	r2, pc, #4	; (adr r2, 131c <SEGGER_RTT_vprintf+0x60>)
    1318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    131c:	00001385 	.word	0x00001385
    1320:	00001395 	.word	0x00001395
    1324:	00001395 	.word	0x00001395
    1328:	00001395 	.word	0x00001395
    132c:	00001395 	.word	0x00001395
    1330:	00001395 	.word	0x00001395
    1334:	00001395 	.word	0x00001395
    1338:	00001395 	.word	0x00001395
    133c:	00001375 	.word	0x00001375
    1340:	00001395 	.word	0x00001395
    1344:	00001355 	.word	0x00001355
    1348:	00001395 	.word	0x00001395
    134c:	00001395 	.word	0x00001395
    1350:	00001365 	.word	0x00001365
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1354:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1356:	f043 0301 	orr.w	r3, r3, #1
    135a:	931e      	str	r3, [sp, #120]	; 0x78
    135c:	9b04      	ldr	r3, [sp, #16]
    135e:	3301      	adds	r3, #1
    1360:	9304      	str	r3, [sp, #16]
    1362:	e01a      	b.n	139a <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1364:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1366:	f043 0302 	orr.w	r3, r3, #2
    136a:	931e      	str	r3, [sp, #120]	; 0x78
    136c:	9b04      	ldr	r3, [sp, #16]
    136e:	3301      	adds	r3, #1
    1370:	9304      	str	r3, [sp, #16]
    1372:	e012      	b.n	139a <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1374:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1376:	f043 0304 	orr.w	r3, r3, #4
    137a:	931e      	str	r3, [sp, #120]	; 0x78
    137c:	9b04      	ldr	r3, [sp, #16]
    137e:	3301      	adds	r3, #1
    1380:	9304      	str	r3, [sp, #16]
    1382:	e00a      	b.n	139a <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1384:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1386:	f043 0308 	orr.w	r3, r3, #8
    138a:	931e      	str	r3, [sp, #120]	; 0x78
    138c:	9b04      	ldr	r3, [sp, #16]
    138e:	3301      	adds	r3, #1
    1390:	9304      	str	r3, [sp, #16]
    1392:	e002      	b.n	139a <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    1394:	2300      	movs	r3, #0
    1396:	9320      	str	r3, [sp, #128]	; 0x80
    1398:	bf00      	nop
        }
      } while (v);
    139a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    139c:	2b00      	cmp	r3, #0
    139e:	d1b1      	bne.n	1304 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    13a0:	2300      	movs	r3, #0
    13a2:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    13a4:	9b04      	ldr	r3, [sp, #16]
    13a6:	781b      	ldrb	r3, [r3, #0]
    13a8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    13ac:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13b0:	2b2f      	cmp	r3, #47	; 0x2f
    13b2:	d912      	bls.n	13da <SEGGER_RTT_vprintf+0x11e>
    13b4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13b8:	2b39      	cmp	r3, #57	; 0x39
    13ba:	d80e      	bhi.n	13da <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    13bc:	9b04      	ldr	r3, [sp, #16]
    13be:	3301      	adds	r3, #1
    13c0:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    13c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    13c4:	4613      	mov	r3, r2
    13c6:	009b      	lsls	r3, r3, #2
    13c8:	4413      	add	r3, r2
    13ca:	005b      	lsls	r3, r3, #1
    13cc:	461a      	mov	r2, r3
    13ce:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13d2:	4413      	add	r3, r2
    13d4:	3b30      	subs	r3, #48	; 0x30
    13d6:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    13d8:	e7e4      	b.n	13a4 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    13da:	2300      	movs	r3, #0
    13dc:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    13de:	9b04      	ldr	r3, [sp, #16]
    13e0:	781b      	ldrb	r3, [r3, #0]
    13e2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    13e6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    13ea:	2b2e      	cmp	r3, #46	; 0x2e
    13ec:	d11d      	bne.n	142a <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    13ee:	9b04      	ldr	r3, [sp, #16]
    13f0:	3301      	adds	r3, #1
    13f2:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    13f4:	9b04      	ldr	r3, [sp, #16]
    13f6:	781b      	ldrb	r3, [r3, #0]
    13f8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    13fc:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1400:	2b2f      	cmp	r3, #47	; 0x2f
    1402:	d912      	bls.n	142a <SEGGER_RTT_vprintf+0x16e>
    1404:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1408:	2b39      	cmp	r3, #57	; 0x39
    140a:	d80e      	bhi.n	142a <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    140c:	9b04      	ldr	r3, [sp, #16]
    140e:	3301      	adds	r3, #1
    1410:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1412:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1414:	4613      	mov	r3, r2
    1416:	009b      	lsls	r3, r3, #2
    1418:	4413      	add	r3, r2
    141a:	005b      	lsls	r3, r3, #1
    141c:	461a      	mov	r2, r3
    141e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1422:	4413      	add	r3, r2
    1424:	3b30      	subs	r3, #48	; 0x30
    1426:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1428:	e7e4      	b.n	13f4 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    142a:	9b04      	ldr	r3, [sp, #16]
    142c:	781b      	ldrb	r3, [r3, #0]
    142e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1432:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1436:	2b6c      	cmp	r3, #108	; 0x6c
    1438:	d003      	beq.n	1442 <SEGGER_RTT_vprintf+0x186>
    143a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    143e:	2b68      	cmp	r3, #104	; 0x68
    1440:	d107      	bne.n	1452 <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1442:	9b04      	ldr	r3, [sp, #16]
    1444:	3301      	adds	r3, #1
    1446:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1448:	9b04      	ldr	r3, [sp, #16]
    144a:	781b      	ldrb	r3, [r3, #0]
    144c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1450:	e7ef      	b.n	1432 <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1452:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1456:	2b25      	cmp	r3, #37	; 0x25
    1458:	f000 80d0 	beq.w	15fc <SEGGER_RTT_vprintf+0x340>
    145c:	2b25      	cmp	r3, #37	; 0x25
    145e:	f2c0 80d3 	blt.w	1608 <SEGGER_RTT_vprintf+0x34c>
    1462:	2b78      	cmp	r3, #120	; 0x78
    1464:	f300 80d0 	bgt.w	1608 <SEGGER_RTT_vprintf+0x34c>
    1468:	2b58      	cmp	r3, #88	; 0x58
    146a:	f2c0 80cd 	blt.w	1608 <SEGGER_RTT_vprintf+0x34c>
    146e:	3b58      	subs	r3, #88	; 0x58
    1470:	2b20      	cmp	r3, #32
    1472:	f200 80c9 	bhi.w	1608 <SEGGER_RTT_vprintf+0x34c>
    1476:	a201      	add	r2, pc, #4	; (adr r2, 147c <SEGGER_RTT_vprintf+0x1c0>)
    1478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    147c:	0000156d 	.word	0x0000156d
    1480:	00001609 	.word	0x00001609
    1484:	00001609 	.word	0x00001609
    1488:	00001609 	.word	0x00001609
    148c:	00001609 	.word	0x00001609
    1490:	00001609 	.word	0x00001609
    1494:	00001609 	.word	0x00001609
    1498:	00001609 	.word	0x00001609
    149c:	00001609 	.word	0x00001609
    14a0:	00001609 	.word	0x00001609
    14a4:	00001609 	.word	0x00001609
    14a8:	00001501 	.word	0x00001501
    14ac:	00001525 	.word	0x00001525
    14b0:	00001609 	.word	0x00001609
    14b4:	00001609 	.word	0x00001609
    14b8:	00001609 	.word	0x00001609
    14bc:	00001609 	.word	0x00001609
    14c0:	00001609 	.word	0x00001609
    14c4:	00001609 	.word	0x00001609
    14c8:	00001609 	.word	0x00001609
    14cc:	00001609 	.word	0x00001609
    14d0:	00001609 	.word	0x00001609
    14d4:	00001609 	.word	0x00001609
    14d8:	00001609 	.word	0x00001609
    14dc:	000015d9 	.word	0x000015d9
    14e0:	00001609 	.word	0x00001609
    14e4:	00001609 	.word	0x00001609
    14e8:	00001591 	.word	0x00001591
    14ec:	00001609 	.word	0x00001609
    14f0:	00001549 	.word	0x00001549
    14f4:	00001609 	.word	0x00001609
    14f8:	00001609 	.word	0x00001609
    14fc:	0000156d 	.word	0x0000156d
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1500:	9b03      	ldr	r3, [sp, #12]
    1502:	681b      	ldr	r3, [r3, #0]
    1504:	1d19      	adds	r1, r3, #4
    1506:	9a03      	ldr	r2, [sp, #12]
    1508:	6011      	str	r1, [r2, #0]
    150a:	681b      	ldr	r3, [r3, #0]
    150c:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    150e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1510:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1514:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1518:	ab16      	add	r3, sp, #88	; 0x58
    151a:	4611      	mov	r1, r2
    151c:	4618      	mov	r0, r3
    151e:	f7ff fd39 	bl	f94 <_StoreChar>
        break;
    1522:	e072      	b.n	160a <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1524:	9b03      	ldr	r3, [sp, #12]
    1526:	681b      	ldr	r3, [r3, #0]
    1528:	1d19      	adds	r1, r3, #4
    152a:	9a03      	ldr	r2, [sp, #12]
    152c:	6011      	str	r1, [r2, #0]
    152e:	681b      	ldr	r3, [r3, #0]
    1530:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    1532:	a816      	add	r0, sp, #88	; 0x58
    1534:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1536:	9301      	str	r3, [sp, #4]
    1538:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    153a:	9300      	str	r3, [sp, #0]
    153c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    153e:	220a      	movs	r2, #10
    1540:	9920      	ldr	r1, [sp, #128]	; 0x80
    1542:	f7ff fe15 	bl	1170 <_PrintInt>
        break;
    1546:	e060      	b.n	160a <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1548:	9b03      	ldr	r3, [sp, #12]
    154a:	681b      	ldr	r3, [r3, #0]
    154c:	1d19      	adds	r1, r3, #4
    154e:	9a03      	ldr	r2, [sp, #12]
    1550:	6011      	str	r1, [r2, #0]
    1552:	681b      	ldr	r3, [r3, #0]
    1554:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1556:	9920      	ldr	r1, [sp, #128]	; 0x80
    1558:	a816      	add	r0, sp, #88	; 0x58
    155a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    155c:	9301      	str	r3, [sp, #4]
    155e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1560:	9300      	str	r3, [sp, #0]
    1562:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1564:	220a      	movs	r2, #10
    1566:	f7ff fd55 	bl	1014 <_PrintUnsigned>
        break;
    156a:	e04e      	b.n	160a <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    156c:	9b03      	ldr	r3, [sp, #12]
    156e:	681b      	ldr	r3, [r3, #0]
    1570:	1d19      	adds	r1, r3, #4
    1572:	9a03      	ldr	r2, [sp, #12]
    1574:	6011      	str	r1, [r2, #0]
    1576:	681b      	ldr	r3, [r3, #0]
    1578:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    157a:	9920      	ldr	r1, [sp, #128]	; 0x80
    157c:	a816      	add	r0, sp, #88	; 0x58
    157e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1580:	9301      	str	r3, [sp, #4]
    1582:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1584:	9300      	str	r3, [sp, #0]
    1586:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1588:	2210      	movs	r2, #16
    158a:	f7ff fd43 	bl	1014 <_PrintUnsigned>
        break;
    158e:	e03c      	b.n	160a <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1590:	9b03      	ldr	r3, [sp, #12]
    1592:	681b      	ldr	r3, [r3, #0]
    1594:	1d19      	adds	r1, r3, #4
    1596:	9a03      	ldr	r2, [sp, #12]
    1598:	6011      	str	r1, [r2, #0]
    159a:	681b      	ldr	r3, [r3, #0]
    159c:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    159e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    15a0:	2b00      	cmp	r3, #0
    15a2:	d101      	bne.n	15a8 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    15a4:	4b2c      	ldr	r3, [pc, #176]	; (1658 <SEGGER_RTT_vprintf+0x39c>)
    15a6:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    15a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    15aa:	781b      	ldrb	r3, [r3, #0]
    15ac:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    15b0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    15b2:	3301      	adds	r3, #1
    15b4:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    15b6:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    15ba:	2b00      	cmp	r3, #0
    15bc:	d00a      	beq.n	15d4 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    15be:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    15c2:	ab16      	add	r3, sp, #88	; 0x58
    15c4:	4611      	mov	r1, r2
    15c6:	4618      	mov	r0, r3
    15c8:	f7ff fce4 	bl	f94 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    15cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    15ce:	2b00      	cmp	r3, #0
    15d0:	daea      	bge.n	15a8 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    15d2:	e01a      	b.n	160a <SEGGER_RTT_vprintf+0x34e>
              break;
    15d4:	bf00      	nop
        break;
    15d6:	e018      	b.n	160a <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    15d8:	9b03      	ldr	r3, [sp, #12]
    15da:	681b      	ldr	r3, [r3, #0]
    15dc:	1d19      	adds	r1, r3, #4
    15de:	9a03      	ldr	r2, [sp, #12]
    15e0:	6011      	str	r1, [r2, #0]
    15e2:	681b      	ldr	r3, [r3, #0]
    15e4:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    15e6:	9920      	ldr	r1, [sp, #128]	; 0x80
    15e8:	a816      	add	r0, sp, #88	; 0x58
    15ea:	2300      	movs	r3, #0
    15ec:	9301      	str	r3, [sp, #4]
    15ee:	2308      	movs	r3, #8
    15f0:	9300      	str	r3, [sp, #0]
    15f2:	2308      	movs	r3, #8
    15f4:	2210      	movs	r2, #16
    15f6:	f7ff fd0d 	bl	1014 <_PrintUnsigned>
        break;
    15fa:	e006      	b.n	160a <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    15fc:	ab16      	add	r3, sp, #88	; 0x58
    15fe:	2125      	movs	r1, #37	; 0x25
    1600:	4618      	mov	r0, r3
    1602:	f7ff fcc7 	bl	f94 <_StoreChar>
        break;
    1606:	e000      	b.n	160a <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1608:	bf00      	nop
      }
      sFormat++;
    160a:	9b04      	ldr	r3, [sp, #16]
    160c:	3301      	adds	r3, #1
    160e:	9304      	str	r3, [sp, #16]
    1610:	e006      	b.n	1620 <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    1612:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1616:	ab16      	add	r3, sp, #88	; 0x58
    1618:	4611      	mov	r1, r2
    161a:	4618      	mov	r0, r3
    161c:	f7ff fcba 	bl	f94 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1620:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1622:	2b00      	cmp	r3, #0
    1624:	f6bf ae59 	bge.w	12da <SEGGER_RTT_vprintf+0x1e>
    1628:	e000      	b.n	162c <SEGGER_RTT_vprintf+0x370>
      break;
    162a:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    162c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    162e:	2b00      	cmp	r3, #0
    1630:	dd0c      	ble.n	164c <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    1632:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1634:	2b00      	cmp	r3, #0
    1636:	d005      	beq.n	1644 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1638:	9a18      	ldr	r2, [sp, #96]	; 0x60
    163a:	ab06      	add	r3, sp, #24
    163c:	4619      	mov	r1, r3
    163e:	9805      	ldr	r0, [sp, #20]
    1640:	f7ff fc82 	bl	f48 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1644:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1646:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1648:	4413      	add	r3, r2
    164a:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    164c:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    164e:	4618      	mov	r0, r3
    1650:	b023      	add	sp, #140	; 0x8c
    1652:	f85d fb04 	ldr.w	pc, [sp], #4
    1656:	bf00      	nop
    1658:	0000ed30 	.word	0x0000ed30

0000165c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    165c:	b40e      	push	{r1, r2, r3}
    165e:	b500      	push	{lr}
    1660:	b084      	sub	sp, #16
    1662:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1664:	ab06      	add	r3, sp, #24
    1666:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1668:	ab02      	add	r3, sp, #8
    166a:	461a      	mov	r2, r3
    166c:	9905      	ldr	r1, [sp, #20]
    166e:	9801      	ldr	r0, [sp, #4]
    1670:	f7ff fe24 	bl	12bc <SEGGER_RTT_vprintf>
    1674:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1676:	9b03      	ldr	r3, [sp, #12]
}
    1678:	4618      	mov	r0, r3
    167a:	b004      	add	sp, #16
    167c:	f85d eb04 	ldr.w	lr, [sp], #4
    1680:	b003      	add	sp, #12
    1682:	4770      	bx	lr

00001684 <memcpy>:
    1684:	440a      	add	r2, r1
    1686:	4291      	cmp	r1, r2
    1688:	f100 33ff 	add.w	r3, r0, #4294967295
    168c:	d100      	bne.n	1690 <memcpy+0xc>
    168e:	4770      	bx	lr
    1690:	b510      	push	{r4, lr}
    1692:	f811 4b01 	ldrb.w	r4, [r1], #1
    1696:	f803 4f01 	strb.w	r4, [r3, #1]!
    169a:	4291      	cmp	r1, r2
    169c:	d1f9      	bne.n	1692 <memcpy+0xe>
    169e:	bd10      	pop	{r4, pc}

000016a0 <memset>:
    16a0:	4402      	add	r2, r0
    16a2:	4603      	mov	r3, r0
    16a4:	4293      	cmp	r3, r2
    16a6:	d100      	bne.n	16aa <memset+0xa>
    16a8:	4770      	bx	lr
    16aa:	f803 1b01 	strb.w	r1, [r3], #1
    16ae:	e7f9      	b.n	16a4 <memset+0x4>

000016b0 <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    16b0:	b086      	sub	sp, #24
    16b2:	9003      	str	r0, [sp, #12]
    16b4:	9102      	str	r1, [sp, #8]
    16b6:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    16b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    16bc:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    16c0:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    16c2:	9b01      	ldr	r3, [sp, #4]
    16c4:	2b00      	cmp	r3, #0
    16c6:	d007      	beq.n	16d8 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    16c8:	9b03      	ldr	r3, [sp, #12]
    16ca:	3310      	adds	r3, #16
    16cc:	009b      	lsls	r3, r3, #2
    16ce:	9a05      	ldr	r2, [sp, #20]
    16d0:	4413      	add	r3, r2
    16d2:	681a      	ldr	r2, [r3, #0]
    16d4:	9b01      	ldr	r3, [sp, #4]
    16d6:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    16d8:	9b03      	ldr	r3, [sp, #12]
    16da:	3310      	adds	r3, #16
    16dc:	009b      	lsls	r3, r3, #2
    16de:	9a05      	ldr	r2, [sp, #20]
    16e0:	4413      	add	r3, r2
    16e2:	9a02      	ldr	r2, [sp, #8]
    16e4:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    16e6:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    16ea:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    16ee:	bf00      	nop
    16f0:	b006      	add	sp, #24
    16f2:	4770      	bx	lr

000016f4 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    16f4:	b082      	sub	sp, #8
    16f6:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    16f8:	9b01      	ldr	r3, [sp, #4]
    16fa:	f003 021f 	and.w	r2, r3, #31
    16fe:	4905      	ldr	r1, [pc, #20]	; (1714 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    1700:	9b01      	ldr	r3, [sp, #4]
    1702:	095b      	lsrs	r3, r3, #5
    1704:	2001      	movs	r0, #1
    1706:	fa00 f202 	lsl.w	r2, r0, r2
    170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    170e:	bf00      	nop
    1710:	b002      	add	sp, #8
    1712:	4770      	bx	lr
    1714:	e000e100 	.word	0xe000e100

00001718 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1718:	b082      	sub	sp, #8
    171a:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    171c:	9b01      	ldr	r3, [sp, #4]
    171e:	f003 021f 	and.w	r2, r3, #31
    1722:	4906      	ldr	r1, [pc, #24]	; (173c <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    1724:	9b01      	ldr	r3, [sp, #4]
    1726:	095b      	lsrs	r3, r3, #5
    1728:	2001      	movs	r0, #1
    172a:	fa00 f202 	lsl.w	r2, r0, r2
    172e:	3320      	adds	r3, #32
    1730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1734:	bf00      	nop
    1736:	b002      	add	sp, #8
    1738:	4770      	bx	lr
    173a:	bf00      	nop
    173c:	e000e100 	.word	0xe000e100

00001740 <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1740:	b084      	sub	sp, #16
    1742:	9001      	str	r0, [sp, #4]
    1744:	460b      	mov	r3, r1
    1746:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    174a:	2304      	movs	r3, #4
    174c:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    1750:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1754:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1758:	fa02 f103 	lsl.w	r1, r2, r3
    175c:	4a04      	ldr	r2, [pc, #16]	; (1770 <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    175e:	9b01      	ldr	r3, [sp, #4]
    1760:	b2c9      	uxtb	r1, r1
    1762:	4413      	add	r3, r2
    1764:	460a      	mov	r2, r1
    1766:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    176a:	bf00      	nop
    176c:	b004      	add	sp, #16
    176e:	4770      	bx	lr
    1770:	e000e100 	.word	0xe000e100

00001774 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1774:	b084      	sub	sp, #16
    1776:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1778:	2304      	movs	r3, #4
    177a:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    177e:	4a09      	ldr	r2, [pc, #36]	; (17a4 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    1780:	9b01      	ldr	r3, [sp, #4]
    1782:	4413      	add	r3, r2
    1784:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    1788:	b2db      	uxtb	r3, r3
    178a:	461a      	mov	r2, r3
    178c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1790:	fa42 f303 	asr.w	r3, r2, r3
    1794:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    1798:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    179c:	4618      	mov	r0, r3
    179e:	b004      	add	sp, #16
    17a0:	4770      	bx	lr
    17a2:	bf00      	nop
    17a4:	e000e100 	.word	0xe000e100

000017a8 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    17a8:	b082      	sub	sp, #8
    17aa:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    17ac:	9b01      	ldr	r3, [sp, #4]
    17ae:	f003 021f 	and.w	r2, r3, #31
    17b2:	4906      	ldr	r1, [pc, #24]	; (17cc <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    17b4:	9b01      	ldr	r3, [sp, #4]
    17b6:	095b      	lsrs	r3, r3, #5
    17b8:	2001      	movs	r0, #1
    17ba:	fa00 f202 	lsl.w	r2, r0, r2
    17be:	3360      	adds	r3, #96	; 0x60
    17c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    17c4:	bf00      	nop
    17c6:	b002      	add	sp, #8
    17c8:	4770      	bx	lr
    17ca:	bf00      	nop
    17cc:	e000e100 	.word	0xe000e100

000017d0 <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    17d0:	b500      	push	{lr}
    17d2:	b085      	sub	sp, #20
    17d4:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    17d6:	2300      	movs	r3, #0
    17d8:	9303      	str	r3, [sp, #12]
    17da:	e05d      	b.n	1898 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    17dc:	9b01      	ldr	r3, [sp, #4]
    17de:	6859      	ldr	r1, [r3, #4]
    17e0:	9a03      	ldr	r2, [sp, #12]
    17e2:	4613      	mov	r3, r2
    17e4:	005b      	lsls	r3, r3, #1
    17e6:	4413      	add	r3, r2
    17e8:	009b      	lsls	r3, r3, #2
    17ea:	440b      	add	r3, r1
    17ec:	681b      	ldr	r3, [r3, #0]
    17ee:	4618      	mov	r0, r3
    17f0:	f000 f899 	bl	1926 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    17f4:	9b01      	ldr	r3, [sp, #4]
    17f6:	6859      	ldr	r1, [r3, #4]
    17f8:	9a03      	ldr	r2, [sp, #12]
    17fa:	4613      	mov	r3, r2
    17fc:	005b      	lsls	r3, r3, #1
    17fe:	4413      	add	r3, r2
    1800:	009b      	lsls	r3, r3, #2
    1802:	440b      	add	r3, r1
    1804:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1806:	9b01      	ldr	r3, [sp, #4]
    1808:	6859      	ldr	r1, [r3, #4]
    180a:	9a03      	ldr	r2, [sp, #12]
    180c:	4613      	mov	r3, r2
    180e:	005b      	lsls	r3, r3, #1
    1810:	4413      	add	r3, r2
    1812:	009b      	lsls	r3, r3, #2
    1814:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1816:	795b      	ldrb	r3, [r3, #5]
    1818:	4619      	mov	r1, r3
    181a:	f000 f869 	bl	18f0 <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    181e:	9b01      	ldr	r3, [sp, #4]
    1820:	6859      	ldr	r1, [r3, #4]
    1822:	9a03      	ldr	r2, [sp, #12]
    1824:	4613      	mov	r3, r2
    1826:	005b      	lsls	r3, r3, #1
    1828:	4413      	add	r3, r2
    182a:	009b      	lsls	r3, r3, #2
    182c:	440b      	add	r3, r1
    182e:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1830:	9b01      	ldr	r3, [sp, #4]
    1832:	6859      	ldr	r1, [r3, #4]
    1834:	9a03      	ldr	r2, [sp, #12]
    1836:	4613      	mov	r3, r2
    1838:	005b      	lsls	r3, r3, #1
    183a:	4413      	add	r3, r2
    183c:	009b      	lsls	r3, r3, #2
    183e:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1840:	689b      	ldr	r3, [r3, #8]
    1842:	2200      	movs	r2, #0
    1844:	4619      	mov	r1, r3
    1846:	f000 f831 	bl	18ac <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    184a:	9b01      	ldr	r3, [sp, #4]
    184c:	6859      	ldr	r1, [r3, #4]
    184e:	9a03      	ldr	r2, [sp, #12]
    1850:	4613      	mov	r3, r2
    1852:	005b      	lsls	r3, r3, #1
    1854:	4413      	add	r3, r2
    1856:	009b      	lsls	r3, r3, #2
    1858:	440b      	add	r3, r1
    185a:	791b      	ldrb	r3, [r3, #4]
    185c:	2b00      	cmp	r3, #0
    185e:	d00c      	beq.n	187a <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1860:	9b01      	ldr	r3, [sp, #4]
    1862:	6859      	ldr	r1, [r3, #4]
    1864:	9a03      	ldr	r2, [sp, #12]
    1866:	4613      	mov	r3, r2
    1868:	005b      	lsls	r3, r3, #1
    186a:	4413      	add	r3, r2
    186c:	009b      	lsls	r3, r3, #2
    186e:	440b      	add	r3, r1
    1870:	681b      	ldr	r3, [r3, #0]
    1872:	4618      	mov	r0, r3
    1874:	f000 f828 	bl	18c8 <IntCtrl_Ip_EnableIrq>
    1878:	e00b      	b.n	1892 <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    187a:	9b01      	ldr	r3, [sp, #4]
    187c:	6859      	ldr	r1, [r3, #4]
    187e:	9a03      	ldr	r2, [sp, #12]
    1880:	4613      	mov	r3, r2
    1882:	005b      	lsls	r3, r3, #1
    1884:	4413      	add	r3, r2
    1886:	009b      	lsls	r3, r3, #2
    1888:	440b      	add	r3, r1
    188a:	681b      	ldr	r3, [r3, #0]
    188c:	4618      	mov	r0, r3
    188e:	f000 f825 	bl	18dc <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1892:	9b03      	ldr	r3, [sp, #12]
    1894:	3301      	adds	r3, #1
    1896:	9303      	str	r3, [sp, #12]
    1898:	9b01      	ldr	r3, [sp, #4]
    189a:	681b      	ldr	r3, [r3, #0]
    189c:	9a03      	ldr	r2, [sp, #12]
    189e:	429a      	cmp	r2, r3
    18a0:	d39c      	bcc.n	17dc <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    18a2:	2300      	movs	r3, #0
}
    18a4:	4618      	mov	r0, r3
    18a6:	b005      	add	sp, #20
    18a8:	f85d fb04 	ldr.w	pc, [sp], #4

000018ac <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    18ac:	b500      	push	{lr}
    18ae:	b085      	sub	sp, #20
    18b0:	9003      	str	r0, [sp, #12]
    18b2:	9102      	str	r1, [sp, #8]
    18b4:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    18b6:	9a01      	ldr	r2, [sp, #4]
    18b8:	9902      	ldr	r1, [sp, #8]
    18ba:	9803      	ldr	r0, [sp, #12]
    18bc:	f7ff fef8 	bl	16b0 <IntCtrl_Ip_InstallHandlerPrivileged>
}
    18c0:	bf00      	nop
    18c2:	b005      	add	sp, #20
    18c4:	f85d fb04 	ldr.w	pc, [sp], #4

000018c8 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    18c8:	b500      	push	{lr}
    18ca:	b083      	sub	sp, #12
    18cc:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    18ce:	9801      	ldr	r0, [sp, #4]
    18d0:	f7ff ff10 	bl	16f4 <IntCtrl_Ip_EnableIrqPrivileged>
}
    18d4:	bf00      	nop
    18d6:	b003      	add	sp, #12
    18d8:	f85d fb04 	ldr.w	pc, [sp], #4

000018dc <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    18dc:	b500      	push	{lr}
    18de:	b083      	sub	sp, #12
    18e0:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    18e2:	9801      	ldr	r0, [sp, #4]
    18e4:	f7ff ff18 	bl	1718 <IntCtrl_Ip_DisableIrqPrivileged>
}
    18e8:	bf00      	nop
    18ea:	b003      	add	sp, #12
    18ec:	f85d fb04 	ldr.w	pc, [sp], #4

000018f0 <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    18f0:	b500      	push	{lr}
    18f2:	b083      	sub	sp, #12
    18f4:	9001      	str	r0, [sp, #4]
    18f6:	460b      	mov	r3, r1
    18f8:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    18fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1900:	4619      	mov	r1, r3
    1902:	9801      	ldr	r0, [sp, #4]
    1904:	f7ff ff1c 	bl	1740 <IntCtrl_Ip_SetPriorityPrivileged>
}
    1908:	bf00      	nop
    190a:	b003      	add	sp, #12
    190c:	f85d fb04 	ldr.w	pc, [sp], #4

00001910 <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1910:	b500      	push	{lr}
    1912:	b083      	sub	sp, #12
    1914:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1916:	9801      	ldr	r0, [sp, #4]
    1918:	f7ff ff2c 	bl	1774 <IntCtrl_Ip_GetPriorityPrivileged>
    191c:	4603      	mov	r3, r0
}
    191e:	4618      	mov	r0, r3
    1920:	b003      	add	sp, #12
    1922:	f85d fb04 	ldr.w	pc, [sp], #4

00001926 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1926:	b500      	push	{lr}
    1928:	b083      	sub	sp, #12
    192a:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    192c:	9801      	ldr	r0, [sp, #4]
    192e:	f7ff ff3b 	bl	17a8 <IntCtrl_Ip_ClearPendingPrivileged>
}
    1932:	bf00      	nop
    1934:	b003      	add	sp, #12
    1936:	f85d fb04 	ldr.w	pc, [sp], #4
    193a:	bf00      	nop

0000193c <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    193c:	b500      	push	{lr}
    193e:	b083      	sub	sp, #12
    1940:	9001      	str	r0, [sp, #4]
    1942:	460b      	mov	r3, r1
    1944:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1948:	f89d 3003 	ldrb.w	r3, [sp, #3]
    194c:	2b00      	cmp	r3, #0
    194e:	d003      	beq.n	1958 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1950:	9801      	ldr	r0, [sp, #4]
    1952:	f7ff ffb9 	bl	18c8 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1956:	e002      	b.n	195e <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1958:	9801      	ldr	r0, [sp, #4]
    195a:	f7ff ffbf 	bl	18dc <IntCtrl_Ip_DisableIrq>
}
    195e:	bf00      	nop
    1960:	b003      	add	sp, #12
    1962:	f85d fb04 	ldr.w	pc, [sp], #4

00001966 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1966:	b500      	push	{lr}
    1968:	b083      	sub	sp, #12
    196a:	9001      	str	r0, [sp, #4]
    196c:	460b      	mov	r3, r1
    196e:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1972:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1976:	4619      	mov	r1, r3
    1978:	9801      	ldr	r0, [sp, #4]
    197a:	f7ff ffb9 	bl	18f0 <IntCtrl_Ip_SetPriority>
}
    197e:	bf00      	nop
    1980:	b003      	add	sp, #12
    1982:	f85d fb04 	ldr.w	pc, [sp], #4

00001986 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1986:	b500      	push	{lr}
    1988:	b083      	sub	sp, #12
    198a:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    198c:	9801      	ldr	r0, [sp, #4]
    198e:	f7ff ffbf 	bl	1910 <IntCtrl_Ip_GetPriority>
    1992:	4603      	mov	r3, r0
}
    1994:	4618      	mov	r0, r3
    1996:	b003      	add	sp, #12
    1998:	f85d fb04 	ldr.w	pc, [sp], #4

0000199c <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    199c:	b500      	push	{lr}
    199e:	b085      	sub	sp, #20
    19a0:	9003      	str	r0, [sp, #12]
    19a2:	9102      	str	r1, [sp, #8]
    19a4:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    19a6:	9a01      	ldr	r2, [sp, #4]
    19a8:	9902      	ldr	r1, [sp, #8]
    19aa:	9803      	ldr	r0, [sp, #12]
    19ac:	f7ff ff7e 	bl	18ac <IntCtrl_Ip_InstallHandler>
}
    19b0:	bf00      	nop
    19b2:	b005      	add	sp, #20
    19b4:	f85d fb04 	ldr.w	pc, [sp], #4

000019b8 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    19b8:	b500      	push	{lr}
    19ba:	b085      	sub	sp, #20
    19bc:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    19be:	2300      	movs	r3, #0
    19c0:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    19c4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    19c8:	4a05      	ldr	r2, [pc, #20]	; (19e0 <Platform_Init+0x28>)
    19ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    19ce:	681b      	ldr	r3, [r3, #0]
    19d0:	4618      	mov	r0, r3
    19d2:	f000 f8c7 	bl	1b64 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    19d6:	bf00      	nop
    19d8:	b005      	add	sp, #20
    19da:	f85d fb04 	ldr.w	pc, [sp], #4
    19de:	bf00      	nop
    19e0:	0000fac4 	.word	0x0000fac4

000019e4 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    19e4:	b500      	push	{lr}
    19e6:	b085      	sub	sp, #20
    19e8:	9001      	str	r0, [sp, #4]
    19ea:	460b      	mov	r3, r1
    19ec:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    19f0:	2300      	movs	r3, #0
    19f2:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    19f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    19fa:	4619      	mov	r1, r3
    19fc:	9801      	ldr	r0, [sp, #4]
    19fe:	f7ff ff9d 	bl	193c <Platform_Ipw_SetIrq>
    }
    return RetValue;
    1a02:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1a06:	4618      	mov	r0, r3
    1a08:	b005      	add	sp, #20
    1a0a:	f85d fb04 	ldr.w	pc, [sp], #4

00001a0e <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1a0e:	b500      	push	{lr}
    1a10:	b085      	sub	sp, #20
    1a12:	9001      	str	r0, [sp, #4]
    1a14:	460b      	mov	r3, r1
    1a16:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a1a:	2300      	movs	r3, #0
    1a1c:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    1a20:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1a24:	4619      	mov	r1, r3
    1a26:	9801      	ldr	r0, [sp, #4]
    1a28:	f7ff ff9d 	bl	1966 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    1a2c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1a30:	4618      	mov	r0, r3
    1a32:	b005      	add	sp, #20
    1a34:	f85d fb04 	ldr.w	pc, [sp], #4

00001a38 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    1a38:	b500      	push	{lr}
    1a3a:	b085      	sub	sp, #20
    1a3c:	9001      	str	r0, [sp, #4]
    1a3e:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a40:	2300      	movs	r3, #0
    1a42:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    1a46:	9801      	ldr	r0, [sp, #4]
    1a48:	f7ff ff9d 	bl	1986 <Platform_Ipw_GetIrqPriority>
    1a4c:	4603      	mov	r3, r0
    1a4e:	461a      	mov	r2, r3
    1a50:	9b00      	ldr	r3, [sp, #0]
    1a52:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    1a54:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    1a58:	4618      	mov	r0, r3
    1a5a:	b005      	add	sp, #20
    1a5c:	f85d fb04 	ldr.w	pc, [sp], #4

00001a60 <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    1a60:	b500      	push	{lr}
    1a62:	b087      	sub	sp, #28
    1a64:	9003      	str	r0, [sp, #12]
    1a66:	9102      	str	r1, [sp, #8]
    1a68:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1a6a:	2300      	movs	r3, #0
    1a6c:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1a70:	9a01      	ldr	r2, [sp, #4]
    1a72:	9902      	ldr	r1, [sp, #8]
    1a74:	9803      	ldr	r0, [sp, #12]
    1a76:	f7ff ff91 	bl	199c <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    1a7a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    1a7e:	4618      	mov	r0, r3
    1a80:	b007      	add	sp, #28
    1a82:	f85d fb04 	ldr.w	pc, [sp], #4
    1a86:	bf00      	nop

00001a88 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1a88:	b500      	push	{lr}
    1a8a:	b085      	sub	sp, #20
    1a8c:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1a8e:	2300      	movs	r3, #0
    1a90:	9303      	str	r3, [sp, #12]
    1a92:	e05d      	b.n	1b50 <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1a94:	9b01      	ldr	r3, [sp, #4]
    1a96:	6859      	ldr	r1, [r3, #4]
    1a98:	9a03      	ldr	r2, [sp, #12]
    1a9a:	4613      	mov	r3, r2
    1a9c:	005b      	lsls	r3, r3, #1
    1a9e:	4413      	add	r3, r2
    1aa0:	009b      	lsls	r3, r3, #2
    1aa2:	440b      	add	r3, r1
    1aa4:	681b      	ldr	r3, [r3, #0]
    1aa6:	4618      	mov	r0, r3
    1aa8:	f7ff ff3d 	bl	1926 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1aac:	9b01      	ldr	r3, [sp, #4]
    1aae:	6859      	ldr	r1, [r3, #4]
    1ab0:	9a03      	ldr	r2, [sp, #12]
    1ab2:	4613      	mov	r3, r2
    1ab4:	005b      	lsls	r3, r3, #1
    1ab6:	4413      	add	r3, r2
    1ab8:	009b      	lsls	r3, r3, #2
    1aba:	440b      	add	r3, r1
    1abc:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1abe:	9b01      	ldr	r3, [sp, #4]
    1ac0:	6859      	ldr	r1, [r3, #4]
    1ac2:	9a03      	ldr	r2, [sp, #12]
    1ac4:	4613      	mov	r3, r2
    1ac6:	005b      	lsls	r3, r3, #1
    1ac8:	4413      	add	r3, r2
    1aca:	009b      	lsls	r3, r3, #2
    1acc:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1ace:	795b      	ldrb	r3, [r3, #5]
    1ad0:	4619      	mov	r1, r3
    1ad2:	f7ff ff0d 	bl	18f0 <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1ad6:	9b01      	ldr	r3, [sp, #4]
    1ad8:	6859      	ldr	r1, [r3, #4]
    1ada:	9a03      	ldr	r2, [sp, #12]
    1adc:	4613      	mov	r3, r2
    1ade:	005b      	lsls	r3, r3, #1
    1ae0:	4413      	add	r3, r2
    1ae2:	009b      	lsls	r3, r3, #2
    1ae4:	440b      	add	r3, r1
    1ae6:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1ae8:	9b01      	ldr	r3, [sp, #4]
    1aea:	6859      	ldr	r1, [r3, #4]
    1aec:	9a03      	ldr	r2, [sp, #12]
    1aee:	4613      	mov	r3, r2
    1af0:	005b      	lsls	r3, r3, #1
    1af2:	4413      	add	r3, r2
    1af4:	009b      	lsls	r3, r3, #2
    1af6:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1af8:	689b      	ldr	r3, [r3, #8]
    1afa:	2200      	movs	r2, #0
    1afc:	4619      	mov	r1, r3
    1afe:	f7ff fed5 	bl	18ac <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1b02:	9b01      	ldr	r3, [sp, #4]
    1b04:	6859      	ldr	r1, [r3, #4]
    1b06:	9a03      	ldr	r2, [sp, #12]
    1b08:	4613      	mov	r3, r2
    1b0a:	005b      	lsls	r3, r3, #1
    1b0c:	4413      	add	r3, r2
    1b0e:	009b      	lsls	r3, r3, #2
    1b10:	440b      	add	r3, r1
    1b12:	791b      	ldrb	r3, [r3, #4]
    1b14:	2b00      	cmp	r3, #0
    1b16:	d00c      	beq.n	1b32 <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1b18:	9b01      	ldr	r3, [sp, #4]
    1b1a:	6859      	ldr	r1, [r3, #4]
    1b1c:	9a03      	ldr	r2, [sp, #12]
    1b1e:	4613      	mov	r3, r2
    1b20:	005b      	lsls	r3, r3, #1
    1b22:	4413      	add	r3, r2
    1b24:	009b      	lsls	r3, r3, #2
    1b26:	440b      	add	r3, r1
    1b28:	681b      	ldr	r3, [r3, #0]
    1b2a:	4618      	mov	r0, r3
    1b2c:	f7ff fecc 	bl	18c8 <IntCtrl_Ip_EnableIrq>
    1b30:	e00b      	b.n	1b4a <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1b32:	9b01      	ldr	r3, [sp, #4]
    1b34:	6859      	ldr	r1, [r3, #4]
    1b36:	9a03      	ldr	r2, [sp, #12]
    1b38:	4613      	mov	r3, r2
    1b3a:	005b      	lsls	r3, r3, #1
    1b3c:	4413      	add	r3, r2
    1b3e:	009b      	lsls	r3, r3, #2
    1b40:	440b      	add	r3, r1
    1b42:	681b      	ldr	r3, [r3, #0]
    1b44:	4618      	mov	r0, r3
    1b46:	f7ff fec9 	bl	18dc <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1b4a:	9b03      	ldr	r3, [sp, #12]
    1b4c:	3301      	adds	r3, #1
    1b4e:	9303      	str	r3, [sp, #12]
    1b50:	9b01      	ldr	r3, [sp, #4]
    1b52:	681b      	ldr	r3, [r3, #0]
    1b54:	9a03      	ldr	r2, [sp, #12]
    1b56:	429a      	cmp	r2, r3
    1b58:	d39c      	bcc.n	1a94 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    1b5a:	2300      	movs	r3, #0
}
    1b5c:	4618      	mov	r0, r3
    1b5e:	b005      	add	sp, #20
    1b60:	f85d fb04 	ldr.w	pc, [sp], #4

00001b64 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    1b64:	b500      	push	{lr}
    1b66:	b085      	sub	sp, #20
    1b68:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    1b6a:	2300      	movs	r3, #0
    1b6c:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    1b70:	9b01      	ldr	r3, [sp, #4]
    1b72:	681b      	ldr	r3, [r3, #0]
    1b74:	2b00      	cmp	r3, #0
    1b76:	d007      	beq.n	1b88 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    1b78:	9b01      	ldr	r3, [sp, #4]
    1b7a:	681b      	ldr	r3, [r3, #0]
    1b7c:	4618      	mov	r0, r3
    1b7e:	f7ff ff83 	bl	1a88 <Platform_Ipw_InitIntCtrl>
    1b82:	4603      	mov	r3, r0
    1b84:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    1b88:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1b8c:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    1b8e:	bf00      	nop
    1b90:	b005      	add	sp, #20
    1b92:	f85d fb04 	ldr.w	pc, [sp], #4

00001b96 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    1b96:	2300      	movs	r3, #0
}
    1b98:	4618      	mov	r0, r3
    1b9a:	4770      	bx	lr

00001b9c <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    1b9c:	b082      	sub	sp, #8
    1b9e:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    1ba0:	2301      	movs	r3, #1
}
    1ba2:	4618      	mov	r0, r3
    1ba4:	b002      	add	sp, #8
    1ba6:	4770      	bx	lr

00001ba8 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    1ba8:	b082      	sub	sp, #8
    1baa:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    1bac:	bf00      	nop
    1bae:	b002      	add	sp, #8
    1bb0:	4770      	bx	lr

00001bb2 <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    1bb2:	b082      	sub	sp, #8
    1bb4:	9001      	str	r0, [sp, #4]
    return Micros;
    1bb6:	9b01      	ldr	r3, [sp, #4]
}
    1bb8:	4618      	mov	r0, r3
    1bba:	b002      	add	sp, #8
    1bbc:	4770      	bx	lr

00001bbe <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    1bbe:	b500      	push	{lr}
    1bc0:	b083      	sub	sp, #12
    1bc2:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    1bc4:	f000 f86c 	bl	1ca0 <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    1bc8:	bf00      	nop
    1bca:	b003      	add	sp, #12
    1bcc:	f85d fb04 	ldr.w	pc, [sp], #4

00001bd0 <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    1bd0:	b500      	push	{lr}
    1bd2:	b085      	sub	sp, #20
    1bd4:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    1bd6:	2300      	movs	r3, #0
    1bd8:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1bda:	9b01      	ldr	r3, [sp, #4]
    1bdc:	2b00      	cmp	r3, #0
    1bde:	d003      	beq.n	1be8 <OsIf_GetCounter+0x18>
    1be0:	9b01      	ldr	r3, [sp, #4]
    1be2:	2b01      	cmp	r3, #1
    1be4:	d004      	beq.n	1bf0 <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1be6:	e007      	b.n	1bf8 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    1be8:	f7ff ffd5 	bl	1b96 <OsIf_Timer_Dummy_GetCounter>
    1bec:	9003      	str	r0, [sp, #12]
            break;
    1bee:	e003      	b.n	1bf8 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    1bf0:	f000 f872 	bl	1cd8 <OsIf_Timer_System_GetCounter>
    1bf4:	9003      	str	r0, [sp, #12]
            break;
    1bf6:	bf00      	nop
    }

    return Value;
    1bf8:	9b03      	ldr	r3, [sp, #12]
}
    1bfa:	4618      	mov	r0, r3
    1bfc:	b005      	add	sp, #20
    1bfe:	f85d fb04 	ldr.w	pc, [sp], #4

00001c02 <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    1c02:	b500      	push	{lr}
    1c04:	b085      	sub	sp, #20
    1c06:	9001      	str	r0, [sp, #4]
    1c08:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1c0a:	2300      	movs	r3, #0
    1c0c:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1c0e:	9b00      	ldr	r3, [sp, #0]
    1c10:	2b00      	cmp	r3, #0
    1c12:	d003      	beq.n	1c1c <OsIf_GetElapsed+0x1a>
    1c14:	9b00      	ldr	r3, [sp, #0]
    1c16:	2b01      	cmp	r3, #1
    1c18:	d005      	beq.n	1c26 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c1a:	e009      	b.n	1c30 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    1c1c:	9801      	ldr	r0, [sp, #4]
    1c1e:	f7ff ffbd 	bl	1b9c <OsIf_Timer_Dummy_GetElapsed>
    1c22:	9003      	str	r0, [sp, #12]
            break;
    1c24:	e004      	b.n	1c30 <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    1c26:	9801      	ldr	r0, [sp, #4]
    1c28:	f000 f864 	bl	1cf4 <OsIf_Timer_System_GetElapsed>
    1c2c:	9003      	str	r0, [sp, #12]
            break;
    1c2e:	bf00      	nop
    }

    return Value;
    1c30:	9b03      	ldr	r3, [sp, #12]
}
    1c32:	4618      	mov	r0, r3
    1c34:	b005      	add	sp, #20
    1c36:	f85d fb04 	ldr.w	pc, [sp], #4

00001c3a <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    1c3a:	b500      	push	{lr}
    1c3c:	b083      	sub	sp, #12
    1c3e:	9001      	str	r0, [sp, #4]
    1c40:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    1c42:	9b00      	ldr	r3, [sp, #0]
    1c44:	2b00      	cmp	r3, #0
    1c46:	d003      	beq.n	1c50 <OsIf_SetTimerFrequency+0x16>
    1c48:	9b00      	ldr	r3, [sp, #0]
    1c4a:	2b01      	cmp	r3, #1
    1c4c:	d004      	beq.n	1c58 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c4e:	e007      	b.n	1c60 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    1c50:	9801      	ldr	r0, [sp, #4]
    1c52:	f7ff ffa9 	bl	1ba8 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    1c56:	e003      	b.n	1c60 <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    1c58:	9801      	ldr	r0, [sp, #4]
    1c5a:	f000 f85b 	bl	1d14 <OsIf_Timer_System_SetTimerFrequency>
            break;
    1c5e:	bf00      	nop
    }
}
    1c60:	bf00      	nop
    1c62:	b003      	add	sp, #12
    1c64:	f85d fb04 	ldr.w	pc, [sp], #4

00001c68 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    1c68:	b500      	push	{lr}
    1c6a:	b085      	sub	sp, #20
    1c6c:	9001      	str	r0, [sp, #4]
    1c6e:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    1c70:	2300      	movs	r3, #0
    1c72:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    1c74:	9b00      	ldr	r3, [sp, #0]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d003      	beq.n	1c82 <OsIf_MicrosToTicks+0x1a>
    1c7a:	9b00      	ldr	r3, [sp, #0]
    1c7c:	2b01      	cmp	r3, #1
    1c7e:	d005      	beq.n	1c8c <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    1c80:	e009      	b.n	1c96 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    1c82:	9801      	ldr	r0, [sp, #4]
    1c84:	f7ff ff95 	bl	1bb2 <OsIf_Timer_Dummy_MicrosToTicks>
    1c88:	9003      	str	r0, [sp, #12]
            break;
    1c8a:	e004      	b.n	1c96 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    1c8c:	9801      	ldr	r0, [sp, #4]
    1c8e:	f000 f84f 	bl	1d30 <OsIf_Timer_System_MicrosToTicks>
    1c92:	9003      	str	r0, [sp, #12]
            break;
    1c94:	bf00      	nop
    }

    return Value;
    1c96:	9b03      	ldr	r3, [sp, #12]
}
    1c98:	4618      	mov	r0, r3
    1c9a:	b005      	add	sp, #20
    1c9c:	f85d fb04 	ldr.w	pc, [sp], #4

00001ca0 <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    1ca0:	b500      	push	{lr}
    1ca2:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    1ca4:	2300      	movs	r3, #0
    1ca6:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    1ca8:	4a09      	ldr	r2, [pc, #36]	; (1cd0 <OsIf_Timer_System_Init+0x30>)
    1caa:	9b01      	ldr	r3, [sp, #4]
    1cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1cb0:	685a      	ldr	r2, [r3, #4]
    1cb2:	4908      	ldr	r1, [pc, #32]	; (1cd4 <OsIf_Timer_System_Init+0x34>)
    1cb4:	9b01      	ldr	r3, [sp, #4]
    1cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    1cba:	4a06      	ldr	r2, [pc, #24]	; (1cd4 <OsIf_Timer_System_Init+0x34>)
    1cbc:	9b01      	ldr	r3, [sp, #4]
    1cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1cc2:	4618      	mov	r0, r3
    1cc4:	f000 f868 	bl	1d98 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    1cc8:	bf00      	nop
    1cca:	b003      	add	sp, #12
    1ccc:	f85d fb04 	ldr.w	pc, [sp], #4
    1cd0:	0000fabc 	.word	0x0000fabc
    1cd4:	1fff8b34 	.word	0x1fff8b34

00001cd8 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    1cd8:	b500      	push	{lr}
    1cda:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    1cdc:	2300      	movs	r3, #0
    1cde:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1ce0:	2300      	movs	r3, #0
    1ce2:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    1ce4:	f000 f86c 	bl	1dc0 <OsIf_Timer_System_Internal_GetCounter>
    1ce8:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    1cea:	9b01      	ldr	r3, [sp, #4]
}
    1cec:	4618      	mov	r0, r3
    1cee:	b003      	add	sp, #12
    1cf0:	f85d fb04 	ldr.w	pc, [sp], #4

00001cf4 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    1cf4:	b500      	push	{lr}
    1cf6:	b085      	sub	sp, #20
    1cf8:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    1cfa:	2300      	movs	r3, #0
    1cfc:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    1cfe:	2300      	movs	r3, #0
    1d00:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    1d02:	9801      	ldr	r0, [sp, #4]
    1d04:	f000 f864 	bl	1dd0 <OsIf_Timer_System_Internal_GetElapsed>
    1d08:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    1d0a:	9b03      	ldr	r3, [sp, #12]
}
    1d0c:	4618      	mov	r0, r3
    1d0e:	b005      	add	sp, #20
    1d10:	f85d fb04 	ldr.w	pc, [sp], #4

00001d14 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    1d14:	b084      	sub	sp, #16
    1d16:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    1d18:	2300      	movs	r3, #0
    1d1a:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    1d1c:	4903      	ldr	r1, [pc, #12]	; (1d2c <OsIf_Timer_System_SetTimerFrequency+0x18>)
    1d1e:	9b03      	ldr	r3, [sp, #12]
    1d20:	9a01      	ldr	r2, [sp, #4]
    1d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    1d26:	bf00      	nop
    1d28:	b004      	add	sp, #16
    1d2a:	4770      	bx	lr
    1d2c:	1fff8b34 	.word	0x1fff8b34

00001d30 <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    1d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d32:	b087      	sub	sp, #28
    1d34:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    1d36:	2100      	movs	r1, #0
    1d38:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    1d3a:	2100      	movs	r1, #0
    1d3c:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    1d3e:	9901      	ldr	r1, [sp, #4]
    1d40:	2000      	movs	r0, #0
    1d42:	460e      	mov	r6, r1
    1d44:	4607      	mov	r7, r0
    1d46:	4812      	ldr	r0, [pc, #72]	; (1d90 <OsIf_Timer_System_MicrosToTicks+0x60>)
    1d48:	9904      	ldr	r1, [sp, #16]
    1d4a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1d4e:	2000      	movs	r0, #0
    1d50:	460c      	mov	r4, r1
    1d52:	4605      	mov	r5, r0
    1d54:	fb04 f007 	mul.w	r0, r4, r7
    1d58:	fb06 f105 	mul.w	r1, r6, r5
    1d5c:	4401      	add	r1, r0
    1d5e:	fba6 2304 	umull	r2, r3, r6, r4
    1d62:	4419      	add	r1, r3
    1d64:	460b      	mov	r3, r1
    1d66:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1d6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    1d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1d72:	4a08      	ldr	r2, [pc, #32]	; (1d94 <OsIf_Timer_System_MicrosToTicks+0x64>)
    1d74:	f04f 0300 	mov.w	r3, #0
    1d78:	f7fe fc14 	bl	5a4 <__aeabi_uldivmod>
    1d7c:	4602      	mov	r2, r0
    1d7e:	460b      	mov	r3, r1
    1d80:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    1d84:	9b02      	ldr	r3, [sp, #8]
    1d86:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    1d88:	9b05      	ldr	r3, [sp, #20]
}
    1d8a:	4618      	mov	r0, r3
    1d8c:	b007      	add	sp, #28
    1d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d90:	1fff8b34 	.word	0x1fff8b34
    1d94:	000f4240 	.word	0x000f4240

00001d98 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    1d98:	b082      	sub	sp, #8
    1d9a:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    1d9c:	4b07      	ldr	r3, [pc, #28]	; (1dbc <OsIf_Timer_System_Internal_Init+0x24>)
    1d9e:	2200      	movs	r2, #0
    1da0:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    1da2:	4b06      	ldr	r3, [pc, #24]	; (1dbc <OsIf_Timer_System_Internal_Init+0x24>)
    1da4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1da8:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    1daa:	4b04      	ldr	r3, [pc, #16]	; (1dbc <OsIf_Timer_System_Internal_Init+0x24>)
    1dac:	2200      	movs	r2, #0
    1dae:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    1db0:	4b02      	ldr	r3, [pc, #8]	; (1dbc <OsIf_Timer_System_Internal_Init+0x24>)
    1db2:	2205      	movs	r2, #5
    1db4:	601a      	str	r2, [r3, #0]
}
    1db6:	bf00      	nop
    1db8:	b002      	add	sp, #8
    1dba:	4770      	bx	lr
    1dbc:	e000e010 	.word	0xe000e010

00001dc0 <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    1dc0:	4b02      	ldr	r3, [pc, #8]	; (1dcc <OsIf_Timer_System_Internal_GetCounter+0xc>)
    1dc2:	689b      	ldr	r3, [r3, #8]
    1dc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    1dc8:	4618      	mov	r0, r3
    1dca:	4770      	bx	lr
    1dcc:	e000e010 	.word	0xe000e010

00001dd0 <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    1dd0:	b084      	sub	sp, #16
    1dd2:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    1dd4:	4b10      	ldr	r3, [pc, #64]	; (1e18 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    1dd6:	689b      	ldr	r3, [r3, #8]
    1dd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1ddc:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    1dde:	2300      	movs	r3, #0
    1de0:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    1de2:	9b01      	ldr	r3, [sp, #4]
    1de4:	681b      	ldr	r3, [r3, #0]
    1de6:	9a02      	ldr	r2, [sp, #8]
    1de8:	429a      	cmp	r2, r3
    1dea:	d909      	bls.n	1e00 <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    1dec:	9b01      	ldr	r3, [sp, #4]
    1dee:	681a      	ldr	r2, [r3, #0]
    1df0:	9b02      	ldr	r3, [sp, #8]
    1df2:	1ad3      	subs	r3, r2, r3
    1df4:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    1df8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    1dfc:	9303      	str	r3, [sp, #12]
    1dfe:	e004      	b.n	1e0a <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    1e00:	9b01      	ldr	r3, [sp, #4]
    1e02:	681a      	ldr	r2, [r3, #0]
    1e04:	9b02      	ldr	r3, [sp, #8]
    1e06:	1ad3      	subs	r3, r2, r3
    1e08:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    1e0a:	9b01      	ldr	r3, [sp, #4]
    1e0c:	9a02      	ldr	r2, [sp, #8]
    1e0e:	601a      	str	r2, [r3, #0]

    return dif;
    1e10:	9b03      	ldr	r3, [sp, #12]
}
    1e12:	4618      	mov	r0, r3
    1e14:	b004      	add	sp, #16
    1e16:	4770      	bx	lr
    1e18:	e000e010 	.word	0xe000e010

00001e1c <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    1e1c:	b082      	sub	sp, #8
    1e1e:	9001      	str	r0, [sp, #4]
    1e20:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    1e22:	bf00      	nop
    1e24:	b002      	add	sp, #8
    1e26:	4770      	bx	lr

00001e28 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    1e28:	b500      	push	{lr}
    1e2a:	b085      	sub	sp, #20
    1e2c:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    1e2e:	4b24      	ldr	r3, [pc, #144]	; (1ec0 <Clock_Ip_UpdateDriverContext+0x98>)
    1e30:	2201      	movs	r2, #1
    1e32:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    1e34:	4b23      	ldr	r3, [pc, #140]	; (1ec4 <Clock_Ip_UpdateDriverContext+0x9c>)
    1e36:	681b      	ldr	r3, [r3, #0]
    1e38:	2102      	movs	r1, #2
    1e3a:	4618      	mov	r0, r3
    1e3c:	f003 fc32 	bl	56a4 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e40:	2300      	movs	r3, #0
    1e42:	f88d 300f 	strb.w	r3, [sp, #15]
    1e46:	e015      	b.n	1e74 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    1e48:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e4c:	9a01      	ldr	r2, [sp, #4]
    1e4e:	334a      	adds	r3, #74	; 0x4a
    1e50:	00db      	lsls	r3, r3, #3
    1e52:	4413      	add	r3, r2
    1e54:	6858      	ldr	r0, [r3, #4]
    1e56:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e5a:	9a01      	ldr	r2, [sp, #4]
    1e5c:	334a      	adds	r3, #74	; 0x4a
    1e5e:	00db      	lsls	r3, r3, #3
    1e60:	4413      	add	r3, r2
    1e62:	689b      	ldr	r3, [r3, #8]
    1e64:	4619      	mov	r1, r3
    1e66:	f001 fadc 	bl	3422 <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    1e6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e6e:	3301      	adds	r3, #1
    1e70:	f88d 300f 	strb.w	r3, [sp, #15]
    1e74:	9b01      	ldr	r3, [sp, #4]
    1e76:	7bdb      	ldrb	r3, [r3, #15]
    1e78:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e7c:	429a      	cmp	r2, r3
    1e7e:	d3e3      	bcc.n	1e48 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    1e80:	f000 f824 	bl	1ecc <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1e84:	2301      	movs	r3, #1
    1e86:	f88d 300f 	strb.w	r3, [sp, #15]
    1e8a:	e00e      	b.n	1eaa <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    1e8c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e90:	9b01      	ldr	r3, [sp, #4]
    1e92:	327e      	adds	r2, #126	; 0x7e
    1e94:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    1e98:	490b      	ldr	r1, [pc, #44]	; (1ec8 <Clock_Ip_UpdateDriverContext+0xa0>)
    1e9a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1e9e:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    1ea0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1ea4:	3301      	adds	r3, #1
    1ea6:	f88d 300f 	strb.w	r3, [sp, #15]
    1eaa:	9b01      	ldr	r3, [sp, #4]
    1eac:	7cdb      	ldrb	r3, [r3, #19]
    1eae:	f89d 200f 	ldrb.w	r2, [sp, #15]
    1eb2:	429a      	cmp	r2, r3
    1eb4:	d3ea      	bcc.n	1e8c <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    1eb6:	bf00      	nop
    1eb8:	bf00      	nop
    1eba:	b005      	add	sp, #20
    1ebc:	f85d fb04 	ldr.w	pc, [sp], #4
    1ec0:	1fff8b18 	.word	0x1fff8b18
    1ec4:	1fff8b38 	.word	0x1fff8b38
    1ec8:	1fff8b44 	.word	0x1fff8b44

00001ecc <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    1ecc:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    1ece:	4b23      	ldr	r3, [pc, #140]	; (1f5c <Clock_Ip_CallEmptyCallbacks+0x90>)
    1ed0:	781b      	ldrb	r3, [r3, #0]
    1ed2:	f083 0301 	eor.w	r3, r3, #1
    1ed6:	b2db      	uxtb	r3, r3
    1ed8:	2b00      	cmp	r3, #0
    1eda:	d03d      	beq.n	1f58 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    1edc:	4b1f      	ldr	r3, [pc, #124]	; (1f5c <Clock_Ip_CallEmptyCallbacks+0x90>)
    1ede:	2201      	movs	r2, #1
    1ee0:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1ee2:	4b1f      	ldr	r3, [pc, #124]	; (1f60 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1ee4:	685b      	ldr	r3, [r3, #4]
    1ee6:	2100      	movs	r1, #0
    1ee8:	2000      	movs	r0, #0
    1eea:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    1eec:	4b1c      	ldr	r3, [pc, #112]	; (1f60 <Clock_Ip_CallEmptyCallbacks+0x94>)
    1eee:	689b      	ldr	r3, [r3, #8]
    1ef0:	2057      	movs	r0, #87	; 0x57
    1ef2:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1ef4:	4b1b      	ldr	r3, [pc, #108]	; (1f64 <Clock_Ip_CallEmptyCallbacks+0x98>)
    1ef6:	681b      	ldr	r3, [r3, #0]
    1ef8:	2000      	movs	r0, #0
    1efa:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    1efc:	4b1a      	ldr	r3, [pc, #104]	; (1f68 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    1efe:	681b      	ldr	r3, [r3, #0]
    1f00:	2000      	movs	r0, #0
    1f02:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    1f04:	4b19      	ldr	r3, [pc, #100]	; (1f6c <Clock_Ip_CallEmptyCallbacks+0xa0>)
    1f06:	681b      	ldr	r3, [r3, #0]
    1f08:	2000      	movs	r0, #0
    1f0a:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f0c:	4b18      	ldr	r3, [pc, #96]	; (1f70 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1f0e:	685b      	ldr	r3, [r3, #4]
    1f10:	2000      	movs	r0, #0
    1f12:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1f14:	4b16      	ldr	r3, [pc, #88]	; (1f70 <Clock_Ip_CallEmptyCallbacks+0xa4>)
    1f16:	689b      	ldr	r3, [r3, #8]
    1f18:	2057      	movs	r0, #87	; 0x57
    1f1a:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f1c:	4b15      	ldr	r3, [pc, #84]	; (1f74 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1f1e:	681b      	ldr	r3, [r3, #0]
    1f20:	2000      	movs	r0, #0
    1f22:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    1f24:	4b13      	ldr	r3, [pc, #76]	; (1f74 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    1f26:	685b      	ldr	r3, [r3, #4]
    1f28:	2100      	movs	r1, #0
    1f2a:	2057      	movs	r0, #87	; 0x57
    1f2c:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f2e:	4b12      	ldr	r3, [pc, #72]	; (1f78 <Clock_Ip_CallEmptyCallbacks+0xac>)
    1f30:	681b      	ldr	r3, [r3, #0]
    1f32:	2000      	movs	r0, #0
    1f34:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f36:	4b11      	ldr	r3, [pc, #68]	; (1f7c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1f38:	685b      	ldr	r3, [r3, #4]
    1f3a:	2000      	movs	r0, #0
    1f3c:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    1f3e:	4b0f      	ldr	r3, [pc, #60]	; (1f7c <Clock_Ip_CallEmptyCallbacks+0xb0>)
    1f40:	689b      	ldr	r3, [r3, #8]
    1f42:	2057      	movs	r0, #87	; 0x57
    1f44:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    1f46:	4b0e      	ldr	r3, [pc, #56]	; (1f80 <Clock_Ip_CallEmptyCallbacks+0xb4>)
    1f48:	685b      	ldr	r3, [r3, #4]
    1f4a:	2000      	movs	r0, #0
    1f4c:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    1f4e:	4b0d      	ldr	r3, [pc, #52]	; (1f84 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    1f50:	681b      	ldr	r3, [r3, #0]
    1f52:	2100      	movs	r1, #0
    1f54:	2000      	movs	r0, #0
    1f56:	4798      	blx	r3
    }
}
    1f58:	bf00      	nop
    1f5a:	bd08      	pop	{r3, pc}
    1f5c:	1fff8b3c 	.word	0x1fff8b3c
    1f60:	0000f3d4 	.word	0x0000f3d4
    1f64:	0000f2e8 	.word	0x0000f2e8
    1f68:	0000f324 	.word	0x0000f324
    1f6c:	0000f32c 	.word	0x0000f32c
    1f70:	0000f354 	.word	0x0000f354
    1f74:	0000f360 	.word	0x0000f360
    1f78:	0000f398 	.word	0x0000f398
    1f7c:	0000f3e4 	.word	0x0000f3e4
    1f80:	0000f410 	.word	0x0000f410
    1f84:	0000f40c 	.word	0x0000f40c

00001f88 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    1f88:	b500      	push	{lr}
    1f8a:	b085      	sub	sp, #20
    1f8c:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1f8e:	9b01      	ldr	r3, [sp, #4]
    1f90:	7adb      	ldrb	r3, [r3, #11]
    1f92:	9303      	str	r3, [sp, #12]
    1f94:	e01f      	b.n	1fd6 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1f96:	9b03      	ldr	r3, [sp, #12]
    1f98:	1e5a      	subs	r2, r3, #1
    1f9a:	9b01      	ldr	r3, [sp, #4]
    1f9c:	320d      	adds	r2, #13
    1f9e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    1fa2:	495a      	ldr	r1, [pc, #360]	; (210c <Clock_Ip_ResetClockConfiguration+0x184>)
    1fa4:	4613      	mov	r3, r2
    1fa6:	00db      	lsls	r3, r3, #3
    1fa8:	4413      	add	r3, r2
    1faa:	440b      	add	r3, r1
    1fac:	3301      	adds	r3, #1
    1fae:	781b      	ldrb	r3, [r3, #0]
    1fb0:	461a      	mov	r2, r3
    1fb2:	4b57      	ldr	r3, [pc, #348]	; (2110 <Clock_Ip_ResetClockConfiguration+0x188>)
    1fb4:	5c9b      	ldrb	r3, [r3, r2]
    1fb6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    1fb8:	4a56      	ldr	r2, [pc, #344]	; (2114 <Clock_Ip_ResetClockConfiguration+0x18c>)
    1fba:	9b02      	ldr	r3, [sp, #8]
    1fbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1fc0:	9a03      	ldr	r2, [sp, #12]
    1fc2:	3a01      	subs	r2, #1
    1fc4:	320d      	adds	r2, #13
    1fc6:	00d2      	lsls	r2, r2, #3
    1fc8:	9901      	ldr	r1, [sp, #4]
    1fca:	440a      	add	r2, r1
    1fcc:	4610      	mov	r0, r2
    1fce:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    1fd0:	9b03      	ldr	r3, [sp, #12]
    1fd2:	3b01      	subs	r3, #1
    1fd4:	9303      	str	r3, [sp, #12]
    1fd6:	9b03      	ldr	r3, [sp, #12]
    1fd8:	2b00      	cmp	r3, #0
    1fda:	d1dc      	bne.n	1f96 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    1fdc:	9b01      	ldr	r3, [sp, #4]
    1fde:	7b9b      	ldrb	r3, [r3, #14]
    1fe0:	9303      	str	r3, [sp, #12]
    1fe2:	e026      	b.n	2032 <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    1fe4:	9b03      	ldr	r3, [sp, #12]
    1fe6:	3b01      	subs	r3, #1
    1fe8:	9a01      	ldr	r2, [sp, #4]
    1fea:	3324      	adds	r3, #36	; 0x24
    1fec:	011b      	lsls	r3, r3, #4
    1fee:	4413      	add	r3, r2
    1ff0:	3304      	adds	r3, #4
    1ff2:	681a      	ldr	r2, [r3, #0]
    1ff4:	4945      	ldr	r1, [pc, #276]	; (210c <Clock_Ip_ResetClockConfiguration+0x184>)
    1ff6:	4613      	mov	r3, r2
    1ff8:	00db      	lsls	r3, r3, #3
    1ffa:	4413      	add	r3, r2
    1ffc:	440b      	add	r3, r1
    1ffe:	3301      	adds	r3, #1
    2000:	781b      	ldrb	r3, [r3, #0]
    2002:	461a      	mov	r2, r3
    2004:	4b44      	ldr	r3, [pc, #272]	; (2118 <Clock_Ip_ResetClockConfiguration+0x190>)
    2006:	5c9b      	ldrb	r3, [r3, r2]
    2008:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    200a:	4944      	ldr	r1, [pc, #272]	; (211c <Clock_Ip_ResetClockConfiguration+0x194>)
    200c:	9a02      	ldr	r2, [sp, #8]
    200e:	4613      	mov	r3, r2
    2010:	005b      	lsls	r3, r3, #1
    2012:	4413      	add	r3, r2
    2014:	009b      	lsls	r3, r3, #2
    2016:	440b      	add	r3, r1
    2018:	681b      	ldr	r3, [r3, #0]
    201a:	9a03      	ldr	r2, [sp, #12]
    201c:	3a01      	subs	r2, #1
    201e:	3224      	adds	r2, #36	; 0x24
    2020:	0112      	lsls	r2, r2, #4
    2022:	9901      	ldr	r1, [sp, #4]
    2024:	440a      	add	r2, r1
    2026:	3204      	adds	r2, #4
    2028:	4610      	mov	r0, r2
    202a:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    202c:	9b03      	ldr	r3, [sp, #12]
    202e:	3b01      	subs	r3, #1
    2030:	9303      	str	r3, [sp, #12]
    2032:	9b03      	ldr	r3, [sp, #12]
    2034:	2b00      	cmp	r3, #0
    2036:	d1d5      	bne.n	1fe4 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2038:	9b01      	ldr	r3, [sp, #4]
    203a:	7a9b      	ldrb	r3, [r3, #10]
    203c:	9303      	str	r3, [sp, #12]
    203e:	e02a      	b.n	2096 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    2040:	9b03      	ldr	r3, [sp, #12]
    2042:	1e5a      	subs	r2, r3, #1
    2044:	9901      	ldr	r1, [sp, #4]
    2046:	4613      	mov	r3, r2
    2048:	009b      	lsls	r3, r3, #2
    204a:	4413      	add	r3, r2
    204c:	00db      	lsls	r3, r3, #3
    204e:	440b      	add	r3, r1
    2050:	3340      	adds	r3, #64	; 0x40
    2052:	681a      	ldr	r2, [r3, #0]
    2054:	492d      	ldr	r1, [pc, #180]	; (210c <Clock_Ip_ResetClockConfiguration+0x184>)
    2056:	4613      	mov	r3, r2
    2058:	00db      	lsls	r3, r3, #3
    205a:	4413      	add	r3, r2
    205c:	440b      	add	r3, r1
    205e:	3301      	adds	r3, #1
    2060:	781b      	ldrb	r3, [r3, #0]
    2062:	461a      	mov	r2, r3
    2064:	4b2e      	ldr	r3, [pc, #184]	; (2120 <Clock_Ip_ResetClockConfiguration+0x198>)
    2066:	5c9b      	ldrb	r3, [r3, r2]
    2068:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    206a:	492e      	ldr	r1, [pc, #184]	; (2124 <Clock_Ip_ResetClockConfiguration+0x19c>)
    206c:	9a02      	ldr	r2, [sp, #8]
    206e:	4613      	mov	r3, r2
    2070:	009b      	lsls	r3, r3, #2
    2072:	4413      	add	r3, r2
    2074:	009b      	lsls	r3, r3, #2
    2076:	440b      	add	r3, r1
    2078:	6819      	ldr	r1, [r3, #0]
    207a:	9b03      	ldr	r3, [sp, #12]
    207c:	1e5a      	subs	r2, r3, #1
    207e:	4613      	mov	r3, r2
    2080:	009b      	lsls	r3, r3, #2
    2082:	4413      	add	r3, r2
    2084:	00db      	lsls	r3, r3, #3
    2086:	3340      	adds	r3, #64	; 0x40
    2088:	9a01      	ldr	r2, [sp, #4]
    208a:	4413      	add	r3, r2
    208c:	4618      	mov	r0, r3
    208e:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2090:	9b03      	ldr	r3, [sp, #12]
    2092:	3b01      	subs	r3, #1
    2094:	9303      	str	r3, [sp, #12]
    2096:	9b03      	ldr	r3, [sp, #12]
    2098:	2b00      	cmp	r3, #0
    209a:	d1d1      	bne.n	2040 <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    209c:	9b01      	ldr	r3, [sp, #4]
    209e:	7a5b      	ldrb	r3, [r3, #9]
    20a0:	9303      	str	r3, [sp, #12]
    20a2:	e02b      	b.n	20fc <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    20a4:	9b03      	ldr	r3, [sp, #12]
    20a6:	1e5a      	subs	r2, r3, #1
    20a8:	9901      	ldr	r1, [sp, #4]
    20aa:	4613      	mov	r3, r2
    20ac:	009b      	lsls	r3, r3, #2
    20ae:	4413      	add	r3, r2
    20b0:	009b      	lsls	r3, r3, #2
    20b2:	440b      	add	r3, r1
    20b4:	332c      	adds	r3, #44	; 0x2c
    20b6:	681a      	ldr	r2, [r3, #0]
    20b8:	4914      	ldr	r1, [pc, #80]	; (210c <Clock_Ip_ResetClockConfiguration+0x184>)
    20ba:	4613      	mov	r3, r2
    20bc:	00db      	lsls	r3, r3, #3
    20be:	4413      	add	r3, r2
    20c0:	440b      	add	r3, r1
    20c2:	3301      	adds	r3, #1
    20c4:	781b      	ldrb	r3, [r3, #0]
    20c6:	461a      	mov	r2, r3
    20c8:	4b17      	ldr	r3, [pc, #92]	; (2128 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    20ca:	5c9b      	ldrb	r3, [r3, r2]
    20cc:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    20ce:	4917      	ldr	r1, [pc, #92]	; (212c <Clock_Ip_ResetClockConfiguration+0x1a4>)
    20d0:	9a02      	ldr	r2, [sp, #8]
    20d2:	4613      	mov	r3, r2
    20d4:	009b      	lsls	r3, r3, #2
    20d6:	4413      	add	r3, r2
    20d8:	009b      	lsls	r3, r3, #2
    20da:	440b      	add	r3, r1
    20dc:	6819      	ldr	r1, [r3, #0]
    20de:	9b03      	ldr	r3, [sp, #12]
    20e0:	1e5a      	subs	r2, r3, #1
    20e2:	4613      	mov	r3, r2
    20e4:	009b      	lsls	r3, r3, #2
    20e6:	4413      	add	r3, r2
    20e8:	009b      	lsls	r3, r3, #2
    20ea:	3328      	adds	r3, #40	; 0x28
    20ec:	9a01      	ldr	r2, [sp, #4]
    20ee:	4413      	add	r3, r2
    20f0:	3304      	adds	r3, #4
    20f2:	4618      	mov	r0, r3
    20f4:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    20f6:	9b03      	ldr	r3, [sp, #12]
    20f8:	3b01      	subs	r3, #1
    20fa:	9303      	str	r3, [sp, #12]
    20fc:	9b03      	ldr	r3, [sp, #12]
    20fe:	2b00      	cmp	r3, #0
    2100:	d1d0      	bne.n	20a4 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    2102:	bf00      	nop
    2104:	bf00      	nop
    2106:	b005      	add	sp, #20
    2108:	f85d fb04 	ldr.w	pc, [sp], #4
    210c:	0000edd8 	.word	0x0000edd8
    2110:	0000eda8 	.word	0x0000eda8
    2114:	0000f410 	.word	0x0000f410
    2118:	0000ed88 	.word	0x0000ed88
    211c:	0000f354 	.word	0x0000f354
    2120:	0000ed98 	.word	0x0000ed98
    2124:	0000f3e4 	.word	0x0000f3e4
    2128:	0000ed58 	.word	0x0000ed58
    212c:	0000f32c 	.word	0x0000f32c

00002130 <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    2130:	b500      	push	{lr}
    2132:	b085      	sub	sp, #20
    2134:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2136:	2301      	movs	r3, #1
    2138:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    213a:	9801      	ldr	r0, [sp, #4]
    213c:	f000 f818 	bl	2170 <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    2140:	4b0a      	ldr	r3, [pc, #40]	; (216c <Clock_Ip_Init+0x3c>)
    2142:	781b      	ldrb	r3, [r3, #0]
    2144:	2b00      	cmp	r3, #0
    2146:	d00a      	beq.n	215e <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2148:	f000 fb74 	bl	2834 <Clock_Ip_GetPllStatus>
    214c:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    214e:	9b02      	ldr	r3, [sp, #8]
    2150:	2b00      	cmp	r3, #0
    2152:	d106      	bne.n	2162 <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2154:	f000 fbf2 	bl	293c <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2158:	2300      	movs	r3, #0
    215a:	9303      	str	r3, [sp, #12]
    215c:	e001      	b.n	2162 <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    215e:	2300      	movs	r3, #0
    2160:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    2162:	9b03      	ldr	r3, [sp, #12]
}
    2164:	4618      	mov	r0, r3
    2166:	b005      	add	sp, #20
    2168:	f85d fb04 	ldr.w	pc, [sp], #4
    216c:	1fff8b40 	.word	0x1fff8b40

00002170 <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    2170:	b510      	push	{r4, lr}
    2172:	b084      	sub	sp, #16
    2174:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2176:	4a9f      	ldr	r2, [pc, #636]	; (23f4 <Clock_Ip_InitClock+0x284>)
    2178:	9b01      	ldr	r3, [sp, #4]
    217a:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    217c:	2101      	movs	r1, #1
    217e:	9801      	ldr	r0, [sp, #4]
    2180:	f003 fa90 	bl	56a4 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2184:	4b9b      	ldr	r3, [pc, #620]	; (23f4 <Clock_Ip_InitClock+0x284>)
    2186:	681b      	ldr	r3, [r3, #0]
    2188:	2b00      	cmp	r3, #0
    218a:	d030      	beq.n	21ee <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    218c:	2300      	movs	r3, #0
    218e:	9303      	str	r3, [sp, #12]
    2190:	e027      	b.n	21e2 <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2192:	9901      	ldr	r1, [sp, #4]
    2194:	9a03      	ldr	r2, [sp, #12]
    2196:	4613      	mov	r3, r2
    2198:	009b      	lsls	r3, r3, #2
    219a:	4413      	add	r3, r2
    219c:	009b      	lsls	r3, r3, #2
    219e:	440b      	add	r3, r1
    21a0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    21a4:	681a      	ldr	r2, [r3, #0]
    21a6:	4994      	ldr	r1, [pc, #592]	; (23f8 <Clock_Ip_InitClock+0x288>)
    21a8:	4613      	mov	r3, r2
    21aa:	00db      	lsls	r3, r3, #3
    21ac:	4413      	add	r3, r2
    21ae:	440b      	add	r3, r1
    21b0:	3301      	adds	r3, #1
    21b2:	781b      	ldrb	r3, [r3, #0]
    21b4:	461a      	mov	r2, r3
    21b6:	4b91      	ldr	r3, [pc, #580]	; (23fc <Clock_Ip_InitClock+0x28c>)
    21b8:	5c9b      	ldrb	r3, [r3, r2]
    21ba:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    21bc:	4a90      	ldr	r2, [pc, #576]	; (2400 <Clock_Ip_InitClock+0x290>)
    21be:	9b02      	ldr	r3, [sp, #8]
    21c0:	011b      	lsls	r3, r3, #4
    21c2:	4413      	add	r3, r2
    21c4:	6819      	ldr	r1, [r3, #0]
    21c6:	9a03      	ldr	r2, [sp, #12]
    21c8:	4613      	mov	r3, r2
    21ca:	009b      	lsls	r3, r3, #2
    21cc:	4413      	add	r3, r2
    21ce:	009b      	lsls	r3, r3, #2
    21d0:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    21d4:	9a01      	ldr	r2, [sp, #4]
    21d6:	4413      	add	r3, r2
    21d8:	4618      	mov	r0, r3
    21da:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    21dc:	9b03      	ldr	r3, [sp, #12]
    21de:	3301      	adds	r3, #1
    21e0:	9303      	str	r3, [sp, #12]
    21e2:	9b01      	ldr	r3, [sp, #4]
    21e4:	7c9b      	ldrb	r3, [r3, #18]
    21e6:	461a      	mov	r2, r3
    21e8:	9b03      	ldr	r3, [sp, #12]
    21ea:	4293      	cmp	r3, r2
    21ec:	d3d1      	bcc.n	2192 <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    21ee:	9801      	ldr	r0, [sp, #4]
    21f0:	f7ff feca 	bl	1f88 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    21f4:	2300      	movs	r3, #0
    21f6:	9303      	str	r3, [sp, #12]
    21f8:	e029      	b.n	224e <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    21fa:	9901      	ldr	r1, [sp, #4]
    21fc:	9a03      	ldr	r2, [sp, #12]
    21fe:	4613      	mov	r3, r2
    2200:	005b      	lsls	r3, r3, #1
    2202:	4413      	add	r3, r2
    2204:	009b      	lsls	r3, r3, #2
    2206:	440b      	add	r3, r1
    2208:	3314      	adds	r3, #20
    220a:	681a      	ldr	r2, [r3, #0]
    220c:	497a      	ldr	r1, [pc, #488]	; (23f8 <Clock_Ip_InitClock+0x288>)
    220e:	4613      	mov	r3, r2
    2210:	00db      	lsls	r3, r3, #3
    2212:	4413      	add	r3, r2
    2214:	440b      	add	r3, r1
    2216:	3301      	adds	r3, #1
    2218:	781b      	ldrb	r3, [r3, #0]
    221a:	461a      	mov	r2, r3
    221c:	4b79      	ldr	r3, [pc, #484]	; (2404 <Clock_Ip_InitClock+0x294>)
    221e:	5c9b      	ldrb	r3, [r3, r2]
    2220:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    2222:	4979      	ldr	r1, [pc, #484]	; (2408 <Clock_Ip_InitClock+0x298>)
    2224:	9a02      	ldr	r2, [sp, #8]
    2226:	4613      	mov	r3, r2
    2228:	005b      	lsls	r3, r3, #1
    222a:	4413      	add	r3, r2
    222c:	009b      	lsls	r3, r3, #2
    222e:	440b      	add	r3, r1
    2230:	6819      	ldr	r1, [r3, #0]
    2232:	9a03      	ldr	r2, [sp, #12]
    2234:	4613      	mov	r3, r2
    2236:	005b      	lsls	r3, r3, #1
    2238:	4413      	add	r3, r2
    223a:	009b      	lsls	r3, r3, #2
    223c:	3310      	adds	r3, #16
    223e:	9a01      	ldr	r2, [sp, #4]
    2240:	4413      	add	r3, r2
    2242:	3304      	adds	r3, #4
    2244:	4618      	mov	r0, r3
    2246:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2248:	9b03      	ldr	r3, [sp, #12]
    224a:	3301      	adds	r3, #1
    224c:	9303      	str	r3, [sp, #12]
    224e:	9b01      	ldr	r3, [sp, #4]
    2250:	7a1b      	ldrb	r3, [r3, #8]
    2252:	461a      	mov	r2, r3
    2254:	9b03      	ldr	r3, [sp, #12]
    2256:	4293      	cmp	r3, r2
    2258:	d3cf      	bcc.n	21fa <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    225a:	2300      	movs	r3, #0
    225c:	9303      	str	r3, [sp, #12]
    225e:	e02a      	b.n	22b6 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2260:	9901      	ldr	r1, [sp, #4]
    2262:	9a03      	ldr	r2, [sp, #12]
    2264:	4613      	mov	r3, r2
    2266:	009b      	lsls	r3, r3, #2
    2268:	4413      	add	r3, r2
    226a:	009b      	lsls	r3, r3, #2
    226c:	440b      	add	r3, r1
    226e:	332c      	adds	r3, #44	; 0x2c
    2270:	681a      	ldr	r2, [r3, #0]
    2272:	4961      	ldr	r1, [pc, #388]	; (23f8 <Clock_Ip_InitClock+0x288>)
    2274:	4613      	mov	r3, r2
    2276:	00db      	lsls	r3, r3, #3
    2278:	4413      	add	r3, r2
    227a:	440b      	add	r3, r1
    227c:	3301      	adds	r3, #1
    227e:	781b      	ldrb	r3, [r3, #0]
    2280:	461a      	mov	r2, r3
    2282:	4b62      	ldr	r3, [pc, #392]	; (240c <Clock_Ip_InitClock+0x29c>)
    2284:	5c9b      	ldrb	r3, [r3, r2]
    2286:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2288:	4961      	ldr	r1, [pc, #388]	; (2410 <Clock_Ip_InitClock+0x2a0>)
    228a:	9a02      	ldr	r2, [sp, #8]
    228c:	4613      	mov	r3, r2
    228e:	009b      	lsls	r3, r3, #2
    2290:	4413      	add	r3, r2
    2292:	009b      	lsls	r3, r3, #2
    2294:	440b      	add	r3, r1
    2296:	3304      	adds	r3, #4
    2298:	6819      	ldr	r1, [r3, #0]
    229a:	9a03      	ldr	r2, [sp, #12]
    229c:	4613      	mov	r3, r2
    229e:	009b      	lsls	r3, r3, #2
    22a0:	4413      	add	r3, r2
    22a2:	009b      	lsls	r3, r3, #2
    22a4:	3328      	adds	r3, #40	; 0x28
    22a6:	9a01      	ldr	r2, [sp, #4]
    22a8:	4413      	add	r3, r2
    22aa:	3304      	adds	r3, #4
    22ac:	4618      	mov	r0, r3
    22ae:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    22b0:	9b03      	ldr	r3, [sp, #12]
    22b2:	3301      	adds	r3, #1
    22b4:	9303      	str	r3, [sp, #12]
    22b6:	9b01      	ldr	r3, [sp, #4]
    22b8:	7a5b      	ldrb	r3, [r3, #9]
    22ba:	461a      	mov	r2, r3
    22bc:	9b03      	ldr	r3, [sp, #12]
    22be:	4293      	cmp	r3, r2
    22c0:	d3ce      	bcc.n	2260 <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    22c2:	9801      	ldr	r0, [sp, #4]
    22c4:	f7ff fdb0 	bl	1e28 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    22c8:	2300      	movs	r3, #0
    22ca:	9303      	str	r3, [sp, #12]
    22cc:	e028      	b.n	2320 <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    22ce:	9901      	ldr	r1, [sp, #4]
    22d0:	9a03      	ldr	r2, [sp, #12]
    22d2:	4613      	mov	r3, r2
    22d4:	009b      	lsls	r3, r3, #2
    22d6:	4413      	add	r3, r2
    22d8:	009b      	lsls	r3, r3, #2
    22da:	440b      	add	r3, r1
    22dc:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    22e0:	681a      	ldr	r2, [r3, #0]
    22e2:	4945      	ldr	r1, [pc, #276]	; (23f8 <Clock_Ip_InitClock+0x288>)
    22e4:	4613      	mov	r3, r2
    22e6:	00db      	lsls	r3, r3, #3
    22e8:	4413      	add	r3, r2
    22ea:	440b      	add	r3, r1
    22ec:	3301      	adds	r3, #1
    22ee:	781b      	ldrb	r3, [r3, #0]
    22f0:	461a      	mov	r2, r3
    22f2:	4b48      	ldr	r3, [pc, #288]	; (2414 <Clock_Ip_InitClock+0x2a4>)
    22f4:	5c9b      	ldrb	r3, [r3, r2]
    22f6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    22f8:	4a47      	ldr	r2, [pc, #284]	; (2418 <Clock_Ip_InitClock+0x2a8>)
    22fa:	9b02      	ldr	r3, [sp, #8]
    22fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    2300:	9a03      	ldr	r2, [sp, #12]
    2302:	4613      	mov	r3, r2
    2304:	009b      	lsls	r3, r3, #2
    2306:	4413      	add	r3, r2
    2308:	009b      	lsls	r3, r3, #2
    230a:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    230e:	9a01      	ldr	r2, [sp, #4]
    2310:	4413      	add	r3, r2
    2312:	3304      	adds	r3, #4
    2314:	9903      	ldr	r1, [sp, #12]
    2316:	4618      	mov	r0, r3
    2318:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    231a:	9b03      	ldr	r3, [sp, #12]
    231c:	3301      	adds	r3, #1
    231e:	9303      	str	r3, [sp, #12]
    2320:	9b01      	ldr	r3, [sp, #4]
    2322:	7c5b      	ldrb	r3, [r3, #17]
    2324:	461a      	mov	r2, r3
    2326:	9b03      	ldr	r3, [sp, #12]
    2328:	4293      	cmp	r3, r2
    232a:	d3d0      	bcc.n	22ce <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    232c:	2300      	movs	r3, #0
    232e:	9303      	str	r3, [sp, #12]
    2330:	e026      	b.n	2380 <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2332:	9901      	ldr	r1, [sp, #4]
    2334:	9a03      	ldr	r2, [sp, #12]
    2336:	4613      	mov	r3, r2
    2338:	005b      	lsls	r3, r3, #1
    233a:	4413      	add	r3, r2
    233c:	009b      	lsls	r3, r3, #2
    233e:	440b      	add	r3, r1
    2340:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2344:	681a      	ldr	r2, [r3, #0]
    2346:	492c      	ldr	r1, [pc, #176]	; (23f8 <Clock_Ip_InitClock+0x288>)
    2348:	4613      	mov	r3, r2
    234a:	00db      	lsls	r3, r3, #3
    234c:	4413      	add	r3, r2
    234e:	440b      	add	r3, r1
    2350:	3301      	adds	r3, #1
    2352:	781b      	ldrb	r3, [r3, #0]
    2354:	461a      	mov	r2, r3
    2356:	4b31      	ldr	r3, [pc, #196]	; (241c <Clock_Ip_InitClock+0x2ac>)
    2358:	5c9b      	ldrb	r3, [r3, r2]
    235a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    235c:	4a30      	ldr	r2, [pc, #192]	; (2420 <Clock_Ip_InitClock+0x2b0>)
    235e:	9b02      	ldr	r3, [sp, #8]
    2360:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2364:	9a03      	ldr	r2, [sp, #12]
    2366:	4613      	mov	r3, r2
    2368:	005b      	lsls	r3, r3, #1
    236a:	4413      	add	r3, r2
    236c:	009b      	lsls	r3, r3, #2
    236e:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2372:	9a01      	ldr	r2, [sp, #4]
    2374:	4413      	add	r3, r2
    2376:	4618      	mov	r0, r3
    2378:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    237a:	9b03      	ldr	r3, [sp, #12]
    237c:	3301      	adds	r3, #1
    237e:	9303      	str	r3, [sp, #12]
    2380:	9b01      	ldr	r3, [sp, #4]
    2382:	7b5b      	ldrb	r3, [r3, #13]
    2384:	461a      	mov	r2, r3
    2386:	9b03      	ldr	r3, [sp, #12]
    2388:	4293      	cmp	r3, r2
    238a:	d3d2      	bcc.n	2332 <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    238c:	2300      	movs	r3, #0
    238e:	9303      	str	r3, [sp, #12]
    2390:	e026      	b.n	23e0 <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    2392:	9901      	ldr	r1, [sp, #4]
    2394:	9a03      	ldr	r2, [sp, #12]
    2396:	4613      	mov	r3, r2
    2398:	005b      	lsls	r3, r3, #1
    239a:	4413      	add	r3, r2
    239c:	009b      	lsls	r3, r3, #2
    239e:	440b      	add	r3, r1
    23a0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    23a4:	681a      	ldr	r2, [r3, #0]
    23a6:	4914      	ldr	r1, [pc, #80]	; (23f8 <Clock_Ip_InitClock+0x288>)
    23a8:	4613      	mov	r3, r2
    23aa:	00db      	lsls	r3, r3, #3
    23ac:	4413      	add	r3, r2
    23ae:	440b      	add	r3, r1
    23b0:	3301      	adds	r3, #1
    23b2:	781b      	ldrb	r3, [r3, #0]
    23b4:	461a      	mov	r2, r3
    23b6:	4b1b      	ldr	r3, [pc, #108]	; (2424 <Clock_Ip_InitClock+0x2b4>)
    23b8:	5c9b      	ldrb	r3, [r3, r2]
    23ba:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    23bc:	4a1a      	ldr	r2, [pc, #104]	; (2428 <Clock_Ip_InitClock+0x2b8>)
    23be:	9b02      	ldr	r3, [sp, #8]
    23c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    23c4:	9a03      	ldr	r2, [sp, #12]
    23c6:	4613      	mov	r3, r2
    23c8:	005b      	lsls	r3, r3, #1
    23ca:	4413      	add	r3, r2
    23cc:	009b      	lsls	r3, r3, #2
    23ce:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    23d2:	9a01      	ldr	r2, [sp, #4]
    23d4:	4413      	add	r3, r2
    23d6:	4618      	mov	r0, r3
    23d8:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    23da:	9b03      	ldr	r3, [sp, #12]
    23dc:	3301      	adds	r3, #1
    23de:	9303      	str	r3, [sp, #12]
    23e0:	9b01      	ldr	r3, [sp, #4]
    23e2:	7b1b      	ldrb	r3, [r3, #12]
    23e4:	461a      	mov	r2, r3
    23e6:	9b03      	ldr	r3, [sp, #12]
    23e8:	4293      	cmp	r3, r2
    23ea:	d3d2      	bcc.n	2392 <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    23ec:	2300      	movs	r3, #0
    23ee:	9303      	str	r3, [sp, #12]
    23f0:	e044      	b.n	247c <Clock_Ip_InitClock+0x30c>
    23f2:	bf00      	nop
    23f4:	1fff8b38 	.word	0x1fff8b38
    23f8:	0000edd8 	.word	0x0000edd8
    23fc:	0000edc8 	.word	0x0000edc8
    2400:	0000f3d4 	.word	0x0000f3d4
    2404:	0000ed68 	.word	0x0000ed68
    2408:	0000f398 	.word	0x0000f398
    240c:	0000ed58 	.word	0x0000ed58
    2410:	0000f32c 	.word	0x0000f32c
    2414:	0000edb8 	.word	0x0000edb8
    2418:	0000f40c 	.word	0x0000f40c
    241c:	0000ed48 	.word	0x0000ed48
    2420:	0000f324 	.word	0x0000f324
    2424:	0000ed38 	.word	0x0000ed38
    2428:	0000f2e8 	.word	0x0000f2e8
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    242c:	9901      	ldr	r1, [sp, #4]
    242e:	9a03      	ldr	r2, [sp, #12]
    2430:	4613      	mov	r3, r2
    2432:	005b      	lsls	r3, r3, #1
    2434:	4413      	add	r3, r2
    2436:	009b      	lsls	r3, r3, #2
    2438:	440b      	add	r3, r1
    243a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    243e:	681a      	ldr	r2, [r3, #0]
    2440:	49ac      	ldr	r1, [pc, #688]	; (26f4 <Clock_Ip_InitClock+0x584>)
    2442:	4613      	mov	r3, r2
    2444:	00db      	lsls	r3, r3, #3
    2446:	4413      	add	r3, r2
    2448:	440b      	add	r3, r1
    244a:	3301      	adds	r3, #1
    244c:	781b      	ldrb	r3, [r3, #0]
    244e:	461a      	mov	r2, r3
    2450:	4ba9      	ldr	r3, [pc, #676]	; (26f8 <Clock_Ip_InitClock+0x588>)
    2452:	5c9b      	ldrb	r3, [r3, r2]
    2454:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    2456:	4aa9      	ldr	r2, [pc, #676]	; (26fc <Clock_Ip_InitClock+0x58c>)
    2458:	9b02      	ldr	r3, [sp, #8]
    245a:	00db      	lsls	r3, r3, #3
    245c:	4413      	add	r3, r2
    245e:	6859      	ldr	r1, [r3, #4]
    2460:	9a03      	ldr	r2, [sp, #12]
    2462:	4613      	mov	r3, r2
    2464:	005b      	lsls	r3, r3, #1
    2466:	4413      	add	r3, r2
    2468:	009b      	lsls	r3, r3, #2
    246a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    246e:	9a01      	ldr	r2, [sp, #4]
    2470:	4413      	add	r3, r2
    2472:	4618      	mov	r0, r3
    2474:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2476:	9b03      	ldr	r3, [sp, #12]
    2478:	3301      	adds	r3, #1
    247a:	9303      	str	r3, [sp, #12]
    247c:	9b01      	ldr	r3, [sp, #4]
    247e:	7b5b      	ldrb	r3, [r3, #13]
    2480:	461a      	mov	r2, r3
    2482:	9b03      	ldr	r3, [sp, #12]
    2484:	4293      	cmp	r3, r2
    2486:	d3d1      	bcc.n	242c <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2488:	2300      	movs	r3, #0
    248a:	9303      	str	r3, [sp, #12]
    248c:	e029      	b.n	24e2 <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    248e:	9901      	ldr	r1, [sp, #4]
    2490:	9a03      	ldr	r2, [sp, #12]
    2492:	4613      	mov	r3, r2
    2494:	009b      	lsls	r3, r3, #2
    2496:	4413      	add	r3, r2
    2498:	00db      	lsls	r3, r3, #3
    249a:	440b      	add	r3, r1
    249c:	3340      	adds	r3, #64	; 0x40
    249e:	681a      	ldr	r2, [r3, #0]
    24a0:	4994      	ldr	r1, [pc, #592]	; (26f4 <Clock_Ip_InitClock+0x584>)
    24a2:	4613      	mov	r3, r2
    24a4:	00db      	lsls	r3, r3, #3
    24a6:	4413      	add	r3, r2
    24a8:	440b      	add	r3, r1
    24aa:	3301      	adds	r3, #1
    24ac:	781b      	ldrb	r3, [r3, #0]
    24ae:	461a      	mov	r2, r3
    24b0:	4b93      	ldr	r3, [pc, #588]	; (2700 <Clock_Ip_InitClock+0x590>)
    24b2:	5c9b      	ldrb	r3, [r3, r2]
    24b4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    24b6:	4993      	ldr	r1, [pc, #588]	; (2704 <Clock_Ip_InitClock+0x594>)
    24b8:	9a02      	ldr	r2, [sp, #8]
    24ba:	4613      	mov	r3, r2
    24bc:	009b      	lsls	r3, r3, #2
    24be:	4413      	add	r3, r2
    24c0:	009b      	lsls	r3, r3, #2
    24c2:	440b      	add	r3, r1
    24c4:	3304      	adds	r3, #4
    24c6:	6819      	ldr	r1, [r3, #0]
    24c8:	9a03      	ldr	r2, [sp, #12]
    24ca:	4613      	mov	r3, r2
    24cc:	009b      	lsls	r3, r3, #2
    24ce:	4413      	add	r3, r2
    24d0:	00db      	lsls	r3, r3, #3
    24d2:	3340      	adds	r3, #64	; 0x40
    24d4:	9a01      	ldr	r2, [sp, #4]
    24d6:	4413      	add	r3, r2
    24d8:	4618      	mov	r0, r3
    24da:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    24dc:	9b03      	ldr	r3, [sp, #12]
    24de:	3301      	adds	r3, #1
    24e0:	9303      	str	r3, [sp, #12]
    24e2:	9b01      	ldr	r3, [sp, #4]
    24e4:	7a9b      	ldrb	r3, [r3, #10]
    24e6:	461a      	mov	r2, r3
    24e8:	9b03      	ldr	r3, [sp, #12]
    24ea:	4293      	cmp	r3, r2
    24ec:	d3cf      	bcc.n	248e <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    24ee:	2300      	movs	r3, #0
    24f0:	9303      	str	r3, [sp, #12]
    24f2:	e029      	b.n	2548 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    24f4:	9901      	ldr	r1, [sp, #4]
    24f6:	9a03      	ldr	r2, [sp, #12]
    24f8:	4613      	mov	r3, r2
    24fa:	009b      	lsls	r3, r3, #2
    24fc:	4413      	add	r3, r2
    24fe:	009b      	lsls	r3, r3, #2
    2500:	440b      	add	r3, r1
    2502:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2506:	681a      	ldr	r2, [r3, #0]
    2508:	497a      	ldr	r1, [pc, #488]	; (26f4 <Clock_Ip_InitClock+0x584>)
    250a:	4613      	mov	r3, r2
    250c:	00db      	lsls	r3, r3, #3
    250e:	4413      	add	r3, r2
    2510:	440b      	add	r3, r1
    2512:	3301      	adds	r3, #1
    2514:	781b      	ldrb	r3, [r3, #0]
    2516:	461a      	mov	r2, r3
    2518:	4b7b      	ldr	r3, [pc, #492]	; (2708 <Clock_Ip_InitClock+0x598>)
    251a:	5c9b      	ldrb	r3, [r3, r2]
    251c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    251e:	4a7b      	ldr	r2, [pc, #492]	; (270c <Clock_Ip_InitClock+0x59c>)
    2520:	9b02      	ldr	r3, [sp, #8]
    2522:	011b      	lsls	r3, r3, #4
    2524:	4413      	add	r3, r2
    2526:	3304      	adds	r3, #4
    2528:	681c      	ldr	r4, [r3, #0]
    252a:	9a03      	ldr	r2, [sp, #12]
    252c:	4613      	mov	r3, r2
    252e:	009b      	lsls	r3, r3, #2
    2530:	4413      	add	r3, r2
    2532:	009b      	lsls	r3, r3, #2
    2534:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2538:	9a01      	ldr	r2, [sp, #4]
    253a:	4413      	add	r3, r2
    253c:	9903      	ldr	r1, [sp, #12]
    253e:	4618      	mov	r0, r3
    2540:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2542:	9b03      	ldr	r3, [sp, #12]
    2544:	3301      	adds	r3, #1
    2546:	9303      	str	r3, [sp, #12]
    2548:	9b01      	ldr	r3, [sp, #4]
    254a:	7c9b      	ldrb	r3, [r3, #18]
    254c:	461a      	mov	r2, r3
    254e:	9b03      	ldr	r3, [sp, #12]
    2550:	4293      	cmp	r3, r2
    2552:	d3cf      	bcc.n	24f4 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2554:	2300      	movs	r3, #0
    2556:	9303      	str	r3, [sp, #12]
    2558:	e02a      	b.n	25b0 <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    255a:	9901      	ldr	r1, [sp, #4]
    255c:	9a03      	ldr	r2, [sp, #12]
    255e:	4613      	mov	r3, r2
    2560:	009b      	lsls	r3, r3, #2
    2562:	4413      	add	r3, r2
    2564:	009b      	lsls	r3, r3, #2
    2566:	440b      	add	r3, r1
    2568:	332c      	adds	r3, #44	; 0x2c
    256a:	681a      	ldr	r2, [r3, #0]
    256c:	4961      	ldr	r1, [pc, #388]	; (26f4 <Clock_Ip_InitClock+0x584>)
    256e:	4613      	mov	r3, r2
    2570:	00db      	lsls	r3, r3, #3
    2572:	4413      	add	r3, r2
    2574:	440b      	add	r3, r1
    2576:	3301      	adds	r3, #1
    2578:	781b      	ldrb	r3, [r3, #0]
    257a:	461a      	mov	r2, r3
    257c:	4b64      	ldr	r3, [pc, #400]	; (2710 <Clock_Ip_InitClock+0x5a0>)
    257e:	5c9b      	ldrb	r3, [r3, r2]
    2580:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    2582:	4964      	ldr	r1, [pc, #400]	; (2714 <Clock_Ip_InitClock+0x5a4>)
    2584:	9a02      	ldr	r2, [sp, #8]
    2586:	4613      	mov	r3, r2
    2588:	009b      	lsls	r3, r3, #2
    258a:	4413      	add	r3, r2
    258c:	009b      	lsls	r3, r3, #2
    258e:	440b      	add	r3, r1
    2590:	3308      	adds	r3, #8
    2592:	6819      	ldr	r1, [r3, #0]
    2594:	9a03      	ldr	r2, [sp, #12]
    2596:	4613      	mov	r3, r2
    2598:	009b      	lsls	r3, r3, #2
    259a:	4413      	add	r3, r2
    259c:	009b      	lsls	r3, r3, #2
    259e:	3328      	adds	r3, #40	; 0x28
    25a0:	9a01      	ldr	r2, [sp, #4]
    25a2:	4413      	add	r3, r2
    25a4:	3304      	adds	r3, #4
    25a6:	4618      	mov	r0, r3
    25a8:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    25aa:	9b03      	ldr	r3, [sp, #12]
    25ac:	3301      	adds	r3, #1
    25ae:	9303      	str	r3, [sp, #12]
    25b0:	9b01      	ldr	r3, [sp, #4]
    25b2:	7a5b      	ldrb	r3, [r3, #9]
    25b4:	461a      	mov	r2, r3
    25b6:	9b03      	ldr	r3, [sp, #12]
    25b8:	4293      	cmp	r3, r2
    25ba:	d3ce      	bcc.n	255a <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    25bc:	2300      	movs	r3, #0
    25be:	9303      	str	r3, [sp, #12]
    25c0:	e029      	b.n	2616 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    25c2:	9901      	ldr	r1, [sp, #4]
    25c4:	9a03      	ldr	r2, [sp, #12]
    25c6:	4613      	mov	r3, r2
    25c8:	009b      	lsls	r3, r3, #2
    25ca:	4413      	add	r3, r2
    25cc:	00db      	lsls	r3, r3, #3
    25ce:	440b      	add	r3, r1
    25d0:	3340      	adds	r3, #64	; 0x40
    25d2:	681a      	ldr	r2, [r3, #0]
    25d4:	4947      	ldr	r1, [pc, #284]	; (26f4 <Clock_Ip_InitClock+0x584>)
    25d6:	4613      	mov	r3, r2
    25d8:	00db      	lsls	r3, r3, #3
    25da:	4413      	add	r3, r2
    25dc:	440b      	add	r3, r1
    25de:	3301      	adds	r3, #1
    25e0:	781b      	ldrb	r3, [r3, #0]
    25e2:	461a      	mov	r2, r3
    25e4:	4b46      	ldr	r3, [pc, #280]	; (2700 <Clock_Ip_InitClock+0x590>)
    25e6:	5c9b      	ldrb	r3, [r3, r2]
    25e8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    25ea:	4946      	ldr	r1, [pc, #280]	; (2704 <Clock_Ip_InitClock+0x594>)
    25ec:	9a02      	ldr	r2, [sp, #8]
    25ee:	4613      	mov	r3, r2
    25f0:	009b      	lsls	r3, r3, #2
    25f2:	4413      	add	r3, r2
    25f4:	009b      	lsls	r3, r3, #2
    25f6:	440b      	add	r3, r1
    25f8:	330c      	adds	r3, #12
    25fa:	6819      	ldr	r1, [r3, #0]
    25fc:	9a03      	ldr	r2, [sp, #12]
    25fe:	4613      	mov	r3, r2
    2600:	009b      	lsls	r3, r3, #2
    2602:	4413      	add	r3, r2
    2604:	00db      	lsls	r3, r3, #3
    2606:	3340      	adds	r3, #64	; 0x40
    2608:	9a01      	ldr	r2, [sp, #4]
    260a:	4413      	add	r3, r2
    260c:	4618      	mov	r0, r3
    260e:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2610:	9b03      	ldr	r3, [sp, #12]
    2612:	3301      	adds	r3, #1
    2614:	9303      	str	r3, [sp, #12]
    2616:	9b01      	ldr	r3, [sp, #4]
    2618:	7a9b      	ldrb	r3, [r3, #10]
    261a:	461a      	mov	r2, r3
    261c:	9b03      	ldr	r3, [sp, #12]
    261e:	4293      	cmp	r3, r2
    2620:	d3cf      	bcc.n	25c2 <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2622:	2300      	movs	r3, #0
    2624:	9303      	str	r3, [sp, #12]
    2626:	e025      	b.n	2674 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2628:	9a01      	ldr	r2, [sp, #4]
    262a:	9b03      	ldr	r3, [sp, #12]
    262c:	3324      	adds	r3, #36	; 0x24
    262e:	011b      	lsls	r3, r3, #4
    2630:	4413      	add	r3, r2
    2632:	3304      	adds	r3, #4
    2634:	681a      	ldr	r2, [r3, #0]
    2636:	492f      	ldr	r1, [pc, #188]	; (26f4 <Clock_Ip_InitClock+0x584>)
    2638:	4613      	mov	r3, r2
    263a:	00db      	lsls	r3, r3, #3
    263c:	4413      	add	r3, r2
    263e:	440b      	add	r3, r1
    2640:	3301      	adds	r3, #1
    2642:	781b      	ldrb	r3, [r3, #0]
    2644:	461a      	mov	r2, r3
    2646:	4b34      	ldr	r3, [pc, #208]	; (2718 <Clock_Ip_InitClock+0x5a8>)
    2648:	5c9b      	ldrb	r3, [r3, r2]
    264a:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    264c:	4933      	ldr	r1, [pc, #204]	; (271c <Clock_Ip_InitClock+0x5ac>)
    264e:	9a02      	ldr	r2, [sp, #8]
    2650:	4613      	mov	r3, r2
    2652:	005b      	lsls	r3, r3, #1
    2654:	4413      	add	r3, r2
    2656:	009b      	lsls	r3, r3, #2
    2658:	440b      	add	r3, r1
    265a:	3304      	adds	r3, #4
    265c:	681b      	ldr	r3, [r3, #0]
    265e:	9a03      	ldr	r2, [sp, #12]
    2660:	3224      	adds	r2, #36	; 0x24
    2662:	0112      	lsls	r2, r2, #4
    2664:	9901      	ldr	r1, [sp, #4]
    2666:	440a      	add	r2, r1
    2668:	3204      	adds	r2, #4
    266a:	4610      	mov	r0, r2
    266c:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    266e:	9b03      	ldr	r3, [sp, #12]
    2670:	3301      	adds	r3, #1
    2672:	9303      	str	r3, [sp, #12]
    2674:	9b01      	ldr	r3, [sp, #4]
    2676:	7b9b      	ldrb	r3, [r3, #14]
    2678:	461a      	mov	r2, r3
    267a:	9b03      	ldr	r3, [sp, #12]
    267c:	4293      	cmp	r3, r2
    267e:	d3d3      	bcc.n	2628 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2680:	4b27      	ldr	r3, [pc, #156]	; (2720 <Clock_Ip_InitClock+0x5b0>)
    2682:	2200      	movs	r2, #0
    2684:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2686:	4b26      	ldr	r3, [pc, #152]	; (2720 <Clock_Ip_InitClock+0x5b0>)
    2688:	2200      	movs	r2, #0
    268a:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    268c:	4b24      	ldr	r3, [pc, #144]	; (2720 <Clock_Ip_InitClock+0x5b0>)
    268e:	2201      	movs	r2, #1
    2690:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2692:	4b23      	ldr	r3, [pc, #140]	; (2720 <Clock_Ip_InitClock+0x5b0>)
    2694:	2200      	movs	r2, #0
    2696:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2698:	f000 fa9c 	bl	2bd4 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    269c:	2300      	movs	r3, #0
    269e:	9303      	str	r3, [sp, #12]
    26a0:	e04c      	b.n	273c <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    26a2:	9a01      	ldr	r2, [sp, #4]
    26a4:	9b03      	ldr	r3, [sp, #12]
    26a6:	330d      	adds	r3, #13
    26a8:	00db      	lsls	r3, r3, #3
    26aa:	4413      	add	r3, r2
    26ac:	685b      	ldr	r3, [r3, #4]
    26ae:	4a1d      	ldr	r2, [pc, #116]	; (2724 <Clock_Ip_InitClock+0x5b4>)
    26b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    26b4:	2b03      	cmp	r3, #3
    26b6:	d03b      	beq.n	2730 <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    26b8:	9b01      	ldr	r3, [sp, #4]
    26ba:	9a03      	ldr	r2, [sp, #12]
    26bc:	320d      	adds	r2, #13
    26be:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    26c2:	490c      	ldr	r1, [pc, #48]	; (26f4 <Clock_Ip_InitClock+0x584>)
    26c4:	4613      	mov	r3, r2
    26c6:	00db      	lsls	r3, r3, #3
    26c8:	4413      	add	r3, r2
    26ca:	440b      	add	r3, r1
    26cc:	3301      	adds	r3, #1
    26ce:	781b      	ldrb	r3, [r3, #0]
    26d0:	461a      	mov	r2, r3
    26d2:	4b15      	ldr	r3, [pc, #84]	; (2728 <Clock_Ip_InitClock+0x5b8>)
    26d4:	5c9b      	ldrb	r3, [r3, r2]
    26d6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    26d8:	4a14      	ldr	r2, [pc, #80]	; (272c <Clock_Ip_InitClock+0x5bc>)
    26da:	9b02      	ldr	r3, [sp, #8]
    26dc:	00db      	lsls	r3, r3, #3
    26de:	4413      	add	r3, r2
    26e0:	685b      	ldr	r3, [r3, #4]
    26e2:	9a03      	ldr	r2, [sp, #12]
    26e4:	320d      	adds	r2, #13
    26e6:	00d2      	lsls	r2, r2, #3
    26e8:	9901      	ldr	r1, [sp, #4]
    26ea:	440a      	add	r2, r1
    26ec:	4610      	mov	r0, r2
    26ee:	4798      	blx	r3
    26f0:	e021      	b.n	2736 <Clock_Ip_InitClock+0x5c6>
    26f2:	bf00      	nop
    26f4:	0000edd8 	.word	0x0000edd8
    26f8:	0000ed48 	.word	0x0000ed48
    26fc:	0000f324 	.word	0x0000f324
    2700:	0000ed98 	.word	0x0000ed98
    2704:	0000f3e4 	.word	0x0000f3e4
    2708:	0000edc8 	.word	0x0000edc8
    270c:	0000f3d4 	.word	0x0000f3d4
    2710:	0000ed58 	.word	0x0000ed58
    2714:	0000f32c 	.word	0x0000f32c
    2718:	0000ed88 	.word	0x0000ed88
    271c:	0000f354 	.word	0x0000f354
    2720:	1fff8b40 	.word	0x1fff8b40
    2724:	0000f224 	.word	0x0000f224
    2728:	0000eda8 	.word	0x0000eda8
    272c:	0000f410 	.word	0x0000f410
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2730:	4b3a      	ldr	r3, [pc, #232]	; (281c <Clock_Ip_InitClock+0x6ac>)
    2732:	2201      	movs	r2, #1
    2734:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2736:	9b03      	ldr	r3, [sp, #12]
    2738:	3301      	adds	r3, #1
    273a:	9303      	str	r3, [sp, #12]
    273c:	9b01      	ldr	r3, [sp, #4]
    273e:	7adb      	ldrb	r3, [r3, #11]
    2740:	461a      	mov	r2, r3
    2742:	9b03      	ldr	r3, [sp, #12]
    2744:	4293      	cmp	r3, r2
    2746:	d3ac      	bcc.n	26a2 <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2748:	4b34      	ldr	r3, [pc, #208]	; (281c <Clock_Ip_InitClock+0x6ac>)
    274a:	781b      	ldrb	r3, [r3, #0]
    274c:	f083 0301 	eor.w	r3, r3, #1
    2750:	b2db      	uxtb	r3, r3
    2752:	2b00      	cmp	r3, #0
    2754:	d05e      	beq.n	2814 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2756:	2300      	movs	r3, #0
    2758:	9303      	str	r3, [sp, #12]
    275a:	e01f      	b.n	279c <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    275c:	9a01      	ldr	r2, [sp, #4]
    275e:	9b03      	ldr	r3, [sp, #12]
    2760:	334e      	adds	r3, #78	; 0x4e
    2762:	00db      	lsls	r3, r3, #3
    2764:	4413      	add	r3, r2
    2766:	685a      	ldr	r2, [r3, #4]
    2768:	492d      	ldr	r1, [pc, #180]	; (2820 <Clock_Ip_InitClock+0x6b0>)
    276a:	4613      	mov	r3, r2
    276c:	00db      	lsls	r3, r3, #3
    276e:	4413      	add	r3, r2
    2770:	440b      	add	r3, r1
    2772:	3301      	adds	r3, #1
    2774:	781b      	ldrb	r3, [r3, #0]
    2776:	461a      	mov	r2, r3
    2778:	4b2a      	ldr	r3, [pc, #168]	; (2824 <Clock_Ip_InitClock+0x6b4>)
    277a:	5c9b      	ldrb	r3, [r3, r2]
    277c:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    277e:	4a2a      	ldr	r2, [pc, #168]	; (2828 <Clock_Ip_InitClock+0x6b8>)
    2780:	9b02      	ldr	r3, [sp, #8]
    2782:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2786:	9a03      	ldr	r2, [sp, #12]
    2788:	324e      	adds	r2, #78	; 0x4e
    278a:	00d2      	lsls	r2, r2, #3
    278c:	9901      	ldr	r1, [sp, #4]
    278e:	440a      	add	r2, r1
    2790:	3204      	adds	r2, #4
    2792:	4610      	mov	r0, r2
    2794:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2796:	9b03      	ldr	r3, [sp, #12]
    2798:	3301      	adds	r3, #1
    279a:	9303      	str	r3, [sp, #12]
    279c:	9b01      	ldr	r3, [sp, #4]
    279e:	7c1b      	ldrb	r3, [r3, #16]
    27a0:	461a      	mov	r2, r3
    27a2:	9b03      	ldr	r3, [sp, #12]
    27a4:	4293      	cmp	r3, r2
    27a6:	d3d9      	bcc.n	275c <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    27a8:	2300      	movs	r3, #0
    27aa:	9303      	str	r3, [sp, #12]
    27ac:	e028      	b.n	2800 <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    27ae:	9901      	ldr	r1, [sp, #4]
    27b0:	9a03      	ldr	r2, [sp, #12]
    27b2:	4613      	mov	r3, r2
    27b4:	009b      	lsls	r3, r3, #2
    27b6:	4413      	add	r3, r2
    27b8:	009b      	lsls	r3, r3, #2
    27ba:	440b      	add	r3, r1
    27bc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27c0:	681a      	ldr	r2, [r3, #0]
    27c2:	4917      	ldr	r1, [pc, #92]	; (2820 <Clock_Ip_InitClock+0x6b0>)
    27c4:	4613      	mov	r3, r2
    27c6:	00db      	lsls	r3, r3, #3
    27c8:	4413      	add	r3, r2
    27ca:	440b      	add	r3, r1
    27cc:	3301      	adds	r3, #1
    27ce:	781b      	ldrb	r3, [r3, #0]
    27d0:	461a      	mov	r2, r3
    27d2:	4b16      	ldr	r3, [pc, #88]	; (282c <Clock_Ip_InitClock+0x6bc>)
    27d4:	5c9b      	ldrb	r3, [r3, r2]
    27d6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    27d8:	4a15      	ldr	r2, [pc, #84]	; (2830 <Clock_Ip_InitClock+0x6c0>)
    27da:	9b02      	ldr	r3, [sp, #8]
    27dc:	011b      	lsls	r3, r3, #4
    27de:	4413      	add	r3, r2
    27e0:	330c      	adds	r3, #12
    27e2:	6819      	ldr	r1, [r3, #0]
    27e4:	9a03      	ldr	r2, [sp, #12]
    27e6:	4613      	mov	r3, r2
    27e8:	009b      	lsls	r3, r3, #2
    27ea:	4413      	add	r3, r2
    27ec:	009b      	lsls	r3, r3, #2
    27ee:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27f2:	9a01      	ldr	r2, [sp, #4]
    27f4:	4413      	add	r3, r2
    27f6:	4618      	mov	r0, r3
    27f8:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    27fa:	9b03      	ldr	r3, [sp, #12]
    27fc:	3301      	adds	r3, #1
    27fe:	9303      	str	r3, [sp, #12]
    2800:	9b01      	ldr	r3, [sp, #4]
    2802:	7c9b      	ldrb	r3, [r3, #18]
    2804:	461a      	mov	r2, r3
    2806:	9b03      	ldr	r3, [sp, #12]
    2808:	4293      	cmp	r3, r2
    280a:	d3d0      	bcc.n	27ae <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    280c:	2104      	movs	r1, #4
    280e:	9801      	ldr	r0, [sp, #4]
    2810:	f002 ff48 	bl	56a4 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2814:	bf00      	nop
    2816:	b004      	add	sp, #16
    2818:	bd10      	pop	{r4, pc}
    281a:	bf00      	nop
    281c:	1fff8b40 	.word	0x1fff8b40
    2820:	0000edd8 	.word	0x0000edd8
    2824:	0000ed78 	.word	0x0000ed78
    2828:	0000f360 	.word	0x0000f360
    282c:	0000edc8 	.word	0x0000edc8
    2830:	0000f3d4 	.word	0x0000f3d4

00002834 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2834:	b500      	push	{lr}
    2836:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2838:	2302      	movs	r3, #2
    283a:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    283c:	2300      	movs	r3, #0
    283e:	9304      	str	r3, [sp, #16]
    2840:	e02c      	b.n	289c <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2842:	4a36      	ldr	r2, [pc, #216]	; (291c <Clock_Ip_GetPllStatus+0xe8>)
    2844:	9b04      	ldr	r3, [sp, #16]
    2846:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    284a:	4935      	ldr	r1, [pc, #212]	; (2920 <Clock_Ip_GetPllStatus+0xec>)
    284c:	4613      	mov	r3, r2
    284e:	00db      	lsls	r3, r3, #3
    2850:	4413      	add	r3, r2
    2852:	440b      	add	r3, r1
    2854:	3301      	adds	r3, #1
    2856:	781b      	ldrb	r3, [r3, #0]
    2858:	461a      	mov	r2, r3
    285a:	4b32      	ldr	r3, [pc, #200]	; (2924 <Clock_Ip_GetPllStatus+0xf0>)
    285c:	5c9b      	ldrb	r3, [r3, r2]
    285e:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2860:	4931      	ldr	r1, [pc, #196]	; (2928 <Clock_Ip_GetPllStatus+0xf4>)
    2862:	9a03      	ldr	r2, [sp, #12]
    2864:	4613      	mov	r3, r2
    2866:	009b      	lsls	r3, r3, #2
    2868:	4413      	add	r3, r2
    286a:	009b      	lsls	r3, r3, #2
    286c:	440b      	add	r3, r1
    286e:	3308      	adds	r3, #8
    2870:	681b      	ldr	r3, [r3, #0]
    2872:	492a      	ldr	r1, [pc, #168]	; (291c <Clock_Ip_GetPllStatus+0xe8>)
    2874:	9a04      	ldr	r2, [sp, #16]
    2876:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    287a:	4610      	mov	r0, r2
    287c:	4798      	blx	r3
    287e:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2880:	9b02      	ldr	r3, [sp, #8]
    2882:	2b01      	cmp	r3, #1
    2884:	d102      	bne.n	288c <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2886:	2301      	movs	r3, #1
    2888:	9305      	str	r3, [sp, #20]
            break;
    288a:	e00d      	b.n	28a8 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    288c:	9b02      	ldr	r3, [sp, #8]
    288e:	2b02      	cmp	r3, #2
    2890:	d101      	bne.n	2896 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2892:	2300      	movs	r3, #0
    2894:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2896:	9b04      	ldr	r3, [sp, #16]
    2898:	3301      	adds	r3, #1
    289a:	9304      	str	r3, [sp, #16]
    289c:	4b23      	ldr	r3, [pc, #140]	; (292c <Clock_Ip_GetPllStatus+0xf8>)
    289e:	789b      	ldrb	r3, [r3, #2]
    28a0:	461a      	mov	r2, r3
    28a2:	9b04      	ldr	r3, [sp, #16]
    28a4:	4293      	cmp	r3, r2
    28a6:	d3cc      	bcc.n	2842 <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    28a8:	9b05      	ldr	r3, [sp, #20]
    28aa:	2b00      	cmp	r3, #0
    28ac:	d130      	bne.n	2910 <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    28ae:	2300      	movs	r3, #0
    28b0:	9304      	str	r3, [sp, #16]
    28b2:	e027      	b.n	2904 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    28b4:	4a1e      	ldr	r2, [pc, #120]	; (2930 <Clock_Ip_GetPllStatus+0xfc>)
    28b6:	9b04      	ldr	r3, [sp, #16]
    28b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    28bc:	4918      	ldr	r1, [pc, #96]	; (2920 <Clock_Ip_GetPllStatus+0xec>)
    28be:	4613      	mov	r3, r2
    28c0:	00db      	lsls	r3, r3, #3
    28c2:	4413      	add	r3, r2
    28c4:	440b      	add	r3, r1
    28c6:	3301      	adds	r3, #1
    28c8:	781b      	ldrb	r3, [r3, #0]
    28ca:	461a      	mov	r2, r3
    28cc:	4b19      	ldr	r3, [pc, #100]	; (2934 <Clock_Ip_GetPllStatus+0x100>)
    28ce:	5c9b      	ldrb	r3, [r3, r2]
    28d0:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    28d2:	4919      	ldr	r1, [pc, #100]	; (2938 <Clock_Ip_GetPllStatus+0x104>)
    28d4:	9a03      	ldr	r2, [sp, #12]
    28d6:	4613      	mov	r3, r2
    28d8:	005b      	lsls	r3, r3, #1
    28da:	4413      	add	r3, r2
    28dc:	009b      	lsls	r3, r3, #2
    28de:	440b      	add	r3, r1
    28e0:	3308      	adds	r3, #8
    28e2:	681b      	ldr	r3, [r3, #0]
    28e4:	4912      	ldr	r1, [pc, #72]	; (2930 <Clock_Ip_GetPllStatus+0xfc>)
    28e6:	9a04      	ldr	r2, [sp, #16]
    28e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    28ec:	4610      	mov	r0, r2
    28ee:	4798      	blx	r3
    28f0:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    28f2:	9b01      	ldr	r3, [sp, #4]
    28f4:	2b01      	cmp	r3, #1
    28f6:	d102      	bne.n	28fe <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    28f8:	2301      	movs	r3, #1
    28fa:	9305      	str	r3, [sp, #20]
                break;
    28fc:	e008      	b.n	2910 <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    28fe:	9b04      	ldr	r3, [sp, #16]
    2900:	3301      	adds	r3, #1
    2902:	9304      	str	r3, [sp, #16]
    2904:	4b09      	ldr	r3, [pc, #36]	; (292c <Clock_Ip_GetPllStatus+0xf8>)
    2906:	78db      	ldrb	r3, [r3, #3]
    2908:	461a      	mov	r2, r3
    290a:	9b04      	ldr	r3, [sp, #16]
    290c:	4293      	cmp	r3, r2
    290e:	d3d1      	bcc.n	28b4 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2910:	9b05      	ldr	r3, [sp, #20]
}
    2912:	4618      	mov	r0, r3
    2914:	b007      	add	sp, #28
    2916:	f85d fb04 	ldr.w	pc, [sp], #4
    291a:	bf00      	nop
    291c:	0000f2e0 	.word	0x0000f2e0
    2920:	0000edd8 	.word	0x0000edd8
    2924:	0000ed98 	.word	0x0000ed98
    2928:	0000f3e4 	.word	0x0000f3e4
    292c:	1fff8b40 	.word	0x1fff8b40
    2930:	0000f2e4 	.word	0x0000f2e4
    2934:	0000ed88 	.word	0x0000ed88
    2938:	0000f354 	.word	0x0000f354

0000293c <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    293c:	b500      	push	{lr}
    293e:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2940:	4b55      	ldr	r3, [pc, #340]	; (2a98 <Clock_Ip_DistributePll+0x15c>)
    2942:	681b      	ldr	r3, [r3, #0]
    2944:	2b00      	cmp	r3, #0
    2946:	f000 80a2 	beq.w	2a8e <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    294a:	2300      	movs	r3, #0
    294c:	9301      	str	r3, [sp, #4]
    294e:	e02c      	b.n	29aa <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2950:	4b51      	ldr	r3, [pc, #324]	; (2a98 <Clock_Ip_DistributePll+0x15c>)
    2952:	681a      	ldr	r2, [r3, #0]
    2954:	9b01      	ldr	r3, [sp, #4]
    2956:	330d      	adds	r3, #13
    2958:	00db      	lsls	r3, r3, #3
    295a:	4413      	add	r3, r2
    295c:	685b      	ldr	r3, [r3, #4]
    295e:	4a4f      	ldr	r2, [pc, #316]	; (2a9c <Clock_Ip_DistributePll+0x160>)
    2960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2964:	2b03      	cmp	r3, #3
    2966:	d11d      	bne.n	29a4 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2968:	4b4b      	ldr	r3, [pc, #300]	; (2a98 <Clock_Ip_DistributePll+0x15c>)
    296a:	681b      	ldr	r3, [r3, #0]
    296c:	9a01      	ldr	r2, [sp, #4]
    296e:	320d      	adds	r2, #13
    2970:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2974:	494a      	ldr	r1, [pc, #296]	; (2aa0 <Clock_Ip_DistributePll+0x164>)
    2976:	4613      	mov	r3, r2
    2978:	00db      	lsls	r3, r3, #3
    297a:	4413      	add	r3, r2
    297c:	440b      	add	r3, r1
    297e:	3301      	adds	r3, #1
    2980:	781b      	ldrb	r3, [r3, #0]
    2982:	461a      	mov	r2, r3
    2984:	4b47      	ldr	r3, [pc, #284]	; (2aa4 <Clock_Ip_DistributePll+0x168>)
    2986:	5c9b      	ldrb	r3, [r3, r2]
    2988:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    298a:	4a47      	ldr	r2, [pc, #284]	; (2aa8 <Clock_Ip_DistributePll+0x16c>)
    298c:	9b00      	ldr	r3, [sp, #0]
    298e:	00db      	lsls	r3, r3, #3
    2990:	4413      	add	r3, r2
    2992:	685b      	ldr	r3, [r3, #4]
    2994:	4a40      	ldr	r2, [pc, #256]	; (2a98 <Clock_Ip_DistributePll+0x15c>)
    2996:	6811      	ldr	r1, [r2, #0]
    2998:	9a01      	ldr	r2, [sp, #4]
    299a:	320d      	adds	r2, #13
    299c:	00d2      	lsls	r2, r2, #3
    299e:	440a      	add	r2, r1
    29a0:	4610      	mov	r0, r2
    29a2:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    29a4:	9b01      	ldr	r3, [sp, #4]
    29a6:	3301      	adds	r3, #1
    29a8:	9301      	str	r3, [sp, #4]
    29aa:	4b3b      	ldr	r3, [pc, #236]	; (2a98 <Clock_Ip_DistributePll+0x15c>)
    29ac:	681b      	ldr	r3, [r3, #0]
    29ae:	7adb      	ldrb	r3, [r3, #11]
    29b0:	461a      	mov	r2, r3
    29b2:	9b01      	ldr	r3, [sp, #4]
    29b4:	4293      	cmp	r3, r2
    29b6:	d3cb      	bcc.n	2950 <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    29b8:	4b3c      	ldr	r3, [pc, #240]	; (2aac <Clock_Ip_DistributePll+0x170>)
    29ba:	781b      	ldrb	r3, [r3, #0]
    29bc:	2b00      	cmp	r3, #0
    29be:	d066      	beq.n	2a8e <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    29c0:	2300      	movs	r3, #0
    29c2:	9301      	str	r3, [sp, #4]
    29c4:	e021      	b.n	2a0a <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    29c6:	4b34      	ldr	r3, [pc, #208]	; (2a98 <Clock_Ip_DistributePll+0x15c>)
    29c8:	681a      	ldr	r2, [r3, #0]
    29ca:	9b01      	ldr	r3, [sp, #4]
    29cc:	334e      	adds	r3, #78	; 0x4e
    29ce:	00db      	lsls	r3, r3, #3
    29d0:	4413      	add	r3, r2
    29d2:	685a      	ldr	r2, [r3, #4]
    29d4:	4932      	ldr	r1, [pc, #200]	; (2aa0 <Clock_Ip_DistributePll+0x164>)
    29d6:	4613      	mov	r3, r2
    29d8:	00db      	lsls	r3, r3, #3
    29da:	4413      	add	r3, r2
    29dc:	440b      	add	r3, r1
    29de:	3301      	adds	r3, #1
    29e0:	781b      	ldrb	r3, [r3, #0]
    29e2:	461a      	mov	r2, r3
    29e4:	4b32      	ldr	r3, [pc, #200]	; (2ab0 <Clock_Ip_DistributePll+0x174>)
    29e6:	5c9b      	ldrb	r3, [r3, r2]
    29e8:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    29ea:	4a32      	ldr	r2, [pc, #200]	; (2ab4 <Clock_Ip_DistributePll+0x178>)
    29ec:	9b00      	ldr	r3, [sp, #0]
    29ee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    29f2:	4a29      	ldr	r2, [pc, #164]	; (2a98 <Clock_Ip_DistributePll+0x15c>)
    29f4:	6811      	ldr	r1, [r2, #0]
    29f6:	9a01      	ldr	r2, [sp, #4]
    29f8:	324e      	adds	r2, #78	; 0x4e
    29fa:	00d2      	lsls	r2, r2, #3
    29fc:	440a      	add	r2, r1
    29fe:	3204      	adds	r2, #4
    2a00:	4610      	mov	r0, r2
    2a02:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2a04:	9b01      	ldr	r3, [sp, #4]
    2a06:	3301      	adds	r3, #1
    2a08:	9301      	str	r3, [sp, #4]
    2a0a:	4b23      	ldr	r3, [pc, #140]	; (2a98 <Clock_Ip_DistributePll+0x15c>)
    2a0c:	681b      	ldr	r3, [r3, #0]
    2a0e:	7c1b      	ldrb	r3, [r3, #16]
    2a10:	461a      	mov	r2, r3
    2a12:	9b01      	ldr	r3, [sp, #4]
    2a14:	4293      	cmp	r3, r2
    2a16:	d3d6      	bcc.n	29c6 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2a18:	2300      	movs	r3, #0
    2a1a:	9301      	str	r3, [sp, #4]
    2a1c:	e02a      	b.n	2a74 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2a1e:	4b1e      	ldr	r3, [pc, #120]	; (2a98 <Clock_Ip_DistributePll+0x15c>)
    2a20:	6819      	ldr	r1, [r3, #0]
    2a22:	9a01      	ldr	r2, [sp, #4]
    2a24:	4613      	mov	r3, r2
    2a26:	009b      	lsls	r3, r3, #2
    2a28:	4413      	add	r3, r2
    2a2a:	009b      	lsls	r3, r3, #2
    2a2c:	440b      	add	r3, r1
    2a2e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a32:	681a      	ldr	r2, [r3, #0]
    2a34:	491a      	ldr	r1, [pc, #104]	; (2aa0 <Clock_Ip_DistributePll+0x164>)
    2a36:	4613      	mov	r3, r2
    2a38:	00db      	lsls	r3, r3, #3
    2a3a:	4413      	add	r3, r2
    2a3c:	440b      	add	r3, r1
    2a3e:	3301      	adds	r3, #1
    2a40:	781b      	ldrb	r3, [r3, #0]
    2a42:	461a      	mov	r2, r3
    2a44:	4b1c      	ldr	r3, [pc, #112]	; (2ab8 <Clock_Ip_DistributePll+0x17c>)
    2a46:	5c9b      	ldrb	r3, [r3, r2]
    2a48:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    2a4a:	4a1c      	ldr	r2, [pc, #112]	; (2abc <Clock_Ip_DistributePll+0x180>)
    2a4c:	9b00      	ldr	r3, [sp, #0]
    2a4e:	011b      	lsls	r3, r3, #4
    2a50:	4413      	add	r3, r2
    2a52:	330c      	adds	r3, #12
    2a54:	6819      	ldr	r1, [r3, #0]
    2a56:	4b10      	ldr	r3, [pc, #64]	; (2a98 <Clock_Ip_DistributePll+0x15c>)
    2a58:	6818      	ldr	r0, [r3, #0]
    2a5a:	9a01      	ldr	r2, [sp, #4]
    2a5c:	4613      	mov	r3, r2
    2a5e:	009b      	lsls	r3, r3, #2
    2a60:	4413      	add	r3, r2
    2a62:	009b      	lsls	r3, r3, #2
    2a64:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2a68:	4403      	add	r3, r0
    2a6a:	4618      	mov	r0, r3
    2a6c:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    2a6e:	9b01      	ldr	r3, [sp, #4]
    2a70:	3301      	adds	r3, #1
    2a72:	9301      	str	r3, [sp, #4]
    2a74:	4b08      	ldr	r3, [pc, #32]	; (2a98 <Clock_Ip_DistributePll+0x15c>)
    2a76:	681b      	ldr	r3, [r3, #0]
    2a78:	7c9b      	ldrb	r3, [r3, #18]
    2a7a:	461a      	mov	r2, r3
    2a7c:	9b01      	ldr	r3, [sp, #4]
    2a7e:	4293      	cmp	r3, r2
    2a80:	d3cd      	bcc.n	2a1e <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2a82:	4b05      	ldr	r3, [pc, #20]	; (2a98 <Clock_Ip_DistributePll+0x15c>)
    2a84:	681b      	ldr	r3, [r3, #0]
    2a86:	2104      	movs	r1, #4
    2a88:	4618      	mov	r0, r3
    2a8a:	f002 fe0b 	bl	56a4 <Clock_Ip_Command>
        }
    }
}
    2a8e:	bf00      	nop
    2a90:	b003      	add	sp, #12
    2a92:	f85d fb04 	ldr.w	pc, [sp], #4
    2a96:	bf00      	nop
    2a98:	1fff8b38 	.word	0x1fff8b38
    2a9c:	0000f224 	.word	0x0000f224
    2aa0:	0000edd8 	.word	0x0000edd8
    2aa4:	0000eda8 	.word	0x0000eda8
    2aa8:	0000f410 	.word	0x0000f410
    2aac:	1fff8b40 	.word	0x1fff8b40
    2ab0:	0000ed78 	.word	0x0000ed78
    2ab4:	0000f360 	.word	0x0000f360
    2ab8:	0000edc8 	.word	0x0000edc8
    2abc:	0000f3d4 	.word	0x0000f3d4

00002ac0 <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    2ac0:	b500      	push	{lr}
    2ac2:	b085      	sub	sp, #20
    2ac4:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2ac6:	490c      	ldr	r1, [pc, #48]	; (2af8 <Clock_Ip_DisableClockMonitor+0x38>)
    2ac8:	9a01      	ldr	r2, [sp, #4]
    2aca:	4613      	mov	r3, r2
    2acc:	00db      	lsls	r3, r3, #3
    2ace:	4413      	add	r3, r2
    2ad0:	440b      	add	r3, r1
    2ad2:	3301      	adds	r3, #1
    2ad4:	781b      	ldrb	r3, [r3, #0]
    2ad6:	461a      	mov	r2, r3
    2ad8:	4b08      	ldr	r3, [pc, #32]	; (2afc <Clock_Ip_DisableClockMonitor+0x3c>)
    2ada:	5c9b      	ldrb	r3, [r3, r2]
    2adc:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    2ade:	4a08      	ldr	r2, [pc, #32]	; (2b00 <Clock_Ip_DisableClockMonitor+0x40>)
    2ae0:	9b03      	ldr	r3, [sp, #12]
    2ae2:	011b      	lsls	r3, r3, #4
    2ae4:	4413      	add	r3, r2
    2ae6:	3308      	adds	r3, #8
    2ae8:	681b      	ldr	r3, [r3, #0]
    2aea:	9801      	ldr	r0, [sp, #4]
    2aec:	4798      	blx	r3
}
    2aee:	bf00      	nop
    2af0:	b005      	add	sp, #20
    2af2:	f85d fb04 	ldr.w	pc, [sp], #4
    2af6:	bf00      	nop
    2af8:	0000edd8 	.word	0x0000edd8
    2afc:	0000edc8 	.word	0x0000edc8
    2b00:	0000f3d4 	.word	0x0000f3d4

00002b04 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    2b04:	b082      	sub	sp, #8
    2b06:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    2b08:	4a02      	ldr	r2, [pc, #8]	; (2b14 <Clock_Ip_InstallNotificationsCallback+0x10>)
    2b0a:	9b01      	ldr	r3, [sp, #4]
    2b0c:	6013      	str	r3, [r2, #0]
}
    2b0e:	bf00      	nop
    2b10:	b002      	add	sp, #8
    2b12:	4770      	bx	lr
    2b14:	1fff8b1c 	.word	0x1fff8b1c

00002b18 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    2b18:	b500      	push	{lr}
    2b1a:	b085      	sub	sp, #20
    2b1c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2b1e:	490c      	ldr	r1, [pc, #48]	; (2b50 <Clock_Ip_DisableModuleClock+0x38>)
    2b20:	9a01      	ldr	r2, [sp, #4]
    2b22:	4613      	mov	r3, r2
    2b24:	00db      	lsls	r3, r3, #3
    2b26:	4413      	add	r3, r2
    2b28:	440b      	add	r3, r1
    2b2a:	3301      	adds	r3, #1
    2b2c:	781b      	ldrb	r3, [r3, #0]
    2b2e:	461a      	mov	r2, r3
    2b30:	4b08      	ldr	r3, [pc, #32]	; (2b54 <Clock_Ip_DisableModuleClock+0x3c>)
    2b32:	5c9b      	ldrb	r3, [r3, r2]
    2b34:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    2b36:	4a08      	ldr	r2, [pc, #32]	; (2b58 <Clock_Ip_DisableModuleClock+0x40>)
    2b38:	9b03      	ldr	r3, [sp, #12]
    2b3a:	00db      	lsls	r3, r3, #3
    2b3c:	4413      	add	r3, r2
    2b3e:	685b      	ldr	r3, [r3, #4]
    2b40:	2101      	movs	r1, #1
    2b42:	9801      	ldr	r0, [sp, #4]
    2b44:	4798      	blx	r3
}
    2b46:	bf00      	nop
    2b48:	b005      	add	sp, #20
    2b4a:	f85d fb04 	ldr.w	pc, [sp], #4
    2b4e:	bf00      	nop
    2b50:	0000edd8 	.word	0x0000edd8
    2b54:	0000ed78 	.word	0x0000ed78
    2b58:	0000f360 	.word	0x0000f360

00002b5c <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    2b5c:	b500      	push	{lr}
    2b5e:	b085      	sub	sp, #20
    2b60:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    2b62:	490c      	ldr	r1, [pc, #48]	; (2b94 <Clock_Ip_EnableModuleClock+0x38>)
    2b64:	9a01      	ldr	r2, [sp, #4]
    2b66:	4613      	mov	r3, r2
    2b68:	00db      	lsls	r3, r3, #3
    2b6a:	4413      	add	r3, r2
    2b6c:	440b      	add	r3, r1
    2b6e:	3301      	adds	r3, #1
    2b70:	781b      	ldrb	r3, [r3, #0]
    2b72:	461a      	mov	r2, r3
    2b74:	4b08      	ldr	r3, [pc, #32]	; (2b98 <Clock_Ip_EnableModuleClock+0x3c>)
    2b76:	5c9b      	ldrb	r3, [r3, r2]
    2b78:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    2b7a:	4a08      	ldr	r2, [pc, #32]	; (2b9c <Clock_Ip_EnableModuleClock+0x40>)
    2b7c:	9b03      	ldr	r3, [sp, #12]
    2b7e:	00db      	lsls	r3, r3, #3
    2b80:	4413      	add	r3, r2
    2b82:	685b      	ldr	r3, [r3, #4]
    2b84:	2100      	movs	r1, #0
    2b86:	9801      	ldr	r0, [sp, #4]
    2b88:	4798      	blx	r3
}
    2b8a:	bf00      	nop
    2b8c:	b005      	add	sp, #20
    2b8e:	f85d fb04 	ldr.w	pc, [sp], #4
    2b92:	bf00      	nop
    2b94:	0000edd8 	.word	0x0000edd8
    2b98:	0000ed78 	.word	0x0000ed78
    2b9c:	0000f360 	.word	0x0000f360

00002ba0 <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    2ba0:	b500      	push	{lr}
    2ba2:	b083      	sub	sp, #12
    2ba4:	9001      	str	r0, [sp, #4]
    2ba6:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    2ba8:	4b08      	ldr	r3, [pc, #32]	; (2bcc <Clock_Ip_PowerModeChangeNotification+0x2c>)
    2baa:	2200      	movs	r2, #0
    2bac:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2bae:	4b08      	ldr	r3, [pc, #32]	; (2bd0 <Clock_Ip_PowerModeChangeNotification+0x30>)
    2bb0:	681b      	ldr	r3, [r3, #0]
    2bb2:	2102      	movs	r1, #2
    2bb4:	4618      	mov	r0, r3
    2bb6:	f002 fd75 	bl	56a4 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    2bba:	9900      	ldr	r1, [sp, #0]
    2bbc:	9801      	ldr	r0, [sp, #4]
    2bbe:	f002 fc51 	bl	5464 <Clock_Ip_ClockPowerModeChangeNotification>
}
    2bc2:	bf00      	nop
    2bc4:	b003      	add	sp, #12
    2bc6:	f85d fb04 	ldr.w	pc, [sp], #4
    2bca:	bf00      	nop
    2bcc:	1fff8b18 	.word	0x1fff8b18
    2bd0:	1fff8b38 	.word	0x1fff8b38

00002bd4 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    2bd4:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    2bd6:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    2bda:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    2bdc:	4b06      	ldr	r3, [pc, #24]	; (2bf8 <Clock_Ip_SetWaitStates+0x24>)
    2bde:	785b      	ldrb	r3, [r3, #1]
    2be0:	2b00      	cmp	r3, #0
    2be2:	d005      	beq.n	2bf0 <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    2be4:	9b01      	ldr	r3, [sp, #4]
    2be6:	3b01      	subs	r3, #1
    2be8:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    2bea:	9b01      	ldr	r3, [sp, #4]
    2bec:	2b00      	cmp	r3, #0
    2bee:	d1f9      	bne.n	2be4 <Clock_Ip_SetWaitStates+0x10>
    }
}
    2bf0:	bf00      	nop
    2bf2:	b002      	add	sp, #8
    2bf4:	4770      	bx	lr
    2bf6:	bf00      	nop
    2bf8:	1fff8b40 	.word	0x1fff8b40

00002bfc <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    2bfc:	b500      	push	{lr}
    2bfe:	b083      	sub	sp, #12
    2c00:	9001      	str	r0, [sp, #4]
    2c02:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    2c04:	4b04      	ldr	r3, [pc, #16]	; (2c18 <Clock_Ip_ReportClockErrors+0x1c>)
    2c06:	681b      	ldr	r3, [r3, #0]
    2c08:	9900      	ldr	r1, [sp, #0]
    2c0a:	9801      	ldr	r0, [sp, #4]
    2c0c:	4798      	blx	r3
}
    2c0e:	bf00      	nop
    2c10:	b003      	add	sp, #12
    2c12:	f85d fb04 	ldr.w	pc, [sp], #4
    2c16:	bf00      	nop
    2c18:	1fff8b1c 	.word	0x1fff8b1c

00002c1c <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    2c1c:	b500      	push	{lr}
    2c1e:	b085      	sub	sp, #20
    2c20:	9003      	str	r0, [sp, #12]
    2c22:	9102      	str	r1, [sp, #8]
    2c24:	9201      	str	r2, [sp, #4]
    2c26:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    2c28:	2000      	movs	r0, #0
    2c2a:	f7fe ffd1 	bl	1bd0 <OsIf_GetCounter>
    2c2e:	4602      	mov	r2, r0
    2c30:	9b03      	ldr	r3, [sp, #12]
    2c32:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    2c34:	9b02      	ldr	r3, [sp, #8]
    2c36:	2200      	movs	r2, #0
    2c38:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    2c3a:	2100      	movs	r1, #0
    2c3c:	9800      	ldr	r0, [sp, #0]
    2c3e:	f7ff f813 	bl	1c68 <OsIf_MicrosToTicks>
    2c42:	4602      	mov	r2, r0
    2c44:	9b01      	ldr	r3, [sp, #4]
    2c46:	601a      	str	r2, [r3, #0]
}
    2c48:	bf00      	nop
    2c4a:	b005      	add	sp, #20
    2c4c:	f85d fb04 	ldr.w	pc, [sp], #4

00002c50 <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    2c50:	b500      	push	{lr}
    2c52:	b087      	sub	sp, #28
    2c54:	9003      	str	r0, [sp, #12]
    2c56:	9102      	str	r1, [sp, #8]
    2c58:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    2c5a:	2300      	movs	r3, #0
    2c5c:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    2c60:	2100      	movs	r1, #0
    2c62:	9803      	ldr	r0, [sp, #12]
    2c64:	f7fe ffcd 	bl	1c02 <OsIf_GetElapsed>
    2c68:	4602      	mov	r2, r0
    2c6a:	9b02      	ldr	r3, [sp, #8]
    2c6c:	681b      	ldr	r3, [r3, #0]
    2c6e:	441a      	add	r2, r3
    2c70:	9b02      	ldr	r3, [sp, #8]
    2c72:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    2c74:	9b02      	ldr	r3, [sp, #8]
    2c76:	681b      	ldr	r3, [r3, #0]
    2c78:	9a01      	ldr	r2, [sp, #4]
    2c7a:	429a      	cmp	r2, r3
    2c7c:	d802      	bhi.n	2c84 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    2c7e:	2301      	movs	r3, #1
    2c80:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    2c84:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    2c88:	4618      	mov	r0, r3
    2c8a:	b007      	add	sp, #28
    2c8c:	f85d fb04 	ldr.w	pc, [sp], #4

00002c90 <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    2c90:	b082      	sub	sp, #8
    2c92:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    2c94:	bf00      	nop
    2c96:	b002      	add	sp, #8
    2c98:	4770      	bx	lr

00002c9a <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    2c9a:	b500      	push	{lr}
    2c9c:	b083      	sub	sp, #12
    2c9e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2ca0:	9b01      	ldr	r3, [sp, #4]
    2ca2:	2b00      	cmp	r3, #0
    2ca4:	d002      	beq.n	2cac <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    2ca6:	9801      	ldr	r0, [sp, #4]
    2ca8:	f000 f8ad 	bl	2e06 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cac:	bf00      	nop
    2cae:	b003      	add	sp, #12
    2cb0:	f85d fb04 	ldr.w	pc, [sp], #4

00002cb4 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    2cb4:	b500      	push	{lr}
    2cb6:	b083      	sub	sp, #12
    2cb8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cba:	9b01      	ldr	r3, [sp, #4]
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	d002      	beq.n	2cc6 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    2cc0:	9801      	ldr	r0, [sp, #4]
    2cc2:	f000 f8cd 	bl	2e60 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cc6:	bf00      	nop
    2cc8:	b003      	add	sp, #12
    2cca:	f85d fb04 	ldr.w	pc, [sp], #4

00002cce <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2cce:	b500      	push	{lr}
    2cd0:	b083      	sub	sp, #12
    2cd2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cd4:	9b01      	ldr	r3, [sp, #4]
    2cd6:	2b00      	cmp	r3, #0
    2cd8:	d002      	beq.n	2ce0 <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    2cda:	9801      	ldr	r0, [sp, #4]
    2cdc:	f000 f8ee 	bl	2ebc <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2ce0:	bf00      	nop
    2ce2:	b003      	add	sp, #12
    2ce4:	f85d fb04 	ldr.w	pc, [sp], #4

00002ce8 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2ce8:	b500      	push	{lr}
    2cea:	b083      	sub	sp, #12
    2cec:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2cee:	9b01      	ldr	r3, [sp, #4]
    2cf0:	2b00      	cmp	r3, #0
    2cf2:	d002      	beq.n	2cfa <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    2cf4:	9801      	ldr	r0, [sp, #4]
    2cf6:	f000 f8f9 	bl	2eec <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2cfa:	bf00      	nop
    2cfc:	b003      	add	sp, #12
    2cfe:	f85d fb04 	ldr.w	pc, [sp], #4

00002d02 <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d02:	b500      	push	{lr}
    2d04:	b083      	sub	sp, #12
    2d06:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d08:	9b01      	ldr	r3, [sp, #4]
    2d0a:	2b00      	cmp	r3, #0
    2d0c:	d002      	beq.n	2d14 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    2d0e:	9801      	ldr	r0, [sp, #4]
    2d10:	f000 f904 	bl	2f1c <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d14:	bf00      	nop
    2d16:	b003      	add	sp, #12
    2d18:	f85d fb04 	ldr.w	pc, [sp], #4

00002d1c <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2d1c:	b500      	push	{lr}
    2d1e:	b083      	sub	sp, #12
    2d20:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d22:	9b01      	ldr	r3, [sp, #4]
    2d24:	2b00      	cmp	r3, #0
    2d26:	d002      	beq.n	2d2e <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    2d28:	9801      	ldr	r0, [sp, #4]
    2d2a:	f000 f90f 	bl	2f4c <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d2e:	bf00      	nop
    2d30:	b003      	add	sp, #12
    2d32:	f85d fb04 	ldr.w	pc, [sp], #4

00002d36 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2d36:	b500      	push	{lr}
    2d38:	b083      	sub	sp, #12
    2d3a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d3c:	9b01      	ldr	r3, [sp, #4]
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d002      	beq.n	2d48 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    2d42:	9801      	ldr	r0, [sp, #4]
    2d44:	f000 f91a 	bl	2f7c <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d48:	bf00      	nop
    2d4a:	b003      	add	sp, #12
    2d4c:	f85d fb04 	ldr.w	pc, [sp], #4

00002d50 <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d50:	b500      	push	{lr}
    2d52:	b083      	sub	sp, #12
    2d54:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d56:	9b01      	ldr	r3, [sp, #4]
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d002      	beq.n	2d62 <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    2d5c:	9801      	ldr	r0, [sp, #4]
    2d5e:	f000 f925 	bl	2fac <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d62:	bf00      	nop
    2d64:	b003      	add	sp, #12
    2d66:	f85d fb04 	ldr.w	pc, [sp], #4

00002d6a <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    2d6a:	b500      	push	{lr}
    2d6c:	b083      	sub	sp, #12
    2d6e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d70:	9b01      	ldr	r3, [sp, #4]
    2d72:	2b00      	cmp	r3, #0
    2d74:	d002      	beq.n	2d7c <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    2d76:	9801      	ldr	r0, [sp, #4]
    2d78:	f000 f930 	bl	2fdc <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d7c:	bf00      	nop
    2d7e:	b003      	add	sp, #12
    2d80:	f85d fb04 	ldr.w	pc, [sp], #4

00002d84 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    2d84:	b500      	push	{lr}
    2d86:	b083      	sub	sp, #12
    2d88:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2d8a:	9b01      	ldr	r3, [sp, #4]
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d002      	beq.n	2d96 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    2d90:	9801      	ldr	r0, [sp, #4]
    2d92:	f000 f93b 	bl	300c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2d96:	bf00      	nop
    2d98:	b003      	add	sp, #12
    2d9a:	f85d fb04 	ldr.w	pc, [sp], #4

00002d9e <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    2d9e:	b500      	push	{lr}
    2da0:	b083      	sub	sp, #12
    2da2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2da4:	9b01      	ldr	r3, [sp, #4]
    2da6:	2b00      	cmp	r3, #0
    2da8:	d002      	beq.n	2db0 <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    2daa:	9801      	ldr	r0, [sp, #4]
    2dac:	f000 f946 	bl	303c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2db0:	bf00      	nop
    2db2:	b003      	add	sp, #12
    2db4:	f85d fb04 	ldr.w	pc, [sp], #4

00002db8 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    2db8:	b500      	push	{lr}
    2dba:	b083      	sub	sp, #12
    2dbc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dbe:	9b01      	ldr	r3, [sp, #4]
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	d002      	beq.n	2dca <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    2dc4:	9801      	ldr	r0, [sp, #4]
    2dc6:	f000 f951 	bl	306c <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dca:	bf00      	nop
    2dcc:	b003      	add	sp, #12
    2dce:	f85d fb04 	ldr.w	pc, [sp], #4

00002dd2 <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    2dd2:	b500      	push	{lr}
    2dd4:	b083      	sub	sp, #12
    2dd6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2dd8:	9b01      	ldr	r3, [sp, #4]
    2dda:	2b00      	cmp	r3, #0
    2ddc:	d002      	beq.n	2de4 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    2dde:	9801      	ldr	r0, [sp, #4]
    2de0:	f000 f95e 	bl	30a0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2de4:	bf00      	nop
    2de6:	b003      	add	sp, #12
    2de8:	f85d fb04 	ldr.w	pc, [sp], #4

00002dec <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    2dec:	b500      	push	{lr}
    2dee:	b083      	sub	sp, #12
    2df0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    2df2:	9b01      	ldr	r3, [sp, #4]
    2df4:	2b00      	cmp	r3, #0
    2df6:	d002      	beq.n	2dfe <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    2df8:	9801      	ldr	r0, [sp, #4]
    2dfa:	f000 f98b 	bl	3114 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    2dfe:	bf00      	nop
    2e00:	b003      	add	sp, #12
    2e02:	f85d fb04 	ldr.w	pc, [sp], #4

00002e06 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e06:	b086      	sub	sp, #24
    2e08:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2e0a:	9b01      	ldr	r3, [sp, #4]
    2e0c:	681a      	ldr	r2, [r3, #0]
    2e0e:	4911      	ldr	r1, [pc, #68]	; (2e54 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    2e10:	4613      	mov	r3, r2
    2e12:	00db      	lsls	r3, r3, #3
    2e14:	4413      	add	r3, r2
    2e16:	440b      	add	r3, r1
    2e18:	781b      	ldrb	r3, [r3, #0]
    2e1a:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2e1c:	9b01      	ldr	r3, [sp, #4]
    2e1e:	685b      	ldr	r3, [r3, #4]
    2e20:	4a0d      	ldr	r2, [pc, #52]	; (2e58 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    2e22:	5cd3      	ldrb	r3, [r2, r3]
    2e24:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2e26:	4a0d      	ldr	r2, [pc, #52]	; (2e5c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2e28:	9b05      	ldr	r3, [sp, #20]
    2e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e2e:	681b      	ldr	r3, [r3, #0]
    2e30:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    2e32:	9b03      	ldr	r3, [sp, #12]
    2e34:	f023 0307 	bic.w	r3, r3, #7
    2e38:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    2e3a:	9a03      	ldr	r2, [sp, #12]
    2e3c:	9b04      	ldr	r3, [sp, #16]
    2e3e:	4313      	orrs	r3, r2
    2e40:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2e42:	4a06      	ldr	r2, [pc, #24]	; (2e5c <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    2e44:	9b05      	ldr	r3, [sp, #20]
    2e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e4a:	9a03      	ldr	r2, [sp, #12]
    2e4c:	601a      	str	r2, [r3, #0]
}
    2e4e:	bf00      	nop
    2e50:	b006      	add	sp, #24
    2e52:	4770      	bx	lr
    2e54:	0000edd8 	.word	0x0000edd8
    2e58:	0000f1d0 	.word	0x0000f1d0
    2e5c:	0000f214 	.word	0x0000f214

00002e60 <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2e60:	b086      	sub	sp, #24
    2e62:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    2e64:	9b01      	ldr	r3, [sp, #4]
    2e66:	681a      	ldr	r2, [r3, #0]
    2e68:	4911      	ldr	r1, [pc, #68]	; (2eb0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    2e6a:	4613      	mov	r3, r2
    2e6c:	00db      	lsls	r3, r3, #3
    2e6e:	4413      	add	r3, r2
    2e70:	440b      	add	r3, r1
    2e72:	781b      	ldrb	r3, [r3, #0]
    2e74:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    2e76:	9b01      	ldr	r3, [sp, #4]
    2e78:	685b      	ldr	r3, [r3, #4]
    2e7a:	4a0e      	ldr	r2, [pc, #56]	; (2eb4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    2e7c:	5cd3      	ldrb	r3, [r2, r3]
    2e7e:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    2e80:	4a0d      	ldr	r2, [pc, #52]	; (2eb8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2e82:	9b05      	ldr	r3, [sp, #20]
    2e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e88:	681b      	ldr	r3, [r3, #0]
    2e8a:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    2e8c:	9b03      	ldr	r3, [sp, #12]
    2e8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    2e92:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    2e94:	9b04      	ldr	r3, [sp, #16]
    2e96:	021b      	lsls	r3, r3, #8
    2e98:	9a03      	ldr	r2, [sp, #12]
    2e9a:	4313      	orrs	r3, r2
    2e9c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    2e9e:	4a06      	ldr	r2, [pc, #24]	; (2eb8 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    2ea0:	9b05      	ldr	r3, [sp, #20]
    2ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2ea6:	9a03      	ldr	r2, [sp, #12]
    2ea8:	601a      	str	r2, [r3, #0]
}
    2eaa:	bf00      	nop
    2eac:	b006      	add	sp, #24
    2eae:	4770      	bx	lr
    2eb0:	0000edd8 	.word	0x0000edd8
    2eb4:	0000f1d0 	.word	0x0000f1d0
    2eb8:	0000f214 	.word	0x0000f214

00002ebc <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2ebc:	b084      	sub	sp, #16
    2ebe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2ec0:	4b09      	ldr	r3, [pc, #36]	; (2ee8 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2ec2:	695b      	ldr	r3, [r3, #20]
    2ec4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    2ec6:	9b03      	ldr	r3, [sp, #12]
    2ec8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2ecc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    2ece:	9b01      	ldr	r3, [sp, #4]
    2ed0:	685b      	ldr	r3, [r3, #4]
    2ed2:	3b01      	subs	r3, #1
    2ed4:	041b      	lsls	r3, r3, #16
    2ed6:	9a03      	ldr	r2, [sp, #12]
    2ed8:	4313      	orrs	r3, r2
    2eda:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2edc:	4a02      	ldr	r2, [pc, #8]	; (2ee8 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    2ede:	9b03      	ldr	r3, [sp, #12]
    2ee0:	6153      	str	r3, [r2, #20]
}
    2ee2:	bf00      	nop
    2ee4:	b004      	add	sp, #16
    2ee6:	4770      	bx	lr
    2ee8:	40064000 	.word	0x40064000

00002eec <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2eec:	b084      	sub	sp, #16
    2eee:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2ef0:	4b09      	ldr	r3, [pc, #36]	; (2f18 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2ef2:	695b      	ldr	r3, [r3, #20]
    2ef4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    2ef6:	9b03      	ldr	r3, [sp, #12]
    2ef8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2efc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    2efe:	9b01      	ldr	r3, [sp, #4]
    2f00:	685b      	ldr	r3, [r3, #4]
    2f02:	3b01      	subs	r3, #1
    2f04:	011b      	lsls	r3, r3, #4
    2f06:	9a03      	ldr	r2, [sp, #12]
    2f08:	4313      	orrs	r3, r2
    2f0a:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2f0c:	4a02      	ldr	r2, [pc, #8]	; (2f18 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    2f0e:	9b03      	ldr	r3, [sp, #12]
    2f10:	6153      	str	r3, [r2, #20]
}
    2f12:	bf00      	nop
    2f14:	b004      	add	sp, #16
    2f16:	4770      	bx	lr
    2f18:	40064000 	.word	0x40064000

00002f1c <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f1c:	b084      	sub	sp, #16
    2f1e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    2f20:	4b09      	ldr	r3, [pc, #36]	; (2f48 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2f22:	695b      	ldr	r3, [r3, #20]
    2f24:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    2f26:	9b03      	ldr	r3, [sp, #12]
    2f28:	f023 030f 	bic.w	r3, r3, #15
    2f2c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    2f2e:	9b01      	ldr	r3, [sp, #4]
    2f30:	685b      	ldr	r3, [r3, #4]
    2f32:	3b01      	subs	r3, #1
    2f34:	9a03      	ldr	r2, [sp, #12]
    2f36:	4313      	orrs	r3, r2
    2f38:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    2f3a:	4a03      	ldr	r2, [pc, #12]	; (2f48 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    2f3c:	9b03      	ldr	r3, [sp, #12]
    2f3e:	6153      	str	r3, [r2, #20]
}
    2f40:	bf00      	nop
    2f42:	b004      	add	sp, #16
    2f44:	4770      	bx	lr
    2f46:	bf00      	nop
    2f48:	40064000 	.word	0x40064000

00002f4c <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f4c:	b084      	sub	sp, #16
    2f4e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f50:	4b09      	ldr	r3, [pc, #36]	; (2f78 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f52:	699b      	ldr	r3, [r3, #24]
    2f54:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    2f56:	9b03      	ldr	r3, [sp, #12]
    2f58:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2f5c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    2f5e:	9b01      	ldr	r3, [sp, #4]
    2f60:	685b      	ldr	r3, [r3, #4]
    2f62:	3b01      	subs	r3, #1
    2f64:	041b      	lsls	r3, r3, #16
    2f66:	9a03      	ldr	r2, [sp, #12]
    2f68:	4313      	orrs	r3, r2
    2f6a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f6c:	4a02      	ldr	r2, [pc, #8]	; (2f78 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    2f6e:	9b03      	ldr	r3, [sp, #12]
    2f70:	6193      	str	r3, [r2, #24]
}
    2f72:	bf00      	nop
    2f74:	b004      	add	sp, #16
    2f76:	4770      	bx	lr
    2f78:	40064000 	.word	0x40064000

00002f7c <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2f7c:	b084      	sub	sp, #16
    2f7e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2f80:	4b09      	ldr	r3, [pc, #36]	; (2fa8 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f82:	699b      	ldr	r3, [r3, #24]
    2f84:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    2f86:	9b03      	ldr	r3, [sp, #12]
    2f88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    2f8c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    2f8e:	9b01      	ldr	r3, [sp, #4]
    2f90:	685b      	ldr	r3, [r3, #4]
    2f92:	3b01      	subs	r3, #1
    2f94:	011b      	lsls	r3, r3, #4
    2f96:	9a03      	ldr	r2, [sp, #12]
    2f98:	4313      	orrs	r3, r2
    2f9a:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2f9c:	4a02      	ldr	r2, [pc, #8]	; (2fa8 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    2f9e:	9b03      	ldr	r3, [sp, #12]
    2fa0:	6193      	str	r3, [r2, #24]
}
    2fa2:	bf00      	nop
    2fa4:	b004      	add	sp, #16
    2fa6:	4770      	bx	lr
    2fa8:	40064000 	.word	0x40064000

00002fac <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fac:	b084      	sub	sp, #16
    2fae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    2fb0:	4b09      	ldr	r3, [pc, #36]	; (2fd8 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2fb2:	699b      	ldr	r3, [r3, #24]
    2fb4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    2fb6:	9b03      	ldr	r3, [sp, #12]
    2fb8:	f023 030f 	bic.w	r3, r3, #15
    2fbc:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    2fbe:	9b01      	ldr	r3, [sp, #4]
    2fc0:	685b      	ldr	r3, [r3, #4]
    2fc2:	3b01      	subs	r3, #1
    2fc4:	9a03      	ldr	r2, [sp, #12]
    2fc6:	4313      	orrs	r3, r2
    2fc8:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    2fca:	4a03      	ldr	r2, [pc, #12]	; (2fd8 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    2fcc:	9b03      	ldr	r3, [sp, #12]
    2fce:	6193      	str	r3, [r2, #24]
}
    2fd0:	bf00      	nop
    2fd2:	b004      	add	sp, #16
    2fd4:	4770      	bx	lr
    2fd6:	bf00      	nop
    2fd8:	40064000 	.word	0x40064000

00002fdc <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    2fdc:	b084      	sub	sp, #16
    2fde:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    2fe0:	4b09      	ldr	r3, [pc, #36]	; (3008 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2fe2:	69db      	ldr	r3, [r3, #28]
    2fe4:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    2fe6:	9b03      	ldr	r3, [sp, #12]
    2fe8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2fec:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    2fee:	9b01      	ldr	r3, [sp, #4]
    2ff0:	685b      	ldr	r3, [r3, #4]
    2ff2:	3b01      	subs	r3, #1
    2ff4:	041b      	lsls	r3, r3, #16
    2ff6:	9a03      	ldr	r2, [sp, #12]
    2ff8:	4313      	orrs	r3, r2
    2ffa:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    2ffc:	4a02      	ldr	r2, [pc, #8]	; (3008 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    2ffe:	9b03      	ldr	r3, [sp, #12]
    3000:	61d3      	str	r3, [r2, #28]
}
    3002:	bf00      	nop
    3004:	b004      	add	sp, #16
    3006:	4770      	bx	lr
    3008:	40064000 	.word	0x40064000

0000300c <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    300c:	b084      	sub	sp, #16
    300e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3010:	4b09      	ldr	r3, [pc, #36]	; (3038 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    3012:	69db      	ldr	r3, [r3, #28]
    3014:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    3016:	9b03      	ldr	r3, [sp, #12]
    3018:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    301c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    301e:	9b01      	ldr	r3, [sp, #4]
    3020:	685b      	ldr	r3, [r3, #4]
    3022:	3b01      	subs	r3, #1
    3024:	011b      	lsls	r3, r3, #4
    3026:	9a03      	ldr	r2, [sp, #12]
    3028:	4313      	orrs	r3, r2
    302a:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    302c:	4a02      	ldr	r2, [pc, #8]	; (3038 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    302e:	9b03      	ldr	r3, [sp, #12]
    3030:	61d3      	str	r3, [r2, #28]
}
    3032:	bf00      	nop
    3034:	b004      	add	sp, #16
    3036:	4770      	bx	lr
    3038:	40064000 	.word	0x40064000

0000303c <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    303c:	b084      	sub	sp, #16
    303e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    3040:	4b09      	ldr	r3, [pc, #36]	; (3068 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3042:	69db      	ldr	r3, [r3, #28]
    3044:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3046:	9b03      	ldr	r3, [sp, #12]
    3048:	f023 030f 	bic.w	r3, r3, #15
    304c:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    304e:	9b01      	ldr	r3, [sp, #4]
    3050:	685b      	ldr	r3, [r3, #4]
    3052:	3b01      	subs	r3, #1
    3054:	9a03      	ldr	r2, [sp, #12]
    3056:	4313      	orrs	r3, r2
    3058:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    305a:	4a03      	ldr	r2, [pc, #12]	; (3068 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    305c:	9b03      	ldr	r3, [sp, #12]
    305e:	61d3      	str	r3, [r2, #28]
}
    3060:	bf00      	nop
    3062:	b004      	add	sp, #16
    3064:	4770      	bx	lr
    3066:	bf00      	nop
    3068:	40064000 	.word	0x40064000

0000306c <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    306c:	b084      	sub	sp, #16
    306e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3070:	4b0a      	ldr	r3, [pc, #40]	; (309c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3072:	685b      	ldr	r3, [r3, #4]
    3074:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3076:	9b03      	ldr	r3, [sp, #12]
    3078:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    307c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    307e:	9b01      	ldr	r3, [sp, #4]
    3080:	685b      	ldr	r3, [r3, #4]
    3082:	3b01      	subs	r3, #1
    3084:	021b      	lsls	r3, r3, #8
    3086:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    308a:	9a03      	ldr	r2, [sp, #12]
    308c:	4313      	orrs	r3, r2
    308e:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3090:	4a02      	ldr	r2, [pc, #8]	; (309c <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    3092:	9b03      	ldr	r3, [sp, #12]
    3094:	6053      	str	r3, [r2, #4]
}
    3096:	bf00      	nop
    3098:	b004      	add	sp, #16
    309a:	4770      	bx	lr
    309c:	40048000 	.word	0x40048000

000030a0 <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    30a0:	b084      	sub	sp, #16
    30a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    30a4:	4919      	ldr	r1, [pc, #100]	; (310c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    30a6:	9b01      	ldr	r3, [sp, #4]
    30a8:	681a      	ldr	r2, [r3, #0]
    30aa:	4819      	ldr	r0, [pc, #100]	; (3110 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    30ac:	4613      	mov	r3, r2
    30ae:	00db      	lsls	r3, r3, #3
    30b0:	4413      	add	r3, r2
    30b2:	4403      	add	r3, r0
    30b4:	3305      	adds	r3, #5
    30b6:	781b      	ldrb	r3, [r3, #0]
    30b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    30bc:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    30be:	9b03      	ldr	r3, [sp, #12]
    30c0:	f023 030f 	bic.w	r3, r3, #15
    30c4:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    30c6:	9b01      	ldr	r3, [sp, #4]
    30c8:	685b      	ldr	r3, [r3, #4]
    30ca:	3b01      	subs	r3, #1
    30cc:	f003 0307 	and.w	r3, r3, #7
    30d0:	9a03      	ldr	r2, [sp, #12]
    30d2:	4313      	orrs	r3, r2
    30d4:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    30d6:	9b01      	ldr	r3, [sp, #4]
    30d8:	7a1b      	ldrb	r3, [r3, #8]
    30da:	3b01      	subs	r3, #1
    30dc:	00db      	lsls	r3, r3, #3
    30de:	f003 0308 	and.w	r3, r3, #8
    30e2:	9a03      	ldr	r2, [sp, #12]
    30e4:	4313      	orrs	r3, r2
    30e6:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    30e8:	4908      	ldr	r1, [pc, #32]	; (310c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    30ea:	9b01      	ldr	r3, [sp, #4]
    30ec:	681a      	ldr	r2, [r3, #0]
    30ee:	4808      	ldr	r0, [pc, #32]	; (3110 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    30f0:	4613      	mov	r3, r2
    30f2:	00db      	lsls	r3, r3, #3
    30f4:	4413      	add	r3, r2
    30f6:	4403      	add	r3, r0
    30f8:	3305      	adds	r3, #5
    30fa:	781b      	ldrb	r3, [r3, #0]
    30fc:	461a      	mov	r2, r3
    30fe:	9b03      	ldr	r3, [sp, #12]
    3100:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3104:	bf00      	nop
    3106:	b004      	add	sp, #16
    3108:	4770      	bx	lr
    310a:	bf00      	nop
    310c:	40065000 	.word	0x40065000
    3110:	0000edd8 	.word	0x0000edd8

00003114 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3114:	b084      	sub	sp, #16
    3116:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3118:	4b10      	ldr	r3, [pc, #64]	; (315c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    311a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    311c:	4a0f      	ldr	r2, [pc, #60]	; (315c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    311e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3122:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3124:	4b0d      	ldr	r3, [pc, #52]	; (315c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3128:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    312a:	9b03      	ldr	r3, [sp, #12]
    312c:	f023 030f 	bic.w	r3, r3, #15
    3130:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3132:	9b01      	ldr	r3, [sp, #4]
    3134:	685b      	ldr	r3, [r3, #4]
    3136:	3b01      	subs	r3, #1
    3138:	005b      	lsls	r3, r3, #1
    313a:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    313e:	9b01      	ldr	r3, [sp, #4]
    3140:	7a1b      	ldrb	r3, [r3, #8]
    3142:	3b01      	subs	r3, #1
    3144:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3148:	4313      	orrs	r3, r2
    314a:	9a03      	ldr	r2, [sp, #12]
    314c:	4313      	orrs	r3, r2
    314e:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    3150:	4a02      	ldr	r2, [pc, #8]	; (315c <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3152:	9b03      	ldr	r3, [sp, #12]
    3154:	6693      	str	r3, [r2, #104]	; 0x68
}
    3156:	bf00      	nop
    3158:	b004      	add	sp, #16
    315a:	4770      	bx	lr
    315c:	40048000 	.word	0x40048000

00003160 <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    3160:	b082      	sub	sp, #8
    3162:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3164:	bf00      	nop
    3166:	b002      	add	sp, #8
    3168:	4770      	bx	lr
	...

0000316c <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    316c:	b082      	sub	sp, #8
    316e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3170:	bf00      	nop
    3172:	b002      	add	sp, #8
    3174:	4770      	bx	lr

00003176 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3176:	b082      	sub	sp, #8
    3178:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    317a:	bf00      	nop
    317c:	b002      	add	sp, #8
    317e:	4770      	bx	lr

00003180 <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3180:	b500      	push	{lr}
    3182:	b083      	sub	sp, #12
    3184:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3186:	9b01      	ldr	r3, [sp, #4]
    3188:	2b00      	cmp	r3, #0
    318a:	d002      	beq.n	3192 <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    318c:	9801      	ldr	r0, [sp, #4]
    318e:	f000 f86a 	bl	3266 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3192:	bf00      	nop
    3194:	b003      	add	sp, #12
    3196:	f85d fb04 	ldr.w	pc, [sp], #4

0000319a <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    319a:	b500      	push	{lr}
    319c:	b083      	sub	sp, #12
    319e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    31a0:	9b01      	ldr	r3, [sp, #4]
    31a2:	2b00      	cmp	r3, #0
    31a4:	d002      	beq.n	31ac <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    31a6:	9801      	ldr	r0, [sp, #4]
    31a8:	f000 f884 	bl	32b4 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    31ac:	bf00      	nop
    31ae:	b003      	add	sp, #12
    31b0:	f85d fb04 	ldr.w	pc, [sp], #4

000031b4 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    31b4:	b500      	push	{lr}
    31b6:	b089      	sub	sp, #36	; 0x24
    31b8:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    31ba:	2300      	movs	r3, #0
    31bc:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    31c0:	9b01      	ldr	r3, [sp, #4]
    31c2:	2b00      	cmp	r3, #0
    31c4:	d031      	beq.n	322a <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    31c6:	4b1b      	ldr	r3, [pc, #108]	; (3234 <Clock_Ip_CompleteSOSC+0x80>)
    31c8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31cc:	f003 0301 	and.w	r3, r3, #1
    31d0:	2b00      	cmp	r3, #0
    31d2:	d02a      	beq.n	322a <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    31d4:	aa03      	add	r2, sp, #12
    31d6:	a904      	add	r1, sp, #16
    31d8:	a805      	add	r0, sp, #20
    31da:	f24c 3350 	movw	r3, #50000	; 0xc350
    31de:	f7ff fd1d 	bl	2c1c <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    31e2:	4b14      	ldr	r3, [pc, #80]	; (3234 <Clock_Ip_CompleteSOSC+0x80>)
    31e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    31e8:	0e1b      	lsrs	r3, r3, #24
    31ea:	f003 0301 	and.w	r3, r3, #1
    31ee:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    31f0:	9a03      	ldr	r2, [sp, #12]
    31f2:	a904      	add	r1, sp, #16
    31f4:	ab05      	add	r3, sp, #20
    31f6:	4618      	mov	r0, r3
    31f8:	f7ff fd2a 	bl	2c50 <Clock_Ip_TimeoutExpired>
    31fc:	4603      	mov	r3, r0
    31fe:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    3202:	9b06      	ldr	r3, [sp, #24]
    3204:	2b00      	cmp	r3, #0
    3206:	d106      	bne.n	3216 <Clock_Ip_CompleteSOSC+0x62>
    3208:	f89d 301f 	ldrb.w	r3, [sp, #31]
    320c:	f083 0301 	eor.w	r3, r3, #1
    3210:	b2db      	uxtb	r3, r3
    3212:	2b00      	cmp	r3, #0
    3214:	d1e5      	bne.n	31e2 <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3216:	f89d 301f 	ldrb.w	r3, [sp, #31]
    321a:	2b00      	cmp	r3, #0
    321c:	d005      	beq.n	322a <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    321e:	9b01      	ldr	r3, [sp, #4]
    3220:	681b      	ldr	r3, [r3, #0]
    3222:	4619      	mov	r1, r3
    3224:	2001      	movs	r0, #1
    3226:	f7ff fce9 	bl	2bfc <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    322a:	bf00      	nop
    322c:	b009      	add	sp, #36	; 0x24
    322e:	f85d fb04 	ldr.w	pc, [sp], #4
    3232:	bf00      	nop
    3234:	40064000 	.word	0x40064000

00003238 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3238:	b500      	push	{lr}
    323a:	b083      	sub	sp, #12
    323c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    323e:	9801      	ldr	r0, [sp, #4]
    3240:	f000 f8c0 	bl	33c4 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3244:	bf00      	nop
    3246:	b003      	add	sp, #12
    3248:	f85d fb04 	ldr.w	pc, [sp], #4

0000324c <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    324c:	b500      	push	{lr}
    324e:	b083      	sub	sp, #12
    3250:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3252:	9b01      	ldr	r3, [sp, #4]
    3254:	2b00      	cmp	r3, #0
    3256:	d002      	beq.n	325e <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3258:	9801      	ldr	r0, [sp, #4]
    325a:	f000 f8c3 	bl	33e4 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    325e:	bf00      	nop
    3260:	b003      	add	sp, #12
    3262:	f85d fb04 	ldr.w	pc, [sp], #4

00003266 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3266:	b082      	sub	sp, #8
    3268:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    326a:	4b11      	ldr	r3, [pc, #68]	; (32b0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    326c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3270:	4a0f      	ldr	r2, [pc, #60]	; (32b0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3272:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3276:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    327a:	4b0d      	ldr	r3, [pc, #52]	; (32b0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    327c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3280:	4a0b      	ldr	r2, [pc, #44]	; (32b0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3286:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    328a:	4b09      	ldr	r3, [pc, #36]	; (32b0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    328c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3290:	4a07      	ldr	r2, [pc, #28]	; (32b0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3292:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    3296:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    329a:	4b05      	ldr	r3, [pc, #20]	; (32b0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    329c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    32a0:	4a03      	ldr	r2, [pc, #12]	; (32b0 <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    32a2:	f023 0301 	bic.w	r3, r3, #1
    32a6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    32aa:	bf00      	nop
    32ac:	b002      	add	sp, #8
    32ae:	4770      	bx	lr
    32b0:	40064000 	.word	0x40064000

000032b4 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    32b4:	b082      	sub	sp, #8
    32b6:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    32b8:	9b01      	ldr	r3, [sp, #4]
    32ba:	891b      	ldrh	r3, [r3, #8]
    32bc:	2b01      	cmp	r3, #1
    32be:	d174      	bne.n	33aa <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    32c0:	9b01      	ldr	r3, [sp, #4]
    32c2:	7bdb      	ldrb	r3, [r3, #15]
    32c4:	2b00      	cmp	r3, #0
    32c6:	d002      	beq.n	32ce <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    32c8:	2b01      	cmp	r3, #1
    32ca:	d009      	beq.n	32e0 <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    32cc:	e011      	b.n	32f2 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    32ce:	4b39      	ldr	r3, [pc, #228]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32d4:	4a37      	ldr	r2, [pc, #220]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32d6:	f023 0308 	bic.w	r3, r3, #8
    32da:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    32de:	e008      	b.n	32f2 <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    32e0:	4b34      	ldr	r3, [pc, #208]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32e6:	4a33      	ldr	r2, [pc, #204]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32e8:	f043 0308 	orr.w	r3, r3, #8
    32ec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    32f0:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    32f2:	4b30      	ldr	r3, [pc, #192]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    32f8:	4a2e      	ldr	r2, [pc, #184]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    32fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    32fe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    3302:	9b01      	ldr	r3, [sp, #4]
    3304:	685b      	ldr	r3, [r3, #4]
    3306:	4a2c      	ldr	r2, [pc, #176]	; (33b8 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3308:	4293      	cmp	r3, r2
    330a:	d90d      	bls.n	3328 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    330c:	9b01      	ldr	r3, [sp, #4]
    330e:	685b      	ldr	r3, [r3, #4]
    3310:	4a2a      	ldr	r2, [pc, #168]	; (33bc <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    3312:	4293      	cmp	r3, r2
    3314:	d208      	bcs.n	3328 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    3316:	4b27      	ldr	r3, [pc, #156]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3318:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    331c:	4a25      	ldr	r2, [pc, #148]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    331e:	f043 0320 	orr.w	r3, r3, #32
    3322:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3326:	e007      	b.n	3338 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3328:	4b22      	ldr	r3, [pc, #136]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    332a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    332e:	4a21      	ldr	r2, [pc, #132]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3330:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3334:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3338:	9b01      	ldr	r3, [sp, #4]
    333a:	7b1b      	ldrb	r3, [r3, #12]
    333c:	2b00      	cmp	r3, #0
    333e:	d108      	bne.n	3352 <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    3340:	4b1c      	ldr	r3, [pc, #112]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3342:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3346:	4a1b      	ldr	r2, [pc, #108]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3348:	f043 0304 	orr.w	r3, r3, #4
    334c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3350:	e007      	b.n	3362 <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    3352:	4b18      	ldr	r3, [pc, #96]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3354:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3358:	4a16      	ldr	r2, [pc, #88]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    335a:	f023 0304 	bic.w	r3, r3, #4
    335e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    3362:	9b01      	ldr	r3, [sp, #4]
    3364:	7c1b      	ldrb	r3, [r3, #16]
    3366:	2b02      	cmp	r3, #2
    3368:	d011      	beq.n	338e <Clock_Ip_SetSOSC_TrustedCall+0xda>
    336a:	2b02      	cmp	r3, #2
    336c:	dc14      	bgt.n	3398 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    336e:	2b00      	cmp	r3, #0
    3370:	d002      	beq.n	3378 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    3372:	2b01      	cmp	r3, #1
    3374:	d005      	beq.n	3382 <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3376:	e00f      	b.n	3398 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3378:	4b0e      	ldr	r3, [pc, #56]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    337a:	2201      	movs	r2, #1
    337c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3380:	e014      	b.n	33ac <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3382:	4b0c      	ldr	r3, [pc, #48]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3384:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3388:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    338c:	e00e      	b.n	33ac <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    338e:	4b09      	ldr	r3, [pc, #36]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3390:	4a0b      	ldr	r2, [pc, #44]	; (33c0 <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    3392:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    3396:	e009      	b.n	33ac <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    3398:	4b06      	ldr	r3, [pc, #24]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    339a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    339e:	4a05      	ldr	r2, [pc, #20]	; (33b4 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    33a0:	f043 0301 	orr.w	r3, r3, #1
    33a4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    33a8:	e000      	b.n	33ac <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    33aa:	bf00      	nop
}
    33ac:	bf00      	nop
    33ae:	b002      	add	sp, #8
    33b0:	4770      	bx	lr
    33b2:	bf00      	nop
    33b4:	40064000 	.word	0x40064000
    33b8:	003d08ff 	.word	0x003d08ff
    33bc:	007a1200 	.word	0x007a1200
    33c0:	00030001 	.word	0x00030001

000033c4 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    33c4:	b082      	sub	sp, #8
    33c6:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    33c8:	4b05      	ldr	r3, [pc, #20]	; (33e0 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    33ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33ce:	4a04      	ldr	r2, [pc, #16]	; (33e0 <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    33d0:	f023 0301 	bic.w	r3, r3, #1
    33d4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    33d8:	bf00      	nop
    33da:	b002      	add	sp, #8
    33dc:	4770      	bx	lr
    33de:	bf00      	nop
    33e0:	40064000 	.word	0x40064000

000033e4 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    33e4:	b082      	sub	sp, #8
    33e6:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    33e8:	9b01      	ldr	r3, [sp, #4]
    33ea:	891b      	ldrh	r3, [r3, #8]
    33ec:	2b01      	cmp	r3, #1
    33ee:	d107      	bne.n	3400 <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    33f0:	4b05      	ldr	r3, [pc, #20]	; (3408 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    33f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    33f6:	4a04      	ldr	r2, [pc, #16]	; (3408 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    33f8:	f043 0301 	orr.w	r3, r3, #1
    33fc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3400:	bf00      	nop
    3402:	b002      	add	sp, #8
    3404:	4770      	bx	lr
    3406:	bf00      	nop
    3408:	40064000 	.word	0x40064000

0000340c <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    340c:	b082      	sub	sp, #8
    340e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3410:	bf00      	nop
    3412:	b002      	add	sp, #8
    3414:	4770      	bx	lr

00003416 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    3416:	b082      	sub	sp, #8
    3418:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    341a:	2300      	movs	r3, #0
}
    341c:	4618      	mov	r0, r3
    341e:	b002      	add	sp, #8
    3420:	4770      	bx	lr

00003422 <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    3422:	b082      	sub	sp, #8
    3424:	9001      	str	r0, [sp, #4]
    3426:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3428:	bf00      	nop
    342a:	b002      	add	sp, #8
    342c:	4770      	bx	lr
	...

00003430 <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3430:	b082      	sub	sp, #8
    3432:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3434:	bf00      	nop
    3436:	b002      	add	sp, #8
    3438:	4770      	bx	lr

0000343a <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    343a:	b082      	sub	sp, #8
    343c:	9001      	str	r0, [sp, #4]
    343e:	460b      	mov	r3, r1
    3440:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3444:	bf00      	nop
    3446:	b002      	add	sp, #8
    3448:	4770      	bx	lr

0000344a <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    344a:	b500      	push	{lr}
    344c:	b083      	sub	sp, #12
    344e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3450:	9b01      	ldr	r3, [sp, #4]
    3452:	2b00      	cmp	r3, #0
    3454:	d002      	beq.n	345c <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    3456:	9801      	ldr	r0, [sp, #4]
    3458:	f000 f8e7 	bl	362a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    345c:	bf00      	nop
    345e:	b003      	add	sp, #12
    3460:	f85d fb04 	ldr.w	pc, [sp], #4

00003464 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3464:	b500      	push	{lr}
    3466:	b085      	sub	sp, #20
    3468:	9001      	str	r0, [sp, #4]
    346a:	460b      	mov	r3, r1
    346c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3470:	9b01      	ldr	r3, [sp, #4]
    3472:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3474:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3478:	2b00      	cmp	r3, #0
    347a:	d003      	beq.n	3484 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    347c:	2300      	movs	r3, #0
    347e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3482:	e002      	b.n	348a <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3484:	2301      	movs	r3, #1
    3486:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    348a:	ab02      	add	r3, sp, #8
    348c:	4618      	mov	r0, r3
    348e:	f7ff ffdc 	bl	344a <Clock_Ip_ClockSetSimLPO1KEnable>
}
    3492:	bf00      	nop
    3494:	b005      	add	sp, #20
    3496:	f85d fb04 	ldr.w	pc, [sp], #4

0000349a <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    349a:	b500      	push	{lr}
    349c:	b083      	sub	sp, #12
    349e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34a0:	9b01      	ldr	r3, [sp, #4]
    34a2:	2b00      	cmp	r3, #0
    34a4:	d002      	beq.n	34ac <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    34a6:	9801      	ldr	r0, [sp, #4]
    34a8:	f000 f8d6 	bl	3658 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34ac:	bf00      	nop
    34ae:	b003      	add	sp, #12
    34b0:	f85d fb04 	ldr.w	pc, [sp], #4

000034b4 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    34b4:	b500      	push	{lr}
    34b6:	b085      	sub	sp, #20
    34b8:	9001      	str	r0, [sp, #4]
    34ba:	460b      	mov	r3, r1
    34bc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    34c0:	9b01      	ldr	r3, [sp, #4]
    34c2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    34c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34c8:	2b00      	cmp	r3, #0
    34ca:	d003      	beq.n	34d4 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    34cc:	2300      	movs	r3, #0
    34ce:	f8ad 300c 	strh.w	r3, [sp, #12]
    34d2:	e002      	b.n	34da <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    34d4:	2301      	movs	r3, #1
    34d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    34da:	ab02      	add	r3, sp, #8
    34dc:	4618      	mov	r0, r3
    34de:	f7ff ffdc 	bl	349a <Clock_Ip_ClockSetSimLPO32KEnable>
}
    34e2:	bf00      	nop
    34e4:	b005      	add	sp, #20
    34e6:	f85d fb04 	ldr.w	pc, [sp], #4

000034ea <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    34ea:	b500      	push	{lr}
    34ec:	b083      	sub	sp, #12
    34ee:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    34f0:	9b01      	ldr	r3, [sp, #4]
    34f2:	2b00      	cmp	r3, #0
    34f4:	d002      	beq.n	34fc <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    34f6:	9801      	ldr	r0, [sp, #4]
    34f8:	f000 f8c6 	bl	3688 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    34fc:	bf00      	nop
    34fe:	b003      	add	sp, #12
    3500:	f85d fb04 	ldr.w	pc, [sp], #4

00003504 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3504:	b500      	push	{lr}
    3506:	b085      	sub	sp, #20
    3508:	9001      	str	r0, [sp, #4]
    350a:	460b      	mov	r3, r1
    350c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3510:	9b01      	ldr	r3, [sp, #4]
    3512:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3514:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3518:	2b00      	cmp	r3, #0
    351a:	d003      	beq.n	3524 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    351c:	2300      	movs	r3, #0
    351e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3522:	e002      	b.n	352a <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3524:	2301      	movs	r3, #1
    3526:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    352a:	ab02      	add	r3, sp, #8
    352c:	4618      	mov	r0, r3
    352e:	f7ff ffdc 	bl	34ea <Clock_Ip_ClockSetSimClkoutEnable>
}
    3532:	bf00      	nop
    3534:	b005      	add	sp, #20
    3536:	f85d fb04 	ldr.w	pc, [sp], #4

0000353a <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    353a:	b500      	push	{lr}
    353c:	b083      	sub	sp, #12
    353e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3540:	9b01      	ldr	r3, [sp, #4]
    3542:	2b00      	cmp	r3, #0
    3544:	d002      	beq.n	354c <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3546:	9801      	ldr	r0, [sp, #4]
    3548:	f000 f8b6 	bl	36b8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    354c:	bf00      	nop
    354e:	b003      	add	sp, #12
    3550:	f85d fb04 	ldr.w	pc, [sp], #4

00003554 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3554:	b500      	push	{lr}
    3556:	b085      	sub	sp, #20
    3558:	9001      	str	r0, [sp, #4]
    355a:	460b      	mov	r3, r1
    355c:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3560:	9b01      	ldr	r3, [sp, #4]
    3562:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3564:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3568:	2b00      	cmp	r3, #0
    356a:	d003      	beq.n	3574 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    356c:	2300      	movs	r3, #0
    356e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3572:	e002      	b.n	357a <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3574:	2301      	movs	r3, #1
    3576:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    357a:	ab02      	add	r3, sp, #8
    357c:	4618      	mov	r0, r3
    357e:	f7ff ffdc 	bl	353a <Clock_Ip_ClockSetPccCgcEnable>
}
    3582:	bf00      	nop
    3584:	b005      	add	sp, #20
    3586:	f85d fb04 	ldr.w	pc, [sp], #4

0000358a <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    358a:	b500      	push	{lr}
    358c:	b083      	sub	sp, #12
    358e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3590:	9b01      	ldr	r3, [sp, #4]
    3592:	2b00      	cmp	r3, #0
    3594:	d002      	beq.n	359c <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3596:	9801      	ldr	r0, [sp, #4]
    3598:	f000 f8bc 	bl	3714 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    359c:	bf00      	nop
    359e:	b003      	add	sp, #12
    35a0:	f85d fb04 	ldr.w	pc, [sp], #4

000035a4 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    35a4:	b500      	push	{lr}
    35a6:	b085      	sub	sp, #20
    35a8:	9001      	str	r0, [sp, #4]
    35aa:	460b      	mov	r3, r1
    35ac:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    35b0:	9b01      	ldr	r3, [sp, #4]
    35b2:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    35b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    35b8:	2b00      	cmp	r3, #0
    35ba:	d003      	beq.n	35c4 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    35bc:	2300      	movs	r3, #0
    35be:	f8ad 300c 	strh.w	r3, [sp, #12]
    35c2:	e002      	b.n	35ca <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    35c4:	2301      	movs	r3, #1
    35c6:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    35ca:	ab02      	add	r3, sp, #8
    35cc:	4618      	mov	r0, r3
    35ce:	f7ff ffdc 	bl	358a <Clock_Ip_ClockSetSimGate>
}
    35d2:	bf00      	nop
    35d4:	b005      	add	sp, #20
    35d6:	f85d fb04 	ldr.w	pc, [sp], #4

000035da <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    35da:	b500      	push	{lr}
    35dc:	b083      	sub	sp, #12
    35de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    35e0:	9b01      	ldr	r3, [sp, #4]
    35e2:	2b00      	cmp	r3, #0
    35e4:	d002      	beq.n	35ec <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    35e6:	9801      	ldr	r0, [sp, #4]
    35e8:	f000 f8c0 	bl	376c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    35ec:	bf00      	nop
    35ee:	b003      	add	sp, #12
    35f0:	f85d fb04 	ldr.w	pc, [sp], #4

000035f4 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    35f4:	b500      	push	{lr}
    35f6:	b085      	sub	sp, #20
    35f8:	9001      	str	r0, [sp, #4]
    35fa:	460b      	mov	r3, r1
    35fc:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3600:	9b01      	ldr	r3, [sp, #4]
    3602:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3604:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3608:	2b00      	cmp	r3, #0
    360a:	d003      	beq.n	3614 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    360c:	2300      	movs	r3, #0
    360e:	f8ad 300c 	strh.w	r3, [sp, #12]
    3612:	e002      	b.n	361a <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3614:	2301      	movs	r3, #1
    3616:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    361a:	ab02      	add	r3, sp, #8
    361c:	4618      	mov	r0, r3
    361e:	f7ff ffdc 	bl	35da <Clock_Ip_ClockSetSimTraceEnable>
}
    3622:	bf00      	nop
    3624:	b005      	add	sp, #20
    3626:	f85d fb04 	ldr.w	pc, [sp], #4

0000362a <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    362a:	b084      	sub	sp, #16
    362c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    362e:	4b09      	ldr	r3, [pc, #36]	; (3654 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3630:	691b      	ldr	r3, [r3, #16]
    3632:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3634:	9b03      	ldr	r3, [sp, #12]
    3636:	f023 0301 	bic.w	r3, r3, #1
    363a:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    363c:	9b01      	ldr	r3, [sp, #4]
    363e:	889b      	ldrh	r3, [r3, #4]
    3640:	461a      	mov	r2, r3
    3642:	9b03      	ldr	r3, [sp, #12]
    3644:	4313      	orrs	r3, r2
    3646:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3648:	4a02      	ldr	r2, [pc, #8]	; (3654 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    364a:	9b03      	ldr	r3, [sp, #12]
    364c:	6113      	str	r3, [r2, #16]
}
    364e:	bf00      	nop
    3650:	b004      	add	sp, #16
    3652:	4770      	bx	lr
    3654:	40048000 	.word	0x40048000

00003658 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3658:	b084      	sub	sp, #16
    365a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    365c:	4b09      	ldr	r3, [pc, #36]	; (3684 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    365e:	691b      	ldr	r3, [r3, #16]
    3660:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3662:	9b03      	ldr	r3, [sp, #12]
    3664:	f023 0302 	bic.w	r3, r3, #2
    3668:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    366a:	9b01      	ldr	r3, [sp, #4]
    366c:	889b      	ldrh	r3, [r3, #4]
    366e:	005b      	lsls	r3, r3, #1
    3670:	9a03      	ldr	r2, [sp, #12]
    3672:	4313      	orrs	r3, r2
    3674:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3676:	4a03      	ldr	r2, [pc, #12]	; (3684 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3678:	9b03      	ldr	r3, [sp, #12]
    367a:	6113      	str	r3, [r2, #16]
}
    367c:	bf00      	nop
    367e:	b004      	add	sp, #16
    3680:	4770      	bx	lr
    3682:	bf00      	nop
    3684:	40048000 	.word	0x40048000

00003688 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3688:	b084      	sub	sp, #16
    368a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    368c:	4b09      	ldr	r3, [pc, #36]	; (36b4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    368e:	685b      	ldr	r3, [r3, #4]
    3690:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3692:	9b03      	ldr	r3, [sp, #12]
    3694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3698:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    369a:	9b01      	ldr	r3, [sp, #4]
    369c:	889b      	ldrh	r3, [r3, #4]
    369e:	02db      	lsls	r3, r3, #11
    36a0:	9a03      	ldr	r2, [sp, #12]
    36a2:	4313      	orrs	r3, r2
    36a4:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    36a6:	4a03      	ldr	r2, [pc, #12]	; (36b4 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    36a8:	9b03      	ldr	r3, [sp, #12]
    36aa:	6053      	str	r3, [r2, #4]
}
    36ac:	bf00      	nop
    36ae:	b004      	add	sp, #16
    36b0:	4770      	bx	lr
    36b2:	bf00      	nop
    36b4:	40048000 	.word	0x40048000

000036b8 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    36b8:	b084      	sub	sp, #16
    36ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    36bc:	4913      	ldr	r1, [pc, #76]	; (370c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    36be:	9b01      	ldr	r3, [sp, #4]
    36c0:	681a      	ldr	r2, [r3, #0]
    36c2:	4813      	ldr	r0, [pc, #76]	; (3710 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    36c4:	4613      	mov	r3, r2
    36c6:	00db      	lsls	r3, r3, #3
    36c8:	4413      	add	r3, r2
    36ca:	4403      	add	r3, r0
    36cc:	3306      	adds	r3, #6
    36ce:	781b      	ldrb	r3, [r3, #0]
    36d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    36d4:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    36d6:	9b03      	ldr	r3, [sp, #12]
    36d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    36dc:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    36de:	9b01      	ldr	r3, [sp, #4]
    36e0:	889b      	ldrh	r3, [r3, #4]
    36e2:	079b      	lsls	r3, r3, #30
    36e4:	9a03      	ldr	r2, [sp, #12]
    36e6:	4313      	orrs	r3, r2
    36e8:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    36ea:	4908      	ldr	r1, [pc, #32]	; (370c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    36ec:	9b01      	ldr	r3, [sp, #4]
    36ee:	681a      	ldr	r2, [r3, #0]
    36f0:	4807      	ldr	r0, [pc, #28]	; (3710 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    36f2:	4613      	mov	r3, r2
    36f4:	00db      	lsls	r3, r3, #3
    36f6:	4413      	add	r3, r2
    36f8:	4403      	add	r3, r0
    36fa:	3306      	adds	r3, #6
    36fc:	781b      	ldrb	r3, [r3, #0]
    36fe:	461a      	mov	r2, r3
    3700:	9b03      	ldr	r3, [sp, #12]
    3702:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    3706:	bf00      	nop
    3708:	b004      	add	sp, #16
    370a:	4770      	bx	lr
    370c:	40065000 	.word	0x40065000
    3710:	0000edd8 	.word	0x0000edd8

00003714 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3714:	b086      	sub	sp, #24
    3716:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3718:	9b01      	ldr	r3, [sp, #4]
    371a:	889b      	ldrh	r3, [r3, #4]
    371c:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    371e:	9b01      	ldr	r3, [sp, #4]
    3720:	681a      	ldr	r2, [r3, #0]
    3722:	4910      	ldr	r1, [pc, #64]	; (3764 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3724:	4613      	mov	r3, r2
    3726:	00db      	lsls	r3, r3, #3
    3728:	4413      	add	r3, r2
    372a:	440b      	add	r3, r1
    372c:	3306      	adds	r3, #6
    372e:	781b      	ldrb	r3, [r3, #0]
    3730:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    3732:	4b0d      	ldr	r3, [pc, #52]	; (3768 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3736:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3738:	2201      	movs	r2, #1
    373a:	9b04      	ldr	r3, [sp, #16]
    373c:	fa02 f303 	lsl.w	r3, r2, r3
    3740:	43db      	mvns	r3, r3
    3742:	9a03      	ldr	r2, [sp, #12]
    3744:	4013      	ands	r3, r2
    3746:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3748:	9a05      	ldr	r2, [sp, #20]
    374a:	9b04      	ldr	r3, [sp, #16]
    374c:	fa02 f303 	lsl.w	r3, r2, r3
    3750:	9a03      	ldr	r2, [sp, #12]
    3752:	4313      	orrs	r3, r2
    3754:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3756:	4a04      	ldr	r2, [pc, #16]	; (3768 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3758:	9b03      	ldr	r3, [sp, #12]
    375a:	6413      	str	r3, [r2, #64]	; 0x40
}
    375c:	bf00      	nop
    375e:	b006      	add	sp, #24
    3760:	4770      	bx	lr
    3762:	bf00      	nop
    3764:	0000edd8 	.word	0x0000edd8
    3768:	40048000 	.word	0x40048000

0000376c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    376c:	b084      	sub	sp, #16
    376e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3770:	4b0a      	ldr	r3, [pc, #40]	; (379c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3774:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3776:	9b01      	ldr	r3, [sp, #4]
    3778:	889b      	ldrh	r3, [r3, #4]
    377a:	2b01      	cmp	r3, #1
    377c:	d104      	bne.n	3788 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    377e:	9b03      	ldr	r3, [sp, #12]
    3780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3784:	9303      	str	r3, [sp, #12]
    3786:	e003      	b.n	3790 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3788:	9b03      	ldr	r3, [sp, #12]
    378a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    378e:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3790:	4a02      	ldr	r2, [pc, #8]	; (379c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3792:	9b03      	ldr	r3, [sp, #12]
    3794:	6693      	str	r3, [r2, #104]	; 0x68
}
    3796:	bf00      	nop
    3798:	b004      	add	sp, #16
    379a:	4770      	bx	lr
    379c:	40048000 	.word	0x40048000

000037a0 <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    37a0:	b082      	sub	sp, #8
    37a2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    37a4:	bf00      	nop
    37a6:	b002      	add	sp, #8
    37a8:	4770      	bx	lr

000037aa <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    37aa:	b082      	sub	sp, #8
    37ac:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    37ae:	bf00      	nop
    37b0:	b002      	add	sp, #8
    37b2:	4770      	bx	lr

000037b4 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    37b4:	b500      	push	{lr}
    37b6:	b083      	sub	sp, #12
    37b8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37ba:	9b01      	ldr	r3, [sp, #4]
    37bc:	2b00      	cmp	r3, #0
    37be:	d002      	beq.n	37c6 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    37c0:	9801      	ldr	r0, [sp, #4]
    37c2:	f000 f8d1 	bl	3968 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37c6:	bf00      	nop
    37c8:	b003      	add	sp, #12
    37ca:	f85d fb04 	ldr.w	pc, [sp], #4

000037ce <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    37ce:	b500      	push	{lr}
    37d0:	b083      	sub	sp, #12
    37d2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37d4:	9b01      	ldr	r3, [sp, #4]
    37d6:	2b00      	cmp	r3, #0
    37d8:	d002      	beq.n	37e0 <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    37da:	9801      	ldr	r0, [sp, #4]
    37dc:	f000 f950 	bl	3a80 <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    37e0:	bf00      	nop
    37e2:	b003      	add	sp, #12
    37e4:	f85d fb04 	ldr.w	pc, [sp], #4

000037e8 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    37e8:	b500      	push	{lr}
    37ea:	b083      	sub	sp, #12
    37ec:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    37ee:	9801      	ldr	r0, [sp, #4]
    37f0:	f000 f98e 	bl	3b10 <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    37f4:	bf00      	nop
    37f6:	b003      	add	sp, #12
    37f8:	f85d fb04 	ldr.w	pc, [sp], #4

000037fc <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    37fc:	b500      	push	{lr}
    37fe:	b083      	sub	sp, #12
    3800:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3802:	9b01      	ldr	r3, [sp, #4]
    3804:	2b00      	cmp	r3, #0
    3806:	d002      	beq.n	380e <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3808:	9801      	ldr	r0, [sp, #4]
    380a:	f000 f999 	bl	3b40 <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    380e:	bf00      	nop
    3810:	b003      	add	sp, #12
    3812:	f85d fb04 	ldr.w	pc, [sp], #4

00003816 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3816:	b500      	push	{lr}
    3818:	b083      	sub	sp, #12
    381a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    381c:	9b01      	ldr	r3, [sp, #4]
    381e:	2b00      	cmp	r3, #0
    3820:	d002      	beq.n	3828 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3822:	9801      	ldr	r0, [sp, #4]
    3824:	f000 f9b0 	bl	3b88 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3828:	bf00      	nop
    382a:	b003      	add	sp, #12
    382c:	f85d fb04 	ldr.w	pc, [sp], #4

00003830 <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3830:	b500      	push	{lr}
    3832:	b083      	sub	sp, #12
    3834:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3836:	9801      	ldr	r0, [sp, #4]
    3838:	f000 f9ba 	bl	3bb0 <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    383c:	bf00      	nop
    383e:	b003      	add	sp, #12
    3840:	f85d fb04 	ldr.w	pc, [sp], #4

00003844 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3844:	b500      	push	{lr}
    3846:	b083      	sub	sp, #12
    3848:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    384a:	9b01      	ldr	r3, [sp, #4]
    384c:	2b00      	cmp	r3, #0
    384e:	d002      	beq.n	3856 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3850:	9801      	ldr	r0, [sp, #4]
    3852:	f000 f9bd 	bl	3bd0 <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3856:	bf00      	nop
    3858:	b003      	add	sp, #12
    385a:	f85d fb04 	ldr.w	pc, [sp], #4

0000385e <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    385e:	b500      	push	{lr}
    3860:	b083      	sub	sp, #12
    3862:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3864:	9b01      	ldr	r3, [sp, #4]
    3866:	2b00      	cmp	r3, #0
    3868:	d002      	beq.n	3870 <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    386a:	9801      	ldr	r0, [sp, #4]
    386c:	f000 f9d4 	bl	3c18 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3870:	bf00      	nop
    3872:	b003      	add	sp, #12
    3874:	f85d fb04 	ldr.w	pc, [sp], #4

00003878 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3878:	b500      	push	{lr}
    387a:	b083      	sub	sp, #12
    387c:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    387e:	9801      	ldr	r0, [sp, #4]
    3880:	f000 f9de 	bl	3c40 <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3884:	bf00      	nop
    3886:	b003      	add	sp, #12
    3888:	f85d fb04 	ldr.w	pc, [sp], #4

0000388c <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    388c:	b500      	push	{lr}
    388e:	b089      	sub	sp, #36	; 0x24
    3890:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3892:	2300      	movs	r3, #0
    3894:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3898:	4b20      	ldr	r3, [pc, #128]	; (391c <SetInputSouceSytemClock+0x90>)
    389a:	695b      	ldr	r3, [r3, #20]
    389c:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    389e:	9b06      	ldr	r3, [sp, #24]
    38a0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    38a4:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    38a6:	9b01      	ldr	r3, [sp, #4]
    38a8:	061b      	lsls	r3, r3, #24
    38aa:	9a06      	ldr	r2, [sp, #24]
    38ac:	4313      	orrs	r3, r2
    38ae:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    38b0:	4a1a      	ldr	r2, [pc, #104]	; (391c <SetInputSouceSytemClock+0x90>)
    38b2:	9b06      	ldr	r3, [sp, #24]
    38b4:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    38b6:	aa02      	add	r2, sp, #8
    38b8:	a903      	add	r1, sp, #12
    38ba:	a804      	add	r0, sp, #16
    38bc:	f24c 3350 	movw	r3, #50000	; 0xc350
    38c0:	f7ff f9ac 	bl	2c1c <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    38c4:	4b15      	ldr	r3, [pc, #84]	; (391c <SetInputSouceSytemClock+0x90>)
    38c6:	691b      	ldr	r3, [r3, #16]
    38c8:	0e1b      	lsrs	r3, r3, #24
    38ca:	f003 030f 	and.w	r3, r3, #15
    38ce:	9a01      	ldr	r2, [sp, #4]
    38d0:	429a      	cmp	r2, r3
    38d2:	bf0c      	ite	eq
    38d4:	2301      	moveq	r3, #1
    38d6:	2300      	movne	r3, #0
    38d8:	b2db      	uxtb	r3, r3
    38da:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    38dc:	9a02      	ldr	r2, [sp, #8]
    38de:	a903      	add	r1, sp, #12
    38e0:	ab04      	add	r3, sp, #16
    38e2:	4618      	mov	r0, r3
    38e4:	f7ff f9b4 	bl	2c50 <Clock_Ip_TimeoutExpired>
    38e8:	4603      	mov	r3, r0
    38ea:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    38ee:	9b05      	ldr	r3, [sp, #20]
    38f0:	2b00      	cmp	r3, #0
    38f2:	d106      	bne.n	3902 <SetInputSouceSytemClock+0x76>
    38f4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    38f8:	f083 0301 	eor.w	r3, r3, #1
    38fc:	b2db      	uxtb	r3, r3
    38fe:	2b00      	cmp	r3, #0
    3900:	d1e0      	bne.n	38c4 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3902:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3906:	2b00      	cmp	r3, #0
    3908:	d003      	beq.n	3912 <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    390a:	2105      	movs	r1, #5
    390c:	2001      	movs	r0, #1
    390e:	f7ff f975 	bl	2bfc <Clock_Ip_ReportClockErrors>
    }
}
    3912:	bf00      	nop
    3914:	b009      	add	sp, #36	; 0x24
    3916:	f85d fb04 	ldr.w	pc, [sp], #4
    391a:	bf00      	nop
    391c:	40064000 	.word	0x40064000

00003920 <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3920:	b500      	push	{lr}
    3922:	b083      	sub	sp, #12
    3924:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3926:	9b01      	ldr	r3, [sp, #4]
    3928:	2b00      	cmp	r3, #0
    392a:	d002      	beq.n	3932 <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    392c:	9801      	ldr	r0, [sp, #4]
    392e:	f000 f997 	bl	3c60 <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3932:	bf00      	nop
    3934:	b003      	add	sp, #12
    3936:	f85d fb04 	ldr.w	pc, [sp], #4

0000393a <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    393a:	b500      	push	{lr}
    393c:	b083      	sub	sp, #12
    393e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3940:	9b01      	ldr	r3, [sp, #4]
    3942:	2b00      	cmp	r3, #0
    3944:	d002      	beq.n	394c <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3946:	9801      	ldr	r0, [sp, #4]
    3948:	f000 fa7e 	bl	3e48 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    394c:	bf00      	nop
    394e:	b003      	add	sp, #12
    3950:	f85d fb04 	ldr.w	pc, [sp], #4

00003954 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3954:	b500      	push	{lr}
    3956:	b083      	sub	sp, #12
    3958:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    395a:	9801      	ldr	r0, [sp, #4]
    395c:	f000 fab8 	bl	3ed0 <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3960:	bf00      	nop
    3962:	b003      	add	sp, #12
    3964:	f85d fb04 	ldr.w	pc, [sp], #4

00003968 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3968:	b500      	push	{lr}
    396a:	b08b      	sub	sp, #44	; 0x2c
    396c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    396e:	2300      	movs	r3, #0
    3970:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3974:	9b01      	ldr	r3, [sp, #4]
    3976:	2b00      	cmp	r3, #0
    3978:	d10b      	bne.n	3992 <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    397a:	2305      	movs	r3, #5
    397c:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    397e:	2301      	movs	r3, #1
    3980:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3984:	2301      	movs	r3, #1
    3986:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    398a:	2301      	movs	r3, #1
    398c:	f88d 3010 	strb.w	r3, [sp, #16]
    3990:	e00e      	b.n	39b0 <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3992:	9b01      	ldr	r3, [sp, #4]
    3994:	681b      	ldr	r3, [r3, #0]
    3996:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3998:	9b01      	ldr	r3, [sp, #4]
    399a:	79db      	ldrb	r3, [r3, #7]
    399c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    39a0:	9b01      	ldr	r3, [sp, #4]
    39a2:	889b      	ldrh	r3, [r3, #4]
    39a4:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    39a8:	9b01      	ldr	r3, [sp, #4]
    39aa:	7a1b      	ldrb	r3, [r3, #8]
    39ac:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    39b0:	4b32      	ldr	r3, [pc, #200]	; (3a7c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39b6:	4a31      	ldr	r2, [pc, #196]	; (3a7c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    39bc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    39c0:	4b2e      	ldr	r3, [pc, #184]	; (3a7c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39c6:	4a2d      	ldr	r2, [pc, #180]	; (3a7c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39c8:	f023 0301 	bic.w	r3, r3, #1
    39cc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    39d0:	4b2a      	ldr	r3, [pc, #168]	; (3a7c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39d6:	4a29      	ldr	r2, [pc, #164]	; (3a7c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39d8:	f023 0304 	bic.w	r3, r3, #4
    39dc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    39e0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    39e4:	2b01      	cmp	r3, #1
    39e6:	d144      	bne.n	3a72 <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    39e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    39ec:	4a23      	ldr	r2, [pc, #140]	; (3a7c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39ee:	f003 0301 	and.w	r3, r3, #1
    39f2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    39f6:	4b21      	ldr	r3, [pc, #132]	; (3a7c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    39fc:	4a1f      	ldr	r2, [pc, #124]	; (3a7c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    39fe:	f043 0301 	orr.w	r3, r3, #1
    3a02:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    3a06:	4b1d      	ldr	r3, [pc, #116]	; (3a7c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3a08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3a0c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3a10:	009b      	lsls	r3, r3, #2
    3a12:	f003 0304 	and.w	r3, r3, #4
    3a16:	4919      	ldr	r1, [pc, #100]	; (3a7c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3a18:	4313      	orrs	r3, r2
    3a1a:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3a1e:	aa05      	add	r2, sp, #20
    3a20:	a906      	add	r1, sp, #24
    3a22:	a807      	add	r0, sp, #28
    3a24:	f24c 3350 	movw	r3, #50000	; 0xc350
    3a28:	f7ff f8f8 	bl	2c1c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3a2c:	4b13      	ldr	r3, [pc, #76]	; (3a7c <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3a2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a32:	0e1b      	lsrs	r3, r3, #24
    3a34:	f003 0301 	and.w	r3, r3, #1
    3a38:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3a3a:	9a05      	ldr	r2, [sp, #20]
    3a3c:	a906      	add	r1, sp, #24
    3a3e:	ab07      	add	r3, sp, #28
    3a40:	4618      	mov	r0, r3
    3a42:	f7ff f905 	bl	2c50 <Clock_Ip_TimeoutExpired>
    3a46:	4603      	mov	r3, r0
    3a48:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3a4c:	9b08      	ldr	r3, [sp, #32]
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d106      	bne.n	3a60 <Clock_Ip_SetSirc_TrustedCall+0xf8>
    3a52:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a56:	f083 0301 	eor.w	r3, r3, #1
    3a5a:	b2db      	uxtb	r3, r3
    3a5c:	2b00      	cmp	r3, #0
    3a5e:	d1e5      	bne.n	3a2c <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    3a60:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3a64:	2b00      	cmp	r3, #0
    3a66:	d004      	beq.n	3a72 <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    3a68:	9b02      	ldr	r3, [sp, #8]
    3a6a:	4619      	mov	r1, r3
    3a6c:	2001      	movs	r0, #1
    3a6e:	f7ff f8c5 	bl	2bfc <Clock_Ip_ReportClockErrors>
        }
    }
}
    3a72:	bf00      	nop
    3a74:	b00b      	add	sp, #44	; 0x2c
    3a76:	f85d fb04 	ldr.w	pc, [sp], #4
    3a7a:	bf00      	nop
    3a7c:	40064000 	.word	0x40064000

00003a80 <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3a80:	b500      	push	{lr}
    3a82:	b089      	sub	sp, #36	; 0x24
    3a84:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3a86:	2300      	movs	r3, #0
    3a88:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    3a8c:	4b1f      	ldr	r3, [pc, #124]	; (3b0c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3a92:	4a1e      	ldr	r2, [pc, #120]	; (3b0c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a94:	f043 0301 	orr.w	r3, r3, #1
    3a98:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    3a9c:	4b1b      	ldr	r3, [pc, #108]	; (3b0c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3a9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3aa2:	4a1a      	ldr	r2, [pc, #104]	; (3b0c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3aa4:	f043 0304 	orr.w	r3, r3, #4
    3aa8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3aac:	aa03      	add	r2, sp, #12
    3aae:	a904      	add	r1, sp, #16
    3ab0:	a805      	add	r0, sp, #20
    3ab2:	f24c 3350 	movw	r3, #50000	; 0xc350
    3ab6:	f7ff f8b1 	bl	2c1c <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    3aba:	4b14      	ldr	r3, [pc, #80]	; (3b0c <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    3abc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3ac0:	0e1b      	lsrs	r3, r3, #24
    3ac2:	f003 0301 	and.w	r3, r3, #1
    3ac6:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3ac8:	9a03      	ldr	r2, [sp, #12]
    3aca:	a904      	add	r1, sp, #16
    3acc:	ab05      	add	r3, sp, #20
    3ace:	4618      	mov	r0, r3
    3ad0:	f7ff f8be 	bl	2c50 <Clock_Ip_TimeoutExpired>
    3ad4:	4603      	mov	r3, r0
    3ad6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3ada:	9b06      	ldr	r3, [sp, #24]
    3adc:	2b00      	cmp	r3, #0
    3ade:	d106      	bne.n	3aee <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    3ae0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ae4:	f083 0301 	eor.w	r3, r3, #1
    3ae8:	b2db      	uxtb	r3, r3
    3aea:	2b00      	cmp	r3, #0
    3aec:	d1e5      	bne.n	3aba <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    3aee:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3af2:	2b00      	cmp	r3, #0
    3af4:	d005      	beq.n	3b02 <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3af6:	9b01      	ldr	r3, [sp, #4]
    3af8:	681b      	ldr	r3, [r3, #0]
    3afa:	4619      	mov	r1, r3
    3afc:	2001      	movs	r0, #1
    3afe:	f7ff f87d 	bl	2bfc <Clock_Ip_ReportClockErrors>
    }
}
    3b02:	bf00      	nop
    3b04:	b009      	add	sp, #36	; 0x24
    3b06:	f85d fb04 	ldr.w	pc, [sp], #4
    3b0a:	bf00      	nop
    3b0c:	40064000 	.word	0x40064000

00003b10 <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    3b10:	b082      	sub	sp, #8
    3b12:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    3b14:	4b09      	ldr	r3, [pc, #36]	; (3b3c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3b16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b1a:	4a08      	ldr	r2, [pc, #32]	; (3b3c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3b1c:	f023 0301 	bic.w	r3, r3, #1
    3b20:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b24:	4b05      	ldr	r3, [pc, #20]	; (3b3c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3b26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b2a:	4a04      	ldr	r2, [pc, #16]	; (3b3c <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    3b2c:	f023 0304 	bic.w	r3, r3, #4
    3b30:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b34:	bf00      	nop
    3b36:	b002      	add	sp, #8
    3b38:	4770      	bx	lr
    3b3a:	bf00      	nop
    3b3c:	40064000 	.word	0x40064000

00003b40 <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b40:	b082      	sub	sp, #8
    3b42:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3b44:	4b0f      	ldr	r3, [pc, #60]	; (3b84 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b4a:	4a0e      	ldr	r2, [pc, #56]	; (3b84 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3b50:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3b54:	4b0b      	ldr	r3, [pc, #44]	; (3b84 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b5a:	4a0a      	ldr	r2, [pc, #40]	; (3b84 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b5c:	f023 0304 	bic.w	r3, r3, #4
    3b60:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    3b64:	4b07      	ldr	r3, [pc, #28]	; (3b84 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b66:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3b6a:	9b01      	ldr	r3, [sp, #4]
    3b6c:	7a1b      	ldrb	r3, [r3, #8]
    3b6e:	009b      	lsls	r3, r3, #2
    3b70:	f003 0304 	and.w	r3, r3, #4
    3b74:	4903      	ldr	r1, [pc, #12]	; (3b84 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    3b76:	4313      	orrs	r3, r2
    3b78:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3b7c:	bf00      	nop
    3b7e:	b002      	add	sp, #8
    3b80:	4770      	bx	lr
    3b82:	bf00      	nop
    3b84:	40064000 	.word	0x40064000

00003b88 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3b88:	b082      	sub	sp, #8
    3b8a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3b8c:	9b01      	ldr	r3, [sp, #4]
    3b8e:	889b      	ldrh	r3, [r3, #4]
    3b90:	2b01      	cmp	r3, #1
    3b92:	d107      	bne.n	3ba4 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    3b94:	4b05      	ldr	r3, [pc, #20]	; (3bac <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3b9a:	4a04      	ldr	r2, [pc, #16]	; (3bac <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    3b9c:	f043 0304 	orr.w	r3, r3, #4
    3ba0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3ba4:	bf00      	nop
    3ba6:	b002      	add	sp, #8
    3ba8:	4770      	bx	lr
    3baa:	bf00      	nop
    3bac:	40064000 	.word	0x40064000

00003bb0 <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    3bb0:	b082      	sub	sp, #8
    3bb2:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3bb4:	4b05      	ldr	r3, [pc, #20]	; (3bcc <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3bb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bba:	4a04      	ldr	r2, [pc, #16]	; (3bcc <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    3bbc:	f023 0304 	bic.w	r3, r3, #4
    3bc0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3bc4:	bf00      	nop
    3bc6:	b002      	add	sp, #8
    3bc8:	4770      	bx	lr
    3bca:	bf00      	nop
    3bcc:	40064000 	.word	0x40064000

00003bd0 <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3bd0:	b082      	sub	sp, #8
    3bd2:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3bd4:	4b0f      	ldr	r3, [pc, #60]	; (3c14 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bda:	4a0e      	ldr	r2, [pc, #56]	; (3c14 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3be0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3be4:	4b0b      	ldr	r3, [pc, #44]	; (3c14 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3be6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3bea:	4a0a      	ldr	r2, [pc, #40]	; (3c14 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bec:	f023 0302 	bic.w	r3, r3, #2
    3bf0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    3bf4:	4b07      	ldr	r3, [pc, #28]	; (3c14 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3bf6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3bfa:	9b01      	ldr	r3, [sp, #4]
    3bfc:	7a5b      	ldrb	r3, [r3, #9]
    3bfe:	005b      	lsls	r3, r3, #1
    3c00:	f003 0302 	and.w	r3, r3, #2
    3c04:	4903      	ldr	r1, [pc, #12]	; (3c14 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    3c06:	4313      	orrs	r3, r2
    3c08:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    3c0c:	bf00      	nop
    3c0e:	b002      	add	sp, #8
    3c10:	4770      	bx	lr
    3c12:	bf00      	nop
    3c14:	40064000 	.word	0x40064000

00003c18 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c18:	b082      	sub	sp, #8
    3c1a:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    3c1c:	9b01      	ldr	r3, [sp, #4]
    3c1e:	889b      	ldrh	r3, [r3, #4]
    3c20:	2b01      	cmp	r3, #1
    3c22:	d107      	bne.n	3c34 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    3c24:	4b05      	ldr	r3, [pc, #20]	; (3c3c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3c26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c2a:	4a04      	ldr	r2, [pc, #16]	; (3c3c <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    3c2c:	f043 0302 	orr.w	r3, r3, #2
    3c30:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    3c34:	bf00      	nop
    3c36:	b002      	add	sp, #8
    3c38:	4770      	bx	lr
    3c3a:	bf00      	nop
    3c3c:	40064000 	.word	0x40064000

00003c40 <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    3c40:	b082      	sub	sp, #8
    3c42:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    3c44:	4b05      	ldr	r3, [pc, #20]	; (3c5c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3c46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3c4a:	4a04      	ldr	r2, [pc, #16]	; (3c5c <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    3c4c:	f023 0302 	bic.w	r3, r3, #2
    3c50:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3c54:	bf00      	nop
    3c56:	b002      	add	sp, #8
    3c58:	4770      	bx	lr
    3c5a:	bf00      	nop
    3c5c:	40064000 	.word	0x40064000

00003c60 <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3c60:	b500      	push	{lr}
    3c62:	b08b      	sub	sp, #44	; 0x2c
    3c64:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3c66:	9b01      	ldr	r3, [sp, #4]
    3c68:	681a      	ldr	r2, [r3, #0]
    3c6a:	4975      	ldr	r1, [pc, #468]	; (3e40 <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    3c6c:	4613      	mov	r3, r2
    3c6e:	00db      	lsls	r3, r3, #3
    3c70:	4413      	add	r3, r2
    3c72:	440b      	add	r3, r1
    3c74:	781b      	ldrb	r3, [r3, #0]
    3c76:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    3c78:	2300      	movs	r3, #0
    3c7a:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    3c7e:	2300      	movs	r3, #0
    3c80:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    3c84:	4b6f      	ldr	r3, [pc, #444]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c8a:	4a6e      	ldr	r2, [pc, #440]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3c90:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    3c94:	4b6b      	ldr	r3, [pc, #428]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3c96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    3c9e:	2b00      	cmp	r3, #0
    3ca0:	d07d      	beq.n	3d9e <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3ca2:	9b01      	ldr	r3, [sp, #4]
    3ca4:	79db      	ldrb	r3, [r3, #7]
    3ca6:	461a      	mov	r2, r3
    3ca8:	4b66      	ldr	r3, [pc, #408]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3caa:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    3cae:	f003 0303 	and.w	r3, r3, #3
    3cb2:	429a      	cmp	r2, r3
    3cb4:	d10b      	bne.n	3cce <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    3cb6:	9b01      	ldr	r3, [sp, #4]
    3cb8:	799b      	ldrb	r3, [r3, #6]
    3cba:	461a      	mov	r2, r3
    3cbc:	4b61      	ldr	r3, [pc, #388]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cc2:	08db      	lsrs	r3, r3, #3
    3cc4:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    3cc8:	429a      	cmp	r2, r3
    3cca:	f000 80b4 	beq.w	3e36 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    3cce:	4b5d      	ldr	r3, [pc, #372]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3cd4:	f003 0301 	and.w	r3, r3, #1
    3cd8:	2b00      	cmp	r3, #0
    3cda:	d105      	bne.n	3ce8 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    3cdc:	2301      	movs	r3, #1
    3cde:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    3ce2:	2000      	movs	r0, #0
    3ce4:	f7ff fd66 	bl	37b4 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    3ce8:	2002      	movs	r0, #2
    3cea:	f7ff fdcf 	bl	388c <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3cee:	4b55      	ldr	r3, [pc, #340]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cf0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3cf4:	4a53      	ldr	r2, [pc, #332]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3cf6:	f023 0301 	bic.w	r3, r3, #1
    3cfa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    3cfe:	9b01      	ldr	r3, [sp, #4]
    3d00:	889b      	ldrh	r3, [r3, #4]
    3d02:	2b01      	cmp	r3, #1
    3d04:	f040 8097 	bne.w	3e36 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3d08:	9b01      	ldr	r3, [sp, #4]
    3d0a:	79db      	ldrb	r3, [r3, #7]
    3d0c:	4a4d      	ldr	r2, [pc, #308]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d0e:	f003 0303 	and.w	r3, r3, #3
    3d12:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3d16:	4b4b      	ldr	r3, [pc, #300]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d18:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3d1c:	9b01      	ldr	r3, [sp, #4]
    3d1e:	799b      	ldrb	r3, [r3, #6]
    3d20:	00db      	lsls	r3, r3, #3
    3d22:	f003 0308 	and.w	r3, r3, #8
    3d26:	4313      	orrs	r3, r2
    3d28:	4a46      	ldr	r2, [pc, #280]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d2a:	f043 0301 	orr.w	r3, r3, #1
    3d2e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3d32:	aa03      	add	r2, sp, #12
    3d34:	a904      	add	r1, sp, #16
    3d36:	a805      	add	r0, sp, #20
    3d38:	f24c 3350 	movw	r3, #50000	; 0xc350
    3d3c:	f7fe ff6e 	bl	2c1c <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3d40:	4b40      	ldr	r3, [pc, #256]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3d42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3d46:	0e1b      	lsrs	r3, r3, #24
    3d48:	f003 0301 	and.w	r3, r3, #1
    3d4c:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3d4e:	9a03      	ldr	r2, [sp, #12]
    3d50:	a904      	add	r1, sp, #16
    3d52:	ab05      	add	r3, sp, #20
    3d54:	4618      	mov	r0, r3
    3d56:	f7fe ff7b 	bl	2c50 <Clock_Ip_TimeoutExpired>
    3d5a:	4603      	mov	r3, r0
    3d5c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3d60:	9b06      	ldr	r3, [sp, #24]
    3d62:	2b00      	cmp	r3, #0
    3d64:	d106      	bne.n	3d74 <Clock_Ip_SetFirc_TrustedCall+0x114>
    3d66:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d6a:	f083 0301 	eor.w	r3, r3, #1
    3d6e:	b2db      	uxtb	r3, r3
    3d70:	2b00      	cmp	r3, #0
    3d72:	d1e5      	bne.n	3d40 <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    3d74:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3d78:	2b00      	cmp	r3, #0
    3d7a:	d005      	beq.n	3d88 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3d7c:	9b01      	ldr	r3, [sp, #4]
    3d7e:	681b      	ldr	r3, [r3, #0]
    3d80:	4619      	mov	r1, r3
    3d82:	2001      	movs	r0, #1
    3d84:	f7fe ff3a 	bl	2bfc <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    3d88:	2003      	movs	r0, #3
    3d8a:	f7ff fd7f 	bl	388c <SetInputSouceSytemClock>

                if (SircWasDisabled)
    3d8e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    3d92:	2b00      	cmp	r3, #0
    3d94:	d04f      	beq.n	3e36 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    3d96:	2002      	movs	r0, #2
    3d98:	f7ff fd26 	bl	37e8 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    3d9c:	e04b      	b.n	3e36 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    3d9e:	4b29      	ldr	r3, [pc, #164]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3da0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3da4:	4a27      	ldr	r2, [pc, #156]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3da6:	f023 0301 	bic.w	r3, r3, #1
    3daa:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    3dae:	9b01      	ldr	r3, [sp, #4]
    3db0:	889b      	ldrh	r3, [r3, #4]
    3db2:	2b01      	cmp	r3, #1
    3db4:	d13f      	bne.n	3e36 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    3db6:	9b01      	ldr	r3, [sp, #4]
    3db8:	79db      	ldrb	r3, [r3, #7]
    3dba:	4a22      	ldr	r2, [pc, #136]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3dbc:	f003 0303 	and.w	r3, r3, #3
    3dc0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    3dc4:	4b1f      	ldr	r3, [pc, #124]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3dc6:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    3dca:	9b01      	ldr	r3, [sp, #4]
    3dcc:	799b      	ldrb	r3, [r3, #6]
    3dce:	00db      	lsls	r3, r3, #3
    3dd0:	f003 0308 	and.w	r3, r3, #8
    3dd4:	4313      	orrs	r3, r2
    3dd6:	4a1b      	ldr	r2, [pc, #108]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3dd8:	f043 0301 	orr.w	r3, r3, #1
    3ddc:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3de0:	aa03      	add	r2, sp, #12
    3de2:	a904      	add	r1, sp, #16
    3de4:	a805      	add	r0, sp, #20
    3de6:	f24c 3350 	movw	r3, #50000	; 0xc350
    3dea:	f7fe ff17 	bl	2c1c <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3dee:	4b15      	ldr	r3, [pc, #84]	; (3e44 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    3df0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3df4:	0e1b      	lsrs	r3, r3, #24
    3df6:	f003 0301 	and.w	r3, r3, #1
    3dfa:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3dfc:	9a03      	ldr	r2, [sp, #12]
    3dfe:	a904      	add	r1, sp, #16
    3e00:	ab05      	add	r3, sp, #20
    3e02:	4618      	mov	r0, r3
    3e04:	f7fe ff24 	bl	2c50 <Clock_Ip_TimeoutExpired>
    3e08:	4603      	mov	r3, r0
    3e0a:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3e0e:	9b06      	ldr	r3, [sp, #24]
    3e10:	2b00      	cmp	r3, #0
    3e12:	d106      	bne.n	3e22 <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    3e14:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e18:	f083 0301 	eor.w	r3, r3, #1
    3e1c:	b2db      	uxtb	r3, r3
    3e1e:	2b00      	cmp	r3, #0
    3e20:	d1e5      	bne.n	3dee <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    3e22:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3e26:	2b00      	cmp	r3, #0
    3e28:	d005      	beq.n	3e36 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3e2a:	9b01      	ldr	r3, [sp, #4]
    3e2c:	681b      	ldr	r3, [r3, #0]
    3e2e:	4619      	mov	r1, r3
    3e30:	2001      	movs	r0, #1
    3e32:	f7fe fee3 	bl	2bfc <Clock_Ip_ReportClockErrors>
}
    3e36:	bf00      	nop
    3e38:	b00b      	add	sp, #44	; 0x2c
    3e3a:	f85d fb04 	ldr.w	pc, [sp], #4
    3e3e:	bf00      	nop
    3e40:	0000edd8 	.word	0x0000edd8
    3e44:	40064000 	.word	0x40064000

00003e48 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3e48:	b500      	push	{lr}
    3e4a:	b089      	sub	sp, #36	; 0x24
    3e4c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3e4e:	2300      	movs	r3, #0
    3e50:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    3e54:	9b01      	ldr	r3, [sp, #4]
    3e56:	889b      	ldrh	r3, [r3, #4]
    3e58:	2b01      	cmp	r3, #1
    3e5a:	d132      	bne.n	3ec2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    3e5c:	4b1b      	ldr	r3, [pc, #108]	; (3ecc <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e62:	4a1a      	ldr	r2, [pc, #104]	; (3ecc <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e64:	f043 0301 	orr.w	r3, r3, #1
    3e68:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3e6c:	aa03      	add	r2, sp, #12
    3e6e:	a904      	add	r1, sp, #16
    3e70:	a805      	add	r0, sp, #20
    3e72:	f24c 3350 	movw	r3, #50000	; 0xc350
    3e76:	f7fe fed1 	bl	2c1c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    3e7a:	4b14      	ldr	r3, [pc, #80]	; (3ecc <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    3e7c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3e80:	0e1b      	lsrs	r3, r3, #24
    3e82:	f003 0301 	and.w	r3, r3, #1
    3e86:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3e88:	9a03      	ldr	r2, [sp, #12]
    3e8a:	a904      	add	r1, sp, #16
    3e8c:	ab05      	add	r3, sp, #20
    3e8e:	4618      	mov	r0, r3
    3e90:	f7fe fede 	bl	2c50 <Clock_Ip_TimeoutExpired>
    3e94:	4603      	mov	r3, r0
    3e96:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    3e9a:	9b06      	ldr	r3, [sp, #24]
    3e9c:	2b00      	cmp	r3, #0
    3e9e:	d106      	bne.n	3eae <Clock_Ip_EnableFirc_TrustedCall+0x66>
    3ea0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3ea4:	f083 0301 	eor.w	r3, r3, #1
    3ea8:	b2db      	uxtb	r3, r3
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d1e5      	bne.n	3e7a <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    3eae:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3eb2:	2b00      	cmp	r3, #0
    3eb4:	d005      	beq.n	3ec2 <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    3eb6:	9b01      	ldr	r3, [sp, #4]
    3eb8:	681b      	ldr	r3, [r3, #0]
    3eba:	4619      	mov	r1, r3
    3ebc:	2001      	movs	r0, #1
    3ebe:	f7fe fe9d 	bl	2bfc <Clock_Ip_ReportClockErrors>
        }
    }
}
    3ec2:	bf00      	nop
    3ec4:	b009      	add	sp, #36	; 0x24
    3ec6:	f85d fb04 	ldr.w	pc, [sp], #4
    3eca:	bf00      	nop
    3ecc:	40064000 	.word	0x40064000

00003ed0 <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    3ed0:	b082      	sub	sp, #8
    3ed2:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    3ed4:	4b05      	ldr	r3, [pc, #20]	; (3eec <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3ed6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    3eda:	4a04      	ldr	r2, [pc, #16]	; (3eec <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    3edc:	f023 0301 	bic.w	r3, r3, #1
    3ee0:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    3ee4:	bf00      	nop
    3ee6:	b002      	add	sp, #8
    3ee8:	4770      	bx	lr
    3eea:	bf00      	nop
    3eec:	40064000 	.word	0x40064000

00003ef0 <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    3ef0:	b082      	sub	sp, #8
    3ef2:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3ef4:	bf00      	nop
    3ef6:	b002      	add	sp, #8
    3ef8:	4770      	bx	lr

00003efa <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    3efa:	b082      	sub	sp, #8
    3efc:	9001      	str	r0, [sp, #4]
    3efe:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    3f00:	bf00      	nop
    3f02:	b002      	add	sp, #8
    3f04:	4770      	bx	lr

00003f06 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    3f06:	b082      	sub	sp, #8
    3f08:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3f0a:	bf00      	nop
    3f0c:	b002      	add	sp, #8
    3f0e:	4770      	bx	lr

00003f10 <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    3f10:	b082      	sub	sp, #8
    3f12:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3f14:	bf00      	nop
    3f16:	b002      	add	sp, #8
    3f18:	4770      	bx	lr

00003f1a <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    3f1a:	b082      	sub	sp, #8
    3f1c:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    3f1e:	2302      	movs	r3, #2
}
    3f20:	4618      	mov	r0, r3
    3f22:	b002      	add	sp, #8
    3f24:	4770      	bx	lr

00003f26 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    3f26:	b082      	sub	sp, #8
    3f28:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    3f2a:	bf00      	nop
    3f2c:	b002      	add	sp, #8
    3f2e:	4770      	bx	lr

00003f30 <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    3f30:	b500      	push	{lr}
    3f32:	b083      	sub	sp, #12
    3f34:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f36:	9b01      	ldr	r3, [sp, #4]
    3f38:	2b00      	cmp	r3, #0
    3f3a:	d002      	beq.n	3f42 <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    3f3c:	9801      	ldr	r0, [sp, #4]
    3f3e:	f000 f870 	bl	4022 <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f42:	bf00      	nop
    3f44:	b003      	add	sp, #12
    3f46:	f85d fb04 	ldr.w	pc, [sp], #4

00003f4a <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    3f4a:	b500      	push	{lr}
    3f4c:	b083      	sub	sp, #12
    3f4e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f50:	9b01      	ldr	r3, [sp, #4]
    3f52:	2b00      	cmp	r3, #0
    3f54:	d002      	beq.n	3f5c <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    3f56:	9801      	ldr	r0, [sp, #4]
    3f58:	f000 f89a 	bl	4090 <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f5c:	bf00      	nop
    3f5e:	b003      	add	sp, #12
    3f60:	f85d fb04 	ldr.w	pc, [sp], #4

00003f64 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    3f64:	b500      	push	{lr}
    3f66:	b089      	sub	sp, #36	; 0x24
    3f68:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    3f6a:	2301      	movs	r3, #1
    3f6c:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    3f6e:	2300      	movs	r3, #0
    3f70:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    3f74:	4b1e      	ldr	r3, [pc, #120]	; (3ff0 <Clock_Ip_CompleteSpll+0x8c>)
    3f76:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f7a:	f003 0301 	and.w	r3, r3, #1
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d02f      	beq.n	3fe2 <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3f82:	aa02      	add	r2, sp, #8
    3f84:	a903      	add	r1, sp, #12
    3f86:	a804      	add	r0, sp, #16
    3f88:	f24c 3350 	movw	r3, #50000	; 0xc350
    3f8c:	f7fe fe46 	bl	2c1c <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    3f90:	4b17      	ldr	r3, [pc, #92]	; (3ff0 <Clock_Ip_CompleteSpll+0x8c>)
    3f92:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    3f96:	0e1b      	lsrs	r3, r3, #24
    3f98:	f003 0301 	and.w	r3, r3, #1
    3f9c:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3f9e:	9a02      	ldr	r2, [sp, #8]
    3fa0:	a903      	add	r1, sp, #12
    3fa2:	ab04      	add	r3, sp, #16
    3fa4:	4618      	mov	r0, r3
    3fa6:	f7fe fe53 	bl	2c50 <Clock_Ip_TimeoutExpired>
    3faa:	4603      	mov	r3, r0
    3fac:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    3fb0:	9b05      	ldr	r3, [sp, #20]
    3fb2:	2b00      	cmp	r3, #0
    3fb4:	d106      	bne.n	3fc4 <Clock_Ip_CompleteSpll+0x60>
    3fb6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3fba:	f083 0301 	eor.w	r3, r3, #1
    3fbe:	b2db      	uxtb	r3, r3
    3fc0:	2b00      	cmp	r3, #0
    3fc2:	d1e5      	bne.n	3f90 <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    3fc4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3fc8:	f083 0301 	eor.w	r3, r3, #1
    3fcc:	b2db      	uxtb	r3, r3
    3fce:	2b00      	cmp	r3, #0
    3fd0:	d002      	beq.n	3fd8 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    3fd2:	2302      	movs	r3, #2
    3fd4:	9307      	str	r3, [sp, #28]
    3fd6:	e006      	b.n	3fe6 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    3fd8:	9901      	ldr	r1, [sp, #4]
    3fda:	2001      	movs	r0, #1
    3fdc:	f7fe fe0e 	bl	2bfc <Clock_Ip_ReportClockErrors>
    3fe0:	e001      	b.n	3fe6 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    3fe2:	2300      	movs	r3, #0
    3fe4:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    3fe6:	9b07      	ldr	r3, [sp, #28]
}
    3fe8:	4618      	mov	r0, r3
    3fea:	b009      	add	sp, #36	; 0x24
    3fec:	f85d fb04 	ldr.w	pc, [sp], #4
    3ff0:	40064000 	.word	0x40064000

00003ff4 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    3ff4:	b500      	push	{lr}
    3ff6:	b083      	sub	sp, #12
    3ff8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    3ffa:	9801      	ldr	r0, [sp, #4]
    3ffc:	f000 f886 	bl	410c <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    4000:	bf00      	nop
    4002:	b003      	add	sp, #12
    4004:	f85d fb04 	ldr.w	pc, [sp], #4

00004008 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4008:	b500      	push	{lr}
    400a:	b083      	sub	sp, #12
    400c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    400e:	9b01      	ldr	r3, [sp, #4]
    4010:	2b00      	cmp	r3, #0
    4012:	d002      	beq.n	401a <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4014:	9801      	ldr	r0, [sp, #4]
    4016:	f000 f891 	bl	413c <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    401a:	bf00      	nop
    401c:	b003      	add	sp, #12
    401e:	f85d fb04 	ldr.w	pc, [sp], #4

00004022 <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4022:	b082      	sub	sp, #8
    4024:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4026:	4b19      	ldr	r3, [pc, #100]	; (408c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4028:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    402c:	4a17      	ldr	r2, [pc, #92]	; (408c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    402e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4032:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4036:	4b15      	ldr	r3, [pc, #84]	; (408c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4038:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    403c:	4a13      	ldr	r2, [pc, #76]	; (408c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    403e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    4042:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4046:	4b11      	ldr	r3, [pc, #68]	; (408c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4048:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    404c:	4a0f      	ldr	r2, [pc, #60]	; (408c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    404e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    4052:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4056:	4b0d      	ldr	r3, [pc, #52]	; (408c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4058:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    405c:	4a0b      	ldr	r2, [pc, #44]	; (408c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    405e:	f023 0301 	bic.w	r3, r3, #1
    4062:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4066:	4b09      	ldr	r3, [pc, #36]	; (408c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4068:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    406c:	4a07      	ldr	r2, [pc, #28]	; (408c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    406e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    4072:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4076:	4b05      	ldr	r3, [pc, #20]	; (408c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4078:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    407c:	4a03      	ldr	r2, [pc, #12]	; (408c <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    407e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    4082:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4086:	bf00      	nop
    4088:	b002      	add	sp, #8
    408a:	4770      	bx	lr
    408c:	40064000 	.word	0x40064000

00004090 <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4090:	b082      	sub	sp, #8
    4092:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4094:	9b01      	ldr	r3, [sp, #4]
    4096:	889b      	ldrh	r3, [r3, #4]
    4098:	2b01      	cmp	r3, #1
    409a:	d12f      	bne.n	40fc <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    409c:	4b1a      	ldr	r3, [pc, #104]	; (4108 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    409e:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    40a2:	9b01      	ldr	r3, [sp, #4]
    40a4:	7b5b      	ldrb	r3, [r3, #13]
    40a6:	3b01      	subs	r3, #1
    40a8:	021b      	lsls	r3, r3, #8
    40aa:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    40ae:	9b01      	ldr	r3, [sp, #4]
    40b0:	7d1b      	ldrb	r3, [r3, #20]
    40b2:	3b10      	subs	r3, #16
    40b4:	041b      	lsls	r3, r3, #16
    40b6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    40ba:	430b      	orrs	r3, r1
    40bc:	4912      	ldr	r1, [pc, #72]	; (4108 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40be:	4313      	orrs	r3, r2
    40c0:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    40c4:	9b01      	ldr	r3, [sp, #4]
    40c6:	7fdb      	ldrb	r3, [r3, #31]
    40c8:	2b02      	cmp	r3, #2
    40ca:	d011      	beq.n	40f0 <Clock_Ip_SetSpll_TrustedCall+0x60>
    40cc:	2b02      	cmp	r3, #2
    40ce:	dc17      	bgt.n	4100 <Clock_Ip_SetSpll_TrustedCall+0x70>
    40d0:	2b00      	cmp	r3, #0
    40d2:	d002      	beq.n	40da <Clock_Ip_SetSpll_TrustedCall+0x4a>
    40d4:	2b01      	cmp	r3, #1
    40d6:	d005      	beq.n	40e4 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    40d8:	e012      	b.n	4100 <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    40da:	4b0b      	ldr	r3, [pc, #44]	; (4108 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40dc:	2200      	movs	r2, #0
    40de:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40e2:	e00e      	b.n	4102 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    40e4:	4b08      	ldr	r3, [pc, #32]	; (4108 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    40ea:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40ee:	e008      	b.n	4102 <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    40f0:	4b05      	ldr	r3, [pc, #20]	; (4108 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    40f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    40f6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    40fa:	e002      	b.n	4102 <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    40fc:	bf00      	nop
    40fe:	e000      	b.n	4102 <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    4100:	bf00      	nop
}
    4102:	bf00      	nop
    4104:	b002      	add	sp, #8
    4106:	4770      	bx	lr
    4108:	40064000 	.word	0x40064000

0000410c <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    410c:	b082      	sub	sp, #8
    410e:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4110:	4b09      	ldr	r3, [pc, #36]	; (4138 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4112:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4116:	4a08      	ldr	r2, [pc, #32]	; (4138 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4118:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    411c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4120:	4b05      	ldr	r3, [pc, #20]	; (4138 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4122:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4126:	4a04      	ldr	r2, [pc, #16]	; (4138 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4128:	f023 0301 	bic.w	r3, r3, #1
    412c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    4130:	bf00      	nop
    4132:	b002      	add	sp, #8
    4134:	4770      	bx	lr
    4136:	bf00      	nop
    4138:	40064000 	.word	0x40064000

0000413c <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    413c:	b082      	sub	sp, #8
    413e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    4140:	9b01      	ldr	r3, [sp, #4]
    4142:	889b      	ldrh	r3, [r3, #4]
    4144:	2b01      	cmp	r3, #1
    4146:	d107      	bne.n	4158 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4148:	4b05      	ldr	r3, [pc, #20]	; (4160 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    414a:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    414e:	4a04      	ldr	r2, [pc, #16]	; (4160 <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4150:	f043 0301 	orr.w	r3, r3, #1
    4154:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4158:	bf00      	nop
    415a:	b002      	add	sp, #8
    415c:	4770      	bx	lr
    415e:	bf00      	nop
    4160:	40064000 	.word	0x40064000

00004164 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4164:	b082      	sub	sp, #8
    4166:	9001      	str	r0, [sp, #4]
    4168:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    416a:	bf00      	nop
    416c:	b002      	add	sp, #8
    416e:	4770      	bx	lr

00004170 <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    4170:	b082      	sub	sp, #8
    4172:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4174:	bf00      	nop
    4176:	b002      	add	sp, #8
    4178:	4770      	bx	lr

0000417a <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    417a:	b500      	push	{lr}
    417c:	b083      	sub	sp, #12
    417e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4180:	9b01      	ldr	r3, [sp, #4]
    4182:	2b00      	cmp	r3, #0
    4184:	d002      	beq.n	418c <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4186:	9801      	ldr	r0, [sp, #4]
    4188:	f000 f8ee 	bl	4368 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    418c:	bf00      	nop
    418e:	b003      	add	sp, #12
    4190:	f85d fb04 	ldr.w	pc, [sp], #4

00004194 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4194:	b500      	push	{lr}
    4196:	b083      	sub	sp, #12
    4198:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    419a:	9b01      	ldr	r3, [sp, #4]
    419c:	2b00      	cmp	r3, #0
    419e:	d002      	beq.n	41a6 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    41a0:	9801      	ldr	r0, [sp, #4]
    41a2:	f000 f8ff 	bl	43a4 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41a6:	bf00      	nop
    41a8:	b003      	add	sp, #12
    41aa:	f85d fb04 	ldr.w	pc, [sp], #4

000041ae <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    41ae:	b500      	push	{lr}
    41b0:	b083      	sub	sp, #12
    41b2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41b4:	9b01      	ldr	r3, [sp, #4]
    41b6:	2b00      	cmp	r3, #0
    41b8:	d002      	beq.n	41c0 <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    41ba:	9801      	ldr	r0, [sp, #4]
    41bc:	f000 f912 	bl	43e4 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41c0:	bf00      	nop
    41c2:	b003      	add	sp, #12
    41c4:	f85d fb04 	ldr.w	pc, [sp], #4

000041c8 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    41c8:	b500      	push	{lr}
    41ca:	b083      	sub	sp, #12
    41cc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41ce:	9b01      	ldr	r3, [sp, #4]
    41d0:	2b00      	cmp	r3, #0
    41d2:	d002      	beq.n	41da <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    41d4:	9801      	ldr	r0, [sp, #4]
    41d6:	f000 f925 	bl	4424 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41da:	bf00      	nop
    41dc:	b003      	add	sp, #12
    41de:	f85d fb04 	ldr.w	pc, [sp], #4

000041e2 <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    41e2:	b500      	push	{lr}
    41e4:	b083      	sub	sp, #12
    41e6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    41e8:	9b01      	ldr	r3, [sp, #4]
    41ea:	2b00      	cmp	r3, #0
    41ec:	d002      	beq.n	41f4 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    41ee:	9801      	ldr	r0, [sp, #4]
    41f0:	f000 f936 	bl	4460 <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    41f4:	bf00      	nop
    41f6:	b003      	add	sp, #12
    41f8:	f85d fb04 	ldr.w	pc, [sp], #4

000041fc <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    41fc:	b500      	push	{lr}
    41fe:	b083      	sub	sp, #12
    4200:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4202:	9b01      	ldr	r3, [sp, #4]
    4204:	2b00      	cmp	r3, #0
    4206:	d002      	beq.n	420e <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4208:	9801      	ldr	r0, [sp, #4]
    420a:	f000 f949 	bl	44a0 <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    420e:	bf00      	nop
    4210:	b003      	add	sp, #12
    4212:	f85d fb04 	ldr.w	pc, [sp], #4

00004216 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4216:	b500      	push	{lr}
    4218:	b083      	sub	sp, #12
    421a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    421c:	9b01      	ldr	r3, [sp, #4]
    421e:	2b00      	cmp	r3, #0
    4220:	d002      	beq.n	4228 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    4222:	9801      	ldr	r0, [sp, #4]
    4224:	f000 f958 	bl	44d8 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4228:	bf00      	nop
    422a:	b003      	add	sp, #12
    422c:	f85d fb04 	ldr.w	pc, [sp], #4

00004230 <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4230:	b500      	push	{lr}
    4232:	b083      	sub	sp, #12
    4234:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4236:	9b01      	ldr	r3, [sp, #4]
    4238:	2b00      	cmp	r3, #0
    423a:	d002      	beq.n	4242 <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    423c:	9801      	ldr	r0, [sp, #4]
    423e:	f000 f969 	bl	4514 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4242:	bf00      	nop
    4244:	b003      	add	sp, #12
    4246:	f85d fb04 	ldr.w	pc, [sp], #4

0000424a <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    424a:	b500      	push	{lr}
    424c:	b083      	sub	sp, #12
    424e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4250:	9b01      	ldr	r3, [sp, #4]
    4252:	2b00      	cmp	r3, #0
    4254:	d002      	beq.n	425c <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4256:	9801      	ldr	r0, [sp, #4]
    4258:	f000 f978 	bl	454c <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    425c:	bf00      	nop
    425e:	b003      	add	sp, #12
    4260:	f85d fb04 	ldr.w	pc, [sp], #4

00004264 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4264:	b500      	push	{lr}
    4266:	b083      	sub	sp, #12
    4268:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    426a:	9b01      	ldr	r3, [sp, #4]
    426c:	2b00      	cmp	r3, #0
    426e:	d002      	beq.n	4276 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    4270:	9801      	ldr	r0, [sp, #4]
    4272:	f000 f989 	bl	4588 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4276:	bf00      	nop
    4278:	b003      	add	sp, #12
    427a:	f85d fb04 	ldr.w	pc, [sp], #4

0000427e <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    427e:	b500      	push	{lr}
    4280:	b083      	sub	sp, #12
    4282:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4284:	9b01      	ldr	r3, [sp, #4]
    4286:	2b00      	cmp	r3, #0
    4288:	d002      	beq.n	4290 <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    428a:	9801      	ldr	r0, [sp, #4]
    428c:	f000 f998 	bl	45c0 <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4290:	bf00      	nop
    4292:	b003      	add	sp, #12
    4294:	f85d fb04 	ldr.w	pc, [sp], #4

00004298 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    4298:	b500      	push	{lr}
    429a:	b083      	sub	sp, #12
    429c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    429e:	9b01      	ldr	r3, [sp, #4]
    42a0:	2b00      	cmp	r3, #0
    42a2:	d002      	beq.n	42aa <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    42a4:	9801      	ldr	r0, [sp, #4]
    42a6:	f000 f9a9 	bl	45fc <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42aa:	bf00      	nop
    42ac:	b003      	add	sp, #12
    42ae:	f85d fb04 	ldr.w	pc, [sp], #4

000042b2 <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    42b2:	b500      	push	{lr}
    42b4:	b083      	sub	sp, #12
    42b6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42b8:	9b01      	ldr	r3, [sp, #4]
    42ba:	2b00      	cmp	r3, #0
    42bc:	d002      	beq.n	42c4 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    42be:	9801      	ldr	r0, [sp, #4]
    42c0:	f000 f9e6 	bl	4690 <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42c4:	bf00      	nop
    42c6:	b003      	add	sp, #12
    42c8:	f85d fb04 	ldr.w	pc, [sp], #4

000042cc <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    42cc:	b500      	push	{lr}
    42ce:	b083      	sub	sp, #12
    42d0:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42d2:	9b01      	ldr	r3, [sp, #4]
    42d4:	2b00      	cmp	r3, #0
    42d6:	d002      	beq.n	42de <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    42d8:	9801      	ldr	r0, [sp, #4]
    42da:	f000 fa25 	bl	4728 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42de:	bf00      	nop
    42e0:	b003      	add	sp, #12
    42e2:	f85d fb04 	ldr.w	pc, [sp], #4

000042e6 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    42e6:	b500      	push	{lr}
    42e8:	b083      	sub	sp, #12
    42ea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    42ec:	9b01      	ldr	r3, [sp, #4]
    42ee:	2b00      	cmp	r3, #0
    42f0:	d002      	beq.n	42f8 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    42f2:	9801      	ldr	r0, [sp, #4]
    42f4:	f000 fa2a 	bl	474c <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    42f8:	bf00      	nop
    42fa:	b003      	add	sp, #12
    42fc:	f85d fb04 	ldr.w	pc, [sp], #4

00004300 <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4300:	b500      	push	{lr}
    4302:	b083      	sub	sp, #12
    4304:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4306:	9b01      	ldr	r3, [sp, #4]
    4308:	2b00      	cmp	r3, #0
    430a:	d002      	beq.n	4312 <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    430c:	9801      	ldr	r0, [sp, #4]
    430e:	f000 fa3b 	bl	4788 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4312:	bf00      	nop
    4314:	b003      	add	sp, #12
    4316:	f85d fb04 	ldr.w	pc, [sp], #4

0000431a <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    431a:	b500      	push	{lr}
    431c:	b083      	sub	sp, #12
    431e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4320:	9b01      	ldr	r3, [sp, #4]
    4322:	2b00      	cmp	r3, #0
    4324:	d002      	beq.n	432c <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4326:	9801      	ldr	r0, [sp, #4]
    4328:	f000 fa56 	bl	47d8 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    432c:	bf00      	nop
    432e:	b003      	add	sp, #12
    4330:	f85d fb04 	ldr.w	pc, [sp], #4

00004334 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4334:	b500      	push	{lr}
    4336:	b083      	sub	sp, #12
    4338:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    433a:	9b01      	ldr	r3, [sp, #4]
    433c:	2b00      	cmp	r3, #0
    433e:	d002      	beq.n	4346 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    4340:	9801      	ldr	r0, [sp, #4]
    4342:	f000 fa79 	bl	4838 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4346:	bf00      	nop
    4348:	b003      	add	sp, #12
    434a:	f85d fb04 	ldr.w	pc, [sp], #4

0000434e <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    434e:	b500      	push	{lr}
    4350:	b083      	sub	sp, #12
    4352:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4354:	9b01      	ldr	r3, [sp, #4]
    4356:	2b00      	cmp	r3, #0
    4358:	d002      	beq.n	4360 <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    435a:	9801      	ldr	r0, [sp, #4]
    435c:	f000 fa8a 	bl	4874 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4360:	bf00      	nop
    4362:	b003      	add	sp, #12
    4364:	f85d fb04 	ldr.w	pc, [sp], #4

00004368 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4368:	b084      	sub	sp, #16
    436a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    436c:	4b0b      	ldr	r3, [pc, #44]	; (439c <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    436e:	795b      	ldrb	r3, [r3, #5]
    4370:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    4372:	4b0b      	ldr	r3, [pc, #44]	; (43a0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4374:	695b      	ldr	r3, [r3, #20]
    4376:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4378:	9b02      	ldr	r3, [sp, #8]
    437a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    437e:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    4380:	9b03      	ldr	r3, [sp, #12]
    4382:	061b      	lsls	r3, r3, #24
    4384:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4388:	9a02      	ldr	r2, [sp, #8]
    438a:	4313      	orrs	r3, r2
    438c:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    438e:	4a04      	ldr	r2, [pc, #16]	; (43a0 <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4390:	9b02      	ldr	r3, [sp, #8]
    4392:	6153      	str	r3, [r2, #20]
}
    4394:	bf00      	nop
    4396:	b004      	add	sp, #16
    4398:	4770      	bx	lr
    439a:	bf00      	nop
    439c:	0000f140 	.word	0x0000f140
    43a0:	40064000 	.word	0x40064000

000043a4 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43a4:	b084      	sub	sp, #16
    43a6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43a8:	9b01      	ldr	r3, [sp, #4]
    43aa:	685b      	ldr	r3, [r3, #4]
    43ac:	4a0b      	ldr	r2, [pc, #44]	; (43dc <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    43ae:	5cd3      	ldrb	r3, [r2, r3]
    43b0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    43b2:	4b0b      	ldr	r3, [pc, #44]	; (43e0 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    43b4:	695b      	ldr	r3, [r3, #20]
    43b6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    43b8:	9b02      	ldr	r3, [sp, #8]
    43ba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43be:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    43c0:	9b03      	ldr	r3, [sp, #12]
    43c2:	061b      	lsls	r3, r3, #24
    43c4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    43c8:	9a02      	ldr	r2, [sp, #8]
    43ca:	4313      	orrs	r3, r2
    43cc:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    43ce:	4a04      	ldr	r2, [pc, #16]	; (43e0 <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    43d0:	9b02      	ldr	r3, [sp, #8]
    43d2:	6153      	str	r3, [r2, #20]
}
    43d4:	bf00      	nop
    43d6:	b004      	add	sp, #16
    43d8:	4770      	bx	lr
    43da:	bf00      	nop
    43dc:	0000f140 	.word	0x0000f140
    43e0:	40064000 	.word	0x40064000

000043e4 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    43e4:	b084      	sub	sp, #16
    43e6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    43e8:	9b01      	ldr	r3, [sp, #4]
    43ea:	685b      	ldr	r3, [r3, #4]
    43ec:	4a0b      	ldr	r2, [pc, #44]	; (441c <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    43ee:	5cd3      	ldrb	r3, [r2, r3]
    43f0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    43f2:	4b0b      	ldr	r3, [pc, #44]	; (4420 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    43f4:	699b      	ldr	r3, [r3, #24]
    43f6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    43f8:	9b02      	ldr	r3, [sp, #8]
    43fa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    43fe:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4400:	9b03      	ldr	r3, [sp, #12]
    4402:	061b      	lsls	r3, r3, #24
    4404:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4408:	9a02      	ldr	r2, [sp, #8]
    440a:	4313      	orrs	r3, r2
    440c:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    440e:	4a04      	ldr	r2, [pc, #16]	; (4420 <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4410:	9b02      	ldr	r3, [sp, #8]
    4412:	6193      	str	r3, [r2, #24]
}
    4414:	bf00      	nop
    4416:	b004      	add	sp, #16
    4418:	4770      	bx	lr
    441a:	bf00      	nop
    441c:	0000f140 	.word	0x0000f140
    4420:	40064000 	.word	0x40064000

00004424 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4424:	b084      	sub	sp, #16
    4426:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4428:	4b0b      	ldr	r3, [pc, #44]	; (4458 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    442a:	795b      	ldrb	r3, [r3, #5]
    442c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    442e:	4b0b      	ldr	r3, [pc, #44]	; (445c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4430:	69db      	ldr	r3, [r3, #28]
    4432:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4434:	9b02      	ldr	r3, [sp, #8]
    4436:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    443a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    443c:	9b03      	ldr	r3, [sp, #12]
    443e:	061b      	lsls	r3, r3, #24
    4440:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4444:	9a02      	ldr	r2, [sp, #8]
    4446:	4313      	orrs	r3, r2
    4448:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    444a:	4a04      	ldr	r2, [pc, #16]	; (445c <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    444c:	9b02      	ldr	r3, [sp, #8]
    444e:	61d3      	str	r3, [r2, #28]
}
    4450:	bf00      	nop
    4452:	b004      	add	sp, #16
    4454:	4770      	bx	lr
    4456:	bf00      	nop
    4458:	0000f140 	.word	0x0000f140
    445c:	40064000 	.word	0x40064000

00004460 <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4460:	b084      	sub	sp, #16
    4462:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4464:	9b01      	ldr	r3, [sp, #4]
    4466:	685b      	ldr	r3, [r3, #4]
    4468:	4a0b      	ldr	r2, [pc, #44]	; (4498 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    446a:	5cd3      	ldrb	r3, [r2, r3]
    446c:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    446e:	4b0b      	ldr	r3, [pc, #44]	; (449c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4470:	69db      	ldr	r3, [r3, #28]
    4472:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4474:	9b02      	ldr	r3, [sp, #8]
    4476:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    447a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    447c:	9b03      	ldr	r3, [sp, #12]
    447e:	061b      	lsls	r3, r3, #24
    4480:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4484:	9a02      	ldr	r2, [sp, #8]
    4486:	4313      	orrs	r3, r2
    4488:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    448a:	4a04      	ldr	r2, [pc, #16]	; (449c <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    448c:	9b02      	ldr	r3, [sp, #8]
    448e:	61d3      	str	r3, [r2, #28]
}
    4490:	bf00      	nop
    4492:	b004      	add	sp, #16
    4494:	4770      	bx	lr
    4496:	bf00      	nop
    4498:	0000f140 	.word	0x0000f140
    449c:	40064000 	.word	0x40064000

000044a0 <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44a0:	b084      	sub	sp, #16
    44a2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44a4:	4b0a      	ldr	r3, [pc, #40]	; (44d0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    44a6:	7b9b      	ldrb	r3, [r3, #14]
    44a8:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    44aa:	4b0a      	ldr	r3, [pc, #40]	; (44d4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    44ac:	691b      	ldr	r3, [r3, #16]
    44ae:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    44b0:	9b02      	ldr	r3, [sp, #8]
    44b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    44b6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    44b8:	9b03      	ldr	r3, [sp, #12]
    44ba:	011b      	lsls	r3, r3, #4
    44bc:	9a02      	ldr	r2, [sp, #8]
    44be:	4313      	orrs	r3, r2
    44c0:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44c2:	4a04      	ldr	r2, [pc, #16]	; (44d4 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    44c4:	9b02      	ldr	r3, [sp, #8]
    44c6:	6113      	str	r3, [r2, #16]
}
    44c8:	bf00      	nop
    44ca:	b004      	add	sp, #16
    44cc:	4770      	bx	lr
    44ce:	bf00      	nop
    44d0:	0000f0e8 	.word	0x0000f0e8
    44d4:	40048000 	.word	0x40048000

000044d8 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    44d8:	b084      	sub	sp, #16
    44da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    44dc:	9b01      	ldr	r3, [sp, #4]
    44de:	685b      	ldr	r3, [r3, #4]
    44e0:	4a0a      	ldr	r2, [pc, #40]	; (450c <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    44e2:	5cd3      	ldrb	r3, [r2, r3]
    44e4:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    44e6:	4b0a      	ldr	r3, [pc, #40]	; (4510 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    44e8:	691b      	ldr	r3, [r3, #16]
    44ea:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    44ec:	9b02      	ldr	r3, [sp, #8]
    44ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    44f2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    44f4:	9b03      	ldr	r3, [sp, #12]
    44f6:	011b      	lsls	r3, r3, #4
    44f8:	9a02      	ldr	r2, [sp, #8]
    44fa:	4313      	orrs	r3, r2
    44fc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    44fe:	4a04      	ldr	r2, [pc, #16]	; (4510 <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4500:	9b02      	ldr	r3, [sp, #8]
    4502:	6113      	str	r3, [r2, #16]
}
    4504:	bf00      	nop
    4506:	b004      	add	sp, #16
    4508:	4770      	bx	lr
    450a:	bf00      	nop
    450c:	0000f0e8 	.word	0x0000f0e8
    4510:	40048000 	.word	0x40048000

00004514 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4514:	b084      	sub	sp, #16
    4516:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4518:	4b0a      	ldr	r3, [pc, #40]	; (4544 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    451a:	785b      	ldrb	r3, [r3, #1]
    451c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    451e:	4b0a      	ldr	r3, [pc, #40]	; (4548 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4520:	691b      	ldr	r3, [r3, #16]
    4522:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4524:	9b02      	ldr	r3, [sp, #8]
    4526:	f023 030c 	bic.w	r3, r3, #12
    452a:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    452c:	9b03      	ldr	r3, [sp, #12]
    452e:	009b      	lsls	r3, r3, #2
    4530:	9a02      	ldr	r2, [sp, #8]
    4532:	4313      	orrs	r3, r2
    4534:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4536:	4a04      	ldr	r2, [pc, #16]	; (4548 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4538:	9b02      	ldr	r3, [sp, #8]
    453a:	6113      	str	r3, [r2, #16]
}
    453c:	bf00      	nop
    453e:	b004      	add	sp, #16
    4540:	4770      	bx	lr
    4542:	bf00      	nop
    4544:	0000f1a0 	.word	0x0000f1a0
    4548:	40048000 	.word	0x40048000

0000454c <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    454c:	b084      	sub	sp, #16
    454e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4550:	9b01      	ldr	r3, [sp, #4]
    4552:	685b      	ldr	r3, [r3, #4]
    4554:	4a0a      	ldr	r2, [pc, #40]	; (4580 <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    4556:	5cd3      	ldrb	r3, [r2, r3]
    4558:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    455a:	4b0a      	ldr	r3, [pc, #40]	; (4584 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    455c:	691b      	ldr	r3, [r3, #16]
    455e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4560:	9b02      	ldr	r3, [sp, #8]
    4562:	f023 030c 	bic.w	r3, r3, #12
    4566:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4568:	9b03      	ldr	r3, [sp, #12]
    456a:	009b      	lsls	r3, r3, #2
    456c:	9a02      	ldr	r2, [sp, #8]
    456e:	4313      	orrs	r3, r2
    4570:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4572:	4a04      	ldr	r2, [pc, #16]	; (4584 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4574:	9b02      	ldr	r3, [sp, #8]
    4576:	6113      	str	r3, [r2, #16]
}
    4578:	bf00      	nop
    457a:	b004      	add	sp, #16
    457c:	4770      	bx	lr
    457e:	bf00      	nop
    4580:	0000f1a0 	.word	0x0000f1a0
    4584:	40048000 	.word	0x40048000

00004588 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4588:	b084      	sub	sp, #16
    458a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    458c:	4b0a      	ldr	r3, [pc, #40]	; (45b8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    458e:	795b      	ldrb	r3, [r3, #5]
    4590:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    4592:	4b0a      	ldr	r3, [pc, #40]	; (45bc <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4594:	6a1b      	ldr	r3, [r3, #32]
    4596:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4598:	9b02      	ldr	r3, [sp, #8]
    459a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    459e:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    45a0:	9b03      	ldr	r3, [sp, #12]
    45a2:	061b      	lsls	r3, r3, #24
    45a4:	9a02      	ldr	r2, [sp, #8]
    45a6:	4313      	orrs	r3, r2
    45a8:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    45aa:	4a04      	ldr	r2, [pc, #16]	; (45bc <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    45ac:	9b02      	ldr	r3, [sp, #8]
    45ae:	6213      	str	r3, [r2, #32]
}
    45b0:	bf00      	nop
    45b2:	b004      	add	sp, #16
    45b4:	4770      	bx	lr
    45b6:	bf00      	nop
    45b8:	0000f140 	.word	0x0000f140
    45bc:	40064000 	.word	0x40064000

000045c0 <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45c0:	b084      	sub	sp, #16
    45c2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    45c4:	9b01      	ldr	r3, [sp, #4]
    45c6:	685b      	ldr	r3, [r3, #4]
    45c8:	4a0a      	ldr	r2, [pc, #40]	; (45f4 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    45ca:	5cd3      	ldrb	r3, [r2, r3]
    45cc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    45ce:	4b0a      	ldr	r3, [pc, #40]	; (45f8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    45d0:	6a1b      	ldr	r3, [r3, #32]
    45d2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    45d4:	9b02      	ldr	r3, [sp, #8]
    45d6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    45da:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    45dc:	9b03      	ldr	r3, [sp, #12]
    45de:	061b      	lsls	r3, r3, #24
    45e0:	9a02      	ldr	r2, [sp, #8]
    45e2:	4313      	orrs	r3, r2
    45e4:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    45e6:	4a04      	ldr	r2, [pc, #16]	; (45f8 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    45e8:	9b02      	ldr	r3, [sp, #8]
    45ea:	6213      	str	r3, [r2, #32]
}
    45ec:	bf00      	nop
    45ee:	b004      	add	sp, #16
    45f0:	4770      	bx	lr
    45f2:	bf00      	nop
    45f4:	0000f140 	.word	0x0000f140
    45f8:	40064000 	.word	0x40064000

000045fc <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    45fc:	b086      	sub	sp, #24
    45fe:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4600:	4b20      	ldr	r3, [pc, #128]	; (4684 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    4602:	795b      	ldrb	r3, [r3, #5]
    4604:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4606:	9b01      	ldr	r3, [sp, #4]
    4608:	681a      	ldr	r2, [r3, #0]
    460a:	491f      	ldr	r1, [pc, #124]	; (4688 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    460c:	4613      	mov	r3, r2
    460e:	00db      	lsls	r3, r3, #3
    4610:	4413      	add	r3, r2
    4612:	440b      	add	r3, r1
    4614:	781b      	ldrb	r3, [r3, #0]
    4616:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4618:	4b1c      	ldr	r3, [pc, #112]	; (468c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    461a:	68db      	ldr	r3, [r3, #12]
    461c:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    461e:	9b03      	ldr	r3, [sp, #12]
    4620:	2b03      	cmp	r3, #3
    4622:	d813      	bhi.n	464c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4624:	9b03      	ldr	r3, [sp, #12]
    4626:	005b      	lsls	r3, r3, #1
    4628:	3318      	adds	r3, #24
    462a:	2203      	movs	r2, #3
    462c:	fa02 f303 	lsl.w	r3, r2, r3
    4630:	43db      	mvns	r3, r3
    4632:	9a05      	ldr	r2, [sp, #20]
    4634:	4013      	ands	r3, r2
    4636:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4638:	9b03      	ldr	r3, [sp, #12]
    463a:	005b      	lsls	r3, r3, #1
    463c:	3318      	adds	r3, #24
    463e:	9a04      	ldr	r2, [sp, #16]
    4640:	fa02 f303 	lsl.w	r3, r2, r3
    4644:	9a05      	ldr	r2, [sp, #20]
    4646:	4313      	orrs	r3, r2
    4648:	9305      	str	r3, [sp, #20]
    464a:	e014      	b.n	4676 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    464c:	9b03      	ldr	r3, [sp, #12]
    464e:	3b04      	subs	r3, #4
    4650:	005b      	lsls	r3, r3, #1
    4652:	3310      	adds	r3, #16
    4654:	2203      	movs	r2, #3
    4656:	fa02 f303 	lsl.w	r3, r2, r3
    465a:	43db      	mvns	r3, r3
    465c:	9a05      	ldr	r2, [sp, #20]
    465e:	4013      	ands	r3, r2
    4660:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4662:	9b03      	ldr	r3, [sp, #12]
    4664:	3b04      	subs	r3, #4
    4666:	005b      	lsls	r3, r3, #1
    4668:	3310      	adds	r3, #16
    466a:	9a04      	ldr	r2, [sp, #16]
    466c:	fa02 f303 	lsl.w	r3, r2, r3
    4670:	9a05      	ldr	r2, [sp, #20]
    4672:	4313      	orrs	r3, r2
    4674:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4676:	4a05      	ldr	r2, [pc, #20]	; (468c <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4678:	9b05      	ldr	r3, [sp, #20]
    467a:	60d3      	str	r3, [r2, #12]
}
    467c:	bf00      	nop
    467e:	b006      	add	sp, #24
    4680:	4770      	bx	lr
    4682:	bf00      	nop
    4684:	0000f0e8 	.word	0x0000f0e8
    4688:	0000edd8 	.word	0x0000edd8
    468c:	40048000 	.word	0x40048000

00004690 <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4690:	b086      	sub	sp, #24
    4692:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4694:	9b01      	ldr	r3, [sp, #4]
    4696:	685b      	ldr	r3, [r3, #4]
    4698:	4a20      	ldr	r2, [pc, #128]	; (471c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    469a:	5cd3      	ldrb	r3, [r2, r3]
    469c:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    469e:	9b01      	ldr	r3, [sp, #4]
    46a0:	681a      	ldr	r2, [r3, #0]
    46a2:	491f      	ldr	r1, [pc, #124]	; (4720 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    46a4:	4613      	mov	r3, r2
    46a6:	00db      	lsls	r3, r3, #3
    46a8:	4413      	add	r3, r2
    46aa:	440b      	add	r3, r1
    46ac:	781b      	ldrb	r3, [r3, #0]
    46ae:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    46b0:	4b1c      	ldr	r3, [pc, #112]	; (4724 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    46b2:	68db      	ldr	r3, [r3, #12]
    46b4:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    46b6:	9b03      	ldr	r3, [sp, #12]
    46b8:	2b03      	cmp	r3, #3
    46ba:	d813      	bhi.n	46e4 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    46bc:	9b03      	ldr	r3, [sp, #12]
    46be:	005b      	lsls	r3, r3, #1
    46c0:	3318      	adds	r3, #24
    46c2:	2203      	movs	r2, #3
    46c4:	fa02 f303 	lsl.w	r3, r2, r3
    46c8:	43db      	mvns	r3, r3
    46ca:	9a05      	ldr	r2, [sp, #20]
    46cc:	4013      	ands	r3, r2
    46ce:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    46d0:	9b03      	ldr	r3, [sp, #12]
    46d2:	005b      	lsls	r3, r3, #1
    46d4:	3318      	adds	r3, #24
    46d6:	9a04      	ldr	r2, [sp, #16]
    46d8:	fa02 f303 	lsl.w	r3, r2, r3
    46dc:	9a05      	ldr	r2, [sp, #20]
    46de:	4313      	orrs	r3, r2
    46e0:	9305      	str	r3, [sp, #20]
    46e2:	e014      	b.n	470e <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    46e4:	9b03      	ldr	r3, [sp, #12]
    46e6:	3b04      	subs	r3, #4
    46e8:	005b      	lsls	r3, r3, #1
    46ea:	3310      	adds	r3, #16
    46ec:	2203      	movs	r2, #3
    46ee:	fa02 f303 	lsl.w	r3, r2, r3
    46f2:	43db      	mvns	r3, r3
    46f4:	9a05      	ldr	r2, [sp, #20]
    46f6:	4013      	ands	r3, r2
    46f8:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    46fa:	9b03      	ldr	r3, [sp, #12]
    46fc:	3b04      	subs	r3, #4
    46fe:	005b      	lsls	r3, r3, #1
    4700:	3310      	adds	r3, #16
    4702:	9a04      	ldr	r2, [sp, #16]
    4704:	fa02 f303 	lsl.w	r3, r2, r3
    4708:	9a05      	ldr	r2, [sp, #20]
    470a:	4313      	orrs	r3, r2
    470c:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    470e:	4a05      	ldr	r2, [pc, #20]	; (4724 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4710:	9b05      	ldr	r3, [sp, #20]
    4712:	60d3      	str	r3, [r2, #12]
}
    4714:	bf00      	nop
    4716:	b006      	add	sp, #24
    4718:	4770      	bx	lr
    471a:	bf00      	nop
    471c:	0000f0e8 	.word	0x0000f0e8
    4720:	0000edd8 	.word	0x0000edd8
    4724:	40048000 	.word	0x40048000

00004728 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4728:	b084      	sub	sp, #16
    472a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    472c:	4b06      	ldr	r3, [pc, #24]	; (4748 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    472e:	685b      	ldr	r3, [r3, #4]
    4730:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    4732:	9b03      	ldr	r3, [sp, #12]
    4734:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4738:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    473a:	4a03      	ldr	r2, [pc, #12]	; (4748 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    473c:	9b03      	ldr	r3, [sp, #12]
    473e:	6053      	str	r3, [r2, #4]
}
    4740:	bf00      	nop
    4742:	b004      	add	sp, #16
    4744:	4770      	bx	lr
    4746:	bf00      	nop
    4748:	40048000 	.word	0x40048000

0000474c <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    474c:	b084      	sub	sp, #16
    474e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4750:	9b01      	ldr	r3, [sp, #4]
    4752:	685b      	ldr	r3, [r3, #4]
    4754:	4a0a      	ldr	r2, [pc, #40]	; (4780 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4756:	5cd3      	ldrb	r3, [r2, r3]
    4758:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    475a:	4b0a      	ldr	r3, [pc, #40]	; (4784 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    475c:	685b      	ldr	r3, [r3, #4]
    475e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4760:	9b02      	ldr	r3, [sp, #8]
    4762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4766:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4768:	9b03      	ldr	r3, [sp, #12]
    476a:	011b      	lsls	r3, r3, #4
    476c:	9a02      	ldr	r2, [sp, #8]
    476e:	4313      	orrs	r3, r2
    4770:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4772:	4a04      	ldr	r2, [pc, #16]	; (4784 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4774:	9b02      	ldr	r3, [sp, #8]
    4776:	6053      	str	r3, [r2, #4]
}
    4778:	bf00      	nop
    477a:	b004      	add	sp, #16
    477c:	4770      	bx	lr
    477e:	bf00      	nop
    4780:	0000f0e8 	.word	0x0000f0e8
    4784:	40048000 	.word	0x40048000

00004788 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4788:	b084      	sub	sp, #16
    478a:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    478c:	9b01      	ldr	r3, [sp, #4]
    478e:	681a      	ldr	r2, [r3, #0]
    4790:	490f      	ldr	r1, [pc, #60]	; (47d0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4792:	4613      	mov	r3, r2
    4794:	00db      	lsls	r3, r3, #3
    4796:	4413      	add	r3, r2
    4798:	440b      	add	r3, r1
    479a:	3304      	adds	r3, #4
    479c:	781b      	ldrb	r3, [r3, #0]
    479e:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    47a0:	4a0c      	ldr	r2, [pc, #48]	; (47d4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    47a2:	9b03      	ldr	r3, [sp, #12]
    47a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    47a8:	490a      	ldr	r1, [pc, #40]	; (47d4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    47aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    47ae:	9b03      	ldr	r3, [sp, #12]
    47b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    47b4:	4a07      	ldr	r2, [pc, #28]	; (47d4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    47b6:	9b03      	ldr	r3, [sp, #12]
    47b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    47bc:	4905      	ldr	r1, [pc, #20]	; (47d4 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    47be:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    47c2:	9b03      	ldr	r3, [sp, #12]
    47c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    47c8:	bf00      	nop
    47ca:	b004      	add	sp, #16
    47cc:	4770      	bx	lr
    47ce:	bf00      	nop
    47d0:	0000edd8 	.word	0x0000edd8
    47d4:	40065000 	.word	0x40065000

000047d8 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    47d8:	b086      	sub	sp, #24
    47da:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    47dc:	9b01      	ldr	r3, [sp, #4]
    47de:	681a      	ldr	r2, [r3, #0]
    47e0:	4912      	ldr	r1, [pc, #72]	; (482c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    47e2:	4613      	mov	r3, r2
    47e4:	00db      	lsls	r3, r3, #3
    47e6:	4413      	add	r3, r2
    47e8:	440b      	add	r3, r1
    47ea:	3304      	adds	r3, #4
    47ec:	781b      	ldrb	r3, [r3, #0]
    47ee:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    47f0:	9b01      	ldr	r3, [sp, #4]
    47f2:	685b      	ldr	r3, [r3, #4]
    47f4:	4a0e      	ldr	r2, [pc, #56]	; (4830 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    47f6:	5cd3      	ldrb	r3, [r2, r3]
    47f8:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    47fa:	4a0e      	ldr	r2, [pc, #56]	; (4834 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    47fc:	9b05      	ldr	r3, [sp, #20]
    47fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4802:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4804:	9b03      	ldr	r3, [sp, #12]
    4806:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    480a:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    480c:	9b04      	ldr	r3, [sp, #16]
    480e:	061b      	lsls	r3, r3, #24
    4810:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4814:	9a03      	ldr	r2, [sp, #12]
    4816:	4313      	orrs	r3, r2
    4818:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    481a:	4906      	ldr	r1, [pc, #24]	; (4834 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    481c:	9b05      	ldr	r3, [sp, #20]
    481e:	9a03      	ldr	r2, [sp, #12]
    4820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4824:	bf00      	nop
    4826:	b006      	add	sp, #24
    4828:	4770      	bx	lr
    482a:	bf00      	nop
    482c:	0000edd8 	.word	0x0000edd8
    4830:	0000f170 	.word	0x0000f170
    4834:	40065000 	.word	0x40065000

00004838 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4838:	b084      	sub	sp, #16
    483a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    483c:	4b0b      	ldr	r3, [pc, #44]	; (486c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    483e:	7f1b      	ldrb	r3, [r3, #28]
    4840:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4842:	4b0b      	ldr	r3, [pc, #44]	; (4870 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4844:	685b      	ldr	r3, [r3, #4]
    4846:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4848:	9b02      	ldr	r3, [sp, #8]
    484a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    484e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4850:	9b03      	ldr	r3, [sp, #12]
    4852:	031b      	lsls	r3, r3, #12
    4854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4858:	9a02      	ldr	r2, [sp, #8]
    485a:	4313      	orrs	r3, r2
    485c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    485e:	4a04      	ldr	r2, [pc, #16]	; (4870 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4860:	9b02      	ldr	r3, [sp, #8]
    4862:	6053      	str	r3, [r2, #4]
}
    4864:	bf00      	nop
    4866:	b004      	add	sp, #16
    4868:	4770      	bx	lr
    486a:	bf00      	nop
    486c:	0000f0e8 	.word	0x0000f0e8
    4870:	40048000 	.word	0x40048000

00004874 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4874:	b084      	sub	sp, #16
    4876:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4878:	9b01      	ldr	r3, [sp, #4]
    487a:	685b      	ldr	r3, [r3, #4]
    487c:	4a0b      	ldr	r2, [pc, #44]	; (48ac <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    487e:	5cd3      	ldrb	r3, [r2, r3]
    4880:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4882:	4b0b      	ldr	r3, [pc, #44]	; (48b0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4884:	685b      	ldr	r3, [r3, #4]
    4886:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4888:	9b02      	ldr	r3, [sp, #8]
    488a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    488e:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4890:	9b03      	ldr	r3, [sp, #12]
    4892:	031b      	lsls	r3, r3, #12
    4894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4898:	9a02      	ldr	r2, [sp, #8]
    489a:	4313      	orrs	r3, r2
    489c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    489e:	4a04      	ldr	r2, [pc, #16]	; (48b0 <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    48a0:	9b02      	ldr	r3, [sp, #8]
    48a2:	6053      	str	r3, [r2, #4]
}
    48a4:	bf00      	nop
    48a6:	b004      	add	sp, #16
    48a8:	4770      	bx	lr
    48aa:	bf00      	nop
    48ac:	0000f0e8 	.word	0x0000f0e8
    48b0:	40048000 	.word	0x40048000

000048b4 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    48b4:	b500      	push	{lr}
    48b6:	b085      	sub	sp, #20
    48b8:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    48ba:	2300      	movs	r3, #0
    48bc:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    48c0:	9b01      	ldr	r3, [sp, #4]
    48c2:	2b00      	cmp	r3, #0
    48c4:	d037      	beq.n	4936 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    48c6:	2300      	movs	r3, #0
    48c8:	9303      	str	r3, [sp, #12]
    48ca:	e02b      	b.n	4924 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    48cc:	4b29      	ldr	r3, [pc, #164]	; (4974 <DisableSafeClock+0xc0>)
    48ce:	6819      	ldr	r1, [r3, #0]
    48d0:	9a03      	ldr	r2, [sp, #12]
    48d2:	4613      	mov	r3, r2
    48d4:	005b      	lsls	r3, r3, #1
    48d6:	4413      	add	r3, r2
    48d8:	009b      	lsls	r3, r3, #2
    48da:	440b      	add	r3, r1
    48dc:	3314      	adds	r3, #20
    48de:	681b      	ldr	r3, [r3, #0]
    48e0:	2b05      	cmp	r3, #5
    48e2:	d11c      	bne.n	491e <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    48e4:	2301      	movs	r3, #1
    48e6:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    48ea:	4b22      	ldr	r3, [pc, #136]	; (4974 <DisableSafeClock+0xc0>)
    48ec:	6819      	ldr	r1, [r3, #0]
    48ee:	9a03      	ldr	r2, [sp, #12]
    48f0:	4613      	mov	r3, r2
    48f2:	005b      	lsls	r3, r3, #1
    48f4:	4413      	add	r3, r2
    48f6:	009b      	lsls	r3, r3, #2
    48f8:	440b      	add	r3, r1
    48fa:	3318      	adds	r3, #24
    48fc:	881b      	ldrh	r3, [r3, #0]
    48fe:	2b00      	cmp	r3, #0
    4900:	d118      	bne.n	4934 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4902:	4b1d      	ldr	r3, [pc, #116]	; (4978 <DisableSafeClock+0xc4>)
    4904:	791b      	ldrb	r3, [r3, #4]
    4906:	4619      	mov	r1, r3
    4908:	4a1c      	ldr	r2, [pc, #112]	; (497c <DisableSafeClock+0xc8>)
    490a:	460b      	mov	r3, r1
    490c:	005b      	lsls	r3, r3, #1
    490e:	440b      	add	r3, r1
    4910:	009b      	lsls	r3, r3, #2
    4912:	4413      	add	r3, r2
    4914:	3308      	adds	r3, #8
    4916:	681b      	ldr	r3, [r3, #0]
    4918:	2005      	movs	r0, #5
    491a:	4798      	blx	r3
                }
                break;
    491c:	e00a      	b.n	4934 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    491e:	9b03      	ldr	r3, [sp, #12]
    4920:	3301      	adds	r3, #1
    4922:	9303      	str	r3, [sp, #12]
    4924:	4b13      	ldr	r3, [pc, #76]	; (4974 <DisableSafeClock+0xc0>)
    4926:	681b      	ldr	r3, [r3, #0]
    4928:	7a1b      	ldrb	r3, [r3, #8]
    492a:	461a      	mov	r2, r3
    492c:	9b03      	ldr	r3, [sp, #12]
    492e:	4293      	cmp	r3, r2
    4930:	d3cc      	bcc.n	48cc <DisableSafeClock+0x18>
    4932:	e000      	b.n	4936 <DisableSafeClock+0x82>
                break;
    4934:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4936:	f89d 300b 	ldrb.w	r3, [sp, #11]
    493a:	f083 0301 	eor.w	r3, r3, #1
    493e:	b2db      	uxtb	r3, r3
    4940:	2b00      	cmp	r3, #0
    4942:	d013      	beq.n	496c <DisableSafeClock+0xb8>
    4944:	4b0e      	ldr	r3, [pc, #56]	; (4980 <DisableSafeClock+0xcc>)
    4946:	781b      	ldrb	r3, [r3, #0]
    4948:	f083 0301 	eor.w	r3, r3, #1
    494c:	b2db      	uxtb	r3, r3
    494e:	2b00      	cmp	r3, #0
    4950:	d00c      	beq.n	496c <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4952:	4b09      	ldr	r3, [pc, #36]	; (4978 <DisableSafeClock+0xc4>)
    4954:	791b      	ldrb	r3, [r3, #4]
    4956:	4619      	mov	r1, r3
    4958:	4a08      	ldr	r2, [pc, #32]	; (497c <DisableSafeClock+0xc8>)
    495a:	460b      	mov	r3, r1
    495c:	005b      	lsls	r3, r3, #1
    495e:	440b      	add	r3, r1
    4960:	009b      	lsls	r3, r3, #2
    4962:	4413      	add	r3, r2
    4964:	3308      	adds	r3, #8
    4966:	681b      	ldr	r3, [r3, #0]
    4968:	2005      	movs	r0, #5
    496a:	4798      	blx	r3
    }
}
    496c:	bf00      	nop
    496e:	b005      	add	sp, #20
    4970:	f85d fb04 	ldr.w	pc, [sp], #4
    4974:	1fff8b9c 	.word	0x1fff8b9c
    4978:	0000ed68 	.word	0x0000ed68
    497c:	0000f398 	.word	0x0000f398
    4980:	1fff8b20 	.word	0x1fff8b20

00004984 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4984:	4b06      	ldr	r3, [pc, #24]	; (49a0 <SetFircToResetValue_TrustedCall+0x1c>)
    4986:	2200      	movs	r2, #0
    4988:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    498c:	4b04      	ldr	r3, [pc, #16]	; (49a0 <SetFircToResetValue_TrustedCall+0x1c>)
    498e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4992:	4a03      	ldr	r2, [pc, #12]	; (49a0 <SetFircToResetValue_TrustedCall+0x1c>)
    4994:	f043 0301 	orr.w	r3, r3, #1
    4998:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    499c:	bf00      	nop
    499e:	4770      	bx	lr
    49a0:	40064000 	.word	0x40064000

000049a4 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    49a4:	b084      	sub	sp, #16
    49a6:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    49a8:	2303      	movs	r3, #3
    49aa:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    49ac:	2300      	movs	r3, #0
    49ae:	9302      	str	r3, [sp, #8]
    49b0:	e028      	b.n	4a04 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    49b2:	9b01      	ldr	r3, [sp, #4]
    49b4:	9a02      	ldr	r2, [sp, #8]
    49b6:	320d      	adds	r2, #13
    49b8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    49bc:	2b28      	cmp	r3, #40	; 0x28
    49be:	d10b      	bne.n	49d8 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    49c0:	9a01      	ldr	r2, [sp, #4]
    49c2:	9b02      	ldr	r3, [sp, #8]
    49c4:	330d      	adds	r3, #13
    49c6:	00db      	lsls	r3, r3, #3
    49c8:	4413      	add	r3, r2
    49ca:	685b      	ldr	r3, [r3, #4]
    49cc:	4a2b      	ldr	r2, [pc, #172]	; (4a7c <SetSimLpoclksRegister_TrustedCall+0xd8>)
    49ce:	5cd3      	ldrb	r3, [r2, r3]
    49d0:	011b      	lsls	r3, r3, #4
    49d2:	9a03      	ldr	r2, [sp, #12]
    49d4:	4313      	orrs	r3, r2
    49d6:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    49d8:	9b01      	ldr	r3, [sp, #4]
    49da:	9a02      	ldr	r2, [sp, #8]
    49dc:	320d      	adds	r2, #13
    49de:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    49e2:	2b29      	cmp	r3, #41	; 0x29
    49e4:	d10b      	bne.n	49fe <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    49e6:	9a01      	ldr	r2, [sp, #4]
    49e8:	9b02      	ldr	r3, [sp, #8]
    49ea:	330d      	adds	r3, #13
    49ec:	00db      	lsls	r3, r3, #3
    49ee:	4413      	add	r3, r2
    49f0:	685b      	ldr	r3, [r3, #4]
    49f2:	4a23      	ldr	r2, [pc, #140]	; (4a80 <SetSimLpoclksRegister_TrustedCall+0xdc>)
    49f4:	5cd3      	ldrb	r3, [r2, r3]
    49f6:	009b      	lsls	r3, r3, #2
    49f8:	9a03      	ldr	r2, [sp, #12]
    49fa:	4313      	orrs	r3, r2
    49fc:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    49fe:	9b02      	ldr	r3, [sp, #8]
    4a00:	3301      	adds	r3, #1
    4a02:	9302      	str	r3, [sp, #8]
    4a04:	9b01      	ldr	r3, [sp, #4]
    4a06:	7adb      	ldrb	r3, [r3, #11]
    4a08:	461a      	mov	r2, r3
    4a0a:	9b02      	ldr	r3, [sp, #8]
    4a0c:	4293      	cmp	r3, r2
    4a0e:	d3d0      	bcc.n	49b2 <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4a10:	2300      	movs	r3, #0
    4a12:	9302      	str	r3, [sp, #8]
    4a14:	e026      	b.n	4a64 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    4a16:	9a01      	ldr	r2, [sp, #4]
    4a18:	9b02      	ldr	r3, [sp, #8]
    4a1a:	334e      	adds	r3, #78	; 0x4e
    4a1c:	00db      	lsls	r3, r3, #3
    4a1e:	4413      	add	r3, r2
    4a20:	685b      	ldr	r3, [r3, #4]
    4a22:	2b12      	cmp	r3, #18
    4a24:	d109      	bne.n	4a3a <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    4a26:	9a01      	ldr	r2, [sp, #4]
    4a28:	9b02      	ldr	r3, [sp, #8]
    4a2a:	334e      	adds	r3, #78	; 0x4e
    4a2c:	00db      	lsls	r3, r3, #3
    4a2e:	4413      	add	r3, r2
    4a30:	891b      	ldrh	r3, [r3, #8]
    4a32:	005b      	lsls	r3, r3, #1
    4a34:	9a03      	ldr	r2, [sp, #12]
    4a36:	4313      	orrs	r3, r2
    4a38:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    4a3a:	9a01      	ldr	r2, [sp, #4]
    4a3c:	9b02      	ldr	r3, [sp, #8]
    4a3e:	334e      	adds	r3, #78	; 0x4e
    4a40:	00db      	lsls	r3, r3, #3
    4a42:	4413      	add	r3, r2
    4a44:	685b      	ldr	r3, [r3, #4]
    4a46:	2b13      	cmp	r3, #19
    4a48:	d109      	bne.n	4a5e <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    4a4a:	9a01      	ldr	r2, [sp, #4]
    4a4c:	9b02      	ldr	r3, [sp, #8]
    4a4e:	334e      	adds	r3, #78	; 0x4e
    4a50:	00db      	lsls	r3, r3, #3
    4a52:	4413      	add	r3, r2
    4a54:	891b      	ldrh	r3, [r3, #8]
    4a56:	461a      	mov	r2, r3
    4a58:	9b03      	ldr	r3, [sp, #12]
    4a5a:	4313      	orrs	r3, r2
    4a5c:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    4a5e:	9b02      	ldr	r3, [sp, #8]
    4a60:	3301      	adds	r3, #1
    4a62:	9302      	str	r3, [sp, #8]
    4a64:	9b01      	ldr	r3, [sp, #4]
    4a66:	7c1b      	ldrb	r3, [r3, #16]
    4a68:	461a      	mov	r2, r3
    4a6a:	9b02      	ldr	r3, [sp, #8]
    4a6c:	4293      	cmp	r3, r2
    4a6e:	d3d2      	bcc.n	4a16 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    4a70:	4a04      	ldr	r2, [pc, #16]	; (4a84 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    4a72:	9b03      	ldr	r3, [sp, #12]
    4a74:	6113      	str	r3, [r2, #16]
}
    4a76:	bf00      	nop
    4a78:	b004      	add	sp, #16
    4a7a:	4770      	bx	lr
    4a7c:	0000f0e8 	.word	0x0000f0e8
    4a80:	0000f1a0 	.word	0x0000f1a0
    4a84:	40048000 	.word	0x40048000

00004a88 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    4a88:	b500      	push	{lr}
    4a8a:	b089      	sub	sp, #36	; 0x24
    4a8c:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4a8e:	2300      	movs	r3, #0
    4a90:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    4a94:	4a21      	ldr	r2, [pc, #132]	; (4b1c <Clock_Ip_SpecificPlatformInitClock+0x94>)
    4a96:	9b01      	ldr	r3, [sp, #4]
    4a98:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    4a9a:	4b21      	ldr	r3, [pc, #132]	; (4b20 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4a9c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4aa0:	f003 0301 	and.w	r3, r3, #1
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	d12e      	bne.n	4b06 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    4aa8:	4b1e      	ldr	r3, [pc, #120]	; (4b24 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4aaa:	2200      	movs	r2, #0
    4aac:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    4aae:	f7ff ff69 	bl	4984 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4ab2:	aa03      	add	r2, sp, #12
    4ab4:	a904      	add	r1, sp, #16
    4ab6:	a805      	add	r0, sp, #20
    4ab8:	f24c 3350 	movw	r3, #50000	; 0xc350
    4abc:	f7fe f8ae 	bl	2c1c <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4ac0:	4b17      	ldr	r3, [pc, #92]	; (4b20 <Clock_Ip_SpecificPlatformInitClock+0x98>)
    4ac2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4ac6:	0e1b      	lsrs	r3, r3, #24
    4ac8:	f003 0301 	and.w	r3, r3, #1
    4acc:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4ace:	9a03      	ldr	r2, [sp, #12]
    4ad0:	a904      	add	r1, sp, #16
    4ad2:	ab05      	add	r3, sp, #20
    4ad4:	4618      	mov	r0, r3
    4ad6:	f7fe f8bb 	bl	2c50 <Clock_Ip_TimeoutExpired>
    4ada:	4603      	mov	r3, r0
    4adc:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    4ae0:	9b06      	ldr	r3, [sp, #24]
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	d106      	bne.n	4af4 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    4ae6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4aea:	f083 0301 	eor.w	r3, r3, #1
    4aee:	b2db      	uxtb	r3, r3
    4af0:	2b00      	cmp	r3, #0
    4af2:	d1e5      	bne.n	4ac0 <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    4af4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4af8:	2b00      	cmp	r3, #0
    4afa:	d007      	beq.n	4b0c <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    4afc:	2105      	movs	r1, #5
    4afe:	2001      	movs	r0, #1
    4b00:	f7fe f87c 	bl	2bfc <Clock_Ip_ReportClockErrors>
    4b04:	e002      	b.n	4b0c <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    4b06:	4b07      	ldr	r3, [pc, #28]	; (4b24 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    4b08:	2201      	movs	r2, #1
    4b0a:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    4b0c:	9801      	ldr	r0, [sp, #4]
    4b0e:	f7ff ff49 	bl	49a4 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    4b12:	bf00      	nop
    4b14:	b009      	add	sp, #36	; 0x24
    4b16:	f85d fb04 	ldr.w	pc, [sp], #4
    4b1a:	bf00      	nop
    4b1c:	1fff8b9c 	.word	0x1fff8b9c
    4b20:	40064000 	.word	0x40064000
    4b24:	1fff8b20 	.word	0x1fff8b20

00004b28 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    4b28:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    4b2a:	2300      	movs	r3, #0
    4b2c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4b2e:	4b29      	ldr	r3, [pc, #164]	; (4bd4 <getFircConfig+0xac>)
    4b30:	681b      	ldr	r3, [r3, #0]
    4b32:	2b00      	cmp	r3, #0
    4b34:	d024      	beq.n	4b80 <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b36:	2300      	movs	r3, #0
    4b38:	9301      	str	r3, [sp, #4]
    4b3a:	e01a      	b.n	4b72 <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4b3c:	4b25      	ldr	r3, [pc, #148]	; (4bd4 <getFircConfig+0xac>)
    4b3e:	6819      	ldr	r1, [r3, #0]
    4b40:	9a01      	ldr	r2, [sp, #4]
    4b42:	4613      	mov	r3, r2
    4b44:	005b      	lsls	r3, r3, #1
    4b46:	4413      	add	r3, r2
    4b48:	009b      	lsls	r3, r3, #2
    4b4a:	440b      	add	r3, r1
    4b4c:	3314      	adds	r3, #20
    4b4e:	681b      	ldr	r3, [r3, #0]
    4b50:	2b05      	cmp	r3, #5
    4b52:	d10b      	bne.n	4b6c <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    4b54:	4b1f      	ldr	r3, [pc, #124]	; (4bd4 <getFircConfig+0xac>)
    4b56:	6819      	ldr	r1, [r3, #0]
    4b58:	9a01      	ldr	r2, [sp, #4]
    4b5a:	4613      	mov	r3, r2
    4b5c:	005b      	lsls	r3, r3, #1
    4b5e:	4413      	add	r3, r2
    4b60:	009b      	lsls	r3, r3, #2
    4b62:	3310      	adds	r3, #16
    4b64:	440b      	add	r3, r1
    4b66:	3304      	adds	r3, #4
    4b68:	9300      	str	r3, [sp, #0]
                break;
    4b6a:	e009      	b.n	4b80 <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4b6c:	9b01      	ldr	r3, [sp, #4]
    4b6e:	3301      	adds	r3, #1
    4b70:	9301      	str	r3, [sp, #4]
    4b72:	4b18      	ldr	r3, [pc, #96]	; (4bd4 <getFircConfig+0xac>)
    4b74:	681b      	ldr	r3, [r3, #0]
    4b76:	7a1b      	ldrb	r3, [r3, #8]
    4b78:	461a      	mov	r2, r3
    4b7a:	9b01      	ldr	r3, [sp, #4]
    4b7c:	4293      	cmp	r3, r2
    4b7e:	d3dd      	bcc.n	4b3c <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4b80:	9b00      	ldr	r3, [sp, #0]
    4b82:	2b00      	cmp	r3, #0
    4b84:	d121      	bne.n	4bca <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    4b86:	4b14      	ldr	r3, [pc, #80]	; (4bd8 <getFircConfig+0xb0>)
    4b88:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    4b8a:	4b13      	ldr	r3, [pc, #76]	; (4bd8 <getFircConfig+0xb0>)
    4b8c:	2205      	movs	r2, #5
    4b8e:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    4b90:	4b12      	ldr	r3, [pc, #72]	; (4bdc <getFircConfig+0xb4>)
    4b92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4b96:	b29b      	uxth	r3, r3
    4b98:	f003 0301 	and.w	r3, r3, #1
    4b9c:	b29a      	uxth	r2, r3
    4b9e:	4b0e      	ldr	r3, [pc, #56]	; (4bd8 <getFircConfig+0xb0>)
    4ba0:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    4ba2:	4b0e      	ldr	r3, [pc, #56]	; (4bdc <getFircConfig+0xb4>)
    4ba4:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    4ba8:	b2db      	uxtb	r3, r3
    4baa:	f003 0303 	and.w	r3, r3, #3
    4bae:	b2da      	uxtb	r2, r3
    4bb0:	4b09      	ldr	r3, [pc, #36]	; (4bd8 <getFircConfig+0xb0>)
    4bb2:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    4bb4:	4b09      	ldr	r3, [pc, #36]	; (4bdc <getFircConfig+0xb4>)
    4bb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4bba:	b2db      	uxtb	r3, r3
    4bbc:	10db      	asrs	r3, r3, #3
    4bbe:	b2db      	uxtb	r3, r3
    4bc0:	f003 0301 	and.w	r3, r3, #1
    4bc4:	b2da      	uxtb	r2, r3
    4bc6:	4b04      	ldr	r3, [pc, #16]	; (4bd8 <getFircConfig+0xb0>)
    4bc8:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    4bca:	9b00      	ldr	r3, [sp, #0]
}
    4bcc:	4618      	mov	r0, r3
    4bce:	b002      	add	sp, #8
    4bd0:	4770      	bx	lr
    4bd2:	bf00      	nop
    4bd4:	1fff8b9c 	.word	0x1fff8b9c
    4bd8:	1fff8c08 	.word	0x1fff8c08
    4bdc:	40064000 	.word	0x40064000

00004be0 <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    4be0:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    4be2:	2300      	movs	r3, #0
    4be4:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4be6:	4b20      	ldr	r3, [pc, #128]	; (4c68 <getSoscConfig+0x88>)
    4be8:	681b      	ldr	r3, [r3, #0]
    4bea:	2b00      	cmp	r3, #0
    4bec:	d024      	beq.n	4c38 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4bee:	2300      	movs	r3, #0
    4bf0:	9301      	str	r3, [sp, #4]
    4bf2:	e01a      	b.n	4c2a <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    4bf4:	4b1c      	ldr	r3, [pc, #112]	; (4c68 <getSoscConfig+0x88>)
    4bf6:	6819      	ldr	r1, [r3, #0]
    4bf8:	9a01      	ldr	r2, [sp, #4]
    4bfa:	4613      	mov	r3, r2
    4bfc:	009b      	lsls	r3, r3, #2
    4bfe:	4413      	add	r3, r2
    4c00:	009b      	lsls	r3, r3, #2
    4c02:	440b      	add	r3, r1
    4c04:	332c      	adds	r3, #44	; 0x2c
    4c06:	681b      	ldr	r3, [r3, #0]
    4c08:	2b08      	cmp	r3, #8
    4c0a:	d10b      	bne.n	4c24 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    4c0c:	4b16      	ldr	r3, [pc, #88]	; (4c68 <getSoscConfig+0x88>)
    4c0e:	6819      	ldr	r1, [r3, #0]
    4c10:	9a01      	ldr	r2, [sp, #4]
    4c12:	4613      	mov	r3, r2
    4c14:	009b      	lsls	r3, r3, #2
    4c16:	4413      	add	r3, r2
    4c18:	009b      	lsls	r3, r3, #2
    4c1a:	3328      	adds	r3, #40	; 0x28
    4c1c:	440b      	add	r3, r1
    4c1e:	3304      	adds	r3, #4
    4c20:	9300      	str	r3, [sp, #0]
                break;
    4c22:	e009      	b.n	4c38 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    4c24:	9b01      	ldr	r3, [sp, #4]
    4c26:	3301      	adds	r3, #1
    4c28:	9301      	str	r3, [sp, #4]
    4c2a:	4b0f      	ldr	r3, [pc, #60]	; (4c68 <getSoscConfig+0x88>)
    4c2c:	681b      	ldr	r3, [r3, #0]
    4c2e:	7a5b      	ldrb	r3, [r3, #9]
    4c30:	461a      	mov	r2, r3
    4c32:	9b01      	ldr	r3, [sp, #4]
    4c34:	4293      	cmp	r3, r2
    4c36:	d3dd      	bcc.n	4bf4 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4c38:	9b00      	ldr	r3, [sp, #0]
    4c3a:	2b00      	cmp	r3, #0
    4c3c:	d110      	bne.n	4c60 <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    4c3e:	4b0b      	ldr	r3, [pc, #44]	; (4c6c <getSoscConfig+0x8c>)
    4c40:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    4c42:	4b0a      	ldr	r3, [pc, #40]	; (4c6c <getSoscConfig+0x8c>)
    4c44:	2208      	movs	r2, #8
    4c46:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    4c48:	4b09      	ldr	r3, [pc, #36]	; (4c70 <getSoscConfig+0x90>)
    4c4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    4c4e:	b29b      	uxth	r3, r3
    4c50:	f003 0301 	and.w	r3, r3, #1
    4c54:	b29a      	uxth	r2, r3
    4c56:	4b05      	ldr	r3, [pc, #20]	; (4c6c <getSoscConfig+0x8c>)
    4c58:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    4c5a:	4b04      	ldr	r3, [pc, #16]	; (4c6c <getSoscConfig+0x8c>)
    4c5c:	4a05      	ldr	r2, [pc, #20]	; (4c74 <getSoscConfig+0x94>)
    4c5e:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    4c60:	9b00      	ldr	r3, [sp, #0]
}
    4c62:	4618      	mov	r0, r3
    4c64:	b002      	add	sp, #8
    4c66:	4770      	bx	lr
    4c68:	1fff8b9c 	.word	0x1fff8b9c
    4c6c:	1fff8c14 	.word	0x1fff8c14
    4c70:	40064000 	.word	0x40064000
    4c74:	02625a00 	.word	0x02625a00

00004c78 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    4c78:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    4c7a:	2300      	movs	r3, #0
    4c7c:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    4c7e:	4b28      	ldr	r3, [pc, #160]	; (4d20 <getSpllConfig+0xa8>)
    4c80:	681b      	ldr	r3, [r3, #0]
    4c82:	2b00      	cmp	r3, #0
    4c84:	d023      	beq.n	4cce <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4c86:	2300      	movs	r3, #0
    4c88:	9301      	str	r3, [sp, #4]
    4c8a:	e019      	b.n	4cc0 <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    4c8c:	4b24      	ldr	r3, [pc, #144]	; (4d20 <getSpllConfig+0xa8>)
    4c8e:	6819      	ldr	r1, [r3, #0]
    4c90:	9a01      	ldr	r2, [sp, #4]
    4c92:	4613      	mov	r3, r2
    4c94:	009b      	lsls	r3, r3, #2
    4c96:	4413      	add	r3, r2
    4c98:	00db      	lsls	r3, r3, #3
    4c9a:	440b      	add	r3, r1
    4c9c:	3340      	adds	r3, #64	; 0x40
    4c9e:	681b      	ldr	r3, [r3, #0]
    4ca0:	2b09      	cmp	r3, #9
    4ca2:	d10a      	bne.n	4cba <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    4ca4:	4b1e      	ldr	r3, [pc, #120]	; (4d20 <getSpllConfig+0xa8>)
    4ca6:	6819      	ldr	r1, [r3, #0]
    4ca8:	9a01      	ldr	r2, [sp, #4]
    4caa:	4613      	mov	r3, r2
    4cac:	009b      	lsls	r3, r3, #2
    4cae:	4413      	add	r3, r2
    4cb0:	00db      	lsls	r3, r3, #3
    4cb2:	3340      	adds	r3, #64	; 0x40
    4cb4:	440b      	add	r3, r1
    4cb6:	9300      	str	r3, [sp, #0]
                break;
    4cb8:	e009      	b.n	4cce <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    4cba:	9b01      	ldr	r3, [sp, #4]
    4cbc:	3301      	adds	r3, #1
    4cbe:	9301      	str	r3, [sp, #4]
    4cc0:	4b17      	ldr	r3, [pc, #92]	; (4d20 <getSpllConfig+0xa8>)
    4cc2:	681b      	ldr	r3, [r3, #0]
    4cc4:	7a9b      	ldrb	r3, [r3, #10]
    4cc6:	461a      	mov	r2, r3
    4cc8:	9b01      	ldr	r3, [sp, #4]
    4cca:	4293      	cmp	r3, r2
    4ccc:	d3de      	bcc.n	4c8c <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4cce:	9b00      	ldr	r3, [sp, #0]
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d121      	bne.n	4d18 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    4cd4:	4b13      	ldr	r3, [pc, #76]	; (4d24 <getSpllConfig+0xac>)
    4cd6:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    4cd8:	4b12      	ldr	r3, [pc, #72]	; (4d24 <getSpllConfig+0xac>)
    4cda:	2209      	movs	r2, #9
    4cdc:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    4cde:	4b12      	ldr	r3, [pc, #72]	; (4d28 <getSpllConfig+0xb0>)
    4ce0:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4ce4:	b29b      	uxth	r3, r3
    4ce6:	f003 0301 	and.w	r3, r3, #1
    4cea:	b29a      	uxth	r2, r3
    4cec:	4b0d      	ldr	r3, [pc, #52]	; (4d24 <getSpllConfig+0xac>)
    4cee:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    4cf0:	4b0d      	ldr	r3, [pc, #52]	; (4d28 <getSpllConfig+0xb0>)
    4cf2:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4cf6:	0a1b      	lsrs	r3, r3, #8
    4cf8:	b2db      	uxtb	r3, r3
    4cfa:	f003 0307 	and.w	r3, r3, #7
    4cfe:	b2da      	uxtb	r2, r3
    4d00:	4b08      	ldr	r3, [pc, #32]	; (4d24 <getSpllConfig+0xac>)
    4d02:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    4d04:	4b08      	ldr	r3, [pc, #32]	; (4d28 <getSpllConfig+0xb0>)
    4d06:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4d0a:	0c1b      	lsrs	r3, r3, #16
    4d0c:	b2db      	uxtb	r3, r3
    4d0e:	f003 031f 	and.w	r3, r3, #31
    4d12:	b2da      	uxtb	r2, r3
    4d14:	4b03      	ldr	r3, [pc, #12]	; (4d24 <getSpllConfig+0xac>)
    4d16:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    4d18:	9b00      	ldr	r3, [sp, #0]
}
    4d1a:	4618      	mov	r0, r3
    4d1c:	b002      	add	sp, #8
    4d1e:	4770      	bx	lr
    4d20:	1fff8b9c 	.word	0x1fff8b9c
    4d24:	1fff8c28 	.word	0x1fff8c28
    4d28:	40064000 	.word	0x40064000

00004d2c <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    4d2c:	b086      	sub	sp, #24
    4d2e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    4d30:	2300      	movs	r3, #0
    4d32:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    4d34:	9b01      	ldr	r3, [sp, #4]
    4d36:	2b1b      	cmp	r3, #27
    4d38:	d00f      	beq.n	4d5a <getSelectorConfig+0x2e>
    4d3a:	9b01      	ldr	r3, [sp, #4]
    4d3c:	2b1b      	cmp	r3, #27
    4d3e:	d80f      	bhi.n	4d60 <getSelectorConfig+0x34>
    4d40:	9b01      	ldr	r3, [sp, #4]
    4d42:	2b19      	cmp	r3, #25
    4d44:	d003      	beq.n	4d4e <getSelectorConfig+0x22>
    4d46:	9b01      	ldr	r3, [sp, #4]
    4d48:	2b1a      	cmp	r3, #26
    4d4a:	d003      	beq.n	4d54 <getSelectorConfig+0x28>
    4d4c:	e008      	b.n	4d60 <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    4d4e:	2300      	movs	r3, #0
    4d50:	9304      	str	r3, [sp, #16]
            break;
    4d52:	e008      	b.n	4d66 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    4d54:	2301      	movs	r3, #1
    4d56:	9304      	str	r3, [sp, #16]
            break;
    4d58:	e005      	b.n	4d66 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    4d5a:	2302      	movs	r3, #2
    4d5c:	9304      	str	r3, [sp, #16]
            break;
    4d5e:	e002      	b.n	4d66 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    4d60:	2300      	movs	r3, #0
    4d62:	9304      	str	r3, [sp, #16]
            break;
    4d64:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4d66:	4b36      	ldr	r3, [pc, #216]	; (4e40 <getSelectorConfig+0x114>)
    4d68:	681b      	ldr	r3, [r3, #0]
    4d6a:	2b00      	cmp	r3, #0
    4d6c:	d01d      	beq.n	4daa <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d6e:	2300      	movs	r3, #0
    4d70:	9303      	str	r3, [sp, #12]
    4d72:	e013      	b.n	4d9c <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    4d74:	4b32      	ldr	r3, [pc, #200]	; (4e40 <getSelectorConfig+0x114>)
    4d76:	681b      	ldr	r3, [r3, #0]
    4d78:	9a03      	ldr	r2, [sp, #12]
    4d7a:	320d      	adds	r2, #13
    4d7c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4d80:	9a01      	ldr	r2, [sp, #4]
    4d82:	429a      	cmp	r2, r3
    4d84:	d107      	bne.n	4d96 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    4d86:	4b2e      	ldr	r3, [pc, #184]	; (4e40 <getSelectorConfig+0x114>)
    4d88:	681a      	ldr	r2, [r3, #0]
    4d8a:	9b03      	ldr	r3, [sp, #12]
    4d8c:	330d      	adds	r3, #13
    4d8e:	00db      	lsls	r3, r3, #3
    4d90:	4413      	add	r3, r2
    4d92:	9305      	str	r3, [sp, #20]
                break;
    4d94:	e009      	b.n	4daa <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    4d96:	9b03      	ldr	r3, [sp, #12]
    4d98:	3301      	adds	r3, #1
    4d9a:	9303      	str	r3, [sp, #12]
    4d9c:	4b28      	ldr	r3, [pc, #160]	; (4e40 <getSelectorConfig+0x114>)
    4d9e:	681b      	ldr	r3, [r3, #0]
    4da0:	7adb      	ldrb	r3, [r3, #11]
    4da2:	461a      	mov	r2, r3
    4da4:	9b03      	ldr	r3, [sp, #12]
    4da6:	4293      	cmp	r3, r2
    4da8:	d3e4      	bcc.n	4d74 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4daa:	9b05      	ldr	r3, [sp, #20]
    4dac:	2b00      	cmp	r3, #0
    4dae:	d140      	bne.n	4e32 <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    4db0:	9b04      	ldr	r3, [sp, #16]
    4db2:	00db      	lsls	r3, r3, #3
    4db4:	4a23      	ldr	r2, [pc, #140]	; (4e44 <getSelectorConfig+0x118>)
    4db6:	4413      	add	r3, r2
    4db8:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    4dba:	4922      	ldr	r1, [pc, #136]	; (4e44 <getSelectorConfig+0x118>)
    4dbc:	9b04      	ldr	r3, [sp, #16]
    4dbe:	9a01      	ldr	r2, [sp, #4]
    4dc0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    4dc4:	9b01      	ldr	r3, [sp, #4]
    4dc6:	2b1b      	cmp	r3, #27
    4dc8:	d025      	beq.n	4e16 <getSelectorConfig+0xea>
    4dca:	9b01      	ldr	r3, [sp, #4]
    4dcc:	2b1b      	cmp	r3, #27
    4dce:	d832      	bhi.n	4e36 <getSelectorConfig+0x10a>
    4dd0:	9b01      	ldr	r3, [sp, #4]
    4dd2:	2b19      	cmp	r3, #25
    4dd4:	d003      	beq.n	4dde <getSelectorConfig+0xb2>
    4dd6:	9b01      	ldr	r3, [sp, #4]
    4dd8:	2b1a      	cmp	r3, #26
    4dda:	d00e      	beq.n	4dfa <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4ddc:	e02b      	b.n	4e36 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    4dde:	4b1a      	ldr	r3, [pc, #104]	; (4e48 <getSelectorConfig+0x11c>)
    4de0:	695b      	ldr	r3, [r3, #20]
    4de2:	0e1b      	lsrs	r3, r3, #24
    4de4:	f003 030f 	and.w	r3, r3, #15
    4de8:	4a18      	ldr	r2, [pc, #96]	; (4e4c <getSelectorConfig+0x120>)
    4dea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4dee:	4915      	ldr	r1, [pc, #84]	; (4e44 <getSelectorConfig+0x118>)
    4df0:	9b04      	ldr	r3, [sp, #16]
    4df2:	00db      	lsls	r3, r3, #3
    4df4:	440b      	add	r3, r1
    4df6:	605a      	str	r2, [r3, #4]
                break;
    4df8:	e01e      	b.n	4e38 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    4dfa:	4b13      	ldr	r3, [pc, #76]	; (4e48 <getSelectorConfig+0x11c>)
    4dfc:	699b      	ldr	r3, [r3, #24]
    4dfe:	0e1b      	lsrs	r3, r3, #24
    4e00:	f003 030f 	and.w	r3, r3, #15
    4e04:	4a11      	ldr	r2, [pc, #68]	; (4e4c <getSelectorConfig+0x120>)
    4e06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4e0a:	490e      	ldr	r1, [pc, #56]	; (4e44 <getSelectorConfig+0x118>)
    4e0c:	9b04      	ldr	r3, [sp, #16]
    4e0e:	00db      	lsls	r3, r3, #3
    4e10:	440b      	add	r3, r1
    4e12:	605a      	str	r2, [r3, #4]
                break;
    4e14:	e010      	b.n	4e38 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    4e16:	4b0c      	ldr	r3, [pc, #48]	; (4e48 <getSelectorConfig+0x11c>)
    4e18:	69db      	ldr	r3, [r3, #28]
    4e1a:	0e1b      	lsrs	r3, r3, #24
    4e1c:	f003 030f 	and.w	r3, r3, #15
    4e20:	4a0a      	ldr	r2, [pc, #40]	; (4e4c <getSelectorConfig+0x120>)
    4e22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4e26:	4907      	ldr	r1, [pc, #28]	; (4e44 <getSelectorConfig+0x118>)
    4e28:	9b04      	ldr	r3, [sp, #16]
    4e2a:	00db      	lsls	r3, r3, #3
    4e2c:	440b      	add	r3, r1
    4e2e:	605a      	str	r2, [r3, #4]
                break;
    4e30:	e002      	b.n	4e38 <getSelectorConfig+0x10c>
        }
    }
    4e32:	bf00      	nop
    4e34:	e000      	b.n	4e38 <getSelectorConfig+0x10c>
                break;
    4e36:	bf00      	nop

    return ReturnValue;
    4e38:	9b05      	ldr	r3, [sp, #20]
}
    4e3a:	4618      	mov	r0, r3
    4e3c:	b006      	add	sp, #24
    4e3e:	4770      	bx	lr
    4e40:	1fff8b9c 	.word	0x1fff8b9c
    4e44:	1fff8c50 	.word	0x1fff8c50
    4e48:	40064000 	.word	0x40064000
    4e4c:	0000f468 	.word	0x0000f468

00004e50 <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    4e50:	b086      	sub	sp, #24
    4e52:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4e54:	2300      	movs	r3, #0
    4e56:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4e58:	2300      	movs	r3, #0
    4e5a:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4e5c:	9b01      	ldr	r3, [sp, #4]
    4e5e:	2b1f      	cmp	r3, #31
    4e60:	d00f      	beq.n	4e82 <getCoreDividerConfig+0x32>
    4e62:	9b01      	ldr	r3, [sp, #4]
    4e64:	2b1f      	cmp	r3, #31
    4e66:	d80f      	bhi.n	4e88 <getCoreDividerConfig+0x38>
    4e68:	9b01      	ldr	r3, [sp, #4]
    4e6a:	2b1d      	cmp	r3, #29
    4e6c:	d003      	beq.n	4e76 <getCoreDividerConfig+0x26>
    4e6e:	9b01      	ldr	r3, [sp, #4]
    4e70:	2b1e      	cmp	r3, #30
    4e72:	d003      	beq.n	4e7c <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4e74:	e008      	b.n	4e88 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4e76:	2300      	movs	r3, #0
    4e78:	9304      	str	r3, [sp, #16]
            break;
    4e7a:	e006      	b.n	4e8a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4e7c:	2301      	movs	r3, #1
    4e7e:	9304      	str	r3, [sp, #16]
            break;
    4e80:	e003      	b.n	4e8a <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4e82:	2302      	movs	r3, #2
    4e84:	9304      	str	r3, [sp, #16]
            break;
    4e86:	e000      	b.n	4e8a <getCoreDividerConfig+0x3a>
                break;
    4e88:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4e8a:	4b41      	ldr	r3, [pc, #260]	; (4f90 <getCoreDividerConfig+0x140>)
    4e8c:	681b      	ldr	r3, [r3, #0]
    4e8e:	2b00      	cmp	r3, #0
    4e90:	d026      	beq.n	4ee0 <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4e92:	2300      	movs	r3, #0
    4e94:	9303      	str	r3, [sp, #12]
    4e96:	e01c      	b.n	4ed2 <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4e98:	4b3d      	ldr	r3, [pc, #244]	; (4f90 <getCoreDividerConfig+0x140>)
    4e9a:	6819      	ldr	r1, [r3, #0]
    4e9c:	9a03      	ldr	r2, [sp, #12]
    4e9e:	4613      	mov	r3, r2
    4ea0:	005b      	lsls	r3, r3, #1
    4ea2:	4413      	add	r3, r2
    4ea4:	009b      	lsls	r3, r3, #2
    4ea6:	440b      	add	r3, r1
    4ea8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4eac:	681b      	ldr	r3, [r3, #0]
    4eae:	9a01      	ldr	r2, [sp, #4]
    4eb0:	429a      	cmp	r2, r3
    4eb2:	d10b      	bne.n	4ecc <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    4eb4:	4b36      	ldr	r3, [pc, #216]	; (4f90 <getCoreDividerConfig+0x140>)
    4eb6:	6819      	ldr	r1, [r3, #0]
    4eb8:	9a03      	ldr	r2, [sp, #12]
    4eba:	4613      	mov	r3, r2
    4ebc:	005b      	lsls	r3, r3, #1
    4ebe:	4413      	add	r3, r2
    4ec0:	009b      	lsls	r3, r3, #2
    4ec2:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4ec6:	440b      	add	r3, r1
    4ec8:	9305      	str	r3, [sp, #20]
                break;
    4eca:	e009      	b.n	4ee0 <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4ecc:	9b03      	ldr	r3, [sp, #12]
    4ece:	3301      	adds	r3, #1
    4ed0:	9303      	str	r3, [sp, #12]
    4ed2:	4b2f      	ldr	r3, [pc, #188]	; (4f90 <getCoreDividerConfig+0x140>)
    4ed4:	681b      	ldr	r3, [r3, #0]
    4ed6:	7b1b      	ldrb	r3, [r3, #12]
    4ed8:	461a      	mov	r2, r3
    4eda:	9b03      	ldr	r3, [sp, #12]
    4edc:	4293      	cmp	r3, r2
    4ede:	d3db      	bcc.n	4e98 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    4ee0:	9b05      	ldr	r3, [sp, #20]
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d14d      	bne.n	4f82 <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    4ee6:	9a04      	ldr	r2, [sp, #16]
    4ee8:	4613      	mov	r3, r2
    4eea:	005b      	lsls	r3, r3, #1
    4eec:	4413      	add	r3, r2
    4eee:	009b      	lsls	r3, r3, #2
    4ef0:	4a28      	ldr	r2, [pc, #160]	; (4f94 <getCoreDividerConfig+0x144>)
    4ef2:	4413      	add	r3, r2
    4ef4:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    4ef6:	4927      	ldr	r1, [pc, #156]	; (4f94 <getCoreDividerConfig+0x144>)
    4ef8:	9a04      	ldr	r2, [sp, #16]
    4efa:	4613      	mov	r3, r2
    4efc:	005b      	lsls	r3, r3, #1
    4efe:	4413      	add	r3, r2
    4f00:	009b      	lsls	r3, r3, #2
    4f02:	440b      	add	r3, r1
    4f04:	9a01      	ldr	r2, [sp, #4]
    4f06:	601a      	str	r2, [r3, #0]
        switch(Name)
    4f08:	9b01      	ldr	r3, [sp, #4]
    4f0a:	2b1f      	cmp	r3, #31
    4f0c:	d029      	beq.n	4f62 <getCoreDividerConfig+0x112>
    4f0e:	9b01      	ldr	r3, [sp, #4]
    4f10:	2b1f      	cmp	r3, #31
    4f12:	d838      	bhi.n	4f86 <getCoreDividerConfig+0x136>
    4f14:	9b01      	ldr	r3, [sp, #4]
    4f16:	2b1d      	cmp	r3, #29
    4f18:	d003      	beq.n	4f22 <getCoreDividerConfig+0xd2>
    4f1a:	9b01      	ldr	r3, [sp, #4]
    4f1c:	2b1e      	cmp	r3, #30
    4f1e:	d010      	beq.n	4f42 <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    4f20:	e031      	b.n	4f86 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    4f22:	4b1d      	ldr	r3, [pc, #116]	; (4f98 <getCoreDividerConfig+0x148>)
    4f24:	695b      	ldr	r3, [r3, #20]
    4f26:	0c1b      	lsrs	r3, r3, #16
    4f28:	f003 030f 	and.w	r3, r3, #15
    4f2c:	1c59      	adds	r1, r3, #1
    4f2e:	4819      	ldr	r0, [pc, #100]	; (4f94 <getCoreDividerConfig+0x144>)
    4f30:	9a04      	ldr	r2, [sp, #16]
    4f32:	4613      	mov	r3, r2
    4f34:	005b      	lsls	r3, r3, #1
    4f36:	4413      	add	r3, r2
    4f38:	009b      	lsls	r3, r3, #2
    4f3a:	4403      	add	r3, r0
    4f3c:	3304      	adds	r3, #4
    4f3e:	6019      	str	r1, [r3, #0]
                break;
    4f40:	e022      	b.n	4f88 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    4f42:	4b15      	ldr	r3, [pc, #84]	; (4f98 <getCoreDividerConfig+0x148>)
    4f44:	699b      	ldr	r3, [r3, #24]
    4f46:	0c1b      	lsrs	r3, r3, #16
    4f48:	f003 030f 	and.w	r3, r3, #15
    4f4c:	1c59      	adds	r1, r3, #1
    4f4e:	4811      	ldr	r0, [pc, #68]	; (4f94 <getCoreDividerConfig+0x144>)
    4f50:	9a04      	ldr	r2, [sp, #16]
    4f52:	4613      	mov	r3, r2
    4f54:	005b      	lsls	r3, r3, #1
    4f56:	4413      	add	r3, r2
    4f58:	009b      	lsls	r3, r3, #2
    4f5a:	4403      	add	r3, r0
    4f5c:	3304      	adds	r3, #4
    4f5e:	6019      	str	r1, [r3, #0]
                break;
    4f60:	e012      	b.n	4f88 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    4f62:	4b0d      	ldr	r3, [pc, #52]	; (4f98 <getCoreDividerConfig+0x148>)
    4f64:	69db      	ldr	r3, [r3, #28]
    4f66:	0c1b      	lsrs	r3, r3, #16
    4f68:	f003 030f 	and.w	r3, r3, #15
    4f6c:	1c59      	adds	r1, r3, #1
    4f6e:	4809      	ldr	r0, [pc, #36]	; (4f94 <getCoreDividerConfig+0x144>)
    4f70:	9a04      	ldr	r2, [sp, #16]
    4f72:	4613      	mov	r3, r2
    4f74:	005b      	lsls	r3, r3, #1
    4f76:	4413      	add	r3, r2
    4f78:	009b      	lsls	r3, r3, #2
    4f7a:	4403      	add	r3, r0
    4f7c:	3304      	adds	r3, #4
    4f7e:	6019      	str	r1, [r3, #0]
                break;
    4f80:	e002      	b.n	4f88 <getCoreDividerConfig+0x138>
        }
    }
    4f82:	bf00      	nop
    4f84:	e000      	b.n	4f88 <getCoreDividerConfig+0x138>
                break;
    4f86:	bf00      	nop

    return ReturnValue;
    4f88:	9b05      	ldr	r3, [sp, #20]
}
    4f8a:	4618      	mov	r0, r3
    4f8c:	b006      	add	sp, #24
    4f8e:	4770      	bx	lr
    4f90:	1fff8b9c 	.word	0x1fff8b9c
    4f94:	1fff8c68 	.word	0x1fff8c68
    4f98:	40064000 	.word	0x40064000

00004f9c <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    4f9c:	b086      	sub	sp, #24
    4f9e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    4fa0:	2300      	movs	r3, #0
    4fa2:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    4fa4:	2300      	movs	r3, #0
    4fa6:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    4fa8:	9b01      	ldr	r3, [sp, #4]
    4faa:	2b23      	cmp	r3, #35	; 0x23
    4fac:	d00f      	beq.n	4fce <getBusDividerConfig+0x32>
    4fae:	9b01      	ldr	r3, [sp, #4]
    4fb0:	2b23      	cmp	r3, #35	; 0x23
    4fb2:	d80f      	bhi.n	4fd4 <getBusDividerConfig+0x38>
    4fb4:	9b01      	ldr	r3, [sp, #4]
    4fb6:	2b21      	cmp	r3, #33	; 0x21
    4fb8:	d003      	beq.n	4fc2 <getBusDividerConfig+0x26>
    4fba:	9b01      	ldr	r3, [sp, #4]
    4fbc:	2b22      	cmp	r3, #34	; 0x22
    4fbe:	d003      	beq.n	4fc8 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    4fc0:	e008      	b.n	4fd4 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    4fc2:	2300      	movs	r3, #0
    4fc4:	9304      	str	r3, [sp, #16]
            break;
    4fc6:	e006      	b.n	4fd6 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    4fc8:	2301      	movs	r3, #1
    4fca:	9304      	str	r3, [sp, #16]
            break;
    4fcc:	e003      	b.n	4fd6 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    4fce:	2302      	movs	r3, #2
    4fd0:	9304      	str	r3, [sp, #16]
            break;
    4fd2:	e000      	b.n	4fd6 <getBusDividerConfig+0x3a>
                break;
    4fd4:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    4fd6:	4b41      	ldr	r3, [pc, #260]	; (50dc <getBusDividerConfig+0x140>)
    4fd8:	681b      	ldr	r3, [r3, #0]
    4fda:	2b00      	cmp	r3, #0
    4fdc:	d026      	beq.n	502c <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    4fde:	2300      	movs	r3, #0
    4fe0:	9303      	str	r3, [sp, #12]
    4fe2:	e01c      	b.n	501e <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    4fe4:	4b3d      	ldr	r3, [pc, #244]	; (50dc <getBusDividerConfig+0x140>)
    4fe6:	6819      	ldr	r1, [r3, #0]
    4fe8:	9a03      	ldr	r2, [sp, #12]
    4fea:	4613      	mov	r3, r2
    4fec:	005b      	lsls	r3, r3, #1
    4fee:	4413      	add	r3, r2
    4ff0:	009b      	lsls	r3, r3, #2
    4ff2:	440b      	add	r3, r1
    4ff4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    4ff8:	681b      	ldr	r3, [r3, #0]
    4ffa:	9a01      	ldr	r2, [sp, #4]
    4ffc:	429a      	cmp	r2, r3
    4ffe:	d10b      	bne.n	5018 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5000:	4b36      	ldr	r3, [pc, #216]	; (50dc <getBusDividerConfig+0x140>)
    5002:	6819      	ldr	r1, [r3, #0]
    5004:	9a03      	ldr	r2, [sp, #12]
    5006:	4613      	mov	r3, r2
    5008:	005b      	lsls	r3, r3, #1
    500a:	4413      	add	r3, r2
    500c:	009b      	lsls	r3, r3, #2
    500e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5012:	440b      	add	r3, r1
    5014:	9305      	str	r3, [sp, #20]
                break;
    5016:	e009      	b.n	502c <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5018:	9b03      	ldr	r3, [sp, #12]
    501a:	3301      	adds	r3, #1
    501c:	9303      	str	r3, [sp, #12]
    501e:	4b2f      	ldr	r3, [pc, #188]	; (50dc <getBusDividerConfig+0x140>)
    5020:	681b      	ldr	r3, [r3, #0]
    5022:	7b1b      	ldrb	r3, [r3, #12]
    5024:	461a      	mov	r2, r3
    5026:	9b03      	ldr	r3, [sp, #12]
    5028:	4293      	cmp	r3, r2
    502a:	d3db      	bcc.n	4fe4 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    502c:	9b05      	ldr	r3, [sp, #20]
    502e:	2b00      	cmp	r3, #0
    5030:	d14d      	bne.n	50ce <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    5032:	9a04      	ldr	r2, [sp, #16]
    5034:	4613      	mov	r3, r2
    5036:	005b      	lsls	r3, r3, #1
    5038:	4413      	add	r3, r2
    503a:	009b      	lsls	r3, r3, #2
    503c:	4a28      	ldr	r2, [pc, #160]	; (50e0 <getBusDividerConfig+0x144>)
    503e:	4413      	add	r3, r2
    5040:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    5042:	4927      	ldr	r1, [pc, #156]	; (50e0 <getBusDividerConfig+0x144>)
    5044:	9a04      	ldr	r2, [sp, #16]
    5046:	4613      	mov	r3, r2
    5048:	005b      	lsls	r3, r3, #1
    504a:	4413      	add	r3, r2
    504c:	009b      	lsls	r3, r3, #2
    504e:	440b      	add	r3, r1
    5050:	9a01      	ldr	r2, [sp, #4]
    5052:	601a      	str	r2, [r3, #0]
        switch(Name)
    5054:	9b01      	ldr	r3, [sp, #4]
    5056:	2b23      	cmp	r3, #35	; 0x23
    5058:	d029      	beq.n	50ae <getBusDividerConfig+0x112>
    505a:	9b01      	ldr	r3, [sp, #4]
    505c:	2b23      	cmp	r3, #35	; 0x23
    505e:	d838      	bhi.n	50d2 <getBusDividerConfig+0x136>
    5060:	9b01      	ldr	r3, [sp, #4]
    5062:	2b21      	cmp	r3, #33	; 0x21
    5064:	d003      	beq.n	506e <getBusDividerConfig+0xd2>
    5066:	9b01      	ldr	r3, [sp, #4]
    5068:	2b22      	cmp	r3, #34	; 0x22
    506a:	d010      	beq.n	508e <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    506c:	e031      	b.n	50d2 <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    506e:	4b1d      	ldr	r3, [pc, #116]	; (50e4 <getBusDividerConfig+0x148>)
    5070:	695b      	ldr	r3, [r3, #20]
    5072:	091b      	lsrs	r3, r3, #4
    5074:	f003 030f 	and.w	r3, r3, #15
    5078:	1c59      	adds	r1, r3, #1
    507a:	4819      	ldr	r0, [pc, #100]	; (50e0 <getBusDividerConfig+0x144>)
    507c:	9a04      	ldr	r2, [sp, #16]
    507e:	4613      	mov	r3, r2
    5080:	005b      	lsls	r3, r3, #1
    5082:	4413      	add	r3, r2
    5084:	009b      	lsls	r3, r3, #2
    5086:	4403      	add	r3, r0
    5088:	3304      	adds	r3, #4
    508a:	6019      	str	r1, [r3, #0]
                break;
    508c:	e022      	b.n	50d4 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    508e:	4b15      	ldr	r3, [pc, #84]	; (50e4 <getBusDividerConfig+0x148>)
    5090:	699b      	ldr	r3, [r3, #24]
    5092:	091b      	lsrs	r3, r3, #4
    5094:	f003 030f 	and.w	r3, r3, #15
    5098:	1c59      	adds	r1, r3, #1
    509a:	4811      	ldr	r0, [pc, #68]	; (50e0 <getBusDividerConfig+0x144>)
    509c:	9a04      	ldr	r2, [sp, #16]
    509e:	4613      	mov	r3, r2
    50a0:	005b      	lsls	r3, r3, #1
    50a2:	4413      	add	r3, r2
    50a4:	009b      	lsls	r3, r3, #2
    50a6:	4403      	add	r3, r0
    50a8:	3304      	adds	r3, #4
    50aa:	6019      	str	r1, [r3, #0]
                break;
    50ac:	e012      	b.n	50d4 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    50ae:	4b0d      	ldr	r3, [pc, #52]	; (50e4 <getBusDividerConfig+0x148>)
    50b0:	69db      	ldr	r3, [r3, #28]
    50b2:	091b      	lsrs	r3, r3, #4
    50b4:	f003 030f 	and.w	r3, r3, #15
    50b8:	1c59      	adds	r1, r3, #1
    50ba:	4809      	ldr	r0, [pc, #36]	; (50e0 <getBusDividerConfig+0x144>)
    50bc:	9a04      	ldr	r2, [sp, #16]
    50be:	4613      	mov	r3, r2
    50c0:	005b      	lsls	r3, r3, #1
    50c2:	4413      	add	r3, r2
    50c4:	009b      	lsls	r3, r3, #2
    50c6:	4403      	add	r3, r0
    50c8:	3304      	adds	r3, #4
    50ca:	6019      	str	r1, [r3, #0]
                break;
    50cc:	e002      	b.n	50d4 <getBusDividerConfig+0x138>
        }
    }
    50ce:	bf00      	nop
    50d0:	e000      	b.n	50d4 <getBusDividerConfig+0x138>
                break;
    50d2:	bf00      	nop

    return ReturnValue;
    50d4:	9b05      	ldr	r3, [sp, #20]
}
    50d6:	4618      	mov	r0, r3
    50d8:	b006      	add	sp, #24
    50da:	4770      	bx	lr
    50dc:	1fff8b9c 	.word	0x1fff8b9c
    50e0:	1fff8c8c 	.word	0x1fff8c8c
    50e4:	40064000 	.word	0x40064000

000050e8 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    50e8:	b086      	sub	sp, #24
    50ea:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    50ec:	2300      	movs	r3, #0
    50ee:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    50f0:	2300      	movs	r3, #0
    50f2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    50f4:	9b01      	ldr	r3, [sp, #4]
    50f6:	2b27      	cmp	r3, #39	; 0x27
    50f8:	d00f      	beq.n	511a <getSlowDividerConfig+0x32>
    50fa:	9b01      	ldr	r3, [sp, #4]
    50fc:	2b27      	cmp	r3, #39	; 0x27
    50fe:	d80f      	bhi.n	5120 <getSlowDividerConfig+0x38>
    5100:	9b01      	ldr	r3, [sp, #4]
    5102:	2b25      	cmp	r3, #37	; 0x25
    5104:	d003      	beq.n	510e <getSlowDividerConfig+0x26>
    5106:	9b01      	ldr	r3, [sp, #4]
    5108:	2b26      	cmp	r3, #38	; 0x26
    510a:	d003      	beq.n	5114 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    510c:	e008      	b.n	5120 <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    510e:	2300      	movs	r3, #0
    5110:	9304      	str	r3, [sp, #16]
            break;
    5112:	e006      	b.n	5122 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5114:	2301      	movs	r3, #1
    5116:	9304      	str	r3, [sp, #16]
            break;
    5118:	e003      	b.n	5122 <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    511a:	2302      	movs	r3, #2
    511c:	9304      	str	r3, [sp, #16]
            break;
    511e:	e000      	b.n	5122 <getSlowDividerConfig+0x3a>
                break;
    5120:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5122:	4b40      	ldr	r3, [pc, #256]	; (5224 <getSlowDividerConfig+0x13c>)
    5124:	681b      	ldr	r3, [r3, #0]
    5126:	2b00      	cmp	r3, #0
    5128:	d026      	beq.n	5178 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    512a:	2300      	movs	r3, #0
    512c:	9303      	str	r3, [sp, #12]
    512e:	e01c      	b.n	516a <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    5130:	4b3c      	ldr	r3, [pc, #240]	; (5224 <getSlowDividerConfig+0x13c>)
    5132:	6819      	ldr	r1, [r3, #0]
    5134:	9a03      	ldr	r2, [sp, #12]
    5136:	4613      	mov	r3, r2
    5138:	005b      	lsls	r3, r3, #1
    513a:	4413      	add	r3, r2
    513c:	009b      	lsls	r3, r3, #2
    513e:	440b      	add	r3, r1
    5140:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5144:	681b      	ldr	r3, [r3, #0]
    5146:	9a01      	ldr	r2, [sp, #4]
    5148:	429a      	cmp	r2, r3
    514a:	d10b      	bne.n	5164 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    514c:	4b35      	ldr	r3, [pc, #212]	; (5224 <getSlowDividerConfig+0x13c>)
    514e:	6819      	ldr	r1, [r3, #0]
    5150:	9a03      	ldr	r2, [sp, #12]
    5152:	4613      	mov	r3, r2
    5154:	005b      	lsls	r3, r3, #1
    5156:	4413      	add	r3, r2
    5158:	009b      	lsls	r3, r3, #2
    515a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    515e:	440b      	add	r3, r1
    5160:	9305      	str	r3, [sp, #20]
                break;
    5162:	e009      	b.n	5178 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5164:	9b03      	ldr	r3, [sp, #12]
    5166:	3301      	adds	r3, #1
    5168:	9303      	str	r3, [sp, #12]
    516a:	4b2e      	ldr	r3, [pc, #184]	; (5224 <getSlowDividerConfig+0x13c>)
    516c:	681b      	ldr	r3, [r3, #0]
    516e:	7b1b      	ldrb	r3, [r3, #12]
    5170:	461a      	mov	r2, r3
    5172:	9b03      	ldr	r3, [sp, #12]
    5174:	4293      	cmp	r3, r2
    5176:	d3db      	bcc.n	5130 <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5178:	9b05      	ldr	r3, [sp, #20]
    517a:	2b00      	cmp	r3, #0
    517c:	d14a      	bne.n	5214 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    517e:	9a04      	ldr	r2, [sp, #16]
    5180:	4613      	mov	r3, r2
    5182:	005b      	lsls	r3, r3, #1
    5184:	4413      	add	r3, r2
    5186:	009b      	lsls	r3, r3, #2
    5188:	4a27      	ldr	r2, [pc, #156]	; (5228 <getSlowDividerConfig+0x140>)
    518a:	4413      	add	r3, r2
    518c:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    518e:	4926      	ldr	r1, [pc, #152]	; (5228 <getSlowDividerConfig+0x140>)
    5190:	9a04      	ldr	r2, [sp, #16]
    5192:	4613      	mov	r3, r2
    5194:	005b      	lsls	r3, r3, #1
    5196:	4413      	add	r3, r2
    5198:	009b      	lsls	r3, r3, #2
    519a:	440b      	add	r3, r1
    519c:	9a01      	ldr	r2, [sp, #4]
    519e:	601a      	str	r2, [r3, #0]
        switch(Name)
    51a0:	9b01      	ldr	r3, [sp, #4]
    51a2:	2b27      	cmp	r3, #39	; 0x27
    51a4:	d027      	beq.n	51f6 <getSlowDividerConfig+0x10e>
    51a6:	9b01      	ldr	r3, [sp, #4]
    51a8:	2b27      	cmp	r3, #39	; 0x27
    51aa:	d835      	bhi.n	5218 <getSlowDividerConfig+0x130>
    51ac:	9b01      	ldr	r3, [sp, #4]
    51ae:	2b25      	cmp	r3, #37	; 0x25
    51b0:	d003      	beq.n	51ba <getSlowDividerConfig+0xd2>
    51b2:	9b01      	ldr	r3, [sp, #4]
    51b4:	2b26      	cmp	r3, #38	; 0x26
    51b6:	d00f      	beq.n	51d8 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    51b8:	e02e      	b.n	5218 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    51ba:	4b1c      	ldr	r3, [pc, #112]	; (522c <getSlowDividerConfig+0x144>)
    51bc:	695b      	ldr	r3, [r3, #20]
    51be:	f003 030f 	and.w	r3, r3, #15
    51c2:	1c59      	adds	r1, r3, #1
    51c4:	4818      	ldr	r0, [pc, #96]	; (5228 <getSlowDividerConfig+0x140>)
    51c6:	9a04      	ldr	r2, [sp, #16]
    51c8:	4613      	mov	r3, r2
    51ca:	005b      	lsls	r3, r3, #1
    51cc:	4413      	add	r3, r2
    51ce:	009b      	lsls	r3, r3, #2
    51d0:	4403      	add	r3, r0
    51d2:	3304      	adds	r3, #4
    51d4:	6019      	str	r1, [r3, #0]
                break;
    51d6:	e020      	b.n	521a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    51d8:	4b14      	ldr	r3, [pc, #80]	; (522c <getSlowDividerConfig+0x144>)
    51da:	699b      	ldr	r3, [r3, #24]
    51dc:	f003 030f 	and.w	r3, r3, #15
    51e0:	1c59      	adds	r1, r3, #1
    51e2:	4811      	ldr	r0, [pc, #68]	; (5228 <getSlowDividerConfig+0x140>)
    51e4:	9a04      	ldr	r2, [sp, #16]
    51e6:	4613      	mov	r3, r2
    51e8:	005b      	lsls	r3, r3, #1
    51ea:	4413      	add	r3, r2
    51ec:	009b      	lsls	r3, r3, #2
    51ee:	4403      	add	r3, r0
    51f0:	3304      	adds	r3, #4
    51f2:	6019      	str	r1, [r3, #0]
                break;
    51f4:	e011      	b.n	521a <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    51f6:	4b0d      	ldr	r3, [pc, #52]	; (522c <getSlowDividerConfig+0x144>)
    51f8:	69db      	ldr	r3, [r3, #28]
    51fa:	f003 030f 	and.w	r3, r3, #15
    51fe:	1c59      	adds	r1, r3, #1
    5200:	4809      	ldr	r0, [pc, #36]	; (5228 <getSlowDividerConfig+0x140>)
    5202:	9a04      	ldr	r2, [sp, #16]
    5204:	4613      	mov	r3, r2
    5206:	005b      	lsls	r3, r3, #1
    5208:	4413      	add	r3, r2
    520a:	009b      	lsls	r3, r3, #2
    520c:	4403      	add	r3, r0
    520e:	3304      	adds	r3, #4
    5210:	6019      	str	r1, [r3, #0]
                break;
    5212:	e002      	b.n	521a <getSlowDividerConfig+0x132>
        }
    }
    5214:	bf00      	nop
    5216:	e000      	b.n	521a <getSlowDividerConfig+0x132>
                break;
    5218:	bf00      	nop

    return ReturnValue;
    521a:	9b05      	ldr	r3, [sp, #20]
}
    521c:	4618      	mov	r0, r3
    521e:	b006      	add	sp, #24
    5220:	4770      	bx	lr
    5222:	bf00      	nop
    5224:	1fff8b9c 	.word	0x1fff8b9c
    5228:	1fff8cb0 	.word	0x1fff8cb0
    522c:	40064000 	.word	0x40064000

00005230 <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    5230:	b500      	push	{lr}
    5232:	b083      	sub	sp, #12
    5234:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5236:	4b64      	ldr	r3, [pc, #400]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x198>)
    5238:	781b      	ldrb	r3, [r3, #0]
    523a:	f083 0301 	eor.w	r3, r3, #1
    523e:	b2db      	uxtb	r3, r3
    5240:	2b00      	cmp	r3, #0
    5242:	d05b      	beq.n	52fc <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5244:	4b60      	ldr	r3, [pc, #384]	; (53c8 <Clock_Ip_ClockInitializeObjects+0x198>)
    5246:	2201      	movs	r2, #1
    5248:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    524a:	4b60      	ldr	r3, [pc, #384]	; (53cc <Clock_Ip_ClockInitializeObjects+0x19c>)
    524c:	785b      	ldrb	r3, [r3, #1]
    524e:	461a      	mov	r2, r3
    5250:	4613      	mov	r3, r2
    5252:	009b      	lsls	r3, r3, #2
    5254:	4413      	add	r3, r2
    5256:	009b      	lsls	r3, r3, #2
    5258:	4a5d      	ldr	r2, [pc, #372]	; (53d0 <Clock_Ip_ClockInitializeObjects+0x1a0>)
    525a:	4413      	add	r3, r2
    525c:	4a5d      	ldr	r2, [pc, #372]	; (53d4 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    525e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    5260:	4b5d      	ldr	r3, [pc, #372]	; (53d8 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    5262:	785b      	ldrb	r3, [r3, #1]
    5264:	461a      	mov	r2, r3
    5266:	4613      	mov	r3, r2
    5268:	009b      	lsls	r3, r3, #2
    526a:	4413      	add	r3, r2
    526c:	009b      	lsls	r3, r3, #2
    526e:	4a5b      	ldr	r2, [pc, #364]	; (53dc <Clock_Ip_ClockInitializeObjects+0x1ac>)
    5270:	4413      	add	r3, r2
    5272:	4a5b      	ldr	r2, [pc, #364]	; (53e0 <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5274:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5276:	4b5b      	ldr	r3, [pc, #364]	; (53e4 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5278:	791b      	ldrb	r3, [r3, #4]
    527a:	461a      	mov	r2, r3
    527c:	4613      	mov	r3, r2
    527e:	005b      	lsls	r3, r3, #1
    5280:	4413      	add	r3, r2
    5282:	009b      	lsls	r3, r3, #2
    5284:	4a58      	ldr	r2, [pc, #352]	; (53e8 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5286:	4413      	add	r3, r2
    5288:	4a58      	ldr	r2, [pc, #352]	; (53ec <Clock_Ip_ClockInitializeObjects+0x1bc>)
    528a:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    528c:	4b58      	ldr	r3, [pc, #352]	; (53f0 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    528e:	795b      	ldrb	r3, [r3, #5]
    5290:	00db      	lsls	r3, r3, #3
    5292:	4a58      	ldr	r2, [pc, #352]	; (53f4 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    5294:	4413      	add	r3, r2
    5296:	4a58      	ldr	r2, [pc, #352]	; (53f8 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    5298:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    529a:	4b55      	ldr	r3, [pc, #340]	; (53f0 <Clock_Ip_ClockInitializeObjects+0x1c0>)
    529c:	79db      	ldrb	r3, [r3, #7]
    529e:	00db      	lsls	r3, r3, #3
    52a0:	4a54      	ldr	r2, [pc, #336]	; (53f4 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    52a2:	4413      	add	r3, r2
    52a4:	4a55      	ldr	r2, [pc, #340]	; (53fc <Clock_Ip_ClockInitializeObjects+0x1cc>)
    52a6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    52a8:	4b55      	ldr	r3, [pc, #340]	; (5400 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52aa:	799b      	ldrb	r3, [r3, #6]
    52ac:	009b      	lsls	r3, r3, #2
    52ae:	4a55      	ldr	r2, [pc, #340]	; (5404 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52b0:	4413      	add	r3, r2
    52b2:	4a55      	ldr	r2, [pc, #340]	; (5408 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    52b4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    52b6:	4b52      	ldr	r3, [pc, #328]	; (5400 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52b8:	7a1b      	ldrb	r3, [r3, #8]
    52ba:	009b      	lsls	r3, r3, #2
    52bc:	4a51      	ldr	r2, [pc, #324]	; (5404 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52be:	4413      	add	r3, r2
    52c0:	4a52      	ldr	r2, [pc, #328]	; (540c <Clock_Ip_ClockInitializeObjects+0x1dc>)
    52c2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    52c4:	4b4e      	ldr	r3, [pc, #312]	; (5400 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52c6:	7a5b      	ldrb	r3, [r3, #9]
    52c8:	009b      	lsls	r3, r3, #2
    52ca:	4a4e      	ldr	r2, [pc, #312]	; (5404 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52cc:	4413      	add	r3, r2
    52ce:	4a50      	ldr	r2, [pc, #320]	; (5410 <Clock_Ip_ClockInitializeObjects+0x1e0>)
    52d0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    52d2:	4b4b      	ldr	r3, [pc, #300]	; (5400 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52d4:	7adb      	ldrb	r3, [r3, #11]
    52d6:	009b      	lsls	r3, r3, #2
    52d8:	4a4a      	ldr	r2, [pc, #296]	; (5404 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52da:	4413      	add	r3, r2
    52dc:	4a4d      	ldr	r2, [pc, #308]	; (5414 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    52de:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    52e0:	4b47      	ldr	r3, [pc, #284]	; (5400 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52e2:	7b1b      	ldrb	r3, [r3, #12]
    52e4:	009b      	lsls	r3, r3, #2
    52e6:	4a47      	ldr	r2, [pc, #284]	; (5404 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52e8:	4413      	add	r3, r2
    52ea:	4a4b      	ldr	r2, [pc, #300]	; (5418 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    52ec:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    52ee:	4b44      	ldr	r3, [pc, #272]	; (5400 <Clock_Ip_ClockInitializeObjects+0x1d0>)
    52f0:	7b9b      	ldrb	r3, [r3, #14]
    52f2:	009b      	lsls	r3, r3, #2
    52f4:	4a43      	ldr	r2, [pc, #268]	; (5404 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    52f6:	4413      	add	r3, r2
    52f8:	4a48      	ldr	r2, [pc, #288]	; (541c <Clock_Ip_ClockInitializeObjects+0x1ec>)
    52fa:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    52fc:	4b48      	ldr	r3, [pc, #288]	; (5420 <Clock_Ip_ClockInitializeObjects+0x1f0>)
    52fe:	781b      	ldrb	r3, [r3, #0]
    5300:	2b00      	cmp	r3, #0
    5302:	d002      	beq.n	530a <Clock_Ip_ClockInitializeObjects+0xda>
    5304:	9b01      	ldr	r3, [sp, #4]
    5306:	2b00      	cmp	r3, #0
    5308:	d003      	beq.n	5312 <Clock_Ip_ClockInitializeObjects+0xe2>
    530a:	4b46      	ldr	r3, [pc, #280]	; (5424 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    530c:	781b      	ldrb	r3, [r3, #0]
    530e:	2b00      	cmp	r3, #0
    5310:	d056      	beq.n	53c0 <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    5312:	f7ff fc09 	bl	4b28 <getFircConfig>
    5316:	4603      	mov	r3, r0
    5318:	4a43      	ldr	r2, [pc, #268]	; (5428 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    531a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    531c:	f7ff fc60 	bl	4be0 <getSoscConfig>
    5320:	4603      	mov	r3, r0
    5322:	4a42      	ldr	r2, [pc, #264]	; (542c <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5324:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5326:	f7ff fca7 	bl	4c78 <getSpllConfig>
    532a:	4603      	mov	r3, r0
    532c:	4a40      	ldr	r2, [pc, #256]	; (5430 <Clock_Ip_ClockInitializeObjects+0x200>)
    532e:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    5330:	2019      	movs	r0, #25
    5332:	f7ff fcfb 	bl	4d2c <getSelectorConfig>
    5336:	4603      	mov	r3, r0
    5338:	4a3e      	ldr	r2, [pc, #248]	; (5434 <Clock_Ip_ClockInitializeObjects+0x204>)
    533a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    533c:	201a      	movs	r0, #26
    533e:	f7ff fcf5 	bl	4d2c <getSelectorConfig>
    5342:	4603      	mov	r3, r0
    5344:	4a3c      	ldr	r2, [pc, #240]	; (5438 <Clock_Ip_ClockInitializeObjects+0x208>)
    5346:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5348:	201b      	movs	r0, #27
    534a:	f7ff fcef 	bl	4d2c <getSelectorConfig>
    534e:	4603      	mov	r3, r0
    5350:	4a3a      	ldr	r2, [pc, #232]	; (543c <Clock_Ip_ClockInitializeObjects+0x20c>)
    5352:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5354:	201d      	movs	r0, #29
    5356:	f7ff fd7b 	bl	4e50 <getCoreDividerConfig>
    535a:	4603      	mov	r3, r0
    535c:	4a38      	ldr	r2, [pc, #224]	; (5440 <Clock_Ip_ClockInitializeObjects+0x210>)
    535e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    5360:	201e      	movs	r0, #30
    5362:	f7ff fd75 	bl	4e50 <getCoreDividerConfig>
    5366:	4603      	mov	r3, r0
    5368:	4a36      	ldr	r2, [pc, #216]	; (5444 <Clock_Ip_ClockInitializeObjects+0x214>)
    536a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    536c:	201f      	movs	r0, #31
    536e:	f7ff fd6f 	bl	4e50 <getCoreDividerConfig>
    5372:	4603      	mov	r3, r0
    5374:	4a34      	ldr	r2, [pc, #208]	; (5448 <Clock_Ip_ClockInitializeObjects+0x218>)
    5376:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5378:	2021      	movs	r0, #33	; 0x21
    537a:	f7ff fe0f 	bl	4f9c <getBusDividerConfig>
    537e:	4603      	mov	r3, r0
    5380:	4a32      	ldr	r2, [pc, #200]	; (544c <Clock_Ip_ClockInitializeObjects+0x21c>)
    5382:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5384:	2022      	movs	r0, #34	; 0x22
    5386:	f7ff fe09 	bl	4f9c <getBusDividerConfig>
    538a:	4603      	mov	r3, r0
    538c:	4a30      	ldr	r2, [pc, #192]	; (5450 <Clock_Ip_ClockInitializeObjects+0x220>)
    538e:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    5390:	2023      	movs	r0, #35	; 0x23
    5392:	f7ff fe03 	bl	4f9c <getBusDividerConfig>
    5396:	4603      	mov	r3, r0
    5398:	4a2e      	ldr	r2, [pc, #184]	; (5454 <Clock_Ip_ClockInitializeObjects+0x224>)
    539a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    539c:	2025      	movs	r0, #37	; 0x25
    539e:	f7ff fea3 	bl	50e8 <getSlowDividerConfig>
    53a2:	4603      	mov	r3, r0
    53a4:	4a2c      	ldr	r2, [pc, #176]	; (5458 <Clock_Ip_ClockInitializeObjects+0x228>)
    53a6:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    53a8:	2026      	movs	r0, #38	; 0x26
    53aa:	f7ff fe9d 	bl	50e8 <getSlowDividerConfig>
    53ae:	4603      	mov	r3, r0
    53b0:	4a2a      	ldr	r2, [pc, #168]	; (545c <Clock_Ip_ClockInitializeObjects+0x22c>)
    53b2:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    53b4:	2027      	movs	r0, #39	; 0x27
    53b6:	f7ff fe97 	bl	50e8 <getSlowDividerConfig>
    53ba:	4603      	mov	r3, r0
    53bc:	4a28      	ldr	r2, [pc, #160]	; (5460 <Clock_Ip_ClockInitializeObjects+0x230>)
    53be:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    53c0:	bf00      	nop
    53c2:	b003      	add	sp, #12
    53c4:	f85d fb04 	ldr.w	pc, [sp], #4
    53c8:	1fff8cd4 	.word	0x1fff8cd4
    53cc:	0000ed98 	.word	0x0000ed98
    53d0:	0000f3e4 	.word	0x0000f3e4
    53d4:	1fff8ba0 	.word	0x1fff8ba0
    53d8:	0000ed58 	.word	0x0000ed58
    53dc:	0000f32c 	.word	0x0000f32c
    53e0:	1fff8ba4 	.word	0x1fff8ba4
    53e4:	0000ed68 	.word	0x0000ed68
    53e8:	0000f398 	.word	0x0000f398
    53ec:	1fff8ba8 	.word	0x1fff8ba8
    53f0:	0000eda8 	.word	0x0000eda8
    53f4:	0000f410 	.word	0x0000f410
    53f8:	1fff8bac 	.word	0x1fff8bac
    53fc:	1fff8be8 	.word	0x1fff8be8
    5400:	0000ed38 	.word	0x0000ed38
    5404:	0000f2e8 	.word	0x0000f2e8
    5408:	1fff8bb0 	.word	0x1fff8bb0
    540c:	1fff8bec 	.word	0x1fff8bec
    5410:	1fff8bb4 	.word	0x1fff8bb4
    5414:	1fff8bf0 	.word	0x1fff8bf0
    5418:	1fff8bb8 	.word	0x1fff8bb8
    541c:	1fff8bf4 	.word	0x1fff8bf4
    5420:	1fff8b21 	.word	0x1fff8b21
    5424:	1fff8b18 	.word	0x1fff8b18
    5428:	1fff8bbc 	.word	0x1fff8bbc
    542c:	1fff8bc0 	.word	0x1fff8bc0
    5430:	1fff8bc4 	.word	0x1fff8bc4
    5434:	1fff8bc8 	.word	0x1fff8bc8
    5438:	1fff8bcc 	.word	0x1fff8bcc
    543c:	1fff8bf8 	.word	0x1fff8bf8
    5440:	1fff8bd0 	.word	0x1fff8bd0
    5444:	1fff8bd4 	.word	0x1fff8bd4
    5448:	1fff8bfc 	.word	0x1fff8bfc
    544c:	1fff8bd8 	.word	0x1fff8bd8
    5450:	1fff8bdc 	.word	0x1fff8bdc
    5454:	1fff8c00 	.word	0x1fff8c00
    5458:	1fff8be0 	.word	0x1fff8be0
    545c:	1fff8be4 	.word	0x1fff8be4
    5460:	1fff8c04 	.word	0x1fff8c04

00005464 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5464:	b500      	push	{lr}
    5466:	b083      	sub	sp, #12
    5468:	9001      	str	r0, [sp, #4]
    546a:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    546c:	9b01      	ldr	r3, [sp, #4]
    546e:	2b03      	cmp	r3, #3
    5470:	f000 8090 	beq.w	5594 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5474:	9b01      	ldr	r3, [sp, #4]
    5476:	2b03      	cmp	r3, #3
    5478:	f200 80d3 	bhi.w	5622 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    547c:	9b01      	ldr	r3, [sp, #4]
    547e:	2b00      	cmp	r3, #0
    5480:	d040      	beq.n	5504 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    5482:	9b01      	ldr	r3, [sp, #4]
    5484:	3b01      	subs	r3, #1
    5486:	2b01      	cmp	r3, #1
    5488:	f200 80cb 	bhi.w	5622 <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    548c:	9b00      	ldr	r3, [sp, #0]
    548e:	2b00      	cmp	r3, #0
    5490:	f040 80c9 	bne.w	5626 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5494:	4b68      	ldr	r3, [pc, #416]	; (5638 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5496:	2200      	movs	r2, #0
    5498:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    549a:	4b68      	ldr	r3, [pc, #416]	; (563c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    549c:	681b      	ldr	r3, [r3, #0]
    549e:	685b      	ldr	r3, [r3, #4]
    54a0:	4a67      	ldr	r2, [pc, #412]	; (5640 <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    54a2:	6812      	ldr	r2, [r2, #0]
    54a4:	4610      	mov	r0, r2
    54a6:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    54a8:	4b66      	ldr	r3, [pc, #408]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    54aa:	681b      	ldr	r3, [r3, #0]
    54ac:	681b      	ldr	r3, [r3, #0]
    54ae:	4a66      	ldr	r2, [pc, #408]	; (5648 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    54b0:	6812      	ldr	r2, [r2, #0]
    54b2:	4610      	mov	r0, r2
    54b4:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    54b6:	4b65      	ldr	r3, [pc, #404]	; (564c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    54b8:	681b      	ldr	r3, [r3, #0]
    54ba:	681b      	ldr	r3, [r3, #0]
    54bc:	4a64      	ldr	r2, [pc, #400]	; (5650 <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    54be:	6812      	ldr	r2, [r2, #0]
    54c0:	4610      	mov	r0, r2
    54c2:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    54c4:	4b63      	ldr	r3, [pc, #396]	; (5654 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    54c6:	681b      	ldr	r3, [r3, #0]
    54c8:	681b      	ldr	r3, [r3, #0]
    54ca:	4a63      	ldr	r2, [pc, #396]	; (5658 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    54cc:	6812      	ldr	r2, [r2, #0]
    54ce:	4610      	mov	r0, r2
    54d0:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    54d2:	4b62      	ldr	r3, [pc, #392]	; (565c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    54d4:	681b      	ldr	r3, [r3, #0]
    54d6:	691b      	ldr	r3, [r3, #16]
    54d8:	4a61      	ldr	r2, [pc, #388]	; (5660 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    54da:	6812      	ldr	r2, [r2, #0]
    54dc:	6812      	ldr	r2, [r2, #0]
    54de:	4610      	mov	r0, r2
    54e0:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    54e2:	4b60      	ldr	r3, [pc, #384]	; (5664 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    54e4:	681b      	ldr	r3, [r3, #0]
    54e6:	68db      	ldr	r3, [r3, #12]
    54e8:	4a5f      	ldr	r2, [pc, #380]	; (5668 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    54ea:	6812      	ldr	r2, [r2, #0]
    54ec:	6812      	ldr	r2, [r2, #0]
    54ee:	4610      	mov	r0, r2
    54f0:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    54f2:	4b5e      	ldr	r3, [pc, #376]	; (566c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    54f4:	681b      	ldr	r3, [r3, #0]
    54f6:	689b      	ldr	r3, [r3, #8]
    54f8:	4a5d      	ldr	r2, [pc, #372]	; (5670 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    54fa:	6812      	ldr	r2, [r2, #0]
    54fc:	6812      	ldr	r2, [r2, #0]
    54fe:	4610      	mov	r0, r2
    5500:	4798      	blx	r3
            }
        }
        break;
    5502:	e090      	b.n	5626 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5504:	9b00      	ldr	r3, [sp, #0]
    5506:	2b02      	cmp	r3, #2
    5508:	f040 808f 	bne.w	562a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    550c:	4b4a      	ldr	r3, [pc, #296]	; (5638 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    550e:	2201      	movs	r2, #1
    5510:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5512:	4b56      	ldr	r3, [pc, #344]	; (566c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5514:	681b      	ldr	r3, [r3, #0]
    5516:	685b      	ldr	r3, [r3, #4]
    5518:	4a55      	ldr	r2, [pc, #340]	; (5670 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    551a:	6812      	ldr	r2, [r2, #0]
    551c:	4610      	mov	r0, r2
    551e:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5520:	4b50      	ldr	r3, [pc, #320]	; (5664 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5522:	681b      	ldr	r3, [r3, #0]
    5524:	691b      	ldr	r3, [r3, #16]
    5526:	4a50      	ldr	r2, [pc, #320]	; (5668 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5528:	6812      	ldr	r2, [r2, #0]
    552a:	4610      	mov	r0, r2
    552c:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    552e:	4b4d      	ldr	r3, [pc, #308]	; (5664 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5530:	681b      	ldr	r3, [r3, #0]
    5532:	689b      	ldr	r3, [r3, #8]
    5534:	4a4c      	ldr	r2, [pc, #304]	; (5668 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5536:	6812      	ldr	r2, [r2, #0]
    5538:	4610      	mov	r0, r2
    553a:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    553c:	4b47      	ldr	r3, [pc, #284]	; (565c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    553e:	681b      	ldr	r3, [r3, #0]
    5540:	68db      	ldr	r3, [r3, #12]
    5542:	4a47      	ldr	r2, [pc, #284]	; (5660 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5544:	6812      	ldr	r2, [r2, #0]
    5546:	4610      	mov	r0, r2
    5548:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    554a:	4b44      	ldr	r3, [pc, #272]	; (565c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    554c:	681b      	ldr	r3, [r3, #0]
    554e:	689b      	ldr	r3, [r3, #8]
    5550:	4a43      	ldr	r2, [pc, #268]	; (5660 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5552:	6812      	ldr	r2, [r2, #0]
    5554:	6812      	ldr	r2, [r2, #0]
    5556:	4610      	mov	r0, r2
    5558:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    555a:	4b38      	ldr	r3, [pc, #224]	; (563c <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    555c:	681b      	ldr	r3, [r3, #0]
    555e:	685b      	ldr	r3, [r3, #4]
    5560:	4a44      	ldr	r2, [pc, #272]	; (5674 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    5562:	6812      	ldr	r2, [r2, #0]
    5564:	4610      	mov	r0, r2
    5566:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5568:	4b36      	ldr	r3, [pc, #216]	; (5644 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    556a:	681b      	ldr	r3, [r3, #0]
    556c:	681b      	ldr	r3, [r3, #0]
    556e:	4a42      	ldr	r2, [pc, #264]	; (5678 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5570:	6812      	ldr	r2, [r2, #0]
    5572:	4610      	mov	r0, r2
    5574:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5576:	4b35      	ldr	r3, [pc, #212]	; (564c <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5578:	681b      	ldr	r3, [r3, #0]
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	4a3f      	ldr	r2, [pc, #252]	; (567c <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    557e:	6812      	ldr	r2, [r2, #0]
    5580:	4610      	mov	r0, r2
    5582:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5584:	4b33      	ldr	r3, [pc, #204]	; (5654 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5586:	681b      	ldr	r3, [r3, #0]
    5588:	681b      	ldr	r3, [r3, #0]
    558a:	4a3d      	ldr	r2, [pc, #244]	; (5680 <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    558c:	6812      	ldr	r2, [r2, #0]
    558e:	4610      	mov	r0, r2
    5590:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5592:	e04a      	b.n	562a <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5594:	9b00      	ldr	r3, [sp, #0]
    5596:	2b02      	cmp	r3, #2
    5598:	d149      	bne.n	562e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    559a:	4b27      	ldr	r3, [pc, #156]	; (5638 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    559c:	2201      	movs	r2, #1
    559e:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    55a0:	4b32      	ldr	r3, [pc, #200]	; (566c <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    55a2:	681b      	ldr	r3, [r3, #0]
    55a4:	685b      	ldr	r3, [r3, #4]
    55a6:	4a32      	ldr	r2, [pc, #200]	; (5670 <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    55a8:	6812      	ldr	r2, [r2, #0]
    55aa:	4610      	mov	r0, r2
    55ac:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    55ae:	4b2d      	ldr	r3, [pc, #180]	; (5664 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    55b0:	681b      	ldr	r3, [r3, #0]
    55b2:	691b      	ldr	r3, [r3, #16]
    55b4:	4a2c      	ldr	r2, [pc, #176]	; (5668 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    55b6:	6812      	ldr	r2, [r2, #0]
    55b8:	4610      	mov	r0, r2
    55ba:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    55bc:	4b29      	ldr	r3, [pc, #164]	; (5664 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    55be:	681b      	ldr	r3, [r3, #0]
    55c0:	689b      	ldr	r3, [r3, #8]
    55c2:	4a29      	ldr	r2, [pc, #164]	; (5668 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    55c4:	6812      	ldr	r2, [r2, #0]
    55c6:	4610      	mov	r0, r2
    55c8:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    55ca:	4b24      	ldr	r3, [pc, #144]	; (565c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    55cc:	681b      	ldr	r3, [r3, #0]
    55ce:	68db      	ldr	r3, [r3, #12]
    55d0:	4a23      	ldr	r2, [pc, #140]	; (5660 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    55d2:	6812      	ldr	r2, [r2, #0]
    55d4:	4610      	mov	r0, r2
    55d6:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    55d8:	4b20      	ldr	r3, [pc, #128]	; (565c <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    55da:	681b      	ldr	r3, [r3, #0]
    55dc:	689b      	ldr	r3, [r3, #8]
    55de:	4a20      	ldr	r2, [pc, #128]	; (5660 <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    55e0:	6812      	ldr	r2, [r2, #0]
    55e2:	6812      	ldr	r2, [r2, #0]
    55e4:	4610      	mov	r0, r2
    55e6:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    55e8:	4b26      	ldr	r3, [pc, #152]	; (5684 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    55ea:	681b      	ldr	r3, [r3, #0]
    55ec:	685b      	ldr	r3, [r3, #4]
    55ee:	4a26      	ldr	r2, [pc, #152]	; (5688 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    55f0:	6812      	ldr	r2, [r2, #0]
    55f2:	4610      	mov	r0, r2
    55f4:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    55f6:	4b25      	ldr	r3, [pc, #148]	; (568c <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    55f8:	681b      	ldr	r3, [r3, #0]
    55fa:	681b      	ldr	r3, [r3, #0]
    55fc:	4a24      	ldr	r2, [pc, #144]	; (5690 <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    55fe:	6812      	ldr	r2, [r2, #0]
    5600:	4610      	mov	r0, r2
    5602:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5604:	4b23      	ldr	r3, [pc, #140]	; (5694 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    5606:	681b      	ldr	r3, [r3, #0]
    5608:	681b      	ldr	r3, [r3, #0]
    560a:	4a23      	ldr	r2, [pc, #140]	; (5698 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    560c:	6812      	ldr	r2, [r2, #0]
    560e:	4610      	mov	r0, r2
    5610:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    5612:	4b22      	ldr	r3, [pc, #136]	; (569c <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    5614:	681b      	ldr	r3, [r3, #0]
    5616:	681b      	ldr	r3, [r3, #0]
    5618:	4a21      	ldr	r2, [pc, #132]	; (56a0 <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    561a:	6812      	ldr	r2, [r2, #0]
    561c:	4610      	mov	r0, r2
    561e:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5620:	e005      	b.n	562e <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    5622:	bf00      	nop
    5624:	e004      	b.n	5630 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5626:	bf00      	nop
    5628:	e002      	b.n	5630 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    562a:	bf00      	nop
    562c:	e000      	b.n	5630 <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    562e:	bf00      	nop
    }

}
    5630:	bf00      	nop
    5632:	b003      	add	sp, #12
    5634:	f85d fb04 	ldr.w	pc, [sp], #4
    5638:	1fff8b21 	.word	0x1fff8b21
    563c:	1fff8bac 	.word	0x1fff8bac
    5640:	1fff8bcc 	.word	0x1fff8bcc
    5644:	1fff8bb0 	.word	0x1fff8bb0
    5648:	1fff8bd4 	.word	0x1fff8bd4
    564c:	1fff8bb4 	.word	0x1fff8bb4
    5650:	1fff8bdc 	.word	0x1fff8bdc
    5654:	1fff8bb8 	.word	0x1fff8bb8
    5658:	1fff8be4 	.word	0x1fff8be4
    565c:	1fff8ba0 	.word	0x1fff8ba0
    5660:	1fff8bc4 	.word	0x1fff8bc4
    5664:	1fff8ba4 	.word	0x1fff8ba4
    5668:	1fff8bc0 	.word	0x1fff8bc0
    566c:	1fff8ba8 	.word	0x1fff8ba8
    5670:	1fff8bbc 	.word	0x1fff8bbc
    5674:	1fff8bc8 	.word	0x1fff8bc8
    5678:	1fff8bd0 	.word	0x1fff8bd0
    567c:	1fff8bd8 	.word	0x1fff8bd8
    5680:	1fff8be0 	.word	0x1fff8be0
    5684:	1fff8be8 	.word	0x1fff8be8
    5688:	1fff8bf8 	.word	0x1fff8bf8
    568c:	1fff8bec 	.word	0x1fff8bec
    5690:	1fff8bfc 	.word	0x1fff8bfc
    5694:	1fff8bf0 	.word	0x1fff8bf0
    5698:	1fff8c00 	.word	0x1fff8c00
    569c:	1fff8bf4 	.word	0x1fff8bf4
    56a0:	1fff8c04 	.word	0x1fff8c04

000056a4 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    56a4:	b500      	push	{lr}
    56a6:	b083      	sub	sp, #12
    56a8:	9001      	str	r0, [sp, #4]
    56aa:	9100      	str	r1, [sp, #0]
    switch(Command)
    56ac:	9b00      	ldr	r3, [sp, #0]
    56ae:	2b04      	cmp	r3, #4
    56b0:	d010      	beq.n	56d4 <Clock_Ip_Command+0x30>
    56b2:	9b00      	ldr	r3, [sp, #0]
    56b4:	2b04      	cmp	r3, #4
    56b6:	d811      	bhi.n	56dc <Clock_Ip_Command+0x38>
    56b8:	9b00      	ldr	r3, [sp, #0]
    56ba:	2b01      	cmp	r3, #1
    56bc:	d006      	beq.n	56cc <Clock_Ip_Command+0x28>
    56be:	9b00      	ldr	r3, [sp, #0]
    56c0:	2b02      	cmp	r3, #2
    56c2:	d10b      	bne.n	56dc <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    56c4:	9801      	ldr	r0, [sp, #4]
    56c6:	f7ff fdb3 	bl	5230 <Clock_Ip_ClockInitializeObjects>
            break;
    56ca:	e008      	b.n	56de <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    56cc:	9801      	ldr	r0, [sp, #4]
    56ce:	f7ff f9db 	bl	4a88 <Clock_Ip_SpecificPlatformInitClock>
            break;
    56d2:	e004      	b.n	56de <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    56d4:	9801      	ldr	r0, [sp, #4]
    56d6:	f7ff f8ed 	bl	48b4 <DisableSafeClock>
            break;
    56da:	e000      	b.n	56de <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    56dc:	bf00      	nop
    }
}
    56de:	bf00      	nop
    56e0:	b003      	add	sp, #12
    56e2:	f85d fb04 	ldr.w	pc, [sp], #4
    56e6:	bf00      	nop

000056e8 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    56e8:	b500      	push	{lr}
    56ea:	b085      	sub	sp, #20
    56ec:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    56ee:	4a20      	ldr	r2, [pc, #128]	; (5770 <Mcu_Init+0x88>)
    56f0:	9b01      	ldr	r3, [sp, #4]
    56f2:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    56f4:	2300      	movs	r3, #0
    56f6:	9303      	str	r3, [sp, #12]
    56f8:	e010      	b.n	571c <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    56fa:	4b1d      	ldr	r3, [pc, #116]	; (5770 <Mcu_Init+0x88>)
    56fc:	681b      	ldr	r3, [r3, #0]
    56fe:	6919      	ldr	r1, [r3, #16]
    5700:	9a03      	ldr	r2, [sp, #12]
    5702:	4613      	mov	r3, r2
    5704:	005b      	lsls	r3, r3, #1
    5706:	4413      	add	r3, r2
    5708:	009b      	lsls	r3, r3, #2
    570a:	440b      	add	r3, r1
    570c:	681b      	ldr	r3, [r3, #0]
    570e:	9a03      	ldr	r2, [sp, #12]
    5710:	b2d1      	uxtb	r1, r2
    5712:	4a18      	ldr	r2, [pc, #96]	; (5774 <Mcu_Init+0x8c>)
    5714:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5716:	9b03      	ldr	r3, [sp, #12]
    5718:	3301      	adds	r3, #1
    571a:	9303      	str	r3, [sp, #12]
    571c:	4b14      	ldr	r3, [pc, #80]	; (5770 <Mcu_Init+0x88>)
    571e:	681b      	ldr	r3, [r3, #0]
    5720:	689b      	ldr	r3, [r3, #8]
    5722:	9a03      	ldr	r2, [sp, #12]
    5724:	429a      	cmp	r2, r3
    5726:	d3e8      	bcc.n	56fa <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5728:	2300      	movs	r3, #0
    572a:	9303      	str	r3, [sp, #12]
    572c:	e010      	b.n	5750 <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    572e:	4b10      	ldr	r3, [pc, #64]	; (5770 <Mcu_Init+0x88>)
    5730:	681b      	ldr	r3, [r3, #0]
    5732:	6959      	ldr	r1, [r3, #20]
    5734:	9a03      	ldr	r2, [sp, #12]
    5736:	4613      	mov	r3, r2
    5738:	01db      	lsls	r3, r3, #7
    573a:	1a9b      	subs	r3, r3, r2
    573c:	00db      	lsls	r3, r3, #3
    573e:	440b      	add	r3, r1
    5740:	681b      	ldr	r3, [r3, #0]
    5742:	9a03      	ldr	r2, [sp, #12]
    5744:	b2d1      	uxtb	r1, r2
    5746:	4a0c      	ldr	r2, [pc, #48]	; (5778 <Mcu_Init+0x90>)
    5748:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    574a:	9b03      	ldr	r3, [sp, #12]
    574c:	3301      	adds	r3, #1
    574e:	9303      	str	r3, [sp, #12]
    5750:	4b07      	ldr	r3, [pc, #28]	; (5770 <Mcu_Init+0x88>)
    5752:	681b      	ldr	r3, [r3, #0]
    5754:	68db      	ldr	r3, [r3, #12]
    5756:	9a03      	ldr	r2, [sp, #12]
    5758:	429a      	cmp	r2, r3
    575a:	d3e8      	bcc.n	572e <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    575c:	4b04      	ldr	r3, [pc, #16]	; (5770 <Mcu_Init+0x88>)
    575e:	681b      	ldr	r3, [r3, #0]
    5760:	699b      	ldr	r3, [r3, #24]
    5762:	4618      	mov	r0, r3
    5764:	f000 f88a 	bl	587c <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5768:	bf00      	nop
    576a:	b005      	add	sp, #20
    576c:	f85d fb04 	ldr.w	pc, [sp], #4
    5770:	1fff8ce0 	.word	0x1fff8ce0
    5774:	1fff8cdc 	.word	0x1fff8cdc
    5778:	1fff8cd8 	.word	0x1fff8cd8

0000577c <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    577c:	b084      	sub	sp, #16
    577e:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5780:	2301      	movs	r3, #1
    5782:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5786:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    578a:	4618      	mov	r0, r3
    578c:	b004      	add	sp, #16
    578e:	4770      	bx	lr

00005790 <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5790:	b500      	push	{lr}
    5792:	b085      	sub	sp, #20
    5794:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5796:	4a0e      	ldr	r2, [pc, #56]	; (57d0 <Mcu_InitClock+0x40>)
    5798:	9b01      	ldr	r3, [sp, #4]
    579a:	4413      	add	r3, r2
    579c:	781b      	ldrb	r3, [r3, #0]
    579e:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    57a2:	4b0c      	ldr	r3, [pc, #48]	; (57d4 <Mcu_InitClock+0x44>)
    57a4:	681b      	ldr	r3, [r3, #0]
    57a6:	6959      	ldr	r1, [r3, #20]
    57a8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    57ac:	4613      	mov	r3, r2
    57ae:	01db      	lsls	r3, r3, #7
    57b0:	1a9b      	subs	r3, r3, r2
    57b2:	00db      	lsls	r3, r3, #3
    57b4:	440b      	add	r3, r1
    57b6:	4618      	mov	r0, r3
    57b8:	f000 f86a 	bl	5890 <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    57bc:	2300      	movs	r3, #0
    57be:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    57c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    57c6:	4618      	mov	r0, r3
    57c8:	b005      	add	sp, #20
    57ca:	f85d fb04 	ldr.w	pc, [sp], #4
    57ce:	bf00      	nop
    57d0:	1fff8cd8 	.word	0x1fff8cd8
    57d4:	1fff8ce0 	.word	0x1fff8ce0

000057d8 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    57d8:	b500      	push	{lr}
    57da:	b085      	sub	sp, #20
    57dc:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    57de:	4a0d      	ldr	r2, [pc, #52]	; (5814 <Mcu_SetMode+0x3c>)
    57e0:	9b01      	ldr	r3, [sp, #4]
    57e2:	4413      	add	r3, r2
    57e4:	781b      	ldrb	r3, [r3, #0]
    57e6:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    57ea:	f007 ffa7 	bl	d73c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    57ee:	4b0a      	ldr	r3, [pc, #40]	; (5818 <Mcu_SetMode+0x40>)
    57f0:	681b      	ldr	r3, [r3, #0]
    57f2:	6919      	ldr	r1, [r3, #16]
    57f4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    57f8:	4613      	mov	r3, r2
    57fa:	005b      	lsls	r3, r3, #1
    57fc:	4413      	add	r3, r2
    57fe:	009b      	lsls	r3, r3, #2
    5800:	440b      	add	r3, r1
    5802:	4618      	mov	r0, r3
    5804:	f000 f84e 	bl	58a4 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5808:	f007 ffc4 	bl	d794 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    580c:	bf00      	nop
    580e:	b005      	add	sp, #20
    5810:	f85d fb04 	ldr.w	pc, [sp], #4
    5814:	1fff8cdc 	.word	0x1fff8cdc
    5818:	1fff8ce0 	.word	0x1fff8ce0

0000581c <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    581c:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    581e:	2302      	movs	r3, #2
    5820:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5822:	9b01      	ldr	r3, [sp, #4]
}
    5824:	4618      	mov	r0, r3
    5826:	b002      	add	sp, #8
    5828:	4770      	bx	lr

0000582a <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    582a:	b500      	push	{lr}
    582c:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    582e:	f000 f843 	bl	58b8 <Mcu_Ipw_GetResetReason>
    5832:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5834:	9b01      	ldr	r3, [sp, #4]
}
    5836:	4618      	mov	r0, r3
    5838:	b003      	add	sp, #12
    583a:	f85d fb04 	ldr.w	pc, [sp], #4

0000583e <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    583e:	b500      	push	{lr}
    5840:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5842:	f000 f83f 	bl	58c4 <Mcu_Ipw_GetResetRawValue>
    5846:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5848:	9b01      	ldr	r3, [sp, #4]
}
    584a:	4618      	mov	r0, r3
    584c:	b003      	add	sp, #12
    584e:	f85d fb04 	ldr.w	pc, [sp], #4

00005852 <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5852:	b500      	push	{lr}
    5854:	b083      	sub	sp, #12
    5856:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5858:	9801      	ldr	r0, [sp, #4]
    585a:	f000 f839 	bl	58d0 <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    585e:	bf00      	nop
    5860:	b003      	add	sp, #12
    5862:	f85d fb04 	ldr.w	pc, [sp], #4

00005866 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5866:	b082      	sub	sp, #8
    5868:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    586a:	4b03      	ldr	r3, [pc, #12]	; (5878 <Mcu_ClkSrcFailureNotification+0x12>)
    586c:	681b      	ldr	r3, [r3, #0]
    586e:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5870:	bf00      	nop
    5872:	b002      	add	sp, #8
    5874:	4770      	bx	lr
    5876:	bf00      	nop
    5878:	1fff8ce0 	.word	0x1fff8ce0

0000587c <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    587c:	b500      	push	{lr}
    587e:	b083      	sub	sp, #12
    5880:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5882:	9801      	ldr	r0, [sp, #4]
    5884:	f000 f882 	bl	598c <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5888:	bf00      	nop
    588a:	b003      	add	sp, #12
    588c:	f85d fb04 	ldr.w	pc, [sp], #4

00005890 <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5890:	b500      	push	{lr}
    5892:	b083      	sub	sp, #12
    5894:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5896:	9801      	ldr	r0, [sp, #4]
    5898:	f7fc fc6a 	bl	2170 <Clock_Ip_InitClock>
}
    589c:	bf00      	nop
    589e:	b003      	add	sp, #12
    58a0:	f85d fb04 	ldr.w	pc, [sp], #4

000058a4 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    58a4:	b500      	push	{lr}
    58a6:	b083      	sub	sp, #12
    58a8:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    58aa:	9801      	ldr	r0, [sp, #4]
    58ac:	f000 f820 	bl	58f0 <Power_Ip_SetMode>
}
    58b0:	bf00      	nop
    58b2:	b003      	add	sp, #12
    58b4:	f85d fb04 	ldr.w	pc, [sp], #4

000058b8 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    58b8:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    58ba:	f000 f84f 	bl	595c <Power_Ip_GetResetReason>
    58be:	4603      	mov	r3, r0
}
    58c0:	4618      	mov	r0, r3
    58c2:	bd08      	pop	{r3, pc}

000058c4 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    58c4:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    58c6:	f000 f857 	bl	5978 <Power_Ip_GetResetRawValue>
    58ca:	4603      	mov	r3, r0
}
    58cc:	4618      	mov	r0, r3
    58ce:	bd08      	pop	{r3, pc}

000058d0 <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    58d0:	b500      	push	{lr}
    58d2:	b083      	sub	sp, #12
    58d4:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    58d6:	9b01      	ldr	r3, [sp, #4]
    58d8:	2b00      	cmp	r3, #0
    58da:	d102      	bne.n	58e2 <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    58dc:	f000 f86c 	bl	59b8 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    58e0:	e001      	b.n	58e6 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    58e2:	f000 f86e 	bl	59c2 <Power_Ip_EnableSleepOnExit>
}
    58e6:	bf00      	nop
    58e8:	b003      	add	sp, #12
    58ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000058f0 <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    58f0:	b500      	push	{lr}
    58f2:	b085      	sub	sp, #20
    58f4:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    58f6:	9b01      	ldr	r3, [sp, #4]
    58f8:	685b      	ldr	r3, [r3, #4]
    58fa:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    58fc:	9802      	ldr	r0, [sp, #8]
    58fe:	f000 f9f5 	bl	5cec <Power_Ip_SMC_ModeCheckEntry>
    5902:	4603      	mov	r3, r0
    5904:	2b00      	cmp	r3, #0
    5906:	d002      	beq.n	590e <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5908:	2301      	movs	r3, #1
    590a:	9303      	str	r3, [sp, #12]
    590c:	e003      	b.n	5916 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    590e:	9801      	ldr	r0, [sp, #4]
    5910:	f000 fa1e 	bl	5d50 <Power_Ip_SMC_ModeConfig>
    5914:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5916:	9b03      	ldr	r3, [sp, #12]
    5918:	2b01      	cmp	r3, #1
    591a:	d103      	bne.n	5924 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    591c:	21ff      	movs	r1, #255	; 0xff
    591e:	2003      	movs	r0, #3
    5920:	f000 f8f4 	bl	5b0c <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5924:	bf00      	nop
    5926:	b005      	add	sp, #20
    5928:	f85d fb04 	ldr.w	pc, [sp], #4

0000592c <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    592c:	b084      	sub	sp, #16
    592e:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5930:	230c      	movs	r3, #12
    5932:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5934:	4a08      	ldr	r2, [pc, #32]	; (5958 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5936:	9b01      	ldr	r3, [sp, #4]
    5938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    593c:	2b0e      	cmp	r3, #14
    593e:	d805      	bhi.n	594c <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5940:	4a05      	ldr	r2, [pc, #20]	; (5958 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5942:	9b01      	ldr	r3, [sp, #4]
    5944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5948:	9303      	str	r3, [sp, #12]
    594a:	e001      	b.n	5950 <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    594c:	230c      	movs	r3, #12
    594e:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5950:	9b03      	ldr	r3, [sp, #12]
}
    5952:	4618      	mov	r0, r3
    5954:	b004      	add	sp, #16
    5956:	4770      	bx	lr
    5958:	0000f484 	.word	0x0000f484

0000595c <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    595c:	b500      	push	{lr}
    595e:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5960:	f000 f940 	bl	5be4 <Power_Ip_RCM_GetResetReason>
    5964:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5966:	9801      	ldr	r0, [sp, #4]
    5968:	f7ff ffe0 	bl	592c <Power_Ip_ConvertIntergeToResetType>
    596c:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    596e:	9b00      	ldr	r3, [sp, #0]
}
    5970:	4618      	mov	r0, r3
    5972:	b003      	add	sp, #12
    5974:	f85d fb04 	ldr.w	pc, [sp], #4

00005978 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5978:	b500      	push	{lr}
    597a:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    597c:	f000 f98a 	bl	5c94 <Power_Ip_RCM_GetResetRawValue>
    5980:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5982:	9b01      	ldr	r3, [sp, #4]
}
    5984:	4618      	mov	r0, r3
    5986:	b003      	add	sp, #12
    5988:	f85d fb04 	ldr.w	pc, [sp], #4

0000598c <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    598c:	b500      	push	{lr}
    598e:	b083      	sub	sp, #12
    5990:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5992:	9b01      	ldr	r3, [sp, #4]
    5994:	681b      	ldr	r3, [r3, #0]
    5996:	4618      	mov	r0, r3
    5998:	f000 f90e 	bl	5bb8 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    599c:	9b01      	ldr	r3, [sp, #4]
    599e:	685b      	ldr	r3, [r3, #4]
    59a0:	4618      	mov	r0, r3
    59a2:	f000 f86d 	bl	5a80 <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    59a6:	9b01      	ldr	r3, [sp, #4]
    59a8:	689b      	ldr	r3, [r3, #8]
    59aa:	4618      	mov	r0, r3
    59ac:	f000 f990 	bl	5cd0 <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    59b0:	bf00      	nop
    59b2:	b003      	add	sp, #12
    59b4:	f85d fb04 	ldr.w	pc, [sp], #4

000059b8 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    59b8:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    59ba:	f000 f811 	bl	59e0 <Power_Ip_CM4_DisableSleepOnExit>
}
    59be:	bf00      	nop
    59c0:	bd08      	pop	{r3, pc}

000059c2 <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    59c2:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    59c4:	f000 f820 	bl	5a08 <Power_Ip_CM4_EnableSleepOnExit>
}
    59c8:	bf00      	nop
    59ca:	bd08      	pop	{r3, pc}

000059cc <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    59cc:	b082      	sub	sp, #8
    59ce:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    59d0:	4a02      	ldr	r2, [pc, #8]	; (59dc <Power_Ip_InstallNotificationsCallback+0x10>)
    59d2:	9b01      	ldr	r3, [sp, #4]
    59d4:	6013      	str	r3, [r2, #0]
}
    59d6:	bf00      	nop
    59d8:	b002      	add	sp, #8
    59da:	4770      	bx	lr
    59dc:	1fff8b24 	.word	0x1fff8b24

000059e0 <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    59e0:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    59e2:	2300      	movs	r3, #0
    59e4:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    59e6:	4b07      	ldr	r3, [pc, #28]	; (5a04 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    59e8:	681b      	ldr	r3, [r3, #0]
    59ea:	685b      	ldr	r3, [r3, #4]
    59ec:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    59ee:	9b01      	ldr	r3, [sp, #4]
    59f0:	f023 0302 	bic.w	r3, r3, #2
    59f4:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    59f6:	4b03      	ldr	r3, [pc, #12]	; (5a04 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    59f8:	681b      	ldr	r3, [r3, #0]
    59fa:	9a01      	ldr	r2, [sp, #4]
    59fc:	605a      	str	r2, [r3, #4]
}
    59fe:	bf00      	nop
    5a00:	b002      	add	sp, #8
    5a02:	4770      	bx	lr
    5a04:	1fff8b28 	.word	0x1fff8b28

00005a08 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    5a08:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5a0a:	2300      	movs	r3, #0
    5a0c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5a0e:	4b07      	ldr	r3, [pc, #28]	; (5a2c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5a10:	681b      	ldr	r3, [r3, #0]
    5a12:	685b      	ldr	r3, [r3, #4]
    5a14:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    5a16:	9b01      	ldr	r3, [sp, #4]
    5a18:	f043 0302 	orr.w	r3, r3, #2
    5a1c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a1e:	4b03      	ldr	r3, [pc, #12]	; (5a2c <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    5a20:	681b      	ldr	r3, [r3, #0]
    5a22:	9a01      	ldr	r2, [sp, #4]
    5a24:	605a      	str	r2, [r3, #4]
}
    5a26:	bf00      	nop
    5a28:	b002      	add	sp, #8
    5a2a:	4770      	bx	lr
    5a2c:	1fff8b28 	.word	0x1fff8b28

00005a30 <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    5a30:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5a32:	2300      	movs	r3, #0
    5a34:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5a36:	4b07      	ldr	r3, [pc, #28]	; (5a54 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5a38:	681b      	ldr	r3, [r3, #0]
    5a3a:	685b      	ldr	r3, [r3, #4]
    5a3c:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    5a3e:	9b01      	ldr	r3, [sp, #4]
    5a40:	f043 0304 	orr.w	r3, r3, #4
    5a44:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a46:	4b03      	ldr	r3, [pc, #12]	; (5a54 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    5a48:	681b      	ldr	r3, [r3, #0]
    5a4a:	9a01      	ldr	r2, [sp, #4]
    5a4c:	605a      	str	r2, [r3, #4]
}
    5a4e:	bf00      	nop
    5a50:	b002      	add	sp, #8
    5a52:	4770      	bx	lr
    5a54:	1fff8b28 	.word	0x1fff8b28

00005a58 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    5a58:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5a5a:	2300      	movs	r3, #0
    5a5c:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5a5e:	4b07      	ldr	r3, [pc, #28]	; (5a7c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a60:	681b      	ldr	r3, [r3, #0]
    5a62:	685b      	ldr	r3, [r3, #4]
    5a64:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    5a66:	9b01      	ldr	r3, [sp, #4]
    5a68:	f023 0304 	bic.w	r3, r3, #4
    5a6c:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    5a6e:	4b03      	ldr	r3, [pc, #12]	; (5a7c <Power_Ip_CM4_DisableDeepSleep+0x24>)
    5a70:	681b      	ldr	r3, [r3, #0]
    5a72:	9a01      	ldr	r2, [sp, #4]
    5a74:	605a      	str	r2, [r3, #4]
}
    5a76:	bf00      	nop
    5a78:	b002      	add	sp, #8
    5a7a:	4770      	bx	lr
    5a7c:	1fff8b28 	.word	0x1fff8b28

00005a80 <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    5a80:	b084      	sub	sp, #16
    5a82:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    5a84:	4b20      	ldr	r3, [pc, #128]	; (5b08 <Power_Ip_PMC_PowerInit+0x88>)
    5a86:	781b      	ldrb	r3, [r3, #0]
    5a88:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    5a8c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5a90:	f003 030f 	and.w	r3, r3, #15
    5a94:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    5a98:	9b01      	ldr	r3, [sp, #4]
    5a9a:	781a      	ldrb	r2, [r3, #0]
    5a9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5aa0:	4313      	orrs	r3, r2
    5aa2:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    5aa6:	4a18      	ldr	r2, [pc, #96]	; (5b08 <Power_Ip_PMC_PowerInit+0x88>)
    5aa8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5aac:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    5aae:	4b16      	ldr	r3, [pc, #88]	; (5b08 <Power_Ip_PMC_PowerInit+0x88>)
    5ab0:	785b      	ldrb	r3, [r3, #1]
    5ab2:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    5ab6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5aba:	f003 031f 	and.w	r3, r3, #31
    5abe:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    5ac2:	9b01      	ldr	r3, [sp, #4]
    5ac4:	785a      	ldrb	r2, [r3, #1]
    5ac6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5aca:	4313      	orrs	r3, r2
    5acc:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    5ad0:	4a0d      	ldr	r2, [pc, #52]	; (5b08 <Power_Ip_PMC_PowerInit+0x88>)
    5ad2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ad6:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    5ad8:	4b0b      	ldr	r3, [pc, #44]	; (5b08 <Power_Ip_PMC_PowerInit+0x88>)
    5ada:	789b      	ldrb	r3, [r3, #2]
    5adc:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    5ae0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5ae4:	f003 0338 	and.w	r3, r3, #56	; 0x38
    5ae8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    5aec:	9b01      	ldr	r3, [sp, #4]
    5aee:	789a      	ldrb	r2, [r3, #2]
    5af0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5af4:	4313      	orrs	r3, r2
    5af6:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    5afa:	4a03      	ldr	r2, [pc, #12]	; (5b08 <Power_Ip_PMC_PowerInit+0x88>)
    5afc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5b00:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    5b02:	bf00      	nop
    5b04:	b004      	add	sp, #16
    5b06:	4770      	bx	lr
    5b08:	4007d000 	.word	0x4007d000

00005b0c <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5b0c:	b500      	push	{lr}
    5b0e:	b083      	sub	sp, #12
    5b10:	9001      	str	r0, [sp, #4]
    5b12:	460b      	mov	r3, r1
    5b14:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    5b18:	4b05      	ldr	r3, [pc, #20]	; (5b30 <Power_Ip_ReportPowerErrors+0x24>)
    5b1a:	681b      	ldr	r3, [r3, #0]
    5b1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5b20:	4611      	mov	r1, r2
    5b22:	9801      	ldr	r0, [sp, #4]
    5b24:	4798      	blx	r3
}
    5b26:	bf00      	nop
    5b28:	b003      	add	sp, #12
    5b2a:	f85d fb04 	ldr.w	pc, [sp], #4
    5b2e:	bf00      	nop
    5b30:	1fff8b24 	.word	0x1fff8b24

00005b34 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    5b34:	b082      	sub	sp, #8
    5b36:	9001      	str	r0, [sp, #4]
    5b38:	460b      	mov	r3, r1
    5b3a:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    5b3e:	bf00      	nop
    5b40:	b002      	add	sp, #8
    5b42:	4770      	bx	lr

00005b44 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    5b44:	b500      	push	{lr}
    5b46:	b085      	sub	sp, #20
    5b48:	9003      	str	r0, [sp, #12]
    5b4a:	9102      	str	r1, [sp, #8]
    5b4c:	9201      	str	r2, [sp, #4]
    5b4e:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    5b50:	2000      	movs	r0, #0
    5b52:	f7fc f83d 	bl	1bd0 <OsIf_GetCounter>
    5b56:	4602      	mov	r2, r0
    5b58:	9b03      	ldr	r3, [sp, #12]
    5b5a:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    5b5c:	9b02      	ldr	r3, [sp, #8]
    5b5e:	2200      	movs	r2, #0
    5b60:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    5b62:	2100      	movs	r1, #0
    5b64:	9800      	ldr	r0, [sp, #0]
    5b66:	f7fc f87f 	bl	1c68 <OsIf_MicrosToTicks>
    5b6a:	4602      	mov	r2, r0
    5b6c:	9b01      	ldr	r3, [sp, #4]
    5b6e:	601a      	str	r2, [r3, #0]
}
    5b70:	bf00      	nop
    5b72:	b005      	add	sp, #20
    5b74:	f85d fb04 	ldr.w	pc, [sp], #4

00005b78 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    5b78:	b500      	push	{lr}
    5b7a:	b087      	sub	sp, #28
    5b7c:	9003      	str	r0, [sp, #12]
    5b7e:	9102      	str	r1, [sp, #8]
    5b80:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    5b82:	2300      	movs	r3, #0
    5b84:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    5b88:	2100      	movs	r1, #0
    5b8a:	9803      	ldr	r0, [sp, #12]
    5b8c:	f7fc f839 	bl	1c02 <OsIf_GetElapsed>
    5b90:	4602      	mov	r2, r0
    5b92:	9b02      	ldr	r3, [sp, #8]
    5b94:	681b      	ldr	r3, [r3, #0]
    5b96:	441a      	add	r2, r3
    5b98:	9b02      	ldr	r3, [sp, #8]
    5b9a:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    5b9c:	9b02      	ldr	r3, [sp, #8]
    5b9e:	681b      	ldr	r3, [r3, #0]
    5ba0:	9a01      	ldr	r2, [sp, #4]
    5ba2:	429a      	cmp	r2, r3
    5ba4:	d802      	bhi.n	5bac <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    5ba6:	2301      	movs	r3, #1
    5ba8:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    5bac:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    5bb0:	4618      	mov	r0, r3
    5bb2:	b007      	add	sp, #28
    5bb4:	f85d fb04 	ldr.w	pc, [sp], #4

00005bb8 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    5bb8:	b082      	sub	sp, #8
    5bba:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    5bbc:	9b01      	ldr	r3, [sp, #4]
    5bbe:	681a      	ldr	r2, [r3, #0]
    5bc0:	4907      	ldr	r1, [pc, #28]	; (5be0 <Power_Ip_RCM_ResetInit+0x28>)
    5bc2:	f641 7307 	movw	r3, #7943	; 0x1f07
    5bc6:	4013      	ands	r3, r2
    5bc8:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    5bca:	9b01      	ldr	r3, [sp, #4]
    5bcc:	685a      	ldr	r2, [r3, #4]
    5bce:	4904      	ldr	r1, [pc, #16]	; (5be0 <Power_Ip_RCM_ResetInit+0x28>)
    5bd0:	f642 73ff 	movw	r3, #12287	; 0x2fff
    5bd4:	4013      	ands	r3, r2
    5bd6:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    5bd8:	bf00      	nop
    5bda:	b002      	add	sp, #8
    5bdc:	4770      	bx	lr
    5bde:	bf00      	nop
    5be0:	4007f000 	.word	0x4007f000

00005be4 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    5be4:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    5be6:	230c      	movs	r3, #12
    5be8:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    5bea:	2300      	movs	r3, #0
    5bec:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    5bee:	2300      	movs	r3, #0
    5bf0:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    5bf2:	2300      	movs	r3, #0
    5bf4:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5bf6:	4b25      	ldr	r3, [pc, #148]	; (5c8c <Power_Ip_RCM_GetResetReason+0xa8>)
    5bf8:	699a      	ldr	r2, [r3, #24]
    5bfa:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5bfe:	4013      	ands	r3, r2
    5c00:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    5c02:	9b03      	ldr	r3, [sp, #12]
    5c04:	2b00      	cmp	r3, #0
    5c06:	d008      	beq.n	5c1a <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5c08:	4920      	ldr	r1, [pc, #128]	; (5c8c <Power_Ip_RCM_GetResetReason+0xa8>)
    5c0a:	9a03      	ldr	r2, [sp, #12]
    5c0c:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c10:	4013      	ands	r3, r2
    5c12:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5c14:	4a1e      	ldr	r2, [pc, #120]	; (5c90 <Power_Ip_RCM_GetResetReason+0xac>)
    5c16:	9b03      	ldr	r3, [sp, #12]
    5c18:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    5c1a:	4b1d      	ldr	r3, [pc, #116]	; (5c90 <Power_Ip_RCM_GetResetReason+0xac>)
    5c1c:	681b      	ldr	r3, [r3, #0]
    5c1e:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    5c20:	9a02      	ldr	r2, [sp, #8]
    5c22:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c26:	4013      	ands	r3, r2
    5c28:	2b82      	cmp	r3, #130	; 0x82
    5c2a:	d102      	bne.n	5c32 <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    5c2c:	2305      	movs	r3, #5
    5c2e:	9307      	str	r3, [sp, #28]
    5c30:	e027      	b.n	5c82 <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    5c32:	2300      	movs	r3, #0
    5c34:	9306      	str	r3, [sp, #24]
    5c36:	e021      	b.n	5c7c <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    5c38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5c3c:	9b06      	ldr	r3, [sp, #24]
    5c3e:	fa22 f303 	lsr.w	r3, r2, r3
    5c42:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    5c44:	9a01      	ldr	r2, [sp, #4]
    5c46:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    5c4a:	4013      	ands	r3, r2
    5c4c:	2b00      	cmp	r3, #0
    5c4e:	d012      	beq.n	5c76 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    5c50:	9a01      	ldr	r2, [sp, #4]
    5c52:	9b02      	ldr	r3, [sp, #8]
    5c54:	4013      	ands	r3, r2
    5c56:	2b00      	cmp	r3, #0
    5c58:	d00a      	beq.n	5c70 <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    5c5a:	9b05      	ldr	r3, [sp, #20]
    5c5c:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    5c5e:	9b04      	ldr	r3, [sp, #16]
    5c60:	3301      	adds	r3, #1
    5c62:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    5c64:	9b04      	ldr	r3, [sp, #16]
    5c66:	2b01      	cmp	r3, #1
    5c68:	d902      	bls.n	5c70 <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    5c6a:	230d      	movs	r3, #13
    5c6c:	9307      	str	r3, [sp, #28]
                        break;
    5c6e:	e008      	b.n	5c82 <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    5c70:	9b05      	ldr	r3, [sp, #20]
    5c72:	3301      	adds	r3, #1
    5c74:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    5c76:	9b06      	ldr	r3, [sp, #24]
    5c78:	3301      	adds	r3, #1
    5c7a:	9306      	str	r3, [sp, #24]
    5c7c:	9b06      	ldr	r3, [sp, #24]
    5c7e:	2b1f      	cmp	r3, #31
    5c80:	d9da      	bls.n	5c38 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    5c82:	9b07      	ldr	r3, [sp, #28]
}
    5c84:	4618      	mov	r0, r3
    5c86:	b008      	add	sp, #32
    5c88:	4770      	bx	lr
    5c8a:	bf00      	nop
    5c8c:	4007f000 	.word	0x4007f000
    5c90:	1fff8ce4 	.word	0x1fff8ce4

00005c94 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    5c94:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    5c96:	4b0c      	ldr	r3, [pc, #48]	; (5cc8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5c98:	699a      	ldr	r2, [r3, #24]
    5c9a:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5c9e:	4013      	ands	r3, r2
    5ca0:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    5ca2:	9b01      	ldr	r3, [sp, #4]
    5ca4:	2b00      	cmp	r3, #0
    5ca6:	d008      	beq.n	5cba <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    5ca8:	4907      	ldr	r1, [pc, #28]	; (5cc8 <Power_Ip_RCM_GetResetRawValue+0x34>)
    5caa:	9a01      	ldr	r2, [sp, #4]
    5cac:	f642 73ee 	movw	r3, #12270	; 0x2fee
    5cb0:	4013      	ands	r3, r2
    5cb2:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    5cb4:	4a05      	ldr	r2, [pc, #20]	; (5ccc <Power_Ip_RCM_GetResetRawValue+0x38>)
    5cb6:	9b01      	ldr	r3, [sp, #4]
    5cb8:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    5cba:	4b04      	ldr	r3, [pc, #16]	; (5ccc <Power_Ip_RCM_GetResetRawValue+0x38>)
    5cbc:	681b      	ldr	r3, [r3, #0]
    5cbe:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    5cc0:	9b00      	ldr	r3, [sp, #0]
}
    5cc2:	4618      	mov	r0, r3
    5cc4:	b002      	add	sp, #8
    5cc6:	4770      	bx	lr
    5cc8:	4007f000 	.word	0x4007f000
    5ccc:	1fff8ce4 	.word	0x1fff8ce4

00005cd0 <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    5cd0:	b082      	sub	sp, #8
    5cd2:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    5cd4:	9b01      	ldr	r3, [sp, #4]
    5cd6:	681b      	ldr	r3, [r3, #0]
    5cd8:	4a03      	ldr	r2, [pc, #12]	; (5ce8 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    5cda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    5cde:	6093      	str	r3, [r2, #8]
}
    5ce0:	bf00      	nop
    5ce2:	b002      	add	sp, #8
    5ce4:	4770      	bx	lr
    5ce6:	bf00      	nop
    5ce8:	4007e000 	.word	0x4007e000

00005cec <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    5cec:	b084      	sub	sp, #16
    5cee:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    5cf0:	2301      	movs	r3, #1
    5cf2:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    5cf4:	4b15      	ldr	r3, [pc, #84]	; (5d4c <Power_Ip_SMC_ModeCheckEntry+0x60>)
    5cf6:	695b      	ldr	r3, [r3, #20]
    5cf8:	b2db      	uxtb	r3, r3
    5cfa:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    5cfc:	9b01      	ldr	r3, [sp, #4]
    5cfe:	2b02      	cmp	r3, #2
    5d00:	d012      	beq.n	5d28 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    5d02:	9b01      	ldr	r3, [sp, #4]
    5d04:	2b02      	cmp	r3, #2
    5d06:	d818      	bhi.n	5d3a <Power_Ip_SMC_ModeCheckEntry+0x4e>
    5d08:	9b01      	ldr	r3, [sp, #4]
    5d0a:	2b00      	cmp	r3, #0
    5d0c:	d003      	beq.n	5d16 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    5d0e:	9b01      	ldr	r3, [sp, #4]
    5d10:	2b01      	cmp	r3, #1
    5d12:	d003      	beq.n	5d1c <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    5d14:	e011      	b.n	5d3a <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    5d16:	2300      	movs	r3, #0
    5d18:	9303      	str	r3, [sp, #12]
            break;
    5d1a:	e013      	b.n	5d44 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    5d1c:	9b02      	ldr	r3, [sp, #8]
    5d1e:	2b01      	cmp	r3, #1
    5d20:	d10d      	bne.n	5d3e <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    5d22:	2300      	movs	r3, #0
    5d24:	9303      	str	r3, [sp, #12]
            break;
    5d26:	e00a      	b.n	5d3e <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    5d28:	9b02      	ldr	r3, [sp, #8]
    5d2a:	2b01      	cmp	r3, #1
    5d2c:	d002      	beq.n	5d34 <Power_Ip_SMC_ModeCheckEntry+0x48>
    5d2e:	9b02      	ldr	r3, [sp, #8]
    5d30:	2b10      	cmp	r3, #16
    5d32:	d106      	bne.n	5d42 <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    5d34:	2300      	movs	r3, #0
    5d36:	9303      	str	r3, [sp, #12]
            break;
    5d38:	e003      	b.n	5d42 <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    5d3a:	bf00      	nop
    5d3c:	e002      	b.n	5d44 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5d3e:	bf00      	nop
    5d40:	e000      	b.n	5d44 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    5d42:	bf00      	nop
        }
    }

    return PowerModeCheck;
    5d44:	9b03      	ldr	r3, [sp, #12]
}
    5d46:	4618      	mov	r0, r3
    5d48:	b004      	add	sp, #16
    5d4a:	4770      	bx	lr
    5d4c:	4007e000 	.word	0x4007e000

00005d50 <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5d50:	b500      	push	{lr}
    5d52:	b08b      	sub	sp, #44	; 0x2c
    5d54:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    5d56:	2300      	movs	r3, #0
    5d58:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    5d5a:	2300      	movs	r3, #0
    5d5c:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    5d5e:	2300      	movs	r3, #0
    5d60:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    5d64:	9b01      	ldr	r3, [sp, #4]
    5d66:	685b      	ldr	r3, [r3, #4]
    5d68:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    5d6a:	9b08      	ldr	r3, [sp, #32]
    5d6c:	2b02      	cmp	r3, #2
    5d6e:	d076      	beq.n	5e5e <Power_Ip_SMC_ModeConfig+0x10e>
    5d70:	9b08      	ldr	r3, [sp, #32]
    5d72:	2b02      	cmp	r3, #2
    5d74:	f200 80ab 	bhi.w	5ece <Power_Ip_SMC_ModeConfig+0x17e>
    5d78:	9b08      	ldr	r3, [sp, #32]
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	d003      	beq.n	5d86 <Power_Ip_SMC_ModeConfig+0x36>
    5d7e:	9b08      	ldr	r3, [sp, #32]
    5d80:	2b01      	cmp	r3, #1
    5d82:	d034      	beq.n	5dee <Power_Ip_SMC_ModeConfig+0x9e>
    5d84:	e0a3      	b.n	5ece <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    5d86:	4b58      	ldr	r3, [pc, #352]	; (5ee8 <Power_Ip_SMC_ModeConfig+0x198>)
    5d88:	68db      	ldr	r3, [r3, #12]
    5d8a:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5d8c:	9b06      	ldr	r3, [sp, #24]
    5d8e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5d92:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    5d94:	4a54      	ldr	r2, [pc, #336]	; (5ee8 <Power_Ip_SMC_ModeConfig+0x198>)
    5d96:	9b06      	ldr	r3, [sp, #24]
    5d98:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5d9a:	aa02      	add	r2, sp, #8
    5d9c:	a903      	add	r1, sp, #12
    5d9e:	a804      	add	r0, sp, #16
    5da0:	f24c 3350 	movw	r3, #50000	; 0xc350
    5da4:	f7ff fece 	bl	5b44 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5da8:	9a02      	ldr	r2, [sp, #8]
    5daa:	a903      	add	r1, sp, #12
    5dac:	ab04      	add	r3, sp, #16
    5dae:	4618      	mov	r0, r3
    5db0:	f7ff fee2 	bl	5b78 <Power_Ip_TimeoutExpired>
    5db4:	4603      	mov	r3, r0
    5db6:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    5dba:	4b4b      	ldr	r3, [pc, #300]	; (5ee8 <Power_Ip_SMC_ModeConfig+0x198>)
    5dbc:	695b      	ldr	r3, [r3, #20]
    5dbe:	f003 0301 	and.w	r3, r3, #1
    5dc2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5dc4:	9b05      	ldr	r3, [sp, #20]
    5dc6:	2b01      	cmp	r3, #1
    5dc8:	d006      	beq.n	5dd8 <Power_Ip_SMC_ModeConfig+0x88>
    5dca:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5dce:	f083 0301 	eor.w	r3, r3, #1
    5dd2:	b2db      	uxtb	r3, r3
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	d1e7      	bne.n	5da8 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    5dd8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5ddc:	2b00      	cmp	r3, #0
    5dde:	d079      	beq.n	5ed4 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5de0:	2301      	movs	r3, #1
    5de2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5de4:	21ff      	movs	r1, #255	; 0xff
    5de6:	2000      	movs	r0, #0
    5de8:	f7ff fe90 	bl	5b0c <Power_Ip_ReportPowerErrors>
            }

            break;
    5dec:	e072      	b.n	5ed4 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    5dee:	4b3e      	ldr	r3, [pc, #248]	; (5ee8 <Power_Ip_SMC_ModeConfig+0x198>)
    5df0:	68db      	ldr	r3, [r3, #12]
    5df2:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5df4:	9b06      	ldr	r3, [sp, #24]
    5df6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5dfa:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    5dfc:	9b06      	ldr	r3, [sp, #24]
    5dfe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    5e02:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5e04:	4a38      	ldr	r2, [pc, #224]	; (5ee8 <Power_Ip_SMC_ModeConfig+0x198>)
    5e06:	9b06      	ldr	r3, [sp, #24]
    5e08:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5e0a:	aa02      	add	r2, sp, #8
    5e0c:	a903      	add	r1, sp, #12
    5e0e:	a804      	add	r0, sp, #16
    5e10:	f24c 3350 	movw	r3, #50000	; 0xc350
    5e14:	f7ff fe96 	bl	5b44 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5e18:	9a02      	ldr	r2, [sp, #8]
    5e1a:	a903      	add	r1, sp, #12
    5e1c:	ab04      	add	r3, sp, #16
    5e1e:	4618      	mov	r0, r3
    5e20:	f7ff feaa 	bl	5b78 <Power_Ip_TimeoutExpired>
    5e24:	4603      	mov	r3, r0
    5e26:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    5e2a:	4b2f      	ldr	r3, [pc, #188]	; (5ee8 <Power_Ip_SMC_ModeConfig+0x198>)
    5e2c:	695b      	ldr	r3, [r3, #20]
    5e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5e32:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5e34:	9b05      	ldr	r3, [sp, #20]
    5e36:	2b80      	cmp	r3, #128	; 0x80
    5e38:	d006      	beq.n	5e48 <Power_Ip_SMC_ModeConfig+0xf8>
    5e3a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e3e:	f083 0301 	eor.w	r3, r3, #1
    5e42:	b2db      	uxtb	r3, r3
    5e44:	2b00      	cmp	r3, #0
    5e46:	d1e7      	bne.n	5e18 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    5e48:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5e4c:	2b00      	cmp	r3, #0
    5e4e:	d043      	beq.n	5ed8 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5e50:	2301      	movs	r3, #1
    5e52:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5e54:	21ff      	movs	r1, #255	; 0xff
    5e56:	2000      	movs	r0, #0
    5e58:	f7ff fe58 	bl	5b0c <Power_Ip_ReportPowerErrors>
            }

            break;
    5e5c:	e03c      	b.n	5ed8 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    5e5e:	4b22      	ldr	r3, [pc, #136]	; (5ee8 <Power_Ip_SMC_ModeConfig+0x198>)
    5e60:	68db      	ldr	r3, [r3, #12]
    5e62:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    5e64:	9b06      	ldr	r3, [sp, #24]
    5e66:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    5e6a:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    5e6c:	9b06      	ldr	r3, [sp, #24]
    5e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5e72:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    5e74:	4a1c      	ldr	r2, [pc, #112]	; (5ee8 <Power_Ip_SMC_ModeConfig+0x198>)
    5e76:	9b06      	ldr	r3, [sp, #24]
    5e78:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    5e7a:	aa02      	add	r2, sp, #8
    5e7c:	a903      	add	r1, sp, #12
    5e7e:	a804      	add	r0, sp, #16
    5e80:	f24c 3350 	movw	r3, #50000	; 0xc350
    5e84:	f7ff fe5e 	bl	5b44 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    5e88:	9a02      	ldr	r2, [sp, #8]
    5e8a:	a903      	add	r1, sp, #12
    5e8c:	ab04      	add	r3, sp, #16
    5e8e:	4618      	mov	r0, r3
    5e90:	f7ff fe72 	bl	5b78 <Power_Ip_TimeoutExpired>
    5e94:	4603      	mov	r3, r0
    5e96:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    5e9a:	4b13      	ldr	r3, [pc, #76]	; (5ee8 <Power_Ip_SMC_ModeConfig+0x198>)
    5e9c:	695b      	ldr	r3, [r3, #20]
    5e9e:	f003 0304 	and.w	r3, r3, #4
    5ea2:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    5ea4:	9b05      	ldr	r3, [sp, #20]
    5ea6:	2b04      	cmp	r3, #4
    5ea8:	d006      	beq.n	5eb8 <Power_Ip_SMC_ModeConfig+0x168>
    5eaa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5eae:	f083 0301 	eor.w	r3, r3, #1
    5eb2:	b2db      	uxtb	r3, r3
    5eb4:	2b00      	cmp	r3, #0
    5eb6:	d1e7      	bne.n	5e88 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    5eb8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5ebc:	2b00      	cmp	r3, #0
    5ebe:	d00d      	beq.n	5edc <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5ec0:	2301      	movs	r3, #1
    5ec2:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5ec4:	21ff      	movs	r1, #255	; 0xff
    5ec6:	2000      	movs	r0, #0
    5ec8:	f7ff fe20 	bl	5b0c <Power_Ip_ReportPowerErrors>
            }

            break;
    5ecc:	e006      	b.n	5edc <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5ece:	2301      	movs	r3, #1
    5ed0:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    5ed2:	e004      	b.n	5ede <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5ed4:	bf00      	nop
    5ed6:	e002      	b.n	5ede <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5ed8:	bf00      	nop
    5eda:	e000      	b.n	5ede <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    5edc:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    5ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    5ee0:	4618      	mov	r0, r3
    5ee2:	b00b      	add	sp, #44	; 0x2c
    5ee4:	f85d fb04 	ldr.w	pc, [sp], #4
    5ee8:	4007e000 	.word	0x4007e000

00005eec <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    5eec:	b500      	push	{lr}
    5eee:	b085      	sub	sp, #20
    5ef0:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    5ef2:	9b01      	ldr	r3, [sp, #4]
    5ef4:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    5ef6:	9803      	ldr	r0, [sp, #12]
    5ef8:	f000 fbc8 	bl	668c <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    5efc:	4a03      	ldr	r2, [pc, #12]	; (5f0c <Port_Init+0x20>)
    5efe:	9b03      	ldr	r3, [sp, #12]
    5f00:	6013      	str	r3, [r2, #0]
        }
    }
}
    5f02:	bf00      	nop
    5f04:	b005      	add	sp, #20
    5f06:	f85d fb04 	ldr.w	pc, [sp], #4
    5f0a:	bf00      	nop
    5f0c:	1fff8ce8 	.word	0x1fff8ce8

00005f10 <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    5f10:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    5f12:	4b03      	ldr	r3, [pc, #12]	; (5f20 <Port_RefreshPortDirection+0x10>)
    5f14:	681b      	ldr	r3, [r3, #0]
    5f16:	4618      	mov	r0, r3
    5f18:	f000 fc10 	bl	673c <Port_Ipw_RefreshPortDirection>
    }
}
    5f1c:	bf00      	nop
    5f1e:	bd08      	pop	{r3, pc}
    5f20:	1fff8ce8 	.word	0x1fff8ce8

00005f24 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    5f24:	b086      	sub	sp, #24
    5f26:	9003      	str	r0, [sp, #12]
    5f28:	9102      	str	r1, [sp, #8]
    5f2a:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    5f2c:	23ff      	movs	r3, #255	; 0xff
    5f2e:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    5f30:	9b03      	ldr	r3, [sp, #12]
    5f32:	4a39      	ldr	r2, [pc, #228]	; (6018 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    5f34:	4293      	cmp	r3, r2
    5f36:	d151      	bne.n	5fdc <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    5f38:	9b02      	ldr	r3, [sp, #8]
    5f3a:	2b10      	cmp	r3, #16
    5f3c:	d867      	bhi.n	600e <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    5f3e:	a201      	add	r2, pc, #4	; (adr r2, 5f44 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    5f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5f44:	00005f89 	.word	0x00005f89
    5f48:	00005f97 	.word	0x00005f97
    5f4c:	0000600f 	.word	0x0000600f
    5f50:	0000600f 	.word	0x0000600f
    5f54:	0000600f 	.word	0x0000600f
    5f58:	0000600f 	.word	0x0000600f
    5f5c:	0000600f 	.word	0x0000600f
    5f60:	0000600f 	.word	0x0000600f
    5f64:	0000600f 	.word	0x0000600f
    5f68:	0000600f 	.word	0x0000600f
    5f6c:	0000600f 	.word	0x0000600f
    5f70:	0000600f 	.word	0x0000600f
    5f74:	0000600f 	.word	0x0000600f
    5f78:	00005fa5 	.word	0x00005fa5
    5f7c:	00005fb3 	.word	0x00005fb3
    5f80:	00005fc1 	.word	0x00005fc1
    5f84:	00005fcf 	.word	0x00005fcf
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    5f88:	2301      	movs	r3, #1
    5f8a:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f8c:	9a05      	ldr	r2, [sp, #20]
    5f8e:	9b01      	ldr	r3, [sp, #4]
    5f90:	4313      	orrs	r3, r2
    5f92:	9305      	str	r3, [sp, #20]
                break;
    5f94:	e03c      	b.n	6010 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    5f96:	2302      	movs	r3, #2
    5f98:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5f9a:	9a05      	ldr	r2, [sp, #20]
    5f9c:	9b01      	ldr	r3, [sp, #4]
    5f9e:	4313      	orrs	r3, r2
    5fa0:	9305      	str	r3, [sp, #20]
                break;
    5fa2:	e035      	b.n	6010 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    5fa4:	2304      	movs	r3, #4
    5fa6:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5fa8:	9a05      	ldr	r2, [sp, #20]
    5faa:	9b01      	ldr	r3, [sp, #4]
    5fac:	4313      	orrs	r3, r2
    5fae:	9305      	str	r3, [sp, #20]
                break;
    5fb0:	e02e      	b.n	6010 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    5fb2:	2308      	movs	r3, #8
    5fb4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    5fb6:	9a05      	ldr	r2, [sp, #20]
    5fb8:	9b01      	ldr	r3, [sp, #4]
    5fba:	4313      	orrs	r3, r2
    5fbc:	9305      	str	r3, [sp, #20]
                break;
    5fbe:	e027      	b.n	6010 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    5fc0:	230e      	movs	r3, #14
    5fc2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fc4:	9a05      	ldr	r2, [sp, #20]
    5fc6:	9b01      	ldr	r3, [sp, #4]
    5fc8:	4013      	ands	r3, r2
    5fca:	9305      	str	r3, [sp, #20]
                break;
    5fcc:	e020      	b.n	6010 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    5fce:	230d      	movs	r3, #13
    5fd0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5fd2:	9a05      	ldr	r2, [sp, #20]
    5fd4:	9b01      	ldr	r3, [sp, #4]
    5fd6:	4013      	ands	r3, r2
    5fd8:	9305      	str	r3, [sp, #20]
                break;
    5fda:	e019      	b.n	6010 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    5fdc:	9b03      	ldr	r3, [sp, #12]
    5fde:	4a0f      	ldr	r2, [pc, #60]	; (601c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    5fe0:	4293      	cmp	r3, r2
    5fe2:	d115      	bne.n	6010 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    5fe4:	9b02      	ldr	r3, [sp, #8]
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	d003      	beq.n	5ff2 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    5fea:	9b02      	ldr	r3, [sp, #8]
    5fec:	2b01      	cmp	r3, #1
    5fee:	d007      	beq.n	6000 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    5ff0:	e00e      	b.n	6010 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    5ff2:	230b      	movs	r3, #11
    5ff4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    5ff6:	9a05      	ldr	r2, [sp, #20]
    5ff8:	9b01      	ldr	r3, [sp, #4]
    5ffa:	4013      	ands	r3, r2
    5ffc:	9305      	str	r3, [sp, #20]
                break;
    5ffe:	e007      	b.n	6010 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    6000:	2307      	movs	r3, #7
    6002:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6004:	9a05      	ldr	r2, [sp, #20]
    6006:	9b01      	ldr	r3, [sp, #4]
    6008:	4013      	ands	r3, r2
    600a:	9305      	str	r3, [sp, #20]
                break;
    600c:	e000      	b.n	6010 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    600e:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    6010:	9b05      	ldr	r3, [sp, #20]
}
    6012:	4618      	mov	r0, r3
    6014:	b006      	add	sp, #24
    6016:	4770      	bx	lr
    6018:	4004a000 	.word	0x4004a000
    601c:	4004b000 	.word	0x4004b000

00006020 <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    6020:	b500      	push	{lr}
    6022:	b089      	sub	sp, #36	; 0x24
    6024:	9003      	str	r0, [sp, #12]
    6026:	9102      	str	r1, [sp, #8]
    6028:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    602a:	9b01      	ldr	r3, [sp, #4]
    602c:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    602e:	9b01      	ldr	r3, [sp, #4]
    6030:	2b08      	cmp	r3, #8
    6032:	d121      	bne.n	6078 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6034:	4b13      	ldr	r3, [pc, #76]	; (6084 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6036:	685b      	ldr	r3, [r3, #4]
    6038:	f003 030f 	and.w	r3, r3, #15
    603c:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    603e:	9a06      	ldr	r2, [sp, #24]
    6040:	9902      	ldr	r1, [sp, #8]
    6042:	9803      	ldr	r0, [sp, #12]
    6044:	f7ff ff6e 	bl	5f24 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6048:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    604a:	9b05      	ldr	r3, [sp, #20]
    604c:	2bff      	cmp	r3, #255	; 0xff
    604e:	d011      	beq.n	6074 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    6050:	f007 fe04 	bl	dc5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6054:	4b0b      	ldr	r3, [pc, #44]	; (6084 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6056:	685b      	ldr	r3, [r3, #4]
    6058:	4a0a      	ldr	r2, [pc, #40]	; (6084 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    605a:	f023 030f 	bic.w	r3, r3, #15
    605e:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    6060:	4b08      	ldr	r3, [pc, #32]	; (6084 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6062:	685a      	ldr	r2, [r3, #4]
    6064:	9b05      	ldr	r3, [sp, #20]
    6066:	f003 030f 	and.w	r3, r3, #15
    606a:	4906      	ldr	r1, [pc, #24]	; (6084 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    606c:	4313      	orrs	r3, r2
    606e:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    6070:	f007 fe20 	bl	dcb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6074:	2300      	movs	r3, #0
    6076:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6078:	9b07      	ldr	r3, [sp, #28]
}
    607a:	4618      	mov	r0, r3
    607c:	b009      	add	sp, #36	; 0x24
    607e:	f85d fb04 	ldr.w	pc, [sp], #4
    6082:	bf00      	nop
    6084:	40048000 	.word	0x40048000

00006088 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6088:	b500      	push	{lr}
    608a:	b087      	sub	sp, #28
    608c:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    608e:	2300      	movs	r3, #0
    6090:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    6092:	2300      	movs	r3, #0
    6094:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    6096:	2300      	movs	r3, #0
    6098:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    609a:	9b01      	ldr	r3, [sp, #4]
    609c:	68db      	ldr	r3, [r3, #12]
    609e:	2b02      	cmp	r3, #2
    60a0:	d00a      	beq.n	60b8 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    60a2:	9b05      	ldr	r3, [sp, #20]
    60a4:	f043 0302 	orr.w	r3, r3, #2
    60a8:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    60aa:	9b01      	ldr	r3, [sp, #4]
    60ac:	68db      	ldr	r3, [r3, #12]
    60ae:	f003 0301 	and.w	r3, r3, #1
    60b2:	9a05      	ldr	r2, [sp, #20]
    60b4:	4313      	orrs	r3, r2
    60b6:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    60b8:	9b01      	ldr	r3, [sp, #4]
    60ba:	699b      	ldr	r3, [r3, #24]
    60bc:	019b      	lsls	r3, r3, #6
    60be:	f003 0340 	and.w	r3, r3, #64	; 0x40
    60c2:	9a05      	ldr	r2, [sp, #20]
    60c4:	4313      	orrs	r3, r2
    60c6:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    60c8:	9b01      	ldr	r3, [sp, #4]
    60ca:	6a1b      	ldr	r3, [r3, #32]
    60cc:	03db      	lsls	r3, r3, #15
    60ce:	b29b      	uxth	r3, r3
    60d0:	9a05      	ldr	r2, [sp, #20]
    60d2:	4313      	orrs	r3, r2
    60d4:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    60d6:	9b01      	ldr	r3, [sp, #4]
    60d8:	7f1b      	ldrb	r3, [r3, #28]
    60da:	2b00      	cmp	r3, #0
    60dc:	d001      	beq.n	60e2 <Port_Ci_Port_Ip_PinInit+0x5a>
    60de:	2310      	movs	r3, #16
    60e0:	e000      	b.n	60e4 <Port_Ci_Port_Ip_PinInit+0x5c>
    60e2:	2300      	movs	r3, #0
    60e4:	9a05      	ldr	r2, [sp, #20]
    60e6:	4313      	orrs	r3, r2
    60e8:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    60ea:	9b01      	ldr	r3, [sp, #4]
    60ec:	691b      	ldr	r3, [r3, #16]
    60ee:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    60f0:	9b01      	ldr	r3, [sp, #4]
    60f2:	6818      	ldr	r0, [r3, #0]
    60f4:	9b01      	ldr	r3, [sp, #4]
    60f6:	689b      	ldr	r3, [r3, #8]
    60f8:	9a04      	ldr	r2, [sp, #16]
    60fa:	4619      	mov	r1, r3
    60fc:	f7ff ff90 	bl	6020 <Port_Ci_Port_Ip_ConfigureInterleave>
    6100:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    6102:	9b03      	ldr	r3, [sp, #12]
    6104:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6106:	9b04      	ldr	r3, [sp, #16]
    6108:	021b      	lsls	r3, r3, #8
    610a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    610e:	9a05      	ldr	r2, [sp, #20]
    6110:	4313      	orrs	r3, r2
    6112:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6114:	f007 fc08 	bl	d928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6118:	9b01      	ldr	r3, [sp, #4]
    611a:	681b      	ldr	r3, [r3, #0]
    611c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    6120:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    6122:	9b01      	ldr	r3, [sp, #4]
    6124:	689b      	ldr	r3, [r3, #8]
    6126:	2201      	movs	r2, #1
    6128:	fa02 f303 	lsl.w	r3, r2, r3
    612c:	43db      	mvns	r3, r3
    612e:	9a02      	ldr	r2, [sp, #8]
    6130:	4013      	ands	r3, r2
    6132:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6134:	9b01      	ldr	r3, [sp, #4]
    6136:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    613a:	2b00      	cmp	r3, #0
    613c:	d001      	beq.n	6142 <Port_Ci_Port_Ip_PinInit+0xba>
    613e:	2201      	movs	r2, #1
    6140:	e000      	b.n	6144 <Port_Ci_Port_Ip_PinInit+0xbc>
    6142:	2200      	movs	r2, #0
    6144:	9b01      	ldr	r3, [sp, #4]
    6146:	689b      	ldr	r3, [r3, #8]
    6148:	fa02 f303 	lsl.w	r3, r2, r3
    614c:	9a02      	ldr	r2, [sp, #8]
    614e:	4313      	orrs	r3, r2
    6150:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    6152:	9b01      	ldr	r3, [sp, #4]
    6154:	681b      	ldr	r3, [r3, #0]
    6156:	9a02      	ldr	r2, [sp, #8]
    6158:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    615c:	f007 fc10 	bl	d980 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    6160:	9b04      	ldr	r3, [sp, #16]
    6162:	2b01      	cmp	r3, #1
    6164:	d16d      	bne.n	6242 <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6166:	9b01      	ldr	r3, [sp, #4]
    6168:	695b      	ldr	r3, [r3, #20]
    616a:	2b02      	cmp	r3, #2
    616c:	d138      	bne.n	61e0 <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    616e:	9b01      	ldr	r3, [sp, #4]
    6170:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6174:	2b01      	cmp	r3, #1
    6176:	d10f      	bne.n	6198 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6178:	f007 fc28 	bl	d9cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    617c:	9b01      	ldr	r3, [sp, #4]
    617e:	685b      	ldr	r3, [r3, #4]
    6180:	6859      	ldr	r1, [r3, #4]
    6182:	9b01      	ldr	r3, [sp, #4]
    6184:	689b      	ldr	r3, [r3, #8]
    6186:	2201      	movs	r2, #1
    6188:	409a      	lsls	r2, r3
    618a:	9b01      	ldr	r3, [sp, #4]
    618c:	685b      	ldr	r3, [r3, #4]
    618e:	430a      	orrs	r2, r1
    6190:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    6192:	f007 fc47 	bl	da24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    6196:	e013      	b.n	61c0 <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    6198:	9b01      	ldr	r3, [sp, #4]
    619a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    619e:	2b00      	cmp	r3, #0
    61a0:	d10e      	bne.n	61c0 <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    61a2:	f007 fc65 	bl	da70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    61a6:	9b01      	ldr	r3, [sp, #4]
    61a8:	685b      	ldr	r3, [r3, #4]
    61aa:	6899      	ldr	r1, [r3, #8]
    61ac:	9b01      	ldr	r3, [sp, #4]
    61ae:	689b      	ldr	r3, [r3, #8]
    61b0:	2201      	movs	r2, #1
    61b2:	409a      	lsls	r2, r3
    61b4:	9b01      	ldr	r3, [sp, #4]
    61b6:	685b      	ldr	r3, [r3, #4]
    61b8:	430a      	orrs	r2, r1
    61ba:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    61bc:	f007 fc84 	bl	dac8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    61c0:	f007 fca8 	bl	db14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    61c4:	9b01      	ldr	r3, [sp, #4]
    61c6:	685b      	ldr	r3, [r3, #4]
    61c8:	6959      	ldr	r1, [r3, #20]
    61ca:	9b01      	ldr	r3, [sp, #4]
    61cc:	689b      	ldr	r3, [r3, #8]
    61ce:	2201      	movs	r2, #1
    61d0:	409a      	lsls	r2, r3
    61d2:	9b01      	ldr	r3, [sp, #4]
    61d4:	685b      	ldr	r3, [r3, #4]
    61d6:	430a      	orrs	r2, r1
    61d8:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    61da:	f007 fcc7 	bl	db6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    61de:	e030      	b.n	6242 <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    61e0:	f007 fc98 	bl	db14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    61e4:	9b01      	ldr	r3, [sp, #4]
    61e6:	685b      	ldr	r3, [r3, #4]
    61e8:	6959      	ldr	r1, [r3, #20]
    61ea:	9b01      	ldr	r3, [sp, #4]
    61ec:	689b      	ldr	r3, [r3, #8]
    61ee:	2201      	movs	r2, #1
    61f0:	fa02 f303 	lsl.w	r3, r2, r3
    61f4:	43da      	mvns	r2, r3
    61f6:	9b01      	ldr	r3, [sp, #4]
    61f8:	685b      	ldr	r3, [r3, #4]
    61fa:	400a      	ands	r2, r1
    61fc:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    61fe:	f007 fcb5 	bl	db6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    6202:	f007 fcd9 	bl	dbb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6206:	9b01      	ldr	r3, [sp, #4]
    6208:	685b      	ldr	r3, [r3, #4]
    620a:	6999      	ldr	r1, [r3, #24]
    620c:	9b01      	ldr	r3, [sp, #4]
    620e:	689b      	ldr	r3, [r3, #8]
    6210:	2201      	movs	r2, #1
    6212:	fa02 f303 	lsl.w	r3, r2, r3
    6216:	43da      	mvns	r2, r3
    6218:	9b01      	ldr	r3, [sp, #4]
    621a:	685b      	ldr	r3, [r3, #4]
    621c:	400a      	ands	r2, r1
    621e:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    6220:	9b01      	ldr	r3, [sp, #4]
    6222:	695b      	ldr	r3, [r3, #20]
    6224:	2b03      	cmp	r3, #3
    6226:	d10a      	bne.n	623e <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6228:	9b01      	ldr	r3, [sp, #4]
    622a:	685b      	ldr	r3, [r3, #4]
    622c:	6999      	ldr	r1, [r3, #24]
    622e:	9b01      	ldr	r3, [sp, #4]
    6230:	689b      	ldr	r3, [r3, #8]
    6232:	2201      	movs	r2, #1
    6234:	409a      	lsls	r2, r3
    6236:	9b01      	ldr	r3, [sp, #4]
    6238:	685b      	ldr	r3, [r3, #4]
    623a:	430a      	orrs	r2, r1
    623c:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    623e:	f007 fce7 	bl	dc10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    6242:	9b01      	ldr	r3, [sp, #4]
    6244:	681b      	ldr	r3, [r3, #0]
    6246:	9a01      	ldr	r2, [sp, #4]
    6248:	6892      	ldr	r2, [r2, #8]
    624a:	9905      	ldr	r1, [sp, #20]
    624c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    6250:	bf00      	nop
    6252:	b007      	add	sp, #28
    6254:	f85d fb04 	ldr.w	pc, [sp], #4

00006258 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6258:	b500      	push	{lr}
    625a:	b085      	sub	sp, #20
    625c:	9001      	str	r0, [sp, #4]
    625e:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    6260:	2300      	movs	r3, #0
    6262:	9303      	str	r3, [sp, #12]
    6264:	e00d      	b.n	6282 <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6266:	9a03      	ldr	r2, [sp, #12]
    6268:	4613      	mov	r3, r2
    626a:	009b      	lsls	r3, r3, #2
    626c:	4413      	add	r3, r2
    626e:	00db      	lsls	r3, r3, #3
    6270:	461a      	mov	r2, r3
    6272:	9b00      	ldr	r3, [sp, #0]
    6274:	4413      	add	r3, r2
    6276:	4618      	mov	r0, r3
    6278:	f7ff ff06 	bl	6088 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    627c:	9b03      	ldr	r3, [sp, #12]
    627e:	3301      	adds	r3, #1
    6280:	9303      	str	r3, [sp, #12]
    6282:	9a03      	ldr	r2, [sp, #12]
    6284:	9b01      	ldr	r3, [sp, #4]
    6286:	429a      	cmp	r2, r3
    6288:	d3ed      	bcc.n	6266 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    628a:	2300      	movs	r3, #0
}
    628c:	4618      	mov	r0, r3
    628e:	b005      	add	sp, #20
    6290:	f85d fb04 	ldr.w	pc, [sp], #4

00006294 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    6294:	b500      	push	{lr}
    6296:	b087      	sub	sp, #28
    6298:	9003      	str	r0, [sp, #12]
    629a:	9102      	str	r1, [sp, #8]
    629c:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    629e:	9a01      	ldr	r2, [sp, #4]
    62a0:	9902      	ldr	r1, [sp, #8]
    62a2:	9803      	ldr	r0, [sp, #12]
    62a4:	f7ff febc 	bl	6020 <Port_Ci_Port_Ip_ConfigureInterleave>
    62a8:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    62aa:	f007 fd29 	bl	dd00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    62ae:	9b03      	ldr	r3, [sp, #12]
    62b0:	9a02      	ldr	r2, [sp, #8]
    62b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    62b6:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    62b8:	9b04      	ldr	r3, [sp, #16]
    62ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    62be:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    62c0:	9b05      	ldr	r3, [sp, #20]
    62c2:	021b      	lsls	r3, r3, #8
    62c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    62c8:	9a04      	ldr	r2, [sp, #16]
    62ca:	4313      	orrs	r3, r2
    62cc:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    62ce:	9b03      	ldr	r3, [sp, #12]
    62d0:	9a02      	ldr	r2, [sp, #8]
    62d2:	9904      	ldr	r1, [sp, #16]
    62d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    62d8:	f007 fd3e 	bl	dd58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    62dc:	bf00      	nop
    62de:	b007      	add	sp, #28
    62e0:	f85d fb04 	ldr.w	pc, [sp], #4

000062e4 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    62e4:	b500      	push	{lr}
    62e6:	b083      	sub	sp, #12
    62e8:	9001      	str	r0, [sp, #4]
    62ea:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    62ec:	f007 fd5a 	bl	dda4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    62f0:	9b01      	ldr	r3, [sp, #4]
    62f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    62f6:	2101      	movs	r1, #1
    62f8:	9b00      	ldr	r3, [sp, #0]
    62fa:	fa01 f303 	lsl.w	r3, r1, r3
    62fe:	431a      	orrs	r2, r3
    6300:	9b01      	ldr	r3, [sp, #4]
    6302:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6306:	f007 fd79 	bl	ddfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    630a:	bf00      	nop
    630c:	b003      	add	sp, #12
    630e:	f85d fb04 	ldr.w	pc, [sp], #4

00006312 <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    6312:	b500      	push	{lr}
    6314:	b083      	sub	sp, #12
    6316:	9001      	str	r0, [sp, #4]
    6318:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    631a:	f007 fd95 	bl	de48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    631e:	9b01      	ldr	r3, [sp, #4]
    6320:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6324:	2101      	movs	r1, #1
    6326:	9b00      	ldr	r3, [sp, #0]
    6328:	fa01 f303 	lsl.w	r3, r1, r3
    632c:	43db      	mvns	r3, r3
    632e:	401a      	ands	r2, r3
    6330:	9b01      	ldr	r3, [sp, #4]
    6332:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6336:	f007 fdb3 	bl	dea0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    633a:	bf00      	nop
    633c:	b003      	add	sp, #12
    633e:	f85d fb04 	ldr.w	pc, [sp], #4

00006342 <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    6342:	b082      	sub	sp, #8
    6344:	9001      	str	r0, [sp, #4]
    6346:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6348:	9b00      	ldr	r3, [sp, #0]
    634a:	785b      	ldrb	r3, [r3, #1]
    634c:	f003 0201 	and.w	r2, r3, #1
    6350:	9b01      	ldr	r3, [sp, #4]
    6352:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6356:	9b00      	ldr	r3, [sp, #0]
    6358:	789b      	ldrb	r3, [r3, #2]
    635a:	f003 021f 	and.w	r2, r3, #31
    635e:	9b01      	ldr	r3, [sp, #4]
    6360:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6364:	bf00      	nop
    6366:	b002      	add	sp, #8
    6368:	4770      	bx	lr

0000636a <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    636a:	b086      	sub	sp, #24
    636c:	9003      	str	r0, [sp, #12]
    636e:	9301      	str	r3, [sp, #4]
    6370:	460b      	mov	r3, r1
    6372:	f8ad 300a 	strh.w	r3, [sp, #10]
    6376:	4613      	mov	r3, r2
    6378:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    637c:	2300      	movs	r3, #0
    637e:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    6382:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6386:	f043 0301 	orr.w	r3, r3, #1
    638a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    638e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6392:	f043 0302 	orr.w	r3, r3, #2
    6396:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    639a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    639e:	f043 0310 	orr.w	r3, r3, #16
    63a2:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    63a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    63ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    63b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    63ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    63be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    63c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    63ca:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    63ce:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    63d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    63d6:	4013      	ands	r3, r2
    63d8:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    63dc:	9b01      	ldr	r3, [sp, #4]
    63de:	2b00      	cmp	r3, #0
    63e0:	d003      	beq.n	63ea <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    63e2:	9b01      	ldr	r3, [sp, #4]
    63e4:	2b01      	cmp	r3, #1
    63e6:	d00a      	beq.n	63fe <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    63e8:	e013      	b.n	6412 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    63ea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    63ee:	041a      	lsls	r2, r3, #16
    63f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    63f4:	431a      	orrs	r2, r3
    63f6:	9b03      	ldr	r3, [sp, #12]
    63f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    63fc:	e009      	b.n	6412 <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    63fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6402:	041a      	lsls	r2, r3, #16
    6404:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6408:	431a      	orrs	r2, r3
    640a:	9b03      	ldr	r3, [sp, #12]
    640c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6410:	bf00      	nop
    }
}
    6412:	bf00      	nop
    6414:	b006      	add	sp, #24
    6416:	4770      	bx	lr

00006418 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6418:	b500      	push	{lr}
    641a:	b087      	sub	sp, #28
    641c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    641e:	9b01      	ldr	r3, [sp, #4]
    6420:	885b      	ldrh	r3, [r3, #2]
    6422:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6426:	9b01      	ldr	r3, [sp, #4]
    6428:	689b      	ldr	r3, [r3, #8]
    642a:	7a1b      	ldrb	r3, [r3, #8]
    642c:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6430:	9b01      	ldr	r3, [sp, #4]
    6432:	689b      	ldr	r3, [r3, #8]
    6434:	681b      	ldr	r3, [r3, #0]
    6436:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6438:	9b01      	ldr	r3, [sp, #4]
    643a:	689b      	ldr	r3, [r3, #8]
    643c:	685b      	ldr	r3, [r3, #4]
    643e:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6440:	2300      	movs	r3, #0
    6442:	f8ad 3016 	strh.w	r3, [sp, #22]
    6446:	e111      	b.n	666c <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6448:	9b02      	ldr	r3, [sp, #8]
    644a:	2b02      	cmp	r3, #2
    644c:	d169      	bne.n	6522 <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    644e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6452:	2b01      	cmp	r3, #1
    6454:	d11a      	bne.n	648c <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6456:	9b01      	ldr	r3, [sp, #4]
    6458:	685a      	ldr	r2, [r3, #4]
    645a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    645e:	005b      	lsls	r3, r3, #1
    6460:	4413      	add	r3, r2
    6462:	881b      	ldrh	r3, [r3, #0]
    6464:	f003 021f 	and.w	r2, r3, #31
    6468:	9b01      	ldr	r3, [sp, #4]
    646a:	6859      	ldr	r1, [r3, #4]
    646c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6470:	005b      	lsls	r3, r3, #1
    6472:	440b      	add	r3, r1
    6474:	881b      	ldrh	r3, [r3, #0]
    6476:	095b      	lsrs	r3, r3, #5
    6478:	b29b      	uxth	r3, r3
    647a:	4619      	mov	r1, r3
    647c:	4b81      	ldr	r3, [pc, #516]	; (6684 <Port_Ipw_Init_UnusedPins+0x26c>)
    647e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6482:	2101      	movs	r1, #1
    6484:	fa01 f202 	lsl.w	r2, r1, r2
    6488:	605a      	str	r2, [r3, #4]
    648a:	e01d      	b.n	64c8 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    648c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6490:	2b00      	cmp	r3, #0
    6492:	d119      	bne.n	64c8 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6494:	9b01      	ldr	r3, [sp, #4]
    6496:	685a      	ldr	r2, [r3, #4]
    6498:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    649c:	005b      	lsls	r3, r3, #1
    649e:	4413      	add	r3, r2
    64a0:	881b      	ldrh	r3, [r3, #0]
    64a2:	f003 021f 	and.w	r2, r3, #31
    64a6:	9b01      	ldr	r3, [sp, #4]
    64a8:	6859      	ldr	r1, [r3, #4]
    64aa:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64ae:	005b      	lsls	r3, r3, #1
    64b0:	440b      	add	r3, r1
    64b2:	881b      	ldrh	r3, [r3, #0]
    64b4:	095b      	lsrs	r3, r3, #5
    64b6:	b29b      	uxth	r3, r3
    64b8:	4619      	mov	r1, r3
    64ba:	4b72      	ldr	r3, [pc, #456]	; (6684 <Port_Ipw_Init_UnusedPins+0x26c>)
    64bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    64c0:	2101      	movs	r1, #1
    64c2:	fa01 f202 	lsl.w	r2, r1, r2
    64c6:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    64c8:	f007 fd10 	bl	deec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    64cc:	9b01      	ldr	r3, [sp, #4]
    64ce:	685a      	ldr	r2, [r3, #4]
    64d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64d4:	005b      	lsls	r3, r3, #1
    64d6:	4413      	add	r3, r2
    64d8:	881b      	ldrh	r3, [r3, #0]
    64da:	095b      	lsrs	r3, r3, #5
    64dc:	b29b      	uxth	r3, r3
    64de:	461a      	mov	r2, r3
    64e0:	4b68      	ldr	r3, [pc, #416]	; (6684 <Port_Ipw_Init_UnusedPins+0x26c>)
    64e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    64e6:	6959      	ldr	r1, [r3, #20]
    64e8:	9b01      	ldr	r3, [sp, #4]
    64ea:	685a      	ldr	r2, [r3, #4]
    64ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    64f0:	005b      	lsls	r3, r3, #1
    64f2:	4413      	add	r3, r2
    64f4:	881b      	ldrh	r3, [r3, #0]
    64f6:	f003 031f 	and.w	r3, r3, #31
    64fa:	2201      	movs	r2, #1
    64fc:	409a      	lsls	r2, r3
    64fe:	9b01      	ldr	r3, [sp, #4]
    6500:	6858      	ldr	r0, [r3, #4]
    6502:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6506:	005b      	lsls	r3, r3, #1
    6508:	4403      	add	r3, r0
    650a:	881b      	ldrh	r3, [r3, #0]
    650c:	095b      	lsrs	r3, r3, #5
    650e:	b29b      	uxth	r3, r3
    6510:	4618      	mov	r0, r3
    6512:	4b5c      	ldr	r3, [pc, #368]	; (6684 <Port_Ipw_Init_UnusedPins+0x26c>)
    6514:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6518:	430a      	orrs	r2, r1
    651a:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    651c:	f007 fd12 	bl	df44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6520:	e086      	b.n	6630 <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6522:	f007 fce3 	bl	deec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6526:	9b01      	ldr	r3, [sp, #4]
    6528:	685a      	ldr	r2, [r3, #4]
    652a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    652e:	005b      	lsls	r3, r3, #1
    6530:	4413      	add	r3, r2
    6532:	881b      	ldrh	r3, [r3, #0]
    6534:	095b      	lsrs	r3, r3, #5
    6536:	b29b      	uxth	r3, r3
    6538:	461a      	mov	r2, r3
    653a:	4b52      	ldr	r3, [pc, #328]	; (6684 <Port_Ipw_Init_UnusedPins+0x26c>)
    653c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6540:	6959      	ldr	r1, [r3, #20]
    6542:	9b01      	ldr	r3, [sp, #4]
    6544:	685a      	ldr	r2, [r3, #4]
    6546:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    654a:	005b      	lsls	r3, r3, #1
    654c:	4413      	add	r3, r2
    654e:	881b      	ldrh	r3, [r3, #0]
    6550:	f003 031f 	and.w	r3, r3, #31
    6554:	2201      	movs	r2, #1
    6556:	fa02 f303 	lsl.w	r3, r2, r3
    655a:	43da      	mvns	r2, r3
    655c:	9b01      	ldr	r3, [sp, #4]
    655e:	6858      	ldr	r0, [r3, #4]
    6560:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6564:	005b      	lsls	r3, r3, #1
    6566:	4403      	add	r3, r0
    6568:	881b      	ldrh	r3, [r3, #0]
    656a:	095b      	lsrs	r3, r3, #5
    656c:	b29b      	uxth	r3, r3
    656e:	4618      	mov	r0, r3
    6570:	4b44      	ldr	r3, [pc, #272]	; (6684 <Port_Ipw_Init_UnusedPins+0x26c>)
    6572:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6576:	400a      	ands	r2, r1
    6578:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    657a:	f007 fce3 	bl	df44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    657e:	f007 fd07 	bl	df90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6582:	9b01      	ldr	r3, [sp, #4]
    6584:	685a      	ldr	r2, [r3, #4]
    6586:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    658a:	005b      	lsls	r3, r3, #1
    658c:	4413      	add	r3, r2
    658e:	881b      	ldrh	r3, [r3, #0]
    6590:	095b      	lsrs	r3, r3, #5
    6592:	b29b      	uxth	r3, r3
    6594:	461a      	mov	r2, r3
    6596:	4b3b      	ldr	r3, [pc, #236]	; (6684 <Port_Ipw_Init_UnusedPins+0x26c>)
    6598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    659c:	6999      	ldr	r1, [r3, #24]
    659e:	9b01      	ldr	r3, [sp, #4]
    65a0:	685a      	ldr	r2, [r3, #4]
    65a2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65a6:	005b      	lsls	r3, r3, #1
    65a8:	4413      	add	r3, r2
    65aa:	881b      	ldrh	r3, [r3, #0]
    65ac:	f003 031f 	and.w	r3, r3, #31
    65b0:	2201      	movs	r2, #1
    65b2:	fa02 f303 	lsl.w	r3, r2, r3
    65b6:	43da      	mvns	r2, r3
    65b8:	9b01      	ldr	r3, [sp, #4]
    65ba:	6858      	ldr	r0, [r3, #4]
    65bc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65c0:	005b      	lsls	r3, r3, #1
    65c2:	4403      	add	r3, r0
    65c4:	881b      	ldrh	r3, [r3, #0]
    65c6:	095b      	lsrs	r3, r3, #5
    65c8:	b29b      	uxth	r3, r3
    65ca:	4618      	mov	r0, r3
    65cc:	4b2d      	ldr	r3, [pc, #180]	; (6684 <Port_Ipw_Init_UnusedPins+0x26c>)
    65ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    65d2:	400a      	ands	r2, r1
    65d4:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    65d6:	9b02      	ldr	r3, [sp, #8]
    65d8:	2b03      	cmp	r3, #3
    65da:	d127      	bne.n	662c <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    65dc:	9b01      	ldr	r3, [sp, #4]
    65de:	685a      	ldr	r2, [r3, #4]
    65e0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    65e4:	005b      	lsls	r3, r3, #1
    65e6:	4413      	add	r3, r2
    65e8:	881b      	ldrh	r3, [r3, #0]
    65ea:	095b      	lsrs	r3, r3, #5
    65ec:	b29b      	uxth	r3, r3
    65ee:	461a      	mov	r2, r3
    65f0:	4b24      	ldr	r3, [pc, #144]	; (6684 <Port_Ipw_Init_UnusedPins+0x26c>)
    65f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    65f6:	6999      	ldr	r1, [r3, #24]
    65f8:	9b01      	ldr	r3, [sp, #4]
    65fa:	685a      	ldr	r2, [r3, #4]
    65fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6600:	005b      	lsls	r3, r3, #1
    6602:	4413      	add	r3, r2
    6604:	881b      	ldrh	r3, [r3, #0]
    6606:	f003 031f 	and.w	r3, r3, #31
    660a:	2201      	movs	r2, #1
    660c:	409a      	lsls	r2, r3
    660e:	9b01      	ldr	r3, [sp, #4]
    6610:	6858      	ldr	r0, [r3, #4]
    6612:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6616:	005b      	lsls	r3, r3, #1
    6618:	4403      	add	r3, r0
    661a:	881b      	ldrh	r3, [r3, #0]
    661c:	095b      	lsrs	r3, r3, #5
    661e:	b29b      	uxth	r3, r3
    6620:	4618      	mov	r0, r3
    6622:	4b18      	ldr	r3, [pc, #96]	; (6684 <Port_Ipw_Init_UnusedPins+0x26c>)
    6624:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6628:	430a      	orrs	r2, r1
    662a:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    662c:	f007 fcdc 	bl	dfe8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6630:	9b01      	ldr	r3, [sp, #4]
    6632:	685a      	ldr	r2, [r3, #4]
    6634:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6638:	005b      	lsls	r3, r3, #1
    663a:	4413      	add	r3, r2
    663c:	881b      	ldrh	r3, [r3, #0]
    663e:	095b      	lsrs	r3, r3, #5
    6640:	b29b      	uxth	r3, r3
    6642:	461a      	mov	r2, r3
    6644:	4b10      	ldr	r3, [pc, #64]	; (6688 <Port_Ipw_Init_UnusedPins+0x270>)
    6646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    664a:	9a01      	ldr	r2, [sp, #4]
    664c:	6851      	ldr	r1, [r2, #4]
    664e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6652:	0052      	lsls	r2, r2, #1
    6654:	440a      	add	r2, r1
    6656:	8812      	ldrh	r2, [r2, #0]
    6658:	f002 021f 	and.w	r2, r2, #31
    665c:	9903      	ldr	r1, [sp, #12]
    665e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6662:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6666:	3301      	adds	r3, #1
    6668:	f8ad 3016 	strh.w	r3, [sp, #22]
    666c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6670:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6674:	429a      	cmp	r2, r3
    6676:	f4ff aee7 	bcc.w	6448 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    667a:	bf00      	nop
    667c:	bf00      	nop
    667e:	b007      	add	sp, #28
    6680:	f85d fb04 	ldr.w	pc, [sp], #4
    6684:	0000f4d4 	.word	0x0000f4d4
    6688:	0000f4c0 	.word	0x0000f4c0

0000668c <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    668c:	b500      	push	{lr}
    668e:	b085      	sub	sp, #20
    6690:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6692:	9b01      	ldr	r3, [sp, #4]
    6694:	7c1b      	ldrb	r3, [r3, #16]
    6696:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    669a:	2300      	movs	r3, #0
    669c:	f8ad 300e 	strh.w	r3, [sp, #14]
    66a0:	e035      	b.n	670e <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    66a2:	9b01      	ldr	r3, [sp, #4]
    66a4:	695a      	ldr	r2, [r3, #20]
    66a6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66aa:	00db      	lsls	r3, r3, #3
    66ac:	4413      	add	r3, r2
    66ae:	781b      	ldrb	r3, [r3, #0]
    66b0:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    66b4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    66b8:	4a1f      	ldr	r2, [pc, #124]	; (6738 <Port_Ipw_Init+0xac>)
    66ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    66be:	9b01      	ldr	r3, [sp, #4]
    66c0:	695a      	ldr	r2, [r3, #20]
    66c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66c6:	00db      	lsls	r3, r3, #3
    66c8:	4413      	add	r3, r2
    66ca:	4619      	mov	r1, r3
    66cc:	f7ff fe39 	bl	6342 <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    66d0:	f007 fdf8 	bl	e2c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    66d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    66d8:	4a17      	ldr	r2, [pc, #92]	; (6738 <Port_Ipw_Init+0xac>)
    66da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    66de:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    66e2:	9b01      	ldr	r3, [sp, #4]
    66e4:	695a      	ldr	r2, [r3, #20]
    66e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    66ea:	00db      	lsls	r3, r3, #3
    66ec:	4413      	add	r3, r2
    66ee:	685a      	ldr	r2, [r3, #4]
    66f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    66f4:	4810      	ldr	r0, [pc, #64]	; (6738 <Port_Ipw_Init+0xac>)
    66f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    66fa:	430a      	orrs	r2, r1
    66fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6700:	f007 fe0c 	bl	e31c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6704:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6708:	3301      	adds	r3, #1
    670a:	f8ad 300e 	strh.w	r3, [sp, #14]
    670e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6712:	b29b      	uxth	r3, r3
    6714:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6718:	429a      	cmp	r2, r3
    671a:	d3c2      	bcc.n	66a2 <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    671c:	9b01      	ldr	r3, [sp, #4]
    671e:	6a1b      	ldr	r3, [r3, #32]
    6720:	4619      	mov	r1, r3
    6722:	2010      	movs	r0, #16
    6724:	f7ff fd98 	bl	6258 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6728:	9801      	ldr	r0, [sp, #4]
    672a:	f7ff fe75 	bl	6418 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    672e:	bf00      	nop
    6730:	b005      	add	sp, #20
    6732:	f85d fb04 	ldr.w	pc, [sp], #4
    6736:	bf00      	nop
    6738:	0000f4c0 	.word	0x0000f4c0

0000673c <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    673c:	b500      	push	{lr}
    673e:	b085      	sub	sp, #20
    6740:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    6742:	9b01      	ldr	r3, [sp, #4]
    6744:	881b      	ldrh	r3, [r3, #0]
    6746:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    674a:	2300      	movs	r3, #0
    674c:	f8ad 300e 	strh.w	r3, [sp, #14]
    6750:	e0d2      	b.n	68f8 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    6752:	9b01      	ldr	r3, [sp, #4]
    6754:	68d9      	ldr	r1, [r3, #12]
    6756:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    675a:	4613      	mov	r3, r2
    675c:	009b      	lsls	r3, r3, #2
    675e:	4413      	add	r3, r2
    6760:	009b      	lsls	r3, r3, #2
    6762:	440b      	add	r3, r1
    6764:	7c5b      	ldrb	r3, [r3, #17]
    6766:	f083 0301 	eor.w	r3, r3, #1
    676a:	b2db      	uxtb	r3, r3
    676c:	2b00      	cmp	r3, #0
    676e:	f000 80be 	beq.w	68ee <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    6772:	9b01      	ldr	r3, [sp, #4]
    6774:	68d9      	ldr	r1, [r3, #12]
    6776:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    677a:	4613      	mov	r3, r2
    677c:	009b      	lsls	r3, r3, #2
    677e:	4413      	add	r3, r2
    6780:	009b      	lsls	r3, r3, #2
    6782:	440b      	add	r3, r1
    6784:	7c1b      	ldrb	r3, [r3, #16]
    6786:	2b00      	cmp	r3, #0
    6788:	f000 80b1 	beq.w	68ee <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    678c:	9b01      	ldr	r3, [sp, #4]
    678e:	68d9      	ldr	r1, [r3, #12]
    6790:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6794:	4613      	mov	r3, r2
    6796:	009b      	lsls	r3, r3, #2
    6798:	4413      	add	r3, r2
    679a:	009b      	lsls	r3, r3, #2
    679c:	440b      	add	r3, r1
    679e:	881b      	ldrh	r3, [r3, #0]
    67a0:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    67a4:	9b01      	ldr	r3, [sp, #4]
    67a6:	68d9      	ldr	r1, [r3, #12]
    67a8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    67ac:	4613      	mov	r3, r2
    67ae:	009b      	lsls	r3, r3, #2
    67b0:	4413      	add	r3, r2
    67b2:	009b      	lsls	r3, r3, #2
    67b4:	440b      	add	r3, r1
    67b6:	68db      	ldr	r3, [r3, #12]
    67b8:	2b02      	cmp	r3, #2
    67ba:	d11d      	bne.n	67f8 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    67bc:	f007 feca 	bl	e554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    67c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67c4:	095b      	lsrs	r3, r3, #5
    67c6:	b29b      	uxth	r3, r3
    67c8:	461a      	mov	r2, r3
    67ca:	4b51      	ldr	r3, [pc, #324]	; (6910 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    67d0:	6959      	ldr	r1, [r3, #20]
    67d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67d6:	f003 031f 	and.w	r3, r3, #31
    67da:	2201      	movs	r2, #1
    67dc:	409a      	lsls	r2, r3
    67de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    67e2:	095b      	lsrs	r3, r3, #5
    67e4:	b29b      	uxth	r3, r3
    67e6:	4618      	mov	r0, r3
    67e8:	4b49      	ldr	r3, [pc, #292]	; (6910 <Port_Ipw_RefreshPortDirection+0x1d4>)
    67ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    67ee:	430a      	orrs	r2, r1
    67f0:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    67f2:	f007 fedb 	bl	e5ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    67f6:	e07a      	b.n	68ee <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    67f8:	9b01      	ldr	r3, [sp, #4]
    67fa:	68d9      	ldr	r1, [r3, #12]
    67fc:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6800:	4613      	mov	r3, r2
    6802:	009b      	lsls	r3, r3, #2
    6804:	4413      	add	r3, r2
    6806:	009b      	lsls	r3, r3, #2
    6808:	440b      	add	r3, r1
    680a:	68db      	ldr	r3, [r3, #12]
    680c:	2b01      	cmp	r3, #1
    680e:	d00b      	beq.n	6828 <Port_Ipw_RefreshPortDirection+0xec>
    6810:	9b01      	ldr	r3, [sp, #4]
    6812:	68d9      	ldr	r1, [r3, #12]
    6814:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6818:	4613      	mov	r3, r2
    681a:	009b      	lsls	r3, r3, #2
    681c:	4413      	add	r3, r2
    681e:	009b      	lsls	r3, r3, #2
    6820:	440b      	add	r3, r1
    6822:	68db      	ldr	r3, [r3, #12]
    6824:	2b03      	cmp	r3, #3
    6826:	d162      	bne.n	68ee <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6828:	f007 fe94 	bl	e554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    682c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6830:	095b      	lsrs	r3, r3, #5
    6832:	b29b      	uxth	r3, r3
    6834:	461a      	mov	r2, r3
    6836:	4b36      	ldr	r3, [pc, #216]	; (6910 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    683c:	6959      	ldr	r1, [r3, #20]
    683e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6842:	f003 031f 	and.w	r3, r3, #31
    6846:	2201      	movs	r2, #1
    6848:	fa02 f303 	lsl.w	r3, r2, r3
    684c:	43da      	mvns	r2, r3
    684e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6852:	095b      	lsrs	r3, r3, #5
    6854:	b29b      	uxth	r3, r3
    6856:	4618      	mov	r0, r3
    6858:	4b2d      	ldr	r3, [pc, #180]	; (6910 <Port_Ipw_RefreshPortDirection+0x1d4>)
    685a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    685e:	400a      	ands	r2, r1
    6860:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6862:	f007 fea3 	bl	e5ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6866:	f007 fec7 	bl	e5f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    686a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    686e:	095b      	lsrs	r3, r3, #5
    6870:	b29b      	uxth	r3, r3
    6872:	461a      	mov	r2, r3
    6874:	4b26      	ldr	r3, [pc, #152]	; (6910 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    687a:	6999      	ldr	r1, [r3, #24]
    687c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6880:	f003 031f 	and.w	r3, r3, #31
    6884:	2201      	movs	r2, #1
    6886:	fa02 f303 	lsl.w	r3, r2, r3
    688a:	43da      	mvns	r2, r3
    688c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6890:	095b      	lsrs	r3, r3, #5
    6892:	b29b      	uxth	r3, r3
    6894:	4618      	mov	r0, r3
    6896:	4b1e      	ldr	r3, [pc, #120]	; (6910 <Port_Ipw_RefreshPortDirection+0x1d4>)
    6898:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    689c:	400a      	ands	r2, r1
    689e:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    68a0:	9b01      	ldr	r3, [sp, #4]
    68a2:	68d9      	ldr	r1, [r3, #12]
    68a4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    68a8:	4613      	mov	r3, r2
    68aa:	009b      	lsls	r3, r3, #2
    68ac:	4413      	add	r3, r2
    68ae:	009b      	lsls	r3, r3, #2
    68b0:	440b      	add	r3, r1
    68b2:	68db      	ldr	r3, [r3, #12]
    68b4:	2b03      	cmp	r3, #3
    68b6:	d118      	bne.n	68ea <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    68b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    68bc:	095b      	lsrs	r3, r3, #5
    68be:	b29b      	uxth	r3, r3
    68c0:	461a      	mov	r2, r3
    68c2:	4b13      	ldr	r3, [pc, #76]	; (6910 <Port_Ipw_RefreshPortDirection+0x1d4>)
    68c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    68c8:	6999      	ldr	r1, [r3, #24]
    68ca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    68ce:	f003 031f 	and.w	r3, r3, #31
    68d2:	2201      	movs	r2, #1
    68d4:	409a      	lsls	r2, r3
    68d6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    68da:	095b      	lsrs	r3, r3, #5
    68dc:	b29b      	uxth	r3, r3
    68de:	4618      	mov	r0, r3
    68e0:	4b0b      	ldr	r3, [pc, #44]	; (6910 <Port_Ipw_RefreshPortDirection+0x1d4>)
    68e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    68e6:	430a      	orrs	r2, r1
    68e8:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    68ea:	f007 feb1 	bl	e650 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    68ee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    68f2:	3301      	adds	r3, #1
    68f4:	f8ad 300e 	strh.w	r3, [sp, #14]
    68f8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    68fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6900:	429a      	cmp	r2, r3
    6902:	f4ff af26 	bcc.w	6752 <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    6906:	bf00      	nop
    6908:	bf00      	nop
    690a:	b005      	add	sp, #20
    690c:	f85d fb04 	ldr.w	pc, [sp], #4
    6910:	0000f4d4 	.word	0x0000f4d4

00006914 <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    6914:	b084      	sub	sp, #16
    6916:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    6918:	2300      	movs	r3, #0
    691a:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    691e:	2300      	movs	r3, #0
    6920:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6924:	2300      	movs	r3, #0
    6926:	f88d 300e 	strb.w	r3, [sp, #14]
    692a:	e01b      	b.n	6964 <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    692c:	4a12      	ldr	r2, [pc, #72]	; (6978 <Can_IsControllersBusy+0x64>)
    692e:	9b01      	ldr	r3, [sp, #4]
    6930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6934:	695a      	ldr	r2, [r3, #20]
    6936:	f89d 300e 	ldrb.w	r3, [sp, #14]
    693a:	009b      	lsls	r3, r3, #2
    693c:	4413      	add	r3, r2
    693e:	681b      	ldr	r3, [r3, #0]
    6940:	2b00      	cmp	r3, #0
    6942:	d00a      	beq.n	695a <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    6944:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6948:	4a0c      	ldr	r2, [pc, #48]	; (697c <Can_IsControllersBusy+0x68>)
    694a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    694e:	2b00      	cmp	r3, #0
    6950:	d003      	beq.n	695a <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    6952:	2301      	movs	r3, #1
    6954:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    6958:	e008      	b.n	696c <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    695a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    695e:	3301      	adds	r3, #1
    6960:	f88d 300e 	strb.w	r3, [sp, #14]
    6964:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6968:	2b00      	cmp	r3, #0
    696a:	d0df      	beq.n	692c <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    696c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6970:	4618      	mov	r0, r3
    6972:	b004      	add	sp, #16
    6974:	4770      	bx	lr
    6976:	bf00      	nop
    6978:	1fff8cf4 	.word	0x1fff8cf4
    697c:	1fff8cf0 	.word	0x1fff8cf0

00006980 <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    6980:	b500      	push	{lr}
    6982:	b085      	sub	sp, #20
    6984:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    6986:	2300      	movs	r3, #0
    6988:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    698c:	2300      	movs	r3, #0
    698e:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6992:	2300      	movs	r3, #0
    6994:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6996:	2300      	movs	r3, #0
    6998:	f88d 300e 	strb.w	r3, [sp, #14]
    699c:	e035      	b.n	6a0a <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    699e:	4a30      	ldr	r2, [pc, #192]	; (6a60 <Can_InitControllers+0xe0>)
    69a0:	9b01      	ldr	r3, [sp, #4]
    69a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69a6:	695a      	ldr	r2, [r3, #20]
    69a8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    69ac:	009b      	lsls	r3, r3, #2
    69ae:	4413      	add	r3, r2
    69b0:	681b      	ldr	r3, [r3, #0]
    69b2:	2b00      	cmp	r3, #0
    69b4:	d024      	beq.n	6a00 <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    69b6:	4a2a      	ldr	r2, [pc, #168]	; (6a60 <Can_InitControllers+0xe0>)
    69b8:	9b01      	ldr	r3, [sp, #4]
    69ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    69be:	695a      	ldr	r2, [r3, #20]
    69c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    69c4:	009b      	lsls	r3, r3, #2
    69c6:	4413      	add	r3, r2
    69c8:	681b      	ldr	r3, [r3, #0]
    69ca:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    69cc:	9b02      	ldr	r3, [sp, #8]
    69ce:	7a1b      	ldrb	r3, [r3, #8]
    69d0:	2b00      	cmp	r3, #0
    69d2:	d015      	beq.n	6a00 <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    69d4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    69d8:	4a22      	ldr	r2, [pc, #136]	; (6a64 <Can_InitControllers+0xe4>)
    69da:	2100      	movs	r1, #0
    69dc:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    69de:	9802      	ldr	r0, [sp, #8]
    69e0:	f001 f830 	bl	7a44 <Can_43_FLEXCAN_Ipw_Init>
    69e4:	4603      	mov	r3, r0
    69e6:	2b00      	cmp	r3, #0
    69e8:	d106      	bne.n	69f8 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    69ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
    69ee:	4a1e      	ldr	r2, [pc, #120]	; (6a68 <Can_InitControllers+0xe8>)
    69f0:	2102      	movs	r1, #2
    69f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    69f6:	e003      	b.n	6a00 <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    69f8:	2301      	movs	r3, #1
    69fa:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    69fe:	e008      	b.n	6a12 <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6a00:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6a04:	3301      	adds	r3, #1
    6a06:	f88d 300e 	strb.w	r3, [sp, #14]
    6a0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6a0e:	2b00      	cmp	r3, #0
    6a10:	d0c5      	beq.n	699e <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    6a12:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a16:	2b00      	cmp	r3, #0
    6a18:	d01e      	beq.n	6a58 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6a1a:	2300      	movs	r3, #0
    6a1c:	f88d 300e 	strb.w	r3, [sp, #14]
    6a20:	e016      	b.n	6a50 <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    6a22:	4a0f      	ldr	r2, [pc, #60]	; (6a60 <Can_InitControllers+0xe0>)
    6a24:	9b01      	ldr	r3, [sp, #4]
    6a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a2a:	695a      	ldr	r2, [r3, #20]
    6a2c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6a30:	009b      	lsls	r3, r3, #2
    6a32:	4413      	add	r3, r2
    6a34:	681b      	ldr	r3, [r3, #0]
    6a36:	2b00      	cmp	r3, #0
    6a38:	d005      	beq.n	6a46 <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    6a3a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6a3e:	4a0a      	ldr	r2, [pc, #40]	; (6a68 <Can_InitControllers+0xe8>)
    6a40:	2100      	movs	r1, #0
    6a42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6a46:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6a4a:	3301      	adds	r3, #1
    6a4c:	f88d 300e 	strb.w	r3, [sp, #14]
    6a50:	f89d 300e 	ldrb.w	r3, [sp, #14]
    6a54:	2b00      	cmp	r3, #0
    6a56:	d0e4      	beq.n	6a22 <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    6a58:	bf00      	nop
    6a5a:	b005      	add	sp, #20
    6a5c:	f85d fb04 	ldr.w	pc, [sp], #4
    6a60:	1fff8cf4 	.word	0x1fff8cf4
    6a64:	1fff8cec 	.word	0x1fff8cec
    6a68:	1fff8cf0 	.word	0x1fff8cf0

00006a6c <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    6a6c:	b500      	push	{lr}
    6a6e:	b085      	sub	sp, #20
    6a70:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    6a72:	2300      	movs	r3, #0
    6a74:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6a78:	2300      	movs	r3, #0
    6a7a:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6a7c:	2300      	movs	r3, #0
    6a7e:	f88d 300f 	strb.w	r3, [sp, #15]
    6a82:	e028      	b.n	6ad6 <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    6a84:	4a18      	ldr	r2, [pc, #96]	; (6ae8 <Can_DeInitControllers+0x7c>)
    6a86:	9b01      	ldr	r3, [sp, #4]
    6a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6a8c:	695a      	ldr	r2, [r3, #20]
    6a8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6a92:	009b      	lsls	r3, r3, #2
    6a94:	4413      	add	r3, r2
    6a96:	681b      	ldr	r3, [r3, #0]
    6a98:	2b00      	cmp	r3, #0
    6a9a:	d017      	beq.n	6acc <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    6a9c:	4a12      	ldr	r2, [pc, #72]	; (6ae8 <Can_DeInitControllers+0x7c>)
    6a9e:	9b01      	ldr	r3, [sp, #4]
    6aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6aa4:	695a      	ldr	r2, [r3, #20]
    6aa6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6aaa:	009b      	lsls	r3, r3, #2
    6aac:	4413      	add	r3, r2
    6aae:	681b      	ldr	r3, [r3, #0]
    6ab0:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    6ab2:	9b02      	ldr	r3, [sp, #8]
    6ab4:	7a1b      	ldrb	r3, [r3, #8]
    6ab6:	2b00      	cmp	r3, #0
    6ab8:	d008      	beq.n	6acc <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    6aba:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6abe:	4a0b      	ldr	r2, [pc, #44]	; (6aec <Can_DeInitControllers+0x80>)
    6ac0:	2100      	movs	r1, #0
    6ac2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    6ac6:	9802      	ldr	r0, [sp, #8]
    6ac8:	f001 f8cc 	bl	7c64 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6acc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ad0:	3301      	adds	r3, #1
    6ad2:	f88d 300f 	strb.w	r3, [sp, #15]
    6ad6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6ada:	2b00      	cmp	r3, #0
    6adc:	d0d2      	beq.n	6a84 <Can_DeInitControllers+0x18>
            }
        }
    }
}
    6ade:	bf00      	nop
    6ae0:	bf00      	nop
    6ae2:	b005      	add	sp, #20
    6ae4:	f85d fb04 	ldr.w	pc, [sp], #4
    6ae8:	1fff8cf4 	.word	0x1fff8cf4
    6aec:	1fff8cf0 	.word	0x1fff8cf0

00006af0 <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    6af0:	b500      	push	{lr}
    6af2:	b085      	sub	sp, #20
    6af4:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    6af6:	2300      	movs	r3, #0
    6af8:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    6afa:	2300      	movs	r3, #0
    6afc:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    6b00:	2300      	movs	r3, #0
    6b02:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    6b04:	490c      	ldr	r1, [pc, #48]	; (6b38 <Can_43_FLEXCAN_Init+0x48>)
    6b06:	9b03      	ldr	r3, [sp, #12]
    6b08:	9a01      	ldr	r2, [sp, #4]
    6b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    6b0e:	9803      	ldr	r0, [sp, #12]
    6b10:	f7ff ff00 	bl	6914 <Can_IsControllersBusy>
    6b14:	4603      	mov	r3, r0
    6b16:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    6b1a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6b1e:	f083 0301 	eor.w	r3, r3, #1
    6b22:	b2db      	uxtb	r3, r3
    6b24:	2b00      	cmp	r3, #0
    6b26:	d002      	beq.n	6b2e <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    6b28:	9803      	ldr	r0, [sp, #12]
    6b2a:	f7ff ff29 	bl	6980 <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    6b2e:	bf00      	nop
    6b30:	b005      	add	sp, #20
    6b32:	f85d fb04 	ldr.w	pc, [sp], #4
    6b36:	bf00      	nop
    6b38:	1fff8cf4 	.word	0x1fff8cf4

00006b3c <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    6b3c:	b500      	push	{lr}
    6b3e:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    6b40:	2300      	movs	r3, #0
    6b42:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    6b46:	2300      	movs	r3, #0
    6b48:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    6b4c:	2300      	movs	r3, #0
    6b4e:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    6b50:	2300      	movs	r3, #0
    6b52:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6b54:	2300      	movs	r3, #0
    6b56:	f88d 3007 	strb.w	r3, [sp, #7]
    6b5a:	e01b      	b.n	6b94 <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    6b5c:	4a19      	ldr	r2, [pc, #100]	; (6bc4 <Can_43_FLEXCAN_DeInit+0x88>)
    6b5e:	9b00      	ldr	r3, [sp, #0]
    6b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b64:	695a      	ldr	r2, [r3, #20]
    6b66:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b6a:	009b      	lsls	r3, r3, #2
    6b6c:	4413      	add	r3, r2
    6b6e:	681b      	ldr	r3, [r3, #0]
    6b70:	2b00      	cmp	r3, #0
    6b72:	d00a      	beq.n	6b8a <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    6b74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b78:	4a13      	ldr	r2, [pc, #76]	; (6bc8 <Can_43_FLEXCAN_DeInit+0x8c>)
    6b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b7e:	2b01      	cmp	r3, #1
    6b80:	d103      	bne.n	6b8a <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    6b82:	2301      	movs	r3, #1
    6b84:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    6b88:	e008      	b.n	6b9c <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    6b8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b8e:	3301      	adds	r3, #1
    6b90:	f88d 3007 	strb.w	r3, [sp, #7]
    6b94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6b98:	2b00      	cmp	r3, #0
    6b9a:	d0df      	beq.n	6b5c <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    6b9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6ba0:	f083 0301 	eor.w	r3, r3, #1
    6ba4:	b2db      	uxtb	r3, r3
    6ba6:	2b00      	cmp	r3, #0
    6ba8:	d007      	beq.n	6bba <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    6baa:	9800      	ldr	r0, [sp, #0]
    6bac:	f7ff ff5e 	bl	6a6c <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    6bb0:	4a04      	ldr	r2, [pc, #16]	; (6bc4 <Can_43_FLEXCAN_DeInit+0x88>)
    6bb2:	9b00      	ldr	r3, [sp, #0]
    6bb4:	2100      	movs	r1, #0
    6bb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    6bba:	bf00      	nop
    6bbc:	b003      	add	sp, #12
    6bbe:	f85d fb04 	ldr.w	pc, [sp], #4
    6bc2:	bf00      	nop
    6bc4:	1fff8cf4 	.word	0x1fff8cf4
    6bc8:	1fff8cf0 	.word	0x1fff8cf0

00006bcc <Can_43_FLEXCAN_SetBaudrate>:
    Std_ReturnType Can_43_FLEXCAN_SetBaudrate
    (
        uint8 Controller,
        uint16 BaudRateConfigID
    )
    {
    6bcc:	b500      	push	{lr}
    6bce:	b087      	sub	sp, #28
    6bd0:	4603      	mov	r3, r0
    6bd2:	460a      	mov	r2, r1
    6bd4:	f88d 3007 	strb.w	r3, [sp, #7]
    6bd8:	4613      	mov	r3, r2
    6bda:	f8ad 3004 	strh.w	r3, [sp, #4]
        /* Returns the result of CAN set baudrate */
        Std_ReturnType eRetVal = (Std_ReturnType)E_NOT_OK;
    6bde:	2301      	movs	r3, #1
    6be0:	f88d 3017 	strb.w	r3, [sp, #23]
        uint32 u32CoreId = 0U;
    6be4:	2300      	movs	r3, #0
    6be6:	9304      	str	r3, [sp, #16]
        const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6be8:	2300      	movs	r3, #0
    6bea:	9303      	str	r3, [sp, #12]

        u32CoreId = Can_GetCoreID();
    6bec:	2300      	movs	r3, #0
    6bee:	9304      	str	r3, [sp, #16]
    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_BAUDRATE))
        {
    #endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    6bf0:	4a10      	ldr	r2, [pc, #64]	; (6c34 <Can_43_FLEXCAN_SetBaudrate+0x68>)
    6bf2:	9b04      	ldr	r3, [sp, #16]
    6bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6bf8:	695a      	ldr	r2, [r3, #20]
    6bfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6bfe:	009b      	lsls	r3, r3, #2
    6c00:	4413      	add	r3, r2
    6c02:	681b      	ldr	r3, [r3, #0]
    6c04:	9303      	str	r3, [sp, #12]
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_BAUDRATE, CAN_43_FLEXCAN_E_PARAM_BAUDRATE);
                    }
                    else
                    {
                #endif
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    6c06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c0a:	4a0b      	ldr	r2, [pc, #44]	; (6c38 <Can_43_FLEXCAN_SetBaudrate+0x6c>)
    6c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c10:	2b02      	cmp	r3, #2
    6c12:	d108      	bne.n	6c26 <Can_43_FLEXCAN_SetBaudrate+0x5a>
                        {
                            eRetVal = Can_43_FLEXCAN_Ipw_SetBaudrate(Can_pController, BaudRateConfigID);
    6c14:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6c18:	4619      	mov	r1, r3
    6c1a:	9803      	ldr	r0, [sp, #12]
    6c1c:	f001 f82e 	bl	7c7c <Can_43_FLEXCAN_Ipw_SetBaudrate>
    6c20:	4603      	mov	r3, r0
    6c22:	f88d 3017 	strb.w	r3, [sp, #23]
                        }
    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    }
        }
    #endif
        return eRetVal;
    6c26:	f89d 3017 	ldrb.w	r3, [sp, #23]
    }
    6c2a:	4618      	mov	r0, r3
    6c2c:	b007      	add	sp, #28
    6c2e:	f85d fb04 	ldr.w	pc, [sp], #4
    6c32:	bf00      	nop
    6c34:	1fff8cf4 	.word	0x1fff8cf4
    6c38:	1fff8cf0 	.word	0x1fff8cf0

00006c3c <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    6c3c:	b500      	push	{lr}
    6c3e:	b087      	sub	sp, #28
    6c40:	4603      	mov	r3, r0
    6c42:	9100      	str	r1, [sp, #0]
    6c44:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6c48:	2301      	movs	r3, #1
    6c4a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    6c4e:	2300      	movs	r3, #0
    6c50:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6c52:	2300      	movs	r3, #0
    6c54:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6c56:	2300      	movs	r3, #0
    6c58:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    6c5a:	4a47      	ldr	r2, [pc, #284]	; (6d78 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    6c5c:	9b04      	ldr	r3, [sp, #16]
    6c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c62:	695a      	ldr	r2, [r3, #20]
    6c64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c68:	009b      	lsls	r3, r3, #2
    6c6a:	4413      	add	r3, r2
    6c6c:	681b      	ldr	r3, [r3, #0]
    6c6e:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    6c70:	9b00      	ldr	r3, [sp, #0]
    6c72:	2b03      	cmp	r3, #3
    6c74:	d05d      	beq.n	6d32 <Can_43_FLEXCAN_SetControllerMode+0xf6>
    6c76:	9b00      	ldr	r3, [sp, #0]
    6c78:	2b03      	cmp	r3, #3
    6c7a:	d874      	bhi.n	6d66 <Can_43_FLEXCAN_SetControllerMode+0x12a>
    6c7c:	9b00      	ldr	r3, [sp, #0]
    6c7e:	2b01      	cmp	r3, #1
    6c80:	d003      	beq.n	6c8a <Can_43_FLEXCAN_SetControllerMode+0x4e>
    6c82:	9b00      	ldr	r3, [sp, #0]
    6c84:	2b02      	cmp	r3, #2
    6c86:	d01d      	beq.n	6cc4 <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    6c88:	e06d      	b.n	6d66 <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    6c8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6c8e:	4a3b      	ldr	r2, [pc, #236]	; (6d7c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6c94:	2b02      	cmp	r3, #2
    6c96:	d168      	bne.n	6d6a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    6c98:	9803      	ldr	r0, [sp, #12]
    6c9a:	f001 f8f5 	bl	7e88 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    6c9e:	4603      	mov	r3, r0
    6ca0:	2b00      	cmp	r3, #0
    6ca2:	d162      	bne.n	6d6a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    6ca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ca8:	4a34      	ldr	r2, [pc, #208]	; (6d7c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6caa:	2101      	movs	r1, #1
    6cac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    6cb0:	9b03      	ldr	r3, [sp, #12]
    6cb2:	781b      	ldrb	r3, [r3, #0]
    6cb4:	2101      	movs	r1, #1
    6cb6:	4618      	mov	r0, r3
    6cb8:	f7f9 fe27 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    6cbc:	2300      	movs	r3, #0
    6cbe:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    6cc2:	e052      	b.n	6d6a <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    6cc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cc8:	4a2c      	ldr	r2, [pc, #176]	; (6d7c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cce:	2b01      	cmp	r3, #1
    6cd0:	d005      	beq.n	6cde <Can_43_FLEXCAN_SetControllerMode+0xa2>
    6cd2:	2b00      	cmp	r3, #0
    6cd4:	d029      	beq.n	6d2a <Can_43_FLEXCAN_SetControllerMode+0xee>
    6cd6:	3b02      	subs	r3, #2
    6cd8:	2b01      	cmp	r3, #1
    6cda:	d826      	bhi.n	6d2a <Can_43_FLEXCAN_SetControllerMode+0xee>
    6cdc:	e015      	b.n	6d0a <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    6cde:	9803      	ldr	r0, [sp, #12]
    6ce0:	f001 f940 	bl	7f64 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    6ce4:	4603      	mov	r3, r0
    6ce6:	2b00      	cmp	r3, #0
    6ce8:	d121      	bne.n	6d2e <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    6cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6cee:	4a23      	ldr	r2, [pc, #140]	; (6d7c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6cf0:	2102      	movs	r1, #2
    6cf2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    6cf6:	9b03      	ldr	r3, [sp, #12]
    6cf8:	781b      	ldrb	r3, [r3, #0]
    6cfa:	2102      	movs	r1, #2
    6cfc:	4618      	mov	r0, r3
    6cfe:	f7f9 fe04 	bl	90a <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    6d02:	2300      	movs	r3, #0
    6d04:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    6d08:	e011      	b.n	6d2e <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    6d0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d0e:	4a1b      	ldr	r2, [pc, #108]	; (6d7c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6d10:	2102      	movs	r1, #2
    6d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    6d16:	9b03      	ldr	r3, [sp, #12]
    6d18:	781b      	ldrb	r3, [r3, #0]
    6d1a:	2102      	movs	r1, #2
    6d1c:	4618      	mov	r0, r3
    6d1e:	f7f9 fdf4 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    6d22:	2300      	movs	r3, #0
    6d24:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    6d28:	e002      	b.n	6d30 <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    6d2a:	bf00      	nop
    6d2c:	e01e      	b.n	6d6c <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    6d2e:	bf00      	nop
                        break;
    6d30:	e01c      	b.n	6d6c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    6d32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d36:	4a11      	ldr	r2, [pc, #68]	; (6d7c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d3c:	3b02      	subs	r3, #2
    6d3e:	2b01      	cmp	r3, #1
    6d40:	d80f      	bhi.n	6d62 <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    6d42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d46:	4a0d      	ldr	r2, [pc, #52]	; (6d7c <Can_43_FLEXCAN_SetControllerMode+0x140>)
    6d48:	2103      	movs	r1, #3
    6d4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    6d4e:	9b03      	ldr	r3, [sp, #12]
    6d50:	781b      	ldrb	r3, [r3, #0]
    6d52:	2103      	movs	r1, #3
    6d54:	4618      	mov	r0, r3
    6d56:	f7f9 fdd8 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    6d5a:	2300      	movs	r3, #0
    6d5c:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    6d60:	e000      	b.n	6d64 <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    6d62:	bf00      	nop
                        break;
    6d64:	e002      	b.n	6d6c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    6d66:	bf00      	nop
    6d68:	e000      	b.n	6d6c <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    6d6a:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    6d6c:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6d70:	4618      	mov	r0, r3
    6d72:	b007      	add	sp, #28
    6d74:	f85d fb04 	ldr.w	pc, [sp], #4
    6d78:	1fff8cf4 	.word	0x1fff8cf4
    6d7c:	1fff8cf0 	.word	0x1fff8cf0

00006d80 <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    6d80:	b500      	push	{lr}
    6d82:	b085      	sub	sp, #20
    6d84:	4603      	mov	r3, r0
    6d86:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    6d8a:	2300      	movs	r3, #0
    6d8c:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6d8e:	2300      	movs	r3, #0
    6d90:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    6d92:	2300      	movs	r3, #0
    6d94:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    6d96:	4a10      	ldr	r2, [pc, #64]	; (6dd8 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    6d98:	9b03      	ldr	r3, [sp, #12]
    6d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6d9e:	695a      	ldr	r2, [r3, #20]
    6da0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6da4:	009b      	lsls	r3, r3, #2
    6da6:	4413      	add	r3, r2
    6da8:	681b      	ldr	r3, [r3, #0]
    6daa:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    6dac:	f005 fe0c 	bl	c9c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    6db0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6db4:	4a09      	ldr	r2, [pc, #36]	; (6ddc <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    6db6:	5cd2      	ldrb	r2, [r2, r3]
    6db8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6dbc:	3201      	adds	r2, #1
    6dbe:	b2d1      	uxtb	r1, r2
    6dc0:	4a06      	ldr	r2, [pc, #24]	; (6ddc <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    6dc2:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    6dc4:	f005 fe2c 	bl	ca20 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    6dc8:	9802      	ldr	r0, [sp, #8]
    6dca:	f001 f949 	bl	8060 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    6dce:	bf00      	nop
    6dd0:	b005      	add	sp, #20
    6dd2:	f85d fb04 	ldr.w	pc, [sp], #4
    6dd6:	bf00      	nop
    6dd8:	1fff8cf4 	.word	0x1fff8cf4
    6ddc:	1fff8cec 	.word	0x1fff8cec

00006de0 <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    6de0:	b500      	push	{lr}
    6de2:	b085      	sub	sp, #20
    6de4:	4603      	mov	r3, r0
    6de6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    6dea:	2300      	movs	r3, #0
    6dec:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6dee:	2300      	movs	r3, #0
    6df0:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    6df2:	2300      	movs	r3, #0
    6df4:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    6df6:	4a16      	ldr	r2, [pc, #88]	; (6e50 <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    6df8:	9b03      	ldr	r3, [sp, #12]
    6dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6dfe:	695a      	ldr	r2, [r3, #20]
    6e00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e04:	009b      	lsls	r3, r3, #2
    6e06:	4413      	add	r3, r2
    6e08:	681b      	ldr	r3, [r3, #0]
    6e0a:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    6e0c:	f005 fe2e 	bl	ca6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    6e10:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e14:	4a0f      	ldr	r2, [pc, #60]	; (6e54 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    6e16:	5cd3      	ldrb	r3, [r2, r3]
    6e18:	2b00      	cmp	r3, #0
    6e1a:	d009      	beq.n	6e30 <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    6e1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e20:	4a0c      	ldr	r2, [pc, #48]	; (6e54 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    6e22:	5cd2      	ldrb	r2, [r2, r3]
    6e24:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e28:	3a01      	subs	r2, #1
    6e2a:	b2d1      	uxtb	r1, r2
    6e2c:	4a09      	ldr	r2, [pc, #36]	; (6e54 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    6e2e:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    6e30:	f005 fe48 	bl	cac4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    6e34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e38:	4a06      	ldr	r2, [pc, #24]	; (6e54 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    6e3a:	5cd3      	ldrb	r3, [r2, r3]
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	d102      	bne.n	6e46 <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    6e40:	9802      	ldr	r0, [sp, #8]
    6e42:	f001 f937 	bl	80b4 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    6e46:	bf00      	nop
    6e48:	b005      	add	sp, #20
    6e4a:	f85d fb04 	ldr.w	pc, [sp], #4
    6e4e:	bf00      	nop
    6e50:	1fff8cf4 	.word	0x1fff8cf4
    6e54:	1fff8cec 	.word	0x1fff8cec

00006e58 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    6e58:	b500      	push	{lr}
    6e5a:	b087      	sub	sp, #28
    6e5c:	4603      	mov	r3, r0
    6e5e:	9100      	str	r1, [sp, #0]
    6e60:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6e64:	2301      	movs	r3, #1
    6e66:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    6e6a:	2300      	movs	r3, #0
    6e6c:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    6e70:	2300      	movs	r3, #0
    6e72:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6e74:	2300      	movs	r3, #0
    6e76:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6e78:	2300      	movs	r3, #0
    6e7a:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    6e7c:	4a18      	ldr	r2, [pc, #96]	; (6ee0 <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    6e7e:	9b04      	ldr	r3, [sp, #16]
    6e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6e84:	695a      	ldr	r2, [r3, #20]
    6e86:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6e8a:	009b      	lsls	r3, r3, #2
    6e8c:	4413      	add	r3, r2
    6e8e:	681b      	ldr	r3, [r3, #0]
    6e90:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    6e92:	f10d 030b 	add.w	r3, sp, #11
    6e96:	4619      	mov	r1, r3
    6e98:	9803      	ldr	r0, [sp, #12]
    6e9a:	f001 f937 	bl	810c <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    6e9e:	4603      	mov	r3, r0
    6ea0:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    6ea4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    6ea8:	2b00      	cmp	r3, #0
    6eaa:	d112      	bne.n	6ed2 <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    6eac:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6eb0:	2b00      	cmp	r3, #0
    6eb2:	d002      	beq.n	6eba <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    6eb4:	2b01      	cmp	r3, #1
    6eb6:	d004      	beq.n	6ec2 <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    6eb8:	e007      	b.n	6eca <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    6eba:	9b00      	ldr	r3, [sp, #0]
    6ebc:	2200      	movs	r2, #0
    6ebe:	601a      	str	r2, [r3, #0]
                                break;
    6ec0:	e008      	b.n	6ed4 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    6ec2:	9b00      	ldr	r3, [sp, #0]
    6ec4:	2201      	movs	r2, #1
    6ec6:	601a      	str	r2, [r3, #0]
                                break;
    6ec8:	e004      	b.n	6ed4 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    6eca:	9b00      	ldr	r3, [sp, #0]
    6ecc:	2202      	movs	r2, #2
    6ece:	601a      	str	r2, [r3, #0]
                                break;
    6ed0:	e000      	b.n	6ed4 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    6ed2:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    6ed4:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6ed8:	4618      	mov	r0, r3
    6eda:	b007      	add	sp, #28
    6edc:	f85d fb04 	ldr.w	pc, [sp], #4
    6ee0:	1fff8cf4 	.word	0x1fff8cf4

00006ee4 <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    6ee4:	b084      	sub	sp, #16
    6ee6:	4603      	mov	r3, r0
    6ee8:	9100      	str	r1, [sp, #0]
    6eea:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6eee:	2301      	movs	r3, #1
    6ef0:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    6ef4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6ef8:	4a06      	ldr	r2, [pc, #24]	; (6f14 <Can_43_FLEXCAN_GetControllerMode+0x30>)
    6efa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    6efe:	9b00      	ldr	r3, [sp, #0]
    6f00:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    6f02:	2300      	movs	r3, #0
    6f04:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    6f08:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6f0c:	4618      	mov	r0, r3
    6f0e:	b004      	add	sp, #16
    6f10:	4770      	bx	lr
    6f12:	bf00      	nop
    6f14:	1fff8cf0 	.word	0x1fff8cf0

00006f18 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    6f18:	b500      	push	{lr}
    6f1a:	b087      	sub	sp, #28
    6f1c:	4603      	mov	r3, r0
    6f1e:	9100      	str	r1, [sp, #0]
    6f20:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6f24:	2301      	movs	r3, #1
    6f26:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    6f2a:	2300      	movs	r3, #0
    6f2c:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6f2e:	2300      	movs	r3, #0
    6f30:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6f32:	2300      	movs	r3, #0
    6f34:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    6f36:	4a0c      	ldr	r2, [pc, #48]	; (6f68 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    6f38:	9b04      	ldr	r3, [sp, #16]
    6f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f3e:	695a      	ldr	r2, [r3, #20]
    6f40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f44:	009b      	lsls	r3, r3, #2
    6f46:	4413      	add	r3, r2
    6f48:	681b      	ldr	r3, [r3, #0]
    6f4a:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    6f4c:	9900      	ldr	r1, [sp, #0]
    6f4e:	9803      	ldr	r0, [sp, #12]
    6f50:	f001 f907 	bl	8162 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    6f54:	4603      	mov	r3, r0
    6f56:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    6f5a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6f5e:	4618      	mov	r0, r3
    6f60:	b007      	add	sp, #28
    6f62:	f85d fb04 	ldr.w	pc, [sp], #4
    6f66:	bf00      	nop
    6f68:	1fff8cf4 	.word	0x1fff8cf4

00006f6c <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    6f6c:	b500      	push	{lr}
    6f6e:	b087      	sub	sp, #28
    6f70:	4603      	mov	r3, r0
    6f72:	9100      	str	r1, [sp, #0]
    6f74:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    6f78:	2301      	movs	r3, #1
    6f7a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    6f7e:	2300      	movs	r3, #0
    6f80:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6f82:	2300      	movs	r3, #0
    6f84:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6f86:	2300      	movs	r3, #0
    6f88:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    6f8a:	4a0c      	ldr	r2, [pc, #48]	; (6fbc <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    6f8c:	9b04      	ldr	r3, [sp, #16]
    6f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6f92:	695a      	ldr	r2, [r3, #20]
    6f94:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6f98:	009b      	lsls	r3, r3, #2
    6f9a:	4413      	add	r3, r2
    6f9c:	681b      	ldr	r3, [r3, #0]
    6f9e:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    6fa0:	9900      	ldr	r1, [sp, #0]
    6fa2:	9803      	ldr	r0, [sp, #12]
    6fa4:	f001 f8cb 	bl	813e <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    6fa8:	4603      	mov	r3, r0
    6faa:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    6fae:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    6fb2:	4618      	mov	r0, r3
    6fb4:	b007      	add	sp, #28
    6fb6:	f85d fb04 	ldr.w	pc, [sp], #4
    6fba:	bf00      	nop
    6fbc:	1fff8cf4 	.word	0x1fff8cf4

00006fc0 <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    6fc0:	b500      	push	{lr}
    6fc2:	b089      	sub	sp, #36	; 0x24
    6fc4:	4603      	mov	r3, r0
    6fc6:	9100      	str	r1, [sp, #0]
    6fc8:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    6fcc:	2301      	movs	r3, #1
    6fce:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    6fd2:	2300      	movs	r3, #0
    6fd4:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    6fd8:	2300      	movs	r3, #0
    6fda:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    6fdc:	2300      	movs	r3, #0
    6fde:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    6fe2:	2300      	movs	r3, #0
    6fe4:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    6fe6:	2300      	movs	r3, #0
    6fe8:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    6fea:	2300      	movs	r3, #0
    6fec:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    6fee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6ff2:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    6ff6:	4a1d      	ldr	r2, [pc, #116]	; (706c <Can_43_FLEXCAN_Write+0xac>)
    6ff8:	9b06      	ldr	r3, [sp, #24]
    6ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6ffe:	68da      	ldr	r2, [r3, #12]
    7000:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7004:	4413      	add	r3, r2
    7006:	781b      	ldrb	r3, [r3, #0]
    7008:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    700c:	4a17      	ldr	r2, [pc, #92]	; (706c <Can_43_FLEXCAN_Write+0xac>)
    700e:	9b06      	ldr	r3, [sp, #24]
    7010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7014:	695a      	ldr	r2, [r3, #20]
    7016:	f89d 301e 	ldrb.w	r3, [sp, #30]
    701a:	009b      	lsls	r3, r3, #2
    701c:	4413      	add	r3, r2
    701e:	681b      	ldr	r3, [r3, #0]
    7020:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    7022:	9b04      	ldr	r3, [sp, #16]
    7024:	2b00      	cmp	r3, #0
    7026:	d01b      	beq.n	7060 <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    7028:	4a10      	ldr	r2, [pc, #64]	; (706c <Can_43_FLEXCAN_Write+0xac>)
    702a:	9b06      	ldr	r3, [sp, #24]
    702c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7030:	6919      	ldr	r1, [r3, #16]
    7032:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7036:	4613      	mov	r3, r2
    7038:	00db      	lsls	r3, r3, #3
    703a:	4413      	add	r3, r2
    703c:	009b      	lsls	r3, r3, #2
    703e:	440b      	add	r3, r1
    7040:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    7042:	f89d 301e 	ldrb.w	r3, [sp, #30]
    7046:	4a0a      	ldr	r2, [pc, #40]	; (7070 <Can_43_FLEXCAN_Write+0xb0>)
    7048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    704c:	2b01      	cmp	r3, #1
    704e:	d107      	bne.n	7060 <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    7050:	9a00      	ldr	r2, [sp, #0]
    7052:	9903      	ldr	r1, [sp, #12]
    7054:	9804      	ldr	r0, [sp, #16]
    7056:	f001 f896 	bl	8186 <Can_43_FLEXCAN_Ipw_Write>
    705a:	4603      	mov	r3, r0
    705c:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    7060:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    7064:	4618      	mov	r0, r3
    7066:	b009      	add	sp, #36	; 0x24
    7068:	f85d fb04 	ldr.w	pc, [sp], #4
    706c:	1fff8cf4 	.word	0x1fff8cf4
    7070:	1fff8cf0 	.word	0x1fff8cf0

00007074 <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    7074:	bf00      	nop
    7076:	4770      	bx	lr

00007078 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    7078:	bf00      	nop
    707a:	4770      	bx	lr

0000707c <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    707c:	bf00      	nop
    707e:	4770      	bx	lr

00007080 <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    7080:	b500      	push	{lr}
    7082:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    7084:	2300      	movs	r3, #0
    7086:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    708a:	2300      	movs	r3, #0
    708c:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    708e:	2300      	movs	r3, #0
    7090:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    7092:	2300      	movs	r3, #0
    7094:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    7096:	4a17      	ldr	r2, [pc, #92]	; (70f4 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    7098:	9b02      	ldr	r3, [sp, #8]
    709a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    709e:	2b00      	cmp	r3, #0
    70a0:	d024      	beq.n	70ec <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    70a2:	e01f      	b.n	70e4 <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    70a4:	4a13      	ldr	r2, [pc, #76]	; (70f4 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    70a6:	9b02      	ldr	r3, [sp, #8]
    70a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ac:	695a      	ldr	r2, [r3, #20]
    70ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70b2:	009b      	lsls	r3, r3, #2
    70b4:	4413      	add	r3, r2
    70b6:	681b      	ldr	r3, [r3, #0]
    70b8:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    70ba:	9b01      	ldr	r3, [sp, #4]
    70bc:	2b00      	cmp	r3, #0
    70be:	d00c      	beq.n	70da <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    70c0:	9b01      	ldr	r3, [sp, #4]
    70c2:	7a1b      	ldrb	r3, [r3, #8]
    70c4:	2b00      	cmp	r3, #0
    70c6:	d008      	beq.n	70da <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    70c8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70cc:	009b      	lsls	r3, r3, #2
    70ce:	4a0a      	ldr	r2, [pc, #40]	; (70f8 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    70d0:	4413      	add	r3, r2
    70d2:	4619      	mov	r1, r3
    70d4:	9801      	ldr	r0, [sp, #4]
    70d6:	f001 f95c 	bl	8392 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    70da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70de:	3301      	adds	r3, #1
    70e0:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    70e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    70e8:	2b00      	cmp	r3, #0
    70ea:	d0db      	beq.n	70a4 <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    70ec:	bf00      	nop
    70ee:	b005      	add	sp, #20
    70f0:	f85d fb04 	ldr.w	pc, [sp], #4
    70f4:	1fff8cf4 	.word	0x1fff8cf4
    70f8:	1fff8cf0 	.word	0x1fff8cf0

000070fc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    70fc:	b500      	push	{lr}
    70fe:	b087      	sub	sp, #28
    7100:	4603      	mov	r3, r0
    7102:	9200      	str	r2, [sp, #0]
    7104:	f88d 3007 	strb.w	r3, [sp, #7]
    7108:	460b      	mov	r3, r1
    710a:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    710e:	2300      	movs	r3, #0
    7110:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    7114:	2300      	movs	r3, #0
    7116:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7118:	2300      	movs	r3, #0
    711a:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    711c:	2300      	movs	r3, #0
    711e:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    7120:	4a16      	ldr	r2, [pc, #88]	; (717c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7122:	9b04      	ldr	r3, [sp, #16]
    7124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7128:	2b00      	cmp	r3, #0
    712a:	d022      	beq.n	7172 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    712c:	4a13      	ldr	r2, [pc, #76]	; (717c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    712e:	9b04      	ldr	r3, [sp, #16]
    7130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7134:	689a      	ldr	r2, [r3, #8]
    7136:	f89d 3007 	ldrb.w	r3, [sp, #7]
    713a:	4413      	add	r3, r2
    713c:	781b      	ldrb	r3, [r3, #0]
    713e:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7142:	4a0e      	ldr	r2, [pc, #56]	; (717c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7144:	9b04      	ldr	r3, [sp, #16]
    7146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    714a:	695a      	ldr	r2, [r3, #20]
    714c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7150:	009b      	lsls	r3, r3, #2
    7152:	4413      	add	r3, r2
    7154:	681b      	ldr	r3, [r3, #0]
    7156:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    7158:	9b03      	ldr	r3, [sp, #12]
    715a:	2b00      	cmp	r3, #0
    715c:	d009      	beq.n	7172 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    715e:	4a07      	ldr	r2, [pc, #28]	; (717c <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7160:	9b04      	ldr	r3, [sp, #16]
    7162:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    7166:	f89d 2006 	ldrb.w	r2, [sp, #6]
    716a:	9b00      	ldr	r3, [sp, #0]
    716c:	9803      	ldr	r0, [sp, #12]
    716e:	f001 f946 	bl	83fe <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    7172:	bf00      	nop
    7174:	b007      	add	sp, #28
    7176:	f85d fb04 	ldr.w	pc, [sp], #4
    717a:	bf00      	nop
    717c:	1fff8cf4 	.word	0x1fff8cf4

00007180 <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    7180:	b500      	push	{lr}
    7182:	b087      	sub	sp, #28
    7184:	4603      	mov	r3, r0
    7186:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    718a:	2300      	movs	r3, #0
    718c:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    7190:	2300      	movs	r3, #0
    7192:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7194:	2300      	movs	r3, #0
    7196:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7198:	2300      	movs	r3, #0
    719a:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    719c:	4a19      	ldr	r2, [pc, #100]	; (7204 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    719e:	9b04      	ldr	r3, [sp, #16]
    71a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71a4:	2b00      	cmp	r3, #0
    71a6:	d029      	beq.n	71fc <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    71a8:	4a16      	ldr	r2, [pc, #88]	; (7204 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    71aa:	9b04      	ldr	r3, [sp, #16]
    71ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71b0:	689a      	ldr	r2, [r3, #8]
    71b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71b6:	4413      	add	r3, r2
    71b8:	781b      	ldrb	r3, [r3, #0]
    71ba:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    71be:	4a11      	ldr	r2, [pc, #68]	; (7204 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    71c0:	9b04      	ldr	r3, [sp, #16]
    71c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    71c6:	695a      	ldr	r2, [r3, #20]
    71c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    71cc:	009b      	lsls	r3, r3, #2
    71ce:	4413      	add	r3, r2
    71d0:	681b      	ldr	r3, [r3, #0]
    71d2:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    71d4:	9b03      	ldr	r3, [sp, #12]
    71d6:	2b00      	cmp	r3, #0
    71d8:	d010      	beq.n	71fc <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    71da:	9803      	ldr	r0, [sp, #12]
    71dc:	f000 fec2 	bl	7f64 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    71e0:	4603      	mov	r3, r0
    71e2:	2b00      	cmp	r3, #0
    71e4:	d10a      	bne.n	71fc <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    71e6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    71ea:	4a07      	ldr	r2, [pc, #28]	; (7208 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    71ec:	2102      	movs	r1, #2
    71ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    71f2:	9b03      	ldr	r3, [sp, #12]
    71f4:	781b      	ldrb	r3, [r3, #0]
    71f6:	4618      	mov	r0, r3
    71f8:	f7f9 fb80 	bl	8fc <CanIf_ControllerBusOff>
            }
        }
    }
}
    71fc:	bf00      	nop
    71fe:	b007      	add	sp, #28
    7200:	f85d fb04 	ldr.w	pc, [sp], #4
    7204:	1fff8cf4 	.word	0x1fff8cf4
    7208:	1fff8cf0 	.word	0x1fff8cf0

0000720c <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    720c:	b500      	push	{lr}
    720e:	b085      	sub	sp, #20
    7210:	9003      	str	r0, [sp, #12]
    7212:	9102      	str	r1, [sp, #8]
    7214:	9201      	str	r2, [sp, #4]
    7216:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    7218:	9b01      	ldr	r3, [sp, #4]
    721a:	685a      	ldr	r2, [r3, #4]
    721c:	9b03      	ldr	r3, [sp, #12]
    721e:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    7220:	9b01      	ldr	r3, [sp, #4]
    7222:	681b      	ldr	r3, [r3, #0]
    7224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    7228:	2b00      	cmp	r3, #0
    722a:	d005      	beq.n	7238 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    722c:	9b03      	ldr	r3, [sp, #12]
    722e:	681b      	ldr	r3, [r3, #0]
    7230:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    7234:	9b03      	ldr	r3, [sp, #12]
    7236:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    7238:	9b06      	ldr	r3, [sp, #24]
    723a:	699b      	ldr	r3, [r3, #24]
    723c:	2b00      	cmp	r3, #0
    723e:	d10c      	bne.n	725a <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    7240:	9b01      	ldr	r3, [sp, #4]
    7242:	681b      	ldr	r3, [r3, #0]
    7244:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    7248:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    724c:	d105      	bne.n	725a <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    724e:	2301      	movs	r3, #1
    7250:	2208      	movs	r2, #8
    7252:	2100      	movs	r1, #0
    7254:	2050      	movs	r0, #80	; 0x50
    7256:	f007 fc9b 	bl	eb90 <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    725a:	9b06      	ldr	r3, [sp, #24]
    725c:	699b      	ldr	r3, [r3, #24]
    725e:	2b01      	cmp	r3, #1
    7260:	d009      	beq.n	7276 <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    7262:	9b01      	ldr	r3, [sp, #4]
    7264:	681b      	ldr	r3, [r3, #0]
    7266:	2b00      	cmp	r3, #0
    7268:	da05      	bge.n	7276 <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    726a:	9b03      	ldr	r3, [sp, #12]
    726c:	681b      	ldr	r3, [r3, #0]
    726e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    7272:	9b03      	ldr	r3, [sp, #12]
    7274:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    7276:	9b06      	ldr	r3, [sp, #24]
    7278:	7c1a      	ldrb	r2, [r3, #16]
    727a:	9b01      	ldr	r3, [sp, #4]
    727c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    7280:	429a      	cmp	r2, r3
    7282:	d805      	bhi.n	7290 <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    7284:	9b06      	ldr	r3, [sp, #24]
    7286:	7c1b      	ldrb	r3, [r3, #16]
    7288:	461a      	mov	r2, r3
    728a:	9b02      	ldr	r3, [sp, #8]
    728c:	609a      	str	r2, [r3, #8]
    728e:	e005      	b.n	729c <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    7290:	9b01      	ldr	r3, [sp, #4]
    7292:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    7296:	461a      	mov	r2, r3
    7298:	9b02      	ldr	r3, [sp, #8]
    729a:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    729c:	9b06      	ldr	r3, [sp, #24]
    729e:	881a      	ldrh	r2, [r3, #0]
    72a0:	9b03      	ldr	r3, [sp, #12]
    72a2:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    72a4:	9b00      	ldr	r3, [sp, #0]
    72a6:	781a      	ldrb	r2, [r3, #0]
    72a8:	9b03      	ldr	r3, [sp, #12]
    72aa:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    72ac:	9b01      	ldr	r3, [sp, #4]
    72ae:	f103 0208 	add.w	r2, r3, #8
    72b2:	9b02      	ldr	r3, [sp, #8]
    72b4:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    72b6:	9902      	ldr	r1, [sp, #8]
    72b8:	9803      	ldr	r0, [sp, #12]
    72ba:	f7f9 fb4b 	bl	954 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    72be:	bf00      	nop
    72c0:	b005      	add	sp, #20
    72c2:	f85d fb04 	ldr.w	pc, [sp], #4

000072c6 <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    72c6:	b500      	push	{lr}
    72c8:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    72cc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    72d0:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    72d4:	6018      	str	r0, [r3, #0]
    72d6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    72da:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    72de:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    72e0:	2300      	movs	r3, #0
    72e2:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    72e6:	2300      	movs	r3, #0
    72e8:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    72ec:	2300      	movs	r3, #0
    72ee:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    72f2:	2300      	movs	r3, #0
    72f4:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    72f8:	2300      	movs	r3, #0
    72fa:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    72fe:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7302:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7306:	681b      	ldr	r3, [r3, #0]
    7308:	7c9b      	ldrb	r3, [r3, #18]
    730a:	089b      	lsrs	r3, r3, #2
    730c:	b2db      	uxtb	r3, r3
    730e:	3306      	adds	r3, #6
    7310:	2b20      	cmp	r3, #32
    7312:	d80b      	bhi.n	732c <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    7314:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7318:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    731c:	681b      	ldr	r3, [r3, #0]
    731e:	7c9b      	ldrb	r3, [r3, #18]
    7320:	089b      	lsrs	r3, r3, #2
    7322:	b2db      	uxtb	r3, r3
    7324:	3306      	adds	r3, #6
    7326:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    732a:	e002      	b.n	7332 <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    732c:	2320      	movs	r3, #32
    732e:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    7332:	2300      	movs	r3, #0
    7334:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    7338:	e169      	b.n	760e <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    733a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    733e:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7342:	681b      	ldr	r3, [r3, #0]
    7344:	691b      	ldr	r3, [r3, #16]
    7346:	2b00      	cmp	r3, #0
    7348:	d13a      	bne.n	73c0 <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    734a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    734e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7352:	681b      	ldr	r3, [r3, #0]
    7354:	7c9b      	ldrb	r3, [r3, #18]
    7356:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    735a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    735e:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    7362:	2300      	movs	r3, #0
    7364:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7368:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    736c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7370:	681b      	ldr	r3, [r3, #0]
    7372:	689b      	ldr	r3, [r3, #8]
    7374:	2b00      	cmp	r3, #0
    7376:	d011      	beq.n	739c <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    7378:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    737c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7380:	681b      	ldr	r3, [r3, #0]
    7382:	695a      	ldr	r2, [r3, #20]
    7384:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7388:	00db      	lsls	r3, r3, #3
    738a:	4413      	add	r3, r2
    738c:	685b      	ldr	r3, [r3, #4]
    738e:	005b      	lsls	r3, r3, #1
    7390:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7394:	4313      	orrs	r3, r2
    7396:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    739a:	e126      	b.n	75ea <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    739c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    73a0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    73a4:	681b      	ldr	r3, [r3, #0]
    73a6:	695a      	ldr	r2, [r3, #20]
    73a8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    73ac:	00db      	lsls	r3, r3, #3
    73ae:	4413      	add	r3, r2
    73b0:	685b      	ldr	r3, [r3, #4]
    73b2:	04db      	lsls	r3, r3, #19
    73b4:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    73b8:	4313      	orrs	r3, r2
    73ba:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    73be:	e114      	b.n	75ea <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    73c0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    73c4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    73c8:	681b      	ldr	r3, [r3, #0]
    73ca:	691b      	ldr	r3, [r3, #16]
    73cc:	2b01      	cmp	r3, #1
    73ce:	d160      	bne.n	7492 <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    73d0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    73d4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    73d8:	681b      	ldr	r3, [r3, #0]
    73da:	7c9b      	ldrb	r3, [r3, #18]
    73dc:	005b      	lsls	r3, r3, #1
    73de:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    73e2:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    73e6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    73ea:	2301      	movs	r3, #1
    73ec:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    73f0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    73f4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    73f8:	681b      	ldr	r3, [r3, #0]
    73fa:	689b      	ldr	r3, [r3, #8]
    73fc:	2b00      	cmp	r3, #0
    73fe:	d024      	beq.n	744a <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    7400:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7404:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7408:	681b      	ldr	r3, [r3, #0]
    740a:	695a      	ldr	r2, [r3, #20]
    740c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7410:	011b      	lsls	r3, r3, #4
    7412:	4413      	add	r3, r2
    7414:	685b      	ldr	r3, [r3, #4]
    7416:	0bdb      	lsrs	r3, r3, #15
    7418:	041b      	lsls	r3, r3, #16
    741a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    741e:	4313      	orrs	r3, r2
    7420:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    7424:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7428:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    742c:	681b      	ldr	r3, [r3, #0]
    742e:	695a      	ldr	r2, [r3, #20]
    7430:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7434:	011b      	lsls	r3, r3, #4
    7436:	3308      	adds	r3, #8
    7438:	4413      	add	r3, r2
    743a:	685b      	ldr	r3, [r3, #4]
    743c:	0bdb      	lsrs	r3, r3, #15
    743e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7442:	4313      	orrs	r3, r2
    7444:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7448:	e0cf      	b.n	75ea <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    744a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    744e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7452:	681b      	ldr	r3, [r3, #0]
    7454:	695a      	ldr	r2, [r3, #20]
    7456:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    745a:	011b      	lsls	r3, r3, #4
    745c:	4413      	add	r3, r2
    745e:	685b      	ldr	r3, [r3, #4]
    7460:	04db      	lsls	r3, r3, #19
    7462:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7466:	4313      	orrs	r3, r2
    7468:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    746c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7470:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7474:	681b      	ldr	r3, [r3, #0]
    7476:	695a      	ldr	r2, [r3, #20]
    7478:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    747c:	011b      	lsls	r3, r3, #4
    747e:	3308      	adds	r3, #8
    7480:	4413      	add	r3, r2
    7482:	685b      	ldr	r3, [r3, #4]
    7484:	00db      	lsls	r3, r3, #3
    7486:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    748a:	4313      	orrs	r3, r2
    748c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7490:	e0ab      	b.n	75ea <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    7492:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7496:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    749a:	681b      	ldr	r3, [r3, #0]
    749c:	7c9b      	ldrb	r3, [r3, #18]
    749e:	009b      	lsls	r3, r3, #2
    74a0:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    74a4:	2300      	movs	r3, #0
    74a6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    74aa:	2302      	movs	r3, #2
    74ac:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    74b0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    74b4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    74b8:	681b      	ldr	r3, [r3, #0]
    74ba:	689b      	ldr	r3, [r3, #8]
    74bc:	2b00      	cmp	r3, #0
    74be:	d04a      	beq.n	7556 <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    74c0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    74c4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    74c8:	681b      	ldr	r3, [r3, #0]
    74ca:	695a      	ldr	r2, [r3, #20]
    74cc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    74d0:	015b      	lsls	r3, r3, #5
    74d2:	4413      	add	r3, r2
    74d4:	685b      	ldr	r3, [r3, #4]
    74d6:	0d5b      	lsrs	r3, r3, #21
    74d8:	061b      	lsls	r3, r3, #24
    74da:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    74de:	4313      	orrs	r3, r2
    74e0:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    74e4:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    74e8:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    74ec:	681b      	ldr	r3, [r3, #0]
    74ee:	695a      	ldr	r2, [r3, #20]
    74f0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    74f4:	015b      	lsls	r3, r3, #5
    74f6:	3308      	adds	r3, #8
    74f8:	4413      	add	r3, r2
    74fa:	685b      	ldr	r3, [r3, #4]
    74fc:	0d5b      	lsrs	r3, r3, #21
    74fe:	041b      	lsls	r3, r3, #16
    7500:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7504:	4313      	orrs	r3, r2
    7506:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    750a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    750e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7512:	681b      	ldr	r3, [r3, #0]
    7514:	695a      	ldr	r2, [r3, #20]
    7516:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    751a:	015b      	lsls	r3, r3, #5
    751c:	3310      	adds	r3, #16
    751e:	4413      	add	r3, r2
    7520:	685b      	ldr	r3, [r3, #4]
    7522:	0d5b      	lsrs	r3, r3, #21
    7524:	021b      	lsls	r3, r3, #8
    7526:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    752a:	4313      	orrs	r3, r2
    752c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    7530:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7534:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7538:	681b      	ldr	r3, [r3, #0]
    753a:	695a      	ldr	r2, [r3, #20]
    753c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7540:	015b      	lsls	r3, r3, #5
    7542:	3318      	adds	r3, #24
    7544:	4413      	add	r3, r2
    7546:	685b      	ldr	r3, [r3, #4]
    7548:	0d5b      	lsrs	r3, r3, #21
    754a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    754e:	4313      	orrs	r3, r2
    7550:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7554:	e049      	b.n	75ea <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    7556:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    755a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    755e:	681b      	ldr	r3, [r3, #0]
    7560:	695a      	ldr	r2, [r3, #20]
    7562:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7566:	015b      	lsls	r3, r3, #5
    7568:	4413      	add	r3, r2
    756a:	685b      	ldr	r3, [r3, #4]
    756c:	08db      	lsrs	r3, r3, #3
    756e:	061b      	lsls	r3, r3, #24
    7570:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7574:	4313      	orrs	r3, r2
    7576:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    757a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    757e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7582:	681b      	ldr	r3, [r3, #0]
    7584:	695a      	ldr	r2, [r3, #20]
    7586:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    758a:	015b      	lsls	r3, r3, #5
    758c:	3308      	adds	r3, #8
    758e:	4413      	add	r3, r2
    7590:	685b      	ldr	r3, [r3, #4]
    7592:	08db      	lsrs	r3, r3, #3
    7594:	041b      	lsls	r3, r3, #16
    7596:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    759a:	4313      	orrs	r3, r2
    759c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    75a0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    75a4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    75a8:	681b      	ldr	r3, [r3, #0]
    75aa:	695a      	ldr	r2, [r3, #20]
    75ac:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    75b0:	015b      	lsls	r3, r3, #5
    75b2:	3310      	adds	r3, #16
    75b4:	4413      	add	r3, r2
    75b6:	685b      	ldr	r3, [r3, #4]
    75b8:	08db      	lsrs	r3, r3, #3
    75ba:	021b      	lsls	r3, r3, #8
    75bc:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    75c0:	4313      	orrs	r3, r2
    75c2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    75c6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    75ca:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    75ce:	681b      	ldr	r3, [r3, #0]
    75d0:	695a      	ldr	r2, [r3, #20]
    75d2:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    75d6:	015b      	lsls	r3, r3, #5
    75d8:	3318      	adds	r3, #24
    75da:	4413      	add	r3, r2
    75dc:	685b      	ldr	r3, [r3, #4]
    75de:	08db      	lsrs	r3, r3, #3
    75e0:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    75e4:	4313      	orrs	r3, r2
    75e6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    75ea:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    75ee:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    75f2:	681b      	ldr	r3, [r3, #0]
    75f4:	789b      	ldrb	r3, [r3, #2]
    75f6:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    75fa:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    75fe:	4618      	mov	r0, r3
    7600:	f002 fe76 	bl	a2f0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    7604:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7608:	3301      	adds	r3, #1
    760a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    760e:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    7612:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    7616:	429a      	cmp	r2, r3
    7618:	d20a      	bcs.n	7630 <Can_Ipw_InitLegacyFifoFilter+0x36a>
    761a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    761e:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7622:	681b      	ldr	r3, [r3, #0]
    7624:	7c9b      	ldrb	r3, [r3, #18]
    7626:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    762a:	429a      	cmp	r2, r3
    762c:	f4ff ae85 	bcc.w	733a <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    7630:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7634:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7638:	681b      	ldr	r3, [r3, #0]
    763a:	789a      	ldrb	r2, [r3, #2]
    763c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7640:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7644:	681b      	ldr	r3, [r3, #0]
    7646:	68db      	ldr	r3, [r3, #12]
    7648:	4619      	mov	r1, r3
    764a:	4610      	mov	r0, r2
    764c:	f002 fe9e 	bl	a38c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    7650:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    7654:	2b00      	cmp	r3, #0
    7656:	d054      	beq.n	7702 <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    7658:	2300      	movs	r3, #0
    765a:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    765e:	e03e      	b.n	76de <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    7660:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7664:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7668:	681b      	ldr	r3, [r3, #0]
    766a:	695a      	ldr	r2, [r3, #20]
    766c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7670:	00db      	lsls	r3, r3, #3
    7672:	441a      	add	r2, r3
    7674:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7678:	6812      	ldr	r2, [r2, #0]
    767a:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    767e:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    7682:	00db      	lsls	r3, r3, #3
    7684:	440b      	add	r3, r1
    7686:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7688:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    768c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7690:	681b      	ldr	r3, [r3, #0]
    7692:	689b      	ldr	r3, [r3, #8]
    7694:	2b00      	cmp	r3, #0
    7696:	d00a      	beq.n	76ae <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    7698:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    769c:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    76a0:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    76a4:	00db      	lsls	r3, r3, #3
    76a6:	4413      	add	r3, r2
    76a8:	2201      	movs	r2, #1
    76aa:	705a      	strb	r2, [r3, #1]
    76ac:	e009      	b.n	76c2 <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    76ae:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    76b2:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    76b6:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    76ba:	00db      	lsls	r3, r3, #3
    76bc:	4413      	add	r3, r2
    76be:	2200      	movs	r2, #0
    76c0:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    76c2:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    76c6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    76ca:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    76ce:	2100      	movs	r1, #0
    76d0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    76d4:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    76d8:	3301      	adds	r3, #1
    76da:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    76de:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    76e2:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    76e6:	429a      	cmp	r2, r3
    76e8:	d3ba      	bcc.n	7660 <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    76ea:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    76ee:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    76f2:	681b      	ldr	r3, [r3, #0]
    76f4:	789b      	ldrb	r3, [r3, #2]
    76f6:	aa02      	add	r2, sp, #8
    76f8:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    76fc:	4618      	mov	r0, r3
    76fe:	f002 f9da 	bl	9ab6 <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    7702:	bf00      	nop
    7704:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    7708:	f85d fb04 	ldr.w	pc, [sp], #4

0000770c <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    770c:	b510      	push	{r4, lr}
    770e:	b088      	sub	sp, #32
    7710:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
    7712:	9b01      	ldr	r3, [sp, #4]
    7714:	785b      	ldrb	r3, [r3, #1]
    7716:	461a      	mov	r2, r3
    7718:	4b58      	ldr	r3, [pc, #352]	; (787c <Can_Ipw_InitBaudrate+0x170>)
    771a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    771e:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON))
    #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
        if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[ControllerConfig->Can_u8ControllerID])
        {
    #endif
            FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16Prescaler;
    7722:	9b01      	ldr	r3, [sp, #4]
    7724:	6a1a      	ldr	r2, [r3, #32]
    7726:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    772a:	2116      	movs	r1, #22
    772c:	fb01 f303 	mul.w	r3, r1, r3
    7730:	4413      	add	r3, r2
    7732:	88db      	ldrh	r3, [r3, #6]
    7734:	9305      	str	r3, [sp, #20]
        {
            FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16PrescalerAlternate;
        }
    #endif

        FlexCANTimeSeg.propSeg    = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PropSeg;
    7736:	9b01      	ldr	r3, [sp, #4]
    7738:	6a1a      	ldr	r2, [r3, #32]
    773a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    773e:	2116      	movs	r1, #22
    7740:	fb01 f303 	mul.w	r3, r1, r3
    7744:	4413      	add	r3, r2
    7746:	789b      	ldrb	r3, [r3, #2]
    7748:	9302      	str	r3, [sp, #8]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
    774a:	9b01      	ldr	r3, [sp, #4]
    774c:	6a1a      	ldr	r2, [r3, #32]
    774e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7752:	2116      	movs	r1, #22
    7754:	fb01 f303 	mul.w	r3, r1, r3
    7758:	4413      	add	r3, r2
    775a:	78db      	ldrb	r3, [r3, #3]
    775c:	9303      	str	r3, [sp, #12]
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
    775e:	9b01      	ldr	r3, [sp, #4]
    7760:	6a1a      	ldr	r2, [r3, #32]
    7762:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7766:	2116      	movs	r1, #22
    7768:	fb01 f303 	mul.w	r3, r1, r3
    776c:	4413      	add	r3, r2
    776e:	791b      	ldrb	r3, [r3, #4]
    7770:	9304      	str	r3, [sp, #16]
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
    7772:	9b01      	ldr	r3, [sp, #4]
    7774:	6a1a      	ldr	r2, [r3, #32]
    7776:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    777a:	2116      	movs	r1, #22
    777c:	fb01 f303 	mul.w	r3, r1, r3
    7780:	4413      	add	r3, r2
    7782:	7a1b      	ldrb	r3, [r3, #8]
    7784:	9306      	str	r3, [sp, #24]
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
    7786:	9b01      	ldr	r3, [sp, #4]
    7788:	789b      	ldrb	r3, [r3, #2]
    778a:	a902      	add	r1, sp, #8
    778c:	2200      	movs	r2, #0
    778e:	4618      	mov	r0, r3
    7790:	f003 f842 	bl	a818 <FlexCAN_Ip_SetBitrate_Privileged>
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    7794:	9b01      	ldr	r3, [sp, #4]
    7796:	6a1a      	ldr	r2, [r3, #32]
    7798:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    779c:	2116      	movs	r1, #22
    779e:	fb01 f303 	mul.w	r3, r1, r3
    77a2:	4413      	add	r3, r2
    77a4:	785b      	ldrb	r3, [r3, #1]
    77a6:	2b00      	cmp	r3, #0
    77a8:	d057      	beq.n	785a <Can_Ipw_InitBaudrate+0x14e>
    #if ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON))
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[ControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16Prescaler;
    77aa:	9b01      	ldr	r3, [sp, #4]
    77ac:	6a1a      	ldr	r2, [r3, #32]
    77ae:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    77b2:	2116      	movs	r1, #22
    77b4:	fb01 f303 	mul.w	r3, r1, r3
    77b8:	4413      	add	r3, r2
    77ba:	89db      	ldrh	r3, [r3, #14]
    77bc:	9305      	str	r3, [sp, #20]
            else
            {
                FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16PrescalerAlternate;
            }
        #endif
            FlexCANTimeSeg.propSeg    = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PropSeg;
    77be:	9b01      	ldr	r3, [sp, #4]
    77c0:	6a1a      	ldr	r2, [r3, #32]
    77c2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    77c6:	2116      	movs	r1, #22
    77c8:	fb01 f303 	mul.w	r3, r1, r3
    77cc:	4413      	add	r3, r2
    77ce:	7a9b      	ldrb	r3, [r3, #10]
    77d0:	9302      	str	r3, [sp, #8]
            FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg1;
    77d2:	9b01      	ldr	r3, [sp, #4]
    77d4:	6a1a      	ldr	r2, [r3, #32]
    77d6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    77da:	2116      	movs	r1, #22
    77dc:	fb01 f303 	mul.w	r3, r1, r3
    77e0:	4413      	add	r3, r2
    77e2:	7adb      	ldrb	r3, [r3, #11]
    77e4:	9303      	str	r3, [sp, #12]
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
    77e6:	9b01      	ldr	r3, [sp, #4]
    77e8:	6a1a      	ldr	r2, [r3, #32]
    77ea:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    77ee:	2116      	movs	r1, #22
    77f0:	fb01 f303 	mul.w	r3, r1, r3
    77f4:	4413      	add	r3, r2
    77f6:	7b1b      	ldrb	r3, [r3, #12]
    77f8:	9304      	str	r3, [sp, #16]
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;
    77fa:	9b01      	ldr	r3, [sp, #4]
    77fc:	6a1a      	ldr	r2, [r3, #32]
    77fe:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7802:	2116      	movs	r1, #22
    7804:	fb01 f303 	mul.w	r3, r1, r3
    7808:	4413      	add	r3, r2
    780a:	7c1b      	ldrb	r3, [r3, #16]
    780c:	9306      	str	r3, [sp, #24]

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    780e:	9b01      	ldr	r3, [sp, #4]
    7810:	7898      	ldrb	r0, [r3, #2]
    7812:	9b01      	ldr	r3, [sp, #4]
    7814:	6a1a      	ldr	r2, [r3, #32]
    7816:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    781a:	2116      	movs	r1, #22
    781c:	fb01 f303 	mul.w	r3, r1, r3
    7820:	4413      	add	r3, r2
    7822:	781a      	ldrb	r2, [r3, #0]
    7824:	ab02      	add	r3, sp, #8
    7826:	4619      	mov	r1, r3
    7828:	f003 f8c0 	bl	a9ac <FlexCAN_Ip_SetBitrateCbt_Privileged>
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    782c:	9b01      	ldr	r3, [sp, #4]
    782e:	7898      	ldrb	r0, [r3, #2]
    7830:	9b01      	ldr	r3, [sp, #4]
    7832:	6a1a      	ldr	r2, [r3, #32]
    7834:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7838:	2116      	movs	r1, #22
    783a:	fb01 f303 	mul.w	r3, r1, r3
    783e:	4413      	add	r3, r2
    7840:	7cd9      	ldrb	r1, [r3, #19]
    7842:	9b01      	ldr	r3, [sp, #4]
    7844:	6a1a      	ldr	r2, [r3, #32]
    7846:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    784a:	2416      	movs	r4, #22
    784c:	fb04 f303 	mul.w	r3, r4, r3
    7850:	4413      	add	r3, r2
    7852:	7d1b      	ldrb	r3, [r3, #20]
    7854:	461a      	mov	r2, r3
    7856:	f003 f913 	bl	aa80 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    785a:	9b01      	ldr	r3, [sp, #4]
    785c:	7898      	ldrb	r0, [r3, #2]
    785e:	9b01      	ldr	r3, [sp, #4]
    7860:	6a1a      	ldr	r2, [r3, #32]
    7862:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    7866:	2116      	movs	r1, #22
    7868:	fb01 f303 	mul.w	r3, r1, r3
    786c:	4413      	add	r3, r2
    786e:	7c9b      	ldrb	r3, [r3, #18]
    7870:	4619      	mov	r1, r3
    7872:	f003 f959 	bl	ab28 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    7876:	bf00      	nop
    7878:	b008      	add	sp, #32
    787a:	bd10      	pop	{r4, pc}
    787c:	1fff8f98 	.word	0x1fff8f98

00007880 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    7880:	b500      	push	{lr}
    7882:	b087      	sub	sp, #28
    7884:	9003      	str	r0, [sp, #12]
    7886:	9102      	str	r1, [sp, #8]
    7888:	4613      	mov	r3, r2
    788a:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    788e:	2300      	movs	r3, #0
    7890:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    7894:	9b03      	ldr	r3, [sp, #12]
    7896:	785b      	ldrb	r3, [r3, #1]
    7898:	461a      	mov	r2, r3
    789a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    789e:	491c      	ldr	r1, [pc, #112]	; (7910 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    78a0:	0152      	lsls	r2, r2, #5
    78a2:	4413      	add	r3, r2
    78a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    78a8:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    78ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    78b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    78b4:	4293      	cmp	r3, r2
    78b6:	d027      	beq.n	7908 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    78b8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    78bc:	4613      	mov	r3, r2
    78be:	00db      	lsls	r3, r3, #3
    78c0:	4413      	add	r3, r2
    78c2:	009b      	lsls	r3, r3, #2
    78c4:	461a      	mov	r2, r3
    78c6:	9b02      	ldr	r3, [sp, #8]
    78c8:	4413      	add	r3, r2
    78ca:	7b1b      	ldrb	r3, [r3, #12]
    78cc:	f083 0301 	eor.w	r3, r3, #1
    78d0:	b2db      	uxtb	r3, r3
    78d2:	2b00      	cmp	r3, #0
    78d4:	d018      	beq.n	7908 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    78d6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    78da:	4613      	mov	r3, r2
    78dc:	00db      	lsls	r3, r3, #3
    78de:	4413      	add	r3, r2
    78e0:	009b      	lsls	r3, r3, #2
    78e2:	461a      	mov	r2, r3
    78e4:	9b02      	ldr	r3, [sp, #8]
    78e6:	4413      	add	r3, r2
    78e8:	699b      	ldr	r3, [r3, #24]
    78ea:	2b03      	cmp	r3, #3
    78ec:	d10c      	bne.n	7908 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    78ee:	9b03      	ldr	r3, [sp, #12]
    78f0:	785b      	ldrb	r3, [r3, #1]
    78f2:	461a      	mov	r2, r3
    78f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78f8:	4906      	ldr	r1, [pc, #24]	; (7914 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    78fa:	0152      	lsls	r2, r2, #5
    78fc:	4413      	add	r3, r2
    78fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7902:	4618      	mov	r0, r3
    7904:	f7f9 f80a 	bl	91c <CanIf_TxConfirmation>
            }
        }
    }
    7908:	bf00      	nop
    790a:	b007      	add	sp, #28
    790c:	f85d fb04 	ldr.w	pc, [sp], #4
    7910:	1fff8f58 	.word	0x1fff8f58
    7914:	1fff8f18 	.word	0x1fff8f18

00007918 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    7918:	b500      	push	{lr}
    791a:	b08f      	sub	sp, #60	; 0x3c
    791c:	9005      	str	r0, [sp, #20]
    791e:	9104      	str	r1, [sp, #16]
    7920:	4613      	mov	r3, r2
    7922:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    7926:	2300      	movs	r3, #0
    7928:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    792c:	2300      	movs	r3, #0
    792e:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    7930:	2300      	movs	r3, #0
    7932:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    7934:	9b05      	ldr	r3, [sp, #20]
    7936:	785b      	ldrb	r3, [r3, #1]
    7938:	461a      	mov	r2, r3
    793a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    793e:	493f      	ldr	r1, [pc, #252]	; (7a3c <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x124>)
    7940:	0152      	lsls	r2, r2, #5
    7942:	4413      	add	r3, r2
    7944:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7948:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    794c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    7950:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7954:	4293      	cmp	r3, r2
    7956:	d06c      	beq.n	7a32 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
    7958:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    795c:	4613      	mov	r3, r2
    795e:	00db      	lsls	r3, r3, #3
    7960:	4413      	add	r3, r2
    7962:	009b      	lsls	r3, r3, #2
    7964:	461a      	mov	r2, r3
    7966:	9b04      	ldr	r3, [sp, #16]
    7968:	4413      	add	r3, r2
    796a:	7b1b      	ldrb	r3, [r3, #12]
    796c:	f083 0301 	eor.w	r3, r3, #1
    7970:	b2db      	uxtb	r3, r3
    7972:	2b00      	cmp	r3, #0
    7974:	d05d      	beq.n	7a32 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    7976:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    797a:	4613      	mov	r3, r2
    797c:	00db      	lsls	r3, r3, #3
    797e:	4413      	add	r3, r2
    7980:	009b      	lsls	r3, r3, #2
    7982:	461a      	mov	r2, r3
    7984:	9b04      	ldr	r3, [sp, #16]
    7986:	4413      	add	r3, r2
    7988:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    798a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    798c:	699b      	ldr	r3, [r3, #24]
    798e:	2b00      	cmp	r3, #0
    7990:	d118      	bne.n	79c4 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xac>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    7992:	4a2b      	ldr	r2, [pc, #172]	; (7a40 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    7994:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7996:	7f1b      	ldrb	r3, [r3, #28]
    7998:	011b      	lsls	r3, r3, #4
    799a:	4413      	add	r3, r2
    799c:	681b      	ldr	r3, [r3, #0]
    799e:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    79a0:	a906      	add	r1, sp, #24
    79a2:	a809      	add	r0, sp, #36	; 0x24
    79a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79a6:	9300      	str	r3, [sp, #0]
    79a8:	9b05      	ldr	r3, [sp, #20]
    79aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    79ac:	f7ff fc2e 	bl	720c <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    79b0:	9b05      	ldr	r3, [sp, #20]
    79b2:	7898      	ldrb	r0, [r3, #2]
    79b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79b6:	7f19      	ldrb	r1, [r3, #28]
    79b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79ba:	7b1b      	ldrb	r3, [r3, #12]
    79bc:	2200      	movs	r2, #0
    79be:	f001 ff49 	bl	9854 <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    79c2:	e036      	b.n	7a32 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    79c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79c6:	699b      	ldr	r3, [r3, #24]
    79c8:	2b01      	cmp	r3, #1
    79ca:	d132      	bne.n	7a32 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                if ((uint8)7U == u8MbIdx)
    79cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    79d0:	2b07      	cmp	r3, #7
    79d2:	d10d      	bne.n	79f0 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xd8>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    79d4:	2301      	movs	r3, #1
    79d6:	2208      	movs	r2, #8
    79d8:	2100      	movs	r1, #0
    79da:	2050      	movs	r0, #80	; 0x50
    79dc:	f007 f8d8 	bl	eb90 <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    79e0:	9b05      	ldr	r3, [sp, #20]
    79e2:	699b      	ldr	r3, [r3, #24]
    79e4:	2b00      	cmp	r3, #0
    79e6:	d024      	beq.n	7a32 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    79e8:	9b05      	ldr	r3, [sp, #20]
    79ea:	699b      	ldr	r3, [r3, #24]
    79ec:	4798      	blx	r3
    }
    79ee:	e020      	b.n	7a32 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                else if ((uint8)6U == u8MbIdx)
    79f0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    79f4:	2b06      	cmp	r3, #6
    79f6:	d107      	bne.n	7a08 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xf0>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    79f8:	9b05      	ldr	r3, [sp, #20]
    79fa:	695b      	ldr	r3, [r3, #20]
    79fc:	2b00      	cmp	r3, #0
    79fe:	d018      	beq.n	7a32 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    7a00:	9b05      	ldr	r3, [sp, #20]
    7a02:	695b      	ldr	r3, [r3, #20]
    7a04:	4798      	blx	r3
    }
    7a06:	e014      	b.n	7a32 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    7a08:	4a0d      	ldr	r2, [pc, #52]	; (7a40 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    7a0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7a0c:	7f1b      	ldrb	r3, [r3, #28]
    7a0e:	011b      	lsls	r3, r3, #4
    7a10:	4413      	add	r3, r2
    7a12:	681b      	ldr	r3, [r3, #0]
    7a14:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    7a16:	a906      	add	r1, sp, #24
    7a18:	a809      	add	r0, sp, #36	; 0x24
    7a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7a1c:	9300      	str	r3, [sp, #0]
    7a1e:	9b05      	ldr	r3, [sp, #20]
    7a20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7a22:	f7ff fbf3 	bl	720c <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    7a26:	9b05      	ldr	r3, [sp, #20]
    7a28:	789b      	ldrb	r3, [r3, #2]
    7a2a:	2100      	movs	r1, #0
    7a2c:	4618      	mov	r0, r3
    7a2e:	f002 f80f 	bl	9a50 <FlexCAN_Ip_RxFifo>
    }
    7a32:	bf00      	nop
    7a34:	b00f      	add	sp, #60	; 0x3c
    7a36:	f85d fb04 	ldr.w	pc, [sp], #4
    7a3a:	bf00      	nop
    7a3c:	1fff8f58 	.word	0x1fff8f58
    7a40:	1fff8cf8 	.word	0x1fff8cf8

00007a44 <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7a44:	b510      	push	{r4, lr}
    7a46:	b084      	sub	sp, #16
    7a48:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    7a4a:	2301      	movs	r3, #1
    7a4c:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    7a50:	2300      	movs	r3, #0
    7a52:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    7a56:	2300      	movs	r3, #0
    7a58:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    7a5c:	2300      	movs	r3, #0
    7a5e:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    7a60:	2300      	movs	r3, #0
    7a62:	f88d 300d 	strb.w	r3, [sp, #13]
#endif

#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID] = Can_pControllerConfig->Can_u16DefaultBaudrateID;
    7a66:	9b01      	ldr	r3, [sp, #4]
    7a68:	785b      	ldrb	r3, [r3, #1]
    7a6a:	461a      	mov	r2, r3
    7a6c:	9b01      	ldr	r3, [sp, #4]
    7a6e:	8b99      	ldrh	r1, [r3, #28]
    7a70:	4b78      	ldr	r3, [pc, #480]	; (7c54 <Can_43_FLEXCAN_Ipw_Init+0x210>)
    7a72:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    7a76:	9b01      	ldr	r3, [sp, #4]
    7a78:	7898      	ldrb	r0, [r3, #2]
    7a7a:	4977      	ldr	r1, [pc, #476]	; (7c58 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    7a7c:	9b01      	ldr	r3, [sp, #4]
    7a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7a80:	681b      	ldr	r3, [r3, #0]
    7a82:	461a      	mov	r2, r3
    7a84:	f001 fdda 	bl	963c <FlexCAN_Ip_Init_Privileged>
    7a88:	4603      	mov	r3, r0
    7a8a:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    7a8e:	9b01      	ldr	r3, [sp, #4]
    7a90:	785b      	ldrb	r3, [r3, #1]
    7a92:	461a      	mov	r2, r3
    7a94:	4b71      	ldr	r3, [pc, #452]	; (7c5c <Can_43_FLEXCAN_Ipw_Init+0x218>)
    7a96:	2101      	movs	r1, #1
    7a98:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    7a9a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    7a9e:	2b00      	cmp	r3, #0
    7aa0:	d13b      	bne.n	7b1a <Can_43_FLEXCAN_Ipw_Init+0xd6>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    7aa2:	9b01      	ldr	r3, [sp, #4]
    7aa4:	789b      	ldrb	r3, [r3, #2]
    7aa6:	4618      	mov	r0, r3
    7aa8:	f003 f8fc 	bl	aca4 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    7aac:	9b01      	ldr	r3, [sp, #4]
    7aae:	6a1a      	ldr	r2, [r3, #32]
    7ab0:	9b01      	ldr	r3, [sp, #4]
    7ab2:	8b9b      	ldrh	r3, [r3, #28]
    7ab4:	4619      	mov	r1, r3
    7ab6:	2316      	movs	r3, #22
    7ab8:	fb01 f303 	mul.w	r3, r1, r3
    7abc:	4413      	add	r3, r2
    7abe:	785b      	ldrb	r3, [r3, #1]
    7ac0:	2b00      	cmp	r3, #0
    7ac2:	d018      	beq.n	7af6 <Can_43_FLEXCAN_Ipw_Init+0xb2>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    7ac4:	9b01      	ldr	r3, [sp, #4]
    7ac6:	7898      	ldrb	r0, [r3, #2]
    7ac8:	9b01      	ldr	r3, [sp, #4]
    7aca:	6a1a      	ldr	r2, [r3, #32]
    7acc:	9b01      	ldr	r3, [sp, #4]
    7ace:	8b9b      	ldrh	r3, [r3, #28]
    7ad0:	4619      	mov	r1, r3
    7ad2:	2316      	movs	r3, #22
    7ad4:	fb01 f303 	mul.w	r3, r1, r3
    7ad8:	4413      	add	r3, r2
    7ada:	7cd9      	ldrb	r1, [r3, #19]
    7adc:	9b01      	ldr	r3, [sp, #4]
    7ade:	6a1a      	ldr	r2, [r3, #32]
    7ae0:	9b01      	ldr	r3, [sp, #4]
    7ae2:	8b9b      	ldrh	r3, [r3, #28]
    7ae4:	461c      	mov	r4, r3
    7ae6:	2316      	movs	r3, #22
    7ae8:	fb04 f303 	mul.w	r3, r4, r3
    7aec:	4413      	add	r3, r2
    7aee:	7d1b      	ldrb	r3, [r3, #20]
    7af0:	461a      	mov	r2, r3
    7af2:	f002 ffc5 	bl	aa80 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    7af6:	9b01      	ldr	r3, [sp, #4]
    7af8:	7898      	ldrb	r0, [r3, #2]
    7afa:	9b01      	ldr	r3, [sp, #4]
    7afc:	6a1a      	ldr	r2, [r3, #32]
    7afe:	9b01      	ldr	r3, [sp, #4]
    7b00:	8b9b      	ldrh	r3, [r3, #28]
    7b02:	4619      	mov	r1, r3
    7b04:	2316      	movs	r3, #22
    7b06:	fb01 f303 	mul.w	r3, r1, r3
    7b0a:	4413      	add	r3, r2
    7b0c:	7c9b      	ldrb	r3, [r3, #18]
    7b0e:	4619      	mov	r1, r3
    7b10:	f003 f80a 	bl	ab28 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    7b14:	9801      	ldr	r0, [sp, #4]
    7b16:	f000 fbe5 	bl	82e4 <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    7b1a:	2300      	movs	r3, #0
    7b1c:	f88d 300d 	strb.w	r3, [sp, #13]
    7b20:	e010      	b.n	7b44 <Can_43_FLEXCAN_Ipw_Init+0x100>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    7b22:	9b01      	ldr	r3, [sp, #4]
    7b24:	785b      	ldrb	r3, [r3, #1]
    7b26:	461a      	mov	r2, r3
    7b28:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7b2c:	494c      	ldr	r1, [pc, #304]	; (7c60 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    7b2e:	0152      	lsls	r2, r2, #5
    7b30:	4413      	add	r3, r2
    7b32:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7b36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    7b3a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7b3e:	3301      	adds	r3, #1
    7b40:	f88d 300d 	strb.w	r3, [sp, #13]
    7b44:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7b48:	2b1f      	cmp	r3, #31
    7b4a:	d9ea      	bls.n	7b22 <Can_43_FLEXCAN_Ipw_Init+0xde>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7b4c:	2300      	movs	r3, #0
    7b4e:	f88d 300f 	strb.w	r3, [sp, #15]
    7b52:	e06b      	b.n	7c2c <Can_43_FLEXCAN_Ipw_Init+0x1e8>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    7b54:	9b01      	ldr	r3, [sp, #4]
    7b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b58:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7b5c:	009b      	lsls	r3, r3, #2
    7b5e:	4413      	add	r3, r2
    7b60:	681b      	ldr	r3, [r3, #0]
    7b62:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    7b64:	9b02      	ldr	r3, [sp, #8]
    7b66:	699b      	ldr	r3, [r3, #24]
    7b68:	2b03      	cmp	r3, #3
    7b6a:	d006      	beq.n	7b7a <Can_43_FLEXCAN_Ipw_Init+0x136>
    7b6c:	2b03      	cmp	r3, #3
    7b6e:	d857      	bhi.n	7c20 <Can_43_FLEXCAN_Ipw_Init+0x1dc>
    7b70:	2b00      	cmp	r3, #0
    7b72:	d023      	beq.n	7bbc <Can_43_FLEXCAN_Ipw_Init+0x178>
    7b74:	2b01      	cmp	r3, #1
    7b76:	d02f      	beq.n	7bd8 <Can_43_FLEXCAN_Ipw_Init+0x194>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    7b78:	e052      	b.n	7c20 <Can_43_FLEXCAN_Ipw_Init+0x1dc>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    7b7a:	2300      	movs	r3, #0
    7b7c:	f88d 300e 	strb.w	r3, [sp, #14]
    7b80:	e015      	b.n	7bae <Can_43_FLEXCAN_Ipw_Init+0x16a>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    7b82:	9b01      	ldr	r3, [sp, #4]
    7b84:	785b      	ldrb	r3, [r3, #1]
    7b86:	461c      	mov	r4, r3
    7b88:	9b02      	ldr	r3, [sp, #8]
    7b8a:	7f1b      	ldrb	r3, [r3, #28]
    7b8c:	461a      	mov	r2, r3
    7b8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7b92:	4413      	add	r3, r2
    7b94:	9a02      	ldr	r2, [sp, #8]
    7b96:	8810      	ldrh	r0, [r2, #0]
    7b98:	4931      	ldr	r1, [pc, #196]	; (7c60 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    7b9a:	0162      	lsls	r2, r4, #5
    7b9c:	4413      	add	r3, r2
    7b9e:	4602      	mov	r2, r0
    7ba0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    7ba4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7ba8:	3301      	adds	r3, #1
    7baa:	f88d 300e 	strb.w	r3, [sp, #14]
    7bae:	9b02      	ldr	r3, [sp, #8]
    7bb0:	7b9b      	ldrb	r3, [r3, #14]
    7bb2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    7bb6:	429a      	cmp	r2, r3
    7bb8:	d3e3      	bcc.n	7b82 <Can_43_FLEXCAN_Ipw_Init+0x13e>
                break;
    7bba:	e032      	b.n	7c22 <Can_43_FLEXCAN_Ipw_Init+0x1de>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    7bbc:	9b01      	ldr	r3, [sp, #4]
    7bbe:	785b      	ldrb	r3, [r3, #1]
    7bc0:	461c      	mov	r4, r3
    7bc2:	9b02      	ldr	r3, [sp, #8]
    7bc4:	7f1b      	ldrb	r3, [r3, #28]
    7bc6:	4618      	mov	r0, r3
    7bc8:	9b02      	ldr	r3, [sp, #8]
    7bca:	8819      	ldrh	r1, [r3, #0]
    7bcc:	4a24      	ldr	r2, [pc, #144]	; (7c60 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    7bce:	0163      	lsls	r3, r4, #5
    7bd0:	4403      	add	r3, r0
    7bd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    7bd6:	e024      	b.n	7c22 <Can_43_FLEXCAN_Ipw_Init+0x1de>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    7bd8:	9b01      	ldr	r3, [sp, #4]
    7bda:	785b      	ldrb	r3, [r3, #1]
    7bdc:	461c      	mov	r4, r3
    7bde:	9b02      	ldr	r3, [sp, #8]
    7be0:	7f1b      	ldrb	r3, [r3, #28]
    7be2:	4618      	mov	r0, r3
    7be4:	9b02      	ldr	r3, [sp, #8]
    7be6:	8819      	ldrh	r1, [r3, #0]
    7be8:	4a1d      	ldr	r2, [pc, #116]	; (7c60 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    7bea:	0163      	lsls	r3, r4, #5
    7bec:	4403      	add	r3, r0
    7bee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    7bf2:	9b01      	ldr	r3, [sp, #4]
    7bf4:	785b      	ldrb	r3, [r3, #1]
    7bf6:	4618      	mov	r0, r3
    7bf8:	9b02      	ldr	r3, [sp, #8]
    7bfa:	8819      	ldrh	r1, [r3, #0]
    7bfc:	4a18      	ldr	r2, [pc, #96]	; (7c60 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    7bfe:	0183      	lsls	r3, r0, #6
    7c00:	4413      	add	r3, r2
    7c02:	330c      	adds	r3, #12
    7c04:	460a      	mov	r2, r1
    7c06:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    7c08:	9b01      	ldr	r3, [sp, #4]
    7c0a:	785b      	ldrb	r3, [r3, #1]
    7c0c:	4618      	mov	r0, r3
    7c0e:	9b02      	ldr	r3, [sp, #8]
    7c10:	8819      	ldrh	r1, [r3, #0]
    7c12:	4a13      	ldr	r2, [pc, #76]	; (7c60 <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    7c14:	0183      	lsls	r3, r0, #6
    7c16:	4413      	add	r3, r2
    7c18:	330e      	adds	r3, #14
    7c1a:	460a      	mov	r2, r1
    7c1c:	801a      	strh	r2, [r3, #0]
                break;
    7c1e:	e000      	b.n	7c22 <Can_43_FLEXCAN_Ipw_Init+0x1de>
                break;
    7c20:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7c22:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7c26:	3301      	adds	r3, #1
    7c28:	f88d 300f 	strb.w	r3, [sp, #15]
    7c2c:	9b01      	ldr	r3, [sp, #4]
    7c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    7c32:	f89d 200f 	ldrb.w	r2, [sp, #15]
    7c36:	429a      	cmp	r2, r3
    7c38:	d38c      	bcc.n	7b54 <Can_43_FLEXCAN_Ipw_Init+0x110>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    7c3a:	9b01      	ldr	r3, [sp, #4]
    7c3c:	789b      	ldrb	r3, [r3, #2]
    7c3e:	4618      	mov	r0, r3
    7c40:	f002 fd80 	bl	a744 <FlexCAN_Ip_SetStopMode_Privileged>
    7c44:	4603      	mov	r3, r0
    7c46:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    7c4a:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    7c4e:	4618      	mov	r0, r3
    7c50:	b004      	add	sp, #16
    7c52:	bd10      	pop	{r4, pc}
    7c54:	1fff8f98 	.word	0x1fff8f98
    7c58:	1fff8cf8 	.word	0x1fff8cf8
    7c5c:	1fff8f9c 	.word	0x1fff8f9c
    7c60:	1fff8f58 	.word	0x1fff8f58

00007c64 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7c64:	b500      	push	{lr}
    7c66:	b083      	sub	sp, #12
    7c68:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    7c6a:	9b01      	ldr	r3, [sp, #4]
    7c6c:	789b      	ldrb	r3, [r3, #2]
    7c6e:	4618      	mov	r0, r3
    7c70:	f002 fbd4 	bl	a41c <FlexCAN_Ip_Deinit_Privileged>
}
    7c74:	bf00      	nop
    7c76:	b003      	add	sp, #12
    7c78:	f85d fb04 	ldr.w	pc, [sp], #4

00007c7c <Can_43_FLEXCAN_Ipw_SetBaudrate>:
    Std_ReturnType Can_43_FLEXCAN_Ipw_SetBaudrate
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        uint16 BaudRateConfigID
    )
    {
    7c7c:	b510      	push	{r4, lr}
    7c7e:	b088      	sub	sp, #32
    7c80:	9001      	str	r0, [sp, #4]
    7c82:	460b      	mov	r3, r1
    7c84:	f8ad 3002 	strh.w	r3, [sp, #2]
        Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    7c88:	2301      	movs	r3, #1
    7c8a:	9307      	str	r3, [sp, #28]
        Flexcan_Ip_TimeSegmentType FlexCANTimeSeg;

        eRetVal = FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset);
    7c8c:	9b01      	ldr	r3, [sp, #4]
    7c8e:	789b      	ldrb	r3, [r3, #2]
    7c90:	4618      	mov	r0, r3
    7c92:	f002 fb01 	bl	a298 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    7c96:	9007      	str	r0, [sp, #28]
        if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    7c98:	9b07      	ldr	r3, [sp, #28]
    7c9a:	2b00      	cmp	r3, #0
    7c9c:	f040 80bb 	bne.w	7e16 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x19a>
        {
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[Can_pControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16Prescaler;
    7ca0:	9b01      	ldr	r3, [sp, #4]
    7ca2:	6a1a      	ldr	r2, [r3, #32]
    7ca4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7ca8:	2116      	movs	r1, #22
    7caa:	fb01 f303 	mul.w	r3, r1, r3
    7cae:	4413      	add	r3, r2
    7cb0:	88db      	ldrh	r3, [r3, #6]
    7cb2:	9305      	str	r3, [sp, #20]
            {
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16PrescalerAlternate;
            }
        #endif

            FlexCANTimeSeg.propSeg    = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PropSeg;
    7cb4:	9b01      	ldr	r3, [sp, #4]
    7cb6:	6a1a      	ldr	r2, [r3, #32]
    7cb8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7cbc:	2116      	movs	r1, #22
    7cbe:	fb01 f303 	mul.w	r3, r1, r3
    7cc2:	4413      	add	r3, r2
    7cc4:	789b      	ldrb	r3, [r3, #2]
    7cc6:	9302      	str	r3, [sp, #8]
            FlexCANTimeSeg.phaseSeg1  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
    7cc8:	9b01      	ldr	r3, [sp, #4]
    7cca:	6a1a      	ldr	r2, [r3, #32]
    7ccc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7cd0:	2116      	movs	r1, #22
    7cd2:	fb01 f303 	mul.w	r3, r1, r3
    7cd6:	4413      	add	r3, r2
    7cd8:	78db      	ldrb	r3, [r3, #3]
    7cda:	9303      	str	r3, [sp, #12]
            FlexCANTimeSeg.phaseSeg2  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
    7cdc:	9b01      	ldr	r3, [sp, #4]
    7cde:	6a1a      	ldr	r2, [r3, #32]
    7ce0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7ce4:	2116      	movs	r1, #22
    7ce6:	fb01 f303 	mul.w	r3, r1, r3
    7cea:	4413      	add	r3, r2
    7cec:	791b      	ldrb	r3, [r3, #4]
    7cee:	9304      	str	r3, [sp, #16]
            FlexCANTimeSeg.rJumpwidth = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
    7cf0:	9b01      	ldr	r3, [sp, #4]
    7cf2:	6a1a      	ldr	r2, [r3, #32]
    7cf4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7cf8:	2116      	movs	r1, #22
    7cfa:	fb01 f303 	mul.w	r3, r1, r3
    7cfe:	4413      	add	r3, r2
    7d00:	7a1b      	ldrb	r3, [r3, #8]
    7d02:	9306      	str	r3, [sp, #24]

            
            (void)FlexCAN_Ip_SetBitrate(Can_pControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
    7d04:	9b01      	ldr	r3, [sp, #4]
    7d06:	789b      	ldrb	r3, [r3, #2]
    7d08:	a902      	add	r1, sp, #8
    7d0a:	2200      	movs	r2, #0
    7d0c:	4618      	mov	r0, r3
    7d0e:	f002 fd83 	bl	a818 <FlexCAN_Ip_SetBitrate_Privileged>
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[Can_pControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16Prescaler;
    7d12:	9b01      	ldr	r3, [sp, #4]
    7d14:	6a1a      	ldr	r2, [r3, #32]
    7d16:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d1a:	2116      	movs	r1, #22
    7d1c:	fb01 f303 	mul.w	r3, r1, r3
    7d20:	4413      	add	r3, r2
    7d22:	89db      	ldrh	r3, [r3, #14]
    7d24:	9305      	str	r3, [sp, #20]
            {
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16PrescalerAlternate;
            }
        #endif

            if (TRUE == Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    7d26:	9b01      	ldr	r3, [sp, #4]
    7d28:	6a1a      	ldr	r2, [r3, #32]
    7d2a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d2e:	2116      	movs	r1, #22
    7d30:	fb01 f303 	mul.w	r3, r1, r3
    7d34:	4413      	add	r3, r2
    7d36:	785b      	ldrb	r3, [r3, #1]
    7d38:	2b00      	cmp	r3, #0
    7d3a:	d04d      	beq.n	7dd8 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x15c>
            {
                FlexCANTimeSeg.propSeg    = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PropSeg;
    7d3c:	9b01      	ldr	r3, [sp, #4]
    7d3e:	6a1a      	ldr	r2, [r3, #32]
    7d40:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d44:	2116      	movs	r1, #22
    7d46:	fb01 f303 	mul.w	r3, r1, r3
    7d4a:	4413      	add	r3, r2
    7d4c:	7a9b      	ldrb	r3, [r3, #10]
    7d4e:	9302      	str	r3, [sp, #8]
                FlexCANTimeSeg.phaseSeg1  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg1;
    7d50:	9b01      	ldr	r3, [sp, #4]
    7d52:	6a1a      	ldr	r2, [r3, #32]
    7d54:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d58:	2116      	movs	r1, #22
    7d5a:	fb01 f303 	mul.w	r3, r1, r3
    7d5e:	4413      	add	r3, r2
    7d60:	7adb      	ldrb	r3, [r3, #11]
    7d62:	9303      	str	r3, [sp, #12]
                FlexCANTimeSeg.phaseSeg2  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
    7d64:	9b01      	ldr	r3, [sp, #4]
    7d66:	6a1a      	ldr	r2, [r3, #32]
    7d68:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d6c:	2116      	movs	r1, #22
    7d6e:	fb01 f303 	mul.w	r3, r1, r3
    7d72:	4413      	add	r3, r2
    7d74:	7b1b      	ldrb	r3, [r3, #12]
    7d76:	9304      	str	r3, [sp, #16]
                FlexCANTimeSeg.rJumpwidth = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;
    7d78:	9b01      	ldr	r3, [sp, #4]
    7d7a:	6a1a      	ldr	r2, [r3, #32]
    7d7c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d80:	2116      	movs	r1, #22
    7d82:	fb01 f303 	mul.w	r3, r1, r3
    7d86:	4413      	add	r3, r2
    7d88:	7c1b      	ldrb	r3, [r3, #16]
    7d8a:	9306      	str	r3, [sp, #24]

                (void)FlexCAN_Ip_SetBitrateCbt(Can_pControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    7d8c:	9b01      	ldr	r3, [sp, #4]
    7d8e:	7898      	ldrb	r0, [r3, #2]
    7d90:	9b01      	ldr	r3, [sp, #4]
    7d92:	6a1a      	ldr	r2, [r3, #32]
    7d94:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7d98:	2116      	movs	r1, #22
    7d9a:	fb01 f303 	mul.w	r3, r1, r3
    7d9e:	4413      	add	r3, r2
    7da0:	781a      	ldrb	r2, [r3, #0]
    7da2:	ab02      	add	r3, sp, #8
    7da4:	4619      	mov	r1, r3
    7da6:	f002 fe01 	bl	a9ac <FlexCAN_Ip_SetBitrateCbt_Privileged>

                (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    7daa:	9b01      	ldr	r3, [sp, #4]
    7dac:	7898      	ldrb	r0, [r3, #2]
    7dae:	9b01      	ldr	r3, [sp, #4]
    7db0:	6a1a      	ldr	r2, [r3, #32]
    7db2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7db6:	2116      	movs	r1, #22
    7db8:	fb01 f303 	mul.w	r3, r1, r3
    7dbc:	4413      	add	r3, r2
    7dbe:	7cd9      	ldrb	r1, [r3, #19]
    7dc0:	9b01      	ldr	r3, [sp, #4]
    7dc2:	6a1a      	ldr	r2, [r3, #32]
    7dc4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7dc8:	2416      	movs	r4, #22
    7dca:	fb04 f303 	mul.w	r3, r4, r3
    7dce:	4413      	add	r3, r2
    7dd0:	7d1b      	ldrb	r3, [r3, #20]
    7dd2:	461a      	mov	r2, r3
    7dd4:	f002 fe54 	bl	aa80 <FlexCAN_Ip_SetTDCOffset_Privileged>
                                            Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                            Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset \
                                            );
            }

            (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    7dd8:	9b01      	ldr	r3, [sp, #4]
    7dda:	7898      	ldrb	r0, [r3, #2]
    7ddc:	9b01      	ldr	r3, [sp, #4]
    7dde:	6a1a      	ldr	r2, [r3, #32]
    7de0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7de4:	2116      	movs	r1, #22
    7de6:	fb01 f303 	mul.w	r3, r1, r3
    7dea:	4413      	add	r3, r2
    7dec:	7c9b      	ldrb	r3, [r3, #18]
    7dee:	4619      	mov	r1, r3
    7df0:	f002 fe9a 	bl	ab28 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>

            eRetVal = FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    7df4:	9b01      	ldr	r3, [sp, #4]
    7df6:	789b      	ldrb	r3, [r3, #2]
    7df8:	4618      	mov	r0, r3
    7dfa:	f002 fca3 	bl	a744 <FlexCAN_Ip_SetStopMode_Privileged>
    7dfe:	9007      	str	r0, [sp, #28]
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    7e00:	9b07      	ldr	r3, [sp, #28]
    7e02:	2b00      	cmp	r3, #0
    7e04:	d107      	bne.n	7e16 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x19a>
            {
                Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID] = BaudRateConfigID;
    7e06:	9b01      	ldr	r3, [sp, #4]
    7e08:	785b      	ldrb	r3, [r3, #1]
    7e0a:	4619      	mov	r1, r3
    7e0c:	4a06      	ldr	r2, [pc, #24]	; (7e28 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x1ac>)
    7e0e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    7e12:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            }
        }
        return ((FLEXCAN_STATUS_SUCCESS == eRetVal) ? ((Std_ReturnType)E_OK) : ((Std_ReturnType)E_NOT_OK));
    7e16:	9b07      	ldr	r3, [sp, #28]
    7e18:	2b00      	cmp	r3, #0
    7e1a:	bf14      	ite	ne
    7e1c:	2301      	movne	r3, #1
    7e1e:	2300      	moveq	r3, #0
    7e20:	b2db      	uxtb	r3, r3
    }
    7e22:	4618      	mov	r0, r3
    7e24:	b008      	add	sp, #32
    7e26:	bd10      	pop	{r4, pc}
    7e28:	1fff8f98 	.word	0x1fff8f98

00007e2c <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7e2c:	b500      	push	{lr}
    7e2e:	b085      	sub	sp, #20
    7e30:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    7e32:	2300      	movs	r3, #0
    7e34:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    7e36:	9b01      	ldr	r3, [sp, #4]
    7e38:	785b      	ldrb	r3, [r3, #1]
    7e3a:	461a      	mov	r2, r3
    7e3c:	4b11      	ldr	r3, [pc, #68]	; (7e84 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    7e3e:	5c9b      	ldrb	r3, [r3, r2]
    7e40:	2b00      	cmp	r3, #0
    7e42:	d012      	beq.n	7e6a <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    7e44:	9b01      	ldr	r3, [sp, #4]
    7e46:	7a5b      	ldrb	r3, [r3, #9]
    7e48:	f083 0301 	eor.w	r3, r3, #1
    7e4c:	b2db      	uxtb	r3, r3
    7e4e:	2b00      	cmp	r3, #0
    7e50:	d006      	beq.n	7e60 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    7e52:	9b01      	ldr	r3, [sp, #4]
    7e54:	789b      	ldrb	r3, [r3, #2]
    7e56:	2201      	movs	r2, #1
    7e58:	2104      	movs	r1, #4
    7e5a:	4618      	mov	r0, r3
    7e5c:	f002 ff4e 	bl	acfc <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    7e60:	9b01      	ldr	r3, [sp, #4]
    7e62:	789b      	ldrb	r3, [r3, #2]
    7e64:	4618      	mov	r0, r3
    7e66:	f002 feef 	bl	ac48 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    7e6a:	9b01      	ldr	r3, [sp, #4]
    7e6c:	789b      	ldrb	r3, [r3, #2]
    7e6e:	4618      	mov	r0, r3
    7e70:	f002 fc48 	bl	a704 <FlexCAN_Ip_SetStartMode_Privileged>
    7e74:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    7e76:	9b03      	ldr	r3, [sp, #12]
    7e78:	b2db      	uxtb	r3, r3
}
    7e7a:	4618      	mov	r0, r3
    7e7c:	b005      	add	sp, #20
    7e7e:	f85d fb04 	ldr.w	pc, [sp], #4
    7e82:	bf00      	nop
    7e84:	1fff8f9c 	.word	0x1fff8f9c

00007e88 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7e88:	b500      	push	{lr}
    7e8a:	b087      	sub	sp, #28
    7e8c:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    7e8e:	2300      	movs	r3, #0
    7e90:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    7e94:	2300      	movs	r3, #0
    7e96:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    7e98:	9b01      	ldr	r3, [sp, #4]
    7e9a:	7898      	ldrb	r0, [r3, #2]
    7e9c:	4930      	ldr	r1, [pc, #192]	; (7f60 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd8>)
    7e9e:	9b01      	ldr	r3, [sp, #4]
    7ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7ea2:	681b      	ldr	r3, [r3, #0]
    7ea4:	461a      	mov	r2, r3
    7ea6:	f001 fbc9 	bl	963c <FlexCAN_Ip_Init_Privileged>
    7eaa:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    7eac:	9b04      	ldr	r3, [sp, #16]
    7eae:	2b00      	cmp	r3, #0
    7eb0:	d14f      	bne.n	7f52 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xca>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    7eb2:	9b01      	ldr	r3, [sp, #4]
    7eb4:	789b      	ldrb	r3, [r3, #2]
    7eb6:	4618      	mov	r0, r3
    7eb8:	f002 fef4 	bl	aca4 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    7ebc:	9801      	ldr	r0, [sp, #4]
    7ebe:	f7ff fc25 	bl	770c <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    7ec2:	9801      	ldr	r0, [sp, #4]
    7ec4:	f000 fa0e 	bl	82e4 <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7ec8:	2300      	movs	r3, #0
    7eca:	f88d 3017 	strb.w	r3, [sp, #23]
    7ece:	e02f      	b.n	7f30 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    7ed0:	9b01      	ldr	r3, [sp, #4]
    7ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7ed4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7ed8:	009b      	lsls	r3, r3, #2
    7eda:	4413      	add	r3, r2
    7edc:	681b      	ldr	r3, [r3, #0]
    7ede:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    7ee0:	9b03      	ldr	r3, [sp, #12]
    7ee2:	7b1b      	ldrb	r3, [r3, #12]
    7ee4:	f083 0301 	eor.w	r3, r3, #1
    7ee8:	b2db      	uxtb	r3, r3
    7eea:	2b00      	cmp	r3, #0
    7eec:	d018      	beq.n	7f20 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x98>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    7eee:	9b03      	ldr	r3, [sp, #12]
    7ef0:	699b      	ldr	r3, [r3, #24]
    7ef2:	2b00      	cmp	r3, #0
    7ef4:	d003      	beq.n	7efe <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x76>
    7ef6:	3b01      	subs	r3, #1
    7ef8:	2b01      	cmp	r3, #1
    7efa:	d813      	bhi.n	7f24 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9c>
    7efc:	e009      	b.n	7f12 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x8a>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    7efe:	9b01      	ldr	r3, [sp, #4]
    7f00:	7898      	ldrb	r0, [r3, #2]
    7f02:	9b03      	ldr	r3, [sp, #12]
    7f04:	7f19      	ldrb	r1, [r3, #28]
    7f06:	9b03      	ldr	r3, [sp, #12]
    7f08:	7b1b      	ldrb	r3, [r3, #12]
    7f0a:	2200      	movs	r2, #0
    7f0c:	f001 fca2 	bl	9854 <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    7f10:	e009      	b.n	7f26 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    7f12:	9b01      	ldr	r3, [sp, #4]
    7f14:	789b      	ldrb	r3, [r3, #2]
    7f16:	2100      	movs	r1, #0
    7f18:	4618      	mov	r0, r3
    7f1a:	f001 fd99 	bl	9a50 <FlexCAN_Ip_RxFifo>
                        }
                        break;
    7f1e:	e002      	b.n	7f26 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    7f20:	bf00      	nop
    7f22:	e000      	b.n	7f26 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                        break;
    7f24:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7f26:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7f2a:	3301      	adds	r3, #1
    7f2c:	f88d 3017 	strb.w	r3, [sp, #23]
    7f30:	9b01      	ldr	r3, [sp, #4]
    7f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    7f36:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7f3a:	429a      	cmp	r2, r3
    7f3c:	d3c8      	bcc.n	7ed0 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x48>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    7f3e:	9801      	ldr	r0, [sp, #4]
    7f40:	f7ff ff74 	bl	7e2c <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    7f44:	4603      	mov	r3, r0
    7f46:	2b00      	cmp	r3, #0
    7f48:	bf14      	ite	ne
    7f4a:	2301      	movne	r3, #1
    7f4c:	2300      	moveq	r3, #0
    7f4e:	b2db      	uxtb	r3, r3
    7f50:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    7f52:	9b04      	ldr	r3, [sp, #16]
    7f54:	b2db      	uxtb	r3, r3
}
    7f56:	4618      	mov	r0, r3
    7f58:	b007      	add	sp, #28
    7f5a:	f85d fb04 	ldr.w	pc, [sp], #4
    7f5e:	bf00      	nop
    7f60:	1fff8cf8 	.word	0x1fff8cf8

00007f64 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    7f64:	b500      	push	{lr}
    7f66:	b085      	sub	sp, #20
    7f68:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    7f6a:	2300      	movs	r3, #0
    7f6c:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    7f70:	2300      	movs	r3, #0
    7f72:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    7f76:	9b01      	ldr	r3, [sp, #4]
    7f78:	789b      	ldrb	r3, [r3, #2]
    7f7a:	4618      	mov	r0, r3
    7f7c:	f002 f98c 	bl	a298 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    7f80:	4603      	mov	r3, r0
    7f82:	2b00      	cmp	r3, #0
    7f84:	d160      	bne.n	8048 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    7f86:	9b01      	ldr	r3, [sp, #4]
    7f88:	785b      	ldrb	r3, [r3, #1]
    7f8a:	461a      	mov	r2, r3
    7f8c:	4b33      	ldr	r3, [pc, #204]	; (805c <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    7f8e:	5c9b      	ldrb	r3, [r3, r2]
    7f90:	2b00      	cmp	r3, #0
    7f92:	d012      	beq.n	7fba <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    7f94:	9b01      	ldr	r3, [sp, #4]
    7f96:	789b      	ldrb	r3, [r3, #2]
    7f98:	4618      	mov	r0, r3
    7f9a:	f002 fe83 	bl	aca4 <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    7f9e:	9b01      	ldr	r3, [sp, #4]
    7fa0:	7a5b      	ldrb	r3, [r3, #9]
    7fa2:	f083 0301 	eor.w	r3, r3, #1
    7fa6:	b2db      	uxtb	r3, r3
    7fa8:	2b00      	cmp	r3, #0
    7faa:	d006      	beq.n	7fba <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    7fac:	9b01      	ldr	r3, [sp, #4]
    7fae:	789b      	ldrb	r3, [r3, #2]
    7fb0:	2200      	movs	r2, #0
    7fb2:	2104      	movs	r1, #4
    7fb4:	4618      	mov	r0, r3
    7fb6:	f002 fea1 	bl	acfc <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    7fba:	2300      	movs	r3, #0
    7fbc:	f88d 300e 	strb.w	r3, [sp, #14]
    7fc0:	e032      	b.n	8028 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    7fc2:	9b01      	ldr	r3, [sp, #4]
    7fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7fc6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7fca:	009b      	lsls	r3, r3, #2
    7fcc:	4413      	add	r3, r2
    7fce:	681b      	ldr	r3, [r3, #0]
    7fd0:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    7fd2:	9b02      	ldr	r3, [sp, #8]
    7fd4:	699b      	ldr	r3, [r3, #24]
    7fd6:	2b03      	cmp	r3, #3
    7fd8:	d119      	bne.n	800e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    7fda:	2300      	movs	r3, #0
    7fdc:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    7fe0:	9b01      	ldr	r3, [sp, #4]
    7fe2:	7898      	ldrb	r0, [r3, #2]
    7fe4:	9b02      	ldr	r3, [sp, #8]
    7fe6:	7f1a      	ldrb	r2, [r3, #28]
    7fe8:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7fec:	4413      	add	r3, r2
    7fee:	b2db      	uxtb	r3, r3
    7ff0:	4619      	mov	r1, r3
    7ff2:	f002 ff09 	bl	ae08 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    7ff6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7ffa:	3301      	adds	r3, #1
    7ffc:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    8000:	9b02      	ldr	r3, [sp, #8]
    8002:	7b9b      	ldrb	r3, [r3, #14]
    8004:	f89d 200d 	ldrb.w	r2, [sp, #13]
    8008:	429a      	cmp	r2, r3
    800a:	d3e9      	bcc.n	7fe0 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    800c:	e007      	b.n	801e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    800e:	9b01      	ldr	r3, [sp, #4]
    8010:	789a      	ldrb	r2, [r3, #2]
    8012:	9b02      	ldr	r3, [sp, #8]
    8014:	7f1b      	ldrb	r3, [r3, #28]
    8016:	4619      	mov	r1, r3
    8018:	4610      	mov	r0, r2
    801a:	f002 fef5 	bl	ae08 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    801e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8022:	3301      	adds	r3, #1
    8024:	f88d 300e 	strb.w	r3, [sp, #14]
    8028:	9b01      	ldr	r3, [sp, #4]
    802a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    802e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8032:	429a      	cmp	r2, r3
    8034:	d3c5      	bcc.n	7fc2 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    8036:	9b01      	ldr	r3, [sp, #4]
    8038:	789b      	ldrb	r3, [r3, #2]
    803a:	4618      	mov	r0, r3
    803c:	f002 fb82 	bl	a744 <FlexCAN_Ip_SetStopMode_Privileged>
    8040:	4603      	mov	r3, r0
    8042:	f88d 300f 	strb.w	r3, [sp, #15]
    8046:	e002      	b.n	804e <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    8048:	2301      	movs	r3, #1
    804a:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    804e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8052:	4618      	mov	r0, r3
    8054:	b005      	add	sp, #20
    8056:	f85d fb04 	ldr.w	pc, [sp], #4
    805a:	bf00      	nop
    805c:	1fff8f9c 	.word	0x1fff8f9c

00008060 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8060:	b500      	push	{lr}
    8062:	b083      	sub	sp, #12
    8064:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    8066:	9b01      	ldr	r3, [sp, #4]
    8068:	785b      	ldrb	r3, [r3, #1]
    806a:	461a      	mov	r2, r3
    806c:	4b10      	ldr	r3, [pc, #64]	; (80b0 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    806e:	5c9b      	ldrb	r3, [r3, r2]
    8070:	2b00      	cmp	r3, #0
    8072:	d018      	beq.n	80a6 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8074:	9b01      	ldr	r3, [sp, #4]
    8076:	789b      	ldrb	r3, [r3, #2]
    8078:	4618      	mov	r0, r3
    807a:	f002 fe13 	bl	aca4 <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    807e:	9b01      	ldr	r3, [sp, #4]
    8080:	785b      	ldrb	r3, [r3, #1]
    8082:	461a      	mov	r2, r3
    8084:	4b0a      	ldr	r3, [pc, #40]	; (80b0 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    8086:	2100      	movs	r1, #0
    8088:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    808a:	9b01      	ldr	r3, [sp, #4]
    808c:	7a5b      	ldrb	r3, [r3, #9]
    808e:	f083 0301 	eor.w	r3, r3, #1
    8092:	b2db      	uxtb	r3, r3
    8094:	2b00      	cmp	r3, #0
    8096:	d006      	beq.n	80a6 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    8098:	9b01      	ldr	r3, [sp, #4]
    809a:	789b      	ldrb	r3, [r3, #2]
    809c:	2200      	movs	r2, #0
    809e:	2104      	movs	r1, #4
    80a0:	4618      	mov	r0, r3
    80a2:	f002 fe2b 	bl	acfc <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    80a6:	bf00      	nop
    80a8:	b003      	add	sp, #12
    80aa:	f85d fb04 	ldr.w	pc, [sp], #4
    80ae:	bf00      	nop
    80b0:	1fff8f9c 	.word	0x1fff8f9c

000080b4 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    80b4:	b500      	push	{lr}
    80b6:	b083      	sub	sp, #12
    80b8:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    80ba:	9b01      	ldr	r3, [sp, #4]
    80bc:	785b      	ldrb	r3, [r3, #1]
    80be:	461a      	mov	r2, r3
    80c0:	4b11      	ldr	r3, [pc, #68]	; (8108 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    80c2:	5c9b      	ldrb	r3, [r3, r2]
    80c4:	f083 0301 	eor.w	r3, r3, #1
    80c8:	b2db      	uxtb	r3, r3
    80ca:	2b00      	cmp	r3, #0
    80cc:	d018      	beq.n	8100 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    80ce:	9b01      	ldr	r3, [sp, #4]
    80d0:	789b      	ldrb	r3, [r3, #2]
    80d2:	4618      	mov	r0, r3
    80d4:	f002 fdb8 	bl	ac48 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    80d8:	9b01      	ldr	r3, [sp, #4]
    80da:	7a5b      	ldrb	r3, [r3, #9]
    80dc:	f083 0301 	eor.w	r3, r3, #1
    80e0:	b2db      	uxtb	r3, r3
    80e2:	2b00      	cmp	r3, #0
    80e4:	d006      	beq.n	80f4 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    80e6:	9b01      	ldr	r3, [sp, #4]
    80e8:	789b      	ldrb	r3, [r3, #2]
    80ea:	2201      	movs	r2, #1
    80ec:	2104      	movs	r1, #4
    80ee:	4618      	mov	r0, r3
    80f0:	f002 fe04 	bl	acfc <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    80f4:	9b01      	ldr	r3, [sp, #4]
    80f6:	785b      	ldrb	r3, [r3, #1]
    80f8:	461a      	mov	r2, r3
    80fa:	4b03      	ldr	r3, [pc, #12]	; (8108 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    80fc:	2101      	movs	r1, #1
    80fe:	5499      	strb	r1, [r3, r2]
    }
}
    8100:	bf00      	nop
    8102:	b003      	add	sp, #12
    8104:	f85d fb04 	ldr.w	pc, [sp], #4
    8108:	1fff8f9c 	.word	0x1fff8f9c

0000810c <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    810c:	b500      	push	{lr}
    810e:	b085      	sub	sp, #20
    8110:	9001      	str	r0, [sp, #4]
    8112:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    8114:	2300      	movs	r3, #0
    8116:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    8118:	9b01      	ldr	r3, [sp, #4]
    811a:	789b      	ldrb	r3, [r3, #2]
    811c:	4618      	mov	r0, r3
    811e:	f001 fe87 	bl	9e30 <FlexCAN_Ip_GetErrorStatus>
    8122:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    8124:	9b03      	ldr	r3, [sp, #12]
    8126:	091b      	lsrs	r3, r3, #4
    8128:	b2db      	uxtb	r3, r3
    812a:	f003 0303 	and.w	r3, r3, #3
    812e:	b2da      	uxtb	r2, r3
    8130:	9b00      	ldr	r3, [sp, #0]
    8132:	701a      	strb	r2, [r3, #0]
    return E_OK;
    8134:	2300      	movs	r3, #0
}
    8136:	4618      	mov	r0, r3
    8138:	b005      	add	sp, #20
    813a:	f85d fb04 	ldr.w	pc, [sp], #4

0000813e <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    813e:	b500      	push	{lr}
    8140:	b083      	sub	sp, #12
    8142:	9001      	str	r0, [sp, #4]
    8144:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    8146:	9b01      	ldr	r3, [sp, #4]
    8148:	789b      	ldrb	r3, [r3, #2]
    814a:	4618      	mov	r0, r3
    814c:	f001 fe82 	bl	9e54 <FlexCAN_Ip_GetControllerTxErrorCounter>
    8150:	4603      	mov	r3, r0
    8152:	461a      	mov	r2, r3
    8154:	9b00      	ldr	r3, [sp, #0]
    8156:	701a      	strb	r2, [r3, #0]
     return E_OK;
    8158:	2300      	movs	r3, #0
}
    815a:	4618      	mov	r0, r3
    815c:	b003      	add	sp, #12
    815e:	f85d fb04 	ldr.w	pc, [sp], #4

00008162 <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    8162:	b500      	push	{lr}
    8164:	b083      	sub	sp, #12
    8166:	9001      	str	r0, [sp, #4]
    8168:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    816a:	9b01      	ldr	r3, [sp, #4]
    816c:	789b      	ldrb	r3, [r3, #2]
    816e:	4618      	mov	r0, r3
    8170:	f001 fe82 	bl	9e78 <FlexCAN_Ip_GetControllerRxErrorCounter>
    8174:	4603      	mov	r3, r0
    8176:	461a      	mov	r2, r3
    8178:	9b00      	ldr	r3, [sp, #0]
    817a:	701a      	strb	r2, [r3, #0]
    return E_OK;
    817c:	2300      	movs	r3, #0
}
    817e:	4618      	mov	r0, r3
    8180:	b003      	add	sp, #12
    8182:	f85d fb04 	ldr.w	pc, [sp], #4

00008186 <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    8186:	b510      	push	{r4, lr}
    8188:	b08c      	sub	sp, #48	; 0x30
    818a:	9005      	str	r0, [sp, #20]
    818c:	9104      	str	r1, [sp, #16]
    818e:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    8190:	2301      	movs	r3, #1
    8192:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    8194:	2300      	movs	r3, #0
    8196:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    819a:	2300      	movs	r3, #0
    819c:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    819e:	2300      	movs	r3, #0
    81a0:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    81a2:	2300      	movs	r3, #0
    81a4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    81a8:	2300      	movs	r3, #0
    81aa:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    81ae:	2300      	movs	r3, #0
    81b0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    81b4:	2300      	movs	r3, #0
    81b6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    81ba:	2300      	movs	r3, #0
    81bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    81c0:	9b04      	ldr	r3, [sp, #16]
    81c2:	699b      	ldr	r3, [r3, #24]
    81c4:	2b03      	cmp	r3, #3
    81c6:	d177      	bne.n	82b8 <Can_43_FLEXCAN_Ipw_Write+0x132>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    81c8:	9b03      	ldr	r3, [sp, #12]
    81ca:	681b      	ldr	r3, [r3, #0]
    81cc:	0fdb      	lsrs	r3, r3, #31
    81ce:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    81d0:	9b04      	ldr	r3, [sp, #16]
    81d2:	7c1a      	ldrb	r2, [r3, #16]
    81d4:	9b03      	ldr	r3, [sp, #12]
    81d6:	799b      	ldrb	r3, [r3, #6]
    81d8:	429a      	cmp	r2, r3
    81da:	d803      	bhi.n	81e4 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    81dc:	9b04      	ldr	r3, [sp, #16]
    81de:	7c1b      	ldrb	r3, [r3, #16]
    81e0:	9307      	str	r3, [sp, #28]
    81e2:	e002      	b.n	81ea <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    81e4:	9b03      	ldr	r3, [sp, #12]
    81e6:	799b      	ldrb	r3, [r3, #6]
    81e8:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    81ea:	9b04      	ldr	r3, [sp, #16]
    81ec:	7c5b      	ldrb	r3, [r3, #17]
    81ee:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    81f2:	9b03      	ldr	r3, [sp, #12]
    81f4:	681b      	ldr	r3, [r3, #0]
    81f6:	0f9b      	lsrs	r3, r3, #30
    81f8:	f003 0301 	and.w	r3, r3, #1
    81fc:	2b00      	cmp	r3, #0
    81fe:	bf14      	ite	ne
    8200:	2301      	movne	r3, #1
    8202:	2300      	moveq	r3, #0
    8204:	b2db      	uxtb	r3, r3
    8206:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    820a:	9b05      	ldr	r3, [sp, #20]
    820c:	6a1a      	ldr	r2, [r3, #32]
    820e:	9b05      	ldr	r3, [sp, #20]
    8210:	785b      	ldrb	r3, [r3, #1]
    8212:	4619      	mov	r1, r3
    8214:	4b31      	ldr	r3, [pc, #196]	; (82dc <Can_43_FLEXCAN_Ipw_Write+0x156>)
    8216:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    821a:	4619      	mov	r1, r3
    821c:	2316      	movs	r3, #22
    821e:	fb01 f303 	mul.w	r3, r1, r3
    8222:	4413      	add	r3, r2
    8224:	781b      	ldrb	r3, [r3, #0]
    8226:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    #endif
#endif
        DataInfo.is_remote = FALSE;
    822a:	2300      	movs	r3, #0
    822c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    8230:	9b04      	ldr	r3, [sp, #16]
    8232:	7b1b      	ldrb	r3, [r3, #12]
    8234:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    8238:	9b05      	ldr	r3, [sp, #20]
    823a:	7898      	ldrb	r0, [r3, #2]
    823c:	9b04      	ldr	r3, [sp, #16]
    823e:	7f1a      	ldrb	r2, [r3, #28]
    8240:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8244:	4413      	add	r3, r2
    8246:	b2db      	uxtb	r3, r3
    8248:	4619      	mov	r1, r3
    824a:	f001 fcdf 	bl	9c0c <FlexCAN_Ip_GetTransferStatus>
    824e:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    8250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8252:	2b00      	cmp	r3, #0
    8254:	d122      	bne.n	829c <Can_43_FLEXCAN_Ipw_Write+0x116>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    8256:	9b05      	ldr	r3, [sp, #20]
    8258:	785b      	ldrb	r3, [r3, #1]
    825a:	461c      	mov	r4, r3
    825c:	9b04      	ldr	r3, [sp, #16]
    825e:	7f1b      	ldrb	r3, [r3, #28]
    8260:	461a      	mov	r2, r3
    8262:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8266:	4413      	add	r3, r2
    8268:	9a03      	ldr	r2, [sp, #12]
    826a:	8890      	ldrh	r0, [r2, #4]
    826c:	491c      	ldr	r1, [pc, #112]	; (82e0 <Can_43_FLEXCAN_Ipw_Write+0x15a>)
    826e:	0162      	lsls	r2, r4, #5
    8270:	4413      	add	r3, r2
    8272:	4602      	mov	r2, r0
    8274:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    8278:	9b05      	ldr	r3, [sp, #20]
    827a:	7898      	ldrb	r0, [r3, #2]
    827c:	9b04      	ldr	r3, [sp, #16]
    827e:	7f1a      	ldrb	r2, [r3, #28]
    8280:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8284:	4413      	add	r3, r2
    8286:	b2d9      	uxtb	r1, r3
    8288:	9b03      	ldr	r3, [sp, #12]
    828a:	681c      	ldr	r4, [r3, #0]
    828c:	9b03      	ldr	r3, [sp, #12]
    828e:	689b      	ldr	r3, [r3, #8]
    8290:	aa06      	add	r2, sp, #24
    8292:	9300      	str	r3, [sp, #0]
    8294:	4623      	mov	r3, r4
    8296:	f001 fa4d 	bl	9734 <FlexCAN_Ip_Send>
    829a:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    829c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    82a0:	3301      	adds	r3, #1
    82a2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    82a6:	9b04      	ldr	r3, [sp, #16]
    82a8:	7b9b      	ldrb	r3, [r3, #14]
    82aa:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    82ae:	429a      	cmp	r2, r3
    82b0:	d202      	bcs.n	82b8 <Can_43_FLEXCAN_Ipw_Write+0x132>
    82b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82b4:	2b02      	cmp	r3, #2
    82b6:	d0bf      	beq.n	8238 <Can_43_FLEXCAN_Ipw_Write+0xb2>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    82b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82ba:	2b00      	cmp	r3, #0
    82bc:	d004      	beq.n	82c8 <Can_43_FLEXCAN_Ipw_Write+0x142>
    82be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82c0:	2b02      	cmp	r3, #2
    82c2:	d001      	beq.n	82c8 <Can_43_FLEXCAN_Ipw_Write+0x142>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    82c4:	2301      	movs	r3, #1
    82c6:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    82c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82ca:	2b02      	cmp	r3, #2
    82cc:	d002      	beq.n	82d4 <Can_43_FLEXCAN_Ipw_Write+0x14e>
    82ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    82d0:	b2db      	uxtb	r3, r3
    82d2:	e000      	b.n	82d6 <Can_43_FLEXCAN_Ipw_Write+0x150>
    82d4:	2302      	movs	r3, #2
}
    82d6:	4618      	mov	r0, r3
    82d8:	b00c      	add	sp, #48	; 0x30
    82da:	bd10      	pop	{r4, pc}
    82dc:	1fff8f98 	.word	0x1fff8f98
    82e0:	1fff8f18 	.word	0x1fff8f18

000082e4 <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    82e4:	b500      	push	{lr}
    82e6:	b089      	sub	sp, #36	; 0x24
    82e8:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    82ea:	2300      	movs	r3, #0
    82ec:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    82f0:	9b01      	ldr	r3, [sp, #4]
    82f2:	789b      	ldrb	r3, [r3, #2]
    82f4:	2101      	movs	r1, #1
    82f6:	4618      	mov	r0, r3
    82f8:	f002 fa42 	bl	a780 <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    82fc:	2300      	movs	r3, #0
    82fe:	f88d 301f 	strb.w	r3, [sp, #31]
    8302:	e03a      	b.n	837a <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    8304:	9b01      	ldr	r3, [sp, #4]
    8306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8308:	f89d 301f 	ldrb.w	r3, [sp, #31]
    830c:	009b      	lsls	r3, r3, #2
    830e:	4413      	add	r3, r2
    8310:	681b      	ldr	r3, [r3, #0]
    8312:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    8314:	9b06      	ldr	r3, [sp, #24]
    8316:	699b      	ldr	r3, [r3, #24]
    8318:	2b00      	cmp	r3, #0
    831a:	d121      	bne.n	8360 <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    831c:	2300      	movs	r3, #0
    831e:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    8322:	2300      	movs	r3, #0
    8324:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    8326:	9b06      	ldr	r3, [sp, #24]
    8328:	689b      	ldr	r3, [r3, #8]
    832a:	2b00      	cmp	r3, #0
    832c:	d002      	beq.n	8334 <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    832e:	2301      	movs	r3, #1
    8330:	9302      	str	r3, [sp, #8]
    8332:	e001      	b.n	8338 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    8334:	2300      	movs	r3, #0
    8336:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    8338:	9b01      	ldr	r3, [sp, #4]
    833a:	7898      	ldrb	r0, [r3, #2]
    833c:	9b06      	ldr	r3, [sp, #24]
    833e:	7f19      	ldrb	r1, [r3, #28]
    8340:	9b06      	ldr	r3, [sp, #24]
    8342:	695b      	ldr	r3, [r3, #20]
    8344:	681b      	ldr	r3, [r3, #0]
    8346:	aa02      	add	r2, sp, #8
    8348:	f001 fa40 	bl	97cc <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    834c:	9b01      	ldr	r3, [sp, #4]
    834e:	7898      	ldrb	r0, [r3, #2]
    8350:	9b06      	ldr	r3, [sp, #24]
    8352:	7f19      	ldrb	r1, [r3, #28]
    8354:	9b06      	ldr	r3, [sp, #24]
    8356:	695b      	ldr	r3, [r3, #20]
    8358:	685b      	ldr	r3, [r3, #4]
    835a:	461a      	mov	r2, r3
    835c:	f001 ffc8 	bl	a2f0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    8360:	9b06      	ldr	r3, [sp, #24]
    8362:	699b      	ldr	r3, [r3, #24]
    8364:	2b01      	cmp	r3, #1
    8366:	d103      	bne.n	8370 <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    8368:	9906      	ldr	r1, [sp, #24]
    836a:	9801      	ldr	r0, [sp, #4]
    836c:	f7fe ffab 	bl	72c6 <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8370:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8374:	3301      	adds	r3, #1
    8376:	f88d 301f 	strb.w	r3, [sp, #31]
    837a:	9b01      	ldr	r3, [sp, #4]
    837c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    8380:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8384:	429a      	cmp	r2, r3
    8386:	d3bd      	bcc.n	8304 <Can_Ipw_InitRx+0x20>
        }
    }
}
    8388:	bf00      	nop
    838a:	bf00      	nop
    838c:	b009      	add	sp, #36	; 0x24
    838e:	f85d fb04 	ldr.w	pc, [sp], #4

00008392 <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    8392:	b500      	push	{lr}
    8394:	b083      	sub	sp, #12
    8396:	9001      	str	r0, [sp, #4]
    8398:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    839a:	9b00      	ldr	r3, [sp, #0]
    839c:	681b      	ldr	r3, [r3, #0]
    839e:	2b01      	cmp	r3, #1
    83a0:	d114      	bne.n	83cc <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    83a2:	9b01      	ldr	r3, [sp, #4]
    83a4:	789b      	ldrb	r3, [r3, #2]
    83a6:	4618      	mov	r0, r3
    83a8:	f002 f994 	bl	a6d4 <FlexCAN_Ip_GetStartMode_Privileged>
    83ac:	4603      	mov	r3, r0
    83ae:	f083 0301 	eor.w	r3, r3, #1
    83b2:	b2db      	uxtb	r3, r3
    83b4:	2b00      	cmp	r3, #0
    83b6:	d01e      	beq.n	83f6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    83b8:	9b00      	ldr	r3, [sp, #0]
    83ba:	2202      	movs	r2, #2
    83bc:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    83be:	9b01      	ldr	r3, [sp, #4]
    83c0:	781b      	ldrb	r3, [r3, #0]
    83c2:	2102      	movs	r1, #2
    83c4:	4618      	mov	r0, r3
    83c6:	f7f8 faa0 	bl	90a <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    83ca:	e014      	b.n	83f6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    83cc:	9b00      	ldr	r3, [sp, #0]
    83ce:	681b      	ldr	r3, [r3, #0]
    83d0:	2b02      	cmp	r3, #2
    83d2:	d110      	bne.n	83f6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    83d4:	9b01      	ldr	r3, [sp, #4]
    83d6:	789b      	ldrb	r3, [r3, #2]
    83d8:	4618      	mov	r0, r3
    83da:	f002 f97b 	bl	a6d4 <FlexCAN_Ip_GetStartMode_Privileged>
    83de:	4603      	mov	r3, r0
    83e0:	2b00      	cmp	r3, #0
    83e2:	d008      	beq.n	83f6 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    83e4:	9b00      	ldr	r3, [sp, #0]
    83e6:	2201      	movs	r2, #1
    83e8:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    83ea:	9b01      	ldr	r3, [sp, #4]
    83ec:	781b      	ldrb	r3, [r3, #0]
    83ee:	2101      	movs	r1, #1
    83f0:	4618      	mov	r0, r3
    83f2:	f7f8 fa8a 	bl	90a <CanIf_ControllerModeIndication>
}
    83f6:	bf00      	nop
    83f8:	b003      	add	sp, #12
    83fa:	f85d fb04 	ldr.w	pc, [sp], #4

000083fe <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    83fe:	b500      	push	{lr}
    8400:	b085      	sub	sp, #20
    8402:	9003      	str	r0, [sp, #12]
    8404:	9102      	str	r1, [sp, #8]
    8406:	9300      	str	r3, [sp, #0]
    8408:	4613      	mov	r3, r2
    840a:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    840e:	9b00      	ldr	r3, [sp, #0]
    8410:	2b03      	cmp	r3, #3
    8412:	d009      	beq.n	8428 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    8414:	9b00      	ldr	r3, [sp, #0]
    8416:	2b03      	cmp	r3, #3
    8418:	d821      	bhi.n	845e <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    841a:	9b00      	ldr	r3, [sp, #0]
    841c:	2b00      	cmp	r3, #0
    841e:	d00c      	beq.n	843a <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    8420:	9b00      	ldr	r3, [sp, #0]
    8422:	2b01      	cmp	r3, #1
    8424:	d012      	beq.n	844c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    8426:	e01a      	b.n	845e <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    8428:	9b02      	ldr	r3, [sp, #8]
    842a:	691b      	ldr	r3, [r3, #16]
    842c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8430:	4619      	mov	r1, r3
    8432:	9803      	ldr	r0, [sp, #12]
    8434:	f7ff fa24 	bl	7880 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    8438:	e012      	b.n	8460 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    843a:	9b02      	ldr	r3, [sp, #8]
    843c:	691b      	ldr	r3, [r3, #16]
    843e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8442:	4619      	mov	r1, r3
    8444:	9803      	ldr	r0, [sp, #12]
    8446:	f7ff fa67 	bl	7918 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    844a:	e009      	b.n	8460 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    844c:	9b02      	ldr	r3, [sp, #8]
    844e:	691b      	ldr	r3, [r3, #16]
    8450:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8454:	4619      	mov	r1, r3
    8456:	9803      	ldr	r0, [sp, #12]
    8458:	f7ff fa5e 	bl	7918 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    845c:	e000      	b.n	8460 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    845e:	bf00      	nop
            }
        }
    }
    8460:	bf00      	nop
    8462:	b005      	add	sp, #20
    8464:	f85d fb04 	ldr.w	pc, [sp], #4

00008468 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    8468:	b500      	push	{lr}
    846a:	b085      	sub	sp, #20
    846c:	9102      	str	r1, [sp, #8]
    846e:	9201      	str	r2, [sp, #4]
    8470:	9300      	str	r3, [sp, #0]
    8472:	4603      	mov	r3, r0
    8474:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    8478:	9a00      	ldr	r2, [sp, #0]
    847a:	9b01      	ldr	r3, [sp, #4]
    847c:	011b      	lsls	r3, r3, #4
    847e:	4413      	add	r3, r2
    8480:	3308      	adds	r3, #8
    8482:	781b      	ldrb	r3, [r3, #0]
    8484:	f083 0301 	eor.w	r3, r3, #1
    8488:	b2db      	uxtb	r3, r3
    848a:	2b00      	cmp	r3, #0
    848c:	d03b      	beq.n	8506 <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    848e:	9b02      	ldr	r3, [sp, #8]
    8490:	2b04      	cmp	r3, #4
    8492:	d83a      	bhi.n	850a <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    8494:	a201      	add	r2, pc, #4	; (adr r2, 849c <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    8496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    849a:	bf00      	nop
    849c:	000084c3 	.word	0x000084c3
    84a0:	000084d5 	.word	0x000084d5
    84a4:	000084e7 	.word	0x000084e7
    84a8:	000084f7 	.word	0x000084f7
    84ac:	000084b1 	.word	0x000084b1
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    84b0:	9b01      	ldr	r3, [sp, #4]
    84b2:	b2d9      	uxtb	r1, r3
    84b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84b8:	2203      	movs	r2, #3
    84ba:	4618      	mov	r0, r3
    84bc:	f7fe fe1e 	bl	70fc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    84c0:	e024      	b.n	850c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    84c2:	9b01      	ldr	r3, [sp, #4]
    84c4:	b2d9      	uxtb	r1, r3
    84c6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84ca:	2200      	movs	r2, #0
    84cc:	4618      	mov	r0, r3
    84ce:	f7fe fe15 	bl	70fc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    84d2:	e01b      	b.n	850c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    84d4:	9b01      	ldr	r3, [sp, #4]
    84d6:	b2d9      	uxtb	r1, r3
    84d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84dc:	2201      	movs	r2, #1
    84de:	4618      	mov	r0, r3
    84e0:	f7fe fe0c 	bl	70fc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    84e4:	e012      	b.n	850c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    84e6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84ea:	2201      	movs	r2, #1
    84ec:	2106      	movs	r1, #6
    84ee:	4618      	mov	r0, r3
    84f0:	f7fe fe04 	bl	70fc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    84f4:	e00a      	b.n	850c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    84f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    84fa:	2201      	movs	r2, #1
    84fc:	2107      	movs	r1, #7
    84fe:	4618      	mov	r0, r3
    8500:	f7fe fdfc 	bl	70fc <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8504:	e002      	b.n	850c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    8506:	bf00      	nop
    8508:	e000      	b.n	850c <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    850a:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    850c:	bf00      	nop
    850e:	b005      	add	sp, #20
    8510:	f85d fb04 	ldr.w	pc, [sp], #4

00008514 <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    8514:	b500      	push	{lr}
    8516:	b085      	sub	sp, #20
    8518:	9102      	str	r1, [sp, #8]
    851a:	9201      	str	r2, [sp, #4]
    851c:	9300      	str	r3, [sp, #0]
    851e:	4603      	mov	r3, r0
    8520:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    8524:	9b02      	ldr	r3, [sp, #8]
    8526:	2b07      	cmp	r3, #7
    8528:	d105      	bne.n	8536 <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    852a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    852e:	4618      	mov	r0, r3
    8530:	f7fe fe26 	bl	7180 <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    8534:	e000      	b.n	8538 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    8536:	bf00      	nop
        }
    }
}
    8538:	bf00      	nop
    853a:	b005      	add	sp, #20
    853c:	f85d fb04 	ldr.w	pc, [sp], #4

00008540 <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    8540:	b082      	sub	sp, #8
    8542:	9001      	str	r0, [sp, #4]
    8544:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    8546:	9b01      	ldr	r3, [sp, #4]
    8548:	9a00      	ldr	r2, [sp, #0]
    854a:	649a      	str	r2, [r3, #72]	; 0x48
}
    854c:	bf00      	nop
    854e:	b002      	add	sp, #8
    8550:	4770      	bx	lr

00008552 <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    8552:	b084      	sub	sp, #16
    8554:	9001      	str	r0, [sp, #4]
    8556:	460b      	mov	r3, r1
    8558:	f88d 3003 	strb.w	r3, [sp, #3]
    855c:	4613      	mov	r3, r2
    855e:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    8562:	9b01      	ldr	r3, [sp, #4]
    8564:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8568:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    856a:	9b03      	ldr	r3, [sp, #12]
    856c:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    8570:	9303      	str	r3, [sp, #12]

    if (enable)
    8572:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8576:	2b00      	cmp	r3, #0
    8578:	d00b      	beq.n	8592 <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    857a:	9b03      	ldr	r3, [sp, #12]
    857c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8580:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    8582:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8586:	021b      	lsls	r3, r3, #8
    8588:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    858c:	9a03      	ldr	r2, [sp, #12]
    858e:	4313      	orrs	r3, r2
    8590:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    8592:	9b01      	ldr	r3, [sp, #4]
    8594:	9a03      	ldr	r2, [sp, #12]
    8596:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    859a:	bf00      	nop
    859c:	b004      	add	sp, #16
    859e:	4770      	bx	lr

000085a0 <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    85a0:	b082      	sub	sp, #8
    85a2:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    85a4:	9b01      	ldr	r3, [sp, #4]
    85a6:	681b      	ldr	r3, [r3, #0]
    85a8:	43db      	mvns	r3, r3
    85aa:	0fdb      	lsrs	r3, r3, #31
    85ac:	b2db      	uxtb	r3, r3
}
    85ae:	4618      	mov	r0, r3
    85b0:	b002      	add	sp, #8
    85b2:	4770      	bx	lr

000085b4 <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    85b4:	b082      	sub	sp, #8
    85b6:	9001      	str	r0, [sp, #4]
    85b8:	460b      	mov	r3, r1
    85ba:	f88d 3003 	strb.w	r3, [sp, #3]
    85be:	4613      	mov	r3, r2
    85c0:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    85c4:	9b01      	ldr	r3, [sp, #4]
    85c6:	681b      	ldr	r3, [r3, #0]
    85c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    85cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
    85d0:	2a00      	cmp	r2, #0
    85d2:	d002      	beq.n	85da <FlexCAN_SetFDEnabled+0x26>
    85d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    85d8:	e000      	b.n	85dc <FlexCAN_SetFDEnabled+0x28>
    85da:	2200      	movs	r2, #0
    85dc:	431a      	orrs	r2, r3
    85de:	9b01      	ldr	r3, [sp, #4]
    85e0:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    85e2:	9b01      	ldr	r3, [sp, #4]
    85e4:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    85e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    85ec:	f89d 2002 	ldrb.w	r2, [sp, #2]
    85f0:	2a00      	cmp	r2, #0
    85f2:	d002      	beq.n	85fa <FlexCAN_SetFDEnabled+0x46>
    85f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    85f8:	e000      	b.n	85fc <FlexCAN_SetFDEnabled+0x48>
    85fa:	2200      	movs	r2, #0
    85fc:	431a      	orrs	r2, r3
    85fe:	9b01      	ldr	r3, [sp, #4]
    8600:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    8604:	9b01      	ldr	r3, [sp, #4]
    8606:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    860a:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    860e:	9b01      	ldr	r3, [sp, #4]
    8610:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    8614:	bf00      	nop
    8616:	b002      	add	sp, #8
    8618:	4770      	bx	lr

0000861a <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    861a:	b082      	sub	sp, #8
    861c:	9001      	str	r0, [sp, #4]
    861e:	460b      	mov	r3, r1
    8620:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    8624:	9b01      	ldr	r3, [sp, #4]
    8626:	685b      	ldr	r3, [r3, #4]
    8628:	f023 0308 	bic.w	r3, r3, #8
    862c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8630:	2a00      	cmp	r2, #0
    8632:	d001      	beq.n	8638 <FlexCAN_SetListenOnlyMode+0x1e>
    8634:	2208      	movs	r2, #8
    8636:	e000      	b.n	863a <FlexCAN_SetListenOnlyMode+0x20>
    8638:	2200      	movs	r2, #0
    863a:	431a      	orrs	r2, r3
    863c:	9b01      	ldr	r3, [sp, #4]
    863e:	605a      	str	r2, [r3, #4]
}
    8640:	bf00      	nop
    8642:	b002      	add	sp, #8
    8644:	4770      	bx	lr

00008646 <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    8646:	b082      	sub	sp, #8
    8648:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    864a:	9b01      	ldr	r3, [sp, #4]
    864c:	689b      	ldr	r3, [r3, #8]
}
    864e:	bf00      	nop
    8650:	b002      	add	sp, #8
    8652:	4770      	bx	lr

00008654 <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    8654:	b084      	sub	sp, #16
    8656:	9001      	str	r0, [sp, #4]
    8658:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    865a:	9b00      	ldr	r3, [sp, #0]
    865c:	f003 031f 	and.w	r3, r3, #31
    8660:	2201      	movs	r2, #1
    8662:	fa02 f303 	lsl.w	r3, r2, r3
    8666:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    8668:	9b00      	ldr	r3, [sp, #0]
    866a:	2b1f      	cmp	r3, #31
    866c:	d802      	bhi.n	8674 <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    866e:	9b01      	ldr	r3, [sp, #4]
    8670:	9a03      	ldr	r2, [sp, #12]
    8672:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    8674:	bf00      	nop
    8676:	b004      	add	sp, #16
    8678:	4770      	bx	lr

0000867a <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    867a:	b084      	sub	sp, #16
    867c:	9001      	str	r0, [sp, #4]
    867e:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    8680:	2300      	movs	r3, #0
    8682:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    8684:	9b00      	ldr	r3, [sp, #0]
    8686:	2b1f      	cmp	r3, #31
    8688:	d80e      	bhi.n	86a8 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    868a:	9b01      	ldr	r3, [sp, #4]
    868c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    868e:	9b00      	ldr	r3, [sp, #0]
    8690:	f003 031f 	and.w	r3, r3, #31
    8694:	2101      	movs	r1, #1
    8696:	fa01 f303 	lsl.w	r3, r1, r3
    869a:	401a      	ands	r2, r3
    869c:	9b00      	ldr	r3, [sp, #0]
    869e:	f003 031f 	and.w	r3, r3, #31
    86a2:	fa22 f303 	lsr.w	r3, r2, r3
    86a6:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    86a8:	9b03      	ldr	r3, [sp, #12]
    86aa:	b2db      	uxtb	r3, r3
}
    86ac:	4618      	mov	r0, r3
    86ae:	b004      	add	sp, #16
    86b0:	4770      	bx	lr

000086b2 <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    86b2:	b082      	sub	sp, #8
    86b4:	9001      	str	r0, [sp, #4]
    86b6:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    86b8:	9b01      	ldr	r3, [sp, #4]
    86ba:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    86be:	4b15      	ldr	r3, [pc, #84]	; (8714 <FlexCAN_SetFDTimeSegments+0x62>)
    86c0:	4013      	ands	r3, r2
    86c2:	9a01      	ldr	r2, [sp, #4]
    86c4:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    86c8:	9b01      	ldr	r3, [sp, #4]
    86ca:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    86ce:	9b00      	ldr	r3, [sp, #0]
    86d0:	681b      	ldr	r3, [r3, #0]
    86d2:	029b      	lsls	r3, r3, #10
    86d4:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    86d8:	9b00      	ldr	r3, [sp, #0]
    86da:	689b      	ldr	r3, [r3, #8]
    86dc:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    86e0:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    86e2:	9b00      	ldr	r3, [sp, #0]
    86e4:	685b      	ldr	r3, [r3, #4]
    86e6:	015b      	lsls	r3, r3, #5
    86e8:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    86ea:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    86ec:	9b00      	ldr	r3, [sp, #0]
    86ee:	68db      	ldr	r3, [r3, #12]
    86f0:	0518      	lsls	r0, r3, #20
    86f2:	4b09      	ldr	r3, [pc, #36]	; (8718 <FlexCAN_SetFDTimeSegments+0x66>)
    86f4:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    86f6:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    86f8:	9b00      	ldr	r3, [sp, #0]
    86fa:	691b      	ldr	r3, [r3, #16]
    86fc:	041b      	lsls	r3, r3, #16
    86fe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    8702:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    8704:	431a      	orrs	r2, r3
    8706:	9b01      	ldr	r3, [sp, #4]
    8708:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    870c:	bf00      	nop
    870e:	b002      	add	sp, #8
    8710:	4770      	bx	lr
    8712:	bf00      	nop
    8714:	c0088318 	.word	0xc0088318
    8718:	3ff00000 	.word	0x3ff00000

0000871c <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    871c:	b082      	sub	sp, #8
    871e:	9001      	str	r0, [sp, #4]
    8720:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    8722:	9b01      	ldr	r3, [sp, #4]
    8724:	685a      	ldr	r2, [r3, #4]
    8726:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    872a:	4013      	ands	r3, r2
    872c:	9a01      	ldr	r2, [sp, #4]
    872e:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    8730:	9b01      	ldr	r3, [sp, #4]
    8732:	685a      	ldr	r2, [r3, #4]
    8734:	9b00      	ldr	r3, [sp, #0]
    8736:	681b      	ldr	r3, [r3, #0]
    8738:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    873c:	9b00      	ldr	r3, [sp, #0]
    873e:	689b      	ldr	r3, [r3, #8]
    8740:	041b      	lsls	r3, r3, #16
    8742:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    8746:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    8748:	9b00      	ldr	r3, [sp, #0]
    874a:	685b      	ldr	r3, [r3, #4]
    874c:	04db      	lsls	r3, r3, #19
    874e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    8752:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    8754:	9b00      	ldr	r3, [sp, #0]
    8756:	68db      	ldr	r3, [r3, #12]
    8758:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    875a:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    875c:	9b00      	ldr	r3, [sp, #0]
    875e:	691b      	ldr	r3, [r3, #16]
    8760:	059b      	lsls	r3, r3, #22
    8762:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    8766:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    8768:	431a      	orrs	r2, r3
    876a:	9b01      	ldr	r3, [sp, #4]
    876c:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    876e:	bf00      	nop
    8770:	b002      	add	sp, #8
    8772:	4770      	bx	lr

00008774 <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8774:	b082      	sub	sp, #8
    8776:	9001      	str	r0, [sp, #4]
    8778:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    877a:	9b01      	ldr	r3, [sp, #4]
    877c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    877e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    8782:	9b01      	ldr	r3, [sp, #4]
    8784:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    8786:	9b01      	ldr	r3, [sp, #4]
    8788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    878a:	9b00      	ldr	r3, [sp, #0]
    878c:	681b      	ldr	r3, [r3, #0]
    878e:	029b      	lsls	r3, r3, #10
    8790:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    8792:	9b00      	ldr	r3, [sp, #0]
    8794:	689b      	ldr	r3, [r3, #8]
    8796:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    879a:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    879c:	9b00      	ldr	r3, [sp, #0]
    879e:	685b      	ldr	r3, [r3, #4]
    87a0:	015b      	lsls	r3, r3, #5
    87a2:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    87a6:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    87a8:	9b00      	ldr	r3, [sp, #0]
    87aa:	68db      	ldr	r3, [r3, #12]
    87ac:	0558      	lsls	r0, r3, #21
    87ae:	4b07      	ldr	r3, [pc, #28]	; (87cc <FlexCAN_SetExtendedTimeSegments+0x58>)
    87b0:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    87b2:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    87b4:	9b00      	ldr	r3, [sp, #0]
    87b6:	691b      	ldr	r3, [r3, #16]
    87b8:	041b      	lsls	r3, r3, #16
    87ba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    87be:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    87c0:	431a      	orrs	r2, r3
    87c2:	9b01      	ldr	r3, [sp, #4]
    87c4:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    87c6:	bf00      	nop
    87c8:	b002      	add	sp, #8
    87ca:	4770      	bx	lr
    87cc:	7fe00000 	.word	0x7fe00000

000087d0 <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    87d0:	b082      	sub	sp, #8
    87d2:	9001      	str	r0, [sp, #4]
    87d4:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    87d6:	9b01      	ldr	r3, [sp, #4]
    87d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    87da:	0d5b      	lsrs	r3, r3, #21
    87dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
    87e0:	9b00      	ldr	r3, [sp, #0]
    87e2:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    87e4:	9b01      	ldr	r3, [sp, #4]
    87e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    87e8:	0a9b      	lsrs	r3, r3, #10
    87ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    87ee:	9b00      	ldr	r3, [sp, #0]
    87f0:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    87f2:	9b01      	ldr	r3, [sp, #4]
    87f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    87f6:	095b      	lsrs	r3, r3, #5
    87f8:	f003 021f 	and.w	r2, r3, #31
    87fc:	9b00      	ldr	r3, [sp, #0]
    87fe:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    8800:	9b01      	ldr	r3, [sp, #4]
    8802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8804:	f003 021f 	and.w	r2, r3, #31
    8808:	9b00      	ldr	r3, [sp, #0]
    880a:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    880c:	9b01      	ldr	r3, [sp, #4]
    880e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8810:	0c1b      	lsrs	r3, r3, #16
    8812:	f003 021f 	and.w	r2, r3, #31
    8816:	9b00      	ldr	r3, [sp, #0]
    8818:	611a      	str	r2, [r3, #16]
}
    881a:	bf00      	nop
    881c:	b002      	add	sp, #8
    881e:	4770      	bx	lr

00008820 <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    8820:	b082      	sub	sp, #8
    8822:	9001      	str	r0, [sp, #4]
    8824:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    8826:	9b01      	ldr	r3, [sp, #4]
    8828:	685b      	ldr	r3, [r3, #4]
    882a:	0e1b      	lsrs	r3, r3, #24
    882c:	b2da      	uxtb	r2, r3
    882e:	9b00      	ldr	r3, [sp, #0]
    8830:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    8832:	9b01      	ldr	r3, [sp, #4]
    8834:	685b      	ldr	r3, [r3, #4]
    8836:	f003 0207 	and.w	r2, r3, #7
    883a:	9b00      	ldr	r3, [sp, #0]
    883c:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    883e:	9b01      	ldr	r3, [sp, #4]
    8840:	685b      	ldr	r3, [r3, #4]
    8842:	0cdb      	lsrs	r3, r3, #19
    8844:	f003 0207 	and.w	r2, r3, #7
    8848:	9b00      	ldr	r3, [sp, #0]
    884a:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    884c:	9b01      	ldr	r3, [sp, #4]
    884e:	685b      	ldr	r3, [r3, #4]
    8850:	0c1b      	lsrs	r3, r3, #16
    8852:	f003 0207 	and.w	r2, r3, #7
    8856:	9b00      	ldr	r3, [sp, #0]
    8858:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    885a:	9b01      	ldr	r3, [sp, #4]
    885c:	685b      	ldr	r3, [r3, #4]
    885e:	0d9b      	lsrs	r3, r3, #22
    8860:	f003 0203 	and.w	r2, r3, #3
    8864:	9b00      	ldr	r3, [sp, #0]
    8866:	611a      	str	r2, [r3, #16]
}
    8868:	bf00      	nop
    886a:	b002      	add	sp, #8
    886c:	4770      	bx	lr

0000886e <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    886e:	b082      	sub	sp, #8
    8870:	9001      	str	r0, [sp, #4]
    8872:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    8874:	9b01      	ldr	r3, [sp, #4]
    8876:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    887a:	0d1b      	lsrs	r3, r3, #20
    887c:	f3c3 0209 	ubfx	r2, r3, #0, #10
    8880:	9b00      	ldr	r3, [sp, #0]
    8882:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    8884:	9b01      	ldr	r3, [sp, #4]
    8886:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    888a:	0a9b      	lsrs	r3, r3, #10
    888c:	f003 021f 	and.w	r2, r3, #31
    8890:	9b00      	ldr	r3, [sp, #0]
    8892:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    8894:	9b01      	ldr	r3, [sp, #4]
    8896:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    889a:	095b      	lsrs	r3, r3, #5
    889c:	f003 0207 	and.w	r2, r3, #7
    88a0:	9b00      	ldr	r3, [sp, #0]
    88a2:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    88a4:	9b01      	ldr	r3, [sp, #4]
    88a6:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    88aa:	f003 0207 	and.w	r2, r3, #7
    88ae:	9b00      	ldr	r3, [sp, #0]
    88b0:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    88b2:	9b01      	ldr	r3, [sp, #4]
    88b4:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    88b8:	0c1b      	lsrs	r3, r3, #16
    88ba:	f003 0207 	and.w	r2, r3, #7
    88be:	9b00      	ldr	r3, [sp, #0]
    88c0:	611a      	str	r2, [r3, #16]
}
    88c2:	bf00      	nop
    88c4:	b002      	add	sp, #8
    88c6:	4770      	bx	lr

000088c8 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    88c8:	b082      	sub	sp, #8
    88ca:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    88cc:	9b01      	ldr	r3, [sp, #4]
    88ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    88d0:	0fdb      	lsrs	r3, r3, #31
    88d2:	b2db      	uxtb	r3, r3
}
    88d4:	4618      	mov	r0, r3
    88d6:	b002      	add	sp, #8
    88d8:	4770      	bx	lr

000088da <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    88da:	b082      	sub	sp, #8
    88dc:	9001      	str	r0, [sp, #4]
    88de:	460b      	mov	r3, r1
    88e0:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    88e4:	9b01      	ldr	r3, [sp, #4]
    88e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    88e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    88ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
    88f0:	2a00      	cmp	r2, #0
    88f2:	d002      	beq.n	88fa <FlexCAN_EnableExtCbt+0x20>
    88f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    88f8:	e000      	b.n	88fc <FlexCAN_EnableExtCbt+0x22>
    88fa:	2200      	movs	r2, #0
    88fc:	431a      	orrs	r2, r3
    88fe:	9b01      	ldr	r3, [sp, #4]
    8900:	651a      	str	r2, [r3, #80]	; 0x50
}
    8902:	bf00      	nop
    8904:	b002      	add	sp, #8
    8906:	4770      	bx	lr

00008908 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    8908:	b082      	sub	sp, #8
    890a:	9001      	str	r0, [sp, #4]
    890c:	460b      	mov	r3, r1
    890e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    8912:	9b01      	ldr	r3, [sp, #4]
    8914:	681b      	ldr	r3, [r3, #0]
    8916:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    891a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    891e:	2a00      	cmp	r2, #0
    8920:	d001      	beq.n	8926 <FlexCAN_SetSelfReception+0x1e>
    8922:	2200      	movs	r2, #0
    8924:	e001      	b.n	892a <FlexCAN_SetSelfReception+0x22>
    8926:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    892a:	431a      	orrs	r2, r3
    892c:	9b01      	ldr	r3, [sp, #4]
    892e:	601a      	str	r2, [r3, #0]
}
    8930:	bf00      	nop
    8932:	b002      	add	sp, #8
    8934:	4770      	bx	lr

00008936 <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    8936:	b082      	sub	sp, #8
    8938:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    893a:	9b01      	ldr	r3, [sp, #4]
    893c:	681b      	ldr	r3, [r3, #0]
    893e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    8942:	2b00      	cmp	r3, #0
    8944:	bf14      	ite	ne
    8946:	2301      	movne	r3, #1
    8948:	2300      	moveq	r3, #0
    894a:	b2db      	uxtb	r3, r3
}
    894c:	4618      	mov	r0, r3
    894e:	b002      	add	sp, #8
    8950:	4770      	bx	lr

00008952 <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    8952:	b082      	sub	sp, #8
    8954:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    8956:	9b01      	ldr	r3, [sp, #4]
    8958:	685b      	ldr	r3, [r3, #4]
    895a:	f003 0308 	and.w	r3, r3, #8
    895e:	2b00      	cmp	r3, #0
    8960:	bf14      	ite	ne
    8962:	2301      	movne	r3, #1
    8964:	2300      	moveq	r3, #0
    8966:	b2db      	uxtb	r3, r3
}
    8968:	4618      	mov	r0, r3
    896a:	b002      	add	sp, #8
    896c:	4770      	bx	lr

0000896e <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    896e:	b082      	sub	sp, #8
    8970:	4603      	mov	r3, r0
    8972:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    8976:	f89d 3007 	ldrb.w	r3, [sp, #7]
    897a:	3301      	adds	r3, #1
    897c:	00db      	lsls	r3, r3, #3
    897e:	089b      	lsrs	r3, r3, #2
    8980:	3305      	adds	r3, #5
}
    8982:	4618      	mov	r0, r3
    8984:	b002      	add	sp, #8
    8986:	4770      	bx	lr

00008988 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    8988:	b082      	sub	sp, #8
    898a:	9001      	str	r0, [sp, #4]
    898c:	460b      	mov	r3, r1
    898e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    8992:	9b01      	ldr	r3, [sp, #4]
    8994:	685b      	ldr	r3, [r3, #4]
    8996:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    899a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    899e:	2a00      	cmp	r2, #0
    89a0:	d002      	beq.n	89a8 <FlexCAN_SetClkSrc+0x20>
    89a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    89a6:	e000      	b.n	89aa <FlexCAN_SetClkSrc+0x22>
    89a8:	2200      	movs	r2, #0
    89aa:	431a      	orrs	r2, r3
    89ac:	9b01      	ldr	r3, [sp, #4]
    89ae:	605a      	str	r2, [r3, #4]
}
    89b0:	bf00      	nop
    89b2:	b002      	add	sp, #8
    89b4:	4770      	bx	lr

000089b6 <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    89b6:	b084      	sub	sp, #16
    89b8:	9001      	str	r0, [sp, #4]
    89ba:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    89bc:	2300      	movs	r3, #0
    89be:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    89c2:	9b00      	ldr	r3, [sp, #0]
    89c4:	2b1f      	cmp	r3, #31
    89c6:	d810      	bhi.n	89ea <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    89c8:	9b01      	ldr	r3, [sp, #4]
    89ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89cc:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    89ce:	9b01      	ldr	r3, [sp, #4]
    89d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    89d2:	9b02      	ldr	r3, [sp, #8]
    89d4:	401a      	ands	r2, r3
    89d6:	9b00      	ldr	r3, [sp, #0]
    89d8:	f003 031f 	and.w	r3, r3, #31
    89dc:	fa22 f303 	lsr.w	r3, r2, r3
    89e0:	b2db      	uxtb	r3, r3
    89e2:	f003 0301 	and.w	r3, r3, #1
    89e6:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    89ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    89ee:	4618      	mov	r0, r3
    89f0:	b004      	add	sp, #16
    89f2:	4770      	bx	lr

000089f4 <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    89f4:	b082      	sub	sp, #8
    89f6:	9001      	str	r0, [sp, #4]
    89f8:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    89fa:	9b01      	ldr	r3, [sp, #4]
    89fc:	9a00      	ldr	r2, [sp, #0]
    89fe:	611a      	str	r2, [r3, #16]
}
    8a00:	bf00      	nop
    8a02:	b002      	add	sp, #8
    8a04:	4770      	bx	lr

00008a06 <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    8a06:	b084      	sub	sp, #16
    8a08:	9003      	str	r0, [sp, #12]
    8a0a:	9102      	str	r1, [sp, #8]
    8a0c:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    8a0e:	9b03      	ldr	r3, [sp, #12]
    8a10:	9a02      	ldr	r2, [sp, #8]
    8a12:	f502 7208 	add.w	r2, r2, #544	; 0x220
    8a16:	9901      	ldr	r1, [sp, #4]
    8a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    8a1c:	bf00      	nop
    8a1e:	b004      	add	sp, #16
    8a20:	4770      	bx	lr

00008a22 <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    8a22:	b082      	sub	sp, #8
    8a24:	9001      	str	r0, [sp, #4]
    8a26:	460b      	mov	r3, r1
    8a28:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    8a2c:	9b01      	ldr	r3, [sp, #4]
    8a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8a30:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    8a34:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8a38:	04db      	lsls	r3, r3, #19
    8a3a:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    8a3e:	431a      	orrs	r2, r3
    8a40:	9b01      	ldr	r3, [sp, #4]
    8a42:	635a      	str	r2, [r3, #52]	; 0x34
}
    8a44:	bf00      	nop
    8a46:	b002      	add	sp, #8
    8a48:	4770      	bx	lr

00008a4a <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    8a4a:	b082      	sub	sp, #8
    8a4c:	9001      	str	r0, [sp, #4]
    8a4e:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    8a50:	9b00      	ldr	r3, [sp, #0]
    8a52:	2b00      	cmp	r3, #0
    8a54:	d106      	bne.n	8a64 <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    8a56:	9b01      	ldr	r3, [sp, #4]
    8a58:	681b      	ldr	r3, [r3, #0]
    8a5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    8a5e:	9b01      	ldr	r3, [sp, #4]
    8a60:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    8a62:	e005      	b.n	8a70 <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    8a64:	9b01      	ldr	r3, [sp, #4]
    8a66:	681b      	ldr	r3, [r3, #0]
    8a68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    8a6c:	9b01      	ldr	r3, [sp, #4]
    8a6e:	601a      	str	r2, [r3, #0]
}
    8a70:	bf00      	nop
    8a72:	b002      	add	sp, #8
    8a74:	4770      	bx	lr

00008a76 <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    8a76:	b500      	push	{lr}
    8a78:	b083      	sub	sp, #12
    8a7a:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    8a7c:	9801      	ldr	r0, [sp, #4]
    8a7e:	f002 ff85 	bl	b98c <FlexCAN_IsFDAvailable>
    8a82:	4603      	mov	r3, r0
    8a84:	2b00      	cmp	r3, #0
    8a86:	d007      	beq.n	8a98 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    8a88:	9b01      	ldr	r3, [sp, #4]
    8a8a:	2200      	movs	r2, #0
    8a8c:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    8a90:	9b01      	ldr	r3, [sp, #4]
    8a92:	4a12      	ldr	r2, [pc, #72]	; (8adc <FlexCAN_SetRegDefaultVal+0x66>)
    8a94:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    8a98:	9b01      	ldr	r3, [sp, #4]
    8a9a:	f04f 32ff 	mov.w	r2, #4294967295
    8a9e:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    8aa0:	9b01      	ldr	r3, [sp, #4]
    8aa2:	2200      	movs	r2, #0
    8aa4:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    8aa6:	9b01      	ldr	r3, [sp, #4]
    8aa8:	2200      	movs	r2, #0
    8aaa:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    8aac:	9b01      	ldr	r3, [sp, #4]
    8aae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    8ab2:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    8ab4:	9b01      	ldr	r3, [sp, #4]
    8ab6:	4a0a      	ldr	r2, [pc, #40]	; (8ae0 <FlexCAN_SetRegDefaultVal+0x6a>)
    8ab8:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    8aba:	9b01      	ldr	r3, [sp, #4]
    8abc:	2200      	movs	r2, #0
    8abe:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    8ac0:	9b01      	ldr	r3, [sp, #4]
    8ac2:	2200      	movs	r2, #0
    8ac4:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    8ac6:	9b01      	ldr	r3, [sp, #4]
    8ac8:	2200      	movs	r2, #0
    8aca:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    8acc:	9b01      	ldr	r3, [sp, #4]
    8ace:	4a05      	ldr	r2, [pc, #20]	; (8ae4 <FlexCAN_SetRegDefaultVal+0x6e>)
    8ad0:	601a      	str	r2, [r3, #0]
}
    8ad2:	bf00      	nop
    8ad4:	b003      	add	sp, #12
    8ad6:	f85d fb04 	ldr.w	pc, [sp], #4
    8ada:	bf00      	nop
    8adc:	80004100 	.word	0x80004100
    8ae0:	0003b006 	.word	0x0003b006
    8ae4:	d890000f 	.word	0xd890000f

00008ae8 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    8ae8:	b500      	push	{lr}
    8aea:	b085      	sub	sp, #20
    8aec:	9001      	str	r0, [sp, #4]
    8aee:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8af0:	2300      	movs	r3, #0
    8af2:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    8af4:	9b00      	ldr	r3, [sp, #0]
    8af6:	7a1b      	ldrb	r3, [r3, #8]
    8af8:	2b00      	cmp	r3, #0
    8afa:	d006      	beq.n	8b0a <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    8afc:	9b00      	ldr	r3, [sp, #0]
    8afe:	685b      	ldr	r3, [r3, #4]
    8b00:	4619      	mov	r1, r3
    8b02:	9801      	ldr	r0, [sp, #4]
    8b04:	f002 fefe 	bl	b904 <FlexCAN_EnableRxFifo>
    8b08:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    8b0a:	9b03      	ldr	r3, [sp, #12]
}
    8b0c:	4618      	mov	r0, r3
    8b0e:	b005      	add	sp, #20
    8b10:	f85d fb04 	ldr.w	pc, [sp], #4

00008b14 <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    8b14:	b500      	push	{lr}
    8b16:	b085      	sub	sp, #20
    8b18:	9001      	str	r0, [sp, #4]
    8b1a:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8b1c:	2300      	movs	r3, #0
    8b1e:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    8b20:	9b00      	ldr	r3, [sp, #0]
    8b22:	68db      	ldr	r3, [r3, #12]
    8b24:	2b02      	cmp	r3, #2
    8b26:	d003      	beq.n	8b30 <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    8b28:	2100      	movs	r1, #0
    8b2a:	9801      	ldr	r0, [sp, #4]
    8b2c:	f7ff feec 	bl	8908 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    8b30:	9900      	ldr	r1, [sp, #0]
    8b32:	9801      	ldr	r0, [sp, #4]
    8b34:	f7ff ffd8 	bl	8ae8 <FlexCAN_InitRxFifo>
    8b38:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    8b3a:	9b03      	ldr	r3, [sp, #12]
    8b3c:	2b00      	cmp	r3, #0
    8b3e:	d006      	beq.n	8b4e <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    8b40:	9801      	ldr	r0, [sp, #4]
    8b42:	f002 fd03 	bl	b54c <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    8b46:	9801      	ldr	r0, [sp, #4]
    8b48:	f002 fdca 	bl	b6e0 <FlexCAN_Disable>
    8b4c:	e00b      	b.n	8b66 <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    8b4e:	9b00      	ldr	r3, [sp, #0]
    8b50:	3314      	adds	r3, #20
    8b52:	4619      	mov	r1, r3
    8b54:	9801      	ldr	r0, [sp, #4]
    8b56:	f002 ff3b 	bl	b9d0 <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    8b5a:	9b00      	ldr	r3, [sp, #0]
    8b5c:	681b      	ldr	r3, [r3, #0]
    8b5e:	4619      	mov	r1, r3
    8b60:	9801      	ldr	r0, [sp, #4]
    8b62:	f003 fab7 	bl	c0d4 <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    8b66:	9b03      	ldr	r3, [sp, #12]
}
    8b68:	4618      	mov	r0, r3
    8b6a:	b005      	add	sp, #20
    8b6c:	f85d fb04 	ldr.w	pc, [sp], #4

00008b70 <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    8b70:	b500      	push	{lr}
    8b72:	b087      	sub	sp, #28
    8b74:	4603      	mov	r3, r0
    8b76:	9102      	str	r1, [sp, #8]
    8b78:	9201      	str	r2, [sp, #4]
    8b7a:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8b7e:	2300      	movs	r3, #0
    8b80:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    8b82:	9802      	ldr	r0, [sp, #8]
    8b84:	f7ff fd0c 	bl	85a0 <FlexCAN_IsEnabled>
    8b88:	4603      	mov	r3, r0
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	d00a      	beq.n	8ba4 <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    8b8e:	9802      	ldr	r0, [sp, #8]
    8b90:	f002 fcdc 	bl	b54c <FlexCAN_EnterFreezeMode>
    8b94:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    8b96:	9b05      	ldr	r3, [sp, #20]
    8b98:	2b00      	cmp	r3, #0
    8b9a:	d103      	bne.n	8ba4 <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    8b9c:	9802      	ldr	r0, [sp, #8]
    8b9e:	f002 fd9f 	bl	b6e0 <FlexCAN_Disable>
    8ba2:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    8ba4:	9b05      	ldr	r3, [sp, #20]
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d137      	bne.n	8c1a <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    8baa:	9b01      	ldr	r3, [sp, #4]
    8bac:	7e5b      	ldrb	r3, [r3, #25]
    8bae:	4619      	mov	r1, r3
    8bb0:	9802      	ldr	r0, [sp, #8]
    8bb2:	f7ff fee9 	bl	8988 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    8bb6:	9b02      	ldr	r3, [sp, #8]
    8bb8:	681b      	ldr	r3, [r3, #0]
    8bba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    8bbe:	9b02      	ldr	r3, [sp, #8]
    8bc0:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    8bc2:	9802      	ldr	r0, [sp, #8]
    8bc4:	f002 fe28 	bl	b818 <FlexCAN_Init>
    8bc8:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    8bca:	9b05      	ldr	r3, [sp, #20]
    8bcc:	2b00      	cmp	r3, #0
    8bce:	d006      	beq.n	8bde <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    8bd0:	9802      	ldr	r0, [sp, #8]
    8bd2:	f002 fcbb 	bl	b54c <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    8bd6:	9802      	ldr	r0, [sp, #8]
    8bd8:	f002 fd82 	bl	b6e0 <FlexCAN_Disable>
    8bdc:	e01d      	b.n	8c1a <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    8bde:	9802      	ldr	r0, [sp, #8]
    8be0:	f002 fed4 	bl	b98c <FlexCAN_IsFDAvailable>
    8be4:	4603      	mov	r3, r0
    8be6:	2b00      	cmp	r3, #0
    8be8:	d007      	beq.n	8bfa <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    8bea:	9b01      	ldr	r3, [sp, #4]
    8bec:	7e19      	ldrb	r1, [r3, #24]
    8bee:	9b01      	ldr	r3, [sp, #4]
    8bf0:	7edb      	ldrb	r3, [r3, #27]
    8bf2:	461a      	mov	r2, r3
    8bf4:	9802      	ldr	r0, [sp, #8]
    8bf6:	f7ff fcdd 	bl	85b4 <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    8bfa:	9b01      	ldr	r3, [sp, #4]
    8bfc:	691b      	ldr	r3, [r3, #16]
    8bfe:	4619      	mov	r1, r3
    8c00:	9802      	ldr	r0, [sp, #8]
    8c02:	f003 fdeb 	bl	c7dc <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    8c06:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8c0a:	4618      	mov	r0, r3
    8c0c:	f003 fe56 	bl	c8bc <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    8c10:	9901      	ldr	r1, [sp, #4]
    8c12:	9802      	ldr	r0, [sp, #8]
    8c14:	f7ff ff7e 	bl	8b14 <FlexCAN_InitCtroll>
    8c18:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    8c1a:	9b05      	ldr	r3, [sp, #20]
}
    8c1c:	4618      	mov	r0, r3
    8c1e:	b007      	add	sp, #28
    8c20:	f85d fb04 	ldr.w	pc, [sp], #4

00008c24 <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    8c24:	b500      	push	{lr}
    8c26:	b083      	sub	sp, #12
    8c28:	9001      	str	r0, [sp, #4]
    8c2a:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    8c2c:	9b00      	ldr	r3, [sp, #0]
    8c2e:	7e1b      	ldrb	r3, [r3, #24]
    8c30:	4619      	mov	r1, r3
    8c32:	9801      	ldr	r0, [sp, #4]
    8c34:	f7ff fe51 	bl	88da <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    8c38:	9b00      	ldr	r3, [sp, #0]
    8c3a:	7e1b      	ldrb	r3, [r3, #24]
    8c3c:	2b00      	cmp	r3, #0
    8c3e:	d00c      	beq.n	8c5a <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    8c40:	9b00      	ldr	r3, [sp, #0]
    8c42:	331c      	adds	r3, #28
    8c44:	4619      	mov	r1, r3
    8c46:	9801      	ldr	r0, [sp, #4]
    8c48:	f7ff fd94 	bl	8774 <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    8c4c:	9b00      	ldr	r3, [sp, #0]
    8c4e:	3330      	adds	r3, #48	; 0x30
    8c50:	4619      	mov	r1, r3
    8c52:	9801      	ldr	r0, [sp, #4]
    8c54:	f7ff fd2d 	bl	86b2 <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    8c58:	e005      	b.n	8c66 <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    8c5a:	9b00      	ldr	r3, [sp, #0]
    8c5c:	331c      	adds	r3, #28
    8c5e:	4619      	mov	r1, r3
    8c60:	9801      	ldr	r0, [sp, #4]
    8c62:	f7ff fd5b 	bl	871c <FlexCAN_SetTimeSegments>
}
    8c66:	bf00      	nop
    8c68:	b003      	add	sp, #12
    8c6a:	f85d fb04 	ldr.w	pc, [sp], #4

00008c6e <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    8c6e:	b500      	push	{lr}
    8c70:	b08d      	sub	sp, #52	; 0x34
    8c72:	4603      	mov	r3, r0
    8c74:	9102      	str	r1, [sp, #8]
    8c76:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8c7a:	2300      	movs	r3, #0
    8c7c:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    8c7e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8c82:	4a46      	ldr	r2, [pc, #280]	; (8d9c <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    8c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c88:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    8c8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8c8e:	4a44      	ldr	r2, [pc, #272]	; (8da0 <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    8c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8c94:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    8c96:	2300      	movs	r3, #0
    8c98:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    8c9a:	2300      	movs	r3, #0
    8c9c:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8c9e:	9b02      	ldr	r3, [sp, #8]
    8ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8ca4:	fb02 f303 	mul.w	r3, r2, r3
    8ca8:	2100      	movs	r1, #0
    8caa:	4618      	mov	r0, r3
    8cac:	f7f8 ffdc 	bl	1c68 <OsIf_MicrosToTicks>
    8cb0:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    8cb2:	2300      	movs	r3, #0
    8cb4:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8cb6:	2000      	movs	r0, #0
    8cb8:	f7f8 ff8a 	bl	1bd0 <OsIf_GetCounter>
    8cbc:	4603      	mov	r3, r0
    8cbe:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    8cc0:	e02a      	b.n	8d18 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    8cc2:	9b08      	ldr	r3, [sp, #32]
    8cc4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    8cc8:	2b01      	cmp	r3, #1
    8cca:	d115      	bne.n	8cf8 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    8ccc:	2307      	movs	r3, #7
    8cce:	9309      	str	r3, [sp, #36]	; 0x24
    8cd0:	e00f      	b.n	8cf2 <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    8cd2:	9909      	ldr	r1, [sp, #36]	; 0x24
    8cd4:	9807      	ldr	r0, [sp, #28]
    8cd6:	f7ff fcd0 	bl	867a <FlexCAN_GetBuffStatusFlag>
    8cda:	4603      	mov	r3, r0
    8cdc:	2b00      	cmp	r3, #0
    8cde:	d005      	beq.n	8cec <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    8ce0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
    8ce6:	4618      	mov	r0, r3
    8ce8:	f000 fb06 	bl	92f8 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    8cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8cee:	3b01      	subs	r3, #1
    8cf0:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    8cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8cf4:	2b04      	cmp	r3, #4
    8cf6:	d8ec      	bhi.n	8cd2 <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    8cf8:	ab05      	add	r3, sp, #20
    8cfa:	2100      	movs	r1, #0
    8cfc:	4618      	mov	r0, r3
    8cfe:	f7f8 ff80 	bl	1c02 <OsIf_GetElapsed>
    8d02:	4602      	mov	r2, r0
    8d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8d06:	4413      	add	r3, r2
    8d08:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    8d0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8d0c:	9b06      	ldr	r3, [sp, #24]
    8d0e:	429a      	cmp	r2, r3
    8d10:	d302      	bcc.n	8d18 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    8d12:	2303      	movs	r3, #3
    8d14:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    8d16:	e003      	b.n	8d20 <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    8d18:	9b08      	ldr	r3, [sp, #32]
    8d1a:	685b      	ldr	r3, [r3, #4]
    8d1c:	2b01      	cmp	r3, #1
    8d1e:	d0d0      	beq.n	8cc2 <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    8d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8d22:	2b03      	cmp	r3, #3
    8d24:	d125      	bne.n	8d72 <FlexCAN_ProccessLegacyRxFIFO+0x104>
    8d26:	9b08      	ldr	r3, [sp, #32]
    8d28:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    8d2c:	2b01      	cmp	r3, #1
    8d2e:	d020      	beq.n	8d72 <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    8d30:	9b08      	ldr	r3, [sp, #32]
    8d32:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8d36:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8d3a:	9300      	str	r3, [sp, #0]
    8d3c:	2300      	movs	r3, #0
    8d3e:	2205      	movs	r2, #5
    8d40:	9807      	ldr	r0, [sp, #28]
    8d42:	f002 feef 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    8d46:	9b08      	ldr	r3, [sp, #32]
    8d48:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8d4c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8d50:	9300      	str	r3, [sp, #0]
    8d52:	2300      	movs	r3, #0
    8d54:	2206      	movs	r2, #6
    8d56:	9807      	ldr	r0, [sp, #28]
    8d58:	f002 fee4 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    8d5c:	9b08      	ldr	r3, [sp, #32]
    8d5e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8d62:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8d66:	9300      	str	r3, [sp, #0]
    8d68:	2300      	movs	r3, #0
    8d6a:	2207      	movs	r2, #7
    8d6c:	9807      	ldr	r0, [sp, #28]
    8d6e:	f002 fed9 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    8d72:	9b08      	ldr	r3, [sp, #32]
    8d74:	685b      	ldr	r3, [r3, #4]
    8d76:	2b00      	cmp	r3, #0
    8d78:	d005      	beq.n	8d86 <FlexCAN_ProccessLegacyRxFIFO+0x118>
    8d7a:	2b01      	cmp	r3, #1
    8d7c:	d106      	bne.n	8d8c <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    8d7e:	9b08      	ldr	r3, [sp, #32]
    8d80:	2200      	movs	r2, #0
    8d82:	605a      	str	r2, [r3, #4]
                break;
    8d84:	e005      	b.n	8d92 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    8d86:	2300      	movs	r3, #0
    8d88:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    8d8a:	e002      	b.n	8d92 <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    8d8c:	2301      	movs	r3, #1
    8d8e:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    8d90:	bf00      	nop
        }

    return eResult;
    8d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    8d94:	4618      	mov	r0, r3
    8d96:	b00d      	add	sp, #52	; 0x34
    8d98:	f85d fb04 	ldr.w	pc, [sp], #4
    8d9c:	1fff8fa0 	.word	0x1fff8fa0
    8da0:	0000f4e8 	.word	0x0000f4e8

00008da4 <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    8da4:	b084      	sub	sp, #16
    8da6:	9200      	str	r2, [sp, #0]
    8da8:	461a      	mov	r2, r3
    8daa:	4603      	mov	r3, r0
    8dac:	f88d 3007 	strb.w	r3, [sp, #7]
    8db0:	460b      	mov	r3, r1
    8db2:	f88d 3006 	strb.w	r3, [sp, #6]
    8db6:	4613      	mov	r3, r2
    8db8:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    8dbc:	2300      	movs	r3, #0
    8dbe:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    8dc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8dc4:	4a15      	ldr	r2, [pc, #84]	; (8e1c <FlexCAN_StartRxMessageBufferData+0x78>)
    8dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8dca:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    8dcc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8dd0:	9a02      	ldr	r2, [sp, #8]
    8dd2:	011b      	lsls	r3, r3, #4
    8dd4:	4413      	add	r3, r2
    8dd6:	3304      	adds	r3, #4
    8dd8:	681b      	ldr	r3, [r3, #0]
    8dda:	2b00      	cmp	r3, #0
    8ddc:	d002      	beq.n	8de4 <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    8dde:	2302      	movs	r3, #2
    8de0:	9303      	str	r3, [sp, #12]
    8de2:	e017      	b.n	8e14 <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    8de4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8de8:	9a02      	ldr	r2, [sp, #8]
    8dea:	011b      	lsls	r3, r3, #4
    8dec:	4413      	add	r3, r2
    8dee:	3304      	adds	r3, #4
    8df0:	2201      	movs	r2, #1
    8df2:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    8df4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8df8:	9a02      	ldr	r2, [sp, #8]
    8dfa:	011b      	lsls	r3, r3, #4
    8dfc:	4413      	add	r3, r2
    8dfe:	9a00      	ldr	r2, [sp, #0]
    8e00:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    8e02:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8e06:	9a02      	ldr	r2, [sp, #8]
    8e08:	011b      	lsls	r3, r3, #4
    8e0a:	4413      	add	r3, r2
    8e0c:	3308      	adds	r3, #8
    8e0e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    8e12:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    8e14:	9b03      	ldr	r3, [sp, #12]
}
    8e16:	4618      	mov	r0, r3
    8e18:	b004      	add	sp, #16
    8e1a:	4770      	bx	lr
    8e1c:	1fff8fa0 	.word	0x1fff8fa0

00008e20 <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    8e20:	b500      	push	{lr}
    8e22:	b08f      	sub	sp, #60	; 0x3c
    8e24:	9204      	str	r2, [sp, #16]
    8e26:	9303      	str	r3, [sp, #12]
    8e28:	4603      	mov	r3, r0
    8e2a:	f88d 3017 	strb.w	r3, [sp, #23]
    8e2e:	460b      	mov	r3, r1
    8e30:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8e34:	2300      	movs	r3, #0
    8e36:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    8e38:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8e3c:	4a38      	ldr	r2, [pc, #224]	; (8f20 <FlexCAN_StartSendData+0x100>)
    8e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e42:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    8e44:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8e48:	4a36      	ldr	r2, [pc, #216]	; (8f24 <FlexCAN_StartSendData+0x104>)
    8e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8e4e:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    8e50:	2300      	movs	r3, #0
    8e52:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    8e54:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8e58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8e5a:	011b      	lsls	r3, r3, #4
    8e5c:	4413      	add	r3, r2
    8e5e:	3304      	adds	r3, #4
    8e60:	681b      	ldr	r3, [r3, #0]
    8e62:	2b00      	cmp	r3, #0
    8e64:	d002      	beq.n	8e6c <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    8e66:	2302      	movs	r3, #2
    8e68:	930d      	str	r3, [sp, #52]	; 0x34
    8e6a:	e053      	b.n	8f14 <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    8e6c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8e70:	4619      	mov	r1, r3
    8e72:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e74:	f7ff fbee 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    8e78:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8e7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8e7e:	011b      	lsls	r3, r3, #4
    8e80:	4413      	add	r3, r2
    8e82:	3304      	adds	r3, #4
    8e84:	2202      	movs	r2, #2
    8e86:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    8e88:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8e8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8e8e:	011b      	lsls	r3, r3, #4
    8e90:	4413      	add	r3, r2
    8e92:	330c      	adds	r3, #12
    8e94:	2200      	movs	r2, #0
    8e96:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    8e98:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8e9c:	9a04      	ldr	r2, [sp, #16]
    8e9e:	7b11      	ldrb	r1, [r2, #12]
    8ea0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8ea2:	011b      	lsls	r3, r3, #4
    8ea4:	4413      	add	r3, r2
    8ea6:	3308      	adds	r3, #8
    8ea8:	460a      	mov	r2, r1
    8eaa:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    8eac:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8eb0:	9a04      	ldr	r2, [sp, #16]
    8eb2:	7ad1      	ldrb	r1, [r2, #11]
    8eb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8eb6:	011b      	lsls	r3, r3, #4
    8eb8:	4413      	add	r3, r2
    8eba:	3309      	adds	r3, #9
    8ebc:	460a      	mov	r2, r1
    8ebe:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    8ec0:	9b04      	ldr	r3, [sp, #16]
    8ec2:	685b      	ldr	r3, [r3, #4]
    8ec4:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    8ec6:	9b04      	ldr	r3, [sp, #16]
    8ec8:	681b      	ldr	r3, [r3, #0]
    8eca:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    8ecc:	9b04      	ldr	r3, [sp, #16]
    8ece:	7a1b      	ldrb	r3, [r3, #8]
    8ed0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    8ed4:	9b04      	ldr	r3, [sp, #16]
    8ed6:	7a5b      	ldrb	r3, [r3, #9]
    8ed8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    8edc:	9b04      	ldr	r3, [sp, #16]
    8ede:	7a9b      	ldrb	r3, [r3, #10]
    8ee0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    8ee4:	9b04      	ldr	r3, [sp, #16]
    8ee6:	7adb      	ldrb	r3, [r3, #11]
    8ee8:	2b00      	cmp	r3, #0
    8eea:	d002      	beq.n	8ef2 <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    8eec:	231c      	movs	r3, #28
    8eee:	9306      	str	r3, [sp, #24]
    8ef0:	e001      	b.n	8ef6 <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    8ef2:	230c      	movs	r3, #12
    8ef4:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    8ef6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8efa:	4619      	mov	r1, r3
    8efc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8efe:	f002 fa89 	bl	b414 <FlexCAN_GetMsgBuffRegion>
    8f02:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    8f04:	a906      	add	r1, sp, #24
    8f06:	2300      	movs	r3, #0
    8f08:	9300      	str	r3, [sp, #0]
    8f0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8f0c:	9a03      	ldr	r2, [sp, #12]
    8f0e:	980a      	ldr	r0, [sp, #40]	; 0x28
    8f10:	f002 ffd2 	bl	beb8 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    8f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    8f16:	4618      	mov	r0, r3
    8f18:	b00f      	add	sp, #60	; 0x3c
    8f1a:	f85d fb04 	ldr.w	pc, [sp], #4
    8f1e:	bf00      	nop
    8f20:	1fff8fa0 	.word	0x1fff8fa0
    8f24:	0000f4e8 	.word	0x0000f4e8

00008f28 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    8f28:	b500      	push	{lr}
    8f2a:	b089      	sub	sp, #36	; 0x24
    8f2c:	4603      	mov	r3, r0
    8f2e:	9102      	str	r1, [sp, #8]
    8f30:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    8f34:	2300      	movs	r3, #0
    8f36:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    8f38:	2300      	movs	r3, #0
    8f3a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    8f3c:	2300      	movs	r3, #0
    8f3e:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    8f40:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f44:	4a26      	ldr	r2, [pc, #152]	; (8fe0 <FlexCAN_StartRxMessageFifoData+0xb8>)
    8f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f4a:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    8f4c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f50:	4a24      	ldr	r2, [pc, #144]	; (8fe4 <FlexCAN_StartRxMessageFifoData+0xbc>)
    8f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8f56:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    8f58:	9b05      	ldr	r3, [sp, #20]
    8f5a:	685b      	ldr	r3, [r3, #4]
    8f5c:	2b01      	cmp	r3, #1
    8f5e:	d102      	bne.n	8f66 <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    8f60:	2302      	movs	r3, #2
    8f62:	9307      	str	r3, [sp, #28]
    8f64:	e036      	b.n	8fd4 <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    8f66:	9b05      	ldr	r3, [sp, #20]
    8f68:	2201      	movs	r2, #1
    8f6a:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    8f6c:	9b05      	ldr	r3, [sp, #20]
    8f6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    8f72:	2b01      	cmp	r3, #1
    8f74:	d102      	bne.n	8f7c <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    8f76:	9b05      	ldr	r3, [sp, #20]
    8f78:	2201      	movs	r2, #1
    8f7a:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    8f7c:	9b05      	ldr	r3, [sp, #20]
    8f7e:	9a02      	ldr	r2, [sp, #8]
    8f80:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    8f82:	9b05      	ldr	r3, [sp, #20]
    8f84:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    8f88:	2b00      	cmp	r3, #0
    8f8a:	d123      	bne.n	8fd4 <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    8f8c:	9b05      	ldr	r3, [sp, #20]
    8f8e:	2200      	movs	r2, #0
    8f90:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    8f92:	9b05      	ldr	r3, [sp, #20]
    8f94:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8f98:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8f9c:	9300      	str	r3, [sp, #0]
    8f9e:	2301      	movs	r3, #1
    8fa0:	2206      	movs	r2, #6
    8fa2:	9806      	ldr	r0, [sp, #24]
    8fa4:	f002 fdbe 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    8fa8:	9b05      	ldr	r3, [sp, #20]
    8faa:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8fae:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8fb2:	9300      	str	r3, [sp, #0]
    8fb4:	2301      	movs	r3, #1
    8fb6:	2207      	movs	r2, #7
    8fb8:	9806      	ldr	r0, [sp, #24]
    8fba:	f002 fdb3 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    8fbe:	9b05      	ldr	r3, [sp, #20]
    8fc0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    8fc4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    8fc8:	9300      	str	r3, [sp, #0]
    8fca:	2301      	movs	r3, #1
    8fcc:	2205      	movs	r2, #5
    8fce:	9806      	ldr	r0, [sp, #24]
    8fd0:	f002 fda8 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    8fd4:	9b07      	ldr	r3, [sp, #28]
}
    8fd6:	4618      	mov	r0, r3
    8fd8:	b009      	add	sp, #36	; 0x24
    8fda:	f85d fb04 	ldr.w	pc, [sp], #4
    8fde:	bf00      	nop
    8fe0:	0000f4e8 	.word	0x0000f4e8
    8fe4:	1fff8fa0 	.word	0x1fff8fa0

00008fe8 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    8fe8:	b510      	push	{r4, lr}
    8fea:	b09e      	sub	sp, #120	; 0x78
    8fec:	4603      	mov	r3, r0
    8fee:	9102      	str	r1, [sp, #8]
    8ff0:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    8ff4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ff8:	4a70      	ldr	r2, [pc, #448]	; (91bc <FlexCAN_IRQHandlerRxMB+0x1d4>)
    8ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8ffe:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9000:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9004:	4a6e      	ldr	r2, [pc, #440]	; (91c0 <FlexCAN_IRQHandlerRxMB+0x1d8>)
    9006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    900a:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    900c:	2300      	movs	r3, #0
    900e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    9012:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9014:	9b02      	ldr	r3, [sp, #8]
    9016:	011b      	lsls	r3, r3, #4
    9018:	4413      	add	r3, r2
    901a:	681b      	ldr	r3, [r3, #0]
    901c:	2b00      	cmp	r3, #0
    901e:	d105      	bne.n	902c <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    9020:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9022:	9b02      	ldr	r3, [sp, #8]
    9024:	011b      	lsls	r3, r3, #4
    9026:	4413      	add	r3, r2
    9028:	aa05      	add	r2, sp, #20
    902a:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    902c:	2300      	movs	r3, #0
    902e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    9032:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9034:	9b02      	ldr	r3, [sp, #8]
    9036:	011b      	lsls	r3, r3, #4
    9038:	4413      	add	r3, r2
    903a:	3308      	adds	r3, #8
    903c:	781b      	ldrb	r3, [r3, #0]
    903e:	2b00      	cmp	r3, #0
    9040:	d008      	beq.n	9054 <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    9042:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9044:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9048:	2b00      	cmp	r3, #0
    904a:	d003      	beq.n	9054 <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    904c:	2301      	movs	r3, #1
    904e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    9052:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    9054:	9902      	ldr	r1, [sp, #8]
    9056:	981c      	ldr	r0, [sp, #112]	; 0x70
    9058:	f002 fd55 	bl	bb06 <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    905c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    905e:	9b02      	ldr	r3, [sp, #8]
    9060:	011b      	lsls	r3, r3, #4
    9062:	4413      	add	r3, r2
    9064:	681b      	ldr	r3, [r3, #0]
    9066:	461a      	mov	r2, r3
    9068:	9902      	ldr	r1, [sp, #8]
    906a:	981c      	ldr	r0, [sp, #112]	; 0x70
    906c:	f002 fe7a 	bl	bd64 <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9070:	9902      	ldr	r1, [sp, #8]
    9072:	981c      	ldr	r0, [sp, #112]	; 0x70
    9074:	f7ff faee 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    9078:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    907a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    907e:	2b00      	cmp	r3, #0
    9080:	d032      	beq.n	90e8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9082:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9084:	9b02      	ldr	r3, [sp, #8]
    9086:	011b      	lsls	r3, r3, #4
    9088:	4413      	add	r3, r2
    908a:	681b      	ldr	r3, [r3, #0]
    908c:	681b      	ldr	r3, [r3, #0]
    908e:	0e1b      	lsrs	r3, r3, #24
    9090:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    9094:	2b02      	cmp	r3, #2
    9096:	d027      	beq.n	90e8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9098:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    909a:	9b02      	ldr	r3, [sp, #8]
    909c:	011b      	lsls	r3, r3, #4
    909e:	4413      	add	r3, r2
    90a0:	681b      	ldr	r3, [r3, #0]
    90a2:	681b      	ldr	r3, [r3, #0]
    90a4:	0e1b      	lsrs	r3, r3, #24
    90a6:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    90aa:	2b04      	cmp	r3, #4
    90ac:	d01c      	beq.n	90e8 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    90ae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    90b0:	9b02      	ldr	r3, [sp, #8]
    90b2:	011b      	lsls	r3, r3, #4
    90b4:	4413      	add	r3, r2
    90b6:	681b      	ldr	r3, [r3, #0]
    90b8:	681b      	ldr	r3, [r3, #0]
    90ba:	0e1b      	lsrs	r3, r3, #24
    90bc:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    90c0:	2b06      	cmp	r3, #6
    90c2:	d011      	beq.n	90e8 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    90c4:	9902      	ldr	r1, [sp, #8]
    90c6:	981c      	ldr	r0, [sp, #112]	; 0x70
    90c8:	f002 f9a4 	bl	b414 <FlexCAN_GetMsgBuffRegion>
    90cc:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    90ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
    90d0:	681b      	ldr	r3, [r3, #0]
    90d2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    90d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    90d8:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    90da:	9b19      	ldr	r3, [sp, #100]	; 0x64
    90dc:	681b      	ldr	r3, [r3, #0]
    90de:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    90e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    90e4:	601a      	str	r2, [r3, #0]
    {
    90e6:	e002      	b.n	90ee <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    90e8:	981c      	ldr	r0, [sp, #112]	; 0x70
    90ea:	f7ff faac 	bl	8646 <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    90ee:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    90f2:	2b00      	cmp	r3, #0
    90f4:	d000      	beq.n	90f8 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    90f6:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    90f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    90fa:	9b02      	ldr	r3, [sp, #8]
    90fc:	011b      	lsls	r3, r3, #4
    90fe:	4413      	add	r3, r2
    9100:	3304      	adds	r3, #4
    9102:	2200      	movs	r2, #0
    9104:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    9106:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9108:	9b02      	ldr	r3, [sp, #8]
    910a:	011b      	lsls	r3, r3, #4
    910c:	4413      	add	r3, r2
    910e:	3308      	adds	r3, #8
    9110:	781b      	ldrb	r3, [r3, #0]
    9112:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    9116:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9118:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    911c:	2b00      	cmp	r3, #0
    911e:	d008      	beq.n	9132 <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    9120:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9122:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9126:	f89d 000f 	ldrb.w	r0, [sp, #15]
    912a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    912c:	9a02      	ldr	r2, [sp, #8]
    912e:	2100      	movs	r1, #0
    9130:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    9132:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9134:	9b02      	ldr	r3, [sp, #8]
    9136:	011b      	lsls	r3, r3, #4
    9138:	4413      	add	r3, r2
    913a:	3304      	adds	r3, #4
    913c:	681b      	ldr	r3, [r3, #0]
    913e:	2b00      	cmp	r3, #0
    9140:	d11e      	bne.n	9180 <FlexCAN_IRQHandlerRxMB+0x198>
    9142:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9144:	9b02      	ldr	r3, [sp, #8]
    9146:	011b      	lsls	r3, r3, #4
    9148:	4413      	add	r3, r2
    914a:	3308      	adds	r3, #8
    914c:	781b      	ldrb	r3, [r3, #0]
    914e:	f083 0301 	eor.w	r3, r3, #1
    9152:	b2db      	uxtb	r3, r3
    9154:	2b00      	cmp	r3, #0
    9156:	d013      	beq.n	9180 <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    9158:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    915a:	9b02      	ldr	r3, [sp, #8]
    915c:	011b      	lsls	r3, r3, #4
    915e:	4413      	add	r3, r2
    9160:	3308      	adds	r3, #8
    9162:	2201      	movs	r2, #1
    9164:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    9166:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9168:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    916c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9170:	9300      	str	r3, [sp, #0]
    9172:	2300      	movs	r3, #0
    9174:	9a02      	ldr	r2, [sp, #8]
    9176:	981c      	ldr	r0, [sp, #112]	; 0x70
    9178:	f002 fcd4 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
    917c:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    917e:	e019      	b.n	91b4 <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    9180:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    9184:	f083 0301 	eor.w	r3, r3, #1
    9188:	b2db      	uxtb	r3, r3
    918a:	2b00      	cmp	r3, #0
    918c:	d012      	beq.n	91b4 <FlexCAN_IRQHandlerRxMB+0x1cc>
    918e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9190:	9b02      	ldr	r3, [sp, #8]
    9192:	011b      	lsls	r3, r3, #4
    9194:	4413      	add	r3, r2
    9196:	3308      	adds	r3, #8
    9198:	781b      	ldrb	r3, [r3, #0]
    919a:	2b00      	cmp	r3, #0
    919c:	d00a      	beq.n	91b4 <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    919e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    91a0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    91a4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    91a8:	9300      	str	r3, [sp, #0]
    91aa:	2300      	movs	r3, #0
    91ac:	9a02      	ldr	r2, [sp, #8]
    91ae:	981c      	ldr	r0, [sp, #112]	; 0x70
    91b0:	f002 fcb8 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
}
    91b4:	bf00      	nop
    91b6:	b01e      	add	sp, #120	; 0x78
    91b8:	bd10      	pop	{r4, pc}
    91ba:	bf00      	nop
    91bc:	0000f4e8 	.word	0x0000f4e8
    91c0:	1fff8fa0 	.word	0x1fff8fa0

000091c4 <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    91c4:	b510      	push	{r4, lr}
    91c6:	b09a      	sub	sp, #104	; 0x68
    91c8:	4603      	mov	r3, r0
    91ca:	9102      	str	r1, [sp, #8]
    91cc:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    91d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    91d4:	4a46      	ldr	r2, [pc, #280]	; (92f0 <FlexCAN_IRQHandlerTxMB+0x12c>)
    91d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91da:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    91dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    91e0:	4a44      	ldr	r2, [pc, #272]	; (92f4 <FlexCAN_IRQHandlerTxMB+0x130>)
    91e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    91e6:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    91e8:	2300      	movs	r3, #0
    91ea:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    91ec:	2300      	movs	r3, #0
    91ee:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    91f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    91f2:	9b02      	ldr	r3, [sp, #8]
    91f4:	011b      	lsls	r3, r3, #4
    91f6:	4413      	add	r3, r2
    91f8:	3309      	adds	r3, #9
    91fa:	781b      	ldrb	r3, [r3, #0]
    91fc:	2b00      	cmp	r3, #0
    91fe:	d01e      	beq.n	923e <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    9200:	9902      	ldr	r1, [sp, #8]
    9202:	9819      	ldr	r0, [sp, #100]	; 0x64
    9204:	f002 fc7f 	bl	bb06 <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    9208:	ab04      	add	r3, sp, #16
    920a:	461a      	mov	r2, r3
    920c:	9902      	ldr	r1, [sp, #8]
    920e:	9819      	ldr	r0, [sp, #100]	; 0x64
    9210:	f002 fda8 	bl	bd64 <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    9214:	9819      	ldr	r0, [sp, #100]	; 0x64
    9216:	f7ff fa16 	bl	8646 <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    921a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    921c:	9918      	ldr	r1, [sp, #96]	; 0x60
    921e:	9b02      	ldr	r3, [sp, #8]
    9220:	011b      	lsls	r3, r3, #4
    9222:	440b      	add	r3, r1
    9224:	330c      	adds	r3, #12
    9226:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    9228:	9b04      	ldr	r3, [sp, #16]
    922a:	0e1b      	lsrs	r3, r3, #24
    922c:	f003 030f 	and.w	r3, r3, #15
    9230:	2b04      	cmp	r3, #4
    9232:	d116      	bne.n	9262 <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    9234:	9902      	ldr	r1, [sp, #8]
    9236:	9819      	ldr	r0, [sp, #100]	; 0x64
    9238:	f7ff fa0c 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
    923c:	e011      	b.n	9262 <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    923e:	9902      	ldr	r1, [sp, #8]
    9240:	9819      	ldr	r0, [sp, #100]	; 0x64
    9242:	f002 fd7b 	bl	bd3c <FlexCAN_GetMsgBuffTimestamp>
    9246:	4601      	mov	r1, r0
    9248:	9a18      	ldr	r2, [sp, #96]	; 0x60
    924a:	9b02      	ldr	r3, [sp, #8]
    924c:	011b      	lsls	r3, r3, #4
    924e:	4413      	add	r3, r2
    9250:	330c      	adds	r3, #12
    9252:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    9254:	9819      	ldr	r0, [sp, #100]	; 0x64
    9256:	f7ff f9f6 	bl	8646 <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    925a:	9902      	ldr	r1, [sp, #8]
    925c:	9819      	ldr	r0, [sp, #100]	; 0x64
    925e:	f7ff f9f9 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    9262:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9264:	9b02      	ldr	r3, [sp, #8]
    9266:	011b      	lsls	r3, r3, #4
    9268:	4413      	add	r3, r2
    926a:	3304      	adds	r3, #4
    926c:	2200      	movs	r2, #0
    926e:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    9270:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9272:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9276:	2b00      	cmp	r3, #0
    9278:	d008      	beq.n	928c <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    927a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    927c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9280:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9284:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9286:	9a02      	ldr	r2, [sp, #8]
    9288:	2104      	movs	r1, #4
    928a:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    928c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    928e:	9b02      	ldr	r3, [sp, #8]
    9290:	011b      	lsls	r3, r3, #4
    9292:	4413      	add	r3, r2
    9294:	3304      	adds	r3, #4
    9296:	681b      	ldr	r3, [r3, #0]
    9298:	2b00      	cmp	r3, #0
    929a:	d112      	bne.n	92c2 <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    929c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    929e:	9b02      	ldr	r3, [sp, #8]
    92a0:	011b      	lsls	r3, r3, #4
    92a2:	4413      	add	r3, r2
    92a4:	3308      	adds	r3, #8
    92a6:	2201      	movs	r2, #1
    92a8:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    92aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    92ac:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    92b0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    92b4:	9300      	str	r3, [sp, #0]
    92b6:	2300      	movs	r3, #0
    92b8:	9a02      	ldr	r2, [sp, #8]
    92ba:	9819      	ldr	r0, [sp, #100]	; 0x64
    92bc:	f002 fc32 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    92c0:	e012      	b.n	92e8 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    92c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    92c4:	9b02      	ldr	r3, [sp, #8]
    92c6:	011b      	lsls	r3, r3, #4
    92c8:	4413      	add	r3, r2
    92ca:	3308      	adds	r3, #8
    92cc:	781b      	ldrb	r3, [r3, #0]
    92ce:	2b00      	cmp	r3, #0
    92d0:	d00a      	beq.n	92e8 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    92d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    92d4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    92d8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    92dc:	9300      	str	r3, [sp, #0]
    92de:	2300      	movs	r3, #0
    92e0:	9a02      	ldr	r2, [sp, #8]
    92e2:	9819      	ldr	r0, [sp, #100]	; 0x64
    92e4:	f002 fc1e 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
}
    92e8:	bf00      	nop
    92ea:	b01a      	add	sp, #104	; 0x68
    92ec:	bd10      	pop	{r4, pc}
    92ee:	bf00      	nop
    92f0:	0000f4e8 	.word	0x0000f4e8
    92f4:	1fff8fa0 	.word	0x1fff8fa0

000092f8 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    92f8:	b510      	push	{r4, lr}
    92fa:	b098      	sub	sp, #96	; 0x60
    92fc:	4603      	mov	r3, r0
    92fe:	9100      	str	r1, [sp, #0]
    9300:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9304:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9308:	4a3c      	ldr	r2, [pc, #240]	; (93fc <FlexCAN_IRQHandlerRxFIFO+0x104>)
    930a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    930e:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9310:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9314:	4a3a      	ldr	r2, [pc, #232]	; (9400 <FlexCAN_IRQHandlerRxFIFO+0x108>)
    9316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    931a:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    931c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    931e:	681b      	ldr	r3, [r3, #0]
    9320:	2b00      	cmp	r3, #0
    9322:	d102      	bne.n	932a <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    9324:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9326:	aa02      	add	r2, sp, #8
    9328:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    932a:	9b00      	ldr	r3, [sp, #0]
    932c:	2b07      	cmp	r3, #7
    932e:	d048      	beq.n	93c2 <FlexCAN_IRQHandlerRxFIFO+0xca>
    9330:	9b00      	ldr	r3, [sp, #0]
    9332:	2b07      	cmp	r3, #7
    9334:	d858      	bhi.n	93e8 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    9336:	9b00      	ldr	r3, [sp, #0]
    9338:	2b05      	cmp	r3, #5
    933a:	d003      	beq.n	9344 <FlexCAN_IRQHandlerRxFIFO+0x4c>
    933c:	9b00      	ldr	r3, [sp, #0]
    933e:	2b06      	cmp	r3, #6
    9340:	d02c      	beq.n	939c <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    9342:	e051      	b.n	93e8 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9344:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9346:	685b      	ldr	r3, [r3, #4]
    9348:	2b01      	cmp	r3, #1
    934a:	d14f      	bne.n	93ec <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    934c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    934e:	681b      	ldr	r3, [r3, #0]
    9350:	4619      	mov	r1, r3
    9352:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9354:	f003 f98d 	bl	c672 <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9358:	9900      	ldr	r1, [sp, #0]
    935a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    935c:	f7ff f97a 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    9360:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9362:	2200      	movs	r2, #0
    9364:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    9366:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9368:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    936c:	2b00      	cmp	r3, #0
    936e:	d008      	beq.n	9382 <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    9370:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9372:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9376:	f89d 0007 	ldrb.w	r0, [sp, #7]
    937a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    937c:	2200      	movs	r2, #0
    937e:	2101      	movs	r1, #1
    9380:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9382:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9384:	685b      	ldr	r3, [r3, #4]
    9386:	2b00      	cmp	r3, #0
    9388:	d130      	bne.n	93ec <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    938a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    938c:	2201      	movs	r2, #1
    938e:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    9390:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9394:	4618      	mov	r0, r3
    9396:	f000 fc61 	bl	9c5c <FlexCAN_CompleteRxMessageFifoData>
            break;
    939a:	e027      	b.n	93ec <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    939c:	9900      	ldr	r1, [sp, #0]
    939e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    93a0:	f7ff f958 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    93a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    93aa:	2b00      	cmp	r3, #0
    93ac:	d020      	beq.n	93f0 <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    93ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93b0:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    93b4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    93b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93ba:	2200      	movs	r2, #0
    93bc:	2102      	movs	r1, #2
    93be:	47a0      	blx	r4
            break;
    93c0:	e016      	b.n	93f0 <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    93c2:	9900      	ldr	r1, [sp, #0]
    93c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    93c6:	f7ff f945 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    93ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    93d0:	2b00      	cmp	r3, #0
    93d2:	d00f      	beq.n	93f4 <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    93d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93d6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    93da:	f89d 0007 	ldrb.w	r0, [sp, #7]
    93de:	9b16      	ldr	r3, [sp, #88]	; 0x58
    93e0:	2200      	movs	r2, #0
    93e2:	2103      	movs	r1, #3
    93e4:	47a0      	blx	r4
            break;
    93e6:	e005      	b.n	93f4 <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    93e8:	bf00      	nop
    93ea:	e004      	b.n	93f6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    93ec:	bf00      	nop
    93ee:	e002      	b.n	93f6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    93f0:	bf00      	nop
    93f2:	e000      	b.n	93f6 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    93f4:	bf00      	nop
    }
}
    93f6:	bf00      	nop
    93f8:	b018      	add	sp, #96	; 0x60
    93fa:	bd10      	pop	{r4, pc}
    93fc:	0000f4e8 	.word	0x0000f4e8
    9400:	1fff8fa0 	.word	0x1fff8fa0

00009404 <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    9404:	b500      	push	{lr}
    9406:	b08b      	sub	sp, #44	; 0x2c
    9408:	4603      	mov	r3, r0
    940a:	460a      	mov	r2, r1
    940c:	f88d 3007 	strb.w	r3, [sp, #7]
    9410:	4613      	mov	r3, r2
    9412:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9416:	f89d 3007 	ldrb.w	r3, [sp, #7]
    941a:	4a3c      	ldr	r2, [pc, #240]	; (950c <FlexCAN_AbortTxTransfer+0x108>)
    941c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9420:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9422:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9426:	4a3a      	ldr	r2, [pc, #232]	; (9510 <FlexCAN_AbortTxTransfer+0x10c>)
    9428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    942c:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    942e:	2300      	movs	r3, #0
    9430:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    9432:	2300      	movs	r3, #0
    9434:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    9436:	2300      	movs	r3, #0
    9438:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    943a:	2300      	movs	r3, #0
    943c:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    943e:	2300      	movs	r3, #0
    9440:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    9442:	2300      	movs	r3, #0
    9444:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9446:	f89d 3006 	ldrb.w	r3, [sp, #6]
    944a:	4619      	mov	r1, r3
    944c:	9807      	ldr	r0, [sp, #28]
    944e:	f001 ffe1 	bl	b414 <FlexCAN_GetMsgBuffRegion>
    9452:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    9454:	9b03      	ldr	r3, [sp, #12]
    9456:	681b      	ldr	r3, [r3, #0]
    9458:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    945a:	9b05      	ldr	r3, [sp, #20]
    945c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9460:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    9462:	9b05      	ldr	r3, [sp, #20]
    9464:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    9468:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    946a:	9b03      	ldr	r3, [sp, #12]
    946c:	9a05      	ldr	r2, [sp, #20]
    946e:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9470:	2100      	movs	r1, #0
    9472:	4828      	ldr	r0, [pc, #160]	; (9514 <FlexCAN_AbortTxTransfer+0x110>)
    9474:	f7f8 fbf8 	bl	1c68 <OsIf_MicrosToTicks>
    9478:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    947a:	2000      	movs	r0, #0
    947c:	f7f8 fba8 	bl	1bd0 <OsIf_GetCounter>
    9480:	4603      	mov	r3, r0
    9482:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    9484:	e00f      	b.n	94a6 <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9486:	ab02      	add	r3, sp, #8
    9488:	2100      	movs	r1, #0
    948a:	4618      	mov	r0, r3
    948c:	f7f8 fbb9 	bl	1c02 <OsIf_GetElapsed>
    9490:	4602      	mov	r2, r0
    9492:	9b08      	ldr	r3, [sp, #32]
    9494:	4413      	add	r3, r2
    9496:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    9498:	9a08      	ldr	r2, [sp, #32]
    949a:	9b04      	ldr	r3, [sp, #16]
    949c:	429a      	cmp	r2, r3
    949e:	d302      	bcc.n	94a6 <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    94a0:	2303      	movs	r3, #3
    94a2:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    94a4:	e008      	b.n	94b8 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    94a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    94aa:	4619      	mov	r1, r3
    94ac:	9807      	ldr	r0, [sp, #28]
    94ae:	f7ff f8e4 	bl	867a <FlexCAN_GetBuffStatusFlag>
    94b2:	4603      	mov	r3, r0
    94b4:	2b00      	cmp	r3, #0
    94b6:	d0e6      	beq.n	9486 <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    94b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    94ba:	2b03      	cmp	r3, #3
    94bc:	d012      	beq.n	94e4 <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    94be:	9b03      	ldr	r3, [sp, #12]
    94c0:	681b      	ldr	r3, [r3, #0]
    94c2:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    94c4:	9b05      	ldr	r3, [sp, #20]
    94c6:	0e1b      	lsrs	r3, r3, #24
    94c8:	f003 030f 	and.w	r3, r3, #15
    94cc:	2b08      	cmp	r3, #8
    94ce:	d101      	bne.n	94d4 <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    94d0:	2305      	movs	r3, #5
    94d2:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    94d4:	9b05      	ldr	r3, [sp, #20]
    94d6:	0e1b      	lsrs	r3, r3, #24
    94d8:	f003 030f 	and.w	r3, r3, #15
    94dc:	2b09      	cmp	r3, #9
    94de:	d101      	bne.n	94e4 <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    94e0:	2300      	movs	r3, #0
    94e2:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    94e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    94e8:	4619      	mov	r1, r3
    94ea:	9807      	ldr	r0, [sp, #28]
    94ec:	f7ff f8b2 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    94f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    94f4:	9a06      	ldr	r2, [sp, #24]
    94f6:	011b      	lsls	r3, r3, #4
    94f8:	4413      	add	r3, r2
    94fa:	3304      	adds	r3, #4
    94fc:	2200      	movs	r2, #0
    94fe:	601a      	str	r2, [r3, #0]

    return result;
    9500:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9502:	4618      	mov	r0, r3
    9504:	b00b      	add	sp, #44	; 0x2c
    9506:	f85d fb04 	ldr.w	pc, [sp], #4
    950a:	bf00      	nop
    950c:	0000f4e8 	.word	0x0000f4e8
    9510:	1fff8fa0 	.word	0x1fff8fa0
    9514:	000f4240 	.word	0x000f4240

00009518 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    9518:	b500      	push	{lr}
    951a:	b089      	sub	sp, #36	; 0x24
    951c:	4603      	mov	r3, r0
    951e:	460a      	mov	r2, r1
    9520:	f88d 3007 	strb.w	r3, [sp, #7]
    9524:	4613      	mov	r3, r2
    9526:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    952a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    952e:	4a41      	ldr	r2, [pc, #260]	; (9634 <FlexCAN_AbortRxTransfer+0x11c>)
    9530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9534:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9536:	f89d 3007 	ldrb.w	r3, [sp, #7]
    953a:	4a3f      	ldr	r2, [pc, #252]	; (9638 <FlexCAN_AbortRxTransfer+0x120>)
    953c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9540:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    9542:	2300      	movs	r3, #0
    9544:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    9548:	2300      	movs	r3, #0
    954a:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    954c:	2300      	movs	r3, #0
    954e:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    9550:	2300      	movs	r3, #0
    9552:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9554:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9558:	9a06      	ldr	r2, [sp, #24]
    955a:	011b      	lsls	r3, r3, #4
    955c:	4413      	add	r3, r2
    955e:	3304      	adds	r3, #4
    9560:	2200      	movs	r2, #0
    9562:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    9564:	9b06      	ldr	r3, [sp, #24]
    9566:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    956a:	2b00      	cmp	r3, #0
    956c:	d03c      	beq.n	95e8 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    956e:	9b07      	ldr	r3, [sp, #28]
    9570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9572:	0e1b      	lsrs	r3, r3, #24
    9574:	b2db      	uxtb	r3, r3
    9576:	f003 030f 	and.w	r3, r3, #15
    957a:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    957e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9582:	4618      	mov	r0, r3
    9584:	f7ff f9f3 	bl	896e <RxFifoOcuppiedLastMsgBuff>
    9588:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    958a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    958e:	9a04      	ldr	r2, [sp, #16]
    9590:	429a      	cmp	r2, r3
    9592:	d21b      	bcs.n	95cc <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9594:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9598:	4619      	mov	r1, r3
    959a:	9807      	ldr	r0, [sp, #28]
    959c:	f001 ff3a 	bl	b414 <FlexCAN_GetMsgBuffRegion>
    95a0:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    95a2:	9b02      	ldr	r3, [sp, #8]
    95a4:	681b      	ldr	r3, [r3, #0]
    95a6:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    95a8:	9b03      	ldr	r3, [sp, #12]
    95aa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    95ae:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    95b0:	9b02      	ldr	r3, [sp, #8]
    95b2:	9a03      	ldr	r2, [sp, #12]
    95b4:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    95b6:	9b03      	ldr	r3, [sp, #12]
    95b8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    95bc:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    95be:	9b03      	ldr	r3, [sp, #12]
    95c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    95c4:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    95c6:	9b02      	ldr	r3, [sp, #8]
    95c8:	9a03      	ldr	r2, [sp, #12]
    95ca:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    95cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    95d0:	2b00      	cmp	r3, #0
    95d2:	d125      	bne.n	9620 <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    95d4:	9b06      	ldr	r3, [sp, #24]
    95d6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    95da:	f89d 1007 	ldrb.w	r1, [sp, #7]
    95de:	2205      	movs	r2, #5
    95e0:	9807      	ldr	r0, [sp, #28]
    95e2:	f002 faf5 	bl	bbd0 <FLEXCAN_ClearMsgBuffIntCmd>
    95e6:	e01b      	b.n	9620 <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    95e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    95ec:	4619      	mov	r1, r3
    95ee:	9807      	ldr	r0, [sp, #28]
    95f0:	f001 ff10 	bl	b414 <FlexCAN_GetMsgBuffRegion>
    95f4:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    95f6:	9b02      	ldr	r3, [sp, #8]
    95f8:	681b      	ldr	r3, [r3, #0]
    95fa:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    95fc:	9b03      	ldr	r3, [sp, #12]
    95fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9602:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    9604:	9b02      	ldr	r3, [sp, #8]
    9606:	9a03      	ldr	r2, [sp, #12]
    9608:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    960a:	9b03      	ldr	r3, [sp, #12]
    960c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9610:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    9612:	9b03      	ldr	r3, [sp, #12]
    9614:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    9618:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    961a:	9b02      	ldr	r3, [sp, #8]
    961c:	9a03      	ldr	r2, [sp, #12]
    961e:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    9620:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9624:	4619      	mov	r1, r3
    9626:	9807      	ldr	r0, [sp, #28]
    9628:	f7ff f814 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    962c:	bf00      	nop
    962e:	b009      	add	sp, #36	; 0x24
    9630:	f85d fb04 	ldr.w	pc, [sp], #4
    9634:	0000f4e8 	.word	0x0000f4e8
    9638:	1fff8fa0 	.word	0x1fff8fa0

0000963c <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    963c:	b500      	push	{lr}
    963e:	b089      	sub	sp, #36	; 0x24
    9640:	4603      	mov	r3, r0
    9642:	9102      	str	r1, [sp, #8]
    9644:	9201      	str	r2, [sp, #4]
    9646:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    964a:	2300      	movs	r3, #0
    964c:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    964e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9652:	4a36      	ldr	r2, [pc, #216]	; (972c <FlexCAN_Ip_Init_Privileged+0xf0>)
    9654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9658:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    965a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    965e:	9a01      	ldr	r2, [sp, #4]
    9660:	9905      	ldr	r1, [sp, #20]
    9662:	4618      	mov	r0, r3
    9664:	f7ff fa84 	bl	8b70 <FlexCAN_InitController>
    9668:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    966a:	9b06      	ldr	r3, [sp, #24]
    966c:	2b00      	cmp	r3, #0
    966e:	d158      	bne.n	9722 <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    9670:	9901      	ldr	r1, [sp, #4]
    9672:	9805      	ldr	r0, [sp, #20]
    9674:	f7ff fad6 	bl	8c24 <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    9678:	9b01      	ldr	r3, [sp, #4]
    967a:	68db      	ldr	r3, [r3, #12]
    967c:	4619      	mov	r1, r3
    967e:	9805      	ldr	r0, [sp, #20]
    9680:	f002 fdb8 	bl	c1f4 <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    9684:	2300      	movs	r3, #0
    9686:	9307      	str	r3, [sp, #28]
    9688:	e01d      	b.n	96c6 <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    968a:	9a02      	ldr	r2, [sp, #8]
    968c:	9b07      	ldr	r3, [sp, #28]
    968e:	011b      	lsls	r3, r3, #4
    9690:	4413      	add	r3, r2
    9692:	3308      	adds	r3, #8
    9694:	2201      	movs	r2, #1
    9696:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    9698:	9a02      	ldr	r2, [sp, #8]
    969a:	9b07      	ldr	r3, [sp, #28]
    969c:	011b      	lsls	r3, r3, #4
    969e:	4413      	add	r3, r2
    96a0:	2200      	movs	r2, #0
    96a2:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    96a4:	9a02      	ldr	r2, [sp, #8]
    96a6:	9b07      	ldr	r3, [sp, #28]
    96a8:	011b      	lsls	r3, r3, #4
    96aa:	4413      	add	r3, r2
    96ac:	3304      	adds	r3, #4
    96ae:	2200      	movs	r2, #0
    96b0:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    96b2:	9a02      	ldr	r2, [sp, #8]
    96b4:	9b07      	ldr	r3, [sp, #28]
    96b6:	011b      	lsls	r3, r3, #4
    96b8:	4413      	add	r3, r2
    96ba:	330c      	adds	r3, #12
    96bc:	2200      	movs	r2, #0
    96be:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    96c0:	9b07      	ldr	r3, [sp, #28]
    96c2:	3301      	adds	r3, #1
    96c4:	9307      	str	r3, [sp, #28]
    96c6:	9b07      	ldr	r3, [sp, #28]
    96c8:	2b1f      	cmp	r3, #31
    96ca:	d9de      	bls.n	968a <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    96cc:	9b01      	ldr	r3, [sp, #4]
    96ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    96d0:	9b02      	ldr	r3, [sp, #8]
    96d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    96d6:	9b01      	ldr	r3, [sp, #4]
    96d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    96da:	9b02      	ldr	r3, [sp, #8]
    96dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    96e0:	9b02      	ldr	r3, [sp, #8]
    96e2:	2200      	movs	r2, #0
    96e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    96e8:	9b01      	ldr	r3, [sp, #4]
    96ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    96ec:	9b02      	ldr	r3, [sp, #8]
    96ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    96f2:	9b02      	ldr	r3, [sp, #8]
    96f4:	2200      	movs	r2, #0
    96f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    96fa:	9b01      	ldr	r3, [sp, #4]
    96fc:	7a1a      	ldrb	r2, [r3, #8]
    96fe:	9b02      	ldr	r3, [sp, #8]
    9700:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    9704:	9b01      	ldr	r3, [sp, #4]
    9706:	681a      	ldr	r2, [r3, #0]
    9708:	9b02      	ldr	r3, [sp, #8]
    970a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    970e:	9b02      	ldr	r3, [sp, #8]
    9710:	2201      	movs	r2, #1
    9712:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    9716:	f89d 300f 	ldrb.w	r3, [sp, #15]
    971a:	4905      	ldr	r1, [pc, #20]	; (9730 <FlexCAN_Ip_Init_Privileged+0xf4>)
    971c:	9a02      	ldr	r2, [sp, #8]
    971e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    9722:	9b06      	ldr	r3, [sp, #24]
}
    9724:	4618      	mov	r0, r3
    9726:	b009      	add	sp, #36	; 0x24
    9728:	f85d fb04 	ldr.w	pc, [sp], #4
    972c:	0000f4e8 	.word	0x0000f4e8
    9730:	1fff8fa0 	.word	0x1fff8fa0

00009734 <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    9734:	b500      	push	{lr}
    9736:	b08b      	sub	sp, #44	; 0x2c
    9738:	9204      	str	r2, [sp, #16]
    973a:	9303      	str	r3, [sp, #12]
    973c:	4603      	mov	r3, r0
    973e:	f88d 3017 	strb.w	r3, [sp, #23]
    9742:	460b      	mov	r3, r1
    9744:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    9748:	2301      	movs	r3, #1
    974a:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    974c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9750:	4a1c      	ldr	r2, [pc, #112]	; (97c4 <FlexCAN_Ip_Send+0x90>)
    9752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9756:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9758:	f89d 3017 	ldrb.w	r3, [sp, #23]
    975c:	4a1a      	ldr	r2, [pc, #104]	; (97c8 <FlexCAN_Ip_Send+0x94>)
    975e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9762:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    9764:	9808      	ldr	r0, [sp, #32]
    9766:	f7ff f8f4 	bl	8952 <FlexCAN_IsListenOnlyModeEnabled>
    976a:	4603      	mov	r3, r0
    976c:	f083 0301 	eor.w	r3, r3, #1
    9770:	b2db      	uxtb	r3, r3
    9772:	2b00      	cmp	r3, #0
    9774:	d021      	beq.n	97ba <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    9776:	f89d 1016 	ldrb.w	r1, [sp, #22]
    977a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    977e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9780:	9300      	str	r3, [sp, #0]
    9782:	9b03      	ldr	r3, [sp, #12]
    9784:	9a04      	ldr	r2, [sp, #16]
    9786:	f7ff fb4b 	bl	8e20 <FlexCAN_StartSendData>
    978a:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    978c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    978e:	2b00      	cmp	r3, #0
    9790:	d113      	bne.n	97ba <FlexCAN_Ip_Send+0x86>
    9792:	9b04      	ldr	r3, [sp, #16]
    9794:	7b1b      	ldrb	r3, [r3, #12]
    9796:	f083 0301 	eor.w	r3, r3, #1
    979a:	b2db      	uxtb	r3, r3
    979c:	2b00      	cmp	r3, #0
    979e:	d00c      	beq.n	97ba <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    97a0:	f89d 2016 	ldrb.w	r2, [sp, #22]
    97a4:	9b07      	ldr	r3, [sp, #28]
    97a6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    97aa:	f89d 1017 	ldrb.w	r1, [sp, #23]
    97ae:	9300      	str	r3, [sp, #0]
    97b0:	2301      	movs	r3, #1
    97b2:	9808      	ldr	r0, [sp, #32]
    97b4:	f002 f9b6 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
    97b8:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    97ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    97bc:	4618      	mov	r0, r3
    97be:	b00b      	add	sp, #44	; 0x2c
    97c0:	f85d fb04 	ldr.w	pc, [sp], #4
    97c4:	0000f4e8 	.word	0x0000f4e8
    97c8:	1fff8fa0 	.word	0x1fff8fa0

000097cc <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    97cc:	b500      	push	{lr}
    97ce:	b08b      	sub	sp, #44	; 0x2c
    97d0:	9202      	str	r2, [sp, #8]
    97d2:	9301      	str	r3, [sp, #4]
    97d4:	4603      	mov	r3, r0
    97d6:	f88d 300f 	strb.w	r3, [sp, #15]
    97da:	460b      	mov	r3, r1
    97dc:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    97e0:	2300      	movs	r3, #0
    97e2:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    97e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    97e8:	4a19      	ldr	r2, [pc, #100]	; (9850 <FlexCAN_Ip_ConfigRxMb+0x84>)
    97ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97ee:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    97f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    97f4:	4619      	mov	r1, r3
    97f6:	9808      	ldr	r0, [sp, #32]
    97f8:	f7fe ff2c 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    97fc:	9b02      	ldr	r3, [sp, #8]
    97fe:	685b      	ldr	r3, [r3, #4]
    9800:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    9802:	9b02      	ldr	r3, [sp, #8]
    9804:	681b      	ldr	r3, [r3, #0]
    9806:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    9808:	9b02      	ldr	r3, [sp, #8]
    980a:	7a1b      	ldrb	r3, [r3, #8]
    980c:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    9810:	230f      	movs	r3, #15
    9812:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    9814:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9818:	aa04      	add	r2, sp, #16
    981a:	9b01      	ldr	r3, [sp, #4]
    981c:	9808      	ldr	r0, [sp, #32]
    981e:	f002 fa25 	bl	bc6c <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    9822:	2300      	movs	r3, #0
    9824:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    9826:	f89d 100e 	ldrb.w	r1, [sp, #14]
    982a:	aa04      	add	r2, sp, #16
    982c:	9b01      	ldr	r3, [sp, #4]
    982e:	9808      	ldr	r0, [sp, #32]
    9830:	f002 fa1c 	bl	bc6c <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    9834:	2304      	movs	r3, #4
    9836:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    9838:	f89d 100e 	ldrb.w	r1, [sp, #14]
    983c:	aa04      	add	r2, sp, #16
    983e:	9b01      	ldr	r3, [sp, #4]
    9840:	9808      	ldr	r0, [sp, #32]
    9842:	f002 fa13 	bl	bc6c <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    9846:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9848:	4618      	mov	r0, r3
    984a:	b00b      	add	sp, #44	; 0x2c
    984c:	f85d fb04 	ldr.w	pc, [sp], #4
    9850:	0000f4e8 	.word	0x0000f4e8

00009854 <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    9854:	b500      	push	{lr}
    9856:	b089      	sub	sp, #36	; 0x24
    9858:	9202      	str	r2, [sp, #8]
    985a:	461a      	mov	r2, r3
    985c:	4603      	mov	r3, r0
    985e:	f88d 300f 	strb.w	r3, [sp, #15]
    9862:	460b      	mov	r3, r1
    9864:	f88d 300e 	strb.w	r3, [sp, #14]
    9868:	4613      	mov	r3, r2
    986a:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    986e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9872:	4a18      	ldr	r2, [pc, #96]	; (98d4 <FlexCAN_Ip_Receive+0x80>)
    9874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9878:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    987a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    987e:	4a16      	ldr	r2, [pc, #88]	; (98d8 <FlexCAN_Ip_Receive+0x84>)
    9880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9884:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    9886:	f89d 300d 	ldrb.w	r3, [sp, #13]
    988a:	f89d 100e 	ldrb.w	r1, [sp, #14]
    988e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9892:	9a02      	ldr	r2, [sp, #8]
    9894:	f7ff fa86 	bl	8da4 <FlexCAN_StartRxMessageBufferData>
    9898:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    989a:	9b07      	ldr	r3, [sp, #28]
    989c:	2b00      	cmp	r3, #0
    989e:	d113      	bne.n	98c8 <FlexCAN_Ip_Receive+0x74>
    98a0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    98a4:	f083 0301 	eor.w	r3, r3, #1
    98a8:	b2db      	uxtb	r3, r3
    98aa:	2b00      	cmp	r3, #0
    98ac:	d00c      	beq.n	98c8 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    98ae:	f89d 200e 	ldrb.w	r2, [sp, #14]
    98b2:	9b05      	ldr	r3, [sp, #20]
    98b4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    98b8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    98bc:	9300      	str	r3, [sp, #0]
    98be:	2301      	movs	r3, #1
    98c0:	9806      	ldr	r0, [sp, #24]
    98c2:	f002 f92f 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
    98c6:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    98c8:	9b07      	ldr	r3, [sp, #28]
}
    98ca:	4618      	mov	r0, r3
    98cc:	b009      	add	sp, #36	; 0x24
    98ce:	f85d fb04 	ldr.w	pc, [sp], #4
    98d2:	bf00      	nop
    98d4:	0000f4e8 	.word	0x0000f4e8
    98d8:	1fff8fa0 	.word	0x1fff8fa0

000098dc <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    98dc:	b500      	push	{lr}
    98de:	b08b      	sub	sp, #44	; 0x2c
    98e0:	9202      	str	r2, [sp, #8]
    98e2:	461a      	mov	r2, r3
    98e4:	4603      	mov	r3, r0
    98e6:	f88d 300f 	strb.w	r3, [sp, #15]
    98ea:	460b      	mov	r3, r1
    98ec:	f88d 300e 	strb.w	r3, [sp, #14]
    98f0:	4613      	mov	r3, r2
    98f2:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    98f6:	2300      	movs	r3, #0
    98f8:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    98fa:	2300      	movs	r3, #0
    98fc:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    98fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9904:	fb02 f303 	mul.w	r3, r2, r3
    9908:	2100      	movs	r1, #0
    990a:	4618      	mov	r0, r3
    990c:	f7f8 f9ac 	bl	1c68 <OsIf_MicrosToTicks>
    9910:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9912:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9916:	4a4c      	ldr	r2, [pc, #304]	; (9a48 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    9918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    991c:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    991e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9922:	4a4a      	ldr	r2, [pc, #296]	; (9a4c <FlexCAN_Ip_ReceiveBlocking+0x170>)
    9924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9928:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    992a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    992e:	f89d 100e 	ldrb.w	r1, [sp, #14]
    9932:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9936:	9a02      	ldr	r2, [sp, #8]
    9938:	f7ff fa34 	bl	8da4 <FlexCAN_StartRxMessageBufferData>
    993c:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    993e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9940:	2b00      	cmp	r3, #0
    9942:	d113      	bne.n	996c <FlexCAN_Ip_ReceiveBlocking+0x90>
    9944:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9948:	f083 0301 	eor.w	r3, r3, #1
    994c:	b2db      	uxtb	r3, r3
    994e:	2b00      	cmp	r3, #0
    9950:	d00c      	beq.n	996c <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    9952:	f89d 200e 	ldrb.w	r2, [sp, #14]
    9956:	9b06      	ldr	r3, [sp, #24]
    9958:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    995c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9960:	9300      	str	r3, [sp, #0]
    9962:	2301      	movs	r3, #1
    9964:	9805      	ldr	r0, [sp, #20]
    9966:	f002 f8dd 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
    996a:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    996c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    996e:	2b00      	cmp	r3, #0
    9970:	d133      	bne.n	99da <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9972:	2000      	movs	r0, #0
    9974:	f7f8 f92c 	bl	1bd0 <OsIf_GetCounter>
    9978:	4603      	mov	r3, r0
    997a:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    997c:	e024      	b.n	99c8 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    997e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9982:	2b00      	cmp	r3, #0
    9984:	d010      	beq.n	99a8 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    9986:	f89d 300e 	ldrb.w	r3, [sp, #14]
    998a:	4619      	mov	r1, r3
    998c:	9805      	ldr	r0, [sp, #20]
    998e:	f7fe fe74 	bl	867a <FlexCAN_GetBuffStatusFlag>
    9992:	4603      	mov	r3, r0
    9994:	2b00      	cmp	r3, #0
    9996:	d007      	beq.n	99a8 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    9998:	f89d 200e 	ldrb.w	r2, [sp, #14]
    999c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    99a0:	4611      	mov	r1, r2
    99a2:	4618      	mov	r0, r3
    99a4:	f7ff fb20 	bl	8fe8 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    99a8:	ab04      	add	r3, sp, #16
    99aa:	2100      	movs	r1, #0
    99ac:	4618      	mov	r0, r3
    99ae:	f7f8 f928 	bl	1c02 <OsIf_GetElapsed>
    99b2:	4602      	mov	r2, r0
    99b4:	9b08      	ldr	r3, [sp, #32]
    99b6:	4413      	add	r3, r2
    99b8:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    99ba:	9a08      	ldr	r2, [sp, #32]
    99bc:	9b07      	ldr	r3, [sp, #28]
    99be:	429a      	cmp	r2, r3
    99c0:	d302      	bcc.n	99c8 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    99c2:	2303      	movs	r3, #3
    99c4:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    99c6:	e008      	b.n	99da <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    99c8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    99cc:	9a06      	ldr	r2, [sp, #24]
    99ce:	011b      	lsls	r3, r3, #4
    99d0:	4413      	add	r3, r2
    99d2:	3304      	adds	r3, #4
    99d4:	681b      	ldr	r3, [r3, #0]
    99d6:	2b01      	cmp	r3, #1
    99d8:	d0d1      	beq.n	997e <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    99da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    99dc:	2b03      	cmp	r3, #3
    99de:	d112      	bne.n	9a06 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    99e0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    99e4:	f083 0301 	eor.w	r3, r3, #1
    99e8:	b2db      	uxtb	r3, r3
    99ea:	2b00      	cmp	r3, #0
    99ec:	d00b      	beq.n	9a06 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    99ee:	f89d 200e 	ldrb.w	r2, [sp, #14]
    99f2:	9b06      	ldr	r3, [sp, #24]
    99f4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    99f8:	f89d 100f 	ldrb.w	r1, [sp, #15]
    99fc:	9300      	str	r3, [sp, #0]
    99fe:	2300      	movs	r3, #0
    9a00:	9805      	ldr	r0, [sp, #20]
    9a02:	f002 f88f 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    9a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a08:	2b04      	cmp	r3, #4
    9a0a:	d018      	beq.n	9a3e <FlexCAN_Ip_ReceiveBlocking+0x162>
    9a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a0e:	2b02      	cmp	r3, #2
    9a10:	d015      	beq.n	9a3e <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    9a12:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9a16:	9a06      	ldr	r2, [sp, #24]
    9a18:	011b      	lsls	r3, r3, #4
    9a1a:	4413      	add	r3, r2
    9a1c:	3304      	adds	r3, #4
    9a1e:	681b      	ldr	r3, [r3, #0]
    9a20:	2b00      	cmp	r3, #0
    9a22:	d102      	bne.n	9a2a <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    9a24:	2300      	movs	r3, #0
    9a26:	9309      	str	r3, [sp, #36]	; 0x24
    9a28:	e009      	b.n	9a3e <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9a2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9a2e:	9a06      	ldr	r2, [sp, #24]
    9a30:	011b      	lsls	r3, r3, #4
    9a32:	4413      	add	r3, r2
    9a34:	3304      	adds	r3, #4
    9a36:	2200      	movs	r2, #0
    9a38:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    9a3a:	2303      	movs	r3, #3
    9a3c:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    9a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9a40:	4618      	mov	r0, r3
    9a42:	b00b      	add	sp, #44	; 0x2c
    9a44:	f85d fb04 	ldr.w	pc, [sp], #4
    9a48:	1fff8fa0 	.word	0x1fff8fa0
    9a4c:	0000f4e8 	.word	0x0000f4e8

00009a50 <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    9a50:	b500      	push	{lr}
    9a52:	b085      	sub	sp, #20
    9a54:	4603      	mov	r3, r0
    9a56:	9100      	str	r1, [sp, #0]
    9a58:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9a5c:	2300      	movs	r3, #0
    9a5e:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    9a60:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9a64:	9900      	ldr	r1, [sp, #0]
    9a66:	4618      	mov	r0, r3
    9a68:	f7ff fa5e 	bl	8f28 <FlexCAN_StartRxMessageFifoData>
    9a6c:	9003      	str	r0, [sp, #12]
    }
    return result;
    9a6e:	9b03      	ldr	r3, [sp, #12]
}
    9a70:	4618      	mov	r0, r3
    9a72:	b005      	add	sp, #20
    9a74:	f85d fb04 	ldr.w	pc, [sp], #4

00009a78 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    9a78:	b500      	push	{lr}
    9a7a:	b087      	sub	sp, #28
    9a7c:	4603      	mov	r3, r0
    9a7e:	9102      	str	r1, [sp, #8]
    9a80:	9201      	str	r2, [sp, #4]
    9a82:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9a86:	2300      	movs	r3, #0
    9a88:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    9a8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9a8e:	9902      	ldr	r1, [sp, #8]
    9a90:	4618      	mov	r0, r3
    9a92:	f7ff fa49 	bl	8f28 <FlexCAN_StartRxMessageFifoData>
    9a96:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    9a98:	9b05      	ldr	r3, [sp, #20]
    9a9a:	2b00      	cmp	r3, #0
    9a9c:	d106      	bne.n	9aac <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    9a9e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9aa2:	9901      	ldr	r1, [sp, #4]
    9aa4:	4618      	mov	r0, r3
    9aa6:	f7ff f8e2 	bl	8c6e <FlexCAN_ProccessLegacyRxFIFO>
    9aaa:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    9aac:	9b05      	ldr	r3, [sp, #20]
}
    9aae:	4618      	mov	r0, r3
    9ab0:	b007      	add	sp, #28
    9ab2:	f85d fb04 	ldr.w	pc, [sp], #4

00009ab6 <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    9ab6:	b500      	push	{lr}
    9ab8:	b089      	sub	sp, #36	; 0x24
    9aba:	4603      	mov	r3, r0
    9abc:	9102      	str	r1, [sp, #8]
    9abe:	9201      	str	r2, [sp, #4]
    9ac0:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9ac4:	2300      	movs	r3, #0
    9ac6:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    9ac8:	2300      	movs	r3, #0
    9aca:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9acc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9ad0:	4a1c      	ldr	r2, [pc, #112]	; (9b44 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    9ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ad6:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    9ad8:	9805      	ldr	r0, [sp, #20]
    9ada:	f7fe fd61 	bl	85a0 <FlexCAN_IsEnabled>
    9ade:	4603      	mov	r3, r0
    9ae0:	2b00      	cmp	r3, #0
    9ae2:	bf14      	ite	ne
    9ae4:	2301      	movne	r3, #1
    9ae6:	2300      	moveq	r3, #0
    9ae8:	b2db      	uxtb	r3, r3
    9aea:	f083 0301 	eor.w	r3, r3, #1
    9aee:	b2db      	uxtb	r3, r3
    9af0:	f88d 3013 	strb.w	r3, [sp, #19]
    9af4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9af8:	f003 0301 	and.w	r3, r3, #1
    9afc:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    9b00:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9b04:	2b00      	cmp	r3, #0
    9b06:	d003      	beq.n	9b10 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    9b08:	9805      	ldr	r0, [sp, #20]
    9b0a:	f001 fd6b 	bl	b5e4 <FlexCAN_Enable>
    9b0e:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    9b10:	9b07      	ldr	r3, [sp, #28]
    9b12:	2b00      	cmp	r3, #0
    9b14:	d104      	bne.n	9b20 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    9b16:	9a01      	ldr	r2, [sp, #4]
    9b18:	9902      	ldr	r1, [sp, #8]
    9b1a:	9805      	ldr	r0, [sp, #20]
    9b1c:	f002 fba5 	bl	c26a <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    9b20:	f89d 3013 	ldrb.w	r3, [sp, #19]
    9b24:	2b00      	cmp	r3, #0
    9b26:	d008      	beq.n	9b3a <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    9b28:	9805      	ldr	r0, [sp, #20]
    9b2a:	f001 fdd9 	bl	b6e0 <FlexCAN_Disable>
    9b2e:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    9b30:	9b06      	ldr	r3, [sp, #24]
    9b32:	2b00      	cmp	r3, #0
    9b34:	d001      	beq.n	9b3a <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    9b36:	9b06      	ldr	r3, [sp, #24]
    9b38:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    9b3a:	9b07      	ldr	r3, [sp, #28]
}
    9b3c:	4618      	mov	r0, r3
    9b3e:	b009      	add	sp, #36	; 0x24
    9b40:	f85d fb04 	ldr.w	pc, [sp], #4
    9b44:	0000f4e8 	.word	0x0000f4e8

00009b48 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    9b48:	b500      	push	{lr}
    9b4a:	b08f      	sub	sp, #60	; 0x3c
    9b4c:	9204      	str	r2, [sp, #16]
    9b4e:	9303      	str	r3, [sp, #12]
    9b50:	4603      	mov	r3, r0
    9b52:	f88d 3017 	strb.w	r3, [sp, #23]
    9b56:	460b      	mov	r3, r1
    9b58:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9b5c:	2300      	movs	r3, #0
    9b5e:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9b60:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9b64:	4a27      	ldr	r2, [pc, #156]	; (9c04 <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    9b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b6a:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    9b6c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9b70:	4a25      	ldr	r2, [pc, #148]	; (9c08 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    9b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b76:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    9b78:	2300      	movs	r3, #0
    9b7a:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    9b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9b7e:	2b00      	cmp	r3, #0
    9b80:	d13a      	bne.n	9bf8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    9b82:	9b04      	ldr	r3, [sp, #16]
    9b84:	685b      	ldr	r3, [r3, #4]
    9b86:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    9b88:	9b04      	ldr	r3, [sp, #16]
    9b8a:	681b      	ldr	r3, [r3, #0]
    9b8c:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    9b8e:	230a      	movs	r3, #10
    9b90:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    9b92:	2300      	movs	r3, #0
    9b94:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    9b98:	2300      	movs	r3, #0
    9b9a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    9b9e:	2300      	movs	r3, #0
    9ba0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    9ba4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9ba8:	4619      	mov	r1, r3
    9baa:	980c      	ldr	r0, [sp, #48]	; 0x30
    9bac:	f7fe fd52 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9bb0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9bb4:	4619      	mov	r1, r3
    9bb6:	980c      	ldr	r0, [sp, #48]	; 0x30
    9bb8:	f001 fc2c 	bl	b414 <FlexCAN_GetMsgBuffRegion>
    9bbc:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    9bbe:	9b04      	ldr	r3, [sp, #16]
    9bc0:	7adb      	ldrb	r3, [r3, #11]
    9bc2:	a906      	add	r1, sp, #24
    9bc4:	9300      	str	r3, [sp, #0]
    9bc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9bc8:	9a03      	ldr	r2, [sp, #12]
    9bca:	980a      	ldr	r0, [sp, #40]	; 0x28
    9bcc:	f002 f974 	bl	beb8 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    9bd0:	9b04      	ldr	r3, [sp, #16]
    9bd2:	7b1b      	ldrb	r3, [r3, #12]
    9bd4:	f083 0301 	eor.w	r3, r3, #1
    9bd8:	b2db      	uxtb	r3, r3
    9bda:	2b00      	cmp	r3, #0
    9bdc:	d00c      	beq.n	9bf8 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    9bde:	f89d 2016 	ldrb.w	r2, [sp, #22]
    9be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9be4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9be8:	f89d 1017 	ldrb.w	r1, [sp, #23]
    9bec:	9300      	str	r3, [sp, #0]
    9bee:	2301      	movs	r3, #1
    9bf0:	980c      	ldr	r0, [sp, #48]	; 0x30
    9bf2:	f001 ff97 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
    9bf6:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    9bf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    9bfa:	4618      	mov	r0, r3
    9bfc:	b00f      	add	sp, #60	; 0x3c
    9bfe:	f85d fb04 	ldr.w	pc, [sp], #4
    9c02:	bf00      	nop
    9c04:	0000f4e8 	.word	0x0000f4e8
    9c08:	1fff8fa0 	.word	0x1fff8fa0

00009c0c <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    9c0c:	b084      	sub	sp, #16
    9c0e:	4603      	mov	r3, r0
    9c10:	460a      	mov	r2, r1
    9c12:	f88d 3007 	strb.w	r3, [sp, #7]
    9c16:	4613      	mov	r3, r2
    9c18:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9c20:	4a0d      	ldr	r2, [pc, #52]	; (9c58 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    9c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c26:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    9c28:	2301      	movs	r3, #1
    9c2a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    9c2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9c30:	2b1f      	cmp	r3, #31
    9c32:	d80d      	bhi.n	9c50 <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    9c34:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9c38:	9a02      	ldr	r2, [sp, #8]
    9c3a:	011b      	lsls	r3, r3, #4
    9c3c:	4413      	add	r3, r2
    9c3e:	3304      	adds	r3, #4
    9c40:	681b      	ldr	r3, [r3, #0]
    9c42:	2b00      	cmp	r3, #0
    9c44:	d102      	bne.n	9c4c <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    9c46:	2300      	movs	r3, #0
    9c48:	9303      	str	r3, [sp, #12]
    9c4a:	e001      	b.n	9c50 <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    9c4c:	2302      	movs	r3, #2
    9c4e:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    9c50:	9b03      	ldr	r3, [sp, #12]
}
    9c52:	4618      	mov	r0, r3
    9c54:	b004      	add	sp, #16
    9c56:	4770      	bx	lr
    9c58:	1fff8fa0 	.word	0x1fff8fa0

00009c5c <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    9c5c:	b500      	push	{lr}
    9c5e:	b087      	sub	sp, #28
    9c60:	4603      	mov	r3, r0
    9c62:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9c66:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9c6a:	4a1d      	ldr	r2, [pc, #116]	; (9ce0 <FlexCAN_CompleteRxMessageFifoData+0x84>)
    9c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c70:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9c72:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9c76:	4a1b      	ldr	r2, [pc, #108]	; (9ce4 <FlexCAN_CompleteRxMessageFifoData+0x88>)
    9c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9c7c:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    9c7e:	9b04      	ldr	r3, [sp, #16]
    9c80:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    9c84:	2b00      	cmp	r3, #0
    9c86:	d120      	bne.n	9cca <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    9c88:	9b04      	ldr	r3, [sp, #16]
    9c8a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9c8e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9c92:	9300      	str	r3, [sp, #0]
    9c94:	2300      	movs	r3, #0
    9c96:	2205      	movs	r2, #5
    9c98:	9805      	ldr	r0, [sp, #20]
    9c9a:	f001 ff43 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    9c9e:	9b04      	ldr	r3, [sp, #16]
    9ca0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9ca4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9ca8:	9300      	str	r3, [sp, #0]
    9caa:	2300      	movs	r3, #0
    9cac:	2206      	movs	r2, #6
    9cae:	9805      	ldr	r0, [sp, #20]
    9cb0:	f001 ff38 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    9cb4:	9b04      	ldr	r3, [sp, #16]
    9cb6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9cba:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9cbe:	9300      	str	r3, [sp, #0]
    9cc0:	2300      	movs	r3, #0
    9cc2:	2207      	movs	r2, #7
    9cc4:	9805      	ldr	r0, [sp, #20]
    9cc6:	f001 ff2d 	bl	bb24 <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    9cca:	9b04      	ldr	r3, [sp, #16]
    9ccc:	2200      	movs	r2, #0
    9cce:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    9cd0:	9b04      	ldr	r3, [sp, #16]
    9cd2:	2200      	movs	r2, #0
    9cd4:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    9cd6:	bf00      	nop
    9cd8:	b007      	add	sp, #28
    9cda:	f85d fb04 	ldr.w	pc, [sp], #4
    9cde:	bf00      	nop
    9ce0:	0000f4e8 	.word	0x0000f4e8
    9ce4:	1fff8fa0 	.word	0x1fff8fa0

00009ce8 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    9ce8:	b500      	push	{lr}
    9cea:	b08b      	sub	sp, #44	; 0x2c
    9cec:	4603      	mov	r3, r0
    9cee:	9102      	str	r1, [sp, #8]
    9cf0:	9201      	str	r2, [sp, #4]
    9cf2:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    9cf6:	2300      	movs	r3, #0
    9cf8:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    9cfa:	2300      	movs	r3, #0
    9cfc:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9cfe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d02:	4a3f      	ldr	r2, [pc, #252]	; (9e00 <FlexCAN_IRQHandler+0x118>)
    9d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d08:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9d0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d0e:	4a3d      	ldr	r2, [pc, #244]	; (9e04 <FlexCAN_IRQHandler+0x11c>)
    9d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d14:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    9d16:	9b01      	ldr	r3, [sp, #4]
    9d18:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    9d1a:	9b05      	ldr	r3, [sp, #20]
    9d1c:	2b00      	cmp	r3, #0
    9d1e:	d05c      	beq.n	9dda <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    9d20:	9907      	ldr	r1, [sp, #28]
    9d22:	9806      	ldr	r0, [sp, #24]
    9d24:	f7fe fe47 	bl	89b6 <FlexCAN_GetMsgBuffIntStatusFlag>
    9d28:	4603      	mov	r3, r0
    9d2a:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    9d2c:	e008      	b.n	9d40 <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    9d2e:	9b07      	ldr	r3, [sp, #28]
    9d30:	3b01      	subs	r3, #1
    9d32:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    9d34:	9907      	ldr	r1, [sp, #28]
    9d36:	9806      	ldr	r0, [sp, #24]
    9d38:	f7fe fe3d 	bl	89b6 <FlexCAN_GetMsgBuffIntStatusFlag>
    9d3c:	4603      	mov	r3, r0
    9d3e:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    9d40:	9b08      	ldr	r3, [sp, #32]
    9d42:	2b00      	cmp	r3, #0
    9d44:	d103      	bne.n	9d4e <FlexCAN_IRQHandler+0x66>
    9d46:	9a07      	ldr	r2, [sp, #28]
    9d48:	9b02      	ldr	r3, [sp, #8]
    9d4a:	429a      	cmp	r2, r3
    9d4c:	d8ef      	bhi.n	9d2e <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    9d4e:	9b08      	ldr	r3, [sp, #32]
    9d50:	2b00      	cmp	r3, #0
    9d52:	d050      	beq.n	9df6 <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    9d54:	9b07      	ldr	r3, [sp, #28]
    9d56:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    9d58:	9b05      	ldr	r3, [sp, #20]
    9d5a:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9d5e:	2b00      	cmp	r3, #0
    9d60:	d00b      	beq.n	9d7a <FlexCAN_IRQHandler+0x92>
    9d62:	9b07      	ldr	r3, [sp, #28]
    9d64:	2b07      	cmp	r3, #7
    9d66:	d808      	bhi.n	9d7a <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    9d68:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d6c:	9907      	ldr	r1, [sp, #28]
    9d6e:	4618      	mov	r0, r3
    9d70:	f7ff fac2 	bl	92f8 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    9d74:	2300      	movs	r3, #0
    9d76:	9309      	str	r3, [sp, #36]	; 0x24
    9d78:	e00d      	b.n	9d96 <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    9d7a:	9a05      	ldr	r2, [sp, #20]
    9d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d7e:	011b      	lsls	r3, r3, #4
    9d80:	4413      	add	r3, r2
    9d82:	3304      	adds	r3, #4
    9d84:	681b      	ldr	r3, [r3, #0]
    9d86:	2b01      	cmp	r3, #1
    9d88:	d105      	bne.n	9d96 <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    9d8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9d8e:	9907      	ldr	r1, [sp, #28]
    9d90:	4618      	mov	r0, r3
    9d92:	f7ff f929 	bl	8fe8 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    9d96:	9a05      	ldr	r2, [sp, #20]
    9d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d9a:	011b      	lsls	r3, r3, #4
    9d9c:	4413      	add	r3, r2
    9d9e:	3304      	adds	r3, #4
    9da0:	681b      	ldr	r3, [r3, #0]
    9da2:	2b02      	cmp	r3, #2
    9da4:	d105      	bne.n	9db2 <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    9da6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9daa:	9907      	ldr	r1, [sp, #28]
    9dac:	4618      	mov	r0, r3
    9dae:	f7ff fa09 	bl	91c4 <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    9db2:	9907      	ldr	r1, [sp, #28]
    9db4:	9806      	ldr	r0, [sp, #24]
    9db6:	f7fe fdfe 	bl	89b6 <FlexCAN_GetMsgBuffIntStatusFlag>
    9dba:	4603      	mov	r3, r0
    9dbc:	2b00      	cmp	r3, #0
    9dbe:	d01a      	beq.n	9df6 <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    9dc0:	9a05      	ldr	r2, [sp, #20]
    9dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9dc4:	011b      	lsls	r3, r3, #4
    9dc6:	4413      	add	r3, r2
    9dc8:	3304      	adds	r3, #4
    9dca:	681b      	ldr	r3, [r3, #0]
    9dcc:	2b00      	cmp	r3, #0
    9dce:	d112      	bne.n	9df6 <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9dd0:	9907      	ldr	r1, [sp, #28]
    9dd2:	9806      	ldr	r0, [sp, #24]
    9dd4:	f7fe fc3e 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    9dd8:	e00d      	b.n	9df6 <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    9dda:	9b02      	ldr	r3, [sp, #8]
    9ddc:	9307      	str	r3, [sp, #28]
    9dde:	e006      	b.n	9dee <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9de0:	9907      	ldr	r1, [sp, #28]
    9de2:	9806      	ldr	r0, [sp, #24]
    9de4:	f7fe fc36 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    9de8:	9b07      	ldr	r3, [sp, #28]
    9dea:	3301      	adds	r3, #1
    9dec:	9307      	str	r3, [sp, #28]
    9dee:	9a07      	ldr	r2, [sp, #28]
    9df0:	9b01      	ldr	r3, [sp, #4]
    9df2:	429a      	cmp	r2, r3
    9df4:	d9f4      	bls.n	9de0 <FlexCAN_IRQHandler+0xf8>
}
    9df6:	bf00      	nop
    9df8:	b00b      	add	sp, #44	; 0x2c
    9dfa:	f85d fb04 	ldr.w	pc, [sp], #4
    9dfe:	bf00      	nop
    9e00:	0000f4e8 	.word	0x0000f4e8
    9e04:	1fff8fa0 	.word	0x1fff8fa0

00009e08 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    9e08:	b084      	sub	sp, #16
    9e0a:	4603      	mov	r3, r0
    9e0c:	9100      	str	r1, [sp, #0]
    9e0e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9e12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e16:	4a05      	ldr	r2, [pc, #20]	; (9e2c <FlexCAN_Ip_ClearErrorStatus+0x24>)
    9e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e1c:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    9e1e:	9b03      	ldr	r3, [sp, #12]
    9e20:	9a00      	ldr	r2, [sp, #0]
    9e22:	621a      	str	r2, [r3, #32]
}
    9e24:	bf00      	nop
    9e26:	b004      	add	sp, #16
    9e28:	4770      	bx	lr
    9e2a:	bf00      	nop
    9e2c:	0000f4e8 	.word	0x0000f4e8

00009e30 <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    9e30:	b084      	sub	sp, #16
    9e32:	4603      	mov	r3, r0
    9e34:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9e38:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e3c:	4a04      	ldr	r2, [pc, #16]	; (9e50 <FlexCAN_Ip_GetErrorStatus+0x20>)
    9e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e42:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    9e44:	9b03      	ldr	r3, [sp, #12]
    9e46:	6a1b      	ldr	r3, [r3, #32]
}
    9e48:	4618      	mov	r0, r3
    9e4a:	b004      	add	sp, #16
    9e4c:	4770      	bx	lr
    9e4e:	bf00      	nop
    9e50:	0000f4e8 	.word	0x0000f4e8

00009e54 <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    9e54:	b084      	sub	sp, #16
    9e56:	4603      	mov	r3, r0
    9e58:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9e5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e60:	4a04      	ldr	r2, [pc, #16]	; (9e74 <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    9e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e66:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    9e68:	9b03      	ldr	r3, [sp, #12]
    9e6a:	69db      	ldr	r3, [r3, #28]
    9e6c:	b2db      	uxtb	r3, r3
}
    9e6e:	4618      	mov	r0, r3
    9e70:	b004      	add	sp, #16
    9e72:	4770      	bx	lr
    9e74:	0000f4e8 	.word	0x0000f4e8

00009e78 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    9e78:	b084      	sub	sp, #16
    9e7a:	4603      	mov	r3, r0
    9e7c:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9e80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e84:	4a05      	ldr	r2, [pc, #20]	; (9e9c <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    9e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e8a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    9e8c:	9b03      	ldr	r3, [sp, #12]
    9e8e:	69db      	ldr	r3, [r3, #28]
    9e90:	0a1b      	lsrs	r3, r3, #8
    9e92:	b2db      	uxtb	r3, r3
}
    9e94:	4618      	mov	r0, r3
    9e96:	b004      	add	sp, #16
    9e98:	4770      	bx	lr
    9e9a:	bf00      	nop
    9e9c:	0000f4e8 	.word	0x0000f4e8

00009ea0 <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    9ea0:	b510      	push	{r4, lr}
    9ea2:	b086      	sub	sp, #24
    9ea4:	4603      	mov	r3, r0
    9ea6:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    9eaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9eae:	4a29      	ldr	r2, [pc, #164]	; (9f54 <FlexCAN_Error_IRQHandler+0xb4>)
    9eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eb4:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9eb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9eba:	4a27      	ldr	r2, [pc, #156]	; (9f58 <FlexCAN_Error_IRQHandler+0xb8>)
    9ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ec0:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    9ec2:	2300      	movs	r3, #0
    9ec4:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    9ec6:	9b03      	ldr	r3, [sp, #12]
    9ec8:	2b00      	cmp	r3, #0
    9eca:	d03d      	beq.n	9f48 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    9ecc:	9b04      	ldr	r3, [sp, #16]
    9ece:	6a1b      	ldr	r3, [r3, #32]
    9ed0:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    9ed2:	9b05      	ldr	r3, [sp, #20]
    9ed4:	f003 0302 	and.w	r3, r3, #2
    9ed8:	2b00      	cmp	r3, #0
    9eda:	d019      	beq.n	9f10 <FlexCAN_Error_IRQHandler+0x70>
    9edc:	9b04      	ldr	r3, [sp, #16]
    9ede:	685b      	ldr	r3, [r3, #4]
    9ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    9ee4:	2b00      	cmp	r3, #0
    9ee6:	d013      	beq.n	9f10 <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    9ee8:	9b04      	ldr	r3, [sp, #16]
    9eea:	2202      	movs	r2, #2
    9eec:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    9eee:	9b03      	ldr	r3, [sp, #12]
    9ef0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    9ef4:	2b00      	cmp	r3, #0
    9ef6:	d00b      	beq.n	9f10 <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    9ef8:	9b03      	ldr	r3, [sp, #12]
    9efa:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    9efe:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9f02:	9b03      	ldr	r3, [sp, #12]
    9f04:	9a05      	ldr	r2, [sp, #20]
    9f06:	2105      	movs	r1, #5
    9f08:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    9f0a:	9b04      	ldr	r3, [sp, #16]
    9f0c:	6a1b      	ldr	r3, [r3, #32]
    9f0e:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    9f10:	9b05      	ldr	r3, [sp, #20]
    9f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    9f16:	2b00      	cmp	r3, #0
    9f18:	d019      	beq.n	9f4e <FlexCAN_Error_IRQHandler+0xae>
    9f1a:	9b04      	ldr	r3, [sp, #16]
    9f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9f1e:	2b00      	cmp	r3, #0
    9f20:	da15      	bge.n	9f4e <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    9f22:	9b04      	ldr	r3, [sp, #16]
    9f24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    9f28:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    9f2a:	9b03      	ldr	r3, [sp, #12]
    9f2c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    9f30:	2b00      	cmp	r3, #0
    9f32:	d00c      	beq.n	9f4e <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    9f34:	9b03      	ldr	r3, [sp, #12]
    9f36:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    9f3a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9f3e:	9b03      	ldr	r3, [sp, #12]
    9f40:	9a05      	ldr	r2, [sp, #20]
    9f42:	2106      	movs	r1, #6
    9f44:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    9f46:	e002      	b.n	9f4e <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    9f48:	9b04      	ldr	r3, [sp, #16]
    9f4a:	4a04      	ldr	r2, [pc, #16]	; (9f5c <FlexCAN_Error_IRQHandler+0xbc>)
    9f4c:	621a      	str	r2, [r3, #32]
}
    9f4e:	bf00      	nop
    9f50:	b006      	add	sp, #24
    9f52:	bd10      	pop	{r4, pc}
    9f54:	0000f4e8 	.word	0x0000f4e8
    9f58:	1fff8fa0 	.word	0x1fff8fa0
    9f5c:	00300002 	.word	0x00300002

00009f60 <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    9f60:	b510      	push	{r4, lr}
    9f62:	b086      	sub	sp, #24
    9f64:	4603      	mov	r3, r0
    9f66:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9f6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f6e:	4a3a      	ldr	r2, [pc, #232]	; (a058 <FlexCAN_BusOff_IRQHandler+0xf8>)
    9f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f74:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9f76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f7a:	4a38      	ldr	r2, [pc, #224]	; (a05c <FlexCAN_BusOff_IRQHandler+0xfc>)
    9f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f80:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    9f82:	2300      	movs	r3, #0
    9f84:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    9f86:	9b03      	ldr	r3, [sp, #12]
    9f88:	2b00      	cmp	r3, #0
    9f8a:	d05f      	beq.n	a04c <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    9f8c:	9b04      	ldr	r3, [sp, #16]
    9f8e:	6a1b      	ldr	r3, [r3, #32]
    9f90:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    9f92:	9b05      	ldr	r3, [sp, #20]
    9f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    9f98:	2b00      	cmp	r3, #0
    9f9a:	d01a      	beq.n	9fd2 <FlexCAN_BusOff_IRQHandler+0x72>
    9f9c:	9b04      	ldr	r3, [sp, #16]
    9f9e:	685b      	ldr	r3, [r3, #4]
    9fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    9fa4:	2b00      	cmp	r3, #0
    9fa6:	d014      	beq.n	9fd2 <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    9fa8:	9b04      	ldr	r3, [sp, #16]
    9faa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9fae:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    9fb0:	9b03      	ldr	r3, [sp, #12]
    9fb2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    9fb6:	2b00      	cmp	r3, #0
    9fb8:	d00b      	beq.n	9fd2 <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    9fba:	9b03      	ldr	r3, [sp, #12]
    9fbc:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    9fc0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9fc4:	9b03      	ldr	r3, [sp, #12]
    9fc6:	9a05      	ldr	r2, [sp, #20]
    9fc8:	2109      	movs	r1, #9
    9fca:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    9fcc:	9b04      	ldr	r3, [sp, #16]
    9fce:	6a1b      	ldr	r3, [r3, #32]
    9fd0:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    9fd2:	9b05      	ldr	r3, [sp, #20]
    9fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    9fd8:	2b00      	cmp	r3, #0
    9fda:	d01a      	beq.n	a012 <FlexCAN_BusOff_IRQHandler+0xb2>
    9fdc:	9b04      	ldr	r3, [sp, #16]
    9fde:	685b      	ldr	r3, [r3, #4]
    9fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9fe4:	2b00      	cmp	r3, #0
    9fe6:	d014      	beq.n	a012 <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    9fe8:	9b04      	ldr	r3, [sp, #16]
    9fea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9fee:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    9ff0:	9b03      	ldr	r3, [sp, #12]
    9ff2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    9ff6:	2b00      	cmp	r3, #0
    9ff8:	d00b      	beq.n	a012 <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    9ffa:	9b03      	ldr	r3, [sp, #12]
    9ffc:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a000:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a004:	9b03      	ldr	r3, [sp, #12]
    a006:	9a05      	ldr	r2, [sp, #20]
    a008:	2108      	movs	r1, #8
    a00a:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    a00c:	9b04      	ldr	r3, [sp, #16]
    a00e:	6a1b      	ldr	r3, [r3, #32]
    a010:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    a012:	9b05      	ldr	r3, [sp, #20]
    a014:	f003 0304 	and.w	r3, r3, #4
    a018:	2b00      	cmp	r3, #0
    a01a:	d01a      	beq.n	a052 <FlexCAN_BusOff_IRQHandler+0xf2>
    a01c:	9b04      	ldr	r3, [sp, #16]
    a01e:	685b      	ldr	r3, [r3, #4]
    a020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    a024:	2b00      	cmp	r3, #0
    a026:	d014      	beq.n	a052 <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    a028:	9b04      	ldr	r3, [sp, #16]
    a02a:	2204      	movs	r2, #4
    a02c:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a02e:	9b03      	ldr	r3, [sp, #12]
    a030:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a034:	2b00      	cmp	r3, #0
    a036:	d00c      	beq.n	a052 <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    a038:	9b03      	ldr	r3, [sp, #12]
    a03a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a03e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a042:	9b03      	ldr	r3, [sp, #12]
    a044:	9a05      	ldr	r2, [sp, #20]
    a046:	2107      	movs	r1, #7
    a048:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    a04a:	e002      	b.n	a052 <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    a04c:	9b04      	ldr	r3, [sp, #16]
    a04e:	4a04      	ldr	r2, [pc, #16]	; (a060 <FlexCAN_BusOff_IRQHandler+0x100>)
    a050:	621a      	str	r2, [r3, #32]
}
    a052:	bf00      	nop
    a054:	b006      	add	sp, #24
    a056:	bd10      	pop	{r4, pc}
    a058:	0000f4e8 	.word	0x0000f4e8
    a05c:	1fff8fa0 	.word	0x1fff8fa0
    a060:	000b0004 	.word	0x000b0004

0000a064 <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    a064:	b500      	push	{lr}
    a066:	b091      	sub	sp, #68	; 0x44
    a068:	9204      	str	r2, [sp, #16]
    a06a:	9303      	str	r3, [sp, #12]
    a06c:	4603      	mov	r3, r0
    a06e:	f88d 3017 	strb.w	r3, [sp, #23]
    a072:	460b      	mov	r3, r1
    a074:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a078:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a07c:	4a5f      	ldr	r2, [pc, #380]	; (a1fc <FlexCAN_Ip_SendBlocking+0x198>)
    a07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a082:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a084:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a088:	4a5d      	ldr	r2, [pc, #372]	; (a200 <FlexCAN_Ip_SendBlocking+0x19c>)
    a08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a08e:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    a090:	2300      	movs	r3, #0
    a092:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    a094:	2300      	movs	r3, #0
    a096:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a09a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a09e:	fb02 f303 	mul.w	r3, r2, r3
    a0a2:	2100      	movs	r1, #0
    a0a4:	4618      	mov	r0, r3
    a0a6:	f7f7 fddf 	bl	1c68 <OsIf_MicrosToTicks>
    a0aa:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    a0ac:	2300      	movs	r3, #0
    a0ae:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    a0b0:	2300      	movs	r3, #0
    a0b2:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    a0b4:	2300      	movs	r3, #0
    a0b6:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    a0b8:	f89d 1016 	ldrb.w	r1, [sp, #22]
    a0bc:	f89d 0017 	ldrb.w	r0, [sp, #23]
    a0c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a0c2:	9300      	str	r3, [sp, #0]
    a0c4:	9b03      	ldr	r3, [sp, #12]
    a0c6:	9a04      	ldr	r2, [sp, #16]
    a0c8:	f7fe feaa 	bl	8e20 <FlexCAN_StartSendData>
    a0cc:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    a0ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0d0:	2b00      	cmp	r3, #0
    a0d2:	f040 808d 	bne.w	a1f0 <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a0d6:	2000      	movs	r0, #0
    a0d8:	f7f7 fd7a 	bl	1bd0 <OsIf_GetCounter>
    a0dc:	4603      	mov	r3, r0
    a0de:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    a0e0:	e00f      	b.n	a102 <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a0e2:	ab07      	add	r3, sp, #28
    a0e4:	2100      	movs	r1, #0
    a0e6:	4618      	mov	r0, r3
    a0e8:	f7f7 fd8b 	bl	1c02 <OsIf_GetElapsed>
    a0ec:	4602      	mov	r2, r0
    a0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a0f0:	4413      	add	r3, r2
    a0f2:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    a0f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a0f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a0f8:	429a      	cmp	r2, r3
    a0fa:	d302      	bcc.n	a102 <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    a0fc:	2303      	movs	r3, #3
    a0fe:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    a100:	e008      	b.n	a114 <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    a102:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a106:	4619      	mov	r1, r3
    a108:	980d      	ldr	r0, [sp, #52]	; 0x34
    a10a:	f7fe fab6 	bl	867a <FlexCAN_GetBuffStatusFlag>
    a10e:	4603      	mov	r3, r0
    a110:	2b01      	cmp	r3, #1
    a112:	d1e6      	bne.n	a0e2 <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    a114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a116:	2b03      	cmp	r3, #3
    a118:	d15c      	bne.n	a1d4 <FlexCAN_Ip_SendBlocking+0x170>
    a11a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a11e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a120:	011b      	lsls	r3, r3, #4
    a122:	4413      	add	r3, r2
    a124:	3304      	adds	r3, #4
    a126:	681b      	ldr	r3, [r3, #0]
    a128:	2b00      	cmp	r3, #0
    a12a:	d053      	beq.n	a1d4 <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a12c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a130:	4619      	mov	r1, r3
    a132:	980d      	ldr	r0, [sp, #52]	; 0x34
    a134:	f7fe fa8e 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    a138:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a13c:	4619      	mov	r1, r3
    a13e:	980d      	ldr	r0, [sp, #52]	; 0x34
    a140:	f001 f968 	bl	b414 <FlexCAN_GetMsgBuffRegion>
    a144:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    a146:	9b08      	ldr	r3, [sp, #32]
    a148:	681b      	ldr	r3, [r3, #0]
    a14a:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    a14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a14e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    a152:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    a154:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a156:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    a15a:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    a15c:	9b08      	ldr	r3, [sp, #32]
    a15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a160:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a162:	2100      	movs	r1, #0
    a164:	4827      	ldr	r0, [pc, #156]	; (a204 <FlexCAN_Ip_SendBlocking+0x1a0>)
    a166:	f7f7 fd7f 	bl	1c68 <OsIf_MicrosToTicks>
    a16a:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a16c:	2000      	movs	r0, #0
    a16e:	f7f7 fd2f 	bl	1bd0 <OsIf_GetCounter>
    a172:	4603      	mov	r3, r0
    a174:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    a176:	2300      	movs	r3, #0
    a178:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    a17a:	e00f      	b.n	a19c <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a17c:	ab07      	add	r3, sp, #28
    a17e:	2100      	movs	r1, #0
    a180:	4618      	mov	r0, r3
    a182:	f7f7 fd3e 	bl	1c02 <OsIf_GetElapsed>
    a186:	4602      	mov	r2, r0
    a188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a18a:	4413      	add	r3, r2
    a18c:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    a18e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a192:	429a      	cmp	r2, r3
    a194:	d302      	bcc.n	a19c <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    a196:	2303      	movs	r3, #3
    a198:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    a19a:	e008      	b.n	a1ae <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    a19c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a1a0:	4619      	mov	r1, r3
    a1a2:	980d      	ldr	r0, [sp, #52]	; 0x34
    a1a4:	f7fe fa69 	bl	867a <FlexCAN_GetBuffStatusFlag>
    a1a8:	4603      	mov	r3, r0
    a1aa:	2b00      	cmp	r3, #0
    a1ac:	d0e6      	beq.n	a17c <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    a1ae:	9b08      	ldr	r3, [sp, #32]
    a1b0:	681b      	ldr	r3, [r3, #0]
    a1b2:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    a1b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1b6:	0e1b      	lsrs	r3, r3, #24
    a1b8:	f003 030f 	and.w	r3, r3, #15
    a1bc:	2b08      	cmp	r3, #8
    a1be:	d101      	bne.n	a1c4 <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    a1c0:	2300      	movs	r3, #0
    a1c2:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    a1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a1c6:	0e1b      	lsrs	r3, r3, #24
    a1c8:	f003 030f 	and.w	r3, r3, #15
    a1cc:	2b09      	cmp	r3, #9
    a1ce:	d101      	bne.n	a1d4 <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    a1d0:	2303      	movs	r3, #3
    a1d2:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a1d4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a1d8:	4619      	mov	r1, r3
    a1da:	980d      	ldr	r0, [sp, #52]	; 0x34
    a1dc:	f7fe fa3a 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    a1e0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a1e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a1e6:	011b      	lsls	r3, r3, #4
    a1e8:	4413      	add	r3, r2
    a1ea:	3304      	adds	r3, #4
    a1ec:	2200      	movs	r2, #0
    a1ee:	601a      	str	r2, [r3, #0]
    }
    return result;
    a1f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    a1f2:	4618      	mov	r0, r3
    a1f4:	b011      	add	sp, #68	; 0x44
    a1f6:	f85d fb04 	ldr.w	pc, [sp], #4
    a1fa:	bf00      	nop
    a1fc:	0000f4e8 	.word	0x0000f4e8
    a200:	1fff8fa0 	.word	0x1fff8fa0
    a204:	000f4240 	.word	0x000f4240

0000a208 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    a208:	b500      	push	{lr}
    a20a:	b087      	sub	sp, #28
    a20c:	4603      	mov	r3, r0
    a20e:	9100      	str	r1, [sp, #0]
    a210:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a214:	2300      	movs	r3, #0
    a216:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a218:	2300      	movs	r3, #0
    a21a:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a21c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a220:	4a1c      	ldr	r2, [pc, #112]	; (a294 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    a222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a226:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a228:	9803      	ldr	r0, [sp, #12]
    a22a:	f7fe f9b9 	bl	85a0 <FlexCAN_IsEnabled>
    a22e:	4603      	mov	r3, r0
    a230:	2b00      	cmp	r3, #0
    a232:	bf14      	ite	ne
    a234:	2301      	movne	r3, #1
    a236:	2300      	moveq	r3, #0
    a238:	b2db      	uxtb	r3, r3
    a23a:	f083 0301 	eor.w	r3, r3, #1
    a23e:	b2db      	uxtb	r3, r3
    a240:	f88d 300b 	strb.w	r3, [sp, #11]
    a244:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a248:	f003 0301 	and.w	r3, r3, #1
    a24c:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a250:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a254:	2b00      	cmp	r3, #0
    a256:	d003      	beq.n	a260 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a258:	9803      	ldr	r0, [sp, #12]
    a25a:	f001 f9c3 	bl	b5e4 <FlexCAN_Enable>
    a25e:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a260:	9b05      	ldr	r3, [sp, #20]
    a262:	2b00      	cmp	r3, #0
    a264:	d103      	bne.n	a26e <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    a266:	9900      	ldr	r1, [sp, #0]
    a268:	9803      	ldr	r0, [sp, #12]
    a26a:	f7fe fbc3 	bl	89f4 <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    a26e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a272:	2b00      	cmp	r3, #0
    a274:	d008      	beq.n	a288 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    a276:	9803      	ldr	r0, [sp, #12]
    a278:	f001 fa32 	bl	b6e0 <FlexCAN_Disable>
    a27c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a27e:	9b04      	ldr	r3, [sp, #16]
    a280:	2b00      	cmp	r3, #0
    a282:	d001      	beq.n	a288 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    a284:	9b04      	ldr	r3, [sp, #16]
    a286:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    a288:	9b05      	ldr	r3, [sp, #20]
}
    a28a:	4618      	mov	r0, r3
    a28c:	b007      	add	sp, #28
    a28e:	f85d fb04 	ldr.w	pc, [sp], #4
    a292:	bf00      	nop
    a294:	0000f4e8 	.word	0x0000f4e8

0000a298 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    a298:	b500      	push	{lr}
    a29a:	b085      	sub	sp, #20
    a29c:	4603      	mov	r3, r0
    a29e:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a2a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2a6:	4a06      	ldr	r2, [pc, #24]	; (a2c0 <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    a2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2ac:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    a2ae:	9803      	ldr	r0, [sp, #12]
    a2b0:	f001 f94c 	bl	b54c <FlexCAN_EnterFreezeMode>
    a2b4:	4603      	mov	r3, r0
}
    a2b6:	4618      	mov	r0, r3
    a2b8:	b005      	add	sp, #20
    a2ba:	f85d fb04 	ldr.w	pc, [sp], #4
    a2be:	bf00      	nop
    a2c0:	0000f4e8 	.word	0x0000f4e8

0000a2c4 <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    a2c4:	b500      	push	{lr}
    a2c6:	b085      	sub	sp, #20
    a2c8:	4603      	mov	r3, r0
    a2ca:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a2ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a2d2:	4a06      	ldr	r2, [pc, #24]	; (a2ec <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    a2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a2d8:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    a2da:	9803      	ldr	r0, [sp, #12]
    a2dc:	f001 f9be 	bl	b65c <FlexCAN_ExitFreezeMode>
    a2e0:	4603      	mov	r3, r0
}
    a2e2:	4618      	mov	r0, r3
    a2e4:	b005      	add	sp, #20
    a2e6:	f85d fb04 	ldr.w	pc, [sp], #4
    a2ea:	bf00      	nop
    a2ec:	0000f4e8 	.word	0x0000f4e8

0000a2f0 <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    a2f0:	b500      	push	{lr}
    a2f2:	b087      	sub	sp, #28
    a2f4:	4603      	mov	r3, r0
    a2f6:	9200      	str	r2, [sp, #0]
    a2f8:	f88d 3007 	strb.w	r3, [sp, #7]
    a2fc:	460b      	mov	r3, r1
    a2fe:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a302:	2300      	movs	r3, #0
    a304:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a306:	2300      	movs	r3, #0
    a308:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a30a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a30e:	4a1e      	ldr	r2, [pc, #120]	; (a388 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    a310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a314:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a316:	9803      	ldr	r0, [sp, #12]
    a318:	f7fe f942 	bl	85a0 <FlexCAN_IsEnabled>
    a31c:	4603      	mov	r3, r0
    a31e:	2b00      	cmp	r3, #0
    a320:	bf14      	ite	ne
    a322:	2301      	movne	r3, #1
    a324:	2300      	moveq	r3, #0
    a326:	b2db      	uxtb	r3, r3
    a328:	f083 0301 	eor.w	r3, r3, #1
    a32c:	b2db      	uxtb	r3, r3
    a32e:	f88d 300b 	strb.w	r3, [sp, #11]
    a332:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a336:	f003 0301 	and.w	r3, r3, #1
    a33a:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a33e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a342:	2b00      	cmp	r3, #0
    a344:	d003      	beq.n	a34e <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    a346:	9803      	ldr	r0, [sp, #12]
    a348:	f001 f94c 	bl	b5e4 <FlexCAN_Enable>
    a34c:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a34e:	9b05      	ldr	r3, [sp, #20]
    a350:	2b00      	cmp	r3, #0
    a352:	d106      	bne.n	a362 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    a354:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a358:	9a00      	ldr	r2, [sp, #0]
    a35a:	4619      	mov	r1, r3
    a35c:	9803      	ldr	r0, [sp, #12]
    a35e:	f7fe fb52 	bl	8a06 <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    a362:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a366:	2b00      	cmp	r3, #0
    a368:	d008      	beq.n	a37c <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    a36a:	9803      	ldr	r0, [sp, #12]
    a36c:	f001 f9b8 	bl	b6e0 <FlexCAN_Disable>
    a370:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a372:	9b04      	ldr	r3, [sp, #16]
    a374:	2b00      	cmp	r3, #0
    a376:	d001      	beq.n	a37c <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    a378:	9b04      	ldr	r3, [sp, #16]
    a37a:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    a37c:	9b05      	ldr	r3, [sp, #20]
}
    a37e:	4618      	mov	r0, r3
    a380:	b007      	add	sp, #28
    a382:	f85d fb04 	ldr.w	pc, [sp], #4
    a386:	bf00      	nop
    a388:	0000f4e8 	.word	0x0000f4e8

0000a38c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    a38c:	b500      	push	{lr}
    a38e:	b087      	sub	sp, #28
    a390:	4603      	mov	r3, r0
    a392:	9100      	str	r1, [sp, #0]
    a394:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a398:	2300      	movs	r3, #0
    a39a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a39c:	2300      	movs	r3, #0
    a39e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a3a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a3a4:	4a1c      	ldr	r2, [pc, #112]	; (a418 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    a3a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a3aa:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a3ac:	9803      	ldr	r0, [sp, #12]
    a3ae:	f7fe f8f7 	bl	85a0 <FlexCAN_IsEnabled>
    a3b2:	4603      	mov	r3, r0
    a3b4:	2b00      	cmp	r3, #0
    a3b6:	bf14      	ite	ne
    a3b8:	2301      	movne	r3, #1
    a3ba:	2300      	moveq	r3, #0
    a3bc:	b2db      	uxtb	r3, r3
    a3be:	f083 0301 	eor.w	r3, r3, #1
    a3c2:	b2db      	uxtb	r3, r3
    a3c4:	f88d 300b 	strb.w	r3, [sp, #11]
    a3c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a3cc:	f003 0301 	and.w	r3, r3, #1
    a3d0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a3d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a3d8:	2b00      	cmp	r3, #0
    a3da:	d003      	beq.n	a3e4 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a3dc:	9803      	ldr	r0, [sp, #12]
    a3de:	f001 f901 	bl	b5e4 <FlexCAN_Enable>
    a3e2:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a3e4:	9b05      	ldr	r3, [sp, #20]
    a3e6:	2b00      	cmp	r3, #0
    a3e8:	d103      	bne.n	a3f2 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    a3ea:	9900      	ldr	r1, [sp, #0]
    a3ec:	9803      	ldr	r0, [sp, #12]
    a3ee:	f7fe f8a7 	bl	8540 <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    a3f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a3f6:	2b00      	cmp	r3, #0
    a3f8:	d008      	beq.n	a40c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    a3fa:	9803      	ldr	r0, [sp, #12]
    a3fc:	f001 f970 	bl	b6e0 <FlexCAN_Disable>
    a400:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a402:	9b04      	ldr	r3, [sp, #16]
    a404:	2b00      	cmp	r3, #0
    a406:	d001      	beq.n	a40c <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    a408:	9b04      	ldr	r3, [sp, #16]
    a40a:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a40c:	9b05      	ldr	r3, [sp, #20]
}
    a40e:	4618      	mov	r0, r3
    a410:	b007      	add	sp, #28
    a412:	f85d fb04 	ldr.w	pc, [sp], #4
    a416:	bf00      	nop
    a418:	0000f4e8 	.word	0x0000f4e8

0000a41c <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    a41c:	b500      	push	{lr}
    a41e:	b085      	sub	sp, #20
    a420:	4603      	mov	r3, r0
    a422:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a426:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a42a:	4a0e      	ldr	r2, [pc, #56]	; (a464 <FlexCAN_Ip_Deinit_Privileged+0x48>)
    a42c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a430:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    a432:	9803      	ldr	r0, [sp, #12]
    a434:	f001 f88a 	bl	b54c <FlexCAN_EnterFreezeMode>
    a438:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    a43a:	9b02      	ldr	r3, [sp, #8]
    a43c:	2b00      	cmp	r3, #0
    a43e:	d10b      	bne.n	a458 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    a440:	9803      	ldr	r0, [sp, #12]
    a442:	f7fe fb18 	bl	8a76 <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    a446:	9803      	ldr	r0, [sp, #12]
    a448:	f001 f94a 	bl	b6e0 <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    a44c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a450:	4a05      	ldr	r2, [pc, #20]	; (a468 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    a452:	2100      	movs	r1, #0
    a454:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    a458:	9b02      	ldr	r3, [sp, #8]
}
    a45a:	4618      	mov	r0, r3
    a45c:	b005      	add	sp, #20
    a45e:	f85d fb04 	ldr.w	pc, [sp], #4
    a462:	bf00      	nop
    a464:	0000f4e8 	.word	0x0000f4e8
    a468:	1fff8fa0 	.word	0x1fff8fa0

0000a46c <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    a46c:	b500      	push	{lr}
    a46e:	b085      	sub	sp, #20
    a470:	4603      	mov	r3, r0
    a472:	460a      	mov	r2, r1
    a474:	f88d 3007 	strb.w	r3, [sp, #7]
    a478:	4613      	mov	r3, r2
    a47a:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a47e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a482:	4a22      	ldr	r2, [pc, #136]	; (a50c <FlexCAN_Ip_MainFunctionRead+0xa0>)
    a484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a488:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a48a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a48e:	4a20      	ldr	r2, [pc, #128]	; (a510 <FlexCAN_Ip_MainFunctionRead+0xa4>)
    a490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a494:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    a496:	9b02      	ldr	r3, [sp, #8]
    a498:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    a49c:	2b00      	cmp	r3, #0
    a49e:	d015      	beq.n	a4cc <FlexCAN_Ip_MainFunctionRead+0x60>
    a4a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a4a4:	2b07      	cmp	r3, #7
    a4a6:	d811      	bhi.n	a4cc <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    a4a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a4ac:	2b00      	cmp	r3, #0
    a4ae:	d128      	bne.n	a502 <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    a4b0:	2105      	movs	r1, #5
    a4b2:	9803      	ldr	r0, [sp, #12]
    a4b4:	f7fe f8e1 	bl	867a <FlexCAN_GetBuffStatusFlag>
    a4b8:	4603      	mov	r3, r0
    a4ba:	2b00      	cmp	r3, #0
    a4bc:	d021      	beq.n	a502 <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    a4be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4c2:	2105      	movs	r1, #5
    a4c4:	4618      	mov	r0, r3
    a4c6:	f7fe ff17 	bl	92f8 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    a4ca:	e01a      	b.n	a502 <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    a4cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a4d0:	4619      	mov	r1, r3
    a4d2:	9803      	ldr	r0, [sp, #12]
    a4d4:	f7fe f8d1 	bl	867a <FlexCAN_GetBuffStatusFlag>
    a4d8:	4603      	mov	r3, r0
    a4da:	2b00      	cmp	r3, #0
    a4dc:	d012      	beq.n	a504 <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    a4de:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a4e2:	9a02      	ldr	r2, [sp, #8]
    a4e4:	011b      	lsls	r3, r3, #4
    a4e6:	4413      	add	r3, r2
    a4e8:	3304      	adds	r3, #4
    a4ea:	681b      	ldr	r3, [r3, #0]
    a4ec:	2b01      	cmp	r3, #1
    a4ee:	d109      	bne.n	a504 <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    a4f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a4f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a4f8:	4611      	mov	r1, r2
    a4fa:	4618      	mov	r0, r3
    a4fc:	f7fe fd74 	bl	8fe8 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    a500:	e000      	b.n	a504 <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    a502:	bf00      	nop
}
    a504:	bf00      	nop
    a506:	b005      	add	sp, #20
    a508:	f85d fb04 	ldr.w	pc, [sp], #4
    a50c:	0000f4e8 	.word	0x0000f4e8
    a510:	1fff8fa0 	.word	0x1fff8fa0

0000a514 <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    a514:	b510      	push	{r4, lr}
    a516:	b086      	sub	sp, #24
    a518:	4603      	mov	r3, r0
    a51a:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    a51e:	2301      	movs	r3, #1
    a520:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a522:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a526:	4a15      	ldr	r2, [pc, #84]	; (a57c <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    a528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a52c:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a52e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a532:	4a13      	ldr	r2, [pc, #76]	; (a580 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    a534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a538:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    a53a:	2300      	movs	r3, #0
    a53c:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    a53e:	9b04      	ldr	r3, [sp, #16]
    a540:	6a1b      	ldr	r3, [r3, #32]
    a542:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    a544:	9b02      	ldr	r3, [sp, #8]
    a546:	f003 0304 	and.w	r3, r3, #4
    a54a:	2b00      	cmp	r3, #0
    a54c:	d012      	beq.n	a574 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    a54e:	9b03      	ldr	r3, [sp, #12]
    a550:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a554:	2b00      	cmp	r3, #0
    a556:	d008      	beq.n	a56a <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    a558:	9b03      	ldr	r3, [sp, #12]
    a55a:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a55e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a562:	9b03      	ldr	r3, [sp, #12]
    a564:	9a02      	ldr	r2, [sp, #8]
    a566:	2107      	movs	r1, #7
    a568:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    a56a:	9b04      	ldr	r3, [sp, #16]
    a56c:	2204      	movs	r2, #4
    a56e:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    a570:	2300      	movs	r3, #0
    a572:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    a574:	9b05      	ldr	r3, [sp, #20]
}
    a576:	4618      	mov	r0, r3
    a578:	b006      	add	sp, #24
    a57a:	bd10      	pop	{r4, pc}
    a57c:	0000f4e8 	.word	0x0000f4e8
    a580:	1fff8fa0 	.word	0x1fff8fa0

0000a584 <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    a584:	b510      	push	{r4, lr}
    a586:	b098      	sub	sp, #96	; 0x60
    a588:	4603      	mov	r3, r0
    a58a:	460a      	mov	r2, r1
    a58c:	f88d 3007 	strb.w	r3, [sp, #7]
    a590:	4613      	mov	r3, r2
    a592:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a596:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a59a:	4a3f      	ldr	r2, [pc, #252]	; (a698 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    a59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5a0:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a5a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a5a6:	4a3d      	ldr	r2, [pc, #244]	; (a69c <FlexCAN_Ip_MainFunctionWrite+0x118>)
    a5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a5ac:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    a5ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5b2:	4619      	mov	r1, r3
    a5b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a5b6:	f7fe f860 	bl	867a <FlexCAN_GetBuffStatusFlag>
    a5ba:	4603      	mov	r3, r0
    a5bc:	2b00      	cmp	r3, #0
    a5be:	d068      	beq.n	a692 <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    a5c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a5c6:	011b      	lsls	r3, r3, #4
    a5c8:	4413      	add	r3, r2
    a5ca:	3304      	adds	r3, #4
    a5cc:	681b      	ldr	r3, [r3, #0]
    a5ce:	2b02      	cmp	r3, #2
    a5d0:	d15f      	bne.n	a692 <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    a5d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a5d8:	011b      	lsls	r3, r3, #4
    a5da:	4413      	add	r3, r2
    a5dc:	3309      	adds	r3, #9
    a5de:	781b      	ldrb	r3, [r3, #0]
    a5e0:	2b00      	cmp	r3, #0
    a5e2:	d028      	beq.n	a636 <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    a5e4:	2300      	movs	r3, #0
    a5e6:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    a5e8:	2300      	movs	r3, #0
    a5ea:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    a5ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5f0:	4619      	mov	r1, r3
    a5f2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a5f4:	f001 fa87 	bl	bb06 <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    a5f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a5fc:	aa02      	add	r2, sp, #8
    a5fe:	4619      	mov	r1, r3
    a600:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a602:	f001 fbaf 	bl	bd64 <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    a606:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a608:	f7fe f81d 	bl	8646 <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    a60c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a610:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a612:	9916      	ldr	r1, [sp, #88]	; 0x58
    a614:	011b      	lsls	r3, r3, #4
    a616:	440b      	add	r3, r1
    a618:	330c      	adds	r3, #12
    a61a:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    a61c:	9b02      	ldr	r3, [sp, #8]
    a61e:	0e1b      	lsrs	r3, r3, #24
    a620:	f003 030f 	and.w	r3, r3, #15
    a624:	2b04      	cmp	r3, #4
    a626:	d11d      	bne.n	a664 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a628:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a62c:	4619      	mov	r1, r3
    a62e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a630:	f7fe f810 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
    a634:	e016      	b.n	a664 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    a636:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a63a:	f89d 4006 	ldrb.w	r4, [sp, #6]
    a63e:	4619      	mov	r1, r3
    a640:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a642:	f001 fb7b 	bl	bd3c <FlexCAN_GetMsgBuffTimestamp>
    a646:	4601      	mov	r1, r0
    a648:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a64a:	0123      	lsls	r3, r4, #4
    a64c:	4413      	add	r3, r2
    a64e:	330c      	adds	r3, #12
    a650:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    a652:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a654:	f7fd fff7 	bl	8646 <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a658:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a65c:	4619      	mov	r1, r3
    a65e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a660:	f7fd fff8 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    a664:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a668:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a66a:	011b      	lsls	r3, r3, #4
    a66c:	4413      	add	r3, r2
    a66e:	3304      	adds	r3, #4
    a670:	2200      	movs	r2, #0
    a672:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    a674:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a676:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    a67a:	2b00      	cmp	r3, #0
    a67c:	d009      	beq.n	a692 <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    a67e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a680:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    a684:	f89d 2006 	ldrb.w	r2, [sp, #6]
    a688:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a68c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a68e:	2104      	movs	r1, #4
    a690:	47a0      	blx	r4
            }
        }
    }
}
    a692:	bf00      	nop
    a694:	b018      	add	sp, #96	; 0x60
    a696:	bd10      	pop	{r4, pc}
    a698:	0000f4e8 	.word	0x0000f4e8
    a69c:	1fff8fa0 	.word	0x1fff8fa0

0000a6a0 <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    a6a0:	b084      	sub	sp, #16
    a6a2:	4603      	mov	r3, r0
    a6a4:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a6a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a6ac:	4a08      	ldr	r2, [pc, #32]	; (a6d0 <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    a6ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6b2:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    a6b4:	9b03      	ldr	r3, [sp, #12]
    a6b6:	681b      	ldr	r3, [r3, #0]
    a6b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    a6bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    a6c0:	bf0c      	ite	eq
    a6c2:	2301      	moveq	r3, #1
    a6c4:	2300      	movne	r3, #0
    a6c6:	b2db      	uxtb	r3, r3
}
    a6c8:	4618      	mov	r0, r3
    a6ca:	b004      	add	sp, #16
    a6cc:	4770      	bx	lr
    a6ce:	bf00      	nop
    a6d0:	0000f4e8 	.word	0x0000f4e8

0000a6d4 <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    a6d4:	b084      	sub	sp, #16
    a6d6:	4603      	mov	r3, r0
    a6d8:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a6dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a6e0:	4a07      	ldr	r2, [pc, #28]	; (a700 <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    a6e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6e6:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    a6e8:	9b03      	ldr	r3, [sp, #12]
    a6ea:	681b      	ldr	r3, [r3, #0]
    a6ec:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    a6f0:	2b00      	cmp	r3, #0
    a6f2:	bf0c      	ite	eq
    a6f4:	2301      	moveq	r3, #1
    a6f6:	2300      	movne	r3, #0
    a6f8:	b2db      	uxtb	r3, r3
}
    a6fa:	4618      	mov	r0, r3
    a6fc:	b004      	add	sp, #16
    a6fe:	4770      	bx	lr
    a700:	0000f4e8 	.word	0x0000f4e8

0000a704 <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    a704:	b500      	push	{lr}
    a706:	b085      	sub	sp, #20
    a708:	4603      	mov	r3, r0
    a70a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a70e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a712:	4a0b      	ldr	r2, [pc, #44]	; (a740 <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    a714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a718:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    a71a:	f002 fb93 	bl	ce44 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    a71e:	9b03      	ldr	r3, [sp, #12]
    a720:	681b      	ldr	r3, [r3, #0]
    a722:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    a726:	9b03      	ldr	r3, [sp, #12]
    a728:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    a72a:	f002 fbb7 	bl	ce9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    a72e:	9803      	ldr	r0, [sp, #12]
    a730:	f000 ff94 	bl	b65c <FlexCAN_ExitFreezeMode>
    a734:	4603      	mov	r3, r0
}
    a736:	4618      	mov	r0, r3
    a738:	b005      	add	sp, #20
    a73a:	f85d fb04 	ldr.w	pc, [sp], #4
    a73e:	bf00      	nop
    a740:	0000f4e8 	.word	0x0000f4e8

0000a744 <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    a744:	b500      	push	{lr}
    a746:	b085      	sub	sp, #20
    a748:	4603      	mov	r3, r0
    a74a:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a74e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a752:	4a0a      	ldr	r2, [pc, #40]	; (a77c <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    a754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a758:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    a75a:	9802      	ldr	r0, [sp, #8]
    a75c:	f000 fef6 	bl	b54c <FlexCAN_EnterFreezeMode>
    a760:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    a762:	9b03      	ldr	r3, [sp, #12]
    a764:	2b00      	cmp	r3, #0
    a766:	d103      	bne.n	a770 <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    a768:	9802      	ldr	r0, [sp, #8]
    a76a:	f000 ffb9 	bl	b6e0 <FlexCAN_Disable>
    a76e:	9003      	str	r0, [sp, #12]
    }
    return status;
    a770:	9b03      	ldr	r3, [sp, #12]
}
    a772:	4618      	mov	r0, r3
    a774:	b005      	add	sp, #20
    a776:	f85d fb04 	ldr.w	pc, [sp], #4
    a77a:	bf00      	nop
    a77c:	0000f4e8 	.word	0x0000f4e8

0000a780 <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    a780:	b500      	push	{lr}
    a782:	b087      	sub	sp, #28
    a784:	4603      	mov	r3, r0
    a786:	9100      	str	r1, [sp, #0]
    a788:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a78c:	2300      	movs	r3, #0
    a78e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a790:	2300      	movs	r3, #0
    a792:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a794:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a798:	4a1e      	ldr	r2, [pc, #120]	; (a814 <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    a79a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a79e:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a7a0:	9803      	ldr	r0, [sp, #12]
    a7a2:	f7fd fefd 	bl	85a0 <FlexCAN_IsEnabled>
    a7a6:	4603      	mov	r3, r0
    a7a8:	2b00      	cmp	r3, #0
    a7aa:	bf14      	ite	ne
    a7ac:	2301      	movne	r3, #1
    a7ae:	2300      	moveq	r3, #0
    a7b0:	b2db      	uxtb	r3, r3
    a7b2:	f083 0301 	eor.w	r3, r3, #1
    a7b6:	b2db      	uxtb	r3, r3
    a7b8:	f88d 300b 	strb.w	r3, [sp, #11]
    a7bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a7c0:	f003 0301 	and.w	r3, r3, #1
    a7c4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    a7c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a7cc:	2b00      	cmp	r3, #0
    a7ce:	d003      	beq.n	a7d8 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    a7d0:	9803      	ldr	r0, [sp, #12]
    a7d2:	f000 ff07 	bl	b5e4 <FlexCAN_Enable>
    a7d6:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a7d8:	9b05      	ldr	r3, [sp, #20]
    a7da:	2b00      	cmp	r3, #0
    a7dc:	d107      	bne.n	a7ee <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    a7de:	f002 fb83 	bl	cee8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    a7e2:	9900      	ldr	r1, [sp, #0]
    a7e4:	9803      	ldr	r0, [sp, #12]
    a7e6:	f7fe f930 	bl	8a4a <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    a7ea:	f002 fba9 	bl	cf40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    a7ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a7f2:	2b00      	cmp	r3, #0
    a7f4:	d008      	beq.n	a808 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    a7f6:	9803      	ldr	r0, [sp, #12]
    a7f8:	f000 ff72 	bl	b6e0 <FlexCAN_Disable>
    a7fc:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a7fe:	9b04      	ldr	r3, [sp, #16]
    a800:	2b00      	cmp	r3, #0
    a802:	d001      	beq.n	a808 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    a804:	9b04      	ldr	r3, [sp, #16]
    a806:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a808:	9b05      	ldr	r3, [sp, #20]
}
    a80a:	4618      	mov	r0, r3
    a80c:	b007      	add	sp, #28
    a80e:	f85d fb04 	ldr.w	pc, [sp], #4
    a812:	bf00      	nop
    a814:	0000f4e8 	.word	0x0000f4e8

0000a818 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    a818:	b500      	push	{lr}
    a81a:	b087      	sub	sp, #28
    a81c:	4603      	mov	r3, r0
    a81e:	9100      	str	r1, [sp, #0]
    a820:	f88d 3007 	strb.w	r3, [sp, #7]
    a824:	4613      	mov	r3, r2
    a826:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a82a:	2300      	movs	r3, #0
    a82c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a82e:	2300      	movs	r3, #0
    a830:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a832:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a836:	4a1c      	ldr	r2, [pc, #112]	; (a8a8 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    a838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a83c:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    a83e:	9b03      	ldr	r3, [sp, #12]
    a840:	681b      	ldr	r3, [r3, #0]
    a842:	0fdb      	lsrs	r3, r3, #31
    a844:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    a848:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a84c:	2b00      	cmp	r3, #0
    a84e:	d003      	beq.n	a858 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    a850:	9803      	ldr	r0, [sp, #12]
    a852:	f000 fec7 	bl	b5e4 <FlexCAN_Enable>
    a856:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a858:	9b05      	ldr	r3, [sp, #20]
    a85a:	2b00      	cmp	r3, #0
    a85c:	d112      	bne.n	a884 <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    a85e:	f002 fd2f 	bl	d2c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    a862:	9803      	ldr	r0, [sp, #12]
    a864:	f7fe f830 	bl	88c8 <FlexCAN_IsExCbtEnabled>
    a868:	4603      	mov	r3, r0
    a86a:	2b00      	cmp	r3, #0
    a86c:	d004      	beq.n	a878 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    a86e:	9900      	ldr	r1, [sp, #0]
    a870:	9803      	ldr	r0, [sp, #12]
    a872:	f7fd ff7f 	bl	8774 <FlexCAN_SetExtendedTimeSegments>
    a876:	e003      	b.n	a880 <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    a878:	9900      	ldr	r1, [sp, #0]
    a87a:	9803      	ldr	r0, [sp, #12]
    a87c:	f7fd ff4e 	bl	871c <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    a880:	f002 fd4a 	bl	d318 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    a884:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a888:	2b00      	cmp	r3, #0
    a88a:	d008      	beq.n	a89e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    a88c:	9803      	ldr	r0, [sp, #12]
    a88e:	f000 ff27 	bl	b6e0 <FlexCAN_Disable>
    a892:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a894:	9b04      	ldr	r3, [sp, #16]
    a896:	2b00      	cmp	r3, #0
    a898:	d001      	beq.n	a89e <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    a89a:	9b04      	ldr	r3, [sp, #16]
    a89c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    a89e:	9b05      	ldr	r3, [sp, #20]
}
    a8a0:	4618      	mov	r0, r3
    a8a2:	b007      	add	sp, #28
    a8a4:	f85d fb04 	ldr.w	pc, [sp], #4
    a8a8:	0000f4e8 	.word	0x0000f4e8

0000a8ac <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    a8ac:	b500      	push	{lr}
    a8ae:	b085      	sub	sp, #20
    a8b0:	4603      	mov	r3, r0
    a8b2:	9100      	str	r1, [sp, #0]
    a8b4:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a8b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a8bc:	4a0d      	ldr	r2, [pc, #52]	; (a8f4 <FlexCAN_Ip_GetBitrate+0x48>)
    a8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8c2:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    a8c4:	2300      	movs	r3, #0
    a8c6:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    a8ca:	9803      	ldr	r0, [sp, #12]
    a8cc:	f7fd fffc 	bl	88c8 <FlexCAN_IsExCbtEnabled>
    a8d0:	4603      	mov	r3, r0
    a8d2:	2b00      	cmp	r3, #0
    a8d4:	d004      	beq.n	a8e0 <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    a8d6:	9900      	ldr	r1, [sp, #0]
    a8d8:	9803      	ldr	r0, [sp, #12]
    a8da:	f7fd ff79 	bl	87d0 <FlexCAN_GetExtendedTimeSegments>
    a8de:	e003      	b.n	a8e8 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    a8e0:	9900      	ldr	r1, [sp, #0]
    a8e2:	9803      	ldr	r0, [sp, #12]
    a8e4:	f7fd ff9c 	bl	8820 <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    a8e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    a8ec:	4618      	mov	r0, r3
    a8ee:	b005      	add	sp, #20
    a8f0:	f85d fb04 	ldr.w	pc, [sp], #4
    a8f4:	0000f4e8 	.word	0x0000f4e8

0000a8f8 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    a8f8:	b500      	push	{lr}
    a8fa:	b085      	sub	sp, #20
    a8fc:	4603      	mov	r3, r0
    a8fe:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    a902:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a906:	4a0a      	ldr	r2, [pc, #40]	; (a930 <FlexCAN_Ip_ClearTDCFail+0x38>)
    a908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a90c:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    a90e:	f002 fb3d 	bl	cf8c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    a912:	9b03      	ldr	r3, [sp, #12]
    a914:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    a918:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    a91c:	9b03      	ldr	r3, [sp, #12]
    a91e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    a922:	f002 fb5f 	bl	cfe4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    a926:	bf00      	nop
    a928:	b005      	add	sp, #20
    a92a:	f85d fb04 	ldr.w	pc, [sp], #4
    a92e:	bf00      	nop
    a930:	0000f4e8 	.word	0x0000f4e8

0000a934 <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    a934:	b084      	sub	sp, #16
    a936:	4603      	mov	r3, r0
    a938:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    a93c:	2300      	movs	r3, #0
    a93e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    a942:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a946:	4a0a      	ldr	r2, [pc, #40]	; (a970 <FlexCAN_Ip_GetTDCFail+0x3c>)
    a948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a94c:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    a94e:	9b02      	ldr	r3, [sp, #8]
    a950:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    a954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    a95c:	bf0c      	ite	eq
    a95e:	2301      	moveq	r3, #1
    a960:	2300      	movne	r3, #0
    a962:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    a966:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a96a:	4618      	mov	r0, r3
    a96c:	b004      	add	sp, #16
    a96e:	4770      	bx	lr
    a970:	0000f4e8 	.word	0x0000f4e8

0000a974 <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    a974:	b084      	sub	sp, #16
    a976:	4603      	mov	r3, r0
    a978:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    a97c:	2300      	movs	r3, #0
    a97e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    a982:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a986:	4a08      	ldr	r2, [pc, #32]	; (a9a8 <FlexCAN_Ip_GetTDCValue+0x34>)
    a988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a98c:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    a98e:	9b02      	ldr	r3, [sp, #8]
    a990:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    a994:	b2db      	uxtb	r3, r3
    a996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a99a:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    a99e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    a9a2:	4618      	mov	r0, r3
    a9a4:	b004      	add	sp, #16
    a9a6:	4770      	bx	lr
    a9a8:	0000f4e8 	.word	0x0000f4e8

0000a9ac <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    a9ac:	b500      	push	{lr}
    a9ae:	b087      	sub	sp, #28
    a9b0:	4603      	mov	r3, r0
    a9b2:	9100      	str	r1, [sp, #0]
    a9b4:	f88d 3007 	strb.w	r3, [sp, #7]
    a9b8:	4613      	mov	r3, r2
    a9ba:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a9be:	2300      	movs	r3, #0
    a9c0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a9c2:	2300      	movs	r3, #0
    a9c4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a9c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a9ca:	4a1e      	ldr	r2, [pc, #120]	; (aa44 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    a9cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a9d0:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    a9d2:	9803      	ldr	r0, [sp, #12]
    a9d4:	f7fd ffaf 	bl	8936 <FlexCAN_IsFDEnabled>
    a9d8:	4603      	mov	r3, r0
    a9da:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    a9de:	9b03      	ldr	r3, [sp, #12]
    a9e0:	681b      	ldr	r3, [r3, #0]
    a9e2:	0fdb      	lsrs	r3, r3, #31
    a9e4:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    a9e8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a9ec:	2b00      	cmp	r3, #0
    a9ee:	d003      	beq.n	a9f8 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    a9f0:	9803      	ldr	r0, [sp, #12]
    a9f2:	f000 fdf7 	bl	b5e4 <FlexCAN_Enable>
    a9f6:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a9f8:	9b05      	ldr	r3, [sp, #20]
    a9fa:	2b00      	cmp	r3, #0
    a9fc:	d10f      	bne.n	aa1e <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    a9fe:	f002 fcb1 	bl	d364 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    aa02:	f89d 2006 	ldrb.w	r2, [sp, #6]
    aa06:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aa0a:	4619      	mov	r1, r3
    aa0c:	9803      	ldr	r0, [sp, #12]
    aa0e:	f7fd fdd1 	bl	85b4 <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    aa12:	9900      	ldr	r1, [sp, #0]
    aa14:	9803      	ldr	r0, [sp, #12]
    aa16:	f7fd fe4c 	bl	86b2 <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    aa1a:	f002 fccf 	bl	d3bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    aa1e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    aa22:	2b00      	cmp	r3, #0
    aa24:	d008      	beq.n	aa38 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    aa26:	9803      	ldr	r0, [sp, #12]
    aa28:	f000 fe5a 	bl	b6e0 <FlexCAN_Disable>
    aa2c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    aa2e:	9b04      	ldr	r3, [sp, #16]
    aa30:	2b00      	cmp	r3, #0
    aa32:	d001      	beq.n	aa38 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    aa34:	9b04      	ldr	r3, [sp, #16]
    aa36:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    aa38:	9b05      	ldr	r3, [sp, #20]
}
    aa3a:	4618      	mov	r0, r3
    aa3c:	b007      	add	sp, #28
    aa3e:	f85d fb04 	ldr.w	pc, [sp], #4
    aa42:	bf00      	nop
    aa44:	0000f4e8 	.word	0x0000f4e8

0000aa48 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    aa48:	b500      	push	{lr}
    aa4a:	b085      	sub	sp, #20
    aa4c:	4603      	mov	r3, r0
    aa4e:	9100      	str	r1, [sp, #0]
    aa50:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    aa54:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aa58:	4a08      	ldr	r2, [pc, #32]	; (aa7c <FlexCAN_Ip_GetBitrateFD+0x34>)
    aa5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa5e:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    aa60:	2300      	movs	r3, #0
    aa62:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    aa66:	9900      	ldr	r1, [sp, #0]
    aa68:	9803      	ldr	r0, [sp, #12]
    aa6a:	f7fd ff00 	bl	886e <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    aa6e:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    aa72:	4618      	mov	r0, r3
    aa74:	b005      	add	sp, #20
    aa76:	f85d fb04 	ldr.w	pc, [sp], #4
    aa7a:	bf00      	nop
    aa7c:	0000f4e8 	.word	0x0000f4e8

0000aa80 <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    aa80:	b500      	push	{lr}
    aa82:	b087      	sub	sp, #28
    aa84:	4603      	mov	r3, r0
    aa86:	f88d 3007 	strb.w	r3, [sp, #7]
    aa8a:	460b      	mov	r3, r1
    aa8c:	f88d 3006 	strb.w	r3, [sp, #6]
    aa90:	4613      	mov	r3, r2
    aa92:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    aa96:	2300      	movs	r3, #0
    aa98:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    aa9a:	2300      	movs	r3, #0
    aa9c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    aa9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aaa2:	4a20      	ldr	r2, [pc, #128]	; (ab24 <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    aaa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aaa8:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    aaaa:	9803      	ldr	r0, [sp, #12]
    aaac:	f7fd fd78 	bl	85a0 <FlexCAN_IsEnabled>
    aab0:	4603      	mov	r3, r0
    aab2:	2b00      	cmp	r3, #0
    aab4:	bf14      	ite	ne
    aab6:	2301      	movne	r3, #1
    aab8:	2300      	moveq	r3, #0
    aaba:	b2db      	uxtb	r3, r3
    aabc:	f083 0301 	eor.w	r3, r3, #1
    aac0:	b2db      	uxtb	r3, r3
    aac2:	f88d 300b 	strb.w	r3, [sp, #11]
    aac6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aaca:	f003 0301 	and.w	r3, r3, #1
    aace:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    aad2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aad6:	2b00      	cmp	r3, #0
    aad8:	d003      	beq.n	aae2 <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    aada:	9803      	ldr	r0, [sp, #12]
    aadc:	f000 fd82 	bl	b5e4 <FlexCAN_Enable>
    aae0:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    aae2:	9b05      	ldr	r3, [sp, #20]
    aae4:	2b00      	cmp	r3, #0
    aae6:	d10b      	bne.n	ab00 <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    aae8:	f002 fc8e 	bl	d408 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    aaec:	f89d 2005 	ldrb.w	r2, [sp, #5]
    aaf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aaf4:	4619      	mov	r1, r3
    aaf6:	9803      	ldr	r0, [sp, #12]
    aaf8:	f7fd fd2b 	bl	8552 <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    aafc:	f002 fcb0 	bl	d460 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    ab00:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ab04:	2b00      	cmp	r3, #0
    ab06:	d008      	beq.n	ab1a <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    ab08:	9803      	ldr	r0, [sp, #12]
    ab0a:	f000 fde9 	bl	b6e0 <FlexCAN_Disable>
    ab0e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ab10:	9b04      	ldr	r3, [sp, #16]
    ab12:	2b00      	cmp	r3, #0
    ab14:	d001      	beq.n	ab1a <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    ab16:	9b04      	ldr	r3, [sp, #16]
    ab18:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    ab1a:	9b05      	ldr	r3, [sp, #20]
}
    ab1c:	4618      	mov	r0, r3
    ab1e:	b007      	add	sp, #28
    ab20:	f85d fb04 	ldr.w	pc, [sp], #4
    ab24:	0000f4e8 	.word	0x0000f4e8

0000ab28 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    ab28:	b500      	push	{lr}
    ab2a:	b087      	sub	sp, #28
    ab2c:	4603      	mov	r3, r0
    ab2e:	460a      	mov	r2, r1
    ab30:	f88d 3007 	strb.w	r3, [sp, #7]
    ab34:	4613      	mov	r3, r2
    ab36:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ab3a:	2300      	movs	r3, #0
    ab3c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    ab3e:	2300      	movs	r3, #0
    ab40:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ab42:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ab46:	4a1f      	ldr	r2, [pc, #124]	; (abc4 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    ab48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ab4c:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    ab4e:	9803      	ldr	r0, [sp, #12]
    ab50:	f7fd fd26 	bl	85a0 <FlexCAN_IsEnabled>
    ab54:	4603      	mov	r3, r0
    ab56:	2b00      	cmp	r3, #0
    ab58:	bf14      	ite	ne
    ab5a:	2301      	movne	r3, #1
    ab5c:	2300      	moveq	r3, #0
    ab5e:	b2db      	uxtb	r3, r3
    ab60:	f083 0301 	eor.w	r3, r3, #1
    ab64:	b2db      	uxtb	r3, r3
    ab66:	f88d 300b 	strb.w	r3, [sp, #11]
    ab6a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ab6e:	f003 0301 	and.w	r3, r3, #1
    ab72:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    ab76:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ab7a:	2b00      	cmp	r3, #0
    ab7c:	d003      	beq.n	ab86 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    ab7e:	9803      	ldr	r0, [sp, #12]
    ab80:	f000 fd30 	bl	b5e4 <FlexCAN_Enable>
    ab84:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    ab86:	9b05      	ldr	r3, [sp, #20]
    ab88:	2b00      	cmp	r3, #0
    ab8a:	d109      	bne.n	aba0 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    ab8c:	f002 fc8e 	bl	d4ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    ab90:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ab94:	4619      	mov	r1, r3
    ab96:	9803      	ldr	r0, [sp, #12]
    ab98:	f7fd ff43 	bl	8a22 <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    ab9c:	f002 fcb2 	bl	d504 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    aba0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    aba4:	2b00      	cmp	r3, #0
    aba6:	d008      	beq.n	abba <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    aba8:	9803      	ldr	r0, [sp, #12]
    abaa:	f000 fd99 	bl	b6e0 <FlexCAN_Disable>
    abae:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    abb0:	9b04      	ldr	r3, [sp, #16]
    abb2:	2b00      	cmp	r3, #0
    abb4:	d001      	beq.n	abba <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    abb6:	9b04      	ldr	r3, [sp, #16]
    abb8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    abba:	9b05      	ldr	r3, [sp, #20]
}
    abbc:	4618      	mov	r0, r3
    abbe:	b007      	add	sp, #28
    abc0:	f85d fb04 	ldr.w	pc, [sp], #4
    abc4:	0000f4e8 	.word	0x0000f4e8

0000abc8 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    abc8:	b500      	push	{lr}
    abca:	b085      	sub	sp, #20
    abcc:	4603      	mov	r3, r0
    abce:	460a      	mov	r2, r1
    abd0:	f88d 3007 	strb.w	r3, [sp, #7]
    abd4:	4613      	mov	r3, r2
    abd6:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    abda:	f89d 3007 	ldrb.w	r3, [sp, #7]
    abde:	4a0b      	ldr	r2, [pc, #44]	; (ac0c <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    abe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    abe4:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    abe6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abea:	4619      	mov	r1, r3
    abec:	9803      	ldr	r0, [sp, #12]
    abee:	f7fd fd44 	bl	867a <FlexCAN_GetBuffStatusFlag>
    abf2:	4603      	mov	r3, r0
    abf4:	2b01      	cmp	r3, #1
    abf6:	bf0c      	ite	eq
    abf8:	2301      	moveq	r3, #1
    abfa:	2300      	movne	r3, #0
    abfc:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    ac00:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    ac04:	4618      	mov	r0, r3
    ac06:	b005      	add	sp, #20
    ac08:	f85d fb04 	ldr.w	pc, [sp], #4
    ac0c:	0000f4e8 	.word	0x0000f4e8

0000ac10 <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    ac10:	b500      	push	{lr}
    ac12:	b085      	sub	sp, #20
    ac14:	4603      	mov	r3, r0
    ac16:	460a      	mov	r2, r1
    ac18:	f88d 3007 	strb.w	r3, [sp, #7]
    ac1c:	4613      	mov	r3, r2
    ac1e:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ac22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac26:	4a07      	ldr	r2, [pc, #28]	; (ac44 <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    ac28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac2c:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    ac2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ac32:	4619      	mov	r1, r3
    ac34:	9803      	ldr	r0, [sp, #12]
    ac36:	f7fd fd0d 	bl	8654 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    ac3a:	bf00      	nop
    ac3c:	b005      	add	sp, #20
    ac3e:	f85d fb04 	ldr.w	pc, [sp], #4
    ac42:	bf00      	nop
    ac44:	0000f4e8 	.word	0x0000f4e8

0000ac48 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    ac48:	b500      	push	{lr}
    ac4a:	b087      	sub	sp, #28
    ac4c:	4603      	mov	r3, r0
    ac4e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    ac52:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac56:	4a11      	ldr	r2, [pc, #68]	; (ac9c <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    ac58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac5c:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    ac5e:	2301      	movs	r3, #1
    ac60:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    ac62:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac66:	4a0e      	ldr	r2, [pc, #56]	; (aca0 <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    ac68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac6c:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    ac6e:	9804      	ldr	r0, [sp, #16]
    ac70:	f7fd fc96 	bl	85a0 <FlexCAN_IsEnabled>
    ac74:	4603      	mov	r3, r0
    ac76:	2b00      	cmp	r3, #0
    ac78:	d00b      	beq.n	ac92 <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    ac7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac7e:	4619      	mov	r1, r3
    ac80:	9804      	ldr	r0, [sp, #16]
    ac82:	f000 ffe1 	bl	bc48 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    ac86:	9b03      	ldr	r3, [sp, #12]
    ac88:	2201      	movs	r2, #1
    ac8a:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    ac8e:	2300      	movs	r3, #0
    ac90:	9305      	str	r3, [sp, #20]
    }

    return result;
    ac92:	9b05      	ldr	r3, [sp, #20]
}
    ac94:	4618      	mov	r0, r3
    ac96:	b007      	add	sp, #28
    ac98:	f85d fb04 	ldr.w	pc, [sp], #4
    ac9c:	0000f4e8 	.word	0x0000f4e8
    aca0:	1fff8fa0 	.word	0x1fff8fa0

0000aca4 <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    aca4:	b500      	push	{lr}
    aca6:	b087      	sub	sp, #28
    aca8:	4603      	mov	r3, r0
    acaa:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    acae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    acb2:	4a10      	ldr	r2, [pc, #64]	; (acf4 <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    acb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acb8:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    acba:	2301      	movs	r3, #1
    acbc:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    acbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    acc2:	4a0d      	ldr	r2, [pc, #52]	; (acf8 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    acc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acc8:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    acca:	9804      	ldr	r0, [sp, #16]
    accc:	f7fd fc68 	bl	85a0 <FlexCAN_IsEnabled>
    acd0:	4603      	mov	r3, r0
    acd2:	2b00      	cmp	r3, #0
    acd4:	d008      	beq.n	ace8 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    acd6:	9804      	ldr	r0, [sp, #16]
    acd8:	f000 ffae 	bl	bc38 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    acdc:	9b03      	ldr	r3, [sp, #12]
    acde:	2200      	movs	r2, #0
    ace0:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    ace4:	2300      	movs	r3, #0
    ace6:	9305      	str	r3, [sp, #20]
    }

    return result;
    ace8:	9b05      	ldr	r3, [sp, #20]
}
    acea:	4618      	mov	r0, r3
    acec:	b007      	add	sp, #28
    acee:	f85d fb04 	ldr.w	pc, [sp], #4
    acf2:	bf00      	nop
    acf4:	0000f4e8 	.word	0x0000f4e8
    acf8:	1fff8fa0 	.word	0x1fff8fa0

0000acfc <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    acfc:	b500      	push	{lr}
    acfe:	b087      	sub	sp, #28
    ad00:	4603      	mov	r3, r0
    ad02:	9100      	str	r1, [sp, #0]
    ad04:	f88d 3007 	strb.w	r3, [sp, #7]
    ad08:	4613      	mov	r3, r2
    ad0a:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ad0e:	2300      	movs	r3, #0
    ad10:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    ad12:	2300      	movs	r3, #0
    ad14:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    ad16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ad1a:	4a3a      	ldr	r2, [pc, #232]	; (ae04 <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    ad1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad20:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    ad22:	9803      	ldr	r0, [sp, #12]
    ad24:	f7fd fc3c 	bl	85a0 <FlexCAN_IsEnabled>
    ad28:	4603      	mov	r3, r0
    ad2a:	2b00      	cmp	r3, #0
    ad2c:	bf14      	ite	ne
    ad2e:	2301      	movne	r3, #1
    ad30:	2300      	moveq	r3, #0
    ad32:	b2db      	uxtb	r3, r3
    ad34:	f083 0301 	eor.w	r3, r3, #1
    ad38:	b2db      	uxtb	r3, r3
    ad3a:	f88d 300b 	strb.w	r3, [sp, #11]
    ad3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad42:	f003 0301 	and.w	r3, r3, #1
    ad46:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    ad4a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad4e:	2b00      	cmp	r3, #0
    ad50:	d003      	beq.n	ad5a <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    ad52:	9803      	ldr	r0, [sp, #12]
    ad54:	f000 fc46 	bl	b5e4 <FlexCAN_Enable>
    ad58:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    ad5a:	9b05      	ldr	r3, [sp, #20]
    ad5c:	2b00      	cmp	r3, #0
    ad5e:	d13c      	bne.n	adda <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    ad60:	9b00      	ldr	r3, [sp, #0]
    ad62:	2b04      	cmp	r3, #4
    ad64:	d83b      	bhi.n	adde <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    ad66:	a201      	add	r2, pc, #4	; (adr r2, ad6c <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    ad68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ad6c:	0000adb7 	.word	0x0000adb7
    ad70:	0000adc9 	.word	0x0000adc9
    ad74:	0000ad93 	.word	0x0000ad93
    ad78:	0000ada5 	.word	0x0000ada5
    ad7c:	0000ad81 	.word	0x0000ad81
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    ad80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ad84:	461a      	mov	r2, r3
    ad86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    ad8a:	9803      	ldr	r0, [sp, #12]
    ad8c:	f000 fce8 	bl	b760 <FlexCAN_SetErrIntCmd>
                break;
    ad90:	e026      	b.n	ade0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    ad92:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ad96:	461a      	mov	r2, r3
    ad98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    ad9c:	9803      	ldr	r0, [sp, #12]
    ad9e:	f000 fcdf 	bl	b760 <FlexCAN_SetErrIntCmd>
                break;
    ada2:	e01d      	b.n	ade0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    ada4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ada8:	461a      	mov	r2, r3
    adaa:	f244 0101 	movw	r1, #16385	; 0x4001
    adae:	9803      	ldr	r0, [sp, #12]
    adb0:	f000 fcd6 	bl	b760 <FlexCAN_SetErrIntCmd>
                break;
    adb4:	e014      	b.n	ade0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    adb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    adba:	461a      	mov	r2, r3
    adbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    adc0:	9803      	ldr	r0, [sp, #12]
    adc2:	f000 fccd 	bl	b760 <FlexCAN_SetErrIntCmd>
                }
                break;
    adc6:	e00b      	b.n	ade0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    adc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    adcc:	461a      	mov	r2, r3
    adce:	f44f 6100 	mov.w	r1, #2048	; 0x800
    add2:	9803      	ldr	r0, [sp, #12]
    add4:	f000 fcc4 	bl	b760 <FlexCAN_SetErrIntCmd>
                }
                break;
    add8:	e002      	b.n	ade0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    adda:	bf00      	nop
    addc:	e000      	b.n	ade0 <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    adde:	bf00      	nop

    if (TRUE == disabled)
    ade0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ade4:	2b00      	cmp	r3, #0
    ade6:	d008      	beq.n	adfa <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    ade8:	9803      	ldr	r0, [sp, #12]
    adea:	f000 fc79 	bl	b6e0 <FlexCAN_Disable>
    adee:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    adf0:	9b04      	ldr	r3, [sp, #16]
    adf2:	2b00      	cmp	r3, #0
    adf4:	d001      	beq.n	adfa <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    adf6:	9b04      	ldr	r3, [sp, #16]
    adf8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    adfa:	9b05      	ldr	r3, [sp, #20]
}
    adfc:	4618      	mov	r0, r3
    adfe:	b007      	add	sp, #28
    ae00:	f85d fb04 	ldr.w	pc, [sp], #4
    ae04:	0000f4e8 	.word	0x0000f4e8

0000ae08 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    ae08:	b500      	push	{lr}
    ae0a:	b087      	sub	sp, #28
    ae0c:	4603      	mov	r3, r0
    ae0e:	460a      	mov	r2, r1
    ae10:	f88d 3007 	strb.w	r3, [sp, #7]
    ae14:	4613      	mov	r3, r2
    ae16:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    ae1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae1e:	4a27      	ldr	r2, [pc, #156]	; (aebc <FlexCAN_Ip_AbortTransfer+0xb4>)
    ae20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae24:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    ae26:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae2a:	4a25      	ldr	r2, [pc, #148]	; (aec0 <FlexCAN_Ip_AbortTransfer+0xb8>)
    ae2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae30:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ae32:	2300      	movs	r3, #0
    ae34:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    ae36:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae3a:	2b1f      	cmp	r3, #31
    ae3c:	d838      	bhi.n	aeb0 <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    ae3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae42:	9a03      	ldr	r2, [sp, #12]
    ae44:	011b      	lsls	r3, r3, #4
    ae46:	4413      	add	r3, r2
    ae48:	3304      	adds	r3, #4
    ae4a:	681b      	ldr	r3, [r3, #0]
    ae4c:	2b00      	cmp	r3, #0
    ae4e:	d102      	bne.n	ae56 <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    ae50:	2305      	movs	r3, #5
    ae52:	9305      	str	r3, [sp, #20]
    ae54:	e02c      	b.n	aeb0 <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    ae56:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ae5a:	9b03      	ldr	r3, [sp, #12]
    ae5c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    ae60:	f89d 1007 	ldrb.w	r1, [sp, #7]
    ae64:	9804      	ldr	r0, [sp, #16]
    ae66:	f000 feb3 	bl	bbd0 <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    ae6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae6e:	9a03      	ldr	r2, [sp, #12]
    ae70:	011b      	lsls	r3, r3, #4
    ae72:	4413      	add	r3, r2
    ae74:	3304      	adds	r3, #4
    ae76:	681b      	ldr	r3, [r3, #0]
    ae78:	2b02      	cmp	r3, #2
    ae7a:	d108      	bne.n	ae8e <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    ae7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ae80:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae84:	4611      	mov	r1, r2
    ae86:	4618      	mov	r0, r3
    ae88:	f7fe fabc 	bl	9404 <FlexCAN_AbortTxTransfer>
    ae8c:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    ae8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae92:	9a03      	ldr	r2, [sp, #12]
    ae94:	011b      	lsls	r3, r3, #4
    ae96:	4413      	add	r3, r2
    ae98:	3304      	adds	r3, #4
    ae9a:	681b      	ldr	r3, [r3, #0]
    ae9c:	2b01      	cmp	r3, #1
    ae9e:	d107      	bne.n	aeb0 <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    aea0:	f89d 2006 	ldrb.w	r2, [sp, #6]
    aea4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aea8:	4611      	mov	r1, r2
    aeaa:	4618      	mov	r0, r3
    aeac:	f7fe fb34 	bl	9518 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    aeb0:	9b05      	ldr	r3, [sp, #20]
}
    aeb2:	4618      	mov	r0, r3
    aeb4:	b007      	add	sp, #28
    aeb6:	f85d fb04 	ldr.w	pc, [sp], #4
    aeba:	bf00      	nop
    aebc:	0000f4e8 	.word	0x0000f4e8
    aec0:	1fff8fa0 	.word	0x1fff8fa0

0000aec4 <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    aec4:	b500      	push	{lr}
    aec6:	b087      	sub	sp, #28
    aec8:	4603      	mov	r3, r0
    aeca:	9100      	str	r1, [sp, #0]
    aecc:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    aed0:	2300      	movs	r3, #0
    aed2:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    aed4:	2300      	movs	r3, #0
    aed6:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    aed8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aedc:	4a1b      	ldr	r2, [pc, #108]	; (af4c <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    aede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aee2:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    aee4:	9803      	ldr	r0, [sp, #12]
    aee6:	f7fd fb5b 	bl	85a0 <FlexCAN_IsEnabled>
    aeea:	4603      	mov	r3, r0
    aeec:	2b00      	cmp	r3, #0
    aeee:	bf14      	ite	ne
    aef0:	2301      	movne	r3, #1
    aef2:	2300      	moveq	r3, #0
    aef4:	b2db      	uxtb	r3, r3
    aef6:	f083 0301 	eor.w	r3, r3, #1
    aefa:	b2db      	uxtb	r3, r3
    aefc:	f88d 300b 	strb.w	r3, [sp, #11]
    af00:	f89d 300b 	ldrb.w	r3, [sp, #11]
    af04:	f003 0301 	and.w	r3, r3, #1
    af08:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    af0c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    af10:	2b00      	cmp	r3, #0
    af12:	d003      	beq.n	af1c <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    af14:	9803      	ldr	r0, [sp, #12]
    af16:	f000 fb65 	bl	b5e4 <FlexCAN_Enable>
    af1a:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    af1c:	9b05      	ldr	r3, [sp, #20]
    af1e:	2b00      	cmp	r3, #0
    af20:	d102      	bne.n	af28 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    af22:	9b03      	ldr	r3, [sp, #12]
    af24:	9a00      	ldr	r2, [sp, #0]
    af26:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    af28:	f89d 300b 	ldrb.w	r3, [sp, #11]
    af2c:	2b00      	cmp	r3, #0
    af2e:	d008      	beq.n	af42 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    af30:	9803      	ldr	r0, [sp, #12]
    af32:	f000 fbd5 	bl	b6e0 <FlexCAN_Disable>
    af36:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    af38:	9b04      	ldr	r3, [sp, #16]
    af3a:	2b00      	cmp	r3, #0
    af3c:	d001      	beq.n	af42 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    af3e:	9b04      	ldr	r3, [sp, #16]
    af40:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    af42:	9b05      	ldr	r3, [sp, #20]
}
    af44:	4618      	mov	r0, r3
    af46:	b007      	add	sp, #28
    af48:	f85d fb04 	ldr.w	pc, [sp], #4
    af4c:	0000f4e8 	.word	0x0000f4e8

0000af50 <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    af50:	b500      	push	{lr}
    af52:	b087      	sub	sp, #28
    af54:	4603      	mov	r3, r0
    af56:	9100      	str	r1, [sp, #0]
    af58:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    af5c:	2300      	movs	r3, #0
    af5e:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    af60:	2300      	movs	r3, #0
    af62:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    af64:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af68:	4a1b      	ldr	r2, [pc, #108]	; (afd8 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    af6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af6e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    af70:	9803      	ldr	r0, [sp, #12]
    af72:	f7fd fb15 	bl	85a0 <FlexCAN_IsEnabled>
    af76:	4603      	mov	r3, r0
    af78:	2b00      	cmp	r3, #0
    af7a:	bf14      	ite	ne
    af7c:	2301      	movne	r3, #1
    af7e:	2300      	moveq	r3, #0
    af80:	b2db      	uxtb	r3, r3
    af82:	f083 0301 	eor.w	r3, r3, #1
    af86:	b2db      	uxtb	r3, r3
    af88:	f88d 300b 	strb.w	r3, [sp, #11]
    af8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    af90:	f003 0301 	and.w	r3, r3, #1
    af94:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    af98:	f89d 300b 	ldrb.w	r3, [sp, #11]
    af9c:	2b00      	cmp	r3, #0
    af9e:	d003      	beq.n	afa8 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    afa0:	9803      	ldr	r0, [sp, #12]
    afa2:	f000 fb1f 	bl	b5e4 <FlexCAN_Enable>
    afa6:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    afa8:	9b05      	ldr	r3, [sp, #20]
    afaa:	2b00      	cmp	r3, #0
    afac:	d102      	bne.n	afb4 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    afae:	9b03      	ldr	r3, [sp, #12]
    afb0:	9a00      	ldr	r2, [sp, #0]
    afb2:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    afb4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    afb8:	2b00      	cmp	r3, #0
    afba:	d008      	beq.n	afce <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    afbc:	9803      	ldr	r0, [sp, #12]
    afbe:	f000 fb8f 	bl	b6e0 <FlexCAN_Disable>
    afc2:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    afc4:	9b04      	ldr	r3, [sp, #16]
    afc6:	2b00      	cmp	r3, #0
    afc8:	d001      	beq.n	afce <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    afca:	9b04      	ldr	r3, [sp, #16]
    afcc:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    afce:	9b05      	ldr	r3, [sp, #20]
}
    afd0:	4618      	mov	r0, r3
    afd2:	b007      	add	sp, #28
    afd4:	f85d fb04 	ldr.w	pc, [sp], #4
    afd8:	0000f4e8 	.word	0x0000f4e8

0000afdc <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    afdc:	b500      	push	{lr}
    afde:	b087      	sub	sp, #28
    afe0:	4603      	mov	r3, r0
    afe2:	460a      	mov	r2, r1
    afe4:	f88d 3007 	strb.w	r3, [sp, #7]
    afe8:	4613      	mov	r3, r2
    afea:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    afee:	2300      	movs	r3, #0
    aff0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    aff2:	2300      	movs	r3, #0
    aff4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    aff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    affa:	4a1f      	ldr	r2, [pc, #124]	; (b078 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    affc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b000:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b002:	9803      	ldr	r0, [sp, #12]
    b004:	f7fd facc 	bl	85a0 <FlexCAN_IsEnabled>
    b008:	4603      	mov	r3, r0
    b00a:	2b00      	cmp	r3, #0
    b00c:	bf14      	ite	ne
    b00e:	2301      	movne	r3, #1
    b010:	2300      	moveq	r3, #0
    b012:	b2db      	uxtb	r3, r3
    b014:	f083 0301 	eor.w	r3, r3, #1
    b018:	b2db      	uxtb	r3, r3
    b01a:	f88d 300b 	strb.w	r3, [sp, #11]
    b01e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b022:	f003 0301 	and.w	r3, r3, #1
    b026:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b02a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b02e:	2b00      	cmp	r3, #0
    b030:	d003      	beq.n	b03a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    b032:	9803      	ldr	r0, [sp, #12]
    b034:	f000 fad6 	bl	b5e4 <FlexCAN_Enable>
    b038:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b03a:	9b05      	ldr	r3, [sp, #20]
    b03c:	2b00      	cmp	r3, #0
    b03e:	d109      	bne.n	b054 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    b040:	f001 fff6 	bl	d030 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    b044:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b048:	4619      	mov	r1, r3
    b04a:	9803      	ldr	r0, [sp, #12]
    b04c:	f7fd fae5 	bl	861a <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    b050:	f002 f81a 	bl	d088 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    b054:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b058:	2b00      	cmp	r3, #0
    b05a:	d008      	beq.n	b06e <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    b05c:	9803      	ldr	r0, [sp, #12]
    b05e:	f000 fb3f 	bl	b6e0 <FlexCAN_Disable>
    b062:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b064:	9b04      	ldr	r3, [sp, #16]
    b066:	2b00      	cmp	r3, #0
    b068:	d001      	beq.n	b06e <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    b06a:	9b04      	ldr	r3, [sp, #16]
    b06c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b06e:	9b05      	ldr	r3, [sp, #20]
}
    b070:	4618      	mov	r0, r3
    b072:	b007      	add	sp, #28
    b074:	f85d fb04 	ldr.w	pc, [sp], #4
    b078:	0000f4e8 	.word	0x0000f4e8

0000b07c <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    b07c:	b500      	push	{lr}
    b07e:	b085      	sub	sp, #20
    b080:	4603      	mov	r3, r0
    b082:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    b086:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b08a:	4a06      	ldr	r2, [pc, #24]	; (b0a4 <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    b08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b090:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    b092:	9803      	ldr	r0, [sp, #12]
    b094:	f7fd fc5d 	bl	8952 <FlexCAN_IsListenOnlyModeEnabled>
    b098:	4603      	mov	r3, r0
}
    b09a:	4618      	mov	r0, r3
    b09c:	b005      	add	sp, #20
    b09e:	f85d fb04 	ldr.w	pc, [sp], #4
    b0a2:	bf00      	nop
    b0a4:	0000f4e8 	.word	0x0000f4e8

0000b0a8 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    b0a8:	b500      	push	{lr}
    b0aa:	b089      	sub	sp, #36	; 0x24
    b0ac:	4603      	mov	r3, r0
    b0ae:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    b0b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b0b6:	4a27      	ldr	r2, [pc, #156]	; (b154 <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    b0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0bc:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    b0be:	2300      	movs	r3, #0
    b0c0:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    b0c2:	2300      	movs	r3, #0
    b0c4:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b0c6:	2100      	movs	r1, #0
    b0c8:	4823      	ldr	r0, [pc, #140]	; (b158 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    b0ca:	f7f6 fdcd 	bl	1c68 <OsIf_MicrosToTicks>
    b0ce:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    b0d0:	2301      	movs	r3, #1
    b0d2:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    b0d4:	9b05      	ldr	r3, [sp, #20]
    b0d6:	685b      	ldr	r3, [r3, #4]
    b0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b0dc:	2b00      	cmp	r3, #0
    b0de:	d033      	beq.n	b148 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    b0e0:	2300      	movs	r3, #0
    b0e2:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    b0e4:	9b05      	ldr	r3, [sp, #20]
    b0e6:	6a1b      	ldr	r3, [r3, #32]
    b0e8:	f003 0320 	and.w	r3, r3, #32
    b0ec:	2b00      	cmp	r3, #0
    b0ee:	d02b      	beq.n	b148 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    b0f0:	f002 fad2 	bl	d698 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    b0f4:	9b05      	ldr	r3, [sp, #20]
    b0f6:	685b      	ldr	r3, [r3, #4]
    b0f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    b0fc:	9b05      	ldr	r3, [sp, #20]
    b0fe:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    b100:	9b05      	ldr	r3, [sp, #20]
    b102:	685b      	ldr	r3, [r3, #4]
    b104:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    b108:	9b05      	ldr	r3, [sp, #20]
    b10a:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    b10c:	f002 faf0 	bl	d6f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b110:	2000      	movs	r0, #0
    b112:	f7f6 fd5d 	bl	1bd0 <OsIf_GetCounter>
    b116:	4603      	mov	r3, r0
    b118:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    b11a:	e00f      	b.n	b13c <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b11c:	ab03      	add	r3, sp, #12
    b11e:	2100      	movs	r1, #0
    b120:	4618      	mov	r0, r3
    b122:	f7f6 fd6e 	bl	1c02 <OsIf_GetElapsed>
    b126:	4602      	mov	r2, r0
    b128:	9b07      	ldr	r3, [sp, #28]
    b12a:	4413      	add	r3, r2
    b12c:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    b12e:	9a07      	ldr	r2, [sp, #28]
    b130:	9b04      	ldr	r3, [sp, #16]
    b132:	429a      	cmp	r2, r3
    b134:	d302      	bcc.n	b13c <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    b136:	2303      	movs	r3, #3
    b138:	9306      	str	r3, [sp, #24]
                    break;
    b13a:	e005      	b.n	b148 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    b13c:	9b05      	ldr	r3, [sp, #20]
    b13e:	6a1b      	ldr	r3, [r3, #32]
    b140:	f003 0320 	and.w	r3, r3, #32
    b144:	2b00      	cmp	r3, #0
    b146:	d1e9      	bne.n	b11c <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    b148:	9b06      	ldr	r3, [sp, #24]
}
    b14a:	4618      	mov	r0, r3
    b14c:	b009      	add	sp, #36	; 0x24
    b14e:	f85d fb04 	ldr.w	pc, [sp], #4
    b152:	bf00      	nop
    b154:	0000f4e8 	.word	0x0000f4e8
    b158:	000f4240 	.word	0x000f4240

0000b15c <FlexCAN_SetSelfReception>:
{
    b15c:	b082      	sub	sp, #8
    b15e:	9001      	str	r0, [sp, #4]
    b160:	460b      	mov	r3, r1
    b162:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    b166:	9b01      	ldr	r3, [sp, #4]
    b168:	681b      	ldr	r3, [r3, #0]
    b16a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    b16e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b172:	2a00      	cmp	r2, #0
    b174:	d001      	beq.n	b17a <FlexCAN_SetSelfReception+0x1e>
    b176:	2200      	movs	r2, #0
    b178:	e001      	b.n	b17e <FlexCAN_SetSelfReception+0x22>
    b17a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b17e:	431a      	orrs	r2, r3
    b180:	9b01      	ldr	r3, [sp, #4]
    b182:	601a      	str	r2, [r3, #0]
}
    b184:	bf00      	nop
    b186:	b002      	add	sp, #8
    b188:	4770      	bx	lr

0000b18a <FlexCAN_IsFDEnabled>:
{
    b18a:	b082      	sub	sp, #8
    b18c:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    b18e:	9b01      	ldr	r3, [sp, #4]
    b190:	681b      	ldr	r3, [r3, #0]
    b192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b196:	2b00      	cmp	r3, #0
    b198:	bf14      	ite	ne
    b19a:	2301      	movne	r3, #1
    b19c:	2300      	moveq	r3, #0
    b19e:	b2db      	uxtb	r3, r3
}
    b1a0:	4618      	mov	r0, r3
    b1a2:	b002      	add	sp, #8
    b1a4:	4770      	bx	lr

0000b1a6 <FlexCAN_SetIsoCan>:
{
    b1a6:	b082      	sub	sp, #8
    b1a8:	9001      	str	r0, [sp, #4]
    b1aa:	460b      	mov	r3, r1
    b1ac:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    b1b0:	9b01      	ldr	r3, [sp, #4]
    b1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b1b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b1b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b1bc:	2a00      	cmp	r2, #0
    b1be:	d002      	beq.n	b1c6 <FlexCAN_SetIsoCan+0x20>
    b1c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    b1c4:	e000      	b.n	b1c8 <FlexCAN_SetIsoCan+0x22>
    b1c6:	2200      	movs	r2, #0
    b1c8:	431a      	orrs	r2, r3
    b1ca:	9b01      	ldr	r3, [sp, #4]
    b1cc:	635a      	str	r2, [r3, #52]	; 0x34
}
    b1ce:	bf00      	nop
    b1d0:	b002      	add	sp, #8
    b1d2:	4770      	bx	lr

0000b1d4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    b1d4:	b082      	sub	sp, #8
    b1d6:	9001      	str	r0, [sp, #4]
    b1d8:	460b      	mov	r3, r1
    b1da:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    b1de:	9b01      	ldr	r3, [sp, #4]
    b1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b1e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b1e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b1ea:	2a00      	cmp	r2, #0
    b1ec:	d002      	beq.n	b1f4 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    b1ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b1f2:	e000      	b.n	b1f6 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    b1f4:	2200      	movs	r2, #0
    b1f6:	431a      	orrs	r2, r3
    b1f8:	9b01      	ldr	r3, [sp, #4]
    b1fa:	635a      	str	r2, [r3, #52]	; 0x34
}
    b1fc:	bf00      	nop
    b1fe:	b002      	add	sp, #8
    b200:	4770      	bx	lr

0000b202 <FlexCAN_SetProtocolException>:
{
    b202:	b082      	sub	sp, #8
    b204:	9001      	str	r0, [sp, #4]
    b206:	460b      	mov	r3, r1
    b208:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    b20c:	9b01      	ldr	r3, [sp, #4]
    b20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    b214:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b218:	2a00      	cmp	r2, #0
    b21a:	d002      	beq.n	b222 <FlexCAN_SetProtocolException+0x20>
    b21c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b220:	e000      	b.n	b224 <FlexCAN_SetProtocolException+0x22>
    b222:	2200      	movs	r2, #0
    b224:	431a      	orrs	r2, r3
    b226:	9b01      	ldr	r3, [sp, #4]
    b228:	635a      	str	r2, [r3, #52]	; 0x34
}
    b22a:	bf00      	nop
    b22c:	b002      	add	sp, #8
    b22e:	4770      	bx	lr

0000b230 <FlexCAN_SetRemoteReqStore>:
{
    b230:	b082      	sub	sp, #8
    b232:	9001      	str	r0, [sp, #4]
    b234:	460b      	mov	r3, r1
    b236:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    b23a:	9b01      	ldr	r3, [sp, #4]
    b23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b23e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    b242:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b246:	2a00      	cmp	r2, #0
    b248:	d002      	beq.n	b250 <FlexCAN_SetRemoteReqStore+0x20>
    b24a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b24e:	e000      	b.n	b252 <FlexCAN_SetRemoteReqStore+0x22>
    b250:	2200      	movs	r2, #0
    b252:	431a      	orrs	r2, r3
    b254:	9b01      	ldr	r3, [sp, #4]
    b256:	635a      	str	r2, [r3, #52]	; 0x34
}
    b258:	bf00      	nop
    b25a:	b002      	add	sp, #8
    b25c:	4770      	bx	lr

0000b25e <FlexCAN_SetBusOffAutorecovery>:
{
    b25e:	b082      	sub	sp, #8
    b260:	9001      	str	r0, [sp, #4]
    b262:	460b      	mov	r3, r1
    b264:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    b268:	9b01      	ldr	r3, [sp, #4]
    b26a:	685b      	ldr	r3, [r3, #4]
    b26c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    b270:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b274:	2a00      	cmp	r2, #0
    b276:	d001      	beq.n	b27c <FlexCAN_SetBusOffAutorecovery+0x1e>
    b278:	2200      	movs	r2, #0
    b27a:	e000      	b.n	b27e <FlexCAN_SetBusOffAutorecovery+0x20>
    b27c:	2240      	movs	r2, #64	; 0x40
    b27e:	431a      	orrs	r2, r3
    b280:	9b01      	ldr	r3, [sp, #4]
    b282:	605a      	str	r2, [r3, #4]
}
    b284:	bf00      	nop
    b286:	b002      	add	sp, #8
    b288:	4770      	bx	lr

0000b28a <FlexCAN_SetEdgeFilter>:
{
    b28a:	b082      	sub	sp, #8
    b28c:	9001      	str	r0, [sp, #4]
    b28e:	460b      	mov	r3, r1
    b290:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    b294:	9b01      	ldr	r3, [sp, #4]
    b296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b298:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    b29c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b2a0:	2a00      	cmp	r2, #0
    b2a2:	d001      	beq.n	b2a8 <FlexCAN_SetEdgeFilter+0x1e>
    b2a4:	2200      	movs	r2, #0
    b2a6:	e001      	b.n	b2ac <FlexCAN_SetEdgeFilter+0x22>
    b2a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b2ac:	431a      	orrs	r2, r3
    b2ae:	9b01      	ldr	r3, [sp, #4]
    b2b0:	635a      	str	r2, [r3, #52]	; 0x34
}
    b2b2:	bf00      	nop
    b2b4:	b002      	add	sp, #8
    b2b6:	4770      	bx	lr

0000b2b8 <FlexCAN_CanBitSampling>:
{
    b2b8:	b082      	sub	sp, #8
    b2ba:	9001      	str	r0, [sp, #4]
    b2bc:	460b      	mov	r3, r1
    b2be:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    b2c2:	9b01      	ldr	r3, [sp, #4]
    b2c4:	685b      	ldr	r3, [r3, #4]
    b2c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b2ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
    b2ce:	2a00      	cmp	r2, #0
    b2d0:	d001      	beq.n	b2d6 <FlexCAN_CanBitSampling+0x1e>
    b2d2:	2280      	movs	r2, #128	; 0x80
    b2d4:	e000      	b.n	b2d8 <FlexCAN_CanBitSampling+0x20>
    b2d6:	2200      	movs	r2, #0
    b2d8:	431a      	orrs	r2, r3
    b2da:	9b01      	ldr	r3, [sp, #4]
    b2dc:	605a      	str	r2, [r3, #4]
}
    b2de:	bf00      	nop
    b2e0:	b002      	add	sp, #8
    b2e2:	4770      	bx	lr

0000b2e4 <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    b2e4:	b084      	sub	sp, #16
    b2e6:	4603      	mov	r3, r0
    b2e8:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    b2ec:	23ff      	movs	r3, #255	; 0xff
    b2ee:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    b2f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b2f4:	2b40      	cmp	r3, #64	; 0x40
    b2f6:	d804      	bhi.n	b302 <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    b2f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b2fc:	4a03      	ldr	r2, [pc, #12]	; (b30c <FlexCAN_ComputeDLCValue+0x28>)
    b2fe:	5cd3      	ldrb	r3, [r2, r3]
    b300:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    b302:	9b03      	ldr	r3, [sp, #12]
    b304:	b2db      	uxtb	r3, r3
}
    b306:	4618      	mov	r0, r3
    b308:	b004      	add	sp, #16
    b30a:	4770      	bx	lr
    b30c:	0000f4f4 	.word	0x0000f4f4

0000b310 <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    b310:	b500      	push	{lr}
    b312:	b087      	sub	sp, #28
    b314:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    b316:	9801      	ldr	r0, [sp, #4]
    b318:	f000 f8f6 	bl	b508 <FlexCAN_GetMaxMbNum>
    b31c:	4603      	mov	r3, r0
    b31e:	009b      	lsls	r3, r3, #2
    b320:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    b322:	9801      	ldr	r0, [sp, #4]
    b324:	f000 f8f0 	bl	b508 <FlexCAN_GetMaxMbNum>
    b328:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    b32a:	9b01      	ldr	r3, [sp, #4]
    b32c:	3380      	adds	r3, #128	; 0x80
    b32e:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    b330:	2300      	movs	r3, #0
    b332:	9305      	str	r3, [sp, #20]
    b334:	e008      	b.n	b348 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    b336:	9b05      	ldr	r3, [sp, #20]
    b338:	009b      	lsls	r3, r3, #2
    b33a:	9a02      	ldr	r2, [sp, #8]
    b33c:	4413      	add	r3, r2
    b33e:	2200      	movs	r2, #0
    b340:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    b342:	9b05      	ldr	r3, [sp, #20]
    b344:	3301      	adds	r3, #1
    b346:	9305      	str	r3, [sp, #20]
    b348:	9a05      	ldr	r2, [sp, #20]
    b34a:	9b04      	ldr	r3, [sp, #16]
    b34c:	429a      	cmp	r2, r3
    b34e:	d3f2      	bcc.n	b336 <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    b350:	9b01      	ldr	r3, [sp, #4]
    b352:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    b356:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    b358:	2300      	movs	r3, #0
    b35a:	9305      	str	r3, [sp, #20]
    b35c:	e008      	b.n	b370 <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    b35e:	9b05      	ldr	r3, [sp, #20]
    b360:	009b      	lsls	r3, r3, #2
    b362:	9a02      	ldr	r2, [sp, #8]
    b364:	4413      	add	r3, r2
    b366:	2200      	movs	r2, #0
    b368:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    b36a:	9b05      	ldr	r3, [sp, #20]
    b36c:	3301      	adds	r3, #1
    b36e:	9305      	str	r3, [sp, #20]
    b370:	9a05      	ldr	r2, [sp, #20]
    b372:	9b03      	ldr	r3, [sp, #12]
    b374:	429a      	cmp	r2, r3
    b376:	d3f2      	bcc.n	b35e <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    b378:	bf00      	nop
    b37a:	bf00      	nop
    b37c:	b007      	add	sp, #28
    b37e:	f85d fb04 	ldr.w	pc, [sp], #4

0000b382 <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    b382:	b084      	sub	sp, #16
    b384:	4603      	mov	r3, r0
    b386:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    b38a:	2308      	movs	r3, #8
    b38c:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    b390:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b394:	2b08      	cmp	r3, #8
    b396:	d804      	bhi.n	b3a2 <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    b398:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b39c:	f88d 300f 	strb.w	r3, [sp, #15]
    b3a0:	e033      	b.n	b40a <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    b3a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b3a6:	3b09      	subs	r3, #9
    b3a8:	2b06      	cmp	r3, #6
    b3aa:	d82d      	bhi.n	b408 <FlexCAN_ComputePayloadSize+0x86>
    b3ac:	a201      	add	r2, pc, #4	; (adr r2, b3b4 <FlexCAN_ComputePayloadSize+0x32>)
    b3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b3b2:	bf00      	nop
    b3b4:	0000b3d1 	.word	0x0000b3d1
    b3b8:	0000b3d9 	.word	0x0000b3d9
    b3bc:	0000b3e1 	.word	0x0000b3e1
    b3c0:	0000b3e9 	.word	0x0000b3e9
    b3c4:	0000b3f1 	.word	0x0000b3f1
    b3c8:	0000b3f9 	.word	0x0000b3f9
    b3cc:	0000b401 	.word	0x0000b401
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    b3d0:	230c      	movs	r3, #12
    b3d2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b3d6:	e018      	b.n	b40a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    b3d8:	2310      	movs	r3, #16
    b3da:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b3de:	e014      	b.n	b40a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    b3e0:	2314      	movs	r3, #20
    b3e2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b3e6:	e010      	b.n	b40a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    b3e8:	2318      	movs	r3, #24
    b3ea:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b3ee:	e00c      	b.n	b40a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    b3f0:	2320      	movs	r3, #32
    b3f2:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b3f6:	e008      	b.n	b40a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    b3f8:	2330      	movs	r3, #48	; 0x30
    b3fa:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b3fe:	e004      	b.n	b40a <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    b400:	2340      	movs	r3, #64	; 0x40
    b402:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    b406:	e000      	b.n	b40a <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    b408:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    b40a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b40e:	4618      	mov	r0, r3
    b410:	b004      	add	sp, #16
    b412:	4770      	bx	lr

0000b414 <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    b414:	b500      	push	{lr}
    b416:	b08b      	sub	sp, #44	; 0x2c
    b418:	9001      	str	r0, [sp, #4]
    b41a:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    b41c:	2308      	movs	r3, #8
    b41e:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    b422:	2300      	movs	r3, #0
    b424:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    b428:	f44f 7300 	mov.w	r3, #512	; 0x200
    b42c:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    b42e:	2300      	movs	r3, #0
    b430:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    b434:	9b00      	ldr	r3, [sp, #0]
    b436:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    b43a:	2300      	movs	r3, #0
    b43c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    b440:	2300      	movs	r3, #0
    b442:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    b446:	2300      	movs	r3, #0
    b448:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    b44a:	2300      	movs	r3, #0
    b44c:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    b450:	9b01      	ldr	r3, [sp, #4]
    b452:	3380      	adds	r3, #128	; 0x80
    b454:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    b456:	2300      	movs	r3, #0
    b458:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    b45a:	2300      	movs	r3, #0
    b45c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    b460:	e02d      	b.n	b4be <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    b462:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    b466:	4619      	mov	r1, r3
    b468:	9801      	ldr	r0, [sp, #4]
    b46a:	f000 fad1 	bl	ba10 <FlexCAN_GetPayloadSize>
    b46e:	4603      	mov	r3, r0
    b470:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    b474:	f89d 2017 	ldrb.w	r2, [sp, #23]
    b478:	f89d 3020 	ldrb.w	r3, [sp, #32]
    b47c:	4413      	add	r3, r2
    b47e:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    b482:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    b486:	9a07      	ldr	r2, [sp, #28]
    b488:	fbb2 f3f3 	udiv	r3, r2, r3
    b48c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    b490:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    b494:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    b498:	429a      	cmp	r2, r3
    b49a:	d815      	bhi.n	b4c8 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    b49c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    b4a0:	3380      	adds	r3, #128	; 0x80
    b4a2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    b4a6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    b4aa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    b4ae:	1ad3      	subs	r3, r2, r3
    b4b0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    b4b4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    b4b8:	3301      	adds	r3, #1
    b4ba:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    b4be:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    b4c2:	2b00      	cmp	r3, #0
    b4c4:	d0cd      	beq.n	b462 <FlexCAN_GetMsgBuffRegion+0x4e>
    b4c6:	e000      	b.n	b4ca <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    b4c8:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    b4ca:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    b4ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    b4d2:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    b4d6:	fbb3 f0f2 	udiv	r0, r3, r2
    b4da:	fb00 f202 	mul.w	r2, r0, r2
    b4de:	1a9b      	subs	r3, r3, r2
    b4e0:	b2db      	uxtb	r3, r3
    b4e2:	461a      	mov	r2, r3
    b4e4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    b4e8:	089b      	lsrs	r3, r3, #2
    b4ea:	b2db      	uxtb	r3, r3
    b4ec:	fb02 f303 	mul.w	r3, r2, r3
    b4f0:	440b      	add	r3, r1
    b4f2:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    b4f4:	9b06      	ldr	r3, [sp, #24]
    b4f6:	009b      	lsls	r3, r3, #2
    b4f8:	9a04      	ldr	r2, [sp, #16]
    b4fa:	4413      	add	r3, r2
    b4fc:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    b4fe:	9b03      	ldr	r3, [sp, #12]
}
    b500:	4618      	mov	r0, r3
    b502:	b00b      	add	sp, #44	; 0x2c
    b504:	f85d fb04 	ldr.w	pc, [sp], #4

0000b508 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    b508:	b084      	sub	sp, #16
    b50a:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    b50c:	2300      	movs	r3, #0
    b50e:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    b510:	2300      	movs	r3, #0
    b512:	9303      	str	r3, [sp, #12]
    b514:	e00e      	b.n	b534 <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    b516:	4a0b      	ldr	r2, [pc, #44]	; (b544 <FlexCAN_GetMaxMbNum+0x3c>)
    b518:	9b03      	ldr	r3, [sp, #12]
    b51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b51e:	9a01      	ldr	r2, [sp, #4]
    b520:	429a      	cmp	r2, r3
    b522:	d104      	bne.n	b52e <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    b524:	4a08      	ldr	r2, [pc, #32]	; (b548 <FlexCAN_GetMaxMbNum+0x40>)
    b526:	9b03      	ldr	r3, [sp, #12]
    b528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b52c:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    b52e:	9b03      	ldr	r3, [sp, #12]
    b530:	3301      	adds	r3, #1
    b532:	9303      	str	r3, [sp, #12]
    b534:	9b03      	ldr	r3, [sp, #12]
    b536:	2b02      	cmp	r3, #2
    b538:	d9ed      	bls.n	b516 <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    b53a:	9b02      	ldr	r3, [sp, #8]
}
    b53c:	4618      	mov	r0, r3
    b53e:	b004      	add	sp, #16
    b540:	4770      	bx	lr
    b542:	bf00      	nop
    b544:	0000f538 	.word	0x0000f538
    b548:	0000f544 	.word	0x0000f544

0000b54c <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    b54c:	b500      	push	{lr}
    b54e:	b087      	sub	sp, #28
    b550:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    b552:	2300      	movs	r3, #0
    b554:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    b556:	2300      	movs	r3, #0
    b558:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b55a:	2100      	movs	r1, #0
    b55c:	4820      	ldr	r0, [pc, #128]	; (b5e0 <FlexCAN_EnterFreezeMode+0x94>)
    b55e:	f7f6 fb83 	bl	1c68 <OsIf_MicrosToTicks>
    b562:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    b564:	2300      	movs	r3, #0
    b566:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    b568:	f001 fad2 	bl	cb10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    b56c:	9b01      	ldr	r3, [sp, #4]
    b56e:	681b      	ldr	r3, [r3, #0]
    b570:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    b574:	9b01      	ldr	r3, [sp, #4]
    b576:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    b578:	9b01      	ldr	r3, [sp, #4]
    b57a:	681b      	ldr	r3, [r3, #0]
    b57c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    b580:	9b01      	ldr	r3, [sp, #4]
    b582:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    b584:	9b01      	ldr	r3, [sp, #4]
    b586:	681b      	ldr	r3, [r3, #0]
    b588:	2b00      	cmp	r3, #0
    b58a:	da05      	bge.n	b598 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    b58c:	9b01      	ldr	r3, [sp, #4]
    b58e:	681b      	ldr	r3, [r3, #0]
    b590:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    b594:	9b01      	ldr	r3, [sp, #4]
    b596:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    b598:	f001 fae6 	bl	cb68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b59c:	2000      	movs	r0, #0
    b59e:	f7f6 fb17 	bl	1bd0 <OsIf_GetCounter>
    b5a2:	4603      	mov	r3, r0
    b5a4:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    b5a6:	e00f      	b.n	b5c8 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b5a8:	ab02      	add	r3, sp, #8
    b5aa:	2100      	movs	r1, #0
    b5ac:	4618      	mov	r0, r3
    b5ae:	f7f6 fb28 	bl	1c02 <OsIf_GetElapsed>
    b5b2:	4602      	mov	r2, r0
    b5b4:	9b05      	ldr	r3, [sp, #20]
    b5b6:	4413      	add	r3, r2
    b5b8:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    b5ba:	9a05      	ldr	r2, [sp, #20]
    b5bc:	9b03      	ldr	r3, [sp, #12]
    b5be:	429a      	cmp	r2, r3
    b5c0:	d302      	bcc.n	b5c8 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    b5c2:	2303      	movs	r3, #3
    b5c4:	9304      	str	r3, [sp, #16]
            break;
    b5c6:	e005      	b.n	b5d4 <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    b5c8:	9b01      	ldr	r3, [sp, #4]
    b5ca:	681b      	ldr	r3, [r3, #0]
    b5cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    b5d0:	2b00      	cmp	r3, #0
    b5d2:	d0e9      	beq.n	b5a8 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    b5d4:	9b04      	ldr	r3, [sp, #16]
}
    b5d6:	4618      	mov	r0, r3
    b5d8:	b007      	add	sp, #28
    b5da:	f85d fb04 	ldr.w	pc, [sp], #4
    b5de:	bf00      	nop
    b5e0:	000f4240 	.word	0x000f4240

0000b5e4 <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    b5e4:	b500      	push	{lr}
    b5e6:	b087      	sub	sp, #28
    b5e8:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    b5ea:	2300      	movs	r3, #0
    b5ec:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    b5ee:	2300      	movs	r3, #0
    b5f0:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b5f2:	2100      	movs	r1, #0
    b5f4:	4818      	ldr	r0, [pc, #96]	; (b658 <FlexCAN_Enable+0x74>)
    b5f6:	f7f6 fb37 	bl	1c68 <OsIf_MicrosToTicks>
    b5fa:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    b5fc:	2300      	movs	r3, #0
    b5fe:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    b600:	f001 fad8 	bl	cbb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    b604:	9b01      	ldr	r3, [sp, #4]
    b606:	681b      	ldr	r3, [r3, #0]
    b608:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    b60c:	9b01      	ldr	r3, [sp, #4]
    b60e:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    b610:	f001 fafc 	bl	cc0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b614:	2000      	movs	r0, #0
    b616:	f7f6 fadb 	bl	1bd0 <OsIf_GetCounter>
    b61a:	4603      	mov	r3, r0
    b61c:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    b61e:	e00f      	b.n	b640 <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b620:	ab02      	add	r3, sp, #8
    b622:	2100      	movs	r1, #0
    b624:	4618      	mov	r0, r3
    b626:	f7f6 faec 	bl	1c02 <OsIf_GetElapsed>
    b62a:	4602      	mov	r2, r0
    b62c:	9b05      	ldr	r3, [sp, #20]
    b62e:	4413      	add	r3, r2
    b630:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    b632:	9a05      	ldr	r2, [sp, #20]
    b634:	9b03      	ldr	r3, [sp, #12]
    b636:	429a      	cmp	r2, r3
    b638:	d302      	bcc.n	b640 <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    b63a:	2303      	movs	r3, #3
    b63c:	9304      	str	r3, [sp, #16]
            break;
    b63e:	e005      	b.n	b64c <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    b640:	9b01      	ldr	r3, [sp, #4]
    b642:	681b      	ldr	r3, [r3, #0]
    b644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    b648:	2b00      	cmp	r3, #0
    b64a:	d0e9      	beq.n	b620 <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    b64c:	9b04      	ldr	r3, [sp, #16]
}
    b64e:	4618      	mov	r0, r3
    b650:	b007      	add	sp, #28
    b652:	f85d fb04 	ldr.w	pc, [sp], #4
    b656:	bf00      	nop
    b658:	000f4240 	.word	0x000f4240

0000b65c <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    b65c:	b500      	push	{lr}
    b65e:	b087      	sub	sp, #28
    b660:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    b662:	2300      	movs	r3, #0
    b664:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    b666:	2300      	movs	r3, #0
    b668:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b66a:	2100      	movs	r1, #0
    b66c:	481b      	ldr	r0, [pc, #108]	; (b6dc <FlexCAN_ExitFreezeMode+0x80>)
    b66e:	f7f6 fafb 	bl	1c68 <OsIf_MicrosToTicks>
    b672:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    b674:	2300      	movs	r3, #0
    b676:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    b678:	f001 faee 	bl	cc58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    b67c:	9b01      	ldr	r3, [sp, #4]
    b67e:	681b      	ldr	r3, [r3, #0]
    b680:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    b684:	9b01      	ldr	r3, [sp, #4]
    b686:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    b688:	9b01      	ldr	r3, [sp, #4]
    b68a:	681b      	ldr	r3, [r3, #0]
    b68c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    b690:	9b01      	ldr	r3, [sp, #4]
    b692:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    b694:	f001 fb0c 	bl	ccb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b698:	2000      	movs	r0, #0
    b69a:	f7f6 fa99 	bl	1bd0 <OsIf_GetCounter>
    b69e:	4603      	mov	r3, r0
    b6a0:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    b6a2:	e00f      	b.n	b6c4 <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b6a4:	ab02      	add	r3, sp, #8
    b6a6:	2100      	movs	r1, #0
    b6a8:	4618      	mov	r0, r3
    b6aa:	f7f6 faaa 	bl	1c02 <OsIf_GetElapsed>
    b6ae:	4602      	mov	r2, r0
    b6b0:	9b05      	ldr	r3, [sp, #20]
    b6b2:	4413      	add	r3, r2
    b6b4:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    b6b6:	9a05      	ldr	r2, [sp, #20]
    b6b8:	9b03      	ldr	r3, [sp, #12]
    b6ba:	429a      	cmp	r2, r3
    b6bc:	d302      	bcc.n	b6c4 <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    b6be:	2303      	movs	r3, #3
    b6c0:	9304      	str	r3, [sp, #16]
            break;
    b6c2:	e005      	b.n	b6d0 <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    b6c4:	9b01      	ldr	r3, [sp, #4]
    b6c6:	681b      	ldr	r3, [r3, #0]
    b6c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    b6cc:	2b00      	cmp	r3, #0
    b6ce:	d1e9      	bne.n	b6a4 <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    b6d0:	9b04      	ldr	r3, [sp, #16]
}
    b6d2:	4618      	mov	r0, r3
    b6d4:	b007      	add	sp, #28
    b6d6:	f85d fb04 	ldr.w	pc, [sp], #4
    b6da:	bf00      	nop
    b6dc:	000f4240 	.word	0x000f4240

0000b6e0 <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    b6e0:	b500      	push	{lr}
    b6e2:	b087      	sub	sp, #28
    b6e4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    b6e6:	2300      	movs	r3, #0
    b6e8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    b6ea:	2300      	movs	r3, #0
    b6ec:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b6ee:	2100      	movs	r1, #0
    b6f0:	481a      	ldr	r0, [pc, #104]	; (b75c <FlexCAN_Disable+0x7c>)
    b6f2:	f7f6 fab9 	bl	1c68 <OsIf_MicrosToTicks>
    b6f6:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    b6f8:	2300      	movs	r3, #0
    b6fa:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    b6fc:	9b01      	ldr	r3, [sp, #4]
    b6fe:	681b      	ldr	r3, [r3, #0]
    b700:	2b00      	cmp	r3, #0
    b702:	db25      	blt.n	b750 <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    b704:	f001 fafa 	bl	ccfc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    b708:	9b01      	ldr	r3, [sp, #4]
    b70a:	681b      	ldr	r3, [r3, #0]
    b70c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    b710:	9b01      	ldr	r3, [sp, #4]
    b712:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    b714:	f001 fb1e 	bl	cd54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b718:	2000      	movs	r0, #0
    b71a:	f7f6 fa59 	bl	1bd0 <OsIf_GetCounter>
    b71e:	4603      	mov	r3, r0
    b720:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    b722:	e00f      	b.n	b744 <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b724:	ab02      	add	r3, sp, #8
    b726:	2100      	movs	r1, #0
    b728:	4618      	mov	r0, r3
    b72a:	f7f6 fa6a 	bl	1c02 <OsIf_GetElapsed>
    b72e:	4602      	mov	r2, r0
    b730:	9b05      	ldr	r3, [sp, #20]
    b732:	4413      	add	r3, r2
    b734:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    b736:	9a05      	ldr	r2, [sp, #20]
    b738:	9b03      	ldr	r3, [sp, #12]
    b73a:	429a      	cmp	r2, r3
    b73c:	d302      	bcc.n	b744 <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    b73e:	2303      	movs	r3, #3
    b740:	9304      	str	r3, [sp, #16]
                break;
    b742:	e005      	b.n	b750 <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    b744:	9b01      	ldr	r3, [sp, #4]
    b746:	681b      	ldr	r3, [r3, #0]
    b748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    b74c:	2b00      	cmp	r3, #0
    b74e:	d0e9      	beq.n	b724 <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    b750:	9b04      	ldr	r3, [sp, #16]
}
    b752:	4618      	mov	r0, r3
    b754:	b007      	add	sp, #28
    b756:	f85d fb04 	ldr.w	pc, [sp], #4
    b75a:	bf00      	nop
    b75c:	000f4240 	.word	0x000f4240

0000b760 <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    b760:	b500      	push	{lr}
    b762:	b087      	sub	sp, #28
    b764:	9003      	str	r0, [sp, #12]
    b766:	9102      	str	r1, [sp, #8]
    b768:	4613      	mov	r3, r2
    b76a:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    b76e:	9b02      	ldr	r3, [sp, #8]
    b770:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    b772:	f001 fb15 	bl	cda0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    b776:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b77a:	2b00      	cmp	r3, #0
    b77c:	d020      	beq.n	b7c0 <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    b77e:	9b02      	ldr	r3, [sp, #8]
    b780:	f244 0201 	movw	r2, #16385	; 0x4001
    b784:	4293      	cmp	r3, r2
    b786:	d106      	bne.n	b796 <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    b788:	9b03      	ldr	r3, [sp, #12]
    b78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b78c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    b790:	9b03      	ldr	r3, [sp, #12]
    b792:	635a      	str	r2, [r3, #52]	; 0x34
    b794:	e03a      	b.n	b80c <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    b796:	9b02      	ldr	r3, [sp, #8]
    b798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    b79c:	d003      	beq.n	b7a6 <FlexCAN_SetErrIntCmd+0x46>
    b79e:	9b02      	ldr	r3, [sp, #8]
    b7a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    b7a4:	d105      	bne.n	b7b2 <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    b7a6:	9b03      	ldr	r3, [sp, #12]
    b7a8:	681b      	ldr	r3, [r3, #0]
    b7aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    b7ae:	9b03      	ldr	r3, [sp, #12]
    b7b0:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    b7b2:	9b03      	ldr	r3, [sp, #12]
    b7b4:	685a      	ldr	r2, [r3, #4]
    b7b6:	9b05      	ldr	r3, [sp, #20]
    b7b8:	431a      	orrs	r2, r3
    b7ba:	9b03      	ldr	r3, [sp, #12]
    b7bc:	605a      	str	r2, [r3, #4]
    b7be:	e025      	b.n	b80c <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    b7c0:	9b02      	ldr	r3, [sp, #8]
    b7c2:	f244 0201 	movw	r2, #16385	; 0x4001
    b7c6:	4293      	cmp	r3, r2
    b7c8:	d106      	bne.n	b7d8 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    b7ca:	9b03      	ldr	r3, [sp, #12]
    b7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b7ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    b7d2:	9b03      	ldr	r3, [sp, #12]
    b7d4:	635a      	str	r2, [r3, #52]	; 0x34
    b7d6:	e019      	b.n	b80c <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    b7d8:	9b03      	ldr	r3, [sp, #12]
    b7da:	685a      	ldr	r2, [r3, #4]
    b7dc:	9b05      	ldr	r3, [sp, #20]
    b7de:	43db      	mvns	r3, r3
    b7e0:	401a      	ands	r2, r3
    b7e2:	9b03      	ldr	r3, [sp, #12]
    b7e4:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    b7e6:	9b03      	ldr	r3, [sp, #12]
    b7e8:	685b      	ldr	r3, [r3, #4]
    b7ea:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    b7ec:	9b05      	ldr	r3, [sp, #20]
    b7ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b7f2:	2b00      	cmp	r3, #0
    b7f4:	d10a      	bne.n	b80c <FlexCAN_SetErrIntCmd+0xac>
    b7f6:	9b05      	ldr	r3, [sp, #20]
    b7f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b7fc:	2b00      	cmp	r3, #0
    b7fe:	d105      	bne.n	b80c <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    b800:	9b03      	ldr	r3, [sp, #12]
    b802:	681b      	ldr	r3, [r3, #0]
    b804:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    b808:	9b03      	ldr	r3, [sp, #12]
    b80a:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    b80c:	f001 faf4 	bl	cdf8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    b810:	bf00      	nop
    b812:	b007      	add	sp, #28
    b814:	f85d fb04 	ldr.w	pc, [sp], #4

0000b818 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    b818:	b500      	push	{lr}
    b81a:	b087      	sub	sp, #28
    b81c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    b81e:	2300      	movs	r3, #0
    b820:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    b822:	2300      	movs	r3, #0
    b824:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b826:	2100      	movs	r1, #0
    b828:	4833      	ldr	r0, [pc, #204]	; (b8f8 <FlexCAN_Init+0xe0>)
    b82a:	f7f6 fa1d 	bl	1c68 <OsIf_MicrosToTicks>
    b82e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    b830:	2300      	movs	r3, #0
    b832:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    b834:	9b01      	ldr	r3, [sp, #4]
    b836:	681b      	ldr	r3, [r3, #0]
    b838:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    b83c:	9b01      	ldr	r3, [sp, #4]
    b83e:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b840:	2000      	movs	r0, #0
    b842:	f7f6 f9c5 	bl	1bd0 <OsIf_GetCounter>
    b846:	4603      	mov	r3, r0
    b848:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    b84a:	e00f      	b.n	b86c <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    b84c:	ab02      	add	r3, sp, #8
    b84e:	2100      	movs	r1, #0
    b850:	4618      	mov	r0, r3
    b852:	f7f6 f9d6 	bl	1c02 <OsIf_GetElapsed>
    b856:	4602      	mov	r2, r0
    b858:	9b05      	ldr	r3, [sp, #20]
    b85a:	4413      	add	r3, r2
    b85c:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    b85e:	9a05      	ldr	r2, [sp, #20]
    b860:	9b03      	ldr	r3, [sp, #12]
    b862:	429a      	cmp	r2, r3
    b864:	d302      	bcc.n	b86c <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    b866:	2303      	movs	r3, #3
    b868:	9304      	str	r3, [sp, #16]
            break;
    b86a:	e005      	b.n	b878 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    b86c:	9b01      	ldr	r3, [sp, #4]
    b86e:	681b      	ldr	r3, [r3, #0]
    b870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    b874:	2b00      	cmp	r3, #0
    b876:	d1e9      	bne.n	b84c <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    b878:	9b04      	ldr	r3, [sp, #16]
    b87a:	2b00      	cmp	r3, #0
    b87c:	d136      	bne.n	b8ec <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    b87e:	9b01      	ldr	r3, [sp, #4]
    b880:	681b      	ldr	r3, [r3, #0]
    b882:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    b886:	9b01      	ldr	r3, [sp, #4]
    b888:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    b88a:	9801      	ldr	r0, [sp, #4]
    b88c:	f7ff fd40 	bl	b310 <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    b890:	9b01      	ldr	r3, [sp, #4]
    b892:	f04f 32ff 	mov.w	r2, #4294967295
    b896:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    b898:	9b01      	ldr	r3, [sp, #4]
    b89a:	f04f 32ff 	mov.w	r2, #4294967295
    b89e:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    b8a0:	9b01      	ldr	r3, [sp, #4]
    b8a2:	f04f 32ff 	mov.w	r2, #4294967295
    b8a6:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    b8a8:	9b01      	ldr	r3, [sp, #4]
    b8aa:	2200      	movs	r2, #0
    b8ac:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    b8ae:	9b01      	ldr	r3, [sp, #4]
    b8b0:	f04f 32ff 	mov.w	r2, #4294967295
    b8b4:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    b8b6:	9b01      	ldr	r3, [sp, #4]
    b8b8:	4a10      	ldr	r2, [pc, #64]	; (b8fc <FlexCAN_Init+0xe4>)
    b8ba:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    b8bc:	9b01      	ldr	r3, [sp, #4]
    b8be:	2200      	movs	r2, #0
    b8c0:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    b8c2:	9b01      	ldr	r3, [sp, #4]
    b8c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    b8c8:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    b8ca:	9b01      	ldr	r3, [sp, #4]
    b8cc:	2200      	movs	r2, #0
    b8ce:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    b8d0:	9801      	ldr	r0, [sp, #4]
    b8d2:	f000 f85b 	bl	b98c <FlexCAN_IsFDAvailable>
    b8d6:	4603      	mov	r3, r0
    b8d8:	2b00      	cmp	r3, #0
    b8da:	d007      	beq.n	b8ec <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    b8dc:	9b01      	ldr	r3, [sp, #4]
    b8de:	2200      	movs	r2, #0
    b8e0:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    b8e4:	9b01      	ldr	r3, [sp, #4]
    b8e6:	4a06      	ldr	r2, [pc, #24]	; (b900 <FlexCAN_Init+0xe8>)
    b8e8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    b8ec:	9b04      	ldr	r3, [sp, #16]
}
    b8ee:	4618      	mov	r0, r3
    b8f0:	b007      	add	sp, #28
    b8f2:	f85d fb04 	ldr.w	pc, [sp], #4
    b8f6:	bf00      	nop
    b8f8:	000f4240 	.word	0x000f4240
    b8fc:	003b0006 	.word	0x003b0006
    b900:	80004100 	.word	0x80004100

0000b904 <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    b904:	b500      	push	{lr}
    b906:	b087      	sub	sp, #28
    b908:	9001      	str	r0, [sp, #4]
    b90a:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    b90c:	9801      	ldr	r0, [sp, #4]
    b90e:	f7ff fdfb 	bl	b508 <FlexCAN_GetMaxMbNum>
    b912:	4603      	mov	r3, r0
    b914:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    b918:	2300      	movs	r3, #0
    b91a:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    b91c:	9b01      	ldr	r3, [sp, #4]
    b91e:	681b      	ldr	r3, [r3, #0]
    b920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b924:	2b00      	cmp	r3, #0
    b926:	d001      	beq.n	b92c <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    b928:	2301      	movs	r3, #1
    b92a:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    b92c:	9b04      	ldr	r3, [sp, #16]
    b92e:	2b00      	cmp	r3, #0
    b930:	d127      	bne.n	b982 <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    b932:	9b01      	ldr	r3, [sp, #4]
    b934:	681b      	ldr	r3, [r3, #0]
    b936:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    b93a:	9b01      	ldr	r3, [sp, #4]
    b93c:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    b93e:	9b01      	ldr	r3, [sp, #4]
    b940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b942:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    b946:	9b00      	ldr	r3, [sp, #0]
    b948:	061b      	lsls	r3, r3, #24
    b94a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    b94e:	431a      	orrs	r2, r3
    b950:	9b01      	ldr	r3, [sp, #4]
    b952:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    b954:	9b01      	ldr	r3, [sp, #4]
    b956:	f04f 32ff 	mov.w	r2, #4294967295
    b95a:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    b95c:	2300      	movs	r3, #0
    b95e:	9305      	str	r3, [sp, #20]
    b960:	e00a      	b.n	b978 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    b962:	9b01      	ldr	r3, [sp, #4]
    b964:	9a05      	ldr	r2, [sp, #20]
    b966:	f502 7208 	add.w	r2, r2, #544	; 0x220
    b96a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    b96e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    b972:	9b05      	ldr	r3, [sp, #20]
    b974:	3301      	adds	r3, #1
    b976:	9305      	str	r3, [sp, #20]
    b978:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    b97c:	9a05      	ldr	r2, [sp, #20]
    b97e:	429a      	cmp	r2, r3
    b980:	d3ef      	bcc.n	b962 <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    b982:	9b04      	ldr	r3, [sp, #16]
}
    b984:	4618      	mov	r0, r3
    b986:	b007      	add	sp, #28
    b988:	f85d fb04 	ldr.w	pc, [sp], #4

0000b98c <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    b98c:	b084      	sub	sp, #16
    b98e:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    b990:	2300      	movs	r3, #0
    b992:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    b994:	2300      	movs	r3, #0
    b996:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    b99a:	2300      	movs	r3, #0
    b99c:	9303      	str	r3, [sp, #12]
    b99e:	e00d      	b.n	b9bc <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    b9a0:	4a0a      	ldr	r2, [pc, #40]	; (b9cc <FlexCAN_IsFDAvailable+0x40>)
    b9a2:	9b03      	ldr	r3, [sp, #12]
    b9a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9a8:	9a01      	ldr	r2, [sp, #4]
    b9aa:	429a      	cmp	r2, r3
    b9ac:	d103      	bne.n	b9b6 <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    b9ae:	2301      	movs	r3, #1
    b9b0:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    b9b4:	e005      	b.n	b9c2 <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    b9b6:	9b03      	ldr	r3, [sp, #12]
    b9b8:	3301      	adds	r3, #1
    b9ba:	9303      	str	r3, [sp, #12]
    b9bc:	9b03      	ldr	r3, [sp, #12]
    b9be:	2b00      	cmp	r3, #0
    b9c0:	d0ee      	beq.n	b9a0 <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    b9c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    b9c6:	4618      	mov	r0, r3
    b9c8:	b004      	add	sp, #16
    b9ca:	4770      	bx	lr
    b9cc:	0000f550 	.word	0x0000f550

0000b9d0 <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    b9d0:	b500      	push	{lr}
    b9d2:	b085      	sub	sp, #20
    b9d4:	9001      	str	r0, [sp, #4]
    b9d6:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    b9d8:	9801      	ldr	r0, [sp, #4]
    b9da:	f7ff fbd6 	bl	b18a <FlexCAN_IsFDEnabled>
    b9de:	4603      	mov	r3, r0
    b9e0:	2b00      	cmp	r3, #0
    b9e2:	d011      	beq.n	ba08 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    b9e4:	9b01      	ldr	r3, [sp, #4]
    b9e6:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b9ea:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    b9ec:	9b03      	ldr	r3, [sp, #12]
    b9ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    b9f2:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    b9f4:	9b00      	ldr	r3, [sp, #0]
    b9f6:	681b      	ldr	r3, [r3, #0]
    b9f8:	041b      	lsls	r3, r3, #16
    b9fa:	9a03      	ldr	r2, [sp, #12]
    b9fc:	4313      	orrs	r3, r2
    b9fe:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    ba00:	9b01      	ldr	r3, [sp, #4]
    ba02:	9a03      	ldr	r2, [sp, #12]
    ba04:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    ba08:	bf00      	nop
    ba0a:	b005      	add	sp, #20
    ba0c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ba10 <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    ba10:	b500      	push	{lr}
    ba12:	b085      	sub	sp, #20
    ba14:	9001      	str	r0, [sp, #4]
    ba16:	460b      	mov	r3, r1
    ba18:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    ba1c:	2300      	movs	r3, #0
    ba1e:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    ba20:	9801      	ldr	r0, [sp, #4]
    ba22:	f7ff ffb3 	bl	b98c <FlexCAN_IsFDAvailable>
    ba26:	4603      	mov	r3, r0
    ba28:	2b00      	cmp	r3, #0
    ba2a:	d019      	beq.n	ba60 <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    ba2c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ba30:	2b00      	cmp	r3, #0
    ba32:	d10a      	bne.n	ba4a <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ba34:	9b01      	ldr	r3, [sp, #4]
    ba36:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ba3a:	0c1b      	lsrs	r3, r3, #16
    ba3c:	f003 0303 	and.w	r3, r3, #3
    ba40:	2208      	movs	r2, #8
    ba42:	fa02 f303 	lsl.w	r3, r2, r3
    ba46:	9303      	str	r3, [sp, #12]
    ba48:	e00c      	b.n	ba64 <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    ba4a:	9b01      	ldr	r3, [sp, #4]
    ba4c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    ba50:	0c1b      	lsrs	r3, r3, #16
    ba52:	f003 0303 	and.w	r3, r3, #3
    ba56:	2208      	movs	r2, #8
    ba58:	fa02 f303 	lsl.w	r3, r2, r3
    ba5c:	9303      	str	r3, [sp, #12]
    ba5e:	e001      	b.n	ba64 <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    ba60:	2308      	movs	r3, #8
    ba62:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    ba64:	9b03      	ldr	r3, [sp, #12]
    ba66:	b2db      	uxtb	r3, r3
}
    ba68:	4618      	mov	r0, r3
    ba6a:	b005      	add	sp, #20
    ba6c:	f85d fb04 	ldr.w	pc, [sp], #4

0000ba70 <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    ba70:	b500      	push	{lr}
    ba72:	b087      	sub	sp, #28
    ba74:	9001      	str	r0, [sp, #4]
    ba76:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    ba78:	2308      	movs	r3, #8
    ba7a:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    ba7e:	f44f 7300 	mov.w	r3, #512	; 0x200
    ba82:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    ba84:	2308      	movs	r3, #8
    ba86:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    ba8a:	2300      	movs	r3, #0
    ba8c:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    ba90:	2300      	movs	r3, #0
    ba92:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    ba96:	2300      	movs	r3, #0
    ba98:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    ba9c:	2300      	movs	r3, #0
    ba9e:	f88d 3015 	strb.w	r3, [sp, #21]
    baa2:	e024      	b.n	baee <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    baa4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    baa8:	4619      	mov	r1, r3
    baaa:	9801      	ldr	r0, [sp, #4]
    baac:	f7ff ffb0 	bl	ba10 <FlexCAN_GetPayloadSize>
    bab0:	4603      	mov	r3, r0
    bab2:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    bab6:	f89d 2017 	ldrb.w	r2, [sp, #23]
    baba:	f89d 3014 	ldrb.w	r3, [sp, #20]
    babe:	4413      	add	r3, r2
    bac0:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    bac4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    bac8:	9a04      	ldr	r2, [sp, #16]
    baca:	fbb2 f3f3 	udiv	r3, r2, r3
    bace:	b2da      	uxtb	r2, r3
    bad0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    bad4:	4413      	add	r3, r2
    bad6:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    bada:	f89d 3016 	ldrb.w	r3, [sp, #22]
    bade:	9a00      	ldr	r2, [sp, #0]
    bae0:	429a      	cmp	r2, r3
    bae2:	d309      	bcc.n	baf8 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    bae4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    bae8:	3301      	adds	r3, #1
    baea:	f88d 3015 	strb.w	r3, [sp, #21]
    baee:	f89d 3015 	ldrb.w	r3, [sp, #21]
    baf2:	2b00      	cmp	r3, #0
    baf4:	d0d6      	beq.n	baa4 <FlexCAN_GetMbPayloadSize+0x34>
    baf6:	e000      	b.n	bafa <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    baf8:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    bafa:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    bafe:	4618      	mov	r0, r3
    bb00:	b007      	add	sp, #28
    bb02:	f85d fb04 	ldr.w	pc, [sp], #4

0000bb06 <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    bb06:	b500      	push	{lr}
    bb08:	b085      	sub	sp, #20
    bb0a:	9001      	str	r0, [sp, #4]
    bb0c:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    bb0e:	9900      	ldr	r1, [sp, #0]
    bb10:	9801      	ldr	r0, [sp, #4]
    bb12:	f7ff fc7f 	bl	b414 <FlexCAN_GetMsgBuffRegion>
    bb16:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    bb18:	9b03      	ldr	r3, [sp, #12]
    bb1a:	681b      	ldr	r3, [r3, #0]
}
    bb1c:	bf00      	nop
    bb1e:	b005      	add	sp, #20
    bb20:	f85d fb04 	ldr.w	pc, [sp], #4

0000bb24 <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    bb24:	b500      	push	{lr}
    bb26:	b087      	sub	sp, #28
    bb28:	9003      	str	r0, [sp, #12]
    bb2a:	9201      	str	r2, [sp, #4]
    bb2c:	461a      	mov	r2, r3
    bb2e:	460b      	mov	r3, r1
    bb30:	f88d 300b 	strb.w	r3, [sp, #11]
    bb34:	4613      	mov	r3, r2
    bb36:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    bb3a:	2300      	movs	r3, #0
    bb3c:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    bb3e:	9b01      	ldr	r3, [sp, #4]
    bb40:	f003 031f 	and.w	r3, r3, #31
    bb44:	2201      	movs	r2, #1
    bb46:	fa02 f303 	lsl.w	r3, r2, r3
    bb4a:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    bb4c:	9b01      	ldr	r3, [sp, #4]
    bb4e:	2b1f      	cmp	r3, #31
    bb50:	d837      	bhi.n	bbc2 <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    bb52:	f89d 300a 	ldrb.w	r3, [sp, #10]
    bb56:	2b00      	cmp	r3, #0
    bb58:	d01b      	beq.n	bb92 <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    bb5a:	f001 fcf9 	bl	d550 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    bb5e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bb62:	4a1a      	ldr	r2, [pc, #104]	; (bbcc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    bb64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    bb68:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bb6c:	9a04      	ldr	r2, [sp, #16]
    bb6e:	430a      	orrs	r2, r1
    bb70:	4916      	ldr	r1, [pc, #88]	; (bbcc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    bb72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    bb76:	f89d 3020 	ldrb.w	r3, [sp, #32]
    bb7a:	2b00      	cmp	r3, #0
    bb7c:	d006      	beq.n	bb8c <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    bb7e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bb82:	4a12      	ldr	r2, [pc, #72]	; (bbcc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    bb84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    bb88:	9b03      	ldr	r3, [sp, #12]
    bb8a:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    bb8c:	f001 fd0c 	bl	d5a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    bb90:	e017      	b.n	bbc2 <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    bb92:	f001 fcdd 	bl	d550 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    bb96:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bb9a:	4a0c      	ldr	r2, [pc, #48]	; (bbcc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    bb9c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    bba0:	9b04      	ldr	r3, [sp, #16]
    bba2:	43da      	mvns	r2, r3
    bba4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bba8:	400a      	ands	r2, r1
    bbaa:	4908      	ldr	r1, [pc, #32]	; (bbcc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    bbac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    bbb0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bbb4:	4a05      	ldr	r2, [pc, #20]	; (bbcc <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    bbb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    bbba:	9b03      	ldr	r3, [sp, #12]
    bbbc:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    bbbe:	f001 fcf3 	bl	d5a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    bbc2:	9b05      	ldr	r3, [sp, #20]
}
    bbc4:	4618      	mov	r0, r3
    bbc6:	b007      	add	sp, #28
    bbc8:	f85d fb04 	ldr.w	pc, [sp], #4
    bbcc:	1fff8fac 	.word	0x1fff8fac

0000bbd0 <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    bbd0:	b500      	push	{lr}
    bbd2:	b087      	sub	sp, #28
    bbd4:	9003      	str	r0, [sp, #12]
    bbd6:	9201      	str	r2, [sp, #4]
    bbd8:	461a      	mov	r2, r3
    bbda:	460b      	mov	r3, r1
    bbdc:	f88d 300b 	strb.w	r3, [sp, #11]
    bbe0:	4613      	mov	r3, r2
    bbe2:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    bbe6:	9b01      	ldr	r3, [sp, #4]
    bbe8:	f003 031f 	and.w	r3, r3, #31
    bbec:	2201      	movs	r2, #1
    bbee:	fa02 f303 	lsl.w	r3, r2, r3
    bbf2:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    bbf4:	9b01      	ldr	r3, [sp, #4]
    bbf6:	2b1f      	cmp	r3, #31
    bbf8:	d818      	bhi.n	bc2c <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    bbfa:	f001 fa6b 	bl	d0d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    bbfe:	9b03      	ldr	r3, [sp, #12]
    bc00:	6a99      	ldr	r1, [r3, #40]	; 0x28
    bc02:	9b05      	ldr	r3, [sp, #20]
    bc04:	43da      	mvns	r2, r3
    bc06:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc0a:	400a      	ands	r2, r1
    bc0c:	4909      	ldr	r1, [pc, #36]	; (bc34 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    bc0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    bc12:	f89d 300a 	ldrb.w	r3, [sp, #10]
    bc16:	2b00      	cmp	r3, #0
    bc18:	d006      	beq.n	bc28 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    bc1a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    bc1e:	4a05      	ldr	r2, [pc, #20]	; (bc34 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    bc20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    bc24:	9b03      	ldr	r3, [sp, #12]
    bc26:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    bc28:	f001 fa80 	bl	d12c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    bc2c:	bf00      	nop
    bc2e:	b007      	add	sp, #28
    bc30:	f85d fb04 	ldr.w	pc, [sp], #4
    bc34:	1fff8fac 	.word	0x1fff8fac

0000bc38 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    bc38:	b082      	sub	sp, #8
    bc3a:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    bc3c:	9b01      	ldr	r3, [sp, #4]
    bc3e:	2200      	movs	r2, #0
    bc40:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    bc42:	bf00      	nop
    bc44:	b002      	add	sp, #8
    bc46:	4770      	bx	lr

0000bc48 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    bc48:	b082      	sub	sp, #8
    bc4a:	9001      	str	r0, [sp, #4]
    bc4c:	460b      	mov	r3, r1
    bc4e:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    bc52:	f89d 3003 	ldrb.w	r3, [sp, #3]
    bc56:	4a04      	ldr	r2, [pc, #16]	; (bc68 <FlexCAN_EnableInterrupts+0x20>)
    bc58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    bc5c:	9b01      	ldr	r3, [sp, #4]
    bc5e:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    bc60:	bf00      	nop
    bc62:	b002      	add	sp, #8
    bc64:	4770      	bx	lr
    bc66:	bf00      	nop
    bc68:	1fff8fac 	.word	0x1fff8fac

0000bc6c <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    bc6c:	b500      	push	{lr}
    bc6e:	b087      	sub	sp, #28
    bc70:	9003      	str	r0, [sp, #12]
    bc72:	9102      	str	r1, [sp, #8]
    bc74:	9201      	str	r2, [sp, #4]
    bc76:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    bc78:	9902      	ldr	r1, [sp, #8]
    bc7a:	9803      	ldr	r0, [sp, #12]
    bc7c:	f7ff fbca 	bl	b414 <FlexCAN_GetMsgBuffRegion>
    bc80:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    bc82:	9b05      	ldr	r3, [sp, #20]
    bc84:	3304      	adds	r3, #4
    bc86:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    bc88:	9b05      	ldr	r3, [sp, #20]
    bc8a:	2200      	movs	r2, #0
    bc8c:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    bc8e:	9b04      	ldr	r3, [sp, #16]
    bc90:	2200      	movs	r2, #0
    bc92:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    bc94:	9b01      	ldr	r3, [sp, #4]
    bc96:	685b      	ldr	r3, [r3, #4]
    bc98:	2b01      	cmp	r3, #1
    bc9a:	d119      	bne.n	bcd0 <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    bc9c:	9b05      	ldr	r3, [sp, #20]
    bc9e:	681b      	ldr	r3, [r3, #0]
    bca0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    bca4:	9b05      	ldr	r3, [sp, #20]
    bca6:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    bca8:	9b05      	ldr	r3, [sp, #20]
    bcaa:	681b      	ldr	r3, [r3, #0]
    bcac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    bcb0:	9b05      	ldr	r3, [sp, #20]
    bcb2:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    bcb4:	9b04      	ldr	r3, [sp, #16]
    bcb6:	681b      	ldr	r3, [r3, #0]
    bcb8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    bcbc:	9b04      	ldr	r3, [sp, #16]
    bcbe:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    bcc0:	9b04      	ldr	r3, [sp, #16]
    bcc2:	681a      	ldr	r2, [r3, #0]
    bcc4:	9b00      	ldr	r3, [sp, #0]
    bcc6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    bcca:	431a      	orrs	r2, r3
    bccc:	9b04      	ldr	r3, [sp, #16]
    bcce:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    bcd0:	9b01      	ldr	r3, [sp, #4]
    bcd2:	685b      	ldr	r3, [r3, #4]
    bcd4:	2b00      	cmp	r3, #0
    bcd6:	d116      	bne.n	bd06 <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    bcd8:	9b05      	ldr	r3, [sp, #20]
    bcda:	681b      	ldr	r3, [r3, #0]
    bcdc:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    bce0:	9b05      	ldr	r3, [sp, #20]
    bce2:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    bce4:	9b04      	ldr	r3, [sp, #16]
    bce6:	681b      	ldr	r3, [r3, #0]
    bce8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    bcec:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    bcf0:	9a04      	ldr	r2, [sp, #16]
    bcf2:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    bcf4:	9b04      	ldr	r3, [sp, #16]
    bcf6:	681a      	ldr	r2, [r3, #0]
    bcf8:	9b00      	ldr	r3, [sp, #0]
    bcfa:	0499      	lsls	r1, r3, #18
    bcfc:	4b0e      	ldr	r3, [pc, #56]	; (bd38 <FlexCAN_SetRxMsgBuff+0xcc>)
    bcfe:	400b      	ands	r3, r1
    bd00:	431a      	orrs	r2, r3
    bd02:	9b04      	ldr	r3, [sp, #16]
    bd04:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    bd06:	9b01      	ldr	r3, [sp, #4]
    bd08:	681b      	ldr	r3, [r3, #0]
    bd0a:	2b0f      	cmp	r3, #15
    bd0c:	d00f      	beq.n	bd2e <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    bd0e:	9b05      	ldr	r3, [sp, #20]
    bd10:	681b      	ldr	r3, [r3, #0]
    bd12:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    bd16:	9b05      	ldr	r3, [sp, #20]
    bd18:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    bd1a:	9b05      	ldr	r3, [sp, #20]
    bd1c:	681a      	ldr	r2, [r3, #0]
    bd1e:	9b01      	ldr	r3, [sp, #4]
    bd20:	681b      	ldr	r3, [r3, #0]
    bd22:	061b      	lsls	r3, r3, #24
    bd24:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    bd28:	431a      	orrs	r2, r3
    bd2a:	9b05      	ldr	r3, [sp, #20]
    bd2c:	601a      	str	r2, [r3, #0]
    }
}
    bd2e:	bf00      	nop
    bd30:	b007      	add	sp, #28
    bd32:	f85d fb04 	ldr.w	pc, [sp], #4
    bd36:	bf00      	nop
    bd38:	1ffc0000 	.word	0x1ffc0000

0000bd3c <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    bd3c:	b500      	push	{lr}
    bd3e:	b085      	sub	sp, #20
    bd40:	9001      	str	r0, [sp, #4]
    bd42:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    bd44:	2300      	movs	r3, #0
    bd46:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    bd48:	9900      	ldr	r1, [sp, #0]
    bd4a:	9801      	ldr	r0, [sp, #4]
    bd4c:	f7ff fb62 	bl	b414 <FlexCAN_GetMsgBuffRegion>
    bd50:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    bd52:	9b02      	ldr	r3, [sp, #8]
    bd54:	681b      	ldr	r3, [r3, #0]
    bd56:	b29b      	uxth	r3, r3
    bd58:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    bd5a:	9b03      	ldr	r3, [sp, #12]
}
    bd5c:	4618      	mov	r0, r3
    bd5e:	b005      	add	sp, #20
    bd60:	f85d fb04 	ldr.w	pc, [sp], #4

0000bd64 <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    bd64:	b500      	push	{lr}
    bd66:	b08d      	sub	sp, #52	; 0x34
    bd68:	9003      	str	r0, [sp, #12]
    bd6a:	9102      	str	r1, [sp, #8]
    bd6c:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    bd6e:	9902      	ldr	r1, [sp, #8]
    bd70:	9803      	ldr	r0, [sp, #12]
    bd72:	f7ff fb4f 	bl	b414 <FlexCAN_GetMsgBuffRegion>
    bd76:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    bd78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bd7a:	3304      	adds	r3, #4
    bd7c:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    bd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bd80:	3308      	adds	r3, #8
    bd82:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    bd84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bd86:	3308      	adds	r3, #8
    bd88:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    bd8a:	2300      	movs	r3, #0
    bd8c:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    bd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bd90:	681b      	ldr	r3, [r3, #0]
    bd92:	0c1b      	lsrs	r3, r3, #16
    bd94:	b2db      	uxtb	r3, r3
    bd96:	f003 030f 	and.w	r3, r3, #15
    bd9a:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    bd9e:	f89d 3017 	ldrb.w	r3, [sp, #23]
    bda2:	4618      	mov	r0, r3
    bda4:	f7ff faed 	bl	b382 <FlexCAN_ComputePayloadSize>
    bda8:	4603      	mov	r3, r0
    bdaa:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    bdae:	9b01      	ldr	r3, [sp, #4]
    bdb0:	3308      	adds	r3, #8
    bdb2:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    bdb4:	9902      	ldr	r1, [sp, #8]
    bdb6:	9803      	ldr	r0, [sp, #12]
    bdb8:	f7ff fe5a 	bl	ba70 <FlexCAN_GetMbPayloadSize>
    bdbc:	4603      	mov	r3, r0
    bdbe:	461a      	mov	r2, r3
    bdc0:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    bdc4:	4293      	cmp	r3, r2
    bdc6:	d906      	bls.n	bdd6 <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    bdc8:	9902      	ldr	r1, [sp, #8]
    bdca:	9803      	ldr	r0, [sp, #12]
    bdcc:	f7ff fe50 	bl	ba70 <FlexCAN_GetMbPayloadSize>
    bdd0:	4603      	mov	r3, r0
    bdd2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    bdd6:	9b01      	ldr	r3, [sp, #4]
    bdd8:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    bddc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    bde0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bde2:	681a      	ldr	r2, [r3, #0]
    bde4:	9b01      	ldr	r3, [sp, #4]
    bde6:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    bde8:	9b01      	ldr	r3, [sp, #4]
    bdea:	681b      	ldr	r3, [r3, #0]
    bdec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    bdf0:	2b00      	cmp	r3, #0
    bdf2:	d004      	beq.n	bdfe <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    bdf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bdf6:	681a      	ldr	r2, [r3, #0]
    bdf8:	9b01      	ldr	r3, [sp, #4]
    bdfa:	605a      	str	r2, [r3, #4]
    bdfc:	e004      	b.n	be08 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    bdfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    be00:	681b      	ldr	r3, [r3, #0]
    be02:	0c9a      	lsrs	r2, r3, #18
    be04:	9b01      	ldr	r3, [sp, #4]
    be06:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    be08:	9b01      	ldr	r3, [sp, #4]
    be0a:	681b      	ldr	r3, [r3, #0]
    be0c:	b29a      	uxth	r2, r3
    be0e:	9b01      	ldr	r3, [sp, #4]
    be10:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    be12:	2300      	movs	r3, #0
    be14:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    be18:	e025      	b.n	be66 <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    be1a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    be1e:	089b      	lsrs	r3, r3, #2
    be20:	b2db      	uxtb	r3, r3
    be22:	009b      	lsls	r3, r3, #2
    be24:	9a07      	ldr	r2, [sp, #28]
    be26:	4413      	add	r3, r2
    be28:	681b      	ldr	r3, [r3, #0]
    be2a:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    be2c:	9b04      	ldr	r3, [sp, #16]
    be2e:	0e1a      	lsrs	r2, r3, #24
    be30:	9b04      	ldr	r3, [sp, #16]
    be32:	0a1b      	lsrs	r3, r3, #8
    be34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    be38:	431a      	orrs	r2, r3
    be3a:	9b04      	ldr	r3, [sp, #16]
    be3c:	021b      	lsls	r3, r3, #8
    be3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    be42:	ea42 0103 	orr.w	r1, r2, r3
    be46:	9b04      	ldr	r3, [sp, #16]
    be48:	061a      	lsls	r2, r3, #24
    be4a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    be4e:	089b      	lsrs	r3, r3, #2
    be50:	b2db      	uxtb	r3, r3
    be52:	009b      	lsls	r3, r3, #2
    be54:	9806      	ldr	r0, [sp, #24]
    be56:	4403      	add	r3, r0
    be58:	430a      	orrs	r2, r1
    be5a:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    be5c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    be60:	3304      	adds	r3, #4
    be62:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    be66:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    be6a:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    be6e:	f023 0303 	bic.w	r3, r3, #3
    be72:	429a      	cmp	r2, r3
    be74:	d3d1      	bcc.n	be1a <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    be76:	e014      	b.n	bea2 <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    be78:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    be7c:	f083 0303 	eor.w	r3, r3, #3
    be80:	b2db      	uxtb	r3, r3
    be82:	461a      	mov	r2, r3
    be84:	9b08      	ldr	r3, [sp, #32]
    be86:	441a      	add	r2, r3
    be88:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    be8c:	7812      	ldrb	r2, [r2, #0]
    be8e:	b2d1      	uxtb	r1, r2
    be90:	9a01      	ldr	r2, [sp, #4]
    be92:	4413      	add	r3, r2
    be94:	460a      	mov	r2, r1
    be96:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    be98:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    be9c:	3301      	adds	r3, #1
    be9e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    bea2:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    bea6:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    beaa:	429a      	cmp	r2, r3
    beac:	d3e4      	bcc.n	be78 <FlexCAN_GetMsgBuff+0x114>
    }
}
    beae:	bf00      	nop
    beb0:	bf00      	nop
    beb2:	b00d      	add	sp, #52	; 0x34
    beb4:	f85d fb04 	ldr.w	pc, [sp], #4

0000beb8 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    beb8:	b500      	push	{lr}
    beba:	b08d      	sub	sp, #52	; 0x34
    bebc:	9003      	str	r0, [sp, #12]
    bebe:	9102      	str	r1, [sp, #8]
    bec0:	9201      	str	r2, [sp, #4]
    bec2:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    bec4:	2300      	movs	r3, #0
    bec6:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    bec8:	9b03      	ldr	r3, [sp, #12]
    beca:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    becc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bece:	3304      	adds	r3, #4
    bed0:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    bed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bed4:	3308      	adds	r3, #8
    bed6:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    bed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    beda:	3308      	adds	r3, #8
    bedc:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    bede:	9b00      	ldr	r3, [sp, #0]
    bee0:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    bee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bee4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    bee8:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    beea:	9b08      	ldr	r3, [sp, #32]
    beec:	2200      	movs	r2, #0
    beee:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    bef0:	9b02      	ldr	r3, [sp, #8]
    bef2:	689b      	ldr	r3, [r3, #8]
    bef4:	b2db      	uxtb	r3, r3
    bef6:	4618      	mov	r0, r3
    bef8:	f7ff f9f4 	bl	b2e4 <FlexCAN_ComputeDLCValue>
    befc:	4603      	mov	r3, r0
    befe:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    bf02:	9b00      	ldr	r3, [sp, #0]
    bf04:	2b00      	cmp	r3, #0
    bf06:	d065      	beq.n	bfd4 <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    bf08:	2300      	movs	r3, #0
    bf0a:	930a      	str	r3, [sp, #40]	; 0x28
    bf0c:	e02c      	b.n	bf68 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    bf0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf10:	089b      	lsrs	r3, r3, #2
    bf12:	009b      	lsls	r3, r3, #2
    bf14:	9a05      	ldr	r2, [sp, #20]
    bf16:	4413      	add	r3, r2
    bf18:	681b      	ldr	r3, [r3, #0]
    bf1a:	0e1a      	lsrs	r2, r3, #24
    bf1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf1e:	089b      	lsrs	r3, r3, #2
    bf20:	009b      	lsls	r3, r3, #2
    bf22:	9905      	ldr	r1, [sp, #20]
    bf24:	440b      	add	r3, r1
    bf26:	681b      	ldr	r3, [r3, #0]
    bf28:	0a1b      	lsrs	r3, r3, #8
    bf2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    bf2e:	431a      	orrs	r2, r3
    bf30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf32:	089b      	lsrs	r3, r3, #2
    bf34:	009b      	lsls	r3, r3, #2
    bf36:	9905      	ldr	r1, [sp, #20]
    bf38:	440b      	add	r3, r1
    bf3a:	681b      	ldr	r3, [r3, #0]
    bf3c:	021b      	lsls	r3, r3, #8
    bf3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    bf42:	ea42 0103 	orr.w	r1, r2, r3
    bf46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf48:	089b      	lsrs	r3, r3, #2
    bf4a:	009b      	lsls	r3, r3, #2
    bf4c:	9a05      	ldr	r2, [sp, #20]
    bf4e:	4413      	add	r3, r2
    bf50:	681b      	ldr	r3, [r3, #0]
    bf52:	061a      	lsls	r2, r3, #24
    bf54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf56:	089b      	lsrs	r3, r3, #2
    bf58:	009b      	lsls	r3, r3, #2
    bf5a:	9806      	ldr	r0, [sp, #24]
    bf5c:	4403      	add	r3, r0
    bf5e:	430a      	orrs	r2, r1
    bf60:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    bf62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf64:	3304      	adds	r3, #4
    bf66:	930a      	str	r3, [sp, #40]	; 0x28
    bf68:	9b02      	ldr	r3, [sp, #8]
    bf6a:	689b      	ldr	r3, [r3, #8]
    bf6c:	f023 0303 	bic.w	r3, r3, #3
    bf70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bf72:	429a      	cmp	r2, r3
    bf74:	d3cb      	bcc.n	bf0e <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    bf76:	e00c      	b.n	bf92 <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    bf78:	9a00      	ldr	r2, [sp, #0]
    bf7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf7c:	441a      	add	r2, r3
    bf7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf80:	f083 0303 	eor.w	r3, r3, #3
    bf84:	9907      	ldr	r1, [sp, #28]
    bf86:	440b      	add	r3, r1
    bf88:	7812      	ldrb	r2, [r2, #0]
    bf8a:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    bf8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bf8e:	3301      	adds	r3, #1
    bf90:	930a      	str	r3, [sp, #40]	; 0x28
    bf92:	9b02      	ldr	r3, [sp, #8]
    bf94:	689b      	ldr	r3, [r3, #8]
    bf96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bf98:	429a      	cmp	r2, r3
    bf9a:	d3ed      	bcc.n	bf78 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    bf9c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    bfa0:	4618      	mov	r0, r3
    bfa2:	f7ff f9ee 	bl	b382 <FlexCAN_ComputePayloadSize>
    bfa6:	4603      	mov	r3, r0
    bfa8:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    bfac:	9b02      	ldr	r3, [sp, #8]
    bfae:	689b      	ldr	r3, [r3, #8]
    bfb0:	930a      	str	r3, [sp, #40]	; 0x28
    bfb2:	e00a      	b.n	bfca <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    bfb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bfb6:	f083 0303 	eor.w	r3, r3, #3
    bfba:	9a07      	ldr	r2, [sp, #28]
    bfbc:	4413      	add	r3, r2
    bfbe:	9a02      	ldr	r2, [sp, #8]
    bfc0:	7b52      	ldrb	r2, [r2, #13]
    bfc2:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    bfc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bfc6:	3301      	adds	r3, #1
    bfc8:	930a      	str	r3, [sp, #40]	; 0x28
    bfca:	f89d 3012 	ldrb.w	r3, [sp, #18]
    bfce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bfd0:	429a      	cmp	r2, r3
    bfd2:	d3ef      	bcc.n	bfb4 <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    bfd4:	9b02      	ldr	r3, [sp, #8]
    bfd6:	685b      	ldr	r3, [r3, #4]
    bfd8:	2b01      	cmp	r3, #1
    bfda:	d111      	bne.n	c000 <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    bfdc:	9b08      	ldr	r3, [sp, #32]
    bfde:	681b      	ldr	r3, [r3, #0]
    bfe0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    bfe4:	9b08      	ldr	r3, [sp, #32]
    bfe6:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    bfe8:	9b08      	ldr	r3, [sp, #32]
    bfea:	681a      	ldr	r2, [r3, #0]
    bfec:	9b01      	ldr	r3, [sp, #4]
    bfee:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    bff2:	431a      	orrs	r2, r3
    bff4:	9b08      	ldr	r3, [sp, #32]
    bff6:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    bff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bffa:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    bffe:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    c000:	9b02      	ldr	r3, [sp, #8]
    c002:	685b      	ldr	r3, [r3, #4]
    c004:	2b00      	cmp	r3, #0
    c006:	d114      	bne.n	c032 <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    c008:	9b08      	ldr	r3, [sp, #32]
    c00a:	681b      	ldr	r3, [r3, #0]
    c00c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    c010:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    c014:	9a08      	ldr	r2, [sp, #32]
    c016:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    c018:	9b08      	ldr	r3, [sp, #32]
    c01a:	681a      	ldr	r2, [r3, #0]
    c01c:	9b01      	ldr	r3, [sp, #4]
    c01e:	0499      	lsls	r1, r3, #18
    c020:	4b2b      	ldr	r3, [pc, #172]	; (c0d0 <FlexCAN_SetTxMsgBuff+0x218>)
    c022:	400b      	ands	r3, r1
    c024:	431a      	orrs	r2, r3
    c026:	9b08      	ldr	r3, [sp, #32]
    c028:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c02c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    c030:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    c032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c034:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    c038:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    c03a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c03e:	041b      	lsls	r3, r3, #16
    c040:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    c044:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c046:	4313      	orrs	r3, r2
    c048:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    c04a:	9b02      	ldr	r3, [sp, #8]
    c04c:	681b      	ldr	r3, [r3, #0]
    c04e:	2b0f      	cmp	r3, #15
    c050:	d03a      	beq.n	c0c8 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    c052:	9b02      	ldr	r3, [sp, #8]
    c054:	681b      	ldr	r3, [r3, #0]
    c056:	2b1c      	cmp	r3, #28
    c058:	d104      	bne.n	c064 <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    c05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c05c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c060:	930b      	str	r3, [sp, #44]	; 0x2c
    c062:	e007      	b.n	c074 <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    c064:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    c068:	2b00      	cmp	r3, #0
    c06a:	d003      	beq.n	c074 <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    c06c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c06e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c072:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    c074:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c076:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    c07a:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    c07c:	9b02      	ldr	r3, [sp, #8]
    c07e:	7b1b      	ldrb	r3, [r3, #12]
    c080:	2b00      	cmp	r3, #0
    c082:	d00e      	beq.n	c0a2 <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    c084:	9b02      	ldr	r3, [sp, #8]
    c086:	681b      	ldr	r3, [r3, #0]
    c088:	061b      	lsls	r3, r3, #24
    c08a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    c08e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c090:	4313      	orrs	r3, r2
    c092:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c096:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    c098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c09a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    c09e:	930b      	str	r3, [sp, #44]	; 0x2c
    c0a0:	e007      	b.n	c0b2 <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c0a2:	9b02      	ldr	r3, [sp, #8]
    c0a4:	681b      	ldr	r3, [r3, #0]
    c0a6:	061b      	lsls	r3, r3, #24
    c0a8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    c0ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c0ae:	4313      	orrs	r3, r2
    c0b0:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    c0b2:	9b02      	ldr	r3, [sp, #8]
    c0b4:	7b9b      	ldrb	r3, [r3, #14]
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	d003      	beq.n	c0c2 <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    c0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c0bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c0c0:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    c0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c0c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c0c6:	601a      	str	r2, [r3, #0]
        }
}
    c0c8:	bf00      	nop
    c0ca:	b00d      	add	sp, #52	; 0x34
    c0cc:	f85d fb04 	ldr.w	pc, [sp], #4
    c0d0:	1ffc0000 	.word	0x1ffc0000

0000c0d4 <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    c0d4:	b500      	push	{lr}
    c0d6:	b08f      	sub	sp, #60	; 0x3c
    c0d8:	9001      	str	r0, [sp, #4]
    c0da:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    c0dc:	9b01      	ldr	r3, [sp, #4]
    c0de:	3380      	adds	r3, #128	; 0x80
    c0e0:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    c0e2:	2300      	movs	r3, #0
    c0e4:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    c0e6:	2300      	movs	r3, #0
    c0e8:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    c0ea:	2300      	movs	r3, #0
    c0ec:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    c0ee:	2300      	movs	r3, #0
    c0f0:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    c0f2:	2308      	movs	r3, #8
    c0f4:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    c0f8:	9b00      	ldr	r3, [sp, #0]
    c0fa:	3b01      	subs	r3, #1
    c0fc:	4619      	mov	r1, r3
    c0fe:	9801      	ldr	r0, [sp, #4]
    c100:	f7ff fcb6 	bl	ba70 <FlexCAN_GetMbPayloadSize>
    c104:	4603      	mov	r3, r0
    c106:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    c10a:	2300      	movs	r3, #0
    c10c:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    c10e:	2300      	movs	r3, #0
    c110:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    c112:	2300      	movs	r3, #0
    c114:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    c116:	9b00      	ldr	r3, [sp, #0]
    c118:	3b01      	subs	r3, #1
    c11a:	4619      	mov	r1, r3
    c11c:	9801      	ldr	r0, [sp, #4]
    c11e:	f7ff f979 	bl	b414 <FlexCAN_GetMsgBuffRegion>
    c122:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    c124:	f89d 2016 	ldrb.w	r2, [sp, #22]
    c128:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c12a:	441a      	add	r2, r3
    c12c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c130:	4413      	add	r3, r2
    c132:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    c134:	9801      	ldr	r0, [sp, #4]
    c136:	f7ff f9e7 	bl	b508 <FlexCAN_GetMaxMbNum>
    c13a:	4603      	mov	r3, r0
    c13c:	011b      	lsls	r3, r3, #4
    c13e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c140:	4413      	add	r3, r2
    c142:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    c144:	9a04      	ldr	r2, [sp, #16]
    c146:	9b03      	ldr	r3, [sp, #12]
    c148:	429a      	cmp	r2, r3
    c14a:	d806      	bhi.n	c15a <FlexCAN_SetMaxMsgBuffNum+0x86>
    c14c:	9801      	ldr	r0, [sp, #4]
    c14e:	f7ff f9db 	bl	b508 <FlexCAN_GetMaxMbNum>
    c152:	4602      	mov	r2, r0
    c154:	9b00      	ldr	r3, [sp, #0]
    c156:	4293      	cmp	r3, r2
    c158:	d901      	bls.n	c15e <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    c15a:	2304      	movs	r3, #4
    c15c:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    c15e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c160:	2b00      	cmp	r3, #0
    c162:	d142      	bne.n	c1ea <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    c164:	9b01      	ldr	r3, [sp, #4]
    c166:	681b      	ldr	r3, [r3, #0]
    c168:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    c16c:	9b00      	ldr	r3, [sp, #0]
    c16e:	3b01      	subs	r3, #1
    c170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c174:	431a      	orrs	r2, r3
    c176:	9b01      	ldr	r3, [sp, #4]
    c178:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    c17a:	9b01      	ldr	r3, [sp, #4]
    c17c:	681b      	ldr	r3, [r3, #0]
    c17e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    c182:	2b00      	cmp	r3, #0
    c184:	d131      	bne.n	c1ea <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    c186:	2300      	movs	r3, #0
    c188:	930d      	str	r3, [sp, #52]	; 0x34
    c18a:	e02a      	b.n	c1e2 <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    c18c:	990d      	ldr	r1, [sp, #52]	; 0x34
    c18e:	9801      	ldr	r0, [sp, #4]
    c190:	f7ff f940 	bl	b414 <FlexCAN_GetMsgBuffRegion>
    c194:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    c196:	9b08      	ldr	r3, [sp, #32]
    c198:	3304      	adds	r3, #4
    c19a:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    c19c:	9b08      	ldr	r3, [sp, #32]
    c19e:	3308      	adds	r3, #8
    c1a0:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    c1a2:	9b08      	ldr	r3, [sp, #32]
    c1a4:	2200      	movs	r2, #0
    c1a6:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    c1a8:	9b07      	ldr	r3, [sp, #28]
    c1aa:	2200      	movs	r2, #0
    c1ac:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    c1ae:	990d      	ldr	r1, [sp, #52]	; 0x34
    c1b0:	9801      	ldr	r0, [sp, #4]
    c1b2:	f7ff fc5d 	bl	ba70 <FlexCAN_GetMbPayloadSize>
    c1b6:	4603      	mov	r3, r0
    c1b8:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    c1bc:	2300      	movs	r3, #0
    c1be:	930c      	str	r3, [sp, #48]	; 0x30
    c1c0:	e007      	b.n	c1d2 <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    c1c2:	9a06      	ldr	r2, [sp, #24]
    c1c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c1c6:	4413      	add	r3, r2
    c1c8:	2200      	movs	r2, #0
    c1ca:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    c1cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c1ce:	3301      	adds	r3, #1
    c1d0:	930c      	str	r3, [sp, #48]	; 0x30
    c1d2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c1d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c1d8:	429a      	cmp	r2, r3
    c1da:	d3f2      	bcc.n	c1c2 <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    c1dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c1de:	3301      	adds	r3, #1
    c1e0:	930d      	str	r3, [sp, #52]	; 0x34
    c1e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c1e4:	9b00      	ldr	r3, [sp, #0]
    c1e6:	429a      	cmp	r2, r3
    c1e8:	d3d0      	bcc.n	c18c <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    c1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    c1ec:	4618      	mov	r0, r3
    c1ee:	b00f      	add	sp, #60	; 0x3c
    c1f0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c1f4 <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    c1f4:	b500      	push	{lr}
    c1f6:	b083      	sub	sp, #12
    c1f8:	9001      	str	r0, [sp, #4]
    c1fa:	9100      	str	r1, [sp, #0]
    switch (mode)
    c1fc:	9b00      	ldr	r3, [sp, #0]
    c1fe:	2b02      	cmp	r3, #2
    c200:	d01d      	beq.n	c23e <FlexCAN_SetOperationMode+0x4a>
    c202:	9b00      	ldr	r3, [sp, #0]
    c204:	2b02      	cmp	r3, #2
    c206:	d82b      	bhi.n	c260 <FlexCAN_SetOperationMode+0x6c>
    c208:	9b00      	ldr	r3, [sp, #0]
    c20a:	2b00      	cmp	r3, #0
    c20c:	d003      	beq.n	c216 <FlexCAN_SetOperationMode+0x22>
    c20e:	9b00      	ldr	r3, [sp, #0]
    c210:	2b01      	cmp	r3, #1
    c212:	d00d      	beq.n	c230 <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    c214:	e024      	b.n	c260 <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    c216:	9b01      	ldr	r3, [sp, #4]
    c218:	685b      	ldr	r3, [r3, #4]
    c21a:	f023 0208 	bic.w	r2, r3, #8
    c21e:	9b01      	ldr	r3, [sp, #4]
    c220:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    c222:	9b01      	ldr	r3, [sp, #4]
    c224:	685b      	ldr	r3, [r3, #4]
    c226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    c22a:	9b01      	ldr	r3, [sp, #4]
    c22c:	605a      	str	r2, [r3, #4]
            break;
    c22e:	e018      	b.n	c262 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    c230:	9b01      	ldr	r3, [sp, #4]
    c232:	685b      	ldr	r3, [r3, #4]
    c234:	f043 0208 	orr.w	r2, r3, #8
    c238:	9b01      	ldr	r3, [sp, #4]
    c23a:	605a      	str	r2, [r3, #4]
            break;
    c23c:	e011      	b.n	c262 <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    c23e:	9b01      	ldr	r3, [sp, #4]
    c240:	685b      	ldr	r3, [r3, #4]
    c242:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    c246:	9b01      	ldr	r3, [sp, #4]
    c248:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    c24a:	9b01      	ldr	r3, [sp, #4]
    c24c:	685b      	ldr	r3, [r3, #4]
    c24e:	f023 0208 	bic.w	r2, r3, #8
    c252:	9b01      	ldr	r3, [sp, #4]
    c254:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    c256:	2101      	movs	r1, #1
    c258:	9801      	ldr	r0, [sp, #4]
    c25a:	f7fe ff7f 	bl	b15c <FlexCAN_SetSelfReception>
            break;
    c25e:	e000      	b.n	c262 <FlexCAN_SetOperationMode+0x6e>
            break;
    c260:	bf00      	nop
    }
}
    c262:	bf00      	nop
    c264:	b003      	add	sp, #12
    c266:	f85d fb04 	ldr.w	pc, [sp], #4

0000c26a <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    c26a:	b500      	push	{lr}
    c26c:	b08d      	sub	sp, #52	; 0x34
    c26e:	9003      	str	r0, [sp, #12]
    c270:	9102      	str	r1, [sp, #8]
    c272:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    c274:	2300      	movs	r3, #0
    c276:	9309      	str	r3, [sp, #36]	; 0x24
    c278:	2300      	movs	r3, #0
    c27a:	9308      	str	r3, [sp, #32]
    c27c:	2300      	movs	r3, #0
    c27e:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    c280:	9b03      	ldr	r3, [sp, #12]
    c282:	33e0      	adds	r3, #224	; 0xe0
    c284:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    c286:	9b03      	ldr	r3, [sp, #12]
    c288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c28a:	0e1b      	lsrs	r3, r3, #24
    c28c:	f003 030f 	and.w	r3, r3, #15
    c290:	9305      	str	r3, [sp, #20]
    c292:	9b02      	ldr	r3, [sp, #8]
    c294:	2b03      	cmp	r3, #3
    c296:	f200 81e7 	bhi.w	c668 <FlexCAN_SetRxFifoFilter+0x3fe>
    c29a:	a201      	add	r2, pc, #4	; (adr r2, c2a0 <FlexCAN_SetRxFifoFilter+0x36>)
    c29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c2a0:	0000c2b1 	.word	0x0000c2b1
    c2a4:	0000c34b 	.word	0x0000c34b
    c2a8:	0000c485 	.word	0x0000c485
    c2ac:	0000c653 	.word	0x0000c653
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c2b0:	f000 ffb4 	bl	d21c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    c2b4:	9b03      	ldr	r3, [sp, #12]
    c2b6:	681b      	ldr	r3, [r3, #0]
    c2b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    c2bc:	9b03      	ldr	r3, [sp, #12]
    c2be:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c2c0:	f000 ffd8 	bl	d274 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c2c4:	2300      	movs	r3, #0
    c2c6:	930b      	str	r3, [sp, #44]	; 0x2c
    c2c8:	e038      	b.n	c33c <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    c2ca:	2300      	movs	r3, #0
    c2cc:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    c2ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c2d0:	00db      	lsls	r3, r3, #3
    c2d2:	9a01      	ldr	r2, [sp, #4]
    c2d4:	4413      	add	r3, r2
    c2d6:	781b      	ldrb	r3, [r3, #0]
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d002      	beq.n	c2e2 <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    c2dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c2e0:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    c2e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c2e4:	00db      	lsls	r3, r3, #3
    c2e6:	9a01      	ldr	r2, [sp, #4]
    c2e8:	4413      	add	r3, r2
    c2ea:	785b      	ldrb	r3, [r3, #1]
    c2ec:	2b00      	cmp	r3, #0
    c2ee:	d013      	beq.n	c318 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    c2f0:	9b07      	ldr	r3, [sp, #28]
    c2f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c2f6:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    c2f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c2fa:	00db      	lsls	r3, r3, #3
    c2fc:	9a01      	ldr	r2, [sp, #4]
    c2fe:	4413      	add	r3, r2
    c300:	685b      	ldr	r3, [r3, #4]
    c302:	005b      	lsls	r3, r3, #1
    c304:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    c308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c30a:	009b      	lsls	r3, r3, #2
    c30c:	9a06      	ldr	r2, [sp, #24]
    c30e:	4413      	add	r3, r2
    c310:	9a07      	ldr	r2, [sp, #28]
    c312:	440a      	add	r2, r1
    c314:	601a      	str	r2, [r3, #0]
    c316:	e00e      	b.n	c336 <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    c318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c31a:	00db      	lsls	r3, r3, #3
    c31c:	9a01      	ldr	r2, [sp, #4]
    c31e:	4413      	add	r3, r2
    c320:	685b      	ldr	r3, [r3, #4]
    c322:	04da      	lsls	r2, r3, #19
    c324:	4b9d      	ldr	r3, [pc, #628]	; (c59c <FlexCAN_SetRxFifoFilter+0x332>)
    c326:	4013      	ands	r3, r2
    c328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c32a:	0092      	lsls	r2, r2, #2
    c32c:	9906      	ldr	r1, [sp, #24]
    c32e:	440a      	add	r2, r1
    c330:	9907      	ldr	r1, [sp, #28]
    c332:	440b      	add	r3, r1
    c334:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c338:	3301      	adds	r3, #1
    c33a:	930b      	str	r3, [sp, #44]	; 0x2c
    c33c:	9b05      	ldr	r3, [sp, #20]
    c33e:	3301      	adds	r3, #1
    c340:	00db      	lsls	r3, r3, #3
    c342:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c344:	429a      	cmp	r2, r3
    c346:	d3c0      	bcc.n	c2ca <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    c348:	e18f      	b.n	c66a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c34a:	f000 ff67 	bl	d21c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    c34e:	9b03      	ldr	r3, [sp, #12]
    c350:	681b      	ldr	r3, [r3, #0]
    c352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    c356:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    c35a:	9b03      	ldr	r3, [sp, #12]
    c35c:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c35e:	f000 ff89 	bl	d274 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    c362:	2300      	movs	r3, #0
    c364:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c366:	2300      	movs	r3, #0
    c368:	930b      	str	r3, [sp, #44]	; 0x2c
    c36a:	e083      	b.n	c474 <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    c36c:	2300      	movs	r3, #0
    c36e:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    c370:	2300      	movs	r3, #0
    c372:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    c374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c376:	00db      	lsls	r3, r3, #3
    c378:	9a01      	ldr	r2, [sp, #4]
    c37a:	4413      	add	r3, r2
    c37c:	781b      	ldrb	r3, [r3, #0]
    c37e:	2b00      	cmp	r3, #0
    c380:	d002      	beq.n	c388 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    c382:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c386:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    c388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c38a:	3301      	adds	r3, #1
    c38c:	00db      	lsls	r3, r3, #3
    c38e:	9a01      	ldr	r2, [sp, #4]
    c390:	4413      	add	r3, r2
    c392:	781b      	ldrb	r3, [r3, #0]
    c394:	2b00      	cmp	r3, #0
    c396:	d002      	beq.n	c39e <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    c398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    c39c:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    c39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3a0:	00db      	lsls	r3, r3, #3
    c3a2:	9a01      	ldr	r2, [sp, #4]
    c3a4:	4413      	add	r3, r2
    c3a6:	785b      	ldrb	r3, [r3, #1]
    c3a8:	2b00      	cmp	r3, #0
    c3aa:	d014      	beq.n	c3d6 <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    c3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c3ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    c3b2:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c3b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3b6:	00db      	lsls	r3, r3, #3
    c3b8:	9a01      	ldr	r2, [sp, #4]
    c3ba:	4413      	add	r3, r2
    c3bc:	685b      	ldr	r3, [r3, #4]
    c3be:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    c3c0:	041a      	lsls	r2, r3, #16
    c3c2:	4b77      	ldr	r3, [pc, #476]	; (c5a0 <FlexCAN_SetRxFifoFilter+0x336>)
    c3c4:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c3c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c3c8:	0092      	lsls	r2, r2, #2
    c3ca:	9906      	ldr	r1, [sp, #24]
    c3cc:	440a      	add	r2, r1
    c3ce:	9909      	ldr	r1, [sp, #36]	; 0x24
    c3d0:	440b      	add	r3, r1
    c3d2:	6013      	str	r3, [r2, #0]
    c3d4:	e00e      	b.n	c3f4 <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    c3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3d8:	00db      	lsls	r3, r3, #3
    c3da:	9a01      	ldr	r2, [sp, #4]
    c3dc:	4413      	add	r3, r2
    c3de:	685b      	ldr	r3, [r3, #4]
    c3e0:	04da      	lsls	r2, r3, #19
    c3e2:	4b6e      	ldr	r3, [pc, #440]	; (c59c <FlexCAN_SetRxFifoFilter+0x332>)
    c3e4:	4013      	ands	r3, r2
    c3e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c3e8:	0092      	lsls	r2, r2, #2
    c3ea:	9906      	ldr	r1, [sp, #24]
    c3ec:	440a      	add	r2, r1
    c3ee:	9909      	ldr	r1, [sp, #36]	; 0x24
    c3f0:	440b      	add	r3, r1
    c3f2:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    c3f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c3f6:	3301      	adds	r3, #1
    c3f8:	00db      	lsls	r3, r3, #3
    c3fa:	9a01      	ldr	r2, [sp, #4]
    c3fc:	4413      	add	r3, r2
    c3fe:	785b      	ldrb	r3, [r3, #1]
    c400:	2b00      	cmp	r3, #0
    c402:	d01a      	beq.n	c43a <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    c404:	9b08      	ldr	r3, [sp, #32]
    c406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    c40a:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c40c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c40e:	009b      	lsls	r3, r3, #2
    c410:	9a06      	ldr	r2, [sp, #24]
    c412:	4413      	add	r3, r2
    c414:	6819      	ldr	r1, [r3, #0]
    c416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c418:	3301      	adds	r3, #1
    c41a:	00db      	lsls	r3, r3, #3
    c41c:	9a01      	ldr	r2, [sp, #4]
    c41e:	4413      	add	r3, r2
    c420:	685b      	ldr	r3, [r3, #4]
    c422:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    c424:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    c428:	9b08      	ldr	r3, [sp, #32]
    c42a:	441a      	add	r2, r3
    c42c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c42e:	009b      	lsls	r3, r3, #2
    c430:	9806      	ldr	r0, [sp, #24]
    c432:	4403      	add	r3, r0
    c434:	430a      	orrs	r2, r1
    c436:	601a      	str	r2, [r3, #0]
    c438:	e016      	b.n	c468 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    c43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c43c:	009b      	lsls	r3, r3, #2
    c43e:	9a06      	ldr	r2, [sp, #24]
    c440:	4413      	add	r3, r2
    c442:	6819      	ldr	r1, [r3, #0]
    c444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c446:	3301      	adds	r3, #1
    c448:	00db      	lsls	r3, r3, #3
    c44a:	9a01      	ldr	r2, [sp, #4]
    c44c:	4413      	add	r3, r2
    c44e:	685b      	ldr	r3, [r3, #4]
    c450:	00da      	lsls	r2, r3, #3
    c452:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    c456:	4013      	ands	r3, r2
    c458:	9a08      	ldr	r2, [sp, #32]
    c45a:	441a      	add	r2, r3
    c45c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c45e:	009b      	lsls	r3, r3, #2
    c460:	9806      	ldr	r0, [sp, #24]
    c462:	4403      	add	r3, r0
    c464:	430a      	orrs	r2, r1
    c466:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    c468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c46a:	3302      	adds	r3, #2
    c46c:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c46e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c470:	3301      	adds	r3, #1
    c472:	930b      	str	r3, [sp, #44]	; 0x2c
    c474:	9b05      	ldr	r3, [sp, #20]
    c476:	3301      	adds	r3, #1
    c478:	00db      	lsls	r3, r3, #3
    c47a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c47c:	429a      	cmp	r2, r3
    c47e:	f4ff af75 	bcc.w	c36c <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    c482:	e0f2      	b.n	c66a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c484:	f000 feca 	bl	d21c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    c488:	9b03      	ldr	r3, [sp, #12]
    c48a:	681b      	ldr	r3, [r3, #0]
    c48c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    c490:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    c494:	9b03      	ldr	r3, [sp, #12]
    c496:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c498:	f000 feec 	bl	d274 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    c49c:	2300      	movs	r3, #0
    c49e:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c4a0:	2300      	movs	r3, #0
    c4a2:	930b      	str	r3, [sp, #44]	; 0x2c
    c4a4:	e0cd      	b.n	c642 <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    c4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4a8:	00db      	lsls	r3, r3, #3
    c4aa:	9a01      	ldr	r2, [sp, #4]
    c4ac:	4413      	add	r3, r2
    c4ae:	785b      	ldrb	r3, [r3, #1]
    c4b0:	2b00      	cmp	r3, #0
    c4b2:	d00e      	beq.n	c4d2 <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c4b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4b6:	00db      	lsls	r3, r3, #3
    c4b8:	9a01      	ldr	r2, [sp, #4]
    c4ba:	4413      	add	r3, r2
    c4bc:	685b      	ldr	r3, [r3, #4]
    c4be:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    c4c0:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c4c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c4c4:	009b      	lsls	r3, r3, #2
    c4c6:	9a06      	ldr	r2, [sp, #24]
    c4c8:	4413      	add	r3, r2
    c4ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c4cc:	440a      	add	r2, r1
    c4ce:	601a      	str	r2, [r3, #0]
    c4d0:	e00d      	b.n	c4ee <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c4d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4d4:	00db      	lsls	r3, r3, #3
    c4d6:	9a01      	ldr	r2, [sp, #4]
    c4d8:	4413      	add	r3, r2
    c4da:	685b      	ldr	r3, [r3, #4]
    c4dc:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    c4de:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c4e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c4e2:	009b      	lsls	r3, r3, #2
    c4e4:	9a06      	ldr	r2, [sp, #24]
    c4e6:	4413      	add	r3, r2
    c4e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c4ea:	440a      	add	r2, r1
    c4ec:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    c4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c4f0:	3301      	adds	r3, #1
    c4f2:	00db      	lsls	r3, r3, #3
    c4f4:	9a01      	ldr	r2, [sp, #4]
    c4f6:	4413      	add	r3, r2
    c4f8:	785b      	ldrb	r3, [r3, #1]
    c4fa:	2b00      	cmp	r3, #0
    c4fc:	d017      	beq.n	c52e <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c4fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c500:	009b      	lsls	r3, r3, #2
    c502:	9a06      	ldr	r2, [sp, #24]
    c504:	4413      	add	r3, r2
    c506:	6819      	ldr	r1, [r3, #0]
    c508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c50a:	3301      	adds	r3, #1
    c50c:	00db      	lsls	r3, r3, #3
    c50e:	9a01      	ldr	r2, [sp, #4]
    c510:	4413      	add	r3, r2
    c512:	685b      	ldr	r3, [r3, #4]
    c514:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    c516:	041b      	lsls	r3, r3, #16
    c518:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c51e:	441a      	add	r2, r3
    c520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c522:	009b      	lsls	r3, r3, #2
    c524:	9806      	ldr	r0, [sp, #24]
    c526:	4403      	add	r3, r0
    c528:	430a      	orrs	r2, r1
    c52a:	601a      	str	r2, [r3, #0]
    c52c:	e016      	b.n	c55c <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c52e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c530:	009b      	lsls	r3, r3, #2
    c532:	9a06      	ldr	r2, [sp, #24]
    c534:	4413      	add	r3, r2
    c536:	6819      	ldr	r1, [r3, #0]
    c538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c53a:	3301      	adds	r3, #1
    c53c:	00db      	lsls	r3, r3, #3
    c53e:	9a01      	ldr	r2, [sp, #4]
    c540:	4413      	add	r3, r2
    c542:	685b      	ldr	r3, [r3, #4]
    c544:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    c546:	041b      	lsls	r3, r3, #16
    c548:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c54c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c54e:	441a      	add	r2, r3
    c550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c552:	009b      	lsls	r3, r3, #2
    c554:	9806      	ldr	r0, [sp, #24]
    c556:	4403      	add	r3, r0
    c558:	430a      	orrs	r2, r1
    c55a:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    c55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c55e:	3302      	adds	r3, #2
    c560:	00db      	lsls	r3, r3, #3
    c562:	9a01      	ldr	r2, [sp, #4]
    c564:	4413      	add	r3, r2
    c566:	785b      	ldrb	r3, [r3, #1]
    c568:	2b00      	cmp	r3, #0
    c56a:	d01b      	beq.n	c5a4 <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c56c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c56e:	009b      	lsls	r3, r3, #2
    c570:	9a06      	ldr	r2, [sp, #24]
    c572:	4413      	add	r3, r2
    c574:	6819      	ldr	r1, [r3, #0]
    c576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c578:	3302      	adds	r3, #2
    c57a:	00db      	lsls	r3, r3, #3
    c57c:	9a01      	ldr	r2, [sp, #4]
    c57e:	4413      	add	r3, r2
    c580:	685b      	ldr	r3, [r3, #4]
    c582:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    c584:	021b      	lsls	r3, r3, #8
    c586:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c588:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c58a:	441a      	add	r2, r3
    c58c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c58e:	009b      	lsls	r3, r3, #2
    c590:	9806      	ldr	r0, [sp, #24]
    c592:	4403      	add	r3, r0
    c594:	430a      	orrs	r2, r1
    c596:	601a      	str	r2, [r3, #0]
    c598:	e01a      	b.n	c5d0 <FlexCAN_SetRxFifoFilter+0x366>
    c59a:	bf00      	nop
    c59c:	3ff80000 	.word	0x3ff80000
    c5a0:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c5a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5a6:	009b      	lsls	r3, r3, #2
    c5a8:	9a06      	ldr	r2, [sp, #24]
    c5aa:	4413      	add	r3, r2
    c5ac:	6819      	ldr	r1, [r3, #0]
    c5ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c5b0:	3302      	adds	r3, #2
    c5b2:	00db      	lsls	r3, r3, #3
    c5b4:	9a01      	ldr	r2, [sp, #4]
    c5b6:	4413      	add	r3, r2
    c5b8:	685b      	ldr	r3, [r3, #4]
    c5ba:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    c5bc:	021b      	lsls	r3, r3, #8
    c5be:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c5c2:	441a      	add	r2, r3
    c5c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5c6:	009b      	lsls	r3, r3, #2
    c5c8:	9806      	ldr	r0, [sp, #24]
    c5ca:	4403      	add	r3, r0
    c5cc:	430a      	orrs	r2, r1
    c5ce:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    c5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c5d2:	3303      	adds	r3, #3
    c5d4:	00db      	lsls	r3, r3, #3
    c5d6:	9a01      	ldr	r2, [sp, #4]
    c5d8:	4413      	add	r3, r2
    c5da:	785b      	ldrb	r3, [r3, #1]
    c5dc:	2b00      	cmp	r3, #0
    c5de:	d015      	beq.n	c60c <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c5e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c5e2:	009b      	lsls	r3, r3, #2
    c5e4:	9a06      	ldr	r2, [sp, #24]
    c5e6:	4413      	add	r3, r2
    c5e8:	6819      	ldr	r1, [r3, #0]
    c5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c5ec:	3303      	adds	r3, #3
    c5ee:	00db      	lsls	r3, r3, #3
    c5f0:	9a01      	ldr	r2, [sp, #4]
    c5f2:	4413      	add	r3, r2
    c5f4:	685b      	ldr	r3, [r3, #4]
    c5f6:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    c5f8:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    c5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c5fc:	441a      	add	r2, r3
    c5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c600:	009b      	lsls	r3, r3, #2
    c602:	9806      	ldr	r0, [sp, #24]
    c604:	4403      	add	r3, r0
    c606:	430a      	orrs	r2, r1
    c608:	601a      	str	r2, [r3, #0]
    c60a:	e014      	b.n	c636 <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    c60c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c60e:	009b      	lsls	r3, r3, #2
    c610:	9a06      	ldr	r2, [sp, #24]
    c612:	4413      	add	r3, r2
    c614:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    c616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c618:	3303      	adds	r3, #3
    c61a:	00db      	lsls	r3, r3, #3
    c61c:	9a01      	ldr	r2, [sp, #4]
    c61e:	4413      	add	r3, r2
    c620:	685b      	ldr	r3, [r3, #4]
    c622:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    c624:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    c626:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c628:	441a      	add	r2, r3
    c62a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c62c:	009b      	lsls	r3, r3, #2
    c62e:	9806      	ldr	r0, [sp, #24]
    c630:	4403      	add	r3, r0
    c632:	430a      	orrs	r2, r1
    c634:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    c636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c638:	3304      	adds	r3, #4
    c63a:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    c63c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c63e:	3301      	adds	r3, #1
    c640:	930b      	str	r3, [sp, #44]	; 0x2c
    c642:	9b05      	ldr	r3, [sp, #20]
    c644:	3301      	adds	r3, #1
    c646:	00db      	lsls	r3, r3, #3
    c648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c64a:	429a      	cmp	r2, r3
    c64c:	f4ff af2b 	bcc.w	c4a6 <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    c650:	e00b      	b.n	c66a <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c652:	f000 fde3 	bl	d21c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    c656:	9b03      	ldr	r3, [sp, #12]
    c658:	681b      	ldr	r3, [r3, #0]
    c65a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    c65e:	9b03      	ldr	r3, [sp, #12]
    c660:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    c662:	f000 fe07 	bl	d274 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    c666:	e000      	b.n	c66a <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    c668:	bf00      	nop
    }
}
    c66a:	bf00      	nop
    c66c:	b00d      	add	sp, #52	; 0x34
    c66e:	f85d fb04 	ldr.w	pc, [sp], #4

0000c672 <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    c672:	b500      	push	{lr}
    c674:	b08b      	sub	sp, #44	; 0x2c
    c676:	9001      	str	r0, [sp, #4]
    c678:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    c67a:	9b01      	ldr	r3, [sp, #4]
    c67c:	3380      	adds	r3, #128	; 0x80
    c67e:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    c680:	9b07      	ldr	r3, [sp, #28]
    c682:	3304      	adds	r3, #4
    c684:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    c686:	9b07      	ldr	r3, [sp, #28]
    c688:	3308      	adds	r3, #8
    c68a:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    c68c:	2300      	movs	r3, #0
    c68e:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    c690:	9b07      	ldr	r3, [sp, #28]
    c692:	681b      	ldr	r3, [r3, #0]
    c694:	0c1b      	lsrs	r3, r3, #16
    c696:	b2db      	uxtb	r3, r3
    c698:	f003 030f 	and.w	r3, r3, #15
    c69c:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    c6a0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c6a4:	4618      	mov	r0, r3
    c6a6:	f7fe fe6c 	bl	b382 <FlexCAN_ComputePayloadSize>
    c6aa:	4603      	mov	r3, r0
    c6ac:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    c6b0:	9b00      	ldr	r3, [sp, #0]
    c6b2:	3308      	adds	r3, #8
    c6b4:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    c6b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c6ba:	2b08      	cmp	r3, #8
    c6bc:	d902      	bls.n	c6c4 <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    c6be:	2308      	movs	r3, #8
    c6c0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    c6c4:	9b00      	ldr	r3, [sp, #0]
    c6c6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    c6ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    c6ce:	9b07      	ldr	r3, [sp, #28]
    c6d0:	681a      	ldr	r2, [r3, #0]
    c6d2:	9b00      	ldr	r3, [sp, #0]
    c6d4:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    c6d6:	9b00      	ldr	r3, [sp, #0]
    c6d8:	681b      	ldr	r3, [r3, #0]
    c6da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    c6de:	2b00      	cmp	r3, #0
    c6e0:	d004      	beq.n	c6ec <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    c6e2:	9b06      	ldr	r3, [sp, #24]
    c6e4:	681a      	ldr	r2, [r3, #0]
    c6e6:	9b00      	ldr	r3, [sp, #0]
    c6e8:	605a      	str	r2, [r3, #4]
    c6ea:	e004      	b.n	c6f6 <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    c6ec:	9b06      	ldr	r3, [sp, #24]
    c6ee:	681b      	ldr	r3, [r3, #0]
    c6f0:	0c9a      	lsrs	r2, r3, #18
    c6f2:	9b00      	ldr	r3, [sp, #0]
    c6f4:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    c6f6:	9b01      	ldr	r3, [sp, #4]
    c6f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c6fa:	b2da      	uxtb	r2, r3
    c6fc:	9b00      	ldr	r3, [sp, #0]
    c6fe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    c702:	9b00      	ldr	r3, [sp, #0]
    c704:	681b      	ldr	r3, [r3, #0]
    c706:	b29a      	uxth	r2, r3
    c708:	9b00      	ldr	r3, [sp, #0]
    c70a:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    c70c:	2300      	movs	r3, #0
    c70e:	9309      	str	r3, [sp, #36]	; 0x24
    c710:	e01f      	b.n	c752 <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    c712:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c714:	089b      	lsrs	r3, r3, #2
    c716:	009b      	lsls	r3, r3, #2
    c718:	9a05      	ldr	r2, [sp, #20]
    c71a:	4413      	add	r3, r2
    c71c:	681b      	ldr	r3, [r3, #0]
    c71e:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    c720:	9b02      	ldr	r3, [sp, #8]
    c722:	0e1a      	lsrs	r2, r3, #24
    c724:	9b02      	ldr	r3, [sp, #8]
    c726:	0a1b      	lsrs	r3, r3, #8
    c728:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    c72c:	431a      	orrs	r2, r3
    c72e:	9b02      	ldr	r3, [sp, #8]
    c730:	021b      	lsls	r3, r3, #8
    c732:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    c736:	ea42 0103 	orr.w	r1, r2, r3
    c73a:	9b02      	ldr	r3, [sp, #8]
    c73c:	061a      	lsls	r2, r3, #24
    c73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c740:	089b      	lsrs	r3, r3, #2
    c742:	009b      	lsls	r3, r3, #2
    c744:	9804      	ldr	r0, [sp, #16]
    c746:	4403      	add	r3, r0
    c748:	430a      	orrs	r2, r1
    c74a:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    c74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c74e:	3304      	adds	r3, #4
    c750:	9309      	str	r3, [sp, #36]	; 0x24
    c752:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    c756:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c758:	429a      	cmp	r2, r3
    c75a:	d3da      	bcc.n	c712 <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    c75c:	bf00      	nop
    c75e:	bf00      	nop
    c760:	b00b      	add	sp, #44	; 0x2c
    c762:	f85d fb04 	ldr.w	pc, [sp], #4

0000c766 <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    c766:	b088      	sub	sp, #32
    c768:	9003      	str	r0, [sp, #12]
    c76a:	9301      	str	r3, [sp, #4]
    c76c:	460b      	mov	r3, r1
    c76e:	f88d 300b 	strb.w	r3, [sp, #11]
    c772:	4613      	mov	r3, r2
    c774:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    c778:	2300      	movs	r3, #0
    c77a:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    c77e:	2300      	movs	r3, #0
    c780:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    c782:	2300      	movs	r3, #0
    c784:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    c786:	9b01      	ldr	r3, [sp, #4]
    c788:	b2db      	uxtb	r3, r3
    c78a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    c78e:	429a      	cmp	r2, r3
    c790:	d303      	bcc.n	c79a <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    c792:	2301      	movs	r3, #1
    c794:	f88d 301f 	strb.w	r3, [sp, #31]
    c798:	e01b      	b.n	c7d2 <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    c79a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c79e:	2b00      	cmp	r3, #0
    c7a0:	d014      	beq.n	c7cc <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    c7a2:	9b03      	ldr	r3, [sp, #12]
    c7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c7a6:	0e1b      	lsrs	r3, r3, #24
    c7a8:	f003 030f 	and.w	r3, r3, #15
    c7ac:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    c7ae:	9b06      	ldr	r3, [sp, #24]
    c7b0:	3301      	adds	r3, #1
    c7b2:	00db      	lsls	r3, r3, #3
    c7b4:	089b      	lsrs	r3, r3, #2
    c7b6:	3305      	adds	r3, #5
    c7b8:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    c7ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c7be:	9a05      	ldr	r2, [sp, #20]
    c7c0:	429a      	cmp	r2, r3
    c7c2:	d306      	bcc.n	c7d2 <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    c7c4:	2301      	movs	r3, #1
    c7c6:	f88d 301f 	strb.w	r3, [sp, #31]
    c7ca:	e002      	b.n	c7d2 <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    c7cc:	2300      	movs	r3, #0
    c7ce:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    c7d2:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    c7d6:	4618      	mov	r0, r3
    c7d8:	b008      	add	sp, #32
    c7da:	4770      	bx	lr

0000c7dc <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    c7dc:	b500      	push	{lr}
    c7de:	b083      	sub	sp, #12
    c7e0:	9001      	str	r0, [sp, #4]
    c7e2:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    c7e4:	9b00      	ldr	r3, [sp, #0]
    c7e6:	f003 0320 	and.w	r3, r3, #32
    c7ea:	2b00      	cmp	r3, #0
    c7ec:	d004      	beq.n	c7f8 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    c7ee:	2101      	movs	r1, #1
    c7f0:	9801      	ldr	r0, [sp, #4]
    c7f2:	f7fe fcd8 	bl	b1a6 <FlexCAN_SetIsoCan>
    c7f6:	e003      	b.n	c800 <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    c7f8:	2100      	movs	r1, #0
    c7fa:	9801      	ldr	r0, [sp, #4]
    c7fc:	f7fe fcd3 	bl	b1a6 <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    c800:	9b00      	ldr	r3, [sp, #0]
    c802:	f003 0340 	and.w	r3, r3, #64	; 0x40
    c806:	2b00      	cmp	r3, #0
    c808:	d004      	beq.n	c814 <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    c80a:	2101      	movs	r1, #1
    c80c:	9801      	ldr	r0, [sp, #4]
    c80e:	f7fe fce1 	bl	b1d4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    c812:	e003      	b.n	c81c <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    c814:	2100      	movs	r1, #0
    c816:	9801      	ldr	r0, [sp, #4]
    c818:	f7fe fcdc 	bl	b1d4 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    c81c:	9b00      	ldr	r3, [sp, #0]
    c81e:	f003 0308 	and.w	r3, r3, #8
    c822:	2b00      	cmp	r3, #0
    c824:	d004      	beq.n	c830 <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    c826:	2101      	movs	r1, #1
    c828:	9801      	ldr	r0, [sp, #4]
    c82a:	f7fe fcea 	bl	b202 <FlexCAN_SetProtocolException>
    c82e:	e003      	b.n	c838 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    c830:	2100      	movs	r1, #0
    c832:	9801      	ldr	r0, [sp, #4]
    c834:	f7fe fce5 	bl	b202 <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    c838:	9b00      	ldr	r3, [sp, #0]
    c83a:	f003 0302 	and.w	r3, r3, #2
    c83e:	2b00      	cmp	r3, #0
    c840:	d00a      	beq.n	c858 <FlexCAN_ConfigCtrlOptions+0x7c>
    c842:	9b01      	ldr	r3, [sp, #4]
    c844:	681b      	ldr	r3, [r3, #0]
    c846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    c84a:	2b00      	cmp	r3, #0
    c84c:	d104      	bne.n	c858 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    c84e:	2101      	movs	r1, #1
    c850:	9801      	ldr	r0, [sp, #4]
    c852:	f7fe fd31 	bl	b2b8 <FlexCAN_CanBitSampling>
    c856:	e003      	b.n	c860 <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    c858:	2100      	movs	r1, #0
    c85a:	9801      	ldr	r0, [sp, #4]
    c85c:	f7fe fd2c 	bl	b2b8 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    c860:	9b00      	ldr	r3, [sp, #0]
    c862:	f003 0304 	and.w	r3, r3, #4
    c866:	2b00      	cmp	r3, #0
    c868:	d004      	beq.n	c874 <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    c86a:	2101      	movs	r1, #1
    c86c:	9801      	ldr	r0, [sp, #4]
    c86e:	f7fe fcf6 	bl	b25e <FlexCAN_SetBusOffAutorecovery>
    c872:	e003      	b.n	c87c <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    c874:	2100      	movs	r1, #0
    c876:	9801      	ldr	r0, [sp, #4]
    c878:	f7fe fcf1 	bl	b25e <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    c87c:	9b00      	ldr	r3, [sp, #0]
    c87e:	f003 0301 	and.w	r3, r3, #1
    c882:	2b00      	cmp	r3, #0
    c884:	d004      	beq.n	c890 <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    c886:	2101      	movs	r1, #1
    c888:	9801      	ldr	r0, [sp, #4]
    c88a:	f7fe fcd1 	bl	b230 <FlexCAN_SetRemoteReqStore>
    c88e:	e003      	b.n	c898 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    c890:	2100      	movs	r1, #0
    c892:	9801      	ldr	r0, [sp, #4]
    c894:	f7fe fccc 	bl	b230 <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    c898:	9b00      	ldr	r3, [sp, #0]
    c89a:	f003 0310 	and.w	r3, r3, #16
    c89e:	2b00      	cmp	r3, #0
    c8a0:	d004      	beq.n	c8ac <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    c8a2:	2101      	movs	r1, #1
    c8a4:	9801      	ldr	r0, [sp, #4]
    c8a6:	f7fe fcf0 	bl	b28a <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    c8aa:	e003      	b.n	c8b4 <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    c8ac:	2100      	movs	r1, #0
    c8ae:	9801      	ldr	r0, [sp, #4]
    c8b0:	f7fe fceb 	bl	b28a <FlexCAN_SetEdgeFilter>
}
    c8b4:	bf00      	nop
    c8b6:	b003      	add	sp, #12
    c8b8:	f85d fb04 	ldr.w	pc, [sp], #4

0000c8bc <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    c8bc:	b084      	sub	sp, #16
    c8be:	4603      	mov	r3, r0
    c8c0:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    c8c4:	2300      	movs	r3, #0
    c8c6:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    c8ca:	2300      	movs	r3, #0
    c8cc:	f88d 300f 	strb.w	r3, [sp, #15]
    c8d0:	e00d      	b.n	c8ee <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    c8d2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    c8d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c8da:	4909      	ldr	r1, [pc, #36]	; (c900 <FlexCAN_ResetImaskBuff+0x44>)
    c8dc:	4413      	add	r3, r2
    c8de:	2200      	movs	r2, #0
    c8e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    c8e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c8e8:	3301      	adds	r3, #1
    c8ea:	f88d 300f 	strb.w	r3, [sp, #15]
    c8ee:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c8f2:	2b00      	cmp	r3, #0
    c8f4:	d0ed      	beq.n	c8d2 <FlexCAN_ResetImaskBuff+0x16>
    }
}
    c8f6:	bf00      	nop
    c8f8:	bf00      	nop
    c8fa:	b004      	add	sp, #16
    c8fc:	4770      	bx	lr
    c8fe:	bf00      	nop
    c900:	1fff8fac 	.word	0x1fff8fac

0000c904 <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    c904:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    c906:	2000      	movs	r0, #0
    c908:	f7fd fb2a 	bl	9f60 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    c90c:	f3bf 8f4f 	dsb	sy
}
    c910:	bf00      	nop
    c912:	bd08      	pop	{r3, pc}

0000c914 <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    c914:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    c916:	2000      	movs	r0, #0
    c918:	f7fd fac2 	bl	9ea0 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    c91c:	f3bf 8f4f 	dsb	sy
}
    c920:	bf00      	nop
    c922:	bd08      	pop	{r3, pc}

0000c924 <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    c924:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    c926:	220f      	movs	r2, #15
    c928:	2100      	movs	r1, #0
    c92a:	2000      	movs	r0, #0
    c92c:	f7fd f9dc 	bl	9ce8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    c930:	f3bf 8f4f 	dsb	sy
}
    c934:	bf00      	nop
    c936:	bd08      	pop	{r3, pc}

0000c938 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    c938:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    c93a:	221f      	movs	r2, #31
    c93c:	2110      	movs	r1, #16
    c93e:	2000      	movs	r0, #0
    c940:	f7fd f9d2 	bl	9ce8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    c944:	f3bf 8f4f 	dsb	sy
}
    c948:	bf00      	nop
    c94a:	bd08      	pop	{r3, pc}

0000c94c <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    c94c:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    c94e:	2001      	movs	r0, #1
    c950:	f7fd fb06 	bl	9f60 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    c954:	f3bf 8f4f 	dsb	sy
}
    c958:	bf00      	nop
    c95a:	bd08      	pop	{r3, pc}

0000c95c <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    c95c:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    c95e:	2001      	movs	r0, #1
    c960:	f7fd fa9e 	bl	9ea0 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    c964:	f3bf 8f4f 	dsb	sy
}
    c968:	bf00      	nop
    c96a:	bd08      	pop	{r3, pc}

0000c96c <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    c96c:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    c96e:	220f      	movs	r2, #15
    c970:	2100      	movs	r1, #0
    c972:	2001      	movs	r0, #1
    c974:	f7fd f9b8 	bl	9ce8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    c978:	f3bf 8f4f 	dsb	sy
}
    c97c:	bf00      	nop
    c97e:	bd08      	pop	{r3, pc}

0000c980 <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    c980:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    c982:	221f      	movs	r2, #31
    c984:	2110      	movs	r1, #16
    c986:	2001      	movs	r0, #1
    c988:	f7fd f9ae 	bl	9ce8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    c98c:	f3bf 8f4f 	dsb	sy
}
    c990:	bf00      	nop
    c992:	bd08      	pop	{r3, pc}

0000c994 <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    c994:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    c996:	2002      	movs	r0, #2
    c998:	f7fd fae2 	bl	9f60 <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    c99c:	f3bf 8f4f 	dsb	sy
}
    c9a0:	bf00      	nop
    c9a2:	bd08      	pop	{r3, pc}

0000c9a4 <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    c9a4:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    c9a6:	2002      	movs	r0, #2
    c9a8:	f7fd fa7a 	bl	9ea0 <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    c9ac:	f3bf 8f4f 	dsb	sy
}
    c9b0:	bf00      	nop
    c9b2:	bd08      	pop	{r3, pc}

0000c9b4 <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    c9b4:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    c9b6:	220f      	movs	r2, #15
    c9b8:	2100      	movs	r1, #0
    c9ba:	2002      	movs	r0, #2
    c9bc:	f7fd f994 	bl	9ce8 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    c9c0:	f3bf 8f4f 	dsb	sy
}
    c9c4:	bf00      	nop
    c9c6:	bd08      	pop	{r3, pc}

0000c9c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    c9c8:	b500      	push	{lr}
    c9ca:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    c9cc:	f7f4 f944 	bl	c58 <Sys_GetCoreID>
    c9d0:	4603      	mov	r3, r0
    c9d2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
    c9d4:	4a10      	ldr	r2, [pc, #64]	; (ca18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    c9d6:	9b01      	ldr	r3, [sp, #4]
    c9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c9dc:	2b00      	cmp	r3, #0
    c9de:	d10d      	bne.n	c9fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    c9e0:	f7f4 f858 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    c9e4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    c9e6:	9b00      	ldr	r3, [sp, #0]
    c9e8:	f003 0301 	and.w	r3, r3, #1
    c9ec:	2b00      	cmp	r3, #0
    c9ee:	d100      	bne.n	c9f2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    c9f0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    c9f2:	490a      	ldr	r1, [pc, #40]	; (ca1c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
    c9f4:	9b01      	ldr	r3, [sp, #4]
    c9f6:	9a00      	ldr	r2, [sp, #0]
    c9f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
    c9fc:	4a06      	ldr	r2, [pc, #24]	; (ca18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    c9fe:	9b01      	ldr	r3, [sp, #4]
    ca00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca04:	1c5a      	adds	r2, r3, #1
    ca06:	4904      	ldr	r1, [pc, #16]	; (ca18 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    ca08:	9b01      	ldr	r3, [sp, #4]
    ca0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ca0e:	bf00      	nop
    ca10:	b003      	add	sp, #12
    ca12:	f85d fb04 	ldr.w	pc, [sp], #4
    ca16:	bf00      	nop
    ca18:	1fff8fbc 	.word	0x1fff8fbc
    ca1c:	1fff8fb8 	.word	0x1fff8fb8

0000ca20 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    ca20:	b500      	push	{lr}
    ca22:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca24:	f7f4 f918 	bl	c58 <Sys_GetCoreID>
    ca28:	4603      	mov	r3, r0
    ca2a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
    ca2c:	4a0d      	ldr	r2, [pc, #52]	; (ca64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    ca2e:	9b01      	ldr	r3, [sp, #4]
    ca30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca34:	1e5a      	subs	r2, r3, #1
    ca36:	490b      	ldr	r1, [pc, #44]	; (ca64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    ca38:	9b01      	ldr	r3, [sp, #4]
    ca3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    ca3e:	4a0a      	ldr	r2, [pc, #40]	; (ca68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
    ca40:	9b01      	ldr	r3, [sp, #4]
    ca42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca46:	f003 0301 	and.w	r3, r3, #1
    ca4a:	2b00      	cmp	r3, #0
    ca4c:	d106      	bne.n	ca5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    ca4e:	4a05      	ldr	r2, [pc, #20]	; (ca64 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    ca50:	9b01      	ldr	r3, [sp, #4]
    ca52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca56:	2b00      	cmp	r3, #0
    ca58:	d100      	bne.n	ca5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ca5a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ca5c:	bf00      	nop
    ca5e:	b003      	add	sp, #12
    ca60:	f85d fb04 	ldr.w	pc, [sp], #4
    ca64:	1fff8fbc 	.word	0x1fff8fbc
    ca68:	1fff8fb8 	.word	0x1fff8fb8

0000ca6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    ca6c:	b500      	push	{lr}
    ca6e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ca70:	f7f4 f8f2 	bl	c58 <Sys_GetCoreID>
    ca74:	4603      	mov	r3, r0
    ca76:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
    ca78:	4a10      	ldr	r2, [pc, #64]	; (cabc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    ca7a:	9b01      	ldr	r3, [sp, #4]
    ca7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ca80:	2b00      	cmp	r3, #0
    ca82:	d10d      	bne.n	caa0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ca84:	f7f4 f806 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    ca88:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ca8a:	9b00      	ldr	r3, [sp, #0]
    ca8c:	f003 0301 	and.w	r3, r3, #1
    ca90:	2b00      	cmp	r3, #0
    ca92:	d100      	bne.n	ca96 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ca94:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    ca96:	490a      	ldr	r1, [pc, #40]	; (cac0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
    ca98:	9b01      	ldr	r3, [sp, #4]
    ca9a:	9a00      	ldr	r2, [sp, #0]
    ca9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
    caa0:	4a06      	ldr	r2, [pc, #24]	; (cabc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    caa2:	9b01      	ldr	r3, [sp, #4]
    caa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caa8:	1c5a      	adds	r2, r3, #1
    caaa:	4904      	ldr	r1, [pc, #16]	; (cabc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    caac:	9b01      	ldr	r3, [sp, #4]
    caae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cab2:	bf00      	nop
    cab4:	b003      	add	sp, #12
    cab6:	f85d fb04 	ldr.w	pc, [sp], #4
    caba:	bf00      	nop
    cabc:	1fff8fc4 	.word	0x1fff8fc4
    cac0:	1fff8fc0 	.word	0x1fff8fc0

0000cac4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    cac4:	b500      	push	{lr}
    cac6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cac8:	f7f4 f8c6 	bl	c58 <Sys_GetCoreID>
    cacc:	4603      	mov	r3, r0
    cace:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
    cad0:	4a0d      	ldr	r2, [pc, #52]	; (cb08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    cad2:	9b01      	ldr	r3, [sp, #4]
    cad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cad8:	1e5a      	subs	r2, r3, #1
    cada:	490b      	ldr	r1, [pc, #44]	; (cb08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    cadc:	9b01      	ldr	r3, [sp, #4]
    cade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    cae2:	4a0a      	ldr	r2, [pc, #40]	; (cb0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
    cae4:	9b01      	ldr	r3, [sp, #4]
    cae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    caea:	f003 0301 	and.w	r3, r3, #1
    caee:	2b00      	cmp	r3, #0
    caf0:	d106      	bne.n	cb00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    caf2:	4a05      	ldr	r2, [pc, #20]	; (cb08 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    caf4:	9b01      	ldr	r3, [sp, #4]
    caf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cafa:	2b00      	cmp	r3, #0
    cafc:	d100      	bne.n	cb00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cafe:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cb00:	bf00      	nop
    cb02:	b003      	add	sp, #12
    cb04:	f85d fb04 	ldr.w	pc, [sp], #4
    cb08:	1fff8fc4 	.word	0x1fff8fc4
    cb0c:	1fff8fc0 	.word	0x1fff8fc0

0000cb10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    cb10:	b500      	push	{lr}
    cb12:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb14:	f7f4 f8a0 	bl	c58 <Sys_GetCoreID>
    cb18:	4603      	mov	r3, r0
    cb1a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
    cb1c:	4a10      	ldr	r2, [pc, #64]	; (cb60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    cb1e:	9b01      	ldr	r3, [sp, #4]
    cb20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb24:	2b00      	cmp	r3, #0
    cb26:	d10d      	bne.n	cb44 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cb28:	f7f3 ffb4 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    cb2c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cb2e:	9b00      	ldr	r3, [sp, #0]
    cb30:	f003 0301 	and.w	r3, r3, #1
    cb34:	2b00      	cmp	r3, #0
    cb36:	d100      	bne.n	cb3a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cb38:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    cb3a:	490a      	ldr	r1, [pc, #40]	; (cb64 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
    cb3c:	9b01      	ldr	r3, [sp, #4]
    cb3e:	9a00      	ldr	r2, [sp, #0]
    cb40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
    cb44:	4a06      	ldr	r2, [pc, #24]	; (cb60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    cb46:	9b01      	ldr	r3, [sp, #4]
    cb48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb4c:	1c5a      	adds	r2, r3, #1
    cb4e:	4904      	ldr	r1, [pc, #16]	; (cb60 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    cb50:	9b01      	ldr	r3, [sp, #4]
    cb52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cb56:	bf00      	nop
    cb58:	b003      	add	sp, #12
    cb5a:	f85d fb04 	ldr.w	pc, [sp], #4
    cb5e:	bf00      	nop
    cb60:	1fff8fcc 	.word	0x1fff8fcc
    cb64:	1fff8fc8 	.word	0x1fff8fc8

0000cb68 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    cb68:	b500      	push	{lr}
    cb6a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cb6c:	f7f4 f874 	bl	c58 <Sys_GetCoreID>
    cb70:	4603      	mov	r3, r0
    cb72:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
    cb74:	4a0d      	ldr	r2, [pc, #52]	; (cbac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    cb76:	9b01      	ldr	r3, [sp, #4]
    cb78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb7c:	1e5a      	subs	r2, r3, #1
    cb7e:	490b      	ldr	r1, [pc, #44]	; (cbac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    cb80:	9b01      	ldr	r3, [sp, #4]
    cb82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    cb86:	4a0a      	ldr	r2, [pc, #40]	; (cbb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
    cb88:	9b01      	ldr	r3, [sp, #4]
    cb8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb8e:	f003 0301 	and.w	r3, r3, #1
    cb92:	2b00      	cmp	r3, #0
    cb94:	d106      	bne.n	cba4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    cb96:	4a05      	ldr	r2, [pc, #20]	; (cbac <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    cb98:	9b01      	ldr	r3, [sp, #4]
    cb9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cb9e:	2b00      	cmp	r3, #0
    cba0:	d100      	bne.n	cba4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cba2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cba4:	bf00      	nop
    cba6:	b003      	add	sp, #12
    cba8:	f85d fb04 	ldr.w	pc, [sp], #4
    cbac:	1fff8fcc 	.word	0x1fff8fcc
    cbb0:	1fff8fc8 	.word	0x1fff8fc8

0000cbb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    cbb4:	b500      	push	{lr}
    cbb6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cbb8:	f7f4 f84e 	bl	c58 <Sys_GetCoreID>
    cbbc:	4603      	mov	r3, r0
    cbbe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
    cbc0:	4a10      	ldr	r2, [pc, #64]	; (cc04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    cbc2:	9b01      	ldr	r3, [sp, #4]
    cbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbc8:	2b00      	cmp	r3, #0
    cbca:	d10d      	bne.n	cbe8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cbcc:	f7f3 ff62 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    cbd0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cbd2:	9b00      	ldr	r3, [sp, #0]
    cbd4:	f003 0301 	and.w	r3, r3, #1
    cbd8:	2b00      	cmp	r3, #0
    cbda:	d100      	bne.n	cbde <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cbdc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    cbde:	490a      	ldr	r1, [pc, #40]	; (cc08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
    cbe0:	9b01      	ldr	r3, [sp, #4]
    cbe2:	9a00      	ldr	r2, [sp, #0]
    cbe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
    cbe8:	4a06      	ldr	r2, [pc, #24]	; (cc04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    cbea:	9b01      	ldr	r3, [sp, #4]
    cbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cbf0:	1c5a      	adds	r2, r3, #1
    cbf2:	4904      	ldr	r1, [pc, #16]	; (cc04 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    cbf4:	9b01      	ldr	r3, [sp, #4]
    cbf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cbfa:	bf00      	nop
    cbfc:	b003      	add	sp, #12
    cbfe:	f85d fb04 	ldr.w	pc, [sp], #4
    cc02:	bf00      	nop
    cc04:	1fff8fd4 	.word	0x1fff8fd4
    cc08:	1fff8fd0 	.word	0x1fff8fd0

0000cc0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    cc0c:	b500      	push	{lr}
    cc0e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc10:	f7f4 f822 	bl	c58 <Sys_GetCoreID>
    cc14:	4603      	mov	r3, r0
    cc16:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
    cc18:	4a0d      	ldr	r2, [pc, #52]	; (cc50 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    cc1a:	9b01      	ldr	r3, [sp, #4]
    cc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc20:	1e5a      	subs	r2, r3, #1
    cc22:	490b      	ldr	r1, [pc, #44]	; (cc50 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    cc24:	9b01      	ldr	r3, [sp, #4]
    cc26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    cc2a:	4a0a      	ldr	r2, [pc, #40]	; (cc54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
    cc2c:	9b01      	ldr	r3, [sp, #4]
    cc2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc32:	f003 0301 	and.w	r3, r3, #1
    cc36:	2b00      	cmp	r3, #0
    cc38:	d106      	bne.n	cc48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    cc3a:	4a05      	ldr	r2, [pc, #20]	; (cc50 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    cc3c:	9b01      	ldr	r3, [sp, #4]
    cc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc42:	2b00      	cmp	r3, #0
    cc44:	d100      	bne.n	cc48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cc46:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cc48:	bf00      	nop
    cc4a:	b003      	add	sp, #12
    cc4c:	f85d fb04 	ldr.w	pc, [sp], #4
    cc50:	1fff8fd4 	.word	0x1fff8fd4
    cc54:	1fff8fd0 	.word	0x1fff8fd0

0000cc58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    cc58:	b500      	push	{lr}
    cc5a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cc5c:	f7f3 fffc 	bl	c58 <Sys_GetCoreID>
    cc60:	4603      	mov	r3, r0
    cc62:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
    cc64:	4a10      	ldr	r2, [pc, #64]	; (cca8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    cc66:	9b01      	ldr	r3, [sp, #4]
    cc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc6c:	2b00      	cmp	r3, #0
    cc6e:	d10d      	bne.n	cc8c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cc70:	f7f3 ff10 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    cc74:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cc76:	9b00      	ldr	r3, [sp, #0]
    cc78:	f003 0301 	and.w	r3, r3, #1
    cc7c:	2b00      	cmp	r3, #0
    cc7e:	d100      	bne.n	cc82 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cc80:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    cc82:	490a      	ldr	r1, [pc, #40]	; (ccac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
    cc84:	9b01      	ldr	r3, [sp, #4]
    cc86:	9a00      	ldr	r2, [sp, #0]
    cc88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
    cc8c:	4a06      	ldr	r2, [pc, #24]	; (cca8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    cc8e:	9b01      	ldr	r3, [sp, #4]
    cc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cc94:	1c5a      	adds	r2, r3, #1
    cc96:	4904      	ldr	r1, [pc, #16]	; (cca8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    cc98:	9b01      	ldr	r3, [sp, #4]
    cc9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cc9e:	bf00      	nop
    cca0:	b003      	add	sp, #12
    cca2:	f85d fb04 	ldr.w	pc, [sp], #4
    cca6:	bf00      	nop
    cca8:	1fff8fdc 	.word	0x1fff8fdc
    ccac:	1fff8fd8 	.word	0x1fff8fd8

0000ccb0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    ccb0:	b500      	push	{lr}
    ccb2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ccb4:	f7f3 ffd0 	bl	c58 <Sys_GetCoreID>
    ccb8:	4603      	mov	r3, r0
    ccba:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
    ccbc:	4a0d      	ldr	r2, [pc, #52]	; (ccf4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    ccbe:	9b01      	ldr	r3, [sp, #4]
    ccc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccc4:	1e5a      	subs	r2, r3, #1
    ccc6:	490b      	ldr	r1, [pc, #44]	; (ccf4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    ccc8:	9b01      	ldr	r3, [sp, #4]
    ccca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    ccce:	4a0a      	ldr	r2, [pc, #40]	; (ccf8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
    ccd0:	9b01      	ldr	r3, [sp, #4]
    ccd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ccd6:	f003 0301 	and.w	r3, r3, #1
    ccda:	2b00      	cmp	r3, #0
    ccdc:	d106      	bne.n	ccec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    ccde:	4a05      	ldr	r2, [pc, #20]	; (ccf4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    cce0:	9b01      	ldr	r3, [sp, #4]
    cce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cce6:	2b00      	cmp	r3, #0
    cce8:	d100      	bne.n	ccec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ccea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ccec:	bf00      	nop
    ccee:	b003      	add	sp, #12
    ccf0:	f85d fb04 	ldr.w	pc, [sp], #4
    ccf4:	1fff8fdc 	.word	0x1fff8fdc
    ccf8:	1fff8fd8 	.word	0x1fff8fd8

0000ccfc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    ccfc:	b500      	push	{lr}
    ccfe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd00:	f7f3 ffaa 	bl	c58 <Sys_GetCoreID>
    cd04:	4603      	mov	r3, r0
    cd06:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
    cd08:	4a10      	ldr	r2, [pc, #64]	; (cd4c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    cd0a:	9b01      	ldr	r3, [sp, #4]
    cd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd10:	2b00      	cmp	r3, #0
    cd12:	d10d      	bne.n	cd30 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cd14:	f7f3 febe 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    cd18:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cd1a:	9b00      	ldr	r3, [sp, #0]
    cd1c:	f003 0301 	and.w	r3, r3, #1
    cd20:	2b00      	cmp	r3, #0
    cd22:	d100      	bne.n	cd26 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cd24:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    cd26:	490a      	ldr	r1, [pc, #40]	; (cd50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
    cd28:	9b01      	ldr	r3, [sp, #4]
    cd2a:	9a00      	ldr	r2, [sp, #0]
    cd2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
    cd30:	4a06      	ldr	r2, [pc, #24]	; (cd4c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    cd32:	9b01      	ldr	r3, [sp, #4]
    cd34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd38:	1c5a      	adds	r2, r3, #1
    cd3a:	4904      	ldr	r1, [pc, #16]	; (cd4c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    cd3c:	9b01      	ldr	r3, [sp, #4]
    cd3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cd42:	bf00      	nop
    cd44:	b003      	add	sp, #12
    cd46:	f85d fb04 	ldr.w	pc, [sp], #4
    cd4a:	bf00      	nop
    cd4c:	1fff8fe4 	.word	0x1fff8fe4
    cd50:	1fff8fe0 	.word	0x1fff8fe0

0000cd54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    cd54:	b500      	push	{lr}
    cd56:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cd58:	f7f3 ff7e 	bl	c58 <Sys_GetCoreID>
    cd5c:	4603      	mov	r3, r0
    cd5e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
    cd60:	4a0d      	ldr	r2, [pc, #52]	; (cd98 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    cd62:	9b01      	ldr	r3, [sp, #4]
    cd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd68:	1e5a      	subs	r2, r3, #1
    cd6a:	490b      	ldr	r1, [pc, #44]	; (cd98 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    cd6c:	9b01      	ldr	r3, [sp, #4]
    cd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    cd72:	4a0a      	ldr	r2, [pc, #40]	; (cd9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
    cd74:	9b01      	ldr	r3, [sp, #4]
    cd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd7a:	f003 0301 	and.w	r3, r3, #1
    cd7e:	2b00      	cmp	r3, #0
    cd80:	d106      	bne.n	cd90 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    cd82:	4a05      	ldr	r2, [pc, #20]	; (cd98 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    cd84:	9b01      	ldr	r3, [sp, #4]
    cd86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cd8a:	2b00      	cmp	r3, #0
    cd8c:	d100      	bne.n	cd90 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cd8e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cd90:	bf00      	nop
    cd92:	b003      	add	sp, #12
    cd94:	f85d fb04 	ldr.w	pc, [sp], #4
    cd98:	1fff8fe4 	.word	0x1fff8fe4
    cd9c:	1fff8fe0 	.word	0x1fff8fe0

0000cda0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    cda0:	b500      	push	{lr}
    cda2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cda4:	f7f3 ff58 	bl	c58 <Sys_GetCoreID>
    cda8:	4603      	mov	r3, r0
    cdaa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
    cdac:	4a10      	ldr	r2, [pc, #64]	; (cdf0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    cdae:	9b01      	ldr	r3, [sp, #4]
    cdb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cdb4:	2b00      	cmp	r3, #0
    cdb6:	d10d      	bne.n	cdd4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cdb8:	f7f3 fe6c 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    cdbc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cdbe:	9b00      	ldr	r3, [sp, #0]
    cdc0:	f003 0301 	and.w	r3, r3, #1
    cdc4:	2b00      	cmp	r3, #0
    cdc6:	d100      	bne.n	cdca <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cdc8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    cdca:	490a      	ldr	r1, [pc, #40]	; (cdf4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
    cdcc:	9b01      	ldr	r3, [sp, #4]
    cdce:	9a00      	ldr	r2, [sp, #0]
    cdd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
    cdd4:	4a06      	ldr	r2, [pc, #24]	; (cdf0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    cdd6:	9b01      	ldr	r3, [sp, #4]
    cdd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cddc:	1c5a      	adds	r2, r3, #1
    cdde:	4904      	ldr	r1, [pc, #16]	; (cdf0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    cde0:	9b01      	ldr	r3, [sp, #4]
    cde2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cde6:	bf00      	nop
    cde8:	b003      	add	sp, #12
    cdea:	f85d fb04 	ldr.w	pc, [sp], #4
    cdee:	bf00      	nop
    cdf0:	1fff8fec 	.word	0x1fff8fec
    cdf4:	1fff8fe8 	.word	0x1fff8fe8

0000cdf8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    cdf8:	b500      	push	{lr}
    cdfa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cdfc:	f7f3 ff2c 	bl	c58 <Sys_GetCoreID>
    ce00:	4603      	mov	r3, r0
    ce02:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
    ce04:	4a0d      	ldr	r2, [pc, #52]	; (ce3c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    ce06:	9b01      	ldr	r3, [sp, #4]
    ce08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce0c:	1e5a      	subs	r2, r3, #1
    ce0e:	490b      	ldr	r1, [pc, #44]	; (ce3c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    ce10:	9b01      	ldr	r3, [sp, #4]
    ce12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    ce16:	4a0a      	ldr	r2, [pc, #40]	; (ce40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
    ce18:	9b01      	ldr	r3, [sp, #4]
    ce1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce1e:	f003 0301 	and.w	r3, r3, #1
    ce22:	2b00      	cmp	r3, #0
    ce24:	d106      	bne.n	ce34 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    ce26:	4a05      	ldr	r2, [pc, #20]	; (ce3c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    ce28:	9b01      	ldr	r3, [sp, #4]
    ce2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce2e:	2b00      	cmp	r3, #0
    ce30:	d100      	bne.n	ce34 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ce32:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ce34:	bf00      	nop
    ce36:	b003      	add	sp, #12
    ce38:	f85d fb04 	ldr.w	pc, [sp], #4
    ce3c:	1fff8fec 	.word	0x1fff8fec
    ce40:	1fff8fe8 	.word	0x1fff8fe8

0000ce44 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    ce44:	b500      	push	{lr}
    ce46:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ce48:	f7f3 ff06 	bl	c58 <Sys_GetCoreID>
    ce4c:	4603      	mov	r3, r0
    ce4e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
    ce50:	4a10      	ldr	r2, [pc, #64]	; (ce94 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    ce52:	9b01      	ldr	r3, [sp, #4]
    ce54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce58:	2b00      	cmp	r3, #0
    ce5a:	d10d      	bne.n	ce78 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ce5c:	f7f3 fe1a 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    ce60:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ce62:	9b00      	ldr	r3, [sp, #0]
    ce64:	f003 0301 	and.w	r3, r3, #1
    ce68:	2b00      	cmp	r3, #0
    ce6a:	d100      	bne.n	ce6e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ce6c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    ce6e:	490a      	ldr	r1, [pc, #40]	; (ce98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
    ce70:	9b01      	ldr	r3, [sp, #4]
    ce72:	9a00      	ldr	r2, [sp, #0]
    ce74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
    ce78:	4a06      	ldr	r2, [pc, #24]	; (ce94 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    ce7a:	9b01      	ldr	r3, [sp, #4]
    ce7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ce80:	1c5a      	adds	r2, r3, #1
    ce82:	4904      	ldr	r1, [pc, #16]	; (ce94 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    ce84:	9b01      	ldr	r3, [sp, #4]
    ce86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ce8a:	bf00      	nop
    ce8c:	b003      	add	sp, #12
    ce8e:	f85d fb04 	ldr.w	pc, [sp], #4
    ce92:	bf00      	nop
    ce94:	1fff8ff4 	.word	0x1fff8ff4
    ce98:	1fff8ff0 	.word	0x1fff8ff0

0000ce9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    ce9c:	b500      	push	{lr}
    ce9e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cea0:	f7f3 feda 	bl	c58 <Sys_GetCoreID>
    cea4:	4603      	mov	r3, r0
    cea6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
    cea8:	4a0d      	ldr	r2, [pc, #52]	; (cee0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    ceaa:	9b01      	ldr	r3, [sp, #4]
    ceac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ceb0:	1e5a      	subs	r2, r3, #1
    ceb2:	490b      	ldr	r1, [pc, #44]	; (cee0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    ceb4:	9b01      	ldr	r3, [sp, #4]
    ceb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    ceba:	4a0a      	ldr	r2, [pc, #40]	; (cee4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
    cebc:	9b01      	ldr	r3, [sp, #4]
    cebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cec2:	f003 0301 	and.w	r3, r3, #1
    cec6:	2b00      	cmp	r3, #0
    cec8:	d106      	bne.n	ced8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    ceca:	4a05      	ldr	r2, [pc, #20]	; (cee0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    cecc:	9b01      	ldr	r3, [sp, #4]
    cece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ced2:	2b00      	cmp	r3, #0
    ced4:	d100      	bne.n	ced8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ced6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ced8:	bf00      	nop
    ceda:	b003      	add	sp, #12
    cedc:	f85d fb04 	ldr.w	pc, [sp], #4
    cee0:	1fff8ff4 	.word	0x1fff8ff4
    cee4:	1fff8ff0 	.word	0x1fff8ff0

0000cee8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    cee8:	b500      	push	{lr}
    ceea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ceec:	f7f3 feb4 	bl	c58 <Sys_GetCoreID>
    cef0:	4603      	mov	r3, r0
    cef2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
    cef4:	4a10      	ldr	r2, [pc, #64]	; (cf38 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    cef6:	9b01      	ldr	r3, [sp, #4]
    cef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cefc:	2b00      	cmp	r3, #0
    cefe:	d10d      	bne.n	cf1c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cf00:	f7f3 fdc8 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    cf04:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cf06:	9b00      	ldr	r3, [sp, #0]
    cf08:	f003 0301 	and.w	r3, r3, #1
    cf0c:	2b00      	cmp	r3, #0
    cf0e:	d100      	bne.n	cf12 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cf10:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    cf12:	490a      	ldr	r1, [pc, #40]	; (cf3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
    cf14:	9b01      	ldr	r3, [sp, #4]
    cf16:	9a00      	ldr	r2, [sp, #0]
    cf18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
    cf1c:	4a06      	ldr	r2, [pc, #24]	; (cf38 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    cf1e:	9b01      	ldr	r3, [sp, #4]
    cf20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf24:	1c5a      	adds	r2, r3, #1
    cf26:	4904      	ldr	r1, [pc, #16]	; (cf38 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    cf28:	9b01      	ldr	r3, [sp, #4]
    cf2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cf2e:	bf00      	nop
    cf30:	b003      	add	sp, #12
    cf32:	f85d fb04 	ldr.w	pc, [sp], #4
    cf36:	bf00      	nop
    cf38:	1fff8ffc 	.word	0x1fff8ffc
    cf3c:	1fff8ff8 	.word	0x1fff8ff8

0000cf40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    cf40:	b500      	push	{lr}
    cf42:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf44:	f7f3 fe88 	bl	c58 <Sys_GetCoreID>
    cf48:	4603      	mov	r3, r0
    cf4a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
    cf4c:	4a0d      	ldr	r2, [pc, #52]	; (cf84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    cf4e:	9b01      	ldr	r3, [sp, #4]
    cf50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf54:	1e5a      	subs	r2, r3, #1
    cf56:	490b      	ldr	r1, [pc, #44]	; (cf84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    cf58:	9b01      	ldr	r3, [sp, #4]
    cf5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    cf5e:	4a0a      	ldr	r2, [pc, #40]	; (cf88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
    cf60:	9b01      	ldr	r3, [sp, #4]
    cf62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf66:	f003 0301 	and.w	r3, r3, #1
    cf6a:	2b00      	cmp	r3, #0
    cf6c:	d106      	bne.n	cf7c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    cf6e:	4a05      	ldr	r2, [pc, #20]	; (cf84 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    cf70:	9b01      	ldr	r3, [sp, #4]
    cf72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cf76:	2b00      	cmp	r3, #0
    cf78:	d100      	bne.n	cf7c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    cf7a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    cf7c:	bf00      	nop
    cf7e:	b003      	add	sp, #12
    cf80:	f85d fb04 	ldr.w	pc, [sp], #4
    cf84:	1fff8ffc 	.word	0x1fff8ffc
    cf88:	1fff8ff8 	.word	0x1fff8ff8

0000cf8c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    cf8c:	b500      	push	{lr}
    cf8e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cf90:	f7f3 fe62 	bl	c58 <Sys_GetCoreID>
    cf94:	4603      	mov	r3, r0
    cf96:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
    cf98:	4a10      	ldr	r2, [pc, #64]	; (cfdc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    cf9a:	9b01      	ldr	r3, [sp, #4]
    cf9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfa0:	2b00      	cmp	r3, #0
    cfa2:	d10d      	bne.n	cfc0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    cfa4:	f7f3 fd76 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    cfa8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    cfaa:	9b00      	ldr	r3, [sp, #0]
    cfac:	f003 0301 	and.w	r3, r3, #1
    cfb0:	2b00      	cmp	r3, #0
    cfb2:	d100      	bne.n	cfb6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    cfb4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    cfb6:	490a      	ldr	r1, [pc, #40]	; (cfe0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
    cfb8:	9b01      	ldr	r3, [sp, #4]
    cfba:	9a00      	ldr	r2, [sp, #0]
    cfbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
    cfc0:	4a06      	ldr	r2, [pc, #24]	; (cfdc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    cfc2:	9b01      	ldr	r3, [sp, #4]
    cfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cfc8:	1c5a      	adds	r2, r3, #1
    cfca:	4904      	ldr	r1, [pc, #16]	; (cfdc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    cfcc:	9b01      	ldr	r3, [sp, #4]
    cfce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    cfd2:	bf00      	nop
    cfd4:	b003      	add	sp, #12
    cfd6:	f85d fb04 	ldr.w	pc, [sp], #4
    cfda:	bf00      	nop
    cfdc:	1fff9004 	.word	0x1fff9004
    cfe0:	1fff9000 	.word	0x1fff9000

0000cfe4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    cfe4:	b500      	push	{lr}
    cfe6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    cfe8:	f7f3 fe36 	bl	c58 <Sys_GetCoreID>
    cfec:	4603      	mov	r3, r0
    cfee:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
    cff0:	4a0d      	ldr	r2, [pc, #52]	; (d028 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    cff2:	9b01      	ldr	r3, [sp, #4]
    cff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    cff8:	1e5a      	subs	r2, r3, #1
    cffa:	490b      	ldr	r1, [pc, #44]	; (d028 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    cffc:	9b01      	ldr	r3, [sp, #4]
    cffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    d002:	4a0a      	ldr	r2, [pc, #40]	; (d02c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
    d004:	9b01      	ldr	r3, [sp, #4]
    d006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d00a:	f003 0301 	and.w	r3, r3, #1
    d00e:	2b00      	cmp	r3, #0
    d010:	d106      	bne.n	d020 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    d012:	4a05      	ldr	r2, [pc, #20]	; (d028 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d014:	9b01      	ldr	r3, [sp, #4]
    d016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d01a:	2b00      	cmp	r3, #0
    d01c:	d100      	bne.n	d020 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d01e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d020:	bf00      	nop
    d022:	b003      	add	sp, #12
    d024:	f85d fb04 	ldr.w	pc, [sp], #4
    d028:	1fff9004 	.word	0x1fff9004
    d02c:	1fff9000 	.word	0x1fff9000

0000d030 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    d030:	b500      	push	{lr}
    d032:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d034:	f7f3 fe10 	bl	c58 <Sys_GetCoreID>
    d038:	4603      	mov	r3, r0
    d03a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
    d03c:	4a10      	ldr	r2, [pc, #64]	; (d080 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    d03e:	9b01      	ldr	r3, [sp, #4]
    d040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d044:	2b00      	cmp	r3, #0
    d046:	d10d      	bne.n	d064 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d048:	f7f3 fd24 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    d04c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d04e:	9b00      	ldr	r3, [sp, #0]
    d050:	f003 0301 	and.w	r3, r3, #1
    d054:	2b00      	cmp	r3, #0
    d056:	d100      	bne.n	d05a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d058:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    d05a:	490a      	ldr	r1, [pc, #40]	; (d084 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
    d05c:	9b01      	ldr	r3, [sp, #4]
    d05e:	9a00      	ldr	r2, [sp, #0]
    d060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
    d064:	4a06      	ldr	r2, [pc, #24]	; (d080 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    d066:	9b01      	ldr	r3, [sp, #4]
    d068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d06c:	1c5a      	adds	r2, r3, #1
    d06e:	4904      	ldr	r1, [pc, #16]	; (d080 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    d070:	9b01      	ldr	r3, [sp, #4]
    d072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d076:	bf00      	nop
    d078:	b003      	add	sp, #12
    d07a:	f85d fb04 	ldr.w	pc, [sp], #4
    d07e:	bf00      	nop
    d080:	1fff900c 	.word	0x1fff900c
    d084:	1fff9008 	.word	0x1fff9008

0000d088 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    d088:	b500      	push	{lr}
    d08a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d08c:	f7f3 fde4 	bl	c58 <Sys_GetCoreID>
    d090:	4603      	mov	r3, r0
    d092:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
    d094:	4a0d      	ldr	r2, [pc, #52]	; (d0cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    d096:	9b01      	ldr	r3, [sp, #4]
    d098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d09c:	1e5a      	subs	r2, r3, #1
    d09e:	490b      	ldr	r1, [pc, #44]	; (d0cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    d0a0:	9b01      	ldr	r3, [sp, #4]
    d0a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    d0a6:	4a0a      	ldr	r2, [pc, #40]	; (d0d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
    d0a8:	9b01      	ldr	r3, [sp, #4]
    d0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0ae:	f003 0301 	and.w	r3, r3, #1
    d0b2:	2b00      	cmp	r3, #0
    d0b4:	d106      	bne.n	d0c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    d0b6:	4a05      	ldr	r2, [pc, #20]	; (d0cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    d0b8:	9b01      	ldr	r3, [sp, #4]
    d0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0be:	2b00      	cmp	r3, #0
    d0c0:	d100      	bne.n	d0c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d0c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d0c4:	bf00      	nop
    d0c6:	b003      	add	sp, #12
    d0c8:	f85d fb04 	ldr.w	pc, [sp], #4
    d0cc:	1fff900c 	.word	0x1fff900c
    d0d0:	1fff9008 	.word	0x1fff9008

0000d0d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    d0d4:	b500      	push	{lr}
    d0d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d0d8:	f7f3 fdbe 	bl	c58 <Sys_GetCoreID>
    d0dc:	4603      	mov	r3, r0
    d0de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
    d0e0:	4a10      	ldr	r2, [pc, #64]	; (d124 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    d0e2:	9b01      	ldr	r3, [sp, #4]
    d0e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d0e8:	2b00      	cmp	r3, #0
    d0ea:	d10d      	bne.n	d108 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d0ec:	f7f3 fcd2 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    d0f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d0f2:	9b00      	ldr	r3, [sp, #0]
    d0f4:	f003 0301 	and.w	r3, r3, #1
    d0f8:	2b00      	cmp	r3, #0
    d0fa:	d100      	bne.n	d0fe <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d0fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    d0fe:	490a      	ldr	r1, [pc, #40]	; (d128 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
    d100:	9b01      	ldr	r3, [sp, #4]
    d102:	9a00      	ldr	r2, [sp, #0]
    d104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
    d108:	4a06      	ldr	r2, [pc, #24]	; (d124 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    d10a:	9b01      	ldr	r3, [sp, #4]
    d10c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d110:	1c5a      	adds	r2, r3, #1
    d112:	4904      	ldr	r1, [pc, #16]	; (d124 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    d114:	9b01      	ldr	r3, [sp, #4]
    d116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d11a:	bf00      	nop
    d11c:	b003      	add	sp, #12
    d11e:	f85d fb04 	ldr.w	pc, [sp], #4
    d122:	bf00      	nop
    d124:	1fff9014 	.word	0x1fff9014
    d128:	1fff9010 	.word	0x1fff9010

0000d12c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    d12c:	b500      	push	{lr}
    d12e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d130:	f7f3 fd92 	bl	c58 <Sys_GetCoreID>
    d134:	4603      	mov	r3, r0
    d136:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
    d138:	4a0d      	ldr	r2, [pc, #52]	; (d170 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    d13a:	9b01      	ldr	r3, [sp, #4]
    d13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d140:	1e5a      	subs	r2, r3, #1
    d142:	490b      	ldr	r1, [pc, #44]	; (d170 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    d144:	9b01      	ldr	r3, [sp, #4]
    d146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    d14a:	4a0a      	ldr	r2, [pc, #40]	; (d174 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
    d14c:	9b01      	ldr	r3, [sp, #4]
    d14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d152:	f003 0301 	and.w	r3, r3, #1
    d156:	2b00      	cmp	r3, #0
    d158:	d106      	bne.n	d168 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    d15a:	4a05      	ldr	r2, [pc, #20]	; (d170 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    d15c:	9b01      	ldr	r3, [sp, #4]
    d15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d162:	2b00      	cmp	r3, #0
    d164:	d100      	bne.n	d168 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d166:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d168:	bf00      	nop
    d16a:	b003      	add	sp, #12
    d16c:	f85d fb04 	ldr.w	pc, [sp], #4
    d170:	1fff9014 	.word	0x1fff9014
    d174:	1fff9010 	.word	0x1fff9010

0000d178 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    d178:	b500      	push	{lr}
    d17a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d17c:	f7f3 fd6c 	bl	c58 <Sys_GetCoreID>
    d180:	4603      	mov	r3, r0
    d182:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
    d184:	4a10      	ldr	r2, [pc, #64]	; (d1c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    d186:	9b01      	ldr	r3, [sp, #4]
    d188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d18c:	2b00      	cmp	r3, #0
    d18e:	d10d      	bne.n	d1ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d190:	f7f3 fc80 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    d194:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d196:	9b00      	ldr	r3, [sp, #0]
    d198:	f003 0301 	and.w	r3, r3, #1
    d19c:	2b00      	cmp	r3, #0
    d19e:	d100      	bne.n	d1a2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d1a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    d1a2:	490a      	ldr	r1, [pc, #40]	; (d1cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
    d1a4:	9b01      	ldr	r3, [sp, #4]
    d1a6:	9a00      	ldr	r2, [sp, #0]
    d1a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
    d1ac:	4a06      	ldr	r2, [pc, #24]	; (d1c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    d1ae:	9b01      	ldr	r3, [sp, #4]
    d1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1b4:	1c5a      	adds	r2, r3, #1
    d1b6:	4904      	ldr	r1, [pc, #16]	; (d1c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    d1b8:	9b01      	ldr	r3, [sp, #4]
    d1ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d1be:	bf00      	nop
    d1c0:	b003      	add	sp, #12
    d1c2:	f85d fb04 	ldr.w	pc, [sp], #4
    d1c6:	bf00      	nop
    d1c8:	1fff901c 	.word	0x1fff901c
    d1cc:	1fff9018 	.word	0x1fff9018

0000d1d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    d1d0:	b500      	push	{lr}
    d1d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d1d4:	f7f3 fd40 	bl	c58 <Sys_GetCoreID>
    d1d8:	4603      	mov	r3, r0
    d1da:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
    d1dc:	4a0d      	ldr	r2, [pc, #52]	; (d214 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    d1de:	9b01      	ldr	r3, [sp, #4]
    d1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1e4:	1e5a      	subs	r2, r3, #1
    d1e6:	490b      	ldr	r1, [pc, #44]	; (d214 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    d1e8:	9b01      	ldr	r3, [sp, #4]
    d1ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    d1ee:	4a0a      	ldr	r2, [pc, #40]	; (d218 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
    d1f0:	9b01      	ldr	r3, [sp, #4]
    d1f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d1f6:	f003 0301 	and.w	r3, r3, #1
    d1fa:	2b00      	cmp	r3, #0
    d1fc:	d106      	bne.n	d20c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    d1fe:	4a05      	ldr	r2, [pc, #20]	; (d214 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    d200:	9b01      	ldr	r3, [sp, #4]
    d202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d206:	2b00      	cmp	r3, #0
    d208:	d100      	bne.n	d20c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d20a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d20c:	bf00      	nop
    d20e:	b003      	add	sp, #12
    d210:	f85d fb04 	ldr.w	pc, [sp], #4
    d214:	1fff901c 	.word	0x1fff901c
    d218:	1fff9018 	.word	0x1fff9018

0000d21c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    d21c:	b500      	push	{lr}
    d21e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d220:	f7f3 fd1a 	bl	c58 <Sys_GetCoreID>
    d224:	4603      	mov	r3, r0
    d226:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
    d228:	4a10      	ldr	r2, [pc, #64]	; (d26c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    d22a:	9b01      	ldr	r3, [sp, #4]
    d22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d230:	2b00      	cmp	r3, #0
    d232:	d10d      	bne.n	d250 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d234:	f7f3 fc2e 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    d238:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d23a:	9b00      	ldr	r3, [sp, #0]
    d23c:	f003 0301 	and.w	r3, r3, #1
    d240:	2b00      	cmp	r3, #0
    d242:	d100      	bne.n	d246 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d244:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    d246:	490a      	ldr	r1, [pc, #40]	; (d270 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
    d248:	9b01      	ldr	r3, [sp, #4]
    d24a:	9a00      	ldr	r2, [sp, #0]
    d24c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
    d250:	4a06      	ldr	r2, [pc, #24]	; (d26c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    d252:	9b01      	ldr	r3, [sp, #4]
    d254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d258:	1c5a      	adds	r2, r3, #1
    d25a:	4904      	ldr	r1, [pc, #16]	; (d26c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    d25c:	9b01      	ldr	r3, [sp, #4]
    d25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d262:	bf00      	nop
    d264:	b003      	add	sp, #12
    d266:	f85d fb04 	ldr.w	pc, [sp], #4
    d26a:	bf00      	nop
    d26c:	1fff9024 	.word	0x1fff9024
    d270:	1fff9020 	.word	0x1fff9020

0000d274 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    d274:	b500      	push	{lr}
    d276:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d278:	f7f3 fcee 	bl	c58 <Sys_GetCoreID>
    d27c:	4603      	mov	r3, r0
    d27e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
    d280:	4a0d      	ldr	r2, [pc, #52]	; (d2b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    d282:	9b01      	ldr	r3, [sp, #4]
    d284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d288:	1e5a      	subs	r2, r3, #1
    d28a:	490b      	ldr	r1, [pc, #44]	; (d2b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    d28c:	9b01      	ldr	r3, [sp, #4]
    d28e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    d292:	4a0a      	ldr	r2, [pc, #40]	; (d2bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
    d294:	9b01      	ldr	r3, [sp, #4]
    d296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d29a:	f003 0301 	and.w	r3, r3, #1
    d29e:	2b00      	cmp	r3, #0
    d2a0:	d106      	bne.n	d2b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    d2a2:	4a05      	ldr	r2, [pc, #20]	; (d2b8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    d2a4:	9b01      	ldr	r3, [sp, #4]
    d2a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2aa:	2b00      	cmp	r3, #0
    d2ac:	d100      	bne.n	d2b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d2ae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d2b0:	bf00      	nop
    d2b2:	b003      	add	sp, #12
    d2b4:	f85d fb04 	ldr.w	pc, [sp], #4
    d2b8:	1fff9024 	.word	0x1fff9024
    d2bc:	1fff9020 	.word	0x1fff9020

0000d2c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    d2c0:	b500      	push	{lr}
    d2c2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d2c4:	f7f3 fcc8 	bl	c58 <Sys_GetCoreID>
    d2c8:	4603      	mov	r3, r0
    d2ca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
    d2cc:	4a10      	ldr	r2, [pc, #64]	; (d310 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    d2ce:	9b01      	ldr	r3, [sp, #4]
    d2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2d4:	2b00      	cmp	r3, #0
    d2d6:	d10d      	bne.n	d2f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d2d8:	f7f3 fbdc 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    d2dc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d2de:	9b00      	ldr	r3, [sp, #0]
    d2e0:	f003 0301 	and.w	r3, r3, #1
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d100      	bne.n	d2ea <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d2e8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    d2ea:	490a      	ldr	r1, [pc, #40]	; (d314 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
    d2ec:	9b01      	ldr	r3, [sp, #4]
    d2ee:	9a00      	ldr	r2, [sp, #0]
    d2f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
    d2f4:	4a06      	ldr	r2, [pc, #24]	; (d310 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    d2f6:	9b01      	ldr	r3, [sp, #4]
    d2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d2fc:	1c5a      	adds	r2, r3, #1
    d2fe:	4904      	ldr	r1, [pc, #16]	; (d310 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    d300:	9b01      	ldr	r3, [sp, #4]
    d302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d306:	bf00      	nop
    d308:	b003      	add	sp, #12
    d30a:	f85d fb04 	ldr.w	pc, [sp], #4
    d30e:	bf00      	nop
    d310:	1fff902c 	.word	0x1fff902c
    d314:	1fff9028 	.word	0x1fff9028

0000d318 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    d318:	b500      	push	{lr}
    d31a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d31c:	f7f3 fc9c 	bl	c58 <Sys_GetCoreID>
    d320:	4603      	mov	r3, r0
    d322:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
    d324:	4a0d      	ldr	r2, [pc, #52]	; (d35c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    d326:	9b01      	ldr	r3, [sp, #4]
    d328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d32c:	1e5a      	subs	r2, r3, #1
    d32e:	490b      	ldr	r1, [pc, #44]	; (d35c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    d330:	9b01      	ldr	r3, [sp, #4]
    d332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    d336:	4a0a      	ldr	r2, [pc, #40]	; (d360 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
    d338:	9b01      	ldr	r3, [sp, #4]
    d33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d33e:	f003 0301 	and.w	r3, r3, #1
    d342:	2b00      	cmp	r3, #0
    d344:	d106      	bne.n	d354 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    d346:	4a05      	ldr	r2, [pc, #20]	; (d35c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    d348:	9b01      	ldr	r3, [sp, #4]
    d34a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d34e:	2b00      	cmp	r3, #0
    d350:	d100      	bne.n	d354 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d352:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d354:	bf00      	nop
    d356:	b003      	add	sp, #12
    d358:	f85d fb04 	ldr.w	pc, [sp], #4
    d35c:	1fff902c 	.word	0x1fff902c
    d360:	1fff9028 	.word	0x1fff9028

0000d364 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    d364:	b500      	push	{lr}
    d366:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d368:	f7f3 fc76 	bl	c58 <Sys_GetCoreID>
    d36c:	4603      	mov	r3, r0
    d36e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
    d370:	4a10      	ldr	r2, [pc, #64]	; (d3b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    d372:	9b01      	ldr	r3, [sp, #4]
    d374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d378:	2b00      	cmp	r3, #0
    d37a:	d10d      	bne.n	d398 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d37c:	f7f3 fb8a 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    d380:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d382:	9b00      	ldr	r3, [sp, #0]
    d384:	f003 0301 	and.w	r3, r3, #1
    d388:	2b00      	cmp	r3, #0
    d38a:	d100      	bne.n	d38e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d38c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    d38e:	490a      	ldr	r1, [pc, #40]	; (d3b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
    d390:	9b01      	ldr	r3, [sp, #4]
    d392:	9a00      	ldr	r2, [sp, #0]
    d394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
    d398:	4a06      	ldr	r2, [pc, #24]	; (d3b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    d39a:	9b01      	ldr	r3, [sp, #4]
    d39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3a0:	1c5a      	adds	r2, r3, #1
    d3a2:	4904      	ldr	r1, [pc, #16]	; (d3b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    d3a4:	9b01      	ldr	r3, [sp, #4]
    d3a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d3aa:	bf00      	nop
    d3ac:	b003      	add	sp, #12
    d3ae:	f85d fb04 	ldr.w	pc, [sp], #4
    d3b2:	bf00      	nop
    d3b4:	1fff9034 	.word	0x1fff9034
    d3b8:	1fff9030 	.word	0x1fff9030

0000d3bc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    d3bc:	b500      	push	{lr}
    d3be:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3c0:	f7f3 fc4a 	bl	c58 <Sys_GetCoreID>
    d3c4:	4603      	mov	r3, r0
    d3c6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
    d3c8:	4a0d      	ldr	r2, [pc, #52]	; (d400 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    d3ca:	9b01      	ldr	r3, [sp, #4]
    d3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3d0:	1e5a      	subs	r2, r3, #1
    d3d2:	490b      	ldr	r1, [pc, #44]	; (d400 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    d3d4:	9b01      	ldr	r3, [sp, #4]
    d3d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    d3da:	4a0a      	ldr	r2, [pc, #40]	; (d404 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
    d3dc:	9b01      	ldr	r3, [sp, #4]
    d3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3e2:	f003 0301 	and.w	r3, r3, #1
    d3e6:	2b00      	cmp	r3, #0
    d3e8:	d106      	bne.n	d3f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    d3ea:	4a05      	ldr	r2, [pc, #20]	; (d400 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    d3ec:	9b01      	ldr	r3, [sp, #4]
    d3ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3f2:	2b00      	cmp	r3, #0
    d3f4:	d100      	bne.n	d3f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d3f6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d3f8:	bf00      	nop
    d3fa:	b003      	add	sp, #12
    d3fc:	f85d fb04 	ldr.w	pc, [sp], #4
    d400:	1fff9034 	.word	0x1fff9034
    d404:	1fff9030 	.word	0x1fff9030

0000d408 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    d408:	b500      	push	{lr}
    d40a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d40c:	f7f3 fc24 	bl	c58 <Sys_GetCoreID>
    d410:	4603      	mov	r3, r0
    d412:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
    d414:	4a10      	ldr	r2, [pc, #64]	; (d458 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    d416:	9b01      	ldr	r3, [sp, #4]
    d418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d41c:	2b00      	cmp	r3, #0
    d41e:	d10d      	bne.n	d43c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d420:	f7f3 fb38 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    d424:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d426:	9b00      	ldr	r3, [sp, #0]
    d428:	f003 0301 	and.w	r3, r3, #1
    d42c:	2b00      	cmp	r3, #0
    d42e:	d100      	bne.n	d432 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d430:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    d432:	490a      	ldr	r1, [pc, #40]	; (d45c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
    d434:	9b01      	ldr	r3, [sp, #4]
    d436:	9a00      	ldr	r2, [sp, #0]
    d438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
    d43c:	4a06      	ldr	r2, [pc, #24]	; (d458 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    d43e:	9b01      	ldr	r3, [sp, #4]
    d440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d444:	1c5a      	adds	r2, r3, #1
    d446:	4904      	ldr	r1, [pc, #16]	; (d458 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    d448:	9b01      	ldr	r3, [sp, #4]
    d44a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d44e:	bf00      	nop
    d450:	b003      	add	sp, #12
    d452:	f85d fb04 	ldr.w	pc, [sp], #4
    d456:	bf00      	nop
    d458:	1fff903c 	.word	0x1fff903c
    d45c:	1fff9038 	.word	0x1fff9038

0000d460 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    d460:	b500      	push	{lr}
    d462:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d464:	f7f3 fbf8 	bl	c58 <Sys_GetCoreID>
    d468:	4603      	mov	r3, r0
    d46a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
    d46c:	4a0d      	ldr	r2, [pc, #52]	; (d4a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    d46e:	9b01      	ldr	r3, [sp, #4]
    d470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d474:	1e5a      	subs	r2, r3, #1
    d476:	490b      	ldr	r1, [pc, #44]	; (d4a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    d478:	9b01      	ldr	r3, [sp, #4]
    d47a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    d47e:	4a0a      	ldr	r2, [pc, #40]	; (d4a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
    d480:	9b01      	ldr	r3, [sp, #4]
    d482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d486:	f003 0301 	and.w	r3, r3, #1
    d48a:	2b00      	cmp	r3, #0
    d48c:	d106      	bne.n	d49c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    d48e:	4a05      	ldr	r2, [pc, #20]	; (d4a4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    d490:	9b01      	ldr	r3, [sp, #4]
    d492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d496:	2b00      	cmp	r3, #0
    d498:	d100      	bne.n	d49c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d49a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d49c:	bf00      	nop
    d49e:	b003      	add	sp, #12
    d4a0:	f85d fb04 	ldr.w	pc, [sp], #4
    d4a4:	1fff903c 	.word	0x1fff903c
    d4a8:	1fff9038 	.word	0x1fff9038

0000d4ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    d4ac:	b500      	push	{lr}
    d4ae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4b0:	f7f3 fbd2 	bl	c58 <Sys_GetCoreID>
    d4b4:	4603      	mov	r3, r0
    d4b6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
    d4b8:	4a10      	ldr	r2, [pc, #64]	; (d4fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    d4ba:	9b01      	ldr	r3, [sp, #4]
    d4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4c0:	2b00      	cmp	r3, #0
    d4c2:	d10d      	bne.n	d4e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d4c4:	f7f3 fae6 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    d4c8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d4ca:	9b00      	ldr	r3, [sp, #0]
    d4cc:	f003 0301 	and.w	r3, r3, #1
    d4d0:	2b00      	cmp	r3, #0
    d4d2:	d100      	bne.n	d4d6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d4d4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    d4d6:	490a      	ldr	r1, [pc, #40]	; (d500 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
    d4d8:	9b01      	ldr	r3, [sp, #4]
    d4da:	9a00      	ldr	r2, [sp, #0]
    d4dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
    d4e0:	4a06      	ldr	r2, [pc, #24]	; (d4fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    d4e2:	9b01      	ldr	r3, [sp, #4]
    d4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4e8:	1c5a      	adds	r2, r3, #1
    d4ea:	4904      	ldr	r1, [pc, #16]	; (d4fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    d4ec:	9b01      	ldr	r3, [sp, #4]
    d4ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d4f2:	bf00      	nop
    d4f4:	b003      	add	sp, #12
    d4f6:	f85d fb04 	ldr.w	pc, [sp], #4
    d4fa:	bf00      	nop
    d4fc:	1fff9044 	.word	0x1fff9044
    d500:	1fff9040 	.word	0x1fff9040

0000d504 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    d504:	b500      	push	{lr}
    d506:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d508:	f7f3 fba6 	bl	c58 <Sys_GetCoreID>
    d50c:	4603      	mov	r3, r0
    d50e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
    d510:	4a0d      	ldr	r2, [pc, #52]	; (d548 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    d512:	9b01      	ldr	r3, [sp, #4]
    d514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d518:	1e5a      	subs	r2, r3, #1
    d51a:	490b      	ldr	r1, [pc, #44]	; (d548 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    d51c:	9b01      	ldr	r3, [sp, #4]
    d51e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    d522:	4a0a      	ldr	r2, [pc, #40]	; (d54c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
    d524:	9b01      	ldr	r3, [sp, #4]
    d526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d52a:	f003 0301 	and.w	r3, r3, #1
    d52e:	2b00      	cmp	r3, #0
    d530:	d106      	bne.n	d540 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    d532:	4a05      	ldr	r2, [pc, #20]	; (d548 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    d534:	9b01      	ldr	r3, [sp, #4]
    d536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d53a:	2b00      	cmp	r3, #0
    d53c:	d100      	bne.n	d540 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d53e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d540:	bf00      	nop
    d542:	b003      	add	sp, #12
    d544:	f85d fb04 	ldr.w	pc, [sp], #4
    d548:	1fff9044 	.word	0x1fff9044
    d54c:	1fff9040 	.word	0x1fff9040

0000d550 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    d550:	b500      	push	{lr}
    d552:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d554:	f7f3 fb80 	bl	c58 <Sys_GetCoreID>
    d558:	4603      	mov	r3, r0
    d55a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
    d55c:	4a10      	ldr	r2, [pc, #64]	; (d5a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    d55e:	9b01      	ldr	r3, [sp, #4]
    d560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d564:	2b00      	cmp	r3, #0
    d566:	d10d      	bne.n	d584 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d568:	f7f3 fa94 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    d56c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d56e:	9b00      	ldr	r3, [sp, #0]
    d570:	f003 0301 	and.w	r3, r3, #1
    d574:	2b00      	cmp	r3, #0
    d576:	d100      	bne.n	d57a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d578:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    d57a:	490a      	ldr	r1, [pc, #40]	; (d5a4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
    d57c:	9b01      	ldr	r3, [sp, #4]
    d57e:	9a00      	ldr	r2, [sp, #0]
    d580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
    d584:	4a06      	ldr	r2, [pc, #24]	; (d5a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    d586:	9b01      	ldr	r3, [sp, #4]
    d588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d58c:	1c5a      	adds	r2, r3, #1
    d58e:	4904      	ldr	r1, [pc, #16]	; (d5a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    d590:	9b01      	ldr	r3, [sp, #4]
    d592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d596:	bf00      	nop
    d598:	b003      	add	sp, #12
    d59a:	f85d fb04 	ldr.w	pc, [sp], #4
    d59e:	bf00      	nop
    d5a0:	1fff904c 	.word	0x1fff904c
    d5a4:	1fff9048 	.word	0x1fff9048

0000d5a8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    d5a8:	b500      	push	{lr}
    d5aa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5ac:	f7f3 fb54 	bl	c58 <Sys_GetCoreID>
    d5b0:	4603      	mov	r3, r0
    d5b2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
    d5b4:	4a0d      	ldr	r2, [pc, #52]	; (d5ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    d5b6:	9b01      	ldr	r3, [sp, #4]
    d5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5bc:	1e5a      	subs	r2, r3, #1
    d5be:	490b      	ldr	r1, [pc, #44]	; (d5ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    d5c0:	9b01      	ldr	r3, [sp, #4]
    d5c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    d5c6:	4a0a      	ldr	r2, [pc, #40]	; (d5f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
    d5c8:	9b01      	ldr	r3, [sp, #4]
    d5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5ce:	f003 0301 	and.w	r3, r3, #1
    d5d2:	2b00      	cmp	r3, #0
    d5d4:	d106      	bne.n	d5e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    d5d6:	4a05      	ldr	r2, [pc, #20]	; (d5ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    d5d8:	9b01      	ldr	r3, [sp, #4]
    d5da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5de:	2b00      	cmp	r3, #0
    d5e0:	d100      	bne.n	d5e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d5e2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d5e4:	bf00      	nop
    d5e6:	b003      	add	sp, #12
    d5e8:	f85d fb04 	ldr.w	pc, [sp], #4
    d5ec:	1fff904c 	.word	0x1fff904c
    d5f0:	1fff9048 	.word	0x1fff9048

0000d5f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    d5f4:	b500      	push	{lr}
    d5f6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5f8:	f7f3 fb2e 	bl	c58 <Sys_GetCoreID>
    d5fc:	4603      	mov	r3, r0
    d5fe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
    d600:	4a10      	ldr	r2, [pc, #64]	; (d644 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    d602:	9b01      	ldr	r3, [sp, #4]
    d604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d608:	2b00      	cmp	r3, #0
    d60a:	d10d      	bne.n	d628 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d60c:	f7f3 fa42 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    d610:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d612:	9b00      	ldr	r3, [sp, #0]
    d614:	f003 0301 	and.w	r3, r3, #1
    d618:	2b00      	cmp	r3, #0
    d61a:	d100      	bne.n	d61e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d61c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    d61e:	490a      	ldr	r1, [pc, #40]	; (d648 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
    d620:	9b01      	ldr	r3, [sp, #4]
    d622:	9a00      	ldr	r2, [sp, #0]
    d624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
    d628:	4a06      	ldr	r2, [pc, #24]	; (d644 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    d62a:	9b01      	ldr	r3, [sp, #4]
    d62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d630:	1c5a      	adds	r2, r3, #1
    d632:	4904      	ldr	r1, [pc, #16]	; (d644 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    d634:	9b01      	ldr	r3, [sp, #4]
    d636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d63a:	bf00      	nop
    d63c:	b003      	add	sp, #12
    d63e:	f85d fb04 	ldr.w	pc, [sp], #4
    d642:	bf00      	nop
    d644:	1fff9054 	.word	0x1fff9054
    d648:	1fff9050 	.word	0x1fff9050

0000d64c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    d64c:	b500      	push	{lr}
    d64e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d650:	f7f3 fb02 	bl	c58 <Sys_GetCoreID>
    d654:	4603      	mov	r3, r0
    d656:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
    d658:	4a0d      	ldr	r2, [pc, #52]	; (d690 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    d65a:	9b01      	ldr	r3, [sp, #4]
    d65c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d660:	1e5a      	subs	r2, r3, #1
    d662:	490b      	ldr	r1, [pc, #44]	; (d690 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    d664:	9b01      	ldr	r3, [sp, #4]
    d666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    d66a:	4a0a      	ldr	r2, [pc, #40]	; (d694 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
    d66c:	9b01      	ldr	r3, [sp, #4]
    d66e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d672:	f003 0301 	and.w	r3, r3, #1
    d676:	2b00      	cmp	r3, #0
    d678:	d106      	bne.n	d688 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    d67a:	4a05      	ldr	r2, [pc, #20]	; (d690 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    d67c:	9b01      	ldr	r3, [sp, #4]
    d67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d682:	2b00      	cmp	r3, #0
    d684:	d100      	bne.n	d688 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d686:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d688:	bf00      	nop
    d68a:	b003      	add	sp, #12
    d68c:	f85d fb04 	ldr.w	pc, [sp], #4
    d690:	1fff9054 	.word	0x1fff9054
    d694:	1fff9050 	.word	0x1fff9050

0000d698 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    d698:	b500      	push	{lr}
    d69a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d69c:	f7f3 fadc 	bl	c58 <Sys_GetCoreID>
    d6a0:	4603      	mov	r3, r0
    d6a2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
    d6a4:	4a10      	ldr	r2, [pc, #64]	; (d6e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    d6a6:	9b01      	ldr	r3, [sp, #4]
    d6a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6ac:	2b00      	cmp	r3, #0
    d6ae:	d10d      	bne.n	d6cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d6b0:	f7f3 f9f0 	bl	a94 <Can_43_FLEXCAN_schm_read_msr>
    d6b4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d6b6:	9b00      	ldr	r3, [sp, #0]
    d6b8:	f003 0301 	and.w	r3, r3, #1
    d6bc:	2b00      	cmp	r3, #0
    d6be:	d100      	bne.n	d6c2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d6c0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    d6c2:	490a      	ldr	r1, [pc, #40]	; (d6ec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
    d6c4:	9b01      	ldr	r3, [sp, #4]
    d6c6:	9a00      	ldr	r2, [sp, #0]
    d6c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
    d6cc:	4a06      	ldr	r2, [pc, #24]	; (d6e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    d6ce:	9b01      	ldr	r3, [sp, #4]
    d6d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6d4:	1c5a      	adds	r2, r3, #1
    d6d6:	4904      	ldr	r1, [pc, #16]	; (d6e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    d6d8:	9b01      	ldr	r3, [sp, #4]
    d6da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d6de:	bf00      	nop
    d6e0:	b003      	add	sp, #12
    d6e2:	f85d fb04 	ldr.w	pc, [sp], #4
    d6e6:	bf00      	nop
    d6e8:	1fff905c 	.word	0x1fff905c
    d6ec:	1fff9058 	.word	0x1fff9058

0000d6f0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    d6f0:	b500      	push	{lr}
    d6f2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6f4:	f7f3 fab0 	bl	c58 <Sys_GetCoreID>
    d6f8:	4603      	mov	r3, r0
    d6fa:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
    d6fc:	4a0d      	ldr	r2, [pc, #52]	; (d734 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    d6fe:	9b01      	ldr	r3, [sp, #4]
    d700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d704:	1e5a      	subs	r2, r3, #1
    d706:	490b      	ldr	r1, [pc, #44]	; (d734 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    d708:	9b01      	ldr	r3, [sp, #4]
    d70a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    d70e:	4a0a      	ldr	r2, [pc, #40]	; (d738 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
    d710:	9b01      	ldr	r3, [sp, #4]
    d712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d716:	f003 0301 	and.w	r3, r3, #1
    d71a:	2b00      	cmp	r3, #0
    d71c:	d106      	bne.n	d72c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    d71e:	4a05      	ldr	r2, [pc, #20]	; (d734 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    d720:	9b01      	ldr	r3, [sp, #4]
    d722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d726:	2b00      	cmp	r3, #0
    d728:	d100      	bne.n	d72c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d72a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d72c:	bf00      	nop
    d72e:	b003      	add	sp, #12
    d730:	f85d fb04 	ldr.w	pc, [sp], #4
    d734:	1fff905c 	.word	0x1fff905c
    d738:	1fff9058 	.word	0x1fff9058

0000d73c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    d73c:	b500      	push	{lr}
    d73e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d740:	f7f3 fa8a 	bl	c58 <Sys_GetCoreID>
    d744:	4603      	mov	r3, r0
    d746:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    d748:	4a10      	ldr	r2, [pc, #64]	; (d78c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    d74a:	9b01      	ldr	r3, [sp, #4]
    d74c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d750:	2b00      	cmp	r3, #0
    d752:	d10d      	bne.n	d770 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d754:	f7f3 f9a7 	bl	aa6 <Mcu_schm_read_msr>
    d758:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d75a:	9b00      	ldr	r3, [sp, #0]
    d75c:	f003 0301 	and.w	r3, r3, #1
    d760:	2b00      	cmp	r3, #0
    d762:	d100      	bne.n	d766 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d764:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    d766:	490a      	ldr	r1, [pc, #40]	; (d790 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    d768:	9b01      	ldr	r3, [sp, #4]
    d76a:	9a00      	ldr	r2, [sp, #0]
    d76c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    d770:	4a06      	ldr	r2, [pc, #24]	; (d78c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    d772:	9b01      	ldr	r3, [sp, #4]
    d774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d778:	1c5a      	adds	r2, r3, #1
    d77a:	4904      	ldr	r1, [pc, #16]	; (d78c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    d77c:	9b01      	ldr	r3, [sp, #4]
    d77e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d782:	bf00      	nop
    d784:	b003      	add	sp, #12
    d786:	f85d fb04 	ldr.w	pc, [sp], #4
    d78a:	bf00      	nop
    d78c:	1fff9064 	.word	0x1fff9064
    d790:	1fff9060 	.word	0x1fff9060

0000d794 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    d794:	b500      	push	{lr}
    d796:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d798:	f7f3 fa5e 	bl	c58 <Sys_GetCoreID>
    d79c:	4603      	mov	r3, r0
    d79e:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    d7a0:	4a0d      	ldr	r2, [pc, #52]	; (d7d8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    d7a2:	9b01      	ldr	r3, [sp, #4]
    d7a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7a8:	1e5a      	subs	r2, r3, #1
    d7aa:	490b      	ldr	r1, [pc, #44]	; (d7d8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    d7ac:	9b01      	ldr	r3, [sp, #4]
    d7ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    d7b2:	4a0a      	ldr	r2, [pc, #40]	; (d7dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    d7b4:	9b01      	ldr	r3, [sp, #4]
    d7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7ba:	f003 0301 	and.w	r3, r3, #1
    d7be:	2b00      	cmp	r3, #0
    d7c0:	d106      	bne.n	d7d0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    d7c2:	4a05      	ldr	r2, [pc, #20]	; (d7d8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    d7c4:	9b01      	ldr	r3, [sp, #4]
    d7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7ca:	2b00      	cmp	r3, #0
    d7cc:	d100      	bne.n	d7d0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d7ce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d7d0:	bf00      	nop
    d7d2:	b003      	add	sp, #12
    d7d4:	f85d fb04 	ldr.w	pc, [sp], #4
    d7d8:	1fff9064 	.word	0x1fff9064
    d7dc:	1fff9060 	.word	0x1fff9060

0000d7e0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    d7e0:	b500      	push	{lr}
    d7e2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7e4:	f7f3 fa38 	bl	c58 <Sys_GetCoreID>
    d7e8:	4603      	mov	r3, r0
    d7ea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    d7ec:	4a10      	ldr	r2, [pc, #64]	; (d830 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    d7ee:	9b01      	ldr	r3, [sp, #4]
    d7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7f4:	2b00      	cmp	r3, #0
    d7f6:	d10d      	bne.n	d814 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d7f8:	f7f3 f955 	bl	aa6 <Mcu_schm_read_msr>
    d7fc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d7fe:	9b00      	ldr	r3, [sp, #0]
    d800:	f003 0301 	and.w	r3, r3, #1
    d804:	2b00      	cmp	r3, #0
    d806:	d100      	bne.n	d80a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d808:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    d80a:	490a      	ldr	r1, [pc, #40]	; (d834 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    d80c:	9b01      	ldr	r3, [sp, #4]
    d80e:	9a00      	ldr	r2, [sp, #0]
    d810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    d814:	4a06      	ldr	r2, [pc, #24]	; (d830 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    d816:	9b01      	ldr	r3, [sp, #4]
    d818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d81c:	1c5a      	adds	r2, r3, #1
    d81e:	4904      	ldr	r1, [pc, #16]	; (d830 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    d820:	9b01      	ldr	r3, [sp, #4]
    d822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d826:	bf00      	nop
    d828:	b003      	add	sp, #12
    d82a:	f85d fb04 	ldr.w	pc, [sp], #4
    d82e:	bf00      	nop
    d830:	1fff906c 	.word	0x1fff906c
    d834:	1fff9068 	.word	0x1fff9068

0000d838 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    d838:	b500      	push	{lr}
    d83a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d83c:	f7f3 fa0c 	bl	c58 <Sys_GetCoreID>
    d840:	4603      	mov	r3, r0
    d842:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    d844:	4a0d      	ldr	r2, [pc, #52]	; (d87c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    d846:	9b01      	ldr	r3, [sp, #4]
    d848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d84c:	1e5a      	subs	r2, r3, #1
    d84e:	490b      	ldr	r1, [pc, #44]	; (d87c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    d850:	9b01      	ldr	r3, [sp, #4]
    d852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    d856:	4a0a      	ldr	r2, [pc, #40]	; (d880 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    d858:	9b01      	ldr	r3, [sp, #4]
    d85a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d85e:	f003 0301 	and.w	r3, r3, #1
    d862:	2b00      	cmp	r3, #0
    d864:	d106      	bne.n	d874 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    d866:	4a05      	ldr	r2, [pc, #20]	; (d87c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    d868:	9b01      	ldr	r3, [sp, #4]
    d86a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d86e:	2b00      	cmp	r3, #0
    d870:	d100      	bne.n	d874 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d872:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d874:	bf00      	nop
    d876:	b003      	add	sp, #12
    d878:	f85d fb04 	ldr.w	pc, [sp], #4
    d87c:	1fff906c 	.word	0x1fff906c
    d880:	1fff9068 	.word	0x1fff9068

0000d884 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    d884:	b500      	push	{lr}
    d886:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d888:	f7f3 f9e6 	bl	c58 <Sys_GetCoreID>
    d88c:	4603      	mov	r3, r0
    d88e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    d890:	4a10      	ldr	r2, [pc, #64]	; (d8d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    d892:	9b01      	ldr	r3, [sp, #4]
    d894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d898:	2b00      	cmp	r3, #0
    d89a:	d10d      	bne.n	d8b8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d89c:	f7f3 f903 	bl	aa6 <Mcu_schm_read_msr>
    d8a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d8a2:	9b00      	ldr	r3, [sp, #0]
    d8a4:	f003 0301 	and.w	r3, r3, #1
    d8a8:	2b00      	cmp	r3, #0
    d8aa:	d100      	bne.n	d8ae <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    d8ae:	490a      	ldr	r1, [pc, #40]	; (d8d8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    d8b0:	9b01      	ldr	r3, [sp, #4]
    d8b2:	9a00      	ldr	r2, [sp, #0]
    d8b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    d8b8:	4a06      	ldr	r2, [pc, #24]	; (d8d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    d8ba:	9b01      	ldr	r3, [sp, #4]
    d8bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8c0:	1c5a      	adds	r2, r3, #1
    d8c2:	4904      	ldr	r1, [pc, #16]	; (d8d4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    d8c4:	9b01      	ldr	r3, [sp, #4]
    d8c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d8ca:	bf00      	nop
    d8cc:	b003      	add	sp, #12
    d8ce:	f85d fb04 	ldr.w	pc, [sp], #4
    d8d2:	bf00      	nop
    d8d4:	1fff9074 	.word	0x1fff9074
    d8d8:	1fff9070 	.word	0x1fff9070

0000d8dc <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    d8dc:	b500      	push	{lr}
    d8de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8e0:	f7f3 f9ba 	bl	c58 <Sys_GetCoreID>
    d8e4:	4603      	mov	r3, r0
    d8e6:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    d8e8:	4a0d      	ldr	r2, [pc, #52]	; (d920 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    d8ea:	9b01      	ldr	r3, [sp, #4]
    d8ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8f0:	1e5a      	subs	r2, r3, #1
    d8f2:	490b      	ldr	r1, [pc, #44]	; (d920 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    d8f4:	9b01      	ldr	r3, [sp, #4]
    d8f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    d8fa:	4a0a      	ldr	r2, [pc, #40]	; (d924 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    d8fc:	9b01      	ldr	r3, [sp, #4]
    d8fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d902:	f003 0301 	and.w	r3, r3, #1
    d906:	2b00      	cmp	r3, #0
    d908:	d106      	bne.n	d918 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    d90a:	4a05      	ldr	r2, [pc, #20]	; (d920 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    d90c:	9b01      	ldr	r3, [sp, #4]
    d90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d912:	2b00      	cmp	r3, #0
    d914:	d100      	bne.n	d918 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d916:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d918:	bf00      	nop
    d91a:	b003      	add	sp, #12
    d91c:	f85d fb04 	ldr.w	pc, [sp], #4
    d920:	1fff9074 	.word	0x1fff9074
    d924:	1fff9070 	.word	0x1fff9070

0000d928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    d928:	b500      	push	{lr}
    d92a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d92c:	f7f3 f994 	bl	c58 <Sys_GetCoreID>
    d930:	4603      	mov	r3, r0
    d932:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    d934:	4a10      	ldr	r2, [pc, #64]	; (d978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    d936:	9b01      	ldr	r3, [sp, #4]
    d938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d93c:	2b00      	cmp	r3, #0
    d93e:	d10d      	bne.n	d95c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d940:	f7f3 f8ba 	bl	ab8 <Port_schm_read_msr>
    d944:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d946:	9b00      	ldr	r3, [sp, #0]
    d948:	f003 0301 	and.w	r3, r3, #1
    d94c:	2b00      	cmp	r3, #0
    d94e:	d100      	bne.n	d952 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d950:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    d952:	490a      	ldr	r1, [pc, #40]	; (d97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    d954:	9b01      	ldr	r3, [sp, #4]
    d956:	9a00      	ldr	r2, [sp, #0]
    d958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    d95c:	4a06      	ldr	r2, [pc, #24]	; (d978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    d95e:	9b01      	ldr	r3, [sp, #4]
    d960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d964:	1c5a      	adds	r2, r3, #1
    d966:	4904      	ldr	r1, [pc, #16]	; (d978 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    d968:	9b01      	ldr	r3, [sp, #4]
    d96a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d96e:	bf00      	nop
    d970:	b003      	add	sp, #12
    d972:	f85d fb04 	ldr.w	pc, [sp], #4
    d976:	bf00      	nop
    d978:	1fff907c 	.word	0x1fff907c
    d97c:	1fff9078 	.word	0x1fff9078

0000d980 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    d980:	b500      	push	{lr}
    d982:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d984:	f7f3 f968 	bl	c58 <Sys_GetCoreID>
    d988:	4603      	mov	r3, r0
    d98a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    d98c:	4a0d      	ldr	r2, [pc, #52]	; (d9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    d98e:	9b01      	ldr	r3, [sp, #4]
    d990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d994:	1e5a      	subs	r2, r3, #1
    d996:	490b      	ldr	r1, [pc, #44]	; (d9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    d998:	9b01      	ldr	r3, [sp, #4]
    d99a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    d99e:	4a0a      	ldr	r2, [pc, #40]	; (d9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    d9a0:	9b01      	ldr	r3, [sp, #4]
    d9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9a6:	f003 0301 	and.w	r3, r3, #1
    d9aa:	2b00      	cmp	r3, #0
    d9ac:	d106      	bne.n	d9bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    d9ae:	4a05      	ldr	r2, [pc, #20]	; (d9c4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    d9b0:	9b01      	ldr	r3, [sp, #4]
    d9b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9b6:	2b00      	cmp	r3, #0
    d9b8:	d100      	bne.n	d9bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d9ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d9bc:	bf00      	nop
    d9be:	b003      	add	sp, #12
    d9c0:	f85d fb04 	ldr.w	pc, [sp], #4
    d9c4:	1fff907c 	.word	0x1fff907c
    d9c8:	1fff9078 	.word	0x1fff9078

0000d9cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    d9cc:	b500      	push	{lr}
    d9ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9d0:	f7f3 f942 	bl	c58 <Sys_GetCoreID>
    d9d4:	4603      	mov	r3, r0
    d9d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    d9d8:	4a10      	ldr	r2, [pc, #64]	; (da1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    d9da:	9b01      	ldr	r3, [sp, #4]
    d9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	d10d      	bne.n	da00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d9e4:	f7f3 f868 	bl	ab8 <Port_schm_read_msr>
    d9e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d9ea:	9b00      	ldr	r3, [sp, #0]
    d9ec:	f003 0301 	and.w	r3, r3, #1
    d9f0:	2b00      	cmp	r3, #0
    d9f2:	d100      	bne.n	d9f6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    d9f6:	490a      	ldr	r1, [pc, #40]	; (da20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    d9f8:	9b01      	ldr	r3, [sp, #4]
    d9fa:	9a00      	ldr	r2, [sp, #0]
    d9fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    da00:	4a06      	ldr	r2, [pc, #24]	; (da1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    da02:	9b01      	ldr	r3, [sp, #4]
    da04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da08:	1c5a      	adds	r2, r3, #1
    da0a:	4904      	ldr	r1, [pc, #16]	; (da1c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    da0c:	9b01      	ldr	r3, [sp, #4]
    da0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da12:	bf00      	nop
    da14:	b003      	add	sp, #12
    da16:	f85d fb04 	ldr.w	pc, [sp], #4
    da1a:	bf00      	nop
    da1c:	1fff9084 	.word	0x1fff9084
    da20:	1fff9080 	.word	0x1fff9080

0000da24 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    da24:	b500      	push	{lr}
    da26:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da28:	f7f3 f916 	bl	c58 <Sys_GetCoreID>
    da2c:	4603      	mov	r3, r0
    da2e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    da30:	4a0d      	ldr	r2, [pc, #52]	; (da68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    da32:	9b01      	ldr	r3, [sp, #4]
    da34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da38:	1e5a      	subs	r2, r3, #1
    da3a:	490b      	ldr	r1, [pc, #44]	; (da68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    da3c:	9b01      	ldr	r3, [sp, #4]
    da3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    da42:	4a0a      	ldr	r2, [pc, #40]	; (da6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    da44:	9b01      	ldr	r3, [sp, #4]
    da46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da4a:	f003 0301 	and.w	r3, r3, #1
    da4e:	2b00      	cmp	r3, #0
    da50:	d106      	bne.n	da60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    da52:	4a05      	ldr	r2, [pc, #20]	; (da68 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    da54:	9b01      	ldr	r3, [sp, #4]
    da56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da5a:	2b00      	cmp	r3, #0
    da5c:	d100      	bne.n	da60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da5e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da60:	bf00      	nop
    da62:	b003      	add	sp, #12
    da64:	f85d fb04 	ldr.w	pc, [sp], #4
    da68:	1fff9084 	.word	0x1fff9084
    da6c:	1fff9080 	.word	0x1fff9080

0000da70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    da70:	b500      	push	{lr}
    da72:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da74:	f7f3 f8f0 	bl	c58 <Sys_GetCoreID>
    da78:	4603      	mov	r3, r0
    da7a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    da7c:	4a10      	ldr	r2, [pc, #64]	; (dac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    da7e:	9b01      	ldr	r3, [sp, #4]
    da80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da84:	2b00      	cmp	r3, #0
    da86:	d10d      	bne.n	daa4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da88:	f7f3 f816 	bl	ab8 <Port_schm_read_msr>
    da8c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da8e:	9b00      	ldr	r3, [sp, #0]
    da90:	f003 0301 	and.w	r3, r3, #1
    da94:	2b00      	cmp	r3, #0
    da96:	d100      	bne.n	da9a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da98:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    da9a:	490a      	ldr	r1, [pc, #40]	; (dac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    da9c:	9b01      	ldr	r3, [sp, #4]
    da9e:	9a00      	ldr	r2, [sp, #0]
    daa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    daa4:	4a06      	ldr	r2, [pc, #24]	; (dac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    daa6:	9b01      	ldr	r3, [sp, #4]
    daa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daac:	1c5a      	adds	r2, r3, #1
    daae:	4904      	ldr	r1, [pc, #16]	; (dac0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    dab0:	9b01      	ldr	r3, [sp, #4]
    dab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dab6:	bf00      	nop
    dab8:	b003      	add	sp, #12
    daba:	f85d fb04 	ldr.w	pc, [sp], #4
    dabe:	bf00      	nop
    dac0:	1fff908c 	.word	0x1fff908c
    dac4:	1fff9088 	.word	0x1fff9088

0000dac8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    dac8:	b500      	push	{lr}
    daca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dacc:	f7f3 f8c4 	bl	c58 <Sys_GetCoreID>
    dad0:	4603      	mov	r3, r0
    dad2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    dad4:	4a0d      	ldr	r2, [pc, #52]	; (db0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    dad6:	9b01      	ldr	r3, [sp, #4]
    dad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dadc:	1e5a      	subs	r2, r3, #1
    dade:	490b      	ldr	r1, [pc, #44]	; (db0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    dae0:	9b01      	ldr	r3, [sp, #4]
    dae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    dae6:	4a0a      	ldr	r2, [pc, #40]	; (db10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    dae8:	9b01      	ldr	r3, [sp, #4]
    daea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daee:	f003 0301 	and.w	r3, r3, #1
    daf2:	2b00      	cmp	r3, #0
    daf4:	d106      	bne.n	db04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    daf6:	4a05      	ldr	r2, [pc, #20]	; (db0c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    daf8:	9b01      	ldr	r3, [sp, #4]
    dafa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dafe:	2b00      	cmp	r3, #0
    db00:	d100      	bne.n	db04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db02:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db04:	bf00      	nop
    db06:	b003      	add	sp, #12
    db08:	f85d fb04 	ldr.w	pc, [sp], #4
    db0c:	1fff908c 	.word	0x1fff908c
    db10:	1fff9088 	.word	0x1fff9088

0000db14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    db14:	b500      	push	{lr}
    db16:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db18:	f7f3 f89e 	bl	c58 <Sys_GetCoreID>
    db1c:	4603      	mov	r3, r0
    db1e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    db20:	4a10      	ldr	r2, [pc, #64]	; (db64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    db22:	9b01      	ldr	r3, [sp, #4]
    db24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db28:	2b00      	cmp	r3, #0
    db2a:	d10d      	bne.n	db48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db2c:	f7f2 ffc4 	bl	ab8 <Port_schm_read_msr>
    db30:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db32:	9b00      	ldr	r3, [sp, #0]
    db34:	f003 0301 	and.w	r3, r3, #1
    db38:	2b00      	cmp	r3, #0
    db3a:	d100      	bne.n	db3e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db3c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    db3e:	490a      	ldr	r1, [pc, #40]	; (db68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    db40:	9b01      	ldr	r3, [sp, #4]
    db42:	9a00      	ldr	r2, [sp, #0]
    db44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    db48:	4a06      	ldr	r2, [pc, #24]	; (db64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    db4a:	9b01      	ldr	r3, [sp, #4]
    db4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db50:	1c5a      	adds	r2, r3, #1
    db52:	4904      	ldr	r1, [pc, #16]	; (db64 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    db54:	9b01      	ldr	r3, [sp, #4]
    db56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db5a:	bf00      	nop
    db5c:	b003      	add	sp, #12
    db5e:	f85d fb04 	ldr.w	pc, [sp], #4
    db62:	bf00      	nop
    db64:	1fff9094 	.word	0x1fff9094
    db68:	1fff9090 	.word	0x1fff9090

0000db6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    db6c:	b500      	push	{lr}
    db6e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db70:	f7f3 f872 	bl	c58 <Sys_GetCoreID>
    db74:	4603      	mov	r3, r0
    db76:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    db78:	4a0d      	ldr	r2, [pc, #52]	; (dbb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    db7a:	9b01      	ldr	r3, [sp, #4]
    db7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db80:	1e5a      	subs	r2, r3, #1
    db82:	490b      	ldr	r1, [pc, #44]	; (dbb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    db84:	9b01      	ldr	r3, [sp, #4]
    db86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    db8a:	4a0a      	ldr	r2, [pc, #40]	; (dbb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    db8c:	9b01      	ldr	r3, [sp, #4]
    db8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db92:	f003 0301 	and.w	r3, r3, #1
    db96:	2b00      	cmp	r3, #0
    db98:	d106      	bne.n	dba8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    db9a:	4a05      	ldr	r2, [pc, #20]	; (dbb0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    db9c:	9b01      	ldr	r3, [sp, #4]
    db9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dba2:	2b00      	cmp	r3, #0
    dba4:	d100      	bne.n	dba8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dba6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dba8:	bf00      	nop
    dbaa:	b003      	add	sp, #12
    dbac:	f85d fb04 	ldr.w	pc, [sp], #4
    dbb0:	1fff9094 	.word	0x1fff9094
    dbb4:	1fff9090 	.word	0x1fff9090

0000dbb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    dbb8:	b500      	push	{lr}
    dbba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbbc:	f7f3 f84c 	bl	c58 <Sys_GetCoreID>
    dbc0:	4603      	mov	r3, r0
    dbc2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    dbc4:	4a10      	ldr	r2, [pc, #64]	; (dc08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    dbc6:	9b01      	ldr	r3, [sp, #4]
    dbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbcc:	2b00      	cmp	r3, #0
    dbce:	d10d      	bne.n	dbec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dbd0:	f7f2 ff72 	bl	ab8 <Port_schm_read_msr>
    dbd4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dbd6:	9b00      	ldr	r3, [sp, #0]
    dbd8:	f003 0301 	and.w	r3, r3, #1
    dbdc:	2b00      	cmp	r3, #0
    dbde:	d100      	bne.n	dbe2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dbe0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    dbe2:	490a      	ldr	r1, [pc, #40]	; (dc0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    dbe4:	9b01      	ldr	r3, [sp, #4]
    dbe6:	9a00      	ldr	r2, [sp, #0]
    dbe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    dbec:	4a06      	ldr	r2, [pc, #24]	; (dc08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    dbee:	9b01      	ldr	r3, [sp, #4]
    dbf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbf4:	1c5a      	adds	r2, r3, #1
    dbf6:	4904      	ldr	r1, [pc, #16]	; (dc08 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    dbf8:	9b01      	ldr	r3, [sp, #4]
    dbfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dbfe:	bf00      	nop
    dc00:	b003      	add	sp, #12
    dc02:	f85d fb04 	ldr.w	pc, [sp], #4
    dc06:	bf00      	nop
    dc08:	1fff909c 	.word	0x1fff909c
    dc0c:	1fff9098 	.word	0x1fff9098

0000dc10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    dc10:	b500      	push	{lr}
    dc12:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc14:	f7f3 f820 	bl	c58 <Sys_GetCoreID>
    dc18:	4603      	mov	r3, r0
    dc1a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    dc1c:	4a0d      	ldr	r2, [pc, #52]	; (dc54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    dc1e:	9b01      	ldr	r3, [sp, #4]
    dc20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc24:	1e5a      	subs	r2, r3, #1
    dc26:	490b      	ldr	r1, [pc, #44]	; (dc54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    dc28:	9b01      	ldr	r3, [sp, #4]
    dc2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    dc2e:	4a0a      	ldr	r2, [pc, #40]	; (dc58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    dc30:	9b01      	ldr	r3, [sp, #4]
    dc32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc36:	f003 0301 	and.w	r3, r3, #1
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	d106      	bne.n	dc4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    dc3e:	4a05      	ldr	r2, [pc, #20]	; (dc54 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    dc40:	9b01      	ldr	r3, [sp, #4]
    dc42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc46:	2b00      	cmp	r3, #0
    dc48:	d100      	bne.n	dc4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc4a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc4c:	bf00      	nop
    dc4e:	b003      	add	sp, #12
    dc50:	f85d fb04 	ldr.w	pc, [sp], #4
    dc54:	1fff909c 	.word	0x1fff909c
    dc58:	1fff9098 	.word	0x1fff9098

0000dc5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    dc5c:	b500      	push	{lr}
    dc5e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc60:	f7f2 fffa 	bl	c58 <Sys_GetCoreID>
    dc64:	4603      	mov	r3, r0
    dc66:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    dc68:	4a10      	ldr	r2, [pc, #64]	; (dcac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    dc6a:	9b01      	ldr	r3, [sp, #4]
    dc6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc70:	2b00      	cmp	r3, #0
    dc72:	d10d      	bne.n	dc90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc74:	f7f2 ff20 	bl	ab8 <Port_schm_read_msr>
    dc78:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc7a:	9b00      	ldr	r3, [sp, #0]
    dc7c:	f003 0301 	and.w	r3, r3, #1
    dc80:	2b00      	cmp	r3, #0
    dc82:	d100      	bne.n	dc86 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc84:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    dc86:	490a      	ldr	r1, [pc, #40]	; (dcb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    dc88:	9b01      	ldr	r3, [sp, #4]
    dc8a:	9a00      	ldr	r2, [sp, #0]
    dc8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    dc90:	4a06      	ldr	r2, [pc, #24]	; (dcac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    dc92:	9b01      	ldr	r3, [sp, #4]
    dc94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc98:	1c5a      	adds	r2, r3, #1
    dc9a:	4904      	ldr	r1, [pc, #16]	; (dcac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    dc9c:	9b01      	ldr	r3, [sp, #4]
    dc9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dca2:	bf00      	nop
    dca4:	b003      	add	sp, #12
    dca6:	f85d fb04 	ldr.w	pc, [sp], #4
    dcaa:	bf00      	nop
    dcac:	1fff90a4 	.word	0x1fff90a4
    dcb0:	1fff90a0 	.word	0x1fff90a0

0000dcb4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    dcb4:	b500      	push	{lr}
    dcb6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcb8:	f7f2 ffce 	bl	c58 <Sys_GetCoreID>
    dcbc:	4603      	mov	r3, r0
    dcbe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    dcc0:	4a0d      	ldr	r2, [pc, #52]	; (dcf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    dcc2:	9b01      	ldr	r3, [sp, #4]
    dcc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcc8:	1e5a      	subs	r2, r3, #1
    dcca:	490b      	ldr	r1, [pc, #44]	; (dcf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    dccc:	9b01      	ldr	r3, [sp, #4]
    dcce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    dcd2:	4a0a      	ldr	r2, [pc, #40]	; (dcfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    dcd4:	9b01      	ldr	r3, [sp, #4]
    dcd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcda:	f003 0301 	and.w	r3, r3, #1
    dcde:	2b00      	cmp	r3, #0
    dce0:	d106      	bne.n	dcf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    dce2:	4a05      	ldr	r2, [pc, #20]	; (dcf8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    dce4:	9b01      	ldr	r3, [sp, #4]
    dce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcea:	2b00      	cmp	r3, #0
    dcec:	d100      	bne.n	dcf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dcee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dcf0:	bf00      	nop
    dcf2:	b003      	add	sp, #12
    dcf4:	f85d fb04 	ldr.w	pc, [sp], #4
    dcf8:	1fff90a4 	.word	0x1fff90a4
    dcfc:	1fff90a0 	.word	0x1fff90a0

0000dd00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    dd00:	b500      	push	{lr}
    dd02:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd04:	f7f2 ffa8 	bl	c58 <Sys_GetCoreID>
    dd08:	4603      	mov	r3, r0
    dd0a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    dd0c:	4a10      	ldr	r2, [pc, #64]	; (dd50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    dd0e:	9b01      	ldr	r3, [sp, #4]
    dd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd14:	2b00      	cmp	r3, #0
    dd16:	d10d      	bne.n	dd34 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd18:	f7f2 fece 	bl	ab8 <Port_schm_read_msr>
    dd1c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd1e:	9b00      	ldr	r3, [sp, #0]
    dd20:	f003 0301 	and.w	r3, r3, #1
    dd24:	2b00      	cmp	r3, #0
    dd26:	d100      	bne.n	dd2a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd28:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    dd2a:	490a      	ldr	r1, [pc, #40]	; (dd54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    dd2c:	9b01      	ldr	r3, [sp, #4]
    dd2e:	9a00      	ldr	r2, [sp, #0]
    dd30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    dd34:	4a06      	ldr	r2, [pc, #24]	; (dd50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    dd36:	9b01      	ldr	r3, [sp, #4]
    dd38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd3c:	1c5a      	adds	r2, r3, #1
    dd3e:	4904      	ldr	r1, [pc, #16]	; (dd50 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    dd40:	9b01      	ldr	r3, [sp, #4]
    dd42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd46:	bf00      	nop
    dd48:	b003      	add	sp, #12
    dd4a:	f85d fb04 	ldr.w	pc, [sp], #4
    dd4e:	bf00      	nop
    dd50:	1fff90ac 	.word	0x1fff90ac
    dd54:	1fff90a8 	.word	0x1fff90a8

0000dd58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    dd58:	b500      	push	{lr}
    dd5a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd5c:	f7f2 ff7c 	bl	c58 <Sys_GetCoreID>
    dd60:	4603      	mov	r3, r0
    dd62:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    dd64:	4a0d      	ldr	r2, [pc, #52]	; (dd9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    dd66:	9b01      	ldr	r3, [sp, #4]
    dd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd6c:	1e5a      	subs	r2, r3, #1
    dd6e:	490b      	ldr	r1, [pc, #44]	; (dd9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    dd70:	9b01      	ldr	r3, [sp, #4]
    dd72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    dd76:	4a0a      	ldr	r2, [pc, #40]	; (dda0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    dd78:	9b01      	ldr	r3, [sp, #4]
    dd7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd7e:	f003 0301 	and.w	r3, r3, #1
    dd82:	2b00      	cmp	r3, #0
    dd84:	d106      	bne.n	dd94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    dd86:	4a05      	ldr	r2, [pc, #20]	; (dd9c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    dd88:	9b01      	ldr	r3, [sp, #4]
    dd8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd8e:	2b00      	cmp	r3, #0
    dd90:	d100      	bne.n	dd94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd92:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd94:	bf00      	nop
    dd96:	b003      	add	sp, #12
    dd98:	f85d fb04 	ldr.w	pc, [sp], #4
    dd9c:	1fff90ac 	.word	0x1fff90ac
    dda0:	1fff90a8 	.word	0x1fff90a8

0000dda4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    dda4:	b500      	push	{lr}
    dda6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dda8:	f7f2 ff56 	bl	c58 <Sys_GetCoreID>
    ddac:	4603      	mov	r3, r0
    ddae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    ddb0:	4a10      	ldr	r2, [pc, #64]	; (ddf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    ddb2:	9b01      	ldr	r3, [sp, #4]
    ddb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddb8:	2b00      	cmp	r3, #0
    ddba:	d10d      	bne.n	ddd8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ddbc:	f7f2 fe7c 	bl	ab8 <Port_schm_read_msr>
    ddc0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ddc2:	9b00      	ldr	r3, [sp, #0]
    ddc4:	f003 0301 	and.w	r3, r3, #1
    ddc8:	2b00      	cmp	r3, #0
    ddca:	d100      	bne.n	ddce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ddcc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    ddce:	490a      	ldr	r1, [pc, #40]	; (ddf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    ddd0:	9b01      	ldr	r3, [sp, #4]
    ddd2:	9a00      	ldr	r2, [sp, #0]
    ddd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    ddd8:	4a06      	ldr	r2, [pc, #24]	; (ddf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    ddda:	9b01      	ldr	r3, [sp, #4]
    dddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dde0:	1c5a      	adds	r2, r3, #1
    dde2:	4904      	ldr	r1, [pc, #16]	; (ddf4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    dde4:	9b01      	ldr	r3, [sp, #4]
    dde6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ddea:	bf00      	nop
    ddec:	b003      	add	sp, #12
    ddee:	f85d fb04 	ldr.w	pc, [sp], #4
    ddf2:	bf00      	nop
    ddf4:	1fff90b4 	.word	0x1fff90b4
    ddf8:	1fff90b0 	.word	0x1fff90b0

0000ddfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    ddfc:	b500      	push	{lr}
    ddfe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de00:	f7f2 ff2a 	bl	c58 <Sys_GetCoreID>
    de04:	4603      	mov	r3, r0
    de06:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    de08:	4a0d      	ldr	r2, [pc, #52]	; (de40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    de0a:	9b01      	ldr	r3, [sp, #4]
    de0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de10:	1e5a      	subs	r2, r3, #1
    de12:	490b      	ldr	r1, [pc, #44]	; (de40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    de14:	9b01      	ldr	r3, [sp, #4]
    de16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    de1a:	4a0a      	ldr	r2, [pc, #40]	; (de44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    de1c:	9b01      	ldr	r3, [sp, #4]
    de1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de22:	f003 0301 	and.w	r3, r3, #1
    de26:	2b00      	cmp	r3, #0
    de28:	d106      	bne.n	de38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    de2a:	4a05      	ldr	r2, [pc, #20]	; (de40 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    de2c:	9b01      	ldr	r3, [sp, #4]
    de2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de32:	2b00      	cmp	r3, #0
    de34:	d100      	bne.n	de38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de36:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de38:	bf00      	nop
    de3a:	b003      	add	sp, #12
    de3c:	f85d fb04 	ldr.w	pc, [sp], #4
    de40:	1fff90b4 	.word	0x1fff90b4
    de44:	1fff90b0 	.word	0x1fff90b0

0000de48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    de48:	b500      	push	{lr}
    de4a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de4c:	f7f2 ff04 	bl	c58 <Sys_GetCoreID>
    de50:	4603      	mov	r3, r0
    de52:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    de54:	4a10      	ldr	r2, [pc, #64]	; (de98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    de56:	9b01      	ldr	r3, [sp, #4]
    de58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de5c:	2b00      	cmp	r3, #0
    de5e:	d10d      	bne.n	de7c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de60:	f7f2 fe2a 	bl	ab8 <Port_schm_read_msr>
    de64:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de66:	9b00      	ldr	r3, [sp, #0]
    de68:	f003 0301 	and.w	r3, r3, #1
    de6c:	2b00      	cmp	r3, #0
    de6e:	d100      	bne.n	de72 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de70:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    de72:	490a      	ldr	r1, [pc, #40]	; (de9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    de74:	9b01      	ldr	r3, [sp, #4]
    de76:	9a00      	ldr	r2, [sp, #0]
    de78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    de7c:	4a06      	ldr	r2, [pc, #24]	; (de98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    de7e:	9b01      	ldr	r3, [sp, #4]
    de80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de84:	1c5a      	adds	r2, r3, #1
    de86:	4904      	ldr	r1, [pc, #16]	; (de98 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    de88:	9b01      	ldr	r3, [sp, #4]
    de8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de8e:	bf00      	nop
    de90:	b003      	add	sp, #12
    de92:	f85d fb04 	ldr.w	pc, [sp], #4
    de96:	bf00      	nop
    de98:	1fff90bc 	.word	0x1fff90bc
    de9c:	1fff90b8 	.word	0x1fff90b8

0000dea0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    dea0:	b500      	push	{lr}
    dea2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dea4:	f7f2 fed8 	bl	c58 <Sys_GetCoreID>
    dea8:	4603      	mov	r3, r0
    deaa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    deac:	4a0d      	ldr	r2, [pc, #52]	; (dee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    deae:	9b01      	ldr	r3, [sp, #4]
    deb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deb4:	1e5a      	subs	r2, r3, #1
    deb6:	490b      	ldr	r1, [pc, #44]	; (dee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    deb8:	9b01      	ldr	r3, [sp, #4]
    deba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    debe:	4a0a      	ldr	r2, [pc, #40]	; (dee8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    dec0:	9b01      	ldr	r3, [sp, #4]
    dec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dec6:	f003 0301 	and.w	r3, r3, #1
    deca:	2b00      	cmp	r3, #0
    decc:	d106      	bne.n	dedc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    dece:	4a05      	ldr	r2, [pc, #20]	; (dee4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    ded0:	9b01      	ldr	r3, [sp, #4]
    ded2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ded6:	2b00      	cmp	r3, #0
    ded8:	d100      	bne.n	dedc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    deda:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dedc:	bf00      	nop
    dede:	b003      	add	sp, #12
    dee0:	f85d fb04 	ldr.w	pc, [sp], #4
    dee4:	1fff90bc 	.word	0x1fff90bc
    dee8:	1fff90b8 	.word	0x1fff90b8

0000deec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    deec:	b500      	push	{lr}
    deee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    def0:	f7f2 feb2 	bl	c58 <Sys_GetCoreID>
    def4:	4603      	mov	r3, r0
    def6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    def8:	4a10      	ldr	r2, [pc, #64]	; (df3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    defa:	9b01      	ldr	r3, [sp, #4]
    defc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df00:	2b00      	cmp	r3, #0
    df02:	d10d      	bne.n	df20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df04:	f7f2 fdd8 	bl	ab8 <Port_schm_read_msr>
    df08:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df0a:	9b00      	ldr	r3, [sp, #0]
    df0c:	f003 0301 	and.w	r3, r3, #1
    df10:	2b00      	cmp	r3, #0
    df12:	d100      	bne.n	df16 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df14:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    df16:	490a      	ldr	r1, [pc, #40]	; (df40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    df18:	9b01      	ldr	r3, [sp, #4]
    df1a:	9a00      	ldr	r2, [sp, #0]
    df1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    df20:	4a06      	ldr	r2, [pc, #24]	; (df3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    df22:	9b01      	ldr	r3, [sp, #4]
    df24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df28:	1c5a      	adds	r2, r3, #1
    df2a:	4904      	ldr	r1, [pc, #16]	; (df3c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    df2c:	9b01      	ldr	r3, [sp, #4]
    df2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df32:	bf00      	nop
    df34:	b003      	add	sp, #12
    df36:	f85d fb04 	ldr.w	pc, [sp], #4
    df3a:	bf00      	nop
    df3c:	1fff90c4 	.word	0x1fff90c4
    df40:	1fff90c0 	.word	0x1fff90c0

0000df44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    df44:	b500      	push	{lr}
    df46:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df48:	f7f2 fe86 	bl	c58 <Sys_GetCoreID>
    df4c:	4603      	mov	r3, r0
    df4e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    df50:	4a0d      	ldr	r2, [pc, #52]	; (df88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    df52:	9b01      	ldr	r3, [sp, #4]
    df54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df58:	1e5a      	subs	r2, r3, #1
    df5a:	490b      	ldr	r1, [pc, #44]	; (df88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    df5c:	9b01      	ldr	r3, [sp, #4]
    df5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    df62:	4a0a      	ldr	r2, [pc, #40]	; (df8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    df64:	9b01      	ldr	r3, [sp, #4]
    df66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df6a:	f003 0301 	and.w	r3, r3, #1
    df6e:	2b00      	cmp	r3, #0
    df70:	d106      	bne.n	df80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    df72:	4a05      	ldr	r2, [pc, #20]	; (df88 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    df74:	9b01      	ldr	r3, [sp, #4]
    df76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df7a:	2b00      	cmp	r3, #0
    df7c:	d100      	bne.n	df80 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df7e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df80:	bf00      	nop
    df82:	b003      	add	sp, #12
    df84:	f85d fb04 	ldr.w	pc, [sp], #4
    df88:	1fff90c4 	.word	0x1fff90c4
    df8c:	1fff90c0 	.word	0x1fff90c0

0000df90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    df90:	b500      	push	{lr}
    df92:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df94:	f7f2 fe60 	bl	c58 <Sys_GetCoreID>
    df98:	4603      	mov	r3, r0
    df9a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    df9c:	4a10      	ldr	r2, [pc, #64]	; (dfe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    df9e:	9b01      	ldr	r3, [sp, #4]
    dfa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfa4:	2b00      	cmp	r3, #0
    dfa6:	d10d      	bne.n	dfc4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dfa8:	f7f2 fd86 	bl	ab8 <Port_schm_read_msr>
    dfac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dfae:	9b00      	ldr	r3, [sp, #0]
    dfb0:	f003 0301 	and.w	r3, r3, #1
    dfb4:	2b00      	cmp	r3, #0
    dfb6:	d100      	bne.n	dfba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dfb8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    dfba:	490a      	ldr	r1, [pc, #40]	; (dfe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    dfbc:	9b01      	ldr	r3, [sp, #4]
    dfbe:	9a00      	ldr	r2, [sp, #0]
    dfc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    dfc4:	4a06      	ldr	r2, [pc, #24]	; (dfe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    dfc6:	9b01      	ldr	r3, [sp, #4]
    dfc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfcc:	1c5a      	adds	r2, r3, #1
    dfce:	4904      	ldr	r1, [pc, #16]	; (dfe0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    dfd0:	9b01      	ldr	r3, [sp, #4]
    dfd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dfd6:	bf00      	nop
    dfd8:	b003      	add	sp, #12
    dfda:	f85d fb04 	ldr.w	pc, [sp], #4
    dfde:	bf00      	nop
    dfe0:	1fff90cc 	.word	0x1fff90cc
    dfe4:	1fff90c8 	.word	0x1fff90c8

0000dfe8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    dfe8:	b500      	push	{lr}
    dfea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfec:	f7f2 fe34 	bl	c58 <Sys_GetCoreID>
    dff0:	4603      	mov	r3, r0
    dff2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    dff4:	4a0d      	ldr	r2, [pc, #52]	; (e02c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    dff6:	9b01      	ldr	r3, [sp, #4]
    dff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dffc:	1e5a      	subs	r2, r3, #1
    dffe:	490b      	ldr	r1, [pc, #44]	; (e02c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    e000:	9b01      	ldr	r3, [sp, #4]
    e002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    e006:	4a0a      	ldr	r2, [pc, #40]	; (e030 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    e008:	9b01      	ldr	r3, [sp, #4]
    e00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e00e:	f003 0301 	and.w	r3, r3, #1
    e012:	2b00      	cmp	r3, #0
    e014:	d106      	bne.n	e024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    e016:	4a05      	ldr	r2, [pc, #20]	; (e02c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    e018:	9b01      	ldr	r3, [sp, #4]
    e01a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e01e:	2b00      	cmp	r3, #0
    e020:	d100      	bne.n	e024 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e022:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e024:	bf00      	nop
    e026:	b003      	add	sp, #12
    e028:	f85d fb04 	ldr.w	pc, [sp], #4
    e02c:	1fff90cc 	.word	0x1fff90cc
    e030:	1fff90c8 	.word	0x1fff90c8

0000e034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    e034:	b500      	push	{lr}
    e036:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e038:	f7f2 fe0e 	bl	c58 <Sys_GetCoreID>
    e03c:	4603      	mov	r3, r0
    e03e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    e040:	4a10      	ldr	r2, [pc, #64]	; (e084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    e042:	9b01      	ldr	r3, [sp, #4]
    e044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e048:	2b00      	cmp	r3, #0
    e04a:	d10d      	bne.n	e068 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e04c:	f7f2 fd34 	bl	ab8 <Port_schm_read_msr>
    e050:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e052:	9b00      	ldr	r3, [sp, #0]
    e054:	f003 0301 	and.w	r3, r3, #1
    e058:	2b00      	cmp	r3, #0
    e05a:	d100      	bne.n	e05e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e05c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    e05e:	490a      	ldr	r1, [pc, #40]	; (e088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    e060:	9b01      	ldr	r3, [sp, #4]
    e062:	9a00      	ldr	r2, [sp, #0]
    e064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    e068:	4a06      	ldr	r2, [pc, #24]	; (e084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    e06a:	9b01      	ldr	r3, [sp, #4]
    e06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e070:	1c5a      	adds	r2, r3, #1
    e072:	4904      	ldr	r1, [pc, #16]	; (e084 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    e074:	9b01      	ldr	r3, [sp, #4]
    e076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e07a:	bf00      	nop
    e07c:	b003      	add	sp, #12
    e07e:	f85d fb04 	ldr.w	pc, [sp], #4
    e082:	bf00      	nop
    e084:	1fff90d4 	.word	0x1fff90d4
    e088:	1fff90d0 	.word	0x1fff90d0

0000e08c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    e08c:	b500      	push	{lr}
    e08e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e090:	f7f2 fde2 	bl	c58 <Sys_GetCoreID>
    e094:	4603      	mov	r3, r0
    e096:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    e098:	4a0d      	ldr	r2, [pc, #52]	; (e0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    e09a:	9b01      	ldr	r3, [sp, #4]
    e09c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0a0:	1e5a      	subs	r2, r3, #1
    e0a2:	490b      	ldr	r1, [pc, #44]	; (e0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    e0a4:	9b01      	ldr	r3, [sp, #4]
    e0a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    e0aa:	4a0a      	ldr	r2, [pc, #40]	; (e0d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    e0ac:	9b01      	ldr	r3, [sp, #4]
    e0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0b2:	f003 0301 	and.w	r3, r3, #1
    e0b6:	2b00      	cmp	r3, #0
    e0b8:	d106      	bne.n	e0c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    e0ba:	4a05      	ldr	r2, [pc, #20]	; (e0d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    e0bc:	9b01      	ldr	r3, [sp, #4]
    e0be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	d100      	bne.n	e0c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e0c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e0c8:	bf00      	nop
    e0ca:	b003      	add	sp, #12
    e0cc:	f85d fb04 	ldr.w	pc, [sp], #4
    e0d0:	1fff90d4 	.word	0x1fff90d4
    e0d4:	1fff90d0 	.word	0x1fff90d0

0000e0d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    e0d8:	b500      	push	{lr}
    e0da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0dc:	f7f2 fdbc 	bl	c58 <Sys_GetCoreID>
    e0e0:	4603      	mov	r3, r0
    e0e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    e0e4:	4a10      	ldr	r2, [pc, #64]	; (e128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    e0e6:	9b01      	ldr	r3, [sp, #4]
    e0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0ec:	2b00      	cmp	r3, #0
    e0ee:	d10d      	bne.n	e10c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e0f0:	f7f2 fce2 	bl	ab8 <Port_schm_read_msr>
    e0f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e0f6:	9b00      	ldr	r3, [sp, #0]
    e0f8:	f003 0301 	and.w	r3, r3, #1
    e0fc:	2b00      	cmp	r3, #0
    e0fe:	d100      	bne.n	e102 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e100:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    e102:	490a      	ldr	r1, [pc, #40]	; (e12c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    e104:	9b01      	ldr	r3, [sp, #4]
    e106:	9a00      	ldr	r2, [sp, #0]
    e108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    e10c:	4a06      	ldr	r2, [pc, #24]	; (e128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    e10e:	9b01      	ldr	r3, [sp, #4]
    e110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e114:	1c5a      	adds	r2, r3, #1
    e116:	4904      	ldr	r1, [pc, #16]	; (e128 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    e118:	9b01      	ldr	r3, [sp, #4]
    e11a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e11e:	bf00      	nop
    e120:	b003      	add	sp, #12
    e122:	f85d fb04 	ldr.w	pc, [sp], #4
    e126:	bf00      	nop
    e128:	1fff90dc 	.word	0x1fff90dc
    e12c:	1fff90d8 	.word	0x1fff90d8

0000e130 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    e130:	b500      	push	{lr}
    e132:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e134:	f7f2 fd90 	bl	c58 <Sys_GetCoreID>
    e138:	4603      	mov	r3, r0
    e13a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    e13c:	4a0d      	ldr	r2, [pc, #52]	; (e174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    e13e:	9b01      	ldr	r3, [sp, #4]
    e140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e144:	1e5a      	subs	r2, r3, #1
    e146:	490b      	ldr	r1, [pc, #44]	; (e174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    e148:	9b01      	ldr	r3, [sp, #4]
    e14a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    e14e:	4a0a      	ldr	r2, [pc, #40]	; (e178 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    e150:	9b01      	ldr	r3, [sp, #4]
    e152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e156:	f003 0301 	and.w	r3, r3, #1
    e15a:	2b00      	cmp	r3, #0
    e15c:	d106      	bne.n	e16c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    e15e:	4a05      	ldr	r2, [pc, #20]	; (e174 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    e160:	9b01      	ldr	r3, [sp, #4]
    e162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e166:	2b00      	cmp	r3, #0
    e168:	d100      	bne.n	e16c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e16a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e16c:	bf00      	nop
    e16e:	b003      	add	sp, #12
    e170:	f85d fb04 	ldr.w	pc, [sp], #4
    e174:	1fff90dc 	.word	0x1fff90dc
    e178:	1fff90d8 	.word	0x1fff90d8

0000e17c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    e17c:	b500      	push	{lr}
    e17e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e180:	f7f2 fd6a 	bl	c58 <Sys_GetCoreID>
    e184:	4603      	mov	r3, r0
    e186:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    e188:	4a10      	ldr	r2, [pc, #64]	; (e1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    e18a:	9b01      	ldr	r3, [sp, #4]
    e18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e190:	2b00      	cmp	r3, #0
    e192:	d10d      	bne.n	e1b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e194:	f7f2 fc90 	bl	ab8 <Port_schm_read_msr>
    e198:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e19a:	9b00      	ldr	r3, [sp, #0]
    e19c:	f003 0301 	and.w	r3, r3, #1
    e1a0:	2b00      	cmp	r3, #0
    e1a2:	d100      	bne.n	e1a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e1a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    e1a6:	490a      	ldr	r1, [pc, #40]	; (e1d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    e1a8:	9b01      	ldr	r3, [sp, #4]
    e1aa:	9a00      	ldr	r2, [sp, #0]
    e1ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    e1b0:	4a06      	ldr	r2, [pc, #24]	; (e1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    e1b2:	9b01      	ldr	r3, [sp, #4]
    e1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1b8:	1c5a      	adds	r2, r3, #1
    e1ba:	4904      	ldr	r1, [pc, #16]	; (e1cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    e1bc:	9b01      	ldr	r3, [sp, #4]
    e1be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e1c2:	bf00      	nop
    e1c4:	b003      	add	sp, #12
    e1c6:	f85d fb04 	ldr.w	pc, [sp], #4
    e1ca:	bf00      	nop
    e1cc:	1fff90e4 	.word	0x1fff90e4
    e1d0:	1fff90e0 	.word	0x1fff90e0

0000e1d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    e1d4:	b500      	push	{lr}
    e1d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1d8:	f7f2 fd3e 	bl	c58 <Sys_GetCoreID>
    e1dc:	4603      	mov	r3, r0
    e1de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    e1e0:	4a0d      	ldr	r2, [pc, #52]	; (e218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    e1e2:	9b01      	ldr	r3, [sp, #4]
    e1e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1e8:	1e5a      	subs	r2, r3, #1
    e1ea:	490b      	ldr	r1, [pc, #44]	; (e218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    e1ec:	9b01      	ldr	r3, [sp, #4]
    e1ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    e1f2:	4a0a      	ldr	r2, [pc, #40]	; (e21c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    e1f4:	9b01      	ldr	r3, [sp, #4]
    e1f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1fa:	f003 0301 	and.w	r3, r3, #1
    e1fe:	2b00      	cmp	r3, #0
    e200:	d106      	bne.n	e210 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    e202:	4a05      	ldr	r2, [pc, #20]	; (e218 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    e204:	9b01      	ldr	r3, [sp, #4]
    e206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e20a:	2b00      	cmp	r3, #0
    e20c:	d100      	bne.n	e210 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e20e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e210:	bf00      	nop
    e212:	b003      	add	sp, #12
    e214:	f85d fb04 	ldr.w	pc, [sp], #4
    e218:	1fff90e4 	.word	0x1fff90e4
    e21c:	1fff90e0 	.word	0x1fff90e0

0000e220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    e220:	b500      	push	{lr}
    e222:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e224:	f7f2 fd18 	bl	c58 <Sys_GetCoreID>
    e228:	4603      	mov	r3, r0
    e22a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    e22c:	4a10      	ldr	r2, [pc, #64]	; (e270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    e22e:	9b01      	ldr	r3, [sp, #4]
    e230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e234:	2b00      	cmp	r3, #0
    e236:	d10d      	bne.n	e254 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e238:	f7f2 fc3e 	bl	ab8 <Port_schm_read_msr>
    e23c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e23e:	9b00      	ldr	r3, [sp, #0]
    e240:	f003 0301 	and.w	r3, r3, #1
    e244:	2b00      	cmp	r3, #0
    e246:	d100      	bne.n	e24a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e248:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    e24a:	490a      	ldr	r1, [pc, #40]	; (e274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    e24c:	9b01      	ldr	r3, [sp, #4]
    e24e:	9a00      	ldr	r2, [sp, #0]
    e250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    e254:	4a06      	ldr	r2, [pc, #24]	; (e270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    e256:	9b01      	ldr	r3, [sp, #4]
    e258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e25c:	1c5a      	adds	r2, r3, #1
    e25e:	4904      	ldr	r1, [pc, #16]	; (e270 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    e260:	9b01      	ldr	r3, [sp, #4]
    e262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e266:	bf00      	nop
    e268:	b003      	add	sp, #12
    e26a:	f85d fb04 	ldr.w	pc, [sp], #4
    e26e:	bf00      	nop
    e270:	1fff90ec 	.word	0x1fff90ec
    e274:	1fff90e8 	.word	0x1fff90e8

0000e278 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    e278:	b500      	push	{lr}
    e27a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e27c:	f7f2 fcec 	bl	c58 <Sys_GetCoreID>
    e280:	4603      	mov	r3, r0
    e282:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    e284:	4a0d      	ldr	r2, [pc, #52]	; (e2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    e286:	9b01      	ldr	r3, [sp, #4]
    e288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e28c:	1e5a      	subs	r2, r3, #1
    e28e:	490b      	ldr	r1, [pc, #44]	; (e2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    e290:	9b01      	ldr	r3, [sp, #4]
    e292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    e296:	4a0a      	ldr	r2, [pc, #40]	; (e2c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    e298:	9b01      	ldr	r3, [sp, #4]
    e29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e29e:	f003 0301 	and.w	r3, r3, #1
    e2a2:	2b00      	cmp	r3, #0
    e2a4:	d106      	bne.n	e2b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    e2a6:	4a05      	ldr	r2, [pc, #20]	; (e2bc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    e2a8:	9b01      	ldr	r3, [sp, #4]
    e2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2ae:	2b00      	cmp	r3, #0
    e2b0:	d100      	bne.n	e2b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e2b2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e2b4:	bf00      	nop
    e2b6:	b003      	add	sp, #12
    e2b8:	f85d fb04 	ldr.w	pc, [sp], #4
    e2bc:	1fff90ec 	.word	0x1fff90ec
    e2c0:	1fff90e8 	.word	0x1fff90e8

0000e2c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    e2c4:	b500      	push	{lr}
    e2c6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2c8:	f7f2 fcc6 	bl	c58 <Sys_GetCoreID>
    e2cc:	4603      	mov	r3, r0
    e2ce:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    e2d0:	4a10      	ldr	r2, [pc, #64]	; (e314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    e2d2:	9b01      	ldr	r3, [sp, #4]
    e2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2d8:	2b00      	cmp	r3, #0
    e2da:	d10d      	bne.n	e2f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e2dc:	f7f2 fbec 	bl	ab8 <Port_schm_read_msr>
    e2e0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e2e2:	9b00      	ldr	r3, [sp, #0]
    e2e4:	f003 0301 	and.w	r3, r3, #1
    e2e8:	2b00      	cmp	r3, #0
    e2ea:	d100      	bne.n	e2ee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e2ec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    e2ee:	490a      	ldr	r1, [pc, #40]	; (e318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    e2f0:	9b01      	ldr	r3, [sp, #4]
    e2f2:	9a00      	ldr	r2, [sp, #0]
    e2f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    e2f8:	4a06      	ldr	r2, [pc, #24]	; (e314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    e2fa:	9b01      	ldr	r3, [sp, #4]
    e2fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e300:	1c5a      	adds	r2, r3, #1
    e302:	4904      	ldr	r1, [pc, #16]	; (e314 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    e304:	9b01      	ldr	r3, [sp, #4]
    e306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e30a:	bf00      	nop
    e30c:	b003      	add	sp, #12
    e30e:	f85d fb04 	ldr.w	pc, [sp], #4
    e312:	bf00      	nop
    e314:	1fff90f4 	.word	0x1fff90f4
    e318:	1fff90f0 	.word	0x1fff90f0

0000e31c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    e31c:	b500      	push	{lr}
    e31e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e320:	f7f2 fc9a 	bl	c58 <Sys_GetCoreID>
    e324:	4603      	mov	r3, r0
    e326:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    e328:	4a0d      	ldr	r2, [pc, #52]	; (e360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    e32a:	9b01      	ldr	r3, [sp, #4]
    e32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e330:	1e5a      	subs	r2, r3, #1
    e332:	490b      	ldr	r1, [pc, #44]	; (e360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    e334:	9b01      	ldr	r3, [sp, #4]
    e336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    e33a:	4a0a      	ldr	r2, [pc, #40]	; (e364 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    e33c:	9b01      	ldr	r3, [sp, #4]
    e33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e342:	f003 0301 	and.w	r3, r3, #1
    e346:	2b00      	cmp	r3, #0
    e348:	d106      	bne.n	e358 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    e34a:	4a05      	ldr	r2, [pc, #20]	; (e360 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    e34c:	9b01      	ldr	r3, [sp, #4]
    e34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e352:	2b00      	cmp	r3, #0
    e354:	d100      	bne.n	e358 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e356:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e358:	bf00      	nop
    e35a:	b003      	add	sp, #12
    e35c:	f85d fb04 	ldr.w	pc, [sp], #4
    e360:	1fff90f4 	.word	0x1fff90f4
    e364:	1fff90f0 	.word	0x1fff90f0

0000e368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    e368:	b500      	push	{lr}
    e36a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e36c:	f7f2 fc74 	bl	c58 <Sys_GetCoreID>
    e370:	4603      	mov	r3, r0
    e372:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    e374:	4a10      	ldr	r2, [pc, #64]	; (e3b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    e376:	9b01      	ldr	r3, [sp, #4]
    e378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e37c:	2b00      	cmp	r3, #0
    e37e:	d10d      	bne.n	e39c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e380:	f7f2 fb9a 	bl	ab8 <Port_schm_read_msr>
    e384:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e386:	9b00      	ldr	r3, [sp, #0]
    e388:	f003 0301 	and.w	r3, r3, #1
    e38c:	2b00      	cmp	r3, #0
    e38e:	d100      	bne.n	e392 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e390:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    e392:	490a      	ldr	r1, [pc, #40]	; (e3bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    e394:	9b01      	ldr	r3, [sp, #4]
    e396:	9a00      	ldr	r2, [sp, #0]
    e398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    e39c:	4a06      	ldr	r2, [pc, #24]	; (e3b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    e39e:	9b01      	ldr	r3, [sp, #4]
    e3a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3a4:	1c5a      	adds	r2, r3, #1
    e3a6:	4904      	ldr	r1, [pc, #16]	; (e3b8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    e3a8:	9b01      	ldr	r3, [sp, #4]
    e3aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e3ae:	bf00      	nop
    e3b0:	b003      	add	sp, #12
    e3b2:	f85d fb04 	ldr.w	pc, [sp], #4
    e3b6:	bf00      	nop
    e3b8:	1fff90fc 	.word	0x1fff90fc
    e3bc:	1fff90f8 	.word	0x1fff90f8

0000e3c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    e3c0:	b500      	push	{lr}
    e3c2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3c4:	f7f2 fc48 	bl	c58 <Sys_GetCoreID>
    e3c8:	4603      	mov	r3, r0
    e3ca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    e3cc:	4a0d      	ldr	r2, [pc, #52]	; (e404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    e3ce:	9b01      	ldr	r3, [sp, #4]
    e3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3d4:	1e5a      	subs	r2, r3, #1
    e3d6:	490b      	ldr	r1, [pc, #44]	; (e404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    e3d8:	9b01      	ldr	r3, [sp, #4]
    e3da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    e3de:	4a0a      	ldr	r2, [pc, #40]	; (e408 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    e3e0:	9b01      	ldr	r3, [sp, #4]
    e3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3e6:	f003 0301 	and.w	r3, r3, #1
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	d106      	bne.n	e3fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    e3ee:	4a05      	ldr	r2, [pc, #20]	; (e404 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    e3f0:	9b01      	ldr	r3, [sp, #4]
    e3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3f6:	2b00      	cmp	r3, #0
    e3f8:	d100      	bne.n	e3fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3fa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e3fc:	bf00      	nop
    e3fe:	b003      	add	sp, #12
    e400:	f85d fb04 	ldr.w	pc, [sp], #4
    e404:	1fff90fc 	.word	0x1fff90fc
    e408:	1fff90f8 	.word	0x1fff90f8

0000e40c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    e40c:	b500      	push	{lr}
    e40e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e410:	f7f2 fc22 	bl	c58 <Sys_GetCoreID>
    e414:	4603      	mov	r3, r0
    e416:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    e418:	4a10      	ldr	r2, [pc, #64]	; (e45c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    e41a:	9b01      	ldr	r3, [sp, #4]
    e41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e420:	2b00      	cmp	r3, #0
    e422:	d10d      	bne.n	e440 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e424:	f7f2 fb48 	bl	ab8 <Port_schm_read_msr>
    e428:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e42a:	9b00      	ldr	r3, [sp, #0]
    e42c:	f003 0301 	and.w	r3, r3, #1
    e430:	2b00      	cmp	r3, #0
    e432:	d100      	bne.n	e436 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e434:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    e436:	490a      	ldr	r1, [pc, #40]	; (e460 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    e438:	9b01      	ldr	r3, [sp, #4]
    e43a:	9a00      	ldr	r2, [sp, #0]
    e43c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    e440:	4a06      	ldr	r2, [pc, #24]	; (e45c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    e442:	9b01      	ldr	r3, [sp, #4]
    e444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e448:	1c5a      	adds	r2, r3, #1
    e44a:	4904      	ldr	r1, [pc, #16]	; (e45c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    e44c:	9b01      	ldr	r3, [sp, #4]
    e44e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e452:	bf00      	nop
    e454:	b003      	add	sp, #12
    e456:	f85d fb04 	ldr.w	pc, [sp], #4
    e45a:	bf00      	nop
    e45c:	1fff9104 	.word	0x1fff9104
    e460:	1fff9100 	.word	0x1fff9100

0000e464 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    e464:	b500      	push	{lr}
    e466:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e468:	f7f2 fbf6 	bl	c58 <Sys_GetCoreID>
    e46c:	4603      	mov	r3, r0
    e46e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    e470:	4a0d      	ldr	r2, [pc, #52]	; (e4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    e472:	9b01      	ldr	r3, [sp, #4]
    e474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e478:	1e5a      	subs	r2, r3, #1
    e47a:	490b      	ldr	r1, [pc, #44]	; (e4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    e47c:	9b01      	ldr	r3, [sp, #4]
    e47e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    e482:	4a0a      	ldr	r2, [pc, #40]	; (e4ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    e484:	9b01      	ldr	r3, [sp, #4]
    e486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e48a:	f003 0301 	and.w	r3, r3, #1
    e48e:	2b00      	cmp	r3, #0
    e490:	d106      	bne.n	e4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    e492:	4a05      	ldr	r2, [pc, #20]	; (e4a8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    e494:	9b01      	ldr	r3, [sp, #4]
    e496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e49a:	2b00      	cmp	r3, #0
    e49c:	d100      	bne.n	e4a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e49e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e4a0:	bf00      	nop
    e4a2:	b003      	add	sp, #12
    e4a4:	f85d fb04 	ldr.w	pc, [sp], #4
    e4a8:	1fff9104 	.word	0x1fff9104
    e4ac:	1fff9100 	.word	0x1fff9100

0000e4b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    e4b0:	b500      	push	{lr}
    e4b2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4b4:	f7f2 fbd0 	bl	c58 <Sys_GetCoreID>
    e4b8:	4603      	mov	r3, r0
    e4ba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    e4bc:	4a10      	ldr	r2, [pc, #64]	; (e500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    e4be:	9b01      	ldr	r3, [sp, #4]
    e4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4c4:	2b00      	cmp	r3, #0
    e4c6:	d10d      	bne.n	e4e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e4c8:	f7f2 faf6 	bl	ab8 <Port_schm_read_msr>
    e4cc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e4ce:	9b00      	ldr	r3, [sp, #0]
    e4d0:	f003 0301 	and.w	r3, r3, #1
    e4d4:	2b00      	cmp	r3, #0
    e4d6:	d100      	bne.n	e4da <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e4d8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    e4da:	490a      	ldr	r1, [pc, #40]	; (e504 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    e4dc:	9b01      	ldr	r3, [sp, #4]
    e4de:	9a00      	ldr	r2, [sp, #0]
    e4e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    e4e4:	4a06      	ldr	r2, [pc, #24]	; (e500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    e4e6:	9b01      	ldr	r3, [sp, #4]
    e4e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ec:	1c5a      	adds	r2, r3, #1
    e4ee:	4904      	ldr	r1, [pc, #16]	; (e500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    e4f0:	9b01      	ldr	r3, [sp, #4]
    e4f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4f6:	bf00      	nop
    e4f8:	b003      	add	sp, #12
    e4fa:	f85d fb04 	ldr.w	pc, [sp], #4
    e4fe:	bf00      	nop
    e500:	1fff910c 	.word	0x1fff910c
    e504:	1fff9108 	.word	0x1fff9108

0000e508 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    e508:	b500      	push	{lr}
    e50a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e50c:	f7f2 fba4 	bl	c58 <Sys_GetCoreID>
    e510:	4603      	mov	r3, r0
    e512:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    e514:	4a0d      	ldr	r2, [pc, #52]	; (e54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    e516:	9b01      	ldr	r3, [sp, #4]
    e518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e51c:	1e5a      	subs	r2, r3, #1
    e51e:	490b      	ldr	r1, [pc, #44]	; (e54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    e520:	9b01      	ldr	r3, [sp, #4]
    e522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    e526:	4a0a      	ldr	r2, [pc, #40]	; (e550 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    e528:	9b01      	ldr	r3, [sp, #4]
    e52a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e52e:	f003 0301 	and.w	r3, r3, #1
    e532:	2b00      	cmp	r3, #0
    e534:	d106      	bne.n	e544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    e536:	4a05      	ldr	r2, [pc, #20]	; (e54c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    e538:	9b01      	ldr	r3, [sp, #4]
    e53a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e53e:	2b00      	cmp	r3, #0
    e540:	d100      	bne.n	e544 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e542:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e544:	bf00      	nop
    e546:	b003      	add	sp, #12
    e548:	f85d fb04 	ldr.w	pc, [sp], #4
    e54c:	1fff910c 	.word	0x1fff910c
    e550:	1fff9108 	.word	0x1fff9108

0000e554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    e554:	b500      	push	{lr}
    e556:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e558:	f7f2 fb7e 	bl	c58 <Sys_GetCoreID>
    e55c:	4603      	mov	r3, r0
    e55e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    e560:	4a10      	ldr	r2, [pc, #64]	; (e5a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    e562:	9b01      	ldr	r3, [sp, #4]
    e564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e568:	2b00      	cmp	r3, #0
    e56a:	d10d      	bne.n	e588 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e56c:	f7f2 faa4 	bl	ab8 <Port_schm_read_msr>
    e570:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e572:	9b00      	ldr	r3, [sp, #0]
    e574:	f003 0301 	and.w	r3, r3, #1
    e578:	2b00      	cmp	r3, #0
    e57a:	d100      	bne.n	e57e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e57c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    e57e:	490a      	ldr	r1, [pc, #40]	; (e5a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    e580:	9b01      	ldr	r3, [sp, #4]
    e582:	9a00      	ldr	r2, [sp, #0]
    e584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    e588:	4a06      	ldr	r2, [pc, #24]	; (e5a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    e58a:	9b01      	ldr	r3, [sp, #4]
    e58c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e590:	1c5a      	adds	r2, r3, #1
    e592:	4904      	ldr	r1, [pc, #16]	; (e5a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    e594:	9b01      	ldr	r3, [sp, #4]
    e596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e59a:	bf00      	nop
    e59c:	b003      	add	sp, #12
    e59e:	f85d fb04 	ldr.w	pc, [sp], #4
    e5a2:	bf00      	nop
    e5a4:	1fff9114 	.word	0x1fff9114
    e5a8:	1fff9110 	.word	0x1fff9110

0000e5ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    e5ac:	b500      	push	{lr}
    e5ae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5b0:	f7f2 fb52 	bl	c58 <Sys_GetCoreID>
    e5b4:	4603      	mov	r3, r0
    e5b6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    e5b8:	4a0d      	ldr	r2, [pc, #52]	; (e5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    e5ba:	9b01      	ldr	r3, [sp, #4]
    e5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5c0:	1e5a      	subs	r2, r3, #1
    e5c2:	490b      	ldr	r1, [pc, #44]	; (e5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    e5c4:	9b01      	ldr	r3, [sp, #4]
    e5c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    e5ca:	4a0a      	ldr	r2, [pc, #40]	; (e5f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    e5cc:	9b01      	ldr	r3, [sp, #4]
    e5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5d2:	f003 0301 	and.w	r3, r3, #1
    e5d6:	2b00      	cmp	r3, #0
    e5d8:	d106      	bne.n	e5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    e5da:	4a05      	ldr	r2, [pc, #20]	; (e5f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    e5dc:	9b01      	ldr	r3, [sp, #4]
    e5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5e2:	2b00      	cmp	r3, #0
    e5e4:	d100      	bne.n	e5e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e5e6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e5e8:	bf00      	nop
    e5ea:	b003      	add	sp, #12
    e5ec:	f85d fb04 	ldr.w	pc, [sp], #4
    e5f0:	1fff9114 	.word	0x1fff9114
    e5f4:	1fff9110 	.word	0x1fff9110

0000e5f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    e5f8:	b500      	push	{lr}
    e5fa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5fc:	f7f2 fb2c 	bl	c58 <Sys_GetCoreID>
    e600:	4603      	mov	r3, r0
    e602:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    e604:	4a10      	ldr	r2, [pc, #64]	; (e648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    e606:	9b01      	ldr	r3, [sp, #4]
    e608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e60c:	2b00      	cmp	r3, #0
    e60e:	d10d      	bne.n	e62c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e610:	f7f2 fa52 	bl	ab8 <Port_schm_read_msr>
    e614:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e616:	9b00      	ldr	r3, [sp, #0]
    e618:	f003 0301 	and.w	r3, r3, #1
    e61c:	2b00      	cmp	r3, #0
    e61e:	d100      	bne.n	e622 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e620:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    e622:	490a      	ldr	r1, [pc, #40]	; (e64c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    e624:	9b01      	ldr	r3, [sp, #4]
    e626:	9a00      	ldr	r2, [sp, #0]
    e628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    e62c:	4a06      	ldr	r2, [pc, #24]	; (e648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    e62e:	9b01      	ldr	r3, [sp, #4]
    e630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e634:	1c5a      	adds	r2, r3, #1
    e636:	4904      	ldr	r1, [pc, #16]	; (e648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    e638:	9b01      	ldr	r3, [sp, #4]
    e63a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e63e:	bf00      	nop
    e640:	b003      	add	sp, #12
    e642:	f85d fb04 	ldr.w	pc, [sp], #4
    e646:	bf00      	nop
    e648:	1fff911c 	.word	0x1fff911c
    e64c:	1fff9118 	.word	0x1fff9118

0000e650 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    e650:	b500      	push	{lr}
    e652:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e654:	f7f2 fb00 	bl	c58 <Sys_GetCoreID>
    e658:	4603      	mov	r3, r0
    e65a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    e65c:	4a0d      	ldr	r2, [pc, #52]	; (e694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    e65e:	9b01      	ldr	r3, [sp, #4]
    e660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e664:	1e5a      	subs	r2, r3, #1
    e666:	490b      	ldr	r1, [pc, #44]	; (e694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    e668:	9b01      	ldr	r3, [sp, #4]
    e66a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    e66e:	4a0a      	ldr	r2, [pc, #40]	; (e698 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    e670:	9b01      	ldr	r3, [sp, #4]
    e672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e676:	f003 0301 	and.w	r3, r3, #1
    e67a:	2b00      	cmp	r3, #0
    e67c:	d106      	bne.n	e68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    e67e:	4a05      	ldr	r2, [pc, #20]	; (e694 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    e680:	9b01      	ldr	r3, [sp, #4]
    e682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e686:	2b00      	cmp	r3, #0
    e688:	d100      	bne.n	e68c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e68a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e68c:	bf00      	nop
    e68e:	b003      	add	sp, #12
    e690:	f85d fb04 	ldr.w	pc, [sp], #4
    e694:	1fff911c 	.word	0x1fff911c
    e698:	1fff9118 	.word	0x1fff9118

0000e69c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    e69c:	b500      	push	{lr}
    e69e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6a0:	f7f2 fada 	bl	c58 <Sys_GetCoreID>
    e6a4:	4603      	mov	r3, r0
    e6a6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    e6a8:	4a10      	ldr	r2, [pc, #64]	; (e6ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    e6aa:	9b01      	ldr	r3, [sp, #4]
    e6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6b0:	2b00      	cmp	r3, #0
    e6b2:	d10d      	bne.n	e6d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e6b4:	f7f2 fa00 	bl	ab8 <Port_schm_read_msr>
    e6b8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e6ba:	9b00      	ldr	r3, [sp, #0]
    e6bc:	f003 0301 	and.w	r3, r3, #1
    e6c0:	2b00      	cmp	r3, #0
    e6c2:	d100      	bne.n	e6c6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e6c4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    e6c6:	490a      	ldr	r1, [pc, #40]	; (e6f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    e6c8:	9b01      	ldr	r3, [sp, #4]
    e6ca:	9a00      	ldr	r2, [sp, #0]
    e6cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    e6d0:	4a06      	ldr	r2, [pc, #24]	; (e6ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    e6d2:	9b01      	ldr	r3, [sp, #4]
    e6d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6d8:	1c5a      	adds	r2, r3, #1
    e6da:	4904      	ldr	r1, [pc, #16]	; (e6ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    e6dc:	9b01      	ldr	r3, [sp, #4]
    e6de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e6e2:	bf00      	nop
    e6e4:	b003      	add	sp, #12
    e6e6:	f85d fb04 	ldr.w	pc, [sp], #4
    e6ea:	bf00      	nop
    e6ec:	1fff9124 	.word	0x1fff9124
    e6f0:	1fff9120 	.word	0x1fff9120

0000e6f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    e6f4:	b500      	push	{lr}
    e6f6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6f8:	f7f2 faae 	bl	c58 <Sys_GetCoreID>
    e6fc:	4603      	mov	r3, r0
    e6fe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    e700:	4a0d      	ldr	r2, [pc, #52]	; (e738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    e702:	9b01      	ldr	r3, [sp, #4]
    e704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e708:	1e5a      	subs	r2, r3, #1
    e70a:	490b      	ldr	r1, [pc, #44]	; (e738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    e70c:	9b01      	ldr	r3, [sp, #4]
    e70e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    e712:	4a0a      	ldr	r2, [pc, #40]	; (e73c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    e714:	9b01      	ldr	r3, [sp, #4]
    e716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e71a:	f003 0301 	and.w	r3, r3, #1
    e71e:	2b00      	cmp	r3, #0
    e720:	d106      	bne.n	e730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    e722:	4a05      	ldr	r2, [pc, #20]	; (e738 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    e724:	9b01      	ldr	r3, [sp, #4]
    e726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e72a:	2b00      	cmp	r3, #0
    e72c:	d100      	bne.n	e730 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e72e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e730:	bf00      	nop
    e732:	b003      	add	sp, #12
    e734:	f85d fb04 	ldr.w	pc, [sp], #4
    e738:	1fff9124 	.word	0x1fff9124
    e73c:	1fff9120 	.word	0x1fff9120

0000e740 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    e740:	b500      	push	{lr}
    e742:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e744:	f7f2 fa88 	bl	c58 <Sys_GetCoreID>
    e748:	4603      	mov	r3, r0
    e74a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    e74c:	4a10      	ldr	r2, [pc, #64]	; (e790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    e74e:	9b01      	ldr	r3, [sp, #4]
    e750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e754:	2b00      	cmp	r3, #0
    e756:	d10d      	bne.n	e774 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e758:	f7f2 f9ae 	bl	ab8 <Port_schm_read_msr>
    e75c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e75e:	9b00      	ldr	r3, [sp, #0]
    e760:	f003 0301 	and.w	r3, r3, #1
    e764:	2b00      	cmp	r3, #0
    e766:	d100      	bne.n	e76a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e768:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    e76a:	490a      	ldr	r1, [pc, #40]	; (e794 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    e76c:	9b01      	ldr	r3, [sp, #4]
    e76e:	9a00      	ldr	r2, [sp, #0]
    e770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    e774:	4a06      	ldr	r2, [pc, #24]	; (e790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    e776:	9b01      	ldr	r3, [sp, #4]
    e778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e77c:	1c5a      	adds	r2, r3, #1
    e77e:	4904      	ldr	r1, [pc, #16]	; (e790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    e780:	9b01      	ldr	r3, [sp, #4]
    e782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e786:	bf00      	nop
    e788:	b003      	add	sp, #12
    e78a:	f85d fb04 	ldr.w	pc, [sp], #4
    e78e:	bf00      	nop
    e790:	1fff912c 	.word	0x1fff912c
    e794:	1fff9128 	.word	0x1fff9128

0000e798 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    e798:	b500      	push	{lr}
    e79a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e79c:	f7f2 fa5c 	bl	c58 <Sys_GetCoreID>
    e7a0:	4603      	mov	r3, r0
    e7a2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    e7a4:	4a0d      	ldr	r2, [pc, #52]	; (e7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    e7a6:	9b01      	ldr	r3, [sp, #4]
    e7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ac:	1e5a      	subs	r2, r3, #1
    e7ae:	490b      	ldr	r1, [pc, #44]	; (e7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    e7b0:	9b01      	ldr	r3, [sp, #4]
    e7b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    e7b6:	4a0a      	ldr	r2, [pc, #40]	; (e7e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    e7b8:	9b01      	ldr	r3, [sp, #4]
    e7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7be:	f003 0301 	and.w	r3, r3, #1
    e7c2:	2b00      	cmp	r3, #0
    e7c4:	d106      	bne.n	e7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    e7c6:	4a05      	ldr	r2, [pc, #20]	; (e7dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    e7c8:	9b01      	ldr	r3, [sp, #4]
    e7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7ce:	2b00      	cmp	r3, #0
    e7d0:	d100      	bne.n	e7d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e7d2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e7d4:	bf00      	nop
    e7d6:	b003      	add	sp, #12
    e7d8:	f85d fb04 	ldr.w	pc, [sp], #4
    e7dc:	1fff912c 	.word	0x1fff912c
    e7e0:	1fff9128 	.word	0x1fff9128

0000e7e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    e7e4:	b500      	push	{lr}
    e7e6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7e8:	f7f2 fa36 	bl	c58 <Sys_GetCoreID>
    e7ec:	4603      	mov	r3, r0
    e7ee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    e7f0:	4a10      	ldr	r2, [pc, #64]	; (e834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    e7f2:	9b01      	ldr	r3, [sp, #4]
    e7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7f8:	2b00      	cmp	r3, #0
    e7fa:	d10d      	bne.n	e818 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e7fc:	f7f2 f95c 	bl	ab8 <Port_schm_read_msr>
    e800:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e802:	9b00      	ldr	r3, [sp, #0]
    e804:	f003 0301 	and.w	r3, r3, #1
    e808:	2b00      	cmp	r3, #0
    e80a:	d100      	bne.n	e80e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e80c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    e80e:	490a      	ldr	r1, [pc, #40]	; (e838 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    e810:	9b01      	ldr	r3, [sp, #4]
    e812:	9a00      	ldr	r2, [sp, #0]
    e814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    e818:	4a06      	ldr	r2, [pc, #24]	; (e834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    e81a:	9b01      	ldr	r3, [sp, #4]
    e81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e820:	1c5a      	adds	r2, r3, #1
    e822:	4904      	ldr	r1, [pc, #16]	; (e834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    e824:	9b01      	ldr	r3, [sp, #4]
    e826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e82a:	bf00      	nop
    e82c:	b003      	add	sp, #12
    e82e:	f85d fb04 	ldr.w	pc, [sp], #4
    e832:	bf00      	nop
    e834:	1fff9134 	.word	0x1fff9134
    e838:	1fff9130 	.word	0x1fff9130

0000e83c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    e83c:	b500      	push	{lr}
    e83e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e840:	f7f2 fa0a 	bl	c58 <Sys_GetCoreID>
    e844:	4603      	mov	r3, r0
    e846:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    e848:	4a0d      	ldr	r2, [pc, #52]	; (e880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    e84a:	9b01      	ldr	r3, [sp, #4]
    e84c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e850:	1e5a      	subs	r2, r3, #1
    e852:	490b      	ldr	r1, [pc, #44]	; (e880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    e854:	9b01      	ldr	r3, [sp, #4]
    e856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    e85a:	4a0a      	ldr	r2, [pc, #40]	; (e884 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    e85c:	9b01      	ldr	r3, [sp, #4]
    e85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e862:	f003 0301 	and.w	r3, r3, #1
    e866:	2b00      	cmp	r3, #0
    e868:	d106      	bne.n	e878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    e86a:	4a05      	ldr	r2, [pc, #20]	; (e880 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    e86c:	9b01      	ldr	r3, [sp, #4]
    e86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e872:	2b00      	cmp	r3, #0
    e874:	d100      	bne.n	e878 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e876:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e878:	bf00      	nop
    e87a:	b003      	add	sp, #12
    e87c:	f85d fb04 	ldr.w	pc, [sp], #4
    e880:	1fff9134 	.word	0x1fff9134
    e884:	1fff9130 	.word	0x1fff9130

0000e888 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    e888:	b500      	push	{lr}
    e88a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e88c:	f7f2 f9e4 	bl	c58 <Sys_GetCoreID>
    e890:	4603      	mov	r3, r0
    e892:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    e894:	4a10      	ldr	r2, [pc, #64]	; (e8d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    e896:	9b01      	ldr	r3, [sp, #4]
    e898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e89c:	2b00      	cmp	r3, #0
    e89e:	d10d      	bne.n	e8bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e8a0:	f7f2 f90a 	bl	ab8 <Port_schm_read_msr>
    e8a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e8a6:	9b00      	ldr	r3, [sp, #0]
    e8a8:	f003 0301 	and.w	r3, r3, #1
    e8ac:	2b00      	cmp	r3, #0
    e8ae:	d100      	bne.n	e8b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e8b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    e8b2:	490a      	ldr	r1, [pc, #40]	; (e8dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    e8b4:	9b01      	ldr	r3, [sp, #4]
    e8b6:	9a00      	ldr	r2, [sp, #0]
    e8b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    e8bc:	4a06      	ldr	r2, [pc, #24]	; (e8d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    e8be:	9b01      	ldr	r3, [sp, #4]
    e8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8c4:	1c5a      	adds	r2, r3, #1
    e8c6:	4904      	ldr	r1, [pc, #16]	; (e8d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    e8c8:	9b01      	ldr	r3, [sp, #4]
    e8ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e8ce:	bf00      	nop
    e8d0:	b003      	add	sp, #12
    e8d2:	f85d fb04 	ldr.w	pc, [sp], #4
    e8d6:	bf00      	nop
    e8d8:	1fff913c 	.word	0x1fff913c
    e8dc:	1fff9138 	.word	0x1fff9138

0000e8e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    e8e0:	b500      	push	{lr}
    e8e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8e4:	f7f2 f9b8 	bl	c58 <Sys_GetCoreID>
    e8e8:	4603      	mov	r3, r0
    e8ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    e8ec:	4a0d      	ldr	r2, [pc, #52]	; (e924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    e8ee:	9b01      	ldr	r3, [sp, #4]
    e8f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8f4:	1e5a      	subs	r2, r3, #1
    e8f6:	490b      	ldr	r1, [pc, #44]	; (e924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    e8f8:	9b01      	ldr	r3, [sp, #4]
    e8fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    e8fe:	4a0a      	ldr	r2, [pc, #40]	; (e928 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    e900:	9b01      	ldr	r3, [sp, #4]
    e902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e906:	f003 0301 	and.w	r3, r3, #1
    e90a:	2b00      	cmp	r3, #0
    e90c:	d106      	bne.n	e91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    e90e:	4a05      	ldr	r2, [pc, #20]	; (e924 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    e910:	9b01      	ldr	r3, [sp, #4]
    e912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e916:	2b00      	cmp	r3, #0
    e918:	d100      	bne.n	e91c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e91a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e91c:	bf00      	nop
    e91e:	b003      	add	sp, #12
    e920:	f85d fb04 	ldr.w	pc, [sp], #4
    e924:	1fff913c 	.word	0x1fff913c
    e928:	1fff9138 	.word	0x1fff9138

0000e92c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    e92c:	b500      	push	{lr}
    e92e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e930:	f7f2 f992 	bl	c58 <Sys_GetCoreID>
    e934:	4603      	mov	r3, r0
    e936:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    e938:	4a10      	ldr	r2, [pc, #64]	; (e97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    e93a:	9b01      	ldr	r3, [sp, #4]
    e93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e940:	2b00      	cmp	r3, #0
    e942:	d10d      	bne.n	e960 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e944:	f7f2 f8b8 	bl	ab8 <Port_schm_read_msr>
    e948:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e94a:	9b00      	ldr	r3, [sp, #0]
    e94c:	f003 0301 	and.w	r3, r3, #1
    e950:	2b00      	cmp	r3, #0
    e952:	d100      	bne.n	e956 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e954:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    e956:	490a      	ldr	r1, [pc, #40]	; (e980 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    e958:	9b01      	ldr	r3, [sp, #4]
    e95a:	9a00      	ldr	r2, [sp, #0]
    e95c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    e960:	4a06      	ldr	r2, [pc, #24]	; (e97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    e962:	9b01      	ldr	r3, [sp, #4]
    e964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e968:	1c5a      	adds	r2, r3, #1
    e96a:	4904      	ldr	r1, [pc, #16]	; (e97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    e96c:	9b01      	ldr	r3, [sp, #4]
    e96e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e972:	bf00      	nop
    e974:	b003      	add	sp, #12
    e976:	f85d fb04 	ldr.w	pc, [sp], #4
    e97a:	bf00      	nop
    e97c:	1fff9144 	.word	0x1fff9144
    e980:	1fff9140 	.word	0x1fff9140

0000e984 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    e984:	b500      	push	{lr}
    e986:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e988:	f7f2 f966 	bl	c58 <Sys_GetCoreID>
    e98c:	4603      	mov	r3, r0
    e98e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    e990:	4a0d      	ldr	r2, [pc, #52]	; (e9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    e992:	9b01      	ldr	r3, [sp, #4]
    e994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e998:	1e5a      	subs	r2, r3, #1
    e99a:	490b      	ldr	r1, [pc, #44]	; (e9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    e99c:	9b01      	ldr	r3, [sp, #4]
    e99e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    e9a2:	4a0a      	ldr	r2, [pc, #40]	; (e9cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    e9a4:	9b01      	ldr	r3, [sp, #4]
    e9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9aa:	f003 0301 	and.w	r3, r3, #1
    e9ae:	2b00      	cmp	r3, #0
    e9b0:	d106      	bne.n	e9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    e9b2:	4a05      	ldr	r2, [pc, #20]	; (e9c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    e9b4:	9b01      	ldr	r3, [sp, #4]
    e9b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9ba:	2b00      	cmp	r3, #0
    e9bc:	d100      	bne.n	e9c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e9be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e9c0:	bf00      	nop
    e9c2:	b003      	add	sp, #12
    e9c4:	f85d fb04 	ldr.w	pc, [sp], #4
    e9c8:	1fff9144 	.word	0x1fff9144
    e9cc:	1fff9140 	.word	0x1fff9140

0000e9d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    e9d0:	b500      	push	{lr}
    e9d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9d4:	f7f2 f940 	bl	c58 <Sys_GetCoreID>
    e9d8:	4603      	mov	r3, r0
    e9da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    e9dc:	4a10      	ldr	r2, [pc, #64]	; (ea20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    e9de:	9b01      	ldr	r3, [sp, #4]
    e9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9e4:	2b00      	cmp	r3, #0
    e9e6:	d10d      	bne.n	ea04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e9e8:	f7f2 f866 	bl	ab8 <Port_schm_read_msr>
    e9ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e9ee:	9b00      	ldr	r3, [sp, #0]
    e9f0:	f003 0301 	and.w	r3, r3, #1
    e9f4:	2b00      	cmp	r3, #0
    e9f6:	d100      	bne.n	e9fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    e9fa:	490a      	ldr	r1, [pc, #40]	; (ea24 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    e9fc:	9b01      	ldr	r3, [sp, #4]
    e9fe:	9a00      	ldr	r2, [sp, #0]
    ea00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    ea04:	4a06      	ldr	r2, [pc, #24]	; (ea20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    ea06:	9b01      	ldr	r3, [sp, #4]
    ea08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea0c:	1c5a      	adds	r2, r3, #1
    ea0e:	4904      	ldr	r1, [pc, #16]	; (ea20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    ea10:	9b01      	ldr	r3, [sp, #4]
    ea12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea16:	bf00      	nop
    ea18:	b003      	add	sp, #12
    ea1a:	f85d fb04 	ldr.w	pc, [sp], #4
    ea1e:	bf00      	nop
    ea20:	1fff914c 	.word	0x1fff914c
    ea24:	1fff9148 	.word	0x1fff9148

0000ea28 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    ea28:	b500      	push	{lr}
    ea2a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea2c:	f7f2 f914 	bl	c58 <Sys_GetCoreID>
    ea30:	4603      	mov	r3, r0
    ea32:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    ea34:	4a0d      	ldr	r2, [pc, #52]	; (ea6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    ea36:	9b01      	ldr	r3, [sp, #4]
    ea38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea3c:	1e5a      	subs	r2, r3, #1
    ea3e:	490b      	ldr	r1, [pc, #44]	; (ea6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    ea40:	9b01      	ldr	r3, [sp, #4]
    ea42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    ea46:	4a0a      	ldr	r2, [pc, #40]	; (ea70 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    ea48:	9b01      	ldr	r3, [sp, #4]
    ea4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea4e:	f003 0301 	and.w	r3, r3, #1
    ea52:	2b00      	cmp	r3, #0
    ea54:	d106      	bne.n	ea64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    ea56:	4a05      	ldr	r2, [pc, #20]	; (ea6c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    ea58:	9b01      	ldr	r3, [sp, #4]
    ea5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea5e:	2b00      	cmp	r3, #0
    ea60:	d100      	bne.n	ea64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea62:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea64:	bf00      	nop
    ea66:	b003      	add	sp, #12
    ea68:	f85d fb04 	ldr.w	pc, [sp], #4
    ea6c:	1fff914c 	.word	0x1fff914c
    ea70:	1fff9148 	.word	0x1fff9148

0000ea74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    ea74:	b500      	push	{lr}
    ea76:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea78:	f7f2 f8ee 	bl	c58 <Sys_GetCoreID>
    ea7c:	4603      	mov	r3, r0
    ea7e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    ea80:	4a10      	ldr	r2, [pc, #64]	; (eac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    ea82:	9b01      	ldr	r3, [sp, #4]
    ea84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea88:	2b00      	cmp	r3, #0
    ea8a:	d10d      	bne.n	eaa8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea8c:	f7f2 f814 	bl	ab8 <Port_schm_read_msr>
    ea90:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea92:	9b00      	ldr	r3, [sp, #0]
    ea94:	f003 0301 	and.w	r3, r3, #1
    ea98:	2b00      	cmp	r3, #0
    ea9a:	d100      	bne.n	ea9e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea9c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    ea9e:	490a      	ldr	r1, [pc, #40]	; (eac8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    eaa0:	9b01      	ldr	r3, [sp, #4]
    eaa2:	9a00      	ldr	r2, [sp, #0]
    eaa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    eaa8:	4a06      	ldr	r2, [pc, #24]	; (eac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    eaaa:	9b01      	ldr	r3, [sp, #4]
    eaac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eab0:	1c5a      	adds	r2, r3, #1
    eab2:	4904      	ldr	r1, [pc, #16]	; (eac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    eab4:	9b01      	ldr	r3, [sp, #4]
    eab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eaba:	bf00      	nop
    eabc:	b003      	add	sp, #12
    eabe:	f85d fb04 	ldr.w	pc, [sp], #4
    eac2:	bf00      	nop
    eac4:	1fff9154 	.word	0x1fff9154
    eac8:	1fff9150 	.word	0x1fff9150

0000eacc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    eacc:	b500      	push	{lr}
    eace:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ead0:	f7f2 f8c2 	bl	c58 <Sys_GetCoreID>
    ead4:	4603      	mov	r3, r0
    ead6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    ead8:	4a0d      	ldr	r2, [pc, #52]	; (eb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    eada:	9b01      	ldr	r3, [sp, #4]
    eadc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eae0:	1e5a      	subs	r2, r3, #1
    eae2:	490b      	ldr	r1, [pc, #44]	; (eb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    eae4:	9b01      	ldr	r3, [sp, #4]
    eae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    eaea:	4a0a      	ldr	r2, [pc, #40]	; (eb14 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    eaec:	9b01      	ldr	r3, [sp, #4]
    eaee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaf2:	f003 0301 	and.w	r3, r3, #1
    eaf6:	2b00      	cmp	r3, #0
    eaf8:	d106      	bne.n	eb08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    eafa:	4a05      	ldr	r2, [pc, #20]	; (eb10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    eafc:	9b01      	ldr	r3, [sp, #4]
    eafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb02:	2b00      	cmp	r3, #0
    eb04:	d100      	bne.n	eb08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb06:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb08:	bf00      	nop
    eb0a:	b003      	add	sp, #12
    eb0c:	f85d fb04 	ldr.w	pc, [sp], #4
    eb10:	1fff9154 	.word	0x1fff9154
    eb14:	1fff9150 	.word	0x1fff9150

0000eb18 <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    eb18:	bf00      	nop
    eb1a:	4770      	bx	lr

0000eb1c <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    eb1c:	b510      	push	{r4, lr}
    eb1e:	b084      	sub	sp, #16
    eb20:	4604      	mov	r4, r0
    eb22:	4608      	mov	r0, r1
    eb24:	4611      	mov	r1, r2
    eb26:	461a      	mov	r2, r3
    eb28:	4623      	mov	r3, r4
    eb2a:	f8ad 3006 	strh.w	r3, [sp, #6]
    eb2e:	4603      	mov	r3, r0
    eb30:	f88d 3005 	strb.w	r3, [sp, #5]
    eb34:	460b      	mov	r3, r1
    eb36:	f88d 3004 	strb.w	r3, [sp, #4]
    eb3a:	4613      	mov	r3, r2
    eb3c:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb40:	f7f2 f88a 	bl	c58 <Sys_GetCoreID>
    eb44:	4603      	mov	r3, r0
    eb46:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    eb48:	490d      	ldr	r1, [pc, #52]	; (eb80 <Det_ReportError+0x64>)
    eb4a:	9b03      	ldr	r3, [sp, #12]
    eb4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    eb50:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    eb54:	4a0b      	ldr	r2, [pc, #44]	; (eb84 <Det_ReportError+0x68>)
    eb56:	9b03      	ldr	r3, [sp, #12]
    eb58:	4413      	add	r3, r2
    eb5a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    eb5e:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    eb60:	4a09      	ldr	r2, [pc, #36]	; (eb88 <Det_ReportError+0x6c>)
    eb62:	9b03      	ldr	r3, [sp, #12]
    eb64:	4413      	add	r3, r2
    eb66:	f89d 2004 	ldrb.w	r2, [sp, #4]
    eb6a:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    eb6c:	4a07      	ldr	r2, [pc, #28]	; (eb8c <Det_ReportError+0x70>)
    eb6e:	9b03      	ldr	r3, [sp, #12]
    eb70:	4413      	add	r3, r2
    eb72:	f89d 2003 	ldrb.w	r2, [sp, #3]
    eb76:	701a      	strb	r2, [r3, #0]

    return E_OK;
    eb78:	2300      	movs	r3, #0
}
    eb7a:	4618      	mov	r0, r3
    eb7c:	b004      	add	sp, #16
    eb7e:	bd10      	pop	{r4, pc}
    eb80:	1fff9180 	.word	0x1fff9180
    eb84:	1fff9158 	.word	0x1fff9158
    eb88:	1fff915c 	.word	0x1fff915c
    eb8c:	1fff9160 	.word	0x1fff9160

0000eb90 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    eb90:	b510      	push	{r4, lr}
    eb92:	b084      	sub	sp, #16
    eb94:	4604      	mov	r4, r0
    eb96:	4608      	mov	r0, r1
    eb98:	4611      	mov	r1, r2
    eb9a:	461a      	mov	r2, r3
    eb9c:	4623      	mov	r3, r4
    eb9e:	f8ad 3006 	strh.w	r3, [sp, #6]
    eba2:	4603      	mov	r3, r0
    eba4:	f88d 3005 	strb.w	r3, [sp, #5]
    eba8:	460b      	mov	r3, r1
    ebaa:	f88d 3004 	strb.w	r3, [sp, #4]
    ebae:	4613      	mov	r3, r2
    ebb0:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebb4:	f7f2 f850 	bl	c58 <Sys_GetCoreID>
    ebb8:	4603      	mov	r3, r0
    ebba:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    ebbc:	490d      	ldr	r1, [pc, #52]	; (ebf4 <Det_ReportRuntimeError+0x64>)
    ebbe:	9b03      	ldr	r3, [sp, #12]
    ebc0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ebc4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    ebc8:	4a0b      	ldr	r2, [pc, #44]	; (ebf8 <Det_ReportRuntimeError+0x68>)
    ebca:	9b03      	ldr	r3, [sp, #12]
    ebcc:	4413      	add	r3, r2
    ebce:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ebd2:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    ebd4:	4a09      	ldr	r2, [pc, #36]	; (ebfc <Det_ReportRuntimeError+0x6c>)
    ebd6:	9b03      	ldr	r3, [sp, #12]
    ebd8:	4413      	add	r3, r2
    ebda:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ebde:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    ebe0:	4a07      	ldr	r2, [pc, #28]	; (ec00 <Det_ReportRuntimeError+0x70>)
    ebe2:	9b03      	ldr	r3, [sp, #12]
    ebe4:	4413      	add	r3, r2
    ebe6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ebea:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ebec:	2300      	movs	r3, #0
}
    ebee:	4618      	mov	r0, r3
    ebf0:	b004      	add	sp, #16
    ebf2:	bd10      	pop	{r4, pc}
    ebf4:	1fff9184 	.word	0x1fff9184
    ebf8:	1fff9164 	.word	0x1fff9164
    ebfc:	1fff9168 	.word	0x1fff9168
    ec00:	1fff916c 	.word	0x1fff916c

0000ec04 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    ec04:	b510      	push	{r4, lr}
    ec06:	b084      	sub	sp, #16
    ec08:	4604      	mov	r4, r0
    ec0a:	4608      	mov	r0, r1
    ec0c:	4611      	mov	r1, r2
    ec0e:	461a      	mov	r2, r3
    ec10:	4623      	mov	r3, r4
    ec12:	f8ad 3006 	strh.w	r3, [sp, #6]
    ec16:	4603      	mov	r3, r0
    ec18:	f88d 3005 	strb.w	r3, [sp, #5]
    ec1c:	460b      	mov	r3, r1
    ec1e:	f88d 3004 	strb.w	r3, [sp, #4]
    ec22:	4613      	mov	r3, r2
    ec24:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec28:	f7f2 f816 	bl	c58 <Sys_GetCoreID>
    ec2c:	4603      	mov	r3, r0
    ec2e:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    ec30:	490d      	ldr	r1, [pc, #52]	; (ec68 <Det_ReportTransientFault+0x64>)
    ec32:	9b03      	ldr	r3, [sp, #12]
    ec34:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    ec38:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    ec3c:	4a0b      	ldr	r2, [pc, #44]	; (ec6c <Det_ReportTransientFault+0x68>)
    ec3e:	9b03      	ldr	r3, [sp, #12]
    ec40:	4413      	add	r3, r2
    ec42:	f89d 2005 	ldrb.w	r2, [sp, #5]
    ec46:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    ec48:	4a09      	ldr	r2, [pc, #36]	; (ec70 <Det_ReportTransientFault+0x6c>)
    ec4a:	9b03      	ldr	r3, [sp, #12]
    ec4c:	4413      	add	r3, r2
    ec4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ec52:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    ec54:	4a07      	ldr	r2, [pc, #28]	; (ec74 <Det_ReportTransientFault+0x70>)
    ec56:	9b03      	ldr	r3, [sp, #12]
    ec58:	4413      	add	r3, r2
    ec5a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    ec5e:	701a      	strb	r2, [r3, #0]

    return E_OK;
    ec60:	2300      	movs	r3, #0
}
    ec62:	4618      	mov	r0, r3
    ec64:	b004      	add	sp, #16
    ec66:	bd10      	pop	{r4, pc}
    ec68:	1fff917c 	.word	0x1fff917c
    ec6c:	1fff9170 	.word	0x1fff9170
    ec70:	1fff9174 	.word	0x1fff9174
    ec74:	1fff9178 	.word	0x1fff9178

0000ec78 <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    ec78:	bf00      	nop
    ec7a:	4770      	bx	lr

0000ec7c <Fls_ACEraseRomEnd>:
    ec7c:	204e4143 	.word	0x204e4143
    ec80:	64756162 	.word	0x64756162
    ec84:	74617220 	.word	0x74617220
    ec88:	65732065 	.word	0x65732065
    ec8c:	75732074 	.word	0x75732074
    ec90:	73656363 	.word	0x73656363
    ec94:	6c756673 	.word	0x6c756673
    ec98:	202e796c 	.word	0x202e796c
    ec9c:	0000000a 	.word	0x0000000a
    eca0:	6c696146 	.word	0x6c696146
    eca4:	74206465 	.word	0x74206465
    eca8:	6573206f 	.word	0x6573206f
    ecac:	41432074 	.word	0x41432074
    ecb0:	6162204e 	.word	0x6162204e
    ecb4:	72206475 	.word	0x72206475
    ecb8:	2e657461 	.word	0x2e657461
    ecbc:	00000a20 	.word	0x00000a20
    ecc0:	204e4143 	.word	0x204e4143
    ecc4:	746e6f63 	.word	0x746e6f63
    ecc8:	6c6c6f72 	.word	0x6c6c6f72
    eccc:	73207265 	.word	0x73207265
    ecd0:	65746174 	.word	0x65746174
    ecd4:	63616d20 	.word	0x63616d20
    ecd8:	656e6968 	.word	0x656e6968
    ecdc:	74657320 	.word	0x74657320
    ece0:	63757320 	.word	0x63757320
    ece4:	73736563 	.word	0x73736563
    ece8:	6c6c7566 	.word	0x6c6c7566
    ecec:	0a202e79 	.word	0x0a202e79
    ecf0:	00000000 	.word	0x00000000
    ecf4:	6c696146 	.word	0x6c696146
    ecf8:	74206465 	.word	0x74206465
    ecfc:	6573206f 	.word	0x6573206f
    ed00:	41432074 	.word	0x41432074
    ed04:	6f63204e 	.word	0x6f63204e
    ed08:	6f72746e 	.word	0x6f72746e
    ed0c:	72656c6c 	.word	0x72656c6c
    ed10:	61747320 	.word	0x61747320
    ed14:	6d206574 	.word	0x6d206574
    ed18:	69686361 	.word	0x69686361
    ed1c:	202e656e 	.word	0x202e656e
    ed20:	0000000a 	.word	0x0000000a
    ed24:	6d726554 	.word	0x6d726554
    ed28:	6c616e69 	.word	0x6c616e69
    ed2c:	00000000 	.word	0x00000000
    ed30:	4c554e28 	.word	0x4c554e28
    ed34:	0000294c 	.word	0x0000294c

0000ed38 <Clock_Ip_au8DividerCallbackIndex>:
    ed38:	0e0d0c00 06030201 0a070409 000b0805     ................

0000ed48 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000ed58 <Clock_Ip_au8XoscCallbackIndex>:
    ed58:	00000100 00000000 00000000 00000000     ................

0000ed68 <Clock_Ip_au8IrcoscCallbackIndex>:
    ed68:	03020100 00000004 00000000 00000000     ................

0000ed78 <Clock_Ip_au8GateCallbackIndex>:
    ed78:	06010200 01040301 00000500 00000000     ................

0000ed88 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000ed98 <Clock_Ip_au8PllCallbackIndex>:
    ed98:	00000100 00000000 00000000 00000000     ................

0000eda8 <Clock_Ip_au8SelectorCallbackIndex>:
    eda8:	0a090800 03020109 07060504 00000000     ................

0000edb8 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000edc8 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000edd8 <Clock_Ip_au8ClockFeatures>:
	...
    ede8:	01000000 00000000 00000000 00000002     ................
    edf8:	00000000 00000300 00000000 00040000     ................
    ee08:	00000000 05000000 00000000 00000000     ................
    ee18:	00000006 00000000 00000100 00000000     ................
    ee28:	00010000 00000000 04000000 00000000     ................
    ee38:	00000000 00000005 00000001 00000401     ................
    ee48:	00000200 00050100 00030000 04020000     ................
    ee58:	04000000 02000000 00000005 00000005     ................
    ee68:	00000403 00000600 00050300 00070000     ................
    ee78:	05000000 00000000 00000000 00000006     ................
	...
    eeb8:	00050000 00000000 06000000 00000100     ................
    eec8:	00000000 00030007 00000000 00000000     ................
    eed8:	00000000 00060000 00000000 07000000     ................
    eee8:	00000100 00000000 00030008 00000000     ................
	...
    ef00:	00090000 00000000 0a000000 00000100     ................
    ef10:	00000000 0003000b 00000000 00000000     ................
    ef20:	00000000 000c0000 00000000 0d000000     ................
    ef30:	00000100 00000000 0003000e 00000000     ................
    ef40:	00000800 00000000 00090000 00000000     ................
    ef50:	0a000000 00000000 00000000 0000000b     ................
    ef60:	00000000 00000b01 00000000 000b0200     ................
    ef70:	00000000 0b030000 00000000 00000000     ................
	...
    ef88:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    ef98:	01000000 00000000 00000000 00000007     ................
    efa8:	00007300 00000700 00320000 00090000     .s........2.....
    efb8:	02000000 07000000 00000000 00000021     ............!...
    efc8:	00000009 00000400 00000900 00030000     ................
    efd8:	00070000 61000000 07000000 00000000     .......a........
    efe8:	00000024 00000007 00002500 00000700     $........%......
    eff8:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    f008:	00000000 00000020 38000004 00003800     .... ......8.8..
    f018:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    f028:	04000000 00260000 00000026 66000004     ......&.&......f
    f038:	00006600 00000400 00370037 00040000     .f......7.7.....
    f048:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    f058:	2e000004 00002e00 00000200 00404040     ............@@@.
    f068:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    f078:	0000006b 6c000004 00006c00 00000900     k......l.l......
    f088:	00010000 00090000 00000000 07000000     ................
    f098:	00000000 00000036 00000007 00003100     ....6........1..
    f0a8:	00000700 00490000 00070000 4a000000     ......I........J
    f0b8:	07000000 00000000 0000004b 00000007     ........K.......
    f0c8:	00004c00 00000700 004d0000 00070000     .L........M.....
    f0d8:	3d000000 03000000 00000000 00000000     ...=............

0000f0e8 <Clock_Ip_au16SelectorEntryHardwareValue>:
    f0e8:	01010a03 01010001 04040002 02000603     ................
    f0f8:	00010810 02020100 00000000 00000007     ................
    f108:	00000009 00000000 00000c0e 00000000     ................
	...

0000f140 <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    f140:	00020000 00000300 00000601 00000000     ................
	...

0000f170 <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    f170:	00000700 00000000 02020000 01010303     ................
    f180:	03020606 00000000 00000000 00000000     ................
	...

0000f1a0 <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    f1a0:	00000001 00000000 02020000 01010303     ................
    f1b0:	03020606 00000000 00000000 00000000     ................
	...

0000f1d0 <Clock_Ip_au8DividerValueHardwareValue>:
    f1d0:	00020100 00000003 00000004 00000000     ................
    f1e0:	00000005 00000000 00000000 00000000     ................
    f1f0:	00000006 00000000 00000000 00000000     ................
	...
    f210:	00000007                                ....

0000f214 <Clock_Ip_apxScgPeriphAsyncDivs>:
    f214:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000f224 <Clock_Ip_aeSourceTypeClockName>:
    f224:	00000000 00000001 00000001 00000001     ................
    f234:	00000001 00000001 00000001 00000001     ................
    f244:	00000002 00000003 00000001 00000001     ................
    f254:	00000001 00000001 00000002 00000002     ................
    f264:	00000003 00000003 00000001 00000001     ................
    f274:	00000004 00000004 00000004 00000004     ................
	...

0000f2e0 <Clock_Ip_aeHwPllName>:
    f2e0:	00000009                                ....

0000f2e4 <Clock_Ip_aeHwDfsName>:
    f2e4:	00000057                                W...

0000f2e8 <Clock_Ip_axDividerCallbacks>:
    f2e8:	00002c91 00002c9b 00002cb5 00002ccf     .,...,...,...,..
    f2f8:	00002ce9 00002d03 00002d1d 00002d37     .,...-...-..7-..
    f308:	00002d51 00002d6b 00002d85 00002d9f     Q-..k-...-...-..
    f318:	00002db9 00002dd3 00002ded              .-...-...-..

0000f324 <Clock_Ip_axDividerTriggerCallbacks>:
    f324:	00003161 00003161                       a1..a1..

0000f32c <Clock_Ip_axExtOscCallbacks>:
    f32c:	0000316d 0000316d 0000316d 00003177     m1..m1..m1..w1..
    f33c:	0000316d 00003181 0000319b 000031b5     m1...1...1...1..
    f34c:	00003239 0000324d                       92..M2..

0000f354 <Clock_Ip_axFracDivCallbacks>:
    f354:	0000340d 0000340d 00003417              .4...4...4..

0000f360 <Clock_Ip_axGateCallbacks>:
    f360:	00003431 0000343b 0000353b 00003555     14..;4..;5..U5..
    f370:	000034eb 00003505 0000349b 000034b5     .4...5...4...4..
    f380:	0000344b 00003465 0000358b 000035a5     K4..e4...5...5..
    f390:	000035db 000035f5                       .5...5..

0000f398 <Clock_Ip_axIntOscCallbacks>:
    f398:	000037a1 000037a1 000037ab 000037b5     .7...7...7...7..
    f3a8:	000037cf 000037e9 000037fd 00003817     .7...7...7...8..
    f3b8:	00003831 00003845 0000385f 00003879     18..E8.._8..y8..
    f3c8:	00003921 0000393b 00003955              !9..;9..U9..

0000f3d4 <Clock_Ip_axCmuCallbacks>:
    f3d4:	00003ef1 00003efb 00003f07 00003ef1     .>...>...?...>..

0000f3e4 <Clock_Ip_axPllCallbacks>:
    f3e4:	00003f11 00003f11 00003f1b 00003f11     .?...?...?...?..
    f3f4:	00003f27 00003f31 00003f4b 00003f65     '?..1?..K?..e?..
    f404:	00004009 00003ff5                       .@...?..

0000f40c <Clock_Ip_axPcfsCallbacks>:
    f40c:	00004165                                eA..

0000f410 <Clock_Ip_axSelectorCallbacks>:
    f410:	00004171 00004171 0000417b 00004195     qA..qA..{A...A..
    f420:	00004171 000041af 000041c9 000041e3     qA...A...A...A..
    f430:	000041fd 00004217 00004231 0000424b     .A...B..1B..KB..
    f440:	00004265 0000427f 00004299 000042b3     eB...B...B...B..
    f450:	000042cd 000042e7 00004301 0000431b     .B...B...C...C..
    f460:	00004335 0000434f                       5C..OC..

0000f468 <ClockSource>:
    f468:	00000000 00000008 00000002 00000005     ................
	...
    f480:	00000009                                ....

0000f484 <ResetReasonArray>:
    f484:	00000000 00000001 00000002 00000003     ................
    f494:	00000004 00000005 00000006 00000007     ................
    f4a4:	00000008 00000009 0000000a 0000000b     ................
    f4b4:	0000000c 0000000d 0000000e              ............

0000f4c0 <Port_au32PortCiPortBaseAddr>:
    f4c0:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    f4d0:	4004d000                                ...@

0000f4d4 <Port_au32PortCiGpioBaseAddr>:
    f4d4:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    f4e4:	400ff100                                ...@

0000f4e8 <Flexcan_Ip_apxBase>:
    f4e8:	40024000 40025000 4002b000              .@.@.P.@...@

0000f4f4 <payload_code.3>:
    f4f4:	03020100 07060504 09090908 0a0a0a09     ................
    f504:	0b0b0b0a 0c0c0c0b 0d0d0d0c 0d0d0d0d     ................
    f514:	0e0e0e0d 0e0e0e0e 0e0e0e0e 0e0e0e0e     ................
    f524:	0f0f0f0e 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
    f534:	0000000f                                ....

0000f538 <flexcanBase.2>:
    f538:	40024000 40025000 4002b000              .@.@.P.@...@

0000f544 <maxMbNum.1>:
    f544:	00000020 00000010 00000010               ...........

0000f550 <flexcanBase.0>:
    f550:	40024000                                .@.@

0000f554 <Can_43_FLEXCANIpwHwChannelConfig0>:
    f554:	0000fa1c                                ....

0000f558 <Can_au32HwBufferAddr_Ctrl0>:
    f558:	4002b080 4002b090 4002b0a0              ...@...@...@

0000f564 <Can_aCtrlOffsetToCtrlIDMap>:
    f564:	0000ffff                                ....

0000f568 <Can_aHwObjIDToCtrlIDMap>:
    f568:	00000000                                ....

0000f56c <Can_aHwObjectConfig>:
    f56c:	00000000 00000001 00000000 ff030000     ................
    f57c:	00000008 00000000 00000003 00000000     ................
    f58c:	0000f558                                X...

0000f590 <Can_aBaudrateConfig_Ctrl0>:
    f590:	04030000 001d0005 00000000 00000000     ................
	...
    f5a8:	00050403 0000000b 00000000 00000000     ................
    f5b8:	00000000 04030000 00050005 00000000     ................
	...

0000f5d4 <Can_apHwObject_Ctrl0>:
    f5d4:	0000f56c                                l...

0000f5d8 <Can_aControllerConfig>:
    f5d8:	00020000 4002b000 00000001 ffffffff     .......@........
	...
    f5f4:	00030001 0000f590 0000f554 00000001     ........T.......
    f604:	0000f5d4                                ....

0000f608 <Can_apController>:
    f608:	0000f5d8                                ....

0000f60c <Can_43_FLEXCAN_Config>:
	...
    f614:	0000f564 0000f568 0000f56c 0000f608     d...h...l.......

0000f624 <Mcu_aClockConfigPB>:
	...
    f62c:	1c000101 04000010 01000029 00000005     ........).......
    f63c:	00000001 00000000 00000057 00000000     ........W.......
    f64c:	00000000 00000008 007a1200 00000001     ..........z.....
    f65c:	00000001 00000000 00000057 00000000     ........W.......
    f66c:	00000057 00000000 00000000 00000000     W...............
	...
    f68c:	00000019 00000005 0000001a 00000002     ................
    f69c:	0000001b 00000005 0000002a 00000005     ........*.......
    f6ac:	00000028 0000000e 00000029 00000001     (.......).......
    f6bc:	00000056 0000001c 00000032 0000002a     V.......2...*...
    f6cc:	0000002b 00000014 0000002c 00000014     +.......,.......
    f6dc:	0000002d 00000014 0000002e 00000014     -...............
    f6ec:	0000003f 00000000 00000040 00000000     ?.......@.......
    f6fc:	00000041 00000000 00000042 00000000     A.......B.......
    f70c:	00000031 00000000 00000045 00000000     1.......E.......
    f71c:	00000046 00000000 00000047 00000000     F.......G.......
    f72c:	00000044 00000000 00000030 00000000     D.......0.......
    f73c:	0000003d 00000000 00000043 00000000     =.......C.......
    f74c:	00000049 00000000 0000004a 00000000     I.......J.......
    f75c:	0000004b 00000000 00000048 00000000     K.......H.......
    f76c:	0000000c 00000001 00000000 0000000d     ................
    f77c:	00000002 00000000 0000000e 00000001     ................
    f78c:	00000000 0000000f 00000001 00000000     ................
    f79c:	0000001d 00000001 00000000 0000001e     ................
    f7ac:	00000008 00000000 0000001f 00000001     ................
    f7bc:	00000000 00000021 00000001 00000000     ....!...........
    f7cc:	00000022 00000002 00000000 00000023     "...........#...
    f7dc:	00000001 00000000 00000025 00000003     ........%.......
    f7ec:	00000000 00000026 00000004 00000000     ....&...........
    f7fc:	00000027 00000002 00000000 00000032     '...........2...
    f80c:	00000001 00000000 00000048 00000001     ........H.......
    f81c:	00000001 00000056 00000001 00000001     ....V...........
    f82c:	00000057 00000000 00000000 00000057     W...........W...
	...
    f844:	00000057 00000000 00000000 00000057     W...........W...
	...
    f85c:	00000057 00000000 00000057 00000057     W.......W...W...
	...
    f878:	00000014 00007d00 00000015 00007d00     .....}.......}..
    f888:	00000016 00007d00 00000017 00008000     .....}..........
    f898:	00000012 00000001 00000013 00000001     ................
    f8a8:	00000030 00000000 00000031 00000000     0.......1.......
    f8b8:	00000032 00000000 00000033 00000000     2.......3.......
    f8c8:	00000034 00000000 00000035 00000001     4.......5.......
    f8d8:	00000036 00000000 00000037 00000001     6.......7.......
    f8e8:	00000038 00000001 00000039 00000000     8.......9.......
    f8f8:	0000003a 00000000 0000003b 00000000     :.......;.......
    f908:	0000003c 00000001 0000003d 00000000     <.......=.......
    f918:	0000003e 00000000 0000003f 00000000     >.......?.......
    f928:	00000040 00000000 00000041 00000000     @.......A.......
    f938:	00000042 00000000 00000043 00000000     B.......C.......
    f948:	00000044 00000000 00000045 00000000     D.......E.......
    f958:	00000046 00000000 00000047 00000000     F.......G.......
    f968:	00000048 00000000 00000049 00000000     H.......I.......
    f978:	0000004a 00000000 0000004b 00000000     J.......K.......
    f988:	0000004c 00000001 0000004d 00000001     L.......M.......
    f998:	0000004e 00000000 0000004f 00000000     N.......O.......
    f9a8:	00000050 00000001 00000051 00000001     P.......Q.......
    f9b8:	00000052 00000001 00000053 00000001     R.......S.......
    f9c8:	00000054 00000001 00000055 00000000     T.......U.......
    f9d8:	00000056 00000001 00000057 00000000     V.......W.......
    f9e8:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0000fa1c <Flexcan_aCtrlConfigPB>:
    fa1c:	00000003 00000000 00000000 00000000     ................
    fa2c:	00000060 00000000 00000100 00000003     `...............
    fa3c:	00000004 00000005 0000000b 00000000     ................
    fa4c:	00000004 00000004 00000005 0000000b     ................
	...
    fa64:	00008469 00008515                       i.......

0000fa6c <aIrqConfiguration>:
    fa6c:	0000005c 00000f01 0000c995 0000005d     \...........]...
    fa7c:	00000f01 0000c9a5 0000005f 00000f01     ........_.......
    fa8c:	0000c9b5                                ....

0000fa90 <intCtrlConfig>:
    fa90:	00000003 0000fa6c                       ....l...

0000fa98 <Mcu_Config>:
    fa98:	0000005a 00000000 00000001 00000001     Z...............
    faa8:	0000ff9c 0000f624 0000ffa8              ....$.......

0000fab4 <OsIf_xPredefinedConfig>:
    fab4:	00000000 02dc6c00                       .....l..

0000fabc <OsIf_apxPredefinedConfig>:
    fabc:	0000fab4                                ....

0000fac0 <Platform_uConfiguration>:
    fac0:	0000fac8                                ....

0000fac4 <Platform_Config>:
    fac4:	0000fac0                                ....

0000fac8 <ipwConfig>:
    fac8:	0000fa90 00000000                       ........

0000fad0 <g_pin_mux_InitConfigArr>:
    fad0:	4004c000 400ff0c0 00000010 00000002     ...@...@........
    fae0:	00000001 00000002 00000000 00000000     ................
    faf0:	00000000 00000100 4004c000 400ff0c0     ...........@...@
    fb00:	0000000f 00000002 00000001 00000002     ................
	...
    fb1c:	00000100 4004c000 400ff0c0 00000000     .......@...@....
    fb2c:	00000002 00000001 00000002 00000000     ................
	...
    fb44:	00000100 4004c000 400ff0c0 00000011     .......@...@....
    fb54:	00000002 00000001 00000001 00000000     ................
	...
    fb70:	4004d000 400ff100 0000000c 00000002     ...@...@........
    fb80:	00000001 00000001 00000000 00000000     ................
	...
    fb98:	40049000 400ff000 0000000c 00000002     ...@...@........
    fba8:	00000001 00000001 00000000 00000000     ................
	...
    fbc0:	4004b000 400ff080 00000008 00000002     ...@...@........
    fbd0:	00000001 00000002 00000000 00000000     ................
	...
    fbe8:	4004b000 400ff080 00000009 00000002     ...@...@........
    fbf8:	00000001 00000002 00000000 00000000     ................
	...
    fc10:	4004b000 400ff080 0000000a 00000002     ...@...@........
    fc20:	00000001 00000002 00000000 00000000     ................
	...
    fc38:	4004b000 400ff080 0000000b 00000002     ...@...@........
    fc48:	00000001 00000002 00000000 00000000     ................
	...
    fc60:	4004b000 400ff080 0000000c 00000002     ...@...@........
    fc70:	00000001 00000002 00000000 00000000     ................
	...
    fc88:	4004b000 400ff080 0000000d 00000002     ...@...@........
    fc98:	00000001 00000002 00000000 00000000     ................
	...
    fcb0:	4004b000 400ff080 0000000e 00000002     ...@...@........
    fcc0:	00000001 00000002 00000000 00000000     ................
	...
    fcd8:	4004b000 400ff080 0000000f 00000002     ...@...@........
    fce8:	00000001 00000002 00000000 00000000     ................
	...
    fd00:	4004b000 00000000 00000011 00000002     ...@............
    fd10:	00000003 00000001 00000000 00000000     ................
	...
    fd28:	4004b000 00000000 00000010 00000002     ...@............
    fd38:	00000003 00000001 00000000 00000000     ................
	...

0000fd50 <au8Port_PartitionList>:
    fd50:	00000001                                ....

0000fd54 <au32Port_PinToPartitionMap>:
    fd54:	00000001 00000001 00000001 00000001     ................
    fd64:	00000001 00000001 00000001 00000001     ................
    fd74:	00000001 00000001 00000001 00000001     ................
    fd84:	00000001 00000001 00000001 00000001     ................

0000fd94 <Port_au16NoUnUsedPadsArrayDefault>:
    fd94:	00010000 00030002 00070006 00090008     ................
    fda4:	000d000b 000f000e 00110010 00210020     ............ .!.
    fdb4:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
    fdc4:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
    fdd4:	00410040 00430042 00470046 00620061     @.A.B.C.F.G.a.b.
    fde4:	00640063 00660065 00680067 006a0069     c.d.e.f.g.h.i.j.
    fdf4:	006c006b 006e006d 00810080 00830082     k.l.m.n.........
    fe04:	00850084 00870086 00890088 008b008a     ................
    fe14:	008e008d 0090008f                       ........

0000fe1c <Port_UnUsedPin>:
    fe1c:	00000100 00000001 00000000              ............

0000fe28 <Port_aPinConfigDefault>:
    fe28:	00000070 00000100 00000001 00000002     p...............
    fe38:	00010001 00000051 00000300 00000000     ....Q...........
    fe48:	00000001 00010000 00000050 00000300     ........P.......
    fe58:	00000000 00000001 00010000 0000006f     ............o...
    fe68:	00000100 00000001 00000002 00010001     ................
    fe78:	00000060 00000100 00000001 00000002     `...............
    fe88:	00010001 00000071 00000100 00000000     ....q...........
    fe98:	00000001 00010001 0000008c 00000100     ................
    fea8:	00000000 00000001 00010001 0000000c     ................
    feb8:	00000100 00000000 00000001 00010001     ................
    fec8:	00000048 00000100 00000000 00000002     H...............
    fed8:	00010001 00000049 00000100 00000000     ....I...........
    fee8:	00000002 00010001 0000004a 00000100     ........J.......
    fef8:	00000000 00000002 00010001 0000004b     ............K...
    ff08:	00000100 00000000 00000002 00010001     ................
    ff18:	0000004c 00000100 00000000 00000002     L...............
    ff28:	00010001 0000004d 00000100 00000000     ....M...........
    ff38:	00000002 00010001 0000004e 00000100     ........N.......
    ff48:	00000000 00000002 00010001 0000004f     ............O...
    ff58:	00000100 00000000 00000002 00010001     ................

0000ff68 <Port_Config>:
    ff68:	00440010 0000fd94 0000fe1c 0000fe28     ..D.........(...
	...
    ff80:	0000fd54 0000fd50 0000fad0              T...P.......

0000ff8c <Power_Ip_RCM_ConfigPB>:
	...

0000ff94 <Power_Ip_PMC_ConfigPB>:
    ff94:	00000000                                ....

0000ff98 <Power_Ip_SMC_ConfigPB>:
    ff98:	00000000                                ....

0000ff9c <Power_Ip_aModeConfigPB>:
	...

0000ffa8 <Power_Ip_HwIPsConfigPB>:
    ffa8:	0000ff8c 0000ff94 0000ff98              ............

0000ffb4 <_aInitStr.0>:
    ffb4:	00000000 54540000 45522052 53454747     ......TTR REGGES
    ffc4:	00000000                                ....

0000ffc8 <_aV2C.0>:
    ffc8:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0000ffd8 <__INIT_TABLE>:
    ffd8:	00000002 	.word	0x00000002
    ffdc:	1fff8b10 	.word	0x1fff8b10
    ffe0:	00010000 	.word	0x00010000
    ffe4:	0001001c 	.word	0x0001001c
    ffe8:	1fff8800 	.word	0x1fff8800
    ffec:	00000000 	.word	0x00000000
    fff0:	00000310 	.word	0x00000310

0000fff4 <__ZERO_TABLE>:
    fff4:	00000001 	.word	0x00000001
    fff8:	1fff8b30 	.word	0x1fff8b30
    fffc:	1fff9650 	.word	0x1fff9650
