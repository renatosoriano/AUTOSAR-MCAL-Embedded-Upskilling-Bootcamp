Can_43_FLEXCAN_ProcessBusOffInterrupt (uint8 u8CtrlOffset)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ConfigType * _2;
  const uint8 * _3;
  sizetype _4;
  const uint8 * _5;
  const struct Can_43_FLEXCAN_ConfigType * _6;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _10;
  unsigned char _11;
  int _12;
  unsigned char _13;

  <bb 2> :
  u8ControllerID_15 = 0;
  u32CoreId_16 = 0;
  Can_pController_17 = 0B;
  u32CoreId_18 = 0;
  _1 = Can_apxConfig[u32CoreId_18];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = Can_apxConfig[u32CoreId_18];
  _3 = _2->Can_pCtrlOffsetToCtrlIDMap;
  _4 = (sizetype) u8CtrlOffset_20(D);
  _5 = _3 + _4;
  u8ControllerID_21 = *_5;
  _6 = Can_apxConfig[u32CoreId_18];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID_21;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController_22 = *_10;
  if (Can_pController_22 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _11 = Can_43_FLEXCAN_Ipw_SetControllerToStopMode (Can_pController_22);
  if (_11 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _12 = (int) u8ControllerID_21;
  Can_eControllerState[_12] = 2;
  _13 = Can_pController_22->Can_u8AbstControllerID;
  CanIf_ControllerBusOff (_13);

  <bb 6> :
  return;

}


Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt (uint8 u8CtrlOffset, uint8 u8MbIdx, Can_43_FLEXCAN_MbType mbType)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ConfigType * _2;
  const uint8 * _3;
  sizetype _4;
  const uint8 * _5;
  const struct Can_43_FLEXCAN_ConfigType * _6;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _10;
  const struct Can_43_FLEXCAN_ConfigType * _11;

  <bb 2> :
  u8ControllerID_13 = 0;
  u32CoreId_14 = 0;
  Can_pController_15 = 0B;
  u32CoreId_16 = 0;
  _1 = Can_apxConfig[u32CoreId_16];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = Can_apxConfig[u32CoreId_16];
  _3 = _2->Can_pCtrlOffsetToCtrlIDMap;
  _4 = (sizetype) u8CtrlOffset_18(D);
  _5 = _3 + _4;
  u8ControllerID_19 = *_5;
  _6 = Can_apxConfig[u32CoreId_16];
  _7 = _6->Can_ppController;
  _8 = (unsigned int) u8ControllerID_19;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pController_20 = *_10;
  if (Can_pController_20 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _11 = Can_apxConfig[u32CoreId_16];
  Can_43_FLEXCAN_Ipw_ProcessHwObject (Can_pController_20, _11, u8MbIdx_21(D), mbType_22(D));

  <bb 5> :
  return;

}


Can_43_FLEXCAN_MainFunction_Mode ()
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 u8ControllerID;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ConfigType * _2;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _3;
  unsigned int _4;
  unsigned int _5;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _6;
  _Bool _7;
  int _8;
  Can_ControllerStateType * _9;
  unsigned char u8ControllerID.6_10;

  <bb 2> :
  u8ControllerID_15 = 0;
  u32CoreId_16 = 0;
  Can_pController_17 = 0B;
  u32CoreId_18 = 0;
  _1 = Can_apxConfig[u32CoreId_18];
  if (_1 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  goto <bb 8>; [INV]

  <bb 4> :
  _2 = Can_apxConfig[u32CoreId_18];
  _3 = _2->Can_ppController;
  _4 = (unsigned int) u8ControllerID_11;
  _5 = _4 * 4;
  _6 = _3 + _5;
  Can_pController_20 = *_6;
  if (Can_pController_20 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _7 = Can_pController_20->Can_bActivation;
  if (_7 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _8 = (int) u8ControllerID_11;
  _9 = &Can_eControllerState[_8];
  Can_43_FLEXCAN_Ipw_MainFunction_Mode (Can_pController_20, _9);

  <bb 7> :
  u8ControllerID.6_10 = u8ControllerID_11;
  u8ControllerID_22 = u8ControllerID.6_10 + 1;

  <bb 8> :
  # u8ControllerID_11 = PHI <u8ControllerID_15(3), u8ControllerID_22(7)>
  if (u8ControllerID_11 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  return;

}


Can_43_FLEXCAN_MainFunction_BusOff ()
{
  <bb 2> :
  return;

}


Can_43_FLEXCAN_MainFunction_Read ()
{
  <bb 2> :
  return;

}


Can_43_FLEXCAN_MainFunction_Write ()
{
  <bb 2> :
  return;

}


Can_43_FLEXCAN_Write (Can_HwHandleType Hth, const struct Can_PduType * PduInfo)
{
  const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  Can_HwHandleType HwObjectID;
  uint32 u32CoreId;
  uint8 u8ControllerID;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7078;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const uint8 * _2;
  sizetype _3;
  const uint8 * _4;
  const struct Can_43_FLEXCAN_ConfigType * _5;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _6;
  unsigned int _7;
  unsigned int _8;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _9;
  const struct Can_43_FLEXCAN_ConfigType * _10;
  const struct Can_43_FLEXCAN_HwObjectConfigType * _11;
  unsigned int _12;
  unsigned int _13;
  int _14;
  <unnamed type> _15;
  Std_ReturnType _34;

  <bb 2> :
  eRetVal_18 = 1;
  u8ControllerID_19 = 0;
  u32CoreId_20 = 0;
  HwObjectID_21 = 0;
  Can_pController_22 = 0B;
  Can_pHwObject_23 = 0B;
  u32CoreId_24 = 0;
  HwObjectID_26 = Hth_25(D);
  _1 = Can_apxConfig[u32CoreId_24];
  _2 = _1->Can_pHwObjIDToCtrlIDMap;
  _3 = (sizetype) HwObjectID_26;
  _4 = _2 + _3;
  u8ControllerID_28 = *_4;
  _5 = Can_apxConfig[u32CoreId_24];
  _6 = _5->Can_ppController;
  _7 = (unsigned int) u8ControllerID_28;
  _8 = _7 * 4;
  _9 = _6 + _8;
  Can_pController_29 = *_9;
  if (Can_pController_29 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _10 = Can_apxConfig[u32CoreId_24];
  _11 = _10->Can_pHwObjectConfig;
  _12 = (unsigned int) HwObjectID_26;
  _13 = _12 * 36;
  Can_pHwObject_30 = _11 + _13;
  _14 = (int) u8ControllerID_28;
  _15 = Can_eControllerState[_14];
  if (_15 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  eRetVal_33 = Can_43_FLEXCAN_Ipw_Write (Can_pController_29, Can_pHwObject_30, PduInfo_31(D));

  <bb 5> :
  # eRetVal_16 = PHI <eRetVal_18(2), eRetVal_18(3), eRetVal_33(4)>
  _34 = eRetVal_16;

  <bb 6> :
<L4>:
  return _34;

}


Can_43_FLEXCAN_GetControllerTxErrorCounter (uint8 ControllerId, uint8 * TxErrorCounterPtr)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7072;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _5;
  Std_ReturnType _16;

  <bb 2> :
  eRetVal_6 = 1;
  u32CoreId_7 = 0;
  Can_pController_8 = 0B;
  u32CoreId_9 = 0;
  _1 = Can_apxConfig[u32CoreId_9];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) ControllerId_11(D);
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pController_12 = *_5;
  eRetVal_15 = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter (Can_pController_12, TxErrorCounterPtr_13(D));
  _16 = eRetVal_15;

  <bb 3> :
<L0>:
  return _16;

}


Can_43_FLEXCAN_GetControllerRxErrorCounter (uint8 ControllerId, uint8 * RxErrorCounterPtr)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7070;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _5;
  Std_ReturnType _16;

  <bb 2> :
  eRetVal_6 = 1;
  u32CoreId_7 = 0;
  Can_pController_8 = 0B;
  u32CoreId_9 = 0;
  _1 = Can_apxConfig[u32CoreId_9];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) ControllerId_11(D);
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pController_12 = *_5;
  eRetVal_15 = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter (Can_pController_12, RxErrorCounterPtr_13(D));
  _16 = eRetVal_15;

  <bb 3> :
<L0>:
  return _16;

}


Can_43_FLEXCAN_GetControllerMode (uint8 Controller, Can_ControllerStateType * ControllerModePtr)
{
  Std_ReturnType eRetVal;
  Std_ReturnType D.7068;
  int _1;
  <unnamed type> _2;
  Std_ReturnType _9;

  <bb 2> :
  eRetVal_3 = 1;
  _1 = (int) Controller_4(D);
  _2 = Can_eControllerState[_1];
  *ControllerModePtr_6(D) = _2;
  eRetVal_8 = 0;
  _9 = eRetVal_8;

  <bb 3> :
<L0>:
  return _9;

}


Can_43_FLEXCAN_GetControllerErrorState (uint8 ControllerId, Can_ErrorStateType * ErrorStatePtr)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  uint8 errorState;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7065;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _5;
  unsigned char errorState.5_6;
  int _7;
  Std_ReturnType _23;

  <bb 2> :
  eRetVal_9 = 1;
  errorState = 0;
  u32CoreId_12 = 0;
  Can_pController_13 = 0B;
  u32CoreId_14 = 0;
  _1 = Can_apxConfig[u32CoreId_14];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) ControllerId_15(D);
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pController_16 = *_5;
  eRetVal_18 = Can_43_FLEXCAN_Ipw_GetControllerErrorState (Can_pController_16, &errorState);
  if (eRetVal_18 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  errorState.5_6 = errorState;
  _7 = (int) errorState.5_6;
  switch (_7) <default: <L3> [INV], case 0: <L1> [INV], case 1: <L2> [INV]>

  <bb 4> :
<L1>:
  *ErrorStatePtr_19(D) = 0;
  goto <bb 7>; [INV]

  <bb 5> :
<L2>:
  *ErrorStatePtr_19(D) = 1;
  goto <bb 7>; [INV]

  <bb 6> :
<L3>:
  *ErrorStatePtr_19(D) = 2;

  <bb 7> :
  _23 = eRetVal_18;
  errorState ={v} {CLOBBER};

  <bb 8> :
<L7>:
  return _23;

}


Can_43_FLEXCAN_EnableControllerInterrupts (uint8 Controller)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _5;
  int _6;
  unsigned char _7;
  int _8;
  unsigned char _9;
  int _10;
  unsigned char _11;
  int _12;
  unsigned char _13;

  <bb 2> :
  u32CoreId_16 = 0;
  Can_pController_17 = 0B;
  u32CoreId_18 = 0;
  _1 = Can_apxConfig[u32CoreId_18];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) Controller_20(D);
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pController_21 = *_5;
  SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01 ();
  _6 = (int) Controller_20(D);
  _7 = Can_au8DisableInterruptLevel[_6];
  if (_7 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _8 = (int) Controller_20(D);
  _9 = Can_au8DisableInterruptLevel[_8];
  _10 = (int) Controller_20(D);
  _11 = _9 + 255;
  Can_au8DisableInterruptLevel[_10] = _11;

  <bb 4> :
  SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01 ();
  _12 = (int) Controller_20(D);
  _13 = Can_au8DisableInterruptLevel[_12];
  if (_13 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  Can_43_FLEXCAN_Ipw_EnableControllerInterrupts (Can_pController_21);

  <bb 6> :
  return;

}


Can_43_FLEXCAN_DisableControllerInterrupts (uint8 Controller)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _5;
  int _6;
  unsigned char _7;
  int _8;
  unsigned char _9;

  <bb 2> :
  u32CoreId_10 = 0;
  Can_pController_11 = 0B;
  u32CoreId_12 = 0;
  _1 = Can_apxConfig[u32CoreId_12];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) Controller_14(D);
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pController_15 = *_5;
  SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00 ();
  _6 = (int) Controller_14(D);
  _7 = Can_au8DisableInterruptLevel[_6];
  _8 = (int) Controller_14(D);
  _9 = _7 + 1;
  Can_au8DisableInterruptLevel[_8] = _9;
  SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00 ();
  Can_43_FLEXCAN_Ipw_DisableControllerInterrupts (Can_pController_15);
  return;

}


Can_43_FLEXCAN_SetControllerMode (uint8 Controller, Can_ControllerStateType Transition)
{
  unsigned int D.7058;
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7056;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _5;
  int _6;
  <unnamed type> _7;
  unsigned char _8;
  int _9;
  unsigned char _10;
  int _11;
  <unnamed type> _12;
  unsigned char _13;
  int _14;
  unsigned char _15;
  int _16;
  unsigned char _17;
  int _18;
  <unnamed type> _19;
  int _20;
  unsigned char _21;
  unsigned int _40;
  Std_ReturnType _55;

  <bb 2> :
  eRetVal_32 = 1;
  u32CoreId_33 = 0;
  Can_pController_34 = 0B;
  u32CoreId_35 = 0;
  _1 = Can_apxConfig[u32CoreId_35];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) Controller_37(D);
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pController_38 = *_5;
  switch (Transition_39(D)) <default: <L18> [INV], case 1: <L0> [INV], case 2: <L5> [INV], case 3: <L13> [INV]>

  <bb 3> :
<L0>:
  _6 = (int) Controller_37(D);
  _7 = Can_eControllerState[_6];
  if (_7 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _8 = Can_43_FLEXCAN_Ipw_SetControllerToStartMode (Can_pController_38);
  if (_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _9 = (int) Controller_37(D);
  Can_eControllerState[_9] = 1;
  _10 = Can_pController_38->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_10, 1);
  eRetVal_54 = 0;

  <bb 6> :
  # eRetVal_22 = PHI <eRetVal_32(3), eRetVal_32(4), eRetVal_54(5)>
  goto <bb 19>; [INV]

  <bb 7> :
<L5>:
  _11 = (int) Controller_37(D);
  _12 = Can_eControllerState[_11];
  switch (_12) <default: <L11> [INV], case 1: <L6> [INV], case 2 ... 3: <L9> [INV]>

  <bb 8> :
<L6>:
  _13 = Can_43_FLEXCAN_Ipw_SetControllerToStopMode (Can_pController_38);
  if (_13 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _14 = (int) Controller_37(D);
  Can_eControllerState[_14] = 2;
  _15 = Can_pController_38->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_15, 2);
  eRetVal_50 = 0;

  <bb 10> :
  # eRetVal_23 = PHI <eRetVal_32(8), eRetVal_50(9)>
  goto <bb 13>; [INV]

  <bb 11> :
<L9>:
  _16 = (int) Controller_37(D);
  Can_eControllerState[_16] = 2;
  _17 = Can_pController_38->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_17, 2);
  eRetVal_46 = 0;
  goto <bb 13>; [INV]

  <bb 12> :
<L11>:

  <bb 13> :
  # eRetVal_24 = PHI <eRetVal_23(10), eRetVal_46(11), eRetVal_32(12)>
  goto <bb 19>; [INV]

  <bb 14> :
<L13>:
  _18 = (int) Controller_37(D);
  _19 = Can_eControllerState[_18];
  _40 = _19 + 4294967294;
  if (_40 <= 1)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
<L14>:
  _20 = (int) Controller_37(D);
  Can_eControllerState[_20] = 3;
  _21 = Can_pController_38->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_21, 3);
  eRetVal_43 = 0;
  goto <bb 17>; [INV]

  <bb 16> :
<L16>:

  <bb 17> :
  # eRetVal_25 = PHI <eRetVal_43(15), eRetVal_32(16)>
  goto <bb 19>; [INV]

  <bb 18> :
<L18>:

  <bb 19> :
  # eRetVal_26 = PHI <eRetVal_22(6), eRetVal_24(13), eRetVal_25(17), eRetVal_32(18)>
  _55 = eRetVal_26;

  <bb 20> :
<L20>:
  return _55;

}


Can_43_FLEXCAN_SetBaudrate (uint8 Controller, uint16 BaudRateConfigID)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint32 u32CoreId;
  Std_ReturnType eRetVal;
  Std_ReturnType D.7048;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _5;
  int _6;
  <unnamed type> _7;
  Std_ReturnType _20;

  <bb 2> :
  eRetVal_10 = 1;
  u32CoreId_11 = 0;
  Can_pController_12 = 0B;
  u32CoreId_13 = 0;
  _1 = Can_apxConfig[u32CoreId_13];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) Controller_15(D);
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pController_16 = *_5;
  _6 = (int) Controller_15(D);
  _7 = Can_eControllerState[_6];
  if (_7 == 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  eRetVal_19 = Can_43_FLEXCAN_Ipw_SetBaudrate (Can_pController_16, BaudRateConfigID_17(D));

  <bb 4> :
  # eRetVal_8 = PHI <eRetVal_10(2), eRetVal_19(3)>
  _20 = eRetVal_8;

  <bb 5> :
<L2>:
  return _20;

}


Can_43_FLEXCAN_DeInit ()
{
  uint32 u32CoreId;
  boolean bCtrlBusy;
  uint8 u8ControllerID;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _5;
  const struct Can_43_FLEXCAN_ControllerConfigType * _6;
  int _7;
  <unnamed type> _8;
  unsigned char u8ControllerID.4_9;
  _Bool _10;

  <bb 2> :
  u8ControllerID_14 = 0;
  bCtrlBusy_15 = 0;
  u32CoreId_16 = 0;
  u32CoreId_17 = 0;
  u8ControllerID_18 = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = Can_apxConfig[u32CoreId_17];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID_11;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _7 = (int) u8ControllerID_11;
  _8 = Can_eControllerState[_7];
  if (_8 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  bCtrlBusy_20 = 1;
  goto <bb 8>; [INV]

  <bb 6> :
  u8ControllerID.4_9 = u8ControllerID_11;
  u8ControllerID_21 = u8ControllerID.4_9 + 1;

  <bb 7> :
  # u8ControllerID_11 = PHI <u8ControllerID_18(2), u8ControllerID_21(6)>
  if (u8ControllerID_11 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # bCtrlBusy_12 = PHI <bCtrlBusy_20(5), bCtrlBusy_15(7)>
  _10 = ~bCtrlBusy_12;
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Can_DeInitControllers (u32CoreId_17);
  Can_apxConfig[u32CoreId_17] = 0B;

  <bb 10> :
  return;

}


Can_43_FLEXCAN_Init (const struct Can_43_FLEXCAN_ConfigType * Config)
{
  boolean bCtrlBusy;
  uint32 u32CoreId;
  _Bool _1;

  <bb 2> :
  u32CoreId_3 = 0;
  bCtrlBusy_4 = 0;
  u32CoreId_5 = 0;
  Can_apxConfig[u32CoreId_5] = Config_7(D);
  bCtrlBusy_10 = Can_IsControllersBusy (u32CoreId_5);
  _1 = ~bCtrlBusy_10;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  Can_InitControllers (u32CoreId_5);

  <bb 4> :
  return;

}


Can_DeInitControllers (uint32 u32CoreId)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint8 u8ControllerID;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _5;
  const struct Can_43_FLEXCAN_ControllerConfigType * _6;
  const struct Can_43_FLEXCAN_ConfigType * _7;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _8;
  unsigned int _9;
  unsigned int _10;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _11;
  _Bool _12;
  int _13;
  unsigned char u8ControllerID.3_14;

  <bb 2> :
  u8ControllerID_18 = 0;
  Can_pController_19 = 0B;
  u8ControllerID_20 = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = Can_apxConfig[u32CoreId_22(D)];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID_15;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _7 = Can_apxConfig[u32CoreId_22(D)];
  _8 = _7->Can_ppController;
  _9 = (unsigned int) u8ControllerID_15;
  _10 = _9 * 4;
  _11 = _8 + _10;
  Can_pController_23 = *_11;
  _12 = Can_pController_23->Can_bActivation;
  if (_12 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _13 = (int) u8ControllerID_15;
  Can_eControllerState[_13] = 0;
  Can_43_FLEXCAN_Ipw_DeInit (Can_pController_23);

  <bb 6> :
  u8ControllerID.3_14 = u8ControllerID_15;
  u8ControllerID_26 = u8ControllerID.3_14 + 1;

  <bb 7> :
  # u8ControllerID_15 = PHI <u8ControllerID_20(2), u8ControllerID_26(6)>
  if (u8ControllerID_15 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  return;

}


Can_InitControllers (uint32 u32CoreId)
{
  const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController;
  uint8 u8ControllerID;
  boolean bCtrlBusy;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _5;
  const struct Can_43_FLEXCAN_ControllerConfigType * _6;
  const struct Can_43_FLEXCAN_ConfigType * _7;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _8;
  unsigned int _9;
  unsigned int _10;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _11;
  _Bool _12;
  int _13;
  unsigned char _14;
  int _15;
  unsigned char u8ControllerID.1_16;
  const struct Can_43_FLEXCAN_ConfigType * _17;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _18;
  unsigned int _19;
  unsigned int _20;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _21;
  const struct Can_43_FLEXCAN_ControllerConfigType * _22;
  int _23;
  unsigned char u8ControllerID.2_24;

  <bb 2> :
  bCtrlBusy_34 = 0;
  u8ControllerID_35 = 0;
  Can_pController_36 = 0B;
  u8ControllerID_37 = 0;
  goto <bb 9>; [INV]

  <bb 3> :
  _1 = Can_apxConfig[u32CoreId_39(D)];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID_26;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  _7 = Can_apxConfig[u32CoreId_39(D)];
  _8 = _7->Can_ppController;
  _9 = (unsigned int) u8ControllerID_26;
  _10 = _9 * 4;
  _11 = _8 + _10;
  Can_pController_40 = *_11;
  _12 = Can_pController_40->Can_bActivation;
  if (_12 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  _13 = (int) u8ControllerID_26;
  Can_au8DisableInterruptLevel[_13] = 0;
  _14 = Can_43_FLEXCAN_Ipw_Init (Can_pController_40);
  if (_14 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _15 = (int) u8ControllerID_26;
  Can_eControllerState[_15] = 2;
  goto <bb 8>; [INV]

  <bb 7> :
  bCtrlBusy_43 = 1;
  goto <bb 10>; [INV]

  <bb 8> :
  u8ControllerID.1_16 = u8ControllerID_26;
  u8ControllerID_45 = u8ControllerID.1_16 + 1;

  <bb 9> :
  # u8ControllerID_26 = PHI <u8ControllerID_37(2), u8ControllerID_45(8)>
  if (u8ControllerID_26 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # bCtrlBusy_25 = PHI <bCtrlBusy_43(7), bCtrlBusy_34(9)>
  if (bCtrlBusy_25 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 11> :
  u8ControllerID_46 = 0;
  goto <bb 15>; [INV]

  <bb 12> :
  _17 = Can_apxConfig[u32CoreId_39(D)];
  _18 = _17->Can_ppController;
  _19 = (unsigned int) u8ControllerID_27;
  _20 = _19 * 4;
  _21 = _18 + _20;
  _22 = *_21;
  if (_22 != 0B)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  _23 = (int) u8ControllerID_27;
  Can_eControllerState[_23] = 0;

  <bb 14> :
  u8ControllerID.2_24 = u8ControllerID_27;
  u8ControllerID_48 = u8ControllerID.2_24 + 1;

  <bb 15> :
  # u8ControllerID_27 = PHI <u8ControllerID_46(11), u8ControllerID_48(14)>
  if (u8ControllerID_27 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  return;

}


Can_IsControllersBusy (uint32 u32CoreId)
{
  uint8 u8ControllerID;
  boolean bCtrlBusy;
  boolean D.7021;
  const struct Can_43_FLEXCAN_ConfigType * _1;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_43_FLEXCAN_ControllerConfigType * const * _5;
  const struct Can_43_FLEXCAN_ControllerConfigType * _6;
  int _7;
  <unnamed type> _8;
  unsigned char u8ControllerID.0_9;
  boolean _19;

  <bb 2> :
  bCtrlBusy_12 = 0;
  u8ControllerID_13 = 0;
  u8ControllerID_14 = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  _1 = Can_apxConfig[u32CoreId_16(D)];
  _2 = _1->Can_ppController;
  _3 = (unsigned int) u8ControllerID_11;
  _4 = _3 * 4;
  _5 = _2 + _4;
  _6 = *_5;
  if (_6 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _7 = (int) u8ControllerID_11;
  _8 = Can_eControllerState[_7];
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  bCtrlBusy_17 = 1;
  goto <bb 8>; [INV]

  <bb 6> :
  u8ControllerID.0_9 = u8ControllerID_11;
  u8ControllerID_18 = u8ControllerID.0_9 + 1;

  <bb 7> :
  # u8ControllerID_11 = PHI <u8ControllerID_14(2), u8ControllerID_18(6)>
  if (u8ControllerID_11 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # bCtrlBusy_10 = PHI <bCtrlBusy_17(5), bCtrlBusy_12(7)>
  _19 = bCtrlBusy_10;

  <bb 9> :
<L7>:
  return _19;

}


