EcuM_Init ()
{
  <bb 2> :
  Mcu_Init (&Mcu_Config);
  Mcu_InitClock (0);
  Mcu_SetMode (0);
  OsIf_Init (0B);
  Platform_Init (0B);
  Port_Init (&Port_Config);
  Can_43_FLEXCAN_Init (&Can_43_FLEXCAN_Config);
  IoHwAb_Init0 (0B);
  return;

}


main ()
{
  uint8 CurrentButton;
  uint8 ButtonFlag;
  uint8 RealEvent;
  struct Can_PduType PduInfo3;
  struct Can_PduType PduInfo2;
  struct Can_PduType PduInfo1;
  int D.8079;
  unsigned char _1;
  unsigned char _2;
  int _3;
  int _4;
  int _5;
  int _6;
  unsigned char CurrentButton.0_7;
  unsigned char _8;
  int _9;
  unsigned char _10;
  int _11;
  unsigned char _12;
  int _13;
  _Bool CanIf_bTxFlag.1_14;
  _Bool _15;

  <bb 2> :
  EcuM_Init ();
  SEGGER_RTT_Init ();
  RealEvent_40 = 0;
  ButtonFlag_41 = 0;
  _1 = Can_43_FLEXCAN_SetBaudrate (0, 2);
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  SEGGER_RTT_printf (0, "CAN baud rate set successfully. \n");
  goto <bb 5>; [INV]

  <bb 4> :
  SEGGER_RTT_printf (0, "Failed to set CAN baud rate. \n");

  <bb 5> :
  _2 = Can_43_FLEXCAN_SetControllerMode (0, 1);
  if (_2 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  SEGGER_RTT_printf (0, "CAN controller state machine set successfully. \n");
  goto <bb 8>; [INV]

  <bb 7> :
  SEGGER_RTT_printf (0, "Failed to set CAN controller state machine. \n");

  <bb 8> :
  PduInfo1.id = 340;
  PduInfo1.swPduHandle = 0;
  PduInfo1.length = 8;
  PduInfo1.sdu = &Can_au8Sdu8bytes;
  PduInfo2.id = 563;
  PduInfo2.swPduHandle = 1;
  PduInfo2.length = 8;
  PduInfo2.sdu = &Can_au8Sdu8bytes;
  PduInfo3.id = 898;
  PduInfo3.swPduHandle = 2;
  PduInfo3.length = 8;
  PduInfo3.sdu = &Can_au8Sdu8bytes;

  <bb 9> :
  # ButtonFlag_16 = PHI <ButtonFlag_41(8), ButtonFlag_24(44)>
  HwIoAb_Buttons_MainFunction ();
  Delay (10);
  CurrentButton_62 = 0;
  goto <bb 35>; [INV]

  <bb 10> :
  RealEvent_79 = HwIoAb_Buttons_GetEvent (CurrentButton_25);
  if (RealEvent_79 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 34>; [INV]

  <bb 11> :
  _3 = (int) CurrentButton_25;
  switch (_3) <default: <L30> [INV], case 0: <L9> [INV], case 1: <L16> [INV], case 2: <L23> [INV]>

  <bb 12> :
<L9>:
  _4 = (int) RealEvent_79;
  switch (_4) <default: <L14> [INV], case 1: <L10> [INV], case 2: <L11> [INV], case 3: <L12> [INV], case 4: <L13> [INV]>

  <bb 13> :
<L10>:
  HwIoAb_Leds_TurnToggle (0);
  SEGGER_RTT_printf (0, "Button 1 action: SINGLE_CLICK \n");
  ButtonFlag_97 = 1;
  goto <bb 18>; [INV]

  <bb 14> :
<L11>:
  SEGGER_RTT_printf (0, "Button 1 action: DOUBLE_CLICK \n");
  goto <bb 18>; [INV]

  <bb 15> :
<L12>:
  SEGGER_RTT_printf (0, "Button 1 action: HOLD_CLICK \n");
  goto <bb 18>; [INV]

  <bb 16> :
<L13>:
  SEGGER_RTT_printf (0, "Button 1 action: RELEASE \n");
  goto <bb 18>; [INV]

  <bb 17> :
<L14>:

  <bb 18> :
  # ButtonFlag_17 = PHI <ButtonFlag_97(13), ButtonFlag_21(14), ButtonFlag_21(15), ButtonFlag_21(16), ButtonFlag_21(17)>
  goto <bb 34>; [INV]

  <bb 19> :
<L16>:
  _5 = (int) RealEvent_79;
  switch (_5) <default: <L21> [INV], case 1: <L17> [INV], case 2: <L18> [INV], case 3: <L19> [INV], case 4: <L20> [INV]>

  <bb 20> :
<L17>:
  HwIoAb_Leds_TurnToggle (1);
  SEGGER_RTT_printf (0, "Button 2 action: SINGLE_CLICK \n");
  ButtonFlag_91 = 2;
  goto <bb 25>; [INV]

  <bb 21> :
<L18>:
  SEGGER_RTT_printf (0, "Button 2 action: DOUBLE_CLICK \n");
  goto <bb 25>; [INV]

  <bb 22> :
<L19>:
  SEGGER_RTT_printf (0, "Button 2 action: HOLD_CLICK \n");
  goto <bb 25>; [INV]

  <bb 23> :
<L20>:
  SEGGER_RTT_printf (0, "Button 2 action: RELEASE \n");
  goto <bb 25>; [INV]

  <bb 24> :
<L21>:

  <bb 25> :
  # ButtonFlag_18 = PHI <ButtonFlag_91(20), ButtonFlag_21(21), ButtonFlag_21(22), ButtonFlag_21(23), ButtonFlag_21(24)>
  goto <bb 34>; [INV]

  <bb 26> :
<L23>:
  _6 = (int) RealEvent_79;
  switch (_6) <default: <L28> [INV], case 1: <L24> [INV], case 2: <L25> [INV], case 3: <L26> [INV], case 4: <L27> [INV]>

  <bb 27> :
<L24>:
  HwIoAb_Leds_TurnToggle (2);
  SEGGER_RTT_printf (0, "Button 3 action: SINGLE_CLICK \n");
  ButtonFlag_85 = 3;
  goto <bb 32>; [INV]

  <bb 28> :
<L25>:
  SEGGER_RTT_printf (0, "Button 3 action: DOUBLE_CLICK \n");
  goto <bb 32>; [INV]

  <bb 29> :
<L26>:
  SEGGER_RTT_printf (0, "Button 3 action: HOLD_CLICK \n");
  goto <bb 32>; [INV]

  <bb 30> :
<L27>:
  SEGGER_RTT_printf (0, "Button 3 action: RELEASE \n");
  goto <bb 32>; [INV]

  <bb 31> :
<L28>:

  <bb 32> :
  # ButtonFlag_19 = PHI <ButtonFlag_85(27), ButtonFlag_21(28), ButtonFlag_21(29), ButtonFlag_21(30), ButtonFlag_21(31)>
  goto <bb 34>; [INV]

  <bb 33> :
<L30>:

  <bb 34> :
  # ButtonFlag_20 = PHI <ButtonFlag_21(10), ButtonFlag_17(18), ButtonFlag_18(25), ButtonFlag_19(32), ButtonFlag_21(33)>
  CurrentButton.0_7 = CurrentButton_25;
  CurrentButton_98 = CurrentButton.0_7 + 1;

  <bb 35> :
  # ButtonFlag_21 = PHI <ButtonFlag_16(9), ButtonFlag_20(34)>
  # CurrentButton_25 = PHI <CurrentButton_62(9), CurrentButton_98(34)>
  if (CurrentButton_25 <= 2)
    goto <bb 10>; [INV]
  else
    goto <bb 36>; [INV]

  <bb 36> :
  if (ButtonFlag_21 == 1)
    goto <bb 37>; [INV]
  else
    goto <bb 38>; [INV]

  <bb 37> :
  ButtonFlag_63 = 0;
  Can_au8Sdu8bytes[7] = 1;
  Can_43_FLEXCAN_Write (0, &PduInfo1);
  _8 = Can_au8Sdu8bytes[7];
  _9 = (int) _8;
  SEGGER_RTT_printf (0, "CAN msg transmitted at 500kbps using Button: %d \n", _9);

  <bb 38> :
  # ButtonFlag_22 = PHI <ButtonFlag_21(36), ButtonFlag_63(37)>
  if (ButtonFlag_22 == 2)
    goto <bb 39>; [INV]
  else
    goto <bb 40>; [INV]

  <bb 39> :
  ButtonFlag_67 = 0;
  Can_au8Sdu8bytes[7] = 2;
  Can_43_FLEXCAN_Write (0, &PduInfo1);
  _10 = Can_au8Sdu8bytes[7];
  _11 = (int) _10;
  SEGGER_RTT_printf (0, "CAN msg transmitted at 500kbps using Button: %d \n", _11);

  <bb 40> :
  # ButtonFlag_23 = PHI <ButtonFlag_22(38), ButtonFlag_67(39)>
  if (ButtonFlag_23 == 3)
    goto <bb 41>; [INV]
  else
    goto <bb 42>; [INV]

  <bb 41> :
  ButtonFlag_71 = 0;
  Can_au8Sdu8bytes[7] = 3;
  Can_43_FLEXCAN_Write (0, &PduInfo1);
  _12 = Can_au8Sdu8bytes[7];
  _13 = (int) _12;
  SEGGER_RTT_printf (0, "CAN msg transmitted at 500kbps using Button: %d \n", _13);

  <bb 42> :
  # ButtonFlag_24 = PHI <ButtonFlag_23(40), ButtonFlag_71(41)>
  Can_43_FLEXCAN_Write (0, &PduInfo2);
  Can_43_FLEXCAN_Write (0, &PduInfo3);

  <bb 43> :
  CanIf_bTxFlag.1_14 = CanIf_bTxFlag;
  _15 = ~CanIf_bTxFlag.1_14;
  if (_15 != 0)
    goto <bb 43>; [INV]
  else
    goto <bb 44>; [INV]

  <bb 44> :
  CanIf_bTxFlag = 0;
  goto <bb 9>; [INV]

}


CanIf_RxIndication (const struct Can_HwType * Mailbox, const struct PduInfoType * PduInfoPtr)
{
  <bb 2> :
  return;

}


CanIf_TxConfirmation (PduIdType CanTxPduId)
{
  <bb 2> :
  CanIf_bTxFlag = 1;
  return;

}


CanIf_ControllerModeIndication (uint8 ControllerId, Can_ControllerStateType ControllerMode)
{
  <bb 2> :
  return;

}


CanIf_ControllerBusOff (uint8 ControllerId)
{
  <bb 2> :
  return;

}


Delay (uint32 ms)
{
  uint32 ElapsedTime;
  uint32 SeedTick;
  uint32 Timeout;
  long unsigned int D.8064;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _13;

  <bb 2> :
  _1 = ms_5(D) * 1000;
  Timeout_8 = OsIf_MicrosToTicks (_1, 1);
  _2 = OsIf_GetCounter (1);
  SeedTick = _2;
  ElapsedTime_11 = 0;

  <bb 3> :
  # ElapsedTime_3 = PHI <ElapsedTime_11(2), ElapsedTime_14(3)>
  _13 = OsIf_GetElapsed (&SeedTick, 1);
  ElapsedTime_14 = _13 + ElapsedTime_3;
  if (ElapsedTime_14 < Timeout_8)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 4> :
  SeedTick ={v} {CLOBBER};
  return;

}


