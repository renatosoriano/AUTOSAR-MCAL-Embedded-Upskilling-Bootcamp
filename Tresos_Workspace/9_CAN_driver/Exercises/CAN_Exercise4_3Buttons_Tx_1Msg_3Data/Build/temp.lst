
Build/temp.elf:     file format elf32-littlearm


Disassembly of section .flash_interrupts:

00000000 <VTABLE>:
   0:	20007000 	.word	0x20007000
   4:	00000411 	.word	0x00000411
   8:	000005a3 	.word	0x000005a3
   c:	00001263 	.word	0x00001263
  10:	00001265 	.word	0x00001265
  14:	00001267 	.word	0x00001267
  18:	00001269 	.word	0x00001269
	...
  2c:	0000126b 	.word	0x0000126b
  30:	0000126d 	.word	0x0000126d
  34:	00000000 	.word	0x00000000
  38:	0000126f 	.word	0x0000126f
  3c:	00001271 	.word	0x00001271
  40:	00001273 	.word	0x00001273
  44:	00001273 	.word	0x00001273
  48:	00001273 	.word	0x00001273
  4c:	00001273 	.word	0x00001273
  50:	00001273 	.word	0x00001273
  54:	00001273 	.word	0x00001273
  58:	00001273 	.word	0x00001273
  5c:	00001273 	.word	0x00001273
  60:	00001273 	.word	0x00001273
  64:	00001273 	.word	0x00001273
  68:	00001273 	.word	0x00001273
  6c:	00001273 	.word	0x00001273
  70:	00001273 	.word	0x00001273
  74:	00001273 	.word	0x00001273
  78:	00001273 	.word	0x00001273
  7c:	00001273 	.word	0x00001273
  80:	00001273 	.word	0x00001273
  84:	00001273 	.word	0x00001273
  88:	00001273 	.word	0x00001273
  8c:	00001273 	.word	0x00001273
  90:	00001273 	.word	0x00001273
  94:	00001273 	.word	0x00001273
  98:	00001273 	.word	0x00001273
  9c:	00001273 	.word	0x00001273
  a0:	00001273 	.word	0x00001273
  a4:	00001273 	.word	0x00001273
  a8:	00001273 	.word	0x00001273
  ac:	00001273 	.word	0x00001273
  b0:	00001273 	.word	0x00001273
  b4:	00001273 	.word	0x00001273
  b8:	00001273 	.word	0x00001273
  bc:	00001273 	.word	0x00001273
  c0:	00001273 	.word	0x00001273
  c4:	00001273 	.word	0x00001273
  c8:	00001273 	.word	0x00001273
  cc:	00001273 	.word	0x00001273
  d0:	00001273 	.word	0x00001273
  d4:	00001273 	.word	0x00001273
  d8:	00001273 	.word	0x00001273
  dc:	00001273 	.word	0x00001273
  e0:	00001273 	.word	0x00001273
  e4:	00001273 	.word	0x00001273
  e8:	00001273 	.word	0x00001273
  ec:	00001273 	.word	0x00001273
  f0:	00001273 	.word	0x00001273
  f4:	00001273 	.word	0x00001273
  f8:	00001273 	.word	0x00001273
  fc:	00001273 	.word	0x00001273
 100:	00001273 	.word	0x00001273
 104:	00001273 	.word	0x00001273
 108:	00001273 	.word	0x00001273
 10c:	00001273 	.word	0x00001273
 110:	00001273 	.word	0x00001273
 114:	00001273 	.word	0x00001273
 118:	00001273 	.word	0x00001273
 11c:	00001273 	.word	0x00001273
 120:	00001273 	.word	0x00001273
 124:	00001273 	.word	0x00001273
 128:	00001273 	.word	0x00001273
 12c:	00001273 	.word	0x00001273
 130:	00001273 	.word	0x00001273
 134:	00001273 	.word	0x00001273
 138:	00001273 	.word	0x00001273
 13c:	00001273 	.word	0x00001273
 140:	00001273 	.word	0x00001273
 144:	00001273 	.word	0x00001273
 148:	00001273 	.word	0x00001273
 14c:	00001273 	.word	0x00001273
 150:	00001273 	.word	0x00001273
 154:	00001273 	.word	0x00001273
 158:	00001273 	.word	0x00001273
 15c:	00001273 	.word	0x00001273
 160:	00001273 	.word	0x00001273
 164:	00001273 	.word	0x00001273
 168:	00001273 	.word	0x00001273
 16c:	00001273 	.word	0x00001273
 170:	00001273 	.word	0x00001273
 174:	00001273 	.word	0x00001273
 178:	00001273 	.word	0x00001273
 17c:	00001273 	.word	0x00001273
 180:	00001273 	.word	0x00001273
 184:	00001273 	.word	0x00001273
 188:	00001273 	.word	0x00001273
 18c:	00001273 	.word	0x00001273
 190:	00001273 	.word	0x00001273
 194:	00001273 	.word	0x00001273
 198:	00001273 	.word	0x00001273
 19c:	00001273 	.word	0x00001273
 1a0:	00001273 	.word	0x00001273
 1a4:	00001273 	.word	0x00001273
 1a8:	00001273 	.word	0x00001273
 1ac:	00001273 	.word	0x00001273
 1b0:	00001273 	.word	0x00001273
 1b4:	00001273 	.word	0x00001273
 1b8:	00001273 	.word	0x00001273
 1bc:	00001273 	.word	0x00001273
 1c0:	00001273 	.word	0x00001273
 1c4:	00001273 	.word	0x00001273
 1c8:	00001273 	.word	0x00001273
 1cc:	00001273 	.word	0x00001273
 1d0:	00001273 	.word	0x00001273
 1d4:	00001273 	.word	0x00001273
 1d8:	00001273 	.word	0x00001273
 1dc:	00001273 	.word	0x00001273
 1e0:	00001273 	.word	0x00001273
 1e4:	00001273 	.word	0x00001273
 1e8:	00001273 	.word	0x00001273
 1ec:	00001273 	.word	0x00001273
 1f0:	00001273 	.word	0x00001273
 1f4:	00001273 	.word	0x00001273
 1f8:	00001273 	.word	0x00001273
 1fc:	00001273 	.word	0x00001273
 200:	00001273 	.word	0x00001273
 204:	00001273 	.word	0x00001273
 208:	00001273 	.word	0x00001273
 20c:	00001273 	.word	0x00001273
 210:	00001273 	.word	0x00001273
 214:	00001273 	.word	0x00001273
 218:	00001273 	.word	0x00001273
 21c:	00001273 	.word	0x00001273
 220:	00001273 	.word	0x00001273
 224:	00001273 	.word	0x00001273
 228:	00001273 	.word	0x00001273
 22c:	00001273 	.word	0x00001273
 230:	00001273 	.word	0x00001273
 234:	00001273 	.word	0x00001273
 238:	00001273 	.word	0x00001273
 23c:	00001273 	.word	0x00001273
 240:	00001273 	.word	0x00001273
 244:	00001273 	.word	0x00001273
 248:	00001273 	.word	0x00001273
 24c:	00001273 	.word	0x00001273
 250:	00001273 	.word	0x00001273
 254:	00001273 	.word	0x00001273
 258:	00001273 	.word	0x00001273
 25c:	00001273 	.word	0x00001273
 260:	00001273 	.word	0x00001273
 264:	00001273 	.word	0x00001273
 268:	00001273 	.word	0x00001273
 26c:	00001273 	.word	0x00001273
 270:	00001273 	.word	0x00001273
 274:	00001273 	.word	0x00001273
 278:	00001273 	.word	0x00001273
 27c:	00001273 	.word	0x00001273
 280:	00001273 	.word	0x00001273
 284:	00001273 	.word	0x00001273
 288:	00001273 	.word	0x00001273
 28c:	00001273 	.word	0x00001273
 290:	00001273 	.word	0x00001273
 294:	00001273 	.word	0x00001273
 298:	00001273 	.word	0x00001273
 29c:	00001273 	.word	0x00001273
 2a0:	00001273 	.word	0x00001273
 2a4:	00001273 	.word	0x00001273
 2a8:	00001273 	.word	0x00001273
 2ac:	00001273 	.word	0x00001273
 2b0:	00001273 	.word	0x00001273
 2b4:	00001273 	.word	0x00001273
 2b8:	00001273 	.word	0x00001273
 2bc:	00001273 	.word	0x00001273
 2c0:	00001273 	.word	0x00001273
 2c4:	00001273 	.word	0x00001273
 2c8:	00001273 	.word	0x00001273
 2cc:	00001273 	.word	0x00001273
 2d0:	00001273 	.word	0x00001273
 2d4:	00001273 	.word	0x00001273
 2d8:	00001273 	.word	0x00001273
 2dc:	00001273 	.word	0x00001273
 2e0:	00001273 	.word	0x00001273
 2e4:	00001273 	.word	0x00001273
 2e8:	00001273 	.word	0x00001273
 2ec:	00001273 	.word	0x00001273
 2f0:	00001273 	.word	0x00001273
 2f4:	00001273 	.word	0x00001273
 2f8:	00001273 	.word	0x00001273
 2fc:	00001273 	.word	0x00001273
 300:	00001273 	.word	0x00001273
 304:	00001273 	.word	0x00001273
 308:	00001273 	.word	0x00001273
 30c:	00001273 	.word	0x00001273

Disassembly of section .flash:

00000410 <_start>:
     410:	b672      	cpsid	i
     412:	f04f 0000 	mov.w	r0, #0
     416:	f04f 0100 	mov.w	r1, #0
     41a:	f04f 0200 	mov.w	r2, #0
     41e:	f04f 0300 	mov.w	r3, #0
     422:	f04f 0400 	mov.w	r4, #0
     426:	f04f 0500 	mov.w	r5, #0
     42a:	f04f 0600 	mov.w	r6, #0
     42e:	f04f 0700 	mov.w	r7, #0
     432:	481b      	ldr	r0, [pc, #108]	; (4a0 <_end_of_eunit_test+0xa>)
     434:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
     438:	6001      	str	r1, [r0, #0]

0000043a <SetVTOR>:
     43a:	481a      	ldr	r0, [pc, #104]	; (4a4 <_end_of_eunit_test+0xe>)
     43c:	491a      	ldr	r1, [pc, #104]	; (4a8 <_end_of_eunit_test+0x12>)
     43e:	6001      	str	r1, [r0, #0]

00000440 <SetCore0Stack>:
     440:	481a      	ldr	r0, [pc, #104]	; (4ac <_end_of_eunit_test+0x16>)
     442:	f380 8808 	msr	MSP, r0
     446:	e7ff      	b.n	448 <DisableSWT0>

00000448 <DisableSWT0>:
     448:	4819      	ldr	r0, [pc, #100]	; (4b0 <_end_of_eunit_test+0x1a>)
     44a:	f242 5120 	movw	r1, #9504	; 0x2520
     44e:	6001      	str	r1, [r0, #0]
     450:	4818      	ldr	r0, [pc, #96]	; (4b4 <_end_of_eunit_test+0x1e>)
     452:	f64f 71ff 	movw	r1, #65535	; 0xffff
     456:	6001      	str	r1, [r0, #0]
     458:	e7ff      	b.n	45a <RamInit>

0000045a <RamInit>:
     45a:	4817      	ldr	r0, [pc, #92]	; (4b8 <_end_of_eunit_test+0x22>)
     45c:	2800      	cmp	r0, #0
     45e:	d009      	beq.n	474 <DebuggerHeldCoreLoop>
     460:	4916      	ldr	r1, [pc, #88]	; (4bc <_end_of_eunit_test+0x26>)
     462:	4a17      	ldr	r2, [pc, #92]	; (4c0 <_end_of_eunit_test+0x2a>)
     464:	1a52      	subs	r2, r2, r1
     466:	3a01      	subs	r2, #1
     468:	dd04      	ble.n	474 <DebuggerHeldCoreLoop>
     46a:	2000      	movs	r0, #0
     46c:	2300      	movs	r3, #0

0000046e <SRAM_LOOP>:
     46e:	c109      	stmia	r1!, {r0, r3}
     470:	3a08      	subs	r2, #8
     472:	dafc      	bge.n	46e <SRAM_LOOP>

00000474 <DebuggerHeldCoreLoop>:
     474:	4813      	ldr	r0, [pc, #76]	; (4c4 <_end_of_eunit_test+0x2e>)
     476:	6800      	ldr	r0, [r0, #0]
     478:	f04f 315a 	mov.w	r1, #1515870810	; 0x5a5a5a5a
     47c:	4288      	cmp	r0, r1
     47e:	d0f9      	beq.n	474 <DebuggerHeldCoreLoop>

00000480 <_DATA_INIT>:
     480:	e7ff      	b.n	482 <_INIT_DATA_BSS>

00000482 <_INIT_DATA_BSS>:
     482:	f000 fe25 	bl	10d0 <init_data_bss>

00000486 <__SYSTEM_INIT>:
     486:	f000 f81f 	bl	4c8 <SystemInit>

0000048a <_MAIN>:
     48a:	b662      	cpsie	i
     48c:	f000 fee4 	bl	1258 <startup_go_to_user_mode>
     490:	f000 fa56 	bl	940 <main>

00000494 <MCAL_LTB_TRACE_OFF>:
     494:	bf00      	nop

00000496 <_end_of_eunit_test>:
     496:	e7fe      	b.n	496 <_end_of_eunit_test>
     498:	f3af 8000 	nop.w
     49c:	f3af 8000 	nop.w
     4a0:	40048004 	.word	0x40048004
     4a4:	e000ed08 	.word	0xe000ed08
     4a8:	1fff8800 	.word	0x1fff8800
     4ac:	20007000 	.word	0x20007000
     4b0:	40052000 	.word	0x40052000
     4b4:	40052008 	.word	0x40052008
     4b8:	00000001 	.word	0x00000001
     4bc:	1fff8000 	.word	0x1fff8000
     4c0:	20007000 	.word	0x20007000
     4c4:	1fff91d8 	.word	0x1fff91d8

000004c8 <SystemInit>:
#else
    __attribute__ ((section (".systeminit")))
#endif 

void SystemInit(void)
{
     4c8:	b508      	push	{r3, lr}
/**************************************************************************/
                      /* FPU ENABLE*/
/**************************************************************************/
#ifdef ENABLE_FPU
    /* Enable CP10 and CP11 coprocessors */
    S32_SCB->CPACR |= (S32_SCB_CPACR_CPx(10U, 3U) | S32_SCB_CPACR_CPx(11U, 3U)); 
     4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ce:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
     4d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     4da:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88

    ASM_KEYWORD("dsb");
     4de:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     4e2:	f3bf 8f6f 	isb	sy
#endif /* ENABLE_FPU */

#ifdef ENABLE_THREAD_MODE_ENTRY_CONFIGURATION
    S32_SCB->CCR    |=  1u;       /**< processor can enter Thread mode from any level under the 
     4e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
     4ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     4f2:	f043 0301 	orr.w	r3, r3, #1
     4f6:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
                                   control of an EXC_RETURN value, PendSV priority set to 0*/
#endif
    S32_SCB->SHPR3 &= ~S32_SCB_SHPR3_PRI_14_MASK; 
     4fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     4fe:	f8d3 3d20 	ldr.w	r3, [r3, #3360]	; 0xd20
     502:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
     506:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
     50a:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    
    /* enable the AIPS */
    IP_AIPS->MPRA = 0x77777777;      
     50e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     512:	f04f 3277 	mov.w	r2, #2004318071	; 0x77777777
     516:	601a      	str	r2, [r3, #0]
    IP_AIPS->PACRA  = 0x0; 
     518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     51c:	2200      	movs	r2, #0
     51e:	621a      	str	r2, [r3, #32]
    IP_AIPS->PACRB  = 0x0; 
     520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     524:	2200      	movs	r2, #0
     526:	625a      	str	r2, [r3, #36]	; 0x24
    IP_AIPS->PACRD  = 0x0;
     528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     52c:	2200      	movs	r2, #0
     52e:	62da      	str	r2, [r3, #44]	; 0x2c
    IP_AIPS->OPACR[0] = 0x0; 
     530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     534:	2200      	movs	r2, #0
     536:	641a      	str	r2, [r3, #64]	; 0x40
    IP_AIPS->OPACR[1] = 0x0; 
     538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     53c:	2200      	movs	r2, #0
     53e:	645a      	str	r2, [r3, #68]	; 0x44
    IP_AIPS->OPACR[2] = 0x0; 
     540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     544:	2200      	movs	r2, #0
     546:	649a      	str	r2, [r3, #72]	; 0x48
    IP_AIPS->OPACR[3] = 0x0; 
     548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     54c:	2200      	movs	r2, #0
     54e:	64da      	str	r2, [r3, #76]	; 0x4c
    IP_AIPS->OPACR[4] = 0x0; 
     550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     554:	2200      	movs	r2, #0
     556:	651a      	str	r2, [r3, #80]	; 0x50
    IP_AIPS->OPACR[5] = 0x0; 
     558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     55c:	2200      	movs	r2, #0
     55e:	655a      	str	r2, [r3, #84]	; 0x54
    IP_AIPS->OPACR[6] = 0x0; 
     560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     564:	2200      	movs	r2, #0
     566:	659a      	str	r2, [r3, #88]	; 0x58
    IP_AIPS->OPACR[7] = 0x0; 
     568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     56c:	2200      	movs	r2, #0
     56e:	65da      	str	r2, [r3, #92]	; 0x5c
    IP_AIPS->OPACR[8] = 0x0; 
     570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     574:	2200      	movs	r2, #0
     576:	661a      	str	r2, [r3, #96]	; 0x60
    IP_AIPS->OPACR[9] = 0x0; 
     578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     57c:	2200      	movs	r2, #0
     57e:	665a      	str	r2, [r3, #100]	; 0x64
    IP_AIPS->OPACR[10] = 0x0;
     580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     584:	2200      	movs	r2, #0
     586:	669a      	str	r2, [r3, #104]	; 0x68
    IP_AIPS->OPACR[11] = 0x0;
     588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     58c:	2200      	movs	r2, #0
     58e:	66da      	str	r2, [r3, #108]	; 0x6c

/**************************************************************************/
                      /* DEFAULT MEMORY ENABLE*/
/**************************************************************************/
    ASM_KEYWORD("dsb");
     590:	f3bf 8f4f 	dsb	sy
    ASM_KEYWORD("isb");
     594:	f3bf 8f6f 	isb	sy

#ifdef I_CACHE_ENABLE  
/**************************************************************************/
            /* ENABLE CACHE */
/**************************************************************************/
    (void)sys_m4_cache_init(CODE_CACHE);    
     598:	2000      	movs	r0, #0
     59a:	f000 fe2f 	bl	11fc <sys_m4_cache_init>
#endif
}
     59e:	bf00      	nop
     5a0:	bd08      	pop	{r3, pc}

000005a2 <NMI_Handler>:
#endif


void NMI_Handler(void)
{
    while(TRUE){};
     5a2:	e7fe      	b.n	5a2 <NMI_Handler>

000005a4 <__aeabi_uldivmod>:
     5a4:	b953      	cbnz	r3, 5bc <__aeabi_uldivmod+0x18>
     5a6:	b94a      	cbnz	r2, 5bc <__aeabi_uldivmod+0x18>
     5a8:	2900      	cmp	r1, #0
     5aa:	bf08      	it	eq
     5ac:	2800      	cmpeq	r0, #0
     5ae:	bf1c      	itt	ne
     5b0:	f04f 31ff 	movne.w	r1, #4294967295
     5b4:	f04f 30ff 	movne.w	r0, #4294967295
     5b8:	f000 b978 	b.w	8ac <__aeabi_idiv0>
     5bc:	f1ad 0c08 	sub.w	ip, sp, #8
     5c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     5c4:	f000 f806 	bl	5d4 <__udivmoddi4>
     5c8:	f8dd e004 	ldr.w	lr, [sp, #4]
     5cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     5d0:	b004      	add	sp, #16
     5d2:	4770      	bx	lr

000005d4 <__udivmoddi4>:
     5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     5d8:	9d08      	ldr	r5, [sp, #32]
     5da:	460e      	mov	r6, r1
     5dc:	4604      	mov	r4, r0
     5de:	468e      	mov	lr, r1
     5e0:	2b00      	cmp	r3, #0
     5e2:	d14c      	bne.n	67e <__udivmoddi4+0xaa>
     5e4:	428a      	cmp	r2, r1
     5e6:	4694      	mov	ip, r2
     5e8:	d967      	bls.n	6ba <__udivmoddi4+0xe6>
     5ea:	fab2 f282 	clz	r2, r2
     5ee:	b152      	cbz	r2, 606 <__udivmoddi4+0x32>
     5f0:	fa01 f302 	lsl.w	r3, r1, r2
     5f4:	f1c2 0120 	rsb	r1, r2, #32
     5f8:	fa20 f101 	lsr.w	r1, r0, r1
     5fc:	fa0c fc02 	lsl.w	ip, ip, r2
     600:	ea41 0e03 	orr.w	lr, r1, r3
     604:	4094      	lsls	r4, r2
     606:	ea4f 481c 	mov.w	r8, ip, lsr #16
     60a:	0c21      	lsrs	r1, r4, #16
     60c:	fbbe f6f8 	udiv	r6, lr, r8
     610:	fa1f f78c 	uxth.w	r7, ip
     614:	fb08 e316 	mls	r3, r8, r6, lr
     618:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     61c:	fb06 f107 	mul.w	r1, r6, r7
     620:	4299      	cmp	r1, r3
     622:	d90a      	bls.n	63a <__udivmoddi4+0x66>
     624:	eb1c 0303 	adds.w	r3, ip, r3
     628:	f106 30ff 	add.w	r0, r6, #4294967295
     62c:	f080 811e 	bcs.w	86c <__udivmoddi4+0x298>
     630:	4299      	cmp	r1, r3
     632:	f240 811b 	bls.w	86c <__udivmoddi4+0x298>
     636:	3e02      	subs	r6, #2
     638:	4463      	add	r3, ip
     63a:	1a5b      	subs	r3, r3, r1
     63c:	b2a4      	uxth	r4, r4
     63e:	fbb3 f0f8 	udiv	r0, r3, r8
     642:	fb08 3310 	mls	r3, r8, r0, r3
     646:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     64a:	fb00 f707 	mul.w	r7, r0, r7
     64e:	42a7      	cmp	r7, r4
     650:	d90a      	bls.n	668 <__udivmoddi4+0x94>
     652:	eb1c 0404 	adds.w	r4, ip, r4
     656:	f100 33ff 	add.w	r3, r0, #4294967295
     65a:	f080 8109 	bcs.w	870 <__udivmoddi4+0x29c>
     65e:	42a7      	cmp	r7, r4
     660:	f240 8106 	bls.w	870 <__udivmoddi4+0x29c>
     664:	4464      	add	r4, ip
     666:	3802      	subs	r0, #2
     668:	1be4      	subs	r4, r4, r7
     66a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     66e:	2100      	movs	r1, #0
     670:	b11d      	cbz	r5, 67a <__udivmoddi4+0xa6>
     672:	40d4      	lsrs	r4, r2
     674:	2300      	movs	r3, #0
     676:	e9c5 4300 	strd	r4, r3, [r5]
     67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     67e:	428b      	cmp	r3, r1
     680:	d908      	bls.n	694 <__udivmoddi4+0xc0>
     682:	2d00      	cmp	r5, #0
     684:	f000 80ef 	beq.w	866 <__udivmoddi4+0x292>
     688:	2100      	movs	r1, #0
     68a:	e9c5 0600 	strd	r0, r6, [r5]
     68e:	4608      	mov	r0, r1
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	fab3 f183 	clz	r1, r3
     698:	2900      	cmp	r1, #0
     69a:	d149      	bne.n	730 <__udivmoddi4+0x15c>
     69c:	42b3      	cmp	r3, r6
     69e:	d302      	bcc.n	6a6 <__udivmoddi4+0xd2>
     6a0:	4282      	cmp	r2, r0
     6a2:	f200 80ff 	bhi.w	8a4 <__udivmoddi4+0x2d0>
     6a6:	1a84      	subs	r4, r0, r2
     6a8:	eb66 0303 	sbc.w	r3, r6, r3
     6ac:	2001      	movs	r0, #1
     6ae:	469e      	mov	lr, r3
     6b0:	2d00      	cmp	r5, #0
     6b2:	d0e2      	beq.n	67a <__udivmoddi4+0xa6>
     6b4:	e9c5 4e00 	strd	r4, lr, [r5]
     6b8:	e7df      	b.n	67a <__udivmoddi4+0xa6>
     6ba:	b902      	cbnz	r2, 6be <__udivmoddi4+0xea>
     6bc:	deff      	udf	#255	; 0xff
     6be:	fab2 f282 	clz	r2, r2
     6c2:	2a00      	cmp	r2, #0
     6c4:	f040 808e 	bne.w	7e4 <__udivmoddi4+0x210>
     6c8:	eba1 060c 	sub.w	r6, r1, ip
     6cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
     6d0:	fa1f f38c 	uxth.w	r3, ip
     6d4:	2101      	movs	r1, #1
     6d6:	fbb6 fef7 	udiv	lr, r6, r7
     6da:	fb07 601e 	mls	r0, r7, lr, r6
     6de:	0c26      	lsrs	r6, r4, #16
     6e0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     6e4:	fb03 f00e 	mul.w	r0, r3, lr
     6e8:	42b0      	cmp	r0, r6
     6ea:	d908      	bls.n	6fe <__udivmoddi4+0x12a>
     6ec:	eb1c 0606 	adds.w	r6, ip, r6
     6f0:	f10e 38ff 	add.w	r8, lr, #4294967295
     6f4:	d202      	bcs.n	6fc <__udivmoddi4+0x128>
     6f6:	42b0      	cmp	r0, r6
     6f8:	f200 80d0 	bhi.w	89c <__udivmoddi4+0x2c8>
     6fc:	46c6      	mov	lr, r8
     6fe:	1a36      	subs	r6, r6, r0
     700:	b2a4      	uxth	r4, r4
     702:	fbb6 f0f7 	udiv	r0, r6, r7
     706:	fb07 6610 	mls	r6, r7, r0, r6
     70a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
     70e:	fb00 f303 	mul.w	r3, r0, r3
     712:	42a3      	cmp	r3, r4
     714:	d908      	bls.n	728 <__udivmoddi4+0x154>
     716:	eb1c 0404 	adds.w	r4, ip, r4
     71a:	f100 36ff 	add.w	r6, r0, #4294967295
     71e:	d202      	bcs.n	726 <__udivmoddi4+0x152>
     720:	42a3      	cmp	r3, r4
     722:	f200 80b8 	bhi.w	896 <__udivmoddi4+0x2c2>
     726:	4630      	mov	r0, r6
     728:	1ae4      	subs	r4, r4, r3
     72a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     72e:	e79f      	b.n	670 <__udivmoddi4+0x9c>
     730:	f1c1 0720 	rsb	r7, r1, #32
     734:	fa22 f407 	lsr.w	r4, r2, r7
     738:	408b      	lsls	r3, r1
     73a:	4323      	orrs	r3, r4
     73c:	fa06 fc01 	lsl.w	ip, r6, r1
     740:	fa26 f407 	lsr.w	r4, r6, r7
     744:	fa20 f607 	lsr.w	r6, r0, r7
     748:	ea46 060c 	orr.w	r6, r6, ip
     74c:	ea4f 4913 	mov.w	r9, r3, lsr #16
     750:	fa00 f801 	lsl.w	r8, r0, r1
     754:	fbb4 fef9 	udiv	lr, r4, r9
     758:	0c30      	lsrs	r0, r6, #16
     75a:	fa1f fc83 	uxth.w	ip, r3
     75e:	fb09 441e 	mls	r4, r9, lr, r4
     762:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
     766:	fb0e f00c 	mul.w	r0, lr, ip
     76a:	42a0      	cmp	r0, r4
     76c:	fa02 f201 	lsl.w	r2, r2, r1
     770:	d90a      	bls.n	788 <__udivmoddi4+0x1b4>
     772:	191c      	adds	r4, r3, r4
     774:	f10e 3aff 	add.w	sl, lr, #4294967295
     778:	f080 808b 	bcs.w	892 <__udivmoddi4+0x2be>
     77c:	42a0      	cmp	r0, r4
     77e:	f240 8088 	bls.w	892 <__udivmoddi4+0x2be>
     782:	f1ae 0e02 	sub.w	lr, lr, #2
     786:	441c      	add	r4, r3
     788:	1a24      	subs	r4, r4, r0
     78a:	b2b6      	uxth	r6, r6
     78c:	fbb4 f0f9 	udiv	r0, r4, r9
     790:	fb09 4410 	mls	r4, r9, r0, r4
     794:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
     798:	fb00 fc0c 	mul.w	ip, r0, ip
     79c:	45a4      	cmp	ip, r4
     79e:	d907      	bls.n	7b0 <__udivmoddi4+0x1dc>
     7a0:	191c      	adds	r4, r3, r4
     7a2:	f100 36ff 	add.w	r6, r0, #4294967295
     7a6:	d270      	bcs.n	88a <__udivmoddi4+0x2b6>
     7a8:	45a4      	cmp	ip, r4
     7aa:	d96e      	bls.n	88a <__udivmoddi4+0x2b6>
     7ac:	3802      	subs	r0, #2
     7ae:	441c      	add	r4, r3
     7b0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     7b4:	fba0 e602 	umull	lr, r6, r0, r2
     7b8:	eba4 040c 	sub.w	r4, r4, ip
     7bc:	42b4      	cmp	r4, r6
     7be:	46f4      	mov	ip, lr
     7c0:	46b1      	mov	r9, r6
     7c2:	d359      	bcc.n	878 <__udivmoddi4+0x2a4>
     7c4:	d056      	beq.n	874 <__udivmoddi4+0x2a0>
     7c6:	2d00      	cmp	r5, #0
     7c8:	d06e      	beq.n	8a8 <__udivmoddi4+0x2d4>
     7ca:	ebb8 030c 	subs.w	r3, r8, ip
     7ce:	eb64 0409 	sbc.w	r4, r4, r9
     7d2:	40cb      	lsrs	r3, r1
     7d4:	fa04 f707 	lsl.w	r7, r4, r7
     7d8:	431f      	orrs	r7, r3
     7da:	40cc      	lsrs	r4, r1
     7dc:	e9c5 7400 	strd	r7, r4, [r5]
     7e0:	2100      	movs	r1, #0
     7e2:	e74a      	b.n	67a <__udivmoddi4+0xa6>
     7e4:	f1c2 0020 	rsb	r0, r2, #32
     7e8:	fa24 f100 	lsr.w	r1, r4, r0
     7ec:	fa0c fc02 	lsl.w	ip, ip, r2
     7f0:	fa06 f302 	lsl.w	r3, r6, r2
     7f4:	fa26 f000 	lsr.w	r0, r6, r0
     7f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
     7fc:	ea41 0603 	orr.w	r6, r1, r3
     800:	fbb0 f1f7 	udiv	r1, r0, r7
     804:	fa1f f38c 	uxth.w	r3, ip
     808:	fb07 0e11 	mls	lr, r7, r1, r0
     80c:	0c30      	lsrs	r0, r6, #16
     80e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     812:	fb01 fe03 	mul.w	lr, r1, r3
     816:	4586      	cmp	lr, r0
     818:	fa04 f402 	lsl.w	r4, r4, r2
     81c:	d908      	bls.n	830 <__udivmoddi4+0x25c>
     81e:	eb1c 0000 	adds.w	r0, ip, r0
     822:	f101 38ff 	add.w	r8, r1, #4294967295
     826:	d232      	bcs.n	88e <__udivmoddi4+0x2ba>
     828:	4586      	cmp	lr, r0
     82a:	d930      	bls.n	88e <__udivmoddi4+0x2ba>
     82c:	3902      	subs	r1, #2
     82e:	4460      	add	r0, ip
     830:	eba0 000e 	sub.w	r0, r0, lr
     834:	b2b6      	uxth	r6, r6
     836:	fbb0 fef7 	udiv	lr, r0, r7
     83a:	fb07 001e 	mls	r0, r7, lr, r0
     83e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     842:	fb0e f003 	mul.w	r0, lr, r3
     846:	42b0      	cmp	r0, r6
     848:	d909      	bls.n	85e <__udivmoddi4+0x28a>
     84a:	eb1c 0606 	adds.w	r6, ip, r6
     84e:	f10e 38ff 	add.w	r8, lr, #4294967295
     852:	d218      	bcs.n	886 <__udivmoddi4+0x2b2>
     854:	42b0      	cmp	r0, r6
     856:	d916      	bls.n	886 <__udivmoddi4+0x2b2>
     858:	f1ae 0e02 	sub.w	lr, lr, #2
     85c:	4466      	add	r6, ip
     85e:	1a36      	subs	r6, r6, r0
     860:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
     864:	e737      	b.n	6d6 <__udivmoddi4+0x102>
     866:	4629      	mov	r1, r5
     868:	4628      	mov	r0, r5
     86a:	e706      	b.n	67a <__udivmoddi4+0xa6>
     86c:	4606      	mov	r6, r0
     86e:	e6e4      	b.n	63a <__udivmoddi4+0x66>
     870:	4618      	mov	r0, r3
     872:	e6f9      	b.n	668 <__udivmoddi4+0x94>
     874:	45f0      	cmp	r8, lr
     876:	d2a6      	bcs.n	7c6 <__udivmoddi4+0x1f2>
     878:	ebbe 0c02 	subs.w	ip, lr, r2
     87c:	eb66 0303 	sbc.w	r3, r6, r3
     880:	3801      	subs	r0, #1
     882:	4699      	mov	r9, r3
     884:	e79f      	b.n	7c6 <__udivmoddi4+0x1f2>
     886:	46c6      	mov	lr, r8
     888:	e7e9      	b.n	85e <__udivmoddi4+0x28a>
     88a:	4630      	mov	r0, r6
     88c:	e790      	b.n	7b0 <__udivmoddi4+0x1dc>
     88e:	4641      	mov	r1, r8
     890:	e7ce      	b.n	830 <__udivmoddi4+0x25c>
     892:	46d6      	mov	lr, sl
     894:	e778      	b.n	788 <__udivmoddi4+0x1b4>
     896:	4464      	add	r4, ip
     898:	3802      	subs	r0, #2
     89a:	e745      	b.n	728 <__udivmoddi4+0x154>
     89c:	f1ae 0e02 	sub.w	lr, lr, #2
     8a0:	4466      	add	r6, ip
     8a2:	e72c      	b.n	6fe <__udivmoddi4+0x12a>
     8a4:	4608      	mov	r0, r1
     8a6:	e703      	b.n	6b0 <__udivmoddi4+0xdc>
     8a8:	4629      	mov	r1, r5
     8aa:	e6e6      	b.n	67a <__udivmoddi4+0xa6>

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <Delay>:
void EcuM_Init( void );

/*this is dummy delay function prepare just for this example, in a real application 
no delay shall be used*/
void Delay( uint32 ms )
{
     8b0:	b500      	push	{lr}
     8b2:	b087      	sub	sp, #28
     8b4:	9001      	str	r0, [sp, #4]
    uint32 Timeout = OsIf_MicrosToTicks( ms * 1000u, OSIF_COUNTER_SYSTEM );
     8b6:	9b01      	ldr	r3, [sp, #4]
     8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     8bc:	fb02 f303 	mul.w	r3, r2, r3
     8c0:	2101      	movs	r1, #1
     8c2:	4618      	mov	r0, r3
     8c4:	f001 fcd6 	bl	2274 <OsIf_MicrosToTicks>
     8c8:	9004      	str	r0, [sp, #16]
    uint32 SeedTick = OsIf_GetCounter( OSIF_COUNTER_SYSTEM );
     8ca:	2001      	movs	r0, #1
     8cc:	f001 fc86 	bl	21dc <OsIf_GetCounter>
     8d0:	4603      	mov	r3, r0
     8d2:	9303      	str	r3, [sp, #12]
    uint32 ElapsedTime = 0u;
     8d4:	2300      	movs	r3, #0
     8d6:	9305      	str	r3, [sp, #20]
    do{
        ElapsedTime += OsIf_GetElapsed( &SeedTick, OSIF_COUNTER_SYSTEM );
     8d8:	ab03      	add	r3, sp, #12
     8da:	2101      	movs	r1, #1
     8dc:	4618      	mov	r0, r3
     8de:	f001 fc96 	bl	220e <OsIf_GetElapsed>
     8e2:	4602      	mov	r2, r0
     8e4:	9b05      	ldr	r3, [sp, #20]
     8e6:	4413      	add	r3, r2
     8e8:	9305      	str	r3, [sp, #20]
    }
    while( ElapsedTime < Timeout );
     8ea:	9a05      	ldr	r2, [sp, #20]
     8ec:	9b04      	ldr	r3, [sp, #16]
     8ee:	429a      	cmp	r2, r3
     8f0:	d3f2      	bcc.n	8d8 <Delay+0x28>
}
     8f2:	bf00      	nop
     8f4:	bf00      	nop
     8f6:	b007      	add	sp, #28
     8f8:	f85d fb04 	ldr.w	pc, [sp], #4

000008fc <CanIf_ControllerBusOff>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerBusOff(uint8 ControllerId)
{
     8fc:	b082      	sub	sp, #8
     8fe:	4603      	mov	r3, r0
     900:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
}
     904:	bf00      	nop
     906:	b002      	add	sp, #8
     908:	4770      	bx	lr

0000090a <CanIf_ControllerModeIndication>:

/*CanIf callback function implementation, just to avoid compiler errors
in reality this function is already implemented in CanIf layer*/
void CanIf_ControllerModeIndication(uint8 ControllerId, Can_ControllerStateType ControllerMode )
{
     90a:	b082      	sub	sp, #8
     90c:	4603      	mov	r3, r0
     90e:	9100      	str	r1, [sp, #0]
     910:	f88d 3007 	strb.w	r3, [sp, #7]
    (void)ControllerId;
    (void)ControllerMode;
}
     914:	bf00      	nop
     916:	b002      	add	sp, #8
     918:	4770      	bx	lr
	...

0000091c <CanIf_TxConfirmation>:

/*CanIf callback function implementation to set the flag when a message is transmited
this function is called by the interrupt function three times, once every message has
been transmitted. In reality this function is already implemented in CanIf layer*/
void CanIf_TxConfirmation( PduIdType CanTxPduId )
{
     91c:	b082      	sub	sp, #8
     91e:	4603      	mov	r3, r0
     920:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
    */
    /* In this case will set the flag upon every time each message is transmitted, 
       instead of waiting until all 3 are transmitted first, like previous examples.
    */ 
    CanIf_bTxFlag = TRUE;
     924:	4b02      	ldr	r3, [pc, #8]	; (930 <CanIf_TxConfirmation+0x14>)
     926:	2201      	movs	r2, #1
     928:	701a      	strb	r2, [r3, #0]
    (void)CanTxPduId;
}
     92a:	bf00      	nop
     92c:	b002      	add	sp, #8
     92e:	4770      	bx	lr
     930:	1fff8b40 	.word	0x1fff8b40

00000934 <CanIf_RxIndication>:

/*CanIf callback function implementation to set the flag when a message is received
this function is called by the CAN interrupt.
In reality this function is already implemented in CanIf layer*/
void CanIf_RxIndication(const Can_HwType* Mailbox, const PduInfoType* PduInfoPtr )
{
     934:	b082      	sub	sp, #8
     936:	9001      	str	r0, [sp, #4]
     938:	9100      	str	r1, [sp, #0]
    (void)Mailbox;
    /*the received message is store in PduInfoPtr->SduDataPtr*/
    (void)PduInfoPtr;
}
     93a:	bf00      	nop
     93c:	b002      	add	sp, #8
     93e:	4770      	bx	lr

00000940 <main>:
 * This is the main function of the project, it is the entry point of the program
 * 
 * @return Always zero
*/
int main( void )
{
     940:	b500      	push	{lr}
     942:	b08b      	sub	sp, #44	; 0x2c
    EcuM_Init();
     944:	f000 f97c 	bl	c40 <EcuM_Init>

    /* Intiliaze RTT library */
    SEGGER_RTT_Init();
     948:	f000 fe26 	bl	1598 <SEGGER_RTT_Init>

    Can_PduType PduInfo1;
    Can_PduType PduInfo2;
    Can_PduType PduInfo3;

    uint8 RealEvent = 0;     // Actual event of button.
     94c:	2300      	movs	r3, #0
     94e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    uint8 ButtonFlag = 0;    // Button Flag for Msg Tx
     952:	2300      	movs	r3, #0
     954:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27

    /* Set the specified baudrate */
    if (Can_43_FLEXCAN_SetBaudrate(CanController_0, CAN_BAUDRATE_500kbps_ID ) == E_OK) {
     958:	2102      	movs	r1, #2
     95a:	2000      	movs	r0, #0
     95c:	f006 fe2c 	bl	75b8 <Can_43_FLEXCAN_SetBaudrate>
     960:	4603      	mov	r3, r0
     962:	2b00      	cmp	r3, #0
     964:	d104      	bne.n	970 <main+0x30>
        SEGGER_RTT_printf( 0, "CAN baud rate set successfully. \n" );
     966:	49a3      	ldr	r1, [pc, #652]	; (bf4 <__BSS_SRAM_SIZE+0x94>)
     968:	2000      	movs	r0, #0
     96a:	f001 f97d 	bl	1c68 <SEGGER_RTT_printf>
     96e:	e003      	b.n	978 <main+0x38>

    } else {
        SEGGER_RTT_printf( 0, "Failed to set CAN baud rate. \n" );
     970:	49a1      	ldr	r1, [pc, #644]	; (bf8 <__BSS_SRAM_SIZE+0x98>)
     972:	2000      	movs	r0, #0
     974:	f001 f978 	bl	1c68 <SEGGER_RTT_printf>

    /* The CAN module notifies the upper layer (CanIf_ControllerModeIndication) after 
    a successful state transition about the new state. The monitoring whether the 
    requested state is achieved is part of an upper layer module and is not part of 
    the Can module. */
    if (Can_43_FLEXCAN_SetControllerMode( CanController_0, CAN_CS_STARTED ) == E_OK) {
     978:	2101      	movs	r1, #1
     97a:	2000      	movs	r0, #0
     97c:	f006 fe54 	bl	7628 <Can_43_FLEXCAN_SetControllerMode>
     980:	4603      	mov	r3, r0
     982:	2b00      	cmp	r3, #0
     984:	d104      	bne.n	990 <main+0x50>
        SEGGER_RTT_printf( 0, "CAN controller state machine set successfully. \n" );
     986:	499d      	ldr	r1, [pc, #628]	; (bfc <__BSS_SRAM_SIZE+0x9c>)
     988:	2000      	movs	r0, #0
     98a:	f001 f96d 	bl	1c68 <SEGGER_RTT_printf>
     98e:	e003      	b.n	998 <main+0x58>

    } else {
        SEGGER_RTT_printf( 0, "Failed to set CAN controller state machine. \n" );
     990:	499b      	ldr	r1, [pc, #620]	; (c00 <__BSS_SRAM_SIZE+0xa0>)
     992:	2000      	movs	r0, #0
     994:	f001 f968 	bl	1c68 <SEGGER_RTT_printf>
    }

    /* Fill the first PDU structure with the information to be transmitted */
    PduInfo1.id = 0x154u;
     998:	f44f 73aa 	mov.w	r3, #340	; 0x154
     99c:	9306      	str	r3, [sp, #24]
    PduInfo1.swPduHandle = 0u;
     99e:	2300      	movs	r3, #0
     9a0:	f8ad 301c 	strh.w	r3, [sp, #28]
    PduInfo1.length = 8u;
     9a4:	2308      	movs	r3, #8
     9a6:	f88d 301e 	strb.w	r3, [sp, #30]
    PduInfo1.sdu = Can_au8Sdu8bytes;
     9aa:	4b96      	ldr	r3, [pc, #600]	; (c04 <__BSS_SRAM_SIZE+0xa4>)
     9ac:	9308      	str	r3, [sp, #32]
    /* Fill the second PDU structure with the information to be transmitted */
    PduInfo2.id = 0x233u;
     9ae:	f240 2333 	movw	r3, #563	; 0x233
     9b2:	9303      	str	r3, [sp, #12]
    PduInfo2.swPduHandle = 1u;
     9b4:	2301      	movs	r3, #1
     9b6:	f8ad 3010 	strh.w	r3, [sp, #16]
    PduInfo2.length = 8u;
     9ba:	2308      	movs	r3, #8
     9bc:	f88d 3012 	strb.w	r3, [sp, #18]
    PduInfo2.sdu = Can_au8Sdu8bytes;
     9c0:	4b90      	ldr	r3, [pc, #576]	; (c04 <__BSS_SRAM_SIZE+0xa4>)
     9c2:	9305      	str	r3, [sp, #20]
    /* Fill the third PDU structure with the information to be transmitted */
    PduInfo3.id = 0x382u;
     9c4:	f240 3382 	movw	r3, #898	; 0x382
     9c8:	9300      	str	r3, [sp, #0]
    PduInfo3.swPduHandle = 2u;
     9ca:	2302      	movs	r3, #2
     9cc:	f8ad 3004 	strh.w	r3, [sp, #4]
    PduInfo3.length = 8u;
     9d0:	2308      	movs	r3, #8
     9d2:	f88d 3006 	strb.w	r3, [sp, #6]
    PduInfo3.sdu = Can_au8Sdu8bytes;
     9d6:	4b8b      	ldr	r3, [pc, #556]	; (c04 <__BSS_SRAM_SIZE+0xa4>)
     9d8:	9302      	str	r3, [sp, #8]

    while( 1u )
    {
        HwIoAb_Buttons_MainFunction();
     9da:	f000 f9c7 	bl	d6c <HwIoAb_Buttons_MainFunction>
        Delay( 10 ); 
     9de:	200a      	movs	r0, #10
     9e0:	f7ff ff66 	bl	8b0 <Delay>

        for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     9e4:	2300      	movs	r3, #0
     9e6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
     9ea:	e0a5      	b.n	b38 <main+0x1f8>
        {  
            RealEvent =  HwIoAb_Buttons_GetEvent( CurrentButton );   // Obtaining event of actual button.
     9ec:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
     9f0:	4618      	mov	r0, r3
     9f2:	f000 f99d 	bl	d30 <HwIoAb_Buttons_GetEvent>
     9f6:	4603      	mov	r3, r0
     9f8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25

            if ( RealEvent != HWIOAB_BTN_EVENT_IDLE )    // A click was detected
     9fc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
     a00:	2b00      	cmp	r3, #0
     a02:	f000 8091 	beq.w	b28 <main+0x1e8>
            {
                switch( CurrentButton )
     a06:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
     a0a:	2b02      	cmp	r3, #2
     a0c:	d060      	beq.n	ad0 <main+0x190>
     a0e:	2b02      	cmp	r3, #2
     a10:	f300 808c 	bgt.w	b2c <main+0x1ec>
     a14:	2b00      	cmp	r3, #0
     a16:	d002      	beq.n	a1e <main+0xde>
     a18:	2b01      	cmp	r3, #1
     a1a:	d02d      	beq.n	a78 <main+0x138>
                            break;
                        }
                    break;
                    default :
                      // If jump here is an error
                    break;
     a1c:	e086      	b.n	b2c <main+0x1ec>
                        switch( RealEvent )
     a1e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
     a22:	3b01      	subs	r3, #1
     a24:	2b03      	cmp	r3, #3
     a26:	d825      	bhi.n	a74 <main+0x134>
     a28:	a201      	add	r2, pc, #4	; (adr r2, a30 <main+0xf0>)
     a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a2e:	bf00      	nop
     a30:	00000a41 	.word	0x00000a41
     a34:	00000a57 	.word	0x00000a57
     a38:	00000a61 	.word	0x00000a61
     a3c:	00000a6b 	.word	0x00000a6b
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_BLUE_ID );
     a40:	2000      	movs	r0, #0
     a42:	f000 fb1d 	bl	1080 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 1 action: SINGLE_CLICK \n" );
     a46:	4970      	ldr	r1, [pc, #448]	; (c08 <__BSS_SRAM_SIZE+0xa8>)
     a48:	2000      	movs	r0, #0
     a4a:	f001 f90d 	bl	1c68 <SEGGER_RTT_printf>
                                ButtonFlag = 1;
     a4e:	2301      	movs	r3, #1
     a50:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                            break;
     a54:	e00f      	b.n	a76 <main+0x136>
                                SEGGER_RTT_printf( 0, "Button 1 action: DOUBLE_CLICK \n" );
     a56:	496d      	ldr	r1, [pc, #436]	; (c0c <__BSS_SRAM_SIZE+0xac>)
     a58:	2000      	movs	r0, #0
     a5a:	f001 f905 	bl	1c68 <SEGGER_RTT_printf>
                            break;
     a5e:	e00a      	b.n	a76 <main+0x136>
                                SEGGER_RTT_printf( 0, "Button 1 action: HOLD_CLICK \n" );
     a60:	496b      	ldr	r1, [pc, #428]	; (c10 <__BSS_SRAM_SIZE+0xb0>)
     a62:	2000      	movs	r0, #0
     a64:	f001 f900 	bl	1c68 <SEGGER_RTT_printf>
                            break;
     a68:	e005      	b.n	a76 <main+0x136>
                                SEGGER_RTT_printf( 0, "Button 1 action: RELEASE \n" );
     a6a:	496a      	ldr	r1, [pc, #424]	; (c14 <__BSS_SRAM_SIZE+0xb4>)
     a6c:	2000      	movs	r0, #0
     a6e:	f001 f8fb 	bl	1c68 <SEGGER_RTT_printf>
                            break;
     a72:	e000      	b.n	a76 <main+0x136>
                            break;
     a74:	bf00      	nop
                    break;
     a76:	e05a      	b.n	b2e <main+0x1ee>
                        switch( RealEvent )
     a78:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
     a7c:	3b01      	subs	r3, #1
     a7e:	2b03      	cmp	r3, #3
     a80:	d824      	bhi.n	acc <main+0x18c>
     a82:	a201      	add	r2, pc, #4	; (adr r2, a88 <main+0x148>)
     a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a88:	00000a99 	.word	0x00000a99
     a8c:	00000aaf 	.word	0x00000aaf
     a90:	00000ab9 	.word	0x00000ab9
     a94:	00000ac3 	.word	0x00000ac3
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_RED_ID );
     a98:	2001      	movs	r0, #1
     a9a:	f000 faf1 	bl	1080 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 2 action: SINGLE_CLICK \n" );
     a9e:	495e      	ldr	r1, [pc, #376]	; (c18 <__BSS_SRAM_SIZE+0xb8>)
     aa0:	2000      	movs	r0, #0
     aa2:	f001 f8e1 	bl	1c68 <SEGGER_RTT_printf>
                                ButtonFlag = 2;
     aa6:	2302      	movs	r3, #2
     aa8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                            break;
     aac:	e00f      	b.n	ace <main+0x18e>
                                SEGGER_RTT_printf( 0, "Button 2 action: DOUBLE_CLICK \n" );
     aae:	495b      	ldr	r1, [pc, #364]	; (c1c <__BSS_SRAM_SIZE+0xbc>)
     ab0:	2000      	movs	r0, #0
     ab2:	f001 f8d9 	bl	1c68 <SEGGER_RTT_printf>
                            break;
     ab6:	e00a      	b.n	ace <main+0x18e>
                                SEGGER_RTT_printf( 0, "Button 2 action: HOLD_CLICK \n" );
     ab8:	4959      	ldr	r1, [pc, #356]	; (c20 <__BSS_SRAM_SIZE+0xc0>)
     aba:	2000      	movs	r0, #0
     abc:	f001 f8d4 	bl	1c68 <SEGGER_RTT_printf>
                            break;
     ac0:	e005      	b.n	ace <main+0x18e>
                                SEGGER_RTT_printf( 0, "Button 2 action: RELEASE \n" );
     ac2:	4958      	ldr	r1, [pc, #352]	; (c24 <__BSS_SRAM_SIZE+0xc4>)
     ac4:	2000      	movs	r0, #0
     ac6:	f001 f8cf 	bl	1c68 <SEGGER_RTT_printf>
                            break;
     aca:	e000      	b.n	ace <main+0x18e>
                            break;
     acc:	bf00      	nop
                    break;
     ace:	e02e      	b.n	b2e <main+0x1ee>
                        switch( RealEvent )
     ad0:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
     ad4:	3b01      	subs	r3, #1
     ad6:	2b03      	cmp	r3, #3
     ad8:	d824      	bhi.n	b24 <main+0x1e4>
     ada:	a201      	add	r2, pc, #4	; (adr r2, ae0 <main+0x1a0>)
     adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ae0:	00000af1 	.word	0x00000af1
     ae4:	00000b07 	.word	0x00000b07
     ae8:	00000b11 	.word	0x00000b11
     aec:	00000b1b 	.word	0x00000b1b
                                HwIoAb_Leds_TurnToggle( HWIOAB_LED_GREEN_ID );
     af0:	2002      	movs	r0, #2
     af2:	f000 fac5 	bl	1080 <HwIoAb_Leds_TurnToggle>
                                SEGGER_RTT_printf( 0, "Button 3 action: SINGLE_CLICK \n" );
     af6:	494c      	ldr	r1, [pc, #304]	; (c28 <__BSS_SRAM_SIZE+0xc8>)
     af8:	2000      	movs	r0, #0
     afa:	f001 f8b5 	bl	1c68 <SEGGER_RTT_printf>
                                ButtonFlag = 3;
     afe:	2303      	movs	r3, #3
     b00:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                            break;
     b04:	e00f      	b.n	b26 <main+0x1e6>
                                SEGGER_RTT_printf( 0, "Button 3 action: DOUBLE_CLICK \n" );
     b06:	4949      	ldr	r1, [pc, #292]	; (c2c <__BSS_SRAM_SIZE+0xcc>)
     b08:	2000      	movs	r0, #0
     b0a:	f001 f8ad 	bl	1c68 <SEGGER_RTT_printf>
                            break;
     b0e:	e00a      	b.n	b26 <main+0x1e6>
                                SEGGER_RTT_printf( 0, "Button 3 action: HOLD_CLICK \n" );
     b10:	4947      	ldr	r1, [pc, #284]	; (c30 <__BSS_SRAM_SIZE+0xd0>)
     b12:	2000      	movs	r0, #0
     b14:	f001 f8a8 	bl	1c68 <SEGGER_RTT_printf>
                            break;
     b18:	e005      	b.n	b26 <main+0x1e6>
                                SEGGER_RTT_printf( 0, "Button 3 action: RELEASE \n" );
     b1a:	4946      	ldr	r1, [pc, #280]	; (c34 <__BSS_SRAM_SIZE+0xd4>)
     b1c:	2000      	movs	r0, #0
     b1e:	f001 f8a3 	bl	1c68 <SEGGER_RTT_printf>
                            break;
     b22:	e000      	b.n	b26 <main+0x1e6>
                            break;
     b24:	bf00      	nop
                    break;
     b26:	e002      	b.n	b2e <main+0x1ee>
                }  
            }
     b28:	bf00      	nop
     b2a:	e000      	b.n	b2e <main+0x1ee>
                    break;
     b2c:	bf00      	nop
        for ( uint8 CurrentButton = 0; CurrentButton < HWIOAB_BUTTONS_MAX; CurrentButton++ )    // Checking each button and its event detected.
     b2e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
     b32:	3301      	adds	r3, #1
     b34:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
     b38:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
     b3c:	2b02      	cmp	r3, #2
     b3e:	f67f af55 	bls.w	9ec <main+0xac>
        }

        if(ButtonFlag == 1)
     b42:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
     b46:	2b01      	cmp	r3, #1
     b48:	d111      	bne.n	b6e <__BSS_SRAM_SIZE+0xe>
        {
            ButtonFlag = 0;
     b4a:	2300      	movs	r3, #0
     b4c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            Can_au8Sdu8bytes[7] = 0x01U; 
     b50:	4b2c      	ldr	r3, [pc, #176]	; (c04 <__BSS_SRAM_SIZE+0xa4>)
     b52:	2201      	movs	r2, #1
     b54:	71da      	strb	r2, [r3, #7]
            /* Set the message to be transmitted, all messages will be
            transmitted by the CAN interrupt */
            Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo1 );
     b56:	ab06      	add	r3, sp, #24
     b58:	4619      	mov	r1, r3
     b5a:	2000      	movs	r0, #0
     b5c:	f006 ff26 	bl	79ac <Can_43_FLEXCAN_Write>
            SEGGER_RTT_printf( 0, "CAN msg transmitted at 500kbps using Button: %d \n", Can_au8Sdu8bytes[7] );
     b60:	4b28      	ldr	r3, [pc, #160]	; (c04 <__BSS_SRAM_SIZE+0xa4>)
     b62:	79db      	ldrb	r3, [r3, #7]
     b64:	461a      	mov	r2, r3
     b66:	4934      	ldr	r1, [pc, #208]	; (c38 <__BSS_SRAM_SIZE+0xd8>)
     b68:	2000      	movs	r0, #0
     b6a:	f001 f87d 	bl	1c68 <SEGGER_RTT_printf>
        }
        if(ButtonFlag == 2)
     b6e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
     b72:	2b02      	cmp	r3, #2
     b74:	d111      	bne.n	b9a <__BSS_SRAM_SIZE+0x3a>
        {
            ButtonFlag = 0; 
     b76:	2300      	movs	r3, #0
     b78:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            Can_au8Sdu8bytes[7] = 0x02U; 
     b7c:	4b21      	ldr	r3, [pc, #132]	; (c04 <__BSS_SRAM_SIZE+0xa4>)
     b7e:	2202      	movs	r2, #2
     b80:	71da      	strb	r2, [r3, #7]
            /* Set the message to be transmitted, all messages will be
            transmitted by the CAN interrupt */
            Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo1 );
     b82:	ab06      	add	r3, sp, #24
     b84:	4619      	mov	r1, r3
     b86:	2000      	movs	r0, #0
     b88:	f006 ff10 	bl	79ac <Can_43_FLEXCAN_Write>
            SEGGER_RTT_printf( 0, "CAN msg transmitted at 500kbps using Button: %d \n", Can_au8Sdu8bytes[7] );
     b8c:	4b1d      	ldr	r3, [pc, #116]	; (c04 <__BSS_SRAM_SIZE+0xa4>)
     b8e:	79db      	ldrb	r3, [r3, #7]
     b90:	461a      	mov	r2, r3
     b92:	4929      	ldr	r1, [pc, #164]	; (c38 <__BSS_SRAM_SIZE+0xd8>)
     b94:	2000      	movs	r0, #0
     b96:	f001 f867 	bl	1c68 <SEGGER_RTT_printf>
        }
        if(ButtonFlag == 3)
     b9a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
     b9e:	2b03      	cmp	r3, #3
     ba0:	d111      	bne.n	bc6 <__BSS_SRAM_SIZE+0x66>
        {
            ButtonFlag = 0; 
     ba2:	2300      	movs	r3, #0
     ba4:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
            Can_au8Sdu8bytes[7] = 0x03U; 
     ba8:	4b16      	ldr	r3, [pc, #88]	; (c04 <__BSS_SRAM_SIZE+0xa4>)
     baa:	2203      	movs	r2, #3
     bac:	71da      	strb	r2, [r3, #7]
            /* Set the message to be transmitted, all messages will be
            transmitted by the CAN interrupt */
            Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo1 );
     bae:	ab06      	add	r3, sp, #24
     bb0:	4619      	mov	r1, r3
     bb2:	2000      	movs	r0, #0
     bb4:	f006 fefa 	bl	79ac <Can_43_FLEXCAN_Write>
            SEGGER_RTT_printf( 0, "CAN msg transmitted at 500kbps using Button: %d \n", Can_au8Sdu8bytes[7] );
     bb8:	4b12      	ldr	r3, [pc, #72]	; (c04 <__BSS_SRAM_SIZE+0xa4>)
     bba:	79db      	ldrb	r3, [r3, #7]
     bbc:	461a      	mov	r2, r3
     bbe:	491e      	ldr	r1, [pc, #120]	; (c38 <__BSS_SRAM_SIZE+0xd8>)
     bc0:	2000      	movs	r0, #0
     bc2:	f001 f851 	bl	1c68 <SEGGER_RTT_printf>
        }

        /* Set the message to be transmitted, all messages will be
        transmitted by the CAN interrupt */
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo2 );
     bc6:	ab03      	add	r3, sp, #12
     bc8:	4619      	mov	r1, r3
     bca:	2000      	movs	r0, #0
     bcc:	f006 feee 	bl	79ac <Can_43_FLEXCAN_Write>
        Can_43_FLEXCAN_Write( CanHardwareObject_0, &PduInfo3 );
     bd0:	466b      	mov	r3, sp
     bd2:	4619      	mov	r1, r3
     bd4:	2000      	movs	r0, #0
     bd6:	f006 fee9 	bl	79ac <Can_43_FLEXCAN_Write>

        /* Wait until the CAN interrupt transmit message, waiting is not the
        suitable way, but good enough for ilustration purposes, flag is 
        updated by the callback function CanIf_TxConfirmation */
        while( CanIf_bTxFlag == FALSE );
     bda:	bf00      	nop
     bdc:	4b17      	ldr	r3, [pc, #92]	; (c3c <__BSS_SRAM_SIZE+0xdc>)
     bde:	781b      	ldrb	r3, [r3, #0]
     be0:	f083 0301 	eor.w	r3, r3, #1
     be4:	b2db      	uxtb	r3, r3
     be6:	2b00      	cmp	r3, #0
     be8:	d1f8      	bne.n	bdc <__BSS_SRAM_SIZE+0x7c>
        /*Clear the Tx flag*/
        CanIf_bTxFlag = FALSE;
     bea:	4b14      	ldr	r3, [pc, #80]	; (c3c <__BSS_SRAM_SIZE+0xdc>)
     bec:	2200      	movs	r2, #0
     bee:	701a      	strb	r2, [r3, #0]
        HwIoAb_Buttons_MainFunction();
     bf0:	e6f3      	b.n	9da <main+0x9a>
     bf2:	bf00      	nop
     bf4:	0000f7b0 	.word	0x0000f7b0
     bf8:	0000f7d4 	.word	0x0000f7d4
     bfc:	0000f7f4 	.word	0x0000f7f4
     c00:	0000f828 	.word	0x0000f828
     c04:	1fff8b44 	.word	0x1fff8b44
     c08:	0000f858 	.word	0x0000f858
     c0c:	0000f878 	.word	0x0000f878
     c10:	0000f898 	.word	0x0000f898
     c14:	0000f8b8 	.word	0x0000f8b8
     c18:	0000f8d4 	.word	0x0000f8d4
     c1c:	0000f8f4 	.word	0x0000f8f4
     c20:	0000f914 	.word	0x0000f914
     c24:	0000f934 	.word	0x0000f934
     c28:	0000f950 	.word	0x0000f950
     c2c:	0000f970 	.word	0x0000f970
     c30:	0000f990 	.word	0x0000f990
     c34:	0000f9b0 	.word	0x0000f9b0
     c38:	0000f9cc 	.word	0x0000f9cc
     c3c:	1fff8b40 	.word	0x1fff8b40

00000c40 <EcuM_Init>:
 * 
 * it is just a temporary function, in the future this function will be replaced when the EcuM module 
 * is configured and implemented
*/
void EcuM_Init( void )
{
     c40:	b508      	push	{r3, lr}
    /* Init Mcu module, including internal PLL, reference to Mcu Config structure can 
    be found at Mcu_PBcfg.h and PLL defines at Mcu_Cfg.h */
    Mcu_Init( &Mcu_Config );
     c42:	480d      	ldr	r0, [pc, #52]	; (c78 <EcuM_Init+0x38>)
     c44:	f005 f856 	bl	5cf4 <Mcu_Init>
    Mcu_InitClock( McuClockSettingConfig_0 );
     c48:	2000      	movs	r0, #0
     c4a:	f005 f8a7 	bl	5d9c <Mcu_InitClock>
    Mcu_SetMode( McuModeSettingConf_0 );
     c4e:	2000      	movs	r0, #0
     c50:	f005 f8c8 	bl	5de4 <Mcu_SetMode>
    /* Init the internal tick reference Systick Timer */
    OsIf_Init( NULL_PTR );
     c54:	2000      	movs	r0, #0
     c56:	f001 fab8 	bl	21ca <OsIf_Init>
    
    /* Enable and setup interrupts in use by the Can Driver */
    Platform_Init( NULL_PTR );
     c5a:	2000      	movs	r0, #0
     c5c:	f001 f9b2 	bl	1fc4 <Platform_Init>

    /* Apply all the Pin Port microcontroller configuration */
    Port_Init( &Port_Config );
     c60:	4806      	ldr	r0, [pc, #24]	; (c7c <EcuM_Init+0x3c>)
     c62:	f005 fc49 	bl	64f8 <Port_Init>

    /* Init the FlexCAN2 with the paramters set in Tresos WITHOUT loop back mode */
    Can_43_FLEXCAN_Init( &Can_43_FLEXCAN_Config );
     c66:	4806      	ldr	r0, [pc, #24]	; (c80 <EcuM_Init+0x40>)
     c68:	f006 fc38 	bl	74dc <Can_43_FLEXCAN_Init>

    /* Initializing IO Hardware Abstractions with the module ID 0 */
    IoHwAb_Init0( NULL_PTR );
     c6c:	2000      	movs	r0, #0
     c6e:	f000 fa1d 	bl	10ac <IoHwAb_Init0>
}
     c72:	bf00      	nop
     c74:	bd08      	pop	{r3, pc}
     c76:	bf00      	nop
     c78:	000107b8 	.word	0x000107b8
     c7c:	00010c88 	.word	0x00010c88
     c80:	0001032c 	.word	0x0001032c

00000c84 <Can_43_FLEXCAN_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Can_43_FLEXCAN_schm_read_msr(void)
{
     c84:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     c86:	f3ef 8310 	mrs	r3, PRIMASK
     c8a:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     c8c:	4623      	mov	r3, r4
}
     c8e:	4618      	mov	r0, r3
     c90:	f85d 4b04 	ldr.w	r4, [sp], #4
     c94:	4770      	bx	lr

00000c96 <Dio_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Dio_schm_read_msr(void)
{
     c96:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     c98:	f3ef 8310 	mrs	r3, PRIMASK
     c9c:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     c9e:	4623      	mov	r3, r4
}
     ca0:	4618      	mov	r0, r3
     ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
     ca6:	4770      	bx	lr

00000ca8 <Mcu_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Mcu_schm_read_msr(void)
{
     ca8:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     caa:	f3ef 8310 	mrs	r3, PRIMASK
     cae:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     cb0:	4623      	mov	r3, r4
}
     cb2:	4618      	mov	r0, r3
     cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
     cb8:	4770      	bx	lr

00000cba <Port_schm_read_msr>:
* @pre  None
* @post None
* 
*/
uint32 Port_schm_read_msr(void)
{
     cba:	b410      	push	{r4}
        __asm volatile( " mrs %0, CPSR " : "=r" (reg_tmp) );
    #else
        #if ((defined MCAL_ENABLE_USER_MODE_SUPPORT)&&(!defined MCAL_PLATFORM_ARM_M0PLUS))
        __asm volatile( " mrs %0, basepri " : "=r" (reg_tmp) );
        #else
        __asm volatile( " mrs %0, primask " : "=r" (reg_tmp) );
     cbc:	f3ef 8310 	mrs	r3, PRIMASK
     cc0:	461c      	mov	r4, r3
        #endif
    #endif
    return (uint32)reg_tmp;
     cc2:	4623      	mov	r3, r4
}
     cc4:	4618      	mov	r0, r3
     cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
     cca:	4770      	bx	lr

00000ccc <HwIoAb_Buttons_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Buttons_Config Pointer to configuration array.
 */
void HwIoAb_Buttons_Init( const HwIoAb_Buttons_Config * Buttons_Config )
{
     ccc:	b084      	sub	sp, #16
     cce:	9001      	str	r0, [sp, #4]
    ButtonsControl_Ptr->Buttons = HWIOAB_BUTTONS_MAX;
     cd0:	4b16      	ldr	r3, [pc, #88]	; (d2c <HwIoAb_Buttons_Init+0x60>)
     cd2:	681b      	ldr	r3, [r3, #0]
     cd4:	2203      	movs	r2, #3
     cd6:	701a      	strb	r2, [r3, #0]
    ButtonsControl_Ptr->ButtonsConfig_Ptr = Buttons_Config;
     cd8:	4b14      	ldr	r3, [pc, #80]	; (d2c <HwIoAb_Buttons_Init+0x60>)
     cda:	681b      	ldr	r3, [r3, #0]
     cdc:	9a01      	ldr	r2, [sp, #4]
     cde:	605a      	str	r2, [r3, #4]

    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     ce0:	2300      	movs	r3, #0
     ce2:	f88d 300f 	strb.w	r3, [sp, #15]
     ce6:	e012      	b.n	d0e <HwIoAb_Buttons_Init+0x42>
    {
        ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     ce8:	4b10      	ldr	r3, [pc, #64]	; (d2c <HwIoAb_Buttons_Init+0x60>)
     cea:	681a      	ldr	r2, [r3, #0]
     cec:	f89d 300f 	ldrb.w	r3, [sp, #15]
     cf0:	4413      	add	r3, r2
     cf2:	2200      	movs	r2, #0
     cf4:	721a      	strb	r2, [r3, #8]
        ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_IDLE;
     cf6:	4b0d      	ldr	r3, [pc, #52]	; (d2c <HwIoAb_Buttons_Init+0x60>)
     cf8:	681a      	ldr	r2, [r3, #0]
     cfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
     cfe:	4413      	add	r3, r2
     d00:	2200      	movs	r2, #0
     d02:	72da      	strb	r2, [r3, #11]
    for(uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++)   // All button states and events to IDLE.
     d04:	f89d 300f 	ldrb.w	r3, [sp, #15]
     d08:	3301      	adds	r3, #1
     d0a:	f88d 300f 	strb.w	r3, [sp, #15]
     d0e:	4b07      	ldr	r3, [pc, #28]	; (d2c <HwIoAb_Buttons_Init+0x60>)
     d10:	681b      	ldr	r3, [r3, #0]
     d12:	781b      	ldrb	r3, [r3, #0]
     d14:	f89d 200f 	ldrb.w	r2, [sp, #15]
     d18:	429a      	cmp	r2, r3
     d1a:	d3e5      	bcc.n	ce8 <HwIoAb_Buttons_Init+0x1c>
    }

    ButtonsControl_Ptr->Buttons_init = TRUE;
     d1c:	4b03      	ldr	r3, [pc, #12]	; (d2c <HwIoAb_Buttons_Init+0x60>)
     d1e:	681b      	ldr	r3, [r3, #0]
     d20:	2201      	movs	r2, #1
     d22:	739a      	strb	r2, [r3, #14]
}
     d24:	bf00      	nop
     d26:	b004      	add	sp, #16
     d28:	4770      	bx	lr
     d2a:	bf00      	nop
     d2c:	1fff8b38 	.word	0x1fff8b38

00000d30 <HwIoAb_Buttons_GetEvent>:
 * @return event Last event detected in button.
 * 
 * @note The Button ID must be valid.
 */
uint8 HwIoAb_Buttons_GetEvent( uint8 Button )
{
     d30:	b084      	sub	sp, #16
     d32:	4603      	mov	r3, r0
     d34:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 temp = 0;
     d38:	2300      	movs	r3, #0
     d3a:	f88d 300f 	strb.w	r3, [sp, #15]
    temp = ButtonsControl_Ptr->Events[Button];                      // Obtaining last event.
     d3e:	4b0a      	ldr	r3, [pc, #40]	; (d68 <HwIoAb_Buttons_GetEvent+0x38>)
     d40:	681a      	ldr	r2, [r3, #0]
     d42:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d46:	4413      	add	r3, r2
     d48:	7adb      	ldrb	r3, [r3, #11]
     d4a:	f88d 300f 	strb.w	r3, [sp, #15]
    ButtonsControl_Ptr->Events[Button] = HWIOAB_BTN_EVENT_IDLE;     // Clearing event of button.
     d4e:	4b06      	ldr	r3, [pc, #24]	; (d68 <HwIoAb_Buttons_GetEvent+0x38>)
     d50:	681a      	ldr	r2, [r3, #0]
     d52:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d56:	4413      	add	r3, r2
     d58:	2200      	movs	r2, #0
     d5a:	72da      	strb	r2, [r3, #11]
    return temp;
     d5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
     d60:	4618      	mov	r0, r3
     d62:	b004      	add	sp, #16
     d64:	4770      	bx	lr
     d66:	bf00      	nop
     d68:	1fff8b38 	.word	0x1fff8b38

00000d6c <HwIoAb_Buttons_MainFunction>:
 * @note Remember that the timeout count is for detecting a hold click when the button is pressed 1 and 2 times.
 * @note Each button has its own dedicated count.
 * 
 */
void HwIoAb_Buttons_MainFunction( void )
{
     d6c:	b500      	push	{lr}
     d6e:	b083      	sub	sp, #12
    static uint32 Counters[HWIOAB_BUTTONS_MAX] = {0, 0, 0};

    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
     d70:	2300      	movs	r3, #0
     d72:	f88d 3007 	strb.w	r3, [sp, #7]
     d76:	e15d      	b.n	1034 <HwIoAb_Buttons_MainFunction+0x2c8>
    {
        switch( ButtonsControl_Ptr->States[i] )
     d78:	4bb5      	ldr	r3, [pc, #724]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     d7a:	681a      	ldr	r2, [r3, #0]
     d7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     d80:	4413      	add	r3, r2
     d82:	7a1b      	ldrb	r3, [r3, #8]
     d84:	2b04      	cmp	r3, #4
     d86:	f200 8145 	bhi.w	1014 <HwIoAb_Buttons_MainFunction+0x2a8>
     d8a:	a201      	add	r2, pc, #4	; (adr r2, d90 <HwIoAb_Buttons_MainFunction+0x24>)
     d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     d90:	00000da5 	.word	0x00000da5
     d94:	00000df1 	.word	0x00000df1
     d98:	00000f19 	.word	0x00000f19
     d9c:	00000fb1 	.word	0x00000fb1
     da0:	00000e7d 	.word	0x00000e7d
        {
            case HWIOAB_BTN_STATE_IDLE :
                // Query for the first time the button is pressed.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     da4:	4baa      	ldr	r3, [pc, #680]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     da6:	681b      	ldr	r3, [r3, #0]
     da8:	685a      	ldr	r2, [r3, #4]
     daa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dae:	00db      	lsls	r3, r3, #3
     db0:	4413      	add	r3, r2
     db2:	881b      	ldrh	r3, [r3, #0]
     db4:	4618      	mov	r0, r3
     db6:	f006 f8b3 	bl	6f20 <Dio_ReadChannel>
     dba:	4603      	mov	r3, r0
     dbc:	4619      	mov	r1, r3
     dbe:	4ba4      	ldr	r3, [pc, #656]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     dc0:	681b      	ldr	r3, [r3, #0]
     dc2:	685a      	ldr	r2, [r3, #4]
     dc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dc8:	00db      	lsls	r3, r3, #3
     dca:	4413      	add	r3, r2
     dcc:	789b      	ldrb	r3, [r3, #2]
     dce:	4299      	cmp	r1, r3
     dd0:	f040 8122 	bne.w	1018 <HwIoAb_Buttons_MainFunction+0x2ac>
                {
                    // Start the 300ms counter if there is a press.
                    Counters[i] = 0;
     dd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dd8:	4a9e      	ldr	r2, [pc, #632]	; (1054 <HwIoAb_Buttons_MainFunction+0x2e8>)
     dda:	2100      	movs	r1, #0
     ddc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_SINGLE_CLICK;
     de0:	4b9b      	ldr	r3, [pc, #620]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     de2:	681a      	ldr	r2, [r3, #0]
     de4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     de8:	4413      	add	r3, r2
     dea:	2201      	movs	r2, #1
     dec:	721a      	strb	r2, [r3, #8]

                }
            break;
     dee:	e113      	b.n	1018 <HwIoAb_Buttons_MainFunction+0x2ac>
            case HWIOAB_BTN_STATE_SINGLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     df0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     df4:	4a97      	ldr	r2, [pc, #604]	; (1054 <HwIoAb_Buttons_MainFunction+0x2e8>)
     df6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     dfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     dfe:	320a      	adds	r2, #10
     e00:	4994      	ldr	r1, [pc, #592]	; (1054 <HwIoAb_Buttons_MainFunction+0x2e8>)
     e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if there is a timeout, if the elapsed time is already equal or bigger than the timeout.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     e06:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e0a:	4a92      	ldr	r2, [pc, #584]	; (1054 <HwIoAb_Buttons_MainFunction+0x2e8>)
     e0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     e10:	4b8f      	ldr	r3, [pc, #572]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e12:	681b      	ldr	r3, [r3, #0]
     e14:	6859      	ldr	r1, [r3, #4]
     e16:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e1a:	00db      	lsls	r3, r3, #3
     e1c:	440b      	add	r3, r1
     e1e:	685b      	ldr	r3, [r3, #4]
     e20:	429a      	cmp	r2, r3
     e22:	d106      	bne.n	e32 <HwIoAb_Buttons_MainFunction+0xc6>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     e24:	4b8a      	ldr	r3, [pc, #552]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e26:	681a      	ldr	r2, [r3, #0]
     e28:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e2c:	4413      	add	r3, r2
     e2e:	2203      	movs	r2, #3
     e30:	721a      	strb	r2, [r3, #8]
                }

                // Query if there is a release.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     e32:	4b87      	ldr	r3, [pc, #540]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e34:	681b      	ldr	r3, [r3, #0]
     e36:	685a      	ldr	r2, [r3, #4]
     e38:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e3c:	00db      	lsls	r3, r3, #3
     e3e:	4413      	add	r3, r2
     e40:	881b      	ldrh	r3, [r3, #0]
     e42:	4618      	mov	r0, r3
     e44:	f006 f86c 	bl	6f20 <Dio_ReadChannel>
     e48:	4603      	mov	r3, r0
     e4a:	4619      	mov	r1, r3
     e4c:	4b80      	ldr	r3, [pc, #512]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e4e:	681b      	ldr	r3, [r3, #0]
     e50:	685a      	ldr	r2, [r3, #4]
     e52:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e56:	00db      	lsls	r3, r3, #3
     e58:	4413      	add	r3, r2
     e5a:	789b      	ldrb	r3, [r3, #2]
     e5c:	2b00      	cmp	r3, #0
     e5e:	bf0c      	ite	eq
     e60:	2301      	moveq	r3, #1
     e62:	2300      	movne	r3, #0
     e64:	b2db      	uxtb	r3, r3
     e66:	4299      	cmp	r1, r3
     e68:	f040 80d8 	bne.w	101c <HwIoAb_Buttons_MainFunction+0x2b0>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_RELEASE;
     e6c:	4b78      	ldr	r3, [pc, #480]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e6e:	681a      	ldr	r2, [r3, #0]
     e70:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e74:	4413      	add	r3, r2
     e76:	2204      	movs	r2, #4
     e78:	721a      	strb	r2, [r3, #8]
                }    
            break;
     e7a:	e0cf      	b.n	101c <HwIoAb_Buttons_MainFunction+0x2b0>
            case HWIOAB_BTN_STATE_RELEASE :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     e7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e80:	4a74      	ldr	r2, [pc, #464]	; (1054 <HwIoAb_Buttons_MainFunction+0x2e8>)
     e82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     e86:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e8a:	320a      	adds	r2, #10
     e8c:	4971      	ldr	r1, [pc, #452]	; (1054 <HwIoAb_Buttons_MainFunction+0x2e8>)
     e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is a single click.
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     e92:	f89d 3007 	ldrb.w	r3, [sp, #7]
     e96:	4a6f      	ldr	r2, [pc, #444]	; (1054 <HwIoAb_Buttons_MainFunction+0x2e8>)
     e98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     e9c:	4b6c      	ldr	r3, [pc, #432]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     e9e:	681b      	ldr	r3, [r3, #0]
     ea0:	6859      	ldr	r1, [r3, #4]
     ea2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ea6:	00db      	lsls	r3, r3, #3
     ea8:	440b      	add	r3, r1
     eaa:	685b      	ldr	r3, [r3, #4]
     eac:	429a      	cmp	r2, r3
     eae:	d10d      	bne.n	ecc <HwIoAb_Buttons_MainFunction+0x160>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_SINGLE_CLICK;
     eb0:	4b67      	ldr	r3, [pc, #412]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     eb2:	681a      	ldr	r2, [r3, #0]
     eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     eb8:	4413      	add	r3, r2
     eba:	2201      	movs	r2, #1
     ebc:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     ebe:	4b64      	ldr	r3, [pc, #400]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     ec0:	681a      	ldr	r2, [r3, #0]
     ec2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ec6:	4413      	add	r3, r2
     ec8:	2200      	movs	r2, #0
     eca:	721a      	strb	r2, [r3, #8]
                } 

                // Query if a press, if press start 300ms counter again.
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x0 = PRESSED
     ecc:	4b60      	ldr	r3, [pc, #384]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     ece:	681b      	ldr	r3, [r3, #0]
     ed0:	685a      	ldr	r2, [r3, #4]
     ed2:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ed6:	00db      	lsls	r3, r3, #3
     ed8:	4413      	add	r3, r2
     eda:	881b      	ldrh	r3, [r3, #0]
     edc:	4618      	mov	r0, r3
     ede:	f006 f81f 	bl	6f20 <Dio_ReadChannel>
     ee2:	4603      	mov	r3, r0
     ee4:	4619      	mov	r1, r3
     ee6:	4b5a      	ldr	r3, [pc, #360]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     ee8:	681b      	ldr	r3, [r3, #0]
     eea:	685a      	ldr	r2, [r3, #4]
     eec:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ef0:	00db      	lsls	r3, r3, #3
     ef2:	4413      	add	r3, r2
     ef4:	789b      	ldrb	r3, [r3, #2]
     ef6:	4299      	cmp	r1, r3
     ef8:	f040 8092 	bne.w	1020 <HwIoAb_Buttons_MainFunction+0x2b4>
                {
                    // Restart the 300ms counter if there is a press.
                    Counters[i] = 0;
     efc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f00:	4a54      	ldr	r2, [pc, #336]	; (1054 <HwIoAb_Buttons_MainFunction+0x2e8>)
     f02:	2100      	movs	r1, #0
     f04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_DOUBLE_CLICK;
     f08:	4b51      	ldr	r3, [pc, #324]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f0a:	681a      	ldr	r2, [r3, #0]
     f0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f10:	4413      	add	r3, r2
     f12:	2202      	movs	r2, #2
     f14:	721a      	strb	r2, [r3, #8]
                } 
            break;
     f16:	e083      	b.n	1020 <HwIoAb_Buttons_MainFunction+0x2b4>
            case HWIOAB_BTN_STATE_DOUBLE_CLICK :
                Counters[i] += HWIOAB_BUTTONS_PERIOD;
     f18:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f1c:	4a4d      	ldr	r2, [pc, #308]	; (1054 <HwIoAb_Buttons_MainFunction+0x2e8>)
     f1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     f22:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f26:	320a      	adds	r2, #10
     f28:	494a      	ldr	r1, [pc, #296]	; (1054 <HwIoAb_Buttons_MainFunction+0x2e8>)
     f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                // Query if timeout, if timeout is hold 
                if(Counters[i] == ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Timeout)
     f2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f32:	4a48      	ldr	r2, [pc, #288]	; (1054 <HwIoAb_Buttons_MainFunction+0x2e8>)
     f34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
     f38:	4b45      	ldr	r3, [pc, #276]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f3a:	681b      	ldr	r3, [r3, #0]
     f3c:	6859      	ldr	r1, [r3, #4]
     f3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f42:	00db      	lsls	r3, r3, #3
     f44:	440b      	add	r3, r1
     f46:	685b      	ldr	r3, [r3, #4]
     f48:	429a      	cmp	r2, r3
     f4a:	d106      	bne.n	f5a <HwIoAb_Buttons_MainFunction+0x1ee>
                {
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_HOLD_CLICK;
     f4c:	4b40      	ldr	r3, [pc, #256]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f4e:	681a      	ldr	r2, [r3, #0]
     f50:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f54:	4413      	add	r3, r2
     f56:	2203      	movs	r2, #3
     f58:	721a      	strb	r2, [r3, #8]
                } 

                // Query if release, if release is a double click
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     f5a:	4b3d      	ldr	r3, [pc, #244]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f5c:	681b      	ldr	r3, [r3, #0]
     f5e:	685a      	ldr	r2, [r3, #4]
     f60:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f64:	00db      	lsls	r3, r3, #3
     f66:	4413      	add	r3, r2
     f68:	881b      	ldrh	r3, [r3, #0]
     f6a:	4618      	mov	r0, r3
     f6c:	f005 ffd8 	bl	6f20 <Dio_ReadChannel>
     f70:	4603      	mov	r3, r0
     f72:	4619      	mov	r1, r3
     f74:	4b36      	ldr	r3, [pc, #216]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f76:	681b      	ldr	r3, [r3, #0]
     f78:	685a      	ldr	r2, [r3, #4]
     f7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f7e:	00db      	lsls	r3, r3, #3
     f80:	4413      	add	r3, r2
     f82:	789b      	ldrb	r3, [r3, #2]
     f84:	2b00      	cmp	r3, #0
     f86:	bf0c      	ite	eq
     f88:	2301      	moveq	r3, #1
     f8a:	2300      	movne	r3, #0
     f8c:	b2db      	uxtb	r3, r3
     f8e:	4299      	cmp	r1, r3
     f90:	d148      	bne.n	1024 <HwIoAb_Buttons_MainFunction+0x2b8>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_DOUBLE_CLICK;
     f92:	4b2f      	ldr	r3, [pc, #188]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     f94:	681a      	ldr	r2, [r3, #0]
     f96:	f89d 3007 	ldrb.w	r3, [sp, #7]
     f9a:	4413      	add	r3, r2
     f9c:	2202      	movs	r2, #2
     f9e:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
     fa0:	4b2b      	ldr	r3, [pc, #172]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     fa2:	681a      	ldr	r2, [r3, #0]
     fa4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fa8:	4413      	add	r3, r2
     faa:	2200      	movs	r2, #0
     fac:	721a      	strb	r2, [r3, #8]
                } 
            break;
     fae:	e039      	b.n	1024 <HwIoAb_Buttons_MainFunction+0x2b8>
            case HWIOAB_BTN_STATE_HOLD_CLICK :
                ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_HOLD_CLICK;
     fb0:	4b27      	ldr	r3, [pc, #156]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     fb2:	681a      	ldr	r2, [r3, #0]
     fb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fb8:	4413      	add	r3, r2
     fba:	2203      	movs	r2, #3
     fbc:	72da      	strb	r2, [r3, #11]
                // If state jumps here is a hold click, wait until botton is released and go back to IDLE
                if(Dio_ReadChannel( ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Button ) == !ButtonsControl_Ptr->ButtonsConfig_Ptr[i].Active)   // 0x1 = UNPRESSED
     fbe:	4b24      	ldr	r3, [pc, #144]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     fc0:	681b      	ldr	r3, [r3, #0]
     fc2:	685a      	ldr	r2, [r3, #4]
     fc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fc8:	00db      	lsls	r3, r3, #3
     fca:	4413      	add	r3, r2
     fcc:	881b      	ldrh	r3, [r3, #0]
     fce:	4618      	mov	r0, r3
     fd0:	f005 ffa6 	bl	6f20 <Dio_ReadChannel>
     fd4:	4603      	mov	r3, r0
     fd6:	4619      	mov	r1, r3
     fd8:	4b1d      	ldr	r3, [pc, #116]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     fda:	681b      	ldr	r3, [r3, #0]
     fdc:	685a      	ldr	r2, [r3, #4]
     fde:	f89d 3007 	ldrb.w	r3, [sp, #7]
     fe2:	00db      	lsls	r3, r3, #3
     fe4:	4413      	add	r3, r2
     fe6:	789b      	ldrb	r3, [r3, #2]
     fe8:	2b00      	cmp	r3, #0
     fea:	bf0c      	ite	eq
     fec:	2301      	moveq	r3, #1
     fee:	2300      	movne	r3, #0
     ff0:	b2db      	uxtb	r3, r3
     ff2:	4299      	cmp	r1, r3
     ff4:	d118      	bne.n	1028 <HwIoAb_Buttons_MainFunction+0x2bc>
                {
                    ButtonsControl_Ptr->Events[i] = HWIOAB_BTN_EVENT_RELEASE;
     ff6:	4b16      	ldr	r3, [pc, #88]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
     ff8:	681a      	ldr	r2, [r3, #0]
     ffa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ffe:	4413      	add	r3, r2
    1000:	2204      	movs	r2, #4
    1002:	72da      	strb	r2, [r3, #11]
                    ButtonsControl_Ptr->States[i] = HWIOAB_BTN_STATE_IDLE;
    1004:	4b12      	ldr	r3, [pc, #72]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
    1006:	681a      	ldr	r2, [r3, #0]
    1008:	f89d 3007 	ldrb.w	r3, [sp, #7]
    100c:	4413      	add	r3, r2
    100e:	2200      	movs	r2, #0
    1010:	721a      	strb	r2, [r3, #8]
                }
            break;
    1012:	e009      	b.n	1028 <HwIoAb_Buttons_MainFunction+0x2bc>
            default :
              // If jump here is an error
            break;
    1014:	bf00      	nop
    1016:	e008      	b.n	102a <HwIoAb_Buttons_MainFunction+0x2be>
            break;
    1018:	bf00      	nop
    101a:	e006      	b.n	102a <HwIoAb_Buttons_MainFunction+0x2be>
            break;
    101c:	bf00      	nop
    101e:	e004      	b.n	102a <HwIoAb_Buttons_MainFunction+0x2be>
            break;
    1020:	bf00      	nop
    1022:	e002      	b.n	102a <HwIoAb_Buttons_MainFunction+0x2be>
            break;
    1024:	bf00      	nop
    1026:	e000      	b.n	102a <HwIoAb_Buttons_MainFunction+0x2be>
            break;
    1028:	bf00      	nop
    for( uint8 i = 0; i < ButtonsControl_Ptr->Buttons; i++ )    // Executing state machine for each button.
    102a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    102e:	3301      	adds	r3, #1
    1030:	f88d 3007 	strb.w	r3, [sp, #7]
    1034:	4b06      	ldr	r3, [pc, #24]	; (1050 <HwIoAb_Buttons_MainFunction+0x2e4>)
    1036:	681b      	ldr	r3, [r3, #0]
    1038:	781b      	ldrb	r3, [r3, #0]
    103a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    103e:	429a      	cmp	r2, r3
    1040:	f4ff ae9a 	bcc.w	d78 <HwIoAb_Buttons_MainFunction+0xc>
        }
    }
}   
    1044:	bf00      	nop
    1046:	bf00      	nop
    1048:	b003      	add	sp, #12
    104a:	f85d fb04 	ldr.w	pc, [sp], #4
    104e:	bf00      	nop
    1050:	1fff8b38 	.word	0x1fff8b38
    1054:	1fff91c0 	.word	0x1fff91c0

00001058 <HwIoAb_Leds_Init>:
 * the responsibility of the function to initialize any hardware. 
 * 
 * @param Leds_Config Pointer to configuration array.
 */
void HwIoAb_Leds_Init( const HwIoAb_Leds_Config * Leds_Config )
{
    1058:	b082      	sub	sp, #8
    105a:	9001      	str	r0, [sp, #4]
    LedsControl_Ptr->Leds = HWIOAB_LEDS_MAX;
    105c:	4b07      	ldr	r3, [pc, #28]	; (107c <HwIoAb_Leds_Init+0x24>)
    105e:	681b      	ldr	r3, [r3, #0]
    1060:	220b      	movs	r2, #11
    1062:	701a      	strb	r2, [r3, #0]
    LedsControl_Ptr->LedsConfig_Ptr = Leds_Config;
    1064:	4b05      	ldr	r3, [pc, #20]	; (107c <HwIoAb_Leds_Init+0x24>)
    1066:	681b      	ldr	r3, [r3, #0]
    1068:	9a01      	ldr	r2, [sp, #4]
    106a:	605a      	str	r2, [r3, #4]
    LedsControl_Ptr->Leds_init = TRUE;
    106c:	4b03      	ldr	r3, [pc, #12]	; (107c <HwIoAb_Leds_Init+0x24>)
    106e:	681b      	ldr	r3, [r3, #0]
    1070:	2201      	movs	r2, #1
    1072:	721a      	strb	r2, [r3, #8]
}
    1074:	bf00      	nop
    1076:	b002      	add	sp, #8
    1078:	4770      	bx	lr
    107a:	bf00      	nop
    107c:	1fff8b3c 	.word	0x1fff8b3c

00001080 <HwIoAb_Leds_TurnToggle>:
 * @param Led Led ID.
 * 
 * @note The led ID must be valid.
 */
void HwIoAb_Leds_TurnToggle( uint8 Led ) 
{
    1080:	b500      	push	{lr}
    1082:	b083      	sub	sp, #12
    1084:	4603      	mov	r3, r0
    1086:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_FlipChannel( LedsControl_Ptr->LedsConfig_Ptr[ Led ].Led );
    108a:	4b07      	ldr	r3, [pc, #28]	; (10a8 <HwIoAb_Leds_TurnToggle+0x28>)
    108c:	681b      	ldr	r3, [r3, #0]
    108e:	685a      	ldr	r2, [r3, #4]
    1090:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1094:	009b      	lsls	r3, r3, #2
    1096:	4413      	add	r3, r2
    1098:	881b      	ldrh	r3, [r3, #0]
    109a:	4618      	mov	r0, r3
    109c:	f005 ff6b 	bl	6f76 <Dio_FlipChannel>
}
    10a0:	bf00      	nop
    10a2:	b003      	add	sp, #12
    10a4:	f85d fb04 	ldr.w	pc, [sp], #4
    10a8:	1fff8b3c 	.word	0x1fff8b3c

000010ac <IoHwAb_Init0>:
 * @brief This function initialices all the IO hardware abstractions.
 * 
 * @param ConfigPtr Pointer to configuration structure instance, in this case is not used.
 */
void IoHwAb_Init0( const IoHwAb0_ConfigType* ConfigPtr ) 
{
    10ac:	b500      	push	{lr}
    10ae:	b083      	sub	sp, #12
    10b0:	9001      	str	r0, [sp, #4]
    /* Buttons init */
    HwIoAb_Buttons_Init( &ButtonsCfg );
    10b2:	4805      	ldr	r0, [pc, #20]	; (10c8 <IoHwAb_Init0+0x1c>)
    10b4:	f7ff fe0a 	bl	ccc <HwIoAb_Buttons_Init>
    /* RGB Leds init */
    HwIoAb_Leds_Init( &LedsCfg );
    10b8:	4804      	ldr	r0, [pc, #16]	; (10cc <IoHwAb_Init0+0x20>)
    10ba:	f7ff ffcd 	bl	1058 <HwIoAb_Leds_Init>
    /* Pots init */
    //HwIoAb_Pots_Init( NULL_PTR );
    /* Buzzer init */
    //HwIoAb_Buzzer_Init( NULL_PTR );
}
    10be:	bf00      	nop
    10c0:	b003      	add	sp, #12
    10c2:	f85d fb04 	ldr.w	pc, [sp], #4
    10c6:	bf00      	nop
    10c8:	00010230 	.word	0x00010230
    10cc:	00010248 	.word	0x00010248

000010d0 <init_data_bss>:
 * Implements    : init_data_bss_Activity
 *END**************************************************************************/
void init_data_bss(void);

void init_data_bss(void)
{
    10d0:	b08a      	sub	sp, #40	; 0x28
    const Sys_CopyLayoutType * copy_layout;
    const Sys_ZeroLayoutType * zero_layout;
    const uint8 * rom;
    uint8 * ram;
    uint32 len = 0U;
    10d2:	2300      	movs	r3, #0
    10d4:	9307      	str	r3, [sp, #28]
    uint32 size = 0U;
    10d6:	2300      	movs	r3, #0
    10d8:	9306      	str	r3, [sp, #24]
    uint32 i = 0U;
    10da:	2300      	movs	r3, #0
    10dc:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 j = 0U;
    10de:	2300      	movs	r3, #0
    10e0:	9308      	str	r3, [sp, #32]

    const uint32 * initTable_Ptr = (uint32 *)__INIT_TABLE;
    10e2:	4b44      	ldr	r3, [pc, #272]	; (11f4 <init_data_bss+0x124>)
    10e4:	9305      	str	r3, [sp, #20]
    const uint32 * zeroTable_Ptr = (uint32*)__ZERO_TABLE;
    10e6:	4b44      	ldr	r3, [pc, #272]	; (11f8 <init_data_bss+0x128>)
    10e8:	9304      	str	r3, [sp, #16]

    /* Copy initialized table */
    len = *initTable_Ptr;
    10ea:	9b05      	ldr	r3, [sp, #20]
    10ec:	681b      	ldr	r3, [r3, #0]
    10ee:	9307      	str	r3, [sp, #28]
    initTable_Ptr++;
    10f0:	9b05      	ldr	r3, [sp, #20]
    10f2:	3304      	adds	r3, #4
    10f4:	9305      	str	r3, [sp, #20]
    copy_layout = (const Sys_CopyLayoutType *)initTable_Ptr;
    10f6:	9b05      	ldr	r3, [sp, #20]
    10f8:	9303      	str	r3, [sp, #12]
    for(i = 0; i < len; i++)
    10fa:	2300      	movs	r3, #0
    10fc:	9309      	str	r3, [sp, #36]	; 0x24
    10fe:	e03d      	b.n	117c <init_data_bss+0xac>
    {
        rom = copy_layout[i].rom_start;
    1100:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1102:	4613      	mov	r3, r2
    1104:	005b      	lsls	r3, r3, #1
    1106:	4413      	add	r3, r2
    1108:	009b      	lsls	r3, r3, #2
    110a:	461a      	mov	r2, r3
    110c:	9b03      	ldr	r3, [sp, #12]
    110e:	4413      	add	r3, r2
    1110:	685b      	ldr	r3, [r3, #4]
    1112:	9300      	str	r3, [sp, #0]
        ram = copy_layout[i].ram_start;
    1114:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1116:	4613      	mov	r3, r2
    1118:	005b      	lsls	r3, r3, #1
    111a:	4413      	add	r3, r2
    111c:	009b      	lsls	r3, r3, #2
    111e:	461a      	mov	r2, r3
    1120:	9b03      	ldr	r3, [sp, #12]
    1122:	4413      	add	r3, r2
    1124:	681b      	ldr	r3, [r3, #0]
    1126:	9301      	str	r3, [sp, #4]
        size = (uint32)copy_layout[i].rom_end - (uint32)copy_layout[i].rom_start;
    1128:	9a09      	ldr	r2, [sp, #36]	; 0x24
    112a:	4613      	mov	r3, r2
    112c:	005b      	lsls	r3, r3, #1
    112e:	4413      	add	r3, r2
    1130:	009b      	lsls	r3, r3, #2
    1132:	461a      	mov	r2, r3
    1134:	9b03      	ldr	r3, [sp, #12]
    1136:	4413      	add	r3, r2
    1138:	689b      	ldr	r3, [r3, #8]
    113a:	4619      	mov	r1, r3
    113c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    113e:	4613      	mov	r3, r2
    1140:	005b      	lsls	r3, r3, #1
    1142:	4413      	add	r3, r2
    1144:	009b      	lsls	r3, r3, #2
    1146:	461a      	mov	r2, r3
    1148:	9b03      	ldr	r3, [sp, #12]
    114a:	4413      	add	r3, r2
    114c:	685b      	ldr	r3, [r3, #4]
    114e:	1acb      	subs	r3, r1, r3
    1150:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    1152:	2300      	movs	r3, #0
    1154:	9308      	str	r3, [sp, #32]
    1156:	e00a      	b.n	116e <init_data_bss+0x9e>
        {
            ram[j] = rom[j];
    1158:	9a00      	ldr	r2, [sp, #0]
    115a:	9b08      	ldr	r3, [sp, #32]
    115c:	441a      	add	r2, r3
    115e:	9901      	ldr	r1, [sp, #4]
    1160:	9b08      	ldr	r3, [sp, #32]
    1162:	440b      	add	r3, r1
    1164:	7812      	ldrb	r2, [r2, #0]
    1166:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    1168:	9b08      	ldr	r3, [sp, #32]
    116a:	3301      	adds	r3, #1
    116c:	9308      	str	r3, [sp, #32]
    116e:	9a08      	ldr	r2, [sp, #32]
    1170:	9b06      	ldr	r3, [sp, #24]
    1172:	429a      	cmp	r2, r3
    1174:	d3f0      	bcc.n	1158 <init_data_bss+0x88>
    for(i = 0; i < len; i++)
    1176:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1178:	3301      	adds	r3, #1
    117a:	9309      	str	r3, [sp, #36]	; 0x24
    117c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    117e:	9b07      	ldr	r3, [sp, #28]
    1180:	429a      	cmp	r2, r3
    1182:	d3bd      	bcc.n	1100 <init_data_bss+0x30>
        }
    }
    
    /* Clear zero table */
    len = *zeroTable_Ptr;
    1184:	9b04      	ldr	r3, [sp, #16]
    1186:	681b      	ldr	r3, [r3, #0]
    1188:	9307      	str	r3, [sp, #28]
    zeroTable_Ptr++;
    118a:	9b04      	ldr	r3, [sp, #16]
    118c:	3304      	adds	r3, #4
    118e:	9304      	str	r3, [sp, #16]
    zero_layout = (const Sys_ZeroLayoutType *)zeroTable_Ptr;
    1190:	9b04      	ldr	r3, [sp, #16]
    1192:	9302      	str	r3, [sp, #8]
    for(i = 0; i < len; i++)
    1194:	2300      	movs	r3, #0
    1196:	9309      	str	r3, [sp, #36]	; 0x24
    1198:	e024      	b.n	11e4 <init_data_bss+0x114>
    {
        ram = zero_layout[i].ram_start;
    119a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    119c:	00db      	lsls	r3, r3, #3
    119e:	9a02      	ldr	r2, [sp, #8]
    11a0:	4413      	add	r3, r2
    11a2:	681b      	ldr	r3, [r3, #0]
    11a4:	9301      	str	r3, [sp, #4]
        size = (uint32)zero_layout[i].ram_end - (uint32)zero_layout[i].ram_start;
    11a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11a8:	00db      	lsls	r3, r3, #3
    11aa:	9a02      	ldr	r2, [sp, #8]
    11ac:	4413      	add	r3, r2
    11ae:	685b      	ldr	r3, [r3, #4]
    11b0:	4619      	mov	r1, r3
    11b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11b4:	00db      	lsls	r3, r3, #3
    11b6:	9a02      	ldr	r2, [sp, #8]
    11b8:	4413      	add	r3, r2
    11ba:	681b      	ldr	r3, [r3, #0]
    11bc:	1acb      	subs	r3, r1, r3
    11be:	9306      	str	r3, [sp, #24]

        for(j = 0UL; j < size; j++)
    11c0:	2300      	movs	r3, #0
    11c2:	9308      	str	r3, [sp, #32]
    11c4:	e007      	b.n	11d6 <init_data_bss+0x106>
        {
            ram[j] = 0U;
    11c6:	9a01      	ldr	r2, [sp, #4]
    11c8:	9b08      	ldr	r3, [sp, #32]
    11ca:	4413      	add	r3, r2
    11cc:	2200      	movs	r2, #0
    11ce:	701a      	strb	r2, [r3, #0]
        for(j = 0UL; j < size; j++)
    11d0:	9b08      	ldr	r3, [sp, #32]
    11d2:	3301      	adds	r3, #1
    11d4:	9308      	str	r3, [sp, #32]
    11d6:	9a08      	ldr	r2, [sp, #32]
    11d8:	9b06      	ldr	r3, [sp, #24]
    11da:	429a      	cmp	r2, r3
    11dc:	d3f3      	bcc.n	11c6 <init_data_bss+0xf6>
    for(i = 0; i < len; i++)
    11de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    11e0:	3301      	adds	r3, #1
    11e2:	9309      	str	r3, [sp, #36]	; 0x24
    11e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    11e6:	9b07      	ldr	r3, [sp, #28]
    11e8:	429a      	cmp	r2, r3
    11ea:	d3d6      	bcc.n	119a <init_data_bss+0xca>
        }
    }
}
    11ec:	bf00      	nop
    11ee:	bf00      	nop
    11f0:	b00a      	add	sp, #40	; 0x28
    11f2:	4770      	bx	lr
    11f4:	00010cf8 	.word	0x00010cf8
    11f8:	00010d14 	.word	0x00010d14

000011fc <sys_m4_cache_init>:
{
    11fc:	b084      	sub	sp, #16
    11fe:	4603      	mov	r3, r0
    1200:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 RetValue = CACHE_OK;
    1204:	2300      	movs	r3, #0
    1206:	f88d 300f 	strb.w	r3, [sp, #15]
  if (cache == CODE_CACHE)
    120a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    120e:	2b00      	cmp	r3, #0
    1210:	d118      	bne.n	1244 <sys_m4_cache_init+0x48>
      IP_LMEM->PCCCR = 0x05000000UL;
    1212:	4b10      	ldr	r3, [pc, #64]	; (1254 <sys_m4_cache_init+0x58>)
    1214:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
    1218:	601a      	str	r2, [r3, #0]
      IP_LMEM->PCCCR |= LMEM_PCCCR_GO(1);
    121a:	4b0e      	ldr	r3, [pc, #56]	; (1254 <sys_m4_cache_init+0x58>)
    121c:	681b      	ldr	r3, [r3, #0]
    121e:	4a0d      	ldr	r2, [pc, #52]	; (1254 <sys_m4_cache_init+0x58>)
    1220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1224:	6013      	str	r3, [r2, #0]
      while((IP_LMEM->PCCCR & LMEM_PCCCR_GO_MASK) == LMEM_PCCCR_GO_MASK){};
    1226:	bf00      	nop
    1228:	4b0a      	ldr	r3, [pc, #40]	; (1254 <sys_m4_cache_init+0x58>)
    122a:	681b      	ldr	r3, [r3, #0]
    122c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    1230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    1234:	d0f8      	beq.n	1228 <sys_m4_cache_init+0x2c>
      IP_LMEM->PCCCR |= LMEM_PCCCR_ENCACHE(1);
    1236:	4b07      	ldr	r3, [pc, #28]	; (1254 <sys_m4_cache_init+0x58>)
    1238:	681b      	ldr	r3, [r3, #0]
    123a:	4a06      	ldr	r2, [pc, #24]	; (1254 <sys_m4_cache_init+0x58>)
    123c:	f043 0301 	orr.w	r3, r3, #1
    1240:	6013      	str	r3, [r2, #0]
    1242:	e002      	b.n	124a <sys_m4_cache_init+0x4e>
     RetValue = CACHE_INVALID_PARAM;
    1244:	2301      	movs	r3, #1
    1246:	f88d 300f 	strb.w	r3, [sp, #15]
  return RetValue;
    124a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    124e:	4618      	mov	r0, r3
    1250:	b004      	add	sp, #16
    1252:	4770      	bx	lr
    1254:	e0082000 	.word	0xe0082000

00001258 <startup_go_to_user_mode>:
}
    1258:	bf00      	nop
    125a:	4770      	bx	lr

0000125c <Sys_GetCoreID>:
    return 0U;
    125c:	2300      	movs	r3, #0
}
    125e:	4618      	mov	r0, r3
    1260:	4770      	bx	lr

00001262 <HardFault_Handler>:
}
void HardFault_Handler(void)
{
    while(TRUE){};
    1262:	e7fe      	b.n	1262 <HardFault_Handler>

00001264 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
    while(TRUE){};
    1264:	e7fe      	b.n	1264 <MemManage_Handler>

00001266 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
    while(TRUE){};
    1266:	e7fe      	b.n	1266 <BusFault_Handler>

00001268 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
    while(TRUE){};
    1268:	e7fe      	b.n	1268 <UsageFault_Handler>

0000126a <SVC_Handler>:

#ifndef MCAL_ENABLE_USER_MODE_SUPPORT
void SVC_Handler(void)  __attribute__ ((weak));               /* SVCall Handler */
void SVC_Handler(void)
{
    while(TRUE){};
    126a:	e7fe      	b.n	126a <SVC_Handler>

0000126c <DebugMon_Handler>:
    ASM_KEYWORD("pop {r0}");
}
#endif
void DebugMon_Handler(void)
{
    while(TRUE){};
    126c:	e7fe      	b.n	126c <DebugMon_Handler>

0000126e <PendSV_Handler>:
}
void PendSV_Handler(void)
{
    while(TRUE){};
    126e:	e7fe      	b.n	126e <PendSV_Handler>

00001270 <SysTick_Handler>:
}
void SysTick_Handler(void)
{
    while(TRUE){};
    1270:	e7fe      	b.n	1270 <SysTick_Handler>

00001272 <undefined_handler>:
}
void undefined_handler(void)
{
   while(TRUE){};
    1272:	e7fe      	b.n	1272 <undefined_handler>

00001274 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
    1274:	b500      	push	{lr}
    1276:	b083      	sub	sp, #12
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
    1278:	4b26      	ldr	r3, [pc, #152]	; (1314 <_DoInit+0xa0>)
    127a:	9300      	str	r3, [sp, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
    127c:	22a8      	movs	r2, #168	; 0xa8
    127e:	2100      	movs	r1, #0
    1280:	9800      	ldr	r0, [sp, #0]
    1282:	f000 fd13 	bl	1cac <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1286:	9b00      	ldr	r3, [sp, #0]
    1288:	2203      	movs	r2, #3
    128a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    128c:	9b00      	ldr	r3, [sp, #0]
    128e:	2203      	movs	r2, #3
    1290:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    1292:	9b00      	ldr	r3, [sp, #0]
    1294:	4a20      	ldr	r2, [pc, #128]	; (1318 <_DoInit+0xa4>)
    1296:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    1298:	9b00      	ldr	r3, [sp, #0]
    129a:	4a20      	ldr	r2, [pc, #128]	; (131c <_DoInit+0xa8>)
    129c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    129e:	9b00      	ldr	r3, [sp, #0]
    12a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    12a4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    12a6:	9b00      	ldr	r3, [sp, #0]
    12a8:	2200      	movs	r2, #0
    12aa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    12ac:	9b00      	ldr	r3, [sp, #0]
    12ae:	2200      	movs	r2, #0
    12b0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    12b2:	9b00      	ldr	r3, [sp, #0]
    12b4:	2200      	movs	r2, #0
    12b6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    12b8:	9b00      	ldr	r3, [sp, #0]
    12ba:	4a17      	ldr	r2, [pc, #92]	; (1318 <_DoInit+0xa4>)
    12bc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    12be:	9b00      	ldr	r3, [sp, #0]
    12c0:	4a17      	ldr	r2, [pc, #92]	; (1320 <_DoInit+0xac>)
    12c2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    12c4:	9b00      	ldr	r3, [sp, #0]
    12c6:	2210      	movs	r2, #16
    12c8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    12ca:	9b00      	ldr	r3, [sp, #0]
    12cc:	2200      	movs	r2, #0
    12ce:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    12d0:	9b00      	ldr	r3, [sp, #0]
    12d2:	2200      	movs	r2, #0
    12d4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    12d6:	9b00      	ldr	r3, [sp, #0]
    12d8:	2200      	movs	r2, #0
    12da:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    12dc:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    12e0:	2300      	movs	r3, #0
    12e2:	9301      	str	r3, [sp, #4]
    12e4:	e00c      	b.n	1300 <_DoInit+0x8c>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
    12e6:	9b01      	ldr	r3, [sp, #4]
    12e8:	f1c3 030f 	rsb	r3, r3, #15
    12ec:	4a0d      	ldr	r2, [pc, #52]	; (1324 <_DoInit+0xb0>)
    12ee:	5cd1      	ldrb	r1, [r2, r3]
    12f0:	9a00      	ldr	r2, [sp, #0]
    12f2:	9b01      	ldr	r3, [sp, #4]
    12f4:	4413      	add	r3, r2
    12f6:	460a      	mov	r2, r1
    12f8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
    12fa:	9b01      	ldr	r3, [sp, #4]
    12fc:	3301      	adds	r3, #1
    12fe:	9301      	str	r3, [sp, #4]
    1300:	9b01      	ldr	r3, [sp, #4]
    1302:	2b0f      	cmp	r3, #15
    1304:	d9ef      	bls.n	12e6 <_DoInit+0x72>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
    1306:	f3bf 8f5f 	dmb	sy
}
    130a:	bf00      	nop
    130c:	b003      	add	sp, #12
    130e:	f85d fb04 	ldr.w	pc, [sp], #4
    1312:	bf00      	nop
    1314:	1fff91dc 	.word	0x1fff91dc
    1318:	0000fa00 	.word	0x0000fa00
    131c:	1fff9284 	.word	0x1fff9284
    1320:	1fff9684 	.word	0x1fff9684
    1324:	00010cd4 	.word	0x00010cd4

00001328 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    1328:	b500      	push	{lr}
    132a:	b08b      	sub	sp, #44	; 0x2c
    132c:	9003      	str	r0, [sp, #12]
    132e:	9102      	str	r1, [sp, #8]
    1330:	9201      	str	r2, [sp, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    1332:	2300      	movs	r3, #0
    1334:	9308      	str	r3, [sp, #32]
  WrOff = pRing->WrOff;
    1336:	9b03      	ldr	r3, [sp, #12]
    1338:	68db      	ldr	r3, [r3, #12]
    133a:	9307      	str	r3, [sp, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    133c:	9b03      	ldr	r3, [sp, #12]
    133e:	691b      	ldr	r3, [r3, #16]
    1340:	9306      	str	r3, [sp, #24]
    if (RdOff > WrOff) {
    1342:	9a06      	ldr	r2, [sp, #24]
    1344:	9b07      	ldr	r3, [sp, #28]
    1346:	429a      	cmp	r2, r3
    1348:	d905      	bls.n	1356 <_WriteBlocking+0x2e>
      NumBytesToWrite = RdOff - WrOff - 1u;
    134a:	9a06      	ldr	r2, [sp, #24]
    134c:	9b07      	ldr	r3, [sp, #28]
    134e:	1ad3      	subs	r3, r2, r3
    1350:	3b01      	subs	r3, #1
    1352:	9309      	str	r3, [sp, #36]	; 0x24
    1354:	e007      	b.n	1366 <_WriteBlocking+0x3e>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    1356:	9b03      	ldr	r3, [sp, #12]
    1358:	689a      	ldr	r2, [r3, #8]
    135a:	9906      	ldr	r1, [sp, #24]
    135c:	9b07      	ldr	r3, [sp, #28]
    135e:	1acb      	subs	r3, r1, r3
    1360:	4413      	add	r3, r2
    1362:	3b01      	subs	r3, #1
    1364:	9309      	str	r3, [sp, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    1366:	9b03      	ldr	r3, [sp, #12]
    1368:	689a      	ldr	r2, [r3, #8]
    136a:	9b07      	ldr	r3, [sp, #28]
    136c:	1ad3      	subs	r3, r2, r3
    136e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1370:	4293      	cmp	r3, r2
    1372:	bf28      	it	cs
    1374:	4613      	movcs	r3, r2
    1376:	9309      	str	r3, [sp, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    1378:	9a09      	ldr	r2, [sp, #36]	; 0x24
    137a:	9b01      	ldr	r3, [sp, #4]
    137c:	4293      	cmp	r3, r2
    137e:	bf28      	it	cs
    1380:	4613      	movcs	r3, r2
    1382:	9309      	str	r3, [sp, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1384:	9b03      	ldr	r3, [sp, #12]
    1386:	685a      	ldr	r2, [r3, #4]
    1388:	9b07      	ldr	r3, [sp, #28]
    138a:	4413      	add	r3, r2
    138c:	9305      	str	r3, [sp, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    138e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1390:	9902      	ldr	r1, [sp, #8]
    1392:	9805      	ldr	r0, [sp, #20]
    1394:	f000 fc7c 	bl	1c90 <memcpy>
    NumBytesWritten += NumBytesToWrite;
    1398:	9a08      	ldr	r2, [sp, #32]
    139a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    139c:	4413      	add	r3, r2
    139e:	9308      	str	r3, [sp, #32]
    pBuffer         += NumBytesToWrite;
    13a0:	9a02      	ldr	r2, [sp, #8]
    13a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13a4:	4413      	add	r3, r2
    13a6:	9302      	str	r3, [sp, #8]
    NumBytes        -= NumBytesToWrite;
    13a8:	9a01      	ldr	r2, [sp, #4]
    13aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13ac:	1ad3      	subs	r3, r2, r3
    13ae:	9301      	str	r3, [sp, #4]
    WrOff           += NumBytesToWrite;
    13b0:	9a07      	ldr	r2, [sp, #28]
    13b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13b4:	4413      	add	r3, r2
    13b6:	9307      	str	r3, [sp, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
    13b8:	9b03      	ldr	r3, [sp, #12]
    13ba:	689b      	ldr	r3, [r3, #8]
    13bc:	9a07      	ldr	r2, [sp, #28]
    13be:	429a      	cmp	r2, r3
    13c0:	d101      	bne.n	13c6 <_WriteBlocking+0x9e>
      WrOff = 0u;
    13c2:	2300      	movs	r3, #0
    13c4:	9307      	str	r3, [sp, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    13c6:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    13ca:	9b03      	ldr	r3, [sp, #12]
    13cc:	9a07      	ldr	r2, [sp, #28]
    13ce:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    13d0:	9b01      	ldr	r3, [sp, #4]
    13d2:	2b00      	cmp	r3, #0
    13d4:	d1b2      	bne.n	133c <_WriteBlocking+0x14>
  return NumBytesWritten;
    13d6:	9b08      	ldr	r3, [sp, #32]
}
    13d8:	4618      	mov	r0, r3
    13da:	b00b      	add	sp, #44	; 0x2c
    13dc:	f85d fb04 	ldr.w	pc, [sp], #4

000013e0 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    13e0:	b500      	push	{lr}
    13e2:	b089      	sub	sp, #36	; 0x24
    13e4:	9003      	str	r0, [sp, #12]
    13e6:	9102      	str	r1, [sp, #8]
    13e8:	9201      	str	r2, [sp, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
    13ea:	9b03      	ldr	r3, [sp, #12]
    13ec:	68db      	ldr	r3, [r3, #12]
    13ee:	9307      	str	r3, [sp, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    13f0:	9b03      	ldr	r3, [sp, #12]
    13f2:	689a      	ldr	r2, [r3, #8]
    13f4:	9b07      	ldr	r3, [sp, #28]
    13f6:	1ad3      	subs	r3, r2, r3
    13f8:	9306      	str	r3, [sp, #24]
  if (Rem > NumBytes) {
    13fa:	9a06      	ldr	r2, [sp, #24]
    13fc:	9b01      	ldr	r3, [sp, #4]
    13fe:	429a      	cmp	r2, r3
    1400:	d911      	bls.n	1426 <_WriteNoCheck+0x46>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    1402:	9b03      	ldr	r3, [sp, #12]
    1404:	685a      	ldr	r2, [r3, #4]
    1406:	9b07      	ldr	r3, [sp, #28]
    1408:	4413      	add	r3, r2
    140a:	9304      	str	r3, [sp, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
    140c:	9a01      	ldr	r2, [sp, #4]
    140e:	9902      	ldr	r1, [sp, #8]
    1410:	9804      	ldr	r0, [sp, #16]
    1412:	f000 fc3d 	bl	1c90 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    1416:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    141a:	9a07      	ldr	r2, [sp, #28]
    141c:	9b01      	ldr	r3, [sp, #4]
    141e:	441a      	add	r2, r3
    1420:	9b03      	ldr	r3, [sp, #12]
    1422:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
    1424:	e01f      	b.n	1466 <_WriteNoCheck+0x86>
    NumBytesAtOnce = Rem;
    1426:	9b06      	ldr	r3, [sp, #24]
    1428:	9305      	str	r3, [sp, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    142a:	9b03      	ldr	r3, [sp, #12]
    142c:	685a      	ldr	r2, [r3, #4]
    142e:	9b07      	ldr	r3, [sp, #28]
    1430:	4413      	add	r3, r2
    1432:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    1434:	9a05      	ldr	r2, [sp, #20]
    1436:	9902      	ldr	r1, [sp, #8]
    1438:	9804      	ldr	r0, [sp, #16]
    143a:	f000 fc29 	bl	1c90 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    143e:	9a01      	ldr	r2, [sp, #4]
    1440:	9b06      	ldr	r3, [sp, #24]
    1442:	1ad3      	subs	r3, r2, r3
    1444:	9305      	str	r3, [sp, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    1446:	9b03      	ldr	r3, [sp, #12]
    1448:	685b      	ldr	r3, [r3, #4]
    144a:	9304      	str	r3, [sp, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    144c:	9a02      	ldr	r2, [sp, #8]
    144e:	9b06      	ldr	r3, [sp, #24]
    1450:	4413      	add	r3, r2
    1452:	9a05      	ldr	r2, [sp, #20]
    1454:	4619      	mov	r1, r3
    1456:	9804      	ldr	r0, [sp, #16]
    1458:	f000 fc1a 	bl	1c90 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    145c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
    1460:	9b03      	ldr	r3, [sp, #12]
    1462:	9a05      	ldr	r2, [sp, #20]
    1464:	60da      	str	r2, [r3, #12]
}
    1466:	bf00      	nop
    1468:	b009      	add	sp, #36	; 0x24
    146a:	f85d fb04 	ldr.w	pc, [sp], #4

0000146e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    146e:	b086      	sub	sp, #24
    1470:	9001      	str	r0, [sp, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    1472:	9b01      	ldr	r3, [sp, #4]
    1474:	691b      	ldr	r3, [r3, #16]
    1476:	9304      	str	r3, [sp, #16]
  WrOff = pRing->WrOff;
    1478:	9b01      	ldr	r3, [sp, #4]
    147a:	68db      	ldr	r3, [r3, #12]
    147c:	9303      	str	r3, [sp, #12]
  if (RdOff <= WrOff) {
    147e:	9a04      	ldr	r2, [sp, #16]
    1480:	9b03      	ldr	r3, [sp, #12]
    1482:	429a      	cmp	r2, r3
    1484:	d808      	bhi.n	1498 <_GetAvailWriteSpace+0x2a>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    1486:	9b01      	ldr	r3, [sp, #4]
    1488:	689a      	ldr	r2, [r3, #8]
    148a:	9b03      	ldr	r3, [sp, #12]
    148c:	1ad2      	subs	r2, r2, r3
    148e:	9b04      	ldr	r3, [sp, #16]
    1490:	4413      	add	r3, r2
    1492:	3b01      	subs	r3, #1
    1494:	9305      	str	r3, [sp, #20]
    1496:	e004      	b.n	14a2 <_GetAvailWriteSpace+0x34>
  } else {
    r = RdOff - WrOff - 1u;
    1498:	9a04      	ldr	r2, [sp, #16]
    149a:	9b03      	ldr	r3, [sp, #12]
    149c:	1ad3      	subs	r3, r2, r3
    149e:	3b01      	subs	r3, #1
    14a0:	9305      	str	r3, [sp, #20]
  }
  return r;
    14a2:	9b05      	ldr	r3, [sp, #20]
}
    14a4:	4618      	mov	r0, r3
    14a6:	b006      	add	sp, #24
    14a8:	4770      	bx	lr
	...

000014ac <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    14ac:	b500      	push	{lr}
    14ae:	b089      	sub	sp, #36	; 0x24
    14b0:	9003      	str	r0, [sp, #12]
    14b2:	9102      	str	r1, [sp, #8]
    14b4:	9201      	str	r2, [sp, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
    14b6:	9b02      	ldr	r3, [sp, #8]
    14b8:	9306      	str	r3, [sp, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    14ba:	9b03      	ldr	r3, [sp, #12]
    14bc:	1c5a      	adds	r2, r3, #1
    14be:	4613      	mov	r3, r2
    14c0:	005b      	lsls	r3, r3, #1
    14c2:	4413      	add	r3, r2
    14c4:	00db      	lsls	r3, r3, #3
    14c6:	4a20      	ldr	r2, [pc, #128]	; (1548 <SEGGER_RTT_WriteNoLock+0x9c>)
    14c8:	4413      	add	r3, r2
    14ca:	9305      	str	r3, [sp, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    14cc:	9b05      	ldr	r3, [sp, #20]
    14ce:	695b      	ldr	r3, [r3, #20]
    14d0:	2b02      	cmp	r3, #2
    14d2:	d029      	beq.n	1528 <SEGGER_RTT_WriteNoLock+0x7c>
    14d4:	2b02      	cmp	r3, #2
    14d6:	d82e      	bhi.n	1536 <SEGGER_RTT_WriteNoLock+0x8a>
    14d8:	2b00      	cmp	r3, #0
    14da:	d002      	beq.n	14e2 <SEGGER_RTT_WriteNoLock+0x36>
    14dc:	2b01      	cmp	r3, #1
    14de:	d013      	beq.n	1508 <SEGGER_RTT_WriteNoLock+0x5c>
    14e0:	e029      	b.n	1536 <SEGGER_RTT_WriteNoLock+0x8a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    14e2:	9805      	ldr	r0, [sp, #20]
    14e4:	f7ff ffc3 	bl	146e <_GetAvailWriteSpace>
    14e8:	9004      	str	r0, [sp, #16]
    if (Avail < NumBytes) {
    14ea:	9a04      	ldr	r2, [sp, #16]
    14ec:	9b01      	ldr	r3, [sp, #4]
    14ee:	429a      	cmp	r2, r3
    14f0:	d202      	bcs.n	14f8 <SEGGER_RTT_WriteNoLock+0x4c>
      Status = 0u;
    14f2:	2300      	movs	r3, #0
    14f4:	9307      	str	r3, [sp, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    14f6:	e021      	b.n	153c <SEGGER_RTT_WriteNoLock+0x90>
      Status = NumBytes;
    14f8:	9b01      	ldr	r3, [sp, #4]
    14fa:	9307      	str	r3, [sp, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    14fc:	9a01      	ldr	r2, [sp, #4]
    14fe:	9906      	ldr	r1, [sp, #24]
    1500:	9805      	ldr	r0, [sp, #20]
    1502:	f7ff ff6d 	bl	13e0 <_WriteNoCheck>
    break;
    1506:	e019      	b.n	153c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    1508:	9805      	ldr	r0, [sp, #20]
    150a:	f7ff ffb0 	bl	146e <_GetAvailWriteSpace>
    150e:	9004      	str	r0, [sp, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    1510:	9a01      	ldr	r2, [sp, #4]
    1512:	9b04      	ldr	r3, [sp, #16]
    1514:	4293      	cmp	r3, r2
    1516:	bf28      	it	cs
    1518:	4613      	movcs	r3, r2
    151a:	9307      	str	r3, [sp, #28]
    _WriteNoCheck(pRing, pData, Status);
    151c:	9a07      	ldr	r2, [sp, #28]
    151e:	9906      	ldr	r1, [sp, #24]
    1520:	9805      	ldr	r0, [sp, #20]
    1522:	f7ff ff5d 	bl	13e0 <_WriteNoCheck>
    break;
    1526:	e009      	b.n	153c <SEGGER_RTT_WriteNoLock+0x90>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1528:	9a01      	ldr	r2, [sp, #4]
    152a:	9906      	ldr	r1, [sp, #24]
    152c:	9805      	ldr	r0, [sp, #20]
    152e:	f7ff fefb 	bl	1328 <_WriteBlocking>
    1532:	9007      	str	r0, [sp, #28]
    break;
    1534:	e002      	b.n	153c <SEGGER_RTT_WriteNoLock+0x90>
  default:
    Status = 0u;
    1536:	2300      	movs	r3, #0
    1538:	9307      	str	r3, [sp, #28]
    break;
    153a:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    153c:	9b07      	ldr	r3, [sp, #28]
}
    153e:	4618      	mov	r0, r3
    1540:	b009      	add	sp, #36	; 0x24
    1542:	f85d fb04 	ldr.w	pc, [sp], #4
    1546:	bf00      	nop
    1548:	1fff91dc 	.word	0x1fff91dc

0000154c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    154c:	b500      	push	{lr}
    154e:	b089      	sub	sp, #36	; 0x24
    1550:	9003      	str	r0, [sp, #12]
    1552:	9102      	str	r1, [sp, #8]
    1554:	9201      	str	r2, [sp, #4]
  unsigned Status;

  INIT();
    1556:	4b0f      	ldr	r3, [pc, #60]	; (1594 <SEGGER_RTT_Write+0x48>)
    1558:	9307      	str	r3, [sp, #28]
    155a:	9b07      	ldr	r3, [sp, #28]
    155c:	781b      	ldrb	r3, [r3, #0]
    155e:	b2db      	uxtb	r3, r3
    1560:	2b53      	cmp	r3, #83	; 0x53
    1562:	d001      	beq.n	1568 <SEGGER_RTT_Write+0x1c>
    1564:	f7ff fe86 	bl	1274 <_DoInit>
  SEGGER_RTT_LOCK();
    1568:	f3ef 8311 	mrs	r3, BASEPRI
    156c:	f04f 0120 	mov.w	r1, #32
    1570:	f381 8811 	msr	BASEPRI, r1
    1574:	9306      	str	r3, [sp, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
    1576:	9a01      	ldr	r2, [sp, #4]
    1578:	9902      	ldr	r1, [sp, #8]
    157a:	9803      	ldr	r0, [sp, #12]
    157c:	f7ff ff96 	bl	14ac <SEGGER_RTT_WriteNoLock>
    1580:	9005      	str	r0, [sp, #20]
  SEGGER_RTT_UNLOCK();
    1582:	9b06      	ldr	r3, [sp, #24]
    1584:	f383 8811 	msr	BASEPRI, r3
  return Status;
    1588:	9b05      	ldr	r3, [sp, #20]
}
    158a:	4618      	mov	r0, r3
    158c:	b009      	add	sp, #36	; 0x24
    158e:	f85d fb04 	ldr.w	pc, [sp], #4
    1592:	bf00      	nop
    1594:	1fff91dc 	.word	0x1fff91dc

00001598 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    1598:	b508      	push	{r3, lr}
  _DoInit();
    159a:	f7ff fe6b 	bl	1274 <_DoInit>
}
    159e:	bf00      	nop
    15a0:	bd08      	pop	{r3, pc}

000015a2 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    15a2:	b500      	push	{lr}
    15a4:	b085      	sub	sp, #20
    15a6:	9001      	str	r0, [sp, #4]
    15a8:	460b      	mov	r3, r1
    15aa:	f88d 3003 	strb.w	r3, [sp, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    15ae:	9b01      	ldr	r3, [sp, #4]
    15b0:	689b      	ldr	r3, [r3, #8]
    15b2:	9303      	str	r3, [sp, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    15b4:	9b03      	ldr	r3, [sp, #12]
    15b6:	1c5a      	adds	r2, r3, #1
    15b8:	9b01      	ldr	r3, [sp, #4]
    15ba:	685b      	ldr	r3, [r3, #4]
    15bc:	429a      	cmp	r2, r3
    15be:	d80f      	bhi.n	15e0 <_StoreChar+0x3e>
    *(p->pBuffer + Cnt) = c;
    15c0:	9b01      	ldr	r3, [sp, #4]
    15c2:	681a      	ldr	r2, [r3, #0]
    15c4:	9b03      	ldr	r3, [sp, #12]
    15c6:	4413      	add	r3, r2
    15c8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    15cc:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    15ce:	9b03      	ldr	r3, [sp, #12]
    15d0:	1c5a      	adds	r2, r3, #1
    15d2:	9b01      	ldr	r3, [sp, #4]
    15d4:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    15d6:	9b01      	ldr	r3, [sp, #4]
    15d8:	68db      	ldr	r3, [r3, #12]
    15da:	1c5a      	adds	r2, r3, #1
    15dc:	9b01      	ldr	r3, [sp, #4]
    15de:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    15e0:	9b01      	ldr	r3, [sp, #4]
    15e2:	689a      	ldr	r2, [r3, #8]
    15e4:	9b01      	ldr	r3, [sp, #4]
    15e6:	685b      	ldr	r3, [r3, #4]
    15e8:	429a      	cmp	r2, r3
    15ea:	d115      	bne.n	1618 <_StoreChar+0x76>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    15ec:	9b01      	ldr	r3, [sp, #4]
    15ee:	6918      	ldr	r0, [r3, #16]
    15f0:	9b01      	ldr	r3, [sp, #4]
    15f2:	6819      	ldr	r1, [r3, #0]
    15f4:	9b01      	ldr	r3, [sp, #4]
    15f6:	689b      	ldr	r3, [r3, #8]
    15f8:	461a      	mov	r2, r3
    15fa:	f7ff ffa7 	bl	154c <SEGGER_RTT_Write>
    15fe:	4602      	mov	r2, r0
    1600:	9b01      	ldr	r3, [sp, #4]
    1602:	689b      	ldr	r3, [r3, #8]
    1604:	429a      	cmp	r2, r3
    1606:	d004      	beq.n	1612 <_StoreChar+0x70>
      p->ReturnValue = -1;
    1608:	9b01      	ldr	r3, [sp, #4]
    160a:	f04f 32ff 	mov.w	r2, #4294967295
    160e:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    1610:	e002      	b.n	1618 <_StoreChar+0x76>
      p->Cnt = 0u;
    1612:	9b01      	ldr	r3, [sp, #4]
    1614:	2200      	movs	r2, #0
    1616:	609a      	str	r2, [r3, #8]
}
    1618:	bf00      	nop
    161a:	b005      	add	sp, #20
    161c:	f85d fb04 	ldr.w	pc, [sp], #4

00001620 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    1620:	b500      	push	{lr}
    1622:	b08b      	sub	sp, #44	; 0x2c
    1624:	9003      	str	r0, [sp, #12]
    1626:	9102      	str	r1, [sp, #8]
    1628:	9201      	str	r2, [sp, #4]
    162a:	9300      	str	r3, [sp, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    162c:	9b02      	ldr	r3, [sp, #8]
    162e:	9308      	str	r3, [sp, #32]
  Digit = 1u;
    1630:	2301      	movs	r3, #1
    1632:	9309      	str	r3, [sp, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    1634:	2301      	movs	r3, #1
    1636:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    1638:	e007      	b.n	164a <_PrintUnsigned+0x2a>
    Number = (Number / Base);
    163a:	9a08      	ldr	r2, [sp, #32]
    163c:	9b01      	ldr	r3, [sp, #4]
    163e:	fbb2 f3f3 	udiv	r3, r2, r3
    1642:	9308      	str	r3, [sp, #32]
    Width++;
    1644:	9b07      	ldr	r3, [sp, #28]
    1646:	3301      	adds	r3, #1
    1648:	9307      	str	r3, [sp, #28]
  while (Number >= Base) {
    164a:	9a08      	ldr	r2, [sp, #32]
    164c:	9b01      	ldr	r3, [sp, #4]
    164e:	429a      	cmp	r2, r3
    1650:	d2f3      	bcs.n	163a <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
    1652:	9a00      	ldr	r2, [sp, #0]
    1654:	9b07      	ldr	r3, [sp, #28]
    1656:	429a      	cmp	r2, r3
    1658:	d901      	bls.n	165e <_PrintUnsigned+0x3e>
    Width = NumDigits;
    165a:	9b00      	ldr	r3, [sp, #0]
    165c:	9307      	str	r3, [sp, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    165e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1660:	f003 0301 	and.w	r3, r3, #1
    1664:	2b00      	cmp	r3, #0
    1666:	d128      	bne.n	16ba <_PrintUnsigned+0x9a>
    if (FieldWidth != 0u) {
    1668:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    166a:	2b00      	cmp	r3, #0
    166c:	d025      	beq.n	16ba <_PrintUnsigned+0x9a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    166e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1670:	f003 0302 	and.w	r3, r3, #2
    1674:	2b00      	cmp	r3, #0
    1676:	d006      	beq.n	1686 <_PrintUnsigned+0x66>
    1678:	9b00      	ldr	r3, [sp, #0]
    167a:	2b00      	cmp	r3, #0
    167c:	d103      	bne.n	1686 <_PrintUnsigned+0x66>
        c = '0';
    167e:	2330      	movs	r3, #48	; 0x30
    1680:	f88d 301b 	strb.w	r3, [sp, #27]
    1684:	e002      	b.n	168c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
    1686:	2320      	movs	r3, #32
    1688:	f88d 301b 	strb.w	r3, [sp, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    168c:	e00c      	b.n	16a8 <_PrintUnsigned+0x88>
        FieldWidth--;
    168e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1690:	3b01      	subs	r3, #1
    1692:	930c      	str	r3, [sp, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    1694:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1698:	4619      	mov	r1, r3
    169a:	9803      	ldr	r0, [sp, #12]
    169c:	f7ff ff81 	bl	15a2 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    16a0:	9b03      	ldr	r3, [sp, #12]
    16a2:	68db      	ldr	r3, [r3, #12]
    16a4:	2b00      	cmp	r3, #0
    16a6:	db07      	blt.n	16b8 <_PrintUnsigned+0x98>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    16a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    16aa:	2b00      	cmp	r3, #0
    16ac:	d005      	beq.n	16ba <_PrintUnsigned+0x9a>
    16ae:	9a07      	ldr	r2, [sp, #28]
    16b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    16b2:	429a      	cmp	r2, r3
    16b4:	d3eb      	bcc.n	168e <_PrintUnsigned+0x6e>
    16b6:	e000      	b.n	16ba <_PrintUnsigned+0x9a>
          break;
    16b8:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    16ba:	9b03      	ldr	r3, [sp, #12]
    16bc:	68db      	ldr	r3, [r3, #12]
    16be:	2b00      	cmp	r3, #0
    16c0:	db55      	blt.n	176e <_PrintUnsigned+0x14e>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    16c2:	9b00      	ldr	r3, [sp, #0]
    16c4:	2b01      	cmp	r3, #1
    16c6:	d903      	bls.n	16d0 <_PrintUnsigned+0xb0>
        NumDigits--;
    16c8:	9b00      	ldr	r3, [sp, #0]
    16ca:	3b01      	subs	r3, #1
    16cc:	9300      	str	r3, [sp, #0]
    16ce:	e009      	b.n	16e4 <_PrintUnsigned+0xc4>
      } else {
        Div = v / Digit;
    16d0:	9a02      	ldr	r2, [sp, #8]
    16d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16d4:	fbb2 f3f3 	udiv	r3, r2, r3
    16d8:	9305      	str	r3, [sp, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    16da:	9a05      	ldr	r2, [sp, #20]
    16dc:	9b01      	ldr	r3, [sp, #4]
    16de:	429a      	cmp	r2, r3
    16e0:	d200      	bcs.n	16e4 <_PrintUnsigned+0xc4>
          break;
    16e2:	e005      	b.n	16f0 <_PrintUnsigned+0xd0>
        }
      }
      Digit *= Base;
    16e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16e6:	9a01      	ldr	r2, [sp, #4]
    16e8:	fb02 f303 	mul.w	r3, r2, r3
    16ec:	9309      	str	r3, [sp, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    16ee:	e7e8      	b.n	16c2 <_PrintUnsigned+0xa2>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    16f0:	9a02      	ldr	r2, [sp, #8]
    16f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    16f4:	fbb2 f3f3 	udiv	r3, r2, r3
    16f8:	9305      	str	r3, [sp, #20]
      v -= Div * Digit;
    16fa:	9b05      	ldr	r3, [sp, #20]
    16fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    16fe:	fb02 f303 	mul.w	r3, r2, r3
    1702:	9a02      	ldr	r2, [sp, #8]
    1704:	1ad3      	subs	r3, r2, r3
    1706:	9302      	str	r3, [sp, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    1708:	4a1b      	ldr	r2, [pc, #108]	; (1778 <_PrintUnsigned+0x158>)
    170a:	9b05      	ldr	r3, [sp, #20]
    170c:	4413      	add	r3, r2
    170e:	781b      	ldrb	r3, [r3, #0]
    1710:	4619      	mov	r1, r3
    1712:	9803      	ldr	r0, [sp, #12]
    1714:	f7ff ff45 	bl	15a2 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    1718:	9b03      	ldr	r3, [sp, #12]
    171a:	68db      	ldr	r3, [r3, #12]
    171c:	2b00      	cmp	r3, #0
    171e:	db08      	blt.n	1732 <_PrintUnsigned+0x112>
        break;
      }
      Digit /= Base;
    1720:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1722:	9b01      	ldr	r3, [sp, #4]
    1724:	fbb2 f3f3 	udiv	r3, r2, r3
    1728:	9309      	str	r3, [sp, #36]	; 0x24
    } while (Digit);
    172a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    172c:	2b00      	cmp	r3, #0
    172e:	d1df      	bne.n	16f0 <_PrintUnsigned+0xd0>
    1730:	e000      	b.n	1734 <_PrintUnsigned+0x114>
        break;
    1732:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    1734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1736:	f003 0301 	and.w	r3, r3, #1
    173a:	2b00      	cmp	r3, #0
    173c:	d017      	beq.n	176e <_PrintUnsigned+0x14e>
      if (FieldWidth != 0u) {
    173e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1740:	2b00      	cmp	r3, #0
    1742:	d014      	beq.n	176e <_PrintUnsigned+0x14e>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1744:	e00a      	b.n	175c <_PrintUnsigned+0x13c>
          FieldWidth--;
    1746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1748:	3b01      	subs	r3, #1
    174a:	930c      	str	r3, [sp, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    174c:	2120      	movs	r1, #32
    174e:	9803      	ldr	r0, [sp, #12]
    1750:	f7ff ff27 	bl	15a2 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    1754:	9b03      	ldr	r3, [sp, #12]
    1756:	68db      	ldr	r3, [r3, #12]
    1758:	2b00      	cmp	r3, #0
    175a:	db07      	blt.n	176c <_PrintUnsigned+0x14c>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    175c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    175e:	2b00      	cmp	r3, #0
    1760:	d005      	beq.n	176e <_PrintUnsigned+0x14e>
    1762:	9a07      	ldr	r2, [sp, #28]
    1764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1766:	429a      	cmp	r2, r3
    1768:	d3ed      	bcc.n	1746 <_PrintUnsigned+0x126>
          }
        }
      }
    }
  }
}
    176a:	e000      	b.n	176e <_PrintUnsigned+0x14e>
            break;
    176c:	bf00      	nop
}
    176e:	bf00      	nop
    1770:	b00b      	add	sp, #44	; 0x2c
    1772:	f85d fb04 	ldr.w	pc, [sp], #4
    1776:	bf00      	nop
    1778:	00010ce8 	.word	0x00010ce8

0000177c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    177c:	b500      	push	{lr}
    177e:	b089      	sub	sp, #36	; 0x24
    1780:	9005      	str	r0, [sp, #20]
    1782:	9104      	str	r1, [sp, #16]
    1784:	9203      	str	r2, [sp, #12]
    1786:	9302      	str	r3, [sp, #8]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    1788:	9b04      	ldr	r3, [sp, #16]
    178a:	2b00      	cmp	r3, #0
    178c:	bfb8      	it	lt
    178e:	425b      	neglt	r3, r3
    1790:	9306      	str	r3, [sp, #24]

  //
  // Get actual field width
  //
  Width = 1u;
    1792:	2301      	movs	r3, #1
    1794:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    1796:	e007      	b.n	17a8 <_PrintInt+0x2c>
    Number = (Number / (int)Base);
    1798:	9b03      	ldr	r3, [sp, #12]
    179a:	9a06      	ldr	r2, [sp, #24]
    179c:	fb92 f3f3 	sdiv	r3, r2, r3
    17a0:	9306      	str	r3, [sp, #24]
    Width++;
    17a2:	9b07      	ldr	r3, [sp, #28]
    17a4:	3301      	adds	r3, #1
    17a6:	9307      	str	r3, [sp, #28]
  while (Number >= (int)Base) {
    17a8:	9b03      	ldr	r3, [sp, #12]
    17aa:	9a06      	ldr	r2, [sp, #24]
    17ac:	429a      	cmp	r2, r3
    17ae:	daf3      	bge.n	1798 <_PrintInt+0x1c>
  }
  if (NumDigits > Width) {
    17b0:	9a02      	ldr	r2, [sp, #8]
    17b2:	9b07      	ldr	r3, [sp, #28]
    17b4:	429a      	cmp	r2, r3
    17b6:	d901      	bls.n	17bc <_PrintInt+0x40>
    Width = NumDigits;
    17b8:	9b02      	ldr	r3, [sp, #8]
    17ba:	9307      	str	r3, [sp, #28]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    17bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17be:	2b00      	cmp	r3, #0
    17c0:	d00a      	beq.n	17d8 <_PrintInt+0x5c>
    17c2:	9b04      	ldr	r3, [sp, #16]
    17c4:	2b00      	cmp	r3, #0
    17c6:	db04      	blt.n	17d2 <_PrintInt+0x56>
    17c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    17ca:	f003 0304 	and.w	r3, r3, #4
    17ce:	2b00      	cmp	r3, #0
    17d0:	d002      	beq.n	17d8 <_PrintInt+0x5c>
    FieldWidth--;
    17d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17d4:	3b01      	subs	r3, #1
    17d6:	930a      	str	r3, [sp, #40]	; 0x28
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    17d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    17da:	f003 0302 	and.w	r3, r3, #2
    17de:	2b00      	cmp	r3, #0
    17e0:	d002      	beq.n	17e8 <_PrintInt+0x6c>
    17e2:	9b02      	ldr	r3, [sp, #8]
    17e4:	2b00      	cmp	r3, #0
    17e6:	d01c      	beq.n	1822 <_PrintInt+0xa6>
    17e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    17ea:	f003 0301 	and.w	r3, r3, #1
    17ee:	2b00      	cmp	r3, #0
    17f0:	d117      	bne.n	1822 <_PrintInt+0xa6>
    if (FieldWidth != 0u) {
    17f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17f4:	2b00      	cmp	r3, #0
    17f6:	d014      	beq.n	1822 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    17f8:	e00a      	b.n	1810 <_PrintInt+0x94>
        FieldWidth--;
    17fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    17fc:	3b01      	subs	r3, #1
    17fe:	930a      	str	r3, [sp, #40]	; 0x28
        _StoreChar(pBufferDesc, ' ');
    1800:	2120      	movs	r1, #32
    1802:	9805      	ldr	r0, [sp, #20]
    1804:	f7ff fecd 	bl	15a2 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    1808:	9b05      	ldr	r3, [sp, #20]
    180a:	68db      	ldr	r3, [r3, #12]
    180c:	2b00      	cmp	r3, #0
    180e:	db07      	blt.n	1820 <_PrintInt+0xa4>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1812:	2b00      	cmp	r3, #0
    1814:	d005      	beq.n	1822 <_PrintInt+0xa6>
    1816:	9a07      	ldr	r2, [sp, #28]
    1818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    181a:	429a      	cmp	r2, r3
    181c:	d3ed      	bcc.n	17fa <_PrintInt+0x7e>
    181e:	e000      	b.n	1822 <_PrintInt+0xa6>
          break;
    1820:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    1822:	9b05      	ldr	r3, [sp, #20]
    1824:	68db      	ldr	r3, [r3, #12]
    1826:	2b00      	cmp	r3, #0
    1828:	db4a      	blt.n	18c0 <_PrintInt+0x144>
    if (v < 0) {
    182a:	9b04      	ldr	r3, [sp, #16]
    182c:	2b00      	cmp	r3, #0
    182e:	da07      	bge.n	1840 <_PrintInt+0xc4>
      v = -v;
    1830:	9b04      	ldr	r3, [sp, #16]
    1832:	425b      	negs	r3, r3
    1834:	9304      	str	r3, [sp, #16]
      _StoreChar(pBufferDesc, '-');
    1836:	212d      	movs	r1, #45	; 0x2d
    1838:	9805      	ldr	r0, [sp, #20]
    183a:	f7ff feb2 	bl	15a2 <_StoreChar>
    183e:	e008      	b.n	1852 <_PrintInt+0xd6>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    1840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1842:	f003 0304 	and.w	r3, r3, #4
    1846:	2b00      	cmp	r3, #0
    1848:	d003      	beq.n	1852 <_PrintInt+0xd6>
      _StoreChar(pBufferDesc, '+');
    184a:	212b      	movs	r1, #43	; 0x2b
    184c:	9805      	ldr	r0, [sp, #20]
    184e:	f7ff fea8 	bl	15a2 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    1852:	9b05      	ldr	r3, [sp, #20]
    1854:	68db      	ldr	r3, [r3, #12]
    1856:	2b00      	cmp	r3, #0
    1858:	db32      	blt.n	18c0 <_PrintInt+0x144>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    185a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    185c:	f003 0302 	and.w	r3, r3, #2
    1860:	2b00      	cmp	r3, #0
    1862:	d01f      	beq.n	18a4 <_PrintInt+0x128>
    1864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1866:	f003 0301 	and.w	r3, r3, #1
    186a:	2b00      	cmp	r3, #0
    186c:	d11a      	bne.n	18a4 <_PrintInt+0x128>
    186e:	9b02      	ldr	r3, [sp, #8]
    1870:	2b00      	cmp	r3, #0
    1872:	d117      	bne.n	18a4 <_PrintInt+0x128>
        if (FieldWidth != 0u) {
    1874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1876:	2b00      	cmp	r3, #0
    1878:	d014      	beq.n	18a4 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    187a:	e00a      	b.n	1892 <_PrintInt+0x116>
            FieldWidth--;
    187c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    187e:	3b01      	subs	r3, #1
    1880:	930a      	str	r3, [sp, #40]	; 0x28
            _StoreChar(pBufferDesc, '0');
    1882:	2130      	movs	r1, #48	; 0x30
    1884:	9805      	ldr	r0, [sp, #20]
    1886:	f7ff fe8c 	bl	15a2 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    188a:	9b05      	ldr	r3, [sp, #20]
    188c:	68db      	ldr	r3, [r3, #12]
    188e:	2b00      	cmp	r3, #0
    1890:	db07      	blt.n	18a2 <_PrintInt+0x126>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    1892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1894:	2b00      	cmp	r3, #0
    1896:	d005      	beq.n	18a4 <_PrintInt+0x128>
    1898:	9a07      	ldr	r2, [sp, #28]
    189a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    189c:	429a      	cmp	r2, r3
    189e:	d3ed      	bcc.n	187c <_PrintInt+0x100>
    18a0:	e000      	b.n	18a4 <_PrintInt+0x128>
              break;
    18a2:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    18a4:	9b05      	ldr	r3, [sp, #20]
    18a6:	68db      	ldr	r3, [r3, #12]
    18a8:	2b00      	cmp	r3, #0
    18aa:	db09      	blt.n	18c0 <_PrintInt+0x144>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    18ac:	9904      	ldr	r1, [sp, #16]
    18ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18b0:	9301      	str	r3, [sp, #4]
    18b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    18b4:	9300      	str	r3, [sp, #0]
    18b6:	9b02      	ldr	r3, [sp, #8]
    18b8:	9a03      	ldr	r2, [sp, #12]
    18ba:	9805      	ldr	r0, [sp, #20]
    18bc:	f7ff feb0 	bl	1620 <_PrintUnsigned>
      }
    }
  }
}
    18c0:	bf00      	nop
    18c2:	b009      	add	sp, #36	; 0x24
    18c4:	f85d fb04 	ldr.w	pc, [sp], #4

000018c8 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    18c8:	b500      	push	{lr}
    18ca:	b0a3      	sub	sp, #140	; 0x8c
    18cc:	9005      	str	r0, [sp, #20]
    18ce:	9104      	str	r1, [sp, #16]
    18d0:	9203      	str	r2, [sp, #12]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    18d2:	ab06      	add	r3, sp, #24
    18d4:	9316      	str	r3, [sp, #88]	; 0x58
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    18d6:	2340      	movs	r3, #64	; 0x40
    18d8:	9317      	str	r3, [sp, #92]	; 0x5c
  BufferDesc.Cnt            = 0u;
    18da:	2300      	movs	r3, #0
    18dc:	9318      	str	r3, [sp, #96]	; 0x60
  BufferDesc.RTTBufferIndex = BufferIndex;
    18de:	9b05      	ldr	r3, [sp, #20]
    18e0:	931a      	str	r3, [sp, #104]	; 0x68
  BufferDesc.ReturnValue    = 0;
    18e2:	2300      	movs	r3, #0
    18e4:	9319      	str	r3, [sp, #100]	; 0x64

  do {
    c = *sFormat;
    18e6:	9b04      	ldr	r3, [sp, #16]
    18e8:	781b      	ldrb	r3, [r3, #0]
    18ea:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    sFormat++;
    18ee:	9b04      	ldr	r3, [sp, #16]
    18f0:	3301      	adds	r3, #1
    18f2:	9304      	str	r3, [sp, #16]
    if (c == 0u) {
    18f4:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    18f8:	2b00      	cmp	r3, #0
    18fa:	f000 819c 	beq.w	1c36 <SEGGER_RTT_vprintf+0x36e>
      break;
    }
    if (c == '%') {
    18fe:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1902:	2b25      	cmp	r3, #37	; 0x25
    1904:	f040 818b 	bne.w	1c1e <SEGGER_RTT_vprintf+0x356>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    1908:	2300      	movs	r3, #0
    190a:	931e      	str	r3, [sp, #120]	; 0x78
      v = 1;
    190c:	2301      	movs	r3, #1
    190e:	9320      	str	r3, [sp, #128]	; 0x80
      do {
        c = *sFormat;
    1910:	9b04      	ldr	r3, [sp, #16]
    1912:	781b      	ldrb	r3, [r3, #0]
    1914:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        switch (c) {
    1918:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    191c:	3b23      	subs	r3, #35	; 0x23
    191e:	2b0d      	cmp	r3, #13
    1920:	d83e      	bhi.n	19a0 <SEGGER_RTT_vprintf+0xd8>
    1922:	a201      	add	r2, pc, #4	; (adr r2, 1928 <SEGGER_RTT_vprintf+0x60>)
    1924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1928:	00001991 	.word	0x00001991
    192c:	000019a1 	.word	0x000019a1
    1930:	000019a1 	.word	0x000019a1
    1934:	000019a1 	.word	0x000019a1
    1938:	000019a1 	.word	0x000019a1
    193c:	000019a1 	.word	0x000019a1
    1940:	000019a1 	.word	0x000019a1
    1944:	000019a1 	.word	0x000019a1
    1948:	00001981 	.word	0x00001981
    194c:	000019a1 	.word	0x000019a1
    1950:	00001961 	.word	0x00001961
    1954:	000019a1 	.word	0x000019a1
    1958:	000019a1 	.word	0x000019a1
    195c:	00001971 	.word	0x00001971
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    1960:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1962:	f043 0301 	orr.w	r3, r3, #1
    1966:	931e      	str	r3, [sp, #120]	; 0x78
    1968:	9b04      	ldr	r3, [sp, #16]
    196a:	3301      	adds	r3, #1
    196c:	9304      	str	r3, [sp, #16]
    196e:	e01a      	b.n	19a6 <SEGGER_RTT_vprintf+0xde>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    1970:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1972:	f043 0302 	orr.w	r3, r3, #2
    1976:	931e      	str	r3, [sp, #120]	; 0x78
    1978:	9b04      	ldr	r3, [sp, #16]
    197a:	3301      	adds	r3, #1
    197c:	9304      	str	r3, [sp, #16]
    197e:	e012      	b.n	19a6 <SEGGER_RTT_vprintf+0xde>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    1980:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1982:	f043 0304 	orr.w	r3, r3, #4
    1986:	931e      	str	r3, [sp, #120]	; 0x78
    1988:	9b04      	ldr	r3, [sp, #16]
    198a:	3301      	adds	r3, #1
    198c:	9304      	str	r3, [sp, #16]
    198e:	e00a      	b.n	19a6 <SEGGER_RTT_vprintf+0xde>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    1990:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1992:	f043 0308 	orr.w	r3, r3, #8
    1996:	931e      	str	r3, [sp, #120]	; 0x78
    1998:	9b04      	ldr	r3, [sp, #16]
    199a:	3301      	adds	r3, #1
    199c:	9304      	str	r3, [sp, #16]
    199e:	e002      	b.n	19a6 <SEGGER_RTT_vprintf+0xde>
        default:  v = 0; break;
    19a0:	2300      	movs	r3, #0
    19a2:	9320      	str	r3, [sp, #128]	; 0x80
    19a4:	bf00      	nop
        }
      } while (v);
    19a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    19a8:	2b00      	cmp	r3, #0
    19aa:	d1b1      	bne.n	1910 <SEGGER_RTT_vprintf+0x48>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    19ac:	2300      	movs	r3, #0
    19ae:	931d      	str	r3, [sp, #116]	; 0x74
      do {
        c = *sFormat;
    19b0:	9b04      	ldr	r3, [sp, #16]
    19b2:	781b      	ldrb	r3, [r3, #0]
    19b4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c < '0') || (c > '9')) {
    19b8:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    19bc:	2b2f      	cmp	r3, #47	; 0x2f
    19be:	d912      	bls.n	19e6 <SEGGER_RTT_vprintf+0x11e>
    19c0:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    19c4:	2b39      	cmp	r3, #57	; 0x39
    19c6:	d80e      	bhi.n	19e6 <SEGGER_RTT_vprintf+0x11e>
          break;
        }
        sFormat++;
    19c8:	9b04      	ldr	r3, [sp, #16]
    19ca:	3301      	adds	r3, #1
    19cc:	9304      	str	r3, [sp, #16]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    19ce:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    19d0:	4613      	mov	r3, r2
    19d2:	009b      	lsls	r3, r3, #2
    19d4:	4413      	add	r3, r2
    19d6:	005b      	lsls	r3, r3, #1
    19d8:	461a      	mov	r2, r3
    19da:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    19de:	4413      	add	r3, r2
    19e0:	3b30      	subs	r3, #48	; 0x30
    19e2:	931d      	str	r3, [sp, #116]	; 0x74
        c = *sFormat;
    19e4:	e7e4      	b.n	19b0 <SEGGER_RTT_vprintf+0xe8>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    19e6:	2300      	movs	r3, #0
    19e8:	931f      	str	r3, [sp, #124]	; 0x7c
      c = *sFormat;
    19ea:	9b04      	ldr	r3, [sp, #16]
    19ec:	781b      	ldrb	r3, [r3, #0]
    19ee:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      if (c == '.') {
    19f2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    19f6:	2b2e      	cmp	r3, #46	; 0x2e
    19f8:	d11d      	bne.n	1a36 <SEGGER_RTT_vprintf+0x16e>
        sFormat++;
    19fa:	9b04      	ldr	r3, [sp, #16]
    19fc:	3301      	adds	r3, #1
    19fe:	9304      	str	r3, [sp, #16]
        do {
          c = *sFormat;
    1a00:	9b04      	ldr	r3, [sp, #16]
    1a02:	781b      	ldrb	r3, [r3, #0]
    1a04:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
          if ((c < '0') || (c > '9')) {
    1a08:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a0c:	2b2f      	cmp	r3, #47	; 0x2f
    1a0e:	d912      	bls.n	1a36 <SEGGER_RTT_vprintf+0x16e>
    1a10:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a14:	2b39      	cmp	r3, #57	; 0x39
    1a16:	d80e      	bhi.n	1a36 <SEGGER_RTT_vprintf+0x16e>
            break;
          }
          sFormat++;
    1a18:	9b04      	ldr	r3, [sp, #16]
    1a1a:	3301      	adds	r3, #1
    1a1c:	9304      	str	r3, [sp, #16]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    1a1e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    1a20:	4613      	mov	r3, r2
    1a22:	009b      	lsls	r3, r3, #2
    1a24:	4413      	add	r3, r2
    1a26:	005b      	lsls	r3, r3, #1
    1a28:	461a      	mov	r2, r3
    1a2a:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a2e:	4413      	add	r3, r2
    1a30:	3b30      	subs	r3, #48	; 0x30
    1a32:	931f      	str	r3, [sp, #124]	; 0x7c
          c = *sFormat;
    1a34:	e7e4      	b.n	1a00 <SEGGER_RTT_vprintf+0x138>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    1a36:	9b04      	ldr	r3, [sp, #16]
    1a38:	781b      	ldrb	r3, [r3, #0]
    1a3a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
      do {
        if ((c == 'l') || (c == 'h')) {
    1a3e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a42:	2b6c      	cmp	r3, #108	; 0x6c
    1a44:	d003      	beq.n	1a4e <SEGGER_RTT_vprintf+0x186>
    1a46:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a4a:	2b68      	cmp	r3, #104	; 0x68
    1a4c:	d107      	bne.n	1a5e <SEGGER_RTT_vprintf+0x196>
          sFormat++;
    1a4e:	9b04      	ldr	r3, [sp, #16]
    1a50:	3301      	adds	r3, #1
    1a52:	9304      	str	r3, [sp, #16]
          c = *sFormat;
    1a54:	9b04      	ldr	r3, [sp, #16]
    1a56:	781b      	ldrb	r3, [r3, #0]
    1a58:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        if ((c == 'l') || (c == 'h')) {
    1a5c:	e7ef      	b.n	1a3e <SEGGER_RTT_vprintf+0x176>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    1a5e:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1a62:	2b25      	cmp	r3, #37	; 0x25
    1a64:	f000 80d0 	beq.w	1c08 <SEGGER_RTT_vprintf+0x340>
    1a68:	2b25      	cmp	r3, #37	; 0x25
    1a6a:	f2c0 80d3 	blt.w	1c14 <SEGGER_RTT_vprintf+0x34c>
    1a6e:	2b78      	cmp	r3, #120	; 0x78
    1a70:	f300 80d0 	bgt.w	1c14 <SEGGER_RTT_vprintf+0x34c>
    1a74:	2b58      	cmp	r3, #88	; 0x58
    1a76:	f2c0 80cd 	blt.w	1c14 <SEGGER_RTT_vprintf+0x34c>
    1a7a:	3b58      	subs	r3, #88	; 0x58
    1a7c:	2b20      	cmp	r3, #32
    1a7e:	f200 80c9 	bhi.w	1c14 <SEGGER_RTT_vprintf+0x34c>
    1a82:	a201      	add	r2, pc, #4	; (adr r2, 1a88 <SEGGER_RTT_vprintf+0x1c0>)
    1a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1a88:	00001b79 	.word	0x00001b79
    1a8c:	00001c15 	.word	0x00001c15
    1a90:	00001c15 	.word	0x00001c15
    1a94:	00001c15 	.word	0x00001c15
    1a98:	00001c15 	.word	0x00001c15
    1a9c:	00001c15 	.word	0x00001c15
    1aa0:	00001c15 	.word	0x00001c15
    1aa4:	00001c15 	.word	0x00001c15
    1aa8:	00001c15 	.word	0x00001c15
    1aac:	00001c15 	.word	0x00001c15
    1ab0:	00001c15 	.word	0x00001c15
    1ab4:	00001b0d 	.word	0x00001b0d
    1ab8:	00001b31 	.word	0x00001b31
    1abc:	00001c15 	.word	0x00001c15
    1ac0:	00001c15 	.word	0x00001c15
    1ac4:	00001c15 	.word	0x00001c15
    1ac8:	00001c15 	.word	0x00001c15
    1acc:	00001c15 	.word	0x00001c15
    1ad0:	00001c15 	.word	0x00001c15
    1ad4:	00001c15 	.word	0x00001c15
    1ad8:	00001c15 	.word	0x00001c15
    1adc:	00001c15 	.word	0x00001c15
    1ae0:	00001c15 	.word	0x00001c15
    1ae4:	00001c15 	.word	0x00001c15
    1ae8:	00001be5 	.word	0x00001be5
    1aec:	00001c15 	.word	0x00001c15
    1af0:	00001c15 	.word	0x00001c15
    1af4:	00001b9d 	.word	0x00001b9d
    1af8:	00001c15 	.word	0x00001c15
    1afc:	00001b55 	.word	0x00001b55
    1b00:	00001c15 	.word	0x00001c15
    1b04:	00001c15 	.word	0x00001c15
    1b08:	00001b79 	.word	0x00001b79
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    1b0c:	9b03      	ldr	r3, [sp, #12]
    1b0e:	681b      	ldr	r3, [r3, #0]
    1b10:	1d19      	adds	r1, r3, #4
    1b12:	9a03      	ldr	r2, [sp, #12]
    1b14:	6011      	str	r1, [r2, #0]
    1b16:	681b      	ldr	r3, [r3, #0]
    1b18:	9320      	str	r3, [sp, #128]	; 0x80
        c0 = (char)v;
    1b1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    1b1c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
        _StoreChar(&BufferDesc, c0);
    1b20:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    1b24:	ab16      	add	r3, sp, #88	; 0x58
    1b26:	4611      	mov	r1, r2
    1b28:	4618      	mov	r0, r3
    1b2a:	f7ff fd3a 	bl	15a2 <_StoreChar>
        break;
    1b2e:	e072      	b.n	1c16 <SEGGER_RTT_vprintf+0x34e>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    1b30:	9b03      	ldr	r3, [sp, #12]
    1b32:	681b      	ldr	r3, [r3, #0]
    1b34:	1d19      	adds	r1, r3, #4
    1b36:	9a03      	ldr	r2, [sp, #12]
    1b38:	6011      	str	r1, [r2, #0]
    1b3a:	681b      	ldr	r3, [r3, #0]
    1b3c:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    1b3e:	a816      	add	r0, sp, #88	; 0x58
    1b40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1b42:	9301      	str	r3, [sp, #4]
    1b44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1b46:	9300      	str	r3, [sp, #0]
    1b48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1b4a:	220a      	movs	r2, #10
    1b4c:	9920      	ldr	r1, [sp, #128]	; 0x80
    1b4e:	f7ff fe15 	bl	177c <_PrintInt>
        break;
    1b52:	e060      	b.n	1c16 <SEGGER_RTT_vprintf+0x34e>
      case 'u':
        v = va_arg(*pParamList, int);
    1b54:	9b03      	ldr	r3, [sp, #12]
    1b56:	681b      	ldr	r3, [r3, #0]
    1b58:	1d19      	adds	r1, r3, #4
    1b5a:	9a03      	ldr	r2, [sp, #12]
    1b5c:	6011      	str	r1, [r2, #0]
    1b5e:	681b      	ldr	r3, [r3, #0]
    1b60:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    1b62:	9920      	ldr	r1, [sp, #128]	; 0x80
    1b64:	a816      	add	r0, sp, #88	; 0x58
    1b66:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1b68:	9301      	str	r3, [sp, #4]
    1b6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1b6c:	9300      	str	r3, [sp, #0]
    1b6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1b70:	220a      	movs	r2, #10
    1b72:	f7ff fd55 	bl	1620 <_PrintUnsigned>
        break;
    1b76:	e04e      	b.n	1c16 <SEGGER_RTT_vprintf+0x34e>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    1b78:	9b03      	ldr	r3, [sp, #12]
    1b7a:	681b      	ldr	r3, [r3, #0]
    1b7c:	1d19      	adds	r1, r3, #4
    1b7e:	9a03      	ldr	r2, [sp, #12]
    1b80:	6011      	str	r1, [r2, #0]
    1b82:	681b      	ldr	r3, [r3, #0]
    1b84:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    1b86:	9920      	ldr	r1, [sp, #128]	; 0x80
    1b88:	a816      	add	r0, sp, #88	; 0x58
    1b8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    1b8c:	9301      	str	r3, [sp, #4]
    1b8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1b90:	9300      	str	r3, [sp, #0]
    1b92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1b94:	2210      	movs	r2, #16
    1b96:	f7ff fd43 	bl	1620 <_PrintUnsigned>
        break;
    1b9a:	e03c      	b.n	1c16 <SEGGER_RTT_vprintf+0x34e>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    1b9c:	9b03      	ldr	r3, [sp, #12]
    1b9e:	681b      	ldr	r3, [r3, #0]
    1ba0:	1d19      	adds	r1, r3, #4
    1ba2:	9a03      	ldr	r2, [sp, #12]
    1ba4:	6011      	str	r1, [r2, #0]
    1ba6:	681b      	ldr	r3, [r3, #0]
    1ba8:	931c      	str	r3, [sp, #112]	; 0x70
          if (s == NULL) {
    1baa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1bac:	2b00      	cmp	r3, #0
    1bae:	d101      	bne.n	1bb4 <SEGGER_RTT_vprintf+0x2ec>
            s = "(NULL)";  // Print (NULL) instead of crashing or breaking, as it is more informative to the user.
    1bb0:	4b2c      	ldr	r3, [pc, #176]	; (1c64 <SEGGER_RTT_vprintf+0x39c>)
    1bb2:	931c      	str	r3, [sp, #112]	; 0x70
          }
          do {
            c = *s;
    1bb4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1bb6:	781b      	ldrb	r3, [r3, #0]
    1bb8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
            s++;
    1bbc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    1bbe:	3301      	adds	r3, #1
    1bc0:	931c      	str	r3, [sp, #112]	; 0x70
            if (c == '\0') {
    1bc2:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d00a      	beq.n	1be0 <SEGGER_RTT_vprintf+0x318>
              break;
            }
           _StoreChar(&BufferDesc, c);
    1bca:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1bce:	ab16      	add	r3, sp, #88	; 0x58
    1bd0:	4611      	mov	r1, r2
    1bd2:	4618      	mov	r0, r3
    1bd4:	f7ff fce5 	bl	15a2 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    1bd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1bda:	2b00      	cmp	r3, #0
    1bdc:	daea      	bge.n	1bb4 <SEGGER_RTT_vprintf+0x2ec>
        }
        break;
    1bde:	e01a      	b.n	1c16 <SEGGER_RTT_vprintf+0x34e>
              break;
    1be0:	bf00      	nop
        break;
    1be2:	e018      	b.n	1c16 <SEGGER_RTT_vprintf+0x34e>
      case 'p':
        v = va_arg(*pParamList, int);
    1be4:	9b03      	ldr	r3, [sp, #12]
    1be6:	681b      	ldr	r3, [r3, #0]
    1be8:	1d19      	adds	r1, r3, #4
    1bea:	9a03      	ldr	r2, [sp, #12]
    1bec:	6011      	str	r1, [r2, #0]
    1bee:	681b      	ldr	r3, [r3, #0]
    1bf0:	9320      	str	r3, [sp, #128]	; 0x80
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    1bf2:	9920      	ldr	r1, [sp, #128]	; 0x80
    1bf4:	a816      	add	r0, sp, #88	; 0x58
    1bf6:	2300      	movs	r3, #0
    1bf8:	9301      	str	r3, [sp, #4]
    1bfa:	2308      	movs	r3, #8
    1bfc:	9300      	str	r3, [sp, #0]
    1bfe:	2308      	movs	r3, #8
    1c00:	2210      	movs	r2, #16
    1c02:	f7ff fd0d 	bl	1620 <_PrintUnsigned>
        break;
    1c06:	e006      	b.n	1c16 <SEGGER_RTT_vprintf+0x34e>
      case '%':
        _StoreChar(&BufferDesc, '%');
    1c08:	ab16      	add	r3, sp, #88	; 0x58
    1c0a:	2125      	movs	r1, #37	; 0x25
    1c0c:	4618      	mov	r0, r3
    1c0e:	f7ff fcc8 	bl	15a2 <_StoreChar>
        break;
    1c12:	e000      	b.n	1c16 <SEGGER_RTT_vprintf+0x34e>
      default:
        break;
    1c14:	bf00      	nop
      }
      sFormat++;
    1c16:	9b04      	ldr	r3, [sp, #16]
    1c18:	3301      	adds	r3, #1
    1c1a:	9304      	str	r3, [sp, #16]
    1c1c:	e006      	b.n	1c2c <SEGGER_RTT_vprintf+0x364>
    } else {
      _StoreChar(&BufferDesc, c);
    1c1e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    1c22:	ab16      	add	r3, sp, #88	; 0x58
    1c24:	4611      	mov	r1, r2
    1c26:	4618      	mov	r0, r3
    1c28:	f7ff fcbb 	bl	15a2 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    1c2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1c2e:	2b00      	cmp	r3, #0
    1c30:	f6bf ae59 	bge.w	18e6 <SEGGER_RTT_vprintf+0x1e>
    1c34:	e000      	b.n	1c38 <SEGGER_RTT_vprintf+0x370>
      break;
    1c36:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
    1c38:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	dd0c      	ble.n	1c58 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    1c3e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1c40:	2b00      	cmp	r3, #0
    1c42:	d005      	beq.n	1c50 <SEGGER_RTT_vprintf+0x388>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    1c44:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c46:	ab06      	add	r3, sp, #24
    1c48:	4619      	mov	r1, r3
    1c4a:	9805      	ldr	r0, [sp, #20]
    1c4c:	f7ff fc7e 	bl	154c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    1c50:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1c52:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c54:	4413      	add	r3, r2
    1c56:	9319      	str	r3, [sp, #100]	; 0x64
  }
  return BufferDesc.ReturnValue;
    1c58:	9b19      	ldr	r3, [sp, #100]	; 0x64
}
    1c5a:	4618      	mov	r0, r3
    1c5c:	b023      	add	sp, #140	; 0x8c
    1c5e:	f85d fb04 	ldr.w	pc, [sp], #4
    1c62:	bf00      	nop
    1c64:	0000fa0c 	.word	0x0000fa0c

00001c68 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    1c68:	b40e      	push	{r1, r2, r3}
    1c6a:	b500      	push	{lr}
    1c6c:	b084      	sub	sp, #16
    1c6e:	9001      	str	r0, [sp, #4]
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
    1c70:	ab06      	add	r3, sp, #24
    1c72:	9302      	str	r3, [sp, #8]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    1c74:	ab02      	add	r3, sp, #8
    1c76:	461a      	mov	r2, r3
    1c78:	9905      	ldr	r1, [sp, #20]
    1c7a:	9801      	ldr	r0, [sp, #4]
    1c7c:	f7ff fe24 	bl	18c8 <SEGGER_RTT_vprintf>
    1c80:	9003      	str	r0, [sp, #12]
  va_end(ParamList);
  return r;
    1c82:	9b03      	ldr	r3, [sp, #12]
}
    1c84:	4618      	mov	r0, r3
    1c86:	b004      	add	sp, #16
    1c88:	f85d eb04 	ldr.w	lr, [sp], #4
    1c8c:	b003      	add	sp, #12
    1c8e:	4770      	bx	lr

00001c90 <memcpy>:
    1c90:	440a      	add	r2, r1
    1c92:	4291      	cmp	r1, r2
    1c94:	f100 33ff 	add.w	r3, r0, #4294967295
    1c98:	d100      	bne.n	1c9c <memcpy+0xc>
    1c9a:	4770      	bx	lr
    1c9c:	b510      	push	{r4, lr}
    1c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
    1ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
    1ca6:	4291      	cmp	r1, r2
    1ca8:	d1f9      	bne.n	1c9e <memcpy+0xe>
    1caa:	bd10      	pop	{r4, pc}

00001cac <memset>:
    1cac:	4402      	add	r2, r0
    1cae:	4603      	mov	r3, r0
    1cb0:	4293      	cmp	r3, r2
    1cb2:	d100      	bne.n	1cb6 <memset+0xa>
    1cb4:	4770      	bx	lr
    1cb6:	f803 1b01 	strb.w	r1, [r3], #1
    1cba:	e7f9      	b.n	1cb0 <memset+0x4>

00001cbc <IntCtrl_Ip_InstallHandlerPrivileged>:
#endif

void IntCtrl_Ip_InstallHandlerPrivileged(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1cbc:	b086      	sub	sp, #24
    1cbe:	9003      	str	r0, [sp, #12]
    1cc0:	9102      	str	r1, [sp, #8]
    1cc2:	9201      	str	r2, [sp, #4]

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber)] = pfNewHandler;
    OsIf_ResumeAllInterrupts();
#else
    IntCtrl_Ip_IrqHandlerType *pVectorRam = (IntCtrl_Ip_IrqHandlerType *)S32_SCB->VTOR;
    1cc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1cc8:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
    1ccc:	9305      	str	r3, [sp, #20]

    /* Save the former handler pointer */
    if (pfOldHandler != NULL_PTR)
    1cce:	9b01      	ldr	r3, [sp, #4]
    1cd0:	2b00      	cmp	r3, #0
    1cd2:	d007      	beq.n	1ce4 <IntCtrl_Ip_InstallHandlerPrivileged+0x28>
    {
        *pfOldHandler = (IntCtrl_Ip_IrqHandlerType)pVectorRam[((sint32)eIrqNumber) + 16];
    1cd4:	9b03      	ldr	r3, [sp, #12]
    1cd6:	3310      	adds	r3, #16
    1cd8:	009b      	lsls	r3, r3, #2
    1cda:	9a05      	ldr	r2, [sp, #20]
    1cdc:	4413      	add	r3, r2
    1cde:	681a      	ldr	r2, [r3, #0]
    1ce0:	9b01      	ldr	r3, [sp, #4]
    1ce2:	601a      	str	r2, [r3, #0]
    }

    /* Set handler into vector table */
    pVectorRam[((sint32)eIrqNumber) + 16] = pfNewHandler;
    1ce4:	9b03      	ldr	r3, [sp, #12]
    1ce6:	3310      	adds	r3, #16
    1ce8:	009b      	lsls	r3, r3, #2
    1cea:	9a05      	ldr	r2, [sp, #20]
    1cec:	4413      	add	r3, r2
    1cee:	9a02      	ldr	r2, [sp, #8]
    1cf0:	601a      	str	r2, [r3, #0]
    S32_SCB->ICIALLU = 0UL;
#endif
    
#endif /* (INT_CTRL_IP_CORTEXR == STD_ON) || (INT_CTRL_IP_CORTEXA == STD_ON) */
/*LDRA_NOANALYSIS*/
    MCAL_INSTRUCTION_SYNC_BARRIER();
    1cf2:	f3bf 8f6f 	isb	sy
    MCAL_DATA_SYNC_BARRIER();
    1cf6:	f3bf 8f4f 	dsb	sy
/*LDRA_ANALYSIS*/    
}
    1cfa:	bf00      	nop
    1cfc:	b006      	add	sp, #24
    1cfe:	4770      	bx	lr

00001d00 <IntCtrl_Ip_EnableIrqPrivileged>:

void IntCtrl_Ip_EnableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1d00:	b082      	sub	sp, #8
    1d02:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ISENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ISER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1d04:	9b01      	ldr	r3, [sp, #4]
    1d06:	f003 021f 	and.w	r2, r3, #31
    1d0a:	4905      	ldr	r1, [pc, #20]	; (1d20 <IntCtrl_Ip_EnableIrqPrivileged+0x20>)
    1d0c:	9b01      	ldr	r3, [sp, #4]
    1d0e:	095b      	lsrs	r3, r3, #5
    1d10:	2001      	movs	r0, #1
    1d12:	fa00 f202 	lsl.w	r2, r0, r2
    1d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1d1a:	bf00      	nop
    1d1c:	b002      	add	sp, #8
    1d1e:	4770      	bx	lr
    1d20:	e000e100 	.word	0xe000e100

00001d24 <IntCtrl_Ip_DisableIrqPrivileged>:

void IntCtrl_Ip_DisableIrqPrivileged(IRQn_Type eIrqNumber)
{
    1d24:	b082      	sub	sp, #8
    1d26:	9001      	str	r0, [sp, #4]
    {
        S32_GICD->GICD_ICENABLER[((uint32)(eIrqNumber) >> 5U) - 1U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    }
#endif
#else
    S32_NVIC->ICER[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1d28:	9b01      	ldr	r3, [sp, #4]
    1d2a:	f003 021f 	and.w	r2, r3, #31
    1d2e:	4906      	ldr	r1, [pc, #24]	; (1d48 <IntCtrl_Ip_DisableIrqPrivileged+0x24>)
    1d30:	9b01      	ldr	r3, [sp, #4]
    1d32:	095b      	lsrs	r3, r3, #5
    1d34:	2001      	movs	r0, #1
    1d36:	fa00 f202 	lsl.w	r2, r0, r2
    1d3a:	3320      	adds	r3, #32
    1d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
}
    1d40:	bf00      	nop
    1d42:	b002      	add	sp, #8
    1d44:	4770      	bx	lr
    1d46:	bf00      	nop
    1d48:	e000e100 	.word	0xe000e100

00001d4c <IntCtrl_Ip_SetPriorityPrivileged>:

void IntCtrl_Ip_SetPriorityPrivileged(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1d4c:	b084      	sub	sp, #16
    1d4e:	9001      	str	r0, [sp, #4]
    1d50:	460b      	mov	r3, r1
    1d52:	f88d 3003 	strb.w	r3, [sp, #3]
#endif

#endif /* (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON) */

#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8) (8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1d56:	2304      	movs	r3, #4
    1d58:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Set Priority for device specific Interrupts */
        S32_NVIC->IP[(uint32)(eIrqNumber)] = (uint8)((((uint32)u8Priority) << shift) & 0xFFUL);
    1d5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    1d60:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d64:	fa02 f103 	lsl.w	r1, r2, r3
    1d68:	4a04      	ldr	r2, [pc, #16]	; (1d7c <IntCtrl_Ip_SetPriorityPrivileged+0x30>)
    1d6a:	9b01      	ldr	r3, [sp, #4]
    1d6c:	b2c9      	uxtb	r1, r1
    1d6e:	4413      	add	r3, r2
    1d70:	460a      	mov	r2, r1
    1d72:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] &= ~(0xFFUL << priByteShift);
            IP_GIC500->GICD.IPRIORITYR[iprVectorId] |= ((uint32)(((((uint32)u8Priority) << shift_gic)) & 0xFFUL)) << priByteShift;
        }
    #endif
#endif
}
    1d76:	bf00      	nop
    1d78:	b004      	add	sp, #16
    1d7a:	4770      	bx	lr
    1d7c:	e000e100 	.word	0xe000e100

00001d80 <IntCtrl_Ip_GetPriorityPrivileged>:

uint8 IntCtrl_Ip_GetPriorityPrivileged(IRQn_Type eIrqNumber)
{
    1d80:	b084      	sub	sp, #16
    1d82:	9001      	str	r0, [sp, #4]

    uint8 priority;


#if (INT_CTRL_IP_CORTEXM == STD_ON)
    uint8 shift = (uint8)(8U - INT_CTRL_IP_NVIC_PRIO_BITS);
    1d84:	2304      	movs	r3, #4
    1d86:	f88d 300f 	strb.w	r3, [sp, #15]
    #if (INT_CTRL_IP_CORTEXM0PLUS == STD_OFF)
        /* Get Priority for device specific Interrupts  */
        priority = (uint8)(S32_NVIC->IP[(uint32)(eIrqNumber)] >> shift);
    1d8a:	4a09      	ldr	r2, [pc, #36]	; (1db0 <IntCtrl_Ip_GetPriorityPrivileged+0x30>)
    1d8c:	9b01      	ldr	r3, [sp, #4]
    1d8e:	4413      	add	r3, r2
    1d90:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
    1d94:	b2db      	uxtb	r3, r3
    1d96:	461a      	mov	r2, r3
    1d98:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1d9c:	fa42 f303 	asr.w	r3, r2, r3
    1da0:	f88d 300e 	strb.w	r3, [sp, #14]
            uint8 priByteShift = (uint8)((((uint8)(eIrqNumber)) & 0x3U) << 3U);
            priority = ((uint8)(IP_GIC500->GICD.IPRIORITYR[iprVectorId] >> priByteShift)) >> shift_gic;
        }
    #endif
#endif
    return priority;
    1da4:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    1da8:	4618      	mov	r0, r3
    1daa:	b004      	add	sp, #16
    1dac:	4770      	bx	lr
    1dae:	bf00      	nop
    1db0:	e000e100 	.word	0xe000e100

00001db4 <IntCtrl_Ip_ClearPendingPrivileged>:

void IntCtrl_Ip_ClearPendingPrivileged(IRQn_Type eIrqNumber)
{
    1db4:	b082      	sub	sp, #8
    1db6:	9001      	str	r0, [sp, #4]
    }
#endif

#else
    /* Clear Pending Interrupt */
    S32_NVIC->ICPR[(uint32)(eIrqNumber) >> 5U] = (uint32)(1UL << ((uint32)(eIrqNumber) & (uint32)0x1FU));
    1db8:	9b01      	ldr	r3, [sp, #4]
    1dba:	f003 021f 	and.w	r2, r3, #31
    1dbe:	4906      	ldr	r1, [pc, #24]	; (1dd8 <IntCtrl_Ip_ClearPendingPrivileged+0x24>)
    1dc0:	9b01      	ldr	r3, [sp, #4]
    1dc2:	095b      	lsrs	r3, r3, #5
    1dc4:	2001      	movs	r0, #1
    1dc6:	fa00 f202 	lsl.w	r2, r0, r2
    1dca:	3360      	adds	r3, #96	; 0x60
    1dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
    1dd0:	bf00      	nop
    1dd2:	b002      	add	sp, #8
    1dd4:	4770      	bx	lr
    1dd6:	bf00      	nop
    1dd8:	e000e100 	.word	0xe000e100

00001ddc <IntCtrl_Ip_Init>:
 * @internal
 * @brief         Initializes the configured interrupts at interrupt controller level.
 * @implements    IntCtrl_Ip_Init_Activity
 */
IntCtrl_Ip_StatusType IntCtrl_Ip_Init(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    1ddc:	b500      	push	{lr}
    1dde:	b085      	sub	sp, #20
    1de0:	9001      	str	r0, [sp, #4]
#if (INT_CTRL_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(pIntCtrlCtrlConfig != NULL_PTR);
    DevAssert(pIntCtrlCtrlConfig->u32ConfigIrqCount <= INT_CTRL_IP_IRQ_COUNT);
#endif
    uint32 irqIdx;
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1de2:	2300      	movs	r3, #0
    1de4:	9303      	str	r3, [sp, #12]
    1de6:	e05d      	b.n	1ea4 <IntCtrl_Ip_Init+0xc8>
    {
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1de8:	9b01      	ldr	r3, [sp, #4]
    1dea:	6859      	ldr	r1, [r3, #4]
    1dec:	9a03      	ldr	r2, [sp, #12]
    1dee:	4613      	mov	r3, r2
    1df0:	005b      	lsls	r3, r3, #1
    1df2:	4413      	add	r3, r2
    1df4:	009b      	lsls	r3, r3, #2
    1df6:	440b      	add	r3, r1
    1df8:	681b      	ldr	r3, [r3, #0]
    1dfa:	4618      	mov	r0, r3
    1dfc:	f000 f899 	bl	1f32 <IntCtrl_Ip_ClearPending>
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1e00:	9b01      	ldr	r3, [sp, #4]
    1e02:	6859      	ldr	r1, [r3, #4]
    1e04:	9a03      	ldr	r2, [sp, #12]
    1e06:	4613      	mov	r3, r2
    1e08:	005b      	lsls	r3, r3, #1
    1e0a:	4413      	add	r3, r2
    1e0c:	009b      	lsls	r3, r3, #2
    1e0e:	440b      	add	r3, r1
    1e10:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    1e12:	9b01      	ldr	r3, [sp, #4]
    1e14:	6859      	ldr	r1, [r3, #4]
    1e16:	9a03      	ldr	r2, [sp, #12]
    1e18:	4613      	mov	r3, r2
    1e1a:	005b      	lsls	r3, r3, #1
    1e1c:	4413      	add	r3, r2
    1e1e:	009b      	lsls	r3, r3, #2
    1e20:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1e22:	795b      	ldrb	r3, [r3, #5]
    1e24:	4619      	mov	r1, r3
    1e26:	f000 f869 	bl	1efc <IntCtrl_Ip_SetPriority>

        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1e2a:	9b01      	ldr	r3, [sp, #4]
    1e2c:	6859      	ldr	r1, [r3, #4]
    1e2e:	9a03      	ldr	r2, [sp, #12]
    1e30:	4613      	mov	r3, r2
    1e32:	005b      	lsls	r3, r3, #1
    1e34:	4413      	add	r3, r2
    1e36:	009b      	lsls	r3, r3, #2
    1e38:	440b      	add	r3, r1
    1e3a:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    1e3c:	9b01      	ldr	r3, [sp, #4]
    1e3e:	6859      	ldr	r1, [r3, #4]
    1e40:	9a03      	ldr	r2, [sp, #12]
    1e42:	4613      	mov	r3, r2
    1e44:	005b      	lsls	r3, r3, #1
    1e46:	4413      	add	r3, r2
    1e48:	009b      	lsls	r3, r3, #2
    1e4a:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    1e4c:	689b      	ldr	r3, [r3, #8]
    1e4e:	2200      	movs	r2, #0
    1e50:	4619      	mov	r1, r3
    1e52:	f000 f831 	bl	1eb8 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    1e56:	9b01      	ldr	r3, [sp, #4]
    1e58:	6859      	ldr	r1, [r3, #4]
    1e5a:	9a03      	ldr	r2, [sp, #12]
    1e5c:	4613      	mov	r3, r2
    1e5e:	005b      	lsls	r3, r3, #1
    1e60:	4413      	add	r3, r2
    1e62:	009b      	lsls	r3, r3, #2
    1e64:	440b      	add	r3, r1
    1e66:	791b      	ldrb	r3, [r3, #4]
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d00c      	beq.n	1e86 <IntCtrl_Ip_Init+0xaa>
        {
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1e6c:	9b01      	ldr	r3, [sp, #4]
    1e6e:	6859      	ldr	r1, [r3, #4]
    1e70:	9a03      	ldr	r2, [sp, #12]
    1e72:	4613      	mov	r3, r2
    1e74:	005b      	lsls	r3, r3, #1
    1e76:	4413      	add	r3, r2
    1e78:	009b      	lsls	r3, r3, #2
    1e7a:	440b      	add	r3, r1
    1e7c:	681b      	ldr	r3, [r3, #0]
    1e7e:	4618      	mov	r0, r3
    1e80:	f000 f828 	bl	1ed4 <IntCtrl_Ip_EnableIrq>
    1e84:	e00b      	b.n	1e9e <IntCtrl_Ip_Init+0xc2>
        }
        else
        {
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    1e86:	9b01      	ldr	r3, [sp, #4]
    1e88:	6859      	ldr	r1, [r3, #4]
    1e8a:	9a03      	ldr	r2, [sp, #12]
    1e8c:	4613      	mov	r3, r2
    1e8e:	005b      	lsls	r3, r3, #1
    1e90:	4413      	add	r3, r2
    1e92:	009b      	lsls	r3, r3, #2
    1e94:	440b      	add	r3, r1
    1e96:	681b      	ldr	r3, [r3, #0]
    1e98:	4618      	mov	r0, r3
    1e9a:	f000 f825 	bl	1ee8 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    1e9e:	9b03      	ldr	r3, [sp, #12]
    1ea0:	3301      	adds	r3, #1
    1ea2:	9303      	str	r3, [sp, #12]
    1ea4:	9b01      	ldr	r3, [sp, #4]
    1ea6:	681b      	ldr	r3, [r3, #0]
    1ea8:	9a03      	ldr	r2, [sp, #12]
    1eaa:	429a      	cmp	r2, r3
    1eac:	d39c      	bcc.n	1de8 <IntCtrl_Ip_Init+0xc>
        }
    }

    return INTCTRL_IP_STATUS_SUCCESS;
    1eae:	2300      	movs	r3, #0
}
    1eb0:	4618      	mov	r0, r3
    1eb2:	b005      	add	sp, #20
    1eb4:	f85d fb04 	ldr.w	pc, [sp], #4

00001eb8 <IntCtrl_Ip_InstallHandler>:
 * @implements    IntCtrl_Ip_InstallHandler_Activity
 */
void IntCtrl_Ip_InstallHandler(IRQn_Type eIrqNumber,
                               const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                               IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1eb8:	b500      	push	{lr}
    1eba:	b085      	sub	sp, #20
    1ebc:	9003      	str	r0, [sp, #12]
    1ebe:	9102      	str	r1, [sp, #8]
    1ec0:	9201      	str	r2, [sp, #4]
    Call_IntCtrl_Ip_InstallHandlerPrivileged(eIrqNumber,pfNewHandler,pfOldHandler);
    1ec2:	9a01      	ldr	r2, [sp, #4]
    1ec4:	9902      	ldr	r1, [sp, #8]
    1ec6:	9803      	ldr	r0, [sp, #12]
    1ec8:	f7ff fef8 	bl	1cbc <IntCtrl_Ip_InstallHandlerPrivileged>
}
    1ecc:	bf00      	nop
    1ece:	b005      	add	sp, #20
    1ed0:	f85d fb04 	ldr.w	pc, [sp], #4

00001ed4 <IntCtrl_Ip_EnableIrq>:
 * @internal
 * @brief         Enables an interrupt request.
 * @implements    IntCtrl_Ip_EnableIrq_Activity
 */
void IntCtrl_Ip_EnableIrq(IRQn_Type eIrqNumber)
{
    1ed4:	b500      	push	{lr}
    1ed6:	b083      	sub	sp, #12
    1ed8:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_EnableIrqPrivileged(eIrqNumber);
    1eda:	9801      	ldr	r0, [sp, #4]
    1edc:	f7ff ff10 	bl	1d00 <IntCtrl_Ip_EnableIrqPrivileged>
}
    1ee0:	bf00      	nop
    1ee2:	b003      	add	sp, #12
    1ee4:	f85d fb04 	ldr.w	pc, [sp], #4

00001ee8 <IntCtrl_Ip_DisableIrq>:
 * @internal
 * @brief         Disables an interrupt request.
 * @implements    IntCtrl_Ip_DisableIrq_Activity
 */
void IntCtrl_Ip_DisableIrq(IRQn_Type eIrqNumber)
{
    1ee8:	b500      	push	{lr}
    1eea:	b083      	sub	sp, #12
    1eec:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_DisableIrqPrivileged(eIrqNumber);
    1eee:	9801      	ldr	r0, [sp, #4]
    1ef0:	f7ff ff18 	bl	1d24 <IntCtrl_Ip_DisableIrqPrivileged>
}
    1ef4:	bf00      	nop
    1ef6:	b003      	add	sp, #12
    1ef8:	f85d fb04 	ldr.w	pc, [sp], #4

00001efc <IntCtrl_Ip_SetPriority>:
 * @internal
 * @brief         Sets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_SetPriority_Activity
 */
void IntCtrl_Ip_SetPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1efc:	b500      	push	{lr}
    1efe:	b083      	sub	sp, #12
    1f00:	9001      	str	r0, [sp, #4]
    1f02:	460b      	mov	r3, r1
    1f04:	f88d 3003 	strb.w	r3, [sp, #3]
    Call_IntCtrl_Ip_SetPriorityPrivileged(eIrqNumber,u8Priority);
    1f08:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1f0c:	4619      	mov	r1, r3
    1f0e:	9801      	ldr	r0, [sp, #4]
    1f10:	f7ff ff1c 	bl	1d4c <IntCtrl_Ip_SetPriorityPrivileged>
}
    1f14:	bf00      	nop
    1f16:	b003      	add	sp, #12
    1f18:	f85d fb04 	ldr.w	pc, [sp], #4

00001f1c <IntCtrl_Ip_GetPriority>:
 * @internal
 * @brief         Gets the priority for an interrupt request.
 * @implements    IntCtrl_Ip_GetPriority_Activity
 */
uint8 IntCtrl_Ip_GetPriority(IRQn_Type eIrqNumber)
{
    1f1c:	b500      	push	{lr}
    1f1e:	b083      	sub	sp, #12
    1f20:	9001      	str	r0, [sp, #4]
    return (uint8)Call_IntCtrl_Ip_GetPriorityPrivileged(eIrqNumber);
    1f22:	9801      	ldr	r0, [sp, #4]
    1f24:	f7ff ff2c 	bl	1d80 <IntCtrl_Ip_GetPriorityPrivileged>
    1f28:	4603      	mov	r3, r0
}
    1f2a:	4618      	mov	r0, r3
    1f2c:	b003      	add	sp, #12
    1f2e:	f85d fb04 	ldr.w	pc, [sp], #4

00001f32 <IntCtrl_Ip_ClearPending>:
 * @internal
 * @brief         Clears the pending flag for an interrupt request.
 * @implements    IntCtrl_Ip_ClearPending_Activity
 */
void IntCtrl_Ip_ClearPending(IRQn_Type eIrqNumber)
{
    1f32:	b500      	push	{lr}
    1f34:	b083      	sub	sp, #12
    1f36:	9001      	str	r0, [sp, #4]
    Call_IntCtrl_Ip_ClearPendingPrivileged(eIrqNumber);
    1f38:	9801      	ldr	r0, [sp, #4]
    1f3a:	f7ff ff3b 	bl	1db4 <IntCtrl_Ip_ClearPendingPrivileged>
}
    1f3e:	bf00      	nop
    1f40:	b003      	add	sp, #12
    1f42:	f85d fb04 	ldr.w	pc, [sp], #4
    1f46:	bf00      	nop

00001f48 <Platform_Ipw_SetIrq>:
/**
 * @internal
 * @brief         Enables/disables an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1f48:	b500      	push	{lr}
    1f4a:	b083      	sub	sp, #12
    1f4c:	9001      	str	r0, [sp, #4]
    1f4e:	460b      	mov	r3, r1
    1f50:	f88d 3003 	strb.w	r3, [sp, #3]
    if (bEnable)
    1f54:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d003      	beq.n	1f64 <Platform_Ipw_SetIrq+0x1c>
    {
        IntCtrl_Ip_EnableIrq(eIrqNumber);
    1f5c:	9801      	ldr	r0, [sp, #4]
    1f5e:	f7ff ffb9 	bl	1ed4 <IntCtrl_Ip_EnableIrq>
    }
    else
    {
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    }
}
    1f62:	e002      	b.n	1f6a <Platform_Ipw_SetIrq+0x22>
        IntCtrl_Ip_DisableIrq(eIrqNumber);
    1f64:	9801      	ldr	r0, [sp, #4]
    1f66:	f7ff ffbf 	bl	1ee8 <IntCtrl_Ip_DisableIrq>
}
    1f6a:	bf00      	nop
    1f6c:	b003      	add	sp, #12
    1f6e:	f85d fb04 	ldr.w	pc, [sp], #4

00001f72 <Platform_Ipw_SetIrqPriority>:
/**
 * @internal
 * @brief         Sets the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    1f72:	b500      	push	{lr}
    1f74:	b083      	sub	sp, #12
    1f76:	9001      	str	r0, [sp, #4]
    1f78:	460b      	mov	r3, r1
    1f7a:	f88d 3003 	strb.w	r3, [sp, #3]
    IntCtrl_Ip_SetPriority(eIrqNumber, u8Priority);
    1f7e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1f82:	4619      	mov	r1, r3
    1f84:	9801      	ldr	r0, [sp, #4]
    1f86:	f7ff ffb9 	bl	1efc <IntCtrl_Ip_SetPriority>
}
    1f8a:	bf00      	nop
    1f8c:	b003      	add	sp, #12
    1f8e:	f85d fb04 	ldr.w	pc, [sp], #4

00001f92 <Platform_Ipw_GetIrqPriority>:
/**
 * @internal
 * @brief         Returns the priority of an interrupt by calling the Interrupt Controller IP layer.
 */
static inline uint8 Platform_Ipw_GetIrqPriority(IRQn_Type eIrqNumber)
{
    1f92:	b500      	push	{lr}
    1f94:	b083      	sub	sp, #12
    1f96:	9001      	str	r0, [sp, #4]
    return IntCtrl_Ip_GetPriority(eIrqNumber);
    1f98:	9801      	ldr	r0, [sp, #4]
    1f9a:	f7ff ffbf 	bl	1f1c <IntCtrl_Ip_GetPriority>
    1f9e:	4603      	mov	r3, r0
}
    1fa0:	4618      	mov	r0, r3
    1fa2:	b003      	add	sp, #12
    1fa4:	f85d fb04 	ldr.w	pc, [sp], #4

00001fa8 <Platform_Ipw_InstallIrqHandler>:
 * @brief         Installs a new interrupt handler by calling the Interrupt Controller IP layer.
 */
static inline void Platform_Ipw_InstallIrqHandler(IRQn_Type eIrqNumber,
                                                  const IntCtrl_Ip_IrqHandlerType pfNewHandler,
                                                  IntCtrl_Ip_IrqHandlerType* const pfOldHandler)
{
    1fa8:	b500      	push	{lr}
    1faa:	b085      	sub	sp, #20
    1fac:	9003      	str	r0, [sp, #12]
    1fae:	9102      	str	r1, [sp, #8]
    1fb0:	9201      	str	r2, [sp, #4]
    IntCtrl_Ip_InstallHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    1fb2:	9a01      	ldr	r2, [sp, #4]
    1fb4:	9902      	ldr	r1, [sp, #8]
    1fb6:	9803      	ldr	r0, [sp, #12]
    1fb8:	f7ff ff7e 	bl	1eb8 <IntCtrl_Ip_InstallHandler>
}
    1fbc:	bf00      	nop
    1fbe:	b005      	add	sp, #20
    1fc0:	f85d fb04 	ldr.w	pc, [sp], #4

00001fc4 <Platform_Init>:
 * @internal
 * @brief         Initializes the platform settings based on user configuration.
 * @implements    Platform_Init_Activity
 */
void Platform_Init(const Platform_ConfigType *pConfig)
{
    1fc4:	b500      	push	{lr}
    1fc6:	b085      	sub	sp, #20
    1fc8:	9001      	str	r0, [sp, #4]
    uint8 u8CoreId;

    u8CoreId = (uint8)Platform_GetCoreID();
    1fca:	2300      	movs	r3, #0
    1fcc:	f88d 300f 	strb.w	r3, [sp, #15]
        {
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
#endif /*(PLATFORM_DEV_ERROR_DETECT == STD_ON)*/


            Platform_Ipw_Init(Platform_Config[u8CoreId]->pIpwConfig);
    1fd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1fd4:	4a05      	ldr	r2, [pc, #20]	; (1fec <Platform_Init+0x28>)
    1fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1fda:	681b      	ldr	r3, [r3, #0]
    1fdc:	4618      	mov	r0, r3
    1fde:	f000 f8c7 	bl	2170 <Platform_Ipw_Init>
        }
#endif /*(PLATFORM_MULTICORE_SUPPORT == STD_ON)*/
    }
#endif /* (PLATFORM_DEV_ERROR_DETECT == STD_ON)*/

}
    1fe2:	bf00      	nop
    1fe4:	b005      	add	sp, #20
    1fe6:	f85d fb04 	ldr.w	pc, [sp], #4
    1fea:	bf00      	nop
    1fec:	000107e4 	.word	0x000107e4

00001ff0 <Platform_SetIrq>:
 * @internal
 * @brief         Configures (enables/disables) an interrupt request.
 * @implements    Platform_SetIrq_Activity
 */
Std_ReturnType Platform_SetIrq(IRQn_Type eIrqNumber, boolean bEnable)
{
    1ff0:	b500      	push	{lr}
    1ff2:	b085      	sub	sp, #20
    1ff4:	9001      	str	r0, [sp, #4]
    1ff6:	460b      	mov	r3, r1
    1ff8:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    1ffc:	2300      	movs	r3, #0
    1ffe:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrq(eIrqNumber, bEnable);
    2002:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2006:	4619      	mov	r1, r3
    2008:	9801      	ldr	r0, [sp, #4]
    200a:	f7ff ff9d 	bl	1f48 <Platform_Ipw_SetIrq>
    }
    return RetValue;
    200e:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2012:	4618      	mov	r0, r3
    2014:	b005      	add	sp, #20
    2016:	f85d fb04 	ldr.w	pc, [sp], #4

0000201a <Platform_SetIrqPriority>:
 * @internal
 * @brief         Configures the priority of an interrupt request.
 * @implements    Platform_SetIrqPriority_Activity
 */
Std_ReturnType Platform_SetIrqPriority(IRQn_Type eIrqNumber, uint8 u8Priority)
{
    201a:	b500      	push	{lr}
    201c:	b085      	sub	sp, #20
    201e:	9001      	str	r0, [sp, #4]
    2020:	460b      	mov	r3, r1
    2022:	f88d 3003 	strb.w	r3, [sp, #3]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2026:	2300      	movs	r3, #0
    2028:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_SetIrqPriority(eIrqNumber, u8Priority);
    202c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2030:	4619      	mov	r1, r3
    2032:	9801      	ldr	r0, [sp, #4]
    2034:	f7ff ff9d 	bl	1f72 <Platform_Ipw_SetIrqPriority>
    }
    return RetValue;
    2038:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    203c:	4618      	mov	r0, r3
    203e:	b005      	add	sp, #20
    2040:	f85d fb04 	ldr.w	pc, [sp], #4

00002044 <Platform_GetIrqPriority>:
 * @internal
 * @brief         Returns the priority of an interrupt request.
 * @implements    Platform_GetIrqPriority_Activity
 */
Std_ReturnType Platform_GetIrqPriority(IRQn_Type eIrqNumber, uint8 * u8Priority)
{
    2044:	b500      	push	{lr}
    2046:	b085      	sub	sp, #20
    2048:	9001      	str	r0, [sp, #4]
    204a:	9100      	str	r1, [sp, #0]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    204c:	2300      	movs	r3, #0
    204e:	f88d 300f 	strb.w	r3, [sp, #15]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        *u8Priority = Platform_Ipw_GetIrqPriority(eIrqNumber);
    2052:	9801      	ldr	r0, [sp, #4]
    2054:	f7ff ff9d 	bl	1f92 <Platform_Ipw_GetIrqPriority>
    2058:	4603      	mov	r3, r0
    205a:	461a      	mov	r2, r3
    205c:	9b00      	ldr	r3, [sp, #0]
    205e:	701a      	strb	r2, [r3, #0]
    }

    return RetValue;
    2060:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    2064:	4618      	mov	r0, r3
    2066:	b005      	add	sp, #20
    2068:	f85d fb04 	ldr.w	pc, [sp], #4

0000206c <Platform_InstallIrqHandler>:
 * @implements    Platform_InstallIrqHandler_Activity
 */
Std_ReturnType Platform_InstallIrqHandler(IRQn_Type eIrqNumber,
                                          const Platform_IrqHandlerType pfNewHandler,
                                          Platform_IrqHandlerType* const pfOldHandler)
{
    206c:	b500      	push	{lr}
    206e:	b087      	sub	sp, #28
    2070:	9003      	str	r0, [sp, #12]
    2072:	9102      	str	r1, [sp, #8]
    2074:	9201      	str	r2, [sp, #4]
    Std_ReturnType RetValue = (Std_ReturnType)E_OK;
    2076:	2300      	movs	r3, #0
    2078:	f88d 3017 	strb.w	r3, [sp, #23]
        RetValue = (Std_ReturnType)E_NOT_OK;
    }
    else
#endif
    {
        Platform_Ipw_InstallIrqHandler(eIrqNumber, pfNewHandler, pfOldHandler);
    207c:	9a01      	ldr	r2, [sp, #4]
    207e:	9902      	ldr	r1, [sp, #8]
    2080:	9803      	ldr	r0, [sp, #12]
    2082:	f7ff ff91 	bl	1fa8 <Platform_Ipw_InstallIrqHandler>
    }
    return RetValue;
    2086:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    208a:	4618      	mov	r0, r3
    208c:	b007      	add	sp, #28
    208e:	f85d fb04 	ldr.w	pc, [sp], #4
    2092:	bf00      	nop

00002094 <Platform_Ipw_InitIntCtrl>:
#endif



static Std_ReturnType Platform_Ipw_InitIntCtrl(const IntCtrl_Ip_CtrlConfigType *pIntCtrlCtrlConfig)
{
    2094:	b500      	push	{lr}
    2096:	b085      	sub	sp, #20
    2098:	9001      	str	r0, [sp, #4]
    uint32 irqIdx;
    
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    209a:	2300      	movs	r3, #0
    209c:	9303      	str	r3, [sp, #12]
    209e:	e05d      	b.n	215c <Platform_Ipw_InitIntCtrl+0xc8>
    {   
        IntCtrl_Ip_ClearPending(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    20a0:	9b01      	ldr	r3, [sp, #4]
    20a2:	6859      	ldr	r1, [r3, #4]
    20a4:	9a03      	ldr	r2, [sp, #12]
    20a6:	4613      	mov	r3, r2
    20a8:	005b      	lsls	r3, r3, #1
    20aa:	4413      	add	r3, r2
    20ac:	009b      	lsls	r3, r3, #2
    20ae:	440b      	add	r3, r1
    20b0:	681b      	ldr	r3, [r3, #0]
    20b2:	4618      	mov	r0, r3
    20b4:	f7ff ff3d 	bl	1f32 <IntCtrl_Ip_ClearPending>
        /* interrupt number for which the priority is set */
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    20b8:	9b01      	ldr	r3, [sp, #4]
    20ba:	6859      	ldr	r1, [r3, #4]
    20bc:	9a03      	ldr	r2, [sp, #12]
    20be:	4613      	mov	r3, r2
    20c0:	005b      	lsls	r3, r3, #1
    20c2:	4413      	add	r3, r2
    20c4:	009b      	lsls	r3, r3, #2
    20c6:	440b      	add	r3, r1
    20c8:	6818      	ldr	r0, [r3, #0]
                               pIntCtrlCtrlConfig->aIrqConfig[irqIdx].u8IrqPriority);
    20ca:	9b01      	ldr	r3, [sp, #4]
    20cc:	6859      	ldr	r1, [r3, #4]
    20ce:	9a03      	ldr	r2, [sp, #12]
    20d0:	4613      	mov	r3, r2
    20d2:	005b      	lsls	r3, r3, #1
    20d4:	4413      	add	r3, r2
    20d6:	009b      	lsls	r3, r3, #2
    20d8:	440b      	add	r3, r1
        IntCtrl_Ip_SetPriority(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    20da:	795b      	ldrb	r3, [r3, #5]
    20dc:	4619      	mov	r1, r3
    20de:	f7ff ff0d 	bl	1efc <IntCtrl_Ip_SetPriority>
        /* Install the configured handler */
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    20e2:	9b01      	ldr	r3, [sp, #4]
    20e4:	6859      	ldr	r1, [r3, #4]
    20e6:	9a03      	ldr	r2, [sp, #12]
    20e8:	4613      	mov	r3, r2
    20ea:	005b      	lsls	r3, r3, #1
    20ec:	4413      	add	r3, r2
    20ee:	009b      	lsls	r3, r3, #2
    20f0:	440b      	add	r3, r1
    20f2:	6818      	ldr	r0, [r3, #0]
                                  pIntCtrlCtrlConfig->aIrqConfig[irqIdx].pfHandler,
    20f4:	9b01      	ldr	r3, [sp, #4]
    20f6:	6859      	ldr	r1, [r3, #4]
    20f8:	9a03      	ldr	r2, [sp, #12]
    20fa:	4613      	mov	r3, r2
    20fc:	005b      	lsls	r3, r3, #1
    20fe:	4413      	add	r3, r2
    2100:	009b      	lsls	r3, r3, #2
    2102:	440b      	add	r3, r1
        IntCtrl_Ip_InstallHandler(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber,
    2104:	689b      	ldr	r3, [r3, #8]
    2106:	2200      	movs	r2, #0
    2108:	4619      	mov	r1, r3
    210a:	f7ff fed5 	bl	1eb8 <IntCtrl_Ip_InstallHandler>
                                  NULL_PTR);

        /* Enable interrupt */                       
        if (pIntCtrlCtrlConfig->aIrqConfig[irqIdx].bIrqEnabled)
    210e:	9b01      	ldr	r3, [sp, #4]
    2110:	6859      	ldr	r1, [r3, #4]
    2112:	9a03      	ldr	r2, [sp, #12]
    2114:	4613      	mov	r3, r2
    2116:	005b      	lsls	r3, r3, #1
    2118:	4413      	add	r3, r2
    211a:	009b      	lsls	r3, r3, #2
    211c:	440b      	add	r3, r1
    211e:	791b      	ldrb	r3, [r3, #4]
    2120:	2b00      	cmp	r3, #0
    2122:	d00c      	beq.n	213e <Platform_Ipw_InitIntCtrl+0xaa>
        {   
            /* enables the interrupt request at interrupt controller level. */
            IntCtrl_Ip_EnableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    2124:	9b01      	ldr	r3, [sp, #4]
    2126:	6859      	ldr	r1, [r3, #4]
    2128:	9a03      	ldr	r2, [sp, #12]
    212a:	4613      	mov	r3, r2
    212c:	005b      	lsls	r3, r3, #1
    212e:	4413      	add	r3, r2
    2130:	009b      	lsls	r3, r3, #2
    2132:	440b      	add	r3, r1
    2134:	681b      	ldr	r3, [r3, #0]
    2136:	4618      	mov	r0, r3
    2138:	f7ff fecc 	bl	1ed4 <IntCtrl_Ip_EnableIrq>
    213c:	e00b      	b.n	2156 <Platform_Ipw_InitIntCtrl+0xc2>
        }
        else
        {   
            /* disables the interrupt request at interrupt controller level.*/
            IntCtrl_Ip_DisableIrq(pIntCtrlCtrlConfig->aIrqConfig[irqIdx].eIrqNumber);
    213e:	9b01      	ldr	r3, [sp, #4]
    2140:	6859      	ldr	r1, [r3, #4]
    2142:	9a03      	ldr	r2, [sp, #12]
    2144:	4613      	mov	r3, r2
    2146:	005b      	lsls	r3, r3, #1
    2148:	4413      	add	r3, r2
    214a:	009b      	lsls	r3, r3, #2
    214c:	440b      	add	r3, r1
    214e:	681b      	ldr	r3, [r3, #0]
    2150:	4618      	mov	r0, r3
    2152:	f7ff fec9 	bl	1ee8 <IntCtrl_Ip_DisableIrq>
    for (irqIdx = 0; irqIdx < pIntCtrlCtrlConfig->u32ConfigIrqCount; irqIdx++)
    2156:	9b03      	ldr	r3, [sp, #12]
    2158:	3301      	adds	r3, #1
    215a:	9303      	str	r3, [sp, #12]
    215c:	9b01      	ldr	r3, [sp, #4]
    215e:	681b      	ldr	r3, [r3, #0]
    2160:	9a03      	ldr	r2, [sp, #12]
    2162:	429a      	cmp	r2, r3
    2164:	d39c      	bcc.n	20a0 <Platform_Ipw_InitIntCtrl+0xc>
        }
    }

    return E_OK;
    2166:	2300      	movs	r3, #0
}
    2168:	4618      	mov	r0, r3
    216a:	b005      	add	sp, #20
    216c:	f85d fb04 	ldr.w	pc, [sp], #4

00002170 <Platform_Ipw_Init>:

/**
 * @brief         Initializes the platform settings based on user configuration.
 */
void Platform_Ipw_Init(const Platform_Ipw_ConfigType *pConfig)
{    
    2170:	b500      	push	{lr}
    2172:	b085      	sub	sp, #20
    2174:	9001      	str	r0, [sp, #4]
#if ((PLATFORM_SYS_CFG == STD_ON)&&(INT_CTRL_IP_CORTEXM == STD_ON))
    uint8 irqIdx;
#endif
    Std_ReturnType ret = (Std_ReturnType)E_OK;
    2176:	2300      	movs	r3, #0
    2178:	f88d 300f 	strb.w	r3, [sp, #15]

    /* Initialize interrupts at interrupt controller level */
    if (NULL_PTR != pConfig->pIntCtrlConfig)
    217c:	9b01      	ldr	r3, [sp, #4]
    217e:	681b      	ldr	r3, [r3, #0]
    2180:	2b00      	cmp	r3, #0
    2182:	d007      	beq.n	2194 <Platform_Ipw_Init+0x24>
    {
        ret = Platform_Ipw_InitIntCtrl(pConfig->pIntCtrlConfig);
    2184:	9b01      	ldr	r3, [sp, #4]
    2186:	681b      	ldr	r3, [r3, #0]
    2188:	4618      	mov	r0, r3
    218a:	f7ff ff83 	bl	2094 <Platform_Ipw_InitIntCtrl>
    218e:	4603      	mov	r3, r0
    2190:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    if(ret == (Std_ReturnType)E_OK)
    2194:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2198:	2b00      	cmp	r3, #0
            /* Call_System_Ip_SetAhbSlavePriority((pConfig->aSystemConfig)->bAhbSlavePriority); */
#endif
        }  
#endif
    }
}
    219a:	bf00      	nop
    219c:	b005      	add	sp, #20
    219e:	f85d fb04 	ldr.w	pc, [sp], #4

000021a2 <OsIf_Timer_Dummy_GetCounter>:
 * Description   : Get counter value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetCounter(void)
{
    return 0U;
    21a2:	2300      	movs	r3, #0
}
    21a4:	4618      	mov	r0, r3
    21a6:	4770      	bx	lr

000021a8 <OsIf_Timer_Dummy_GetElapsed>:
 * Function Name : OsIf_Timer_Dummy_GetElapsed.
 * Description   : Get elapsed value.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_GetElapsed(const uint32 * const CurrentRef)
{
    21a8:	b082      	sub	sp, #8
    21aa:	9001      	str	r0, [sp, #4]
    (void)CurrentRef;
    return 1U;
    21ac:	2301      	movs	r3, #1
}
    21ae:	4618      	mov	r0, r3
    21b0:	b002      	add	sp, #8
    21b2:	4770      	bx	lr

000021b4 <OsIf_Timer_Dummy_SetTimerFrequency>:
 * Function Name : OsIf_Timer_Dummy_SetTimerFrequency.
 * Description   : Set timer frequency.
 * 
 *END**************************************************************************/
static inline void OsIf_Timer_Dummy_SetTimerFrequency(uint32 Freq)
{
    21b4:	b082      	sub	sp, #8
    21b6:	9001      	str	r0, [sp, #4]
    (void)Freq;
}
    21b8:	bf00      	nop
    21ba:	b002      	add	sp, #8
    21bc:	4770      	bx	lr

000021be <OsIf_Timer_Dummy_MicrosToTicks>:
 * Function Name : OsIf_Timer_Dummy_MicrosToTicks.
 * Description   : Convert micro second to ticks.
 * 
 *END**************************************************************************/
static inline uint32 OsIf_Timer_Dummy_MicrosToTicks(uint32 Micros)
{
    21be:	b082      	sub	sp, #8
    21c0:	9001      	str	r0, [sp, #4]
    return Micros;
    21c2:	9b01      	ldr	r3, [sp, #4]
}
    21c4:	4618      	mov	r0, r3
    21c6:	b002      	add	sp, #8
    21c8:	4770      	bx	lr

000021ca <OsIf_Init>:
 * Description   : OsIf initialization.
 * @implements OsIf_Init_Activity
 * 
 *END**************************************************************************/
void OsIf_Init(const void* Config)
{
    21ca:	b500      	push	{lr}
    21cc:	b083      	sub	sp, #12
    21ce:	9001      	str	r0, [sp, #4]
#else
    (void)Config;
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */

#if (OSIF_USE_SYSTEM_TIMER == STD_ON)
    OsIf_Timer_System_Init();
    21d0:	f000 f86c 	bl	22ac <OsIf_Timer_System_Init>
#endif /* (OSIF_USE_SYSTEM_TIMER == STD_ON) */
#if (OSIF_USE_CUSTOM_TIMER == STD_ON)
    OsIf_Timer_Custom_Init();
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
}
    21d4:	bf00      	nop
    21d6:	b003      	add	sp, #12
    21d8:	f85d fb04 	ldr.w	pc, [sp], #4

000021dc <OsIf_GetCounter>:
 * Description   : Get counter value.
 * @implements OsIf_GetCounter_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetCounter(OsIf_CounterType SelectedCounter)
{
    21dc:	b500      	push	{lr}
    21de:	b085      	sub	sp, #20
    21e0:	9001      	str	r0, [sp, #4]
    uint32 Value = 0U;
    21e2:	2300      	movs	r3, #0
    21e4:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    21e6:	9b01      	ldr	r3, [sp, #4]
    21e8:	2b00      	cmp	r3, #0
    21ea:	d003      	beq.n	21f4 <OsIf_GetCounter+0x18>
    21ec:	9b01      	ldr	r3, [sp, #4]
    21ee:	2b01      	cmp	r3, #1
    21f0:	d004      	beq.n	21fc <OsIf_GetCounter+0x20>
            Value = OsIf_Timer_Custom_GetCounter();
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    21f2:	e007      	b.n	2204 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_Dummy_GetCounter();
    21f4:	f7ff ffd5 	bl	21a2 <OsIf_Timer_Dummy_GetCounter>
    21f8:	9003      	str	r0, [sp, #12]
            break;
    21fa:	e003      	b.n	2204 <OsIf_GetCounter+0x28>
            Value = OsIf_Timer_System_GetCounter();
    21fc:	f000 f872 	bl	22e4 <OsIf_Timer_System_GetCounter>
    2200:	9003      	str	r0, [sp, #12]
            break;
    2202:	bf00      	nop
    }

    return Value;
    2204:	9b03      	ldr	r3, [sp, #12]
}
    2206:	4618      	mov	r0, r3
    2208:	b005      	add	sp, #20
    220a:	f85d fb04 	ldr.w	pc, [sp], #4

0000220e <OsIf_GetElapsed>:
 * Description   : Get elapsed value.
 * @implements OsIf_GetElapsed_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_GetElapsed(uint32 * const CurrentRef, OsIf_CounterType SelectedCounter)
{
    220e:	b500      	push	{lr}
    2210:	b085      	sub	sp, #20
    2212:	9001      	str	r0, [sp, #4]
    2214:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    2216:	2300      	movs	r3, #0
    2218:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    221a:	9b00      	ldr	r3, [sp, #0]
    221c:	2b00      	cmp	r3, #0
    221e:	d003      	beq.n	2228 <OsIf_GetElapsed+0x1a>
    2220:	9b00      	ldr	r3, [sp, #0]
    2222:	2b01      	cmp	r3, #1
    2224:	d005      	beq.n	2232 <OsIf_GetElapsed+0x24>
            Value = OsIf_Timer_Custom_GetElapsed(CurrentRef);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    2226:	e009      	b.n	223c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_Dummy_GetElapsed(CurrentRef);
    2228:	9801      	ldr	r0, [sp, #4]
    222a:	f7ff ffbd 	bl	21a8 <OsIf_Timer_Dummy_GetElapsed>
    222e:	9003      	str	r0, [sp, #12]
            break;
    2230:	e004      	b.n	223c <OsIf_GetElapsed+0x2e>
            Value = OsIf_Timer_System_GetElapsed(CurrentRef);
    2232:	9801      	ldr	r0, [sp, #4]
    2234:	f000 f864 	bl	2300 <OsIf_Timer_System_GetElapsed>
    2238:	9003      	str	r0, [sp, #12]
            break;
    223a:	bf00      	nop
    }

    return Value;
    223c:	9b03      	ldr	r3, [sp, #12]
}
    223e:	4618      	mov	r0, r3
    2240:	b005      	add	sp, #20
    2242:	f85d fb04 	ldr.w	pc, [sp], #4

00002246 <OsIf_SetTimerFrequency>:
 * @implements OsIf_SetTimerFrequency_Activity
 * 
 *END**************************************************************************/
/* @implements OsIf_SetTimerFrequency_Activity */
void OsIf_SetTimerFrequency(uint32 Freq, OsIf_CounterType SelectedCounter)
{
    2246:	b500      	push	{lr}
    2248:	b083      	sub	sp, #12
    224a:	9001      	str	r0, [sp, #4]
    224c:	9100      	str	r1, [sp, #0]
    switch (SelectedCounter){
    224e:	9b00      	ldr	r3, [sp, #0]
    2250:	2b00      	cmp	r3, #0
    2252:	d003      	beq.n	225c <OsIf_SetTimerFrequency+0x16>
    2254:	9b00      	ldr	r3, [sp, #0]
    2256:	2b01      	cmp	r3, #1
    2258:	d004      	beq.n	2264 <OsIf_SetTimerFrequency+0x1e>
            OsIf_Timer_Custom_SetTimerFrequency(Freq);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    225a:	e007      	b.n	226c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_Dummy_SetTimerFrequency(Freq);
    225c:	9801      	ldr	r0, [sp, #4]
    225e:	f7ff ffa9 	bl	21b4 <OsIf_Timer_Dummy_SetTimerFrequency>
            break;
    2262:	e003      	b.n	226c <OsIf_SetTimerFrequency+0x26>
            OsIf_Timer_System_SetTimerFrequency(Freq);
    2264:	9801      	ldr	r0, [sp, #4]
    2266:	f000 f85b 	bl	2320 <OsIf_Timer_System_SetTimerFrequency>
            break;
    226a:	bf00      	nop
    }
}
    226c:	bf00      	nop
    226e:	b003      	add	sp, #12
    2270:	f85d fb04 	ldr.w	pc, [sp], #4

00002274 <OsIf_MicrosToTicks>:
 * Description   : Convert micro second to ticks.
 * @implements OsIf_MicrosToTicks_Activity
 * 
 *END**************************************************************************/
uint32 OsIf_MicrosToTicks(uint32 Micros, OsIf_CounterType SelectedCounter)
{
    2274:	b500      	push	{lr}
    2276:	b085      	sub	sp, #20
    2278:	9001      	str	r0, [sp, #4]
    227a:	9100      	str	r1, [sp, #0]
    uint32 Value = 0U;
    227c:	2300      	movs	r3, #0
    227e:	9303      	str	r3, [sp, #12]

    switch (SelectedCounter){
    2280:	9b00      	ldr	r3, [sp, #0]
    2282:	2b00      	cmp	r3, #0
    2284:	d003      	beq.n	228e <OsIf_MicrosToTicks+0x1a>
    2286:	9b00      	ldr	r3, [sp, #0]
    2288:	2b01      	cmp	r3, #1
    228a:	d005      	beq.n	2298 <OsIf_MicrosToTicks+0x24>
            Value = OsIf_Timer_Custom_MicrosToTicks(Micros);
            break;
#endif /* (OSIF_USE_CUSTOM_TIMER == STD_ON) */
        default:
            /* impossible */
            break;
    228c:	e009      	b.n	22a2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_Dummy_MicrosToTicks(Micros);
    228e:	9801      	ldr	r0, [sp, #4]
    2290:	f7ff ff95 	bl	21be <OsIf_Timer_Dummy_MicrosToTicks>
    2294:	9003      	str	r0, [sp, #12]
            break;
    2296:	e004      	b.n	22a2 <OsIf_MicrosToTicks+0x2e>
            Value = OsIf_Timer_System_MicrosToTicks(Micros);
    2298:	9801      	ldr	r0, [sp, #4]
    229a:	f000 f84f 	bl	233c <OsIf_Timer_System_MicrosToTicks>
    229e:	9003      	str	r0, [sp, #12]
            break;
    22a0:	bf00      	nop
    }

    return Value;
    22a2:	9b03      	ldr	r3, [sp, #12]
}
    22a4:	4618      	mov	r0, r3
    22a6:	b005      	add	sp, #20
    22a8:	f85d fb04 	ldr.w	pc, [sp], #4

000022ac <OsIf_Timer_System_Init>:
 * Function Name : OsIf_Timer_System_Init.
 * Description   : Initialize system timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Init(void)
{
    22ac:	b500      	push	{lr}
    22ae:	b083      	sub	sp, #12
    uint32 CoreId = OsIfCoreID();
    22b0:	2300      	movs	r3, #0
    22b2:	9301      	str	r3, [sp, #4]

#if (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT))
    OsIf_apxInternalCfg[CoreId] = OsIf_apxPredefinedConfig[CoreId];
#endif /* (defined(USING_OS_AUTOSAROS) || (STD_ON == OSIF_DEV_ERROR_DETECT)) */
#if (!defined(USING_OS_FREERTOS) && !defined(USING_OS_ZEPHYR))
    OsIf_au32InternalFrequencies[CoreId] = OsIf_apxPredefinedConfig[CoreId]->counterFrequency;
    22b4:	4a09      	ldr	r2, [pc, #36]	; (22dc <OsIf_Timer_System_Init+0x30>)
    22b6:	9b01      	ldr	r3, [sp, #4]
    22b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    22bc:	685a      	ldr	r2, [r3, #4]
    22be:	4908      	ldr	r1, [pc, #32]	; (22e0 <OsIf_Timer_System_Init+0x34>)
    22c0:	9b01      	ldr	r3, [sp, #4]
    22c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#elif defined(USING_OS_ZEPHYR)
    /* ZephyrOS */
    OsIf_au32InternalFrequencies[CoreId] = sys_clock_hw_cycles_per_sec();
#elif defined(USING_OS_BAREMETAL)
    /* Baremetal */
    Trusted_OsIf_Timer_System_Internal_Init(OsIf_au32InternalFrequencies[CoreId]);
    22c6:	4a06      	ldr	r2, [pc, #24]	; (22e0 <OsIf_Timer_System_Init+0x34>)
    22c8:	9b01      	ldr	r3, [sp, #4]
    22ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    22ce:	4618      	mov	r0, r3
    22d0:	f000 f868 	bl	23a4 <OsIf_Timer_System_Internal_Init>
#endif
#if (STD_ON == OSIF_DEV_ERROR_DETECT)
    }
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT) */
}
    22d4:	bf00      	nop
    22d6:	b003      	add	sp, #12
    22d8:	f85d fb04 	ldr.w	pc, [sp], #4
    22dc:	000107dc 	.word	0x000107dc
    22e0:	1fff8b4c 	.word	0x1fff8b4c

000022e4 <OsIf_Timer_System_GetCounter>:
 * Function Name : OsIf_Timer_System_GetCounter.
 * Description   : Get counter value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetCounter(void)
{
    22e4:	b500      	push	{lr}
    22e6:	b083      	sub	sp, #12
    uint32 Counter = 0U;
    22e8:	2300      	movs	r3, #0
    22ea:	9301      	str	r3, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    22ec:	2300      	movs	r3, #0
    22ee:	9300      	str	r3, [sp, #0]
        (void)CoreId;
        Counter = Trusted_k_cycle_get_32();
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Counter = Trusted_OsIf_Timer_System_Internal_GetCounter();
    22f0:	f000 f86c 	bl	23cc <OsIf_Timer_System_Internal_GetCounter>
    22f4:	9001      	str	r0, [sp, #4]
#endif
    }

    return Counter;
    22f6:	9b01      	ldr	r3, [sp, #4]
}
    22f8:	4618      	mov	r0, r3
    22fa:	b003      	add	sp, #12
    22fc:	f85d fb04 	ldr.w	pc, [sp], #4

00002300 <OsIf_Timer_System_GetElapsed>:
 * Function Name : OsIf_Timer_System_GetElapsed.
 * Description   : Get elapsed value from system timer.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_GetElapsed(uint32 * const CurrentRef)
{
    2300:	b500      	push	{lr}
    2302:	b085      	sub	sp, #20
    2304:	9001      	str	r0, [sp, #4]
    uint32 Elapsed = 0U;
    2306:	2300      	movs	r3, #0
    2308:	9303      	str	r3, [sp, #12]
    uint32 CoreId = OsIfCoreID();
    230a:	2300      	movs	r3, #0
    230c:	9302      	str	r3, [sp, #8]
        *CurrentRef = CurrentVal;
        (void)CoreId;
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        (void)CoreId;
        Elapsed = Trusted_OsIf_Timer_System_Internal_GetElapsed(CurrentRef);
    230e:	9801      	ldr	r0, [sp, #4]
    2310:	f000 f864 	bl	23dc <OsIf_Timer_System_Internal_GetElapsed>
    2314:	9003      	str	r0, [sp, #12]
#endif
    }

    return Elapsed;
    2316:	9b03      	ldr	r3, [sp, #12]
}
    2318:	4618      	mov	r0, r3
    231a:	b005      	add	sp, #20
    231c:	f85d fb04 	ldr.w	pc, [sp], #4

00002320 <OsIf_Timer_System_SetTimerFrequency>:
 * Function Name : OsIf_Timer_System_SetTimerFrequency.
 * Description   : Set system timer frequency.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_SetTimerFrequency(uint32 Freq)
{
    2320:	b084      	sub	sp, #16
    2322:	9001      	str	r0, [sp, #4]
    uint32 CoreId = OsIfCoreID();
    2324:	2300      	movs	r3, #0
    2326:	9303      	str	r3, [sp, #12]
        (void)CoreId;
        (void)Freq;
        /* As of 2.6.0: "The frequency of this counter is required to be steady over time" */
#elif defined(USING_OS_FREERTOS) || defined(USING_OS_BAREMETAL)
        /* FreeRTOS and Baremetal*/
        OsIf_au32InternalFrequencies[CoreId] = Freq;
    2328:	4903      	ldr	r1, [pc, #12]	; (2338 <OsIf_Timer_System_SetTimerFrequency+0x18>)
    232a:	9b03      	ldr	r3, [sp, #12]
    232c:	9a01      	ldr	r2, [sp, #4]
    232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif
    }
}
    2332:	bf00      	nop
    2334:	b004      	add	sp, #16
    2336:	4770      	bx	lr
    2338:	1fff8b4c 	.word	0x1fff8b4c

0000233c <OsIf_Timer_System_MicrosToTicks>:
 * Function Name : OsIf_Timer_System_MicrosToTicks.
 * Description   : Convert micro second to ticks based on system timer frequency.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_MicrosToTicks(uint32 Micros)
{
    233c:	b5f0      	push	{r4, r5, r6, r7, lr}
    233e:	b087      	sub	sp, #28
    2340:	9001      	str	r0, [sp, #4]
    uint64 interim;
    uint32 ticks = 0U;
    2342:	2100      	movs	r1, #0
    2344:	9105      	str	r1, [sp, #20]
    uint32 CoreId = OsIfCoreID();
    2346:	2100      	movs	r1, #0
    2348:	9104      	str	r1, [sp, #16]
    #endif /* defined(USING_OS_AUTOSAROS) */
    }
    else
#endif /* (STD_ON == OSIF_DEV_ERROR_DETECT)  */
    {
        interim = Micros * (uint64)OsIf_au32InternalFrequencies[CoreId];
    234a:	9901      	ldr	r1, [sp, #4]
    234c:	2000      	movs	r0, #0
    234e:	460e      	mov	r6, r1
    2350:	4607      	mov	r7, r0
    2352:	4812      	ldr	r0, [pc, #72]	; (239c <OsIf_Timer_System_MicrosToTicks+0x60>)
    2354:	9904      	ldr	r1, [sp, #16]
    2356:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    235a:	2000      	movs	r0, #0
    235c:	460c      	mov	r4, r1
    235e:	4605      	mov	r5, r0
    2360:	fb04 f007 	mul.w	r0, r4, r7
    2364:	fb06 f105 	mul.w	r1, r6, r5
    2368:	4401      	add	r1, r0
    236a:	fba6 2304 	umull	r2, r3, r6, r4
    236e:	4419      	add	r1, r3
    2370:	460b      	mov	r3, r1
    2372:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2376:	e9cd 2302 	strd	r2, r3, [sp, #8]
        interim /= 1000000u;
    237a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    237e:	4a08      	ldr	r2, [pc, #32]	; (23a0 <OsIf_Timer_System_MicrosToTicks+0x64>)
    2380:	f04f 0300 	mov.w	r3, #0
    2384:	f7fe f90e 	bl	5a4 <__aeabi_uldivmod>
    2388:	4602      	mov	r2, r0
    238a:	460b      	mov	r3, r1
    238c:	e9cd 2302 	strd	r2, r3, [sp, #8]
        /* check that computed value fits in 32 bits */
        OSIF_DEV_ASSERT(interim <= 0xFFFFFFFFu);
        ticks = (uint32)(interim & 0xFFFFFFFFu);
    2390:	9b02      	ldr	r3, [sp, #8]
    2392:	9305      	str	r3, [sp, #20]
    }

    return ticks;
    2394:	9b05      	ldr	r3, [sp, #20]
}
    2396:	4618      	mov	r0, r3
    2398:	b007      	add	sp, #28
    239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    239c:	1fff8b4c 	.word	0x1fff8b4c
    23a0:	000f4240 	.word	0x000f4240

000023a4 <OsIf_Timer_System_Internal_Init>:
 * Function Name : OsIf_Timer_System_Internal_Init.
 * Description   : Initialize systick timer.
 * 
 *END**************************************************************************/
void OsIf_Timer_System_Internal_Init(uint32 SystemCounterFreq)
{
    23a4:	b082      	sub	sp, #8
    23a6:	9001      	str	r0, [sp, #4]
    (void)SystemCounterFreq;

    /* For Cortex-M0 devices the systick counter is initialized with an undefined
     value, so make sure to initialize it to 0 before starting */
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(0u);
    23a8:	4b07      	ldr	r3, [pc, #28]	; (23c8 <OsIf_Timer_System_Internal_Init+0x24>)
    23aa:	2200      	movs	r2, #0
    23ac:	601a      	str	r2, [r3, #0]
    S32_SysTick->RVR = S32_SysTick_RVR_RELOAD(SYSTICK_MAX);
    23ae:	4b06      	ldr	r3, [pc, #24]	; (23c8 <OsIf_Timer_System_Internal_Init+0x24>)
    23b0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    23b4:	605a      	str	r2, [r3, #4]
    S32_SysTick->CVR = S32_SysTick_CVR_CURRENT(0U);
    23b6:	4b04      	ldr	r3, [pc, #16]	; (23c8 <OsIf_Timer_System_Internal_Init+0x24>)
    23b8:	2200      	movs	r2, #0
    23ba:	609a      	str	r2, [r3, #8]
    S32_SysTick->CSRr = S32_SysTick_CSR_ENABLE(1u) | S32_SysTick_CSR_TICKINT(0u) | S32_SysTick_CSR_CLKSOURCE(1u);
    23bc:	4b02      	ldr	r3, [pc, #8]	; (23c8 <OsIf_Timer_System_Internal_Init+0x24>)
    23be:	2205      	movs	r2, #5
    23c0:	601a      	str	r2, [r3, #0]
}
    23c2:	bf00      	nop
    23c4:	b002      	add	sp, #8
    23c6:	4770      	bx	lr
    23c8:	e000e010 	.word	0xe000e010

000023cc <OsIf_Timer_System_Internal_GetCounter>:
 * Description   : Get systick counter value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetCounter(void)
{
    return SYSTICK_GET_COUNTER();
    23cc:	4b02      	ldr	r3, [pc, #8]	; (23d8 <OsIf_Timer_System_Internal_GetCounter+0xc>)
    23ce:	689b      	ldr	r3, [r3, #8]
    23d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
    23d4:	4618      	mov	r0, r3
    23d6:	4770      	bx	lr
    23d8:	e000e010 	.word	0xe000e010

000023dc <OsIf_Timer_System_Internal_GetElapsed>:
 * Function Name : OsIf_Timer_System_Internal_GetElapsed.
 * Description   : Get systick elapsed value.
 * 
 *END**************************************************************************/
uint32 OsIf_Timer_System_Internal_GetElapsed(uint32 * const CurrentRef)
{
    23dc:	b084      	sub	sp, #16
    23de:	9001      	str	r0, [sp, #4]
    uint32 CurrentVal = SYSTICK_GET_COUNTER();
    23e0:	4b10      	ldr	r3, [pc, #64]	; (2424 <OsIf_Timer_System_Internal_GetElapsed+0x48>)
    23e2:	689b      	ldr	r3, [r3, #8]
    23e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    23e8:	9302      	str	r3, [sp, #8]
    uint32 dif = 0U;
    23ea:	2300      	movs	r3, #0
    23ec:	9303      	str	r3, [sp, #12]

    if (SYSTICK_OVERFLOWED((CurrentVal), (*CurrentRef)))
    23ee:	9b01      	ldr	r3, [sp, #4]
    23f0:	681b      	ldr	r3, [r3, #0]
    23f2:	9a02      	ldr	r2, [sp, #8]
    23f4:	429a      	cmp	r2, r3
    23f6:	d909      	bls.n	240c <OsIf_Timer_System_Internal_GetElapsed+0x30>
    {
        /* overflow occurred */
        dif = SYSTICK_DELTA_OUTER(CurrentVal, *CurrentRef, SYSTICK_MAX);
    23f8:	9b01      	ldr	r3, [sp, #4]
    23fa:	681a      	ldr	r2, [r3, #0]
    23fc:	9b02      	ldr	r3, [sp, #8]
    23fe:	1ad3      	subs	r3, r2, r3
    2400:	f103 13ff 	add.w	r3, r3, #16711935	; 0xff00ff
    2404:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
    2408:	9303      	str	r3, [sp, #12]
    240a:	e004      	b.n	2416 <OsIf_Timer_System_Internal_GetElapsed+0x3a>
    }
    else
    {
        /* overflow did not occur */
        dif = SYSTICK_DELTA_INNER(*CurrentRef, CurrentVal);
    240c:	9b01      	ldr	r3, [sp, #4]
    240e:	681a      	ldr	r2, [r3, #0]
    2410:	9b02      	ldr	r3, [sp, #8]
    2412:	1ad3      	subs	r3, r2, r3
    2414:	9303      	str	r3, [sp, #12]
    }
    *CurrentRef = CurrentVal;
    2416:	9b01      	ldr	r3, [sp, #4]
    2418:	9a02      	ldr	r2, [sp, #8]
    241a:	601a      	str	r2, [r3, #0]

    return dif;
    241c:	9b03      	ldr	r3, [sp, #12]
}
    241e:	4618      	mov	r0, r3
    2420:	b004      	add	sp, #16
    2422:	4770      	bx	lr
    2424:	e000e010 	.word	0xe000e010

00002428 <Clock_Ip_NotificatonsEmptyCallback>:
 *
 *END**************************************************************************/
static void Clock_Ip_NotificatonsEmptyCallback( Clock_Ip_NotificationType Notification,
                                                Clock_Ip_NameType ClockName
                                               )
{
    2428:	b082      	sub	sp, #8
    242a:	9001      	str	r0, [sp, #4]
    242c:	9100      	str	r1, [sp, #0]
    /* No implementation */
    (void)Notification;
    (void)ClockName;
}
    242e:	bf00      	nop
    2430:	b002      	add	sp, #8
    2432:	4770      	bx	lr

00002434 <Clock_Ip_UpdateDriverContext>:
 * Function Name : Clock_Ip_UpdateDriverContext.
 * Description   : Updates context of the driver, internal memory, clock objects.
 *
 *END**************************************************************************/
static void Clock_Ip_UpdateDriverContext(Clock_Ip_ClockConfigType const * Config)
{
    2434:	b500      	push	{lr}
    2436:	b085      	sub	sp, #20
    2438:	9001      	str	r0, [sp, #4]
    uint8 Index;
    (void)Config;
    Clock_Ip_bSentFromUpdateDriverContext = TRUE;
    243a:	4b24      	ldr	r3, [pc, #144]	; (24cc <Clock_Ip_UpdateDriverContext+0x98>)
    243c:	2201      	movs	r2, #1
    243e:	701a      	strb	r2, [r3, #0]
    /* Initialize clock objects */
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    2440:	4b23      	ldr	r3, [pc, #140]	; (24d0 <Clock_Ip_UpdateDriverContext+0x9c>)
    2442:	681b      	ldr	r3, [r3, #0]
    2444:	2102      	movs	r1, #2
    2446:	4618      	mov	r0, r3
    2448:	f003 fc32 	bl	5cb0 <Clock_Ip_Command>

    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    244c:	2300      	movs	r3, #0
    244e:	f88d 300f 	strb.w	r3, [sp, #15]
    2452:	e015      	b.n	2480 <Clock_Ip_UpdateDriverContext+0x4c>
    {
        Clock_Ip_SetExternalSignalFrequency(Config->ExtClks[Index].Name, Config->ExtClks[Index].Value);
    2454:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2458:	9a01      	ldr	r2, [sp, #4]
    245a:	334a      	adds	r3, #74	; 0x4a
    245c:	00db      	lsls	r3, r3, #3
    245e:	4413      	add	r3, r2
    2460:	6858      	ldr	r0, [r3, #4]
    2462:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2466:	9a01      	ldr	r2, [sp, #4]
    2468:	334a      	adds	r3, #74	; 0x4a
    246a:	00db      	lsls	r3, r3, #3
    246c:	4413      	add	r3, r2
    246e:	689b      	ldr	r3, [r3, #8]
    2470:	4619      	mov	r1, r3
    2472:	f001 fadc 	bl	3a2e <Clock_Ip_SetExternalSignalFrequency>
    for (Index = 0U; Index < Config->ExtClksCount; Index++)    /* Set external signal frequency. */
    2476:	f89d 300f 	ldrb.w	r3, [sp, #15]
    247a:	3301      	adds	r3, #1
    247c:	f88d 300f 	strb.w	r3, [sp, #15]
    2480:	9b01      	ldr	r3, [sp, #4]
    2482:	7bdb      	ldrb	r3, [r3, #15]
    2484:	f89d 200f 	ldrb.w	r2, [sp, #15]
    2488:	429a      	cmp	r2, r3
    248a:	d3e3      	bcc.n	2454 <Clock_Ip_UpdateDriverContext+0x20>
    }

    /* Call empty callbacks */
    Clock_Ip_CallEmptyCallbacks();
    248c:	f000 f824 	bl	24d8 <Clock_Ip_CallEmptyCallbacks>

#if CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U

    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    2490:	2301      	movs	r3, #1
    2492:	f88d 300f 	strb.w	r3, [sp, #15]
    2496:	e00e      	b.n	24b6 <Clock_Ip_UpdateDriverContext+0x82>
    {
        Clock_Ip_FreqIds[Config->ConfiguredFrequencies[Index].Name] = Index;
    2498:	f89d 200f 	ldrb.w	r2, [sp, #15]
    249c:	9b01      	ldr	r3, [sp, #4]
    249e:	327e      	adds	r2, #126	; 0x7e
    24a0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    24a4:	490b      	ldr	r1, [pc, #44]	; (24d4 <Clock_Ip_UpdateDriverContext+0xa0>)
    24a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    24aa:	54ca      	strb	r2, [r1, r3]
    for (Index = 1U; Index < Config->ConfigureFrequenciesCount; Index++)
    24ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
    24b0:	3301      	adds	r3, #1
    24b2:	f88d 300f 	strb.w	r3, [sp, #15]
    24b6:	9b01      	ldr	r3, [sp, #4]
    24b8:	7cdb      	ldrb	r3, [r3, #19]
    24ba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    24be:	429a      	cmp	r2, r3
    24c0:	d3ea      	bcc.n	2498 <Clock_Ip_UpdateDriverContext+0x64>
    }

#endif /* CLOCK_IP_CONFIGURED_FREQUENCIES_COUNT > 0U */
}
    24c2:	bf00      	nop
    24c4:	bf00      	nop
    24c6:	b005      	add	sp, #20
    24c8:	f85d fb04 	ldr.w	pc, [sp], #4
    24cc:	1fff8b10 	.word	0x1fff8b10
    24d0:	1fff8b50 	.word	0x1fff8b50
    24d4:	1fff8b5c 	.word	0x1fff8b5c

000024d8 <Clock_Ip_CallEmptyCallbacks>:

#define CLOCK_IP_NO_CALLBACK 0U

/* Call empty callbacks to improve CCOV*/
static void Clock_Ip_CallEmptyCallbacks(void)
{
    24d8:	b508      	push	{r3, lr}

    if (FALSE == FunctionWasCalled)
    24da:	4b23      	ldr	r3, [pc, #140]	; (2568 <Clock_Ip_CallEmptyCallbacks+0x90>)
    24dc:	781b      	ldrb	r3, [r3, #0]
    24de:	f083 0301 	eor.w	r3, r3, #1
    24e2:	b2db      	uxtb	r3, r3
    24e4:	2b00      	cmp	r3, #0
    24e6:	d03d      	beq.n	2564 <Clock_Ip_CallEmptyCallbacks+0x8c>
    {
        FunctionWasCalled = TRUE;
    24e8:	4b1f      	ldr	r3, [pc, #124]	; (2568 <Clock_Ip_CallEmptyCallbacks+0x90>)
    24ea:	2201      	movs	r2, #1
    24ec:	701a      	strb	r2, [r3, #0]

        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    24ee:	4b1f      	ldr	r3, [pc, #124]	; (256c <Clock_Ip_CallEmptyCallbacks+0x94>)
    24f0:	685b      	ldr	r3, [r3, #4]
    24f2:	2100      	movs	r1, #0
    24f4:	2000      	movs	r0, #0
    24f6:	4798      	blx	r3
        Clock_Ip_axCmuCallbacks[CLOCK_IP_NO_CALLBACK].Disable(RESERVED_CLK);
    24f8:	4b1c      	ldr	r3, [pc, #112]	; (256c <Clock_Ip_CallEmptyCallbacks+0x94>)
    24fa:	689b      	ldr	r3, [r3, #8]
    24fc:	2057      	movs	r0, #87	; 0x57
    24fe:	4798      	blx	r3

        Clock_Ip_axDividerCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2500:	4b1b      	ldr	r3, [pc, #108]	; (2570 <Clock_Ip_CallEmptyCallbacks+0x98>)
    2502:	681b      	ldr	r3, [r3, #0]
    2504:	2000      	movs	r0, #0
    2506:	4798      	blx	r3

        Clock_Ip_axDividerTriggerCallbacks[CLOCK_IP_NO_CALLBACK].Configure(NULL_PTR);
    2508:	4b1a      	ldr	r3, [pc, #104]	; (2574 <Clock_Ip_CallEmptyCallbacks+0x9c>)
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	2000      	movs	r0, #0
    250e:	4798      	blx	r3

        Clock_Ip_axExtOscCallbacks[CLOCK_IP_NO_CALLBACK].Reset(NULL_PTR);
    2510:	4b19      	ldr	r3, [pc, #100]	; (2578 <Clock_Ip_CallEmptyCallbacks+0xa0>)
    2512:	681b      	ldr	r3, [r3, #0]
    2514:	2000      	movs	r0, #0
    2516:	4798      	blx	r3

        Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2518:	4b18      	ldr	r3, [pc, #96]	; (257c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    251a:	685b      	ldr	r3, [r3, #4]
    251c:	2000      	movs	r0, #0
    251e:	4798      	blx	r3
        (void)Clock_Ip_axFracDivCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    2520:	4b16      	ldr	r3, [pc, #88]	; (257c <Clock_Ip_CallEmptyCallbacks+0xa4>)
    2522:	689b      	ldr	r3, [r3, #8]
    2524:	2057      	movs	r0, #87	; 0x57
    2526:	4798      	blx	r3

        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2528:	4b15      	ldr	r3, [pc, #84]	; (2580 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    252a:	681b      	ldr	r3, [r3, #0]
    252c:	2000      	movs	r0, #0
    252e:	4798      	blx	r3
        Clock_Ip_axGateCallbacks[CLOCK_IP_NO_CALLBACK].Update(RESERVED_CLK,FALSE);
    2530:	4b13      	ldr	r3, [pc, #76]	; (2580 <Clock_Ip_CallEmptyCallbacks+0xa8>)
    2532:	685b      	ldr	r3, [r3, #4]
    2534:	2100      	movs	r1, #0
    2536:	2057      	movs	r0, #87	; 0x57
    2538:	4798      	blx	r3

        Clock_Ip_axIntOscCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    253a:	4b12      	ldr	r3, [pc, #72]	; (2584 <Clock_Ip_CallEmptyCallbacks+0xac>)
    253c:	681b      	ldr	r3, [r3, #0]
    253e:	2000      	movs	r0, #0
    2540:	4798      	blx	r3

        Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2542:	4b11      	ldr	r3, [pc, #68]	; (2588 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    2544:	685b      	ldr	r3, [r3, #4]
    2546:	2000      	movs	r0, #0
    2548:	4798      	blx	r3
        (void)Clock_Ip_axPllCallbacks[CLOCK_IP_NO_CALLBACK].Complete(RESERVED_CLK);
    254a:	4b0f      	ldr	r3, [pc, #60]	; (2588 <Clock_Ip_CallEmptyCallbacks+0xb0>)
    254c:	689b      	ldr	r3, [r3, #8]
    254e:	2057      	movs	r0, #87	; 0x57
    2550:	4798      	blx	r3

        Clock_Ip_axSelectorCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR);
    2552:	4b0e      	ldr	r3, [pc, #56]	; (258c <Clock_Ip_CallEmptyCallbacks+0xb4>)
    2554:	685b      	ldr	r3, [r3, #4]
    2556:	2000      	movs	r0, #0
    2558:	4798      	blx	r3

        Clock_Ip_axPcfsCallbacks[CLOCK_IP_NO_CALLBACK].Set(NULL_PTR, 0U);
    255a:	4b0d      	ldr	r3, [pc, #52]	; (2590 <Clock_Ip_CallEmptyCallbacks+0xb8>)
    255c:	681b      	ldr	r3, [r3, #0]
    255e:	2100      	movs	r1, #0
    2560:	2000      	movs	r0, #0
    2562:	4798      	blx	r3
    }
}
    2564:	bf00      	nop
    2566:	bd08      	pop	{r3, pc}
    2568:	1fff8b54 	.word	0x1fff8b54
    256c:	000100b0 	.word	0x000100b0
    2570:	0000ffc4 	.word	0x0000ffc4
    2574:	00010000 	.word	0x00010000
    2578:	00010008 	.word	0x00010008
    257c:	00010030 	.word	0x00010030
    2580:	0001003c 	.word	0x0001003c
    2584:	00010074 	.word	0x00010074
    2588:	000100c0 	.word	0x000100c0
    258c:	000100ec 	.word	0x000100ec
    2590:	000100e8 	.word	0x000100e8

00002594 <Clock_Ip_ResetClockConfiguration>:

static void Clock_Ip_ResetClockConfiguration(Clock_Ip_ClockConfigType const * Config)
{
    2594:	b500      	push	{lr}
    2596:	b085      	sub	sp, #20
    2598:	9001      	str	r0, [sp, #4]
    uint32 CallbackIndex;
    uint32 Index;

    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    259a:	9b01      	ldr	r3, [sp, #4]
    259c:	7adb      	ldrb	r3, [r3, #11]
    259e:	9303      	str	r3, [sp, #12]
    25a0:	e01f      	b.n	25e2 <Clock_Ip_ResetClockConfiguration+0x4e>
    {
        CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    25a2:	9b03      	ldr	r3, [sp, #12]
    25a4:	1e5a      	subs	r2, r3, #1
    25a6:	9b01      	ldr	r3, [sp, #4]
    25a8:	320d      	adds	r2, #13
    25aa:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    25ae:	495a      	ldr	r1, [pc, #360]	; (2718 <Clock_Ip_ResetClockConfiguration+0x184>)
    25b0:	4613      	mov	r3, r2
    25b2:	00db      	lsls	r3, r3, #3
    25b4:	4413      	add	r3, r2
    25b6:	440b      	add	r3, r1
    25b8:	3301      	adds	r3, #1
    25ba:	781b      	ldrb	r3, [r3, #0]
    25bc:	461a      	mov	r2, r3
    25be:	4b57      	ldr	r3, [pc, #348]	; (271c <Clock_Ip_ResetClockConfiguration+0x188>)
    25c0:	5c9b      	ldrb	r3, [r3, r2]
    25c2:	9302      	str	r3, [sp, #8]
        Clock_Ip_axSelectorCallbacks[CallbackIndex].Reset(&Config->Selectors[Index - 1U]);
    25c4:	4a56      	ldr	r2, [pc, #344]	; (2720 <Clock_Ip_ResetClockConfiguration+0x18c>)
    25c6:	9b02      	ldr	r3, [sp, #8]
    25c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    25cc:	9a03      	ldr	r2, [sp, #12]
    25ce:	3a01      	subs	r2, #1
    25d0:	320d      	adds	r2, #13
    25d2:	00d2      	lsls	r2, r2, #3
    25d4:	9901      	ldr	r1, [sp, #4]
    25d6:	440a      	add	r2, r1
    25d8:	4610      	mov	r0, r2
    25da:	4798      	blx	r3
    for (Index = Config->SelectorsCount ; Index > 0U; Index--)    /* Ramp down all selectors from configuration to SAFE_CLOCK */
    25dc:	9b03      	ldr	r3, [sp, #12]
    25de:	3b01      	subs	r3, #1
    25e0:	9303      	str	r3, [sp, #12]
    25e2:	9b03      	ldr	r3, [sp, #12]
    25e4:	2b00      	cmp	r3, #0
    25e6:	d1dc      	bne.n	25a2 <Clock_Ip_ResetClockConfiguration+0xe>
    }

    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    25e8:	9b01      	ldr	r3, [sp, #4]
    25ea:	7b9b      	ldrb	r3, [r3, #14]
    25ec:	9303      	str	r3, [sp, #12]
    25ee:	e026      	b.n	263e <Clock_Ip_ResetClockConfiguration+0xaa>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    25f0:	9b03      	ldr	r3, [sp, #12]
    25f2:	3b01      	subs	r3, #1
    25f4:	9a01      	ldr	r2, [sp, #4]
    25f6:	3324      	adds	r3, #36	; 0x24
    25f8:	011b      	lsls	r3, r3, #4
    25fa:	4413      	add	r3, r2
    25fc:	3304      	adds	r3, #4
    25fe:	681a      	ldr	r2, [r3, #0]
    2600:	4945      	ldr	r1, [pc, #276]	; (2718 <Clock_Ip_ResetClockConfiguration+0x184>)
    2602:	4613      	mov	r3, r2
    2604:	00db      	lsls	r3, r3, #3
    2606:	4413      	add	r3, r2
    2608:	440b      	add	r3, r1
    260a:	3301      	adds	r3, #1
    260c:	781b      	ldrb	r3, [r3, #0]
    260e:	461a      	mov	r2, r3
    2610:	4b44      	ldr	r3, [pc, #272]	; (2724 <Clock_Ip_ResetClockConfiguration+0x190>)
    2612:	5c9b      	ldrb	r3, [r3, r2]
    2614:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Reset(&Config->FracDivs[Index - 1U]);
    2616:	4944      	ldr	r1, [pc, #272]	; (2728 <Clock_Ip_ResetClockConfiguration+0x194>)
    2618:	9a02      	ldr	r2, [sp, #8]
    261a:	4613      	mov	r3, r2
    261c:	005b      	lsls	r3, r3, #1
    261e:	4413      	add	r3, r2
    2620:	009b      	lsls	r3, r3, #2
    2622:	440b      	add	r3, r1
    2624:	681b      	ldr	r3, [r3, #0]
    2626:	9a03      	ldr	r2, [sp, #12]
    2628:	3a01      	subs	r2, #1
    262a:	3224      	adds	r2, #36	; 0x24
    262c:	0112      	lsls	r2, r2, #4
    262e:	9901      	ldr	r1, [sp, #4]
    2630:	440a      	add	r2, r1
    2632:	3204      	adds	r2, #4
    2634:	4610      	mov	r0, r2
    2636:	4798      	blx	r3
    for (Index = Config->FracDivsCount; Index > 0U; Index--)    /* Put in reset state all fractional dividers from configuration */
    2638:	9b03      	ldr	r3, [sp, #12]
    263a:	3b01      	subs	r3, #1
    263c:	9303      	str	r3, [sp, #12]
    263e:	9b03      	ldr	r3, [sp, #12]
    2640:	2b00      	cmp	r3, #0
    2642:	d1d5      	bne.n	25f0 <Clock_Ip_ResetClockConfiguration+0x5c>
    }

    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    2644:	9b01      	ldr	r3, [sp, #4]
    2646:	7a9b      	ldrb	r3, [r3, #10]
    2648:	9303      	str	r3, [sp, #12]
    264a:	e02a      	b.n	26a2 <Clock_Ip_ResetClockConfiguration+0x10e>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    264c:	9b03      	ldr	r3, [sp, #12]
    264e:	1e5a      	subs	r2, r3, #1
    2650:	9901      	ldr	r1, [sp, #4]
    2652:	4613      	mov	r3, r2
    2654:	009b      	lsls	r3, r3, #2
    2656:	4413      	add	r3, r2
    2658:	00db      	lsls	r3, r3, #3
    265a:	440b      	add	r3, r1
    265c:	3340      	adds	r3, #64	; 0x40
    265e:	681a      	ldr	r2, [r3, #0]
    2660:	492d      	ldr	r1, [pc, #180]	; (2718 <Clock_Ip_ResetClockConfiguration+0x184>)
    2662:	4613      	mov	r3, r2
    2664:	00db      	lsls	r3, r3, #3
    2666:	4413      	add	r3, r2
    2668:	440b      	add	r3, r1
    266a:	3301      	adds	r3, #1
    266c:	781b      	ldrb	r3, [r3, #0]
    266e:	461a      	mov	r2, r3
    2670:	4b2e      	ldr	r3, [pc, #184]	; (272c <Clock_Ip_ResetClockConfiguration+0x198>)
    2672:	5c9b      	ldrb	r3, [r3, r2]
    2674:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Reset(&Config->Plls[Index - 1U]);
    2676:	492e      	ldr	r1, [pc, #184]	; (2730 <Clock_Ip_ResetClockConfiguration+0x19c>)
    2678:	9a02      	ldr	r2, [sp, #8]
    267a:	4613      	mov	r3, r2
    267c:	009b      	lsls	r3, r3, #2
    267e:	4413      	add	r3, r2
    2680:	009b      	lsls	r3, r3, #2
    2682:	440b      	add	r3, r1
    2684:	6819      	ldr	r1, [r3, #0]
    2686:	9b03      	ldr	r3, [sp, #12]
    2688:	1e5a      	subs	r2, r3, #1
    268a:	4613      	mov	r3, r2
    268c:	009b      	lsls	r3, r3, #2
    268e:	4413      	add	r3, r2
    2690:	00db      	lsls	r3, r3, #3
    2692:	3340      	adds	r3, #64	; 0x40
    2694:	9a01      	ldr	r2, [sp, #4]
    2696:	4413      	add	r3, r2
    2698:	4618      	mov	r0, r3
    269a:	4788      	blx	r1
    for (Index = Config->PllsCount; Index > 0U; Index--)       /* Power down all plls from configuration */
    269c:	9b03      	ldr	r3, [sp, #12]
    269e:	3b01      	subs	r3, #1
    26a0:	9303      	str	r3, [sp, #12]
    26a2:	9b03      	ldr	r3, [sp, #12]
    26a4:	2b00      	cmp	r3, #0
    26a6:	d1d1      	bne.n	264c <Clock_Ip_ResetClockConfiguration+0xb8>
    }

    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    26a8:	9b01      	ldr	r3, [sp, #4]
    26aa:	7a5b      	ldrb	r3, [r3, #9]
    26ac:	9303      	str	r3, [sp, #12]
    26ae:	e02b      	b.n	2708 <Clock_Ip_ResetClockConfiguration+0x174>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index - 1U].Name][CLOCK_IP_CALLBACK]];
    26b0:	9b03      	ldr	r3, [sp, #12]
    26b2:	1e5a      	subs	r2, r3, #1
    26b4:	9901      	ldr	r1, [sp, #4]
    26b6:	4613      	mov	r3, r2
    26b8:	009b      	lsls	r3, r3, #2
    26ba:	4413      	add	r3, r2
    26bc:	009b      	lsls	r3, r3, #2
    26be:	440b      	add	r3, r1
    26c0:	332c      	adds	r3, #44	; 0x2c
    26c2:	681a      	ldr	r2, [r3, #0]
    26c4:	4914      	ldr	r1, [pc, #80]	; (2718 <Clock_Ip_ResetClockConfiguration+0x184>)
    26c6:	4613      	mov	r3, r2
    26c8:	00db      	lsls	r3, r3, #3
    26ca:	4413      	add	r3, r2
    26cc:	440b      	add	r3, r1
    26ce:	3301      	adds	r3, #1
    26d0:	781b      	ldrb	r3, [r3, #0]
    26d2:	461a      	mov	r2, r3
    26d4:	4b17      	ldr	r3, [pc, #92]	; (2734 <Clock_Ip_ResetClockConfiguration+0x1a0>)
    26d6:	5c9b      	ldrb	r3, [r3, r2]
    26d8:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Reset(&Config->Xoscs[Index - 1U]);
    26da:	4917      	ldr	r1, [pc, #92]	; (2738 <Clock_Ip_ResetClockConfiguration+0x1a4>)
    26dc:	9a02      	ldr	r2, [sp, #8]
    26de:	4613      	mov	r3, r2
    26e0:	009b      	lsls	r3, r3, #2
    26e2:	4413      	add	r3, r2
    26e4:	009b      	lsls	r3, r3, #2
    26e6:	440b      	add	r3, r1
    26e8:	6819      	ldr	r1, [r3, #0]
    26ea:	9b03      	ldr	r3, [sp, #12]
    26ec:	1e5a      	subs	r2, r3, #1
    26ee:	4613      	mov	r3, r2
    26f0:	009b      	lsls	r3, r3, #2
    26f2:	4413      	add	r3, r2
    26f4:	009b      	lsls	r3, r3, #2
    26f6:	3328      	adds	r3, #40	; 0x28
    26f8:	9a01      	ldr	r2, [sp, #4]
    26fa:	4413      	add	r3, r2
    26fc:	3304      	adds	r3, #4
    26fe:	4618      	mov	r0, r3
    2700:	4788      	blx	r1
    for (Index = Config->XoscsCount; Index > 0U; Index--)     /* Power down all xoscs from configuration */
    2702:	9b03      	ldr	r3, [sp, #12]
    2704:	3b01      	subs	r3, #1
    2706:	9303      	str	r3, [sp, #12]
    2708:	9b03      	ldr	r3, [sp, #12]
    270a:	2b00      	cmp	r3, #0
    270c:	d1d0      	bne.n	26b0 <Clock_Ip_ResetClockConfiguration+0x11c>
    }
}
    270e:	bf00      	nop
    2710:	bf00      	nop
    2712:	b005      	add	sp, #20
    2714:	f85d fb04 	ldr.w	pc, [sp], #4
    2718:	0000fab4 	.word	0x0000fab4
    271c:	0000fa84 	.word	0x0000fa84
    2720:	000100ec 	.word	0x000100ec
    2724:	0000fa64 	.word	0x0000fa64
    2728:	00010030 	.word	0x00010030
    272c:	0000fa74 	.word	0x0000fa74
    2730:	000100c0 	.word	0x000100c0
    2734:	0000fa34 	.word	0x0000fa34
    2738:	00010008 	.word	0x00010008

0000273c <Clock_Ip_Init>:
 *                 enabled, for example, if the external oscillator is used, please setup correctly.
 *
 * @implements Clock_Ip_Init_Activity
 * END**********************************************************************************/
Clock_Ip_StatusType Clock_Ip_Init(Clock_Ip_ClockConfigType const * Config)
{
    273c:	b500      	push	{lr}
    273e:	b085      	sub	sp, #20
    2740:	9001      	str	r0, [sp, #4]
    Clock_Ip_StatusType ClockStatus = CLOCK_IP_ERROR;
    2742:	2301      	movs	r3, #1
    2744:	9303      	str	r3, [sp, #12]
    Clock_Ip_Command(Config, CLOCK_IP_SET_USER_ACCESS_ALLOWED_COMMAND);
  #endif
#endif
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    Clock_Ip_InitClock(Config);
    2746:	9801      	ldr	r0, [sp, #4]
    2748:	f000 f818 	bl	277c <Clock_Ip_InitClock>

    if (DriverContext.ClockTreeIsConsumingPll)
    274c:	4b0a      	ldr	r3, [pc, #40]	; (2778 <Clock_Ip_Init+0x3c>)
    274e:	781b      	ldrb	r3, [r3, #0]
    2750:	2b00      	cmp	r3, #0
    2752:	d00a      	beq.n	276a <Clock_Ip_Init+0x2e>
    {
        PllStatus = Clock_Ip_GetPllStatus();
    2754:	f000 fb74 	bl	2e40 <Clock_Ip_GetPllStatus>
    2758:	9002      	str	r0, [sp, #8]
        if (CLOCK_IP_PLL_LOCKED == PllStatus)
    275a:	9b02      	ldr	r3, [sp, #8]
    275c:	2b00      	cmp	r3, #0
    275e:	d106      	bne.n	276e <Clock_Ip_Init+0x32>
        {
            Clock_Ip_DistributePll();
    2760:	f000 fbf2 	bl	2f48 <Clock_Ip_DistributePll>
            ClockStatus = CLOCK_IP_SUCCESS;
    2764:	2300      	movs	r3, #0
    2766:	9303      	str	r3, [sp, #12]
    2768:	e001      	b.n	276e <Clock_Ip_Init+0x32>
        }
    }
    else
    {
        ClockStatus = CLOCK_IP_SUCCESS;
    276a:	2300      	movs	r3, #0
    276c:	9303      	str	r3, [sp, #12]
    }

    return ClockStatus;
    276e:	9b03      	ldr	r3, [sp, #12]
}
    2770:	4618      	mov	r0, r3
    2772:	b005      	add	sp, #20
    2774:	f85d fb04 	ldr.w	pc, [sp], #4
    2778:	1fff8b58 	.word	0x1fff8b58

0000277c <Clock_Ip_InitClock>:
 *                 shall be initialized) and shall return without waiting until the PLL is locked.
 *
 * @implements Clock_Ip_InitClock_Activity
 * END**********************************************************************************/
void Clock_Ip_InitClock(Clock_Ip_ClockConfigType const * Config)
{
    277c:	b510      	push	{r4, lr}
    277e:	b084      	sub	sp, #16
    2780:	9001      	str	r0, [sp, #4]
#endif

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Config);

    /* Save the current clock configuration to be used by "Clock_Ip_DistributePllClock". */
    Clock_Ip_pxConfig = Config;
    2782:	4a9f      	ldr	r2, [pc, #636]	; (2a00 <Clock_Ip_InitClock+0x284>)
    2784:	9b01      	ldr	r3, [sp, #4]
    2786:	6013      	str	r3, [r2, #0]

    /* Platform specific initialization:
     * DFS reset, FIRC_CLK configuration etc. */
    Clock_Ip_Command(Config, CLOCK_IP_INITIALIZE_PLATFORM_COMMAND);
    2788:	2101      	movs	r1, #1
    278a:	9801      	ldr	r0, [sp, #4]
    278c:	f003 fa90 	bl	5cb0 <Clock_Ip_Command>

    /* Clear all the settings for CMU0/1/2... */
    /* In case one clock configuration has the CMU disabled, then need to make the transition to
    reset state of CMU modules. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2790:	4b9b      	ldr	r3, [pc, #620]	; (2a00 <Clock_Ip_InitClock+0x284>)
    2792:	681b      	ldr	r3, [r3, #0]
    2794:	2b00      	cmp	r3, #0
    2796:	d030      	beq.n	27fa <Clock_Ip_InitClock+0x7e>
    {
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    2798:	2300      	movs	r3, #0
    279a:	9303      	str	r3, [sp, #12]
    279c:	e027      	b.n	27ee <Clock_Ip_InitClock+0x72>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    279e:	9901      	ldr	r1, [sp, #4]
    27a0:	9a03      	ldr	r2, [sp, #12]
    27a2:	4613      	mov	r3, r2
    27a4:	009b      	lsls	r3, r3, #2
    27a6:	4413      	add	r3, r2
    27a8:	009b      	lsls	r3, r3, #2
    27aa:	440b      	add	r3, r1
    27ac:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27b0:	681a      	ldr	r2, [r3, #0]
    27b2:	4994      	ldr	r1, [pc, #592]	; (2a04 <Clock_Ip_InitClock+0x288>)
    27b4:	4613      	mov	r3, r2
    27b6:	00db      	lsls	r3, r3, #3
    27b8:	4413      	add	r3, r2
    27ba:	440b      	add	r3, r1
    27bc:	3301      	adds	r3, #1
    27be:	781b      	ldrb	r3, [r3, #0]
    27c0:	461a      	mov	r2, r3
    27c2:	4b91      	ldr	r3, [pc, #580]	; (2a08 <Clock_Ip_InitClock+0x28c>)
    27c4:	5c9b      	ldrb	r3, [r3, r2]
    27c6:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Reset(&Config->Cmus[Index]);
    27c8:	4a90      	ldr	r2, [pc, #576]	; (2a0c <Clock_Ip_InitClock+0x290>)
    27ca:	9b02      	ldr	r3, [sp, #8]
    27cc:	011b      	lsls	r3, r3, #4
    27ce:	4413      	add	r3, r2
    27d0:	6819      	ldr	r1, [r3, #0]
    27d2:	9a03      	ldr	r2, [sp, #12]
    27d4:	4613      	mov	r3, r2
    27d6:	009b      	lsls	r3, r3, #2
    27d8:	4413      	add	r3, r2
    27da:	009b      	lsls	r3, r3, #2
    27dc:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    27e0:	9a01      	ldr	r2, [sp, #4]
    27e2:	4413      	add	r3, r2
    27e4:	4618      	mov	r0, r3
    27e6:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)    /* Reset all clock monitor units from previous configuration. */
    27e8:	9b03      	ldr	r3, [sp, #12]
    27ea:	3301      	adds	r3, #1
    27ec:	9303      	str	r3, [sp, #12]
    27ee:	9b01      	ldr	r3, [sp, #4]
    27f0:	7c9b      	ldrb	r3, [r3, #18]
    27f2:	461a      	mov	r2, r3
    27f4:	9b03      	ldr	r3, [sp, #12]
    27f6:	4293      	cmp	r3, r2
    27f8:	d3d1      	bcc.n	279e <Clock_Ip_InitClock+0x22>

    /*********************************************************************
     ***  Ramp down to safe configuration. Reset elements from clock tree:
     ***  selectors, fractional dividers, plls and xoscs
     ***********************************************************************/
    Clock_Ip_ResetClockConfiguration(Config);
    27fa:	9801      	ldr	r0, [sp, #4]
    27fc:	f7ff feca 	bl	2594 <Clock_Ip_ResetClockConfiguration>
    /*******************************************************
     *** Load the new configuration. Selectors that might
     *** be clocked from PLLs shouldn't be configured.
     *******************************************************/

    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2800:	2300      	movs	r3, #0
    2802:	9303      	str	r3, [sp, #12]
    2804:	e029      	b.n	285a <Clock_Ip_InitClock+0xde>
    {
        CallbackIndex = Clock_Ip_au8IrcoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Ircoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2806:	9901      	ldr	r1, [sp, #4]
    2808:	9a03      	ldr	r2, [sp, #12]
    280a:	4613      	mov	r3, r2
    280c:	005b      	lsls	r3, r3, #1
    280e:	4413      	add	r3, r2
    2810:	009b      	lsls	r3, r3, #2
    2812:	440b      	add	r3, r1
    2814:	3314      	adds	r3, #20
    2816:	681a      	ldr	r2, [r3, #0]
    2818:	497a      	ldr	r1, [pc, #488]	; (2a04 <Clock_Ip_InitClock+0x288>)
    281a:	4613      	mov	r3, r2
    281c:	00db      	lsls	r3, r3, #3
    281e:	4413      	add	r3, r2
    2820:	440b      	add	r3, r1
    2822:	3301      	adds	r3, #1
    2824:	781b      	ldrb	r3, [r3, #0]
    2826:	461a      	mov	r2, r3
    2828:	4b79      	ldr	r3, [pc, #484]	; (2a10 <Clock_Ip_InitClock+0x294>)
    282a:	5c9b      	ldrb	r3, [r3, r2]
    282c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axIntOscCallbacks[CallbackIndex].Set(&Config->Ircoscs[Index]);
    282e:	4979      	ldr	r1, [pc, #484]	; (2a14 <Clock_Ip_InitClock+0x298>)
    2830:	9a02      	ldr	r2, [sp, #8]
    2832:	4613      	mov	r3, r2
    2834:	005b      	lsls	r3, r3, #1
    2836:	4413      	add	r3, r2
    2838:	009b      	lsls	r3, r3, #2
    283a:	440b      	add	r3, r1
    283c:	6819      	ldr	r1, [r3, #0]
    283e:	9a03      	ldr	r2, [sp, #12]
    2840:	4613      	mov	r3, r2
    2842:	005b      	lsls	r3, r3, #1
    2844:	4413      	add	r3, r2
    2846:	009b      	lsls	r3, r3, #2
    2848:	3310      	adds	r3, #16
    284a:	9a01      	ldr	r2, [sp, #4]
    284c:	4413      	add	r3, r2
    284e:	3304      	adds	r3, #4
    2850:	4618      	mov	r0, r3
    2852:	4788      	blx	r1
    for (Index = 0U; Index < Config->IrcoscsCount; Index++)   /* Set internal oscillators from configuration */
    2854:	9b03      	ldr	r3, [sp, #12]
    2856:	3301      	adds	r3, #1
    2858:	9303      	str	r3, [sp, #12]
    285a:	9b01      	ldr	r3, [sp, #4]
    285c:	7a1b      	ldrb	r3, [r3, #8]
    285e:	461a      	mov	r2, r3
    2860:	9b03      	ldr	r3, [sp, #12]
    2862:	4293      	cmp	r3, r2
    2864:	d3cf      	bcc.n	2806 <Clock_Ip_InitClock+0x8a>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    2866:	2300      	movs	r3, #0
    2868:	9303      	str	r3, [sp, #12]
    286a:	e02a      	b.n	28c2 <Clock_Ip_InitClock+0x146>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    286c:	9901      	ldr	r1, [sp, #4]
    286e:	9a03      	ldr	r2, [sp, #12]
    2870:	4613      	mov	r3, r2
    2872:	009b      	lsls	r3, r3, #2
    2874:	4413      	add	r3, r2
    2876:	009b      	lsls	r3, r3, #2
    2878:	440b      	add	r3, r1
    287a:	332c      	adds	r3, #44	; 0x2c
    287c:	681a      	ldr	r2, [r3, #0]
    287e:	4961      	ldr	r1, [pc, #388]	; (2a04 <Clock_Ip_InitClock+0x288>)
    2880:	4613      	mov	r3, r2
    2882:	00db      	lsls	r3, r3, #3
    2884:	4413      	add	r3, r2
    2886:	440b      	add	r3, r1
    2888:	3301      	adds	r3, #1
    288a:	781b      	ldrb	r3, [r3, #0]
    288c:	461a      	mov	r2, r3
    288e:	4b62      	ldr	r3, [pc, #392]	; (2a18 <Clock_Ip_InitClock+0x29c>)
    2890:	5c9b      	ldrb	r3, [r3, r2]
    2892:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Set(&Config->Xoscs[Index]);
    2894:	4961      	ldr	r1, [pc, #388]	; (2a1c <Clock_Ip_InitClock+0x2a0>)
    2896:	9a02      	ldr	r2, [sp, #8]
    2898:	4613      	mov	r3, r2
    289a:	009b      	lsls	r3, r3, #2
    289c:	4413      	add	r3, r2
    289e:	009b      	lsls	r3, r3, #2
    28a0:	440b      	add	r3, r1
    28a2:	3304      	adds	r3, #4
    28a4:	6819      	ldr	r1, [r3, #0]
    28a6:	9a03      	ldr	r2, [sp, #12]
    28a8:	4613      	mov	r3, r2
    28aa:	009b      	lsls	r3, r3, #2
    28ac:	4413      	add	r3, r2
    28ae:	009b      	lsls	r3, r3, #2
    28b0:	3328      	adds	r3, #40	; 0x28
    28b2:	9a01      	ldr	r2, [sp, #4]
    28b4:	4413      	add	r3, r2
    28b6:	3304      	adds	r3, #4
    28b8:	4618      	mov	r0, r3
    28ba:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Configure all xoscs from configuration */
    28bc:	9b03      	ldr	r3, [sp, #12]
    28be:	3301      	adds	r3, #1
    28c0:	9303      	str	r3, [sp, #12]
    28c2:	9b01      	ldr	r3, [sp, #4]
    28c4:	7a5b      	ldrb	r3, [r3, #9]
    28c6:	461a      	mov	r2, r3
    28c8:	9b03      	ldr	r3, [sp, #12]
    28ca:	4293      	cmp	r3, r2
    28cc:	d3ce      	bcc.n	286c <Clock_Ip_InitClock+0xf0>
    }

    /* Initialize clock objects, internal driver data */
    Clock_Ip_UpdateDriverContext(Config);
    28ce:	9801      	ldr	r0, [sp, #4]
    28d0:	f7ff fdb0 	bl	2434 <Clock_Ip_UpdateDriverContext>

    /* Configure the PCFS  */
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    28d4:	2300      	movs	r3, #0
    28d6:	9303      	str	r3, [sp, #12]
    28d8:	e028      	b.n	292c <Clock_Ip_InitClock+0x1b0>
    {
        CallbackIndex = Clock_Ip_au8PcfsCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Pcfs[Index].Name][CLOCK_IP_CALLBACK]];
    28da:	9901      	ldr	r1, [sp, #4]
    28dc:	9a03      	ldr	r2, [sp, #12]
    28de:	4613      	mov	r3, r2
    28e0:	009b      	lsls	r3, r3, #2
    28e2:	4413      	add	r3, r2
    28e4:	009b      	lsls	r3, r3, #2
    28e6:	440b      	add	r3, r1
    28e8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
    28ec:	681a      	ldr	r2, [r3, #0]
    28ee:	4945      	ldr	r1, [pc, #276]	; (2a04 <Clock_Ip_InitClock+0x288>)
    28f0:	4613      	mov	r3, r2
    28f2:	00db      	lsls	r3, r3, #3
    28f4:	4413      	add	r3, r2
    28f6:	440b      	add	r3, r1
    28f8:	3301      	adds	r3, #1
    28fa:	781b      	ldrb	r3, [r3, #0]
    28fc:	461a      	mov	r2, r3
    28fe:	4b48      	ldr	r3, [pc, #288]	; (2a20 <Clock_Ip_InitClock+0x2a4>)
    2900:	5c9b      	ldrb	r3, [r3, r2]
    2902:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPcfsCallbacks[CallbackIndex].Set(&Config->Pcfs[Index], Index);
    2904:	4a47      	ldr	r2, [pc, #284]	; (2a24 <Clock_Ip_InitClock+0x2a8>)
    2906:	9b02      	ldr	r3, [sp, #8]
    2908:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    290c:	9a03      	ldr	r2, [sp, #12]
    290e:	4613      	mov	r3, r2
    2910:	009b      	lsls	r3, r3, #2
    2912:	4413      	add	r3, r2
    2914:	009b      	lsls	r3, r3, #2
    2916:	f503 736e 	add.w	r3, r3, #952	; 0x3b8
    291a:	9a01      	ldr	r2, [sp, #4]
    291c:	4413      	add	r3, r2
    291e:	3304      	adds	r3, #4
    2920:	9903      	ldr	r1, [sp, #12]
    2922:	4618      	mov	r0, r3
    2924:	47a0      	blx	r4
    for (Index = 0U; Index < Config->PcfsCount; Index++)       /* Configure all progressive frequency switching clocks from configuration */
    2926:	9b03      	ldr	r3, [sp, #12]
    2928:	3301      	adds	r3, #1
    292a:	9303      	str	r3, [sp, #12]
    292c:	9b01      	ldr	r3, [sp, #4]
    292e:	7c5b      	ldrb	r3, [r3, #17]
    2930:	461a      	mov	r2, r3
    2932:	9b03      	ldr	r3, [sp, #12]
    2934:	4293      	cmp	r3, r2
    2936:	d3d0      	bcc.n	28da <Clock_Ip_InitClock+0x15e>
    }

    /* Configure the clock divider triggers that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2938:	2300      	movs	r3, #0
    293a:	9303      	str	r3, [sp, #12]
    293c:	e026      	b.n	298c <Clock_Ip_InitClock+0x210>
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    293e:	9901      	ldr	r1, [sp, #4]
    2940:	9a03      	ldr	r2, [sp, #12]
    2942:	4613      	mov	r3, r2
    2944:	005b      	lsls	r3, r3, #1
    2946:	4413      	add	r3, r2
    2948:	009b      	lsls	r3, r3, #2
    294a:	440b      	add	r3, r1
    294c:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2950:	681a      	ldr	r2, [r3, #0]
    2952:	492c      	ldr	r1, [pc, #176]	; (2a04 <Clock_Ip_InitClock+0x288>)
    2954:	4613      	mov	r3, r2
    2956:	00db      	lsls	r3, r3, #3
    2958:	4413      	add	r3, r2
    295a:	440b      	add	r3, r1
    295c:	3301      	adds	r3, #1
    295e:	781b      	ldrb	r3, [r3, #0]
    2960:	461a      	mov	r2, r3
    2962:	4b31      	ldr	r3, [pc, #196]	; (2a28 <Clock_Ip_InitClock+0x2ac>)
    2964:	5c9b      	ldrb	r3, [r3, r2]
    2966:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].Configure(&Config->DividerTriggers[Index]);
    2968:	4a30      	ldr	r2, [pc, #192]	; (2a2c <Clock_Ip_InitClock+0x2b0>)
    296a:	9b02      	ldr	r3, [sp, #8]
    296c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    2970:	9a03      	ldr	r2, [sp, #12]
    2972:	4613      	mov	r3, r2
    2974:	005b      	lsls	r3, r3, #1
    2976:	4413      	add	r3, r2
    2978:	009b      	lsls	r3, r3, #2
    297a:	f503 730e 	add.w	r3, r3, #568	; 0x238
    297e:	9a01      	ldr	r2, [sp, #4]
    2980:	4413      	add	r3, r2
    2982:	4618      	mov	r0, r3
    2984:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2986:	9b03      	ldr	r3, [sp, #12]
    2988:	3301      	adds	r3, #1
    298a:	9303      	str	r3, [sp, #12]
    298c:	9b01      	ldr	r3, [sp, #4]
    298e:	7b5b      	ldrb	r3, [r3, #13]
    2990:	461a      	mov	r2, r3
    2992:	9b03      	ldr	r3, [sp, #12]
    2994:	4293      	cmp	r3, r2
    2996:	d3d2      	bcc.n	293e <Clock_Ip_InitClock+0x1c2>
    }

    /* Configure the clock dividers that are under MCU control */
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    2998:	2300      	movs	r3, #0
    299a:	9303      	str	r3, [sp, #12]
    299c:	e026      	b.n	29ec <Clock_Ip_InitClock+0x270>
    {
        CallbackIndex = Clock_Ip_au8DividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Dividers[Index].Name][CLOCK_IP_CALLBACK]];
    299e:	9901      	ldr	r1, [sp, #4]
    29a0:	9a03      	ldr	r2, [sp, #12]
    29a2:	4613      	mov	r3, r2
    29a4:	005b      	lsls	r3, r3, #1
    29a6:	4413      	add	r3, r2
    29a8:	009b      	lsls	r3, r3, #2
    29aa:	440b      	add	r3, r1
    29ac:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    29b0:	681a      	ldr	r2, [r3, #0]
    29b2:	4914      	ldr	r1, [pc, #80]	; (2a04 <Clock_Ip_InitClock+0x288>)
    29b4:	4613      	mov	r3, r2
    29b6:	00db      	lsls	r3, r3, #3
    29b8:	4413      	add	r3, r2
    29ba:	440b      	add	r3, r1
    29bc:	3301      	adds	r3, #1
    29be:	781b      	ldrb	r3, [r3, #0]
    29c0:	461a      	mov	r2, r3
    29c2:	4b1b      	ldr	r3, [pc, #108]	; (2a30 <Clock_Ip_InitClock+0x2b4>)
    29c4:	5c9b      	ldrb	r3, [r3, r2]
    29c6:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerCallbacks[CallbackIndex].Set(&Config->Dividers[Index]);
    29c8:	4a1a      	ldr	r2, [pc, #104]	; (2a34 <Clock_Ip_InitClock+0x2b8>)
    29ca:	9b02      	ldr	r3, [sp, #8]
    29cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    29d0:	9a03      	ldr	r2, [sp, #12]
    29d2:	4613      	mov	r3, r2
    29d4:	005b      	lsls	r3, r3, #1
    29d6:	4413      	add	r3, r2
    29d8:	009b      	lsls	r3, r3, #2
    29da:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    29de:	9a01      	ldr	r2, [sp, #4]
    29e0:	4413      	add	r3, r2
    29e2:	4618      	mov	r0, r3
    29e4:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividersCount; Index++)    /* Set dividers from configuration. */
    29e6:	9b03      	ldr	r3, [sp, #12]
    29e8:	3301      	adds	r3, #1
    29ea:	9303      	str	r3, [sp, #12]
    29ec:	9b01      	ldr	r3, [sp, #4]
    29ee:	7b1b      	ldrb	r3, [r3, #12]
    29f0:	461a      	mov	r2, r3
    29f2:	9b03      	ldr	r3, [sp, #12]
    29f4:	4293      	cmp	r3, r2
    29f6:	d3d2      	bcc.n	299e <Clock_Ip_InitClock+0x222>
    }

    /* Trigger update for all divider trigger that are under MCU control */
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    29f8:	2300      	movs	r3, #0
    29fa:	9303      	str	r3, [sp, #12]
    29fc:	e044      	b.n	2a88 <Clock_Ip_InitClock+0x30c>
    29fe:	bf00      	nop
    2a00:	1fff8b50 	.word	0x1fff8b50
    2a04:	0000fab4 	.word	0x0000fab4
    2a08:	0000faa4 	.word	0x0000faa4
    2a0c:	000100b0 	.word	0x000100b0
    2a10:	0000fa44 	.word	0x0000fa44
    2a14:	00010074 	.word	0x00010074
    2a18:	0000fa34 	.word	0x0000fa34
    2a1c:	00010008 	.word	0x00010008
    2a20:	0000fa94 	.word	0x0000fa94
    2a24:	000100e8 	.word	0x000100e8
    2a28:	0000fa24 	.word	0x0000fa24
    2a2c:	00010000 	.word	0x00010000
    2a30:	0000fa14 	.word	0x0000fa14
    2a34:	0000ffc4 	.word	0x0000ffc4
    {
        CallbackIndex = Clock_Ip_au8DividerTriggerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->DividerTriggers[Index].Name][CLOCK_IP_CALLBACK]];
    2a38:	9901      	ldr	r1, [sp, #4]
    2a3a:	9a03      	ldr	r2, [sp, #12]
    2a3c:	4613      	mov	r3, r2
    2a3e:	005b      	lsls	r3, r3, #1
    2a40:	4413      	add	r3, r2
    2a42:	009b      	lsls	r3, r3, #2
    2a44:	440b      	add	r3, r1
    2a46:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2a4a:	681a      	ldr	r2, [r3, #0]
    2a4c:	49ac      	ldr	r1, [pc, #688]	; (2d00 <Clock_Ip_InitClock+0x584>)
    2a4e:	4613      	mov	r3, r2
    2a50:	00db      	lsls	r3, r3, #3
    2a52:	4413      	add	r3, r2
    2a54:	440b      	add	r3, r1
    2a56:	3301      	adds	r3, #1
    2a58:	781b      	ldrb	r3, [r3, #0]
    2a5a:	461a      	mov	r2, r3
    2a5c:	4ba9      	ldr	r3, [pc, #676]	; (2d04 <Clock_Ip_InitClock+0x588>)
    2a5e:	5c9b      	ldrb	r3, [r3, r2]
    2a60:	9302      	str	r3, [sp, #8]
        Clock_Ip_axDividerTriggerCallbacks[CallbackIndex].TriggerUpdate(&Config->DividerTriggers[Index]);
    2a62:	4aa9      	ldr	r2, [pc, #676]	; (2d08 <Clock_Ip_InitClock+0x58c>)
    2a64:	9b02      	ldr	r3, [sp, #8]
    2a66:	00db      	lsls	r3, r3, #3
    2a68:	4413      	add	r3, r2
    2a6a:	6859      	ldr	r1, [r3, #4]
    2a6c:	9a03      	ldr	r2, [sp, #12]
    2a6e:	4613      	mov	r3, r2
    2a70:	005b      	lsls	r3, r3, #1
    2a72:	4413      	add	r3, r2
    2a74:	009b      	lsls	r3, r3, #2
    2a76:	f503 730e 	add.w	r3, r3, #568	; 0x238
    2a7a:	9a01      	ldr	r2, [sp, #4]
    2a7c:	4413      	add	r3, r2
    2a7e:	4618      	mov	r0, r3
    2a80:	4788      	blx	r1
    for (Index = 0U; Index < Config->DividerTriggersCount; Index++)    /* Set divider triggers from configuration. */
    2a82:	9b03      	ldr	r3, [sp, #12]
    2a84:	3301      	adds	r3, #1
    2a86:	9303      	str	r3, [sp, #12]
    2a88:	9b01      	ldr	r3, [sp, #4]
    2a8a:	7b5b      	ldrb	r3, [r3, #13]
    2a8c:	461a      	mov	r2, r3
    2a8e:	9b03      	ldr	r3, [sp, #12]
    2a90:	4293      	cmp	r3, r2
    2a92:	d3d1      	bcc.n	2a38 <Clock_Ip_InitClock+0x2bc>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2a94:	2300      	movs	r3, #0
    2a96:	9303      	str	r3, [sp, #12]
    2a98:	e029      	b.n	2aee <Clock_Ip_InitClock+0x372>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2a9a:	9901      	ldr	r1, [sp, #4]
    2a9c:	9a03      	ldr	r2, [sp, #12]
    2a9e:	4613      	mov	r3, r2
    2aa0:	009b      	lsls	r3, r3, #2
    2aa2:	4413      	add	r3, r2
    2aa4:	00db      	lsls	r3, r3, #3
    2aa6:	440b      	add	r3, r1
    2aa8:	3340      	adds	r3, #64	; 0x40
    2aaa:	681a      	ldr	r2, [r3, #0]
    2aac:	4994      	ldr	r1, [pc, #592]	; (2d00 <Clock_Ip_InitClock+0x584>)
    2aae:	4613      	mov	r3, r2
    2ab0:	00db      	lsls	r3, r3, #3
    2ab2:	4413      	add	r3, r2
    2ab4:	440b      	add	r3, r1
    2ab6:	3301      	adds	r3, #1
    2ab8:	781b      	ldrb	r3, [r3, #0]
    2aba:	461a      	mov	r2, r3
    2abc:	4b93      	ldr	r3, [pc, #588]	; (2d0c <Clock_Ip_InitClock+0x590>)
    2abe:	5c9b      	ldrb	r3, [r3, r2]
    2ac0:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Set(&Config->Plls[Index]);
    2ac2:	4993      	ldr	r1, [pc, #588]	; (2d10 <Clock_Ip_InitClock+0x594>)
    2ac4:	9a02      	ldr	r2, [sp, #8]
    2ac6:	4613      	mov	r3, r2
    2ac8:	009b      	lsls	r3, r3, #2
    2aca:	4413      	add	r3, r2
    2acc:	009b      	lsls	r3, r3, #2
    2ace:	440b      	add	r3, r1
    2ad0:	3304      	adds	r3, #4
    2ad2:	6819      	ldr	r1, [r3, #0]
    2ad4:	9a03      	ldr	r2, [sp, #12]
    2ad6:	4613      	mov	r3, r2
    2ad8:	009b      	lsls	r3, r3, #2
    2ada:	4413      	add	r3, r2
    2adc:	00db      	lsls	r3, r3, #3
    2ade:	3340      	adds	r3, #64	; 0x40
    2ae0:	9a01      	ldr	r2, [sp, #4]
    2ae2:	4413      	add	r3, r2
    2ae4:	4618      	mov	r0, r3
    2ae6:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Configure all plls from configuration asynchronously. Do not enable. */
    2ae8:	9b03      	ldr	r3, [sp, #12]
    2aea:	3301      	adds	r3, #1
    2aec:	9303      	str	r3, [sp, #12]
    2aee:	9b01      	ldr	r3, [sp, #4]
    2af0:	7a9b      	ldrb	r3, [r3, #10]
    2af2:	461a      	mov	r2, r3
    2af4:	9b03      	ldr	r3, [sp, #12]
    2af6:	4293      	cmp	r3, r2
    2af8:	d3cf      	bcc.n	2a9a <Clock_Ip_InitClock+0x31e>
    }

    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2afa:	2300      	movs	r3, #0
    2afc:	9303      	str	r3, [sp, #12]
    2afe:	e029      	b.n	2b54 <Clock_Ip_InitClock+0x3d8>
    {
        CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2b00:	9901      	ldr	r1, [sp, #4]
    2b02:	9a03      	ldr	r2, [sp, #12]
    2b04:	4613      	mov	r3, r2
    2b06:	009b      	lsls	r3, r3, #2
    2b08:	4413      	add	r3, r2
    2b0a:	009b      	lsls	r3, r3, #2
    2b0c:	440b      	add	r3, r1
    2b0e:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2b12:	681a      	ldr	r2, [r3, #0]
    2b14:	497a      	ldr	r1, [pc, #488]	; (2d00 <Clock_Ip_InitClock+0x584>)
    2b16:	4613      	mov	r3, r2
    2b18:	00db      	lsls	r3, r3, #3
    2b1a:	4413      	add	r3, r2
    2b1c:	440b      	add	r3, r1
    2b1e:	3301      	adds	r3, #1
    2b20:	781b      	ldrb	r3, [r3, #0]
    2b22:	461a      	mov	r2, r3
    2b24:	4b7b      	ldr	r3, [pc, #492]	; (2d14 <Clock_Ip_InitClock+0x598>)
    2b26:	5c9b      	ldrb	r3, [r3, r2]
    2b28:	9302      	str	r3, [sp, #8]
        Clock_Ip_axCmuCallbacks[CallbackIndex].Set(&Config->Cmus[Index], Index);
    2b2a:	4a7b      	ldr	r2, [pc, #492]	; (2d18 <Clock_Ip_InitClock+0x59c>)
    2b2c:	9b02      	ldr	r3, [sp, #8]
    2b2e:	011b      	lsls	r3, r3, #4
    2b30:	4413      	add	r3, r2
    2b32:	3304      	adds	r3, #4
    2b34:	681c      	ldr	r4, [r3, #0]
    2b36:	9a03      	ldr	r2, [sp, #12]
    2b38:	4613      	mov	r3, r2
    2b3a:	009b      	lsls	r3, r3, #2
    2b3c:	4413      	add	r3, r2
    2b3e:	009b      	lsls	r3, r3, #2
    2b40:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2b44:	9a01      	ldr	r2, [sp, #4]
    2b46:	4413      	add	r3, r2
    2b48:	9903      	ldr	r1, [sp, #12]
    2b4a:	4618      	mov	r0, r3
    2b4c:	47a0      	blx	r4
    for (Index = 0U; Index < Config->CmusCount; Index++)     /* Set the Clock Monitoring Units that are under mcu control. Cmus are not enabled. */
    2b4e:	9b03      	ldr	r3, [sp, #12]
    2b50:	3301      	adds	r3, #1
    2b52:	9303      	str	r3, [sp, #12]
    2b54:	9b01      	ldr	r3, [sp, #4]
    2b56:	7c9b      	ldrb	r3, [r3, #18]
    2b58:	461a      	mov	r2, r3
    2b5a:	9b03      	ldr	r3, [sp, #12]
    2b5c:	4293      	cmp	r3, r2
    2b5e:	d3cf      	bcc.n	2b00 <Clock_Ip_InitClock+0x384>
    }

    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2b60:	2300      	movs	r3, #0
    2b62:	9303      	str	r3, [sp, #12]
    2b64:	e02a      	b.n	2bbc <Clock_Ip_InitClock+0x440>
    {
        CallbackIndex = Clock_Ip_au8XoscCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Xoscs[Index].Name][CLOCK_IP_CALLBACK]];
    2b66:	9901      	ldr	r1, [sp, #4]
    2b68:	9a03      	ldr	r2, [sp, #12]
    2b6a:	4613      	mov	r3, r2
    2b6c:	009b      	lsls	r3, r3, #2
    2b6e:	4413      	add	r3, r2
    2b70:	009b      	lsls	r3, r3, #2
    2b72:	440b      	add	r3, r1
    2b74:	332c      	adds	r3, #44	; 0x2c
    2b76:	681a      	ldr	r2, [r3, #0]
    2b78:	4961      	ldr	r1, [pc, #388]	; (2d00 <Clock_Ip_InitClock+0x584>)
    2b7a:	4613      	mov	r3, r2
    2b7c:	00db      	lsls	r3, r3, #3
    2b7e:	4413      	add	r3, r2
    2b80:	440b      	add	r3, r1
    2b82:	3301      	adds	r3, #1
    2b84:	781b      	ldrb	r3, [r3, #0]
    2b86:	461a      	mov	r2, r3
    2b88:	4b64      	ldr	r3, [pc, #400]	; (2d1c <Clock_Ip_InitClock+0x5a0>)
    2b8a:	5c9b      	ldrb	r3, [r3, r2]
    2b8c:	9302      	str	r3, [sp, #8]
        Clock_Ip_axExtOscCallbacks[CallbackIndex].Complete(&Config->Xoscs[Index]);
    2b8e:	4964      	ldr	r1, [pc, #400]	; (2d20 <Clock_Ip_InitClock+0x5a4>)
    2b90:	9a02      	ldr	r2, [sp, #8]
    2b92:	4613      	mov	r3, r2
    2b94:	009b      	lsls	r3, r3, #2
    2b96:	4413      	add	r3, r2
    2b98:	009b      	lsls	r3, r3, #2
    2b9a:	440b      	add	r3, r1
    2b9c:	3308      	adds	r3, #8
    2b9e:	6819      	ldr	r1, [r3, #0]
    2ba0:	9a03      	ldr	r2, [sp, #12]
    2ba2:	4613      	mov	r3, r2
    2ba4:	009b      	lsls	r3, r3, #2
    2ba6:	4413      	add	r3, r2
    2ba8:	009b      	lsls	r3, r3, #2
    2baa:	3328      	adds	r3, #40	; 0x28
    2bac:	9a01      	ldr	r2, [sp, #4]
    2bae:	4413      	add	r3, r2
    2bb0:	3304      	adds	r3, #4
    2bb2:	4618      	mov	r0, r3
    2bb4:	4788      	blx	r1
    for (Index = 0U; Index < Config->XoscsCount; Index++)     /* Wait for all xoscs from configuration to lock */
    2bb6:	9b03      	ldr	r3, [sp, #12]
    2bb8:	3301      	adds	r3, #1
    2bba:	9303      	str	r3, [sp, #12]
    2bbc:	9b01      	ldr	r3, [sp, #4]
    2bbe:	7a5b      	ldrb	r3, [r3, #9]
    2bc0:	461a      	mov	r2, r3
    2bc2:	9b03      	ldr	r3, [sp, #12]
    2bc4:	4293      	cmp	r3, r2
    2bc6:	d3ce      	bcc.n	2b66 <Clock_Ip_InitClock+0x3ea>
    }

    /* Configure PLL clock generators */
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2bc8:	2300      	movs	r3, #0
    2bca:	9303      	str	r3, [sp, #12]
    2bcc:	e029      	b.n	2c22 <Clock_Ip_InitClock+0x4a6>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Plls[Index].Name][CLOCK_IP_CALLBACK]];
    2bce:	9901      	ldr	r1, [sp, #4]
    2bd0:	9a03      	ldr	r2, [sp, #12]
    2bd2:	4613      	mov	r3, r2
    2bd4:	009b      	lsls	r3, r3, #2
    2bd6:	4413      	add	r3, r2
    2bd8:	00db      	lsls	r3, r3, #3
    2bda:	440b      	add	r3, r1
    2bdc:	3340      	adds	r3, #64	; 0x40
    2bde:	681a      	ldr	r2, [r3, #0]
    2be0:	4947      	ldr	r1, [pc, #284]	; (2d00 <Clock_Ip_InitClock+0x584>)
    2be2:	4613      	mov	r3, r2
    2be4:	00db      	lsls	r3, r3, #3
    2be6:	4413      	add	r3, r2
    2be8:	440b      	add	r3, r1
    2bea:	3301      	adds	r3, #1
    2bec:	781b      	ldrb	r3, [r3, #0]
    2bee:	461a      	mov	r2, r3
    2bf0:	4b46      	ldr	r3, [pc, #280]	; (2d0c <Clock_Ip_InitClock+0x590>)
    2bf2:	5c9b      	ldrb	r3, [r3, r2]
    2bf4:	9302      	str	r3, [sp, #8]
        Clock_Ip_axPllCallbacks[CallbackIndex].Enable(&Config->Plls[Index]);
    2bf6:	4946      	ldr	r1, [pc, #280]	; (2d10 <Clock_Ip_InitClock+0x594>)
    2bf8:	9a02      	ldr	r2, [sp, #8]
    2bfa:	4613      	mov	r3, r2
    2bfc:	009b      	lsls	r3, r3, #2
    2bfe:	4413      	add	r3, r2
    2c00:	009b      	lsls	r3, r3, #2
    2c02:	440b      	add	r3, r1
    2c04:	330c      	adds	r3, #12
    2c06:	6819      	ldr	r1, [r3, #0]
    2c08:	9a03      	ldr	r2, [sp, #12]
    2c0a:	4613      	mov	r3, r2
    2c0c:	009b      	lsls	r3, r3, #2
    2c0e:	4413      	add	r3, r2
    2c10:	00db      	lsls	r3, r3, #3
    2c12:	3340      	adds	r3, #64	; 0x40
    2c14:	9a01      	ldr	r2, [sp, #4]
    2c16:	4413      	add	r3, r2
    2c18:	4618      	mov	r0, r3
    2c1a:	4788      	blx	r1
    for (Index = 0U; Index < Config->PllsCount; Index++)       /* Enable plls according to configuration asynchronously. Do not wait. */
    2c1c:	9b03      	ldr	r3, [sp, #12]
    2c1e:	3301      	adds	r3, #1
    2c20:	9303      	str	r3, [sp, #12]
    2c22:	9b01      	ldr	r3, [sp, #4]
    2c24:	7a9b      	ldrb	r3, [r3, #10]
    2c26:	461a      	mov	r2, r3
    2c28:	9b03      	ldr	r3, [sp, #12]
    2c2a:	4293      	cmp	r3, r2
    2c2c:	d3cf      	bcc.n	2bce <Clock_Ip_InitClock+0x452>
    }

    /* Configure fractional dividers */
    /* Note: The DFS configuration might actually need to be done after we
     * know that the PLLs are all locked in "Clock_Ip_GetPllStatus". */
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2c2e:	2300      	movs	r3, #0
    2c30:	9303      	str	r3, [sp, #12]
    2c32:	e025      	b.n	2c80 <Clock_Ip_InitClock+0x504>
    {
        CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Config->FracDivs[Index].Name][CLOCK_IP_CALLBACK]];
    2c34:	9a01      	ldr	r2, [sp, #4]
    2c36:	9b03      	ldr	r3, [sp, #12]
    2c38:	3324      	adds	r3, #36	; 0x24
    2c3a:	011b      	lsls	r3, r3, #4
    2c3c:	4413      	add	r3, r2
    2c3e:	3304      	adds	r3, #4
    2c40:	681a      	ldr	r2, [r3, #0]
    2c42:	492f      	ldr	r1, [pc, #188]	; (2d00 <Clock_Ip_InitClock+0x584>)
    2c44:	4613      	mov	r3, r2
    2c46:	00db      	lsls	r3, r3, #3
    2c48:	4413      	add	r3, r2
    2c4a:	440b      	add	r3, r1
    2c4c:	3301      	adds	r3, #1
    2c4e:	781b      	ldrb	r3, [r3, #0]
    2c50:	461a      	mov	r2, r3
    2c52:	4b34      	ldr	r3, [pc, #208]	; (2d24 <Clock_Ip_InitClock+0x5a8>)
    2c54:	5c9b      	ldrb	r3, [r3, r2]
    2c56:	9302      	str	r3, [sp, #8]
        Clock_Ip_axFracDivCallbacks[CallbackIndex].Set(&Config->FracDivs[Index]);
    2c58:	4933      	ldr	r1, [pc, #204]	; (2d28 <Clock_Ip_InitClock+0x5ac>)
    2c5a:	9a02      	ldr	r2, [sp, #8]
    2c5c:	4613      	mov	r3, r2
    2c5e:	005b      	lsls	r3, r3, #1
    2c60:	4413      	add	r3, r2
    2c62:	009b      	lsls	r3, r3, #2
    2c64:	440b      	add	r3, r1
    2c66:	3304      	adds	r3, #4
    2c68:	681b      	ldr	r3, [r3, #0]
    2c6a:	9a03      	ldr	r2, [sp, #12]
    2c6c:	3224      	adds	r2, #36	; 0x24
    2c6e:	0112      	lsls	r2, r2, #4
    2c70:	9901      	ldr	r1, [sp, #4]
    2c72:	440a      	add	r2, r1
    2c74:	3204      	adds	r2, #4
    2c76:	4610      	mov	r0, r2
    2c78:	4798      	blx	r3
    for (Index = 0U; Index < Config->FracDivsCount; Index++)    /* Configure all fractional dividers from configuration asynchronously. Do not wait. */
    2c7a:	9b03      	ldr	r3, [sp, #12]
    2c7c:	3301      	adds	r3, #1
    2c7e:	9303      	str	r3, [sp, #12]
    2c80:	9b01      	ldr	r3, [sp, #4]
    2c82:	7b9b      	ldrb	r3, [r3, #14]
    2c84:	461a      	mov	r2, r3
    2c86:	9b03      	ldr	r3, [sp, #12]
    2c88:	4293      	cmp	r3, r2
    2c8a:	d3d3      	bcc.n	2c34 <Clock_Ip_InitClock+0x4b8>
    }

    DriverContext.ClockTreeIsConsumingPll = FALSE;                                  /* Check if clock tree is using a PLL output */
    2c8c:	4b27      	ldr	r3, [pc, #156]	; (2d2c <Clock_Ip_InitClock+0x5b0>)
    2c8e:	2200      	movs	r2, #0
    2c90:	701a      	strb	r2, [r3, #0]
#if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES))
#if(CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON)
    DriverContext.WaitStatesAreSupported = TRUE;                                    /* Wait states are supported */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
    2c92:	4b26      	ldr	r3, [pc, #152]	; (2d2c <Clock_Ip_InitClock+0x5b0>)
    2c94:	2200      	movs	r2, #0
    2c96:	705a      	strb	r2, [r3, #1]
#endif /*CLOCK_IP_SUPPORTS_WAIT_STATES == STD_ON */
#else 
    DriverContext.WaitStatesAreSupported = FALSE;                                   /* Wait states are not supported */ 
#endif /* #if (defined(CLOCK_IP_SUPPORTS_WAIT_STATES)) */
    DriverContext.HwPllsNo = CLOCK_IP_NUMBER_OF_HARDWARE_PLL;                       /* Number of plls */
    2c98:	4b24      	ldr	r3, [pc, #144]	; (2d2c <Clock_Ip_InitClock+0x5b0>)
    2c9a:	2201      	movs	r2, #1
    2c9c:	709a      	strb	r2, [r3, #2]
    DriverContext.HwDfsNo = CLOCK_IP_NUMBER_OF_HARDWARE_DFS;                        /* Number of fractional dividers */
    2c9e:	4b23      	ldr	r3, [pc, #140]	; (2d2c <Clock_Ip_InitClock+0x5b0>)
    2ca0:	2200      	movs	r2, #0
    2ca2:	70da      	strb	r2, [r3, #3]


    /* Configure wait states */
    Clock_Ip_SetWaitStates();
    2ca4:	f000 fa9c 	bl	31e0 <Clock_Ip_SetWaitStates>
    /* Switch the clock multiplexers under MCU control to the configured source clocks */
    /* Note: if the configured source clock of a ClockMux is the output clock of a PLL/DFS,
     * the configuration will be skipped and the respective ClockMux will be switched in
     * the "Clock_Ip_DistributePllClock" function instead, when the source clock will have
     * stabilized already. */
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2ca8:	2300      	movs	r3, #0
    2caa:	9303      	str	r3, [sp, #12]
    2cac:	e04c      	b.n	2d48 <Clock_Ip_InitClock+0x5cc>
    {
        if ((PLL_TYPE != Clock_Ip_aeSourceTypeClockName[Config->Selectors[Index].Value]))
    2cae:	9a01      	ldr	r2, [sp, #4]
    2cb0:	9b03      	ldr	r3, [sp, #12]
    2cb2:	330d      	adds	r3, #13
    2cb4:	00db      	lsls	r3, r3, #3
    2cb6:	4413      	add	r3, r2
    2cb8:	685b      	ldr	r3, [r3, #4]
    2cba:	4a1d      	ldr	r2, [pc, #116]	; (2d30 <Clock_Ip_InitClock+0x5b4>)
    2cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2cc0:	2b03      	cmp	r3, #3
    2cc2:	d03b      	beq.n	2d3c <Clock_Ip_InitClock+0x5c0>
        {

            CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2cc4:	9b01      	ldr	r3, [sp, #4]
    2cc6:	9a03      	ldr	r2, [sp, #12]
    2cc8:	320d      	adds	r2, #13
    2cca:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2cce:	490c      	ldr	r1, [pc, #48]	; (2d00 <Clock_Ip_InitClock+0x584>)
    2cd0:	4613      	mov	r3, r2
    2cd2:	00db      	lsls	r3, r3, #3
    2cd4:	4413      	add	r3, r2
    2cd6:	440b      	add	r3, r1
    2cd8:	3301      	adds	r3, #1
    2cda:	781b      	ldrb	r3, [r3, #0]
    2cdc:	461a      	mov	r2, r3
    2cde:	4b15      	ldr	r3, [pc, #84]	; (2d34 <Clock_Ip_InitClock+0x5b8>)
    2ce0:	5c9b      	ldrb	r3, [r3, r2]
    2ce2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Config->Selectors[Index]);
    2ce4:	4a14      	ldr	r2, [pc, #80]	; (2d38 <Clock_Ip_InitClock+0x5bc>)
    2ce6:	9b02      	ldr	r3, [sp, #8]
    2ce8:	00db      	lsls	r3, r3, #3
    2cea:	4413      	add	r3, r2
    2cec:	685b      	ldr	r3, [r3, #4]
    2cee:	9a03      	ldr	r2, [sp, #12]
    2cf0:	320d      	adds	r2, #13
    2cf2:	00d2      	lsls	r2, r2, #3
    2cf4:	9901      	ldr	r1, [sp, #4]
    2cf6:	440a      	add	r2, r1
    2cf8:	4610      	mov	r0, r2
    2cfa:	4798      	blx	r3
    2cfc:	e021      	b.n	2d42 <Clock_Ip_InitClock+0x5c6>
    2cfe:	bf00      	nop
    2d00:	0000fab4 	.word	0x0000fab4
    2d04:	0000fa24 	.word	0x0000fa24
    2d08:	00010000 	.word	0x00010000
    2d0c:	0000fa74 	.word	0x0000fa74
    2d10:	000100c0 	.word	0x000100c0
    2d14:	0000faa4 	.word	0x0000faa4
    2d18:	000100b0 	.word	0x000100b0
    2d1c:	0000fa34 	.word	0x0000fa34
    2d20:	00010008 	.word	0x00010008
    2d24:	0000fa64 	.word	0x0000fa64
    2d28:	00010030 	.word	0x00010030
    2d2c:	1fff8b58 	.word	0x1fff8b58
    2d30:	0000ff00 	.word	0x0000ff00
    2d34:	0000fa84 	.word	0x0000fa84
    2d38:	000100ec 	.word	0x000100ec
        }
        else
        {
            /* At least one mux is consuming pll */
            DriverContext.ClockTreeIsConsumingPll = TRUE;
    2d3c:	4b3a      	ldr	r3, [pc, #232]	; (2e28 <Clock_Ip_InitClock+0x6ac>)
    2d3e:	2201      	movs	r2, #1
    2d40:	701a      	strb	r2, [r3, #0]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)    /* Set only if selected inputs are not clocked from PLLs */
    2d42:	9b03      	ldr	r3, [sp, #12]
    2d44:	3301      	adds	r3, #1
    2d46:	9303      	str	r3, [sp, #12]
    2d48:	9b01      	ldr	r3, [sp, #4]
    2d4a:	7adb      	ldrb	r3, [r3, #11]
    2d4c:	461a      	mov	r2, r3
    2d4e:	9b03      	ldr	r3, [sp, #12]
    2d50:	4293      	cmp	r3, r2
    2d52:	d3ac      	bcc.n	2cae <Clock_Ip_InitClock+0x532>
        }
    }

    /* Check if the clock tree is using a PLL output */
    if ( FALSE == DriverContext.ClockTreeIsConsumingPll )
    2d54:	4b34      	ldr	r3, [pc, #208]	; (2e28 <Clock_Ip_InitClock+0x6ac>)
    2d56:	781b      	ldrb	r3, [r3, #0]
    2d58:	f083 0301 	eor.w	r3, r3, #1
    2d5c:	b2db      	uxtb	r3, r3
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d05e      	beq.n	2e20 <Clock_Ip_InitClock+0x6a4>
    {
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2d62:	2300      	movs	r3, #0
    2d64:	9303      	str	r3, [sp, #12]
    2d66:	e01f      	b.n	2da8 <Clock_Ip_InitClock+0x62c>
        {
            CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2d68:	9a01      	ldr	r2, [sp, #4]
    2d6a:	9b03      	ldr	r3, [sp, #12]
    2d6c:	334e      	adds	r3, #78	; 0x4e
    2d6e:	00db      	lsls	r3, r3, #3
    2d70:	4413      	add	r3, r2
    2d72:	685a      	ldr	r2, [r3, #4]
    2d74:	492d      	ldr	r1, [pc, #180]	; (2e2c <Clock_Ip_InitClock+0x6b0>)
    2d76:	4613      	mov	r3, r2
    2d78:	00db      	lsls	r3, r3, #3
    2d7a:	4413      	add	r3, r2
    2d7c:	440b      	add	r3, r1
    2d7e:	3301      	adds	r3, #1
    2d80:	781b      	ldrb	r3, [r3, #0]
    2d82:	461a      	mov	r2, r3
    2d84:	4b2a      	ldr	r3, [pc, #168]	; (2e30 <Clock_Ip_InitClock+0x6b4>)
    2d86:	5c9b      	ldrb	r3, [r3, r2]
    2d88:	9302      	str	r3, [sp, #8]
            Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Config->Gates[Index]);
    2d8a:	4a2a      	ldr	r2, [pc, #168]	; (2e34 <Clock_Ip_InitClock+0x6b8>)
    2d8c:	9b02      	ldr	r3, [sp, #8]
    2d8e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2d92:	9a03      	ldr	r2, [sp, #12]
    2d94:	324e      	adds	r2, #78	; 0x4e
    2d96:	00d2      	lsls	r2, r2, #3
    2d98:	9901      	ldr	r1, [sp, #4]
    2d9a:	440a      	add	r2, r1
    2d9c:	3204      	adds	r2, #4
    2d9e:	4610      	mov	r0, r2
    2da0:	4798      	blx	r3
        for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2da2:	9b03      	ldr	r3, [sp, #12]
    2da4:	3301      	adds	r3, #1
    2da6:	9303      	str	r3, [sp, #12]
    2da8:	9b01      	ldr	r3, [sp, #4]
    2daa:	7c1b      	ldrb	r3, [r3, #16]
    2dac:	461a      	mov	r2, r3
    2dae:	9b03      	ldr	r3, [sp, #12]
    2db0:	4293      	cmp	r3, r2
    2db2:	d3d9      	bcc.n	2d68 <Clock_Ip_InitClock+0x5ec>
        }

        /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2db4:	2300      	movs	r3, #0
    2db6:	9303      	str	r3, [sp, #12]
    2db8:	e028      	b.n	2e0c <Clock_Ip_InitClock+0x690>
        {
            CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Config->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    2dba:	9901      	ldr	r1, [sp, #4]
    2dbc:	9a03      	ldr	r2, [sp, #12]
    2dbe:	4613      	mov	r3, r2
    2dc0:	009b      	lsls	r3, r3, #2
    2dc2:	4413      	add	r3, r2
    2dc4:	009b      	lsls	r3, r3, #2
    2dc6:	440b      	add	r3, r1
    2dc8:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2dcc:	681a      	ldr	r2, [r3, #0]
    2dce:	4917      	ldr	r1, [pc, #92]	; (2e2c <Clock_Ip_InitClock+0x6b0>)
    2dd0:	4613      	mov	r3, r2
    2dd2:	00db      	lsls	r3, r3, #3
    2dd4:	4413      	add	r3, r2
    2dd6:	440b      	add	r3, r1
    2dd8:	3301      	adds	r3, #1
    2dda:	781b      	ldrb	r3, [r3, #0]
    2ddc:	461a      	mov	r2, r3
    2dde:	4b16      	ldr	r3, [pc, #88]	; (2e38 <Clock_Ip_InitClock+0x6bc>)
    2de0:	5c9b      	ldrb	r3, [r3, r2]
    2de2:	9302      	str	r3, [sp, #8]
            Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Config->Cmus[Index]);
    2de4:	4a15      	ldr	r2, [pc, #84]	; (2e3c <Clock_Ip_InitClock+0x6c0>)
    2de6:	9b02      	ldr	r3, [sp, #8]
    2de8:	011b      	lsls	r3, r3, #4
    2dea:	4413      	add	r3, r2
    2dec:	330c      	adds	r3, #12
    2dee:	6819      	ldr	r1, [r3, #0]
    2df0:	9a03      	ldr	r2, [sp, #12]
    2df2:	4613      	mov	r3, r2
    2df4:	009b      	lsls	r3, r3, #2
    2df6:	4413      	add	r3, r2
    2df8:	009b      	lsls	r3, r3, #2
    2dfa:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    2dfe:	9a01      	ldr	r2, [sp, #4]
    2e00:	4413      	add	r3, r2
    2e02:	4618      	mov	r0, r3
    2e04:	4788      	blx	r1
        for (Index = 0U; Index < Config->CmusCount; Index++)
    2e06:	9b03      	ldr	r3, [sp, #12]
    2e08:	3301      	adds	r3, #1
    2e0a:	9303      	str	r3, [sp, #12]
    2e0c:	9b01      	ldr	r3, [sp, #4]
    2e0e:	7c9b      	ldrb	r3, [r3, #18]
    2e10:	461a      	mov	r2, r3
    2e12:	9b03      	ldr	r3, [sp, #12]
    2e14:	4293      	cmp	r3, r2
    2e16:	d3d0      	bcc.n	2dba <Clock_Ip_InitClock+0x63e>
        }
        /* Disable safe clock if it is supported by platform and it is configured/required. */
        /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
         * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
        Clock_Ip_Command(Config, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    2e18:	2104      	movs	r1, #4
    2e1a:	9801      	ldr	r0, [sp, #4]
    2e1c:	f002 ff48 	bl	5cb0 <Clock_Ip_Command>
    {
        /* The clock tree is using at least one PLL/DFS output clock as source. */
        /* The user must wait until the PLLs and DFSs are locked by polling Clock_Ip_GetPllStatus */
        /* and then call "Clock_Ip_DistributePllClock" */
    }
}
    2e20:	bf00      	nop
    2e22:	b004      	add	sp, #16
    2e24:	bd10      	pop	{r4, pc}
    2e26:	bf00      	nop
    2e28:	1fff8b58 	.word	0x1fff8b58
    2e2c:	0000fab4 	.word	0x0000fab4
    2e30:	0000fa54 	.word	0x0000fa54
    2e34:	0001003c 	.word	0x0001003c
    2e38:	0000faa4 	.word	0x0000faa4
    2e3c:	000100b0 	.word	0x000100b0

00002e40 <Clock_Ip_GetPllStatus>:
 * will calculate frequencies only.
 *
 * @implements Clock_Ip_GetPllStatus_Activity
 * END**********************************************************************************/
Clock_Ip_PllStatusType Clock_Ip_GetPllStatus(void)
{
    2e40:	b500      	push	{lr}
    2e42:	b087      	sub	sp, #28
    Clock_Ip_PllStatusType RetValue = CLOCK_IP_PLL_STATUS_UNDEFINED;
    2e44:	2302      	movs	r3, #2
    2e46:	9305      	str	r3, [sp, #20]
    Clock_Ip_DfsStatusType DfsStatus;

    uint32 Index;
    uint32 CallbackIndex;

    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2e48:	2300      	movs	r3, #0
    2e4a:	9304      	str	r3, [sp, #16]
    2e4c:	e02c      	b.n	2ea8 <Clock_Ip_GetPllStatus+0x68>
    {
        CallbackIndex = Clock_Ip_au8PllCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwPllName[Index]][CLOCK_IP_CALLBACK]];
    2e4e:	4a36      	ldr	r2, [pc, #216]	; (2f28 <Clock_Ip_GetPllStatus+0xe8>)
    2e50:	9b04      	ldr	r3, [sp, #16]
    2e52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2e56:	4935      	ldr	r1, [pc, #212]	; (2f2c <Clock_Ip_GetPllStatus+0xec>)
    2e58:	4613      	mov	r3, r2
    2e5a:	00db      	lsls	r3, r3, #3
    2e5c:	4413      	add	r3, r2
    2e5e:	440b      	add	r3, r1
    2e60:	3301      	adds	r3, #1
    2e62:	781b      	ldrb	r3, [r3, #0]
    2e64:	461a      	mov	r2, r3
    2e66:	4b32      	ldr	r3, [pc, #200]	; (2f30 <Clock_Ip_GetPllStatus+0xf0>)
    2e68:	5c9b      	ldrb	r3, [r3, r2]
    2e6a:	9303      	str	r3, [sp, #12]
        PllStatus = Clock_Ip_axPllCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwPllName[Index]);
    2e6c:	4931      	ldr	r1, [pc, #196]	; (2f34 <Clock_Ip_GetPllStatus+0xf4>)
    2e6e:	9a03      	ldr	r2, [sp, #12]
    2e70:	4613      	mov	r3, r2
    2e72:	009b      	lsls	r3, r3, #2
    2e74:	4413      	add	r3, r2
    2e76:	009b      	lsls	r3, r3, #2
    2e78:	440b      	add	r3, r1
    2e7a:	3308      	adds	r3, #8
    2e7c:	681b      	ldr	r3, [r3, #0]
    2e7e:	492a      	ldr	r1, [pc, #168]	; (2f28 <Clock_Ip_GetPllStatus+0xe8>)
    2e80:	9a04      	ldr	r2, [sp, #16]
    2e82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2e86:	4610      	mov	r0, r2
    2e88:	4798      	blx	r3
    2e8a:	9002      	str	r0, [sp, #8]
        if (STATUS_PLL_UNLOCKED == PllStatus)
    2e8c:	9b02      	ldr	r3, [sp, #8]
    2e8e:	2b01      	cmp	r3, #1
    2e90:	d102      	bne.n	2e98 <Clock_Ip_GetPllStatus+0x58>
        {
            RetValue = CLOCK_IP_PLL_UNLOCKED;
    2e92:	2301      	movs	r3, #1
    2e94:	9305      	str	r3, [sp, #20]
            break;
    2e96:	e00d      	b.n	2eb4 <Clock_Ip_GetPllStatus+0x74>
        }
        else
        {
            if (STATUS_PLL_LOCKED == PllStatus)
    2e98:	9b02      	ldr	r3, [sp, #8]
    2e9a:	2b02      	cmp	r3, #2
    2e9c:	d101      	bne.n	2ea2 <Clock_Ip_GetPllStatus+0x62>
            {
                RetValue = CLOCK_IP_PLL_LOCKED;
    2e9e:	2300      	movs	r3, #0
    2ea0:	9305      	str	r3, [sp, #20]
    for (Index = 0U; Index < DriverContext.HwPllsNo; Index++)
    2ea2:	9b04      	ldr	r3, [sp, #16]
    2ea4:	3301      	adds	r3, #1
    2ea6:	9304      	str	r3, [sp, #16]
    2ea8:	4b23      	ldr	r3, [pc, #140]	; (2f38 <Clock_Ip_GetPllStatus+0xf8>)
    2eaa:	789b      	ldrb	r3, [r3, #2]
    2eac:	461a      	mov	r2, r3
    2eae:	9b04      	ldr	r3, [sp, #16]
    2eb0:	4293      	cmp	r3, r2
    2eb2:	d3cc      	bcc.n	2e4e <Clock_Ip_GetPllStatus+0xe>
            }
        }
    }

    if (CLOCK_IP_PLL_LOCKED == RetValue)
    2eb4:	9b05      	ldr	r3, [sp, #20]
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	d130      	bne.n	2f1c <Clock_Ip_GetPllStatus+0xdc>
    {
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2eba:	2300      	movs	r3, #0
    2ebc:	9304      	str	r3, [sp, #16]
    2ebe:	e027      	b.n	2f10 <Clock_Ip_GetPllStatus+0xd0>
        {
            CallbackIndex = Clock_Ip_au8FractionalDividerCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_aeHwDfsName[Index]][CLOCK_IP_CALLBACK]];
    2ec0:	4a1e      	ldr	r2, [pc, #120]	; (2f3c <Clock_Ip_GetPllStatus+0xfc>)
    2ec2:	9b04      	ldr	r3, [sp, #16]
    2ec4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2ec8:	4918      	ldr	r1, [pc, #96]	; (2f2c <Clock_Ip_GetPllStatus+0xec>)
    2eca:	4613      	mov	r3, r2
    2ecc:	00db      	lsls	r3, r3, #3
    2ece:	4413      	add	r3, r2
    2ed0:	440b      	add	r3, r1
    2ed2:	3301      	adds	r3, #1
    2ed4:	781b      	ldrb	r3, [r3, #0]
    2ed6:	461a      	mov	r2, r3
    2ed8:	4b19      	ldr	r3, [pc, #100]	; (2f40 <Clock_Ip_GetPllStatus+0x100>)
    2eda:	5c9b      	ldrb	r3, [r3, r2]
    2edc:	9303      	str	r3, [sp, #12]
            DfsStatus = Clock_Ip_axFracDivCallbacks[CallbackIndex].Complete(Clock_Ip_aeHwDfsName[Index]);
    2ede:	4919      	ldr	r1, [pc, #100]	; (2f44 <Clock_Ip_GetPllStatus+0x104>)
    2ee0:	9a03      	ldr	r2, [sp, #12]
    2ee2:	4613      	mov	r3, r2
    2ee4:	005b      	lsls	r3, r3, #1
    2ee6:	4413      	add	r3, r2
    2ee8:	009b      	lsls	r3, r3, #2
    2eea:	440b      	add	r3, r1
    2eec:	3308      	adds	r3, #8
    2eee:	681b      	ldr	r3, [r3, #0]
    2ef0:	4912      	ldr	r1, [pc, #72]	; (2f3c <Clock_Ip_GetPllStatus+0xfc>)
    2ef2:	9a04      	ldr	r2, [sp, #16]
    2ef4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    2ef8:	4610      	mov	r0, r2
    2efa:	4798      	blx	r3
    2efc:	9001      	str	r0, [sp, #4]
            if (STATUS_DFS_UNLOCKED == DfsStatus)
    2efe:	9b01      	ldr	r3, [sp, #4]
    2f00:	2b01      	cmp	r3, #1
    2f02:	d102      	bne.n	2f0a <Clock_Ip_GetPllStatus+0xca>
            {
                RetValue = CLOCK_IP_PLL_UNLOCKED;
    2f04:	2301      	movs	r3, #1
    2f06:	9305      	str	r3, [sp, #20]
                break;
    2f08:	e008      	b.n	2f1c <Clock_Ip_GetPllStatus+0xdc>
        for (Index = 0U; Index < DriverContext.HwDfsNo; Index++)
    2f0a:	9b04      	ldr	r3, [sp, #16]
    2f0c:	3301      	adds	r3, #1
    2f0e:	9304      	str	r3, [sp, #16]
    2f10:	4b09      	ldr	r3, [pc, #36]	; (2f38 <Clock_Ip_GetPllStatus+0xf8>)
    2f12:	78db      	ldrb	r3, [r3, #3]
    2f14:	461a      	mov	r2, r3
    2f16:	9b04      	ldr	r3, [sp, #16]
    2f18:	4293      	cmp	r3, r2
    2f1a:	d3d1      	bcc.n	2ec0 <Clock_Ip_GetPllStatus+0x80>
            }
        }
    }

    return RetValue;
    2f1c:	9b05      	ldr	r3, [sp, #20]
}
    2f1e:	4618      	mov	r0, r3
    2f20:	b007      	add	sp, #28
    2f22:	f85d fb04 	ldr.w	pc, [sp], #4
    2f26:	bf00      	nop
    2f28:	0000ffbc 	.word	0x0000ffbc
    2f2c:	0000fab4 	.word	0x0000fab4
    2f30:	0000fa74 	.word	0x0000fa74
    2f34:	000100c0 	.word	0x000100c0
    2f38:	1fff8b58 	.word	0x1fff8b58
    2f3c:	0000ffc0 	.word	0x0000ffc0
    2f40:	0000fa64 	.word	0x0000fa64
    2f44:	00010030 	.word	0x00010030

00002f48 <Clock_Ip_DistributePll>:
 * The function will not distribute the PLL clock if the driver state does not allow it, or the PLL is not stable.
 *
 * @implements Clock_Ip_DistributePll_Activity
 * END**********************************************************************************/
void Clock_Ip_DistributePll(void)
{
    2f48:	b500      	push	{lr}
    2f4a:	b083      	sub	sp, #12
    uint32 CallbackIndex;

    CLOCK_IP_DEV_ASSERT(NULL_PTR != Clock_Ip_pxConfig);
    /* 'Clock_Ip_pxConfig' is set by Clock_Ip_InitClock().
     *  It doesn't make sense to call PLL distribution without clock initialization. */
    if (NULL_PTR != Clock_Ip_pxConfig)
    2f4c:	4b55      	ldr	r3, [pc, #340]	; (30a4 <Clock_Ip_DistributePll+0x15c>)
    2f4e:	681b      	ldr	r3, [r3, #0]
    2f50:	2b00      	cmp	r3, #0
    2f52:	f000 80a2 	beq.w	309a <Clock_Ip_DistributePll+0x152>
    {
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2f56:	2300      	movs	r3, #0
    2f58:	9301      	str	r3, [sp, #4]
    2f5a:	e02c      	b.n	2fb6 <Clock_Ip_DistributePll+0x6e>
        {
            if (PLL_TYPE == Clock_Ip_aeSourceTypeClockName[Clock_Ip_pxConfig->Selectors[Index].Value])
    2f5c:	4b51      	ldr	r3, [pc, #324]	; (30a4 <Clock_Ip_DistributePll+0x15c>)
    2f5e:	681a      	ldr	r2, [r3, #0]
    2f60:	9b01      	ldr	r3, [sp, #4]
    2f62:	330d      	adds	r3, #13
    2f64:	00db      	lsls	r3, r3, #3
    2f66:	4413      	add	r3, r2
    2f68:	685b      	ldr	r3, [r3, #4]
    2f6a:	4a4f      	ldr	r2, [pc, #316]	; (30a8 <Clock_Ip_DistributePll+0x160>)
    2f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2f70:	2b03      	cmp	r3, #3
    2f72:	d11d      	bne.n	2fb0 <Clock_Ip_DistributePll+0x68>
            {

                CallbackIndex = Clock_Ip_au8SelectorCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Selectors[Index].Name][CLOCK_IP_CALLBACK]];
    2f74:	4b4b      	ldr	r3, [pc, #300]	; (30a4 <Clock_Ip_DistributePll+0x15c>)
    2f76:	681b      	ldr	r3, [r3, #0]
    2f78:	9a01      	ldr	r2, [sp, #4]
    2f7a:	320d      	adds	r2, #13
    2f7c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
    2f80:	494a      	ldr	r1, [pc, #296]	; (30ac <Clock_Ip_DistributePll+0x164>)
    2f82:	4613      	mov	r3, r2
    2f84:	00db      	lsls	r3, r3, #3
    2f86:	4413      	add	r3, r2
    2f88:	440b      	add	r3, r1
    2f8a:	3301      	adds	r3, #1
    2f8c:	781b      	ldrb	r3, [r3, #0]
    2f8e:	461a      	mov	r2, r3
    2f90:	4b47      	ldr	r3, [pc, #284]	; (30b0 <Clock_Ip_DistributePll+0x168>)
    2f92:	5c9b      	ldrb	r3, [r3, r2]
    2f94:	9300      	str	r3, [sp, #0]
                Clock_Ip_axSelectorCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Selectors[Index]);
    2f96:	4a47      	ldr	r2, [pc, #284]	; (30b4 <Clock_Ip_DistributePll+0x16c>)
    2f98:	9b00      	ldr	r3, [sp, #0]
    2f9a:	00db      	lsls	r3, r3, #3
    2f9c:	4413      	add	r3, r2
    2f9e:	685b      	ldr	r3, [r3, #4]
    2fa0:	4a40      	ldr	r2, [pc, #256]	; (30a4 <Clock_Ip_DistributePll+0x15c>)
    2fa2:	6811      	ldr	r1, [r2, #0]
    2fa4:	9a01      	ldr	r2, [sp, #4]
    2fa6:	320d      	adds	r2, #13
    2fa8:	00d2      	lsls	r2, r2, #3
    2faa:	440a      	add	r2, r1
    2fac:	4610      	mov	r0, r2
    2fae:	4798      	blx	r3
        for (Index = 0U; Index < Clock_Ip_pxConfig->SelectorsCount; Index++)    /* Set only if selected inputs are clocked from PLLs */
    2fb0:	9b01      	ldr	r3, [sp, #4]
    2fb2:	3301      	adds	r3, #1
    2fb4:	9301      	str	r3, [sp, #4]
    2fb6:	4b3b      	ldr	r3, [pc, #236]	; (30a4 <Clock_Ip_DistributePll+0x15c>)
    2fb8:	681b      	ldr	r3, [r3, #0]
    2fba:	7adb      	ldrb	r3, [r3, #11]
    2fbc:	461a      	mov	r2, r3
    2fbe:	9b01      	ldr	r3, [sp, #4]
    2fc0:	4293      	cmp	r3, r2
    2fc2:	d3cb      	bcc.n	2f5c <Clock_Ip_DistributePll+0x14>
        }

        /* In the case of PLL is enabled but PLL clock source is not used by any clock Mux.
           So, no need to re-configure for CMUs, because they are configured by Clock_Ip_InitClock */
        /* Check if the clock tree is using a PLL output */
        if ( DriverContext.ClockTreeIsConsumingPll )
    2fc4:	4b3c      	ldr	r3, [pc, #240]	; (30b8 <Clock_Ip_DistributePll+0x170>)
    2fc6:	781b      	ldrb	r3, [r3, #0]
    2fc8:	2b00      	cmp	r3, #0
    2fca:	d066      	beq.n	309a <Clock_Ip_DistributePll+0x152>
        {
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    2fcc:	2300      	movs	r3, #0
    2fce:	9301      	str	r3, [sp, #4]
    2fd0:	e021      	b.n	3016 <Clock_Ip_DistributePll+0xce>
            {
                CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Gates[Index].Name][CLOCK_IP_CALLBACK]];
    2fd2:	4b34      	ldr	r3, [pc, #208]	; (30a4 <Clock_Ip_DistributePll+0x15c>)
    2fd4:	681a      	ldr	r2, [r3, #0]
    2fd6:	9b01      	ldr	r3, [sp, #4]
    2fd8:	334e      	adds	r3, #78	; 0x4e
    2fda:	00db      	lsls	r3, r3, #3
    2fdc:	4413      	add	r3, r2
    2fde:	685a      	ldr	r2, [r3, #4]
    2fe0:	4932      	ldr	r1, [pc, #200]	; (30ac <Clock_Ip_DistributePll+0x164>)
    2fe2:	4613      	mov	r3, r2
    2fe4:	00db      	lsls	r3, r3, #3
    2fe6:	4413      	add	r3, r2
    2fe8:	440b      	add	r3, r1
    2fea:	3301      	adds	r3, #1
    2fec:	781b      	ldrb	r3, [r3, #0]
    2fee:	461a      	mov	r2, r3
    2ff0:	4b32      	ldr	r3, [pc, #200]	; (30bc <Clock_Ip_DistributePll+0x174>)
    2ff2:	5c9b      	ldrb	r3, [r3, r2]
    2ff4:	9300      	str	r3, [sp, #0]
                Clock_Ip_axGateCallbacks[CallbackIndex].Set(&Clock_Ip_pxConfig->Gates[Index]);
    2ff6:	4a32      	ldr	r2, [pc, #200]	; (30c0 <Clock_Ip_DistributePll+0x178>)
    2ff8:	9b00      	ldr	r3, [sp, #0]
    2ffa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    2ffe:	4a29      	ldr	r2, [pc, #164]	; (30a4 <Clock_Ip_DistributePll+0x15c>)
    3000:	6811      	ldr	r1, [r2, #0]
    3002:	9a01      	ldr	r2, [sp, #4]
    3004:	324e      	adds	r2, #78	; 0x4e
    3006:	00d2      	lsls	r2, r2, #3
    3008:	440a      	add	r2, r1
    300a:	3204      	adds	r2, #4
    300c:	4610      	mov	r0, r2
    300e:	4798      	blx	r3
            for (Index = 0U; Index < Clock_Ip_pxConfig->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    3010:	9b01      	ldr	r3, [sp, #4]
    3012:	3301      	adds	r3, #1
    3014:	9301      	str	r3, [sp, #4]
    3016:	4b23      	ldr	r3, [pc, #140]	; (30a4 <Clock_Ip_DistributePll+0x15c>)
    3018:	681b      	ldr	r3, [r3, #0]
    301a:	7c1b      	ldrb	r3, [r3, #16]
    301c:	461a      	mov	r2, r3
    301e:	9b01      	ldr	r3, [sp, #4]
    3020:	4293      	cmp	r3, r2
    3022:	d3d6      	bcc.n	2fd2 <Clock_Ip_DistributePll+0x8a>
            }

            /* Enable the Clock Monitoring Units ( CMU0 .. n ) according to configuration. */
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    3024:	2300      	movs	r3, #0
    3026:	9301      	str	r3, [sp, #4]
    3028:	e02a      	b.n	3080 <Clock_Ip_DistributePll+0x138>
            {
                CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[Clock_Ip_pxConfig->Cmus[Index].Name][CLOCK_IP_CALLBACK]];
    302a:	4b1e      	ldr	r3, [pc, #120]	; (30a4 <Clock_Ip_DistributePll+0x15c>)
    302c:	6819      	ldr	r1, [r3, #0]
    302e:	9a01      	ldr	r2, [sp, #4]
    3030:	4613      	mov	r3, r2
    3032:	009b      	lsls	r3, r3, #2
    3034:	4413      	add	r3, r2
    3036:	009b      	lsls	r3, r3, #2
    3038:	440b      	add	r3, r1
    303a:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    303e:	681a      	ldr	r2, [r3, #0]
    3040:	491a      	ldr	r1, [pc, #104]	; (30ac <Clock_Ip_DistributePll+0x164>)
    3042:	4613      	mov	r3, r2
    3044:	00db      	lsls	r3, r3, #3
    3046:	4413      	add	r3, r2
    3048:	440b      	add	r3, r1
    304a:	3301      	adds	r3, #1
    304c:	781b      	ldrb	r3, [r3, #0]
    304e:	461a      	mov	r2, r3
    3050:	4b1c      	ldr	r3, [pc, #112]	; (30c4 <Clock_Ip_DistributePll+0x17c>)
    3052:	5c9b      	ldrb	r3, [r3, r2]
    3054:	9300      	str	r3, [sp, #0]
                Clock_Ip_axCmuCallbacks[CallbackIndex].Enable(&Clock_Ip_pxConfig->Cmus[Index]);
    3056:	4a1c      	ldr	r2, [pc, #112]	; (30c8 <Clock_Ip_DistributePll+0x180>)
    3058:	9b00      	ldr	r3, [sp, #0]
    305a:	011b      	lsls	r3, r3, #4
    305c:	4413      	add	r3, r2
    305e:	330c      	adds	r3, #12
    3060:	6819      	ldr	r1, [r3, #0]
    3062:	4b10      	ldr	r3, [pc, #64]	; (30a4 <Clock_Ip_DistributePll+0x15c>)
    3064:	6818      	ldr	r0, [r3, #0]
    3066:	9a01      	ldr	r2, [sp, #4]
    3068:	4613      	mov	r3, r2
    306a:	009b      	lsls	r3, r3, #2
    306c:	4413      	add	r3, r2
    306e:	009b      	lsls	r3, r3, #2
    3070:	f503 7374 	add.w	r3, r3, #976	; 0x3d0
    3074:	4403      	add	r3, r0
    3076:	4618      	mov	r0, r3
    3078:	4788      	blx	r1
            for (Index = 0U; Index < Clock_Ip_pxConfig->CmusCount; Index++)
    307a:	9b01      	ldr	r3, [sp, #4]
    307c:	3301      	adds	r3, #1
    307e:	9301      	str	r3, [sp, #4]
    3080:	4b08      	ldr	r3, [pc, #32]	; (30a4 <Clock_Ip_DistributePll+0x15c>)
    3082:	681b      	ldr	r3, [r3, #0]
    3084:	7c9b      	ldrb	r3, [r3, #18]
    3086:	461a      	mov	r2, r3
    3088:	9b01      	ldr	r3, [sp, #4]
    308a:	4293      	cmp	r3, r2
    308c:	d3cd      	bcc.n	302a <Clock_Ip_DistributePll+0xe2>
            }

            /* Disable safe clock if it is supported by platform and it is configured/required. */
            /* Note: Safe clock is the fast internal oscillator clock. It is clocking the clock tree until pll is distributed.
             * At the end of configuration it can be disabled if it is supported on this platform and required/configured. */
            Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND);
    308e:	4b05      	ldr	r3, [pc, #20]	; (30a4 <Clock_Ip_DistributePll+0x15c>)
    3090:	681b      	ldr	r3, [r3, #0]
    3092:	2104      	movs	r1, #4
    3094:	4618      	mov	r0, r3
    3096:	f002 fe0b 	bl	5cb0 <Clock_Ip_Command>
        }
    }
}
    309a:	bf00      	nop
    309c:	b003      	add	sp, #12
    309e:	f85d fb04 	ldr.w	pc, [sp], #4
    30a2:	bf00      	nop
    30a4:	1fff8b50 	.word	0x1fff8b50
    30a8:	0000ff00 	.word	0x0000ff00
    30ac:	0000fab4 	.word	0x0000fab4
    30b0:	0000fa84 	.word	0x0000fa84
    30b4:	000100ec 	.word	0x000100ec
    30b8:	1fff8b58 	.word	0x1fff8b58
    30bc:	0000fa54 	.word	0x0000fa54
    30c0:	0001003c 	.word	0x0001003c
    30c4:	0000faa4 	.word	0x0000faa4
    30c8:	000100b0 	.word	0x000100b0

000030cc <Clock_Ip_DisableClockMonitor>:
 * Description   : Disables a clock monitor.
 *
 * @implements Clock_Ip_DisableClockMonitor_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableClockMonitor(Clock_Ip_NameType ClockName)
{
    30cc:	b500      	push	{lr}
    30ce:	b085      	sub	sp, #20
    30d0:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8CmuCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    30d2:	490c      	ldr	r1, [pc, #48]	; (3104 <Clock_Ip_DisableClockMonitor+0x38>)
    30d4:	9a01      	ldr	r2, [sp, #4]
    30d6:	4613      	mov	r3, r2
    30d8:	00db      	lsls	r3, r3, #3
    30da:	4413      	add	r3, r2
    30dc:	440b      	add	r3, r1
    30de:	3301      	adds	r3, #1
    30e0:	781b      	ldrb	r3, [r3, #0]
    30e2:	461a      	mov	r2, r3
    30e4:	4b08      	ldr	r3, [pc, #32]	; (3108 <Clock_Ip_DisableClockMonitor+0x3c>)
    30e6:	5c9b      	ldrb	r3, [r3, r2]
    30e8:	9303      	str	r3, [sp, #12]
    Clock_Ip_axCmuCallbacks[CallbackIndex].Disable(ClockName);
    30ea:	4a08      	ldr	r2, [pc, #32]	; (310c <Clock_Ip_DisableClockMonitor+0x40>)
    30ec:	9b03      	ldr	r3, [sp, #12]
    30ee:	011b      	lsls	r3, r3, #4
    30f0:	4413      	add	r3, r2
    30f2:	3308      	adds	r3, #8
    30f4:	681b      	ldr	r3, [r3, #0]
    30f6:	9801      	ldr	r0, [sp, #4]
    30f8:	4798      	blx	r3
}
    30fa:	bf00      	nop
    30fc:	b005      	add	sp, #20
    30fe:	f85d fb04 	ldr.w	pc, [sp], #4
    3102:	bf00      	nop
    3104:	0000fab4 	.word	0x0000fab4
    3108:	0000faa4 	.word	0x0000faa4
    310c:	000100b0 	.word	0x000100b0

00003110 <Clock_Ip_InstallNotificationsCallback>:
 * Description   : This function installs a callback for clock notifications.
 *
 * @implements Clock_Ip_InstallNotificationsCallback_Activity
 * END**********************************************************************************/
void Clock_Ip_InstallNotificationsCallback(Clock_Ip_NotificationsCallbackType Callback)
{
    3110:	b082      	sub	sp, #8
    3112:	9001      	str	r0, [sp, #4]
    CLOCK_IP_DEV_ASSERT(NULL_PTR != Callback);

    Clock_Ip_pfkNotificationsCallback = Callback;
    3114:	4a02      	ldr	r2, [pc, #8]	; (3120 <Clock_Ip_InstallNotificationsCallback+0x10>)
    3116:	9b01      	ldr	r3, [sp, #4]
    3118:	6013      	str	r3, [r2, #0]
}
    311a:	bf00      	nop
    311c:	b002      	add	sp, #8
    311e:	4770      	bx	lr
    3120:	1fff8b14 	.word	0x1fff8b14

00003124 <Clock_Ip_DisableModuleClock>:
 * Description   : Disables clock for a peripheral.
 *
 * @implements Clock_Ip_DisableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_DisableModuleClock(Clock_Ip_NameType ClockName)
{
    3124:	b500      	push	{lr}
    3126:	b085      	sub	sp, #20
    3128:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    312a:	490c      	ldr	r1, [pc, #48]	; (315c <Clock_Ip_DisableModuleClock+0x38>)
    312c:	9a01      	ldr	r2, [sp, #4]
    312e:	4613      	mov	r3, r2
    3130:	00db      	lsls	r3, r3, #3
    3132:	4413      	add	r3, r2
    3134:	440b      	add	r3, r1
    3136:	3301      	adds	r3, #1
    3138:	781b      	ldrb	r3, [r3, #0]
    313a:	461a      	mov	r2, r3
    313c:	4b08      	ldr	r3, [pc, #32]	; (3160 <Clock_Ip_DisableModuleClock+0x3c>)
    313e:	5c9b      	ldrb	r3, [r3, r2]
    3140:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,TRUE);
    3142:	4a08      	ldr	r2, [pc, #32]	; (3164 <Clock_Ip_DisableModuleClock+0x40>)
    3144:	9b03      	ldr	r3, [sp, #12]
    3146:	00db      	lsls	r3, r3, #3
    3148:	4413      	add	r3, r2
    314a:	685b      	ldr	r3, [r3, #4]
    314c:	2101      	movs	r1, #1
    314e:	9801      	ldr	r0, [sp, #4]
    3150:	4798      	blx	r3
}
    3152:	bf00      	nop
    3154:	b005      	add	sp, #20
    3156:	f85d fb04 	ldr.w	pc, [sp], #4
    315a:	bf00      	nop
    315c:	0000fab4 	.word	0x0000fab4
    3160:	0000fa54 	.word	0x0000fa54
    3164:	0001003c 	.word	0x0001003c

00003168 <Clock_Ip_EnableModuleClock>:
 * Description   : Enable clock for a peripheral.
 *
 * @implements Clock_Ip_EnableModuleClock_Activity
 * END**********************************************************************************/
void Clock_Ip_EnableModuleClock(Clock_Ip_NameType ClockName)
{
    3168:	b500      	push	{lr}
    316a:	b085      	sub	sp, #20
    316c:	9001      	str	r0, [sp, #4]

    uint32 CallbackIndex;

    CallbackIndex = Clock_Ip_au8GateCallbackIndex[Clock_Ip_au8ClockFeatures[ClockName][CLOCK_IP_CALLBACK]];
    316e:	490c      	ldr	r1, [pc, #48]	; (31a0 <Clock_Ip_EnableModuleClock+0x38>)
    3170:	9a01      	ldr	r2, [sp, #4]
    3172:	4613      	mov	r3, r2
    3174:	00db      	lsls	r3, r3, #3
    3176:	4413      	add	r3, r2
    3178:	440b      	add	r3, r1
    317a:	3301      	adds	r3, #1
    317c:	781b      	ldrb	r3, [r3, #0]
    317e:	461a      	mov	r2, r3
    3180:	4b08      	ldr	r3, [pc, #32]	; (31a4 <Clock_Ip_EnableModuleClock+0x3c>)
    3182:	5c9b      	ldrb	r3, [r3, r2]
    3184:	9303      	str	r3, [sp, #12]
    Clock_Ip_axGateCallbacks[CallbackIndex].Update(ClockName,FALSE);
    3186:	4a08      	ldr	r2, [pc, #32]	; (31a8 <Clock_Ip_EnableModuleClock+0x40>)
    3188:	9b03      	ldr	r3, [sp, #12]
    318a:	00db      	lsls	r3, r3, #3
    318c:	4413      	add	r3, r2
    318e:	685b      	ldr	r3, [r3, #4]
    3190:	2100      	movs	r1, #0
    3192:	9801      	ldr	r0, [sp, #4]
    3194:	4798      	blx	r3
}
    3196:	bf00      	nop
    3198:	b005      	add	sp, #20
    319a:	f85d fb04 	ldr.w	pc, [sp], #4
    319e:	bf00      	nop
    31a0:	0000fab4 	.word	0x0000fab4
    31a4:	0000fa54 	.word	0x0000fa54
    31a8:	0001003c 	.word	0x0001003c

000031ac <Clock_Ip_PowerModeChangeNotification>:
 * Description   : Notifies clock driver when a power mode is changed.
 *
 * @implements Clock_Ip_PowerModeChangeNotification_Activity
 * END**********************************************************************************/
void Clock_Ip_PowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode,Clock_Ip_PowerNotificationType Notification)
{
    31ac:	b500      	push	{lr}
    31ae:	b083      	sub	sp, #12
    31b0:	9001      	str	r0, [sp, #4]
    31b2:	9100      	str	r1, [sp, #0]
    Clock_Ip_bSentFromUpdateDriverContext  = FALSE;
    31b4:	4b08      	ldr	r3, [pc, #32]	; (31d8 <Clock_Ip_PowerModeChangeNotification+0x2c>)
    31b6:	2200      	movs	r2, #0
    31b8:	701a      	strb	r2, [r3, #0]
    Clock_Ip_Command(Clock_Ip_pxConfig, CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND);
    31ba:	4b08      	ldr	r3, [pc, #32]	; (31dc <Clock_Ip_PowerModeChangeNotification+0x30>)
    31bc:	681b      	ldr	r3, [r3, #0]
    31be:	2102      	movs	r1, #2
    31c0:	4618      	mov	r0, r3
    31c2:	f002 fd75 	bl	5cb0 <Clock_Ip_Command>

    Clock_Ip_ClockPowerModeChangeNotification(PowerMode, Notification);
    31c6:	9900      	ldr	r1, [sp, #0]
    31c8:	9801      	ldr	r0, [sp, #4]
    31ca:	f002 fc51 	bl	5a70 <Clock_Ip_ClockPowerModeChangeNotification>
}
    31ce:	bf00      	nop
    31d0:	b003      	add	sp, #12
    31d2:	f85d fb04 	ldr.w	pc, [sp], #4
    31d6:	bf00      	nop
    31d8:	1fff8b10 	.word	0x1fff8b10
    31dc:	1fff8b50 	.word	0x1fff8b50

000031e0 <Clock_Ip_SetWaitStates>:
 * Function Name : Clock_Ip_SetWaitStates
 * Description   : Hardware wait states are not supported, checking function.
 *
 *END**************************************************************************/
static void Clock_Ip_SetWaitStates(void)
{
    31e0:	b082      	sub	sp, #8
    uint32 Counter = CLOCK_IP_WAIT_STATES_DELAY;
    31e2:	f06f 5380 	mvn.w	r3, #268435456	; 0x10000000
    31e6:	9301      	str	r3, [sp, #4]
    
    /* HW doesn't support wait states configuration */
    if (DriverContext.WaitStatesAreSupported)
    31e8:	4b06      	ldr	r3, [pc, #24]	; (3204 <Clock_Ip_SetWaitStates+0x24>)
    31ea:	785b      	ldrb	r3, [r3, #1]
    31ec:	2b00      	cmp	r3, #0
    31ee:	d005      	beq.n	31fc <Clock_Ip_SetWaitStates+0x1c>
        /* Wait states are not supported by HW,
           insert a delay . */

        do
        {
            Counter--;
    31f0:	9b01      	ldr	r3, [sp, #4]
    31f2:	3b01      	subs	r3, #1
    31f4:	9301      	str	r3, [sp, #4]
        }
        while(Counter > 0u);
    31f6:	9b01      	ldr	r3, [sp, #4]
    31f8:	2b00      	cmp	r3, #0
    31fa:	d1f9      	bne.n	31f0 <Clock_Ip_SetWaitStates+0x10>
    }
}
    31fc:	bf00      	nop
    31fe:	b002      	add	sp, #8
    3200:	4770      	bx	lr
    3202:	bf00      	nop
    3204:	1fff8b58 	.word	0x1fff8b58

00003208 <Clock_Ip_ReportClockErrors>:
 * Function Name : Clock_Ip_ReportClockErrors
 * Description   : Report clock error
 *
 *END**************************************************************************/
void Clock_Ip_ReportClockErrors(Clock_Ip_NotificationType Error, Clock_Ip_NameType ClockName)
{
    3208:	b500      	push	{lr}
    320a:	b083      	sub	sp, #12
    320c:	9001      	str	r0, [sp, #4]
    320e:	9100      	str	r1, [sp, #0]
    Clock_Ip_pfkNotificationsCallback(Error,ClockName);
    3210:	4b04      	ldr	r3, [pc, #16]	; (3224 <Clock_Ip_ReportClockErrors+0x1c>)
    3212:	681b      	ldr	r3, [r3, #0]
    3214:	9900      	ldr	r1, [sp, #0]
    3216:	9801      	ldr	r0, [sp, #4]
    3218:	4798      	blx	r3
}
    321a:	bf00      	nop
    321c:	b003      	add	sp, #12
    321e:	f85d fb04 	ldr.w	pc, [sp], #4
    3222:	bf00      	nop
    3224:	1fff8b14 	.word	0x1fff8b14

00003228 <Clock_Ip_StartTimeout>:
 *END**************************************************************************/
void Clock_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    3228:	b500      	push	{lr}
    322a:	b085      	sub	sp, #20
    322c:	9003      	str	r0, [sp, #12]
    322e:	9102      	str	r1, [sp, #8]
    3230:	9201      	str	r2, [sp, #4]
    3232:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(CLOCK_IP_TIMEOUT_TYPE);
    3234:	2000      	movs	r0, #0
    3236:	f7fe ffd1 	bl	21dc <OsIf_GetCounter>
    323a:	4602      	mov	r2, r0
    323c:	9b03      	ldr	r3, [sp, #12]
    323e:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    3240:	9b02      	ldr	r3, [sp, #8]
    3242:	2200      	movs	r2, #0
    3244:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, CLOCK_IP_TIMEOUT_TYPE);
    3246:	2100      	movs	r1, #0
    3248:	9800      	ldr	r0, [sp, #0]
    324a:	f7ff f813 	bl	2274 <OsIf_MicrosToTicks>
    324e:	4602      	mov	r2, r0
    3250:	9b01      	ldr	r3, [sp, #4]
    3252:	601a      	str	r2, [r3, #0]
}
    3254:	bf00      	nop
    3256:	b005      	add	sp, #20
    3258:	f85d fb04 	ldr.w	pc, [sp], #4

0000325c <Clock_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Clock_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    325c:	b500      	push	{lr}
    325e:	b087      	sub	sp, #28
    3260:	9003      	str	r0, [sp, #12]
    3262:	9102      	str	r1, [sp, #8]
    3264:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    3266:	2300      	movs	r3, #0
    3268:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, CLOCK_IP_TIMEOUT_TYPE);
    326c:	2100      	movs	r1, #0
    326e:	9803      	ldr	r0, [sp, #12]
    3270:	f7fe ffcd 	bl	220e <OsIf_GetElapsed>
    3274:	4602      	mov	r2, r0
    3276:	9b02      	ldr	r3, [sp, #8]
    3278:	681b      	ldr	r3, [r3, #0]
    327a:	441a      	add	r2, r3
    327c:	9b02      	ldr	r3, [sp, #8]
    327e:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    3280:	9b02      	ldr	r3, [sp, #8]
    3282:	681b      	ldr	r3, [r3, #0]
    3284:	9a01      	ldr	r2, [sp, #4]
    3286:	429a      	cmp	r2, r3
    3288:	d802      	bhi.n	3290 <Clock_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    328a:	2301      	movs	r3, #1
    328c:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    3290:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    3294:	4618      	mov	r0, r3
    3296:	b007      	add	sp, #28
    3298:	f85d fb04 	ldr.w	pc, [sp], #4

0000329c <Clock_Ip_Callback_DividerEmpty>:
/* Clock start section code */

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerEmpty(Clock_Ip_DividerConfigType const* Config)
{
    329c:	b082      	sub	sp, #8
    329e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    32a0:	bf00      	nop
    32a2:	b002      	add	sp, #8
    32a4:	4770      	bx	lr

000032a6 <Clock_Ip_SetScgAsyncDiv1>:

#ifdef CLOCK_IP_SCG_ASYNC_DIV1
static void Clock_Ip_SetScgAsyncDiv1(Clock_Ip_DividerConfigType const* Config)
{
    32a6:	b500      	push	{lr}
    32a8:	b083      	sub	sp, #12
    32aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32ac:	9b01      	ldr	r3, [sp, #4]
    32ae:	2b00      	cmp	r3, #0
    32b0:	d002      	beq.n	32b8 <Clock_Ip_SetScgAsyncDiv1+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv1_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv1_TrustedCall(Config);
    32b2:	9801      	ldr	r0, [sp, #4]
    32b4:	f000 f8ad 	bl	3412 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32b8:	bf00      	nop
    32ba:	b003      	add	sp, #12
    32bc:	f85d fb04 	ldr.w	pc, [sp], #4

000032c0 <Clock_Ip_SetScgAsyncDiv2>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
static void Clock_Ip_SetScgAsyncDiv2(Clock_Ip_DividerConfigType const* Config)
{
    32c0:	b500      	push	{lr}
    32c2:	b083      	sub	sp, #12
    32c4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32c6:	9b01      	ldr	r3, [sp, #4]
    32c8:	2b00      	cmp	r3, #0
    32ca:	d002      	beq.n	32d2 <Clock_Ip_SetScgAsyncDiv2+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgAsyncDiv2_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgAsyncDiv2_TrustedCall(Config);
    32cc:	9801      	ldr	r0, [sp, #4]
    32ce:	f000 f8cd 	bl	346c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32d2:	bf00      	nop
    32d4:	b003      	add	sp, #12
    32d6:	f85d fb04 	ldr.w	pc, [sp], #4

000032da <Clock_Ip_SetScgRunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
static void Clock_Ip_SetScgRunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    32da:	b500      	push	{lr}
    32dc:	b083      	sub	sp, #12
    32de:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32e0:	9b01      	ldr	r3, [sp, #4]
    32e2:	2b00      	cmp	r3, #0
    32e4:	d002      	beq.n	32ec <Clock_Ip_SetScgRunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivcore_TrustedCall(Config);
    32e6:	9801      	ldr	r0, [sp, #4]
    32e8:	f000 f8ee 	bl	34c8 <Clock_Ip_SetScgRunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    32ec:	bf00      	nop
    32ee:	b003      	add	sp, #12
    32f0:	f85d fb04 	ldr.w	pc, [sp], #4

000032f4 <Clock_Ip_SetScgRunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
static void Clock_Ip_SetScgRunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    32f4:	b500      	push	{lr}
    32f6:	b083      	sub	sp, #12
    32f8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    32fa:	9b01      	ldr	r3, [sp, #4]
    32fc:	2b00      	cmp	r3, #0
    32fe:	d002      	beq.n	3306 <Clock_Ip_SetScgRunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivbus_TrustedCall(Config);
    3300:	9801      	ldr	r0, [sp, #4]
    3302:	f000 f8f9 	bl	34f8 <Clock_Ip_SetScgRunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3306:	bf00      	nop
    3308:	b003      	add	sp, #12
    330a:	f85d fb04 	ldr.w	pc, [sp], #4

0000330e <Clock_Ip_SetScgRunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
static void Clock_Ip_SetScgRunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    330e:	b500      	push	{lr}
    3310:	b083      	sub	sp, #12
    3312:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3314:	9b01      	ldr	r3, [sp, #4]
    3316:	2b00      	cmp	r3, #0
    3318:	d002      	beq.n	3320 <Clock_Ip_SetScgRunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunDivslow_TrustedCall(Config);
    331a:	9801      	ldr	r0, [sp, #4]
    331c:	f000 f904 	bl	3528 <Clock_Ip_SetScgRunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3320:	bf00      	nop
    3322:	b003      	add	sp, #12
    3324:	f85d fb04 	ldr.w	pc, [sp], #4

00003328 <Clock_Ip_SetScgVlprDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
static void Clock_Ip_SetScgVlprDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3328:	b500      	push	{lr}
    332a:	b083      	sub	sp, #12
    332c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    332e:	9b01      	ldr	r3, [sp, #4]
    3330:	2b00      	cmp	r3, #0
    3332:	d002      	beq.n	333a <Clock_Ip_SetScgVlprDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivcore_TrustedCall(Config);
    3334:	9801      	ldr	r0, [sp, #4]
    3336:	f000 f90f 	bl	3558 <Clock_Ip_SetScgVlprDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    333a:	bf00      	nop
    333c:	b003      	add	sp, #12
    333e:	f85d fb04 	ldr.w	pc, [sp], #4

00003342 <Clock_Ip_SetScgVlprDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
static void Clock_Ip_SetScgVlprDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3342:	b500      	push	{lr}
    3344:	b083      	sub	sp, #12
    3346:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3348:	9b01      	ldr	r3, [sp, #4]
    334a:	2b00      	cmp	r3, #0
    334c:	d002      	beq.n	3354 <Clock_Ip_SetScgVlprDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivbus_TrustedCall(Config);
    334e:	9801      	ldr	r0, [sp, #4]
    3350:	f000 f91a 	bl	3588 <Clock_Ip_SetScgVlprDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3354:	bf00      	nop
    3356:	b003      	add	sp, #12
    3358:	f85d fb04 	ldr.w	pc, [sp], #4

0000335c <Clock_Ip_SetScgVlprDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
static void Clock_Ip_SetScgVlprDivslow(Clock_Ip_DividerConfigType const* Config)
{
    335c:	b500      	push	{lr}
    335e:	b083      	sub	sp, #12
    3360:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3362:	9b01      	ldr	r3, [sp, #4]
    3364:	2b00      	cmp	r3, #0
    3366:	d002      	beq.n	336e <Clock_Ip_SetScgVlprDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprDivslow_TrustedCall(Config);
    3368:	9801      	ldr	r0, [sp, #4]
    336a:	f000 f925 	bl	35b8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    336e:	bf00      	nop
    3370:	b003      	add	sp, #12
    3372:	f85d fb04 	ldr.w	pc, [sp], #4

00003376 <Clock_Ip_SetScgHsrunDivcore>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
static void Clock_Ip_SetScgHsrunDivcore(Clock_Ip_DividerConfigType const* Config)
{
    3376:	b500      	push	{lr}
    3378:	b083      	sub	sp, #12
    337a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    337c:	9b01      	ldr	r3, [sp, #4]
    337e:	2b00      	cmp	r3, #0
    3380:	d002      	beq.n	3388 <Clock_Ip_SetScgHsrunDivcore+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivcore_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivcore_TrustedCall(Config);
    3382:	9801      	ldr	r0, [sp, #4]
    3384:	f000 f930 	bl	35e8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3388:	bf00      	nop
    338a:	b003      	add	sp, #12
    338c:	f85d fb04 	ldr.w	pc, [sp], #4

00003390 <Clock_Ip_SetScgHsrunDivbus>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
static void Clock_Ip_SetScgHsrunDivbus(Clock_Ip_DividerConfigType const* Config)
{
    3390:	b500      	push	{lr}
    3392:	b083      	sub	sp, #12
    3394:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3396:	9b01      	ldr	r3, [sp, #4]
    3398:	2b00      	cmp	r3, #0
    339a:	d002      	beq.n	33a2 <Clock_Ip_SetScgHsrunDivbus+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivbus_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivbus_TrustedCall(Config);
    339c:	9801      	ldr	r0, [sp, #4]
    339e:	f000 f93b 	bl	3618 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33a2:	bf00      	nop
    33a4:	b003      	add	sp, #12
    33a6:	f85d fb04 	ldr.w	pc, [sp], #4

000033aa <Clock_Ip_SetScgHsrunDivslow>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
static void Clock_Ip_SetScgHsrunDivslow(Clock_Ip_DividerConfigType const* Config)
{
    33aa:	b500      	push	{lr}
    33ac:	b083      	sub	sp, #12
    33ae:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33b0:	9b01      	ldr	r3, [sp, #4]
    33b2:	2b00      	cmp	r3, #0
    33b4:	d002      	beq.n	33bc <Clock_Ip_SetScgHsrunDivslow+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunDivslow_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunDivslow_TrustedCall(Config);
    33b6:	9801      	ldr	r0, [sp, #4]
    33b8:	f000 f946 	bl	3648 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33bc:	bf00      	nop
    33be:	b003      	add	sp, #12
    33c0:	f85d fb04 	ldr.w	pc, [sp], #4

000033c4 <Clock_Ip_SetSimClkoutDiv>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
static void Clock_Ip_SetSimClkoutDiv(Clock_Ip_DividerConfigType const *Config)
{
    33c4:	b500      	push	{lr}
    33c6:	b083      	sub	sp, #12
    33c8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33ca:	9b01      	ldr	r3, [sp, #4]
    33cc:	2b00      	cmp	r3, #0
    33ce:	d002      	beq.n	33d6 <Clock_Ip_SetSimClkoutDiv+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutDiv_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutDiv_TrustedCall(Config);
    33d0:	9801      	ldr	r0, [sp, #4]
    33d2:	f000 f951 	bl	3678 <Clock_Ip_SetSimClkoutDiv_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33d6:	bf00      	nop
    33d8:	b003      	add	sp, #12
    33da:	f85d fb04 	ldr.w	pc, [sp], #4

000033de <Clock_Ip_SetPccPcdDivFrac>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
static void Clock_Ip_SetPccPcdDivFrac(Clock_Ip_DividerConfigType const* Config)
{
    33de:	b500      	push	{lr}
    33e0:	b083      	sub	sp, #12
    33e2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33e4:	9b01      	ldr	r3, [sp, #4]
    33e6:	2b00      	cmp	r3, #0
    33e8:	d002      	beq.n	33f0 <Clock_Ip_SetPccPcdDivFrac+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcdDivFrac_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcdDivFrac_TrustedCall(Config);
    33ea:	9801      	ldr	r0, [sp, #4]
    33ec:	f000 f95e 	bl	36ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    33f0:	bf00      	nop
    33f2:	b003      	add	sp, #12
    33f4:	f85d fb04 	ldr.w	pc, [sp], #4

000033f8 <Clock_Ip_SetSimTraceDivMul>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
static void Clock_Ip_SetSimTraceDivMul(Clock_Ip_DividerConfigType const* Config)
{
    33f8:	b500      	push	{lr}
    33fa:	b083      	sub	sp, #12
    33fc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    33fe:	9b01      	ldr	r3, [sp, #4]
    3400:	2b00      	cmp	r3, #0
    3402:	d002      	beq.n	340a <Clock_Ip_SetSimTraceDivMul+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceDivMul_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceDivMul_TrustedCall(Config);
    3404:	9801      	ldr	r0, [sp, #4]
    3406:	f000 f98b 	bl	3720 <Clock_Ip_SetSimTraceDivMul_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    340a:	bf00      	nop
    340c:	b003      	add	sp, #12
    340e:	f85d fb04 	ldr.w	pc, [sp], #4

00003412 <Clock_Ip_SetScgAsyncDiv1_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_ASYNC_DIV1
void Clock_Ip_SetScgAsyncDiv1_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3412:	b086      	sub	sp, #24
    3414:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3416:	9b01      	ldr	r3, [sp, #4]
    3418:	681a      	ldr	r2, [r3, #0]
    341a:	4911      	ldr	r1, [pc, #68]	; (3460 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x4e>)
    341c:	4613      	mov	r3, r2
    341e:	00db      	lsls	r3, r3, #3
    3420:	4413      	add	r3, r2
    3422:	440b      	add	r3, r1
    3424:	781b      	ldrb	r3, [r3, #0]
    3426:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3428:	9b01      	ldr	r3, [sp, #4]
    342a:	685b      	ldr	r3, [r3, #4]
    342c:	4a0d      	ldr	r2, [pc, #52]	; (3464 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x52>)
    342e:	5cd3      	ldrb	r3, [r2, r3]
    3430:	9304      	str	r3, [sp, #16]


    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    3432:	4a0d      	ldr	r2, [pc, #52]	; (3468 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3434:	9b05      	ldr	r3, [sp, #20]
    3436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    343a:	681b      	ldr	r3, [r3, #0]
    343c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV1_MASK;
    343e:	9b03      	ldr	r3, [sp, #12]
    3440:	f023 0307 	bic.w	r3, r3, #7
    3444:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV1_SHIFT);
    3446:	9a03      	ldr	r2, [sp, #12]
    3448:	9b04      	ldr	r3, [sp, #16]
    344a:	4313      	orrs	r3, r2
    344c:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    344e:	4a06      	ldr	r2, [pc, #24]	; (3468 <Clock_Ip_SetScgAsyncDiv1_TrustedCall+0x56>)
    3450:	9b05      	ldr	r3, [sp, #20]
    3452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3456:	9a03      	ldr	r2, [sp, #12]
    3458:	601a      	str	r2, [r3, #0]
}
    345a:	bf00      	nop
    345c:	b006      	add	sp, #24
    345e:	4770      	bx	lr
    3460:	0000fab4 	.word	0x0000fab4
    3464:	0000feac 	.word	0x0000feac
    3468:	0000fef0 	.word	0x0000fef0

0000346c <Clock_Ip_SetScgAsyncDiv2_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_ASYNC_DIV2
void Clock_Ip_SetScgAsyncDiv2_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    346c:	b086      	sub	sp, #24
    346e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    3470:	9b01      	ldr	r3, [sp, #4]
    3472:	681a      	ldr	r2, [r3, #0]
    3474:	4911      	ldr	r1, [pc, #68]	; (34bc <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x50>)
    3476:	4613      	mov	r3, r2
    3478:	00db      	lsls	r3, r3, #3
    347a:	4413      	add	r3, r2
    347c:	440b      	add	r3, r1
    347e:	781b      	ldrb	r3, [r3, #0]
    3480:	9305      	str	r3, [sp, #20]
    uint32 DividerValue  = Clock_Ip_au8DividerValueHardwareValue[Config->Value];    /* Hw value corresponding to divider value. Translate the value by which is divided to hardware value. */
    3482:	9b01      	ldr	r3, [sp, #4]
    3484:	685b      	ldr	r3, [r3, #4]
    3486:	4a0e      	ldr	r2, [pc, #56]	; (34c0 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x54>)
    3488:	5cd3      	ldrb	r3, [r2, r3]
    348a:	9304      	str	r3, [sp, #16]

    RegValue = Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV;
    348c:	4a0d      	ldr	r2, [pc, #52]	; (34c4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    348e:	9b05      	ldr	r3, [sp, #20]
    3490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3494:	681b      	ldr	r3, [r3, #0]
    3496:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_SIRCDIV_SIRCDIV2_MASK;
    3498:	9b03      	ldr	r3, [sp, #12]
    349a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    349e:	9303      	str	r3, [sp, #12]
    RegValue |= (DividerValue << SCG_SIRCDIV_SIRCDIV2_SHIFT);
    34a0:	9b04      	ldr	r3, [sp, #16]
    34a2:	021b      	lsls	r3, r3, #8
    34a4:	9a03      	ldr	r2, [sp, #12]
    34a6:	4313      	orrs	r3, r2
    34a8:	9303      	str	r3, [sp, #12]
    Clock_Ip_apxScgPeriphAsyncDivs[Instance]->ASYNC_DIV = RegValue;
    34aa:	4a06      	ldr	r2, [pc, #24]	; (34c4 <Clock_Ip_SetScgAsyncDiv2_TrustedCall+0x58>)
    34ac:	9b05      	ldr	r3, [sp, #20]
    34ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    34b2:	9a03      	ldr	r2, [sp, #12]
    34b4:	601a      	str	r2, [r3, #0]
}
    34b6:	bf00      	nop
    34b8:	b006      	add	sp, #24
    34ba:	4770      	bx	lr
    34bc:	0000fab4 	.word	0x0000fab4
    34c0:	0000feac 	.word	0x0000feac
    34c4:	0000fef0 	.word	0x0000fef0

000034c8 <Clock_Ip_SetScgRunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_RUN
/* Set divider value of CORE_RUN_CLK to register */
void Clock_Ip_SetScgRunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    34c8:	b084      	sub	sp, #16
    34ca:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    34cc:	4b09      	ldr	r3, [pc, #36]	; (34f4 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    34ce:	695b      	ldr	r3, [r3, #20]
    34d0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVCORE_MASK;
    34d2:	9b03      	ldr	r3, [sp, #12]
    34d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    34d8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVCORE_SHIFT);
    34da:	9b01      	ldr	r3, [sp, #4]
    34dc:	685b      	ldr	r3, [r3, #4]
    34de:	3b01      	subs	r3, #1
    34e0:	041b      	lsls	r3, r3, #16
    34e2:	9a03      	ldr	r2, [sp, #12]
    34e4:	4313      	orrs	r3, r2
    34e6:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    34e8:	4a02      	ldr	r2, [pc, #8]	; (34f4 <Clock_Ip_SetScgRunDivcore_TrustedCall+0x2c>)
    34ea:	9b03      	ldr	r3, [sp, #12]
    34ec:	6153      	str	r3, [r2, #20]
}
    34ee:	bf00      	nop
    34f0:	b004      	add	sp, #16
    34f2:	4770      	bx	lr
    34f4:	40064000 	.word	0x40064000

000034f8 <Clock_Ip_SetScgRunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_RUN
/* Set divider value of BUS_RUN_CLK to register */
void Clock_Ip_SetScgRunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    34f8:	b084      	sub	sp, #16
    34fa:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    34fc:	4b09      	ldr	r3, [pc, #36]	; (3524 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    34fe:	695b      	ldr	r3, [r3, #20]
    3500:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVBUS_MASK;
    3502:	9b03      	ldr	r3, [sp, #12]
    3504:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3508:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVBUS_SHIFT);
    350a:	9b01      	ldr	r3, [sp, #4]
    350c:	685b      	ldr	r3, [r3, #4]
    350e:	3b01      	subs	r3, #1
    3510:	011b      	lsls	r3, r3, #4
    3512:	9a03      	ldr	r2, [sp, #12]
    3514:	4313      	orrs	r3, r2
    3516:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3518:	4a02      	ldr	r2, [pc, #8]	; (3524 <Clock_Ip_SetScgRunDivbus_TrustedCall+0x2c>)
    351a:	9b03      	ldr	r3, [sp, #12]
    351c:	6153      	str	r3, [r2, #20]
}
    351e:	bf00      	nop
    3520:	b004      	add	sp, #16
    3522:	4770      	bx	lr
    3524:	40064000 	.word	0x40064000

00003528 <Clock_Ip_SetScgRunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_RUN
/* Set divider value of SLOW_RUN_CLK to register */
void Clock_Ip_SetScgRunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3528:	b084      	sub	sp, #16
    352a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->RCCR;
    352c:	4b09      	ldr	r3, [pc, #36]	; (3554 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    352e:	695b      	ldr	r3, [r3, #20]
    3530:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_RCCR_DIVSLOW_MASK;
    3532:	9b03      	ldr	r3, [sp, #12]
    3534:	f023 030f 	bic.w	r3, r3, #15
    3538:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_RCCR_DIVSLOW_SHIFT);
    353a:	9b01      	ldr	r3, [sp, #4]
    353c:	685b      	ldr	r3, [r3, #4]
    353e:	3b01      	subs	r3, #1
    3540:	9a03      	ldr	r2, [sp, #12]
    3542:	4313      	orrs	r3, r2
    3544:	9303      	str	r3, [sp, #12]
    IP_SCG->RCCR = RegValue;
    3546:	4a03      	ldr	r2, [pc, #12]	; (3554 <Clock_Ip_SetScgRunDivslow_TrustedCall+0x2c>)
    3548:	9b03      	ldr	r3, [sp, #12]
    354a:	6153      	str	r3, [r2, #20]
}
    354c:	bf00      	nop
    354e:	b004      	add	sp, #16
    3550:	4770      	bx	lr
    3552:	bf00      	nop
    3554:	40064000 	.word	0x40064000

00003558 <Clock_Ip_SetScgVlprDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_VLPR
/* Set divider value of CORE_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3558:	b084      	sub	sp, #16
    355a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    355c:	4b09      	ldr	r3, [pc, #36]	; (3584 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    355e:	699b      	ldr	r3, [r3, #24]
    3560:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVCORE_MASK;
    3562:	9b03      	ldr	r3, [sp, #12]
    3564:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    3568:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVCORE_SHIFT);
    356a:	9b01      	ldr	r3, [sp, #4]
    356c:	685b      	ldr	r3, [r3, #4]
    356e:	3b01      	subs	r3, #1
    3570:	041b      	lsls	r3, r3, #16
    3572:	9a03      	ldr	r2, [sp, #12]
    3574:	4313      	orrs	r3, r2
    3576:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    3578:	4a02      	ldr	r2, [pc, #8]	; (3584 <Clock_Ip_SetScgVlprDivcore_TrustedCall+0x2c>)
    357a:	9b03      	ldr	r3, [sp, #12]
    357c:	6193      	str	r3, [r2, #24]
}
    357e:	bf00      	nop
    3580:	b004      	add	sp, #16
    3582:	4770      	bx	lr
    3584:	40064000 	.word	0x40064000

00003588 <Clock_Ip_SetScgVlprDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_VLPR
/* Set divider value of BUS_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3588:	b084      	sub	sp, #16
    358a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    358c:	4b09      	ldr	r3, [pc, #36]	; (35b4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    358e:	699b      	ldr	r3, [r3, #24]
    3590:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVBUS_MASK;
    3592:	9b03      	ldr	r3, [sp, #12]
    3594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3598:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVBUS_SHIFT);
    359a:	9b01      	ldr	r3, [sp, #4]
    359c:	685b      	ldr	r3, [r3, #4]
    359e:	3b01      	subs	r3, #1
    35a0:	011b      	lsls	r3, r3, #4
    35a2:	9a03      	ldr	r2, [sp, #12]
    35a4:	4313      	orrs	r3, r2
    35a6:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    35a8:	4a02      	ldr	r2, [pc, #8]	; (35b4 <Clock_Ip_SetScgVlprDivbus_TrustedCall+0x2c>)
    35aa:	9b03      	ldr	r3, [sp, #12]
    35ac:	6193      	str	r3, [r2, #24]
}
    35ae:	bf00      	nop
    35b0:	b004      	add	sp, #16
    35b2:	4770      	bx	lr
    35b4:	40064000 	.word	0x40064000

000035b8 <Clock_Ip_SetScgVlprDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_VLPR
/* Set divider value of SLOW_VLPR_CLK to register */
void Clock_Ip_SetScgVlprDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    35b8:	b084      	sub	sp, #16
    35ba:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->VCCR;
    35bc:	4b09      	ldr	r3, [pc, #36]	; (35e4 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    35be:	699b      	ldr	r3, [r3, #24]
    35c0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_VCCR_DIVSLOW_MASK;
    35c2:	9b03      	ldr	r3, [sp, #12]
    35c4:	f023 030f 	bic.w	r3, r3, #15
    35c8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_VCCR_DIVSLOW_SHIFT);
    35ca:	9b01      	ldr	r3, [sp, #4]
    35cc:	685b      	ldr	r3, [r3, #4]
    35ce:	3b01      	subs	r3, #1
    35d0:	9a03      	ldr	r2, [sp, #12]
    35d2:	4313      	orrs	r3, r2
    35d4:	9303      	str	r3, [sp, #12]
    IP_SCG->VCCR = RegValue;
    35d6:	4a03      	ldr	r2, [pc, #12]	; (35e4 <Clock_Ip_SetScgVlprDivslow_TrustedCall+0x2c>)
    35d8:	9b03      	ldr	r3, [sp, #12]
    35da:	6193      	str	r3, [r2, #24]
}
    35dc:	bf00      	nop
    35de:	b004      	add	sp, #16
    35e0:	4770      	bx	lr
    35e2:	bf00      	nop
    35e4:	40064000 	.word	0x40064000

000035e8 <Clock_Ip_SetScgHsrunDivcore_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVCORE_HSRUN
/* Set divider value of CORE_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivcore_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    35e8:	b084      	sub	sp, #16
    35ea:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    35ec:	4b09      	ldr	r3, [pc, #36]	; (3614 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    35ee:	69db      	ldr	r3, [r3, #28]
    35f0:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVCORE_MASK;
    35f2:	9b03      	ldr	r3, [sp, #12]
    35f4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    35f8:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVCORE_SHIFT);
    35fa:	9b01      	ldr	r3, [sp, #4]
    35fc:	685b      	ldr	r3, [r3, #4]
    35fe:	3b01      	subs	r3, #1
    3600:	041b      	lsls	r3, r3, #16
    3602:	9a03      	ldr	r2, [sp, #12]
    3604:	4313      	orrs	r3, r2
    3606:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3608:	4a02      	ldr	r2, [pc, #8]	; (3614 <Clock_Ip_SetScgHsrunDivcore_TrustedCall+0x2c>)
    360a:	9b03      	ldr	r3, [sp, #12]
    360c:	61d3      	str	r3, [r2, #28]
}
    360e:	bf00      	nop
    3610:	b004      	add	sp, #16
    3612:	4770      	bx	lr
    3614:	40064000 	.word	0x40064000

00003618 <Clock_Ip_SetScgHsrunDivbus_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVBUS_HSRUN
/* Set divider value of BUS_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivbus_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3618:	b084      	sub	sp, #16
    361a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    361c:	4b09      	ldr	r3, [pc, #36]	; (3644 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    361e:	69db      	ldr	r3, [r3, #28]
    3620:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVBUS_MASK;
    3622:	9b03      	ldr	r3, [sp, #12]
    3624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    3628:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVBUS_SHIFT);
    362a:	9b01      	ldr	r3, [sp, #4]
    362c:	685b      	ldr	r3, [r3, #4]
    362e:	3b01      	subs	r3, #1
    3630:	011b      	lsls	r3, r3, #4
    3632:	9a03      	ldr	r2, [sp, #12]
    3634:	4313      	orrs	r3, r2
    3636:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3638:	4a02      	ldr	r2, [pc, #8]	; (3644 <Clock_Ip_SetScgHsrunDivbus_TrustedCall+0x2c>)
    363a:	9b03      	ldr	r3, [sp, #12]
    363c:	61d3      	str	r3, [r2, #28]
}
    363e:	bf00      	nop
    3640:	b004      	add	sp, #16
    3642:	4770      	bx	lr
    3644:	40064000 	.word	0x40064000

00003648 <Clock_Ip_SetScgHsrunDivslow_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_DIVSLOW_HSRUN
/* Set divider value of SLOW_HSRUN_CLK to register */
void Clock_Ip_SetScgHsrunDivslow_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3648:	b084      	sub	sp, #16
    364a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SCG->HCCR;
    364c:	4b09      	ldr	r3, [pc, #36]	; (3674 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    364e:	69db      	ldr	r3, [r3, #28]
    3650:	9303      	str	r3, [sp, #12]
    RegValue &= ~SCG_HCCR_DIVSLOW_MASK;
    3652:	9b03      	ldr	r3, [sp, #12]
    3654:	f023 030f 	bic.w	r3, r3, #15
    3658:	9303      	str	r3, [sp, #12]
    RegValue |= ((Config->Value - 1U) << SCG_HCCR_DIVSLOW_SHIFT);
    365a:	9b01      	ldr	r3, [sp, #4]
    365c:	685b      	ldr	r3, [r3, #4]
    365e:	3b01      	subs	r3, #1
    3660:	9a03      	ldr	r2, [sp, #12]
    3662:	4313      	orrs	r3, r2
    3664:	9303      	str	r3, [sp, #12]
    IP_SCG->HCCR = RegValue;
    3666:	4a03      	ldr	r2, [pc, #12]	; (3674 <Clock_Ip_SetScgHsrunDivslow_TrustedCall+0x2c>)
    3668:	9b03      	ldr	r3, [sp, #12]
    366a:	61d3      	str	r3, [r2, #28]
}
    366c:	bf00      	nop
    366e:	b004      	add	sp, #16
    3670:	4770      	bx	lr
    3672:	bf00      	nop
    3674:	40064000 	.word	0x40064000

00003678 <Clock_Ip_SetSimClkoutDiv_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_DIV
/* Set divider value of CLKOUT0_CLK to register */
void Clock_Ip_SetSimClkoutDiv_TrustedCall(Clock_Ip_DividerConfigType const *Config)
{
    3678:	b084      	sub	sp, #16
    367a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    367c:	4b0a      	ldr	r3, [pc, #40]	; (36a8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    367e:	685b      	ldr	r3, [r3, #4]
    3680:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTDIV_MASK;
    3682:	9b03      	ldr	r3, [sp, #12]
    3684:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    3688:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CHIPCTL_CLKOUTDIV(Config->Value - 1U);
    368a:	9b01      	ldr	r3, [sp, #4]
    368c:	685b      	ldr	r3, [r3, #4]
    368e:	3b01      	subs	r3, #1
    3690:	021b      	lsls	r3, r3, #8
    3692:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3696:	9a03      	ldr	r2, [sp, #12]
    3698:	4313      	orrs	r3, r2
    369a:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    369c:	4a02      	ldr	r2, [pc, #8]	; (36a8 <Clock_Ip_SetSimClkoutDiv_TrustedCall+0x30>)
    369e:	9b03      	ldr	r3, [sp, #12]
    36a0:	6053      	str	r3, [r2, #4]
}
    36a2:	bf00      	nop
    36a4:	b004      	add	sp, #16
    36a6:	4770      	bx	lr
    36a8:	40048000 	.word	0x40048000

000036ac <Clock_Ip_SetPccPcdDivFrac_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_PCD_FRAC
void Clock_Ip_SetPccPcdDivFrac_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    36ac:	b084      	sub	sp, #16
    36ae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]];
    36b0:	4919      	ldr	r1, [pc, #100]	; (3718 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    36b2:	9b01      	ldr	r3, [sp, #4]
    36b4:	681a      	ldr	r2, [r3, #0]
    36b6:	4819      	ldr	r0, [pc, #100]	; (371c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    36b8:	4613      	mov	r3, r2
    36ba:	00db      	lsls	r3, r3, #3
    36bc:	4413      	add	r3, r2
    36be:	4403      	add	r3, r0
    36c0:	3305      	adds	r3, #5
    36c2:	781b      	ldrb	r3, [r3, #0]
    36c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    36c8:	9303      	str	r3, [sp, #12]
    RegValue &= ~(PCC_PCCn_PCD_MASK | PCC_PCCn_FRAC_MASK);
    36ca:	9b03      	ldr	r3, [sp, #12]
    36cc:	f023 030f 	bic.w	r3, r3, #15
    36d0:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCD(Config->Value - 1U);                            /* Divider */
    36d2:	9b01      	ldr	r3, [sp, #4]
    36d4:	685b      	ldr	r3, [r3, #4]
    36d6:	3b01      	subs	r3, #1
    36d8:	f003 0307 	and.w	r3, r3, #7
    36dc:	9a03      	ldr	r2, [sp, #12]
    36de:	4313      	orrs	r3, r2
    36e0:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_FRAC((uint32)(Config->Options[0U]) - 1U);                        /* Multiplier */
    36e2:	9b01      	ldr	r3, [sp, #4]
    36e4:	7a1b      	ldrb	r3, [r3, #8]
    36e6:	3b01      	subs	r3, #1
    36e8:	00db      	lsls	r3, r3, #3
    36ea:	f003 0308 	and.w	r3, r3, #8
    36ee:	9a03      	ldr	r2, [sp, #12]
    36f0:	4313      	orrs	r3, r2
    36f2:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_DIVIDER_INDEX]] = RegValue;
    36f4:	4908      	ldr	r1, [pc, #32]	; (3718 <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x6c>)
    36f6:	9b01      	ldr	r3, [sp, #4]
    36f8:	681a      	ldr	r2, [r3, #0]
    36fa:	4808      	ldr	r0, [pc, #32]	; (371c <Clock_Ip_SetPccPcdDivFrac_TrustedCall+0x70>)
    36fc:	4613      	mov	r3, r2
    36fe:	00db      	lsls	r3, r3, #3
    3700:	4413      	add	r3, r2
    3702:	4403      	add	r3, r0
    3704:	3305      	adds	r3, #5
    3706:	781b      	ldrb	r3, [r3, #0]
    3708:	461a      	mov	r2, r3
    370a:	9b03      	ldr	r3, [sp, #12]
    370c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3710:	bf00      	nop
    3712:	b004      	add	sp, #16
    3714:	4770      	bx	lr
    3716:	bf00      	nop
    3718:	40065000 	.word	0x40065000
    371c:	0000fab4 	.word	0x0000fab4

00003720 <Clock_Ip_SetSimTraceDivMul_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_DIV_MUL
void Clock_Ip_SetSimTraceDivMul_TrustedCall(Clock_Ip_DividerConfigType const* Config)
{
    3720:	b084      	sub	sp, #16
    3722:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    /* Disable TRACEDIVEN to configure TRACEDIV */
    IP_SIM->CLKDIV4  &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3724:	4b10      	ldr	r3, [pc, #64]	; (3768 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3728:	4a0f      	ldr	r2, [pc, #60]	; (3768 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    372a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    372e:	6693      	str	r3, [r2, #104]	; 0x68
    RegValue = IP_SIM->CLKDIV4;
    3730:	4b0d      	ldr	r3, [pc, #52]	; (3768 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    3732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3734:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CLKDIV4_TRACEDIV_MASK | SIM_CLKDIV4_TRACEFRAC_MASK);
    3736:	9b03      	ldr	r3, [sp, #12]
    3738:	f023 030f 	bic.w	r3, r3, #15
    373c:	9303      	str	r3, [sp, #12]
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    373e:	9b01      	ldr	r3, [sp, #4]
    3740:	685b      	ldr	r3, [r3, #4]
    3742:	3b01      	subs	r3, #1
    3744:	005b      	lsls	r3, r3, #1
    3746:	f003 020e 	and.w	r2, r3, #14
                     SIM_CLKDIV4_TRACEFRAC((uint32)(Config->Options[0U]) - 1U);                /* Multiplier */
    374a:	9b01      	ldr	r3, [sp, #4]
    374c:	7a1b      	ldrb	r3, [r3, #8]
    374e:	3b01      	subs	r3, #1
    3750:	f003 0301 	and.w	r3, r3, #1
    RegValue |= SIM_CLKDIV4_TRACEDIV((uint32)(Config->Value) - 1U)              |    /* Divider */
    3754:	4313      	orrs	r3, r2
    3756:	9a03      	ldr	r2, [sp, #12]
    3758:	4313      	orrs	r3, r2
    375a:	9303      	str	r3, [sp, #12]
    IP_SIM->CLKDIV4 = RegValue;
    375c:	4a02      	ldr	r2, [pc, #8]	; (3768 <Clock_Ip_SetSimTraceDivMul_TrustedCall+0x48>)
    375e:	9b03      	ldr	r3, [sp, #12]
    3760:	6693      	str	r3, [r2, #104]	; 0x68
}
    3762:	bf00      	nop
    3764:	b004      	add	sp, #16
    3766:	4770      	bx	lr
    3768:	40048000 	.word	0x40048000

0000376c <Clock_Ip_Callback_DividerTriggerEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_Callback_DividerTriggerEmpty(Clock_Ip_DividerTriggerConfigType const* Config)
{
    376c:	b082      	sub	sp, #8
    376e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3770:	bf00      	nop
    3772:	b002      	add	sp, #8
    3774:	4770      	bx	lr
	...

00003778 <Clock_Ip_ExternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ExternalOscillatorEmpty(Clock_Ip_XoscConfigType const* Config)
{
    3778:	b082      	sub	sp, #8
    377a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    377c:	bf00      	nop
    377e:	b002      	add	sp, #8
    3780:	4770      	bx	lr

00003782 <Clock_Ip_DisableClockIpExternalOscillatorEmpty>:
static void Clock_Ip_DisableClockIpExternalOscillatorEmpty(Clock_Ip_NameType XoscName)
{
    3782:	b082      	sub	sp, #8
    3784:	9001      	str	r0, [sp, #4]
    (void)XoscName;
    /* No implementation */
}
    3786:	bf00      	nop
    3788:	b002      	add	sp, #8
    378a:	4770      	bx	lr

0000378c <Clock_Ip_ResetSOSC>:



#ifdef CLOCK_IP_SOSC_ENABLE
static void Clock_Ip_ResetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    378c:	b500      	push	{lr}
    378e:	b083      	sub	sp, #12
    3790:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3792:	9b01      	ldr	r3, [sp, #4]
    3794:	2b00      	cmp	r3, #0
    3796:	d002      	beq.n	379e <Clock_Ip_ResetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSOSC_TrustedCall(Config);
    3798:	9801      	ldr	r0, [sp, #4]
    379a:	f000 f86a 	bl	3872 <Clock_Ip_ResetSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    379e:	bf00      	nop
    37a0:	b003      	add	sp, #12
    37a2:	f85d fb04 	ldr.w	pc, [sp], #4

000037a6 <Clock_Ip_SetSOSC>:
static void Clock_Ip_SetSOSC(Clock_Ip_XoscConfigType const* Config)
{
    37a6:	b500      	push	{lr}
    37a8:	b083      	sub	sp, #12
    37aa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    37ac:	9b01      	ldr	r3, [sp, #4]
    37ae:	2b00      	cmp	r3, #0
    37b0:	d002      	beq.n	37b8 <Clock_Ip_SetSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_SetSOSC_TrustedCall(Config);
    37b2:	9801      	ldr	r0, [sp, #4]
    37b4:	f000 f884 	bl	38c0 <Clock_Ip_SetSOSC_TrustedCall>
    #if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
    #endif
    #endif
    }
}
    37b8:	bf00      	nop
    37ba:	b003      	add	sp, #12
    37bc:	f85d fb04 	ldr.w	pc, [sp], #4

000037c0 <Clock_Ip_CompleteSOSC>:
static void Clock_Ip_CompleteSOSC(Clock_Ip_XoscConfigType const* Config)
{
    37c0:	b500      	push	{lr}
    37c2:	b089      	sub	sp, #36	; 0x24
    37c4:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    37c6:	2300      	movs	r3, #0
    37c8:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 SoscStatus;

    if (NULL_PTR != Config)
    37cc:	9b01      	ldr	r3, [sp, #4]
    37ce:	2b00      	cmp	r3, #0
    37d0:	d031      	beq.n	3836 <Clock_Ip_CompleteSOSC+0x76>
    {
        /* Configure SOSC. */
        if ((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) != 0U)
    37d2:	4b1b      	ldr	r3, [pc, #108]	; (3840 <Clock_Ip_CompleteSOSC+0x80>)
    37d4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    37d8:	f003 0301 	and.w	r3, r3, #1
    37dc:	2b00      	cmp	r3, #0
    37de:	d02a      	beq.n	3836 <Clock_Ip_CompleteSOSC+0x76>
        {
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    37e0:	aa03      	add	r2, sp, #12
    37e2:	a904      	add	r1, sp, #16
    37e4:	a805      	add	r0, sp, #20
    37e6:	f24c 3350 	movw	r3, #50000	; 0xc350
    37ea:	f7ff fd1d 	bl	3228 <Clock_Ip_StartTimeout>
            /* Wait until ircosc is locked */
            do
            {
                SoscStatus = (((IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCVLD_MASK) >> SCG_SOSCCSR_SOSCVLD_SHIFT));
    37ee:	4b14      	ldr	r3, [pc, #80]	; (3840 <Clock_Ip_CompleteSOSC+0x80>)
    37f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    37f4:	0e1b      	lsrs	r3, r3, #24
    37f6:	f003 0301 	and.w	r3, r3, #1
    37fa:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    37fc:	9a03      	ldr	r2, [sp, #12]
    37fe:	a904      	add	r1, sp, #16
    3800:	ab05      	add	r3, sp, #20
    3802:	4618      	mov	r0, r3
    3804:	f7ff fd2a 	bl	325c <Clock_Ip_TimeoutExpired>
    3808:	4603      	mov	r3, r0
    380a:	f88d 301f 	strb.w	r3, [sp, #31]
            }
            while ((0U == SoscStatus) && (FALSE == TimeoutOccurred));
    380e:	9b06      	ldr	r3, [sp, #24]
    3810:	2b00      	cmp	r3, #0
    3812:	d106      	bne.n	3822 <Clock_Ip_CompleteSOSC+0x62>
    3814:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3818:	f083 0301 	eor.w	r3, r3, #1
    381c:	b2db      	uxtb	r3, r3
    381e:	2b00      	cmp	r3, #0
    3820:	d1e5      	bne.n	37ee <Clock_Ip_CompleteSOSC+0x2e>

            if (FALSE != TimeoutOccurred)
    3822:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3826:	2b00      	cmp	r3, #0
    3828:	d005      	beq.n	3836 <Clock_Ip_CompleteSOSC+0x76>
            {
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    382a:	9b01      	ldr	r3, [sp, #4]
    382c:	681b      	ldr	r3, [r3, #0]
    382e:	4619      	mov	r1, r3
    3830:	2001      	movs	r0, #1
    3832:	f7ff fce9 	bl	3208 <Clock_Ip_ReportClockErrors>
        (void)StartTime;
        (void)ElapsedTime;
        (void)TimeoutTicks;
        (void)SoscStatus;
    }
}
    3836:	bf00      	nop
    3838:	b009      	add	sp, #36	; 0x24
    383a:	f85d fb04 	ldr.w	pc, [sp], #4
    383e:	bf00      	nop
    3840:	40064000 	.word	0x40064000

00003844 <Clock_Ip_DisableSOSC>:
static void Clock_Ip_DisableSOSC(Clock_Ip_NameType XoscName)
{
    3844:	b500      	push	{lr}
    3846:	b083      	sub	sp, #12
    3848:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSOSC_TrustedCall,(XoscName));
  #else
    Clock_Ip_DisableSOSC_TrustedCall(XoscName);
    384a:	9801      	ldr	r0, [sp, #4]
    384c:	f000 f8c0 	bl	39d0 <Clock_Ip_DisableSOSC_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3850:	bf00      	nop
    3852:	b003      	add	sp, #12
    3854:	f85d fb04 	ldr.w	pc, [sp], #4

00003858 <Clock_Ip_EnableSOSC>:
static void Clock_Ip_EnableSOSC(Clock_Ip_XoscConfigType const* Config)
{
    3858:	b500      	push	{lr}
    385a:	b083      	sub	sp, #12
    385c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    385e:	9b01      	ldr	r3, [sp, #4]
    3860:	2b00      	cmp	r3, #0
    3862:	d002      	beq.n	386a <Clock_Ip_EnableSOSC+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSOSC_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSOSC_TrustedCall(Config);
    3864:	9801      	ldr	r0, [sp, #4]
    3866:	f000 f8c3 	bl	39f0 <Clock_Ip_EnableSOSC_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    386a:	bf00      	nop
    386c:	b003      	add	sp, #12
    386e:	f85d fb04 	ldr.w	pc, [sp], #4

00003872 <Clock_Ip_ResetSOSC_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SOSC_ENABLE
void Clock_Ip_ResetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    3872:	b082      	sub	sp, #8
    3874:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_LK_MASK));
    3876:	4b11      	ldr	r3, [pc, #68]	; (38bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3878:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    387c:	4a0f      	ldr	r2, [pc, #60]	; (38bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    387e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3882:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCM_MASK));
    3886:	4b0d      	ldr	r3, [pc, #52]	; (38bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3888:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    388c:	4a0b      	ldr	r2, [pc, #44]	; (38bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    388e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    3892:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock monitor reset*/
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCCMRE_MASK));
    3896:	4b09      	ldr	r3, [pc, #36]	; (38bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    3898:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    389c:	4a07      	ldr	r2, [pc, #28]	; (38bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    389e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    38a2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

    /* Disable clock */
    IP_SCG->SOSCCSR &= (~((uint32)SCG_SOSCCSR_SOSCEN_MASK));
    38a6:	4b05      	ldr	r3, [pc, #20]	; (38bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    38a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    38ac:	4a03      	ldr	r2, [pc, #12]	; (38bc <Clock_Ip_ResetSOSC_TrustedCall+0x4a>)
    38ae:	f023 0301 	bic.w	r3, r3, #1
    38b2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    38b6:	bf00      	nop
    38b8:	b002      	add	sp, #8
    38ba:	4770      	bx	lr
    38bc:	40064000 	.word	0x40064000

000038c0 <Clock_Ip_SetSOSC_TrustedCall>:
void Clock_Ip_SetSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    38c0:	b082      	sub	sp, #8
    38c2:	9001      	str	r0, [sp, #4]
    /* Configure SOSC. */
    if (1U == Config->Enable)
    38c4:	9b01      	ldr	r3, [sp, #4]
    38c6:	891b      	ldrh	r3, [r3, #8]
    38c8:	2b01      	cmp	r3, #1
    38ca:	d174      	bne.n	39b6 <Clock_Ip_SetSOSC_TrustedCall+0xf6>
#ifdef CLOCK_IP_GET_FREQUENCY_API
#if (CLOCK_IP_GET_FREQUENCY_API == STD_ON)
        Clock_Ip_SetExternalOscillatorFrequency(Config->Name,Config->Freq);
#endif
#endif
        switch(Config->Gain)
    38cc:	9b01      	ldr	r3, [sp, #4]
    38ce:	7bdb      	ldrb	r3, [r3, #15]
    38d0:	2b00      	cmp	r3, #0
    38d2:	d002      	beq.n	38da <Clock_Ip_SetSOSC_TrustedCall+0x1a>
    38d4:	2b01      	cmp	r3, #1
    38d6:	d009      	beq.n	38ec <Clock_Ip_SetSOSC_TrustedCall+0x2c>
            default:
            {
                /* Invalid configuration element */
                CLOCK_IP_DEV_ASSERT(FALSE);
            }
            break;
    38d8:	e011      	b.n	38fe <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_HGO_MASK;
    38da:	4b39      	ldr	r3, [pc, #228]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    38e0:	4a37      	ldr	r2, [pc, #220]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38e2:	f023 0308 	bic.w	r3, r3, #8
    38e6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    38ea:	e008      	b.n	38fe <Clock_Ip_SetSOSC_TrustedCall+0x3e>
                IP_SCG->SOSCCFG |= SCG_SOSCCFG_HGO_MASK;
    38ec:	4b34      	ldr	r3, [pc, #208]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    38f2:	4a33      	ldr	r2, [pc, #204]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    38f4:	f043 0308 	orr.w	r3, r3, #8
    38f8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            break;
    38fc:	bf00      	nop
        }


        IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_RANGE_MASK;
    38fe:	4b30      	ldr	r3, [pc, #192]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3900:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3904:	4a2e      	ldr	r2, [pc, #184]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3906:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    390a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

        if ((Config->Freq >= 4000000U) && (Config->Freq < 8000000U))
    390e:	9b01      	ldr	r3, [sp, #4]
    3910:	685b      	ldr	r3, [r3, #4]
    3912:	4a2c      	ldr	r2, [pc, #176]	; (39c4 <Clock_Ip_SetSOSC_TrustedCall+0x104>)
    3914:	4293      	cmp	r3, r2
    3916:	d90d      	bls.n	3934 <Clock_Ip_SetSOSC_TrustedCall+0x74>
    3918:	9b01      	ldr	r3, [sp, #4]
    391a:	685b      	ldr	r3, [r3, #4]
    391c:	4a2a      	ldr	r2, [pc, #168]	; (39c8 <Clock_Ip_SetSOSC_TrustedCall+0x108>)
    391e:	4293      	cmp	r3, r2
    3920:	d208      	bcs.n	3934 <Clock_Ip_SetSOSC_TrustedCall+0x74>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(2U);
    3922:	4b27      	ldr	r3, [pc, #156]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3924:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3928:	4a25      	ldr	r2, [pc, #148]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    392a:	f043 0320 	orr.w	r3, r3, #32
    392e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    3932:	e007      	b.n	3944 <Clock_Ip_SetSOSC_TrustedCall+0x84>
        }
        else
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_RANGE(3U);
    3934:	4b22      	ldr	r3, [pc, #136]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3936:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    393a:	4a21      	ldr	r2, [pc, #132]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    393c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    3940:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }

        if (0U == Config->BypassOption)
    3944:	9b01      	ldr	r3, [sp, #4]
    3946:	7b1b      	ldrb	r3, [r3, #12]
    3948:	2b00      	cmp	r3, #0
    394a:	d108      	bne.n	395e <Clock_Ip_SetSOSC_TrustedCall+0x9e>
        {
            IP_SCG->SOSCCFG |= SCG_SOSCCFG_EREFS_MASK;
    394c:	4b1c      	ldr	r3, [pc, #112]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    394e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3952:	4a1b      	ldr	r2, [pc, #108]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3954:	f043 0304 	orr.w	r3, r3, #4
    3958:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    395c:	e007      	b.n	396e <Clock_Ip_SetSOSC_TrustedCall+0xae>
        }
        else
        {
            IP_SCG->SOSCCFG &= ~SCG_SOSCCFG_EREFS_MASK;
    395e:	4b18      	ldr	r3, [pc, #96]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3960:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    3964:	4a16      	ldr	r2, [pc, #88]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3966:	f023 0304 	bic.w	r3, r3, #4
    396a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        }


        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    396e:	9b01      	ldr	r3, [sp, #4]
    3970:	7c1b      	ldrb	r3, [r3, #16]
    3972:	2b02      	cmp	r3, #2
    3974:	d011      	beq.n	399a <Clock_Ip_SetSOSC_TrustedCall+0xda>
    3976:	2b02      	cmp	r3, #2
    3978:	dc14      	bgt.n	39a4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
    397a:	2b00      	cmp	r3, #0
    397c:	d002      	beq.n	3984 <Clock_Ip_SetSOSC_TrustedCall+0xc4>
    397e:	2b01      	cmp	r3, #1
    3980:	d005      	beq.n	398e <Clock_Ip_SetSOSC_TrustedCall+0xce>
    3982:	e00f      	b.n	39a4 <Clock_Ip_SetSOSC_TrustedCall+0xe4>
        {
#ifdef CLOCK_IP_HAS_MONITOR_DISABLE
            case CLOCK_IP_HAS_MONITOR_DISABLE:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    3984:	4b0e      	ldr	r3, [pc, #56]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3986:	2201      	movs	r2, #1
    3988:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(0UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    398c:	e014      	b.n	39b8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_INT
            case CLOCK_IP_HAS_MONITOR_INT:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    398e:	4b0c      	ldr	r3, [pc, #48]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    3990:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    3994:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(0UL);
            }
            break;
    3998:	e00e      	b.n	39b8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
#ifdef CLOCK_IP_HAS_MONITOR_RESET
            case CLOCK_IP_HAS_MONITOR_RESET:
            {
                IP_SCG->SOSCCSR = SCG_SOSCCSR_SOSCEN(1UL) |
    399a:	4b09      	ldr	r3, [pc, #36]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    399c:	4a0b      	ldr	r2, [pc, #44]	; (39cc <Clock_Ip_SetSOSC_TrustedCall+0x10c>)
    399e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
                               SCG_SOSCCSR_SOSCCM(1UL) |
                               SCG_SOSCCSR_SOSCCMRE(1UL);
            }
            break;
    39a2:	e009      	b.n	39b8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
#endif
            default:
                /* Enable SOSC. */
                IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    39a4:	4b06      	ldr	r3, [pc, #24]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    39a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    39aa:	4a05      	ldr	r2, [pc, #20]	; (39c0 <Clock_Ip_SetSOSC_TrustedCall+0x100>)
    39ac:	f043 0301 	orr.w	r3, r3, #1
    39b0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    39b4:	e000      	b.n	39b8 <Clock_Ip_SetSOSC_TrustedCall+0xf8>
        }
    }
    39b6:	bf00      	nop
}
    39b8:	bf00      	nop
    39ba:	b002      	add	sp, #8
    39bc:	4770      	bx	lr
    39be:	bf00      	nop
    39c0:	40064000 	.word	0x40064000
    39c4:	003d08ff 	.word	0x003d08ff
    39c8:	007a1200 	.word	0x007a1200
    39cc:	00030001 	.word	0x00030001

000039d0 <Clock_Ip_DisableSOSC_TrustedCall>:

void Clock_Ip_DisableSOSC_TrustedCall(Clock_Ip_NameType XoscName)
{
    39d0:	b082      	sub	sp, #8
    39d2:	9001      	str	r0, [sp, #4]
    (void)XoscName;

    /* Disable SOSC. */
    IP_SCG->SOSCCSR &= ~SCG_SOSCCSR_SOSCEN_MASK;
    39d4:	4b05      	ldr	r3, [pc, #20]	; (39ec <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    39d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    39da:	4a04      	ldr	r2, [pc, #16]	; (39ec <Clock_Ip_DisableSOSC_TrustedCall+0x1c>)
    39dc:	f023 0301 	bic.w	r3, r3, #1
    39e0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
}
    39e4:	bf00      	nop
    39e6:	b002      	add	sp, #8
    39e8:	4770      	bx	lr
    39ea:	bf00      	nop
    39ec:	40064000 	.word	0x40064000

000039f0 <Clock_Ip_EnableSOSC_TrustedCall>:

void Clock_Ip_EnableSOSC_TrustedCall(Clock_Ip_XoscConfigType const* Config)
{
    39f0:	b082      	sub	sp, #8
    39f2:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    39f4:	9b01      	ldr	r3, [sp, #4]
    39f6:	891b      	ldrh	r3, [r3, #8]
    39f8:	2b01      	cmp	r3, #1
    39fa:	d107      	bne.n	3a0c <Clock_Ip_EnableSOSC_TrustedCall+0x1c>
    {
        /* Enable SOSC. */
        IP_SCG->SOSCCSR |= SCG_SOSCCSR_SOSCEN_MASK;
    39fc:	4b05      	ldr	r3, [pc, #20]	; (3a14 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    39fe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3a02:	4a04      	ldr	r2, [pc, #16]	; (3a14 <Clock_Ip_EnableSOSC_TrustedCall+0x24>)
    3a04:	f043 0301 	orr.w	r3, r3, #1
    3a08:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
}
    3a0c:	bf00      	nop
    3a0e:	b002      	add	sp, #8
    3a10:	4770      	bx	lr
    3a12:	bf00      	nop
    3a14:	40064000 	.word	0x40064000

00003a18 <Clock_Ip_CallbackFracDivEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackFracDivEmpty(Clock_Ip_FracDivConfigType const* Config)
{
    3a18:	b082      	sub	sp, #8
    3a1a:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3a1c:	bf00      	nop
    3a1e:	b002      	add	sp, #8
    3a20:	4770      	bx	lr

00003a22 <Clock_Ip_CallbackFracDivEmptyComplete>:

static Clock_Ip_DfsStatusType Clock_Ip_CallbackFracDivEmptyComplete(Clock_Ip_NameType DfsName)
{
    3a22:	b082      	sub	sp, #8
    3a24:	9001      	str	r0, [sp, #4]
    (void)DfsName;
    /* No implementation */
    return STATUS_DFS_NOT_ENABLED;
    3a26:	2300      	movs	r3, #0
}
    3a28:	4618      	mov	r0, r3
    3a2a:	b002      	add	sp, #8
    3a2c:	4770      	bx	lr

00003a2e <Clock_Ip_SetExternalSignalFrequency>:
#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

/* Set frequency value for External Signal */
void Clock_Ip_SetExternalSignalFrequency(Clock_Ip_NameType SignalName, uint32 Frequency)
{
    3a2e:	b082      	sub	sp, #8
    3a30:	9001      	str	r0, [sp, #4]
    3a32:	9100      	str	r1, [sp, #0]
    }
#else
    (void)SignalName;
    (void)Frequency;
#endif
}
    3a34:	bf00      	nop
    3a36:	b002      	add	sp, #8
    3a38:	4770      	bx	lr
	...

00003a3c <Clock_Ip_ClockSetGateEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockSetGateEmpty(Clock_Ip_GateConfigType const* Config)
{
    3a3c:	b082      	sub	sp, #8
    3a3e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3a40:	bf00      	nop
    3a42:	b002      	add	sp, #8
    3a44:	4770      	bx	lr

00003a46 <Clock_Ip_ClockUpdateGateEmpty>:
static void Clock_Ip_ClockUpdateGateEmpty(Clock_Ip_NameType ClockName, boolean Gate)
{
    3a46:	b082      	sub	sp, #8
    3a48:	9001      	str	r0, [sp, #4]
    3a4a:	460b      	mov	r3, r1
    3a4c:	f88d 3003 	strb.w	r3, [sp, #3]
    (void)ClockName;
    (void)Gate;
    /* No implementation */
}
    3a50:	bf00      	nop
    3a52:	b002      	add	sp, #8
    3a54:	4770      	bx	lr

00003a56 <Clock_Ip_ClockSetSimLPO1KEnable>:

#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
static void Clock_Ip_ClockSetSimLPO1KEnable(Clock_Ip_GateConfigType const* Config)
{
    3a56:	b500      	push	{lr}
    3a58:	b083      	sub	sp, #12
    3a5a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3a5c:	9b01      	ldr	r3, [sp, #4]
    3a5e:	2b00      	cmp	r3, #0
    3a60:	d002      	beq.n	3a68 <Clock_Ip_ClockSetSimLPO1KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Config);
    3a62:	9801      	ldr	r0, [sp, #4]
    3a64:	f000 f8e7 	bl	3c36 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3a68:	bf00      	nop
    3a6a:	b003      	add	sp, #12
    3a6c:	f85d fb04 	ldr.w	pc, [sp], #4

00003a70 <Clock_Ip_ClockUpdateSimLPO1KEnable>:

static void Clock_Ip_ClockUpdateSimLPO1KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3a70:	b500      	push	{lr}
    3a72:	b085      	sub	sp, #20
    3a74:	9001      	str	r0, [sp, #4]
    3a76:	460b      	mov	r3, r1
    3a78:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3a7c:	9b01      	ldr	r3, [sp, #4]
    3a7e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3a80:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3a84:	2b00      	cmp	r3, #0
    3a86:	d003      	beq.n	3a90 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x20>
    {
        Config.Enable = 0U;
    3a88:	2300      	movs	r3, #0
    3a8a:	f8ad 300c 	strh.w	r3, [sp, #12]
    3a8e:	e002      	b.n	3a96 <Clock_Ip_ClockUpdateSimLPO1KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3a90:	2301      	movs	r3, #1
    3a92:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO1KEnable(&Config);
    3a96:	ab02      	add	r3, sp, #8
    3a98:	4618      	mov	r0, r3
    3a9a:	f7ff ffdc 	bl	3a56 <Clock_Ip_ClockSetSimLPO1KEnable>
}
    3a9e:	bf00      	nop
    3aa0:	b005      	add	sp, #20
    3aa2:	f85d fb04 	ldr.w	pc, [sp], #4

00003aa6 <Clock_Ip_ClockSetSimLPO32KEnable>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
static void Clock_Ip_ClockSetSimLPO32KEnable(Clock_Ip_GateConfigType const* Config)
{
    3aa6:	b500      	push	{lr}
    3aa8:	b083      	sub	sp, #12
    3aaa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3aac:	9b01      	ldr	r3, [sp, #4]
    3aae:	2b00      	cmp	r3, #0
    3ab0:	d002      	beq.n	3ab8 <Clock_Ip_ClockSetSimLPO32KEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Config);
    3ab2:	9801      	ldr	r0, [sp, #4]
    3ab4:	f000 f8d6 	bl	3c64 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ab8:	bf00      	nop
    3aba:	b003      	add	sp, #12
    3abc:	f85d fb04 	ldr.w	pc, [sp], #4

00003ac0 <Clock_Ip_ClockUpdateSimLPO32KEnable>:
static void Clock_Ip_ClockUpdateSimLPO32KEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3ac0:	b500      	push	{lr}
    3ac2:	b085      	sub	sp, #20
    3ac4:	9001      	str	r0, [sp, #4]
    3ac6:	460b      	mov	r3, r1
    3ac8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3acc:	9b01      	ldr	r3, [sp, #4]
    3ace:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3ad0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3ad4:	2b00      	cmp	r3, #0
    3ad6:	d003      	beq.n	3ae0 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x20>
    {
        Config.Enable = 0U;
    3ad8:	2300      	movs	r3, #0
    3ada:	f8ad 300c 	strh.w	r3, [sp, #12]
    3ade:	e002      	b.n	3ae6 <Clock_Ip_ClockUpdateSimLPO32KEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3ae0:	2301      	movs	r3, #1
    3ae2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimLPO32KEnable(&Config);
    3ae6:	ab02      	add	r3, sp, #8
    3ae8:	4618      	mov	r0, r3
    3aea:	f7ff ffdc 	bl	3aa6 <Clock_Ip_ClockSetSimLPO32KEnable>
}
    3aee:	bf00      	nop
    3af0:	b005      	add	sp, #20
    3af2:	f85d fb04 	ldr.w	pc, [sp], #4

00003af6 <Clock_Ip_ClockSetSimClkoutEnable>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
static void Clock_Ip_ClockSetSimClkoutEnable(Clock_Ip_GateConfigType const* Config)
{
    3af6:	b500      	push	{lr}
    3af8:	b083      	sub	sp, #12
    3afa:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3afc:	9b01      	ldr	r3, [sp, #4]
    3afe:	2b00      	cmp	r3, #0
    3b00:	d002      	beq.n	3b08 <Clock_Ip_ClockSetSimClkoutEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimClkoutEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Config);
    3b02:	9801      	ldr	r0, [sp, #4]
    3b04:	f000 f8c6 	bl	3c94 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b08:	bf00      	nop
    3b0a:	b003      	add	sp, #12
    3b0c:	f85d fb04 	ldr.w	pc, [sp], #4

00003b10 <Clock_Ip_ClockUpdateSimClkoutEnable>:
static void Clock_Ip_ClockUpdateSimClkoutEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3b10:	b500      	push	{lr}
    3b12:	b085      	sub	sp, #20
    3b14:	9001      	str	r0, [sp, #4]
    3b16:	460b      	mov	r3, r1
    3b18:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3b1c:	9b01      	ldr	r3, [sp, #4]
    3b1e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3b20:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3b24:	2b00      	cmp	r3, #0
    3b26:	d003      	beq.n	3b30 <Clock_Ip_ClockUpdateSimClkoutEnable+0x20>
    {
        Config.Enable = 0U;
    3b28:	2300      	movs	r3, #0
    3b2a:	f8ad 300c 	strh.w	r3, [sp, #12]
    3b2e:	e002      	b.n	3b36 <Clock_Ip_ClockUpdateSimClkoutEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3b30:	2301      	movs	r3, #1
    3b32:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimClkoutEnable(&Config);
    3b36:	ab02      	add	r3, sp, #8
    3b38:	4618      	mov	r0, r3
    3b3a:	f7ff ffdc 	bl	3af6 <Clock_Ip_ClockSetSimClkoutEnable>
}
    3b3e:	bf00      	nop
    3b40:	b005      	add	sp, #20
    3b42:	f85d fb04 	ldr.w	pc, [sp], #4

00003b46 <Clock_Ip_ClockSetPccCgcEnable>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
static void Clock_Ip_ClockSetPccCgcEnable(Clock_Ip_GateConfigType const* Config)
{
    3b46:	b500      	push	{lr}
    3b48:	b083      	sub	sp, #12
    3b4a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b4c:	9b01      	ldr	r3, [sp, #4]
    3b4e:	2b00      	cmp	r3, #0
    3b50:	d002      	beq.n	3b58 <Clock_Ip_ClockSetPccCgcEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetPccCgcEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Config);
    3b52:	9801      	ldr	r0, [sp, #4]
    3b54:	f000 f8b6 	bl	3cc4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3b58:	bf00      	nop
    3b5a:	b003      	add	sp, #12
    3b5c:	f85d fb04 	ldr.w	pc, [sp], #4

00003b60 <Clock_Ip_ClockUpdatePccCgcEnable>:
static void Clock_Ip_ClockUpdatePccCgcEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3b60:	b500      	push	{lr}
    3b62:	b085      	sub	sp, #20
    3b64:	9001      	str	r0, [sp, #4]
    3b66:	460b      	mov	r3, r1
    3b68:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3b6c:	9b01      	ldr	r3, [sp, #4]
    3b6e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3b70:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3b74:	2b00      	cmp	r3, #0
    3b76:	d003      	beq.n	3b80 <Clock_Ip_ClockUpdatePccCgcEnable+0x20>
    {
        Config.Enable = 0U;
    3b78:	2300      	movs	r3, #0
    3b7a:	f8ad 300c 	strh.w	r3, [sp, #12]
    3b7e:	e002      	b.n	3b86 <Clock_Ip_ClockUpdatePccCgcEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3b80:	2301      	movs	r3, #1
    3b82:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetPccCgcEnable(&Config);
    3b86:	ab02      	add	r3, sp, #8
    3b88:	4618      	mov	r0, r3
    3b8a:	f7ff ffdc 	bl	3b46 <Clock_Ip_ClockSetPccCgcEnable>
}
    3b8e:	bf00      	nop
    3b90:	b005      	add	sp, #20
    3b92:	f85d fb04 	ldr.w	pc, [sp], #4

00003b96 <Clock_Ip_ClockSetSimGate>:

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
#define SIM_PLATCGC_CGC_SHIFT(x)   (x)
#define SIM_PLATCGC_CGC_MASK(x)  ((uint32)1U << (x))
static void Clock_Ip_ClockSetSimGate(Clock_Ip_GateConfigType const* Config)
{
    3b96:	b500      	push	{lr}
    3b98:	b083      	sub	sp, #12
    3b9a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3b9c:	9b01      	ldr	r3, [sp, #4]
    3b9e:	2b00      	cmp	r3, #0
    3ba0:	d002      	beq.n	3ba8 <Clock_Ip_ClockSetSimGate+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimGate_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimGate_TrustedCall(Config);
    3ba2:	9801      	ldr	r0, [sp, #4]
    3ba4:	f000 f8bc 	bl	3d20 <Clock_Ip_ClockSetSimGate_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3ba8:	bf00      	nop
    3baa:	b003      	add	sp, #12
    3bac:	f85d fb04 	ldr.w	pc, [sp], #4

00003bb0 <Clock_Ip_ClockUpdateSimGate>:
static void Clock_Ip_ClockUpdateSimGate(Clock_Ip_NameType ClockName, boolean Gate)
{
    3bb0:	b500      	push	{lr}
    3bb2:	b085      	sub	sp, #20
    3bb4:	9001      	str	r0, [sp, #4]
    3bb6:	460b      	mov	r3, r1
    3bb8:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3bbc:	9b01      	ldr	r3, [sp, #4]
    3bbe:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3bc0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	d003      	beq.n	3bd0 <Clock_Ip_ClockUpdateSimGate+0x20>
    {
        Config.Enable = 0U;
    3bc8:	2300      	movs	r3, #0
    3bca:	f8ad 300c 	strh.w	r3, [sp, #12]
    3bce:	e002      	b.n	3bd6 <Clock_Ip_ClockUpdateSimGate+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3bd0:	2301      	movs	r3, #1
    3bd2:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimGate(&Config);
    3bd6:	ab02      	add	r3, sp, #8
    3bd8:	4618      	mov	r0, r3
    3bda:	f7ff ffdc 	bl	3b96 <Clock_Ip_ClockSetSimGate>
}
    3bde:	bf00      	nop
    3be0:	b005      	add	sp, #20
    3be2:	f85d fb04 	ldr.w	pc, [sp], #4

00003be6 <Clock_Ip_ClockSetSimTraceEnable>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
static void Clock_Ip_ClockSetSimTraceEnable(Clock_Ip_GateConfigType const* Config)
{
    3be6:	b500      	push	{lr}
    3be8:	b083      	sub	sp, #12
    3bea:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3bec:	9b01      	ldr	r3, [sp, #4]
    3bee:	2b00      	cmp	r3, #0
    3bf0:	d002      	beq.n	3bf8 <Clock_Ip_ClockSetSimTraceEnable+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ClockSetSimTraceEnable_TrustedCall,(Config));
      #else
        Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Config);
    3bf2:	9801      	ldr	r0, [sp, #4]
    3bf4:	f000 f8c0 	bl	3d78 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3bf8:	bf00      	nop
    3bfa:	b003      	add	sp, #12
    3bfc:	f85d fb04 	ldr.w	pc, [sp], #4

00003c00 <Clock_Ip_ClockUpdateSimTraceEnable>:

static void Clock_Ip_ClockUpdateSimTraceEnable(Clock_Ip_NameType ClockName, boolean Gate)
{
    3c00:	b500      	push	{lr}
    3c02:	b085      	sub	sp, #20
    3c04:	9001      	str	r0, [sp, #4]
    3c06:	460b      	mov	r3, r1
    3c08:	f88d 3003 	strb.w	r3, [sp, #3]
    Clock_Ip_GateConfigType Config;

    Config.Name = ClockName;
    3c0c:	9b01      	ldr	r3, [sp, #4]
    3c0e:	9302      	str	r3, [sp, #8]
    if (TRUE == Gate)
    3c10:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3c14:	2b00      	cmp	r3, #0
    3c16:	d003      	beq.n	3c20 <Clock_Ip_ClockUpdateSimTraceEnable+0x20>
    {
        Config.Enable = 0U;
    3c18:	2300      	movs	r3, #0
    3c1a:	f8ad 300c 	strh.w	r3, [sp, #12]
    3c1e:	e002      	b.n	3c26 <Clock_Ip_ClockUpdateSimTraceEnable+0x26>
    }
    else
    {
        Config.Enable = 1U;
    3c20:	2301      	movs	r3, #1
    3c22:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    /* Write configuration to register */
    Clock_Ip_ClockSetSimTraceEnable(&Config);
    3c26:	ab02      	add	r3, sp, #8
    3c28:	4618      	mov	r0, r3
    3c2a:	f7ff ffdc 	bl	3be6 <Clock_Ip_ClockSetSimTraceEnable>
}
    3c2e:	bf00      	nop
    3c30:	b005      	add	sp, #20
    3c32:	f85d fb04 	ldr.w	pc, [sp], #4

00003c36 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIM_LPO1K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3c36:	b084      	sub	sp, #16
    3c38:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3c3a:	4b09      	ldr	r3, [pc, #36]	; (3c60 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3c3c:	691b      	ldr	r3, [r3, #16]
    3c3e:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO1KCLKEN_MASK;
    3c40:	9b03      	ldr	r3, [sp, #12]
    3c42:	f023 0301 	bic.w	r3, r3, #1
    3c46:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    3c48:	9b01      	ldr	r3, [sp, #4]
    3c4a:	889b      	ldrh	r3, [r3, #4]
    3c4c:	461a      	mov	r2, r3
    3c4e:	9b03      	ldr	r3, [sp, #12]
    3c50:	4313      	orrs	r3, r2
    3c52:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3c54:	4a02      	ldr	r2, [pc, #8]	; (3c60 <Clock_Ip_ClockSetSimLPO1KEnable_TrustedCall+0x2a>)
    3c56:	9b03      	ldr	r3, [sp, #12]
    3c58:	6113      	str	r3, [r2, #16]
}
    3c5a:	bf00      	nop
    3c5c:	b004      	add	sp, #16
    3c5e:	4770      	bx	lr
    3c60:	40048000 	.word	0x40048000

00003c64 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO32K_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3c64:	b084      	sub	sp, #16
    3c66:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->LPOCLKS;
    3c68:	4b09      	ldr	r3, [pc, #36]	; (3c90 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3c6a:	691b      	ldr	r3, [r3, #16]
    3c6c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_LPOCLKS_LPO32KCLKEN_MASK;
    3c6e:	9b03      	ldr	r3, [sp, #12]
    3c70:	f023 0302 	bic.w	r3, r3, #2
    3c74:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    3c76:	9b01      	ldr	r3, [sp, #4]
    3c78:	889b      	ldrh	r3, [r3, #4]
    3c7a:	005b      	lsls	r3, r3, #1
    3c7c:	9a03      	ldr	r2, [sp, #12]
    3c7e:	4313      	orrs	r3, r2
    3c80:	9303      	str	r3, [sp, #12]
    IP_SIM->LPOCLKS = RegValue;
    3c82:	4a03      	ldr	r2, [pc, #12]	; (3c90 <Clock_Ip_ClockSetSimLPO32KEnable_TrustedCall+0x2c>)
    3c84:	9b03      	ldr	r3, [sp, #12]
    3c86:	6113      	str	r3, [r2, #16]
}
    3c88:	bf00      	nop
    3c8a:	b004      	add	sp, #16
    3c8c:	4770      	bx	lr
    3c8e:	bf00      	nop
    3c90:	40048000 	.word	0x40048000

00003c94 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimClkoutEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3c94:	b084      	sub	sp, #16
    3c96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CHIPCTL;
    3c98:	4b09      	ldr	r3, [pc, #36]	; (3cc0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3c9a:	685b      	ldr	r3, [r3, #4]
    3c9c:	9303      	str	r3, [sp, #12]
    RegValue &= ~SIM_CHIPCTL_CLKOUTEN_MASK;
    3c9e:	9b03      	ldr	r3, [sp, #12]
    3ca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3ca4:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << SIM_CHIPCTL_CLKOUTEN_SHIFT);
    3ca6:	9b01      	ldr	r3, [sp, #4]
    3ca8:	889b      	ldrh	r3, [r3, #4]
    3caa:	02db      	lsls	r3, r3, #11
    3cac:	9a03      	ldr	r2, [sp, #12]
    3cae:	4313      	orrs	r3, r2
    3cb0:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    3cb2:	4a03      	ldr	r2, [pc, #12]	; (3cc0 <Clock_Ip_ClockSetSimClkoutEnable_TrustedCall+0x2c>)
    3cb4:	9b03      	ldr	r3, [sp, #12]
    3cb6:	6053      	str	r3, [r2, #4]
}
    3cb8:	bf00      	nop
    3cba:	b004      	add	sp, #16
    3cbc:	4770      	bx	lr
    3cbe:	bf00      	nop
    3cc0:	40048000 	.word	0x40048000

00003cc4 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_PCC_CGC_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetPccCgcEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3cc4:	b084      	sub	sp, #16
    3cc6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]];
    3cc8:	4913      	ldr	r1, [pc, #76]	; (3d18 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3cca:	9b01      	ldr	r3, [sp, #4]
    3ccc:	681a      	ldr	r2, [r3, #0]
    3cce:	4813      	ldr	r0, [pc, #76]	; (3d1c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3cd0:	4613      	mov	r3, r2
    3cd2:	00db      	lsls	r3, r3, #3
    3cd4:	4413      	add	r3, r2
    3cd6:	4403      	add	r3, r0
    3cd8:	3306      	adds	r3, #6
    3cda:	781b      	ldrb	r3, [r3, #0]
    3cdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3ce0:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_CGC_MASK;
    3ce2:	9b03      	ldr	r3, [sp, #12]
    3ce4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    3ce8:	9303      	str	r3, [sp, #12]
    RegValue |= ((uint32)(Config->Enable) << PCC_PCCn_CGC_SHIFT);
    3cea:	9b01      	ldr	r3, [sp, #4]
    3cec:	889b      	ldrh	r3, [r3, #4]
    3cee:	079b      	lsls	r3, r3, #30
    3cf0:	9a03      	ldr	r2, [sp, #12]
    3cf2:	4313      	orrs	r3, r2
    3cf4:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX]] = RegValue;
    3cf6:	4908      	ldr	r1, [pc, #32]	; (3d18 <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x54>)
    3cf8:	9b01      	ldr	r3, [sp, #4]
    3cfa:	681a      	ldr	r2, [r3, #0]
    3cfc:	4807      	ldr	r0, [pc, #28]	; (3d1c <Clock_Ip_ClockSetPccCgcEnable_TrustedCall+0x58>)
    3cfe:	4613      	mov	r3, r2
    3d00:	00db      	lsls	r3, r3, #3
    3d02:	4413      	add	r3, r2
    3d04:	4403      	add	r3, r0
    3d06:	3306      	adds	r3, #6
    3d08:	781b      	ldrb	r3, [r3, #0]
    3d0a:	461a      	mov	r2, r3
    3d0c:	9b03      	ldr	r3, [sp, #12]
    3d0e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
    3d12:	bf00      	nop
    3d14:	b004      	add	sp, #16
    3d16:	4770      	bx	lr
    3d18:	40065000 	.word	0x40065000
    3d1c:	0000fab4 	.word	0x0000fab4

00003d20 <Clock_Ip_ClockSetSimGate_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_PLATCGC_CGC
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimGate_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3d20:	b086      	sub	sp, #24
    3d22:	9001      	str	r0, [sp, #4]
    uint32 Enable = Config->Enable;
    3d24:	9b01      	ldr	r3, [sp, #4]
    3d26:	889b      	ldrh	r3, [r3, #4]
    3d28:	9305      	str	r3, [sp, #20]
    uint32 GateIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_GATE_INDEX];
    3d2a:	9b01      	ldr	r3, [sp, #4]
    3d2c:	681a      	ldr	r2, [r3, #0]
    3d2e:	4910      	ldr	r1, [pc, #64]	; (3d70 <Clock_Ip_ClockSetSimGate_TrustedCall+0x50>)
    3d30:	4613      	mov	r3, r2
    3d32:	00db      	lsls	r3, r3, #3
    3d34:	4413      	add	r3, r2
    3d36:	440b      	add	r3, r1
    3d38:	3306      	adds	r3, #6
    3d3a:	781b      	ldrb	r3, [r3, #0]
    3d3c:	9304      	str	r3, [sp, #16]

    uint32 RegValue = (uint32 )IP_SIM->PLATCGC;
    3d3e:	4b0d      	ldr	r3, [pc, #52]	; (3d74 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3d42:	9303      	str	r3, [sp, #12]
    RegValue &= (~((uint32 )SIM_PLATCGC_CGC_MASK(GateIndex)));
    3d44:	2201      	movs	r2, #1
    3d46:	9b04      	ldr	r3, [sp, #16]
    3d48:	fa02 f303 	lsl.w	r3, r2, r3
    3d4c:	43db      	mvns	r3, r3
    3d4e:	9a03      	ldr	r2, [sp, #12]
    3d50:	4013      	ands	r3, r2
    3d52:	9303      	str	r3, [sp, #12]
    RegValue |= Enable << SIM_PLATCGC_CGC_SHIFT(GateIndex);
    3d54:	9a05      	ldr	r2, [sp, #20]
    3d56:	9b04      	ldr	r3, [sp, #16]
    3d58:	fa02 f303 	lsl.w	r3, r2, r3
    3d5c:	9a03      	ldr	r2, [sp, #12]
    3d5e:	4313      	orrs	r3, r2
    3d60:	9303      	str	r3, [sp, #12]
    IP_SIM->PLATCGC = (uint32 )RegValue;
    3d62:	4a04      	ldr	r2, [pc, #16]	; (3d74 <Clock_Ip_ClockSetSimGate_TrustedCall+0x54>)
    3d64:	9b03      	ldr	r3, [sp, #12]
    3d66:	6413      	str	r3, [r2, #64]	; 0x40
}
    3d68:	bf00      	nop
    3d6a:	b006      	add	sp, #24
    3d6c:	4770      	bx	lr
    3d6e:	bf00      	nop
    3d70:	0000fab4 	.word	0x0000fab4
    3d74:	40048000 	.word	0x40048000

00003d78 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_ENABLE
/* Write configuration of clock gate to register */
void Clock_Ip_ClockSetSimTraceEnable_TrustedCall(Clock_Ip_GateConfigType const* Config)
{
    3d78:	b084      	sub	sp, #16
    3d7a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    RegValue = IP_SIM->CLKDIV4;
    3d7c:	4b0a      	ldr	r3, [pc, #40]	; (3da8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    3d80:	9303      	str	r3, [sp, #12]
    if (1U == Config->Enable)
    3d82:	9b01      	ldr	r3, [sp, #4]
    3d84:	889b      	ldrh	r3, [r3, #4]
    3d86:	2b01      	cmp	r3, #1
    3d88:	d104      	bne.n	3d94 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x1c>
    {
        RegValue |= (SIM_CLKDIV4_TRACEDIVEN_MASK);
    3d8a:	9b03      	ldr	r3, [sp, #12]
    3d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3d90:	9303      	str	r3, [sp, #12]
    3d92:	e003      	b.n	3d9c <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x24>
    }
    else
    {
        RegValue &= ~(SIM_CLKDIV4_TRACEDIVEN_MASK);
    3d94:	9b03      	ldr	r3, [sp, #12]
    3d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3d9a:	9303      	str	r3, [sp, #12]
    }
    IP_SIM->CLKDIV4 = RegValue;
    3d9c:	4a02      	ldr	r2, [pc, #8]	; (3da8 <Clock_Ip_ClockSetSimTraceEnable_TrustedCall+0x30>)
    3d9e:	9b03      	ldr	r3, [sp, #12]
    3da0:	6693      	str	r3, [r2, #104]	; 0x68
}
    3da2:	bf00      	nop
    3da4:	b004      	add	sp, #16
    3da6:	4770      	bx	lr
    3da8:	40048000 	.word	0x40048000

00003dac <Clock_Ip_InternalOscillatorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_InternalOscillatorEmpty(Clock_Ip_IrcoscConfigType const* Config)
{
    3dac:	b082      	sub	sp, #8
    3dae:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    3db0:	bf00      	nop
    3db2:	b002      	add	sp, #8
    3db4:	4770      	bx	lr

00003db6 <Clock_Ip_InternalOscillatorEmpty_Disable>:
static void Clock_Ip_InternalOscillatorEmpty_Disable(Clock_Ip_NameType Name)
{
    3db6:	b082      	sub	sp, #8
    3db8:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    3dba:	bf00      	nop
    3dbc:	b002      	add	sp, #8
    3dbe:	4770      	bx	lr

00003dc0 <Clock_Ip_SetSirc>:
}
#endif

#ifdef CLOCK_IP_SIRC_ENABLE
static void Clock_Ip_SetSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3dc0:	b500      	push	{lr}
    3dc2:	b083      	sub	sp, #12
    3dc4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3dc6:	9b01      	ldr	r3, [sp, #4]
    3dc8:	2b00      	cmp	r3, #0
    3dca:	d002      	beq.n	3dd2 <Clock_Ip_SetSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetSirc_TrustedCall(Config);
    3dcc:	9801      	ldr	r0, [sp, #4]
    3dce:	f000 f8d1 	bl	3f74 <Clock_Ip_SetSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3dd2:	bf00      	nop
    3dd4:	b003      	add	sp, #12
    3dd6:	f85d fb04 	ldr.w	pc, [sp], #4

00003dda <Clock_Ip_EnableSirc>:
static void Clock_Ip_EnableSirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3dda:	b500      	push	{lr}
    3ddc:	b083      	sub	sp, #12
    3dde:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3de0:	9b01      	ldr	r3, [sp, #4]
    3de2:	2b00      	cmp	r3, #0
    3de4:	d002      	beq.n	3dec <Clock_Ip_EnableSirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSirc_TrustedCall(Config);
    3de6:	9801      	ldr	r0, [sp, #4]
    3de8:	f000 f950 	bl	408c <Clock_Ip_EnableSirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3dec:	bf00      	nop
    3dee:	b003      	add	sp, #12
    3df0:	f85d fb04 	ldr.w	pc, [sp], #4

00003df4 <Clock_Ip_DisableSirc>:
static void Clock_Ip_DisableSirc(Clock_Ip_NameType Name)
{
    3df4:	b500      	push	{lr}
    3df6:	b083      	sub	sp, #12
    3df8:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSirc_TrustedCall(Name);
    3dfa:	9801      	ldr	r0, [sp, #4]
    3dfc:	f000 f98e 	bl	411c <Clock_Ip_DisableSirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3e00:	bf00      	nop
    3e02:	b003      	add	sp, #12
    3e04:	f85d fb04 	ldr.w	pc, [sp], #4

00003e08 <Clock_Ip_SetSircVlp>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
static void Clock_Ip_SetSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3e08:	b500      	push	{lr}
    3e0a:	b083      	sub	sp, #12
    3e0c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e0e:	9b01      	ldr	r3, [sp, #4]
    3e10:	2b00      	cmp	r3, #0
    3e12:	d002      	beq.n	3e1a <Clock_Ip_SetSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircVlp_TrustedCall(Config);
    3e14:	9801      	ldr	r0, [sp, #4]
    3e16:	f000 f999 	bl	414c <Clock_Ip_SetSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e1a:	bf00      	nop
    3e1c:	b003      	add	sp, #12
    3e1e:	f85d fb04 	ldr.w	pc, [sp], #4

00003e22 <Clock_Ip_EnableSircVlp>:
static void Clock_Ip_EnableSircVlp(Clock_Ip_IrcoscConfigType const* Config)
{
    3e22:	b500      	push	{lr}
    3e24:	b083      	sub	sp, #12
    3e26:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e28:	9b01      	ldr	r3, [sp, #4]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d002      	beq.n	3e34 <Clock_Ip_EnableSircVlp+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircVlp_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircVlp_TrustedCall(Config);
    3e2e:	9801      	ldr	r0, [sp, #4]
    3e30:	f000 f9b0 	bl	4194 <Clock_Ip_EnableSircVlp_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e34:	bf00      	nop
    3e36:	b003      	add	sp, #12
    3e38:	f85d fb04 	ldr.w	pc, [sp], #4

00003e3c <Clock_Ip_DisableSircVlp>:
static void Clock_Ip_DisableSircVlp(Clock_Ip_NameType Name)
{
    3e3c:	b500      	push	{lr}
    3e3e:	b083      	sub	sp, #12
    3e40:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircVlp_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircVlp_TrustedCall(Name);
    3e42:	9801      	ldr	r0, [sp, #4]
    3e44:	f000 f9ba 	bl	41bc <Clock_Ip_DisableSircVlp_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3e48:	bf00      	nop
    3e4a:	b003      	add	sp, #12
    3e4c:	f85d fb04 	ldr.w	pc, [sp], #4

00003e50 <Clock_Ip_SetSircStop>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
static void Clock_Ip_SetSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3e50:	b500      	push	{lr}
    3e52:	b083      	sub	sp, #12
    3e54:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e56:	9b01      	ldr	r3, [sp, #4]
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d002      	beq.n	3e62 <Clock_Ip_SetSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_SetSircStop_TrustedCall(Config);
    3e5c:	9801      	ldr	r0, [sp, #4]
    3e5e:	f000 f9bd 	bl	41dc <Clock_Ip_SetSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e62:	bf00      	nop
    3e64:	b003      	add	sp, #12
    3e66:	f85d fb04 	ldr.w	pc, [sp], #4

00003e6a <Clock_Ip_EnableSircStop>:
static void Clock_Ip_EnableSircStop(Clock_Ip_IrcoscConfigType const* Config)
{
    3e6a:	b500      	push	{lr}
    3e6c:	b083      	sub	sp, #12
    3e6e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3e70:	9b01      	ldr	r3, [sp, #4]
    3e72:	2b00      	cmp	r3, #0
    3e74:	d002      	beq.n	3e7c <Clock_Ip_EnableSircStop+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSircStop_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSircStop_TrustedCall(Config);
    3e76:	9801      	ldr	r0, [sp, #4]
    3e78:	f000 f9d4 	bl	4224 <Clock_Ip_EnableSircStop_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3e7c:	bf00      	nop
    3e7e:	b003      	add	sp, #12
    3e80:	f85d fb04 	ldr.w	pc, [sp], #4

00003e84 <Clock_Ip_DisableSircStop>:
static void Clock_Ip_DisableSircStop(Clock_Ip_NameType Name)
{
    3e84:	b500      	push	{lr}
    3e86:	b083      	sub	sp, #12
    3e88:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSircStop_TrustedCall,(Name));
  #else
    Clock_Ip_DisableSircStop_TrustedCall(Name);
    3e8a:	9801      	ldr	r0, [sp, #4]
    3e8c:	f000 f9de 	bl	424c <Clock_Ip_DisableSircStop_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3e90:	bf00      	nop
    3e92:	b003      	add	sp, #12
    3e94:	f85d fb04 	ldr.w	pc, [sp], #4

00003e98 <SetInputSouceSytemClock>:

#ifdef CLOCK_IP_FIRC_ENABLE
#define CLOCK_IP_SIRC_CLK_SOURCE 2U
#define CLOCK_IP_FIRC_CLK_SOURCE 3U
static void SetInputSouceSytemClock(uint32 SourceClock)
{
    3e98:	b500      	push	{lr}
    3e9a:	b089      	sub	sp, #36	; 0x24
    3e9c:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    boolean TimeoutOccurred = FALSE;
    3e9e:	2300      	movs	r3, #0
    3ea0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 ScsStatus;

    RegValue = IP_SCG->RCCR;
    3ea4:	4b20      	ldr	r3, [pc, #128]	; (3f28 <SetInputSouceSytemClock+0x90>)
    3ea6:	695b      	ldr	r3, [r3, #20]
    3ea8:	9306      	str	r3, [sp, #24]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    3eaa:	9b06      	ldr	r3, [sp, #24]
    3eac:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    3eb0:	9306      	str	r3, [sp, #24]
    RegValue |= (SourceClock << SCG_RCCR_SCS_SHIFT);
    3eb2:	9b01      	ldr	r3, [sp, #4]
    3eb4:	061b      	lsls	r3, r3, #24
    3eb6:	9a06      	ldr	r2, [sp, #24]
    3eb8:	4313      	orrs	r3, r2
    3eba:	9306      	str	r3, [sp, #24]
    IP_SCG->RCCR = RegValue;
    3ebc:	4a1a      	ldr	r2, [pc, #104]	; (3f28 <SetInputSouceSytemClock+0x90>)
    3ebe:	9b06      	ldr	r3, [sp, #24]
    3ec0:	6153      	str	r3, [r2, #20]

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    3ec2:	aa02      	add	r2, sp, #8
    3ec4:	a903      	add	r1, sp, #12
    3ec6:	a804      	add	r0, sp, #16
    3ec8:	f24c 3350 	movw	r3, #50000	; 0xc350
    3ecc:	f7ff f9ac 	bl	3228 <Clock_Ip_StartTimeout>
    do
    {
        ScsStatus = (((IP_SCG->CSR & SCG_CSR_SCS_MASK) >> SCG_CSR_SCS_SHIFT) != (SourceClock))?0U:1U;
    3ed0:	4b15      	ldr	r3, [pc, #84]	; (3f28 <SetInputSouceSytemClock+0x90>)
    3ed2:	691b      	ldr	r3, [r3, #16]
    3ed4:	0e1b      	lsrs	r3, r3, #24
    3ed6:	f003 030f 	and.w	r3, r3, #15
    3eda:	9a01      	ldr	r2, [sp, #4]
    3edc:	429a      	cmp	r2, r3
    3ede:	bf0c      	ite	eq
    3ee0:	2301      	moveq	r3, #1
    3ee2:	2300      	movne	r3, #0
    3ee4:	b2db      	uxtb	r3, r3
    3ee6:	9305      	str	r3, [sp, #20]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    3ee8:	9a02      	ldr	r2, [sp, #8]
    3eea:	a903      	add	r1, sp, #12
    3eec:	ab04      	add	r3, sp, #16
    3eee:	4618      	mov	r0, r3
    3ef0:	f7ff f9b4 	bl	325c <Clock_Ip_TimeoutExpired>
    3ef4:	4603      	mov	r3, r0
    3ef6:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == ScsStatus) && (FALSE == TimeoutOccurred));
    3efa:	9b05      	ldr	r3, [sp, #20]
    3efc:	2b00      	cmp	r3, #0
    3efe:	d106      	bne.n	3f0e <SetInputSouceSytemClock+0x76>
    3f00:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3f04:	f083 0301 	eor.w	r3, r3, #1
    3f08:	b2db      	uxtb	r3, r3
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	d1e0      	bne.n	3ed0 <SetInputSouceSytemClock+0x38>

    if (FALSE != TimeoutOccurred)
    3f0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3f12:	2b00      	cmp	r3, #0
    3f14:	d003      	beq.n	3f1e <SetInputSouceSytemClock+0x86>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    3f16:	2105      	movs	r1, #5
    3f18:	2001      	movs	r0, #1
    3f1a:	f7ff f975 	bl	3208 <Clock_Ip_ReportClockErrors>
    }
}
    3f1e:	bf00      	nop
    3f20:	b009      	add	sp, #36	; 0x24
    3f22:	f85d fb04 	ldr.w	pc, [sp], #4
    3f26:	bf00      	nop
    3f28:	40064000 	.word	0x40064000

00003f2c <Clock_Ip_SetFirc>:
static void Clock_Ip_SetFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3f2c:	b500      	push	{lr}
    3f2e:	b083      	sub	sp, #12
    3f30:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f32:	9b01      	ldr	r3, [sp, #4]
    3f34:	2b00      	cmp	r3, #0
    3f36:	d002      	beq.n	3f3e <Clock_Ip_SetFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetFirc_TrustedCall,(Config));
      #else
        Clock_Ip_SetFirc_TrustedCall(Config);
    3f38:	9801      	ldr	r0, [sp, #4]
    3f3a:	f000 f997 	bl	426c <Clock_Ip_SetFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f3e:	bf00      	nop
    3f40:	b003      	add	sp, #12
    3f42:	f85d fb04 	ldr.w	pc, [sp], #4

00003f46 <Clock_Ip_EnableFirc>:
static void Clock_Ip_EnableFirc(Clock_Ip_IrcoscConfigType const* Config)
{
    3f46:	b500      	push	{lr}
    3f48:	b083      	sub	sp, #12
    3f4a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    3f4c:	9b01      	ldr	r3, [sp, #4]
    3f4e:	2b00      	cmp	r3, #0
    3f50:	d002      	beq.n	3f58 <Clock_Ip_EnableFirc+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableFirc_TrustedCall,(Config));
      #else
        Clock_Ip_EnableFirc_TrustedCall(Config);
    3f52:	9801      	ldr	r0, [sp, #4]
    3f54:	f000 fa7e 	bl	4454 <Clock_Ip_EnableFirc_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    3f58:	bf00      	nop
    3f5a:	b003      	add	sp, #12
    3f5c:	f85d fb04 	ldr.w	pc, [sp], #4

00003f60 <Clock_Ip_DisableFirc>:
static void Clock_Ip_DisableFirc(Clock_Ip_NameType Name)
{
    3f60:	b500      	push	{lr}
    3f62:	b083      	sub	sp, #12
    3f64:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableFirc_TrustedCall,(Name));
  #else
    Clock_Ip_DisableFirc_TrustedCall(Name);
    3f66:	9801      	ldr	r0, [sp, #4]
    3f68:	f000 fab8 	bl	44dc <Clock_Ip_DisableFirc_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    3f6c:	bf00      	nop
    3f6e:	b003      	add	sp, #12
    3f70:	f85d fb04 	ldr.w	pc, [sp], #4

00003f74 <Clock_Ip_SetSirc_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SIRC_ENABLE
void Clock_Ip_SetSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    3f74:	b500      	push	{lr}
    3f76:	b08b      	sub	sp, #44	; 0x2c
    3f78:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    3f7a:	2300      	movs	r3, #0
    3f7c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;
    Clock_Ip_IrcoscConfigType SircConfig;

    if (NULL_PTR == Config)
    3f80:	9b01      	ldr	r3, [sp, #4]
    3f82:	2b00      	cmp	r3, #0
    3f84:	d10b      	bne.n	3f9e <Clock_Ip_SetSirc_TrustedCall+0x2a>
    {
        SircConfig.Name   = FIRC_CLK;
    3f86:	2305      	movs	r3, #5
    3f88:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = 1U;   /* 8MHz */
    3f8a:	2301      	movs	r3, #1
    3f8c:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = 1U;   /* enabled */
    3f90:	2301      	movs	r3, #1
    3f92:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable =1U;
    3f96:	2301      	movs	r3, #1
    3f98:	f88d 3010 	strb.w	r3, [sp, #16]
    3f9c:	e00e      	b.n	3fbc <Clock_Ip_SetSirc_TrustedCall+0x48>
    }
    else
    {
        SircConfig.Name   = Config->Name;
    3f9e:	9b01      	ldr	r3, [sp, #4]
    3fa0:	681b      	ldr	r3, [r3, #0]
    3fa2:	9302      	str	r3, [sp, #8]
        SircConfig.Range  = Config->Range;
    3fa4:	9b01      	ldr	r3, [sp, #4]
    3fa6:	79db      	ldrb	r3, [r3, #7]
    3fa8:	f88d 300f 	strb.w	r3, [sp, #15]
        SircConfig.Enable = Config->Enable;
    3fac:	9b01      	ldr	r3, [sp, #4]
    3fae:	889b      	ldrh	r3, [r3, #4]
    3fb0:	f8ad 300c 	strh.w	r3, [sp, #12]
        SircConfig.LowPowerModeEnable = Config->LowPowerModeEnable;
    3fb4:	9b01      	ldr	r3, [sp, #4]
    3fb6:	7a1b      	ldrb	r3, [r3, #8]
    3fb8:	f88d 3010 	strb.w	r3, [sp, #16]
    }

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    3fbc:	4b32      	ldr	r3, [pc, #200]	; (4088 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3fc2:	4a31      	ldr	r2, [pc, #196]	; (4088 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    3fc8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCEN_MASK));
    3fcc:	4b2e      	ldr	r3, [pc, #184]	; (4088 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3fd2:	4a2d      	ldr	r2, [pc, #180]	; (4088 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fd4:	f023 0301 	bic.w	r3, r3, #1
    3fd8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    3fdc:	4b2a      	ldr	r3, [pc, #168]	; (4088 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    3fe2:	4a29      	ldr	r2, [pc, #164]	; (4088 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3fe4:	f023 0304 	bic.w	r3, r3, #4
    3fe8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC. */
    if (1U == SircConfig.Enable)
    3fec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    3ff0:	2b01      	cmp	r3, #1
    3ff2:	d144      	bne.n	407e <Clock_Ip_SetSirc_TrustedCall+0x10a>
    {
        /* Step frequency range. */
        IP_SCG->SIRCCFG = SCG_SIRCCFG_RANGE(SircConfig.Range);
    3ff4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3ff8:	4a23      	ldr	r2, [pc, #140]	; (4088 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    3ffa:	f003 0301 	and.w	r3, r3, #1
    3ffe:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

        /* Enable clock. */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    4002:	4b21      	ldr	r3, [pc, #132]	; (4088 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4004:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4008:	4a1f      	ldr	r2, [pc, #124]	; (4088 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    400a:	f043 0301 	orr.w	r3, r3, #1
    400e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

        /* Set SIRC in VLP modes */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(SircConfig.LowPowerModeEnable);
    4012:	4b1d      	ldr	r3, [pc, #116]	; (4088 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4014:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4018:	f89d 3010 	ldrb.w	r3, [sp, #16]
    401c:	009b      	lsls	r3, r3, #2
    401e:	f003 0304 	and.w	r3, r3, #4
    4022:	4919      	ldr	r1, [pc, #100]	; (4088 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    4024:	4313      	orrs	r3, r2
    4026:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    402a:	aa05      	add	r2, sp, #20
    402c:	a906      	add	r1, sp, #24
    402e:	a807      	add	r0, sp, #28
    4030:	f24c 3350 	movw	r3, #50000	; 0xc350
    4034:	f7ff f8f8 	bl	3228 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    4038:	4b13      	ldr	r3, [pc, #76]	; (4088 <Clock_Ip_SetSirc_TrustedCall+0x114>)
    403a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    403e:	0e1b      	lsrs	r3, r3, #24
    4040:	f003 0301 	and.w	r3, r3, #1
    4044:	9308      	str	r3, [sp, #32]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4046:	9a05      	ldr	r2, [sp, #20]
    4048:	a906      	add	r1, sp, #24
    404a:	ab07      	add	r3, sp, #28
    404c:	4618      	mov	r0, r3
    404e:	f7ff f905 	bl	325c <Clock_Ip_TimeoutExpired>
    4052:	4603      	mov	r3, r0
    4054:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    4058:	9b08      	ldr	r3, [sp, #32]
    405a:	2b00      	cmp	r3, #0
    405c:	d106      	bne.n	406c <Clock_Ip_SetSirc_TrustedCall+0xf8>
    405e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4062:	f083 0301 	eor.w	r3, r3, #1
    4066:	b2db      	uxtb	r3, r3
    4068:	2b00      	cmp	r3, #0
    406a:	d1e5      	bne.n	4038 <Clock_Ip_SetSirc_TrustedCall+0xc4>

        if (FALSE != TimeoutOccurred)
    406c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4070:	2b00      	cmp	r3, #0
    4072:	d004      	beq.n	407e <Clock_Ip_SetSirc_TrustedCall+0x10a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, SircConfig.Name);
    4074:	9b02      	ldr	r3, [sp, #8]
    4076:	4619      	mov	r1, r3
    4078:	2001      	movs	r0, #1
    407a:	f7ff f8c5 	bl	3208 <Clock_Ip_ReportClockErrors>
        }
    }
}
    407e:	bf00      	nop
    4080:	b00b      	add	sp, #44	; 0x2c
    4082:	f85d fb04 	ldr.w	pc, [sp], #4
    4086:	bf00      	nop
    4088:	40064000 	.word	0x40064000

0000408c <Clock_Ip_EnableSirc_TrustedCall>:
void Clock_Ip_EnableSirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    408c:	b500      	push	{lr}
    408e:	b089      	sub	sp, #36	; 0x24
    4090:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    4092:	2300      	movs	r3, #0
    4094:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    /* Enable clock. */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCEN(1U);
    4098:	4b1f      	ldr	r3, [pc, #124]	; (4118 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    409a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    409e:	4a1e      	ldr	r2, [pc, #120]	; (4118 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    40a0:	f043 0301 	orr.w	r3, r3, #1
    40a4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Enable SIRC Low Power */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1UL);
    40a8:	4b1b      	ldr	r3, [pc, #108]	; (4118 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    40aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    40ae:	4a1a      	ldr	r2, [pc, #104]	; (4118 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    40b0:	f043 0304 	orr.w	r3, r3, #4
    40b4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    40b8:	aa03      	add	r2, sp, #12
    40ba:	a904      	add	r1, sp, #16
    40bc:	a805      	add	r0, sp, #20
    40be:	f24c 3350 	movw	r3, #50000	; 0xc350
    40c2:	f7ff f8b1 	bl	3228 <Clock_Ip_StartTimeout>
    /* Wait until ircosc is locked */
    do
    {
        IrcoscStatus = (((IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCVLD_MASK) >> SCG_SIRCCSR_SIRCVLD_SHIFT));
    40c6:	4b14      	ldr	r3, [pc, #80]	; (4118 <Clock_Ip_EnableSirc_TrustedCall+0x8c>)
    40c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    40cc:	0e1b      	lsrs	r3, r3, #24
    40ce:	f003 0301 	and.w	r3, r3, #1
    40d2:	9306      	str	r3, [sp, #24]
        TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    40d4:	9a03      	ldr	r2, [sp, #12]
    40d6:	a904      	add	r1, sp, #16
    40d8:	ab05      	add	r3, sp, #20
    40da:	4618      	mov	r0, r3
    40dc:	f7ff f8be 	bl	325c <Clock_Ip_TimeoutExpired>
    40e0:	4603      	mov	r3, r0
    40e2:	f88d 301f 	strb.w	r3, [sp, #31]
    }
    while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    40e6:	9b06      	ldr	r3, [sp, #24]
    40e8:	2b00      	cmp	r3, #0
    40ea:	d106      	bne.n	40fa <Clock_Ip_EnableSirc_TrustedCall+0x6e>
    40ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40f0:	f083 0301 	eor.w	r3, r3, #1
    40f4:	b2db      	uxtb	r3, r3
    40f6:	2b00      	cmp	r3, #0
    40f8:	d1e5      	bne.n	40c6 <Clock_Ip_EnableSirc_TrustedCall+0x3a>

    if (FALSE != TimeoutOccurred)
    40fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
    40fe:	2b00      	cmp	r3, #0
    4100:	d005      	beq.n	410e <Clock_Ip_EnableSirc_TrustedCall+0x82>
    {
        /* Report timeout error */
        Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4102:	9b01      	ldr	r3, [sp, #4]
    4104:	681b      	ldr	r3, [r3, #0]
    4106:	4619      	mov	r1, r3
    4108:	2001      	movs	r0, #1
    410a:	f7ff f87d 	bl	3208 <Clock_Ip_ReportClockErrors>
    }
}
    410e:	bf00      	nop
    4110:	b009      	add	sp, #36	; 0x24
    4112:	f85d fb04 	ldr.w	pc, [sp], #4
    4116:	bf00      	nop
    4118:	40064000 	.word	0x40064000

0000411c <Clock_Ip_DisableSirc_TrustedCall>:
void Clock_Ip_DisableSirc_TrustedCall(Clock_Ip_NameType Name)
{
    411c:	b082      	sub	sp, #8
    411e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock. */
    IP_SCG->SIRCCSR &= ~SCG_SIRCCSR_SIRCEN_MASK;
    4120:	4b09      	ldr	r3, [pc, #36]	; (4148 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4122:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4126:	4a08      	ldr	r2, [pc, #32]	; (4148 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4128:	f023 0301 	bic.w	r3, r3, #1
    412c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Disable SIRC Low Power */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4130:	4b05      	ldr	r3, [pc, #20]	; (4148 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4132:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4136:	4a04      	ldr	r2, [pc, #16]	; (4148 <Clock_Ip_DisableSirc_TrustedCall+0x2c>)
    4138:	f023 0304 	bic.w	r3, r3, #4
    413c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4140:	bf00      	nop
    4142:	b002      	add	sp, #8
    4144:	4770      	bx	lr
    4146:	bf00      	nop
    4148:	40064000 	.word	0x40064000

0000414c <Clock_Ip_SetSircVlp_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_VLP_ENABLE
void Clock_Ip_SetSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    414c:	b082      	sub	sp, #8
    414e:	9001      	str	r0, [sp, #4]
    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    4150:	4b0f      	ldr	r3, [pc, #60]	; (4190 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4152:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4156:	4a0e      	ldr	r2, [pc, #56]	; (4190 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4158:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    415c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    4160:	4b0b      	ldr	r3, [pc, #44]	; (4190 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4162:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4166:	4a0a      	ldr	r2, [pc, #40]	; (4190 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4168:	f023 0304 	bic.w	r3, r3, #4
    416c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in VLP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(Config->LowPowerModeEnable);
    4170:	4b07      	ldr	r3, [pc, #28]	; (4190 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4172:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4176:	9b01      	ldr	r3, [sp, #4]
    4178:	7a1b      	ldrb	r3, [r3, #8]
    417a:	009b      	lsls	r3, r3, #2
    417c:	f003 0304 	and.w	r3, r3, #4
    4180:	4903      	ldr	r1, [pc, #12]	; (4190 <Clock_Ip_SetSircVlp_TrustedCall+0x44>)
    4182:	4313      	orrs	r3, r2
    4184:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4188:	bf00      	nop
    418a:	b002      	add	sp, #8
    418c:	4770      	bx	lr
    418e:	bf00      	nop
    4190:	40064000 	.word	0x40064000

00004194 <Clock_Ip_EnableSircVlp_TrustedCall>:
void Clock_Ip_EnableSircVlp_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4194:	b082      	sub	sp, #8
    4196:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4198:	9b01      	ldr	r3, [sp, #4]
    419a:	889b      	ldrh	r3, [r3, #4]
    419c:	2b01      	cmp	r3, #1
    419e:	d107      	bne.n	41b0 <Clock_Ip_EnableSircVlp_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCLPEN(1U);
    41a0:	4b05      	ldr	r3, [pc, #20]	; (41b8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    41a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    41a6:	4a04      	ldr	r2, [pc, #16]	; (41b8 <Clock_Ip_EnableSircVlp_TrustedCall+0x24>)
    41a8:	f043 0304 	orr.w	r3, r3, #4
    41ac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    41b0:	bf00      	nop
    41b2:	b002      	add	sp, #8
    41b4:	4770      	bx	lr
    41b6:	bf00      	nop
    41b8:	40064000 	.word	0x40064000

000041bc <Clock_Ip_DisableSircVlp_TrustedCall>:
void Clock_Ip_DisableSircVlp_TrustedCall(Clock_Ip_NameType Name)
{
    41bc:	b082      	sub	sp, #8
    41be:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCLPEN_MASK));
    41c0:	4b05      	ldr	r3, [pc, #20]	; (41d8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    41c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    41c6:	4a04      	ldr	r2, [pc, #16]	; (41d8 <Clock_Ip_DisableSircVlp_TrustedCall+0x1c>)
    41c8:	f023 0304 	bic.w	r3, r3, #4
    41cc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    41d0:	bf00      	nop
    41d2:	b002      	add	sp, #8
    41d4:	4770      	bx	lr
    41d6:	bf00      	nop
    41d8:	40064000 	.word	0x40064000

000041dc <Clock_Ip_SetSircStop_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIRC_STOP_ENABLE
void Clock_Ip_SetSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    41dc:	b082      	sub	sp, #8
    41de:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Clear LK bit field */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_LK_MASK));
    41e0:	4b0f      	ldr	r3, [pc, #60]	; (4220 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    41e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    41e6:	4a0e      	ldr	r2, [pc, #56]	; (4220 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    41e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    41ec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    41f0:	4b0b      	ldr	r3, [pc, #44]	; (4220 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    41f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    41f6:	4a0a      	ldr	r2, [pc, #40]	; (4220 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    41f8:	f023 0302 	bic.w	r3, r3, #2
    41fc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Configure SIRC in STOP mode */
    IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(Config->StopModeEnable);
    4200:	4b07      	ldr	r3, [pc, #28]	; (4220 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4202:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4206:	9b01      	ldr	r3, [sp, #4]
    4208:	7a5b      	ldrb	r3, [r3, #9]
    420a:	005b      	lsls	r3, r3, #1
    420c:	f003 0302 	and.w	r3, r3, #2
    4210:	4903      	ldr	r1, [pc, #12]	; (4220 <Clock_Ip_SetSircStop_TrustedCall+0x44>)
    4212:	4313      	orrs	r3, r2
    4214:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
}
    4218:	bf00      	nop
    421a:	b002      	add	sp, #8
    421c:	4770      	bx	lr
    421e:	bf00      	nop
    4220:	40064000 	.word	0x40064000

00004224 <Clock_Ip_EnableSircStop_TrustedCall>:
void Clock_Ip_EnableSircStop_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4224:	b082      	sub	sp, #8
    4226:	9001      	str	r0, [sp, #4]
    if (1U == Config->Enable)
    4228:	9b01      	ldr	r3, [sp, #4]
    422a:	889b      	ldrh	r3, [r3, #4]
    422c:	2b01      	cmp	r3, #1
    422e:	d107      	bne.n	4240 <Clock_Ip_EnableSircStop_TrustedCall+0x1c>
    {
        /* Enable clock in VLP mode */
        IP_SCG->SIRCCSR |= SCG_SIRCCSR_SIRCSTEN(1U);
    4230:	4b05      	ldr	r3, [pc, #20]	; (4248 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4232:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4236:	4a04      	ldr	r2, [pc, #16]	; (4248 <Clock_Ip_EnableSircStop_TrustedCall+0x24>)
    4238:	f043 0302 	orr.w	r3, r3, #2
    423c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    }
}
    4240:	bf00      	nop
    4242:	b002      	add	sp, #8
    4244:	4770      	bx	lr
    4246:	bf00      	nop
    4248:	40064000 	.word	0x40064000

0000424c <Clock_Ip_DisableSircStop_TrustedCall>:
void Clock_Ip_DisableSircStop_TrustedCall(Clock_Ip_NameType Name)
{
    424c:	b082      	sub	sp, #8
    424e:	9001      	str	r0, [sp, #4]
    (void)Name;

    /* Disable clock */
    IP_SCG->SIRCCSR &= (~((uint32)SCG_SIRCCSR_SIRCSTEN_MASK));
    4250:	4b05      	ldr	r3, [pc, #20]	; (4268 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4252:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    4256:	4a04      	ldr	r2, [pc, #16]	; (4268 <Clock_Ip_DisableSircStop_TrustedCall+0x1c>)
    4258:	f023 0302 	bic.w	r3, r3, #2
    425c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4260:	bf00      	nop
    4262:	b002      	add	sp, #8
    4264:	4770      	bx	lr
    4266:	bf00      	nop
    4268:	40064000 	.word	0x40064000

0000426c <Clock_Ip_SetFirc_TrustedCall>:
#endif

#ifdef CLOCK_IP_FIRC_ENABLE
void Clock_Ip_SetFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    426c:	b500      	push	{lr}
    426e:	b08b      	sub	sp, #44	; 0x2c
    4270:	9001      	str	r0, [sp, #4]
    uint32 Instance = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4272:	9b01      	ldr	r3, [sp, #4]
    4274:	681a      	ldr	r2, [r3, #0]
    4276:	4975      	ldr	r1, [pc, #468]	; (444c <Clock_Ip_SetFirc_TrustedCall+0x1e0>)
    4278:	4613      	mov	r3, r2
    427a:	00db      	lsls	r3, r3, #3
    427c:	4413      	add	r3, r2
    427e:	440b      	add	r3, r1
    4280:	781b      	ldrb	r3, [r3, #0]
    4282:	9308      	str	r3, [sp, #32]
    boolean TimeoutOccurred = FALSE;
    4284:	2300      	movs	r3, #0
    4286:	f88d 301f 	strb.w	r3, [sp, #31]
    boolean SircWasDisabled = FALSE;
    428a:	2300      	movs	r3, #0
    428c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 IrcoscStatus;

    (void)Instance;

    /* Clear LK bit field */
    IP_SCG->FIRCCSR &= (uint32)(~(SCG_FIRCCSR_LK_MASK));
    4290:	4b6f      	ldr	r3, [pc, #444]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4292:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4296:	4a6e      	ldr	r2, [pc, #440]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4298:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    429c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

    /* Check that FIRC is used by system clock) */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCSEL_MASK) != 0U)
    42a0:	4b6b      	ldr	r3, [pc, #428]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    42a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    42aa:	2b00      	cmp	r3, #0
    42ac:	d07d      	beq.n	43aa <Clock_Ip_SetFirc_TrustedCall+0x13e>
    {
        /* Check whether FIRC is already configured as required */
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    42ae:	9b01      	ldr	r3, [sp, #4]
    42b0:	79db      	ldrb	r3, [r3, #7]
    42b2:	461a      	mov	r2, r3
    42b4:	4b66      	ldr	r3, [pc, #408]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42b6:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    42ba:	f003 0303 	and.w	r3, r3, #3
    42be:	429a      	cmp	r2, r3
    42c0:	d10b      	bne.n	42da <Clock_Ip_SetFirc_TrustedCall+0x6e>
            (Config->Regulator != ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT)) )
    42c2:	9b01      	ldr	r3, [sp, #4]
    42c4:	799b      	ldrb	r3, [r3, #6]
    42c6:	461a      	mov	r2, r3
    42c8:	4b61      	ldr	r3, [pc, #388]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    42ce:	08db      	lsrs	r3, r3, #3
    42d0:	f003 0301 	and.w	r3, r3, #1
        if ( (Config->Range != ((IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT)) ||
    42d4:	429a      	cmp	r2, r3
    42d6:	f000 80b4 	beq.w	4442 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        {
            /* Enable SIRC if it is disabled. */
            if (0U == (IP_SCG->SIRCCSR & SCG_SIRCCSR_SIRCEN_MASK))
    42da:	4b5d      	ldr	r3, [pc, #372]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    42e0:	f003 0301 	and.w	r3, r3, #1
    42e4:	2b00      	cmp	r3, #0
    42e6:	d105      	bne.n	42f4 <Clock_Ip_SetFirc_TrustedCall+0x88>
            {
                SircWasDisabled = TRUE;
    42e8:	2301      	movs	r3, #1
    42ea:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                Clock_Ip_SetSirc(NULL_PTR);
    42ee:	2000      	movs	r0, #0
    42f0:	f7ff fd66 	bl	3dc0 <Clock_Ip_SetSirc>
            }

            /* Switch to SIRC */
            SetInputSouceSytemClock(CLOCK_IP_SIRC_CLK_SOURCE);
    42f4:	2002      	movs	r0, #2
    42f6:	f7ff fdcf 	bl	3e98 <SetInputSouceSytemClock>

            /* Disable clock */
            IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    42fa:	4b55      	ldr	r3, [pc, #340]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    42fc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4300:	4a53      	ldr	r2, [pc, #332]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4302:	f023 0301 	bic.w	r3, r3, #1
    4306:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

            /* Configure FIRC. */
            if (1U == Config->Enable)
    430a:	9b01      	ldr	r3, [sp, #4]
    430c:	889b      	ldrh	r3, [r3, #4]
    430e:	2b01      	cmp	r3, #1
    4310:	f040 8097 	bne.w	4442 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            {
                /* Step frequency range. */
                IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    4314:	9b01      	ldr	r3, [sp, #4]
    4316:	79db      	ldrb	r3, [r3, #7]
    4318:	4a4d      	ldr	r2, [pc, #308]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    431a:	f003 0303 	and.w	r3, r3, #3
    431e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308

                /* Enable clock. */
                IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    4322:	4b4b      	ldr	r3, [pc, #300]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4324:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    4328:	9b01      	ldr	r3, [sp, #4]
    432a:	799b      	ldrb	r3, [r3, #6]
    432c:	00db      	lsls	r3, r3, #3
    432e:	f003 0308 	and.w	r3, r3, #8
    4332:	4313      	orrs	r3, r2
    4334:	4a46      	ldr	r2, [pc, #280]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    4336:	f043 0301 	orr.w	r3, r3, #1
    433a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

                Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    433e:	aa03      	add	r2, sp, #12
    4340:	a904      	add	r1, sp, #16
    4342:	a805      	add	r0, sp, #20
    4344:	f24c 3350 	movw	r3, #50000	; 0xc350
    4348:	f7fe ff6e 	bl	3228 <Clock_Ip_StartTimeout>
                /* Wait until ircosc is locked */
                do
                {
                    IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    434c:	4b40      	ldr	r3, [pc, #256]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    434e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4352:	0e1b      	lsrs	r3, r3, #24
    4354:	f003 0301 	and.w	r3, r3, #1
    4358:	9306      	str	r3, [sp, #24]
                    TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    435a:	9a03      	ldr	r2, [sp, #12]
    435c:	a904      	add	r1, sp, #16
    435e:	ab05      	add	r3, sp, #20
    4360:	4618      	mov	r0, r3
    4362:	f7fe ff7b 	bl	325c <Clock_Ip_TimeoutExpired>
    4366:	4603      	mov	r3, r0
    4368:	f88d 301f 	strb.w	r3, [sp, #31]
                }
                while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    436c:	9b06      	ldr	r3, [sp, #24]
    436e:	2b00      	cmp	r3, #0
    4370:	d106      	bne.n	4380 <Clock_Ip_SetFirc_TrustedCall+0x114>
    4372:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4376:	f083 0301 	eor.w	r3, r3, #1
    437a:	b2db      	uxtb	r3, r3
    437c:	2b00      	cmp	r3, #0
    437e:	d1e5      	bne.n	434c <Clock_Ip_SetFirc_TrustedCall+0xe0>

                if (FALSE != TimeoutOccurred)
    4380:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4384:	2b00      	cmp	r3, #0
    4386:	d005      	beq.n	4394 <Clock_Ip_SetFirc_TrustedCall+0x128>
                {
                    /* Report timeout error */
                    Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4388:	9b01      	ldr	r3, [sp, #4]
    438a:	681b      	ldr	r3, [r3, #0]
    438c:	4619      	mov	r1, r3
    438e:	2001      	movs	r0, #1
    4390:	f7fe ff3a 	bl	3208 <Clock_Ip_ReportClockErrors>
                }

                /* Switch back to FIRC */
                SetInputSouceSytemClock(CLOCK_IP_FIRC_CLK_SOURCE);
    4394:	2003      	movs	r0, #3
    4396:	f7ff fd7f 	bl	3e98 <SetInputSouceSytemClock>

                if (SircWasDisabled)
    439a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    439e:	2b00      	cmp	r3, #0
    43a0:	d04f      	beq.n	4442 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                {
                    Clock_Ip_DisableSirc(SIRC_CLK);
    43a2:	2002      	movs	r0, #2
    43a4:	f7ff fd26 	bl	3df4 <Clock_Ip_DisableSirc>
                /* Report timeout error */
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
            }
        }
    }
}
    43a8:	e04b      	b.n	4442 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
        IP_SCG->FIRCCSR &= (~((uint32)SCG_FIRCCSR_FIRCEN_MASK));
    43aa:	4b29      	ldr	r3, [pc, #164]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43ac:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    43b0:	4a27      	ldr	r2, [pc, #156]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43b2:	f023 0301 	bic.w	r3, r3, #1
    43b6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
        if (1U == Config->Enable)
    43ba:	9b01      	ldr	r3, [sp, #4]
    43bc:	889b      	ldrh	r3, [r3, #4]
    43be:	2b01      	cmp	r3, #1
    43c0:	d13f      	bne.n	4442 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
            IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(Config->Range);
    43c2:	9b01      	ldr	r3, [sp, #4]
    43c4:	79db      	ldrb	r3, [r3, #7]
    43c6:	4a22      	ldr	r2, [pc, #136]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43c8:	f003 0303 	and.w	r3, r3, #3
    43cc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(Config->Regulator));
    43d0:	4b1f      	ldr	r3, [pc, #124]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43d2:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
    43d6:	9b01      	ldr	r3, [sp, #4]
    43d8:	799b      	ldrb	r3, [r3, #6]
    43da:	00db      	lsls	r3, r3, #3
    43dc:	f003 0308 	and.w	r3, r3, #8
    43e0:	4313      	orrs	r3, r2
    43e2:	4a1b      	ldr	r2, [pc, #108]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43e4:	f043 0301 	orr.w	r3, r3, #1
    43e8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
            Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    43ec:	aa03      	add	r2, sp, #12
    43ee:	a904      	add	r1, sp, #16
    43f0:	a805      	add	r0, sp, #20
    43f2:	f24c 3350 	movw	r3, #50000	; 0xc350
    43f6:	f7fe ff17 	bl	3228 <Clock_Ip_StartTimeout>
                IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    43fa:	4b15      	ldr	r3, [pc, #84]	; (4450 <Clock_Ip_SetFirc_TrustedCall+0x1e4>)
    43fc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4400:	0e1b      	lsrs	r3, r3, #24
    4402:	f003 0301 	and.w	r3, r3, #1
    4406:	9306      	str	r3, [sp, #24]
                TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4408:	9a03      	ldr	r2, [sp, #12]
    440a:	a904      	add	r1, sp, #16
    440c:	ab05      	add	r3, sp, #20
    440e:	4618      	mov	r0, r3
    4410:	f7fe ff24 	bl	325c <Clock_Ip_TimeoutExpired>
    4414:	4603      	mov	r3, r0
    4416:	f88d 301f 	strb.w	r3, [sp, #31]
            while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    441a:	9b06      	ldr	r3, [sp, #24]
    441c:	2b00      	cmp	r3, #0
    441e:	d106      	bne.n	442e <Clock_Ip_SetFirc_TrustedCall+0x1c2>
    4420:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4424:	f083 0301 	eor.w	r3, r3, #1
    4428:	b2db      	uxtb	r3, r3
    442a:	2b00      	cmp	r3, #0
    442c:	d1e5      	bne.n	43fa <Clock_Ip_SetFirc_TrustedCall+0x18e>
            if (FALSE != TimeoutOccurred)
    442e:	f89d 301f 	ldrb.w	r3, [sp, #31]
    4432:	2b00      	cmp	r3, #0
    4434:	d005      	beq.n	4442 <Clock_Ip_SetFirc_TrustedCall+0x1d6>
                Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    4436:	9b01      	ldr	r3, [sp, #4]
    4438:	681b      	ldr	r3, [r3, #0]
    443a:	4619      	mov	r1, r3
    443c:	2001      	movs	r0, #1
    443e:	f7fe fee3 	bl	3208 <Clock_Ip_ReportClockErrors>
}
    4442:	bf00      	nop
    4444:	b00b      	add	sp, #44	; 0x2c
    4446:	f85d fb04 	ldr.w	pc, [sp], #4
    444a:	bf00      	nop
    444c:	0000fab4 	.word	0x0000fab4
    4450:	40064000 	.word	0x40064000

00004454 <Clock_Ip_EnableFirc_TrustedCall>:
void Clock_Ip_EnableFirc_TrustedCall(Clock_Ip_IrcoscConfigType const* Config)
{
    4454:	b500      	push	{lr}
    4456:	b089      	sub	sp, #36	; 0x24
    4458:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    445a:	2300      	movs	r3, #0
    445c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    if (1U == Config->Enable)
    4460:	9b01      	ldr	r3, [sp, #4]
    4462:	889b      	ldrh	r3, [r3, #4]
    4464:	2b01      	cmp	r3, #1
    4466:	d132      	bne.n	44ce <Clock_Ip_EnableFirc_TrustedCall+0x7a>
    {
        /* Enable clock. */
        IP_SCG->FIRCCSR |= SCG_FIRCCSR_FIRCEN(1U);
    4468:	4b1b      	ldr	r3, [pc, #108]	; (44d8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    446a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    446e:	4a1a      	ldr	r2, [pc, #104]	; (44d8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4470:	f043 0301 	orr.w	r3, r3, #1
    4474:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    4478:	aa03      	add	r2, sp, #12
    447a:	a904      	add	r1, sp, #16
    447c:	a805      	add	r0, sp, #20
    447e:	f24c 3350 	movw	r3, #50000	; 0xc350
    4482:	f7fe fed1 	bl	3228 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    4486:	4b14      	ldr	r3, [pc, #80]	; (44d8 <Clock_Ip_EnableFirc_TrustedCall+0x84>)
    4488:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    448c:	0e1b      	lsrs	r3, r3, #24
    448e:	f003 0301 	and.w	r3, r3, #1
    4492:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    4494:	9a03      	ldr	r2, [sp, #12]
    4496:	a904      	add	r1, sp, #16
    4498:	ab05      	add	r3, sp, #20
    449a:	4618      	mov	r0, r3
    449c:	f7fe fede 	bl	325c <Clock_Ip_TimeoutExpired>
    44a0:	4603      	mov	r3, r0
    44a2:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((0U == IrcoscStatus) && (FALSE == TimeoutOccurred));
    44a6:	9b06      	ldr	r3, [sp, #24]
    44a8:	2b00      	cmp	r3, #0
    44aa:	d106      	bne.n	44ba <Clock_Ip_EnableFirc_TrustedCall+0x66>
    44ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
    44b0:	f083 0301 	eor.w	r3, r3, #1
    44b4:	b2db      	uxtb	r3, r3
    44b6:	2b00      	cmp	r3, #0
    44b8:	d1e5      	bne.n	4486 <Clock_Ip_EnableFirc_TrustedCall+0x32>

        if (FALSE != TimeoutOccurred)
    44ba:	f89d 301f 	ldrb.w	r3, [sp, #31]
    44be:	2b00      	cmp	r3, #0
    44c0:	d005      	beq.n	44ce <Clock_Ip_EnableFirc_TrustedCall+0x7a>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, Config->Name);
    44c2:	9b01      	ldr	r3, [sp, #4]
    44c4:	681b      	ldr	r3, [r3, #0]
    44c6:	4619      	mov	r1, r3
    44c8:	2001      	movs	r0, #1
    44ca:	f7fe fe9d 	bl	3208 <Clock_Ip_ReportClockErrors>
        }
    }
}
    44ce:	bf00      	nop
    44d0:	b009      	add	sp, #36	; 0x24
    44d2:	f85d fb04 	ldr.w	pc, [sp], #4
    44d6:	bf00      	nop
    44d8:	40064000 	.word	0x40064000

000044dc <Clock_Ip_DisableFirc_TrustedCall>:
void Clock_Ip_DisableFirc_TrustedCall(Clock_Ip_NameType Name)
{
    44dc:	b082      	sub	sp, #8
    44de:	9001      	str	r0, [sp, #4]
    (void) Name;

    /* Disable clock. */
    IP_SCG->FIRCCSR &= ~SCG_FIRCCSR_FIRCEN_MASK;
    44e0:	4b05      	ldr	r3, [pc, #20]	; (44f8 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    44e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    44e6:	4a04      	ldr	r2, [pc, #16]	; (44f8 <Clock_Ip_DisableFirc_TrustedCall+0x1c>)
    44e8:	f023 0301 	bic.w	r3, r3, #1
    44ec:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    44f0:	bf00      	nop
    44f2:	b002      	add	sp, #8
    44f4:	4770      	bx	lr
    44f6:	bf00      	nop
    44f8:	40064000 	.word	0x40064000

000044fc <Clock_Ip_ClockMonitorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_ClockMonitorEmpty(Clock_Ip_CmuConfigType const* Config)
{
    44fc:	b082      	sub	sp, #8
    44fe:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4500:	bf00      	nop
    4502:	b002      	add	sp, #8
    4504:	4770      	bx	lr

00004506 <Clock_Ip_ClockMonitorEmpty_Set>:

static void Clock_Ip_ClockMonitorEmpty_Set( Clock_Ip_CmuConfigType const* Config,
                                            uint32 Index
                                           )
{
    4506:	b082      	sub	sp, #8
    4508:	9001      	str	r0, [sp, #4]
    450a:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    450c:	bf00      	nop
    450e:	b002      	add	sp, #8
    4510:	4770      	bx	lr

00004512 <Clock_Ip_ClockMonitorEmpty_Disable>:

static void Clock_Ip_ClockMonitorEmpty_Disable(Clock_Ip_NameType Name)
{
    4512:	b082      	sub	sp, #8
    4514:	9001      	str	r0, [sp, #4]
    (void)Name;
    /* No implementation */
}
    4516:	bf00      	nop
    4518:	b002      	add	sp, #8
    451a:	4770      	bx	lr

0000451c <Clock_Ip_CallbackPllEmpty>:

#include "Mcu_MemMap.h"


static void Clock_Ip_CallbackPllEmpty(Clock_Ip_PllConfigType const* Config)
{
    451c:	b082      	sub	sp, #8
    451e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4520:	bf00      	nop
    4522:	b002      	add	sp, #8
    4524:	4770      	bx	lr

00004526 <Clock_Ip_CallbackPllEmptyComplete>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CallbackPllEmptyComplete(Clock_Ip_NameType PllName)
{
    4526:	b082      	sub	sp, #8
    4528:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
    return STATUS_PLL_LOCKED;
    452a:	2302      	movs	r3, #2
}
    452c:	4618      	mov	r0, r3
    452e:	b002      	add	sp, #8
    4530:	4770      	bx	lr

00004532 <Clock_Ip_CallbackPllEmptyDisable>:
static void Clock_Ip_CallbackPllEmptyDisable(Clock_Ip_NameType PllName)
{
    4532:	b082      	sub	sp, #8
    4534:	9001      	str	r0, [sp, #4]
    (void)PllName;
    /* No implementation */
}
    4536:	bf00      	nop
    4538:	b002      	add	sp, #8
    453a:	4770      	bx	lr

0000453c <Clock_Ip_ResetSpll>:


#ifdef CLOCK_IP_SPLL_ENABLE
static void Clock_Ip_ResetSpll(Clock_Ip_PllConfigType const* Config)
{
    453c:	b500      	push	{lr}
    453e:	b083      	sub	sp, #12
    4540:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4542:	9b01      	ldr	r3, [sp, #4]
    4544:	2b00      	cmp	r3, #0
    4546:	d002      	beq.n	454e <Clock_Ip_ResetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSpll_TrustedCall(Config);
    4548:	9801      	ldr	r0, [sp, #4]
    454a:	f000 f870 	bl	462e <Clock_Ip_ResetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    454e:	bf00      	nop
    4550:	b003      	add	sp, #12
    4552:	f85d fb04 	ldr.w	pc, [sp], #4

00004556 <Clock_Ip_SetSpll>:
static void Clock_Ip_SetSpll(Clock_Ip_PllConfigType const* Config)
{
    4556:	b500      	push	{lr}
    4558:	b083      	sub	sp, #12
    455a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    455c:	9b01      	ldr	r3, [sp, #4]
    455e:	2b00      	cmp	r3, #0
    4560:	d002      	beq.n	4568 <Clock_Ip_SetSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSpll_TrustedCall,(Config));
      #else
        Clock_Ip_SetSpll_TrustedCall(Config);
    4562:	9801      	ldr	r0, [sp, #4]
    4564:	f000 f89a 	bl	469c <Clock_Ip_SetSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4568:	bf00      	nop
    456a:	b003      	add	sp, #12
    456c:	f85d fb04 	ldr.w	pc, [sp], #4

00004570 <Clock_Ip_CompleteSpll>:
static Clock_Ip_PllStatusReturnType Clock_Ip_CompleteSpll(Clock_Ip_NameType PllName)
{
    4570:	b500      	push	{lr}
    4572:	b089      	sub	sp, #36	; 0x24
    4574:	9001      	str	r0, [sp, #4]
    Clock_Ip_PllStatusReturnType PllStatus = STATUS_PLL_UNLOCKED;
    4576:	2301      	movs	r3, #1
    4578:	9307      	str	r3, [sp, #28]
    boolean TimeoutOccurred = FALSE;
    457a:	2300      	movs	r3, #0
    457c:	f88d 301b 	strb.w	r3, [sp, #27]
    uint32 TimeoutTicks;
    uint32 SpllStatus;


    /* Configure SPLL. */
    if ((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) != 0U)
    4580:	4b1e      	ldr	r3, [pc, #120]	; (45fc <Clock_Ip_CompleteSpll+0x8c>)
    4582:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4586:	f003 0301 	and.w	r3, r3, #1
    458a:	2b00      	cmp	r3, #0
    458c:	d02f      	beq.n	45ee <Clock_Ip_CompleteSpll+0x7e>
    {
        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    458e:	aa02      	add	r2, sp, #8
    4590:	a903      	add	r1, sp, #12
    4592:	a804      	add	r0, sp, #16
    4594:	f24c 3350 	movw	r3, #50000	; 0xc350
    4598:	f7fe fe46 	bl	3228 <Clock_Ip_StartTimeout>
        /* Wait until pll is locked */
        do
        {
            SpllStatus = (((IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLVLD_MASK) >> SCG_SPLLCSR_SPLLVLD_SHIFT));
    459c:	4b17      	ldr	r3, [pc, #92]	; (45fc <Clock_Ip_CompleteSpll+0x8c>)
    459e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    45a2:	0e1b      	lsrs	r3, r3, #24
    45a4:	f003 0301 	and.w	r3, r3, #1
    45a8:	9305      	str	r3, [sp, #20]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    45aa:	9a02      	ldr	r2, [sp, #8]
    45ac:	a903      	add	r1, sp, #12
    45ae:	ab04      	add	r3, sp, #16
    45b0:	4618      	mov	r0, r3
    45b2:	f7fe fe53 	bl	325c <Clock_Ip_TimeoutExpired>
    45b6:	4603      	mov	r3, r0
    45b8:	f88d 301b 	strb.w	r3, [sp, #27]
        }
        while ((0U == SpllStatus) && (FALSE == TimeoutOccurred));
    45bc:	9b05      	ldr	r3, [sp, #20]
    45be:	2b00      	cmp	r3, #0
    45c0:	d106      	bne.n	45d0 <Clock_Ip_CompleteSpll+0x60>
    45c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    45c6:	f083 0301 	eor.w	r3, r3, #1
    45ca:	b2db      	uxtb	r3, r3
    45cc:	2b00      	cmp	r3, #0
    45ce:	d1e5      	bne.n	459c <Clock_Ip_CompleteSpll+0x2c>

        if (FALSE == TimeoutOccurred)
    45d0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    45d4:	f083 0301 	eor.w	r3, r3, #1
    45d8:	b2db      	uxtb	r3, r3
    45da:	2b00      	cmp	r3, #0
    45dc:	d002      	beq.n	45e4 <Clock_Ip_CompleteSpll+0x74>
        {
            PllStatus = STATUS_PLL_LOCKED;
    45de:	2302      	movs	r3, #2
    45e0:	9307      	str	r3, [sp, #28]
    45e2:	e006      	b.n	45f2 <Clock_Ip_CompleteSpll+0x82>
        }
        else
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, PllName);
    45e4:	9901      	ldr	r1, [sp, #4]
    45e6:	2001      	movs	r0, #1
    45e8:	f7fe fe0e 	bl	3208 <Clock_Ip_ReportClockErrors>
    45ec:	e001      	b.n	45f2 <Clock_Ip_CompleteSpll+0x82>
        }
    }
    else
    {
        PllStatus = STATUS_PLL_NOT_ENABLED;
    45ee:	2300      	movs	r3, #0
    45f0:	9307      	str	r3, [sp, #28]
    }
    
    return PllStatus;
    45f2:	9b07      	ldr	r3, [sp, #28]
}
    45f4:	4618      	mov	r0, r3
    45f6:	b009      	add	sp, #36	; 0x24
    45f8:	f85d fb04 	ldr.w	pc, [sp], #4
    45fc:	40064000 	.word	0x40064000

00004600 <Clock_Ip_DisableSpll>:
static void Clock_Ip_DisableSpll(Clock_Ip_NameType PllName)
{
    4600:	b500      	push	{lr}
    4602:	b083      	sub	sp, #12
    4604:	9001      	str	r0, [sp, #4]
#ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
  #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(Clock_Ip_DisableSpll_TrustedCall,(PllName));
  #else
    Clock_Ip_DisableSpll_TrustedCall(PllName);
    4606:	9801      	ldr	r0, [sp, #4]
    4608:	f000 f886 	bl	4718 <Clock_Ip_DisableSpll_TrustedCall>
  #endif
#endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
}
    460c:	bf00      	nop
    460e:	b003      	add	sp, #12
    4610:	f85d fb04 	ldr.w	pc, [sp], #4

00004614 <Clock_Ip_EnableSpll>:
static void Clock_Ip_EnableSpll(Clock_Ip_PllConfigType const* Config)
{
    4614:	b500      	push	{lr}
    4616:	b083      	sub	sp, #12
    4618:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    461a:	9b01      	ldr	r3, [sp, #4]
    461c:	2b00      	cmp	r3, #0
    461e:	d002      	beq.n	4626 <Clock_Ip_EnableSpll+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_EnableSpll_TrustedCall,(Config));
      #else
        Clock_Ip_EnableSpll_TrustedCall(Config);
    4620:	9801      	ldr	r0, [sp, #4]
    4622:	f000 f891 	bl	4748 <Clock_Ip_EnableSpll_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4626:	bf00      	nop
    4628:	b003      	add	sp, #12
    462a:	f85d fb04 	ldr.w	pc, [sp], #4

0000462e <Clock_Ip_ResetSpll_TrustedCall>:
*                                        GLOBAL FUNCTIONS
==================================================================================================*/

#ifdef CLOCK_IP_SPLL_ENABLE
void Clock_Ip_ResetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    462e:	b082      	sub	sp, #8
    4630:	9001      	str	r0, [sp, #4]
    (void)Config;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    4632:	4b19      	ldr	r3, [pc, #100]	; (4698 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4634:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4638:	4a17      	ldr	r2, [pc, #92]	; (4698 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    463a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    463e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCM_MASK));
    4642:	4b15      	ldr	r3, [pc, #84]	; (4698 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4644:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4648:	4a13      	ldr	r2, [pc, #76]	; (4698 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    464a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    464e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock monitor reset*/
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLCMRE_MASK));
    4652:	4b11      	ldr	r3, [pc, #68]	; (4698 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4654:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4658:	4a0f      	ldr	r2, [pc, #60]	; (4698 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    465a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    465e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    4662:	4b0d      	ldr	r3, [pc, #52]	; (4698 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4664:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4668:	4a0b      	ldr	r2, [pc, #44]	; (4698 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    466a:	f023 0301 	bic.w	r3, r3, #1
    466e:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Reset PLL configuration. */
    #if (defined (CLOCK_IP_S32K142W) || defined(CLOCK_IP_S32K144W) || defined(CLOCK_IP_S32M244))
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_SOURCE_MASK));
    #endif
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_PREDIV_MASK));
    4672:	4b09      	ldr	r3, [pc, #36]	; (4698 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4674:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4678:	4a07      	ldr	r2, [pc, #28]	; (4698 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    467a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    467e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
    IP_SCG->SPLLCFG &= (~((uint32)SCG_SPLLCFG_MULT_MASK));
    4682:	4b05      	ldr	r3, [pc, #20]	; (4698 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    4684:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4688:	4a03      	ldr	r2, [pc, #12]	; (4698 <Clock_Ip_ResetSpll_TrustedCall+0x6a>)
    468a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
    468e:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
}
    4692:	bf00      	nop
    4694:	b002      	add	sp, #8
    4696:	4770      	bx	lr
    4698:	40064000 	.word	0x40064000

0000469c <Clock_Ip_SetSpll_TrustedCall>:
void Clock_Ip_SetSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    469c:	b082      	sub	sp, #8
    469e:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    46a0:	9b01      	ldr	r3, [sp, #4]
    46a2:	889b      	ldrh	r3, [r3, #4]
    46a4:	2b01      	cmp	r3, #1
    46a6:	d12f      	bne.n	4708 <Clock_Ip_SetSpll_TrustedCall+0x6c>
            IP_SCG->SPLLCFG |= SCG_SPLLCFG_SOURCE(1UL);
        }
        #endif

        /* Set PLL configuration. */
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    46a8:	4b1a      	ldr	r3, [pc, #104]	; (4714 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    46aa:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
    46ae:	9b01      	ldr	r3, [sp, #4]
    46b0:	7b5b      	ldrb	r3, [r3, #13]
    46b2:	3b01      	subs	r3, #1
    46b4:	021b      	lsls	r3, r3, #8
    46b6:	f403 61e0 	and.w	r1, r3, #1792	; 0x700
                        SCG_SPLLCFG_MULT((uint32)(Config->MulFactorDiv) - 16U);
    46ba:	9b01      	ldr	r3, [sp, #4]
    46bc:	7d1b      	ldrb	r3, [r3, #20]
    46be:	3b10      	subs	r3, #16
    46c0:	041b      	lsls	r3, r3, #16
    46c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
        IP_SCG->SPLLCFG |= SCG_SPLLCFG_PREDIV((uint32)(Config->Predivider) - 1U)  |
    46c6:	430b      	orrs	r3, r1
    46c8:	4912      	ldr	r1, [pc, #72]	; (4714 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    46ca:	4313      	orrs	r3, r2
    46cc:	f8c1 3608 	str.w	r3, [r1, #1544]	; 0x608

        /* Enable clock, configure monitor, lock register. */
        switch (Config->Monitor)
    46d0:	9b01      	ldr	r3, [sp, #4]
    46d2:	7fdb      	ldrb	r3, [r3, #31]
    46d4:	2b02      	cmp	r3, #2
    46d6:	d011      	beq.n	46fc <Clock_Ip_SetSpll_TrustedCall+0x60>
    46d8:	2b02      	cmp	r3, #2
    46da:	dc17      	bgt.n	470c <Clock_Ip_SetSpll_TrustedCall+0x70>
    46dc:	2b00      	cmp	r3, #0
    46de:	d002      	beq.n	46e6 <Clock_Ip_SetSpll_TrustedCall+0x4a>
    46e0:	2b01      	cmp	r3, #1
    46e2:	d005      	beq.n	46f0 <Clock_Ip_SetSpll_TrustedCall+0x54>
            break;
#endif
            default:
                /* Invalid monitor mode */
                CLOCK_IP_DEV_ASSERT(FALSE);
                break;
    46e4:	e012      	b.n	470c <Clock_Ip_SetSpll_TrustedCall+0x70>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(0UL) |
    46e6:	4b0b      	ldr	r3, [pc, #44]	; (4714 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    46e8:	2200      	movs	r2, #0
    46ea:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    46ee:	e00e      	b.n	470e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    46f0:	4b08      	ldr	r3, [pc, #32]	; (4714 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    46f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    46f6:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    46fa:	e008      	b.n	470e <Clock_Ip_SetSpll_TrustedCall+0x72>
                IP_SCG->SPLLCSR = SCG_SPLLCSR_SPLLCM(1UL) |
    46fc:	4b05      	ldr	r3, [pc, #20]	; (4714 <Clock_Ip_SetSpll_TrustedCall+0x78>)
    46fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    4702:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
            break;
    4706:	e002      	b.n	470e <Clock_Ip_SetSpll_TrustedCall+0x72>
        }
    }
    4708:	bf00      	nop
    470a:	e000      	b.n	470e <Clock_Ip_SetSpll_TrustedCall+0x72>
                break;
    470c:	bf00      	nop
}
    470e:	bf00      	nop
    4710:	b002      	add	sp, #8
    4712:	4770      	bx	lr
    4714:	40064000 	.word	0x40064000

00004718 <Clock_Ip_DisableSpll_TrustedCall>:
void Clock_Ip_DisableSpll_TrustedCall(Clock_Ip_NameType PllName)
{
    4718:	b082      	sub	sp, #8
    471a:	9001      	str	r0, [sp, #4]
    (void)PllName;

    /* Power down PLL */

    /* Clear LK bit field */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_LK_MASK));
    471c:	4b09      	ldr	r3, [pc, #36]	; (4744 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    471e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4722:	4a08      	ldr	r2, [pc, #32]	; (4744 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4724:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
    4728:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600

    /* Disable clock */
    IP_SCG->SPLLCSR &= (~((uint32)SCG_SPLLCSR_SPLLEN_MASK));
    472c:	4b05      	ldr	r3, [pc, #20]	; (4744 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    472e:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    4732:	4a04      	ldr	r2, [pc, #16]	; (4744 <Clock_Ip_DisableSpll_TrustedCall+0x2c>)
    4734:	f023 0301 	bic.w	r3, r3, #1
    4738:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
}
    473c:	bf00      	nop
    473e:	b002      	add	sp, #8
    4740:	4770      	bx	lr
    4742:	bf00      	nop
    4744:	40064000 	.word	0x40064000

00004748 <Clock_Ip_EnableSpll_TrustedCall>:
void Clock_Ip_EnableSpll_TrustedCall(Clock_Ip_PllConfigType const* Config)
{
    4748:	b082      	sub	sp, #8
    474a:	9001      	str	r0, [sp, #4]
    /* Configure SPLL. */
    if (1U == Config->Enable)
    474c:	9b01      	ldr	r3, [sp, #4]
    474e:	889b      	ldrh	r3, [r3, #4]
    4750:	2b01      	cmp	r3, #1
    4752:	d107      	bne.n	4764 <Clock_Ip_EnableSpll_TrustedCall+0x1c>
    {
        /* Enable SPLL */
        IP_SCG->SPLLCSR |= SCG_SPLLCSR_SPLLEN(1UL);
    4754:	4b05      	ldr	r3, [pc, #20]	; (476c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    4756:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    475a:	4a04      	ldr	r2, [pc, #16]	; (476c <Clock_Ip_EnableSpll_TrustedCall+0x24>)
    475c:	f043 0301 	orr.w	r3, r3, #1
    4760:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    }
}
    4764:	bf00      	nop
    4766:	b002      	add	sp, #8
    4768:	4770      	bx	lr
    476a:	bf00      	nop
    476c:	40064000 	.word	0x40064000

00004770 <Clock_Ip_ProgressiveFrequencyClockSwitchEmpty>:
#include "Mcu_MemMap.h"

static void Clock_Ip_ProgressiveFrequencyClockSwitchEmpty(  Clock_Ip_PcfsConfigType const* Config,
                                                            uint32 Index
                                                          )
{
    4770:	b082      	sub	sp, #8
    4772:	9001      	str	r0, [sp, #4]
    4774:	9100      	str	r1, [sp, #0]
    (void)Config;
    (void)Index;
    /* No implementation */
}
    4776:	bf00      	nop
    4778:	b002      	add	sp, #8
    477a:	4770      	bx	lr

0000477c <Clock_Ip_CallbackSelectorEmpty>:
#define MCU_START_SEC_CODE

#include "Mcu_MemMap.h"

static void Clock_Ip_CallbackSelectorEmpty(Clock_Ip_SelectorConfigType const* Config)
{
    477c:	b082      	sub	sp, #8
    477e:	9001      	str	r0, [sp, #4]
    (void)Config;
    /* No implementation */
}
    4780:	bf00      	nop
    4782:	b002      	add	sp, #8
    4784:	4770      	bx	lr

00004786 <Clock_Ip_ResetScgRunSel>:

#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
static void Clock_Ip_ResetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    4786:	b500      	push	{lr}
    4788:	b083      	sub	sp, #12
    478a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    478c:	9b01      	ldr	r3, [sp, #4]
    478e:	2b00      	cmp	r3, #0
    4790:	d002      	beq.n	4798 <Clock_Ip_ResetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgRunSel_TrustedCall(Config);
    4792:	9801      	ldr	r0, [sp, #4]
    4794:	f000 f8ee 	bl	4974 <Clock_Ip_ResetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4798:	bf00      	nop
    479a:	b003      	add	sp, #12
    479c:	f85d fb04 	ldr.w	pc, [sp], #4

000047a0 <Clock_Ip_SetScgRunSel>:

static void Clock_Ip_SetScgRunSel(Clock_Ip_SelectorConfigType const *Config)
{
    47a0:	b500      	push	{lr}
    47a2:	b083      	sub	sp, #12
    47a4:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    47a6:	9b01      	ldr	r3, [sp, #4]
    47a8:	2b00      	cmp	r3, #0
    47aa:	d002      	beq.n	47b2 <Clock_Ip_SetScgRunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgRunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgRunSel_TrustedCall(Config);
    47ac:	9801      	ldr	r0, [sp, #4]
    47ae:	f000 f8ff 	bl	49b0 <Clock_Ip_SetScgRunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    47b2:	bf00      	nop
    47b4:	b003      	add	sp, #12
    47b6:	f85d fb04 	ldr.w	pc, [sp], #4

000047ba <Clock_Ip_SetScgVlprSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL
static void Clock_Ip_SetScgVlprSel(Clock_Ip_SelectorConfigType const *Config)
{
    47ba:	b500      	push	{lr}
    47bc:	b083      	sub	sp, #12
    47be:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    47c0:	9b01      	ldr	r3, [sp, #4]
    47c2:	2b00      	cmp	r3, #0
    47c4:	d002      	beq.n	47cc <Clock_Ip_SetScgVlprSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgVlprSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgVlprSel_TrustedCall(Config);
    47c6:	9801      	ldr	r0, [sp, #4]
    47c8:	f000 f912 	bl	49f0 <Clock_Ip_SetScgVlprSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    47cc:	bf00      	nop
    47ce:	b003      	add	sp, #12
    47d0:	f85d fb04 	ldr.w	pc, [sp], #4

000047d4 <Clock_Ip_ResetScgHsrunSel>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
static void Clock_Ip_ResetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    47d4:	b500      	push	{lr}
    47d6:	b083      	sub	sp, #12
    47d8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    47da:	9b01      	ldr	r3, [sp, #4]
    47dc:	2b00      	cmp	r3, #0
    47de:	d002      	beq.n	47e6 <Clock_Ip_ResetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgHsrunSel_TrustedCall(Config);
    47e0:	9801      	ldr	r0, [sp, #4]
    47e2:	f000 f925 	bl	4a30 <Clock_Ip_ResetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    47e6:	bf00      	nop
    47e8:	b003      	add	sp, #12
    47ea:	f85d fb04 	ldr.w	pc, [sp], #4

000047ee <Clock_Ip_SetScgHsrunSel>:
static void Clock_Ip_SetScgHsrunSel(Clock_Ip_SelectorConfigType const *Config)
{
    47ee:	b500      	push	{lr}
    47f0:	b083      	sub	sp, #12
    47f2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    47f4:	9b01      	ldr	r3, [sp, #4]
    47f6:	2b00      	cmp	r3, #0
    47f8:	d002      	beq.n	4800 <Clock_Ip_SetScgHsrunSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgHsrunSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgHsrunSel_TrustedCall(Config);
    47fa:	9801      	ldr	r0, [sp, #4]
    47fc:	f000 f936 	bl	4a6c <Clock_Ip_SetScgHsrunSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4800:	bf00      	nop
    4802:	b003      	add	sp, #12
    4804:	f85d fb04 	ldr.w	pc, [sp], #4

00004808 <Clock_Ip_ResetSimRtcSel>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
static void Clock_Ip_ResetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4808:	b500      	push	{lr}
    480a:	b083      	sub	sp, #12
    480c:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    480e:	9b01      	ldr	r3, [sp, #4]
    4810:	2b00      	cmp	r3, #0
    4812:	d002      	beq.n	481a <Clock_Ip_ResetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimRtcSel_TrustedCall(Config);
    4814:	9801      	ldr	r0, [sp, #4]
    4816:	f000 f949 	bl	4aac <Clock_Ip_ResetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    481a:	bf00      	nop
    481c:	b003      	add	sp, #12
    481e:	f85d fb04 	ldr.w	pc, [sp], #4

00004822 <Clock_Ip_SetSimRtcSel>:
static void Clock_Ip_SetSimRtcSel(Clock_Ip_SelectorConfigType const *Config)
{
    4822:	b500      	push	{lr}
    4824:	b083      	sub	sp, #12
    4826:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4828:	9b01      	ldr	r3, [sp, #4]
    482a:	2b00      	cmp	r3, #0
    482c:	d002      	beq.n	4834 <Clock_Ip_SetSimRtcSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimRtcSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimRtcSel_TrustedCall(Config);
    482e:	9801      	ldr	r0, [sp, #4]
    4830:	f000 f958 	bl	4ae4 <Clock_Ip_SetSimRtcSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4834:	bf00      	nop
    4836:	b003      	add	sp, #12
    4838:	f85d fb04 	ldr.w	pc, [sp], #4

0000483c <Clock_Ip_ResetSimLpoSel>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
static void Clock_Ip_ResetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    483c:	b500      	push	{lr}
    483e:	b083      	sub	sp, #12
    4840:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4842:	9b01      	ldr	r3, [sp, #4]
    4844:	2b00      	cmp	r3, #0
    4846:	d002      	beq.n	484e <Clock_Ip_ResetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimLpoSel_TrustedCall(Config);
    4848:	9801      	ldr	r0, [sp, #4]
    484a:	f000 f969 	bl	4b20 <Clock_Ip_ResetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    484e:	bf00      	nop
    4850:	b003      	add	sp, #12
    4852:	f85d fb04 	ldr.w	pc, [sp], #4

00004856 <Clock_Ip_SetSimLpoSel>:
static void Clock_Ip_SetSimLpoSel(Clock_Ip_SelectorConfigType const *Config)
{
    4856:	b500      	push	{lr}
    4858:	b083      	sub	sp, #12
    485a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    485c:	9b01      	ldr	r3, [sp, #4]
    485e:	2b00      	cmp	r3, #0
    4860:	d002      	beq.n	4868 <Clock_Ip_SetSimLpoSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimLpoSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimLpoSel_TrustedCall(Config);
    4862:	9801      	ldr	r0, [sp, #4]
    4864:	f000 f978 	bl	4b58 <Clock_Ip_SetSimLpoSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4868:	bf00      	nop
    486a:	b003      	add	sp, #12
    486c:	f85d fb04 	ldr.w	pc, [sp], #4

00004870 <Clock_Ip_ResetScgClkoutSel>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
static void Clock_Ip_ResetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    4870:	b500      	push	{lr}
    4872:	b083      	sub	sp, #12
    4874:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4876:	9b01      	ldr	r3, [sp, #4]
    4878:	2b00      	cmp	r3, #0
    487a:	d002      	beq.n	4882 <Clock_Ip_ResetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetScgClkoutSel_TrustedCall(Config);
    487c:	9801      	ldr	r0, [sp, #4]
    487e:	f000 f989 	bl	4b94 <Clock_Ip_ResetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4882:	bf00      	nop
    4884:	b003      	add	sp, #12
    4886:	f85d fb04 	ldr.w	pc, [sp], #4

0000488a <Clock_Ip_SetScgClkoutSel>:
static void Clock_Ip_SetScgClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    488a:	b500      	push	{lr}
    488c:	b083      	sub	sp, #12
    488e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4890:	9b01      	ldr	r3, [sp, #4]
    4892:	2b00      	cmp	r3, #0
    4894:	d002      	beq.n	489c <Clock_Ip_SetScgClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetScgClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetScgClkoutSel_TrustedCall(Config);
    4896:	9801      	ldr	r0, [sp, #4]
    4898:	f000 f998 	bl	4bcc <Clock_Ip_SetScgClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    489c:	bf00      	nop
    489e:	b003      	add	sp, #12
    48a0:	f85d fb04 	ldr.w	pc, [sp], #4

000048a4 <Clock_Ip_ResetSimFtmoptSel>:
#endif

#ifdef CLOCK_IP_SIM_FTMOPT_SEL
static void Clock_Ip_ResetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    48a4:	b500      	push	{lr}
    48a6:	b083      	sub	sp, #12
    48a8:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48aa:	9b01      	ldr	r3, [sp, #4]
    48ac:	2b00      	cmp	r3, #0
    48ae:	d002      	beq.n	48b6 <Clock_Ip_ResetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimFtmoptSel_TrustedCall(Config);
    48b0:	9801      	ldr	r0, [sp, #4]
    48b2:	f000 f9a9 	bl	4c08 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48b6:	bf00      	nop
    48b8:	b003      	add	sp, #12
    48ba:	f85d fb04 	ldr.w	pc, [sp], #4

000048be <Clock_Ip_SetSimFtmoptSel>:
static void Clock_Ip_SetSimFtmoptSel(Clock_Ip_SelectorConfigType const *Config)
{
    48be:	b500      	push	{lr}
    48c0:	b083      	sub	sp, #12
    48c2:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48c4:	9b01      	ldr	r3, [sp, #4]
    48c6:	2b00      	cmp	r3, #0
    48c8:	d002      	beq.n	48d0 <Clock_Ip_SetSimFtmoptSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimFtmoptSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimFtmoptSel_TrustedCall(Config);
    48ca:	9801      	ldr	r0, [sp, #4]
    48cc:	f000 f9e6 	bl	4c9c <Clock_Ip_SetSimFtmoptSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48d0:	bf00      	nop
    48d2:	b003      	add	sp, #12
    48d4:	f85d fb04 	ldr.w	pc, [sp], #4

000048d8 <Clock_Ip_ResetSimClkoutSel>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
static void Clock_Ip_ResetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    48d8:	b500      	push	{lr}
    48da:	b083      	sub	sp, #12
    48dc:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48de:	9b01      	ldr	r3, [sp, #4]
    48e0:	2b00      	cmp	r3, #0
    48e2:	d002      	beq.n	48ea <Clock_Ip_ResetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimClkoutSel_TrustedCall(Config);
    48e4:	9801      	ldr	r0, [sp, #4]
    48e6:	f000 fa25 	bl	4d34 <Clock_Ip_ResetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    48ea:	bf00      	nop
    48ec:	b003      	add	sp, #12
    48ee:	f85d fb04 	ldr.w	pc, [sp], #4

000048f2 <Clock_Ip_SetSimClkoutSel>:
static void Clock_Ip_SetSimClkoutSel(Clock_Ip_SelectorConfigType const *Config)
{
    48f2:	b500      	push	{lr}
    48f4:	b083      	sub	sp, #12
    48f6:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    48f8:	9b01      	ldr	r3, [sp, #4]
    48fa:	2b00      	cmp	r3, #0
    48fc:	d002      	beq.n	4904 <Clock_Ip_SetSimClkoutSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimClkoutSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimClkoutSel_TrustedCall(Config);
    48fe:	9801      	ldr	r0, [sp, #4]
    4900:	f000 fa2a 	bl	4d58 <Clock_Ip_SetSimClkoutSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4904:	bf00      	nop
    4906:	b003      	add	sp, #12
    4908:	f85d fb04 	ldr.w	pc, [sp], #4

0000490c <Clock_Ip_ResetPccPcsSelect>:
#endif

#ifdef CLOCK_IP_PCC_PCS_SELECT
static void Clock_Ip_ResetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    490c:	b500      	push	{lr}
    490e:	b083      	sub	sp, #12
    4910:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4912:	9b01      	ldr	r3, [sp, #4]
    4914:	2b00      	cmp	r3, #0
    4916:	d002      	beq.n	491e <Clock_Ip_ResetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_ResetPccPcsSelect_TrustedCall(Config);
    4918:	9801      	ldr	r0, [sp, #4]
    491a:	f000 fa3b 	bl	4d94 <Clock_Ip_ResetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    491e:	bf00      	nop
    4920:	b003      	add	sp, #12
    4922:	f85d fb04 	ldr.w	pc, [sp], #4

00004926 <Clock_Ip_SetPccPcsSelect>:
static void Clock_Ip_SetPccPcsSelect(Clock_Ip_SelectorConfigType const *Config)
{
    4926:	b500      	push	{lr}
    4928:	b083      	sub	sp, #12
    492a:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    492c:	9b01      	ldr	r3, [sp, #4]
    492e:	2b00      	cmp	r3, #0
    4930:	d002      	beq.n	4938 <Clock_Ip_SetPccPcsSelect+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetPccPcsSelect_TrustedCall,(Config));
      #else
        Clock_Ip_SetPccPcsSelect_TrustedCall(Config);
    4932:	9801      	ldr	r0, [sp, #4]
    4934:	f000 fa56 	bl	4de4 <Clock_Ip_SetPccPcsSelect_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4938:	bf00      	nop
    493a:	b003      	add	sp, #12
    493c:	f85d fb04 	ldr.w	pc, [sp], #4

00004940 <Clock_Ip_ResetSimTraceSel>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
static void Clock_Ip_ResetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    4940:	b500      	push	{lr}
    4942:	b083      	sub	sp, #12
    4944:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4946:	9b01      	ldr	r3, [sp, #4]
    4948:	2b00      	cmp	r3, #0
    494a:	d002      	beq.n	4952 <Clock_Ip_ResetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_ResetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_ResetSimTraceSel_TrustedCall(Config);
    494c:	9801      	ldr	r0, [sp, #4]
    494e:	f000 fa79 	bl	4e44 <Clock_Ip_ResetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    4952:	bf00      	nop
    4954:	b003      	add	sp, #12
    4956:	f85d fb04 	ldr.w	pc, [sp], #4

0000495a <Clock_Ip_SetSimTraceSel>:
static void Clock_Ip_SetSimTraceSel(Clock_Ip_SelectorConfigType const *Config)
{
    495a:	b500      	push	{lr}
    495c:	b083      	sub	sp, #12
    495e:	9001      	str	r0, [sp, #4]
    if (NULL_PTR != Config)
    4960:	9b01      	ldr	r3, [sp, #4]
    4962:	2b00      	cmp	r3, #0
    4964:	d002      	beq.n	496c <Clock_Ip_SetSimTraceSel+0x12>
    {
    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call1param(Clock_Ip_SetSimTraceSel_TrustedCall,(Config));
      #else
        Clock_Ip_SetSimTraceSel_TrustedCall(Config);
    4966:	9801      	ldr	r0, [sp, #4]
    4968:	f000 fa8a 	bl	4e80 <Clock_Ip_SetSimTraceSel_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */
    }
}
    496c:	bf00      	nop
    496e:	b003      	add	sp, #12
    4970:	f85d fb04 	ldr.w	pc, [sp], #4

00004974 <Clock_Ip_ResetScgRunSel_TrustedCall>:
/*==================================================================================================
*                                        GLOBAL FUNCTIONS
==================================================================================================*/
#ifdef CLOCK_IP_SCG_SCS_RUN_SEL
void Clock_Ip_ResetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4974:	b084      	sub	sp, #16
    4976:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4978:	4b0b      	ldr	r3, [pc, #44]	; (49a8 <Clock_Ip_ResetScgRunSel_TrustedCall+0x34>)
    497a:	795b      	ldrb	r3, [r3, #5]
    497c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->RCCR;
    497e:	4b0b      	ldr	r3, [pc, #44]	; (49ac <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    4980:	695b      	ldr	r3, [r3, #20]
    4982:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    4984:	9b02      	ldr	r3, [sp, #8]
    4986:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    498a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    498c:	9b03      	ldr	r3, [sp, #12]
    498e:	061b      	lsls	r3, r3, #24
    4990:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4994:	9a02      	ldr	r2, [sp, #8]
    4996:	4313      	orrs	r3, r2
    4998:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    499a:	4a04      	ldr	r2, [pc, #16]	; (49ac <Clock_Ip_ResetScgRunSel_TrustedCall+0x38>)
    499c:	9b02      	ldr	r3, [sp, #8]
    499e:	6153      	str	r3, [r2, #20]
}
    49a0:	bf00      	nop
    49a2:	b004      	add	sp, #16
    49a4:	4770      	bx	lr
    49a6:	bf00      	nop
    49a8:	0000fe1c 	.word	0x0000fe1c
    49ac:	40064000 	.word	0x40064000

000049b0 <Clock_Ip_SetScgRunSel_TrustedCall>:

void Clock_Ip_SetScgRunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49b0:	b084      	sub	sp, #16
    49b2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    49b4:	9b01      	ldr	r3, [sp, #4]
    49b6:	685b      	ldr	r3, [r3, #4]
    49b8:	4a0b      	ldr	r2, [pc, #44]	; (49e8 <Clock_Ip_SetScgRunSel_TrustedCall+0x38>)
    49ba:	5cd3      	ldrb	r3, [r2, r3]
    49bc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->RCCR;
    49be:	4b0b      	ldr	r3, [pc, #44]	; (49ec <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    49c0:	695b      	ldr	r3, [r3, #20]
    49c2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_RCCR_SCS_MASK;
    49c4:	9b02      	ldr	r3, [sp, #8]
    49c6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    49ca:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_RCCR_SCS(SelectorValue);
    49cc:	9b03      	ldr	r3, [sp, #12]
    49ce:	061b      	lsls	r3, r3, #24
    49d0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    49d4:	9a02      	ldr	r2, [sp, #8]
    49d6:	4313      	orrs	r3, r2
    49d8:	9302      	str	r3, [sp, #8]
    IP_SCG->RCCR = RegValue;
    49da:	4a04      	ldr	r2, [pc, #16]	; (49ec <Clock_Ip_SetScgRunSel_TrustedCall+0x3c>)
    49dc:	9b02      	ldr	r3, [sp, #8]
    49de:	6153      	str	r3, [r2, #20]
}
    49e0:	bf00      	nop
    49e2:	b004      	add	sp, #16
    49e4:	4770      	bx	lr
    49e6:	bf00      	nop
    49e8:	0000fe1c 	.word	0x0000fe1c
    49ec:	40064000 	.word	0x40064000

000049f0 <Clock_Ip_SetScgVlprSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_SCS_VLPR_SEL

void Clock_Ip_SetScgVlprSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    49f0:	b084      	sub	sp, #16
    49f2:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    49f4:	9b01      	ldr	r3, [sp, #4]
    49f6:	685b      	ldr	r3, [r3, #4]
    49f8:	4a0b      	ldr	r2, [pc, #44]	; (4a28 <Clock_Ip_SetScgVlprSel_TrustedCall+0x38>)
    49fa:	5cd3      	ldrb	r3, [r2, r3]
    49fc:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->VCCR;
    49fe:	4b0b      	ldr	r3, [pc, #44]	; (4a2c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4a00:	699b      	ldr	r3, [r3, #24]
    4a02:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_VCCR_SCS_MASK;
    4a04:	9b02      	ldr	r3, [sp, #8]
    4a06:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4a0a:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_VCCR_SCS(SelectorValue);
    4a0c:	9b03      	ldr	r3, [sp, #12]
    4a0e:	061b      	lsls	r3, r3, #24
    4a10:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4a14:	9a02      	ldr	r2, [sp, #8]
    4a16:	4313      	orrs	r3, r2
    4a18:	9302      	str	r3, [sp, #8]
    IP_SCG->VCCR = RegValue;
    4a1a:	4a04      	ldr	r2, [pc, #16]	; (4a2c <Clock_Ip_SetScgVlprSel_TrustedCall+0x3c>)
    4a1c:	9b02      	ldr	r3, [sp, #8]
    4a1e:	6193      	str	r3, [r2, #24]
}
    4a20:	bf00      	nop
    4a22:	b004      	add	sp, #16
    4a24:	4770      	bx	lr
    4a26:	bf00      	nop
    4a28:	0000fe1c 	.word	0x0000fe1c
    4a2c:	40064000 	.word	0x40064000

00004a30 <Clock_Ip_ResetScgHsrunSel_TrustedCall>:

#endif

#ifdef CLOCK_IP_SCG_SCS_HSRUN_SEL
void Clock_Ip_ResetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a30:	b084      	sub	sp, #16
    4a32:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a34:	4b0b      	ldr	r3, [pc, #44]	; (4a64 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x34>)
    4a36:	795b      	ldrb	r3, [r3, #5]
    4a38:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->HCCR;
    4a3a:	4b0b      	ldr	r3, [pc, #44]	; (4a68 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4a3c:	69db      	ldr	r3, [r3, #28]
    4a3e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4a40:	9b02      	ldr	r3, [sp, #8]
    4a42:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4a46:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4a48:	9b03      	ldr	r3, [sp, #12]
    4a4a:	061b      	lsls	r3, r3, #24
    4a4c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4a50:	9a02      	ldr	r2, [sp, #8]
    4a52:	4313      	orrs	r3, r2
    4a54:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4a56:	4a04      	ldr	r2, [pc, #16]	; (4a68 <Clock_Ip_ResetScgHsrunSel_TrustedCall+0x38>)
    4a58:	9b02      	ldr	r3, [sp, #8]
    4a5a:	61d3      	str	r3, [r2, #28]
}
    4a5c:	bf00      	nop
    4a5e:	b004      	add	sp, #16
    4a60:	4770      	bx	lr
    4a62:	bf00      	nop
    4a64:	0000fe1c 	.word	0x0000fe1c
    4a68:	40064000 	.word	0x40064000

00004a6c <Clock_Ip_SetScgHsrunSel_TrustedCall>:
void Clock_Ip_SetScgHsrunSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4a6c:	b084      	sub	sp, #16
    4a6e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4a70:	9b01      	ldr	r3, [sp, #4]
    4a72:	685b      	ldr	r3, [r3, #4]
    4a74:	4a0b      	ldr	r2, [pc, #44]	; (4aa4 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x38>)
    4a76:	5cd3      	ldrb	r3, [r2, r3]
    4a78:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->HCCR;
    4a7a:	4b0b      	ldr	r3, [pc, #44]	; (4aa8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4a7c:	69db      	ldr	r3, [r3, #28]
    4a7e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_HCCR_SCS_MASK;
    4a80:	9b02      	ldr	r3, [sp, #8]
    4a82:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4a86:	9302      	str	r3, [sp, #8]
    RegValue |= SCG_HCCR_SCS(SelectorValue);
    4a88:	9b03      	ldr	r3, [sp, #12]
    4a8a:	061b      	lsls	r3, r3, #24
    4a8c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    4a90:	9a02      	ldr	r2, [sp, #8]
    4a92:	4313      	orrs	r3, r2
    4a94:	9302      	str	r3, [sp, #8]
    IP_SCG->HCCR = RegValue;
    4a96:	4a04      	ldr	r2, [pc, #16]	; (4aa8 <Clock_Ip_SetScgHsrunSel_TrustedCall+0x3c>)
    4a98:	9b02      	ldr	r3, [sp, #8]
    4a9a:	61d3      	str	r3, [r2, #28]
}
    4a9c:	bf00      	nop
    4a9e:	b004      	add	sp, #16
    4aa0:	4770      	bx	lr
    4aa2:	bf00      	nop
    4aa4:	0000fe1c 	.word	0x0000fe1c
    4aa8:	40064000 	.word	0x40064000

00004aac <Clock_Ip_ResetSimRtcSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_RTC_SEL
void Clock_Ip_ResetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4aac:	b084      	sub	sp, #16
    4aae:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[SOSCDIV1_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4ab0:	4b0a      	ldr	r3, [pc, #40]	; (4adc <Clock_Ip_ResetSimRtcSel_TrustedCall+0x30>)
    4ab2:	7b9b      	ldrb	r3, [r3, #14]
    4ab4:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4ab6:	4b0a      	ldr	r3, [pc, #40]	; (4ae0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4ab8:	691b      	ldr	r3, [r3, #16]
    4aba:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4abc:	9b02      	ldr	r3, [sp, #8]
    4abe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4ac2:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4ac4:	9b03      	ldr	r3, [sp, #12]
    4ac6:	011b      	lsls	r3, r3, #4
    4ac8:	9a02      	ldr	r2, [sp, #8]
    4aca:	4313      	orrs	r3, r2
    4acc:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4ace:	4a04      	ldr	r2, [pc, #16]	; (4ae0 <Clock_Ip_ResetSimRtcSel_TrustedCall+0x34>)
    4ad0:	9b02      	ldr	r3, [sp, #8]
    4ad2:	6113      	str	r3, [r2, #16]
}
    4ad4:	bf00      	nop
    4ad6:	b004      	add	sp, #16
    4ad8:	4770      	bx	lr
    4ada:	bf00      	nop
    4adc:	0000fdc4 	.word	0x0000fdc4
    4ae0:	40048000 	.word	0x40048000

00004ae4 <Clock_Ip_SetSimRtcSel_TrustedCall>:

void Clock_Ip_SetSimRtcSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4ae4:	b084      	sub	sp, #16
    4ae6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4ae8:	9b01      	ldr	r3, [sp, #4]
    4aea:	685b      	ldr	r3, [r3, #4]
    4aec:	4a0a      	ldr	r2, [pc, #40]	; (4b18 <Clock_Ip_SetSimRtcSel_TrustedCall+0x34>)
    4aee:	5cd3      	ldrb	r3, [r2, r3]
    4af0:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->LPOCLKS;
    4af2:	4b0a      	ldr	r3, [pc, #40]	; (4b1c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4af4:	691b      	ldr	r3, [r3, #16]
    4af6:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_RTCCLKSEL_MASK;
    4af8:	9b02      	ldr	r3, [sp, #8]
    4afa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4afe:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4b00:	9b03      	ldr	r3, [sp, #12]
    4b02:	011b      	lsls	r3, r3, #4
    4b04:	9a02      	ldr	r2, [sp, #8]
    4b06:	4313      	orrs	r3, r2
    4b08:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4b0a:	4a04      	ldr	r2, [pc, #16]	; (4b1c <Clock_Ip_SetSimRtcSel_TrustedCall+0x38>)
    4b0c:	9b02      	ldr	r3, [sp, #8]
    4b0e:	6113      	str	r3, [r2, #16]
}
    4b10:	bf00      	nop
    4b12:	b004      	add	sp, #16
    4b14:	4770      	bx	lr
    4b16:	bf00      	nop
    4b18:	0000fdc4 	.word	0x0000fdc4
    4b1c:	40048000 	.word	0x40048000

00004b20 <Clock_Ip_ResetSimLpoSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_LPO_SEL
void Clock_Ip_ResetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b20:	b084      	sub	sp, #16
    4b22:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[LPO_128K_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b24:	4b0a      	ldr	r3, [pc, #40]	; (4b50 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x30>)
    4b26:	785b      	ldrb	r3, [r3, #1]
    4b28:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4b2a:	4b0a      	ldr	r3, [pc, #40]	; (4b54 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4b2c:	691b      	ldr	r3, [r3, #16]
    4b2e:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4b30:	9b02      	ldr	r3, [sp, #8]
    4b32:	f023 030c 	bic.w	r3, r3, #12
    4b36:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4b38:	9b03      	ldr	r3, [sp, #12]
    4b3a:	009b      	lsls	r3, r3, #2
    4b3c:	9a02      	ldr	r2, [sp, #8]
    4b3e:	4313      	orrs	r3, r2
    4b40:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4b42:	4a04      	ldr	r2, [pc, #16]	; (4b54 <Clock_Ip_ResetSimLpoSel_TrustedCall+0x34>)
    4b44:	9b02      	ldr	r3, [sp, #8]
    4b46:	6113      	str	r3, [r2, #16]
}
    4b48:	bf00      	nop
    4b4a:	b004      	add	sp, #16
    4b4c:	4770      	bx	lr
    4b4e:	bf00      	nop
    4b50:	0000fe7c 	.word	0x0000fe7c
    4b54:	40048000 	.word	0x40048000

00004b58 <Clock_Ip_SetSimLpoSel_TrustedCall>:
void Clock_Ip_SetSimLpoSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b58:	b084      	sub	sp, #16
    4b5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntrySIMHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b5c:	9b01      	ldr	r3, [sp, #4]
    4b5e:	685b      	ldr	r3, [r3, #4]
    4b60:	4a0a      	ldr	r2, [pc, #40]	; (4b8c <Clock_Ip_SetSimLpoSel_TrustedCall+0x34>)
    4b62:	5cd3      	ldrb	r3, [r2, r3]
    4b64:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SIM->LPOCLKS;
    4b66:	4b0a      	ldr	r3, [pc, #40]	; (4b90 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4b68:	691b      	ldr	r3, [r3, #16]
    4b6a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_LPOCLKS_LPOCLKSEL_MASK;
    4b6c:	9b02      	ldr	r3, [sp, #8]
    4b6e:	f023 030c 	bic.w	r3, r3, #12
    4b72:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4b74:	9b03      	ldr	r3, [sp, #12]
    4b76:	009b      	lsls	r3, r3, #2
    4b78:	9a02      	ldr	r2, [sp, #8]
    4b7a:	4313      	orrs	r3, r2
    4b7c:	9302      	str	r3, [sp, #8]
    IP_SIM->LPOCLKS = RegValue;
    4b7e:	4a04      	ldr	r2, [pc, #16]	; (4b90 <Clock_Ip_SetSimLpoSel_TrustedCall+0x38>)
    4b80:	9b02      	ldr	r3, [sp, #8]
    4b82:	6113      	str	r3, [r2, #16]
}
    4b84:	bf00      	nop
    4b86:	b004      	add	sp, #16
    4b88:	4770      	bx	lr
    4b8a:	bf00      	nop
    4b8c:	0000fe7c 	.word	0x0000fe7c
    4b90:	40048000 	.word	0x40048000

00004b94 <Clock_Ip_ResetScgClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SCG_CLKOUT_SEL
void Clock_Ip_ResetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4b94:	b084      	sub	sp, #16
    4b96:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* LPO_CLK selector mapped to Clock_Ip_au8SelectorEntryScsHardwareValue */
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4b98:	4b0a      	ldr	r3, [pc, #40]	; (4bc4 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x30>)
    4b9a:	795b      	ldrb	r3, [r3, #5]
    4b9c:	9303      	str	r3, [sp, #12]

    (void)Config;

    RegValue = IP_SCG->CLKOUTCNFG;
    4b9e:	4b0a      	ldr	r3, [pc, #40]	; (4bc8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4ba0:	6a1b      	ldr	r3, [r3, #32]
    4ba2:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4ba4:	9b02      	ldr	r3, [sp, #8]
    4ba6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4baa:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4bac:	9b03      	ldr	r3, [sp, #12]
    4bae:	061b      	lsls	r3, r3, #24
    4bb0:	9a02      	ldr	r2, [sp, #8]
    4bb2:	4313      	orrs	r3, r2
    4bb4:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4bb6:	4a04      	ldr	r2, [pc, #16]	; (4bc8 <Clock_Ip_ResetScgClkoutSel_TrustedCall+0x34>)
    4bb8:	9b02      	ldr	r3, [sp, #8]
    4bba:	6213      	str	r3, [r2, #32]
}
    4bbc:	bf00      	nop
    4bbe:	b004      	add	sp, #16
    4bc0:	4770      	bx	lr
    4bc2:	bf00      	nop
    4bc4:	0000fe1c 	.word	0x0000fe1c
    4bc8:	40064000 	.word	0x40064000

00004bcc <Clock_Ip_SetScgClkoutSel_TrustedCall>:
void Clock_Ip_SetScgClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4bcc:	b084      	sub	sp, #16
    4bce:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryScsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4bd0:	9b01      	ldr	r3, [sp, #4]
    4bd2:	685b      	ldr	r3, [r3, #4]
    4bd4:	4a0a      	ldr	r2, [pc, #40]	; (4c00 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x34>)
    4bd6:	5cd3      	ldrb	r3, [r2, r3]
    4bd8:	9303      	str	r3, [sp, #12]

    RegValue = IP_SCG->CLKOUTCNFG;
    4bda:	4b0a      	ldr	r3, [pc, #40]	; (4c04 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4bdc:	6a1b      	ldr	r3, [r3, #32]
    4bde:	9302      	str	r3, [sp, #8]
    RegValue &= ~SCG_CLKOUTCNFG_CLKOUTSEL_MASK;
    4be0:	9b02      	ldr	r3, [sp, #8]
    4be2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    4be6:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SCG_CLKOUTCNFG_CLKOUTSEL_SHIFT);
    4be8:	9b03      	ldr	r3, [sp, #12]
    4bea:	061b      	lsls	r3, r3, #24
    4bec:	9a02      	ldr	r2, [sp, #8]
    4bee:	4313      	orrs	r3, r2
    4bf0:	9302      	str	r3, [sp, #8]
    IP_SCG->CLKOUTCNFG = RegValue;
    4bf2:	4a04      	ldr	r2, [pc, #16]	; (4c04 <Clock_Ip_SetScgClkoutSel_TrustedCall+0x38>)
    4bf4:	9b02      	ldr	r3, [sp, #8]
    4bf6:	6213      	str	r3, [r2, #32]
}
    4bf8:	bf00      	nop
    4bfa:	b004      	add	sp, #16
    4bfc:	4770      	bx	lr
    4bfe:	bf00      	nop
    4c00:	0000fe1c 	.word	0x0000fe1c
    4c04:	40064000 	.word	0x40064000

00004c08 <Clock_Ip_ResetSimFtmoptSel_TrustedCall>:
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x)  (24U + ((x) << 1U))
#define SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(x))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x)  (16U + (((x) - 4U) << 1U))
#define SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(x)   ((uint32)3U << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(x))
void Clock_Ip_ResetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4c08:	b086      	sub	sp, #24
    4c0a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[FIRC_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4c0c:	4b20      	ldr	r3, [pc, #128]	; (4c90 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x88>)
    4c0e:	795b      	ldrb	r3, [r3, #5]
    4c10:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4c12:	9b01      	ldr	r3, [sp, #4]
    4c14:	681a      	ldr	r2, [r3, #0]
    4c16:	491f      	ldr	r1, [pc, #124]	; (4c94 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x8c>)
    4c18:	4613      	mov	r3, r2
    4c1a:	00db      	lsls	r3, r3, #3
    4c1c:	4413      	add	r3, r2
    4c1e:	440b      	add	r3, r1
    4c20:	781b      	ldrb	r3, [r3, #0]
    4c22:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4c24:	4b1c      	ldr	r3, [pc, #112]	; (4c98 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4c26:	68db      	ldr	r3, [r3, #12]
    4c28:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4c2a:	9b03      	ldr	r3, [sp, #12]
    4c2c:	2b03      	cmp	r3, #3
    4c2e:	d813      	bhi.n	4c58 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x50>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4c30:	9b03      	ldr	r3, [sp, #12]
    4c32:	005b      	lsls	r3, r3, #1
    4c34:	3318      	adds	r3, #24
    4c36:	2203      	movs	r2, #3
    4c38:	fa02 f303 	lsl.w	r3, r2, r3
    4c3c:	43db      	mvns	r3, r3
    4c3e:	9a05      	ldr	r2, [sp, #20]
    4c40:	4013      	ands	r3, r2
    4c42:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4c44:	9b03      	ldr	r3, [sp, #12]
    4c46:	005b      	lsls	r3, r3, #1
    4c48:	3318      	adds	r3, #24
    4c4a:	9a04      	ldr	r2, [sp, #16]
    4c4c:	fa02 f303 	lsl.w	r3, r2, r3
    4c50:	9a05      	ldr	r2, [sp, #20]
    4c52:	4313      	orrs	r3, r2
    4c54:	9305      	str	r3, [sp, #20]
    4c56:	e014      	b.n	4c82 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x7a>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4c58:	9b03      	ldr	r3, [sp, #12]
    4c5a:	3b04      	subs	r3, #4
    4c5c:	005b      	lsls	r3, r3, #1
    4c5e:	3310      	adds	r3, #16
    4c60:	2203      	movs	r2, #3
    4c62:	fa02 f303 	lsl.w	r3, r2, r3
    4c66:	43db      	mvns	r3, r3
    4c68:	9a05      	ldr	r2, [sp, #20]
    4c6a:	4013      	ands	r3, r2
    4c6c:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4c6e:	9b03      	ldr	r3, [sp, #12]
    4c70:	3b04      	subs	r3, #4
    4c72:	005b      	lsls	r3, r3, #1
    4c74:	3310      	adds	r3, #16
    4c76:	9a04      	ldr	r2, [sp, #16]
    4c78:	fa02 f303 	lsl.w	r3, r2, r3
    4c7c:	9a05      	ldr	r2, [sp, #20]
    4c7e:	4313      	orrs	r3, r2
    4c80:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4c82:	4a05      	ldr	r2, [pc, #20]	; (4c98 <Clock_Ip_ResetSimFtmoptSel_TrustedCall+0x90>)
    4c84:	9b05      	ldr	r3, [sp, #20]
    4c86:	60d3      	str	r3, [r2, #12]
}
    4c88:	bf00      	nop
    4c8a:	b006      	add	sp, #24
    4c8c:	4770      	bx	lr
    4c8e:	bf00      	nop
    4c90:	0000fdc4 	.word	0x0000fdc4
    4c94:	0000fab4 	.word	0x0000fab4
    4c98:	40048000 	.word	0x40048000

00004c9c <Clock_Ip_SetSimFtmoptSel_TrustedCall>:
void Clock_Ip_SetSimFtmoptSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4c9c:	b086      	sub	sp, #24
    4c9e:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4ca0:	9b01      	ldr	r3, [sp, #4]
    4ca2:	685b      	ldr	r3, [r3, #4]
    4ca4:	4a20      	ldr	r2, [pc, #128]	; (4d28 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x8c>)
    4ca6:	5cd3      	ldrb	r3, [r2, r3]
    4ca8:	9304      	str	r3, [sp, #16]
    uint32 Instance      = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_MODULE_INSTANCE];
    4caa:	9b01      	ldr	r3, [sp, #4]
    4cac:	681a      	ldr	r2, [r3, #0]
    4cae:	491f      	ldr	r1, [pc, #124]	; (4d2c <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x90>)
    4cb0:	4613      	mov	r3, r2
    4cb2:	00db      	lsls	r3, r3, #3
    4cb4:	4413      	add	r3, r2
    4cb6:	440b      	add	r3, r1
    4cb8:	781b      	ldrb	r3, [r3, #0]
    4cba:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->FTMOPT0;
    4cbc:	4b1c      	ldr	r3, [pc, #112]	; (4d30 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4cbe:	68db      	ldr	r3, [r3, #12]
    4cc0:	9305      	str	r3, [sp, #20]
    if(Instance < 4U)
    4cc2:	9b03      	ldr	r3, [sp, #12]
    4cc4:	2b03      	cmp	r3, #3
    4cc6:	d813      	bhi.n	4cf0 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x54>
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_0_3_CLKSEL_MASK(Instance));
    4cc8:	9b03      	ldr	r3, [sp, #12]
    4cca:	005b      	lsls	r3, r3, #1
    4ccc:	3318      	adds	r3, #24
    4cce:	2203      	movs	r2, #3
    4cd0:	fa02 f303 	lsl.w	r3, r2, r3
    4cd4:	43db      	mvns	r3, r3
    4cd6:	9a05      	ldr	r2, [sp, #20]
    4cd8:	4013      	ands	r3, r2
    4cda:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_0_3_CLKSEL_SHIFT(Instance));
    4cdc:	9b03      	ldr	r3, [sp, #12]
    4cde:	005b      	lsls	r3, r3, #1
    4ce0:	3318      	adds	r3, #24
    4ce2:	9a04      	ldr	r2, [sp, #16]
    4ce4:	fa02 f303 	lsl.w	r3, r2, r3
    4ce8:	9a05      	ldr	r2, [sp, #20]
    4cea:	4313      	orrs	r3, r2
    4cec:	9305      	str	r3, [sp, #20]
    4cee:	e014      	b.n	4d1a <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x7e>
    }
    else
    {
        RegValue &= ~(SIM_FTMOPT0_FTM_4_7_CLKSEL_MASK(Instance));
    4cf0:	9b03      	ldr	r3, [sp, #12]
    4cf2:	3b04      	subs	r3, #4
    4cf4:	005b      	lsls	r3, r3, #1
    4cf6:	3310      	adds	r3, #16
    4cf8:	2203      	movs	r2, #3
    4cfa:	fa02 f303 	lsl.w	r3, r2, r3
    4cfe:	43db      	mvns	r3, r3
    4d00:	9a05      	ldr	r2, [sp, #20]
    4d02:	4013      	ands	r3, r2
    4d04:	9305      	str	r3, [sp, #20]
        RegValue |= (SelectorValue << SIM_FTMOPT0_FTM_4_7_CLKSEL_SHIFT(Instance));
    4d06:	9b03      	ldr	r3, [sp, #12]
    4d08:	3b04      	subs	r3, #4
    4d0a:	005b      	lsls	r3, r3, #1
    4d0c:	3310      	adds	r3, #16
    4d0e:	9a04      	ldr	r2, [sp, #16]
    4d10:	fa02 f303 	lsl.w	r3, r2, r3
    4d14:	9a05      	ldr	r2, [sp, #20]
    4d16:	4313      	orrs	r3, r2
    4d18:	9305      	str	r3, [sp, #20]
    }

    IP_SIM->FTMOPT0 = RegValue;
    4d1a:	4a05      	ldr	r2, [pc, #20]	; (4d30 <Clock_Ip_SetSimFtmoptSel_TrustedCall+0x94>)
    4d1c:	9b05      	ldr	r3, [sp, #20]
    4d1e:	60d3      	str	r3, [r2, #12]
}
    4d20:	bf00      	nop
    4d22:	b006      	add	sp, #24
    4d24:	4770      	bx	lr
    4d26:	bf00      	nop
    4d28:	0000fdc4 	.word	0x0000fdc4
    4d2c:	0000fab4 	.word	0x0000fab4
    4d30:	40048000 	.word	0x40048000

00004d34 <Clock_Ip_ResetSimClkoutSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_CLKOUT_SEL
/* Clear CLKOUTSEL and CLKOUTEN bit field in SIM_CHIPCTL register  */
void Clock_Ip_ResetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4d34:	b084      	sub	sp, #16
    4d36:	9001      	str	r0, [sp, #4]
    uint32 RegValue;

    (void)Config;

    RegValue = IP_SIM->CHIPCTL;
    4d38:	4b06      	ldr	r3, [pc, #24]	; (4d54 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4d3a:	685b      	ldr	r3, [r3, #4]
    4d3c:	9303      	str	r3, [sp, #12]
    RegValue &= ~(SIM_CHIPCTL_CLKOUTSEL_MASK | SIM_CHIPCTL_CLKOUTEN_MASK);
    4d3e:	9b03      	ldr	r3, [sp, #12]
    4d40:	f423 630f 	bic.w	r3, r3, #2288	; 0x8f0
    4d44:	9303      	str	r3, [sp, #12]
    IP_SIM->CHIPCTL = RegValue;
    4d46:	4a03      	ldr	r2, [pc, #12]	; (4d54 <Clock_Ip_ResetSimClkoutSel_TrustedCall+0x20>)
    4d48:	9b03      	ldr	r3, [sp, #12]
    4d4a:	6053      	str	r3, [r2, #4]
}
    4d4c:	bf00      	nop
    4d4e:	b004      	add	sp, #16
    4d50:	4770      	bx	lr
    4d52:	bf00      	nop
    4d54:	40048000 	.word	0x40048000

00004d58 <Clock_Ip_SetSimClkoutSel_TrustedCall>:
void Clock_Ip_SetSimClkoutSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4d58:	b084      	sub	sp, #16
    4d5a:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4d5c:	9b01      	ldr	r3, [sp, #4]
    4d5e:	685b      	ldr	r3, [r3, #4]
    4d60:	4a0a      	ldr	r2, [pc, #40]	; (4d8c <Clock_Ip_SetSimClkoutSel_TrustedCall+0x34>)
    4d62:	5cd3      	ldrb	r3, [r2, r3]
    4d64:	9303      	str	r3, [sp, #12]

    RegValue = IP_SIM->CHIPCTL;
    4d66:	4b0a      	ldr	r3, [pc, #40]	; (4d90 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4d68:	685b      	ldr	r3, [r3, #4]
    4d6a:	9302      	str	r3, [sp, #8]
    RegValue &= ~SIM_CHIPCTL_CLKOUTSEL_MASK;
    4d6c:	9b02      	ldr	r3, [sp, #8]
    4d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    4d72:	9302      	str	r3, [sp, #8]
    RegValue |= (SelectorValue << SIM_CHIPCTL_CLKOUTSEL_SHIFT);
    4d74:	9b03      	ldr	r3, [sp, #12]
    4d76:	011b      	lsls	r3, r3, #4
    4d78:	9a02      	ldr	r2, [sp, #8]
    4d7a:	4313      	orrs	r3, r2
    4d7c:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = RegValue;
    4d7e:	4a04      	ldr	r2, [pc, #16]	; (4d90 <Clock_Ip_SetSimClkoutSel_TrustedCall+0x38>)
    4d80:	9b02      	ldr	r3, [sp, #8]
    4d82:	6053      	str	r3, [r2, #4]
}
    4d84:	bf00      	nop
    4d86:	b004      	add	sp, #16
    4d88:	4770      	bx	lr
    4d8a:	bf00      	nop
    4d8c:	0000fdc4 	.word	0x0000fdc4
    4d90:	40048000 	.word	0x40048000

00004d94 <Clock_Ip_ResetPccPcsSelect_TrustedCall>:
#ifdef CLOCK_IP_PCC_PCS_SELECT
/**
* @brief            This function will reset writable bit fields of PCC register
*/
void Clock_Ip_ResetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4d94:	b084      	sub	sp, #16
    4d96:	9001      	str	r0, [sp, #4]
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4d98:	9b01      	ldr	r3, [sp, #4]
    4d9a:	681a      	ldr	r2, [r3, #0]
    4d9c:	490f      	ldr	r1, [pc, #60]	; (4ddc <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x48>)
    4d9e:	4613      	mov	r3, r2
    4da0:	00db      	lsls	r3, r3, #3
    4da2:	4413      	add	r3, r2
    4da4:	440b      	add	r3, r1
    4da6:	3304      	adds	r3, #4
    4da8:	781b      	ldrb	r3, [r3, #0]
    4daa:	9303      	str	r3, [sp, #12]

    /* Disable CGC before set PCS */
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_CGC_MASK);
    4dac:	4a0c      	ldr	r2, [pc, #48]	; (4de0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4dae:	9b03      	ldr	r3, [sp, #12]
    4db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4db4:	490a      	ldr	r1, [pc, #40]	; (4de0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4db6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    4dba:	9b03      	ldr	r3, [sp, #12]
    4dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    IP_PCC->PCCn[PccIndex] &= ~(PCC_PCCn_PCS_MASK);
    4dc0:	4a07      	ldr	r2, [pc, #28]	; (4de0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4dc2:	9b03      	ldr	r3, [sp, #12]
    4dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4dc8:	4905      	ldr	r1, [pc, #20]	; (4de0 <Clock_Ip_ResetPccPcsSelect_TrustedCall+0x4c>)
    4dca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
    4dce:	9b03      	ldr	r3, [sp, #12]
    4dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4dd4:	bf00      	nop
    4dd6:	b004      	add	sp, #16
    4dd8:	4770      	bx	lr
    4dda:	bf00      	nop
    4ddc:	0000fab4 	.word	0x0000fab4
    4de0:	40065000 	.word	0x40065000

00004de4 <Clock_Ip_SetPccPcsSelect_TrustedCall>:
void Clock_Ip_SetPccPcsSelect_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4de4:	b086      	sub	sp, #24
    4de6:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    uint32 PccIndex = Clock_Ip_au8ClockFeatures[Config->Name][CLOCK_IP_SELECTOR_INDEX];
    4de8:	9b01      	ldr	r3, [sp, #4]
    4dea:	681a      	ldr	r2, [r3, #0]
    4dec:	4912      	ldr	r1, [pc, #72]	; (4e38 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x54>)
    4dee:	4613      	mov	r3, r2
    4df0:	00db      	lsls	r3, r3, #3
    4df2:	4413      	add	r3, r2
    4df4:	440b      	add	r3, r1
    4df6:	3304      	adds	r3, #4
    4df8:	781b      	ldrb	r3, [r3, #0]
    4dfa:	9305      	str	r3, [sp, #20]
    uint32 SelectorValue = Clock_Ip_au8SelectorEntryPcsHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4dfc:	9b01      	ldr	r3, [sp, #4]
    4dfe:	685b      	ldr	r3, [r3, #4]
    4e00:	4a0e      	ldr	r2, [pc, #56]	; (4e3c <Clock_Ip_SetPccPcsSelect_TrustedCall+0x58>)
    4e02:	5cd3      	ldrb	r3, [r2, r3]
    4e04:	9304      	str	r3, [sp, #16]

    RegValue = IP_PCC->PCCn[PccIndex];
    4e06:	4a0e      	ldr	r2, [pc, #56]	; (4e40 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4e08:	9b05      	ldr	r3, [sp, #20]
    4e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e0e:	9303      	str	r3, [sp, #12]
    RegValue &= ~PCC_PCCn_PCS_MASK;
    4e10:	9b03      	ldr	r3, [sp, #12]
    4e12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    4e16:	9303      	str	r3, [sp, #12]
    RegValue |= PCC_PCCn_PCS(SelectorValue);
    4e18:	9b04      	ldr	r3, [sp, #16]
    4e1a:	061b      	lsls	r3, r3, #24
    4e1c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    4e20:	9a03      	ldr	r2, [sp, #12]
    4e22:	4313      	orrs	r3, r2
    4e24:	9303      	str	r3, [sp, #12]
    IP_PCC->PCCn[PccIndex] = RegValue;
    4e26:	4906      	ldr	r1, [pc, #24]	; (4e40 <Clock_Ip_SetPccPcsSelect_TrustedCall+0x5c>)
    4e28:	9b05      	ldr	r3, [sp, #20]
    4e2a:	9a03      	ldr	r2, [sp, #12]
    4e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4e30:	bf00      	nop
    4e32:	b006      	add	sp, #24
    4e34:	4770      	bx	lr
    4e36:	bf00      	nop
    4e38:	0000fab4 	.word	0x0000fab4
    4e3c:	0000fe4c 	.word	0x0000fe4c
    4e40:	40065000 	.word	0x40065000

00004e44 <Clock_Ip_ResetSimTraceSel_TrustedCall>:
#endif

#ifdef CLOCK_IP_SIM_TRACE_SEL
void Clock_Ip_ResetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4e44:	b084      	sub	sp, #16
    4e46:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[CORE_CLK];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4e48:	4b0b      	ldr	r3, [pc, #44]	; (4e78 <Clock_Ip_ResetSimTraceSel_TrustedCall+0x34>)
    4e4a:	7f1b      	ldrb	r3, [r3, #28]
    4e4c:	9303      	str	r3, [sp, #12]

    (void) Config;
    RegValue = (uint32)IP_SIM->CHIPCTL;
    4e4e:	4b0b      	ldr	r3, [pc, #44]	; (4e7c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4e50:	685b      	ldr	r3, [r3, #4]
    4e52:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4e54:	9b02      	ldr	r3, [sp, #8]
    4e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4e5a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4e5c:	9b03      	ldr	r3, [sp, #12]
    4e5e:	031b      	lsls	r3, r3, #12
    4e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4e64:	9a02      	ldr	r2, [sp, #8]
    4e66:	4313      	orrs	r3, r2
    4e68:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4e6a:	4a04      	ldr	r2, [pc, #16]	; (4e7c <Clock_Ip_ResetSimTraceSel_TrustedCall+0x38>)
    4e6c:	9b02      	ldr	r3, [sp, #8]
    4e6e:	6053      	str	r3, [r2, #4]
}
    4e70:	bf00      	nop
    4e72:	b004      	add	sp, #16
    4e74:	4770      	bx	lr
    4e76:	bf00      	nop
    4e78:	0000fdc4 	.word	0x0000fdc4
    4e7c:	40048000 	.word	0x40048000

00004e80 <Clock_Ip_SetSimTraceSel_TrustedCall>:
void Clock_Ip_SetSimTraceSel_TrustedCall(Clock_Ip_SelectorConfigType const *Config)
{
    4e80:	b084      	sub	sp, #16
    4e82:	9001      	str	r0, [sp, #4]
    uint32 RegValue;
    /* TRACE_CLK selector mapped to Clock_Ip_au16SelectorEntryHardwareValue */
    uint32 SelectorValue = Clock_Ip_au16SelectorEntryHardwareValue[Config->Value];    /* Hw value corresponding to selector entry. Translate input clock source to hardware value. */
    4e84:	9b01      	ldr	r3, [sp, #4]
    4e86:	685b      	ldr	r3, [r3, #4]
    4e88:	4a0b      	ldr	r2, [pc, #44]	; (4eb8 <Clock_Ip_SetSimTraceSel_TrustedCall+0x38>)
    4e8a:	5cd3      	ldrb	r3, [r2, r3]
    4e8c:	9303      	str	r3, [sp, #12]

    RegValue = (uint32)IP_SIM->CHIPCTL;
    4e8e:	4b0b      	ldr	r3, [pc, #44]	; (4ebc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4e90:	685b      	ldr	r3, [r3, #4]
    4e92:	9302      	str	r3, [sp, #8]
    RegValue &= (~((uint32)SIM_CHIPCTL_TRACECLK_SEL_MASK));
    4e94:	9b02      	ldr	r3, [sp, #8]
    4e96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4e9a:	9302      	str	r3, [sp, #8]
    RegValue |= SIM_CHIPCTL_TRACECLK_SEL(SelectorValue);
    4e9c:	9b03      	ldr	r3, [sp, #12]
    4e9e:	031b      	lsls	r3, r3, #12
    4ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    4ea4:	9a02      	ldr	r2, [sp, #8]
    4ea6:	4313      	orrs	r3, r2
    4ea8:	9302      	str	r3, [sp, #8]
    IP_SIM->CHIPCTL = (uint32)RegValue;
    4eaa:	4a04      	ldr	r2, [pc, #16]	; (4ebc <Clock_Ip_SetSimTraceSel_TrustedCall+0x3c>)
    4eac:	9b02      	ldr	r3, [sp, #8]
    4eae:	6053      	str	r3, [r2, #4]
}
    4eb0:	bf00      	nop
    4eb2:	b004      	add	sp, #16
    4eb4:	4770      	bx	lr
    4eb6:	bf00      	nop
    4eb8:	0000fdc4 	.word	0x0000fdc4
    4ebc:	40048000 	.word	0x40048000

00004ec0 <DisableSafeClock>:

#define MCU_START_SEC_CODE
#include "Mcu_MemMap.h"

static void DisableSafeClock(Clock_Ip_ClockConfigType const * Config)
{
    4ec0:	b500      	push	{lr}
    4ec2:	b085      	sub	sp, #20
    4ec4:	9001      	str	r0, [sp, #4]
    uint32 Index;
    boolean FircConfigFound = FALSE;
    4ec6:	2300      	movs	r3, #0
    4ec8:	f88d 300b 	strb.w	r3, [sp, #11]

    if (Config != NULL_PTR)
    4ecc:	9b01      	ldr	r3, [sp, #4]
    4ece:	2b00      	cmp	r3, #0
    4ed0:	d037      	beq.n	4f42 <DisableSafeClock+0x82>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4ed2:	2300      	movs	r3, #0
    4ed4:	9303      	str	r3, [sp, #12]
    4ed6:	e02b      	b.n	4f30 <DisableSafeClock+0x70>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    4ed8:	4b29      	ldr	r3, [pc, #164]	; (4f80 <DisableSafeClock+0xc0>)
    4eda:	6819      	ldr	r1, [r3, #0]
    4edc:	9a03      	ldr	r2, [sp, #12]
    4ede:	4613      	mov	r3, r2
    4ee0:	005b      	lsls	r3, r3, #1
    4ee2:	4413      	add	r3, r2
    4ee4:	009b      	lsls	r3, r3, #2
    4ee6:	440b      	add	r3, r1
    4ee8:	3314      	adds	r3, #20
    4eea:	681b      	ldr	r3, [r3, #0]
    4eec:	2b05      	cmp	r3, #5
    4eee:	d11c      	bne.n	4f2a <DisableSafeClock+0x6a>
            {
                FircConfigFound = TRUE;
    4ef0:	2301      	movs	r3, #1
    4ef2:	f88d 300b 	strb.w	r3, [sp, #11]
                if (Clock_Ip_apConfig->Ircoscs[Index].Enable == FALSE)
    4ef6:	4b22      	ldr	r3, [pc, #136]	; (4f80 <DisableSafeClock+0xc0>)
    4ef8:	6819      	ldr	r1, [r3, #0]
    4efa:	9a03      	ldr	r2, [sp, #12]
    4efc:	4613      	mov	r3, r2
    4efe:	005b      	lsls	r3, r3, #1
    4f00:	4413      	add	r3, r2
    4f02:	009b      	lsls	r3, r3, #2
    4f04:	440b      	add	r3, r1
    4f06:	3318      	adds	r3, #24
    4f08:	881b      	ldrh	r3, [r3, #0]
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	d118      	bne.n	4f40 <DisableSafeClock+0x80>
                {
                    /* Disable FIRC according to configuration */
                    Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4f0e:	4b1d      	ldr	r3, [pc, #116]	; (4f84 <DisableSafeClock+0xc4>)
    4f10:	791b      	ldrb	r3, [r3, #4]
    4f12:	4619      	mov	r1, r3
    4f14:	4a1c      	ldr	r2, [pc, #112]	; (4f88 <DisableSafeClock+0xc8>)
    4f16:	460b      	mov	r3, r1
    4f18:	005b      	lsls	r3, r3, #1
    4f1a:	440b      	add	r3, r1
    4f1c:	009b      	lsls	r3, r3, #2
    4f1e:	4413      	add	r3, r2
    4f20:	3308      	adds	r3, #8
    4f22:	681b      	ldr	r3, [r3, #0]
    4f24:	2005      	movs	r0, #5
    4f26:	4798      	blx	r3
                }
                break;
    4f28:	e00a      	b.n	4f40 <DisableSafeClock+0x80>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    4f2a:	9b03      	ldr	r3, [sp, #12]
    4f2c:	3301      	adds	r3, #1
    4f2e:	9303      	str	r3, [sp, #12]
    4f30:	4b13      	ldr	r3, [pc, #76]	; (4f80 <DisableSafeClock+0xc0>)
    4f32:	681b      	ldr	r3, [r3, #0]
    4f34:	7a1b      	ldrb	r3, [r3, #8]
    4f36:	461a      	mov	r2, r3
    4f38:	9b03      	ldr	r3, [sp, #12]
    4f3a:	4293      	cmp	r3, r2
    4f3c:	d3cc      	bcc.n	4ed8 <DisableSafeClock+0x18>
    4f3e:	e000      	b.n	4f42 <DisableSafeClock+0x82>
                break;
    4f40:	bf00      	nop
            }
        }
    }

    if ((FircConfigFound == FALSE) && (Clock_Ip_bFircWasEnabledBeforeMcuInit == FALSE))
    4f42:	f89d 300b 	ldrb.w	r3, [sp, #11]
    4f46:	f083 0301 	eor.w	r3, r3, #1
    4f4a:	b2db      	uxtb	r3, r3
    4f4c:	2b00      	cmp	r3, #0
    4f4e:	d013      	beq.n	4f78 <DisableSafeClock+0xb8>
    4f50:	4b0e      	ldr	r3, [pc, #56]	; (4f8c <DisableSafeClock+0xcc>)
    4f52:	781b      	ldrb	r3, [r3, #0]
    4f54:	f083 0301 	eor.w	r3, r3, #1
    4f58:	b2db      	uxtb	r3, r3
    4f5a:	2b00      	cmp	r3, #0
    4f5c:	d00c      	beq.n	4f78 <DisableSafeClock+0xb8>
    {
        /* Disable FIRC according to configuration */
        Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]].Disable(FIRC_CLK);
    4f5e:	4b09      	ldr	r3, [pc, #36]	; (4f84 <DisableSafeClock+0xc4>)
    4f60:	791b      	ldrb	r3, [r3, #4]
    4f62:	4619      	mov	r1, r3
    4f64:	4a08      	ldr	r2, [pc, #32]	; (4f88 <DisableSafeClock+0xc8>)
    4f66:	460b      	mov	r3, r1
    4f68:	005b      	lsls	r3, r3, #1
    4f6a:	440b      	add	r3, r1
    4f6c:	009b      	lsls	r3, r3, #2
    4f6e:	4413      	add	r3, r2
    4f70:	3308      	adds	r3, #8
    4f72:	681b      	ldr	r3, [r3, #0]
    4f74:	2005      	movs	r0, #5
    4f76:	4798      	blx	r3
    }
}
    4f78:	bf00      	nop
    4f7a:	b005      	add	sp, #20
    4f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    4f80:	1fff8bb4 	.word	0x1fff8bb4
    4f84:	0000fa44 	.word	0x0000fa44
    4f88:	00010074 	.word	0x00010074
    4f8c:	1fff8b18 	.word	0x1fff8b18

00004f90 <SetFircToResetValue_TrustedCall>:

void SetFircToResetValue_TrustedCall(void)
{
        /* Range is 48Mhz. */
        IP_SCG->FIRCCFG = SCG_FIRCCFG_RANGE(0U);
    4f90:	4b06      	ldr	r3, [pc, #24]	; (4fac <SetFircToResetValue_TrustedCall+0x1c>)
    4f92:	2200      	movs	r2, #0
    4f94:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

        /* Enable clock, Regulator is enabled. */
        IP_SCG->FIRCCSR |= (SCG_FIRCCSR_FIRCEN(1U) | SCG_FIRCCSR_FIRCREGOFF(0U));
    4f98:	4b04      	ldr	r3, [pc, #16]	; (4fac <SetFircToResetValue_TrustedCall+0x1c>)
    4f9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    4f9e:	4a03      	ldr	r2, [pc, #12]	; (4fac <SetFircToResetValue_TrustedCall+0x1c>)
    4fa0:	f043 0301 	orr.w	r3, r3, #1
    4fa4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    4fa8:	bf00      	nop
    4faa:	4770      	bx	lr
    4fac:	40064000 	.word	0x40064000

00004fb0 <SetSimLpoclksRegister_TrustedCall>:

void SetSimLpoclksRegister_TrustedCall(Clock_Ip_ClockConfigType const *Config)
{
    4fb0:	b084      	sub	sp, #16
    4fb2:	9001      	str	r0, [sp, #4]
    uint32 SimLpoValue = 3U; /* Reset value of SIM_LPOCLKS register */
    4fb4:	2303      	movs	r3, #3
    4fb6:	9303      	str	r3, [sp, #12]
    uint32 Index;

    /* The LPOCLKS register is a write-once register so configuration will be written here*/

    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    4fb8:	2300      	movs	r3, #0
    4fba:	9302      	str	r3, [sp, #8]
    4fbc:	e028      	b.n	5010 <SetSimLpoclksRegister_TrustedCall+0x60>
    {
        /* Selector for RTC_CLK */
        if (RTC_CLK == Config->Selectors[Index].Name)
    4fbe:	9b01      	ldr	r3, [sp, #4]
    4fc0:	9a02      	ldr	r2, [sp, #8]
    4fc2:	320d      	adds	r2, #13
    4fc4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4fc8:	2b28      	cmp	r3, #40	; 0x28
    4fca:	d10b      	bne.n	4fe4 <SetSimLpoclksRegister_TrustedCall+0x34>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au16SelectorEntryHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_RTCCLKSEL_SHIFT);
    4fcc:	9a01      	ldr	r2, [sp, #4]
    4fce:	9b02      	ldr	r3, [sp, #8]
    4fd0:	330d      	adds	r3, #13
    4fd2:	00db      	lsls	r3, r3, #3
    4fd4:	4413      	add	r3, r2
    4fd6:	685b      	ldr	r3, [r3, #4]
    4fd8:	4a2b      	ldr	r2, [pc, #172]	; (5088 <SetSimLpoclksRegister_TrustedCall+0xd8>)
    4fda:	5cd3      	ldrb	r3, [r2, r3]
    4fdc:	011b      	lsls	r3, r3, #4
    4fde:	9a03      	ldr	r2, [sp, #12]
    4fe0:	4313      	orrs	r3, r2
    4fe2:	9303      	str	r3, [sp, #12]
        }

         /* Selector for LPO_CLK */
        if (LPO_CLK == Config->Selectors[Index].Name)
    4fe4:	9b01      	ldr	r3, [sp, #4]
    4fe6:	9a02      	ldr	r2, [sp, #8]
    4fe8:	320d      	adds	r2, #13
    4fea:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    4fee:	2b29      	cmp	r3, #41	; 0x29
    4ff0:	d10b      	bne.n	500a <SetSimLpoclksRegister_TrustedCall+0x5a>
        {
            SimLpoValue |= ((uint32)(Clock_Ip_au8SelectorEntrySIMHardwareValue[Config->Selectors[Index].Value]) << SIM_LPOCLKS_LPOCLKSEL_SHIFT);
    4ff2:	9a01      	ldr	r2, [sp, #4]
    4ff4:	9b02      	ldr	r3, [sp, #8]
    4ff6:	330d      	adds	r3, #13
    4ff8:	00db      	lsls	r3, r3, #3
    4ffa:	4413      	add	r3, r2
    4ffc:	685b      	ldr	r3, [r3, #4]
    4ffe:	4a23      	ldr	r2, [pc, #140]	; (508c <SetSimLpoclksRegister_TrustedCall+0xdc>)
    5000:	5cd3      	ldrb	r3, [r2, r3]
    5002:	009b      	lsls	r3, r3, #2
    5004:	9a03      	ldr	r2, [sp, #12]
    5006:	4313      	orrs	r3, r2
    5008:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->SelectorsCount; Index++)
    500a:	9b02      	ldr	r3, [sp, #8]
    500c:	3301      	adds	r3, #1
    500e:	9302      	str	r3, [sp, #8]
    5010:	9b01      	ldr	r3, [sp, #4]
    5012:	7adb      	ldrb	r3, [r3, #11]
    5014:	461a      	mov	r2, r3
    5016:	9b02      	ldr	r3, [sp, #8]
    5018:	4293      	cmp	r3, r2
    501a:	d3d0      	bcc.n	4fbe <SetSimLpoclksRegister_TrustedCall+0xe>
        }
    }

    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    501c:	2300      	movs	r3, #0
    501e:	9302      	str	r3, [sp, #8]
    5020:	e026      	b.n	5070 <SetSimLpoclksRegister_TrustedCall+0xc0>
    {
        /* Gate for LPO_32K_CLK */
        if (LPO_32K_CLK == Config->Gates[Index].Name)
    5022:	9a01      	ldr	r2, [sp, #4]
    5024:	9b02      	ldr	r3, [sp, #8]
    5026:	334e      	adds	r3, #78	; 0x4e
    5028:	00db      	lsls	r3, r3, #3
    502a:	4413      	add	r3, r2
    502c:	685b      	ldr	r3, [r3, #4]
    502e:	2b12      	cmp	r3, #18
    5030:	d109      	bne.n	5046 <SetSimLpoclksRegister_TrustedCall+0x96>
        {
             SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO32KCLKEN_SHIFT);
    5032:	9a01      	ldr	r2, [sp, #4]
    5034:	9b02      	ldr	r3, [sp, #8]
    5036:	334e      	adds	r3, #78	; 0x4e
    5038:	00db      	lsls	r3, r3, #3
    503a:	4413      	add	r3, r2
    503c:	891b      	ldrh	r3, [r3, #8]
    503e:	005b      	lsls	r3, r3, #1
    5040:	9a03      	ldr	r2, [sp, #12]
    5042:	4313      	orrs	r3, r2
    5044:	9303      	str	r3, [sp, #12]
        }

         /* Gate for LPO_1K_CLK */
        if (LPO_1K_CLK == Config->Gates[Index].Name)
    5046:	9a01      	ldr	r2, [sp, #4]
    5048:	9b02      	ldr	r3, [sp, #8]
    504a:	334e      	adds	r3, #78	; 0x4e
    504c:	00db      	lsls	r3, r3, #3
    504e:	4413      	add	r3, r2
    5050:	685b      	ldr	r3, [r3, #4]
    5052:	2b13      	cmp	r3, #19
    5054:	d109      	bne.n	506a <SetSimLpoclksRegister_TrustedCall+0xba>
        {
            SimLpoValue |= ((uint32)(Config->Gates[Index].Enable) << SIM_LPOCLKS_LPO1KCLKEN_SHIFT);
    5056:	9a01      	ldr	r2, [sp, #4]
    5058:	9b02      	ldr	r3, [sp, #8]
    505a:	334e      	adds	r3, #78	; 0x4e
    505c:	00db      	lsls	r3, r3, #3
    505e:	4413      	add	r3, r2
    5060:	891b      	ldrh	r3, [r3, #8]
    5062:	461a      	mov	r2, r3
    5064:	9b03      	ldr	r3, [sp, #12]
    5066:	4313      	orrs	r3, r2
    5068:	9303      	str	r3, [sp, #12]
    for (Index = 0U; Index < Config->GatesCount; Index++)    /* Set clock gates that are under clock control. */
    506a:	9b02      	ldr	r3, [sp, #8]
    506c:	3301      	adds	r3, #1
    506e:	9302      	str	r3, [sp, #8]
    5070:	9b01      	ldr	r3, [sp, #4]
    5072:	7c1b      	ldrb	r3, [r3, #16]
    5074:	461a      	mov	r2, r3
    5076:	9b02      	ldr	r3, [sp, #8]
    5078:	4293      	cmp	r3, r2
    507a:	d3d2      	bcc.n	5022 <SetSimLpoclksRegister_TrustedCall+0x72>
        }
    }

    IP_SIM->LPOCLKS = SimLpoValue;
    507c:	4a04      	ldr	r2, [pc, #16]	; (5090 <SetSimLpoclksRegister_TrustedCall+0xe0>)
    507e:	9b03      	ldr	r3, [sp, #12]
    5080:	6113      	str	r3, [r2, #16]
}
    5082:	bf00      	nop
    5084:	b004      	add	sp, #16
    5086:	4770      	bx	lr
    5088:	0000fdc4 	.word	0x0000fdc4
    508c:	0000fe7c 	.word	0x0000fe7c
    5090:	40048000 	.word	0x40048000

00005094 <Clock_Ip_SpecificPlatformInitClock>:
}
#endif


static void Clock_Ip_SpecificPlatformInitClock(Clock_Ip_ClockConfigType const * Config)
{
    5094:	b500      	push	{lr}
    5096:	b089      	sub	sp, #36	; 0x24
    5098:	9001      	str	r0, [sp, #4]
    boolean TimeoutOccurred = FALSE;
    509a:	2300      	movs	r3, #0
    509c:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    uint32 IrcoscStatus;

    (void)Clock_Ip_FreqIds;
    Clock_Ip_apConfig = Config;
    50a0:	4a21      	ldr	r2, [pc, #132]	; (5128 <Clock_Ip_SpecificPlatformInitClock+0x94>)
    50a2:	9b01      	ldr	r3, [sp, #4]
    50a4:	6013      	str	r3, [r2, #0]

    /* Clocks cannot be configured while the chip is in other mode than RUN_MODE */
    CLOCK_IP_DEV_ASSERT(CLOCK_IP_RUN_POWER_MODE_STATUS == ((IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK) >> SMC_PMSTAT_PMSTAT_SHIFT));

    /* Check whether FIRC is disabled, enable it in this case. */
    if ((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) == 0U)
    50a6:	4b21      	ldr	r3, [pc, #132]	; (512c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    50a8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    50ac:	f003 0301 	and.w	r3, r3, #1
    50b0:	2b00      	cmp	r3, #0
    50b2:	d12e      	bne.n	5112 <Clock_Ip_SpecificPlatformInitClock+0x7e>
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = FALSE;
    50b4:	4b1e      	ldr	r3, [pc, #120]	; (5130 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    50b6:	2200      	movs	r2, #0
    50b8:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
      #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
        OsIf_Trusted_Call(SetFircToResetValue_TrustedCall);
      #else
        SetFircToResetValue_TrustedCall();
    50ba:	f7ff ff69 	bl	4f90 <SetFircToResetValue_TrustedCall>
      #endif
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

        Clock_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, CLOCK_IP_TIMEOUT_VALUE_US);
    50be:	aa03      	add	r2, sp, #12
    50c0:	a904      	add	r1, sp, #16
    50c2:	a805      	add	r0, sp, #20
    50c4:	f24c 3350 	movw	r3, #50000	; 0xc350
    50c8:	f7fe f8ae 	bl	3228 <Clock_Ip_StartTimeout>
        /* Wait until ircosc is locked */
        do
        {
            IrcoscStatus = (((IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCVLD_MASK) >> SCG_FIRCCSR_FIRCVLD_SHIFT));
    50cc:	4b17      	ldr	r3, [pc, #92]	; (512c <Clock_Ip_SpecificPlatformInitClock+0x98>)
    50ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    50d2:	0e1b      	lsrs	r3, r3, #24
    50d4:	f003 0301 	and.w	r3, r3, #1
    50d8:	9306      	str	r3, [sp, #24]
            TimeoutOccurred = Clock_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    50da:	9a03      	ldr	r2, [sp, #12]
    50dc:	a904      	add	r1, sp, #16
    50de:	ab05      	add	r3, sp, #20
    50e0:	4618      	mov	r0, r3
    50e2:	f7fe f8bb 	bl	325c <Clock_Ip_TimeoutExpired>
    50e6:	4603      	mov	r3, r0
    50e8:	f88d 301f 	strb.w	r3, [sp, #31]
        }
        while ((IrcoscStatus == 0U) && (FALSE == TimeoutOccurred));
    50ec:	9b06      	ldr	r3, [sp, #24]
    50ee:	2b00      	cmp	r3, #0
    50f0:	d106      	bne.n	5100 <Clock_Ip_SpecificPlatformInitClock+0x6c>
    50f2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    50f6:	f083 0301 	eor.w	r3, r3, #1
    50fa:	b2db      	uxtb	r3, r3
    50fc:	2b00      	cmp	r3, #0
    50fe:	d1e5      	bne.n	50cc <Clock_Ip_SpecificPlatformInitClock+0x38>

        if (FALSE != TimeoutOccurred)
    5100:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5104:	2b00      	cmp	r3, #0
    5106:	d007      	beq.n	5118 <Clock_Ip_SpecificPlatformInitClock+0x84>
        {
            /* Report timeout error */
            Clock_Ip_ReportClockErrors(CLOCK_IP_REPORT_TIMEOUT_ERROR, FIRC_CLK);
    5108:	2105      	movs	r1, #5
    510a:	2001      	movs	r0, #1
    510c:	f7fe f87c 	bl	3208 <Clock_Ip_ReportClockErrors>
    5110:	e002      	b.n	5118 <Clock_Ip_SpecificPlatformInitClock+0x84>
        }
    }
    else
    {
        Clock_Ip_bFircWasEnabledBeforeMcuInit = TRUE;
    5112:	4b07      	ldr	r3, [pc, #28]	; (5130 <Clock_Ip_SpecificPlatformInitClock+0x9c>)
    5114:	2201      	movs	r2, #1
    5116:	701a      	strb	r2, [r3, #0]

    #ifdef CLOCK_IP_ENABLE_USER_MODE_SUPPORT
        #if (STD_ON == CLOCK_IP_ENABLE_USER_MODE_SUPPORT)
    OsIf_Trusted_Call1param(SetSimLpoclksRegister_TrustedCall,(Config));
        #else
    SetSimLpoclksRegister_TrustedCall(Config);
    5118:	9801      	ldr	r0, [sp, #4]
    511a:	f7ff ff49 	bl	4fb0 <SetSimLpoclksRegister_TrustedCall>
    #endif /* CLOCK_IP_ENABLE_USER_MODE_SUPPORT */

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
    Clock_Ip_PllPowerClockIp();
    #endif
}
    511e:	bf00      	nop
    5120:	b009      	add	sp, #36	; 0x24
    5122:	f85d fb04 	ldr.w	pc, [sp], #4
    5126:	bf00      	nop
    5128:	1fff8bb4 	.word	0x1fff8bb4
    512c:	40064000 	.word	0x40064000
    5130:	1fff8b18 	.word	0x1fff8b18

00005134 <getFircConfig>:

/**
* @brief            This function will get current configuration of FIRC.
*/
static const Clock_Ip_IrcoscConfigType *getFircConfig(void)
{
    5134:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_IrcoscConfigType *ReturnValue = NULL_PTR;
    5136:	2300      	movs	r3, #0
    5138:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    513a:	4b29      	ldr	r3, [pc, #164]	; (51e0 <getFircConfig+0xac>)
    513c:	681b      	ldr	r3, [r3, #0]
    513e:	2b00      	cmp	r3, #0
    5140:	d024      	beq.n	518c <getFircConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5142:	2300      	movs	r3, #0
    5144:	9301      	str	r3, [sp, #4]
    5146:	e01a      	b.n	517e <getFircConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Ircoscs[Index].Name == FIRC_CLK)
    5148:	4b25      	ldr	r3, [pc, #148]	; (51e0 <getFircConfig+0xac>)
    514a:	6819      	ldr	r1, [r3, #0]
    514c:	9a01      	ldr	r2, [sp, #4]
    514e:	4613      	mov	r3, r2
    5150:	005b      	lsls	r3, r3, #1
    5152:	4413      	add	r3, r2
    5154:	009b      	lsls	r3, r3, #2
    5156:	440b      	add	r3, r1
    5158:	3314      	adds	r3, #20
    515a:	681b      	ldr	r3, [r3, #0]
    515c:	2b05      	cmp	r3, #5
    515e:	d10b      	bne.n	5178 <getFircConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Ircoscs[Index];
    5160:	4b1f      	ldr	r3, [pc, #124]	; (51e0 <getFircConfig+0xac>)
    5162:	6819      	ldr	r1, [r3, #0]
    5164:	9a01      	ldr	r2, [sp, #4]
    5166:	4613      	mov	r3, r2
    5168:	005b      	lsls	r3, r3, #1
    516a:	4413      	add	r3, r2
    516c:	009b      	lsls	r3, r3, #2
    516e:	3310      	adds	r3, #16
    5170:	440b      	add	r3, r1
    5172:	3304      	adds	r3, #4
    5174:	9300      	str	r3, [sp, #0]
                break;
    5176:	e009      	b.n	518c <getFircConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->IrcoscsCount; Index++)
    5178:	9b01      	ldr	r3, [sp, #4]
    517a:	3301      	adds	r3, #1
    517c:	9301      	str	r3, [sp, #4]
    517e:	4b18      	ldr	r3, [pc, #96]	; (51e0 <getFircConfig+0xac>)
    5180:	681b      	ldr	r3, [r3, #0]
    5182:	7a1b      	ldrb	r3, [r3, #8]
    5184:	461a      	mov	r2, r3
    5186:	9b01      	ldr	r3, [sp, #4]
    5188:	4293      	cmp	r3, r2
    518a:	d3dd      	bcc.n	5148 <getFircConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    518c:	9b00      	ldr	r3, [sp, #0]
    518e:	2b00      	cmp	r3, #0
    5190:	d121      	bne.n	51d6 <getFircConfig+0xa2>
    {
        ReturnValue = &FircConfiguration;
    5192:	4b14      	ldr	r3, [pc, #80]	; (51e4 <getFircConfig+0xb0>)
    5194:	9300      	str	r3, [sp, #0]
        FircConfiguration.Name = FIRC_CLK;
    5196:	4b13      	ldr	r3, [pc, #76]	; (51e4 <getFircConfig+0xb0>)
    5198:	2205      	movs	r2, #5
    519a:	601a      	str	r2, [r3, #0]
        FircConfiguration.Enable = (uint16)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCEN_MASK) >> SCG_FIRCCSR_FIRCEN_SHIFT;
    519c:	4b12      	ldr	r3, [pc, #72]	; (51e8 <getFircConfig+0xb4>)
    519e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    51a2:	b29b      	uxth	r3, r3
    51a4:	f003 0301 	and.w	r3, r3, #1
    51a8:	b29a      	uxth	r2, r3
    51aa:	4b0e      	ldr	r3, [pc, #56]	; (51e4 <getFircConfig+0xb0>)
    51ac:	809a      	strh	r2, [r3, #4]
        FircConfiguration.Range = (uint8)(IP_SCG->FIRCCFG & SCG_FIRCCFG_RANGE_MASK) >> SCG_FIRCCFG_RANGE_SHIFT;
    51ae:	4b0e      	ldr	r3, [pc, #56]	; (51e8 <getFircConfig+0xb4>)
    51b0:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
    51b4:	b2db      	uxtb	r3, r3
    51b6:	f003 0303 	and.w	r3, r3, #3
    51ba:	b2da      	uxtb	r2, r3
    51bc:	4b09      	ldr	r3, [pc, #36]	; (51e4 <getFircConfig+0xb0>)
    51be:	71da      	strb	r2, [r3, #7]
        FircConfiguration.Regulator = (uint8)(IP_SCG->FIRCCSR & SCG_FIRCCSR_FIRCREGOFF_MASK) >> SCG_FIRCCSR_FIRCREGOFF_SHIFT;
    51c0:	4b09      	ldr	r3, [pc, #36]	; (51e8 <getFircConfig+0xb4>)
    51c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
    51c6:	b2db      	uxtb	r3, r3
    51c8:	10db      	asrs	r3, r3, #3
    51ca:	b2db      	uxtb	r3, r3
    51cc:	f003 0301 	and.w	r3, r3, #1
    51d0:	b2da      	uxtb	r2, r3
    51d2:	4b04      	ldr	r3, [pc, #16]	; (51e4 <getFircConfig+0xb0>)
    51d4:	719a      	strb	r2, [r3, #6]
    }

    return ReturnValue;
    51d6:	9b00      	ldr	r3, [sp, #0]
}
    51d8:	4618      	mov	r0, r3
    51da:	b002      	add	sp, #8
    51dc:	4770      	bx	lr
    51de:	bf00      	nop
    51e0:	1fff8bb4 	.word	0x1fff8bb4
    51e4:	1fff8c20 	.word	0x1fff8c20
    51e8:	40064000 	.word	0x40064000

000051ec <getSoscConfig>:

/**
* @brief            This function will get current configuration of SOSC.
*/
static const Clock_Ip_XoscConfigType *getSoscConfig(void)
{
    51ec:	b082      	sub	sp, #8
    uint32 Index;

    const Clock_Ip_XoscConfigType *ReturnValue = NULL_PTR;
    51ee:	2300      	movs	r3, #0
    51f0:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    51f2:	4b20      	ldr	r3, [pc, #128]	; (5274 <getSoscConfig+0x88>)
    51f4:	681b      	ldr	r3, [r3, #0]
    51f6:	2b00      	cmp	r3, #0
    51f8:	d024      	beq.n	5244 <getSoscConfig+0x58>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    51fa:	2300      	movs	r3, #0
    51fc:	9301      	str	r3, [sp, #4]
    51fe:	e01a      	b.n	5236 <getSoscConfig+0x4a>
        {
            if (Clock_Ip_apConfig->Xoscs[Index].Name == SOSC_CLK)
    5200:	4b1c      	ldr	r3, [pc, #112]	; (5274 <getSoscConfig+0x88>)
    5202:	6819      	ldr	r1, [r3, #0]
    5204:	9a01      	ldr	r2, [sp, #4]
    5206:	4613      	mov	r3, r2
    5208:	009b      	lsls	r3, r3, #2
    520a:	4413      	add	r3, r2
    520c:	009b      	lsls	r3, r3, #2
    520e:	440b      	add	r3, r1
    5210:	332c      	adds	r3, #44	; 0x2c
    5212:	681b      	ldr	r3, [r3, #0]
    5214:	2b08      	cmp	r3, #8
    5216:	d10b      	bne.n	5230 <getSoscConfig+0x44>
            {
                ReturnValue = &Clock_Ip_apConfig->Xoscs[Index];
    5218:	4b16      	ldr	r3, [pc, #88]	; (5274 <getSoscConfig+0x88>)
    521a:	6819      	ldr	r1, [r3, #0]
    521c:	9a01      	ldr	r2, [sp, #4]
    521e:	4613      	mov	r3, r2
    5220:	009b      	lsls	r3, r3, #2
    5222:	4413      	add	r3, r2
    5224:	009b      	lsls	r3, r3, #2
    5226:	3328      	adds	r3, #40	; 0x28
    5228:	440b      	add	r3, r1
    522a:	3304      	adds	r3, #4
    522c:	9300      	str	r3, [sp, #0]
                break;
    522e:	e009      	b.n	5244 <getSoscConfig+0x58>
        for (Index = 0U; Index < Clock_Ip_apConfig->XoscsCount; Index++)
    5230:	9b01      	ldr	r3, [sp, #4]
    5232:	3301      	adds	r3, #1
    5234:	9301      	str	r3, [sp, #4]
    5236:	4b0f      	ldr	r3, [pc, #60]	; (5274 <getSoscConfig+0x88>)
    5238:	681b      	ldr	r3, [r3, #0]
    523a:	7a5b      	ldrb	r3, [r3, #9]
    523c:	461a      	mov	r2, r3
    523e:	9b01      	ldr	r3, [sp, #4]
    5240:	4293      	cmp	r3, r2
    5242:	d3dd      	bcc.n	5200 <getSoscConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5244:	9b00      	ldr	r3, [sp, #0]
    5246:	2b00      	cmp	r3, #0
    5248:	d110      	bne.n	526c <getSoscConfig+0x80>
    {
        ReturnValue = &SoscConfiguration;
    524a:	4b0b      	ldr	r3, [pc, #44]	; (5278 <getSoscConfig+0x8c>)
    524c:	9300      	str	r3, [sp, #0]
        SoscConfiguration.Name = SOSC_CLK;
    524e:	4b0a      	ldr	r3, [pc, #40]	; (5278 <getSoscConfig+0x8c>)
    5250:	2208      	movs	r2, #8
    5252:	601a      	str	r2, [r3, #0]
        SoscConfiguration.Enable = (uint16)(IP_SCG->SOSCCSR & SCG_SOSCCSR_SOSCEN_MASK) >> SCG_SOSCCSR_SOSCEN_SHIFT;
    5254:	4b09      	ldr	r3, [pc, #36]	; (527c <getSoscConfig+0x90>)
    5256:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    525a:	b29b      	uxth	r3, r3
    525c:	f003 0301 	and.w	r3, r3, #1
    5260:	b29a      	uxth	r2, r3
    5262:	4b05      	ldr	r3, [pc, #20]	; (5278 <getSoscConfig+0x8c>)
    5264:	811a      	strh	r2, [r3, #8]
        SoscConfiguration.Freq = CLOCK_IP_DEFAULT_SOSC_FREQUENCY;
    5266:	4b04      	ldr	r3, [pc, #16]	; (5278 <getSoscConfig+0x8c>)
    5268:	4a05      	ldr	r2, [pc, #20]	; (5280 <getSoscConfig+0x94>)
    526a:	605a      	str	r2, [r3, #4]
    }

    return ReturnValue;
    526c:	9b00      	ldr	r3, [sp, #0]
}
    526e:	4618      	mov	r0, r3
    5270:	b002      	add	sp, #8
    5272:	4770      	bx	lr
    5274:	1fff8bb4 	.word	0x1fff8bb4
    5278:	1fff8c2c 	.word	0x1fff8c2c
    527c:	40064000 	.word	0x40064000
    5280:	02625a00 	.word	0x02625a00

00005284 <getSpllConfig>:
#if defined(CLOCK_IP_HAS_SPLL_CLK)
/**
* @brief            This function will get current configuration of SPLL.
*/
static const Clock_Ip_PllConfigType *getSpllConfig(void)
{
    5284:	b082      	sub	sp, #8
    uint32 Index;
    const Clock_Ip_PllConfigType *ReturnValue = NULL_PTR;
    5286:	2300      	movs	r3, #0
    5288:	9300      	str	r3, [sp, #0]

    if (Clock_Ip_apConfig != NULL_PTR)
    528a:	4b28      	ldr	r3, [pc, #160]	; (532c <getSpllConfig+0xa8>)
    528c:	681b      	ldr	r3, [r3, #0]
    528e:	2b00      	cmp	r3, #0
    5290:	d023      	beq.n	52da <getSpllConfig+0x56>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    5292:	2300      	movs	r3, #0
    5294:	9301      	str	r3, [sp, #4]
    5296:	e019      	b.n	52cc <getSpllConfig+0x48>
        {
            if (Clock_Ip_apConfig->Plls[Index].Name == SPLL_CLK)
    5298:	4b24      	ldr	r3, [pc, #144]	; (532c <getSpllConfig+0xa8>)
    529a:	6819      	ldr	r1, [r3, #0]
    529c:	9a01      	ldr	r2, [sp, #4]
    529e:	4613      	mov	r3, r2
    52a0:	009b      	lsls	r3, r3, #2
    52a2:	4413      	add	r3, r2
    52a4:	00db      	lsls	r3, r3, #3
    52a6:	440b      	add	r3, r1
    52a8:	3340      	adds	r3, #64	; 0x40
    52aa:	681b      	ldr	r3, [r3, #0]
    52ac:	2b09      	cmp	r3, #9
    52ae:	d10a      	bne.n	52c6 <getSpllConfig+0x42>
            {
                ReturnValue = &Clock_Ip_apConfig->Plls[Index];
    52b0:	4b1e      	ldr	r3, [pc, #120]	; (532c <getSpllConfig+0xa8>)
    52b2:	6819      	ldr	r1, [r3, #0]
    52b4:	9a01      	ldr	r2, [sp, #4]
    52b6:	4613      	mov	r3, r2
    52b8:	009b      	lsls	r3, r3, #2
    52ba:	4413      	add	r3, r2
    52bc:	00db      	lsls	r3, r3, #3
    52be:	3340      	adds	r3, #64	; 0x40
    52c0:	440b      	add	r3, r1
    52c2:	9300      	str	r3, [sp, #0]
                break;
    52c4:	e009      	b.n	52da <getSpllConfig+0x56>
        for (Index = 0U; Index < Clock_Ip_apConfig->PllsCount; Index++)
    52c6:	9b01      	ldr	r3, [sp, #4]
    52c8:	3301      	adds	r3, #1
    52ca:	9301      	str	r3, [sp, #4]
    52cc:	4b17      	ldr	r3, [pc, #92]	; (532c <getSpllConfig+0xa8>)
    52ce:	681b      	ldr	r3, [r3, #0]
    52d0:	7a9b      	ldrb	r3, [r3, #10]
    52d2:	461a      	mov	r2, r3
    52d4:	9b01      	ldr	r3, [sp, #4]
    52d6:	4293      	cmp	r3, r2
    52d8:	d3de      	bcc.n	5298 <getSpllConfig+0x14>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    52da:	9b00      	ldr	r3, [sp, #0]
    52dc:	2b00      	cmp	r3, #0
    52de:	d121      	bne.n	5324 <getSpllConfig+0xa0>
    {
        ReturnValue = &SpllConfiguration;
    52e0:	4b13      	ldr	r3, [pc, #76]	; (5330 <getSpllConfig+0xac>)
    52e2:	9300      	str	r3, [sp, #0]
        SpllConfiguration.Name = SPLL_CLK;
    52e4:	4b12      	ldr	r3, [pc, #72]	; (5330 <getSpllConfig+0xac>)
    52e6:	2209      	movs	r2, #9
    52e8:	601a      	str	r2, [r3, #0]
        SpllConfiguration.Enable = (uint16)(IP_SCG->SPLLCSR & SCG_SPLLCSR_SPLLEN_MASK) >> SCG_SPLLCSR_SPLLEN_SHIFT;
    52ea:	4b12      	ldr	r3, [pc, #72]	; (5334 <getSpllConfig+0xb0>)
    52ec:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
    52f0:	b29b      	uxth	r3, r3
    52f2:	f003 0301 	and.w	r3, r3, #1
    52f6:	b29a      	uxth	r2, r3
    52f8:	4b0d      	ldr	r3, [pc, #52]	; (5330 <getSpllConfig+0xac>)
    52fa:	809a      	strh	r2, [r3, #4]
        SpllConfiguration.Predivider = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_PREDIV_MASK) >> SCG_SPLLCFG_PREDIV_SHIFT);
    52fc:	4b0d      	ldr	r3, [pc, #52]	; (5334 <getSpllConfig+0xb0>)
    52fe:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5302:	0a1b      	lsrs	r3, r3, #8
    5304:	b2db      	uxtb	r3, r3
    5306:	f003 0307 	and.w	r3, r3, #7
    530a:	b2da      	uxtb	r2, r3
    530c:	4b08      	ldr	r3, [pc, #32]	; (5330 <getSpllConfig+0xac>)
    530e:	735a      	strb	r2, [r3, #13]
        SpllConfiguration.MulFactorDiv = (uint8)((IP_SCG->SPLLCFG & SCG_SPLLCFG_MULT_MASK) >> SCG_SPLLCFG_MULT_SHIFT);
    5310:	4b08      	ldr	r3, [pc, #32]	; (5334 <getSpllConfig+0xb0>)
    5312:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5316:	0c1b      	lsrs	r3, r3, #16
    5318:	b2db      	uxtb	r3, r3
    531a:	f003 031f 	and.w	r3, r3, #31
    531e:	b2da      	uxtb	r2, r3
    5320:	4b03      	ldr	r3, [pc, #12]	; (5330 <getSpllConfig+0xac>)
    5322:	751a      	strb	r2, [r3, #20]
    }

    return ReturnValue;
    5324:	9b00      	ldr	r3, [sp, #0]
}
    5326:	4618      	mov	r0, r3
    5328:	b002      	add	sp, #8
    532a:	4770      	bx	lr
    532c:	1fff8bb4 	.word	0x1fff8bb4
    5330:	1fff8c40 	.word	0x1fff8c40
    5334:	40064000 	.word	0x40064000

00005338 <getSelectorConfig>:
    return ReturnValue;
}
#endif

static const Clock_Ip_SelectorConfigType *getSelectorConfig(Clock_Ip_NameType Name)
{
    5338:	b086      	sub	sp, #24
    533a:	9001      	str	r0, [sp, #4]
    const Clock_Ip_SelectorConfigType *ReturnValue = NULL_PTR;
    533c:	2300      	movs	r3, #0
    533e:	9305      	str	r3, [sp, #20]
    uint32 SelectorConfigIndex;
    uint32 Index;

    switch(Name)
    5340:	9b01      	ldr	r3, [sp, #4]
    5342:	2b1b      	cmp	r3, #27
    5344:	d00f      	beq.n	5366 <getSelectorConfig+0x2e>
    5346:	9b01      	ldr	r3, [sp, #4]
    5348:	2b1b      	cmp	r3, #27
    534a:	d80f      	bhi.n	536c <getSelectorConfig+0x34>
    534c:	9b01      	ldr	r3, [sp, #4]
    534e:	2b19      	cmp	r3, #25
    5350:	d003      	beq.n	535a <getSelectorConfig+0x22>
    5352:	9b01      	ldr	r3, [sp, #4]
    5354:	2b1a      	cmp	r3, #26
    5356:	d003      	beq.n	5360 <getSelectorConfig+0x28>
    5358:	e008      	b.n	536c <getSelectorConfig+0x34>
    {
        case SCS_RUN_CLK:
            SelectorConfigIndex = 0U;
    535a:	2300      	movs	r3, #0
    535c:	9304      	str	r3, [sp, #16]
            break;
    535e:	e008      	b.n	5372 <getSelectorConfig+0x3a>
        case SCS_VLPR_CLK:
            SelectorConfigIndex = 1U;
    5360:	2301      	movs	r3, #1
    5362:	9304      	str	r3, [sp, #16]
            break;
    5364:	e005      	b.n	5372 <getSelectorConfig+0x3a>
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        case SCS_HSRUN_CLK:
            SelectorConfigIndex = 2U;
    5366:	2302      	movs	r3, #2
    5368:	9304      	str	r3, [sp, #16]
            break;
    536a:	e002      	b.n	5372 <getSelectorConfig+0x3a>
#endif
        default:
            SelectorConfigIndex = 0U;
    536c:	2300      	movs	r3, #0
    536e:	9304      	str	r3, [sp, #16]
            break;
    5370:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5372:	4b36      	ldr	r3, [pc, #216]	; (544c <getSelectorConfig+0x114>)
    5374:	681b      	ldr	r3, [r3, #0]
    5376:	2b00      	cmp	r3, #0
    5378:	d01d      	beq.n	53b6 <getSelectorConfig+0x7e>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    537a:	2300      	movs	r3, #0
    537c:	9303      	str	r3, [sp, #12]
    537e:	e013      	b.n	53a8 <getSelectorConfig+0x70>
        {
            if (Clock_Ip_apConfig->Selectors[Index].Name == Name)
    5380:	4b32      	ldr	r3, [pc, #200]	; (544c <getSelectorConfig+0x114>)
    5382:	681b      	ldr	r3, [r3, #0]
    5384:	9a03      	ldr	r2, [sp, #12]
    5386:	320d      	adds	r2, #13
    5388:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    538c:	9a01      	ldr	r2, [sp, #4]
    538e:	429a      	cmp	r2, r3
    5390:	d107      	bne.n	53a2 <getSelectorConfig+0x6a>
            {
                ReturnValue = &Clock_Ip_apConfig->Selectors[Index];
    5392:	4b2e      	ldr	r3, [pc, #184]	; (544c <getSelectorConfig+0x114>)
    5394:	681a      	ldr	r2, [r3, #0]
    5396:	9b03      	ldr	r3, [sp, #12]
    5398:	330d      	adds	r3, #13
    539a:	00db      	lsls	r3, r3, #3
    539c:	4413      	add	r3, r2
    539e:	9305      	str	r3, [sp, #20]
                break;
    53a0:	e009      	b.n	53b6 <getSelectorConfig+0x7e>
        for (Index = 0U; Index < Clock_Ip_apConfig->SelectorsCount; Index++)
    53a2:	9b03      	ldr	r3, [sp, #12]
    53a4:	3301      	adds	r3, #1
    53a6:	9303      	str	r3, [sp, #12]
    53a8:	4b28      	ldr	r3, [pc, #160]	; (544c <getSelectorConfig+0x114>)
    53aa:	681b      	ldr	r3, [r3, #0]
    53ac:	7adb      	ldrb	r3, [r3, #11]
    53ae:	461a      	mov	r2, r3
    53b0:	9b03      	ldr	r3, [sp, #12]
    53b2:	4293      	cmp	r3, r2
    53b4:	d3e4      	bcc.n	5380 <getSelectorConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    53b6:	9b05      	ldr	r3, [sp, #20]
    53b8:	2b00      	cmp	r3, #0
    53ba:	d140      	bne.n	543e <getSelectorConfig+0x106>
    {
        ReturnValue = &SelectorConfigurations[SelectorConfigIndex];
    53bc:	9b04      	ldr	r3, [sp, #16]
    53be:	00db      	lsls	r3, r3, #3
    53c0:	4a23      	ldr	r2, [pc, #140]	; (5450 <getSelectorConfig+0x118>)
    53c2:	4413      	add	r3, r2
    53c4:	9305      	str	r3, [sp, #20]
        SelectorConfigurations[SelectorConfigIndex].Name = Name;
    53c6:	4922      	ldr	r1, [pc, #136]	; (5450 <getSelectorConfig+0x118>)
    53c8:	9b04      	ldr	r3, [sp, #16]
    53ca:	9a01      	ldr	r2, [sp, #4]
    53cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        switch(Name)
    53d0:	9b01      	ldr	r3, [sp, #4]
    53d2:	2b1b      	cmp	r3, #27
    53d4:	d025      	beq.n	5422 <getSelectorConfig+0xea>
    53d6:	9b01      	ldr	r3, [sp, #4]
    53d8:	2b1b      	cmp	r3, #27
    53da:	d832      	bhi.n	5442 <getSelectorConfig+0x10a>
    53dc:	9b01      	ldr	r3, [sp, #4]
    53de:	2b19      	cmp	r3, #25
    53e0:	d003      	beq.n	53ea <getSelectorConfig+0xb2>
    53e2:	9b01      	ldr	r3, [sp, #4]
    53e4:	2b1a      	cmp	r3, #26
    53e6:	d00e      	beq.n	5406 <getSelectorConfig+0xce>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    53e8:	e02b      	b.n	5442 <getSelectorConfig+0x10a>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->RCCR & SCG_RCCR_SCS_MASK) >> SCG_RCCR_SCS_SHIFT];
    53ea:	4b1a      	ldr	r3, [pc, #104]	; (5454 <getSelectorConfig+0x11c>)
    53ec:	695b      	ldr	r3, [r3, #20]
    53ee:	0e1b      	lsrs	r3, r3, #24
    53f0:	f003 030f 	and.w	r3, r3, #15
    53f4:	4a18      	ldr	r2, [pc, #96]	; (5458 <getSelectorConfig+0x120>)
    53f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    53fa:	4915      	ldr	r1, [pc, #84]	; (5450 <getSelectorConfig+0x118>)
    53fc:	9b04      	ldr	r3, [sp, #16]
    53fe:	00db      	lsls	r3, r3, #3
    5400:	440b      	add	r3, r1
    5402:	605a      	str	r2, [r3, #4]
                break;
    5404:	e01e      	b.n	5444 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->VCCR & SCG_VCCR_SCS_MASK) >> SCG_VCCR_SCS_SHIFT];
    5406:	4b13      	ldr	r3, [pc, #76]	; (5454 <getSelectorConfig+0x11c>)
    5408:	699b      	ldr	r3, [r3, #24]
    540a:	0e1b      	lsrs	r3, r3, #24
    540c:	f003 030f 	and.w	r3, r3, #15
    5410:	4a11      	ldr	r2, [pc, #68]	; (5458 <getSelectorConfig+0x120>)
    5412:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5416:	490e      	ldr	r1, [pc, #56]	; (5450 <getSelectorConfig+0x118>)
    5418:	9b04      	ldr	r3, [sp, #16]
    541a:	00db      	lsls	r3, r3, #3
    541c:	440b      	add	r3, r1
    541e:	605a      	str	r2, [r3, #4]
                break;
    5420:	e010      	b.n	5444 <getSelectorConfig+0x10c>
                SelectorConfigurations[SelectorConfigIndex].Value = ClockSource[(IP_SCG->HCCR & SCG_HCCR_SCS_MASK) >> SCG_HCCR_SCS_SHIFT];
    5422:	4b0c      	ldr	r3, [pc, #48]	; (5454 <getSelectorConfig+0x11c>)
    5424:	69db      	ldr	r3, [r3, #28]
    5426:	0e1b      	lsrs	r3, r3, #24
    5428:	f003 030f 	and.w	r3, r3, #15
    542c:	4a0a      	ldr	r2, [pc, #40]	; (5458 <getSelectorConfig+0x120>)
    542e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5432:	4907      	ldr	r1, [pc, #28]	; (5450 <getSelectorConfig+0x118>)
    5434:	9b04      	ldr	r3, [sp, #16]
    5436:	00db      	lsls	r3, r3, #3
    5438:	440b      	add	r3, r1
    543a:	605a      	str	r2, [r3, #4]
                break;
    543c:	e002      	b.n	5444 <getSelectorConfig+0x10c>
        }
    }
    543e:	bf00      	nop
    5440:	e000      	b.n	5444 <getSelectorConfig+0x10c>
                break;
    5442:	bf00      	nop

    return ReturnValue;
    5444:	9b05      	ldr	r3, [sp, #20]
}
    5446:	4618      	mov	r0, r3
    5448:	b006      	add	sp, #24
    544a:	4770      	bx	lr
    544c:	1fff8bb4 	.word	0x1fff8bb4
    5450:	1fff8c68 	.word	0x1fff8c68
    5454:	40064000 	.word	0x40064000
    5458:	00010144 	.word	0x00010144

0000545c <getCoreDividerConfig>:

static const Clock_Ip_DividerConfigType *getCoreDividerConfig(Clock_Ip_NameType Name)
{
    545c:	b086      	sub	sp, #24
    545e:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    5460:	2300      	movs	r3, #0
    5462:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    5464:	2300      	movs	r3, #0
    5466:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5468:	9b01      	ldr	r3, [sp, #4]
    546a:	2b1f      	cmp	r3, #31
    546c:	d00f      	beq.n	548e <getCoreDividerConfig+0x32>
    546e:	9b01      	ldr	r3, [sp, #4]
    5470:	2b1f      	cmp	r3, #31
    5472:	d80f      	bhi.n	5494 <getCoreDividerConfig+0x38>
    5474:	9b01      	ldr	r3, [sp, #4]
    5476:	2b1d      	cmp	r3, #29
    5478:	d003      	beq.n	5482 <getCoreDividerConfig+0x26>
    547a:	9b01      	ldr	r3, [sp, #4]
    547c:	2b1e      	cmp	r3, #30
    547e:	d003      	beq.n	5488 <getCoreDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5480:	e008      	b.n	5494 <getCoreDividerConfig+0x38>
            DividerConfigIndex = 0U;
    5482:	2300      	movs	r3, #0
    5484:	9304      	str	r3, [sp, #16]
            break;
    5486:	e006      	b.n	5496 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5488:	2301      	movs	r3, #1
    548a:	9304      	str	r3, [sp, #16]
            break;
    548c:	e003      	b.n	5496 <getCoreDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    548e:	2302      	movs	r3, #2
    5490:	9304      	str	r3, [sp, #16]
            break;
    5492:	e000      	b.n	5496 <getCoreDividerConfig+0x3a>
                break;
    5494:	bf00      	nop
    }


    if (Clock_Ip_apConfig != NULL_PTR)
    5496:	4b41      	ldr	r3, [pc, #260]	; (559c <getCoreDividerConfig+0x140>)
    5498:	681b      	ldr	r3, [r3, #0]
    549a:	2b00      	cmp	r3, #0
    549c:	d026      	beq.n	54ec <getCoreDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    549e:	2300      	movs	r3, #0
    54a0:	9303      	str	r3, [sp, #12]
    54a2:	e01c      	b.n	54de <getCoreDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    54a4:	4b3d      	ldr	r3, [pc, #244]	; (559c <getCoreDividerConfig+0x140>)
    54a6:	6819      	ldr	r1, [r3, #0]
    54a8:	9a03      	ldr	r2, [sp, #12]
    54aa:	4613      	mov	r3, r2
    54ac:	005b      	lsls	r3, r3, #1
    54ae:	4413      	add	r3, r2
    54b0:	009b      	lsls	r3, r3, #2
    54b2:	440b      	add	r3, r1
    54b4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    54b8:	681b      	ldr	r3, [r3, #0]
    54ba:	9a01      	ldr	r2, [sp, #4]
    54bc:	429a      	cmp	r2, r3
    54be:	d10b      	bne.n	54d8 <getCoreDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    54c0:	4b36      	ldr	r3, [pc, #216]	; (559c <getCoreDividerConfig+0x140>)
    54c2:	6819      	ldr	r1, [r3, #0]
    54c4:	9a03      	ldr	r2, [sp, #12]
    54c6:	4613      	mov	r3, r2
    54c8:	005b      	lsls	r3, r3, #1
    54ca:	4413      	add	r3, r2
    54cc:	009b      	lsls	r3, r3, #2
    54ce:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    54d2:	440b      	add	r3, r1
    54d4:	9305      	str	r3, [sp, #20]
                break;
    54d6:	e009      	b.n	54ec <getCoreDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    54d8:	9b03      	ldr	r3, [sp, #12]
    54da:	3301      	adds	r3, #1
    54dc:	9303      	str	r3, [sp, #12]
    54de:	4b2f      	ldr	r3, [pc, #188]	; (559c <getCoreDividerConfig+0x140>)
    54e0:	681b      	ldr	r3, [r3, #0]
    54e2:	7b1b      	ldrb	r3, [r3, #12]
    54e4:	461a      	mov	r2, r3
    54e6:	9b03      	ldr	r3, [sp, #12]
    54e8:	4293      	cmp	r3, r2
    54ea:	d3db      	bcc.n	54a4 <getCoreDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    54ec:	9b05      	ldr	r3, [sp, #20]
    54ee:	2b00      	cmp	r3, #0
    54f0:	d14d      	bne.n	558e <getCoreDividerConfig+0x132>
    {
        ReturnValue = &CoreDividerConfigurations[DividerConfigIndex];
    54f2:	9a04      	ldr	r2, [sp, #16]
    54f4:	4613      	mov	r3, r2
    54f6:	005b      	lsls	r3, r3, #1
    54f8:	4413      	add	r3, r2
    54fa:	009b      	lsls	r3, r3, #2
    54fc:	4a28      	ldr	r2, [pc, #160]	; (55a0 <getCoreDividerConfig+0x144>)
    54fe:	4413      	add	r3, r2
    5500:	9305      	str	r3, [sp, #20]
        CoreDividerConfigurations[DividerConfigIndex].Name = Name;
    5502:	4927      	ldr	r1, [pc, #156]	; (55a0 <getCoreDividerConfig+0x144>)
    5504:	9a04      	ldr	r2, [sp, #16]
    5506:	4613      	mov	r3, r2
    5508:	005b      	lsls	r3, r3, #1
    550a:	4413      	add	r3, r2
    550c:	009b      	lsls	r3, r3, #2
    550e:	440b      	add	r3, r1
    5510:	9a01      	ldr	r2, [sp, #4]
    5512:	601a      	str	r2, [r3, #0]
        switch(Name)
    5514:	9b01      	ldr	r3, [sp, #4]
    5516:	2b1f      	cmp	r3, #31
    5518:	d029      	beq.n	556e <getCoreDividerConfig+0x112>
    551a:	9b01      	ldr	r3, [sp, #4]
    551c:	2b1f      	cmp	r3, #31
    551e:	d838      	bhi.n	5592 <getCoreDividerConfig+0x136>
    5520:	9b01      	ldr	r3, [sp, #4]
    5522:	2b1d      	cmp	r3, #29
    5524:	d003      	beq.n	552e <getCoreDividerConfig+0xd2>
    5526:	9b01      	ldr	r3, [sp, #4]
    5528:	2b1e      	cmp	r3, #30
    552a:	d010      	beq.n	554e <getCoreDividerConfig+0xf2>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    552c:	e031      	b.n	5592 <getCoreDividerConfig+0x136>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVCORE_MASK) >> SCG_RCCR_DIVCORE_SHIFT) + 1U;
    552e:	4b1d      	ldr	r3, [pc, #116]	; (55a4 <getCoreDividerConfig+0x148>)
    5530:	695b      	ldr	r3, [r3, #20]
    5532:	0c1b      	lsrs	r3, r3, #16
    5534:	f003 030f 	and.w	r3, r3, #15
    5538:	1c59      	adds	r1, r3, #1
    553a:	4819      	ldr	r0, [pc, #100]	; (55a0 <getCoreDividerConfig+0x144>)
    553c:	9a04      	ldr	r2, [sp, #16]
    553e:	4613      	mov	r3, r2
    5540:	005b      	lsls	r3, r3, #1
    5542:	4413      	add	r3, r2
    5544:	009b      	lsls	r3, r3, #2
    5546:	4403      	add	r3, r0
    5548:	3304      	adds	r3, #4
    554a:	6019      	str	r1, [r3, #0]
                break;
    554c:	e022      	b.n	5594 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVCORE_MASK) >> SCG_VCCR_DIVCORE_SHIFT) + 1U;
    554e:	4b15      	ldr	r3, [pc, #84]	; (55a4 <getCoreDividerConfig+0x148>)
    5550:	699b      	ldr	r3, [r3, #24]
    5552:	0c1b      	lsrs	r3, r3, #16
    5554:	f003 030f 	and.w	r3, r3, #15
    5558:	1c59      	adds	r1, r3, #1
    555a:	4811      	ldr	r0, [pc, #68]	; (55a0 <getCoreDividerConfig+0x144>)
    555c:	9a04      	ldr	r2, [sp, #16]
    555e:	4613      	mov	r3, r2
    5560:	005b      	lsls	r3, r3, #1
    5562:	4413      	add	r3, r2
    5564:	009b      	lsls	r3, r3, #2
    5566:	4403      	add	r3, r0
    5568:	3304      	adds	r3, #4
    556a:	6019      	str	r1, [r3, #0]
                break;
    556c:	e012      	b.n	5594 <getCoreDividerConfig+0x138>
                CoreDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVCORE_MASK) >> SCG_HCCR_DIVCORE_SHIFT) + 1U;
    556e:	4b0d      	ldr	r3, [pc, #52]	; (55a4 <getCoreDividerConfig+0x148>)
    5570:	69db      	ldr	r3, [r3, #28]
    5572:	0c1b      	lsrs	r3, r3, #16
    5574:	f003 030f 	and.w	r3, r3, #15
    5578:	1c59      	adds	r1, r3, #1
    557a:	4809      	ldr	r0, [pc, #36]	; (55a0 <getCoreDividerConfig+0x144>)
    557c:	9a04      	ldr	r2, [sp, #16]
    557e:	4613      	mov	r3, r2
    5580:	005b      	lsls	r3, r3, #1
    5582:	4413      	add	r3, r2
    5584:	009b      	lsls	r3, r3, #2
    5586:	4403      	add	r3, r0
    5588:	3304      	adds	r3, #4
    558a:	6019      	str	r1, [r3, #0]
                break;
    558c:	e002      	b.n	5594 <getCoreDividerConfig+0x138>
        }
    }
    558e:	bf00      	nop
    5590:	e000      	b.n	5594 <getCoreDividerConfig+0x138>
                break;
    5592:	bf00      	nop

    return ReturnValue;
    5594:	9b05      	ldr	r3, [sp, #20]
}
    5596:	4618      	mov	r0, r3
    5598:	b006      	add	sp, #24
    559a:	4770      	bx	lr
    559c:	1fff8bb4 	.word	0x1fff8bb4
    55a0:	1fff8c80 	.word	0x1fff8c80
    55a4:	40064000 	.word	0x40064000

000055a8 <getBusDividerConfig>:


static const Clock_Ip_DividerConfigType *getBusDividerConfig(Clock_Ip_NameType Name)
{
    55a8:	b086      	sub	sp, #24
    55aa:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    55ac:	2300      	movs	r3, #0
    55ae:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    55b0:	2300      	movs	r3, #0
    55b2:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    55b4:	9b01      	ldr	r3, [sp, #4]
    55b6:	2b23      	cmp	r3, #35	; 0x23
    55b8:	d00f      	beq.n	55da <getBusDividerConfig+0x32>
    55ba:	9b01      	ldr	r3, [sp, #4]
    55bc:	2b23      	cmp	r3, #35	; 0x23
    55be:	d80f      	bhi.n	55e0 <getBusDividerConfig+0x38>
    55c0:	9b01      	ldr	r3, [sp, #4]
    55c2:	2b21      	cmp	r3, #33	; 0x21
    55c4:	d003      	beq.n	55ce <getBusDividerConfig+0x26>
    55c6:	9b01      	ldr	r3, [sp, #4]
    55c8:	2b22      	cmp	r3, #34	; 0x22
    55ca:	d003      	beq.n	55d4 <getBusDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    55cc:	e008      	b.n	55e0 <getBusDividerConfig+0x38>
            DividerConfigIndex = 0U;
    55ce:	2300      	movs	r3, #0
    55d0:	9304      	str	r3, [sp, #16]
            break;
    55d2:	e006      	b.n	55e2 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    55d4:	2301      	movs	r3, #1
    55d6:	9304      	str	r3, [sp, #16]
            break;
    55d8:	e003      	b.n	55e2 <getBusDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    55da:	2302      	movs	r3, #2
    55dc:	9304      	str	r3, [sp, #16]
            break;
    55de:	e000      	b.n	55e2 <getBusDividerConfig+0x3a>
                break;
    55e0:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    55e2:	4b41      	ldr	r3, [pc, #260]	; (56e8 <getBusDividerConfig+0x140>)
    55e4:	681b      	ldr	r3, [r3, #0]
    55e6:	2b00      	cmp	r3, #0
    55e8:	d026      	beq.n	5638 <getBusDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    55ea:	2300      	movs	r3, #0
    55ec:	9303      	str	r3, [sp, #12]
    55ee:	e01c      	b.n	562a <getBusDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    55f0:	4b3d      	ldr	r3, [pc, #244]	; (56e8 <getBusDividerConfig+0x140>)
    55f2:	6819      	ldr	r1, [r3, #0]
    55f4:	9a03      	ldr	r2, [sp, #12]
    55f6:	4613      	mov	r3, r2
    55f8:	005b      	lsls	r3, r3, #1
    55fa:	4413      	add	r3, r2
    55fc:	009b      	lsls	r3, r3, #2
    55fe:	440b      	add	r3, r1
    5600:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5604:	681b      	ldr	r3, [r3, #0]
    5606:	9a01      	ldr	r2, [sp, #4]
    5608:	429a      	cmp	r2, r3
    560a:	d10b      	bne.n	5624 <getBusDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    560c:	4b36      	ldr	r3, [pc, #216]	; (56e8 <getBusDividerConfig+0x140>)
    560e:	6819      	ldr	r1, [r3, #0]
    5610:	9a03      	ldr	r2, [sp, #12]
    5612:	4613      	mov	r3, r2
    5614:	005b      	lsls	r3, r3, #1
    5616:	4413      	add	r3, r2
    5618:	009b      	lsls	r3, r3, #2
    561a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    561e:	440b      	add	r3, r1
    5620:	9305      	str	r3, [sp, #20]
                break;
    5622:	e009      	b.n	5638 <getBusDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5624:	9b03      	ldr	r3, [sp, #12]
    5626:	3301      	adds	r3, #1
    5628:	9303      	str	r3, [sp, #12]
    562a:	4b2f      	ldr	r3, [pc, #188]	; (56e8 <getBusDividerConfig+0x140>)
    562c:	681b      	ldr	r3, [r3, #0]
    562e:	7b1b      	ldrb	r3, [r3, #12]
    5630:	461a      	mov	r2, r3
    5632:	9b03      	ldr	r3, [sp, #12]
    5634:	4293      	cmp	r3, r2
    5636:	d3db      	bcc.n	55f0 <getBusDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5638:	9b05      	ldr	r3, [sp, #20]
    563a:	2b00      	cmp	r3, #0
    563c:	d14d      	bne.n	56da <getBusDividerConfig+0x132>
    {
        ReturnValue = &BusDividerConfigurations[DividerConfigIndex];
    563e:	9a04      	ldr	r2, [sp, #16]
    5640:	4613      	mov	r3, r2
    5642:	005b      	lsls	r3, r3, #1
    5644:	4413      	add	r3, r2
    5646:	009b      	lsls	r3, r3, #2
    5648:	4a28      	ldr	r2, [pc, #160]	; (56ec <getBusDividerConfig+0x144>)
    564a:	4413      	add	r3, r2
    564c:	9305      	str	r3, [sp, #20]
        BusDividerConfigurations[DividerConfigIndex].Name = Name;
    564e:	4927      	ldr	r1, [pc, #156]	; (56ec <getBusDividerConfig+0x144>)
    5650:	9a04      	ldr	r2, [sp, #16]
    5652:	4613      	mov	r3, r2
    5654:	005b      	lsls	r3, r3, #1
    5656:	4413      	add	r3, r2
    5658:	009b      	lsls	r3, r3, #2
    565a:	440b      	add	r3, r1
    565c:	9a01      	ldr	r2, [sp, #4]
    565e:	601a      	str	r2, [r3, #0]
        switch(Name)
    5660:	9b01      	ldr	r3, [sp, #4]
    5662:	2b23      	cmp	r3, #35	; 0x23
    5664:	d029      	beq.n	56ba <getBusDividerConfig+0x112>
    5666:	9b01      	ldr	r3, [sp, #4]
    5668:	2b23      	cmp	r3, #35	; 0x23
    566a:	d838      	bhi.n	56de <getBusDividerConfig+0x136>
    566c:	9b01      	ldr	r3, [sp, #4]
    566e:	2b21      	cmp	r3, #33	; 0x21
    5670:	d003      	beq.n	567a <getBusDividerConfig+0xd2>
    5672:	9b01      	ldr	r3, [sp, #4]
    5674:	2b22      	cmp	r3, #34	; 0x22
    5676:	d010      	beq.n	569a <getBusDividerConfig+0xf2>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    5678:	e031      	b.n	56de <getBusDividerConfig+0x136>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVBUS_MASK) >> SCG_RCCR_DIVBUS_SHIFT) + 1U;
    567a:	4b1d      	ldr	r3, [pc, #116]	; (56f0 <getBusDividerConfig+0x148>)
    567c:	695b      	ldr	r3, [r3, #20]
    567e:	091b      	lsrs	r3, r3, #4
    5680:	f003 030f 	and.w	r3, r3, #15
    5684:	1c59      	adds	r1, r3, #1
    5686:	4819      	ldr	r0, [pc, #100]	; (56ec <getBusDividerConfig+0x144>)
    5688:	9a04      	ldr	r2, [sp, #16]
    568a:	4613      	mov	r3, r2
    568c:	005b      	lsls	r3, r3, #1
    568e:	4413      	add	r3, r2
    5690:	009b      	lsls	r3, r3, #2
    5692:	4403      	add	r3, r0
    5694:	3304      	adds	r3, #4
    5696:	6019      	str	r1, [r3, #0]
                break;
    5698:	e022      	b.n	56e0 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVBUS_MASK) >> SCG_VCCR_DIVBUS_SHIFT) + 1U;
    569a:	4b15      	ldr	r3, [pc, #84]	; (56f0 <getBusDividerConfig+0x148>)
    569c:	699b      	ldr	r3, [r3, #24]
    569e:	091b      	lsrs	r3, r3, #4
    56a0:	f003 030f 	and.w	r3, r3, #15
    56a4:	1c59      	adds	r1, r3, #1
    56a6:	4811      	ldr	r0, [pc, #68]	; (56ec <getBusDividerConfig+0x144>)
    56a8:	9a04      	ldr	r2, [sp, #16]
    56aa:	4613      	mov	r3, r2
    56ac:	005b      	lsls	r3, r3, #1
    56ae:	4413      	add	r3, r2
    56b0:	009b      	lsls	r3, r3, #2
    56b2:	4403      	add	r3, r0
    56b4:	3304      	adds	r3, #4
    56b6:	6019      	str	r1, [r3, #0]
                break;
    56b8:	e012      	b.n	56e0 <getBusDividerConfig+0x138>
                BusDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVBUS_MASK) >> SCG_HCCR_DIVBUS_SHIFT) + 1U;
    56ba:	4b0d      	ldr	r3, [pc, #52]	; (56f0 <getBusDividerConfig+0x148>)
    56bc:	69db      	ldr	r3, [r3, #28]
    56be:	091b      	lsrs	r3, r3, #4
    56c0:	f003 030f 	and.w	r3, r3, #15
    56c4:	1c59      	adds	r1, r3, #1
    56c6:	4809      	ldr	r0, [pc, #36]	; (56ec <getBusDividerConfig+0x144>)
    56c8:	9a04      	ldr	r2, [sp, #16]
    56ca:	4613      	mov	r3, r2
    56cc:	005b      	lsls	r3, r3, #1
    56ce:	4413      	add	r3, r2
    56d0:	009b      	lsls	r3, r3, #2
    56d2:	4403      	add	r3, r0
    56d4:	3304      	adds	r3, #4
    56d6:	6019      	str	r1, [r3, #0]
                break;
    56d8:	e002      	b.n	56e0 <getBusDividerConfig+0x138>
        }
    }
    56da:	bf00      	nop
    56dc:	e000      	b.n	56e0 <getBusDividerConfig+0x138>
                break;
    56de:	bf00      	nop

    return ReturnValue;
    56e0:	9b05      	ldr	r3, [sp, #20]
}
    56e2:	4618      	mov	r0, r3
    56e4:	b006      	add	sp, #24
    56e6:	4770      	bx	lr
    56e8:	1fff8bb4 	.word	0x1fff8bb4
    56ec:	1fff8ca4 	.word	0x1fff8ca4
    56f0:	40064000 	.word	0x40064000

000056f4 <getSlowDividerConfig>:

static const Clock_Ip_DividerConfigType *getSlowDividerConfig(Clock_Ip_NameType Name)
{
    56f4:	b086      	sub	sp, #24
    56f6:	9001      	str	r0, [sp, #4]
    const Clock_Ip_DividerConfigType *ReturnValue = NULL_PTR;
    56f8:	2300      	movs	r3, #0
    56fa:	9305      	str	r3, [sp, #20]
    uint32 DividerConfigIndex = 0U;
    56fc:	2300      	movs	r3, #0
    56fe:	9304      	str	r3, [sp, #16]
    uint32 Index;

    switch(Name)
    5700:	9b01      	ldr	r3, [sp, #4]
    5702:	2b27      	cmp	r3, #39	; 0x27
    5704:	d00f      	beq.n	5726 <getSlowDividerConfig+0x32>
    5706:	9b01      	ldr	r3, [sp, #4]
    5708:	2b27      	cmp	r3, #39	; 0x27
    570a:	d80f      	bhi.n	572c <getSlowDividerConfig+0x38>
    570c:	9b01      	ldr	r3, [sp, #4]
    570e:	2b25      	cmp	r3, #37	; 0x25
    5710:	d003      	beq.n	571a <getSlowDividerConfig+0x26>
    5712:	9b01      	ldr	r3, [sp, #4]
    5714:	2b26      	cmp	r3, #38	; 0x26
    5716:	d003      	beq.n	5720 <getSlowDividerConfig+0x2c>
            DividerConfigIndex = 2U;
            break;
#endif
            default:
                /* Invalid clock name */
                break;
    5718:	e008      	b.n	572c <getSlowDividerConfig+0x38>
            DividerConfigIndex = 0U;
    571a:	2300      	movs	r3, #0
    571c:	9304      	str	r3, [sp, #16]
            break;
    571e:	e006      	b.n	572e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 1U;
    5720:	2301      	movs	r3, #1
    5722:	9304      	str	r3, [sp, #16]
            break;
    5724:	e003      	b.n	572e <getSlowDividerConfig+0x3a>
            DividerConfigIndex = 2U;
    5726:	2302      	movs	r3, #2
    5728:	9304      	str	r3, [sp, #16]
            break;
    572a:	e000      	b.n	572e <getSlowDividerConfig+0x3a>
                break;
    572c:	bf00      	nop

    }


    if (Clock_Ip_apConfig != NULL_PTR)
    572e:	4b40      	ldr	r3, [pc, #256]	; (5830 <getSlowDividerConfig+0x13c>)
    5730:	681b      	ldr	r3, [r3, #0]
    5732:	2b00      	cmp	r3, #0
    5734:	d026      	beq.n	5784 <getSlowDividerConfig+0x90>
    {
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5736:	2300      	movs	r3, #0
    5738:	9303      	str	r3, [sp, #12]
    573a:	e01c      	b.n	5776 <getSlowDividerConfig+0x82>
        {
            if (Clock_Ip_apConfig->Dividers[Index].Name == Name)
    573c:	4b3c      	ldr	r3, [pc, #240]	; (5830 <getSlowDividerConfig+0x13c>)
    573e:	6819      	ldr	r1, [r3, #0]
    5740:	9a03      	ldr	r2, [sp, #12]
    5742:	4613      	mov	r3, r2
    5744:	005b      	lsls	r3, r3, #1
    5746:	4413      	add	r3, r2
    5748:	009b      	lsls	r3, r3, #2
    574a:	440b      	add	r3, r1
    574c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    5750:	681b      	ldr	r3, [r3, #0]
    5752:	9a01      	ldr	r2, [sp, #4]
    5754:	429a      	cmp	r2, r3
    5756:	d10b      	bne.n	5770 <getSlowDividerConfig+0x7c>
            {
                ReturnValue = &Clock_Ip_apConfig->Dividers[Index];
    5758:	4b35      	ldr	r3, [pc, #212]	; (5830 <getSlowDividerConfig+0x13c>)
    575a:	6819      	ldr	r1, [r3, #0]
    575c:	9a03      	ldr	r2, [sp, #12]
    575e:	4613      	mov	r3, r2
    5760:	005b      	lsls	r3, r3, #1
    5762:	4413      	add	r3, r2
    5764:	009b      	lsls	r3, r3, #2
    5766:	f503 73a4 	add.w	r3, r3, #328	; 0x148
    576a:	440b      	add	r3, r1
    576c:	9305      	str	r3, [sp, #20]
                break;
    576e:	e009      	b.n	5784 <getSlowDividerConfig+0x90>
        for (Index = 0U; Index < Clock_Ip_apConfig->DividersCount; Index++)
    5770:	9b03      	ldr	r3, [sp, #12]
    5772:	3301      	adds	r3, #1
    5774:	9303      	str	r3, [sp, #12]
    5776:	4b2e      	ldr	r3, [pc, #184]	; (5830 <getSlowDividerConfig+0x13c>)
    5778:	681b      	ldr	r3, [r3, #0]
    577a:	7b1b      	ldrb	r3, [r3, #12]
    577c:	461a      	mov	r2, r3
    577e:	9b03      	ldr	r3, [sp, #12]
    5780:	4293      	cmp	r3, r2
    5782:	d3db      	bcc.n	573c <getSlowDividerConfig+0x48>
            }
        }
    }

    /* Element is not under mcu control */
    if (ReturnValue == NULL_PTR)
    5784:	9b05      	ldr	r3, [sp, #20]
    5786:	2b00      	cmp	r3, #0
    5788:	d14a      	bne.n	5820 <getSlowDividerConfig+0x12c>
    {
        ReturnValue = &SlowDividerConfigurations[DividerConfigIndex];
    578a:	9a04      	ldr	r2, [sp, #16]
    578c:	4613      	mov	r3, r2
    578e:	005b      	lsls	r3, r3, #1
    5790:	4413      	add	r3, r2
    5792:	009b      	lsls	r3, r3, #2
    5794:	4a27      	ldr	r2, [pc, #156]	; (5834 <getSlowDividerConfig+0x140>)
    5796:	4413      	add	r3, r2
    5798:	9305      	str	r3, [sp, #20]
        SlowDividerConfigurations[DividerConfigIndex].Name = Name;
    579a:	4926      	ldr	r1, [pc, #152]	; (5834 <getSlowDividerConfig+0x140>)
    579c:	9a04      	ldr	r2, [sp, #16]
    579e:	4613      	mov	r3, r2
    57a0:	005b      	lsls	r3, r3, #1
    57a2:	4413      	add	r3, r2
    57a4:	009b      	lsls	r3, r3, #2
    57a6:	440b      	add	r3, r1
    57a8:	9a01      	ldr	r2, [sp, #4]
    57aa:	601a      	str	r2, [r3, #0]
        switch(Name)
    57ac:	9b01      	ldr	r3, [sp, #4]
    57ae:	2b27      	cmp	r3, #39	; 0x27
    57b0:	d027      	beq.n	5802 <getSlowDividerConfig+0x10e>
    57b2:	9b01      	ldr	r3, [sp, #4]
    57b4:	2b27      	cmp	r3, #39	; 0x27
    57b6:	d835      	bhi.n	5824 <getSlowDividerConfig+0x130>
    57b8:	9b01      	ldr	r3, [sp, #4]
    57ba:	2b25      	cmp	r3, #37	; 0x25
    57bc:	d003      	beq.n	57c6 <getSlowDividerConfig+0xd2>
    57be:	9b01      	ldr	r3, [sp, #4]
    57c0:	2b26      	cmp	r3, #38	; 0x26
    57c2:	d00f      	beq.n	57e4 <getSlowDividerConfig+0xf0>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
                break;
#endif
            default:
                /* Invalid clock name */
                break;
    57c4:	e02e      	b.n	5824 <getSlowDividerConfig+0x130>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->RCCR & SCG_RCCR_DIVSLOW_MASK) >> SCG_RCCR_DIVSLOW_SHIFT) + 1U;
    57c6:	4b1c      	ldr	r3, [pc, #112]	; (5838 <getSlowDividerConfig+0x144>)
    57c8:	695b      	ldr	r3, [r3, #20]
    57ca:	f003 030f 	and.w	r3, r3, #15
    57ce:	1c59      	adds	r1, r3, #1
    57d0:	4818      	ldr	r0, [pc, #96]	; (5834 <getSlowDividerConfig+0x140>)
    57d2:	9a04      	ldr	r2, [sp, #16]
    57d4:	4613      	mov	r3, r2
    57d6:	005b      	lsls	r3, r3, #1
    57d8:	4413      	add	r3, r2
    57da:	009b      	lsls	r3, r3, #2
    57dc:	4403      	add	r3, r0
    57de:	3304      	adds	r3, #4
    57e0:	6019      	str	r1, [r3, #0]
                break;
    57e2:	e020      	b.n	5826 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->VCCR & SCG_VCCR_DIVSLOW_MASK) >> SCG_VCCR_DIVSLOW_SHIFT) + 1U;
    57e4:	4b14      	ldr	r3, [pc, #80]	; (5838 <getSlowDividerConfig+0x144>)
    57e6:	699b      	ldr	r3, [r3, #24]
    57e8:	f003 030f 	and.w	r3, r3, #15
    57ec:	1c59      	adds	r1, r3, #1
    57ee:	4811      	ldr	r0, [pc, #68]	; (5834 <getSlowDividerConfig+0x140>)
    57f0:	9a04      	ldr	r2, [sp, #16]
    57f2:	4613      	mov	r3, r2
    57f4:	005b      	lsls	r3, r3, #1
    57f6:	4413      	add	r3, r2
    57f8:	009b      	lsls	r3, r3, #2
    57fa:	4403      	add	r3, r0
    57fc:	3304      	adds	r3, #4
    57fe:	6019      	str	r1, [r3, #0]
                break;
    5800:	e011      	b.n	5826 <getSlowDividerConfig+0x132>
                SlowDividerConfigurations[DividerConfigIndex].Value = ((IP_SCG->HCCR & SCG_HCCR_DIVSLOW_MASK) >> SCG_HCCR_DIVSLOW_SHIFT) + 1U;
    5802:	4b0d      	ldr	r3, [pc, #52]	; (5838 <getSlowDividerConfig+0x144>)
    5804:	69db      	ldr	r3, [r3, #28]
    5806:	f003 030f 	and.w	r3, r3, #15
    580a:	1c59      	adds	r1, r3, #1
    580c:	4809      	ldr	r0, [pc, #36]	; (5834 <getSlowDividerConfig+0x140>)
    580e:	9a04      	ldr	r2, [sp, #16]
    5810:	4613      	mov	r3, r2
    5812:	005b      	lsls	r3, r3, #1
    5814:	4413      	add	r3, r2
    5816:	009b      	lsls	r3, r3, #2
    5818:	4403      	add	r3, r0
    581a:	3304      	adds	r3, #4
    581c:	6019      	str	r1, [r3, #0]
                break;
    581e:	e002      	b.n	5826 <getSlowDividerConfig+0x132>
        }
    }
    5820:	bf00      	nop
    5822:	e000      	b.n	5826 <getSlowDividerConfig+0x132>
                break;
    5824:	bf00      	nop

    return ReturnValue;
    5826:	9b05      	ldr	r3, [sp, #20]
}
    5828:	4618      	mov	r0, r3
    582a:	b006      	add	sp, #24
    582c:	4770      	bx	lr
    582e:	bf00      	nop
    5830:	1fff8bb4 	.word	0x1fff8bb4
    5834:	1fff8cc8 	.word	0x1fff8cc8
    5838:	40064000 	.word	0x40064000

0000583c <Clock_Ip_ClockInitializeObjects>:

/* Initialize objects for clock */
static void Clock_Ip_ClockInitializeObjects(Clock_Ip_ClockConfigType const * Config)
{
    583c:	b500      	push	{lr}
    583e:	b083      	sub	sp, #12
    5840:	9001      	str	r0, [sp, #4]
    if (FALSE == Clock_Ip_bObjsAreInitialized)
    5842:	4b64      	ldr	r3, [pc, #400]	; (59d4 <Clock_Ip_ClockInitializeObjects+0x198>)
    5844:	781b      	ldrb	r3, [r3, #0]
    5846:	f083 0301 	eor.w	r3, r3, #1
    584a:	b2db      	uxtb	r3, r3
    584c:	2b00      	cmp	r3, #0
    584e:	d05b      	beq.n	5908 <Clock_Ip_ClockInitializeObjects+0xcc>
    {
        Clock_Ip_bObjsAreInitialized = TRUE;
    5850:	4b60      	ldr	r3, [pc, #384]	; (59d4 <Clock_Ip_ClockInitializeObjects+0x198>)
    5852:	2201      	movs	r2, #1
    5854:	701a      	strb	r2, [r3, #0]

    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllClock = &Clock_Ip_axPllCallbacks[Clock_Ip_au8PllCallbackIndex[CLOCK_IP_SYS_PLL]];
    5856:	4b60      	ldr	r3, [pc, #384]	; (59d8 <Clock_Ip_ClockInitializeObjects+0x19c>)
    5858:	785b      	ldrb	r3, [r3, #1]
    585a:	461a      	mov	r2, r3
    585c:	4613      	mov	r3, r2
    585e:	009b      	lsls	r3, r3, #2
    5860:	4413      	add	r3, r2
    5862:	009b      	lsls	r3, r3, #2
    5864:	4a5d      	ldr	r2, [pc, #372]	; (59dc <Clock_Ip_ClockInitializeObjects+0x1a0>)
    5866:	4413      	add	r3, r2
    5868:	4a5d      	ldr	r2, [pc, #372]	; (59e0 <Clock_Ip_ClockInitializeObjects+0x1a4>)
    586a:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSoscClock = &Clock_Ip_axExtOscCallbacks[Clock_Ip_au8XoscCallbackIndex[CLOCK_IP_SYS_OSC]];
    586c:	4b5d      	ldr	r3, [pc, #372]	; (59e4 <Clock_Ip_ClockInitializeObjects+0x1a8>)
    586e:	785b      	ldrb	r3, [r3, #1]
    5870:	461a      	mov	r2, r3
    5872:	4613      	mov	r3, r2
    5874:	009b      	lsls	r3, r3, #2
    5876:	4413      	add	r3, r2
    5878:	009b      	lsls	r3, r3, #2
    587a:	4a5b      	ldr	r2, [pc, #364]	; (59e8 <Clock_Ip_ClockInitializeObjects+0x1ac>)
    587c:	4413      	add	r3, r2
    587e:	4a5b      	ldr	r2, [pc, #364]	; (59ec <Clock_Ip_ClockInitializeObjects+0x1b0>)
    5880:	6013      	str	r3, [r2, #0]

        Clock_Ip_pxFircClock = &Clock_Ip_axIntOscCallbacks[Clock_Ip_au8IrcoscCallbackIndex[CLOCK_IP_FIRCOSC]];
    5882:	4b5b      	ldr	r3, [pc, #364]	; (59f0 <Clock_Ip_ClockInitializeObjects+0x1b4>)
    5884:	791b      	ldrb	r3, [r3, #4]
    5886:	461a      	mov	r2, r3
    5888:	4613      	mov	r3, r2
    588a:	005b      	lsls	r3, r3, #1
    588c:	4413      	add	r3, r2
    588e:	009b      	lsls	r3, r3, #2
    5890:	4a58      	ldr	r2, [pc, #352]	; (59f4 <Clock_Ip_ClockInitializeObjects+0x1b8>)
    5892:	4413      	add	r3, r2
    5894:	4a58      	ldr	r2, [pc, #352]	; (59f8 <Clock_Ip_ClockInitializeObjects+0x1bc>)
    5896:	6013      	str	r3, [r2, #0]

    #if defined(CLOCK_IP_HAS_FIRC_MON1_CLK) || defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMonitor = &Clock_Ip_axCmuCallbacks[Clock_Ip_au8CmuCallbackIndex[CLOCK_IP_CMU]];
    #endif

        Clock_Ip_pxScsRunClockSelector   = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_RUN]];
    5898:	4b58      	ldr	r3, [pc, #352]	; (59fc <Clock_Ip_ClockInitializeObjects+0x1c0>)
    589a:	795b      	ldrb	r3, [r3, #5]
    589c:	00db      	lsls	r3, r3, #3
    589e:	4a58      	ldr	r2, [pc, #352]	; (5a00 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    58a0:	4413      	add	r3, r2
    58a2:	4a58      	ldr	r2, [pc, #352]	; (5a04 <Clock_Ip_ClockInitializeObjects+0x1c8>)
    58a4:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsHsrunClockSelector = &Clock_Ip_axSelectorCallbacks[Clock_Ip_au8SelectorCallbackIndex[CLOCK_IP_SCS_HSRUN]];
    58a6:	4b55      	ldr	r3, [pc, #340]	; (59fc <Clock_Ip_ClockInitializeObjects+0x1c0>)
    58a8:	79db      	ldrb	r3, [r3, #7]
    58aa:	00db      	lsls	r3, r3, #3
    58ac:	4a54      	ldr	r2, [pc, #336]	; (5a00 <Clock_Ip_ClockInitializeObjects+0x1c4>)
    58ae:	4413      	add	r3, r2
    58b0:	4a55      	ldr	r2, [pc, #340]	; (5a08 <Clock_Ip_ClockInitializeObjects+0x1cc>)
    58b2:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_RUN]];
    58b4:	4b55      	ldr	r3, [pc, #340]	; (5a0c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58b6:	799b      	ldrb	r3, [r3, #6]
    58b8:	009b      	lsls	r3, r3, #2
    58ba:	4a55      	ldr	r2, [pc, #340]	; (5a10 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    58bc:	4413      	add	r3, r2
    58be:	4a55      	ldr	r2, [pc, #340]	; (5a14 <Clock_Ip_ClockInitializeObjects+0x1d8>)
    58c0:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVCORE_HSRUN]];
    58c2:	4b52      	ldr	r3, [pc, #328]	; (5a0c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58c4:	7a1b      	ldrb	r3, [r3, #8]
    58c6:	009b      	lsls	r3, r3, #2
    58c8:	4a51      	ldr	r2, [pc, #324]	; (5a10 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    58ca:	4413      	add	r3, r2
    58cc:	4a52      	ldr	r2, [pc, #328]	; (5a18 <Clock_Ip_ClockInitializeObjects+0x1dc>)
    58ce:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_RUN]];
    58d0:	4b4e      	ldr	r3, [pc, #312]	; (5a0c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58d2:	7a5b      	ldrb	r3, [r3, #9]
    58d4:	009b      	lsls	r3, r3, #2
    58d6:	4a4e      	ldr	r2, [pc, #312]	; (5a10 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    58d8:	4413      	add	r3, r2
    58da:	4a50      	ldr	r2, [pc, #320]	; (5a1c <Clock_Ip_ClockInitializeObjects+0x1e0>)
    58dc:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVBUS_HSRUN]];
    58de:	4b4b      	ldr	r3, [pc, #300]	; (5a0c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58e0:	7adb      	ldrb	r3, [r3, #11]
    58e2:	009b      	lsls	r3, r3, #2
    58e4:	4a4a      	ldr	r2, [pc, #296]	; (5a10 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    58e6:	4413      	add	r3, r2
    58e8:	4a4d      	ldr	r2, [pc, #308]	; (5a20 <Clock_Ip_ClockInitializeObjects+0x1e4>)
    58ea:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowRunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_RUN]];
    58ec:	4b47      	ldr	r3, [pc, #284]	; (5a0c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58ee:	7b1b      	ldrb	r3, [r3, #12]
    58f0:	009b      	lsls	r3, r3, #2
    58f2:	4a47      	ldr	r2, [pc, #284]	; (5a10 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    58f4:	4413      	add	r3, r2
    58f6:	4a4b      	ldr	r2, [pc, #300]	; (5a24 <Clock_Ip_ClockInitializeObjects+0x1e8>)
    58f8:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowHsrunClockDivider = &Clock_Ip_axDividerCallbacks[Clock_Ip_au8DividerCallbackIndex[CLOCK_IP_DIVSLOW_HSRUN]];
    58fa:	4b44      	ldr	r3, [pc, #272]	; (5a0c <Clock_Ip_ClockInitializeObjects+0x1d0>)
    58fc:	7b9b      	ldrb	r3, [r3, #14]
    58fe:	009b      	lsls	r3, r3, #2
    5900:	4a43      	ldr	r2, [pc, #268]	; (5a10 <Clock_Ip_ClockInitializeObjects+0x1d4>)
    5902:	4413      	add	r3, r2
    5904:	4a48      	ldr	r2, [pc, #288]	; (5a28 <Clock_Ip_ClockInitializeObjects+0x1ec>)
    5906:	6013      	str	r3, [r2, #0]
    #endif
    }

    if( ((TRUE == Clock_Ip_bAcceptedCopyClockConfiguration) && (Config == NULL_PTR)) || (Clock_Ip_bSentFromUpdateDriverContext ==TRUE) )
    5908:	4b48      	ldr	r3, [pc, #288]	; (5a2c <Clock_Ip_ClockInitializeObjects+0x1f0>)
    590a:	781b      	ldrb	r3, [r3, #0]
    590c:	2b00      	cmp	r3, #0
    590e:	d002      	beq.n	5916 <Clock_Ip_ClockInitializeObjects+0xda>
    5910:	9b01      	ldr	r3, [sp, #4]
    5912:	2b00      	cmp	r3, #0
    5914:	d003      	beq.n	591e <Clock_Ip_ClockInitializeObjects+0xe2>
    5916:	4b46      	ldr	r3, [pc, #280]	; (5a30 <Clock_Ip_ClockInitializeObjects+0x1f4>)
    5918:	781b      	ldrb	r3, [r3, #0]
    591a:	2b00      	cmp	r3, #0
    591c:	d056      	beq.n	59cc <Clock_Ip_ClockInitializeObjects+0x190>
    {
        Clock_Ip_pxFircConfig = getFircConfig();
    591e:	f7ff fc09 	bl	5134 <getFircConfig>
    5922:	4603      	mov	r3, r0
    5924:	4a43      	ldr	r2, [pc, #268]	; (5a34 <Clock_Ip_ClockInitializeObjects+0x1f8>)
    5926:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSoscConfig = getSoscConfig();
    5928:	f7ff fc60 	bl	51ec <getSoscConfig>
    592c:	4603      	mov	r3, r0
    592e:	4a42      	ldr	r2, [pc, #264]	; (5a38 <Clock_Ip_ClockInitializeObjects+0x1fc>)
    5930:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SPLL_CLK)
        Clock_Ip_pxSpllConfig = getSpllConfig();
    5932:	f7ff fca7 	bl	5284 <getSpllConfig>
    5936:	4603      	mov	r3, r0
    5938:	4a40      	ldr	r2, [pc, #256]	; (5a3c <Clock_Ip_ClockInitializeObjects+0x200>)
    593a:	6013      	str	r3, [r2, #0]
    #endif
    #if defined(CLOCK_IP_HAS_FIRC_MON2_CLK)
        Clock_Ip_pxCmuFircMon2Config = getCmuFircConfig(FIRC_MON2_CLK);
    #endif

        Clock_Ip_pxScsConfigRunMode = getSelectorConfig(SCS_RUN_CLK);
    593c:	2019      	movs	r0, #25
    593e:	f7ff fcfb 	bl	5338 <getSelectorConfig>
    5942:	4603      	mov	r3, r0
    5944:	4a3e      	ldr	r2, [pc, #248]	; (5a40 <Clock_Ip_ClockInitializeObjects+0x204>)
    5946:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxScsConfigVlprMode = getSelectorConfig(SCS_VLPR_CLK);
    5948:	201a      	movs	r0, #26
    594a:	f7ff fcf5 	bl	5338 <getSelectorConfig>
    594e:	4603      	mov	r3, r0
    5950:	4a3c      	ldr	r2, [pc, #240]	; (5a44 <Clock_Ip_ClockInitializeObjects+0x208>)
    5952:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
        Clock_Ip_pxScsConfigHsrunMode = getSelectorConfig(SCS_HSRUN_CLK);
    5954:	201b      	movs	r0, #27
    5956:	f7ff fcef 	bl	5338 <getSelectorConfig>
    595a:	4603      	mov	r3, r0
    595c:	4a3a      	ldr	r2, [pc, #232]	; (5a48 <Clock_Ip_ClockInitializeObjects+0x20c>)
    595e:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxCoreConfigRunMode = getCoreDividerConfig(CORE_RUN_CLK);
    5960:	201d      	movs	r0, #29
    5962:	f7ff fd7b 	bl	545c <getCoreDividerConfig>
    5966:	4603      	mov	r3, r0
    5968:	4a38      	ldr	r2, [pc, #224]	; (5a4c <Clock_Ip_ClockInitializeObjects+0x210>)
    596a:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxCoreConfigVlprMode = getCoreDividerConfig(CORE_VLPR_CLK);
    596c:	201e      	movs	r0, #30
    596e:	f7ff fd75 	bl	545c <getCoreDividerConfig>
    5972:	4603      	mov	r3, r0
    5974:	4a36      	ldr	r2, [pc, #216]	; (5a50 <Clock_Ip_ClockInitializeObjects+0x214>)
    5976:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
        Clock_Ip_pxCoreConfigHsrunMode = getCoreDividerConfig(CORE_HSRUN_CLK);
    5978:	201f      	movs	r0, #31
    597a:	f7ff fd6f 	bl	545c <getCoreDividerConfig>
    597e:	4603      	mov	r3, r0
    5980:	4a34      	ldr	r2, [pc, #208]	; (5a54 <Clock_Ip_ClockInitializeObjects+0x218>)
    5982:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxBusConfigRunMode = getBusDividerConfig(BUS_RUN_CLK);
    5984:	2021      	movs	r0, #33	; 0x21
    5986:	f7ff fe0f 	bl	55a8 <getBusDividerConfig>
    598a:	4603      	mov	r3, r0
    598c:	4a32      	ldr	r2, [pc, #200]	; (5a58 <Clock_Ip_ClockInitializeObjects+0x21c>)
    598e:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxBusConfigVlprMode = getBusDividerConfig(BUS_VLPR_CLK);
    5990:	2022      	movs	r0, #34	; 0x22
    5992:	f7ff fe09 	bl	55a8 <getBusDividerConfig>
    5996:	4603      	mov	r3, r0
    5998:	4a30      	ldr	r2, [pc, #192]	; (5a5c <Clock_Ip_ClockInitializeObjects+0x220>)
    599a:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
        Clock_Ip_pxBusConfigHsrunMode = getBusDividerConfig(BUS_HSRUN_CLK);
    599c:	2023      	movs	r0, #35	; 0x23
    599e:	f7ff fe03 	bl	55a8 <getBusDividerConfig>
    59a2:	4603      	mov	r3, r0
    59a4:	4a2e      	ldr	r2, [pc, #184]	; (5a60 <Clock_Ip_ClockInitializeObjects+0x224>)
    59a6:	6013      	str	r3, [r2, #0]
    #endif

        Clock_Ip_pxSlowConfigRunMode = getSlowDividerConfig(SLOW_RUN_CLK);
    59a8:	2025      	movs	r0, #37	; 0x25
    59aa:	f7ff fea3 	bl	56f4 <getSlowDividerConfig>
    59ae:	4603      	mov	r3, r0
    59b0:	4a2c      	ldr	r2, [pc, #176]	; (5a64 <Clock_Ip_ClockInitializeObjects+0x228>)
    59b2:	6013      	str	r3, [r2, #0]
        Clock_Ip_pxSlowConfigVlprMode = getSlowDividerConfig(SLOW_VLPR_CLK);
    59b4:	2026      	movs	r0, #38	; 0x26
    59b6:	f7ff fe9d 	bl	56f4 <getSlowDividerConfig>
    59ba:	4603      	mov	r3, r0
    59bc:	4a2a      	ldr	r2, [pc, #168]	; (5a68 <Clock_Ip_ClockInitializeObjects+0x22c>)
    59be:	6013      	str	r3, [r2, #0]
    #if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
        Clock_Ip_pxSlowConfigHsrunMode = getSlowDividerConfig(SLOW_HSRUN_CLK);
    59c0:	2027      	movs	r0, #39	; 0x27
    59c2:	f7ff fe97 	bl	56f4 <getSlowDividerConfig>
    59c6:	4603      	mov	r3, r0
    59c8:	4a28      	ldr	r2, [pc, #160]	; (5a6c <Clock_Ip_ClockInitializeObjects+0x230>)
    59ca:	6013      	str	r3, [r2, #0]
    #endif
    }

}
    59cc:	bf00      	nop
    59ce:	b003      	add	sp, #12
    59d0:	f85d fb04 	ldr.w	pc, [sp], #4
    59d4:	1fff8cec 	.word	0x1fff8cec
    59d8:	0000fa74 	.word	0x0000fa74
    59dc:	000100c0 	.word	0x000100c0
    59e0:	1fff8bb8 	.word	0x1fff8bb8
    59e4:	0000fa34 	.word	0x0000fa34
    59e8:	00010008 	.word	0x00010008
    59ec:	1fff8bbc 	.word	0x1fff8bbc
    59f0:	0000fa44 	.word	0x0000fa44
    59f4:	00010074 	.word	0x00010074
    59f8:	1fff8bc0 	.word	0x1fff8bc0
    59fc:	0000fa84 	.word	0x0000fa84
    5a00:	000100ec 	.word	0x000100ec
    5a04:	1fff8bc4 	.word	0x1fff8bc4
    5a08:	1fff8c00 	.word	0x1fff8c00
    5a0c:	0000fa14 	.word	0x0000fa14
    5a10:	0000ffc4 	.word	0x0000ffc4
    5a14:	1fff8bc8 	.word	0x1fff8bc8
    5a18:	1fff8c04 	.word	0x1fff8c04
    5a1c:	1fff8bcc 	.word	0x1fff8bcc
    5a20:	1fff8c08 	.word	0x1fff8c08
    5a24:	1fff8bd0 	.word	0x1fff8bd0
    5a28:	1fff8c0c 	.word	0x1fff8c0c
    5a2c:	1fff8b19 	.word	0x1fff8b19
    5a30:	1fff8b10 	.word	0x1fff8b10
    5a34:	1fff8bd4 	.word	0x1fff8bd4
    5a38:	1fff8bd8 	.word	0x1fff8bd8
    5a3c:	1fff8bdc 	.word	0x1fff8bdc
    5a40:	1fff8be0 	.word	0x1fff8be0
    5a44:	1fff8be4 	.word	0x1fff8be4
    5a48:	1fff8c10 	.word	0x1fff8c10
    5a4c:	1fff8be8 	.word	0x1fff8be8
    5a50:	1fff8bec 	.word	0x1fff8bec
    5a54:	1fff8c14 	.word	0x1fff8c14
    5a58:	1fff8bf0 	.word	0x1fff8bf0
    5a5c:	1fff8bf4 	.word	0x1fff8bf4
    5a60:	1fff8c18 	.word	0x1fff8c18
    5a64:	1fff8bf8 	.word	0x1fff8bf8
    5a68:	1fff8bfc 	.word	0x1fff8bfc
    5a6c:	1fff8c1c 	.word	0x1fff8c1c

00005a70 <Clock_Ip_ClockPowerModeChangeNotification>:


void Clock_Ip_ClockPowerModeChangeNotification(Clock_Ip_PowerModesType PowerMode, Clock_Ip_PowerNotificationType Notification)
{
    5a70:	b500      	push	{lr}
    5a72:	b083      	sub	sp, #12
    5a74:	9001      	str	r0, [sp, #4]
    5a76:	9100      	str	r1, [sp, #0]
    switch(PowerMode)
    5a78:	9b01      	ldr	r3, [sp, #4]
    5a7a:	2b03      	cmp	r3, #3
    5a7c:	f000 8090 	beq.w	5ba0 <Clock_Ip_ClockPowerModeChangeNotification+0x130>
    5a80:	9b01      	ldr	r3, [sp, #4]
    5a82:	2b03      	cmp	r3, #3
    5a84:	f200 80d3 	bhi.w	5c2e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    5a88:	9b01      	ldr	r3, [sp, #4]
    5a8a:	2b00      	cmp	r3, #0
    5a8c:	d040      	beq.n	5b10 <Clock_Ip_ClockPowerModeChangeNotification+0xa0>
    5a8e:	9b01      	ldr	r3, [sp, #4]
    5a90:	3b01      	subs	r3, #1
    5a92:	2b01      	cmp	r3, #1
    5a94:	f200 80cb 	bhi.w	5c2e <Clock_Ip_ClockPowerModeChangeNotification+0x1be>
    {
        case VLPR_MODE:
        case VLPS_MODE:
        {
            if(BEFORE_POWER_MODE_CHANGE == Notification)
    5a98:	9b00      	ldr	r3, [sp, #0]
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	f040 80c9 	bne.w	5c32 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = FALSE;
    5aa0:	4b68      	ldr	r3, [pc, #416]	; (5c44 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5aa2:	2200      	movs	r2, #0
    5aa4:	701a      	strb	r2, [r3, #0]
                    Clock_Ip_pxCmuFircMonitor->Disable(FIRC_MON2_CLK);
                }
#endif

                /* Load system clock settings for VLPR mode */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigVlprMode);
    5aa6:	4b68      	ldr	r3, [pc, #416]	; (5c48 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5aa8:	681b      	ldr	r3, [r3, #0]
    5aaa:	685b      	ldr	r3, [r3, #4]
    5aac:	4a67      	ldr	r2, [pc, #412]	; (5c4c <Clock_Ip_ClockPowerModeChangeNotification+0x1dc>)
    5aae:	6812      	ldr	r2, [r2, #0]
    5ab0:	4610      	mov	r0, r2
    5ab2:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigVlprMode);
    5ab4:	4b66      	ldr	r3, [pc, #408]	; (5c50 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5ab6:	681b      	ldr	r3, [r3, #0]
    5ab8:	681b      	ldr	r3, [r3, #0]
    5aba:	4a66      	ldr	r2, [pc, #408]	; (5c54 <Clock_Ip_ClockPowerModeChangeNotification+0x1e4>)
    5abc:	6812      	ldr	r2, [r2, #0]
    5abe:	4610      	mov	r0, r2
    5ac0:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigVlprMode);
    5ac2:	4b65      	ldr	r3, [pc, #404]	; (5c58 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5ac4:	681b      	ldr	r3, [r3, #0]
    5ac6:	681b      	ldr	r3, [r3, #0]
    5ac8:	4a64      	ldr	r2, [pc, #400]	; (5c5c <Clock_Ip_ClockPowerModeChangeNotification+0x1ec>)
    5aca:	6812      	ldr	r2, [r2, #0]
    5acc:	4610      	mov	r0, r2
    5ace:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigVlprMode);
    5ad0:	4b63      	ldr	r3, [pc, #396]	; (5c60 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5ad2:	681b      	ldr	r3, [r3, #0]
    5ad4:	681b      	ldr	r3, [r3, #0]
    5ad6:	4a63      	ldr	r2, [pc, #396]	; (5c64 <Clock_Ip_ClockPowerModeChangeNotification+0x1f4>)
    5ad8:	6812      	ldr	r2, [r2, #0]
    5ada:	4610      	mov	r0, r2
    5adc:	4798      	blx	r3

                /* Disable all clock sources except SIRC */
#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Disable(Clock_Ip_pxSpllConfig->Name);
    5ade:	4b62      	ldr	r3, [pc, #392]	; (5c68 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5ae0:	681b      	ldr	r3, [r3, #0]
    5ae2:	691b      	ldr	r3, [r3, #16]
    5ae4:	4a61      	ldr	r2, [pc, #388]	; (5c6c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5ae6:	6812      	ldr	r2, [r2, #0]
    5ae8:	6812      	ldr	r2, [r2, #0]
    5aea:	4610      	mov	r0, r2
    5aec:	4798      	blx	r3
#endif
                Clock_Ip_pxSoscClock->Disable(Clock_Ip_pxSoscConfig->Name);
    5aee:	4b60      	ldr	r3, [pc, #384]	; (5c70 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5af0:	681b      	ldr	r3, [r3, #0]
    5af2:	68db      	ldr	r3, [r3, #12]
    5af4:	4a5f      	ldr	r2, [pc, #380]	; (5c74 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5af6:	6812      	ldr	r2, [r2, #0]
    5af8:	6812      	ldr	r2, [r2, #0]
    5afa:	4610      	mov	r0, r2
    5afc:	4798      	blx	r3
                Clock_Ip_pxFircClock->Disable(Clock_Ip_pxFircConfig->Name);
    5afe:	4b5e      	ldr	r3, [pc, #376]	; (5c78 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5b00:	681b      	ldr	r3, [r3, #0]
    5b02:	689b      	ldr	r3, [r3, #8]
    5b04:	4a5d      	ldr	r2, [pc, #372]	; (5c7c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5b06:	6812      	ldr	r2, [r2, #0]
    5b08:	6812      	ldr	r2, [r2, #0]
    5b0a:	4610      	mov	r0, r2
    5b0c:	4798      	blx	r3
            }
        }
        break;
    5b0e:	e090      	b.n	5c32 <Clock_Ip_ClockPowerModeChangeNotification+0x1c2>

        case RUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5b10:	9b00      	ldr	r3, [sp, #0]
    5b12:	2b02      	cmp	r3, #2
    5b14:	f040 808f 	bne.w	5c36 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5b18:	4b4a      	ldr	r3, [pc, #296]	; (5c44 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5b1a:	2201      	movs	r2, #1
    5b1c:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5b1e:	4b56      	ldr	r3, [pc, #344]	; (5c78 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5b20:	681b      	ldr	r3, [r3, #0]
    5b22:	685b      	ldr	r3, [r3, #4]
    5b24:	4a55      	ldr	r2, [pc, #340]	; (5c7c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5b26:	6812      	ldr	r2, [r2, #0]
    5b28:	4610      	mov	r0, r2
    5b2a:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5b2c:	4b50      	ldr	r3, [pc, #320]	; (5c70 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5b2e:	681b      	ldr	r3, [r3, #0]
    5b30:	691b      	ldr	r3, [r3, #16]
    5b32:	4a50      	ldr	r2, [pc, #320]	; (5c74 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5b34:	6812      	ldr	r2, [r2, #0]
    5b36:	4610      	mov	r0, r2
    5b38:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5b3a:	4b4d      	ldr	r3, [pc, #308]	; (5c70 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5b3c:	681b      	ldr	r3, [r3, #0]
    5b3e:	689b      	ldr	r3, [r3, #8]
    5b40:	4a4c      	ldr	r2, [pc, #304]	; (5c74 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5b42:	6812      	ldr	r2, [r2, #0]
    5b44:	4610      	mov	r0, r2
    5b46:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5b48:	4b47      	ldr	r3, [pc, #284]	; (5c68 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5b4a:	681b      	ldr	r3, [r3, #0]
    5b4c:	68db      	ldr	r3, [r3, #12]
    5b4e:	4a47      	ldr	r2, [pc, #284]	; (5c6c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5b50:	6812      	ldr	r2, [r2, #0]
    5b52:	4610      	mov	r0, r2
    5b54:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5b56:	4b44      	ldr	r3, [pc, #272]	; (5c68 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5b58:	681b      	ldr	r3, [r3, #0]
    5b5a:	689b      	ldr	r3, [r3, #8]
    5b5c:	4a43      	ldr	r2, [pc, #268]	; (5c6c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5b5e:	6812      	ldr	r2, [r2, #0]
    5b60:	6812      	ldr	r2, [r2, #0]
    5b62:	4610      	mov	r0, r2
    5b64:	4798      	blx	r3
#endif

                /* Restore system clock settings */
                Clock_Ip_pxScsRunClockSelector->Set(Clock_Ip_pxScsConfigRunMode);
    5b66:	4b38      	ldr	r3, [pc, #224]	; (5c48 <Clock_Ip_ClockPowerModeChangeNotification+0x1d8>)
    5b68:	681b      	ldr	r3, [r3, #0]
    5b6a:	685b      	ldr	r3, [r3, #4]
    5b6c:	4a44      	ldr	r2, [pc, #272]	; (5c80 <Clock_Ip_ClockPowerModeChangeNotification+0x210>)
    5b6e:	6812      	ldr	r2, [r2, #0]
    5b70:	4610      	mov	r0, r2
    5b72:	4798      	blx	r3
                Clock_Ip_pxCoreRunClockDivider->Set(Clock_Ip_pxCoreConfigRunMode);
    5b74:	4b36      	ldr	r3, [pc, #216]	; (5c50 <Clock_Ip_ClockPowerModeChangeNotification+0x1e0>)
    5b76:	681b      	ldr	r3, [r3, #0]
    5b78:	681b      	ldr	r3, [r3, #0]
    5b7a:	4a42      	ldr	r2, [pc, #264]	; (5c84 <Clock_Ip_ClockPowerModeChangeNotification+0x214>)
    5b7c:	6812      	ldr	r2, [r2, #0]
    5b7e:	4610      	mov	r0, r2
    5b80:	4798      	blx	r3
                Clock_Ip_pxBusRunClockDivider->Set(Clock_Ip_pxBusConfigRunMode);
    5b82:	4b35      	ldr	r3, [pc, #212]	; (5c58 <Clock_Ip_ClockPowerModeChangeNotification+0x1e8>)
    5b84:	681b      	ldr	r3, [r3, #0]
    5b86:	681b      	ldr	r3, [r3, #0]
    5b88:	4a3f      	ldr	r2, [pc, #252]	; (5c88 <Clock_Ip_ClockPowerModeChangeNotification+0x218>)
    5b8a:	6812      	ldr	r2, [r2, #0]
    5b8c:	4610      	mov	r0, r2
    5b8e:	4798      	blx	r3
                Clock_Ip_pxSlowRunClockDivider->Set(Clock_Ip_pxSlowConfigRunMode);
    5b90:	4b33      	ldr	r3, [pc, #204]	; (5c60 <Clock_Ip_ClockPowerModeChangeNotification+0x1f0>)
    5b92:	681b      	ldr	r3, [r3, #0]
    5b94:	681b      	ldr	r3, [r3, #0]
    5b96:	4a3d      	ldr	r2, [pc, #244]	; (5c8c <Clock_Ip_ClockPowerModeChangeNotification+0x21c>)
    5b98:	6812      	ldr	r2, [r2, #0]
    5b9a:	4610      	mov	r0, r2
    5b9c:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5b9e:	e04a      	b.n	5c36 <Clock_Ip_ClockPowerModeChangeNotification+0x1c6>

        case HSRUN_MODE:
        {
            if(POWER_MODE_CHANGED == Notification)
    5ba0:	9b00      	ldr	r3, [sp, #0]
    5ba2:	2b02      	cmp	r3, #2
    5ba4:	d149      	bne.n	5c3a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>
            {
                Clock_Ip_bAcceptedCopyClockConfiguration = TRUE;
    5ba6:	4b27      	ldr	r3, [pc, #156]	; (5c44 <Clock_Ip_ClockPowerModeChangeNotification+0x1d4>)
    5ba8:	2201      	movs	r2, #1
    5baa:	701a      	strb	r2, [r3, #0]
                /* Restore clock source settings */
                Clock_Ip_pxFircClock->Enable(Clock_Ip_pxFircConfig);
    5bac:	4b32      	ldr	r3, [pc, #200]	; (5c78 <Clock_Ip_ClockPowerModeChangeNotification+0x208>)
    5bae:	681b      	ldr	r3, [r3, #0]
    5bb0:	685b      	ldr	r3, [r3, #4]
    5bb2:	4a32      	ldr	r2, [pc, #200]	; (5c7c <Clock_Ip_ClockPowerModeChangeNotification+0x20c>)
    5bb4:	6812      	ldr	r2, [r2, #0]
    5bb6:	4610      	mov	r0, r2
    5bb8:	4798      	blx	r3

                Clock_Ip_pxSoscClock->Enable(Clock_Ip_pxSoscConfig);                 /* Enable */
    5bba:	4b2d      	ldr	r3, [pc, #180]	; (5c70 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5bbc:	681b      	ldr	r3, [r3, #0]
    5bbe:	691b      	ldr	r3, [r3, #16]
    5bc0:	4a2c      	ldr	r2, [pc, #176]	; (5c74 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5bc2:	6812      	ldr	r2, [r2, #0]
    5bc4:	4610      	mov	r0, r2
    5bc6:	4798      	blx	r3
                Clock_Ip_pxSoscClock->Complete(Clock_Ip_pxSoscConfig);               /* Wait to lock */
    5bc8:	4b29      	ldr	r3, [pc, #164]	; (5c70 <Clock_Ip_ClockPowerModeChangeNotification+0x200>)
    5bca:	681b      	ldr	r3, [r3, #0]
    5bcc:	689b      	ldr	r3, [r3, #8]
    5bce:	4a29      	ldr	r2, [pc, #164]	; (5c74 <Clock_Ip_ClockPowerModeChangeNotification+0x204>)
    5bd0:	6812      	ldr	r2, [r2, #0]
    5bd2:	4610      	mov	r0, r2
    5bd4:	4798      	blx	r3

#if defined(CLOCK_IP_HAS_SPLL_CLK)
                Clock_Ip_pxSpllClock->Enable(Clock_Ip_pxSpllConfig);                 /* Enable */
    5bd6:	4b24      	ldr	r3, [pc, #144]	; (5c68 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5bd8:	681b      	ldr	r3, [r3, #0]
    5bda:	68db      	ldr	r3, [r3, #12]
    5bdc:	4a23      	ldr	r2, [pc, #140]	; (5c6c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5bde:	6812      	ldr	r2, [r2, #0]
    5be0:	4610      	mov	r0, r2
    5be2:	4798      	blx	r3
                (void)(Clock_Ip_pxSpllClock->Complete(Clock_Ip_pxSpllConfig->Name));         /* Wait to lock */
    5be4:	4b20      	ldr	r3, [pc, #128]	; (5c68 <Clock_Ip_ClockPowerModeChangeNotification+0x1f8>)
    5be6:	681b      	ldr	r3, [r3, #0]
    5be8:	689b      	ldr	r3, [r3, #8]
    5bea:	4a20      	ldr	r2, [pc, #128]	; (5c6c <Clock_Ip_ClockPowerModeChangeNotification+0x1fc>)
    5bec:	6812      	ldr	r2, [r2, #0]
    5bee:	6812      	ldr	r2, [r2, #0]
    5bf0:	4610      	mov	r0, r2
    5bf2:	4798      	blx	r3
#endif

                /* Restore system clock settings */
#if defined(CLOCK_IP_HAS_SCS_HSRUN_CLK)
                Clock_Ip_pxScsHsrunClockSelector->Set(Clock_Ip_pxScsConfigHsrunMode);
    5bf4:	4b26      	ldr	r3, [pc, #152]	; (5c90 <Clock_Ip_ClockPowerModeChangeNotification+0x220>)
    5bf6:	681b      	ldr	r3, [r3, #0]
    5bf8:	685b      	ldr	r3, [r3, #4]
    5bfa:	4a26      	ldr	r2, [pc, #152]	; (5c94 <Clock_Ip_ClockPowerModeChangeNotification+0x224>)
    5bfc:	6812      	ldr	r2, [r2, #0]
    5bfe:	4610      	mov	r0, r2
    5c00:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_CORE_HSRUN_CLK)
                Clock_Ip_pxCoreHsrunClockDivider->Set(Clock_Ip_pxCoreConfigHsrunMode);
    5c02:	4b25      	ldr	r3, [pc, #148]	; (5c98 <Clock_Ip_ClockPowerModeChangeNotification+0x228>)
    5c04:	681b      	ldr	r3, [r3, #0]
    5c06:	681b      	ldr	r3, [r3, #0]
    5c08:	4a24      	ldr	r2, [pc, #144]	; (5c9c <Clock_Ip_ClockPowerModeChangeNotification+0x22c>)
    5c0a:	6812      	ldr	r2, [r2, #0]
    5c0c:	4610      	mov	r0, r2
    5c0e:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_BUS_HSRUN_CLK)
                Clock_Ip_pxBusHsrunClockDivider->Set(Clock_Ip_pxBusConfigHsrunMode);
    5c10:	4b23      	ldr	r3, [pc, #140]	; (5ca0 <Clock_Ip_ClockPowerModeChangeNotification+0x230>)
    5c12:	681b      	ldr	r3, [r3, #0]
    5c14:	681b      	ldr	r3, [r3, #0]
    5c16:	4a23      	ldr	r2, [pc, #140]	; (5ca4 <Clock_Ip_ClockPowerModeChangeNotification+0x234>)
    5c18:	6812      	ldr	r2, [r2, #0]
    5c1a:	4610      	mov	r0, r2
    5c1c:	4798      	blx	r3
#endif
#if defined(CLOCK_IP_HAS_SLOW_HSRUN_CLK)
                Clock_Ip_pxSlowHsrunClockDivider->Set(Clock_Ip_pxSlowConfigHsrunMode);
    5c1e:	4b22      	ldr	r3, [pc, #136]	; (5ca8 <Clock_Ip_ClockPowerModeChangeNotification+0x238>)
    5c20:	681b      	ldr	r3, [r3, #0]
    5c22:	681b      	ldr	r3, [r3, #0]
    5c24:	4a21      	ldr	r2, [pc, #132]	; (5cac <Clock_Ip_ClockPowerModeChangeNotification+0x23c>)
    5c26:	6812      	ldr	r2, [r2, #0]
    5c28:	4610      	mov	r0, r2
    5c2a:	4798      	blx	r3
                    Clock_Ip_pxCmuFircMonitor->Enable(Clock_Ip_pxCmuFircMon2Config);
                }
#endif
            }
        }
        break;
    5c2c:	e005      	b.n	5c3a <Clock_Ip_ClockPowerModeChangeNotification+0x1ca>

        default:
        {
            /* Invalid power mode */
        }
        break;
    5c2e:	bf00      	nop
    5c30:	e004      	b.n	5c3c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5c32:	bf00      	nop
    5c34:	e002      	b.n	5c3c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5c36:	bf00      	nop
    5c38:	e000      	b.n	5c3c <Clock_Ip_ClockPowerModeChangeNotification+0x1cc>
        break;
    5c3a:	bf00      	nop
    }

}
    5c3c:	bf00      	nop
    5c3e:	b003      	add	sp, #12
    5c40:	f85d fb04 	ldr.w	pc, [sp], #4
    5c44:	1fff8b19 	.word	0x1fff8b19
    5c48:	1fff8bc4 	.word	0x1fff8bc4
    5c4c:	1fff8be4 	.word	0x1fff8be4
    5c50:	1fff8bc8 	.word	0x1fff8bc8
    5c54:	1fff8bec 	.word	0x1fff8bec
    5c58:	1fff8bcc 	.word	0x1fff8bcc
    5c5c:	1fff8bf4 	.word	0x1fff8bf4
    5c60:	1fff8bd0 	.word	0x1fff8bd0
    5c64:	1fff8bfc 	.word	0x1fff8bfc
    5c68:	1fff8bb8 	.word	0x1fff8bb8
    5c6c:	1fff8bdc 	.word	0x1fff8bdc
    5c70:	1fff8bbc 	.word	0x1fff8bbc
    5c74:	1fff8bd8 	.word	0x1fff8bd8
    5c78:	1fff8bc0 	.word	0x1fff8bc0
    5c7c:	1fff8bd4 	.word	0x1fff8bd4
    5c80:	1fff8be0 	.word	0x1fff8be0
    5c84:	1fff8be8 	.word	0x1fff8be8
    5c88:	1fff8bf0 	.word	0x1fff8bf0
    5c8c:	1fff8bf8 	.word	0x1fff8bf8
    5c90:	1fff8c00 	.word	0x1fff8c00
    5c94:	1fff8c10 	.word	0x1fff8c10
    5c98:	1fff8c04 	.word	0x1fff8c04
    5c9c:	1fff8c14 	.word	0x1fff8c14
    5ca0:	1fff8c08 	.word	0x1fff8c08
    5ca4:	1fff8c18 	.word	0x1fff8c18
    5ca8:	1fff8c0c 	.word	0x1fff8c0c
    5cac:	1fff8c1c 	.word	0x1fff8c1c

00005cb0 <Clock_Ip_Command>:


void Clock_Ip_Command(Clock_Ip_ClockConfigType const * Config, Clock_Ip_CommandType Command)
{
    5cb0:	b500      	push	{lr}
    5cb2:	b083      	sub	sp, #12
    5cb4:	9001      	str	r0, [sp, #4]
    5cb6:	9100      	str	r1, [sp, #0]
    switch(Command)
    5cb8:	9b00      	ldr	r3, [sp, #0]
    5cba:	2b04      	cmp	r3, #4
    5cbc:	d010      	beq.n	5ce0 <Clock_Ip_Command+0x30>
    5cbe:	9b00      	ldr	r3, [sp, #0]
    5cc0:	2b04      	cmp	r3, #4
    5cc2:	d811      	bhi.n	5ce8 <Clock_Ip_Command+0x38>
    5cc4:	9b00      	ldr	r3, [sp, #0]
    5cc6:	2b01      	cmp	r3, #1
    5cc8:	d006      	beq.n	5cd8 <Clock_Ip_Command+0x28>
    5cca:	9b00      	ldr	r3, [sp, #0]
    5ccc:	2b02      	cmp	r3, #2
    5cce:	d10b      	bne.n	5ce8 <Clock_Ip_Command+0x38>
    {
        case CLOCK_IP_INITIALIZE_CLOCK_OBJECTS_COMMAND:
            Clock_Ip_ClockInitializeObjects(Config);
    5cd0:	9801      	ldr	r0, [sp, #4]
    5cd2:	f7ff fdb3 	bl	583c <Clock_Ip_ClockInitializeObjects>
            break;
    5cd6:	e008      	b.n	5cea <Clock_Ip_Command+0x3a>
        case CLOCK_IP_INITIALIZE_PLATFORM_COMMAND:
            Clock_Ip_SpecificPlatformInitClock(Config);
    5cd8:	9801      	ldr	r0, [sp, #4]
    5cda:	f7ff f9db 	bl	5094 <Clock_Ip_SpecificPlatformInitClock>
            break;
    5cde:	e004      	b.n	5cea <Clock_Ip_Command+0x3a>
        case CLOCK_IP_DISABLE_SAFE_CLOCK_COMMAND:
            DisableSafeClock(Config);
    5ce0:	9801      	ldr	r0, [sp, #4]
    5ce2:	f7ff f8ed 	bl	4ec0 <DisableSafeClock>
            break;
    5ce6:	e000      	b.n	5cea <Clock_Ip_Command+0x3a>
        default:
            /* Command is not implemented on this platform */
            break;
    5ce8:	bf00      	nop
    }
}
    5cea:	bf00      	nop
    5cec:	b003      	add	sp, #12
    5cee:	f85d fb04 	ldr.w	pc, [sp], #4
    5cf2:	bf00      	nop

00005cf4 <Mcu_Init>:
* @api
*
* @implements Mcu_Init_Activity
*/
void Mcu_Init(const Mcu_ConfigType * ConfigPtr)
{
    5cf4:	b500      	push	{lr}
    5cf6:	b085      	sub	sp, #20
    5cf8:	9001      	str	r0, [sp, #4]

#if (MCU_PRECOMPILE_SUPPORT == STD_ON)
            Mcu_pConfigPtr = &Mcu_PreCompileConfig;
            MCU_PARAM_UNUSED(ConfigPtr);
#else
            Mcu_pConfigPtr = ConfigPtr;
    5cfa:	4a20      	ldr	r2, [pc, #128]	; (5d7c <Mcu_Init+0x88>)
    5cfc:	9b01      	ldr	r3, [sp, #4]
    5cfe:	6013      	str	r3, [r2, #0]
            /* Get a local copy of the DEM error reporting structure. */
            Mcu_pDemCfgPtr = Mcu_pConfigPtr->DemConfigPtr;
#endif /* (MCU_DISABLE_DEM_REPORT_ERROR_STATUS == STD_OFF) */

            /* Save the Mcu Mode IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5d00:	2300      	movs	r3, #0
    5d02:	9303      	str	r3, [sp, #12]
    5d04:	e010      	b.n	5d28 <Mcu_Init+0x34>
            {
                Mcu_au8ModeConfigIds[(*Mcu_pConfigPtr->ModeConfigArrayPtr)[NoConfigs].ModeConfigId] = (uint8)NoConfigs;
    5d06:	4b1d      	ldr	r3, [pc, #116]	; (5d7c <Mcu_Init+0x88>)
    5d08:	681b      	ldr	r3, [r3, #0]
    5d0a:	6919      	ldr	r1, [r3, #16]
    5d0c:	9a03      	ldr	r2, [sp, #12]
    5d0e:	4613      	mov	r3, r2
    5d10:	005b      	lsls	r3, r3, #1
    5d12:	4413      	add	r3, r2
    5d14:	009b      	lsls	r3, r3, #2
    5d16:	440b      	add	r3, r1
    5d18:	681b      	ldr	r3, [r3, #0]
    5d1a:	9a03      	ldr	r2, [sp, #12]
    5d1c:	b2d1      	uxtb	r1, r2
    5d1e:	4a18      	ldr	r2, [pc, #96]	; (5d80 <Mcu_Init+0x8c>)
    5d20:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoModeConfigs; NoConfigs++)
    5d22:	9b03      	ldr	r3, [sp, #12]
    5d24:	3301      	adds	r3, #1
    5d26:	9303      	str	r3, [sp, #12]
    5d28:	4b14      	ldr	r3, [pc, #80]	; (5d7c <Mcu_Init+0x88>)
    5d2a:	681b      	ldr	r3, [r3, #0]
    5d2c:	689b      	ldr	r3, [r3, #8]
    5d2e:	9a03      	ldr	r2, [sp, #12]
    5d30:	429a      	cmp	r2, r3
    5d32:	d3e8      	bcc.n	5d06 <Mcu_Init+0x12>
            }

#if (MCU_INIT_CLOCK == STD_ON)
            /* Save the Mcu Clock IDs configurations. */
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5d34:	2300      	movs	r3, #0
    5d36:	9303      	str	r3, [sp, #12]
    5d38:	e010      	b.n	5d5c <Mcu_Init+0x68>
            {
                Mcu_au8ClockConfigIds[(*Mcu_pConfigPtr->ClockConfigArrayPtr)[NoConfigs].ClkConfigId] = (uint8)NoConfigs;
    5d3a:	4b10      	ldr	r3, [pc, #64]	; (5d7c <Mcu_Init+0x88>)
    5d3c:	681b      	ldr	r3, [r3, #0]
    5d3e:	6959      	ldr	r1, [r3, #20]
    5d40:	9a03      	ldr	r2, [sp, #12]
    5d42:	4613      	mov	r3, r2
    5d44:	01db      	lsls	r3, r3, #7
    5d46:	1a9b      	subs	r3, r3, r2
    5d48:	00db      	lsls	r3, r3, #3
    5d4a:	440b      	add	r3, r1
    5d4c:	681b      	ldr	r3, [r3, #0]
    5d4e:	9a03      	ldr	r2, [sp, #12]
    5d50:	b2d1      	uxtb	r1, r2
    5d52:	4a0c      	ldr	r2, [pc, #48]	; (5d84 <Mcu_Init+0x90>)
    5d54:	54d1      	strb	r1, [r2, r3]
            for (NoConfigs = (uint32)0U; NoConfigs < Mcu_pConfigPtr->NoClkConfigs; NoConfigs++)
    5d56:	9b03      	ldr	r3, [sp, #12]
    5d58:	3301      	adds	r3, #1
    5d5a:	9303      	str	r3, [sp, #12]
    5d5c:	4b07      	ldr	r3, [pc, #28]	; (5d7c <Mcu_Init+0x88>)
    5d5e:	681b      	ldr	r3, [r3, #0]
    5d60:	68db      	ldr	r3, [r3, #12]
    5d62:	9a03      	ldr	r2, [sp, #12]
    5d64:	429a      	cmp	r2, r3
    5d66:	d3e8      	bcc.n	5d3a <Mcu_Init+0x46>
            {
                Mcu_au8RamConfigIds[(*Mcu_pConfigPtr->RamConfigArrayPtr)[NoConfigs].RamSectorId] = (uint8)NoConfigs;
            }
#endif /* (0 != MCU_MAX_RAMCONFIGS) */

            Mcu_Ipw_Init(Mcu_pConfigPtr->HwIPsConfigPtr);
    5d68:	4b04      	ldr	r3, [pc, #16]	; (5d7c <Mcu_Init+0x88>)
    5d6a:	681b      	ldr	r3, [r3, #0]
    5d6c:	699b      	ldr	r3, [r3, #24]
    5d6e:	4618      	mov	r0, r3
    5d70:	f000 f88a 	bl	5e88 <Mcu_Ipw_Init>
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        /* The driver is now initialized. Set the proper status. */
        Mcu_HLDChecksExit(CheckStatus, MCU_INIT_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5d74:	bf00      	nop
    5d76:	b005      	add	sp, #20
    5d78:	f85d fb04 	ldr.w	pc, [sp], #4
    5d7c:	1fff8cf8 	.word	0x1fff8cf8
    5d80:	1fff8cf4 	.word	0x1fff8cf4
    5d84:	1fff8cf0 	.word	0x1fff8cf0

00005d88 <Mcu_InitRamSection>:
*
* @implements Mcu_InitRamSection_Activity
*
*/
Std_ReturnType Mcu_InitRamSection(Mcu_RamSectionType RamSection)
{
    5d88:	b084      	sub	sp, #16
    5d8a:	9001      	str	r0, [sp, #4]
#ifndef MCU_MAX_NORAMCONFIGS
    const uint8 RamConfigId = Mcu_au8RamConfigIds[RamSection];
#endif /* #ifndef MCU_MAX_NORAMCONFIGS */
    /* Result of the operation. */
    Std_ReturnType RamStatus = (Std_ReturnType)E_NOT_OK;
    5d8c:	2301      	movs	r3, #1
    5d8e:	f88d 300f 	strb.w	r3, [sp, #15]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITRAMSECTION_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return RamStatus;
    5d92:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    5d96:	4618      	mov	r0, r3
    5d98:	b004      	add	sp, #16
    5d9a:	4770      	bx	lr

00005d9c <Mcu_InitClock>:
* @api
*
* @implements Mcu_InitClock_Activity
*/
Std_ReturnType Mcu_InitClock(Mcu_ClockType ClockSetting)
{
    5d9c:	b500      	push	{lr}
    5d9e:	b085      	sub	sp, #20
    5da0:	9001      	str	r0, [sp, #4]
    const uint8 ClockConfigId =  Mcu_au8ClockConfigIds[ClockSetting];
    5da2:	4a0e      	ldr	r2, [pc, #56]	; (5ddc <Mcu_InitClock+0x40>)
    5da4:	9b01      	ldr	r3, [sp, #4]
    5da6:	4413      	add	r3, r2
    5da8:	781b      	ldrb	r3, [r3, #0]
    5daa:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Clock configuration is valid. */
#if (MCU_PARAM_CHECK == STD_ON)
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckInitClock(ClockSetting) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            Mcu_Ipw_InitClock(&(*Mcu_pConfigPtr->ClockConfigArrayPtr)[ClockConfigId]);
    5dae:	4b0c      	ldr	r3, [pc, #48]	; (5de0 <Mcu_InitClock+0x44>)
    5db0:	681b      	ldr	r3, [r3, #0]
    5db2:	6959      	ldr	r1, [r3, #20]
    5db4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5db8:	4613      	mov	r3, r2
    5dba:	01db      	lsls	r3, r3, #7
    5dbc:	1a9b      	subs	r3, r3, r2
    5dbe:	00db      	lsls	r3, r3, #3
    5dc0:	440b      	add	r3, r1
    5dc2:	4618      	mov	r0, r3
    5dc4:	f000 f86a 	bl	5e9c <Mcu_Ipw_InitClock>

            /* Command has been accepted. */
            ClockStatus = (Std_ReturnType)E_OK;
    5dc8:	2300      	movs	r3, #0
    5dca:	f88d 300e 	strb.w	r3, [sp, #14]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_INITCLOCK_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ClockStatus;
    5dce:	f89d 300e 	ldrb.w	r3, [sp, #14]
}
    5dd2:	4618      	mov	r0, r3
    5dd4:	b005      	add	sp, #20
    5dd6:	f85d fb04 	ldr.w	pc, [sp], #4
    5dda:	bf00      	nop
    5ddc:	1fff8cf0 	.word	0x1fff8cf0
    5de0:	1fff8cf8 	.word	0x1fff8cf8

00005de4 <Mcu_SetMode>:
* @api
*
* @implements Mcu_SetMode_Activity
*/
void Mcu_SetMode(Mcu_ModeType McuMode)
{
    5de4:	b500      	push	{lr}
    5de6:	b085      	sub	sp, #20
    5de8:	9001      	str	r0, [sp, #4]
    const uint8 McuModeId = Mcu_au8ModeConfigIds[McuMode];
    5dea:	4a0d      	ldr	r2, [pc, #52]	; (5e20 <Mcu_SetMode+0x3c>)
    5dec:	9b01      	ldr	r3, [sp, #4]
    5dee:	4413      	add	r3, r2
    5df0:	781b      	ldrb	r3, [r3, #0]
    5df2:	f88d 300f 	strb.w	r3, [sp, #15]
        /* Check if Mode configuration is valid. */
        if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_CheckSetMode(McuMode) )
        {
#endif /* (MCU_PARAM_CHECK == STD_ON) */
            /* ASR 4.3.1: "Mcu_SetMode" has to be "concurrency-safe" */
            SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00();
    5df6:	f008 fa3b 	bl	e270 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>

            Mcu_Ipw_SetMode( &(*Mcu_pConfigPtr->ModeConfigArrayPtr)[McuModeId] );
    5dfa:	4b0a      	ldr	r3, [pc, #40]	; (5e24 <Mcu_SetMode+0x40>)
    5dfc:	681b      	ldr	r3, [r3, #0]
    5dfe:	6919      	ldr	r1, [r3, #16]
    5e00:	f89d 200f 	ldrb.w	r2, [sp, #15]
    5e04:	4613      	mov	r3, r2
    5e06:	005b      	lsls	r3, r3, #1
    5e08:	4413      	add	r3, r2
    5e0a:	009b      	lsls	r3, r3, #2
    5e0c:	440b      	add	r3, r1
    5e0e:	4618      	mov	r0, r3
    5e10:	f000 f84e 	bl	5eb0 <Mcu_Ipw_SetMode>

            SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00();
    5e14:	f008 fa58 	bl	e2c8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_SETMODE_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
}
    5e18:	bf00      	nop
    5e1a:	b005      	add	sp, #20
    5e1c:	f85d fb04 	ldr.w	pc, [sp], #4
    5e20:	1fff8cf4 	.word	0x1fff8cf4
    5e24:	1fff8cf8 	.word	0x1fff8cf8

00005e28 <Mcu_GetPllStatus>:
* @implements Mcu_GetPllStatus_Activity
*
*
*/
Mcu_PllStatusType Mcu_GetPllStatus(void)
{
    5e28:	b082      	sub	sp, #8
    /* Return variable. */
#if ( (MCU_VALIDATE_GLOBAL_CALL == STD_ON) || (MCU_NO_PLL == STD_ON) )
    Mcu_PllStatusType PllStatus = MCU_PLL_STATUS_UNDEFINED;
    5e2a:	2302      	movs	r3, #2
    5e2c:	9301      	str	r3, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETPLLSTATUS_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return PllStatus;
    5e2e:	9b01      	ldr	r3, [sp, #4]
}
    5e30:	4618      	mov	r0, r3
    5e32:	b002      	add	sp, #8
    5e34:	4770      	bx	lr

00005e36 <Mcu_GetResetReason>:
* @api
*
* @implements Mcu_GetResetReason_Activity
*/
Mcu_ResetType Mcu_GetResetReason(void)
{
    5e36:	b500      	push	{lr}
    5e38:	b083      	sub	sp, #12
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETREASON_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        /* Get the reset reason. */
        ResetReason = Mcu_Ipw_GetResetReason();
    5e3a:	f000 f843 	bl	5ec4 <Mcu_Ipw_GetResetReason>
    5e3e:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK, MCU_GETRESETREASON_ID);
    }
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */

    return ResetReason;
    5e40:	9b01      	ldr	r3, [sp, #4]
}
    5e42:	4618      	mov	r0, r3
    5e44:	b003      	add	sp, #12
    5e46:	f85d fb04 	ldr.w	pc, [sp], #4

00005e4a <Mcu_GetResetRawValue>:
*
* @implements Mcu_GetResetRawValue_Activity
*
*/
Mcu_RawResetType Mcu_GetResetRawValue(void)
{
    5e4a:	b500      	push	{lr}
    5e4c:	b083      	sub	sp, #12

#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
    if ( (Std_ReturnType)E_OK == (Std_ReturnType) Mcu_HLDChecksEntry(MCU_GETRESETRAWVALUE_ID) )
    {
#endif /* (MCU_VALIDATE_GLOBAL_CALL == STD_ON) */
        RawResetValue = (Mcu_RawResetType) Mcu_Ipw_GetResetRawValue();
    5e4e:	f000 f83f 	bl	5ed0 <Mcu_Ipw_GetResetRawValue>
    5e52:	9001      	str	r0, [sp, #4]
#if (MCU_VALIDATE_GLOBAL_CALL == STD_ON)
        Mcu_HLDChecksExit((Std_ReturnType)E_OK, MCU_GETRESETRAWVALUE_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

    return RawResetValue;
    5e54:	9b01      	ldr	r3, [sp, #4]
}
    5e56:	4618      	mov	r0, r3
    5e58:	b003      	add	sp, #12
    5e5a:	f85d fb04 	ldr.w	pc, [sp], #4

00005e5e <Mcu_SleepOnExit>:
*
* @implements Mcu_SleepOnExit_Activity
*
*/
void Mcu_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5e5e:	b500      	push	{lr}
    5e60:	b083      	sub	sp, #12
    5e62:	9001      	str	r0, [sp, #4]
#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
    if ((Std_ReturnType)E_OK == (Std_ReturnType)Mcu_HLDChecksEntry(MCU_SLEEPONEXIT_ID))
    {
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/

            Mcu_Ipw_SleepOnExit(SleepOnExit);
    5e64:	9801      	ldr	r0, [sp, #4]
    5e66:	f000 f839 	bl	5edc <Mcu_Ipw_SleepOnExit>

#if ( MCU_VALIDATE_GLOBAL_CALL == STD_ON )
        Mcu_HLDChecksExit( (Std_ReturnType)E_OK ,MCU_SLEEPONEXIT_ID);
    }
#endif /*( MCU_VALIDATE_GLOBAL_CALL == STD_ON )*/
}
    5e6a:	bf00      	nop
    5e6c:	b003      	add	sp, #12
    5e6e:	f85d fb04 	ldr.w	pc, [sp], #4

00005e72 <Mcu_ClkSrcFailureNotification>:
 * @return                 void
 *
 * @api
 */
void Mcu_ClkSrcFailureNotification(Clock_Ip_NameType ClockName)
{
    5e72:	b082      	sub	sp, #8
    5e74:	9001      	str	r0, [sp, #4]
    (void)ClockName;

    if ( (NULL_PTR != Mcu_pConfigPtr) && (Mcu_pConfigPtr->ClkSrcFailureNotification == MCU_CLK_NOTIF_EN))
    5e76:	4b03      	ldr	r3, [pc, #12]	; (5e84 <Mcu_ClkSrcFailureNotification+0x12>)
    5e78:	681b      	ldr	r3, [r3, #0]
    5e7a:	2b00      	cmp	r3, #0
        #endif
#else
        /* Nothing else to be done. */
#endif /* (MCU_CMU_ERROR_ISR_USED == STD_OFF && MCU_CGU_DETECT_ISR_USED == STD_OFF) */
    }
}
    5e7c:	bf00      	nop
    5e7e:	b002      	add	sp, #8
    5e80:	4770      	bx	lr
    5e82:	bf00      	nop
    5e84:	1fff8cf8 	.word	0x1fff8cf8

00005e88 <Mcu_Ipw_Init>:
*
* @return           void
*
*/
void Mcu_Ipw_Init(const Mcu_HwIPsConfigType * HwIPsConfigPtr)
{
    5e88:	b500      	push	{lr}
    5e8a:	b083      	sub	sp, #12
    5e8c:	9001      	str	r0, [sp, #4]
#if (POWER_IP_ENABLE_NOTIFICATIONS == STD_ON)
    Power_Ip_InstallNotificationsCallback(ReportPowerErrorsCallback);
#endif

    /* Init Power and Reset */
    Power_Ip_Init(HwIPsConfigPtr);
    5e8e:	9801      	ldr	r0, [sp, #4]
    5e90:	f000 f882 	bl	5f98 <Power_Ip_Init>

    (void)HwIPsConfigPtr; /* Fix warning compiler: unused variable Mcu_pHwIPsConfigPtr */
}
    5e94:	bf00      	nop
    5e96:	b003      	add	sp, #12
    5e98:	f85d fb04 	ldr.w	pc, [sp], #4

00005e9c <Mcu_Ipw_InitClock>:
*
* @return           void
*
*/
void Mcu_Ipw_InitClock(const Mcu_ClockConfigType * ClockConfigPtr)
{
    5e9c:	b500      	push	{lr}
    5e9e:	b083      	sub	sp, #12
    5ea0:	9001      	str	r0, [sp, #4]
    Clock_Ip_InitClock(ClockConfigPtr);
    5ea2:	9801      	ldr	r0, [sp, #4]
    5ea4:	f7fc fc6a 	bl	277c <Clock_Ip_InitClock>
}
    5ea8:	bf00      	nop
    5eaa:	b003      	add	sp, #12
    5eac:	f85d fb04 	ldr.w	pc, [sp], #4

00005eb0 <Mcu_Ipw_SetMode>:
*
* @return           void
*
*/
void Mcu_Ipw_SetMode(const Mcu_ModeConfigType * ModeConfigPtr)
{
    5eb0:	b500      	push	{lr}
    5eb2:	b083      	sub	sp, #12
    5eb4:	9001      	str	r0, [sp, #4]
    Power_Ip_SetMode(ModeConfigPtr);
    5eb6:	9801      	ldr	r0, [sp, #4]
    5eb8:	f000 f820 	bl	5efc <Power_Ip_SetMode>
}
    5ebc:	bf00      	nop
    5ebe:	b003      	add	sp, #12
    5ec0:	f85d fb04 	ldr.w	pc, [sp], #4

00005ec4 <Mcu_Ipw_GetResetReason>:
*
* @return           void
*
*/
Mcu_ResetType Mcu_Ipw_GetResetReason(void)
{
    5ec4:	b508      	push	{r3, lr}
    return (Mcu_ResetType)Power_Ip_GetResetReason();
    5ec6:	f000 f84f 	bl	5f68 <Power_Ip_GetResetReason>
    5eca:	4603      	mov	r3, r0
}
    5ecc:	4618      	mov	r0, r3
    5ece:	bd08      	pop	{r3, pc}

00005ed0 <Mcu_Ipw_GetResetRawValue>:
*
* @return           void
*
*/
Mcu_RawResetType Mcu_Ipw_GetResetRawValue(void)
{
    5ed0:	b508      	push	{r3, lr}
    return (Mcu_RawResetType)Power_Ip_GetResetRawValue();
    5ed2:	f000 f857 	bl	5f84 <Power_Ip_GetResetRawValue>
    5ed6:	4603      	mov	r3, r0
}
    5ed8:	4618      	mov	r0, r3
    5eda:	bd08      	pop	{r3, pc}

00005edc <Mcu_Ipw_SleepOnExit>:
*
* @return           void
*
*/
void Mcu_Ipw_SleepOnExit(Mcu_SleepOnExitType SleepOnExit)
{
    5edc:	b500      	push	{lr}
    5ede:	b083      	sub	sp, #12
    5ee0:	9001      	str	r0, [sp, #4]
    if(MCU_SLEEP_ON_EXIT_DISABLED == (Mcu_SleepOnExitType)SleepOnExit)
    5ee2:	9b01      	ldr	r3, [sp, #4]
    5ee4:	2b00      	cmp	r3, #0
    5ee6:	d102      	bne.n	5eee <Mcu_Ipw_SleepOnExit+0x12>
    {
        Power_Ip_DisableSleepOnExit();
    5ee8:	f000 f86c 	bl	5fc4 <Power_Ip_DisableSleepOnExit>
    }
    else
    {
        Power_Ip_EnableSleepOnExit();
    }
}
    5eec:	e001      	b.n	5ef2 <Mcu_Ipw_SleepOnExit+0x16>
        Power_Ip_EnableSleepOnExit();
    5eee:	f000 f86e 	bl	5fce <Power_Ip_EnableSleepOnExit>
}
    5ef2:	bf00      	nop
    5ef4:	b003      	add	sp, #12
    5ef6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00005efc <Power_Ip_SetMode>:
*
* @implements Power_Ip_SetMode_Activity
*
*/
void Power_Ip_SetMode(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    5efc:	b500      	push	{lr}
    5efe:	b085      	sub	sp, #20
    5f00:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode;
#if (POWER_MODE_CHANGE_NOTIFICATION == STD_ON)
    Clock_Ip_PowerModesType ModeChanged;
    Clock_Ip_PowerNotificationType ModeChangeStatus;
#endif
    Power_Ip_PowerModeType PowerMode = ModeConfigPtr->PowerMode;
    5f02:	9b01      	ldr	r3, [sp, #4]
    5f04:	685b      	ldr	r3, [r3, #4]
    5f06:	9302      	str	r3, [sp, #8]

    if (POWER_IP_MODE_OK != Power_Ip_SMC_ModeCheckEntry(PowerMode))
    5f08:	9802      	ldr	r0, [sp, #8]
    5f0a:	f000 f9f5 	bl	62f8 <Power_Ip_SMC_ModeCheckEntry>
    5f0e:	4603      	mov	r3, r0
    5f10:	2b00      	cmp	r3, #0
    5f12:	d002      	beq.n	5f1a <Power_Ip_SetMode+0x1e>
    {
        PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    5f14:	2301      	movs	r3, #1
    5f16:	9303      	str	r3, [sp, #12]
    5f18:	e003      	b.n	5f22 <Power_Ip_SetMode+0x26>
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
        Power_Ip_PrepareLowPowerMode(PowerMode);
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */

        /* Request new mode transition to SMC. */
    PowerSwitchMode = Call_Power_Ip_SMC_ModeConfig(ModeConfigPtr);
    5f1a:	9801      	ldr	r0, [sp, #4]
    5f1c:	f000 fa1e 	bl	635c <Power_Ip_SMC_ModeConfig>
    5f20:	9003      	str	r0, [sp, #12]
            /*This will clear SLEEPDEEP bit after wake-up */
            Call_Power_Ip_CM4_DisableDeepSleep();
        }
#endif
    }
    if (POWER_IP_SWITCH_MODE_FAIL == PowerSwitchMode)
    5f22:	9b03      	ldr	r3, [sp, #12]
    5f24:	2b01      	cmp	r3, #1
    5f26:	d103      	bne.n	5f30 <Power_Ip_SetMode+0x34>
    {
        Power_Ip_ReportPowerErrors(POWER_IP_REPORT_SWITCH_MODE_ERROR, POWER_IP_ERR_CODE_RESERVED);
    5f28:	21ff      	movs	r1, #255	; 0xff
    5f2a:	2003      	movs	r0, #3
    5f2c:	f000 f8f4 	bl	6118 <Power_Ip_ReportPowerErrors>
        ModeChanged = Power_Ip_ModeConvert(PowerMode);
        /* Callback Clock Ip Notification. */
        Clock_Ip_PowerModeChangeNotification(ModeChanged,ModeChangeStatus);
#endif
    }
}
    5f30:	bf00      	nop
    5f32:	b005      	add	sp, #20
    5f34:	f85d fb04 	ldr.w	pc, [sp], #4

00005f38 <Power_Ip_ConvertIntergeToResetType>:
* @param[in]        ResetReasonIndex   Reset reason index.
*
* @return           Power_Ip_ResetType
*/
static Power_Ip_ResetType Power_Ip_ConvertIntergeToResetType(uint32 ResetReasonIndex)
{
    5f38:	b084      	sub	sp, #16
    5f3a:	9001      	str	r0, [sp, #4]
    Power_Ip_ResetType ResetReason = MCU_NO_RESET_REASON;
    5f3c:	230c      	movs	r3, #12
    5f3e:	9303      	str	r3, [sp, #12]

    if (ResetReasonArray[ResetReasonIndex] <= MCU_RESET_UNDEFINED)
    5f40:	4a08      	ldr	r2, [pc, #32]	; (5f64 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5f42:	9b01      	ldr	r3, [sp, #4]
    5f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f48:	2b0e      	cmp	r3, #14
    5f4a:	d805      	bhi.n	5f58 <Power_Ip_ConvertIntergeToResetType+0x20>
    {
        ResetReason = ResetReasonArray[ResetReasonIndex];
    5f4c:	4a05      	ldr	r2, [pc, #20]	; (5f64 <Power_Ip_ConvertIntergeToResetType+0x2c>)
    5f4e:	9b01      	ldr	r3, [sp, #4]
    5f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5f54:	9303      	str	r3, [sp, #12]
    5f56:	e001      	b.n	5f5c <Power_Ip_ConvertIntergeToResetType+0x24>
    }
    else
    {
        ResetReason = MCU_NO_RESET_REASON;
    5f58:	230c      	movs	r3, #12
    5f5a:	9303      	str	r3, [sp, #12]
    }

    return ResetReason;
    5f5c:	9b03      	ldr	r3, [sp, #12]
}
    5f5e:	4618      	mov	r0, r3
    5f60:	b004      	add	sp, #16
    5f62:	4770      	bx	lr
    5f64:	00010160 	.word	0x00010160

00005f68 <Power_Ip_GetResetReason>:
*
* @implements Power_Ip_GetResetReason_Activity
*
*/
Power_Ip_ResetType Power_Ip_GetResetReason(void)
{
    5f68:	b500      	push	{lr}
    5f6a:	b083      	sub	sp, #12
    Power_Ip_ResetType ResetReason;
    uint32 ResetVal;

    ResetVal = Call_Power_Ip_RCM_GetResetReason();
    5f6c:	f000 f940 	bl	61f0 <Power_Ip_RCM_GetResetReason>
    5f70:	9001      	str	r0, [sp, #4]

    /* Use function Power_Ip_ConvertIntergeToResetType to avoid MISRA violation 10.5 : cast from uint32 to enum */
    ResetReason = Power_Ip_ConvertIntergeToResetType(ResetVal);
    5f72:	9801      	ldr	r0, [sp, #4]
    5f74:	f7ff ffe0 	bl	5f38 <Power_Ip_ConvertIntergeToResetType>
    5f78:	9000      	str	r0, [sp, #0]

    return (Power_Ip_ResetType) ResetReason;
    5f7a:	9b00      	ldr	r3, [sp, #0]
}
    5f7c:	4618      	mov	r0, r3
    5f7e:	b003      	add	sp, #12
    5f80:	f85d fb04 	ldr.w	pc, [sp], #4

00005f84 <Power_Ip_GetResetRawValue>:
*
* @implements Power_Ip_GetResetRawValue_Activity
*
*/
Power_Ip_RawResetType Power_Ip_GetResetRawValue(void)
{
    5f84:	b500      	push	{lr}
    5f86:	b083      	sub	sp, #12
    Power_Ip_RawResetType ResetReason;

    ResetReason = (Power_Ip_RawResetType)Call_Power_Ip_RCM_GetResetRawValue();
    5f88:	f000 f98a 	bl	62a0 <Power_Ip_RCM_GetResetRawValue>
    5f8c:	9001      	str	r0, [sp, #4]
    return (Power_Ip_RawResetType) ResetReason;
    5f8e:	9b01      	ldr	r3, [sp, #4]
}
    5f90:	4618      	mov	r0, r3
    5f92:	b003      	add	sp, #12
    5f94:	f85d fb04 	ldr.w	pc, [sp], #4

00005f98 <Power_Ip_Init>:
*
* @implements Power_Ip_Init_Activity
*
*/
void Power_Ip_Init (const Power_Ip_HwIPsConfigType * HwIPsConfigPtr)
{
    5f98:	b500      	push	{lr}
    5f9a:	b083      	sub	sp, #12
    5f9c:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != HwIPsConfigPtr);
    (void)(HwIPsConfigPtr);

#if (defined(POWER_IP_DISABLE_RCM_INIT) && (STD_OFF == POWER_IP_DISABLE_RCM_INIT))
    /* Init the RCM */
    Call_Power_Ip_RCM_ResetInit(HwIPsConfigPtr->RCMConfigPtr);
    5f9e:	9b01      	ldr	r3, [sp, #4]
    5fa0:	681b      	ldr	r3, [r3, #0]
    5fa2:	4618      	mov	r0, r3
    5fa4:	f000 f90e 	bl	61c4 <Power_Ip_RCM_ResetInit>
#endif

#if (defined(POWER_IP_DISABLE_PMC_INIT) && (STD_OFF == POWER_IP_DISABLE_PMC_INIT))
    Call_Power_Ip_PMC_PowerInit(HwIPsConfigPtr->PMCConfigPtr);
    5fa8:	9b01      	ldr	r3, [sp, #4]
    5faa:	685b      	ldr	r3, [r3, #4]
    5fac:	4618      	mov	r0, r3
    5fae:	f000 f86d 	bl	608c <Power_Ip_PMC_PowerInit>
#endif

#if (defined(POWER_IP_DISABLE_SMC_INIT) && (STD_OFF == POWER_IP_DISABLE_SMC_INIT))
    Call_Power_Ip_SMC_AllowedModesConfig(HwIPsConfigPtr->SMCConfigPtr);
    5fb2:	9b01      	ldr	r3, [sp, #4]
    5fb4:	689b      	ldr	r3, [r3, #8]
    5fb6:	4618      	mov	r0, r3
    5fb8:	f000 f990 	bl	62dc <Power_Ip_SMC_AllowedModesConfig>
#endif
}
    5fbc:	bf00      	nop
    5fbe:	b003      	add	sp, #12
    5fc0:	f85d fb04 	ldr.w	pc, [sp], #4

00005fc4 <Power_Ip_DisableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_DisableSleepOnExit_Activity
*/
void Power_Ip_DisableSleepOnExit(void)
{
    5fc4:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_DisableSleepOnExit();
    5fc6:	f000 f811 	bl	5fec <Power_Ip_CM4_DisableSleepOnExit>
}
    5fca:	bf00      	nop
    5fcc:	bd08      	pop	{r3, pc}

00005fce <Power_Ip_EnableSleepOnExit>:
* @param[in]    none
* @return void
* @implements Power_Ip_EnableSleepOnExit_Activity
*/
void Power_Ip_EnableSleepOnExit(void)
{
    5fce:	b508      	push	{r3, lr}
    Call_Power_Ip_CM4_EnableSleepOnExit();
    5fd0:	f000 f820 	bl	6014 <Power_Ip_CM4_EnableSleepOnExit>
}
    5fd4:	bf00      	nop
    5fd6:	bd08      	pop	{r3, pc}

00005fd8 <Power_Ip_InstallNotificationsCallback>:
* @return           void
*
* @implements Power_Ip_InstallNotificationsCallback_Activity
*/
void Power_Ip_InstallNotificationsCallback(Power_Ip_ReportErrorsCallbackType ReportErrorsCallback)
{
    5fd8:	b082      	sub	sp, #8
    5fda:	9001      	str	r0, [sp, #4]
    POWER_IP_DEV_ASSERT(NULL_PTR != ReportErrorsCallback);

    Power_Ip_pfReportErrorsCallback = ReportErrorsCallback;
    5fdc:	4a02      	ldr	r2, [pc, #8]	; (5fe8 <Power_Ip_InstallNotificationsCallback+0x10>)
    5fde:	9b01      	ldr	r3, [sp, #4]
    5fe0:	6013      	str	r3, [r2, #0]
}
    5fe2:	bf00      	nop
    5fe4:	b002      	add	sp, #8
    5fe6:	4770      	bx	lr
    5fe8:	1fff8b1c 	.word	0x1fff8b1c

00005fec <Power_Ip_CM4_DisableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableSleepOnExit(void)
{
    5fec:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    5fee:	2300      	movs	r3, #0
    5ff0:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    5ff2:	4b07      	ldr	r3, [pc, #28]	; (6010 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    5ff4:	681b      	ldr	r3, [r3, #0]
    5ff6:	685b      	ldr	r3, [r3, #4]
    5ff8:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPONEXIT_MASK32);
    5ffa:	9b01      	ldr	r3, [sp, #4]
    5ffc:	f023 0302 	bic.w	r3, r3, #2
    6000:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6002:	4b03      	ldr	r3, [pc, #12]	; (6010 <Power_Ip_CM4_DisableSleepOnExit+0x24>)
    6004:	681b      	ldr	r3, [r3, #0]
    6006:	9a01      	ldr	r2, [sp, #4]
    6008:	605a      	str	r2, [r3, #4]
}
    600a:	bf00      	nop
    600c:	b002      	add	sp, #8
    600e:	4770      	bx	lr
    6010:	1fff8b20 	.word	0x1fff8b20

00006014 <Power_Ip_CM4_EnableSleepOnExit>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableSleepOnExit(void)
{
    6014:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6016:	2300      	movs	r3, #0
    6018:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    601a:	4b07      	ldr	r3, [pc, #28]	; (6038 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    601c:	681b      	ldr	r3, [r3, #0]
    601e:	685b      	ldr	r3, [r3, #4]
    6020:	9301      	str	r3, [sp, #4]
    TempValue |= (CM4_SCR_SLEEPONEXIT_MASK32);
    6022:	9b01      	ldr	r3, [sp, #4]
    6024:	f043 0302 	orr.w	r3, r3, #2
    6028:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    602a:	4b03      	ldr	r3, [pc, #12]	; (6038 <Power_Ip_CM4_EnableSleepOnExit+0x24>)
    602c:	681b      	ldr	r3, [r3, #0]
    602e:	9a01      	ldr	r2, [sp, #4]
    6030:	605a      	str	r2, [r3, #4]
}
    6032:	bf00      	nop
    6034:	b002      	add	sp, #8
    6036:	4770      	bx	lr
    6038:	1fff8b20 	.word	0x1fff8b20

0000603c <Power_Ip_CM4_EnableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_EnableDeepSleep(void)
{
    603c:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    603e:	2300      	movs	r3, #0
    6040:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    6042:	4b07      	ldr	r3, [pc, #28]	; (6060 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6044:	681b      	ldr	r3, [r3, #0]
    6046:	685b      	ldr	r3, [r3, #4]
    6048:	9301      	str	r3, [sp, #4]
    TempValue |= CM4_SCR_SLEEPDEEP_MASK32;
    604a:	9b01      	ldr	r3, [sp, #4]
    604c:	f043 0304 	orr.w	r3, r3, #4
    6050:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    6052:	4b03      	ldr	r3, [pc, #12]	; (6060 <Power_Ip_CM4_EnableDeepSleep+0x24>)
    6054:	681b      	ldr	r3, [r3, #0]
    6056:	9a01      	ldr	r2, [sp, #4]
    6058:	605a      	str	r2, [r3, #4]
}
    605a:	bf00      	nop
    605c:	b002      	add	sp, #8
    605e:	4770      	bx	lr
    6060:	1fff8b20 	.word	0x1fff8b20

00006064 <Power_Ip_CM4_DisableDeepSleep>:
* @param[in]    none
*
* @return void
*/
void Power_Ip_CM4_DisableDeepSleep(void)
{
    6064:	b082      	sub	sp, #8
    uint32 TempValue = 0;
    6066:	2300      	movs	r3, #0
    6068:	9301      	str	r3, [sp, #4]

    TempValue = Power_Ip_pxCM4->SCR;
    606a:	4b07      	ldr	r3, [pc, #28]	; (6088 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    606c:	681b      	ldr	r3, [r3, #0]
    606e:	685b      	ldr	r3, [r3, #4]
    6070:	9301      	str	r3, [sp, #4]
    TempValue &= ~(CM4_SCR_SLEEPDEEP_MASK32);
    6072:	9b01      	ldr	r3, [sp, #4]
    6074:	f023 0304 	bic.w	r3, r3, #4
    6078:	9301      	str	r3, [sp, #4]
    Power_Ip_pxCM4->SCR = TempValue;
    607a:	4b03      	ldr	r3, [pc, #12]	; (6088 <Power_Ip_CM4_DisableDeepSleep+0x24>)
    607c:	681b      	ldr	r3, [r3, #0]
    607e:	9a01      	ldr	r2, [sp, #4]
    6080:	605a      	str	r2, [r3, #4]
}
    6082:	bf00      	nop
    6084:	b002      	add	sp, #8
    6086:	4770      	bx	lr
    6088:	1fff8b20 	.word	0x1fff8b20

0000608c <Power_Ip_PMC_PowerInit>:
*
* @return           void
*
*/
void Power_Ip_PMC_PowerInit(const Power_Ip_PMC_ConfigType * ConfigPtr)
{
    608c:	b084      	sub	sp, #16
    608e:	9001      	str	r0, [sp, #4]
    uint8 Tmp;

#if(STD_ON == POWER_IP_PMC_LVDSC1_SUPPORT)
    Tmp = (uint8)POWER_IP_PMC->LVDSC1;
    6090:	4b20      	ldr	r3, [pc, #128]	; (6114 <Power_Ip_PMC_PowerInit+0x88>)
    6092:	781b      	ldrb	r3, [r3, #0]
    6094:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC1_RWBITS_MASK8));
    6098:	f89d 300f 	ldrb.w	r3, [sp, #15]
    609c:	f003 030f 	and.w	r3, r3, #15
    60a0:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc1));
    60a4:	9b01      	ldr	r3, [sp, #4]
    60a6:	781a      	ldrb	r2, [r3, #0]
    60a8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60ac:	4313      	orrs	r3, r2
    60ae:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC1 = Tmp;
    60b2:	4a18      	ldr	r2, [pc, #96]	; (6114 <Power_Ip_PMC_PowerInit+0x88>)
    60b4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60b8:	7013      	strb	r3, [r2, #0]
#endif
    Tmp = (uint8)POWER_IP_PMC->LVDSC2;
    60ba:	4b16      	ldr	r3, [pc, #88]	; (6114 <Power_Ip_PMC_PowerInit+0x88>)
    60bc:	785b      	ldrb	r3, [r3, #1]
    60be:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_LVDSC2_RWBITS_MASK8));
    60c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60c6:	f003 031f 	and.w	r3, r3, #31
    60ca:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Lvdsc2));
    60ce:	9b01      	ldr	r3, [sp, #4]
    60d0:	785a      	ldrb	r2, [r3, #1]
    60d2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60d6:	4313      	orrs	r3, r2
    60d8:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->LVDSC2 = Tmp;
    60dc:	4a0d      	ldr	r2, [pc, #52]	; (6114 <Power_Ip_PMC_PowerInit+0x88>)
    60de:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60e2:	7053      	strb	r3, [r2, #1]

    Tmp = (uint8)POWER_IP_PMC->REGSC;
    60e4:	4b0b      	ldr	r3, [pc, #44]	; (6114 <Power_Ip_PMC_PowerInit+0x88>)
    60e6:	789b      	ldrb	r3, [r3, #2]
    60e8:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp & (uint8)(~PMC_REGSC_RWBITS_MASK8));
    60ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    60f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    60f4:	f88d 300f 	strb.w	r3, [sp, #15]
    Tmp = (uint8)(Tmp | (uint8)(ConfigPtr->Regsc));
    60f8:	9b01      	ldr	r3, [sp, #4]
    60fa:	789a      	ldrb	r2, [r3, #2]
    60fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6100:	4313      	orrs	r3, r2
    6102:	f88d 300f 	strb.w	r3, [sp, #15]
    POWER_IP_PMC->REGSC = Tmp;
    6106:	4a03      	ldr	r2, [pc, #12]	; (6114 <Power_Ip_PMC_PowerInit+0x88>)
    6108:	f89d 300f 	ldrb.w	r3, [sp, #15]
    610c:	7093      	strb	r3, [r2, #2]
  #if (POWER_IP_VOLTAGE_ERROR_ISR_USED == STD_ON)
    /* make Status of PMC to initialized to check in the interrupt function */
    Power_Ip_ePmcStatus = PMC_INIT;
  #endif
#endif
}
    610e:	bf00      	nop
    6110:	b004      	add	sp, #16
    6112:	4770      	bx	lr
    6114:	4007d000 	.word	0x4007d000

00006118 <Power_Ip_ReportPowerErrors>:

/*==================================================================================================
                                       GLOBAL FUNCTIONS
==================================================================================================*/
void Power_Ip_ReportPowerErrors(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6118:	b500      	push	{lr}
    611a:	b083      	sub	sp, #12
    611c:	9001      	str	r0, [sp, #4]
    611e:	460b      	mov	r3, r1
    6120:	f88d 3003 	strb.w	r3, [sp, #3]
    Power_Ip_pfReportErrorsCallback(Error, ErrorCode);
    6124:	4b05      	ldr	r3, [pc, #20]	; (613c <Power_Ip_ReportPowerErrors+0x24>)
    6126:	681b      	ldr	r3, [r3, #0]
    6128:	f89d 2003 	ldrb.w	r2, [sp, #3]
    612c:	4611      	mov	r1, r2
    612e:	9801      	ldr	r0, [sp, #4]
    6130:	4798      	blx	r3
}
    6132:	bf00      	nop
    6134:	b003      	add	sp, #12
    6136:	f85d fb04 	ldr.w	pc, [sp], #4
    613a:	bf00      	nop
    613c:	1fff8b1c 	.word	0x1fff8b1c

00006140 <Power_Ip_ReportPowerErrorsEmptyCallback>:

void Power_Ip_ReportPowerErrorsEmptyCallback(Power_Ip_ReportErrorType Error, uint8 ErrorCode)
{
    6140:	b082      	sub	sp, #8
    6142:	9001      	str	r0, [sp, #4]
    6144:	460b      	mov	r3, r1
    6146:	f88d 3003 	strb.w	r3, [sp, #3]
    /* No implementation */
    (void)Error;
    (void)ErrorCode;
}
    614a:	bf00      	nop
    614c:	b002      	add	sp, #8
    614e:	4770      	bx	lr

00006150 <Power_Ip_StartTimeout>:
 *END**************************************************************************/
void Power_Ip_StartTimeout(uint32 *StartTimeOut,
                       uint32 *ElapsedTimeOut,
                       uint32 *TimeoutTicksOut,
                       uint32 TimeoutUs)
{
    6150:	b500      	push	{lr}
    6152:	b085      	sub	sp, #20
    6154:	9003      	str	r0, [sp, #12]
    6156:	9102      	str	r1, [sp, #8]
    6158:	9201      	str	r2, [sp, #4]
    615a:	9300      	str	r3, [sp, #0]
    *StartTimeOut    = OsIf_GetCounter(POWER_IP_TIMEOUT_TYPE);
    615c:	2000      	movs	r0, #0
    615e:	f7fc f83d 	bl	21dc <OsIf_GetCounter>
    6162:	4602      	mov	r2, r0
    6164:	9b03      	ldr	r3, [sp, #12]
    6166:	601a      	str	r2, [r3, #0]
    *ElapsedTimeOut  = 0U;
    6168:	9b02      	ldr	r3, [sp, #8]
    616a:	2200      	movs	r2, #0
    616c:	601a      	str	r2, [r3, #0]
    *TimeoutTicksOut = OsIf_MicrosToTicks(TimeoutUs, POWER_IP_TIMEOUT_TYPE);
    616e:	2100      	movs	r1, #0
    6170:	9800      	ldr	r0, [sp, #0]
    6172:	f7fc f87f 	bl	2274 <OsIf_MicrosToTicks>
    6176:	4602      	mov	r2, r0
    6178:	9b01      	ldr	r3, [sp, #4]
    617a:	601a      	str	r2, [r3, #0]
}
    617c:	bf00      	nop
    617e:	b005      	add	sp, #20
    6180:	f85d fb04 	ldr.w	pc, [sp], #4

00006184 <Power_Ip_TimeoutExpired>:
 *
 *END**************************************************************************/
boolean Power_Ip_TimeoutExpired(uint32 *StartTimeInOut,
                            uint32 *ElapsedTimeInOut,
                            uint32 TimeoutTicks)
{
    6184:	b500      	push	{lr}
    6186:	b087      	sub	sp, #28
    6188:	9003      	str	r0, [sp, #12]
    618a:	9102      	str	r1, [sp, #8]
    618c:	9201      	str	r2, [sp, #4]
    boolean RetVal = FALSE;
    618e:	2300      	movs	r3, #0
    6190:	f88d 3017 	strb.w	r3, [sp, #23]
    *ElapsedTimeInOut += OsIf_GetElapsed(StartTimeInOut, POWER_IP_TIMEOUT_TYPE);
    6194:	2100      	movs	r1, #0
    6196:	9803      	ldr	r0, [sp, #12]
    6198:	f7fc f839 	bl	220e <OsIf_GetElapsed>
    619c:	4602      	mov	r2, r0
    619e:	9b02      	ldr	r3, [sp, #8]
    61a0:	681b      	ldr	r3, [r3, #0]
    61a2:	441a      	add	r2, r3
    61a4:	9b02      	ldr	r3, [sp, #8]
    61a6:	601a      	str	r2, [r3, #0]

    if (*ElapsedTimeInOut >= TimeoutTicks)
    61a8:	9b02      	ldr	r3, [sp, #8]
    61aa:	681b      	ldr	r3, [r3, #0]
    61ac:	9a01      	ldr	r2, [sp, #4]
    61ae:	429a      	cmp	r2, r3
    61b0:	d802      	bhi.n	61b8 <Power_Ip_TimeoutExpired+0x34>
    {
        RetVal = TRUE;
    61b2:	2301      	movs	r3, #1
    61b4:	f88d 3017 	strb.w	r3, [sp, #23]
    }
    return RetVal;
    61b8:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    61bc:	4618      	mov	r0, r3
    61be:	b007      	add	sp, #28
    61c0:	f85d fb04 	ldr.w	pc, [sp], #4

000061c4 <Power_Ip_RCM_ResetInit>:
*
* @return           void
*
*/
void Power_Ip_RCM_ResetInit(const Power_Ip_RCM_ConfigType * ConfigPtr)
{
    61c4:	b082      	sub	sp, #8
    61c6:	9001      	str	r0, [sp, #4]
    IP_RCM->RPC = (uint32)(ConfigPtr->ResetPinControlConfig & RCM_RPC_RWBITS_MASK32);
    61c8:	9b01      	ldr	r3, [sp, #4]
    61ca:	681a      	ldr	r2, [r3, #0]
    61cc:	4907      	ldr	r1, [pc, #28]	; (61ec <Power_Ip_RCM_ResetInit+0x28>)
    61ce:	f641 7307 	movw	r3, #7943	; 0x1f07
    61d2:	4013      	ands	r3, r2
    61d4:	60cb      	str	r3, [r1, #12]

    IP_RCM->SRIE = (uint32)(ConfigPtr->ResetInterruptEnableConfig & RCM_SRIE_RWBITS_MASK32);
    61d6:	9b01      	ldr	r3, [sp, #4]
    61d8:	685a      	ldr	r2, [r3, #4]
    61da:	4904      	ldr	r1, [pc, #16]	; (61ec <Power_Ip_RCM_ResetInit+0x28>)
    61dc:	f642 73ff 	movw	r3, #12287	; 0x2fff
    61e0:	4013      	ands	r3, r2
    61e2:	61cb      	str	r3, [r1, #28]
#if (defined(POWER_IP_RESET_ALTERNATE_ISR_USED) && (POWER_IP_RESET_ALTERNATE_ISR_USED == STD_ON))
    Power_Ip_RCM_Status = POWER_IP_RCM_INIT;
#endif
}
    61e4:	bf00      	nop
    61e6:	b002      	add	sp, #8
    61e8:	4770      	bx	lr
    61ea:	bf00      	nop
    61ec:	4007f000 	.word	0x4007f000

000061f0 <Power_Ip_RCM_GetResetReason>:
*                   out to avoid multiple reset reasons. The function Mcu_GetResetReason shall
*                   return MCU_RESET_UNDEFINED if this function is called prior to calling of the
*                   function Mcu_Init, and if supported by the hardware.
*/
uint32 Power_Ip_RCM_GetResetReason(void)
{
    61f0:	b088      	sub	sp, #32
    /* Code for the Reset event returned by this function. */
    uint32 ResetReason = (uint32)MCU_NO_RESET_REASON;
    61f2:	230c      	movs	r3, #12
    61f4:	9307      	str	r3, [sp, #28]
    /* Temporary variable for RCM_RSR register value. */
    uint32 RegValue = 0U;
    61f6:	2300      	movs	r3, #0
    61f8:	9303      	str	r3, [sp, #12]
    uint32 ActiveValue;
    uint32 Index;
    uint32 DynamicMask;
    uint32 Position = (uint32)0x00U;
    61fa:	2300      	movs	r3, #0
    61fc:	9305      	str	r3, [sp, #20]
    uint32 NumberOfFlags = 0U;
    61fe:	2300      	movs	r3, #0
    6200:	9304      	str	r3, [sp, #16]

    /* Check reset reasons from SSRS Status Register. */
    RegValue = (uint32) IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    6202:	4b25      	ldr	r3, [pc, #148]	; (6298 <Power_Ip_RCM_GetResetReason+0xa8>)
    6204:	699a      	ldr	r2, [r3, #24]
    6206:	f642 73ee 	movw	r3, #12270	; 0x2fee
    620a:	4013      	ands	r3, r2
    620c:	9303      	str	r3, [sp, #12]

    /* Store the content of RSR */
    if ((uint32)0U != RegValue)
    620e:	9b03      	ldr	r3, [sp, #12]
    6210:	2b00      	cmp	r3, #0
    6212:	d008      	beq.n	6226 <Power_Ip_RCM_GetResetReason+0x36>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    6214:	4920      	ldr	r1, [pc, #128]	; (6298 <Power_Ip_RCM_GetResetReason+0xa8>)
    6216:	9a03      	ldr	r2, [sp, #12]
    6218:	f642 73ee 	movw	r3, #12270	; 0x2fee
    621c:	4013      	ands	r3, r2
    621e:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    6220:	4a1e      	ldr	r2, [pc, #120]	; (629c <Power_Ip_RCM_GetResetReason+0xac>)
    6222:	9b03      	ldr	r3, [sp, #12]
    6224:	6013      	str	r3, [r2, #0]
    }
    ActiveValue = Power_Ip_u32ResetStatus;
    6226:	4b1d      	ldr	r3, [pc, #116]	; (629c <Power_Ip_RCM_GetResetReason+0xac>)
    6228:	681b      	ldr	r3, [r3, #0]
    622a:	9302      	str	r3, [sp, #8]

    if((RCM_SSRS_SLVD_MASK | RCM_SSRS_SPOR_MASK) == (ActiveValue & RCM_SSRS_RWBITS_MASK32))
    622c:	9a02      	ldr	r2, [sp, #8]
    622e:	f642 73ee 	movw	r3, #12270	; 0x2fee
    6232:	4013      	ands	r3, r2
    6234:	2b82      	cmp	r3, #130	; 0x82
    6236:	d102      	bne.n	623e <Power_Ip_RCM_GetResetReason+0x4e>
    {
        ResetReason = (uint32)MCU_POWER_ON_RESET;
    6238:	2305      	movs	r3, #5
    623a:	9307      	str	r3, [sp, #28]
    623c:	e027      	b.n	628e <Power_Ip_RCM_GetResetReason+0x9e>
    }
    else
    {
        for (Index = 0x00U; Index < 0x20U; Index++)
    623e:	2300      	movs	r3, #0
    6240:	9306      	str	r3, [sp, #24]
    6242:	e021      	b.n	6288 <Power_Ip_RCM_GetResetReason+0x98>
        {
            DynamicMask = ((uint32)0x80000000U >> Index);
    6244:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6248:	9b06      	ldr	r3, [sp, #24]
    624a:	fa22 f303 	lsr.w	r3, r2, r3
    624e:	9301      	str	r3, [sp, #4]
            if ((uint32)0x00U != (DynamicMask & RCM_SSRS_RESET_SOURCES_MASK32))
    6250:	9a01      	ldr	r2, [sp, #4]
    6252:	f642 73fe 	movw	r3, #12286	; 0x2ffe
    6256:	4013      	ands	r3, r2
    6258:	2b00      	cmp	r3, #0
    625a:	d012      	beq.n	6282 <Power_Ip_RCM_GetResetReason+0x92>
            {
                if ((uint32)0x00U != (DynamicMask & ActiveValue))
    625c:	9a01      	ldr	r2, [sp, #4]
    625e:	9b02      	ldr	r3, [sp, #8]
    6260:	4013      	ands	r3, r2
    6262:	2b00      	cmp	r3, #0
    6264:	d00a      	beq.n	627c <Power_Ip_RCM_GetResetReason+0x8c>
                {
                    ResetReason = Position;
    6266:	9b05      	ldr	r3, [sp, #20]
    6268:	9307      	str	r3, [sp, #28]
                    NumberOfFlags++;
    626a:	9b04      	ldr	r3, [sp, #16]
    626c:	3301      	adds	r3, #1
    626e:	9304      	str	r3, [sp, #16]
                    /* MCU_MULTIPLE_RESET_REASON returned if more than one reset reason in this case use function Mcu_GetRawValue to determine. */
                    if (NumberOfFlags >= (uint32)2)
    6270:	9b04      	ldr	r3, [sp, #16]
    6272:	2b01      	cmp	r3, #1
    6274:	d902      	bls.n	627c <Power_Ip_RCM_GetResetReason+0x8c>
                    {
                        ResetReason = (uint32)MCU_MULTIPLE_RESET_REASON;
    6276:	230d      	movs	r3, #13
    6278:	9307      	str	r3, [sp, #28]
                        break;
    627a:	e008      	b.n	628e <Power_Ip_RCM_GetResetReason+0x9e>
                    }
                }
                Position++;
    627c:	9b05      	ldr	r3, [sp, #20]
    627e:	3301      	adds	r3, #1
    6280:	9305      	str	r3, [sp, #20]
        for (Index = 0x00U; Index < 0x20U; Index++)
    6282:	9b06      	ldr	r3, [sp, #24]
    6284:	3301      	adds	r3, #1
    6286:	9306      	str	r3, [sp, #24]
    6288:	9b06      	ldr	r3, [sp, #24]
    628a:	2b1f      	cmp	r3, #31
    628c:	d9da      	bls.n	6244 <Power_Ip_RCM_GetResetReason+0x54>
            }
        }
    }
    return ResetReason;
    628e:	9b07      	ldr	r3, [sp, #28]
}
    6290:	4618      	mov	r0, r3
    6292:	b008      	add	sp, #32
    6294:	4770      	bx	lr
    6296:	bf00      	nop
    6298:	4007f000 	.word	0x4007f000
    629c:	1fff8cfc 	.word	0x1fff8cfc

000062a0 <Power_Ip_RCM_GetResetRawValue>:
* @note             The User should ensure that the reset reason is cleared once it has been read
*                   out to avoid multiple reset reasons.
*
*/
Power_Ip_RawResetType Power_Ip_RCM_GetResetRawValue(void)
{
    62a0:	b082      	sub	sp, #8
    uint32 RawReset;
    uint32 RegValue;

    RegValue = IP_RCM->SSRS & RCM_SSRS_RWBITS_MASK32;
    62a2:	4b0c      	ldr	r3, [pc, #48]	; (62d4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    62a4:	699a      	ldr	r2, [r3, #24]
    62a6:	f642 73ee 	movw	r3, #12270	; 0x2fee
    62aa:	4013      	ands	r3, r2
    62ac:	9301      	str	r3, [sp, #4]

    if ((uint32)0U != RegValue)
    62ae:	9b01      	ldr	r3, [sp, #4]
    62b0:	2b00      	cmp	r3, #0
    62b2:	d008      	beq.n	62c6 <Power_Ip_RCM_GetResetRawValue+0x26>
    {
        /* Clear the flags if any flag is set */
        IP_RCM->SSRS = (uint32)(RegValue & RCM_SSRS_RWBITS_MASK32);
    62b4:	4907      	ldr	r1, [pc, #28]	; (62d4 <Power_Ip_RCM_GetResetRawValue+0x34>)
    62b6:	9a01      	ldr	r2, [sp, #4]
    62b8:	f642 73ee 	movw	r3, #12270	; 0x2fee
    62bc:	4013      	ands	r3, r2
    62be:	618b      	str	r3, [r1, #24]

        Power_Ip_u32ResetStatus = RegValue;
    62c0:	4a05      	ldr	r2, [pc, #20]	; (62d8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    62c2:	9b01      	ldr	r3, [sp, #4]
    62c4:	6013      	str	r3, [r2, #0]
    }

    RawReset = Power_Ip_u32ResetStatus;
    62c6:	4b04      	ldr	r3, [pc, #16]	; (62d8 <Power_Ip_RCM_GetResetRawValue+0x38>)
    62c8:	681b      	ldr	r3, [r3, #0]
    62ca:	9300      	str	r3, [sp, #0]

    return (Power_Ip_RawResetType)RawReset;
    62cc:	9b00      	ldr	r3, [sp, #0]
}
    62ce:	4618      	mov	r0, r3
    62d0:	b002      	add	sp, #8
    62d2:	4770      	bx	lr
    62d4:	4007f000 	.word	0x4007f000
    62d8:	1fff8cfc 	.word	0x1fff8cfc

000062dc <Power_Ip_SMC_AllowedModesConfig>:
*
* @details          This function is only called at Mcu initialization
*
*/
void Power_Ip_SMC_AllowedModesConfig(const Power_Ip_SMC_ConfigType * ConfigPtr)
{
    62dc:	b082      	sub	sp, #8
    62de:	9001      	str	r0, [sp, #4]
    IP_SMC->PMPROT = ConfigPtr->AllowedModes & SMC_PMPROT_RWBITS_MASK32;
    62e0:	9b01      	ldr	r3, [sp, #4]
    62e2:	681b      	ldr	r3, [r3, #0]
    62e4:	4a03      	ldr	r2, [pc, #12]	; (62f4 <Power_Ip_SMC_AllowedModesConfig+0x18>)
    62e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    62ea:	6093      	str	r3, [r2, #8]
}
    62ec:	bf00      	nop
    62ee:	b002      	add	sp, #8
    62f0:	4770      	bx	lr
    62f2:	bf00      	nop
    62f4:	4007e000 	.word	0x4007e000

000062f8 <Power_Ip_SMC_ModeCheckEntry>:
*
* @return           Power_Ip_SMC_ModeStatusType
*
*/
Power_Ip_SMC_ModeStatusType Power_Ip_SMC_ModeCheckEntry(Power_Ip_PowerModeType PowerMode)
{
    62f8:	b084      	sub	sp, #16
    62fa:	9001      	str	r0, [sp, #4]
    Power_Ip_SMC_ModeStatusType PowerModeCheck = POWER_IP_MODE_NOT_OK;
    62fc:	2301      	movs	r3, #1
    62fe:	9303      	str	r3, [sp, #12]
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    uint32 CurrentPowerMode;

    CurrentPowerMode = IP_SMC->PMSTAT & SMC_PMSTAT_PMSTAT_MASK;
    6300:	4b15      	ldr	r3, [pc, #84]	; (6358 <Power_Ip_SMC_ModeCheckEntry+0x60>)
    6302:	695b      	ldr	r3, [r3, #20]
    6304:	b2db      	uxtb	r3, r3
    6306:	9302      	str	r3, [sp, #8]

    switch (PowerMode)
    6308:	9b01      	ldr	r3, [sp, #4]
    630a:	2b02      	cmp	r3, #2
    630c:	d012      	beq.n	6334 <Power_Ip_SMC_ModeCheckEntry+0x3c>
    630e:	9b01      	ldr	r3, [sp, #4]
    6310:	2b02      	cmp	r3, #2
    6312:	d818      	bhi.n	6346 <Power_Ip_SMC_ModeCheckEntry+0x4e>
    6314:	9b01      	ldr	r3, [sp, #4]
    6316:	2b00      	cmp	r3, #0
    6318:	d003      	beq.n	6322 <Power_Ip_SMC_ModeCheckEntry+0x2a>
    631a:	9b01      	ldr	r3, [sp, #4]
    631c:	2b01      	cmp	r3, #1
    631e:	d003      	beq.n	6328 <Power_Ip_SMC_ModeCheckEntry+0x30>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /* Do nothing */
            break;
    6320:	e011      	b.n	6346 <Power_Ip_SMC_ModeCheckEntry+0x4e>
            PowerModeCheck = POWER_IP_MODE_OK;
    6322:	2300      	movs	r3, #0
    6324:	9303      	str	r3, [sp, #12]
            break;
    6326:	e013      	b.n	6350 <Power_Ip_SMC_ModeCheckEntry+0x58>
            if (SMC_PMSTAT_RUN_U32 == CurrentPowerMode)
    6328:	9b02      	ldr	r3, [sp, #8]
    632a:	2b01      	cmp	r3, #1
    632c:	d10d      	bne.n	634a <Power_Ip_SMC_ModeCheckEntry+0x52>
                PowerModeCheck = POWER_IP_MODE_OK;
    632e:	2300      	movs	r3, #0
    6330:	9303      	str	r3, [sp, #12]
            break;
    6332:	e00a      	b.n	634a <Power_Ip_SMC_ModeCheckEntry+0x52>
            if ((SMC_PMSTAT_RUN_U32 == CurrentPowerMode) || (SMC_PMSTAT_VLPS_U32 == CurrentPowerMode))
    6334:	9b02      	ldr	r3, [sp, #8]
    6336:	2b01      	cmp	r3, #1
    6338:	d002      	beq.n	6340 <Power_Ip_SMC_ModeCheckEntry+0x48>
    633a:	9b02      	ldr	r3, [sp, #8]
    633c:	2b10      	cmp	r3, #16
    633e:	d106      	bne.n	634e <Power_Ip_SMC_ModeCheckEntry+0x56>
                PowerModeCheck = POWER_IP_MODE_OK;
    6340:	2300      	movs	r3, #0
    6342:	9303      	str	r3, [sp, #12]
            break;
    6344:	e003      	b.n	634e <Power_Ip_SMC_ModeCheckEntry+0x56>
            break;
    6346:	bf00      	nop
    6348:	e002      	b.n	6350 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    634a:	bf00      	nop
    634c:	e000      	b.n	6350 <Power_Ip_SMC_ModeCheckEntry+0x58>
            break;
    634e:	bf00      	nop
        }
    }

    return PowerModeCheck;
    6350:	9b03      	ldr	r3, [sp, #12]
}
    6352:	4618      	mov	r0, r3
    6354:	b004      	add	sp, #16
    6356:	4770      	bx	lr
    6358:	4007e000 	.word	0x4007e000

0000635c <Power_Ip_SMC_ModeConfig>:
*
* @return           uint32
*
*/
uint32 Power_Ip_SMC_ModeConfig(const Power_Ip_ModeConfigType * ModeConfigPtr)
{
    635c:	b500      	push	{lr}
    635e:	b08b      	sub	sp, #44	; 0x2c
    6360:	9001      	str	r0, [sp, #4]
    uint32 PowerSwitchMode = POWER_IP_SWITCH_MODE_SUCCESS;
    6362:	2300      	movs	r3, #0
    6364:	9309      	str	r3, [sp, #36]	; 0x24
    /* Contains the code of the Power Mode (based PowerModeType enumeration). */
    Power_Ip_PowerModeType PowerMode = POWER_IP_RUN_MODE;
    6366:	2300      	movs	r3, #0
    6368:	9308      	str	r3, [sp, #32]
    uint32 RegValue = (uint32)0U;
#endif
    uint32 StartTime;
    uint32 ElapsedTime;
    uint32 TimeoutTicks;
    boolean TimeoutOccurred = FALSE;
    636a:	2300      	movs	r3, #0
    636c:	f88d 301f 	strb.w	r3, [sp, #31]

    PowerMode = ModeConfigPtr->PowerMode;
    6370:	9b01      	ldr	r3, [sp, #4]
    6372:	685b      	ldr	r3, [r3, #4]
    6374:	9308      	str	r3, [sp, #32]

    switch (PowerMode)
    6376:	9b08      	ldr	r3, [sp, #32]
    6378:	2b02      	cmp	r3, #2
    637a:	d076      	beq.n	646a <Power_Ip_SMC_ModeConfig+0x10e>
    637c:	9b08      	ldr	r3, [sp, #32]
    637e:	2b02      	cmp	r3, #2
    6380:	f200 80ab 	bhi.w	64da <Power_Ip_SMC_ModeConfig+0x17e>
    6384:	9b08      	ldr	r3, [sp, #32]
    6386:	2b00      	cmp	r3, #0
    6388:	d003      	beq.n	6392 <Power_Ip_SMC_ModeConfig+0x36>
    638a:	9b08      	ldr	r3, [sp, #32]
    638c:	2b01      	cmp	r3, #1
    638e:	d034      	beq.n	63fa <Power_Ip_SMC_ModeConfig+0x9e>
    6390:	e0a3      	b.n	64da <Power_Ip_SMC_ModeConfig+0x17e>
    {
        case (POWER_IP_RUN_MODE):
        {
            /* Set RUN mode */
            TempValue = IP_SMC->PMCTRL;
    6392:	4b58      	ldr	r3, [pc, #352]	; (64f4 <Power_Ip_SMC_ModeConfig+0x198>)
    6394:	68db      	ldr	r3, [r3, #12]
    6396:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6398:	9b06      	ldr	r3, [sp, #24]
    639a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    639e:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_RUN_MODE_U32;
            IP_SMC->PMCTRL = TempValue;
    63a0:	4a54      	ldr	r2, [pc, #336]	; (64f4 <Power_Ip_SMC_ModeConfig+0x198>)
    63a2:	9b06      	ldr	r3, [sp, #24]
    63a4:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    63a6:	aa02      	add	r2, sp, #8
    63a8:	a903      	add	r1, sp, #12
    63aa:	a804      	add	r0, sp, #16
    63ac:	f24c 3350 	movw	r3, #50000	; 0xc350
    63b0:	f7ff fece 	bl	6150 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    63b4:	9a02      	ldr	r2, [sp, #8]
    63b6:	a903      	add	r1, sp, #12
    63b8:	ab04      	add	r3, sp, #16
    63ba:	4618      	mov	r0, r3
    63bc:	f7ff fee2 	bl	6184 <Power_Ip_TimeoutExpired>
    63c0:	4603      	mov	r3, r0
    63c2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_RUN_U32);
    63c6:	4b4b      	ldr	r3, [pc, #300]	; (64f4 <Power_Ip_SMC_ModeConfig+0x198>)
    63c8:	695b      	ldr	r3, [r3, #20]
    63ca:	f003 0301 	and.w	r3, r3, #1
    63ce:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_RUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    63d0:	9b05      	ldr	r3, [sp, #20]
    63d2:	2b01      	cmp	r3, #1
    63d4:	d006      	beq.n	63e4 <Power_Ip_SMC_ModeConfig+0x88>
    63d6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    63da:	f083 0301 	eor.w	r3, r3, #1
    63de:	b2db      	uxtb	r3, r3
    63e0:	2b00      	cmp	r3, #0
    63e2:	d1e7      	bne.n	63b4 <Power_Ip_SMC_ModeConfig+0x58>
            if(TimeoutOccurred)
    63e4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    63e8:	2b00      	cmp	r3, #0
    63ea:	d079      	beq.n	64e0 <Power_Ip_SMC_ModeConfig+0x184>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    63ec:	2301      	movs	r3, #1
    63ee:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    63f0:	21ff      	movs	r1, #255	; 0xff
    63f2:	2000      	movs	r0, #0
    63f4:	f7ff fe90 	bl	6118 <Power_Ip_ReportPowerErrors>
            }

            break;
    63f8:	e072      	b.n	64e0 <Power_Ip_SMC_ModeConfig+0x184>
        }
        case (POWER_IP_HSRUN_MODE):
        {
            /* Set HSRUN mode. */
            TempValue = IP_SMC->PMCTRL;
    63fa:	4b3e      	ldr	r3, [pc, #248]	; (64f4 <Power_Ip_SMC_ModeConfig+0x198>)
    63fc:	68db      	ldr	r3, [r3, #12]
    63fe:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6400:	9b06      	ldr	r3, [sp, #24]
    6402:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6406:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_HSRUN_MODE_U32;
    6408:	9b06      	ldr	r3, [sp, #24]
    640a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    640e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6410:	4a38      	ldr	r2, [pc, #224]	; (64f4 <Power_Ip_SMC_ModeConfig+0x198>)
    6412:	9b06      	ldr	r3, [sp, #24]
    6414:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6416:	aa02      	add	r2, sp, #8
    6418:	a903      	add	r1, sp, #12
    641a:	a804      	add	r0, sp, #16
    641c:	f24c 3350 	movw	r3, #50000	; 0xc350
    6420:	f7ff fe96 	bl	6150 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6424:	9a02      	ldr	r2, [sp, #8]
    6426:	a903      	add	r1, sp, #12
    6428:	ab04      	add	r3, sp, #16
    642a:	4618      	mov	r0, r3
    642c:	f7ff feaa 	bl	6184 <Power_Ip_TimeoutExpired>
    6430:	4603      	mov	r3, r0
    6432:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_HSRUN_U32);
    6436:	4b2f      	ldr	r3, [pc, #188]	; (64f4 <Power_Ip_SMC_ModeConfig+0x198>)
    6438:	695b      	ldr	r3, [r3, #20]
    643a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    643e:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_HSRUN_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    6440:	9b05      	ldr	r3, [sp, #20]
    6442:	2b80      	cmp	r3, #128	; 0x80
    6444:	d006      	beq.n	6454 <Power_Ip_SMC_ModeConfig+0xf8>
    6446:	f89d 301f 	ldrb.w	r3, [sp, #31]
    644a:	f083 0301 	eor.w	r3, r3, #1
    644e:	b2db      	uxtb	r3, r3
    6450:	2b00      	cmp	r3, #0
    6452:	d1e7      	bne.n	6424 <Power_Ip_SMC_ModeConfig+0xc8>
            if(TimeoutOccurred)
    6454:	f89d 301f 	ldrb.w	r3, [sp, #31]
    6458:	2b00      	cmp	r3, #0
    645a:	d043      	beq.n	64e4 <Power_Ip_SMC_ModeConfig+0x188>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    645c:	2301      	movs	r3, #1
    645e:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    6460:	21ff      	movs	r1, #255	; 0xff
    6462:	2000      	movs	r0, #0
    6464:	f7ff fe58 	bl	6118 <Power_Ip_ReportPowerErrors>
            }

            break;
    6468:	e03c      	b.n	64e4 <Power_Ip_SMC_ModeConfig+0x188>
        }
        case (POWER_IP_VLPR_MODE):
        {
            /* Set VLPR mode. */
            TempValue = IP_SMC->PMCTRL;
    646a:	4b22      	ldr	r3, [pc, #136]	; (64f4 <Power_Ip_SMC_ModeConfig+0x198>)
    646c:	68db      	ldr	r3, [r3, #12]
    646e:	9306      	str	r3, [sp, #24]
            TempValue &= ~SMC_PMCTRL_RUNM_MASK;
    6470:	9b06      	ldr	r3, [sp, #24]
    6472:	f023 0360 	bic.w	r3, r3, #96	; 0x60
    6476:	9306      	str	r3, [sp, #24]
            TempValue |= SMC_PMCTRL_VLPR_MODE_U32;
    6478:	9b06      	ldr	r3, [sp, #24]
    647a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    647e:	9306      	str	r3, [sp, #24]
            IP_SMC->PMCTRL = TempValue;
    6480:	4a1c      	ldr	r2, [pc, #112]	; (64f4 <Power_Ip_SMC_ModeConfig+0x198>)
    6482:	9b06      	ldr	r3, [sp, #24]
    6484:	60d3      	str	r3, [r2, #12]

            /* Read back to make sure that mode changed successfuly */
            Power_Ip_StartTimeout(&StartTime, &ElapsedTime, &TimeoutTicks, POWER_IP_TIMEOUT_VALUE_US);
    6486:	aa02      	add	r2, sp, #8
    6488:	a903      	add	r1, sp, #12
    648a:	a804      	add	r0, sp, #16
    648c:	f24c 3350 	movw	r3, #50000	; 0xc350
    6490:	f7ff fe5e 	bl	6150 <Power_Ip_StartTimeout>
            do
            {
                TimeoutOccurred = Power_Ip_TimeoutExpired(&StartTime, &ElapsedTime, TimeoutTicks);
    6494:	9a02      	ldr	r2, [sp, #8]
    6496:	a903      	add	r1, sp, #12
    6498:	ab04      	add	r3, sp, #16
    649a:	4618      	mov	r0, r3
    649c:	f7ff fe72 	bl	6184 <Power_Ip_TimeoutExpired>
    64a0:	4603      	mov	r3, r0
    64a2:	f88d 301f 	strb.w	r3, [sp, #31]
                PowerModeStatus = (IP_SMC->PMSTAT & SMC_PMSTAT_VLPR_U32);
    64a6:	4b13      	ldr	r3, [pc, #76]	; (64f4 <Power_Ip_SMC_ModeConfig+0x198>)
    64a8:	695b      	ldr	r3, [r3, #20]
    64aa:	f003 0304 	and.w	r3, r3, #4
    64ae:	9305      	str	r3, [sp, #20]
            } while ( (SMC_PMSTAT_VLPR_U32 != PowerModeStatus) && (!TimeoutOccurred) );
    64b0:	9b05      	ldr	r3, [sp, #20]
    64b2:	2b04      	cmp	r3, #4
    64b4:	d006      	beq.n	64c4 <Power_Ip_SMC_ModeConfig+0x168>
    64b6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    64ba:	f083 0301 	eor.w	r3, r3, #1
    64be:	b2db      	uxtb	r3, r3
    64c0:	2b00      	cmp	r3, #0
    64c2:	d1e7      	bne.n	6494 <Power_Ip_SMC_ModeConfig+0x138>
            if(TimeoutOccurred)
    64c4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    64c8:	2b00      	cmp	r3, #0
    64ca:	d00d      	beq.n	64e8 <Power_Ip_SMC_ModeConfig+0x18c>
            {
                PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    64cc:	2301      	movs	r3, #1
    64ce:	9309      	str	r3, [sp, #36]	; 0x24
                Power_Ip_ReportPowerErrors(POWER_IP_REPORT_TIMEOUT_ERROR, POWER_IP_ERR_CODE_RESERVED);
    64d0:	21ff      	movs	r1, #255	; 0xff
    64d2:	2000      	movs	r0, #0
    64d4:	f7ff fe20 	bl	6118 <Power_Ip_ReportPowerErrors>
            }

            break;
    64d8:	e006      	b.n	64e8 <Power_Ip_SMC_ModeConfig+0x18c>
        }
#endif /* (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON) */
        default:
        {
            /*Only the above modes are allowed when this function is called*/
            PowerSwitchMode = POWER_IP_SWITCH_MODE_FAIL;
    64da:	2301      	movs	r3, #1
    64dc:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    64de:	e004      	b.n	64ea <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    64e0:	bf00      	nop
    64e2:	e002      	b.n	64ea <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    64e4:	bf00      	nop
    64e6:	e000      	b.n	64ea <Power_Ip_SMC_ModeConfig+0x18e>
            break;
    64e8:	bf00      	nop
#if (POWER_IP_ENTER_LOW_POWER_MODE == STD_ON)
    /* Avoid compiler warning */
    (void)RegValue;
#endif

    return PowerSwitchMode;
    64ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    64ec:	4618      	mov	r0, r3
    64ee:	b00b      	add	sp, #44	; 0x2c
    64f0:	f85d fb04 	ldr.w	pc, [sp], #4
    64f4:	4007e000 	.word	0x4007e000

000064f8 <Port_Init>:
*/
void Port_Init
(
    const Port_ConfigType * ConfigPtr
)
{
    64f8:	b500      	push	{lr}
    64fa:	b085      	sub	sp, #20
    64fc:	9001      	str	r0, [sp, #4]
#if (STD_ON == PORT_PRECOMPILE_SUPPORT)
    const Port_ConfigType * pLocalConfigPtr = &Port_Config;
    /* Cast ConfigPtr to avoid the compiler warning when configuring with PORT_PRECOMPILE_SUPPORT == STD_ON and PORT_DEV_ERROR_DETECT == STD_OFF */
    (void)ConfigPtr;
#else
    const Port_ConfigType * pLocalConfigPtr = ConfigPtr;
    64fe:	9b01      	ldr	r3, [sp, #4]
    6500:	9303      	str	r3, [sp, #12]
            (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_INIT_ID, (uint8)PORT_E_PARAM_CONFIG);
        }
        else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
        {
            Port_Ipw_Init(pLocalConfigPtr);
    6502:	9803      	ldr	r0, [sp, #12]
    6504:	f000 fbc8 	bl	6c98 <Port_Ipw_Init>

            /*  Save configuration pointer in global variable */
            Port_pConfigPtr = pLocalConfigPtr;
    6508:	4a03      	ldr	r2, [pc, #12]	; (6518 <Port_Init+0x20>)
    650a:	9b03      	ldr	r3, [sp, #12]
    650c:	6013      	str	r3, [r2, #0]
        }
    }
}
    650e:	bf00      	nop
    6510:	b005      	add	sp, #20
    6512:	f85d fb04 	ldr.w	pc, [sp], #4
    6516:	bf00      	nop
    6518:	1fff8d00 	.word	0x1fff8d00

0000651c <Port_RefreshPortDirection>:
*          are configured as "pin direction changeable during runtime".
* @pre     @p Port_Init() must have been called first.
*
*/
void Port_RefreshPortDirection( void )
{
    651c:	b508      	push	{r3, lr}
        (void)Det_ReportError((uint16)PORT_MODULE_ID, PORT_INSTANCE_ID, (uint8)PORT_REFRESHPINDIRECTION_ID, (uint8)PORT_E_PARAM_CONFIG);
    }
    else
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */
    {
        Port_Ipw_RefreshPortDirection(Port_pConfigPtr);
    651e:	4b03      	ldr	r3, [pc, #12]	; (652c <Port_RefreshPortDirection+0x10>)
    6520:	681b      	ldr	r3, [r3, #0]
    6522:	4618      	mov	r0, r3
    6524:	f000 fc10 	bl	6d48 <Port_Ipw_RefreshPortDirection>
    }
}
    6528:	bf00      	nop
    652a:	bd08      	pop	{r3, pc}
    652c:	1fff8d00 	.word	0x1fff8d00

00006530 <Port_Ci_Port_Ip_GetAdcInterleaveVal>:
(
    const PORT_Type * base,
    const uint32 pinPortIdx,
    const uint32 currentVal
)
{
    6530:	b086      	sub	sp, #24
    6532:	9003      	str	r0, [sp, #12]
    6534:	9102      	str	r1, [sp, #8]
    6536:	9201      	str	r2, [sp, #4]
    uint32 adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_INVALID;
    6538:	23ff      	movs	r3, #255	; 0xff
    653a:	9305      	str	r3, [sp, #20]
    /* calculate appropriate value to enable or disable in SIM_CHIPCTL[ADC_INTERLEAVE_EN] */
    if ((uint32)base == (uint32)IP_PORTB)
    653c:	9b03      	ldr	r3, [sp, #12]
    653e:	4a39      	ldr	r2, [pc, #228]	; (6624 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf4>)
    6540:	4293      	cmp	r3, r2
    6542:	d151      	bne.n	65e8 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xb8>
    6544:	9b02      	ldr	r3, [sp, #8]
    6546:	2b10      	cmp	r3, #16
    6548:	d867      	bhi.n	661a <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xea>
    654a:	a201      	add	r2, pc, #4	; (adr r2, 6550 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0x20>)
    654c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6550:	00006595 	.word	0x00006595
    6554:	000065a3 	.word	0x000065a3
    6558:	0000661b 	.word	0x0000661b
    655c:	0000661b 	.word	0x0000661b
    6560:	0000661b 	.word	0x0000661b
    6564:	0000661b 	.word	0x0000661b
    6568:	0000661b 	.word	0x0000661b
    656c:	0000661b 	.word	0x0000661b
    6570:	0000661b 	.word	0x0000661b
    6574:	0000661b 	.word	0x0000661b
    6578:	0000661b 	.word	0x0000661b
    657c:	0000661b 	.word	0x0000661b
    6580:	0000661b 	.word	0x0000661b
    6584:	000065b1 	.word	0x000065b1
    6588:	000065bf 	.word	0x000065bf
    658c:	000065cd 	.word	0x000065cd
    6590:	000065db 	.word	0x000065db
    {
        switch (pinPortIdx)
        {
            case 0:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE0;
    6594:	2301      	movs	r3, #1
    6596:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    6598:	9a05      	ldr	r2, [sp, #20]
    659a:	9b01      	ldr	r3, [sp, #4]
    659c:	4313      	orrs	r3, r2
    659e:	9305      	str	r3, [sp, #20]
                break;
    65a0:	e03c      	b.n	661c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 1:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE1;
    65a2:	2302      	movs	r3, #2
    65a4:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    65a6:	9a05      	ldr	r2, [sp, #20]
    65a8:	9b01      	ldr	r3, [sp, #4]
    65aa:	4313      	orrs	r3, r2
    65ac:	9305      	str	r3, [sp, #20]
                break;
    65ae:	e035      	b.n	661c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 13:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE2;
    65b0:	2304      	movs	r3, #4
    65b2:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    65b4:	9a05      	ldr	r2, [sp, #20]
    65b6:	9b01      	ldr	r3, [sp, #4]
    65b8:	4313      	orrs	r3, r2
    65ba:	9305      	str	r3, [sp, #20]
                break;
    65bc:	e02e      	b.n	661c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 14:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_ENABLE3;
    65be:	2308      	movs	r3, #8
    65c0:	9305      	str	r3, [sp, #20]
                adcInterleaveVal |= currentVal;
    65c2:	9a05      	ldr	r2, [sp, #20]
    65c4:	9b01      	ldr	r3, [sp, #4]
    65c6:	4313      	orrs	r3, r2
    65c8:	9305      	str	r3, [sp, #20]
                break;
    65ca:	e027      	b.n	661c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 15:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE0;
    65cc:	230e      	movs	r3, #14
    65ce:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    65d0:	9a05      	ldr	r2, [sp, #20]
    65d2:	9b01      	ldr	r3, [sp, #4]
    65d4:	4013      	ands	r3, r2
    65d6:	9305      	str	r3, [sp, #20]
                break;
    65d8:	e020      	b.n	661c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            case 16:
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE1;
    65da:	230d      	movs	r3, #13
    65dc:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    65de:	9a05      	ldr	r2, [sp, #20]
    65e0:	9b01      	ldr	r3, [sp, #4]
    65e2:	4013      	ands	r3, r2
    65e4:	9305      	str	r3, [sp, #20]
                break;
    65e6:	e019      	b.n	661c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
            default:
                /* invalid command */
                break;
        }
    }
    else if ((uint32)base == (uint32)IP_PORTC)
    65e8:	9b03      	ldr	r3, [sp, #12]
    65ea:	4a0f      	ldr	r2, [pc, #60]	; (6628 <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xf8>)
    65ec:	4293      	cmp	r3, r2
    65ee:	d115      	bne.n	661c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
    {
        switch (pinPortIdx)
    65f0:	9b02      	ldr	r3, [sp, #8]
    65f2:	2b00      	cmp	r3, #0
    65f4:	d003      	beq.n	65fe <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xce>
    65f6:	9b02      	ldr	r3, [sp, #8]
    65f8:	2b01      	cmp	r3, #1
    65fa:	d007      	beq.n	660c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xdc>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
                adcInterleaveVal &= currentVal;
                break;
            default:
                /* invalid command */
                break;
    65fc:	e00e      	b.n	661c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE2;
    65fe:	230b      	movs	r3, #11
    6600:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6602:	9a05      	ldr	r2, [sp, #20]
    6604:	9b01      	ldr	r3, [sp, #4]
    6606:	4013      	ands	r3, r2
    6608:	9305      	str	r3, [sp, #20]
                break;
    660a:	e007      	b.n	661c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                adcInterleaveVal = (uint32)PIN_ADC_INTERLEAVE_DISABLE3;
    660c:	2307      	movs	r3, #7
    660e:	9305      	str	r3, [sp, #20]
                adcInterleaveVal &= currentVal;
    6610:	9a05      	ldr	r2, [sp, #20]
    6612:	9b01      	ldr	r3, [sp, #4]
    6614:	4013      	ands	r3, r2
    6616:	9305      	str	r3, [sp, #20]
                break;
    6618:	e000      	b.n	661c <Port_Ci_Port_Ip_GetAdcInterleaveVal+0xec>
                break;
    661a:	bf00      	nop
    }
    else
    {
        /* invalid command */
    }
    return adcInterleaveVal;
    661c:	9b05      	ldr	r3, [sp, #20]
}
    661e:	4618      	mov	r0, r3
    6620:	b006      	add	sp, #24
    6622:	4770      	bx	lr
    6624:	4004a000 	.word	0x4004a000
    6628:	4004b000 	.word	0x4004b000

0000662c <Port_Ci_Port_Ip_ConfigureInterleave>:
(
    const PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux muxing
)
{
    662c:	b500      	push	{lr}
    662e:	b089      	sub	sp, #36	; 0x24
    6630:	9003      	str	r0, [sp, #12]
    6632:	9102      	str	r1, [sp, #8]
    6634:	9201      	str	r2, [sp, #4]
    Port_Ci_Port_Ip_PortMux retMuxing = muxing;
    6636:	9b01      	ldr	r3, [sp, #4]
    6638:	9307      	str	r3, [sp, #28]
    if (muxing == PORT_MUX_ADC_INTERLEAVE)
    663a:	9b01      	ldr	r3, [sp, #4]
    663c:	2b08      	cmp	r3, #8
    663e:	d121      	bne.n	6684 <Port_Ci_Port_Ip_ConfigureInterleave+0x58>
    {
        /* Get ADC Interleave from SIM and enable/disable desired bit */
        uint32 chipCtlReg = (IP_SIM->CHIPCTL & SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK) >> SIM_CHIPCTL_ADC_INTERLEAVE_EN_SHIFT;
    6640:	4b13      	ldr	r3, [pc, #76]	; (6690 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6642:	685b      	ldr	r3, [r3, #4]
    6644:	f003 030f 	and.w	r3, r3, #15
    6648:	9306      	str	r3, [sp, #24]
        Port_Ci_Port_Ip_InterleaveMux interleaveVal = (Port_Ci_Port_Ip_InterleaveMux)Port_Ci_Port_Ip_GetAdcInterleaveVal(base, pin, chipCtlReg);
    664a:	9a06      	ldr	r2, [sp, #24]
    664c:	9902      	ldr	r1, [sp, #8]
    664e:	9803      	ldr	r0, [sp, #12]
    6650:	f7ff ff6e 	bl	6530 <Port_Ci_Port_Ip_GetAdcInterleaveVal>
    6654:	9005      	str	r0, [sp, #20]
        if (interleaveVal != PIN_ADC_INTERLEAVE_INVALID)
    6656:	9b05      	ldr	r3, [sp, #20]
    6658:	2bff      	cmp	r3, #255	; 0xff
    665a:	d011      	beq.n	6680 <Port_Ci_Port_Ip_ConfigureInterleave+0x54>
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05();
    665c:	f008 f898 	bl	e790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>
            IP_SIM->CHIPCTL &= ~(SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK);
    6660:	4b0b      	ldr	r3, [pc, #44]	; (6690 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6662:	685b      	ldr	r3, [r3, #4]
    6664:	4a0a      	ldr	r2, [pc, #40]	; (6690 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6666:	f023 030f 	bic.w	r3, r3, #15
    666a:	6053      	str	r3, [r2, #4]
            IP_SIM->CHIPCTL |= SIM_CHIPCTL_ADC_INTERLEAVE_EN(interleaveVal);
    666c:	4b08      	ldr	r3, [pc, #32]	; (6690 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    666e:	685a      	ldr	r2, [r3, #4]
    6670:	9b05      	ldr	r3, [sp, #20]
    6672:	f003 030f 	and.w	r3, r3, #15
    6676:	4906      	ldr	r1, [pc, #24]	; (6690 <Port_Ci_Port_Ip_ConfigureInterleave+0x64>)
    6678:	4313      	orrs	r3, r2
    667a:	604b      	str	r3, [r1, #4]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05();
    667c:	f008 f8b4 	bl	e7e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>
        }
        /* return real muxing for pin */
        retMuxing = PORT_MUX_ALT0;
    6680:	2300      	movs	r3, #0
    6682:	9307      	str	r3, [sp, #28]
    }
    return retMuxing;
    6684:	9b07      	ldr	r3, [sp, #28]
}
    6686:	4618      	mov	r0, r3
    6688:	b009      	add	sp, #36	; 0x24
    668a:	f85d fb04 	ldr.w	pc, [sp], #4
    668e:	bf00      	nop
    6690:	40048000 	.word	0x40048000

00006694 <Port_Ci_Port_Ip_PinInit>:
 * Description   : This function configures the pin feature with the options
 * provided in the given structure.
 *
 ******************************************************************************/
static void Port_Ci_Port_Ip_PinInit(const Port_Ci_Port_Ip_PinSettingsConfig * config)
{
    6694:	b500      	push	{lr}
    6696:	b087      	sub	sp, #28
    6698:	9001      	str	r0, [sp, #4]
    uint32 pinsValues = 0U;
    669a:	2300      	movs	r3, #0
    669c:	9305      	str	r3, [sp, #20]
    uint32 digitalFilters;
    Port_Ci_Port_Ip_PortMux muxing = PORT_MUX_ALT0;
    669e:	2300      	movs	r3, #0
    66a0:	9304      	str	r3, [sp, #16]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    Port_Ci_Port_Ip_PortMux retMuxing = PORT_MUX_ALT0;
    66a2:	2300      	movs	r3, #0
    66a4:	9303      	str	r3, [sp, #12]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    PORT_CI_PORT_DEV_ASSERT((boolean)(config != NULL_PTR));
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->pinPortIdx < 32));
    PORT_CI_PORT_DEV_ASSERT((boolean)((config->portBase->PCR[config->pinPortIdx]) & PORT_PCR_LK_MASK) == 0);

    if (config->pullConfig != PORT_INTERNAL_PULL_NOT_ENABLED)
    66a6:	9b01      	ldr	r3, [sp, #4]
    66a8:	68db      	ldr	r3, [r3, #12]
    66aa:	2b02      	cmp	r3, #2
    66ac:	d00a      	beq.n	66c4 <Port_Ci_Port_Ip_PinInit+0x30>
    {
        pinsValues |= PORT_PCR_PE(1);
    66ae:	9b05      	ldr	r3, [sp, #20]
    66b0:	f043 0302 	orr.w	r3, r3, #2
    66b4:	9305      	str	r3, [sp, #20]
        pinsValues |= PORT_PCR_PS(config->pullConfig);
    66b6:	9b01      	ldr	r3, [sp, #4]
    66b8:	68db      	ldr	r3, [r3, #12]
    66ba:	f003 0301 	and.w	r3, r3, #1
    66be:	9a05      	ldr	r2, [sp, #20]
    66c0:	4313      	orrs	r3, r2
    66c2:	9305      	str	r3, [sp, #20]
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    pinsValues |= PORT_PCR_SRE(config->slewRateCtrlSel);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH
    pinsValues |= PORT_PCR_DSE(config->driveStrength);
    66c4:	9b01      	ldr	r3, [sp, #4]
    66c6:	699b      	ldr	r3, [r3, #24]
    66c8:	019b      	lsls	r3, r3, #6
    66ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
    66ce:	9a05      	ldr	r2, [sp, #20]
    66d0:	4313      	orrs	r3, r2
    66d2:	9305      	str	r3, [sp, #20]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_DRIVE_STRENGTH */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_LOCK_REGISTER
    pinsValues |= PORT_PCR_LK(config->lockRegister);
    66d4:	9b01      	ldr	r3, [sp, #4]
    66d6:	6a1b      	ldr	r3, [r3, #32]
    66d8:	03db      	lsls	r3, r3, #15
    66da:	b29b      	uxth	r3, r3
    66dc:	9a05      	ldr	r2, [sp, #20]
    66de:	4313      	orrs	r3, r2
    66e0:	9305      	str	r3, [sp, #20]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    pinsValues |= PORT_PCR_ODE(config->openDrain);
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    pinsValues |= PORT_PCR_PFE(config->passiveFilter?1U:0U);
    66e2:	9b01      	ldr	r3, [sp, #4]
    66e4:	7f1b      	ldrb	r3, [r3, #28]
    66e6:	2b00      	cmp	r3, #0
    66e8:	d001      	beq.n	66ee <Port_Ci_Port_Ip_PinInit+0x5a>
    66ea:	2310      	movs	r3, #16
    66ec:	e000      	b.n	66f0 <Port_Ci_Port_Ip_PinInit+0x5c>
    66ee:	2300      	movs	r3, #0
    66f0:	9a05      	ldr	r2, [sp, #20]
    66f2:	4313      	orrs	r3, r2
    66f4:	9305      	str	r3, [sp, #20]

    muxing = config->mux;
    66f6:	9b01      	ldr	r3, [sp, #4]
    66f8:	691b      	ldr	r3, [r3, #16]
    66fa:	9304      	str	r3, [sp, #16]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    retMuxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(config->portBase),(config->pinPortIdx),(muxing));
#else
    retMuxing = Port_Ci_Port_Ip_ConfigureInterleave(config->portBase, config->pinPortIdx, muxing);
    66fc:	9b01      	ldr	r3, [sp, #4]
    66fe:	6818      	ldr	r0, [r3, #0]
    6700:	9b01      	ldr	r3, [sp, #4]
    6702:	689b      	ldr	r3, [r3, #8]
    6704:	9a04      	ldr	r2, [sp, #16]
    6706:	4619      	mov	r1, r3
    6708:	f7ff ff90 	bl	662c <Port_Ci_Port_Ip_ConfigureInterleave>
    670c:	9003      	str	r0, [sp, #12]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
    muxing = retMuxing;
    670e:	9b03      	ldr	r3, [sp, #12]
    6710:	9304      	str	r3, [sp, #16]
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */
    pinsValues |= PORT_PCR_MUX(muxing);
    6712:	9b04      	ldr	r3, [sp, #16]
    6714:	021b      	lsls	r3, r3, #8
    6716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    671a:	9a05      	ldr	r2, [sp, #20]
    671c:	4313      	orrs	r3, r2
    671e:	9305      	str	r3, [sp, #20]

    /* Enter critical region */
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00();
    6720:	f007 fe9c 	bl	e45c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>
    /* Read current digital filter of port */
    digitalFilters = (uint32)(config->portBase->DFER);
    6724:	9b01      	ldr	r3, [sp, #4]
    6726:	681b      	ldr	r3, [r3, #0]
    6728:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    672c:	9302      	str	r3, [sp, #8]
    digitalFilters &= ~(1UL << (config->pinPortIdx));
    672e:	9b01      	ldr	r3, [sp, #4]
    6730:	689b      	ldr	r3, [r3, #8]
    6732:	2201      	movs	r2, #1
    6734:	fa02 f303 	lsl.w	r3, r2, r3
    6738:	43db      	mvns	r3, r3
    673a:	9a02      	ldr	r2, [sp, #8]
    673c:	4013      	ands	r3, r2
    673e:	9302      	str	r3, [sp, #8]
    digitalFilters |= (((uint32)(config->digitalFilter?1U:0U)) << (config->pinPortIdx));
    6740:	9b01      	ldr	r3, [sp, #4]
    6742:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6746:	2b00      	cmp	r3, #0
    6748:	d001      	beq.n	674e <Port_Ci_Port_Ip_PinInit+0xba>
    674a:	2201      	movs	r2, #1
    674c:	e000      	b.n	6750 <Port_Ci_Port_Ip_PinInit+0xbc>
    674e:	2200      	movs	r2, #0
    6750:	9b01      	ldr	r3, [sp, #4]
    6752:	689b      	ldr	r3, [r3, #8]
    6754:	fa02 f303 	lsl.w	r3, r2, r3
    6758:	9a02      	ldr	r2, [sp, #8]
    675a:	4313      	orrs	r3, r2
    675c:	9302      	str	r3, [sp, #8]
    /* Write to digital filter enable register */
    config->portBase->DFER = digitalFilters;
    675e:	9b01      	ldr	r3, [sp, #4]
    6760:	681b      	ldr	r3, [r3, #0]
    6762:	9a02      	ldr	r2, [sp, #8]
    6764:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00();
    6768:	f007 fea4 	bl	e4b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>

    /* Configure initial value for GPIO pin in GPIO mux */
    if (PORT_MUX_AS_GPIO == muxing)
    676c:	9b04      	ldr	r3, [sp, #16]
    676e:	2b01      	cmp	r3, #1
    6770:	d16d      	bne.n	684e <Port_Ci_Port_Ip_PinInit+0x1ba>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_CI_PORT_PIN_OUT == config->direction)
    6772:	9b01      	ldr	r3, [sp, #4]
    6774:	695b      	ldr	r3, [r3, #20]
    6776:	2b02      	cmp	r3, #2
    6778:	d138      	bne.n	67ec <Port_Ci_Port_Ip_PinInit+0x158>
        {
            if ((uint8)1 == config->initValue)
    677a:	9b01      	ldr	r3, [sp, #4]
    677c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6780:	2b01      	cmp	r3, #1
    6782:	d10f      	bne.n	67a4 <Port_Ci_Port_Ip_PinInit+0x110>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01();
    6784:	f007 febc 	bl	e500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>
                config->gpioBase->PSOR |= ((uint32)1 << (config->pinPortIdx));
    6788:	9b01      	ldr	r3, [sp, #4]
    678a:	685b      	ldr	r3, [r3, #4]
    678c:	6859      	ldr	r1, [r3, #4]
    678e:	9b01      	ldr	r3, [sp, #4]
    6790:	689b      	ldr	r3, [r3, #8]
    6792:	2201      	movs	r2, #1
    6794:	409a      	lsls	r2, r3
    6796:	9b01      	ldr	r3, [sp, #4]
    6798:	685b      	ldr	r3, [r3, #4]
    679a:	430a      	orrs	r2, r1
    679c:	605a      	str	r2, [r3, #4]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01();
    679e:	f007 fedb 	bl	e558 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>
    67a2:	e013      	b.n	67cc <Port_Ci_Port_Ip_PinInit+0x138>
            }
            else if ((uint8)0 == config->initValue)
    67a4:	9b01      	ldr	r3, [sp, #4]
    67a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    67aa:	2b00      	cmp	r3, #0
    67ac:	d10e      	bne.n	67cc <Port_Ci_Port_Ip_PinInit+0x138>
            {
                SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02();
    67ae:	f007 fef9 	bl	e5a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>
                config->gpioBase->PCOR |= ((uint32)1 << (config->pinPortIdx));
    67b2:	9b01      	ldr	r3, [sp, #4]
    67b4:	685b      	ldr	r3, [r3, #4]
    67b6:	6899      	ldr	r1, [r3, #8]
    67b8:	9b01      	ldr	r3, [sp, #4]
    67ba:	689b      	ldr	r3, [r3, #8]
    67bc:	2201      	movs	r2, #1
    67be:	409a      	lsls	r2, r3
    67c0:	9b01      	ldr	r3, [sp, #4]
    67c2:	685b      	ldr	r3, [r3, #4]
    67c4:	430a      	orrs	r2, r1
    67c6:	609a      	str	r2, [r3, #8]
                SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02();
    67c8:	f007 ff18 	bl	e5fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>
            else
            {
                /* No action to be done */
            }
            /* Set the pin direction as output in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    67cc:	f007 ff3c 	bl	e648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR |= (uint32)1 << (config->pinPortIdx);
    67d0:	9b01      	ldr	r3, [sp, #4]
    67d2:	685b      	ldr	r3, [r3, #4]
    67d4:	6959      	ldr	r1, [r3, #20]
    67d6:	9b01      	ldr	r3, [sp, #4]
    67d8:	689b      	ldr	r3, [r3, #8]
    67da:	2201      	movs	r2, #1
    67dc:	409a      	lsls	r2, r3
    67de:	9b01      	ldr	r3, [sp, #4]
    67e0:	685b      	ldr	r3, [r3, #4]
    67e2:	430a      	orrs	r2, r1
    67e4:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    67e6:	f007 ff5b 	bl	e6a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>
    67ea:	e030      	b.n	684e <Port_Ci_Port_Ip_PinInit+0x1ba>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            /* Clear the pin direction as input in the PDDR register of GPIO IP */
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03();
    67ec:	f007 ff2c 	bl	e648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>
            config->gpioBase->PDDR &= ~((uint32)1 << (config->pinPortIdx));
    67f0:	9b01      	ldr	r3, [sp, #4]
    67f2:	685b      	ldr	r3, [r3, #4]
    67f4:	6959      	ldr	r1, [r3, #20]
    67f6:	9b01      	ldr	r3, [sp, #4]
    67f8:	689b      	ldr	r3, [r3, #8]
    67fa:	2201      	movs	r2, #1
    67fc:	fa02 f303 	lsl.w	r3, r2, r3
    6800:	43da      	mvns	r2, r3
    6802:	9b01      	ldr	r3, [sp, #4]
    6804:	685b      	ldr	r3, [r3, #4]
    6806:	400a      	ands	r2, r1
    6808:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03();
    680a:	f007 ff49 	bl	e6a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04();
    680e:	f007 ff6d 	bl	e6ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>
            config->gpioBase->PIDR &= ~((uint32)1 << (config->pinPortIdx));
    6812:	9b01      	ldr	r3, [sp, #4]
    6814:	685b      	ldr	r3, [r3, #4]
    6816:	6999      	ldr	r1, [r3, #24]
    6818:	9b01      	ldr	r3, [sp, #4]
    681a:	689b      	ldr	r3, [r3, #8]
    681c:	2201      	movs	r2, #1
    681e:	fa02 f303 	lsl.w	r3, r2, r3
    6822:	43da      	mvns	r2, r3
    6824:	9b01      	ldr	r3, [sp, #4]
    6826:	685b      	ldr	r3, [r3, #4]
    6828:	400a      	ands	r2, r1
    682a:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH_Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
            if (PORT_CI_PORT_PIN_HIGH_Z == config->direction)
    682c:	9b01      	ldr	r3, [sp, #4]
    682e:	695b      	ldr	r3, [r3, #20]
    6830:	2b03      	cmp	r3, #3
    6832:	d10a      	bne.n	684a <Port_Ci_Port_Ip_PinInit+0x1b6>
            {
                config->gpioBase->PIDR |= ((uint32)1 << (config->pinPortIdx));
    6834:	9b01      	ldr	r3, [sp, #4]
    6836:	685b      	ldr	r3, [r3, #4]
    6838:	6999      	ldr	r1, [r3, #24]
    683a:	9b01      	ldr	r3, [sp, #4]
    683c:	689b      	ldr	r3, [r3, #8]
    683e:	2201      	movs	r2, #1
    6840:	409a      	lsls	r2, r3
    6842:	9b01      	ldr	r3, [sp, #4]
    6844:	685b      	ldr	r3, [r3, #4]
    6846:	430a      	orrs	r2, r1
    6848:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04();
    684a:	f007 ff7b 	bl	e744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
    }

    /* Write to Multiplexed Signal Configuration Register */
    config->portBase->PCR[config->pinPortIdx] = pinsValues;
    684e:	9b01      	ldr	r3, [sp, #4]
    6850:	681b      	ldr	r3, [r3, #0]
    6852:	9a01      	ldr	r2, [sp, #4]
    6854:	6892      	ldr	r2, [r2, #8]
    6856:	9905      	ldr	r1, [sp, #20]
    6858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    685c:	bf00      	nop
    685e:	b007      	add	sp, #28
    6860:	f85d fb04 	ldr.w	pc, [sp], #4

00006864 <Port_Ci_Port_Ip_Init>:
Port_Ci_Port_Ip_PortStatusType Port_Ci_Port_Ip_Init
(
    uint32 pinCount,
    const Port_Ci_Port_Ip_PinSettingsConfig config[]
)
{
    6864:	b500      	push	{lr}
    6866:	b085      	sub	sp, #20
    6868:	9001      	str	r0, [sp, #4]
    686a:	9100      	str	r1, [sp, #0]
    uint32 i;

    for (i = 0U; i < pinCount; i++)
    686c:	2300      	movs	r3, #0
    686e:	9303      	str	r3, [sp, #12]
    6870:	e00d      	b.n	688e <Port_Ci_Port_Ip_Init+0x2a>
    {
        Port_Ci_Port_Ip_PinInit(&config[i]);
    6872:	9a03      	ldr	r2, [sp, #12]
    6874:	4613      	mov	r3, r2
    6876:	009b      	lsls	r3, r3, #2
    6878:	4413      	add	r3, r2
    687a:	00db      	lsls	r3, r3, #3
    687c:	461a      	mov	r2, r3
    687e:	9b00      	ldr	r3, [sp, #0]
    6880:	4413      	add	r3, r2
    6882:	4618      	mov	r0, r3
    6884:	f7ff ff06 	bl	6694 <Port_Ci_Port_Ip_PinInit>
    for (i = 0U; i < pinCount; i++)
    6888:	9b03      	ldr	r3, [sp, #12]
    688a:	3301      	adds	r3, #1
    688c:	9303      	str	r3, [sp, #12]
    688e:	9a03      	ldr	r2, [sp, #12]
    6890:	9b01      	ldr	r3, [sp, #4]
    6892:	429a      	cmp	r2, r3
    6894:	d3ed      	bcc.n	6872 <Port_Ci_Port_Ip_Init+0xe>
    }

    return PORT_CI_PORT_SUCCESS;
    6896:	2300      	movs	r3, #0
}
    6898:	4618      	mov	r0, r3
    689a:	b005      	add	sp, #20
    689c:	f85d fb04 	ldr.w	pc, [sp], #4

000068a0 <Port_Ci_Port_Ip_SetMuxModeSel>:
(
    PORT_Type * const base,
    uint32 pin,
    Port_Ci_Port_Ip_PortMux mux
)
{
    68a0:	b500      	push	{lr}
    68a2:	b087      	sub	sp, #28
    68a4:	9003      	str	r0, [sp, #12]
    68a6:	9102      	str	r1, [sp, #8]
    68a8:	9201      	str	r2, [sp, #4]

#ifdef FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE
#if (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT))
    Port_Ci_Port_Ip_PortMux muxing = (Port_Ci_Port_Ip_PortMux)OsIf_Trusted_Call_Return3param(Port_Ci_Port_Ip_ConfigureInterleave,(base),(pin),(mux));
#else
    Port_Ci_Port_Ip_PortMux muxing = Port_Ci_Port_Ip_ConfigureInterleave(base, pin, mux);
    68aa:	9a01      	ldr	r2, [sp, #4]
    68ac:	9902      	ldr	r1, [sp, #8]
    68ae:	9803      	ldr	r0, [sp, #12]
    68b0:	f7ff febc 	bl	662c <Port_Ci_Port_Ip_ConfigureInterleave>
    68b4:	9005      	str	r0, [sp, #20]
#endif /* (defined(MCAL_ENABLE_USER_MODE_SUPPORT) && defined(PORT_ENABLE_USER_MODE_SUPPORT) && (STD_ON == PORT_ENABLE_USER_MODE_SUPPORT)) */
#else
    Port_Ci_Port_Ip_PortMux muxing = mux;
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_ADC_INTERLEAVE */

    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06();
    68b6:	f007 ffbd 	bl	e834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>
    regValue = base->PCR[pin];
    68ba:	9b03      	ldr	r3, [sp, #12]
    68bc:	9a02      	ldr	r2, [sp, #8]
    68be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    68c2:	9304      	str	r3, [sp, #16]
    regValue &= ~(PORT_PCR_MUX_MASK);
    68c4:	9b04      	ldr	r3, [sp, #16]
    68c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    68ca:	9304      	str	r3, [sp, #16]
    regValue |= PORT_PCR_MUX(muxing);
    68cc:	9b05      	ldr	r3, [sp, #20]
    68ce:	021b      	lsls	r3, r3, #8
    68d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    68d4:	9a04      	ldr	r2, [sp, #16]
    68d6:	4313      	orrs	r3, r2
    68d8:	9304      	str	r3, [sp, #16]
    base->PCR[pin] = regValue;
    68da:	9b03      	ldr	r3, [sp, #12]
    68dc:	9a02      	ldr	r2, [sp, #8]
    68de:	9904      	ldr	r1, [sp, #16]
    68e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06();
    68e4:	f007 ffd2 	bl	e88c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>
}
    68e8:	bf00      	nop
    68ea:	b007      	add	sp, #28
    68ec:	f85d fb04 	ldr.w	pc, [sp], #4

000068f0 <Port_Ci_Port_Ip_EnableDigitalFilter>:
void Port_Ci_Port_Ip_EnableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    68f0:	b500      	push	{lr}
    68f2:	b083      	sub	sp, #12
    68f4:	9001      	str	r0, [sp, #4]
    68f6:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07();
    68f8:	f007 ffee 	bl	e8d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>
    base->DFER |= ((uint32)1U << pin);
    68fc:	9b01      	ldr	r3, [sp, #4]
    68fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6902:	2101      	movs	r1, #1
    6904:	9b00      	ldr	r3, [sp, #0]
    6906:	fa01 f303 	lsl.w	r3, r1, r3
    690a:	431a      	orrs	r2, r3
    690c:	9b01      	ldr	r3, [sp, #4]
    690e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07();
    6912:	f008 f80d 	bl	e930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>
}
    6916:	bf00      	nop
    6918:	b003      	add	sp, #12
    691a:	f85d fb04 	ldr.w	pc, [sp], #4

0000691e <Port_Ci_Port_Ip_DisableDigitalFilter>:
void Port_Ci_Port_Ip_DisableDigitalFilter
(
    PORT_Type * const base,
    uint32 pin
)
{
    691e:	b500      	push	{lr}
    6920:	b083      	sub	sp, #12
    6922:	9001      	str	r0, [sp, #4]
    6924:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(pin < PORT_PCR_COUNT));
    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08();
    6926:	f008 f829 	bl	e97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>
    base->DFER &= ~((uint32)1U << pin);
    692a:	9b01      	ldr	r3, [sp, #4]
    692c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    6930:	2101      	movs	r1, #1
    6932:	9b00      	ldr	r3, [sp, #0]
    6934:	fa01 f303 	lsl.w	r3, r1, r3
    6938:	43db      	mvns	r3, r3
    693a:	401a      	ands	r2, r3
    693c:	9b01      	ldr	r3, [sp, #4]
    693e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08();
    6942:	f008 f847 	bl	e9d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>
}
    6946:	bf00      	nop
    6948:	b003      	add	sp, #12
    694a:	f85d fb04 	ldr.w	pc, [sp], #4

0000694e <Port_Ci_Port_Ip_ConfigDigitalFilter>:
void Port_Ci_Port_Ip_ConfigDigitalFilter
(
    PORT_Type * const base,
    const Port_Ci_Port_Ip_DigitalFilterConfigType * config
)
{
    694e:	b082      	sub	sp, #8
    6950:	9001      	str	r0, [sp, #4]
    6952:	9100      	str	r1, [sp, #0]
    PORT_CI_PORT_DEV_ASSERT((boolean)(config->u8Width <= PORT_DFWR_FILT_MASK));
    base->DFCR = PORT_DFCR_CS(config->u8Clock);
    6954:	9b00      	ldr	r3, [sp, #0]
    6956:	785b      	ldrb	r3, [r3, #1]
    6958:	f003 0201 	and.w	r2, r3, #1
    695c:	9b01      	ldr	r3, [sp, #4]
    695e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    base->DFWR = PORT_DFWR_FILT(config->u8Width);
    6962:	9b00      	ldr	r3, [sp, #0]
    6964:	789b      	ldrb	r3, [r3, #2]
    6966:	f003 021f 	and.w	r2, r3, #31
    696a:	9b01      	ldr	r3, [sp, #4]
    696c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
    6970:	bf00      	nop
    6972:	b002      	add	sp, #8
    6974:	4770      	bx	lr

00006976 <Port_Ci_Port_Ip_SetGlobalPinControl>:
    PORT_Type * const base,
    uint16 pins,
    uint16 value,
    Port_Ci_Port_Ip_PortGlobalControlPins halfPort
)
{
    6976:	b086      	sub	sp, #24
    6978:	9003      	str	r0, [sp, #12]
    697a:	9301      	str	r3, [sp, #4]
    697c:	460b      	mov	r3, r1
    697e:	f8ad 300a 	strh.w	r3, [sp, #10]
    6982:	4613      	mov	r3, r2
    6984:	f8ad 3008 	strh.w	r3, [sp, #8]
    uint16 mask = 0;
    6988:	2300      	movs	r3, #0
    698a:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PS_MASK;
    698e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6992:	f043 0301 	orr.w	r3, r3, #1
    6996:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_PE_MASK;
    699a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    699e:	f043 0302 	orr.w	r3, r3, #2
    69a2:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE)
    mask |= PORT_PCR_SRE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_SLEW_RATE */
    mask |= PORT_PCR_PFE_MASK;
    69a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69aa:	f043 0310 	orr.w	r3, r3, #16
    69ae:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_DSE_MASK;
    69b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    69ba:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_MUX_MASK;
    69be:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    69c6:	f8ad 3016 	strh.w	r3, [sp, #22]
    mask |= PORT_PCR_LK_MASK;
    69ca:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    69d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    69d6:	f8ad 3016 	strh.w	r3, [sp, #22]
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN
#if (STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN)
    mask |= PORT_PCR_ODE_MASK;
#endif /* STD_ON == FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_OPEN_DRAIN */
    mask &= value;
    69da:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    69de:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    69e2:	4013      	ands	r3, r2
    69e4:	f8ad 3016 	strh.w	r3, [sp, #22]

    switch (halfPort)
    69e8:	9b01      	ldr	r3, [sp, #4]
    69ea:	2b00      	cmp	r3, #0
    69ec:	d003      	beq.n	69f6 <Port_Ci_Port_Ip_SetGlobalPinControl+0x80>
    69ee:	9b01      	ldr	r3, [sp, #4]
    69f0:	2b01      	cmp	r3, #1
    69f2:	d00a      	beq.n	6a0a <Port_Ci_Port_Ip_SetGlobalPinControl+0x94>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
            break;
        default:
            /* nothing to configure */
            PORT_CI_PORT_DEV_ASSERT((boolean)FALSE);
            break;
    69f4:	e013      	b.n	6a1e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCLR = (((uint32)pins) << PORT_GPCLR_GPWE_SHIFT) | (uint32)mask;
    69f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    69fa:	041a      	lsls	r2, r3, #16
    69fc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a00:	431a      	orrs	r2, r3
    6a02:	9b03      	ldr	r3, [sp, #12]
    6a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
            break;
    6a08:	e009      	b.n	6a1e <Port_Ci_Port_Ip_SetGlobalPinControl+0xa8>
            base->GPCHR = (((uint32)pins) << PORT_GPCHR_GPWE_SHIFT) | (uint32)mask;
    6a0a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6a0e:	041a      	lsls	r2, r3, #16
    6a10:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a14:	431a      	orrs	r2, r3
    6a16:	9b03      	ldr	r3, [sp, #12]
    6a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            break;
    6a1c:	bf00      	nop
    }
}
    6a1e:	bf00      	nop
    6a20:	b006      	add	sp, #24
    6a22:	4770      	bx	lr

00006a24 <Port_Ipw_Init_UnusedPins>:
*/
static inline void Port_Ipw_Init_UnusedPins
(
    const Port_ConfigType * pConfigPtr
)
{
    6a24:	b500      	push	{lr}
    6a26:	b087      	sub	sp, #28
    6a28:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;
    uint16 u16NumUnusedPins             = (uint16)(pConfigPtr->u16NumUnusedPins);
    6a2a:	9b01      	ldr	r3, [sp, #4]
    6a2c:	885b      	ldrh	r3, [r3, #2]
    6a2e:	f8ad 3014 	strh.w	r3, [sp, #20]
    uint8  u8LocalPDO                   = pConfigPtr->pUnusedPadConfig->u8PDO;
    6a32:	9b01      	ldr	r3, [sp, #4]
    6a34:	689b      	ldr	r3, [r3, #8]
    6a36:	7a1b      	ldrb	r3, [r3, #8]
    6a38:	f88d 3013 	strb.w	r3, [sp, #19]
    uint32 u32LocalPCR                  = pConfigPtr->pUnusedPadConfig->u32PCR;
    6a3c:	9b01      	ldr	r3, [sp, #4]
    6a3e:	689b      	ldr	r3, [r3, #8]
    6a40:	681b      	ldr	r3, [r3, #0]
    6a42:	9303      	str	r3, [sp, #12]
    Port_PinDirectionType eLocalPDDIR   = pConfigPtr->pUnusedPadConfig->ePadDir;
    6a44:	9b01      	ldr	r3, [sp, #4]
    6a46:	689b      	ldr	r3, [r3, #8]
    6a48:	685b      	ldr	r3, [r3, #4]
    6a4a:	9302      	str	r3, [sp, #8]

    /* Initialize All UnUsed pins */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6a4c:	2300      	movs	r3, #0
    6a4e:	f8ad 3016 	strh.w	r3, [sp, #22]
    6a52:	e111      	b.n	6c78 <Port_Ipw_Init_UnusedPins+0x254>
    {
        /* Check if the direction of the pin is OUTPUT. In this case the driver needs to set the output level too */
        if (PORT_PIN_OUT == eLocalPDDIR)
    6a54:	9b02      	ldr	r3, [sp, #8]
    6a56:	2b02      	cmp	r3, #2
    6a58:	d169      	bne.n	6b2e <Port_Ipw_Init_UnusedPins+0x10a>
        {
            /* Set pin to High value */
            if (PORT_PIN_LEVEL_HIGH_U8 == u8LocalPDO)
    6a5a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6a5e:	2b01      	cmp	r3, #1
    6a60:	d11a      	bne.n	6a98 <Port_Ipw_Init_UnusedPins+0x74>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PSOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6a62:	9b01      	ldr	r3, [sp, #4]
    6a64:	685a      	ldr	r2, [r3, #4]
    6a66:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a6a:	005b      	lsls	r3, r3, #1
    6a6c:	4413      	add	r3, r2
    6a6e:	881b      	ldrh	r3, [r3, #0]
    6a70:	f003 021f 	and.w	r2, r3, #31
    6a74:	9b01      	ldr	r3, [sp, #4]
    6a76:	6859      	ldr	r1, [r3, #4]
    6a78:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6a7c:	005b      	lsls	r3, r3, #1
    6a7e:	440b      	add	r3, r1
    6a80:	881b      	ldrh	r3, [r3, #0]
    6a82:	095b      	lsrs	r3, r3, #5
    6a84:	b29b      	uxth	r3, r3
    6a86:	4619      	mov	r1, r3
    6a88:	4b81      	ldr	r3, [pc, #516]	; (6c90 <Port_Ipw_Init_UnusedPins+0x26c>)
    6a8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6a8e:	2101      	movs	r1, #1
    6a90:	fa01 f202 	lsl.w	r2, r1, r2
    6a94:	605a      	str	r2, [r3, #4]
    6a96:	e01d      	b.n	6ad4 <Port_Ipw_Init_UnusedPins+0xb0>
            }
            else if (PORT_PIN_LEVEL_LOW_U8 == u8LocalPDO)
    6a98:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6a9c:	2b00      	cmp	r3, #0
    6a9e:	d119      	bne.n	6ad4 <Port_Ipw_Init_UnusedPins+0xb0>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCOR = ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6aa0:	9b01      	ldr	r3, [sp, #4]
    6aa2:	685a      	ldr	r2, [r3, #4]
    6aa4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6aa8:	005b      	lsls	r3, r3, #1
    6aaa:	4413      	add	r3, r2
    6aac:	881b      	ldrh	r3, [r3, #0]
    6aae:	f003 021f 	and.w	r2, r3, #31
    6ab2:	9b01      	ldr	r3, [sp, #4]
    6ab4:	6859      	ldr	r1, [r3, #4]
    6ab6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6aba:	005b      	lsls	r3, r3, #1
    6abc:	440b      	add	r3, r1
    6abe:	881b      	ldrh	r3, [r3, #0]
    6ac0:	095b      	lsrs	r3, r3, #5
    6ac2:	b29b      	uxth	r3, r3
    6ac4:	4619      	mov	r1, r3
    6ac6:	4b72      	ldr	r3, [pc, #456]	; (6c90 <Port_Ipw_Init_UnusedPins+0x26c>)
    6ac8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6acc:	2101      	movs	r1, #1
    6ace:	fa01 f202 	lsl.w	r2, r1, r2
    6ad2:	609a      	str	r2, [r3, #8]
            }
            else
            {
                /* No action to be done */
            }
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6ad4:	f007 ffa4 	bl	ea20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6ad8:	9b01      	ldr	r3, [sp, #4]
    6ada:	685a      	ldr	r2, [r3, #4]
    6adc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6ae0:	005b      	lsls	r3, r3, #1
    6ae2:	4413      	add	r3, r2
    6ae4:	881b      	ldrh	r3, [r3, #0]
    6ae6:	095b      	lsrs	r3, r3, #5
    6ae8:	b29b      	uxth	r3, r3
    6aea:	461a      	mov	r2, r3
    6aec:	4b68      	ldr	r3, [pc, #416]	; (6c90 <Port_Ipw_Init_UnusedPins+0x26c>)
    6aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6af2:	6959      	ldr	r1, [r3, #20]
    6af4:	9b01      	ldr	r3, [sp, #4]
    6af6:	685a      	ldr	r2, [r3, #4]
    6af8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6afc:	005b      	lsls	r3, r3, #1
    6afe:	4413      	add	r3, r2
    6b00:	881b      	ldrh	r3, [r3, #0]
    6b02:	f003 031f 	and.w	r3, r3, #31
    6b06:	2201      	movs	r2, #1
    6b08:	409a      	lsls	r2, r3
    6b0a:	9b01      	ldr	r3, [sp, #4]
    6b0c:	6858      	ldr	r0, [r3, #4]
    6b0e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b12:	005b      	lsls	r3, r3, #1
    6b14:	4403      	add	r3, r0
    6b16:	881b      	ldrh	r3, [r3, #0]
    6b18:	095b      	lsrs	r3, r3, #5
    6b1a:	b29b      	uxth	r3, r3
    6b1c:	4618      	mov	r0, r3
    6b1e:	4b5c      	ldr	r3, [pc, #368]	; (6c90 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6b24:	430a      	orrs	r2, r1
    6b26:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6b28:	f007 ffa6 	bl	ea78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
    6b2c:	e086      	b.n	6c3c <Port_Ipw_Init_UnusedPins+0x218>
        }
        /* The direction of pin is INPUT or HIGH Z */
        else
        {
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09();
    6b2e:	f007 ff77 	bl	ea20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PDDR &= ~(((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])));
    6b32:	9b01      	ldr	r3, [sp, #4]
    6b34:	685a      	ldr	r2, [r3, #4]
    6b36:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b3a:	005b      	lsls	r3, r3, #1
    6b3c:	4413      	add	r3, r2
    6b3e:	881b      	ldrh	r3, [r3, #0]
    6b40:	095b      	lsrs	r3, r3, #5
    6b42:	b29b      	uxth	r3, r3
    6b44:	461a      	mov	r2, r3
    6b46:	4b52      	ldr	r3, [pc, #328]	; (6c90 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6b4c:	6959      	ldr	r1, [r3, #20]
    6b4e:	9b01      	ldr	r3, [sp, #4]
    6b50:	685a      	ldr	r2, [r3, #4]
    6b52:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b56:	005b      	lsls	r3, r3, #1
    6b58:	4413      	add	r3, r2
    6b5a:	881b      	ldrh	r3, [r3, #0]
    6b5c:	f003 031f 	and.w	r3, r3, #31
    6b60:	2201      	movs	r2, #1
    6b62:	fa02 f303 	lsl.w	r3, r2, r3
    6b66:	43da      	mvns	r2, r3
    6b68:	9b01      	ldr	r3, [sp, #4]
    6b6a:	6858      	ldr	r0, [r3, #4]
    6b6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b70:	005b      	lsls	r3, r3, #1
    6b72:	4403      	add	r3, r0
    6b74:	881b      	ldrh	r3, [r3, #0]
    6b76:	095b      	lsrs	r3, r3, #5
    6b78:	b29b      	uxth	r3, r3
    6b7a:	4618      	mov	r0, r3
    6b7c:	4b44      	ldr	r3, [pc, #272]	; (6c90 <Port_Ipw_Init_UnusedPins+0x26c>)
    6b7e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6b82:	400a      	ands	r2, r1
    6b84:	615a      	str	r2, [r3, #20]
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09();
    6b86:	f007 ff77 	bl	ea78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
            SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10();
    6b8a:	f007 ff9b 	bl	eac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>
            (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6b8e:	9b01      	ldr	r3, [sp, #4]
    6b90:	685a      	ldr	r2, [r3, #4]
    6b92:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6b96:	005b      	lsls	r3, r3, #1
    6b98:	4413      	add	r3, r2
    6b9a:	881b      	ldrh	r3, [r3, #0]
    6b9c:	095b      	lsrs	r3, r3, #5
    6b9e:	b29b      	uxth	r3, r3
    6ba0:	461a      	mov	r2, r3
    6ba2:	4b3b      	ldr	r3, [pc, #236]	; (6c90 <Port_Ipw_Init_UnusedPins+0x26c>)
    6ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ba8:	6999      	ldr	r1, [r3, #24]
    6baa:	9b01      	ldr	r3, [sp, #4]
    6bac:	685a      	ldr	r2, [r3, #4]
    6bae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bb2:	005b      	lsls	r3, r3, #1
    6bb4:	4413      	add	r3, r2
    6bb6:	881b      	ldrh	r3, [r3, #0]
    6bb8:	f003 031f 	and.w	r3, r3, #31
    6bbc:	2201      	movs	r2, #1
    6bbe:	fa02 f303 	lsl.w	r3, r2, r3
    6bc2:	43da      	mvns	r2, r3
    6bc4:	9b01      	ldr	r3, [sp, #4]
    6bc6:	6858      	ldr	r0, [r3, #4]
    6bc8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bcc:	005b      	lsls	r3, r3, #1
    6bce:	4403      	add	r3, r0
    6bd0:	881b      	ldrh	r3, [r3, #0]
    6bd2:	095b      	lsrs	r3, r3, #5
    6bd4:	b29b      	uxth	r3, r3
    6bd6:	4618      	mov	r0, r3
    6bd8:	4b2d      	ldr	r3, [pc, #180]	; (6c90 <Port_Ipw_Init_UnusedPins+0x26c>)
    6bda:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6bde:	400a      	ands	r2, r1
    6be0:	619a      	str	r2, [r3, #24]

            /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP */
            if (PORT_PIN_HIGH_Z == eLocalPDDIR)
    6be2:	9b02      	ldr	r3, [sp, #8]
    6be4:	2b03      	cmp	r3, #3
    6be6:	d127      	bne.n	6c38 <Port_Ipw_Init_UnusedPins+0x214>
            {
                (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex]));
    6be8:	9b01      	ldr	r3, [sp, #4]
    6bea:	685a      	ldr	r2, [r3, #4]
    6bec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bf0:	005b      	lsls	r3, r3, #1
    6bf2:	4413      	add	r3, r2
    6bf4:	881b      	ldrh	r3, [r3, #0]
    6bf6:	095b      	lsrs	r3, r3, #5
    6bf8:	b29b      	uxth	r3, r3
    6bfa:	461a      	mov	r2, r3
    6bfc:	4b24      	ldr	r3, [pc, #144]	; (6c90 <Port_Ipw_Init_UnusedPins+0x26c>)
    6bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c02:	6999      	ldr	r1, [r3, #24]
    6c04:	9b01      	ldr	r3, [sp, #4]
    6c06:	685a      	ldr	r2, [r3, #4]
    6c08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c0c:	005b      	lsls	r3, r3, #1
    6c0e:	4413      	add	r3, r2
    6c10:	881b      	ldrh	r3, [r3, #0]
    6c12:	f003 031f 	and.w	r3, r3, #31
    6c16:	2201      	movs	r2, #1
    6c18:	409a      	lsls	r2, r3
    6c1a:	9b01      	ldr	r3, [sp, #4]
    6c1c:	6858      	ldr	r0, [r3, #4]
    6c1e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c22:	005b      	lsls	r3, r3, #1
    6c24:	4403      	add	r3, r0
    6c26:	881b      	ldrh	r3, [r3, #0]
    6c28:	095b      	lsrs	r3, r3, #5
    6c2a:	b29b      	uxth	r3, r3
    6c2c:	4618      	mov	r0, r3
    6c2e:	4b18      	ldr	r3, [pc, #96]	; (6c90 <Port_Ipw_Init_UnusedPins+0x26c>)
    6c30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6c34:	430a      	orrs	r2, r1
    6c36:	619a      	str	r2, [r3, #24]
            }
            SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10();
    6c38:	f007 ff70 	bl	eb1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>
#endif /* FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER */
        }
        /* Write PCR configuration from Configuration tool */
        (Port_au32PortCiPortBaseAddr[GPIO_PORT_U32(pConfigPtr->pUnusedPads[u16PinIndex])])->PCR[GPIO_CHANNEL_U32(pConfigPtr->pUnusedPads[u16PinIndex])] = u32LocalPCR;
    6c3c:	9b01      	ldr	r3, [sp, #4]
    6c3e:	685a      	ldr	r2, [r3, #4]
    6c40:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c44:	005b      	lsls	r3, r3, #1
    6c46:	4413      	add	r3, r2
    6c48:	881b      	ldrh	r3, [r3, #0]
    6c4a:	095b      	lsrs	r3, r3, #5
    6c4c:	b29b      	uxth	r3, r3
    6c4e:	461a      	mov	r2, r3
    6c50:	4b10      	ldr	r3, [pc, #64]	; (6c94 <Port_Ipw_Init_UnusedPins+0x270>)
    6c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6c56:	9a01      	ldr	r2, [sp, #4]
    6c58:	6851      	ldr	r1, [r2, #4]
    6c5a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6c5e:	0052      	lsls	r2, r2, #1
    6c60:	440a      	add	r2, r1
    6c62:	8812      	ldrh	r2, [r2, #0]
    6c64:	f002 021f 	and.w	r2, r2, #31
    6c68:	9903      	ldr	r1, [sp, #12]
    6c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumUnusedPins; u16PinIndex++)
    6c6e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6c72:	3301      	adds	r3, #1
    6c74:	f8ad 3016 	strh.w	r3, [sp, #22]
    6c78:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    6c7c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6c80:	429a      	cmp	r2, r3
    6c82:	f4ff aee7 	bcc.w	6a54 <Port_Ipw_Init_UnusedPins+0x30>
    }
}
    6c86:	bf00      	nop
    6c88:	bf00      	nop
    6c8a:	b007      	add	sp, #28
    6c8c:	f85d fb04 	ldr.w	pc, [sp], #4
    6c90:	000101b0 	.word	0x000101b0
    6c94:	0001019c 	.word	0x0001019c

00006c98 <Port_Ipw_Init>:
*/
void Port_Ipw_Init
(
    const Port_ConfigType * pConfigPtr
)
{
    6c98:	b500      	push	{lr}
    6c9a:	b085      	sub	sp, #20
    6c9c:	9001      	str	r0, [sp, #4]
    uint16 u16PinIndex;

    uint8 u8NumDigFilterPorts          = (uint8)(pConfigPtr->u8NumDigitalFilterPorts);
    6c9e:	9b01      	ldr	r3, [sp, #4]
    6ca0:	7c1b      	ldrb	r3, [r3, #16]
    6ca2:	f88d 300d 	strb.w	r3, [sp, #13]
    uint8 u8Port;

    /* Initialize all configured digital filter ports. Use u16PinIndex variable as counter, even if we loop on a uint8 variable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6ca6:	2300      	movs	r3, #0
    6ca8:	f8ad 300e 	strh.w	r3, [sp, #14]
    6cac:	e035      	b.n	6d1a <Port_Ipw_Init+0x82>
    {
        u8Port = pConfigPtr->pDigitalFilterConfig[u16PinIndex].u8Port;
    6cae:	9b01      	ldr	r3, [sp, #4]
    6cb0:	695a      	ldr	r2, [r3, #20]
    6cb2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6cb6:	00db      	lsls	r3, r3, #3
    6cb8:	4413      	add	r3, r2
    6cba:	781b      	ldrb	r3, [r3, #0]
    6cbc:	f88d 300c 	strb.w	r3, [sp, #12]

        /* Set digital filter clock and width for the current port */
        Port_Ci_Port_Ip_ConfigDigitalFilter(Port_au32PortCiPortBaseAddr[u8Port], &(pConfigPtr->pDigitalFilterConfig[u16PinIndex]));
    6cc0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6cc4:	4a1f      	ldr	r2, [pc, #124]	; (6d44 <Port_Ipw_Init+0xac>)
    6cc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    6cca:	9b01      	ldr	r3, [sp, #4]
    6ccc:	695a      	ldr	r2, [r3, #20]
    6cce:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6cd2:	00db      	lsls	r3, r3, #3
    6cd4:	4413      	add	r3, r2
    6cd6:	4619      	mov	r1, r3
    6cd8:	f7ff fe39 	bl	694e <Port_Ci_Port_Ip_ConfigDigitalFilter>
        /* Enable digital filter for the pins selected by the user for the current port */
        SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15();
    6cdc:	f008 f88c 	bl	edf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>
        (Port_au32PortCiPortBaseAddr[u8Port])->DFER |= (uint32)(pConfigPtr->pDigitalFilterConfig[u16PinIndex].u32PinMask);
    6ce0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6ce4:	4a17      	ldr	r2, [pc, #92]	; (6d44 <Port_Ipw_Init+0xac>)
    6ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6cea:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    6cee:	9b01      	ldr	r3, [sp, #4]
    6cf0:	695a      	ldr	r2, [r3, #20]
    6cf2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6cf6:	00db      	lsls	r3, r3, #3
    6cf8:	4413      	add	r3, r2
    6cfa:	685a      	ldr	r2, [r3, #4]
    6cfc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    6d00:	4810      	ldr	r0, [pc, #64]	; (6d44 <Port_Ipw_Init+0xac>)
    6d02:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6d06:	430a      	orrs	r2, r1
    6d08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15();
    6d0c:	f008 f8a0 	bl	ee50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>
    for (u16PinIndex = (uint16)0U; u16PinIndex < (uint16)u8NumDigFilterPorts; u16PinIndex++)
    6d10:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6d14:	3301      	adds	r3, #1
    6d16:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d1a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    6d1e:	b29b      	uxth	r3, r3
    6d20:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d24:	429a      	cmp	r2, r3
    6d26:	d3c2      	bcc.n	6cae <Port_Ipw_Init+0x16>
    }

    (void)Port_Ci_Port_Ip_Init(NUM_OF_CONFIGURED_PINS, pConfigPtr->IpConfigPtr);
    6d28:	9b01      	ldr	r3, [sp, #4]
    6d2a:	6a1b      	ldr	r3, [r3, #32]
    6d2c:	4619      	mov	r1, r3
    6d2e:	2010      	movs	r0, #16
    6d30:	f7ff fd98 	bl	6864 <Port_Ci_Port_Ip_Init>

    /* Initialize All Unused Port Pins */
    Port_Ipw_Init_UnusedPins(pConfigPtr);
    6d34:	9801      	ldr	r0, [sp, #4]
    6d36:	f7ff fe75 	bl	6a24 <Port_Ipw_Init_UnusedPins>
#endif /* ((STD_ON == PORT_SET_PIN_DIRECTION_API) || (STD_ON == PORT_SET_PIN_MODE_API) ||         \
           (defined(PORT_SET_2_PINS_DIRECTION_API) && (STD_ON == PORT_SET_2_PINS_DIRECTION_API))  \
          ) */
#endif /* (STD_ON == PORT_DEV_ERROR_DETECT) */

}
    6d3a:	bf00      	nop
    6d3c:	b005      	add	sp, #20
    6d3e:	f85d fb04 	ldr.w	pc, [sp], #4
    6d42:	bf00      	nop
    6d44:	0001019c 	.word	0x0001019c

00006d48 <Port_Ipw_RefreshPortDirection>:
*/
void Port_Ipw_RefreshPortDirection
(
    const Port_ConfigType * pConfigPtr
)
{
    6d48:	b500      	push	{lr}
    6d4a:	b085      	sub	sp, #20
    6d4c:	9001      	str	r0, [sp, #4]
    uint16 u16NumPins = pConfigPtr->u16NumPins;
    6d4e:	9b01      	ldr	r3, [sp, #4]
    6d50:	881b      	ldrh	r3, [r3, #0]
    6d52:	f8ad 300c 	strh.w	r3, [sp, #12]
    /* Index of the port table */
    uint16 u16PinIndex;
    uint16 PinPad;

    /* Initialize All Configured Port Pins that aren't direction changable */
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6d56:	2300      	movs	r3, #0
    6d58:	f8ad 300e 	strh.w	r3, [sp, #14]
    6d5c:	e0d2      	b.n	6f04 <Port_Ipw_RefreshPortDirection+0x1bc>
    {
        if (FALSE == pConfigPtr->pUsedPadConfig[u16PinIndex].bDC)
    6d5e:	9b01      	ldr	r3, [sp, #4]
    6d60:	68d9      	ldr	r1, [r3, #12]
    6d62:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d66:	4613      	mov	r3, r2
    6d68:	009b      	lsls	r3, r3, #2
    6d6a:	4413      	add	r3, r2
    6d6c:	009b      	lsls	r3, r3, #2
    6d6e:	440b      	add	r3, r1
    6d70:	7c5b      	ldrb	r3, [r3, #17]
    6d72:	f083 0301 	eor.w	r3, r3, #1
    6d76:	b2db      	uxtb	r3, r3
    6d78:	2b00      	cmp	r3, #0
    6d7a:	f000 80be 	beq.w	6efa <Port_Ipw_RefreshPortDirection+0x1b2>
        {
            /* On this platform we can only determine direction for the pins initialy configured as GPIOs */
            if (TRUE == pConfigPtr->pUsedPadConfig[u16PinIndex].bGPIO)
    6d7e:	9b01      	ldr	r3, [sp, #4]
    6d80:	68d9      	ldr	r1, [r3, #12]
    6d82:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6d86:	4613      	mov	r3, r2
    6d88:	009b      	lsls	r3, r3, #2
    6d8a:	4413      	add	r3, r2
    6d8c:	009b      	lsls	r3, r3, #2
    6d8e:	440b      	add	r3, r1
    6d90:	7c1b      	ldrb	r3, [r3, #16]
    6d92:	2b00      	cmp	r3, #0
    6d94:	f000 80b1 	beq.w	6efa <Port_Ipw_RefreshPortDirection+0x1b2>
            {
                /* Point to the Port Pin MSCR register address*/
                PinPad = pConfigPtr->pUsedPadConfig[u16PinIndex].Pin;
    6d98:	9b01      	ldr	r3, [sp, #4]
    6d9a:	68d9      	ldr	r1, [r3, #12]
    6d9c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6da0:	4613      	mov	r3, r2
    6da2:	009b      	lsls	r3, r3, #2
    6da4:	4413      	add	r3, r2
    6da6:	009b      	lsls	r3, r3, #2
    6da8:	440b      	add	r3, r1
    6daa:	881b      	ldrh	r3, [r3, #0]
    6dac:	f8ad 300a 	strh.w	r3, [sp, #10]

                /* Configures Port Pin as Output */
                if (PORT_PIN_OUT == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6db0:	9b01      	ldr	r3, [sp, #4]
    6db2:	68d9      	ldr	r1, [r3, #12]
    6db4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6db8:	4613      	mov	r3, r2
    6dba:	009b      	lsls	r3, r3, #2
    6dbc:	4413      	add	r3, r2
    6dbe:	009b      	lsls	r3, r3, #2
    6dc0:	440b      	add	r3, r1
    6dc2:	68db      	ldr	r3, [r3, #12]
    6dc4:	2b02      	cmp	r3, #2
    6dc6:	d11d      	bne.n	6e04 <Port_Ipw_RefreshPortDirection+0xbc>
                {
                    /* Configure the pin direction as output in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6dc8:	f008 f95e 	bl	f088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6dcc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6dd0:	095b      	lsrs	r3, r3, #5
    6dd2:	b29b      	uxth	r3, r3
    6dd4:	461a      	mov	r2, r3
    6dd6:	4b51      	ldr	r3, [pc, #324]	; (6f1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ddc:	6959      	ldr	r1, [r3, #20]
    6dde:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6de2:	f003 031f 	and.w	r3, r3, #31
    6de6:	2201      	movs	r2, #1
    6de8:	409a      	lsls	r2, r3
    6dea:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6dee:	095b      	lsrs	r3, r3, #5
    6df0:	b29b      	uxth	r3, r3
    6df2:	4618      	mov	r0, r3
    6df4:	4b49      	ldr	r3, [pc, #292]	; (6f1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6df6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6dfa:	430a      	orrs	r2, r1
    6dfc:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6dfe:	f008 f96f 	bl	f0e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
    6e02:	e07a      	b.n	6efa <Port_Ipw_RefreshPortDirection+0x1b2>
                }
                /* Configures Port Pin as Input or High-Z*/
                else if ((PORT_PIN_IN == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir) || (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir))
    6e04:	9b01      	ldr	r3, [sp, #4]
    6e06:	68d9      	ldr	r1, [r3, #12]
    6e08:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6e0c:	4613      	mov	r3, r2
    6e0e:	009b      	lsls	r3, r3, #2
    6e10:	4413      	add	r3, r2
    6e12:	009b      	lsls	r3, r3, #2
    6e14:	440b      	add	r3, r1
    6e16:	68db      	ldr	r3, [r3, #12]
    6e18:	2b01      	cmp	r3, #1
    6e1a:	d00b      	beq.n	6e34 <Port_Ipw_RefreshPortDirection+0xec>
    6e1c:	9b01      	ldr	r3, [sp, #4]
    6e1e:	68d9      	ldr	r1, [r3, #12]
    6e20:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6e24:	4613      	mov	r3, r2
    6e26:	009b      	lsls	r3, r3, #2
    6e28:	4413      	add	r3, r2
    6e2a:	009b      	lsls	r3, r3, #2
    6e2c:	440b      	add	r3, r1
    6e2e:	68db      	ldr	r3, [r3, #12]
    6e30:	2b03      	cmp	r3, #3
    6e32:	d162      	bne.n	6efa <Port_Ipw_RefreshPortDirection+0x1b2>
                {
                    /* Configure the pin direction as input in the PDDR register of GPIO IP */
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19();
    6e34:	f008 f928 	bl	f088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PDDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6e38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e3c:	095b      	lsrs	r3, r3, #5
    6e3e:	b29b      	uxth	r3, r3
    6e40:	461a      	mov	r2, r3
    6e42:	4b36      	ldr	r3, [pc, #216]	; (6f1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6e48:	6959      	ldr	r1, [r3, #20]
    6e4a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e4e:	f003 031f 	and.w	r3, r3, #31
    6e52:	2201      	movs	r2, #1
    6e54:	fa02 f303 	lsl.w	r3, r2, r3
    6e58:	43da      	mvns	r2, r3
    6e5a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e5e:	095b      	lsrs	r3, r3, #5
    6e60:	b29b      	uxth	r3, r3
    6e62:	4618      	mov	r0, r3
    6e64:	4b2d      	ldr	r3, [pc, #180]	; (6f1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6e66:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6e6a:	400a      	ands	r2, r1
    6e6c:	615a      	str	r2, [r3, #20]
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19();
    6e6e:	f008 f937 	bl	f0e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>
#ifdef FEATURE_PORT_CI_PORT_IP_HAS_PIDR_REGISTER
                    SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20();
    6e72:	f008 f95b 	bl	f12c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>
                    (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR &= ~((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6e76:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e7a:	095b      	lsrs	r3, r3, #5
    6e7c:	b29b      	uxth	r3, r3
    6e7e:	461a      	mov	r2, r3
    6e80:	4b26      	ldr	r3, [pc, #152]	; (6f1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6e86:	6999      	ldr	r1, [r3, #24]
    6e88:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e8c:	f003 031f 	and.w	r3, r3, #31
    6e90:	2201      	movs	r2, #1
    6e92:	fa02 f303 	lsl.w	r3, r2, r3
    6e96:	43da      	mvns	r2, r3
    6e98:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6e9c:	095b      	lsrs	r3, r3, #5
    6e9e:	b29b      	uxth	r3, r3
    6ea0:	4618      	mov	r0, r3
    6ea2:	4b1e      	ldr	r3, [pc, #120]	; (6f1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6ea4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6ea8:	400a      	ands	r2, r1
    6eaa:	619a      	str	r2, [r3, #24]

                    /* Check if the pin is HIGH-Z. In this case the driver needs to disable port input in PIDR register of GPIO IP*/
                    if (PORT_PIN_HIGH_Z == pConfigPtr->pUsedPadConfig[u16PinIndex].ePadDir)
    6eac:	9b01      	ldr	r3, [sp, #4]
    6eae:	68d9      	ldr	r1, [r3, #12]
    6eb0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6eb4:	4613      	mov	r3, r2
    6eb6:	009b      	lsls	r3, r3, #2
    6eb8:	4413      	add	r3, r2
    6eba:	009b      	lsls	r3, r3, #2
    6ebc:	440b      	add	r3, r1
    6ebe:	68db      	ldr	r3, [r3, #12]
    6ec0:	2b03      	cmp	r3, #3
    6ec2:	d118      	bne.n	6ef6 <Port_Ipw_RefreshPortDirection+0x1ae>
                    {
                        (Port_au32PortCiGpioBaseAddr[GPIO_PORT_U32(PinPad)])->PIDR |= ((uint32)1U << GPIO_CHANNEL_U32(PinPad));
    6ec4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6ec8:	095b      	lsrs	r3, r3, #5
    6eca:	b29b      	uxth	r3, r3
    6ecc:	461a      	mov	r2, r3
    6ece:	4b13      	ldr	r3, [pc, #76]	; (6f1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6ed4:	6999      	ldr	r1, [r3, #24]
    6ed6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6eda:	f003 031f 	and.w	r3, r3, #31
    6ede:	2201      	movs	r2, #1
    6ee0:	409a      	lsls	r2, r3
    6ee2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6ee6:	095b      	lsrs	r3, r3, #5
    6ee8:	b29b      	uxth	r3, r3
    6eea:	4618      	mov	r0, r3
    6eec:	4b0b      	ldr	r3, [pc, #44]	; (6f1c <Port_Ipw_RefreshPortDirection+0x1d4>)
    6eee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6ef2:	430a      	orrs	r2, r1
    6ef4:	619a      	str	r2, [r3, #24]
                    }
                    SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20();
    6ef6:	f008 f945 	bl	f184 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>
    for (u16PinIndex = (uint16)0U; u16PinIndex < u16NumPins; u16PinIndex++)
    6efa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    6efe:	3301      	adds	r3, #1
    6f00:	f8ad 300e 	strh.w	r3, [sp, #14]
    6f04:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6f08:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    6f0c:	429a      	cmp	r2, r3
    6f0e:	f4ff af26 	bcc.w	6d5e <Port_Ipw_RefreshPortDirection+0x16>
                    /* Do nothing. Else branch present in order to avoid MISRA's violations */
                }
            }
        }
    }
}
    6f12:	bf00      	nop
    6f14:	bf00      	nop
    6f16:	b005      	add	sp, #20
    6f18:	f85d fb04 	ldr.w	pc, [sp], #4
    6f1c:	000101b0 	.word	0x000101b0

00006f20 <Dio_ReadChannel>:
*/
Dio_LevelType Dio_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    6f20:	b500      	push	{lr}
    6f22:	b085      	sub	sp, #20
    6f24:	4603      	mov	r3, r0
    6f26:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6f2a:	2300      	movs	r3, #0
    6f2c:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForRead(ChannelId, DIO_READCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_ReadChannel(ChannelId);
    6f30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6f34:	4618      	mov	r0, r3
    6f36:	f000 f871 	bl	701c <Dio_Ipw_ReadChannel>
    6f3a:	4603      	mov	r3, r0
    6f3c:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return ChannelLevel;
    6f40:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6f44:	4618      	mov	r0, r3
    6f46:	b005      	add	sp, #20
    6f48:	f85d fb04 	ldr.w	pc, [sp], #4

00006f4c <Dio_WriteChannel>:
void Dio_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    6f4c:	b500      	push	{lr}
    6f4e:	b083      	sub	sp, #12
    6f50:	4603      	mov	r3, r0
    6f52:	460a      	mov	r2, r1
    6f54:	f8ad 3006 	strh.w	r3, [sp, #6]
    6f58:	4613      	mov	r3, r2
    6f5a:	f88d 3005 	strb.w	r3, [sp, #5]
    {
        Valid = Dio_ValidateChannelLevel(Level);
        if ((Std_ReturnType) E_OK == Valid)
        {
#endif
            Dio_Ipw_WriteChannel(ChannelId, Level);
    6f5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6f62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6f66:	4611      	mov	r1, r2
    6f68:	4618      	mov	r0, r3
    6f6a:	f000 f87d 	bl	7068 <Dio_Ipw_WriteChannel>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
        }
    }
#endif

}
    6f6e:	bf00      	nop
    6f70:	b003      	add	sp, #12
    6f72:	f85d fb04 	ldr.w	pc, [sp], #4

00006f76 <Dio_FlipChannel>:
*/
Dio_LevelType Dio_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    6f76:	b500      	push	{lr}
    6f78:	b085      	sub	sp, #20
    6f7a:	4603      	mov	r3, r0
    6f7c:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    6f80:	2300      	movs	r3, #0
    6f82:	f88d 300f 	strb.w	r3, [sp, #15]
    Std_ReturnType Valid = Dio_ValidateChannelForWrite(ChannelId, DIO_FLIPCHANNEL_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        ChannelLevel = Dio_Ipw_FlipChannel(ChannelId);
    6f86:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6f8a:	4618      	mov	r0, r3
    6f8c:	f000 f892 	bl	70b4 <Dio_Ipw_FlipChannel>
    6f90:	4603      	mov	r3, r0
    6f92:	f88d 300f 	strb.w	r3, [sp, #15]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

   return ChannelLevel;
    6f96:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    6f9a:	4618      	mov	r0, r3
    6f9c:	b005      	add	sp, #20
    6f9e:	f85d fb04 	ldr.w	pc, [sp], #4

00006fa2 <Dio_ReadPort>:
*/
Dio_PortLevelType Dio_ReadPort
(
    Dio_PortType PortId
)
{
    6fa2:	b500      	push	{lr}
    6fa4:	b085      	sub	sp, #20
    6fa6:	4603      	mov	r3, r0
    6fa8:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6fac:	2300      	movs	r3, #0
    6fae:	9303      	str	r3, [sp, #12]
    Std_ReturnType Valid = Dio_ValidatePortForRead(PortId, DIO_READPORT_ID);

    if ((Std_ReturnType) E_OK == Valid)
    {
#endif
        PortLevel = Dio_Ipw_ReadPort(PortId);
    6fb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6fb4:	4618      	mov	r0, r3
    6fb6:	f000 f8b3 	bl	7120 <Dio_Ipw_ReadPort>
    6fba:	9003      	str	r0, [sp, #12]
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif

    return PortLevel;
    6fbc:	9b03      	ldr	r3, [sp, #12]
}
    6fbe:	4618      	mov	r0, r3
    6fc0:	b005      	add	sp, #20
    6fc2:	f85d fb04 	ldr.w	pc, [sp], #4

00006fc6 <Dio_WritePort>:
void Dio_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    6fc6:	b500      	push	{lr}
    6fc8:	b083      	sub	sp, #12
    6fca:	4603      	mov	r3, r0
    6fcc:	9100      	str	r1, [sp, #0]
    6fce:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType Valid = Dio_ValidatePortForWrite(PortId, DIO_WRITEPORT_ID);

    if ((Std_ReturnType)E_OK == Valid)
    {
#endif
        Dio_Ipw_WritePort(PortId, Level);
    6fd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6fd6:	9900      	ldr	r1, [sp, #0]
    6fd8:	4618      	mov	r0, r3
    6fda:	f000 f8b9 	bl	7150 <Dio_Ipw_WritePort>
#if (STD_ON == DIO_DEV_ERROR_DETECT)
    }
#endif
}
    6fde:	bf00      	nop
    6fe0:	b003      	add	sp, #12
    6fe2:	f85d fb04 	ldr.w	pc, [sp], #4

00006fe6 <Dio_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_ReadChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr
)
{
    6fe6:	b500      	push	{lr}
    6fe8:	b085      	sub	sp, #20
    6fea:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    6fec:	2300      	movs	r3, #0
    6fee:	9303      	str	r3, [sp, #12]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            PortLevel = Dio_Ipw_ReadChannelGroup(ChannelGroupIdPtr);
    6ff0:	9801      	ldr	r0, [sp, #4]
    6ff2:	f000 f8c5 	bl	7180 <Dio_Ipw_ReadChannelGroup>
    6ff6:	9003      	str	r0, [sp, #12]
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */

    return PortLevel;
    6ff8:	9b03      	ldr	r3, [sp, #12]
}
    6ffa:	4618      	mov	r0, r3
    6ffc:	b005      	add	sp, #20
    6ffe:	f85d fb04 	ldr.w	pc, [sp], #4

00007002 <Dio_WriteChannelGroup>:
void Dio_WriteChannelGroup
(
    const Dio_ChannelGroupType * ChannelGroupIdPtr,
    Dio_PortLevelType Level
)
{
    7002:	b500      	push	{lr}
    7004:	b083      	sub	sp, #12
    7006:	9001      	str	r0, [sp, #4]
    7008:	9100      	str	r1, [sp, #0]
        }
        if ((uint8)1 == GroupAlocated)
        {
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
#endif /* DIO_DEV_ERROR_DETECT */
            Dio_Ipw_WriteChannelGroup(ChannelGroupIdPtr, Level);
    700a:	9900      	ldr	r1, [sp, #0]
    700c:	9801      	ldr	r0, [sp, #4]
    700e:	f000 f8d7 	bl	71c0 <Dio_Ipw_WriteChannelGroup>
            (void)Det_ReportError((uint16)DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_WRITECHANNELGROUP_ID, DIO_E_PARAM_CONFIG);
        }
#endif /* DIO_CHANNEL_GROUPS_AVAILABLE */
    }
#endif /* DIO_DEV_ERROR_DETECT */
}
    7012:	bf00      	nop
    7014:	b003      	add	sp, #12
    7016:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0000701c <Dio_Ipw_ReadChannel>:
*/
Dio_LevelType Dio_Ipw_ReadChannel
(
    Dio_ChannelType ChannelId
)
{
    701c:	b500      	push	{lr}
    701e:	b087      	sub	sp, #28
    7020:	4603      	mov	r3, r0
    7022:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType) STD_LOW;
    7026:	2300      	movs	r3, #0
    7028:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    702c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7030:	095b      	lsrs	r3, r3, #5
    7032:	b29b      	uxth	r3, r3
    7034:	9304      	str	r3, [sp, #16]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7036:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    703a:	f003 031f 	and.w	r3, r3, #31
    703e:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    7040:	4a08      	ldr	r2, [pc, #32]	; (7064 <Dio_Ipw_ReadChannel+0x48>)
    7042:	9b04      	ldr	r3, [sp, #16]
    7044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7048:	9302      	str	r3, [sp, #8]

    ChannelLevel = Gpio_Dio_Ip_ReadPin(GpioBase, u32PinIndex);
    704a:	9903      	ldr	r1, [sp, #12]
    704c:	9802      	ldr	r0, [sp, #8]
    704e:	f000 f940 	bl	72d2 <Gpio_Dio_Ip_ReadPin>
    7052:	4603      	mov	r3, r0
    7054:	f88d 3017 	strb.w	r3, [sp, #23]
    return ChannelLevel;
    7058:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    705c:	4618      	mov	r0, r3
    705e:	b007      	add	sp, #28
    7060:	f85d fb04 	ldr.w	pc, [sp], #4
    7064:	1fff8b24 	.word	0x1fff8b24

00007068 <Dio_Ipw_WriteChannel>:
void Dio_Ipw_WriteChannel
(
    Dio_ChannelType ChannelId,
    Dio_LevelType Level
)
{
    7068:	b500      	push	{lr}
    706a:	b087      	sub	sp, #28
    706c:	4603      	mov	r3, r0
    706e:	460a      	mov	r2, r1
    7070:	f8ad 3006 	strh.w	r3, [sp, #6]
    7074:	4613      	mov	r3, r2
    7076:	f88d 3005 	strb.w	r3, [sp, #5]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;

    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    707a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    707e:	095b      	lsrs	r3, r3, #5
    7080:	b29b      	uxth	r3, r3
    7082:	9305      	str	r3, [sp, #20]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    7084:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7088:	f003 031f 	and.w	r3, r3, #31
    708c:	9304      	str	r3, [sp, #16]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    708e:	4a08      	ldr	r2, [pc, #32]	; (70b0 <Dio_Ipw_WriteChannel+0x48>)
    7090:	9b05      	ldr	r3, [sp, #20]
    7092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7096:	9303      	str	r3, [sp, #12]

    Gpio_Dio_Ip_WritePin(GpioBase, u32PinIndex, Level);
    7098:	f89d 3005 	ldrb.w	r3, [sp, #5]
    709c:	461a      	mov	r2, r3
    709e:	9904      	ldr	r1, [sp, #16]
    70a0:	9803      	ldr	r0, [sp, #12]
    70a2:	f000 f8b7 	bl	7214 <Gpio_Dio_Ip_WritePin>
}
    70a6:	bf00      	nop
    70a8:	b007      	add	sp, #28
    70aa:	f85d fb04 	ldr.w	pc, [sp], #4
    70ae:	bf00      	nop
    70b0:	1fff8b24 	.word	0x1fff8b24

000070b4 <Dio_Ipw_FlipChannel>:
*/
Dio_LevelType Dio_Ipw_FlipChannel
(
    Dio_ChannelType ChannelId
)
{
    70b4:	b500      	push	{lr}
    70b6:	b089      	sub	sp, #36	; 0x24
    70b8:	4603      	mov	r3, r0
    70ba:	f8ad 3006 	strh.w	r3, [sp, #6]
    Dio_LevelType ChannelLevel = (Dio_LevelType)STD_LOW;
    70be:	2300      	movs	r3, #0
    70c0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32GpioInstance;
    uint32 u32PinIndex;
    uint32 u32PortOutPutLevel;
    u32GpioInstance = GPIO_DIO_IP_PORT_U32(ChannelId);
    70c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    70c8:	095b      	lsrs	r3, r3, #5
    70ca:	b29b      	uxth	r3, r3
    70cc:	9306      	str	r3, [sp, #24]
    u32PinIndex = GPIO_DIO_IP_CHANNEL_U32(ChannelId);
    70ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    70d2:	f003 031f 	and.w	r3, r3, #31
    70d6:	9305      	str	r3, [sp, #20]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[u32GpioInstance];
    70d8:	4a10      	ldr	r2, [pc, #64]	; (711c <Dio_Ipw_FlipChannel+0x68>)
    70da:	9b06      	ldr	r3, [sp, #24]
    70dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70e0:	9304      	str	r3, [sp, #16]

    Gpio_Dio_Ip_TogglePins(GpioBase, ((uint32)1U << u32PinIndex));
    70e2:	2201      	movs	r2, #1
    70e4:	9b05      	ldr	r3, [sp, #20]
    70e6:	fa02 f303 	lsl.w	r3, r2, r3
    70ea:	4619      	mov	r1, r3
    70ec:	9804      	ldr	r0, [sp, #16]
    70ee:	f000 f8dc 	bl	72aa <Gpio_Dio_Ip_TogglePins>

    u32PortOutPutLevel = Gpio_Dio_Ip_GetPinsOutput(GpioBase);
    70f2:	9804      	ldr	r0, [sp, #16]
    70f4:	f000 f8bc 	bl	7270 <Gpio_Dio_Ip_GetPinsOutput>
    70f8:	9003      	str	r0, [sp, #12]
    ChannelLevel = (Dio_LevelType)((u32PortOutPutLevel & ((uint32)1U << u32PinIndex)) >> u32PinIndex);
    70fa:	2201      	movs	r2, #1
    70fc:	9b05      	ldr	r3, [sp, #20]
    70fe:	409a      	lsls	r2, r3
    7100:	9b03      	ldr	r3, [sp, #12]
    7102:	401a      	ands	r2, r3
    7104:	9b05      	ldr	r3, [sp, #20]
    7106:	fa22 f303 	lsr.w	r3, r2, r3
    710a:	f88d 301f 	strb.w	r3, [sp, #31]

    return ChannelLevel;
    710e:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    7112:	4618      	mov	r0, r3
    7114:	b009      	add	sp, #36	; 0x24
    7116:	f85d fb04 	ldr.w	pc, [sp], #4
    711a:	bf00      	nop
    711c:	1fff8b24 	.word	0x1fff8b24

00007120 <Dio_Ipw_ReadPort>:
*/
Dio_PortLevelType Dio_Ipw_ReadPort
(
    Dio_PortType PortId
)
{
    7120:	b500      	push	{lr}
    7122:	b085      	sub	sp, #20
    7124:	4603      	mov	r3, r0
    7126:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    712a:	2300      	movs	r3, #0
    712c:	9303      	str	r3, [sp, #12]
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    712e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7132:	4a06      	ldr	r2, [pc, #24]	; (714c <Dio_Ipw_ReadPort+0x2c>)
    7134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7138:	9302      	str	r3, [sp, #8]

    PortLevel = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    713a:	9802      	ldr	r0, [sp, #8]
    713c:	f000 f8be 	bl	72bc <Gpio_Dio_Ip_ReadPins>
    7140:	9003      	str	r0, [sp, #12]
#endif
#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#endif

    return PortLevel;
    7142:	9b03      	ldr	r3, [sp, #12]
}
    7144:	4618      	mov	r0, r3
    7146:	b005      	add	sp, #20
    7148:	f85d fb04 	ldr.w	pc, [sp], #4
    714c:	1fff8b24 	.word	0x1fff8b24

00007150 <Dio_Ipw_WritePort>:
void Dio_Ipw_WritePort
(
    Dio_PortType PortId,
    Dio_PortLevelType Level
)
{
    7150:	b500      	push	{lr}
    7152:	b085      	sub	sp, #20
    7154:	4603      	mov	r3, r0
    7156:	9100      	str	r1, [sp, #0]
    7158:	f88d 3007 	strb.w	r3, [sp, #7]
    Dio_PortLevelType CrtLevel = Level;
    715c:	9b00      	ldr	r3, [sp, #0]
    715e:	9303      	str	r3, [sp, #12]
    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[PortId];
    7160:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7164:	4a05      	ldr	r2, [pc, #20]	; (717c <Dio_Ipw_WritePort+0x2c>)
    7166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    716a:	9302      	str	r3, [sp, #8]

#if (STD_ON == DIO_REVERSEPORTBITS)
    CrtLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(CrtLevel));
#endif /* STD_ON == DIO_REVERSEPORTBITS */
    Gpio_Dio_Ip_WritePins(GpioBase, CrtLevel);
    716c:	9903      	ldr	r1, [sp, #12]
    716e:	9802      	ldr	r0, [sp, #8]
    7170:	f000 f875 	bl	725e <Gpio_Dio_Ip_WritePins>
}
    7174:	bf00      	nop
    7176:	b005      	add	sp, #20
    7178:	f85d fb04 	ldr.w	pc, [sp], #4
    717c:	1fff8b24 	.word	0x1fff8b24

00007180 <Dio_Ipw_ReadChannelGroup>:
*/
Dio_PortLevelType Dio_Ipw_ReadChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr
)
{
    7180:	b500      	push	{lr}
    7182:	b087      	sub	sp, #28
    7184:	9001      	str	r0, [sp, #4]
    Dio_PortLevelType PortLevel = (Dio_PortLevelType)STD_LOW;
    7186:	2300      	movs	r3, #0
    7188:	9305      	str	r3, [sp, #20]
    Dio_PortLevelType pinsValue;
    const GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    718a:	9b01      	ldr	r3, [sp, #4]
    718c:	781b      	ldrb	r3, [r3, #0]
    718e:	461a      	mov	r2, r3
    7190:	4b0a      	ldr	r3, [pc, #40]	; (71bc <Dio_Ipw_ReadChannelGroup+0x3c>)
    7192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7196:	9304      	str	r3, [sp, #16]

    pinsValue = (Dio_PortLevelType)(Gpio_Dio_Ip_ReadPins(GpioBase));
    7198:	9804      	ldr	r0, [sp, #16]
    719a:	f000 f88f 	bl	72bc <Gpio_Dio_Ip_ReadPins>
    719e:	9003      	str	r0, [sp, #12]

#if (STD_ON == DIO_REVERSEPORTBITS)
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) << (pChannelGroupIdPtr->u8offset));
    PortLevel = (Dio_PortLevelType)(Dio_Ipw_ReverseBits(PortLevel));
#else
    PortLevel = (Dio_PortLevelType)((pinsValue & (pChannelGroupIdPtr->mask)) >> (pChannelGroupIdPtr->u8offset));
    71a0:	9b01      	ldr	r3, [sp, #4]
    71a2:	685a      	ldr	r2, [r3, #4]
    71a4:	9b03      	ldr	r3, [sp, #12]
    71a6:	4013      	ands	r3, r2
    71a8:	9a01      	ldr	r2, [sp, #4]
    71aa:	7852      	ldrb	r2, [r2, #1]
    71ac:	40d3      	lsrs	r3, r2
    71ae:	9305      	str	r3, [sp, #20]
#endif

    return PortLevel;
    71b0:	9b05      	ldr	r3, [sp, #20]
}
    71b2:	4618      	mov	r0, r3
    71b4:	b007      	add	sp, #28
    71b6:	f85d fb04 	ldr.w	pc, [sp], #4
    71ba:	bf00      	nop
    71bc:	1fff8b24 	.word	0x1fff8b24

000071c0 <Dio_Ipw_WriteChannelGroup>:
void Dio_Ipw_WriteChannelGroup
(
    const Dio_ChannelGroupType * pChannelGroupIdPtr,
    Dio_PortLevelType                 Level
)
{
    71c0:	b500      	push	{lr}
    71c2:	b087      	sub	sp, #28
    71c4:	9001      	str	r0, [sp, #4]
    71c6:	9100      	str	r1, [sp, #0]
    Dio_PortLevelType ValueSet;
    Dio_PortLevelType ValueClear;

    GPIO_Type * GpioBase = (GPIO_Type *)GpioBaseAdresses[pChannelGroupIdPtr->port];
    71c8:	9b01      	ldr	r3, [sp, #4]
    71ca:	781b      	ldrb	r3, [r3, #0]
    71cc:	461a      	mov	r2, r3
    71ce:	4b10      	ldr	r3, [pc, #64]	; (7210 <Dio_Ipw_WriteChannelGroup+0x50>)
    71d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    71d4:	9305      	str	r3, [sp, #20]

#if (STD_ON == DIO_REVERSEPORTBITS)
    ValueSet = (((Dio_PortLevelType)(Dio_Ipw_ReverseBits(Level)) >> (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
#else
    ValueSet = (((Dio_PortLevelType)(Level) << (pChannelGroupIdPtr->u8offset)) & (((Dio_PortLevelType)(pChannelGroupIdPtr->mask) )));
    71d6:	9b01      	ldr	r3, [sp, #4]
    71d8:	785b      	ldrb	r3, [r3, #1]
    71da:	461a      	mov	r2, r3
    71dc:	9b00      	ldr	r3, [sp, #0]
    71de:	fa03 f202 	lsl.w	r2, r3, r2
    71e2:	9b01      	ldr	r3, [sp, #4]
    71e4:	685b      	ldr	r3, [r3, #4]
    71e6:	4013      	ands	r3, r2
    71e8:	9304      	str	r3, [sp, #16]
#endif

    Gpio_Dio_Ip_SetPins(GpioBase, ValueSet);
    71ea:	9904      	ldr	r1, [sp, #16]
    71ec:	9805      	ldr	r0, [sp, #20]
    71ee:	f000 f84a 	bl	7286 <Gpio_Dio_Ip_SetPins>
    ValueClear = (~ValueSet) & pChannelGroupIdPtr->mask;
    71f2:	9b04      	ldr	r3, [sp, #16]
    71f4:	43da      	mvns	r2, r3
    71f6:	9b01      	ldr	r3, [sp, #4]
    71f8:	685b      	ldr	r3, [r3, #4]
    71fa:	4013      	ands	r3, r2
    71fc:	9303      	str	r3, [sp, #12]
    Gpio_Dio_Ip_ClearPins(GpioBase, ValueClear);
    71fe:	9903      	ldr	r1, [sp, #12]
    7200:	9805      	ldr	r0, [sp, #20]
    7202:	f000 f849 	bl	7298 <Gpio_Dio_Ip_ClearPins>

}
    7206:	bf00      	nop
    7208:	b007      	add	sp, #28
    720a:	f85d fb04 	ldr.w	pc, [sp], #4
    720e:	bf00      	nop
    7210:	1fff8b24 	.word	0x1fff8b24

00007214 <Gpio_Dio_Ip_WritePin>:
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pin,
    Gpio_Dio_Ip_PinsLevelType value
)
{
    7214:	b500      	push	{lr}
    7216:	b087      	sub	sp, #28
    7218:	9003      	str	r0, [sp, #12]
    721a:	9102      	str	r1, [sp, #8]
    721c:	4613      	mov	r3, r2
    721e:	f88d 3007 	strb.w	r3, [sp, #7]
    /* Enter critical region */
    SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00();
    7222:	f006 ff81 	bl	e128 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>
    Gpio_Dio_Ip_PinsChannelType pinsValues = (Gpio_Dio_Ip_PinsChannelType)base->PDOR;
    7226:	9b03      	ldr	r3, [sp, #12]
    7228:	681b      	ldr	r3, [r3, #0]
    722a:	9305      	str	r3, [sp, #20]
    pinsValues &= (Gpio_Dio_Ip_PinsChannelType)(~((Gpio_Dio_Ip_PinsChannelType)1U << pin));
    722c:	2201      	movs	r2, #1
    722e:	9b02      	ldr	r3, [sp, #8]
    7230:	fa02 f303 	lsl.w	r3, r2, r3
    7234:	43db      	mvns	r3, r3
    7236:	9a05      	ldr	r2, [sp, #20]
    7238:	4013      	ands	r3, r2
    723a:	9305      	str	r3, [sp, #20]
    pinsValues |= (Gpio_Dio_Ip_PinsChannelType)((Gpio_Dio_Ip_PinsChannelType)value << pin);
    723c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7240:	9b02      	ldr	r3, [sp, #8]
    7242:	fa02 f303 	lsl.w	r3, r2, r3
    7246:	9a05      	ldr	r2, [sp, #20]
    7248:	4313      	orrs	r3, r2
    724a:	9305      	str	r3, [sp, #20]
    base->PDOR = GPIO_PDOR_PDO(pinsValues);
    724c:	9b03      	ldr	r3, [sp, #12]
    724e:	9a05      	ldr	r2, [sp, #20]
    7250:	601a      	str	r2, [r3, #0]
    /* Exit critical region */
    SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00();
    7252:	f006 ff95 	bl	e180 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>
}
    7256:	bf00      	nop
    7258:	b007      	add	sp, #28
    725a:	f85d fb04 	ldr.w	pc, [sp], #4

0000725e <Gpio_Dio_Ip_WritePins>:
void Gpio_Dio_Ip_WritePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    725e:	b082      	sub	sp, #8
    7260:	9001      	str	r0, [sp, #4]
    7262:	9100      	str	r1, [sp, #0]
    base->PDOR = GPIO_PDOR_PDO(pins);
    7264:	9b01      	ldr	r3, [sp, #4]
    7266:	9a00      	ldr	r2, [sp, #0]
    7268:	601a      	str	r2, [r3, #0]
}
    726a:	bf00      	nop
    726c:	b002      	add	sp, #8
    726e:	4770      	bx	lr

00007270 <Gpio_Dio_Ip_GetPinsOutput>:
 * that are configured as output will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_GetPinsOutput_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_GetPinsOutput(const GPIO_Type * const base)
{
    7270:	b084      	sub	sp, #16
    7272:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    7274:	2300      	movs	r3, #0
    7276:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDOR);
    7278:	9b01      	ldr	r3, [sp, #4]
    727a:	681b      	ldr	r3, [r3, #0]
    727c:	9303      	str	r3, [sp, #12]
    return returnValue;
    727e:	9b03      	ldr	r3, [sp, #12]
}
    7280:	4618      	mov	r0, r3
    7282:	b004      	add	sp, #16
    7284:	4770      	bx	lr

00007286 <Gpio_Dio_Ip_SetPins>:
void Gpio_Dio_Ip_SetPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7286:	b082      	sub	sp, #8
    7288:	9001      	str	r0, [sp, #4]
    728a:	9100      	str	r1, [sp, #0]
    base->PSOR = GPIO_PSOR_PTSO(pins);
    728c:	9b01      	ldr	r3, [sp, #4]
    728e:	9a00      	ldr	r2, [sp, #0]
    7290:	605a      	str	r2, [r3, #4]
}
    7292:	bf00      	nop
    7294:	b002      	add	sp, #8
    7296:	4770      	bx	lr

00007298 <Gpio_Dio_Ip_ClearPins>:
void Gpio_Dio_Ip_ClearPins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    7298:	b082      	sub	sp, #8
    729a:	9001      	str	r0, [sp, #4]
    729c:	9100      	str	r1, [sp, #0]
    base->PCOR = GPIO_PCOR_PTCO(pins);
    729e:	9b01      	ldr	r3, [sp, #4]
    72a0:	9a00      	ldr	r2, [sp, #0]
    72a2:	609a      	str	r2, [r3, #8]
}
    72a4:	bf00      	nop
    72a6:	b002      	add	sp, #8
    72a8:	4770      	bx	lr

000072aa <Gpio_Dio_Ip_TogglePins>:
void Gpio_Dio_Ip_TogglePins
(
    GPIO_Type * const base,
    Gpio_Dio_Ip_PinsChannelType pins
)
{
    72aa:	b082      	sub	sp, #8
    72ac:	9001      	str	r0, [sp, #4]
    72ae:	9100      	str	r1, [sp, #0]
    base->PTOR = GPIO_PTOR_PTTO(pins);
    72b0:	9b01      	ldr	r3, [sp, #4]
    72b2:	9a00      	ldr	r2, [sp, #0]
    72b4:	60da      	str	r2, [r3, #12]
}
    72b6:	bf00      	nop
    72b8:	b002      	add	sp, #8
    72ba:	4770      	bx	lr

000072bc <Gpio_Dio_Ip_ReadPins>:
 * configured as input will have meaningful values.
 *
 * @implements    Gpio_Dio_Ip_ReadPins_Activity
 */
Gpio_Dio_Ip_PinsChannelType Gpio_Dio_Ip_ReadPins(const GPIO_Type * const base)
{
    72bc:	b084      	sub	sp, #16
    72be:	9001      	str	r0, [sp, #4]
    Gpio_Dio_Ip_PinsChannelType returnValue = 0U;
    72c0:	2300      	movs	r3, #0
    72c2:	9303      	str	r3, [sp, #12]
    returnValue = (Gpio_Dio_Ip_PinsChannelType)(base->PDIR);
    72c4:	9b01      	ldr	r3, [sp, #4]
    72c6:	691b      	ldr	r3, [r3, #16]
    72c8:	9303      	str	r3, [sp, #12]
    return returnValue;
    72ca:	9b03      	ldr	r3, [sp, #12]
}
    72cc:	4618      	mov	r0, r3
    72ce:	b004      	add	sp, #16
    72d0:	4770      	bx	lr

000072d2 <Gpio_Dio_Ip_ReadPin>:
 * configured as input will have meaningful value.
 *
 * @implements    Gpio_Dio_Ip_ReadPin_Activity
 */
Gpio_Dio_Ip_PinsLevelType Gpio_Dio_Ip_ReadPin(const GPIO_Type * const base, Gpio_Dio_Ip_PinsChannelType pin)
{
    72d2:	b084      	sub	sp, #16
    72d4:	9001      	str	r0, [sp, #4]
    72d6:	9100      	str	r1, [sp, #0]
    Gpio_Dio_Ip_PinsLevelType returnValue = 0U;
    72d8:	2300      	movs	r3, #0
    72da:	f88d 300f 	strb.w	r3, [sp, #15]
    returnValue  = (Gpio_Dio_Ip_PinsLevelType)(((base->PDIR)&((uint32)1<<pin))>>(pin));
    72de:	9b01      	ldr	r3, [sp, #4]
    72e0:	691a      	ldr	r2, [r3, #16]
    72e2:	2101      	movs	r1, #1
    72e4:	9b00      	ldr	r3, [sp, #0]
    72e6:	fa01 f303 	lsl.w	r3, r1, r3
    72ea:	401a      	ands	r2, r3
    72ec:	9b00      	ldr	r3, [sp, #0]
    72ee:	fa22 f303 	lsr.w	r3, r2, r3
    72f2:	f88d 300f 	strb.w	r3, [sp, #15]

    return returnValue;
    72f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    72fa:	4618      	mov	r0, r3
    72fc:	b004      	add	sp, #16
    72fe:	4770      	bx	lr

00007300 <Can_IsControllersBusy>:
        }
    }
#endif /* CAN_43_FLEXCAN_MAINFUNCTION_MULTIPLE_READ == STD_ON */

static boolean Can_IsControllersBusy(uint32 u32CoreId)
{
    7300:	b084      	sub	sp, #16
    7302:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    7304:	2300      	movs	r3, #0
    7306:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    730a:	2300      	movs	r3, #0
    730c:	f88d 300e 	strb.w	r3, [sp, #14]

    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7310:	2300      	movs	r3, #0
    7312:	f88d 300e 	strb.w	r3, [sp, #14]
    7316:	e01b      	b.n	7350 <Can_IsControllersBusy+0x50>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    7318:	4a12      	ldr	r2, [pc, #72]	; (7364 <Can_IsControllersBusy+0x64>)
    731a:	9b01      	ldr	r3, [sp, #4]
    731c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7320:	695a      	ldr	r2, [r3, #20]
    7322:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7326:	009b      	lsls	r3, r3, #2
    7328:	4413      	add	r3, r2
    732a:	681b      	ldr	r3, [r3, #0]
    732c:	2b00      	cmp	r3, #0
    732e:	d00a      	beq.n	7346 <Can_IsControllersBusy+0x46>
        {
            if (CAN_CS_UNINIT != Can_eControllerState[u8ControllerID])
    7330:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7334:	4a0c      	ldr	r2, [pc, #48]	; (7368 <Can_IsControllersBusy+0x68>)
    7336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    733a:	2b00      	cmp	r3, #0
    733c:	d003      	beq.n	7346 <Can_IsControllersBusy+0x46>
                *   The function Can_Init shall raise the error CAN_E_TRANSITION if the CAN
                *   controllers are not in state UNINIT.
                */
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_TRANSITION);
            #endif
                bCtrlBusy = TRUE;
    733e:	2301      	movs	r3, #1
    7340:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    7344:	e008      	b.n	7358 <Can_IsControllersBusy+0x58>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7346:	f89d 300e 	ldrb.w	r3, [sp, #14]
    734a:	3301      	adds	r3, #1
    734c:	f88d 300e 	strb.w	r3, [sp, #14]
    7350:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7354:	2b00      	cmp	r3, #0
    7356:	d0df      	beq.n	7318 <Can_IsControllersBusy+0x18>
            }
        }
    }

    return bCtrlBusy;
    7358:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    735c:	4618      	mov	r0, r3
    735e:	b004      	add	sp, #16
    7360:	4770      	bx	lr
    7362:	bf00      	nop
    7364:	1fff8d0c 	.word	0x1fff8d0c
    7368:	1fff8d08 	.word	0x1fff8d08

0000736c <Can_InitControllers>:

static void Can_InitControllers(uint32 u32CoreId)
{
    736c:	b500      	push	{lr}
    736e:	b085      	sub	sp, #20
    7370:	9001      	str	r0, [sp, #4]
    boolean bCtrlBusy = FALSE;
    7372:	2300      	movs	r3, #0
    7374:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ControllerID = 0U;
    7378:	2300      	movs	r3, #0
    737a:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    737e:	2300      	movs	r3, #0
    7380:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7382:	2300      	movs	r3, #0
    7384:	f88d 300e 	strb.w	r3, [sp, #14]
    7388:	e035      	b.n	73f6 <Can_InitControllers+0x8a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    738a:	4a30      	ldr	r2, [pc, #192]	; (744c <Can_InitControllers+0xe0>)
    738c:	9b01      	ldr	r3, [sp, #4]
    738e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7392:	695a      	ldr	r2, [r3, #20]
    7394:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7398:	009b      	lsls	r3, r3, #2
    739a:	4413      	add	r3, r2
    739c:	681b      	ldr	r3, [r3, #0]
    739e:	2b00      	cmp	r3, #0
    73a0:	d024      	beq.n	73ec <Can_InitControllers+0x80>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    73a2:	4a2a      	ldr	r2, [pc, #168]	; (744c <Can_InitControllers+0xe0>)
    73a4:	9b01      	ldr	r3, [sp, #4]
    73a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    73aa:	695a      	ldr	r2, [r3, #20]
    73ac:	f89d 300e 	ldrb.w	r3, [sp, #14]
    73b0:	009b      	lsls	r3, r3, #2
    73b2:	4413      	add	r3, r2
    73b4:	681b      	ldr	r3, [r3, #0]
    73b6:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    73b8:	9b02      	ldr	r3, [sp, #8]
    73ba:	7a1b      	ldrb	r3, [r3, #8]
    73bc:	2b00      	cmp	r3, #0
    73be:	d015      	beq.n	73ec <Can_InitControllers+0x80>
                */
            #if ((CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) || (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON))
                Can_au16BaudrateIDConfig[u8ControllerID] = Can_pController->Can_u16DefaultBaudrateID;
            #endif
                /* Reset interrupt level to default value after re-init */
                Can_au8DisableInterruptLevel[u8ControllerID] = 0U;
    73c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    73c4:	4a22      	ldr	r2, [pc, #136]	; (7450 <Can_InitControllers+0xe4>)
    73c6:	2100      	movs	r1, #0
    73c8:	54d1      	strb	r1, [r2, r3]
            #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
                Can_apxCtrlConfigIcomIndex[u8ControllerID] = NULL_PTR;
            #endif
                /* Init the controller */
                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_Init(Can_pController))
    73ca:	9802      	ldr	r0, [sp, #8]
    73cc:	f001 f830 	bl	8430 <Can_43_FLEXCAN_Ipw_Init>
    73d0:	4603      	mov	r3, r0
    73d2:	2b00      	cmp	r3, #0
    73d4:	d106      	bne.n	73e4 <Can_InitControllers+0x78>
                {
                    Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    73d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    73da:	4a1e      	ldr	r2, [pc, #120]	; (7454 <Can_InitControllers+0xe8>)
    73dc:	2102      	movs	r1, #2
    73de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    73e2:	e003      	b.n	73ec <Can_InitControllers+0x80>
                else
                {
                    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_INIT, CAN_43_FLEXCAN_E_INIT_FAILED);
                    #endif
                    bCtrlBusy = TRUE;
    73e4:	2301      	movs	r3, #1
    73e6:	f88d 300f 	strb.w	r3, [sp, #15]
                    break;
    73ea:	e008      	b.n	73fe <Can_InitControllers+0x92>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    73ec:	f89d 300e 	ldrb.w	r3, [sp, #14]
    73f0:	3301      	adds	r3, #1
    73f2:	f88d 300e 	strb.w	r3, [sp, #14]
    73f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
    73fa:	2b00      	cmp	r3, #0
    73fc:	d0c5      	beq.n	738a <Can_InitControllers+0x1e>
    }
    /*
    *  [SWS_Can_00246] After initializing all controllers inside the HW Unit, the function Can_Init
    *   shall change the module state to CAN_READY.
    */
    if (TRUE == bCtrlBusy)
    73fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7402:	2b00      	cmp	r3, #0
    7404:	d01e      	beq.n	7444 <Can_InitControllers+0xd8>
    {
        /* Init failed due to one or more controllers failed, reset status of all  core's current controllers */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7406:	2300      	movs	r3, #0
    7408:	f88d 300e 	strb.w	r3, [sp, #14]
    740c:	e016      	b.n	743c <Can_InitControllers+0xd0>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    740e:	4a0f      	ldr	r2, [pc, #60]	; (744c <Can_InitControllers+0xe0>)
    7410:	9b01      	ldr	r3, [sp, #4]
    7412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7416:	695a      	ldr	r2, [r3, #20]
    7418:	f89d 300e 	ldrb.w	r3, [sp, #14]
    741c:	009b      	lsls	r3, r3, #2
    741e:	4413      	add	r3, r2
    7420:	681b      	ldr	r3, [r3, #0]
    7422:	2b00      	cmp	r3, #0
    7424:	d005      	beq.n	7432 <Can_InitControllers+0xc6>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    7426:	f89d 300e 	ldrb.w	r3, [sp, #14]
    742a:	4a0a      	ldr	r2, [pc, #40]	; (7454 <Can_InitControllers+0xe8>)
    742c:	2100      	movs	r1, #0
    742e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7432:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7436:	3301      	adds	r3, #1
    7438:	f88d 300e 	strb.w	r3, [sp, #14]
    743c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7440:	2b00      	cmp	r3, #0
    7442:	d0e4      	beq.n	740e <Can_InitControllers+0xa2>
    else
    {
        Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_READY;
    }
#endif
}
    7444:	bf00      	nop
    7446:	b005      	add	sp, #20
    7448:	f85d fb04 	ldr.w	pc, [sp], #4
    744c:	1fff8d0c 	.word	0x1fff8d0c
    7450:	1fff8d04 	.word	0x1fff8d04
    7454:	1fff8d08 	.word	0x1fff8d08

00007458 <Can_DeInitControllers>:
    return bResult;
}
#endif

static void Can_DeInitControllers(uint32 u32CoreId)
{
    7458:	b500      	push	{lr}
    745a:	b085      	sub	sp, #20
    745c:	9001      	str	r0, [sp, #4]
    uint8 u8ControllerID = 0U;
    745e:	2300      	movs	r3, #0
    7460:	f88d 300f 	strb.w	r3, [sp, #15]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7464:	2300      	movs	r3, #0
    7466:	9302      	str	r3, [sp, #8]

    /* Loop through all Can controllers configured based CanControllerId parameter. */
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7468:	2300      	movs	r3, #0
    746a:	f88d 300f 	strb.w	r3, [sp, #15]
    746e:	e028      	b.n	74c2 <Can_DeInitControllers+0x6a>
    {
        if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    7470:	4a18      	ldr	r2, [pc, #96]	; (74d4 <Can_DeInitControllers+0x7c>)
    7472:	9b01      	ldr	r3, [sp, #4]
    7474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7478:	695a      	ldr	r2, [r3, #20]
    747a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    747e:	009b      	lsls	r3, r3, #2
    7480:	4413      	add	r3, r2
    7482:	681b      	ldr	r3, [r3, #0]
    7484:	2b00      	cmp	r3, #0
    7486:	d017      	beq.n	74b8 <Can_DeInitControllers+0x60>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7488:	4a12      	ldr	r2, [pc, #72]	; (74d4 <Can_DeInitControllers+0x7c>)
    748a:	9b01      	ldr	r3, [sp, #4]
    748c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7490:	695a      	ldr	r2, [r3, #20]
    7492:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7496:	009b      	lsls	r3, r3, #2
    7498:	4413      	add	r3, r2
    749a:	681b      	ldr	r3, [r3, #0]
    749c:	9302      	str	r3, [sp, #8]
            /* The initialization is skipped for the controllers that are not enabled. */
            if (TRUE == Can_pController->Can_bActivation)
    749e:	9b02      	ldr	r3, [sp, #8]
    74a0:	7a1b      	ldrb	r3, [r3, #8]
    74a2:	2b00      	cmp	r3, #0
    74a4:	d008      	beq.n	74b8 <Can_DeInitControllers+0x60>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_UNINIT;
    74a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    74aa:	4a0b      	ldr	r2, [pc, #44]	; (74d8 <Can_DeInitControllers+0x80>)
    74ac:	2100      	movs	r1, #0
    74ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                Can_43_FLEXCAN_Ipw_DeInit(Can_pController);
    74b2:	9802      	ldr	r0, [sp, #8]
    74b4:	f001 f8cc 	bl	8650 <Can_43_FLEXCAN_Ipw_DeInit>
    for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    74b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    74bc:	3301      	adds	r3, #1
    74be:	f88d 300f 	strb.w	r3, [sp, #15]
    74c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    74c6:	2b00      	cmp	r3, #0
    74c8:	d0d2      	beq.n	7470 <Can_DeInitControllers+0x18>
            }
        }
    }
}
    74ca:	bf00      	nop
    74cc:	bf00      	nop
    74ce:	b005      	add	sp, #20
    74d0:	f85d fb04 	ldr.w	pc, [sp], #4
    74d4:	1fff8d0c 	.word	0x1fff8d0c
    74d8:	1fff8d08 	.word	0x1fff8d08

000074dc <Can_43_FLEXCAN_Init>:
* @api
*/

/* implements     Can_Init_Activity */
void Can_43_FLEXCAN_Init(const Can_43_FLEXCAN_ConfigType * Config)
{
    74dc:	b500      	push	{lr}
    74de:	b085      	sub	sp, #20
    74e0:	9001      	str	r0, [sp, #4]
    uint32 u32CoreId = 0U;
    74e2:	2300      	movs	r3, #0
    74e4:	9303      	str	r3, [sp, #12]
    boolean bCtrlBusy = FALSE;
    74e6:	2300      	movs	r3, #0
    74e8:	f88d 300b 	strb.w	r3, [sp, #11]
#if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
    boolean bValidCoreID = FALSE;
#endif

    u32CoreId = Can_GetCoreID();
    74ec:	2300      	movs	r3, #0
    74ee:	9303      	str	r3, [sp, #12]
        #if (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON)
            if (u32CoreId == Config->Can_u32CoreID)
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Copy pointer to current Can Driver configuration. */
                Can_apxConfig[u32CoreId] = Config;
    74f0:	490c      	ldr	r1, [pc, #48]	; (7524 <Can_43_FLEXCAN_Init+0x48>)
    74f2:	9b03      	ldr	r3, [sp, #12]
    74f4:	9a01      	ldr	r2, [sp, #4]
    74f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            if (TRUE == bValidCoreID)
            {
#endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
                /* Fault Injection point to allow to test SWS_Can_00408 */
                MCAL_FAULT_INJECTION_POINT(CAN_FIP_1_CHANGE_DRIVER_TO_UNINITIALIZED);
                bCtrlBusy = Can_IsControllersBusy(u32CoreId);
    74fa:	9803      	ldr	r0, [sp, #12]
    74fc:	f7ff ff00 	bl	7300 <Can_IsControllersBusy>
    7500:	4603      	mov	r3, r0
    7502:	f88d 300b 	strb.w	r3, [sp, #11]
                if (FALSE == bCtrlBusy)
    7506:	f89d 300b 	ldrb.w	r3, [sp, #11]
    750a:	f083 0301 	eor.w	r3, r3, #1
    750e:	b2db      	uxtb	r3, r3
    7510:	2b00      	cmp	r3, #0
    7512:	d002      	beq.n	751a <Can_43_FLEXCAN_Init+0x3e>
                {
                    Can_InitControllers(u32CoreId);
    7514:	9803      	ldr	r0, [sp, #12]
    7516:	f7ff ff29 	bl	736c <Can_InitControllers>

#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        }
    }
#endif /* (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON) */
}
    751a:	bf00      	nop
    751c:	b005      	add	sp, #20
    751e:	f85d fb04 	ldr.w	pc, [sp], #4
    7522:	bf00      	nop
    7524:	1fff8d0c 	.word	0x1fff8d0c

00007528 <Can_43_FLEXCAN_DeInit>:
* @post           Can_DeInit shall de-initialize all the controllers and set the driver in UNINIT state.
*
*/
/* implements     Can_DeInit_Activity */
void Can_43_FLEXCAN_DeInit(void)
{
    7528:	b500      	push	{lr}
    752a:	b083      	sub	sp, #12
    /* Variable for indexing the controllers. */
    uint8 u8ControllerID = 0U;
    752c:	2300      	movs	r3, #0
    752e:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean bCtrlBusy = FALSE;
    7532:	2300      	movs	r3, #0
    7534:	f88d 3006 	strb.w	r3, [sp, #6]
    uint32 u32CoreId = 0U;
    7538:	2300      	movs	r3, #0
    753a:	9300      	str	r3, [sp, #0]

    u32CoreId = Can_GetCoreID();
    753c:	2300      	movs	r3, #0
    753e:	9300      	str	r3, [sp, #0]
    }
    else
    {
#endif
        /* Loop through all Can controllers configured based CanControllerId parameter. */
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7540:	2300      	movs	r3, #0
    7542:	f88d 3007 	strb.w	r3, [sp, #7]
    7546:	e01b      	b.n	7580 <Can_43_FLEXCAN_DeInit+0x58>
        {
            if (NULL_PTR != (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID])
    7548:	4a19      	ldr	r2, [pc, #100]	; (75b0 <Can_43_FLEXCAN_DeInit+0x88>)
    754a:	9b00      	ldr	r3, [sp, #0]
    754c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7550:	695a      	ldr	r2, [r3, #20]
    7552:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7556:	009b      	lsls	r3, r3, #2
    7558:	4413      	add	r3, r2
    755a:	681b      	ldr	r3, [r3, #0]
    755c:	2b00      	cmp	r3, #0
    755e:	d00a      	beq.n	7576 <Can_43_FLEXCAN_DeInit+0x4e>
            {
                if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    7560:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7564:	4a13      	ldr	r2, [pc, #76]	; (75b4 <Can_43_FLEXCAN_DeInit+0x8c>)
    7566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    756a:	2b01      	cmp	r3, #1
    756c:	d103      	bne.n	7576 <Can_43_FLEXCAN_DeInit+0x4e>
                    *   if any of the CAN controllers is in state STARTED.
                    */
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_DEINIT, (uint8)CAN_43_FLEXCAN_E_TRANSITION);
                #endif
                    /* Controller is busy */
                    bCtrlBusy =  TRUE;
    756e:	2301      	movs	r3, #1
    7570:	f88d 3006 	strb.w	r3, [sp, #6]
                    /* Skipping the loop if any of Can Controller is in state STARTED */
                    break;
    7574:	e008      	b.n	7588 <Can_43_FLEXCAN_DeInit+0x60>
        for (u8ControllerID = 0U; u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT; u8ControllerID++)
    7576:	f89d 3007 	ldrb.w	r3, [sp, #7]
    757a:	3301      	adds	r3, #1
    757c:	f88d 3007 	strb.w	r3, [sp, #7]
    7580:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7584:	2b00      	cmp	r3, #0
    7586:	d0df      	beq.n	7548 <Can_43_FLEXCAN_DeInit+0x20>
                }
            }
        }
        /* All Controllers are not busy */
        if (FALSE == bCtrlBusy)
    7588:	f89d 3006 	ldrb.w	r3, [sp, #6]
    758c:	f083 0301 	eor.w	r3, r3, #1
    7590:	b2db      	uxtb	r3, r3
    7592:	2b00      	cmp	r3, #0
    7594:	d007      	beq.n	75a6 <Can_43_FLEXCAN_DeInit+0x7e>
            *   [SWS_Can_91010] The function Can_DeInit shall change the module state to
            *   CAN_UNINIT before de-initializing all controllers inside the HW unit
            */
            Can_eDriverStatus[u32CoreId] = CAN_43_FLEXCAN_UNINIT;
        #endif
            Can_DeInitControllers(u32CoreId);
    7596:	9800      	ldr	r0, [sp, #0]
    7598:	f7ff ff5e 	bl	7458 <Can_DeInitControllers>
            Can_apxConfig[u32CoreId] = NULL_PTR;
    759c:	4a04      	ldr	r2, [pc, #16]	; (75b0 <Can_43_FLEXCAN_DeInit+0x88>)
    759e:	9b00      	ldr	r3, [sp, #0]
    75a0:	2100      	movs	r1, #0
    75a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
}
    75a6:	bf00      	nop
    75a8:	b003      	add	sp, #12
    75aa:	f85d fb04 	ldr.w	pc, [sp], #4
    75ae:	bf00      	nop
    75b0:	1fff8d0c 	.word	0x1fff8d0c
    75b4:	1fff8d08 	.word	0x1fff8d08

000075b8 <Can_43_FLEXCAN_SetBaudrate>:
    Std_ReturnType Can_43_FLEXCAN_SetBaudrate
    (
        uint8 Controller,
        uint16 BaudRateConfigID
    )
    {
    75b8:	b500      	push	{lr}
    75ba:	b087      	sub	sp, #28
    75bc:	4603      	mov	r3, r0
    75be:	460a      	mov	r2, r1
    75c0:	f88d 3007 	strb.w	r3, [sp, #7]
    75c4:	4613      	mov	r3, r2
    75c6:	f8ad 3004 	strh.w	r3, [sp, #4]
        /* Returns the result of CAN set baudrate */
        Std_ReturnType eRetVal = (Std_ReturnType)E_NOT_OK;
    75ca:	2301      	movs	r3, #1
    75cc:	f88d 3017 	strb.w	r3, [sp, #23]
        uint32 u32CoreId = 0U;
    75d0:	2300      	movs	r3, #0
    75d2:	9304      	str	r3, [sp, #16]
        const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    75d4:	2300      	movs	r3, #0
    75d6:	9303      	str	r3, [sp, #12]

        u32CoreId = Can_GetCoreID();
    75d8:	2300      	movs	r3, #0
    75da:	9304      	str	r3, [sp, #16]
    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
        if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_BAUDRATE))
        {
    #endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    75dc:	4a10      	ldr	r2, [pc, #64]	; (7620 <Can_43_FLEXCAN_SetBaudrate+0x68>)
    75de:	9b04      	ldr	r3, [sp, #16]
    75e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75e4:	695a      	ldr	r2, [r3, #20]
    75e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75ea:	009b      	lsls	r3, r3, #2
    75ec:	4413      	add	r3, r2
    75ee:	681b      	ldr	r3, [r3, #0]
    75f0:	9303      	str	r3, [sp, #12]
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_BAUDRATE, CAN_43_FLEXCAN_E_PARAM_BAUDRATE);
                    }
                    else
                    {
                #endif
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    75f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    75f6:	4a0b      	ldr	r2, [pc, #44]	; (7624 <Can_43_FLEXCAN_SetBaudrate+0x6c>)
    75f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    75fc:	2b02      	cmp	r3, #2
    75fe:	d108      	bne.n	7612 <Can_43_FLEXCAN_SetBaudrate+0x5a>
                        {
                            eRetVal = Can_43_FLEXCAN_Ipw_SetBaudrate(Can_pController, BaudRateConfigID);
    7600:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7604:	4619      	mov	r1, r3
    7606:	9803      	ldr	r0, [sp, #12]
    7608:	f001 f82e 	bl	8668 <Can_43_FLEXCAN_Ipw_SetBaudrate>
    760c:	4603      	mov	r3, r0
    760e:	f88d 3017 	strb.w	r3, [sp, #23]
                        }
    #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    }
        }
    #endif
        return eRetVal;
    7612:	f89d 3017 	ldrb.w	r3, [sp, #23]
    }
    7616:	4618      	mov	r0, r3
    7618:	b007      	add	sp, #28
    761a:	f85d fb04 	ldr.w	pc, [sp], #4
    761e:	bf00      	nop
    7620:	1fff8d0c 	.word	0x1fff8d0c
    7624:	1fff8d08 	.word	0x1fff8d08

00007628 <Can_43_FLEXCAN_SetControllerMode>:
*
* @api
*/
/* implements     Can_SetControllerMode_Activity */
Std_ReturnType Can_43_FLEXCAN_SetControllerMode(uint8 Controller, Can_ControllerStateType Transition)
{
    7628:	b500      	push	{lr}
    762a:	b087      	sub	sp, #28
    762c:	4603      	mov	r3, r0
    762e:	9100      	str	r1, [sp, #0]
    7630:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    7634:	2301      	movs	r3, #1
    7636:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    763a:	2300      	movs	r3, #0
    763c:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    763e:	2300      	movs	r3, #0
    7640:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7642:	2300      	movs	r3, #0
    7644:	9304      	str	r3, [sp, #16]
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    if (TRUE == Can_ValidateController(u32CoreId, Controller, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE))
    {
#endif
                Can_pController = (const Can_43_FLEXCAN_ControllerConfigType *)(Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    7646:	4a47      	ldr	r2, [pc, #284]	; (7764 <Can_43_FLEXCAN_SetControllerMode+0x13c>)
    7648:	9b04      	ldr	r3, [sp, #16]
    764a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    764e:	695a      	ldr	r2, [r3, #20]
    7650:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7654:	009b      	lsls	r3, r3, #2
    7656:	4413      	add	r3, r2
    7658:	681b      	ldr	r3, [r3, #0]
    765a:	9303      	str	r3, [sp, #12]
                /*
                *   [SWS_Can_00017] The function Can_SetControllerMode shall perform software
                *   triggered state transitions of the CAN controller State machine.
                */
                switch (Transition)
    765c:	9b00      	ldr	r3, [sp, #0]
    765e:	2b03      	cmp	r3, #3
    7660:	d05d      	beq.n	771e <Can_43_FLEXCAN_SetControllerMode+0xf6>
    7662:	9b00      	ldr	r3, [sp, #0]
    7664:	2b03      	cmp	r3, #3
    7666:	d874      	bhi.n	7752 <Can_43_FLEXCAN_SetControllerMode+0x12a>
    7668:	9b00      	ldr	r3, [sp, #0]
    766a:	2b01      	cmp	r3, #1
    766c:	d003      	beq.n	7676 <Can_43_FLEXCAN_SetControllerMode+0x4e>
    766e:	9b00      	ldr	r3, [sp, #0]
    7670:	2b02      	cmp	r3, #2
    7672:	d01d      	beq.n	76b0 <Can_43_FLEXCAN_SetControllerMode+0x88>
                        *   has been requested, the function Can_SetControllerMode shall raise the error CAN_E_TRANSITION and
                        *   return E_NOT_OK
                        */
                        (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_SET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_TRANSITION);
                    #endif
                        break;
    7674:	e06d      	b.n	7752 <Can_43_FLEXCAN_SetControllerMode+0x12a>
                        if (CAN_CS_STOPPED == Can_eControllerState[Controller])
    7676:	f89d 3007 	ldrb.w	r3, [sp, #7]
    767a:	4a3b      	ldr	r2, [pc, #236]	; (7768 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    767c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7680:	2b02      	cmp	r3, #2
    7682:	d168      	bne.n	7756 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStartMode(Can_pController))
    7684:	9803      	ldr	r0, [sp, #12]
    7686:	f001 f8f5 	bl	8874 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>
    768a:	4603      	mov	r3, r0
    768c:	2b00      	cmp	r3, #0
    768e:	d162      	bne.n	7756 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                                Can_eControllerState[Controller] = CAN_CS_STARTED;
    7690:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7694:	4a34      	ldr	r2, [pc, #208]	; (7768 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    7696:	2101      	movs	r1, #1
    7698:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STARTED);
    769c:	9b03      	ldr	r3, [sp, #12]
    769e:	781b      	ldrb	r3, [r3, #0]
    76a0:	2101      	movs	r1, #1
    76a2:	4618      	mov	r0, r3
    76a4:	f7f9 f931 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    76a8:	2300      	movs	r3, #0
    76aa:	f88d 3017 	strb.w	r3, [sp, #23]
                        break;
    76ae:	e052      	b.n	7756 <Can_43_FLEXCAN_SetControllerMode+0x12e>
                        switch (Can_eControllerState[Controller])
    76b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76b4:	4a2c      	ldr	r2, [pc, #176]	; (7768 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    76b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    76ba:	2b01      	cmp	r3, #1
    76bc:	d005      	beq.n	76ca <Can_43_FLEXCAN_SetControllerMode+0xa2>
    76be:	2b00      	cmp	r3, #0
    76c0:	d029      	beq.n	7716 <Can_43_FLEXCAN_SetControllerMode+0xee>
    76c2:	3b02      	subs	r3, #2
    76c4:	2b01      	cmp	r3, #1
    76c6:	d826      	bhi.n	7716 <Can_43_FLEXCAN_SetControllerMode+0xee>
    76c8:	e015      	b.n	76f6 <Can_43_FLEXCAN_SetControllerMode+0xce>
                                if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    76ca:	9803      	ldr	r0, [sp, #12]
    76cc:	f001 f940 	bl	8950 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    76d0:	4603      	mov	r3, r0
    76d2:	2b00      	cmp	r3, #0
    76d4:	d121      	bne.n	771a <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                    Can_eControllerState[Controller] = CAN_CS_STOPPED;
    76d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76da:	4a23      	ldr	r2, [pc, #140]	; (7768 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    76dc:	2102      	movs	r1, #2
    76de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                    CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    76e2:	9b03      	ldr	r3, [sp, #12]
    76e4:	781b      	ldrb	r3, [r3, #0]
    76e6:	2102      	movs	r1, #2
    76e8:	4618      	mov	r0, r3
    76ea:	f7f9 f90e 	bl	90a <CanIf_ControllerModeIndication>
                                    eRetVal = E_OK;
    76ee:	2300      	movs	r3, #0
    76f0:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    76f4:	e011      	b.n	771a <Can_43_FLEXCAN_SetControllerMode+0xf2>
                                Can_eControllerState[Controller] = CAN_CS_STOPPED;
    76f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    76fa:	4a1b      	ldr	r2, [pc, #108]	; (7768 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    76fc:	2102      	movs	r1, #2
    76fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_STOPPED);
    7702:	9b03      	ldr	r3, [sp, #12]
    7704:	781b      	ldrb	r3, [r3, #0]
    7706:	2102      	movs	r1, #2
    7708:	4618      	mov	r0, r3
    770a:	f7f9 f8fe 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    770e:	2300      	movs	r3, #0
    7710:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    7714:	e002      	b.n	771c <Can_43_FLEXCAN_SetControllerMode+0xf4>
                                break;
    7716:	bf00      	nop
    7718:	e01e      	b.n	7758 <Can_43_FLEXCAN_SetControllerMode+0x130>
                                break;
    771a:	bf00      	nop
                        break;
    771c:	e01c      	b.n	7758 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        switch (Can_eControllerState[Controller])
    771e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7722:	4a11      	ldr	r2, [pc, #68]	; (7768 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    7724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7728:	3b02      	subs	r3, #2
    772a:	2b01      	cmp	r3, #1
    772c:	d80f      	bhi.n	774e <Can_43_FLEXCAN_SetControllerMode+0x126>
                                Can_eControllerState[Controller] = CAN_CS_SLEEP;
    772e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7732:	4a0d      	ldr	r2, [pc, #52]	; (7768 <Can_43_FLEXCAN_SetControllerMode+0x140>)
    7734:	2103      	movs	r1, #3
    7736:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                CanIf_ControllerModeIndication(Can_pController->Can_u8AbstControllerID, CAN_CS_SLEEP);
    773a:	9b03      	ldr	r3, [sp, #12]
    773c:	781b      	ldrb	r3, [r3, #0]
    773e:	2103      	movs	r1, #3
    7740:	4618      	mov	r0, r3
    7742:	f7f9 f8e2 	bl	90a <CanIf_ControllerModeIndication>
                                eRetVal = E_OK;
    7746:	2300      	movs	r3, #0
    7748:	f88d 3017 	strb.w	r3, [sp, #23]
                                break;
    774c:	e000      	b.n	7750 <Can_43_FLEXCAN_SetControllerMode+0x128>
                                break;
    774e:	bf00      	nop
                        break;
    7750:	e002      	b.n	7758 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    7752:	bf00      	nop
    7754:	e000      	b.n	7758 <Can_43_FLEXCAN_SetControllerMode+0x130>
                        break;
    7756:	bf00      	nop
                    }
                }
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eRetVal;
    7758:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    775c:	4618      	mov	r0, r3
    775e:	b007      	add	sp, #28
    7760:	f85d fb04 	ldr.w	pc, [sp], #4
    7764:	1fff8d0c 	.word	0x1fff8d0c
    7768:	1fff8d08 	.word	0x1fff8d08

0000776c <Can_43_FLEXCAN_DisableControllerInterrupts>:
*
* @api
*/
/* implements     Can_DisableControllerInterrupts_Activity */
void Can_43_FLEXCAN_DisableControllerInterrupts(uint8 Controller)
{
    776c:	b500      	push	{lr}
    776e:	b085      	sub	sp, #20
    7770:	4603      	mov	r3, r0
    7772:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    7776:	2300      	movs	r3, #0
    7778:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    777a:	2300      	movs	r3, #0
    777c:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    777e:	2300      	movs	r3, #0
    7780:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    7782:	4a10      	ldr	r2, [pc, #64]	; (77c4 <Can_43_FLEXCAN_DisableControllerInterrupts+0x58>)
    7784:	9b03      	ldr	r3, [sp, #12]
    7786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    778a:	695a      	ldr	r2, [r3, #20]
    778c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7790:	009b      	lsls	r3, r3, #2
    7792:	4413      	add	r3, r2
    7794:	681b      	ldr	r3, [r3, #0]
    7796:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    7798:	f005 fe0c 	bl	d3b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_au8DisableInterruptLevel[Controller] += 1U;
    779c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77a0:	4a09      	ldr	r2, [pc, #36]	; (77c8 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    77a2:	5cd2      	ldrb	r2, [r2, r3]
    77a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77a8:	3201      	adds	r2, #1
    77aa:	b2d1      	uxtb	r1, r2
    77ac:	4a06      	ldr	r2, [pc, #24]	; (77c8 <Can_43_FLEXCAN_DisableControllerInterrupts+0x5c>)
    77ae:	54d1      	strb	r1, [r2, r3]
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00();
    77b0:	f005 fe2c 	bl	d40c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>
                Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(Can_pController);
    77b4:	9802      	ldr	r0, [sp, #8]
    77b6:	f001 f949 	bl	8a4c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    77ba:	bf00      	nop
    77bc:	b005      	add	sp, #20
    77be:	f85d fb04 	ldr.w	pc, [sp], #4
    77c2:	bf00      	nop
    77c4:	1fff8d0c 	.word	0x1fff8d0c
    77c8:	1fff8d04 	.word	0x1fff8d04

000077cc <Can_43_FLEXCAN_EnableControllerInterrupts>:
*
* @api
*/
/* implements     Can_EnableControllerInterrupts_Activity */
void Can_43_FLEXCAN_EnableControllerInterrupts(uint8 Controller)
{
    77cc:	b500      	push	{lr}
    77ce:	b085      	sub	sp, #20
    77d0:	4603      	mov	r3, r0
    77d2:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 u32CoreId = 0U;
    77d6:	2300      	movs	r3, #0
    77d8:	9303      	str	r3, [sp, #12]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    77da:	2300      	movs	r3, #0
    77dc:	9302      	str	r3, [sp, #8]

    u32CoreId = Can_GetCoreID();
    77de:	2300      	movs	r3, #0
    77e0:	9303      	str	r3, [sp, #12]
            }
            else
            {
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
#endif
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[Controller];
    77e2:	4a16      	ldr	r2, [pc, #88]	; (783c <Can_43_FLEXCAN_EnableControllerInterrupts+0x70>)
    77e4:	9b03      	ldr	r3, [sp, #12]
    77e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    77ea:	695a      	ldr	r2, [r3, #20]
    77ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    77f0:	009b      	lsls	r3, r3, #2
    77f2:	4413      	add	r3, r2
    77f4:	681b      	ldr	r3, [r3, #0]
    77f6:	9302      	str	r3, [sp, #8]
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    77f8:	f005 fe2e 	bl	d458 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>
                if (Can_au8DisableInterruptLevel[Controller] > 0U)
    77fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7800:	4a0f      	ldr	r2, [pc, #60]	; (7840 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    7802:	5cd3      	ldrb	r3, [r2, r3]
    7804:	2b00      	cmp	r3, #0
    7806:	d009      	beq.n	781c <Can_43_FLEXCAN_EnableControllerInterrupts+0x50>
                {
                    Can_au8DisableInterruptLevel[Controller] -= 1U;
    7808:	f89d 3007 	ldrb.w	r3, [sp, #7]
    780c:	4a0c      	ldr	r2, [pc, #48]	; (7840 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    780e:	5cd2      	ldrb	r2, [r2, r3]
    7810:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7814:	3a01      	subs	r2, #1
    7816:	b2d1      	uxtb	r1, r2
    7818:	4a09      	ldr	r2, [pc, #36]	; (7840 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    781a:	54d1      	strb	r1, [r2, r3]
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01();
    781c:	f005 fe48 	bl	d4b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>

                if (0U == Can_au8DisableInterruptLevel[Controller])
    7820:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7824:	4a06      	ldr	r2, [pc, #24]	; (7840 <Can_43_FLEXCAN_EnableControllerInterrupts+0x74>)
    7826:	5cd3      	ldrb	r3, [r2, r3]
    7828:	2b00      	cmp	r3, #0
    782a:	d102      	bne.n	7832 <Can_43_FLEXCAN_EnableControllerInterrupts+0x66>
                {
                    Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(Can_pController);
    782c:	9802      	ldr	r0, [sp, #8]
    782e:	f001 f937 	bl	8aa0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
}
    7832:	bf00      	nop
    7834:	b005      	add	sp, #20
    7836:	f85d fb04 	ldr.w	pc, [sp], #4
    783a:	bf00      	nop
    783c:	1fff8d0c 	.word	0x1fff8d0c
    7840:	1fff8d04 	.word	0x1fff8d04

00007844 <Can_43_FLEXCAN_GetControllerErrorState>:
Std_ReturnType Can_43_FLEXCAN_GetControllerErrorState
(
    uint8 ControllerId,
    Can_ErrorStateType * ErrorStatePtr
)
{
    7844:	b500      	push	{lr}
    7846:	b087      	sub	sp, #28
    7848:	4603      	mov	r3, r0
    784a:	9100      	str	r1, [sp, #0]
    784c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    7850:	2301      	movs	r3, #1
    7852:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 errorState = 0U;
    7856:	2300      	movs	r3, #0
    7858:	f88d 300b 	strb.w	r3, [sp, #11]
    uint32 u32CoreId = 0U;
    785c:	2300      	movs	r3, #0
    785e:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7860:	2300      	movs	r3, #0
    7862:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7864:	2300      	movs	r3, #0
    7866:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_ERROR_STATE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    7868:	4a18      	ldr	r2, [pc, #96]	; (78cc <Can_43_FLEXCAN_GetControllerErrorState+0x88>)
    786a:	9b04      	ldr	r3, [sp, #16]
    786c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7870:	695a      	ldr	r2, [r3, #20]
    7872:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7876:	009b      	lsls	r3, r3, #2
    7878:	4413      	add	r3, r2
    787a:	681b      	ldr	r3, [r3, #0]
    787c:	9303      	str	r3, [sp, #12]
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerErrorState(Can_pController, &errorState);
    787e:	f10d 030b 	add.w	r3, sp, #11
    7882:	4619      	mov	r1, r3
    7884:	9803      	ldr	r0, [sp, #12]
    7886:	f001 f937 	bl	8af8 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>
    788a:	4603      	mov	r3, r0
    788c:	f88d 3017 	strb.w	r3, [sp, #23]
                    if(eRetVal == (Std_ReturnType)E_OK)
    7890:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7894:	2b00      	cmp	r3, #0
    7896:	d112      	bne.n	78be <Can_43_FLEXCAN_GetControllerErrorState+0x7a>
                    {
                        switch (errorState)
    7898:	f89d 300b 	ldrb.w	r3, [sp, #11]
    789c:	2b00      	cmp	r3, #0
    789e:	d002      	beq.n	78a6 <Can_43_FLEXCAN_GetControllerErrorState+0x62>
    78a0:	2b01      	cmp	r3, #1
    78a2:	d004      	beq.n	78ae <Can_43_FLEXCAN_GetControllerErrorState+0x6a>
    78a4:	e007      	b.n	78b6 <Can_43_FLEXCAN_GetControllerErrorState+0x72>
                        {
                            case 0x00U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_ACTIVE;
    78a6:	9b00      	ldr	r3, [sp, #0]
    78a8:	2200      	movs	r2, #0
    78aa:	601a      	str	r2, [r3, #0]
                                break;
    78ac:	e008      	b.n	78c0 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            case 0x01U:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_PASSIVE;
    78ae:	9b00      	ldr	r3, [sp, #0]
    78b0:	2201      	movs	r2, #1
    78b2:	601a      	str	r2, [r3, #0]
                                break;
    78b4:	e004      	b.n	78c0 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                            default:
                            {
                                *ErrorStatePtr = CAN_ERRORSTATE_BUSOFF;
    78b6:	9b00      	ldr	r3, [sp, #0]
    78b8:	2202      	movs	r2, #2
    78ba:	601a      	str	r2, [r3, #0]
                                break;
    78bc:	e000      	b.n	78c0 <Can_43_FLEXCAN_GetControllerErrorState+0x7c>
                            }
                        }
                    }
    78be:	bf00      	nop
#if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                }
    }
#endif
    return eRetVal;
    78c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    78c4:	4618      	mov	r0, r3
    78c6:	b007      	add	sp, #28
    78c8:	f85d fb04 	ldr.w	pc, [sp], #4
    78cc:	1fff8d0c 	.word	0x1fff8d0c

000078d0 <Can_43_FLEXCAN_GetControllerMode>:
Std_ReturnType Can_43_FLEXCAN_GetControllerMode
(
    uint8 Controller,
    Can_ControllerStateType * ControllerModePtr
)
{
    78d0:	b084      	sub	sp, #16
    78d2:	4603      	mov	r3, r0
    78d4:	9100      	str	r1, [sp, #0]
    78d6:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    78da:	2301      	movs	r3, #1
    78dc:	f88d 300f 	strb.w	r3, [sp, #15]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_MODE, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    *ControllerModePtr = Can_eControllerState[Controller];
    78e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    78e4:	4a06      	ldr	r2, [pc, #24]	; (7900 <Can_43_FLEXCAN_GetControllerMode+0x30>)
    78e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    78ea:	9b00      	ldr	r3, [sp, #0]
    78ec:	601a      	str	r2, [r3, #0]
                    eRetVal = E_OK;
    78ee:	2300      	movs	r3, #0
    78f0:	f88d 300f 	strb.w	r3, [sp, #15]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    78f4:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    78f8:	4618      	mov	r0, r3
    78fa:	b004      	add	sp, #16
    78fc:	4770      	bx	lr
    78fe:	bf00      	nop
    7900:	1fff8d08 	.word	0x1fff8d08

00007904 <Can_43_FLEXCAN_GetControllerRxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerRxErrorCounter
(
    uint8 ControllerId,
    uint8 * RxErrorCounterPtr
)
{
    7904:	b500      	push	{lr}
    7906:	b087      	sub	sp, #28
    7908:	4603      	mov	r3, r0
    790a:	9100      	str	r1, [sp, #0]
    790c:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    7910:	2301      	movs	r3, #1
    7912:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    7916:	2300      	movs	r3, #0
    7918:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    791a:	2300      	movs	r3, #0
    791c:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    791e:	2300      	movs	r3, #0
    7920:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_RX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    7922:	4a0c      	ldr	r2, [pc, #48]	; (7954 <Can_43_FLEXCAN_GetControllerRxErrorCounter+0x50>)
    7924:	9b04      	ldr	r3, [sp, #16]
    7926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    792a:	695a      	ldr	r2, [r3, #20]
    792c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7930:	009b      	lsls	r3, r3, #2
    7932:	4413      	add	r3, r2
    7934:	681b      	ldr	r3, [r3, #0]
    7936:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00515]: When the API Can_GetControllerRxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Rx error counter
                    *   register of Can Controller and shall return the Rx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(Can_pController, RxErrorCounterPtr);
    7938:	9900      	ldr	r1, [sp, #0]
    793a:	9803      	ldr	r0, [sp, #12]
    793c:	f001 f907 	bl	8b4e <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>
    7940:	4603      	mov	r3, r0
    7942:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    7946:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    794a:	4618      	mov	r0, r3
    794c:	b007      	add	sp, #28
    794e:	f85d fb04 	ldr.w	pc, [sp], #4
    7952:	bf00      	nop
    7954:	1fff8d0c 	.word	0x1fff8d0c

00007958 <Can_43_FLEXCAN_GetControllerTxErrorCounter>:
Std_ReturnType Can_43_FLEXCAN_GetControllerTxErrorCounter
(
    uint8 ControllerId,
    uint8 * TxErrorCounterPtr
)
{
    7958:	b500      	push	{lr}
    795a:	b087      	sub	sp, #28
    795c:	4603      	mov	r3, r0
    795e:	9100      	str	r1, [sp, #0]
    7960:	f88d 3007 	strb.w	r3, [sp, #7]
    Std_ReturnType eRetVal = E_NOT_OK;
    7964:	2301      	movs	r3, #1
    7966:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    796a:	2300      	movs	r3, #0
    796c:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    796e:	2300      	movs	r3, #0
    7970:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7972:	2300      	movs	r3, #0
    7974:	9304      	str	r3, [sp, #16]
                    (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_GET_CONTROLLER_TX_ERROR_COUNTER, CAN_43_FLEXCAN_E_PARAM_POINTER);
                }
                else
                {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                    Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[ControllerId];
    7976:	4a0c      	ldr	r2, [pc, #48]	; (79a8 <Can_43_FLEXCAN_GetControllerTxErrorCounter+0x50>)
    7978:	9b04      	ldr	r3, [sp, #16]
    797a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    797e:	695a      	ldr	r2, [r3, #20]
    7980:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7984:	009b      	lsls	r3, r3, #2
    7986:	4413      	add	r3, r2
    7988:	681b      	ldr	r3, [r3, #0]
    798a:	9303      	str	r3, [sp, #12]
                    /*
                    *   [SWS_Can_00520]: When the API Can_GetControllerTxErrorCounter is called with
                    *   Controller Id as input parameter then Can driver shall read the Tx error counter
                    *   register of Can Controller and shall return the Tx error count to upper layer.
                    */
                    eRetVal = Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(Can_pController, TxErrorCounterPtr);
    798c:	9900      	ldr	r1, [sp, #0]
    798e:	9803      	ldr	r0, [sp, #12]
    7990:	f001 f8cb 	bl	8b2a <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>
    7994:	4603      	mov	r3, r0
    7996:	f88d 3017 	strb.w	r3, [sp, #23]
            }
        #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
        }
    }
#endif
    return eRetVal;
    799a:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    799e:	4618      	mov	r0, r3
    79a0:	b007      	add	sp, #28
    79a2:	f85d fb04 	ldr.w	pc, [sp], #4
    79a6:	bf00      	nop
    79a8:	1fff8d0c 	.word	0x1fff8d0c

000079ac <Can_43_FLEXCAN_Write>:
Std_ReturnType Can_43_FLEXCAN_Write
(
    Can_HwHandleType Hth,
    const Can_PduType * PduInfo
)
{
    79ac:	b500      	push	{lr}
    79ae:	b089      	sub	sp, #36	; 0x24
    79b0:	4603      	mov	r3, r0
    79b2:	9100      	str	r1, [sp, #0]
    79b4:	f8ad 3006 	strh.w	r3, [sp, #6]
    Std_ReturnType eRetVal = E_NOT_OK;
    79b8:	2301      	movs	r3, #1
    79ba:	f88d 301f 	strb.w	r3, [sp, #31]
    uint8 u8ControllerID = 0U;
    79be:	2300      	movs	r3, #0
    79c0:	f88d 301e 	strb.w	r3, [sp, #30]
    uint32 u32CoreId = 0U;
    79c4:	2300      	movs	r3, #0
    79c6:	9306      	str	r3, [sp, #24]
    Can_HwHandleType HwObjectID = 0U;
    79c8:	2300      	movs	r3, #0
    79ca:	f8ad 3016 	strh.w	r3, [sp, #22]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    79ce:	2300      	movs	r3, #0
    79d0:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    79d2:	2300      	movs	r3, #0
    79d4:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    79d6:	2300      	movs	r3, #0
    79d8:	9306      	str	r3, [sp, #24]
    HwObjectID = Hth;
    79da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79de:	f8ad 3016 	strh.w	r3, [sp, #22]
                (void)Det_ReportError((uint16)CAN_43_FLEXCAN_MODULE_ID, CAN_43_FLEXCAN_INSTANCE, CAN_43_FLEXCAN_SID_WRITE, CAN_43_FLEXCAN_E_PARAM_POINTER);
            }
            else
            {
#endif /* CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON */
                u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pHwObjIDToCtrlIDMap[HwObjectID];
    79e2:	4a1d      	ldr	r2, [pc, #116]	; (7a58 <Can_43_FLEXCAN_Write+0xac>)
    79e4:	9b06      	ldr	r3, [sp, #24]
    79e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    79ea:	68da      	ldr	r2, [r3, #12]
    79ec:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    79f0:	4413      	add	r3, r2
    79f2:	781b      	ldrb	r3, [r3, #0]
    79f4:	f88d 301e 	strb.w	r3, [sp, #30]
                Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    79f8:	4a17      	ldr	r2, [pc, #92]	; (7a58 <Can_43_FLEXCAN_Write+0xac>)
    79fa:	9b06      	ldr	r3, [sp, #24]
    79fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a00:	695a      	ldr	r2, [r3, #20]
    7a02:	f89d 301e 	ldrb.w	r3, [sp, #30]
    7a06:	009b      	lsls	r3, r3, #2
    7a08:	4413      	add	r3, r2
    7a0a:	681b      	ldr	r3, [r3, #0]
    7a0c:	9304      	str	r3, [sp, #16]
                if (NULL_PTR != Can_pController)
    7a0e:	9b04      	ldr	r3, [sp, #16]
    7a10:	2b00      	cmp	r3, #0
    7a12:	d01b      	beq.n	7a4c <Can_43_FLEXCAN_Write+0xa0>
                {
                    Can_pHwObject = &((Can_apxConfig[u32CoreId])->Can_pHwObjectConfig[HwObjectID]);
    7a14:	4a10      	ldr	r2, [pc, #64]	; (7a58 <Can_43_FLEXCAN_Write+0xac>)
    7a16:	9b06      	ldr	r3, [sp, #24]
    7a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a1c:	6919      	ldr	r1, [r3, #16]
    7a1e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    7a22:	4613      	mov	r3, r2
    7a24:	00db      	lsls	r3, r3, #3
    7a26:	4413      	add	r3, r2
    7a28:	009b      	lsls	r3, r3, #2
    7a2a:	440b      	add	r3, r1
    7a2c:	9303      	str	r3, [sp, #12]
                #if (CAN_43_FLEXCAN_DEV_ERROR_DETECT == STD_ON)
                    if ((TRUE == Can_ValidatePdu(Can_pController, Can_pHwObject, PduInfo)) && (CAN_CS_STARTED == Can_eControllerState[u8ControllerID]))
                #else
                    /* avoid unexpected behaviour when accessing to RAM */
                    if (CAN_CS_STARTED == Can_eControllerState[u8ControllerID])
    7a2e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    7a32:	4a0a      	ldr	r2, [pc, #40]	; (7a5c <Can_43_FLEXCAN_Write+0xb0>)
    7a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a38:	2b01      	cmp	r3, #1
    7a3a:	d107      	bne.n	7a4c <Can_43_FLEXCAN_Write+0xa0>
                            eRetVal = CAN_BUSY;
                        }
                        else
                        {
                    #endif
                            eRetVal = Can_43_FLEXCAN_Ipw_Write(Can_pController, Can_pHwObject, PduInfo);
    7a3c:	9a00      	ldr	r2, [sp, #0]
    7a3e:	9903      	ldr	r1, [sp, #12]
    7a40:	9804      	ldr	r0, [sp, #16]
    7a42:	f001 f896 	bl	8b72 <Can_43_FLEXCAN_Ipw_Write>
    7a46:	4603      	mov	r3, r0
    7a48:	f88d 301f 	strb.w	r3, [sp, #31]
                }
            #endif /* (CAN_43_FLEXCAN_MULTICORE_ENABLED == STD_ON) */
            }
    }
#endif
    return eRetVal;
    7a4c:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    7a50:	4618      	mov	r0, r3
    7a52:	b009      	add	sp, #36	; 0x24
    7a54:	f85d fb04 	ldr.w	pc, [sp], #4
    7a58:	1fff8d0c 	.word	0x1fff8d0c
    7a5c:	1fff8d08 	.word	0x1fff8d08

00007a60 <Can_43_FLEXCAN_MainFunction_Write>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON */
    }
    7a60:	bf00      	nop
    7a62:	4770      	bx	lr

00007a64 <Can_43_FLEXCAN_MainFunction_Read>:
                HwObjectID++;
            }
#endif /* (CAN_43_FLEXCAN_USE_CANEXCEL_IP  == STD_ON) */
        }
    #endif /* CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON */
    }
    7a64:	bf00      	nop
    7a66:	4770      	bx	lr

00007a68 <Can_43_FLEXCAN_MainFunction_BusOff>:
            }
            u8ControllerID++;
        }
    }
#endif /* CAN_43_FLEXCAN_BUSOFF_POLLING_SUPPORT == STD_ON */
}
    7a68:	bf00      	nop
    7a6a:	4770      	bx	lr

00007a6c <Can_43_FLEXCAN_MainFunction_Mode>:
*
* @api
*/
/* implements     Can_MainFunction_Mode_Activity */
void Can_43_FLEXCAN_MainFunction_Mode(void)
{
    7a6c:	b500      	push	{lr}
    7a6e:	b085      	sub	sp, #20
    uint8 u8ControllerID = 0U;
    7a70:	2300      	movs	r3, #0
    7a72:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32CoreId = 0U;
    7a76:	2300      	movs	r3, #0
    7a78:	9302      	str	r3, [sp, #8]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7a7a:	2300      	movs	r3, #0
    7a7c:	9301      	str	r3, [sp, #4]

    u32CoreId = Can_GetCoreID();
    7a7e:	2300      	movs	r3, #0
    7a80:	9302      	str	r3, [sp, #8]
    if (NULL_PTR != (Can_apxConfig[u32CoreId]))
    7a82:	4a17      	ldr	r2, [pc, #92]	; (7ae0 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    7a84:	9b02      	ldr	r3, [sp, #8]
    7a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a8a:	2b00      	cmp	r3, #0
    7a8c:	d024      	beq.n	7ad8 <Can_43_FLEXCAN_MainFunction_Mode+0x6c>
    {
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    7a8e:	e01f      	b.n	7ad0 <Can_43_FLEXCAN_MainFunction_Mode+0x64>
        {
            Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7a90:	4a13      	ldr	r2, [pc, #76]	; (7ae0 <Can_43_FLEXCAN_MainFunction_Mode+0x74>)
    7a92:	9b02      	ldr	r3, [sp, #8]
    7a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7a98:	695a      	ldr	r2, [r3, #20]
    7a9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7a9e:	009b      	lsls	r3, r3, #2
    7aa0:	4413      	add	r3, r2
    7aa2:	681b      	ldr	r3, [r3, #0]
    7aa4:	9301      	str	r3, [sp, #4]
            if (NULL_PTR != Can_pController)
    7aa6:	9b01      	ldr	r3, [sp, #4]
    7aa8:	2b00      	cmp	r3, #0
    7aaa:	d00c      	beq.n	7ac6 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
            {
                if (TRUE == Can_pController->Can_bActivation)
    7aac:	9b01      	ldr	r3, [sp, #4]
    7aae:	7a1b      	ldrb	r3, [r3, #8]
    7ab0:	2b00      	cmp	r3, #0
    7ab2:	d008      	beq.n	7ac6 <Can_43_FLEXCAN_MainFunction_Mode+0x5a>
                {
                    Can_43_FLEXCAN_Ipw_MainFunction_Mode(Can_pController, &Can_eControllerState[u8ControllerID]);
    7ab4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ab8:	009b      	lsls	r3, r3, #2
    7aba:	4a0a      	ldr	r2, [pc, #40]	; (7ae4 <Can_43_FLEXCAN_MainFunction_Mode+0x78>)
    7abc:	4413      	add	r3, r2
    7abe:	4619      	mov	r1, r3
    7ac0:	9801      	ldr	r0, [sp, #4]
    7ac2:	f001 f95c 	bl	8d7e <Can_43_FLEXCAN_Ipw_MainFunction_Mode>
                }
            }
            u8ControllerID++;
    7ac6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7aca:	3301      	adds	r3, #1
    7acc:	f88d 300f 	strb.w	r3, [sp, #15]
        while (u8ControllerID < CAN_43_FLEXCAN_CONTROLLER_CONFIG_COUNT)
    7ad0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7ad4:	2b00      	cmp	r3, #0
    7ad6:	d0db      	beq.n	7a90 <Can_43_FLEXCAN_MainFunction_Mode+0x24>
        }
    }
}
    7ad8:	bf00      	nop
    7ada:	b005      	add	sp, #20
    7adc:	f85d fb04 	ldr.w	pc, [sp], #4
    7ae0:	1fff8d0c 	.word	0x1fff8d0c
    7ae4:	1fff8d08 	.word	0x1fff8d08

00007ae8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>:
(
    uint8 u8CtrlOffset,
    uint8 u8MbIdx,
    Can_43_FLEXCAN_MbType mbType
)
{
    7ae8:	b500      	push	{lr}
    7aea:	b087      	sub	sp, #28
    7aec:	4603      	mov	r3, r0
    7aee:	9200      	str	r2, [sp, #0]
    7af0:	f88d 3007 	strb.w	r3, [sp, #7]
    7af4:	460b      	mov	r3, r1
    7af6:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8 u8ControllerID = 0U;
    7afa:	2300      	movs	r3, #0
    7afc:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    7b00:	2300      	movs	r3, #0
    7b02:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7b04:	2300      	movs	r3, #0
    7b06:	9303      	str	r3, [sp, #12]

    MCAL_FAULT_INJECTION_POINT(CAN_FIP_2_CHANGE_DRIVER_TO_UNINITIALIZED);
    u32CoreId = Can_GetCoreID();
    7b08:	2300      	movs	r3, #0
    7b0a:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    7b0c:	4a16      	ldr	r2, [pc, #88]	; (7b68 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7b0e:	9b04      	ldr	r3, [sp, #16]
    7b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b14:	2b00      	cmp	r3, #0
    7b16:	d022      	beq.n	7b5e <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    7b18:	4a13      	ldr	r2, [pc, #76]	; (7b68 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7b1a:	9b04      	ldr	r3, [sp, #16]
    7b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b20:	689a      	ldr	r2, [r3, #8]
    7b22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7b26:	4413      	add	r3, r2
    7b28:	781b      	ldrb	r3, [r3, #0]
    7b2a:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7b2e:	4a0e      	ldr	r2, [pc, #56]	; (7b68 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7b30:	9b04      	ldr	r3, [sp, #16]
    7b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b36:	695a      	ldr	r2, [r3, #20]
    7b38:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7b3c:	009b      	lsls	r3, r3, #2
    7b3e:	4413      	add	r3, r2
    7b40:	681b      	ldr	r3, [r3, #0]
    7b42:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    7b44:	9b03      	ldr	r3, [sp, #12]
    7b46:	2b00      	cmp	r3, #0
    7b48:	d009      	beq.n	7b5e <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x76>
        {
            Can_43_FLEXCAN_Ipw_ProcessHwObject(Can_pController, (Can_apxConfig[u32CoreId]), u8MbIdx, mbType);
    7b4a:	4a07      	ldr	r2, [pc, #28]	; (7b68 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt+0x80>)
    7b4c:	9b04      	ldr	r3, [sp, #16]
    7b4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    7b52:	f89d 2006 	ldrb.w	r2, [sp, #6]
    7b56:	9b00      	ldr	r3, [sp, #0]
    7b58:	9803      	ldr	r0, [sp, #12]
    7b5a:	f001 f946 	bl	8dea <Can_43_FLEXCAN_Ipw_ProcessHwObject>
        }

    }
}
    7b5e:	bf00      	nop
    7b60:	b007      	add	sp, #28
    7b62:	f85d fb04 	ldr.w	pc, [sp], #4
    7b66:	bf00      	nop
    7b68:	1fff8d0c 	.word	0x1fff8d0c

00007b6c <Can_43_FLEXCAN_ProcessBusOffInterrupt>:
*/
void Can_43_FLEXCAN_ProcessBusOffInterrupt
(
    uint8 u8CtrlOffset
)
{
    7b6c:	b500      	push	{lr}
    7b6e:	b087      	sub	sp, #28
    7b70:	4603      	mov	r3, r0
    7b72:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 u8ControllerID = 0U;
    7b76:	2300      	movs	r3, #0
    7b78:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 u32CoreId = 0U;
    7b7c:	2300      	movs	r3, #0
    7b7e:	9304      	str	r3, [sp, #16]
    const Can_43_FLEXCAN_ControllerConfigType * Can_pController = NULL_PTR;
    7b80:	2300      	movs	r3, #0
    7b82:	9303      	str	r3, [sp, #12]

    u32CoreId = Can_GetCoreID();
    7b84:	2300      	movs	r3, #0
    7b86:	9304      	str	r3, [sp, #16]
    if (NULL_PTR != Can_apxConfig[u32CoreId])
    7b88:	4a19      	ldr	r2, [pc, #100]	; (7bf0 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    7b8a:	9b04      	ldr	r3, [sp, #16]
    7b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b90:	2b00      	cmp	r3, #0
    7b92:	d029      	beq.n	7be8 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
    {
        u8ControllerID = (Can_apxConfig[u32CoreId])->Can_pCtrlOffsetToCtrlIDMap[u8CtrlOffset];
    7b94:	4a16      	ldr	r2, [pc, #88]	; (7bf0 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    7b96:	9b04      	ldr	r3, [sp, #16]
    7b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7b9c:	689a      	ldr	r2, [r3, #8]
    7b9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ba2:	4413      	add	r3, r2
    7ba4:	781b      	ldrb	r3, [r3, #0]
    7ba6:	f88d 3017 	strb.w	r3, [sp, #23]
        Can_pController = (Can_apxConfig[u32CoreId])->Can_ppController[u8ControllerID];
    7baa:	4a11      	ldr	r2, [pc, #68]	; (7bf0 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x84>)
    7bac:	9b04      	ldr	r3, [sp, #16]
    7bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7bb2:	695a      	ldr	r2, [r3, #20]
    7bb4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7bb8:	009b      	lsls	r3, r3, #2
    7bba:	4413      	add	r3, r2
    7bbc:	681b      	ldr	r3, [r3, #0]
    7bbe:	9303      	str	r3, [sp, #12]
        if (NULL_PTR != Can_pController)
    7bc0:	9b03      	ldr	r3, [sp, #12]
    7bc2:	2b00      	cmp	r3, #0
    7bc4:	d010      	beq.n	7be8 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
        {
            if ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControllerToStopMode(Can_pController))
    7bc6:	9803      	ldr	r0, [sp, #12]
    7bc8:	f000 fec2 	bl	8950 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>
    7bcc:	4603      	mov	r3, r0
    7bce:	2b00      	cmp	r3, #0
    7bd0:	d10a      	bne.n	7be8 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x7c>
            {
                Can_eControllerState[u8ControllerID] = CAN_CS_STOPPED;
    7bd2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7bd6:	4a07      	ldr	r2, [pc, #28]	; (7bf4 <Can_43_FLEXCAN_ProcessBusOffInterrupt+0x88>)
    7bd8:	2102      	movs	r1, #2
    7bda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                CanIf_ControllerBusOff(Can_pController->Can_u8AbstControllerID);
    7bde:	9b03      	ldr	r3, [sp, #12]
    7be0:	781b      	ldrb	r3, [r3, #0]
    7be2:	4618      	mov	r0, r3
    7be4:	f7f8 fe8a 	bl	8fc <CanIf_ControllerBusOff>
            }
        }
    }
}
    7be8:	bf00      	nop
    7bea:	b007      	add	sp, #28
    7bec:	f85d fb04 	ldr.w	pc, [sp], #4
    7bf0:	1fff8d0c 	.word	0x1fff8d0c
    7bf4:	1fff8d08 	.word	0x1fff8d08

00007bf8 <Can_Ipw_ParseData>:
    PduInfoType * CanIf_PduInfo,
    Flexcan_Ip_MsgBuffType * pReceivedDataBuffer,
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig
)
{
    7bf8:	b500      	push	{lr}
    7bfa:	b085      	sub	sp, #20
    7bfc:	9003      	str	r0, [sp, #12]
    7bfe:	9102      	str	r1, [sp, #8]
    7c00:	9201      	str	r2, [sp, #4]
    7c02:	9300      	str	r3, [sp, #0]
    CanIf_Mailbox->CanId = pReceivedDataBuffer->msgId;
    7c04:	9b01      	ldr	r3, [sp, #4]
    7c06:	685a      	ldr	r2, [r3, #4]
    7c08:	9b03      	ldr	r3, [sp, #12]
    7c0a:	601a      	str	r2, [r3, #0]
    * convert the ID to a standardized format since the Upper layer (CANIF) does not know
    * whether the received CAN frame is a Standard CAN frame or Extended CAN frame.
    * In case of an Extended CAN frame, MSB of a received CAN frame ID needs to be
    * made as ‘1’ to mark the received CAN frame as Extended.⌋
    */
    if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_IDE_MASK) != 0U)
    7c0c:	9b01      	ldr	r3, [sp, #4]
    7c0e:	681b      	ldr	r3, [r3, #0]
    7c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    7c14:	2b00      	cmp	r3, #0
    7c16:	d005      	beq.n	7c24 <Can_Ipw_ParseData+0x2c>
    {
        CanIf_Mailbox->CanId |= (uint32)0x80000000U;
    7c18:	9b03      	ldr	r3, [sp, #12]
    7c1a:	681b      	ldr	r3, [r3, #0]
    7c1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    7c20:	9b03      	ldr	r3, [sp, #12]
    7c22:	601a      	str	r2, [r3, #0]
    }

    if (CAN_RX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    7c24:	9b06      	ldr	r3, [sp, #24]
    7c26:	699b      	ldr	r3, [r3, #24]
    7c28:	2b00      	cmp	r3, #0
    7c2a:	d10c      	bne.n	7c46 <Can_Ipw_ParseData+0x4e>
    {
        /* Check if Mb Overrun */
        if ((uint32)(0x06000000U) == (pReceivedDataBuffer->cs & CAN_IPW_CS_CODE_MASK))
    7c2c:	9b01      	ldr	r3, [sp, #4]
    7c2e:	681b      	ldr	r3, [r3, #0]
    7c30:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    7c34:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    7c38:	d105      	bne.n	7c46 <Can_Ipw_ParseData+0x4e>
        {
            (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    7c3a:	2301      	movs	r3, #1
    7c3c:	2208      	movs	r2, #8
    7c3e:	2100      	movs	r1, #0
    7c40:	2050      	movs	r0, #80	; 0x50
    7c42:	f007 fd3f 	bl	f6c4 <Det_ReportRuntimeError>
        }
    }

    /* when legacy fifo enabled, FD must be disabled */
    if (CAN_RX_LEGACY_FIFO != Can_pHwObjectConfig->Can_eReceiveType)
    7c46:	9b06      	ldr	r3, [sp, #24]
    7c48:	699b      	ldr	r3, [r3, #24]
    7c4a:	2b01      	cmp	r3, #1
    7c4c:	d009      	beq.n	7c62 <Can_Ipw_ParseData+0x6a>
    {
        /*
        * [SWS_Can_00501] ⌈ CanDrv shall indicate whether the received message is a
        * conventional CAN frame or a CAN FD frame as described in Can_IdType.⌋
        */
        if (((pReceivedDataBuffer->cs) & CAN_IPW_CS_EDL_MASK) != 0U)
    7c4e:	9b01      	ldr	r3, [sp, #4]
    7c50:	681b      	ldr	r3, [r3, #0]
    7c52:	2b00      	cmp	r3, #0
    7c54:	da05      	bge.n	7c62 <Can_Ipw_ParseData+0x6a>
        {
            CanIf_Mailbox->CanId |= (uint32)0x40000000U;
    7c56:	9b03      	ldr	r3, [sp, #12]
    7c58:	681b      	ldr	r3, [r3, #0]
    7c5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    7c5e:	9b03      	ldr	r3, [sp, #12]
    7c60:	601a      	str	r2, [r3, #0]
        }
    }

    if (Can_pHwObjectConfig->Can_u8PayloadLength <= pReceivedDataBuffer->dataLen)
    7c62:	9b06      	ldr	r3, [sp, #24]
    7c64:	7c1a      	ldrb	r2, [r3, #16]
    7c66:	9b01      	ldr	r3, [sp, #4]
    7c68:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    7c6c:	429a      	cmp	r2, r3
    7c6e:	d805      	bhi.n	7c7c <Can_Ipw_ParseData+0x84>
    {
        CanIf_PduInfo->SduLength = Can_pHwObjectConfig->Can_u8PayloadLength;
    7c70:	9b06      	ldr	r3, [sp, #24]
    7c72:	7c1b      	ldrb	r3, [r3, #16]
    7c74:	461a      	mov	r2, r3
    7c76:	9b02      	ldr	r3, [sp, #8]
    7c78:	609a      	str	r2, [r3, #8]
    7c7a:	e005      	b.n	7c88 <Can_Ipw_ParseData+0x90>
    }
    else
    {
        CanIf_PduInfo->SduLength = pReceivedDataBuffer->dataLen;
    7c7c:	9b01      	ldr	r3, [sp, #4]
    7c7e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    7c82:	461a      	mov	r2, r3
    7c84:	9b02      	ldr	r3, [sp, #8]
    7c86:	609a      	str	r2, [r3, #8]
                                                      CanIf_PduInfo->SduLength, \
                                                      &pReceivedDataBuffer->data[0]) \
                                                     )
    {
#endif
    CanIf_Mailbox->Hoh = Can_pHwObjectConfig->Can_HwObjectID;
    7c88:	9b06      	ldr	r3, [sp, #24]
    7c8a:	881a      	ldrh	r2, [r3, #0]
    7c8c:	9b03      	ldr	r3, [sp, #12]
    7c8e:	809a      	strh	r2, [r3, #4]
    CanIf_Mailbox->ControllerId = Can_pControllerConfig->Can_u8AbstControllerID;
    7c90:	9b00      	ldr	r3, [sp, #0]
    7c92:	781a      	ldrb	r2, [r3, #0]
    7c94:	9b03      	ldr	r3, [sp, #12]
    7c96:	719a      	strb	r2, [r3, #6]
    CanIf_PduInfo->SduDataPtr = &pReceivedDataBuffer->data[0];
    7c98:	9b01      	ldr	r3, [sp, #4]
    7c9a:	f103 0208 	add.w	r2, r3, #8
    7c9e:	9b02      	ldr	r3, [sp, #8]
    7ca0:	601a      	str	r2, [r3, #0]
    CanIf_RxIndication(CanIf_Mailbox, CanIf_PduInfo);
    7ca2:	9902      	ldr	r1, [sp, #8]
    7ca4:	9803      	ldr	r0, [sp, #12]
    7ca6:	f7f8 fe45 	bl	934 <CanIf_RxIndication>
#if (CAN_43_FLEXCAN_LPDU_CALLOUT_SUPPORT == STD_ON)
    }
#endif
}
    7caa:	bf00      	nop
    7cac:	b005      	add	sp, #20
    7cae:	f85d fb04 	ldr.w	pc, [sp], #4

00007cb2 <Can_Ipw_InitLegacyFifoFilter>:

static void Can_Ipw_InitLegacyFifoFilter(const Can_43_FLEXCAN_ControllerConfigType * Can_pController, const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
    7cb2:	b500      	push	{lr}
    7cb4:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
    7cb8:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7cbc:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7cc0:	6018      	str	r0, [r3, #0]
    7cc2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7cc6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7cca:	6019      	str	r1, [r3, #0]
    uint8 u8FilterIdx=0U;
    7ccc:	2300      	movs	r3, #0
    7cce:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    uint8 u8HwFilterCount = 0U;
    7cd2:	2300      	movs	r3, #0
    7cd4:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
    uint32 u32HwFilterMask = (uint32)0x00000000U;
    7cd8:	2300      	movs	r3, #0
    7cda:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    /* The max FIFO id filter affected by Rx individual masks*/
    uint8 u8FiFoFilterIndvCount = 0U;
    7cde:	2300      	movs	r3, #0
    7ce0:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    Flexcan_Ip_RxFifoIdElementFormatType eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    7ce4:	2300      	movs	r3, #0
    7ce6:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
    /* Need to alocate a filter array with elemnets no as defined in HwObject */
    Flexcan_Ip_IdTableType RxFifoFilters[128];

    if (((Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U) <= 32U)
    7cea:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7cee:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7cf2:	681b      	ldr	r3, [r3, #0]
    7cf4:	7c9b      	ldrb	r3, [r3, #18]
    7cf6:	089b      	lsrs	r3, r3, #2
    7cf8:	b2db      	uxtb	r3, r3
    7cfa:	3306      	adds	r3, #6
    7cfc:	2b20      	cmp	r3, #32
    7cfe:	d80b      	bhi.n	7d18 <Can_Ipw_InitLegacyFifoFilter+0x66>
    {
        u8FiFoFilterIndvCount = (Can_pHwObject->Can_u8HwFilterCount / 4U) + 6U;
    7d00:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7d04:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7d08:	681b      	ldr	r3, [r3, #0]
    7d0a:	7c9b      	ldrb	r3, [r3, #18]
    7d0c:	089b      	lsrs	r3, r3, #2
    7d0e:	b2db      	uxtb	r3, r3
    7d10:	3306      	adds	r3, #6
    7d12:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    7d16:	e002      	b.n	7d1e <Can_Ipw_InitLegacyFifoFilter+0x6c>
    }
    else
    {
        u8FiFoFilterIndvCount = 32U;
    7d18:	2320      	movs	r3, #32
    7d1a:	f88d 340f 	strb.w	r3, [sp, #1039]	; 0x40f
    }
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    7d1e:	2300      	movs	r3, #0
    7d20:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    7d24:	e169      	b.n	7ffa <Can_Ipw_InitLegacyFifoFilter+0x348>
    {
            if (CAN_LEGACY_FIFO_FORMAT_A == Can_pController->Can_eLegacyAcceptanceMode)
    7d26:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7d2a:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7d2e:	681b      	ldr	r3, [r3, #0]
    7d30:	691b      	ldr	r3, [r3, #16]
    7d32:	2b00      	cmp	r3, #0
    7d34:	d13a      	bne.n	7dac <Can_Ipw_InitLegacyFifoFilter+0xfa>
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount;
    7d36:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7d3a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7d3e:	681b      	ldr	r3, [r3, #0]
    7d40:	7c9b      	ldrb	r3, [r3, #18]
    7d42:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC0000000U;
    7d46:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    7d4a:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_A;
    7d4e:	2300      	movs	r3, #0
    7d50:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7d54:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7d58:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7d5c:	681b      	ldr	r3, [r3, #0]
    7d5e:	689b      	ldr	r3, [r3, #8]
    7d60:	2b00      	cmp	r3, #0
    7d62:	d011      	beq.n	7d88 <Can_Ipw_InitLegacyFifoFilter+0xd6>
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_EXT_SHIFT;
    7d64:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7d68:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7d6c:	681b      	ldr	r3, [r3, #0]
    7d6e:	695a      	ldr	r2, [r3, #20]
    7d70:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7d74:	00db      	lsls	r3, r3, #3
    7d76:	4413      	add	r3, r2
    7d78:	685b      	ldr	r3, [r3, #4]
    7d7a:	005b      	lsls	r3, r3, #1
    7d7c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7d80:	4313      	orrs	r3, r2
    7d82:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7d86:	e126      	b.n	7fd6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATA_STD_SHIFT;
    7d88:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7d8c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7d90:	681b      	ldr	r3, [r3, #0]
    7d92:	695a      	ldr	r2, [r3, #20]
    7d94:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7d98:	00db      	lsls	r3, r3, #3
    7d9a:	4413      	add	r3, r2
    7d9c:	685b      	ldr	r3, [r3, #4]
    7d9e:	04db      	lsls	r3, r3, #19
    7da0:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7da4:	4313      	orrs	r3, r2
    7da6:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7daa:	e114      	b.n	7fd6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else if (CAN_LEGACY_FIFO_FORMAT_B == Can_pController->Can_eLegacyAcceptanceMode)
    7dac:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7db0:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7db4:	681b      	ldr	r3, [r3, #0]
    7db6:	691b      	ldr	r3, [r3, #16]
    7db8:	2b01      	cmp	r3, #1
    7dba:	d160      	bne.n	7e7e <Can_Ipw_InitLegacyFifoFilter+0x1cc>
            {
                u8HwFilterCount = Can_pHwObject->Can_u8HwFilterCount * 2U ;
    7dbc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7dc0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7dc4:	681b      	ldr	r3, [r3, #0]
    7dc6:	7c9b      	ldrb	r3, [r3, #18]
    7dc8:	005b      	lsls	r3, r3, #1
    7dca:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0xC000C000U;
    7dce:	f04f 23c0 	mov.w	r3, #3221274624	; 0xc000c000
    7dd2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_B;
    7dd6:	2301      	movs	r3, #1
    7dd8:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7ddc:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7de0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7de4:	681b      	ldr	r3, [r3, #0]
    7de6:	689b      	ldr	r3, [r3, #8]
    7de8:	2b00      	cmp	r3, #0
    7dea:	d024      	beq.n	7e36 <Can_Ipw_InitLegacyFifoFilter+0x184>
                {
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT1;
    7dec:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7df0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7df4:	681b      	ldr	r3, [r3, #0]
    7df6:	695a      	ldr	r2, [r3, #20]
    7df8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7dfc:	011b      	lsls	r3, r3, #4
    7dfe:	4413      	add	r3, r2
    7e00:	685b      	ldr	r3, [r3, #4]
    7e02:	0bdb      	lsrs	r3, r3, #15
    7e04:	041b      	lsls	r3, r3, #16
    7e06:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7e0a:	4313      	orrs	r3, r2
    7e0c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_EXT_SHIFT2;
    7e10:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7e14:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7e18:	681b      	ldr	r3, [r3, #0]
    7e1a:	695a      	ldr	r2, [r3, #20]
    7e1c:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7e20:	011b      	lsls	r3, r3, #4
    7e22:	3308      	adds	r3, #8
    7e24:	4413      	add	r3, r2
    7e26:	685b      	ldr	r3, [r3, #4]
    7e28:	0bdb      	lsrs	r3, r3, #15
    7e2a:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7e2e:	4313      	orrs	r3, r2
    7e30:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7e34:	e0cf      	b.n	7fd6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 2U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT1;
    7e36:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7e3a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7e3e:	681b      	ldr	r3, [r3, #0]
    7e40:	695a      	ldr	r2, [r3, #20]
    7e42:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7e46:	011b      	lsls	r3, r3, #4
    7e48:	4413      	add	r3, r2
    7e4a:	685b      	ldr	r3, [r3, #4]
    7e4c:	04db      	lsls	r3, r3, #19
    7e4e:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7e52:	4313      	orrs	r3, r2
    7e54:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 2U) + 1U].Can_u32HwFilterMask << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATB_STD_SHIFT2;
    7e58:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7e5c:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7e60:	681b      	ldr	r3, [r3, #0]
    7e62:	695a      	ldr	r2, [r3, #20]
    7e64:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7e68:	011b      	lsls	r3, r3, #4
    7e6a:	3308      	adds	r3, #8
    7e6c:	4413      	add	r3, r2
    7e6e:	685b      	ldr	r3, [r3, #4]
    7e70:	00db      	lsls	r3, r3, #3
    7e72:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7e76:	4313      	orrs	r3, r2
    7e78:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7e7c:	e0ab      	b.n	7fd6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
            }
            else /*CAN_LEGACY_FIFO_FORMAT_C == Can_pController->Can_eLegacyAcceptanceMode */
            {
                u8HwFilterCount =  Can_pHwObject->Can_u8HwFilterCount * 4U ;
    7e7e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7e82:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7e86:	681b      	ldr	r3, [r3, #0]
    7e88:	7c9b      	ldrb	r3, [r3, #18]
    7e8a:	009b      	lsls	r3, r3, #2
    7e8c:	f88d 3416 	strb.w	r3, [sp, #1046]	; 0x416
                u32HwFilterMask = (uint32)0x00000000U;
    7e90:	2300      	movs	r3, #0
    7e92:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                eElementFormat = FLEXCAN_RX_FIFO_ID_FORMAT_C;
    7e96:	2302      	movs	r3, #2
    7e98:	f8cd 3408 	str.w	r3, [sp, #1032]	; 0x408
                if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    7e9c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7ea0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7ea4:	681b      	ldr	r3, [r3, #0]
    7ea6:	689b      	ldr	r3, [r3, #8]
    7ea8:	2b00      	cmp	r3, #0
    7eaa:	d04a      	beq.n	7f42 <Can_Ipw_InitLegacyFifoFilter+0x290>
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    7eac:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7eb0:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7eb4:	681b      	ldr	r3, [r3, #0]
    7eb6:	695a      	ldr	r2, [r3, #20]
    7eb8:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7ebc:	015b      	lsls	r3, r3, #5
    7ebe:	4413      	add	r3, r2
    7ec0:	685b      	ldr	r3, [r3, #4]
    7ec2:	0d5b      	lsrs	r3, r3, #21
    7ec4:	061b      	lsls	r3, r3, #24
    7ec6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7eca:	4313      	orrs	r3, r2
    7ecc:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    7ed0:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7ed4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7ed8:	681b      	ldr	r3, [r3, #0]
    7eda:	695a      	ldr	r2, [r3, #20]
    7edc:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7ee0:	015b      	lsls	r3, r3, #5
    7ee2:	3308      	adds	r3, #8
    7ee4:	4413      	add	r3, r2
    7ee6:	685b      	ldr	r3, [r3, #4]
    7ee8:	0d5b      	lsrs	r3, r3, #21
    7eea:	041b      	lsls	r3, r3, #16
    7eec:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7ef0:	4313      	orrs	r3, r2
    7ef2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    7ef6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7efa:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7efe:	681b      	ldr	r3, [r3, #0]
    7f00:	695a      	ldr	r2, [r3, #20]
    7f02:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7f06:	015b      	lsls	r3, r3, #5
    7f08:	3310      	adds	r3, #16
    7f0a:	4413      	add	r3, r2
    7f0c:	685b      	ldr	r3, [r3, #4]
    7f0e:	0d5b      	lsrs	r3, r3, #21
    7f10:	021b      	lsls	r3, r3, #8
    7f12:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7f16:	4313      	orrs	r3, r2
    7f18:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    7f1c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7f20:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7f24:	681b      	ldr	r3, [r3, #0]
    7f26:	695a      	ldr	r2, [r3, #20]
    7f28:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7f2c:	015b      	lsls	r3, r3, #5
    7f2e:	3318      	adds	r3, #24
    7f30:	4413      	add	r3, r2
    7f32:	685b      	ldr	r3, [r3, #4]
    7f34:	0d5b      	lsrs	r3, r3, #21
    7f36:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7f3a:	4313      	orrs	r3, r2
    7f3c:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
    7f40:	e049      	b.n	7fd6 <Can_Ipw_InitLegacyFifoFilter+0x324>
                }
                else
                {
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx * 4U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT1;
    7f42:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7f46:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7f4a:	681b      	ldr	r3, [r3, #0]
    7f4c:	695a      	ldr	r2, [r3, #20]
    7f4e:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7f52:	015b      	lsls	r3, r3, #5
    7f54:	4413      	add	r3, r2
    7f56:	685b      	ldr	r3, [r3, #4]
    7f58:	08db      	lsrs	r3, r3, #3
    7f5a:	061b      	lsls	r3, r3, #24
    7f5c:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7f60:	4313      	orrs	r3, r2
    7f62:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 1U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT2;
    7f66:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7f6a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7f6e:	681b      	ldr	r3, [r3, #0]
    7f70:	695a      	ldr	r2, [r3, #20]
    7f72:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7f76:	015b      	lsls	r3, r3, #5
    7f78:	3308      	adds	r3, #8
    7f7a:	4413      	add	r3, r2
    7f7c:	685b      	ldr	r3, [r3, #4]
    7f7e:	08db      	lsrs	r3, r3, #3
    7f80:	041b      	lsls	r3, r3, #16
    7f82:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7f86:	4313      	orrs	r3, r2
    7f88:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 2U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT3;
    7f8c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7f90:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7f94:	681b      	ldr	r3, [r3, #0]
    7f96:	695a      	ldr	r2, [r3, #20]
    7f98:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7f9c:	015b      	lsls	r3, r3, #5
    7f9e:	3310      	adds	r3, #16
    7fa0:	4413      	add	r3, r2
    7fa2:	685b      	ldr	r3, [r3, #4]
    7fa4:	08db      	lsrs	r3, r3, #3
    7fa6:	021b      	lsls	r3, r3, #8
    7fa8:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7fac:	4313      	orrs	r3, r2
    7fae:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                    u32HwFilterMask |= (uint32)(Can_pHwObject->Can_pHwFilterConfig[(u8FilterIdx * 4U) + 3U].Can_u32HwFilterMask >> CAN_IPW_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT) << CAN_IPW_RX_FIFO_MASK_FILTER_FORMATC_STD_EXT_SHIFT4;
    7fb2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7fb6:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    7fba:	681b      	ldr	r3, [r3, #0]
    7fbc:	695a      	ldr	r2, [r3, #20]
    7fbe:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7fc2:	015b      	lsls	r3, r3, #5
    7fc4:	3318      	adds	r3, #24
    7fc6:	4413      	add	r3, r2
    7fc8:	685b      	ldr	r3, [r3, #4]
    7fca:	08db      	lsrs	r3, r3, #3
    7fcc:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7fd0:	4313      	orrs	r3, r2
    7fd2:	f8cd 3410 	str.w	r3, [sp, #1040]	; 0x410
                }
            }
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, u8FilterIdx, u32HwFilterMask);
    7fd6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    7fda:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    7fde:	681b      	ldr	r3, [r3, #0]
    7fe0:	789b      	ldrb	r3, [r3, #2]
    7fe2:	f89d 1417 	ldrb.w	r1, [sp, #1047]	; 0x417
    7fe6:	f8dd 2410 	ldr.w	r2, [sp, #1040]	; 0x410
    7fea:	4618      	mov	r0, r3
    7fec:	f002 fe76 	bl	acdc <FlexCAN_Ip_SetRxIndividualMask_Privileged>
    for (u8FilterIdx=0U; ((u8FilterIdx < u8FiFoFilterIndvCount) && (u8FilterIdx < Can_pHwObject->Can_u8HwFilterCount)); u8FilterIdx++)
    7ff0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    7ff4:	3301      	adds	r3, #1
    7ff6:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    7ffa:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    7ffe:	f89d 340f 	ldrb.w	r3, [sp, #1039]	; 0x40f
    8002:	429a      	cmp	r2, r3
    8004:	d20a      	bcs.n	801c <Can_Ipw_InitLegacyFifoFilter+0x36a>
    8006:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    800a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    800e:	681b      	ldr	r3, [r3, #0]
    8010:	7c9b      	ldrb	r3, [r3, #18]
    8012:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    8016:	429a      	cmp	r2, r3
    8018:	f4ff ae85 	bcc.w	7d26 <Can_Ipw_InitLegacyFifoFilter+0x74>
    }

    (void)FlexCAN_Ip_SetRxFifoGlobalMask(Can_pController->Can_u8ControllerOffset, Can_pController->Can_u32LegacyGlobalMask);
    801c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    8020:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    8024:	681b      	ldr	r3, [r3, #0]
    8026:	789a      	ldrb	r2, [r3, #2]
    8028:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    802c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    8030:	681b      	ldr	r3, [r3, #0]
    8032:	68db      	ldr	r3, [r3, #12]
    8034:	4619      	mov	r1, r3
    8036:	4610      	mov	r0, r2
    8038:	f002 fe9e 	bl	ad78 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>
    
    if (u8HwFilterCount != 0U)
    803c:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    8040:	2b00      	cmp	r3, #0
    8042:	d054      	beq.n	80ee <Can_Ipw_InitLegacyFifoFilter+0x43c>
    {
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    8044:	2300      	movs	r3, #0
    8046:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    804a:	e03e      	b.n	80ca <Can_Ipw_InitLegacyFifoFilter+0x418>
        {
            RxFifoFilters[u8FilterIdx].id = Can_pHwObject->Can_pHwFilterConfig[u8FilterIdx].Can_u32HwFilterCode;
    804c:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    8050:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    8054:	681b      	ldr	r3, [r3, #0]
    8056:	695a      	ldr	r2, [r3, #20]
    8058:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    805c:	00db      	lsls	r3, r3, #3
    805e:	441a      	add	r2, r3
    8060:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    8064:	6812      	ldr	r2, [r2, #0]
    8066:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
    806a:	f5a1 6182 	sub.w	r1, r1, #1040	; 0x410
    806e:	00db      	lsls	r3, r3, #3
    8070:	440b      	add	r3, r1
    8072:	605a      	str	r2, [r3, #4]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    8074:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    8078:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
    807c:	681b      	ldr	r3, [r3, #0]
    807e:	689b      	ldr	r3, [r3, #8]
    8080:	2b00      	cmp	r3, #0
    8082:	d00a      	beq.n	809a <Can_Ipw_InitLegacyFifoFilter+0x3e8>
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = TRUE;
    8084:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    8088:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    808c:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    8090:	00db      	lsls	r3, r3, #3
    8092:	4413      	add	r3, r2
    8094:	2201      	movs	r2, #1
    8096:	705a      	strb	r2, [r3, #1]
    8098:	e009      	b.n	80ae <Can_Ipw_InitLegacyFifoFilter+0x3fc>
            }
            else
            {
                RxFifoFilters[u8FilterIdx].isExtendedFrame = FALSE;
    809a:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    809e:	f50d 6283 	add.w	r2, sp, #1048	; 0x418
    80a2:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
    80a6:	00db      	lsls	r3, r3, #3
    80a8:	4413      	add	r3, r2
    80aa:	2200      	movs	r2, #0
    80ac:	705a      	strb	r2, [r3, #1]
            }
            RxFifoFilters[u8FilterIdx].isRemoteFrame = FALSE;
    80ae:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    80b2:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    80b6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
    80ba:	2100      	movs	r1, #0
    80bc:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
        for (u8FilterIdx=0U; u8FilterIdx < u8HwFilterCount; u8FilterIdx++)
    80c0:	f89d 3417 	ldrb.w	r3, [sp, #1047]	; 0x417
    80c4:	3301      	adds	r3, #1
    80c6:	f88d 3417 	strb.w	r3, [sp, #1047]	; 0x417
    80ca:	f89d 2417 	ldrb.w	r2, [sp, #1047]	; 0x417
    80ce:	f89d 3416 	ldrb.w	r3, [sp, #1046]	; 0x416
    80d2:	429a      	cmp	r2, r3
    80d4:	d3ba      	bcc.n	804c <Can_Ipw_InitLegacyFifoFilter+0x39a>
        }

        (void)FlexCAN_Ip_ConfigRxFifo(Can_pController->Can_u8ControllerOffset, eElementFormat, RxFifoFilters);
    80d6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
    80da:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
    80de:	681b      	ldr	r3, [r3, #0]
    80e0:	789b      	ldrb	r3, [r3, #2]
    80e2:	aa02      	add	r2, sp, #8
    80e4:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    80e8:	4618      	mov	r0, r3
    80ea:	f002 f9da 	bl	a4a2 <FlexCAN_Ip_ConfigRxFifo_Privileged>
    }
    
}
    80ee:	bf00      	nop
    80f0:	f20d 4d1c 	addw	sp, sp, #1052	; 0x41c
    80f4:	f85d fb04 	ldr.w	pc, [sp], #4

000080f8 <Can_Ipw_InitBaudrate>:

#endif /* (CAN_43_FLEXCAN_RX_POLLING_SUPPORT == STD_ON) */

/* Init baudrate for controller */
static void Can_Ipw_InitBaudrate(const Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
    80f8:	b510      	push	{r4, lr}
    80fa:	b088      	sub	sp, #32
    80fc:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    uint16 BaudRateConfigID = Can_au16ControllerBaudRateSel[ControllerConfig->Can_u8ControllerID];
    80fe:	9b01      	ldr	r3, [sp, #4]
    8100:	785b      	ldrb	r3, [r3, #1]
    8102:	461a      	mov	r2, r3
    8104:	4b58      	ldr	r3, [pc, #352]	; (8268 <Can_Ipw_InitBaudrate+0x170>)
    8106:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    810a:	f8ad 301e 	strh.w	r3, [sp, #30]
#if ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON))
    #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
        if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[ControllerConfig->Can_u8ControllerID])
        {
    #endif
            FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16Prescaler;
    810e:	9b01      	ldr	r3, [sp, #4]
    8110:	6a1a      	ldr	r2, [r3, #32]
    8112:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8116:	2116      	movs	r1, #22
    8118:	fb01 f303 	mul.w	r3, r1, r3
    811c:	4413      	add	r3, r2
    811e:	88db      	ldrh	r3, [r3, #6]
    8120:	9305      	str	r3, [sp, #20]
        {
            FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16PrescalerAlternate;
        }
    #endif

        FlexCANTimeSeg.propSeg    = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PropSeg;
    8122:	9b01      	ldr	r3, [sp, #4]
    8124:	6a1a      	ldr	r2, [r3, #32]
    8126:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    812a:	2116      	movs	r1, #22
    812c:	fb01 f303 	mul.w	r3, r1, r3
    8130:	4413      	add	r3, r2
    8132:	789b      	ldrb	r3, [r3, #2]
    8134:	9302      	str	r3, [sp, #8]
        FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
    8136:	9b01      	ldr	r3, [sp, #4]
    8138:	6a1a      	ldr	r2, [r3, #32]
    813a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    813e:	2116      	movs	r1, #22
    8140:	fb01 f303 	mul.w	r3, r1, r3
    8144:	4413      	add	r3, r2
    8146:	78db      	ldrb	r3, [r3, #3]
    8148:	9303      	str	r3, [sp, #12]
        FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
    814a:	9b01      	ldr	r3, [sp, #4]
    814c:	6a1a      	ldr	r2, [r3, #32]
    814e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8152:	2116      	movs	r1, #22
    8154:	fb01 f303 	mul.w	r3, r1, r3
    8158:	4413      	add	r3, r2
    815a:	791b      	ldrb	r3, [r3, #4]
    815c:	9304      	str	r3, [sp, #16]
        FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
    815e:	9b01      	ldr	r3, [sp, #4]
    8160:	6a1a      	ldr	r2, [r3, #32]
    8162:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8166:	2116      	movs	r1, #22
    8168:	fb01 f303 	mul.w	r3, r1, r3
    816c:	4413      	add	r3, r2
    816e:	7a1b      	ldrb	r3, [r3, #8]
    8170:	9306      	str	r3, [sp, #24]
        (void)FlexCAN_Ip_SetBitrate(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
    8172:	9b01      	ldr	r3, [sp, #4]
    8174:	789b      	ldrb	r3, [r3, #2]
    8176:	a902      	add	r1, sp, #8
    8178:	2200      	movs	r2, #0
    817a:	4618      	mov	r0, r3
    817c:	f003 f842 	bl	b204 <FlexCAN_Ip_SetBitrate_Privileged>
#endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
        if (TRUE == ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    8180:	9b01      	ldr	r3, [sp, #4]
    8182:	6a1a      	ldr	r2, [r3, #32]
    8184:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8188:	2116      	movs	r1, #22
    818a:	fb01 f303 	mul.w	r3, r1, r3
    818e:	4413      	add	r3, r2
    8190:	785b      	ldrb	r3, [r3, #1]
    8192:	2b00      	cmp	r3, #0
    8194:	d057      	beq.n	8246 <Can_Ipw_InitBaudrate+0x14e>
    #if ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON))
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[ControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16Prescaler;
    8196:	9b01      	ldr	r3, [sp, #4]
    8198:	6a1a      	ldr	r2, [r3, #32]
    819a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    819e:	2116      	movs	r1, #22
    81a0:	fb01 f303 	mul.w	r3, r1, r3
    81a4:	4413      	add	r3, r2
    81a6:	89db      	ldrh	r3, [r3, #14]
    81a8:	9305      	str	r3, [sp, #20]
            else
            {
                FlexCANTimeSeg.preDivider = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16PrescalerAlternate;
            }
        #endif
            FlexCANTimeSeg.propSeg    = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PropSeg;
    81aa:	9b01      	ldr	r3, [sp, #4]
    81ac:	6a1a      	ldr	r2, [r3, #32]
    81ae:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    81b2:	2116      	movs	r1, #22
    81b4:	fb01 f303 	mul.w	r3, r1, r3
    81b8:	4413      	add	r3, r2
    81ba:	7a9b      	ldrb	r3, [r3, #10]
    81bc:	9302      	str	r3, [sp, #8]
            FlexCANTimeSeg.phaseSeg1  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg1;
    81be:	9b01      	ldr	r3, [sp, #4]
    81c0:	6a1a      	ldr	r2, [r3, #32]
    81c2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    81c6:	2116      	movs	r1, #22
    81c8:	fb01 f303 	mul.w	r3, r1, r3
    81cc:	4413      	add	r3, r2
    81ce:	7adb      	ldrb	r3, [r3, #11]
    81d0:	9303      	str	r3, [sp, #12]
            FlexCANTimeSeg.phaseSeg2  = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
    81d2:	9b01      	ldr	r3, [sp, #4]
    81d4:	6a1a      	ldr	r2, [r3, #32]
    81d6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    81da:	2116      	movs	r1, #22
    81dc:	fb01 f303 	mul.w	r3, r1, r3
    81e0:	4413      	add	r3, r2
    81e2:	7b1b      	ldrb	r3, [r3, #12]
    81e4:	9304      	str	r3, [sp, #16]
            FlexCANTimeSeg.rJumpwidth = ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;
    81e6:	9b01      	ldr	r3, [sp, #4]
    81e8:	6a1a      	ldr	r2, [r3, #32]
    81ea:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    81ee:	2116      	movs	r1, #22
    81f0:	fb01 f303 	mul.w	r3, r1, r3
    81f4:	4413      	add	r3, r2
    81f6:	7c1b      	ldrb	r3, [r3, #16]
    81f8:	9306      	str	r3, [sp, #24]

            (void)FlexCAN_Ip_SetBitrateCbt(ControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    81fa:	9b01      	ldr	r3, [sp, #4]
    81fc:	7898      	ldrb	r0, [r3, #2]
    81fe:	9b01      	ldr	r3, [sp, #4]
    8200:	6a1a      	ldr	r2, [r3, #32]
    8202:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8206:	2116      	movs	r1, #22
    8208:	fb01 f303 	mul.w	r3, r1, r3
    820c:	4413      	add	r3, r2
    820e:	781a      	ldrb	r2, [r3, #0]
    8210:	ab02      	add	r3, sp, #8
    8212:	4619      	mov	r1, r3
    8214:	f003 f8c0 	bl	b398 <FlexCAN_Ip_SetBitrateCbt_Privileged>
    #endif /* ((CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON) || (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)) */
            (void)FlexCAN_Ip_SetTDCOffset(ControllerConfig->Can_u8ControllerOffset, \
    8218:	9b01      	ldr	r3, [sp, #4]
    821a:	7898      	ldrb	r0, [r3, #2]
    821c:	9b01      	ldr	r3, [sp, #4]
    821e:	6a1a      	ldr	r2, [r3, #32]
    8220:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8224:	2116      	movs	r1, #22
    8226:	fb01 f303 	mul.w	r3, r1, r3
    822a:	4413      	add	r3, r2
    822c:	7cd9      	ldrb	r1, [r3, #19]
    822e:	9b01      	ldr	r3, [sp, #4]
    8230:	6a1a      	ldr	r2, [r3, #32]
    8232:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8236:	2416      	movs	r4, #22
    8238:	fb04 f303 	mul.w	r3, r4, r3
    823c:	4413      	add	r3, r2
    823e:	7d1b      	ldrb	r3, [r3, #20]
    8240:	461a      	mov	r2, r3
    8242:	f003 f913 	bl	b46c <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                          ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(ControllerConfig->Can_u8ControllerOffset, ControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    8246:	9b01      	ldr	r3, [sp, #4]
    8248:	7898      	ldrb	r0, [r3, #2]
    824a:	9b01      	ldr	r3, [sp, #4]
    824c:	6a1a      	ldr	r2, [r3, #32]
    824e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    8252:	2116      	movs	r1, #22
    8254:	fb01 f303 	mul.w	r3, r1, r3
    8258:	4413      	add	r3, r2
    825a:	7c9b      	ldrb	r3, [r3, #18]
    825c:	4619      	mov	r1, r3
    825e:	f003 f959 	bl	b514 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
}
    8262:	bf00      	nop
    8264:	b008      	add	sp, #32
    8266:	bd10      	pop	{r4, pc}
    8268:	1fff8fb0 	.word	0x1fff8fb0

0000826c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    826c:	b500      	push	{lr}
    826e:	b087      	sub	sp, #28
    8270:	9003      	str	r0, [sp, #12]
    8272:	9102      	str	r1, [sp, #8]
    8274:	4613      	mov	r3, r2
    8276:	f88d 3007 	strb.w	r3, [sp, #7]
        Can_HwHandleType u8HwObjectID = 0U;
    827a:	2300      	movs	r3, #0
    827c:	f8ad 3016 	strh.w	r3, [sp, #22]

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    8280:	9b03      	ldr	r3, [sp, #12]
    8282:	785b      	ldrb	r3, [r3, #1]
    8284:	461a      	mov	r2, r3
    8286:	f89d 3007 	ldrb.w	r3, [sp, #7]
    828a:	491c      	ldr	r1, [pc, #112]	; (82fc <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x90>)
    828c:	0152      	lsls	r2, r2, #5
    828e:	4413      	add	r3, r2
    8290:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    8294:	f8ad 3016 	strh.w	r3, [sp, #22]
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    8298:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    829c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    82a0:	4293      	cmp	r3, r2
    82a2:	d027      	beq.n	82f4 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
    82a4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    82a8:	4613      	mov	r3, r2
    82aa:	00db      	lsls	r3, r3, #3
    82ac:	4413      	add	r3, r2
    82ae:	009b      	lsls	r3, r3, #2
    82b0:	461a      	mov	r2, r3
    82b2:	9b02      	ldr	r3, [sp, #8]
    82b4:	4413      	add	r3, r2
    82b6:	7b1b      	ldrb	r3, [r3, #12]
    82b8:	f083 0301 	eor.w	r3, r3, #1
    82bc:	b2db      	uxtb	r3, r3
    82be:	2b00      	cmp	r3, #0
    82c0:	d018      	beq.n	82f4 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
        {
            if (CAN_TX_NORMAL == Can_pHwObjectConfig[u8HwObjectID].Can_eReceiveType)
    82c2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    82c6:	4613      	mov	r3, r2
    82c8:	00db      	lsls	r3, r3, #3
    82ca:	4413      	add	r3, r2
    82cc:	009b      	lsls	r3, r3, #2
    82ce:	461a      	mov	r2, r3
    82d0:	9b02      	ldr	r3, [sp, #8]
    82d2:	4413      	add	r3, r2
    82d4:	699b      	ldr	r3, [r3, #24]
    82d6:	2b03      	cmp	r3, #3
    82d8:	d10c      	bne.n	82f4 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x88>
            {
                CanIf_TxConfirmation(Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx]);
    82da:	9b03      	ldr	r3, [sp, #12]
    82dc:	785b      	ldrb	r3, [r3, #1]
    82de:	461a      	mov	r2, r3
    82e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    82e4:	4906      	ldr	r1, [pc, #24]	; (8300 <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer+0x94>)
    82e6:	0152      	lsls	r2, r2, #5
    82e8:	4413      	add	r3, r2
    82ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    82ee:	4618      	mov	r0, r3
    82f0:	f7f8 fb14 	bl	91c <CanIf_TxConfirmation>
            }
        }
    }
    82f4:	bf00      	nop
    82f6:	b007      	add	sp, #28
    82f8:	f85d fb04 	ldr.w	pc, [sp], #4
    82fc:	1fff8f70 	.word	0x1fff8f70
    8300:	1fff8f30 	.word	0x1fff8f30

00008304 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>:
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
        uint8 u8MbIdx
    )
    {
    8304:	b500      	push	{lr}
    8306:	b08f      	sub	sp, #60	; 0x3c
    8308:	9005      	str	r0, [sp, #20]
    830a:	9104      	str	r1, [sp, #16]
    830c:	4613      	mov	r3, r2
    830e:	f88d 300f 	strb.w	r3, [sp, #15]
        Can_HwHandleType u8HwObjectID = 0U;
    8312:	2300      	movs	r3, #0
    8314:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        Can_HwType CanIf_Mailbox;
        PduInfoType CanIf_PduInfo;
        const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    8318:	2300      	movs	r3, #0
    831a:	930c      	str	r3, [sp, #48]	; 0x30
        Flexcan_Ip_MsgBuffType * pReceivedDataBuffer = NULL_PTR;
    831c:	2300      	movs	r3, #0
    831e:	930b      	str	r3, [sp, #44]	; 0x2c

        u8HwObjectID = Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8MbIdx];
    8320:	9b05      	ldr	r3, [sp, #20]
    8322:	785b      	ldrb	r3, [r3, #1]
    8324:	461a      	mov	r2, r3
    8326:	f89d 300f 	ldrb.w	r3, [sp, #15]
    832a:	493f      	ldr	r1, [pc, #252]	; (8428 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x124>)
    832c:	0152      	lsls	r2, r2, #5
    832e:	4413      	add	r3, r2
    8330:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    8334:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        if ((CAN_43_FLEXCAN_HWOBJ_UNMAPPED != u8HwObjectID) && (FALSE == Can_pHwObjectConfig[u8HwObjectID].Can_bHwObjectUsesPolling))
    8338:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    833c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8340:	4293      	cmp	r3, r2
    8342:	d06c      	beq.n	841e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
    8344:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    8348:	4613      	mov	r3, r2
    834a:	00db      	lsls	r3, r3, #3
    834c:	4413      	add	r3, r2
    834e:	009b      	lsls	r3, r3, #2
    8350:	461a      	mov	r2, r3
    8352:	9b04      	ldr	r3, [sp, #16]
    8354:	4413      	add	r3, r2
    8356:	7b1b      	ldrb	r3, [r3, #12]
    8358:	f083 0301 	eor.w	r3, r3, #1
    835c:	b2db      	uxtb	r3, r3
    835e:	2b00      	cmp	r3, #0
    8360:	d05d      	beq.n	841e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
        {
            Can_pHwObject = &Can_pHwObjectConfig[u8HwObjectID];
    8362:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    8366:	4613      	mov	r3, r2
    8368:	00db      	lsls	r3, r3, #3
    836a:	4413      	add	r3, r2
    836c:	009b      	lsls	r3, r3, #2
    836e:	461a      	mov	r2, r3
    8370:	9b04      	ldr	r3, [sp, #16]
    8372:	4413      	add	r3, r2
    8374:	930c      	str	r3, [sp, #48]	; 0x30

            if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    8376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8378:	699b      	ldr	r3, [r3, #24]
    837a:	2b00      	cmp	r3, #0
    837c:	d118      	bne.n	83b0 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xac>
            {
                pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    837e:	4a2b      	ldr	r2, [pc, #172]	; (842c <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    8380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8382:	7f1b      	ldrb	r3, [r3, #28]
    8384:	011b      	lsls	r3, r3, #4
    8386:	4413      	add	r3, r2
    8388:	681b      	ldr	r3, [r3, #0]
    838a:	930b      	str	r3, [sp, #44]	; 0x2c
                Can_Ipw_ParseData(&CanIf_Mailbox, \
    838c:	a906      	add	r1, sp, #24
    838e:	a809      	add	r0, sp, #36	; 0x24
    8390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8392:	9300      	str	r3, [sp, #0]
    8394:	9b05      	ldr	r3, [sp, #20]
    8396:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8398:	f7ff fc2e 	bl	7bf8 <Can_Ipw_ParseData>
                                  pReceivedDataBuffer, \
                                  Can_pControllerConfig, \
                                  Can_pHwObject \
                                 );
                /* ready to receive in next time */
                (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    839c:	9b05      	ldr	r3, [sp, #20]
    839e:	7898      	ldrb	r0, [r3, #2]
    83a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    83a2:	7f19      	ldrb	r1, [r3, #28]
    83a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    83a6:	7b1b      	ldrb	r3, [r3, #12]
    83a8:	2200      	movs	r2, #0
    83aa:	f001 ff49 	bl	a240 <FlexCAN_Ip_Receive>
            else
            {
                /* prevent misra */
            }
        }
    }
    83ae:	e036      	b.n	841e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
            else if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    83b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    83b2:	699b      	ldr	r3, [r3, #24]
    83b4:	2b01      	cmp	r3, #1
    83b6:	d132      	bne.n	841e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                if ((uint8)7U == u8MbIdx)
    83b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83bc:	2b07      	cmp	r3, #7
    83be:	d10d      	bne.n	83dc <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xd8>
                    (void)Det_ReportRuntimeError((uint16)CAN_43_FLEXCAN_IPW_MODULE_ID, (uint8)CAN_43_FLEXCAN_INSTANCE, (uint8)CAN_43_FLEXCAN_SID_MAIN_FUNCTION_READ, (uint8)CAN_43_FLEXCAN_E_DATALOST);
    83c0:	2301      	movs	r3, #1
    83c2:	2208      	movs	r2, #8
    83c4:	2100      	movs	r1, #0
    83c6:	2050      	movs	r0, #80	; 0x50
    83c8:	f007 f97c 	bl	f6c4 <Det_ReportRuntimeError>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoOvfNotif)
    83cc:	9b05      	ldr	r3, [sp, #20]
    83ce:	699b      	ldr	r3, [r3, #24]
    83d0:	2b00      	cmp	r3, #0
    83d2:	d024      	beq.n	841e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoOvfNotif();
    83d4:	9b05      	ldr	r3, [sp, #20]
    83d6:	699b      	ldr	r3, [r3, #24]
    83d8:	4798      	blx	r3
    }
    83da:	e020      	b.n	841e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                else if ((uint8)6U == u8MbIdx)
    83dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    83e0:	2b06      	cmp	r3, #6
    83e2:	d107      	bne.n	83f4 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0xf0>
                    if (NULL_PTR != Can_pControllerConfig->Can_pLegacyFiFoWarnNotif)
    83e4:	9b05      	ldr	r3, [sp, #20]
    83e6:	695b      	ldr	r3, [r3, #20]
    83e8:	2b00      	cmp	r3, #0
    83ea:	d018      	beq.n	841e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                        Can_pControllerConfig->Can_pLegacyFiFoWarnNotif();
    83ec:	9b05      	ldr	r3, [sp, #20]
    83ee:	695b      	ldr	r3, [r3, #20]
    83f0:	4798      	blx	r3
    }
    83f2:	e014      	b.n	841e <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x11a>
                    pReceivedDataBuffer = (Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID])->mbs[Can_pHwObject->Can_u8HwBufferIndex].pMBmessage;
    83f4:	4a0d      	ldr	r2, [pc, #52]	; (842c <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer+0x128>)
    83f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    83f8:	7f1b      	ldrb	r3, [r3, #28]
    83fa:	011b      	lsls	r3, r3, #4
    83fc:	4413      	add	r3, r2
    83fe:	681b      	ldr	r3, [r3, #0]
    8400:	930b      	str	r3, [sp, #44]	; 0x2c
                    Can_Ipw_ParseData(&CanIf_Mailbox, \
    8402:	a906      	add	r1, sp, #24
    8404:	a809      	add	r0, sp, #36	; 0x24
    8406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8408:	9300      	str	r3, [sp, #0]
    840a:	9b05      	ldr	r3, [sp, #20]
    840c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    840e:	f7ff fbf3 	bl	7bf8 <Can_Ipw_ParseData>
                    (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    8412:	9b05      	ldr	r3, [sp, #20]
    8414:	789b      	ldrb	r3, [r3, #2]
    8416:	2100      	movs	r1, #0
    8418:	4618      	mov	r0, r3
    841a:	f002 f80f 	bl	a43c <FlexCAN_Ip_RxFifo>
    }
    841e:	bf00      	nop
    8420:	b00f      	add	sp, #60	; 0x3c
    8422:	f85d fb04 	ldr.w	pc, [sp], #4
    8426:	bf00      	nop
    8428:	1fff8f70 	.word	0x1fff8f70
    842c:	1fff8d10 	.word	0x1fff8d10

00008430 <Can_43_FLEXCAN_Ipw_Init>:
#endif /* (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON) */
/*==================================================================================================
*                                       GLOBAL FUNCTIONS
==================================================================================================*/
Std_ReturnType Can_43_FLEXCAN_Ipw_Init(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8430:	b510      	push	{r4, lr}
    8432:	b084      	sub	sp, #16
    8434:	9001      	str	r0, [sp, #4]
    Std_ReturnType eRetVal = (Std_ReturnType)FLEXCAN_STATUS_ERROR;
    8436:	2301      	movs	r3, #1
    8438:	f88d 300c 	strb.w	r3, [sp, #12]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    /* The Index of Hoh in a group that refer to a controller */
    uint8 u8HwObjRefIdx = 0U;
    843c:	2300      	movs	r3, #0
    843e:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 u8ObjIdx = 0U;
    8442:	2300      	movs	r3, #0
    8444:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    8448:	2300      	movs	r3, #0
    844a:	9302      	str	r3, [sp, #8]
    uint8 u8HwBufferCount = 0U;
    844c:	2300      	movs	r3, #0
    844e:	f88d 300d 	strb.w	r3, [sp, #13]
#endif

#if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
    Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID] = Can_pControllerConfig->Can_u16DefaultBaudrateID;
    8452:	9b01      	ldr	r3, [sp, #4]
    8454:	785b      	ldrb	r3, [r3, #1]
    8456:	461a      	mov	r2, r3
    8458:	9b01      	ldr	r3, [sp, #4]
    845a:	8b99      	ldrh	r1, [r3, #28]
    845c:	4b78      	ldr	r3, [pc, #480]	; (8640 <Can_43_FLEXCAN_Ipw_Init+0x210>)
    845e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    {
        Can_Ipw_u32Seconds = 0U;
    }
#endif
    /* @violates @ref Can_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    eRetVal = (Std_ReturnType)Call_Can_FlexCan_Init(Can_pControllerConfig->Can_u8ControllerOffset, Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);
    8462:	9b01      	ldr	r3, [sp, #4]
    8464:	7898      	ldrb	r0, [r3, #2]
    8466:	4977      	ldr	r1, [pc, #476]	; (8644 <Can_43_FLEXCAN_Ipw_Init+0x214>)
    8468:	9b01      	ldr	r3, [sp, #4]
    846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    846c:	681b      	ldr	r3, [r3, #0]
    846e:	461a      	mov	r2, r3
    8470:	f001 fdda 	bl	a028 <FlexCAN_Ip_Init_Privileged>
    8474:	4603      	mov	r3, r0
    8476:	f88d 300c 	strb.w	r3, [sp, #12]
    
    /* by defaut, enable interrupt when setcontroller to start */
    Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    847a:	9b01      	ldr	r3, [sp, #4]
    847c:	785b      	ldrb	r3, [r3, #1]
    847e:	461a      	mov	r2, r3
    8480:	4b71      	ldr	r3, [pc, #452]	; (8648 <Can_43_FLEXCAN_Ipw_Init+0x218>)
    8482:	2101      	movs	r1, #1
    8484:	5499      	strb	r1, [r3, r2]
    if ((Std_ReturnType)FLEXCAN_STATUS_SUCCESS == eRetVal)
    8486:	f89d 300c 	ldrb.w	r3, [sp, #12]
    848a:	2b00      	cmp	r3, #0
    848c:	d13b      	bne.n	8506 <Can_43_FLEXCAN_Ipw_Init+0xd6>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    848e:	9b01      	ldr	r3, [sp, #4]
    8490:	789b      	ldrb	r3, [r3, #2]
    8492:	4618      	mov	r0, r3
    8494:	f003 f8fc 	bl	b690 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* If the FlexCAN_Init retuns SUCCESS then the module is already in freezemode, and FlexCAN_Ip_SetTDCOffset and FlexCAN_Ip_SetTxArbitrationStartDelay will always retun success */
        if (Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bFDFrame)
    8498:	9b01      	ldr	r3, [sp, #4]
    849a:	6a1a      	ldr	r2, [r3, #32]
    849c:	9b01      	ldr	r3, [sp, #4]
    849e:	8b9b      	ldrh	r3, [r3, #28]
    84a0:	4619      	mov	r1, r3
    84a2:	2316      	movs	r3, #22
    84a4:	fb01 f303 	mul.w	r3, r1, r3
    84a8:	4413      	add	r3, r2
    84aa:	785b      	ldrb	r3, [r3, #1]
    84ac:	2b00      	cmp	r3, #0
    84ae:	d018      	beq.n	84e2 <Can_43_FLEXCAN_Ipw_Init+0xb2>
        {
            (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    84b0:	9b01      	ldr	r3, [sp, #4]
    84b2:	7898      	ldrb	r0, [r3, #2]
    84b4:	9b01      	ldr	r3, [sp, #4]
    84b6:	6a1a      	ldr	r2, [r3, #32]
    84b8:	9b01      	ldr	r3, [sp, #4]
    84ba:	8b9b      	ldrh	r3, [r3, #28]
    84bc:	4619      	mov	r1, r3
    84be:	2316      	movs	r3, #22
    84c0:	fb01 f303 	mul.w	r3, r1, r3
    84c4:	4413      	add	r3, r2
    84c6:	7cd9      	ldrb	r1, [r3, #19]
    84c8:	9b01      	ldr	r3, [sp, #4]
    84ca:	6a1a      	ldr	r2, [r3, #32]
    84cc:	9b01      	ldr	r3, [sp, #4]
    84ce:	8b9b      	ldrh	r3, [r3, #28]
    84d0:	461c      	mov	r4, r3
    84d2:	2316      	movs	r3, #22
    84d4:	fb04 f303 	mul.w	r3, r4, r3
    84d8:	4413      	add	r3, r2
    84da:	7d1b      	ldrb	r3, [r3, #20]
    84dc:	461a      	mov	r2, r3
    84de:	f002 ffc5 	bl	b46c <FlexCAN_Ip_SetTDCOffset_Privileged>
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bTrcvDelayEnable, \
                                          Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TrcvDelayCompOffset);
        }
        (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, \
    84e2:	9b01      	ldr	r3, [sp, #4]
    84e4:	7898      	ldrb	r0, [r3, #2]
    84e6:	9b01      	ldr	r3, [sp, #4]
    84e8:	6a1a      	ldr	r2, [r3, #32]
    84ea:	9b01      	ldr	r3, [sp, #4]
    84ec:	8b9b      	ldrh	r3, [r3, #28]
    84ee:	4619      	mov	r1, r3
    84f0:	2316      	movs	r3, #22
    84f2:	fb01 f303 	mul.w	r3, r1, r3
    84f6:	4413      	add	r3, r2
    84f8:	7c9b      	ldrb	r3, [r3, #18]
    84fa:	4619      	mov	r1, r3
    84fc:	f003 f80a 	bl	b514 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>
                                                    Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_u8TxArbitrationStartDelay);
        
        /* Init all Rx objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    8500:	9801      	ldr	r0, [sp, #4]
    8502:	f000 fbe5 	bl	8cd0 <Can_Ipw_InitRx>
    }

#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    8506:	2300      	movs	r3, #0
    8508:	f88d 300d 	strb.w	r3, [sp, #13]
    850c:	e010      	b.n	8530 <Can_43_FLEXCAN_Ipw_Init+0x100>
    {
        Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][u8HwBufferCount] = CAN_43_FLEXCAN_HWOBJ_UNMAPPED;
    850e:	9b01      	ldr	r3, [sp, #4]
    8510:	785b      	ldrb	r3, [r3, #1]
    8512:	461a      	mov	r2, r3
    8514:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8518:	494c      	ldr	r1, [pc, #304]	; (864c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    851a:	0152      	lsls	r2, r2, #5
    851c:	4413      	add	r3, r2
    851e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8522:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (u8HwBufferCount = 0U; u8HwBufferCount < CAN_43_FLEXCAN_HWMB_COUNT; u8HwBufferCount++)
    8526:	f89d 300d 	ldrb.w	r3, [sp, #13]
    852a:	3301      	adds	r3, #1
    852c:	f88d 300d 	strb.w	r3, [sp, #13]
    8530:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8534:	2b1f      	cmp	r3, #31
    8536:	d9ea      	bls.n	850e <Can_43_FLEXCAN_Ipw_Init+0xde>
    }
    /* Map MB index to hardware object ID */
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8538:	2300      	movs	r3, #0
    853a:	f88d 300f 	strb.w	r3, [sp, #15]
    853e:	e06b      	b.n	8618 <Can_43_FLEXCAN_Ipw_Init+0x1e8>
    {
        Can_pHwObject = Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    8540:	9b01      	ldr	r3, [sp, #4]
    8542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8544:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8548:	009b      	lsls	r3, r3, #2
    854a:	4413      	add	r3, r2
    854c:	681b      	ldr	r3, [r3, #0]
    854e:	9302      	str	r3, [sp, #8]
        switch (Can_pHwObject->Can_eReceiveType)
    8550:	9b02      	ldr	r3, [sp, #8]
    8552:	699b      	ldr	r3, [r3, #24]
    8554:	2b03      	cmp	r3, #3
    8556:	d006      	beq.n	8566 <Can_43_FLEXCAN_Ipw_Init+0x136>
    8558:	2b03      	cmp	r3, #3
    855a:	d857      	bhi.n	860c <Can_43_FLEXCAN_Ipw_Init+0x1dc>
    855c:	2b00      	cmp	r3, #0
    855e:	d023      	beq.n	85a8 <Can_43_FLEXCAN_Ipw_Init+0x178>
    8560:	2b01      	cmp	r3, #1
    8562:	d02f      	beq.n	85c4 <Can_43_FLEXCAN_Ipw_Init+0x194>
                break;
            }
            default:
            {
                /* don't map for enhance fifo object because of out of message buffer memory */
                break;
    8564:	e052      	b.n	860c <Can_43_FLEXCAN_Ipw_Init+0x1dc>
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    8566:	2300      	movs	r3, #0
    8568:	f88d 300e 	strb.w	r3, [sp, #14]
    856c:	e015      	b.n	859a <Can_43_FLEXCAN_Ipw_Init+0x16a>
                    Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex + u8ObjIdx] = Can_pHwObject->Can_HwObjectID;
    856e:	9b01      	ldr	r3, [sp, #4]
    8570:	785b      	ldrb	r3, [r3, #1]
    8572:	461c      	mov	r4, r3
    8574:	9b02      	ldr	r3, [sp, #8]
    8576:	7f1b      	ldrb	r3, [r3, #28]
    8578:	461a      	mov	r2, r3
    857a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    857e:	4413      	add	r3, r2
    8580:	9a02      	ldr	r2, [sp, #8]
    8582:	8810      	ldrh	r0, [r2, #0]
    8584:	4931      	ldr	r1, [pc, #196]	; (864c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    8586:	0162      	lsls	r2, r4, #5
    8588:	4413      	add	r3, r2
    858a:	4602      	mov	r2, r0
    858c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (u8ObjIdx = 0U; u8ObjIdx < Can_pHwObject->Can_u8ObjectCount; u8ObjIdx++)
    8590:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8594:	3301      	adds	r3, #1
    8596:	f88d 300e 	strb.w	r3, [sp, #14]
    859a:	9b02      	ldr	r3, [sp, #8]
    859c:	7b9b      	ldrb	r3, [r3, #14]
    859e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    85a2:	429a      	cmp	r2, r3
    85a4:	d3e3      	bcc.n	856e <Can_43_FLEXCAN_Ipw_Init+0x13e>
                break;
    85a6:	e032      	b.n	860e <Can_43_FLEXCAN_Ipw_Init+0x1de>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    85a8:	9b01      	ldr	r3, [sp, #4]
    85aa:	785b      	ldrb	r3, [r3, #1]
    85ac:	461c      	mov	r4, r3
    85ae:	9b02      	ldr	r3, [sp, #8]
    85b0:	7f1b      	ldrb	r3, [r3, #28]
    85b2:	4618      	mov	r0, r3
    85b4:	9b02      	ldr	r3, [sp, #8]
    85b6:	8819      	ldrh	r1, [r3, #0]
    85b8:	4a24      	ldr	r2, [pc, #144]	; (864c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    85ba:	0163      	lsls	r3, r4, #5
    85bc:	4403      	add	r3, r0
    85be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                break;
    85c2:	e024      	b.n	860e <Can_43_FLEXCAN_Ipw_Init+0x1de>
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObject->Can_u8HwBufferIndex] = Can_pHwObject->Can_HwObjectID;
    85c4:	9b01      	ldr	r3, [sp, #4]
    85c6:	785b      	ldrb	r3, [r3, #1]
    85c8:	461c      	mov	r4, r3
    85ca:	9b02      	ldr	r3, [sp, #8]
    85cc:	7f1b      	ldrb	r3, [r3, #28]
    85ce:	4618      	mov	r0, r3
    85d0:	9b02      	ldr	r3, [sp, #8]
    85d2:	8819      	ldrh	r1, [r3, #0]
    85d4:	4a1d      	ldr	r2, [pc, #116]	; (864c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    85d6:	0163      	lsls	r3, r4, #5
    85d8:	4403      	add	r3, r0
    85da:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][6U] = Can_pHwObject->Can_HwObjectID;
    85de:	9b01      	ldr	r3, [sp, #4]
    85e0:	785b      	ldrb	r3, [r3, #1]
    85e2:	4618      	mov	r0, r3
    85e4:	9b02      	ldr	r3, [sp, #8]
    85e6:	8819      	ldrh	r1, [r3, #0]
    85e8:	4a18      	ldr	r2, [pc, #96]	; (864c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    85ea:	0183      	lsls	r3, r0, #6
    85ec:	4413      	add	r3, r2
    85ee:	330c      	adds	r3, #12
    85f0:	460a      	mov	r2, r1
    85f2:	801a      	strh	r2, [r3, #0]
                Can_Ipw_au16MbIdxToObjIDMap[Can_pControllerConfig->Can_u8ControllerID][7U] = Can_pHwObject->Can_HwObjectID;
    85f4:	9b01      	ldr	r3, [sp, #4]
    85f6:	785b      	ldrb	r3, [r3, #1]
    85f8:	4618      	mov	r0, r3
    85fa:	9b02      	ldr	r3, [sp, #8]
    85fc:	8819      	ldrh	r1, [r3, #0]
    85fe:	4a13      	ldr	r2, [pc, #76]	; (864c <Can_43_FLEXCAN_Ipw_Init+0x21c>)
    8600:	0183      	lsls	r3, r0, #6
    8602:	4413      	add	r3, r2
    8604:	330e      	adds	r3, #14
    8606:	460a      	mov	r2, r1
    8608:	801a      	strh	r2, [r3, #0]
                break;
    860a:	e000      	b.n	860e <Can_43_FLEXCAN_Ipw_Init+0x1de>
                break;
    860c:	bf00      	nop
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    860e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8612:	3301      	adds	r3, #1
    8614:	f88d 300f 	strb.w	r3, [sp, #15]
    8618:	9b01      	ldr	r3, [sp, #4]
    861a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    861e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    8622:	429a      	cmp	r2, r3
    8624:	d38c      	bcc.n	8540 <Can_43_FLEXCAN_Ipw_Init+0x110>
            }
        }
    }
#endif /* MB_INTERRUPT_SUPPORT */
    eRetVal = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    8626:	9b01      	ldr	r3, [sp, #4]
    8628:	789b      	ldrb	r3, [r3, #2]
    862a:	4618      	mov	r0, r3
    862c:	f002 fd80 	bl	b130 <FlexCAN_Ip_SetStopMode_Privileged>
    8630:	4603      	mov	r3, r0
    8632:	f88d 300c 	strb.w	r3, [sp, #12]

    return (Std_ReturnType)eRetVal;
    8636:	f89d 300c 	ldrb.w	r3, [sp, #12]
}
    863a:	4618      	mov	r0, r3
    863c:	b004      	add	sp, #16
    863e:	bd10      	pop	{r4, pc}
    8640:	1fff8fb0 	.word	0x1fff8fb0
    8644:	1fff8d10 	.word	0x1fff8d10
    8648:	1fff8fb4 	.word	0x1fff8fb4
    864c:	1fff8f70 	.word	0x1fff8f70

00008650 <Can_43_FLEXCAN_Ipw_DeInit>:

/**
*   @brief      De-Initialize Controller
*/
void Can_43_FLEXCAN_Ipw_DeInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8650:	b500      	push	{lr}
    8652:	b083      	sub	sp, #12
    8654:	9001      	str	r0, [sp, #4]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    (void)FlexCAN_Ip_Deinit(Can_pControllerConfig->Can_u8ControllerOffset);
    8656:	9b01      	ldr	r3, [sp, #4]
    8658:	789b      	ldrb	r3, [r3, #2]
    865a:	4618      	mov	r0, r3
    865c:	f002 fbd4 	bl	ae08 <FlexCAN_Ip_Deinit_Privileged>
}
    8660:	bf00      	nop
    8662:	b003      	add	sp, #12
    8664:	f85d fb04 	ldr.w	pc, [sp], #4

00008668 <Can_43_FLEXCAN_Ipw_SetBaudrate>:
    Std_ReturnType Can_43_FLEXCAN_Ipw_SetBaudrate
    (
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        uint16 BaudRateConfigID
    )
    {
    8668:	b510      	push	{r4, lr}
    866a:	b088      	sub	sp, #32
    866c:	9001      	str	r0, [sp, #4]
    866e:	460b      	mov	r3, r1
    8670:	f8ad 3002 	strh.w	r3, [sp, #2]
        Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    8674:	2301      	movs	r3, #1
    8676:	9307      	str	r3, [sp, #28]
        Flexcan_Ip_TimeSegmentType FlexCANTimeSeg;

        eRetVal = FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset);
    8678:	9b01      	ldr	r3, [sp, #4]
    867a:	789b      	ldrb	r3, [r3, #2]
    867c:	4618      	mov	r0, r3
    867e:	f002 fb01 	bl	ac84 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    8682:	9007      	str	r0, [sp, #28]
        if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    8684:	9b07      	ldr	r3, [sp, #28]
    8686:	2b00      	cmp	r3, #0
    8688:	f040 80bb 	bne.w	8802 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x19a>
        {
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[Can_pControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16Prescaler;
    868c:	9b01      	ldr	r3, [sp, #4]
    868e:	6a1a      	ldr	r2, [r3, #32]
    8690:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8694:	2116      	movs	r1, #22
    8696:	fb01 f303 	mul.w	r3, r1, r3
    869a:	4413      	add	r3, r2
    869c:	88db      	ldrh	r3, [r3, #6]
    869e:	9305      	str	r3, [sp, #20]
            {
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u16PrescalerAlternate;
            }
        #endif

            FlexCANTimeSeg.propSeg    = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PropSeg;
    86a0:	9b01      	ldr	r3, [sp, #4]
    86a2:	6a1a      	ldr	r2, [r3, #32]
    86a4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    86a8:	2116      	movs	r1, #22
    86aa:	fb01 f303 	mul.w	r3, r1, r3
    86ae:	4413      	add	r3, r2
    86b0:	789b      	ldrb	r3, [r3, #2]
    86b2:	9302      	str	r3, [sp, #8]
            FlexCANTimeSeg.phaseSeg1  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg1;
    86b4:	9b01      	ldr	r3, [sp, #4]
    86b6:	6a1a      	ldr	r2, [r3, #32]
    86b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    86bc:	2116      	movs	r1, #22
    86be:	fb01 f303 	mul.w	r3, r1, r3
    86c2:	4413      	add	r3, r2
    86c4:	78db      	ldrb	r3, [r3, #3]
    86c6:	9303      	str	r3, [sp, #12]
            FlexCANTimeSeg.phaseSeg2  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8PhaseSeg2;
    86c8:	9b01      	ldr	r3, [sp, #4]
    86ca:	6a1a      	ldr	r2, [r3, #32]
    86cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    86d0:	2116      	movs	r1, #22
    86d2:	fb01 f303 	mul.w	r3, r1, r3
    86d6:	4413      	add	r3, r2
    86d8:	791b      	ldrb	r3, [r3, #4]
    86da:	9304      	str	r3, [sp, #16]
            FlexCANTimeSeg.rJumpwidth = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_NominalBitRate.Can_u8ResyncJumpWidth;
    86dc:	9b01      	ldr	r3, [sp, #4]
    86de:	6a1a      	ldr	r2, [r3, #32]
    86e0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    86e4:	2116      	movs	r1, #22
    86e6:	fb01 f303 	mul.w	r3, r1, r3
    86ea:	4413      	add	r3, r2
    86ec:	7a1b      	ldrb	r3, [r3, #8]
    86ee:	9306      	str	r3, [sp, #24]

            
            (void)FlexCAN_Ip_SetBitrate(Can_pControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, FALSE);
    86f0:	9b01      	ldr	r3, [sp, #4]
    86f2:	789b      	ldrb	r3, [r3, #2]
    86f4:	a902      	add	r1, sp, #8
    86f6:	2200      	movs	r2, #0
    86f8:	4618      	mov	r0, r3
    86fa:	f002 fd83 	bl	b204 <FlexCAN_Ip_SetBitrate_Privileged>
        #if (CAN_43_FLEXCAN_DUAL_CLOCK_MODE == STD_ON)
            if (CAN_43_FLEXCAN_CLOCKMODE_NORMAL == Can_Ipw_eClockMode[Can_pControllerConfig->Can_u8ControllerID])
            {
        #endif
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16Prescaler;
    86fe:	9b01      	ldr	r3, [sp, #4]
    8700:	6a1a      	ldr	r2, [r3, #32]
    8702:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8706:	2116      	movs	r1, #22
    8708:	fb01 f303 	mul.w	r3, r1, r3
    870c:	4413      	add	r3, r2
    870e:	89db      	ldrh	r3, [r3, #14]
    8710:	9305      	str	r3, [sp, #20]
            {
                FlexCANTimeSeg.preDivider = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u16PrescalerAlternate;
            }
        #endif

            if (TRUE == Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bFDFrame)
    8712:	9b01      	ldr	r3, [sp, #4]
    8714:	6a1a      	ldr	r2, [r3, #32]
    8716:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    871a:	2116      	movs	r1, #22
    871c:	fb01 f303 	mul.w	r3, r1, r3
    8720:	4413      	add	r3, r2
    8722:	785b      	ldrb	r3, [r3, #1]
    8724:	2b00      	cmp	r3, #0
    8726:	d04d      	beq.n	87c4 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x15c>
            {
                FlexCANTimeSeg.propSeg    = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PropSeg;
    8728:	9b01      	ldr	r3, [sp, #4]
    872a:	6a1a      	ldr	r2, [r3, #32]
    872c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8730:	2116      	movs	r1, #22
    8732:	fb01 f303 	mul.w	r3, r1, r3
    8736:	4413      	add	r3, r2
    8738:	7a9b      	ldrb	r3, [r3, #10]
    873a:	9302      	str	r3, [sp, #8]
                FlexCANTimeSeg.phaseSeg1  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg1;
    873c:	9b01      	ldr	r3, [sp, #4]
    873e:	6a1a      	ldr	r2, [r3, #32]
    8740:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8744:	2116      	movs	r1, #22
    8746:	fb01 f303 	mul.w	r3, r1, r3
    874a:	4413      	add	r3, r2
    874c:	7adb      	ldrb	r3, [r3, #11]
    874e:	9303      	str	r3, [sp, #12]
                FlexCANTimeSeg.phaseSeg2  = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8PhaseSeg2;
    8750:	9b01      	ldr	r3, [sp, #4]
    8752:	6a1a      	ldr	r2, [r3, #32]
    8754:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8758:	2116      	movs	r1, #22
    875a:	fb01 f303 	mul.w	r3, r1, r3
    875e:	4413      	add	r3, r2
    8760:	7b1b      	ldrb	r3, [r3, #12]
    8762:	9304      	str	r3, [sp, #16]
                FlexCANTimeSeg.rJumpwidth = Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_DataBitRate.Can_u8ResyncJumpWidth;
    8764:	9b01      	ldr	r3, [sp, #4]
    8766:	6a1a      	ldr	r2, [r3, #32]
    8768:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    876c:	2116      	movs	r1, #22
    876e:	fb01 f303 	mul.w	r3, r1, r3
    8772:	4413      	add	r3, r2
    8774:	7c1b      	ldrb	r3, [r3, #16]
    8776:	9306      	str	r3, [sp, #24]

                (void)FlexCAN_Ip_SetBitrateCbt(Can_pControllerConfig->Can_u8ControllerOffset, &FlexCANTimeSeg, Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bBitRateSwitch);
    8778:	9b01      	ldr	r3, [sp, #4]
    877a:	7898      	ldrb	r0, [r3, #2]
    877c:	9b01      	ldr	r3, [sp, #4]
    877e:	6a1a      	ldr	r2, [r3, #32]
    8780:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    8784:	2116      	movs	r1, #22
    8786:	fb01 f303 	mul.w	r3, r1, r3
    878a:	4413      	add	r3, r2
    878c:	781a      	ldrb	r2, [r3, #0]
    878e:	ab02      	add	r3, sp, #8
    8790:	4619      	mov	r1, r3
    8792:	f002 fe01 	bl	b398 <FlexCAN_Ip_SetBitrateCbt_Privileged>

                (void)FlexCAN_Ip_SetTDCOffset(Can_pControllerConfig->Can_u8ControllerOffset, \
    8796:	9b01      	ldr	r3, [sp, #4]
    8798:	7898      	ldrb	r0, [r3, #2]
    879a:	9b01      	ldr	r3, [sp, #4]
    879c:	6a1a      	ldr	r2, [r3, #32]
    879e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    87a2:	2116      	movs	r1, #22
    87a4:	fb01 f303 	mul.w	r3, r1, r3
    87a8:	4413      	add	r3, r2
    87aa:	7cd9      	ldrb	r1, [r3, #19]
    87ac:	9b01      	ldr	r3, [sp, #4]
    87ae:	6a1a      	ldr	r2, [r3, #32]
    87b0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    87b4:	2416      	movs	r4, #22
    87b6:	fb04 f303 	mul.w	r3, r4, r3
    87ba:	4413      	add	r3, r2
    87bc:	7d1b      	ldrb	r3, [r3, #20]
    87be:	461a      	mov	r2, r3
    87c0:	f002 fe54 	bl	b46c <FlexCAN_Ip_SetTDCOffset_Privileged>
                                            Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_bTrcvDelayEnable, \
                                            Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TrcvDelayCompOffset \
                                            );
            }

            (void)FlexCAN_Ip_SetTxArbitrationStartDelay(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->Can_pBaudrateConfig[BaudRateConfigID].Can_u8TxArbitrationStartDelay);
    87c4:	9b01      	ldr	r3, [sp, #4]
    87c6:	7898      	ldrb	r0, [r3, #2]
    87c8:	9b01      	ldr	r3, [sp, #4]
    87ca:	6a1a      	ldr	r2, [r3, #32]
    87cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    87d0:	2116      	movs	r1, #22
    87d2:	fb01 f303 	mul.w	r3, r1, r3
    87d6:	4413      	add	r3, r2
    87d8:	7c9b      	ldrb	r3, [r3, #18]
    87da:	4619      	mov	r1, r3
    87dc:	f002 fe9a 	bl	b514 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>

            eRetVal = FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    87e0:	9b01      	ldr	r3, [sp, #4]
    87e2:	789b      	ldrb	r3, [r3, #2]
    87e4:	4618      	mov	r0, r3
    87e6:	f002 fca3 	bl	b130 <FlexCAN_Ip_SetStopMode_Privileged>
    87ea:	9007      	str	r0, [sp, #28]
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    87ec:	9b07      	ldr	r3, [sp, #28]
    87ee:	2b00      	cmp	r3, #0
    87f0:	d107      	bne.n	8802 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x19a>
            {
                Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID] = BaudRateConfigID;
    87f2:	9b01      	ldr	r3, [sp, #4]
    87f4:	785b      	ldrb	r3, [r3, #1]
    87f6:	4619      	mov	r1, r3
    87f8:	4a06      	ldr	r2, [pc, #24]	; (8814 <Can_43_FLEXCAN_Ipw_SetBaudrate+0x1ac>)
    87fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    87fe:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            }
        }
        return ((FLEXCAN_STATUS_SUCCESS == eRetVal) ? ((Std_ReturnType)E_OK) : ((Std_ReturnType)E_NOT_OK));
    8802:	9b07      	ldr	r3, [sp, #28]
    8804:	2b00      	cmp	r3, #0
    8806:	bf14      	ite	ne
    8808:	2301      	movne	r3, #1
    880a:	2300      	moveq	r3, #0
    880c:	b2db      	uxtb	r3, r3
    }
    880e:	4618      	mov	r0, r3
    8810:	b008      	add	sp, #32
    8812:	bd10      	pop	{r4, pc}
    8814:	1fff8fb0 	.word	0x1fff8fb0

00008818 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>:

/**
*   @brief      Set Error Initialization and set Controller to start Mode.
*/
static Std_ReturnType Can_43_FLEXCAN_Ipw_SetControlerErrorInit(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8818:	b500      	push	{lr}
    881a:	b085      	sub	sp, #20
    881c:	9001      	str	r0, [sp, #4]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_SUCCESS;
    881e:	2300      	movs	r3, #0
    8820:	9303      	str	r3, [sp, #12]

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    8822:	9b01      	ldr	r3, [sp, #4]
    8824:	785b      	ldrb	r3, [r3, #1]
    8826:	461a      	mov	r2, r3
    8828:	4b11      	ldr	r3, [pc, #68]	; (8870 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x58>)
    882a:	5c9b      	ldrb	r3, [r3, r2]
    882c:	2b00      	cmp	r3, #0
    882e:	d012      	beq.n	8856 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x3e>
    {
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    8830:	9b01      	ldr	r3, [sp, #4]
    8832:	7a5b      	ldrb	r3, [r3, #9]
    8834:	f083 0301 	eor.w	r3, r3, #1
    8838:	b2db      	uxtb	r3, r3
    883a:	2b00      	cmp	r3, #0
    883c:	d006      	beq.n	884c <Can_43_FLEXCAN_Ipw_SetControlerErrorInit+0x34>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    883e:	9b01      	ldr	r3, [sp, #4]
    8840:	789b      	ldrb	r3, [r3, #2]
    8842:	2201      	movs	r2, #1
    8844:	2104      	movs	r1, #4
    8846:	4618      	mov	r0, r3
    8848:	f002 ff4e 	bl	b6e8 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    884c:	9b01      	ldr	r3, [sp, #4]
    884e:	789b      	ldrb	r3, [r3, #2]
    8850:	4618      	mov	r0, r3
    8852:	f002 feef 	bl	b634 <FlexCAN_Ip_EnableInterrupts_Privileged>
    }
    eRetVal = FlexCAN_Ip_SetStartMode(Can_pControllerConfig->Can_u8ControllerOffset);
    8856:	9b01      	ldr	r3, [sp, #4]
    8858:	789b      	ldrb	r3, [r3, #2]
    885a:	4618      	mov	r0, r3
    885c:	f002 fc48 	bl	b0f0 <FlexCAN_Ip_SetStartMode_Privileged>
    8860:	9003      	str	r0, [sp, #12]

    return (Std_ReturnType)eRetVal;
    8862:	9b03      	ldr	r3, [sp, #12]
    8864:	b2db      	uxtb	r3, r3
}
    8866:	4618      	mov	r0, r3
    8868:	b005      	add	sp, #20
    886a:	f85d fb04 	ldr.w	pc, [sp], #4
    886e:	bf00      	nop
    8870:	1fff8fb4 	.word	0x1fff8fb4

00008874 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode>:

/**
*   @brief      Set Controller to participate the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStartMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8874:	b500      	push	{lr}
    8876:	b087      	sub	sp, #28
    8878:	9001      	str	r0, [sp, #4]
#if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
    uint8 u8HwObjRefIdx = 0U;
    887a:	2300      	movs	r3, #0
    887c:	f88d 3017 	strb.w	r3, [sp, #23]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject = NULL_PTR;
    8880:	2300      	movs	r3, #0
    8882:	9303      	str	r3, [sp, #12]
        {
            Can_Ipw_u32CurrentCompareVal = Stm_Ip_GetCompareValue(CAN_43_FLEXCAN_TS_STM_INSTANCE, CAN_43_FLEXCAN_TS_STM_CHANNEL);
        }
    }
#endif
    eRetVal = FlexCAN_Ip_Init(Can_pControllerConfig->Can_u8ControllerOffset, \
    8884:	9b01      	ldr	r3, [sp, #4]
    8886:	7898      	ldrb	r0, [r3, #2]
    8888:	4930      	ldr	r1, [pc, #192]	; (894c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xd8>)
    888a:	9b01      	ldr	r3, [sp, #4]
    888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    888e:	681b      	ldr	r3, [r3, #0]
    8890:	461a      	mov	r2, r3
    8892:	f001 fbc9 	bl	a028 <FlexCAN_Ip_Init_Privileged>
    8896:	9004      	str	r0, [sp, #16]
                                                    Can_Ipw_apxStatus[Can_pControllerConfig->Can_u8ControllerID], \
                                                    Can_pControllerConfig->HwChannelIpConfig->pFlexcanIpHwConfig);

    if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    8898:	9b04      	ldr	r3, [sp, #16]
    889a:	2b00      	cmp	r3, #0
    889c:	d14f      	bne.n	893e <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xca>
    {
        /* disable all interrupts */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    889e:	9b01      	ldr	r3, [sp, #4]
    88a0:	789b      	ldrb	r3, [r3, #2]
    88a2:	4618      	mov	r0, r3
    88a4:	f002 fef4 	bl	b690 <FlexCAN_Ip_DisableInterrupts_Privileged>

        /* Re-Init baudrate */
        Can_Ipw_InitBaudrate(Can_pControllerConfig);
    88a8:	9801      	ldr	r0, [sp, #4]
    88aa:	f7ff fc25 	bl	80f8 <Can_Ipw_InitBaudrate>

        /* Re-Init all Rx Objects */
        Can_Ipw_InitRx(Can_pControllerConfig);
    88ae:	9801      	ldr	r0, [sp, #4]
    88b0:	f000 fa0e 	bl	8cd0 <Can_Ipw_InitRx>
            Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][MbIdx] = FALSE;
        }
    #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */

    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    88b4:	2300      	movs	r3, #0
    88b6:	f88d 3017 	strb.w	r3, [sp, #23]
    88ba:	e02f      	b.n	891c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0xa8>
        {
            Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    88bc:	9b01      	ldr	r3, [sp, #4]
    88be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    88c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    88c4:	009b      	lsls	r3, r3, #2
    88c6:	4413      	add	r3, r2
    88c8:	681b      	ldr	r3, [r3, #0]
    88ca:	9303      	str	r3, [sp, #12]

            if (FALSE == Can_pHwObject->Can_bHwObjectUsesPolling)
    88cc:	9b03      	ldr	r3, [sp, #12]
    88ce:	7b1b      	ldrb	r3, [r3, #12]
    88d0:	f083 0301 	eor.w	r3, r3, #1
    88d4:	b2db      	uxtb	r3, r3
    88d6:	2b00      	cmp	r3, #0
    88d8:	d018      	beq.n	890c <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x98>
            {
                switch (Can_pHwObject->Can_eReceiveType)
    88da:	9b03      	ldr	r3, [sp, #12]
    88dc:	699b      	ldr	r3, [r3, #24]
    88de:	2b00      	cmp	r3, #0
    88e0:	d003      	beq.n	88ea <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x76>
    88e2:	3b01      	subs	r3, #1
    88e4:	2b01      	cmp	r3, #1
    88e6:	d813      	bhi.n	8910 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9c>
    88e8:	e009      	b.n	88fe <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x8a>
                {
                    case CAN_RX_NORMAL:
                    {
                        (void)FlexCAN_Ip_Receive(Can_pControllerConfig->Can_u8ControllerOffset, \
    88ea:	9b01      	ldr	r3, [sp, #4]
    88ec:	7898      	ldrb	r0, [r3, #2]
    88ee:	9b03      	ldr	r3, [sp, #12]
    88f0:	7f19      	ldrb	r1, [r3, #28]
    88f2:	9b03      	ldr	r3, [sp, #12]
    88f4:	7b1b      	ldrb	r3, [r3, #12]
    88f6:	2200      	movs	r2, #0
    88f8:	f001 fca2 	bl	a240 <FlexCAN_Ip_Receive>
                                                 Can_pHwObject->Can_u8HwBufferIndex, \
                                                 NULL_PTR, \
                                                 Can_pHwObject->Can_bHwObjectUsesPolling \
                                                );
                        break;
    88fc:	e009      	b.n	8912 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, Can_pControllerConfig->pDmaDstAddr);
                        }
                        else
                    #endif
                        {
                            (void)FlexCAN_Ip_RxFifo(Can_pControllerConfig->Can_u8ControllerOffset, NULL_PTR);
    88fe:	9b01      	ldr	r3, [sp, #4]
    8900:	789b      	ldrb	r3, [r3, #2]
    8902:	2100      	movs	r1, #0
    8904:	4618      	mov	r0, r3
    8906:	f001 fd99 	bl	a43c <FlexCAN_Ip_RxFifo>
                        }
                        break;
    890a:	e002      	b.n	8912 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                    {
                        /* nothing to do(TX object) */
                        break;
                    }
                }
            }
    890c:	bf00      	nop
    890e:	e000      	b.n	8912 <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x9e>
                        break;
    8910:	bf00      	nop
        for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8912:	f89d 3017 	ldrb.w	r3, [sp, #23]
    8916:	3301      	adds	r3, #1
    8918:	f88d 3017 	strb.w	r3, [sp, #23]
    891c:	9b01      	ldr	r3, [sp, #4]
    891e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    8922:	f89d 2017 	ldrb.w	r2, [sp, #23]
    8926:	429a      	cmp	r2, r3
    8928:	d3c8      	bcc.n	88bc <Can_43_FLEXCAN_Ipw_SetControllerToStartMode+0x48>
        }
    #endif /* CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON */
        eRetVal = ((Std_ReturnType)E_OK == Can_43_FLEXCAN_Ipw_SetControlerErrorInit(Can_pControllerConfig)) ? (FLEXCAN_STATUS_SUCCESS) : (FLEXCAN_STATUS_ERROR);
    892a:	9801      	ldr	r0, [sp, #4]
    892c:	f7ff ff74 	bl	8818 <Can_43_FLEXCAN_Ipw_SetControlerErrorInit>
    8930:	4603      	mov	r3, r0
    8932:	2b00      	cmp	r3, #0
    8934:	bf14      	ite	ne
    8936:	2301      	movne	r3, #1
    8938:	2300      	moveq	r3, #0
    893a:	b2db      	uxtb	r3, r3
    893c:	9304      	str	r3, [sp, #16]
    }
    return (Std_ReturnType)eRetVal;
    893e:	9b04      	ldr	r3, [sp, #16]
    8940:	b2db      	uxtb	r3, r3
}
    8942:	4618      	mov	r0, r3
    8944:	b007      	add	sp, #28
    8946:	f85d fb04 	ldr.w	pc, [sp], #4
    894a:	bf00      	nop
    894c:	1fff8d10 	.word	0x1fff8d10

00008950 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode>:

/**
*   @brief      Set Controller to stop participating the CAN network
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_SetControllerToStopMode(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8950:	b500      	push	{lr}
    8952:	b085      	sub	sp, #20
    8954:	9001      	str	r0, [sp, #4]
    * that are not allowed in the new state. ⌋
    * [SWS_Can_00426] ⌈ Disabling of CAN interrupts shall not be executed, when CAN
    * interrupts have been disabled by function Can_DisableControllerInterrupts.⌋
    */
    Std_ReturnType eReturnValue;
    uint8 u8HwObjRefIdx = 0U;
    8956:	2300      	movs	r3, #0
    8958:	f88d 300e 	strb.w	r3, [sp, #14]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    uint8 u8Idx = 0U;
    895c:	2300      	movs	r3, #0
    895e:	f88d 300d 	strb.w	r3, [sp, #13]

    if (FLEXCAN_STATUS_SUCCESS == FlexCAN_Ip_EnterFreezeMode(Can_pControllerConfig->Can_u8ControllerOffset))
    8962:	9b01      	ldr	r3, [sp, #4]
    8964:	789b      	ldrb	r3, [r3, #2]
    8966:	4618      	mov	r0, r3
    8968:	f002 f98c 	bl	ac84 <FlexCAN_Ip_EnterFreezeMode_Privileged>
    896c:	4603      	mov	r3, r0
    896e:	2b00      	cmp	r3, #0
    8970:	d160      	bne.n	8a34 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xe4>
    {
    #if (CAN_43_FLEXCAN_PUBLIC_ICOM_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_ConfigPN(Can_pControllerConfig->Can_u8ControllerOffset, FALSE, NULL_PTR);
    #endif

    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    8972:	9b01      	ldr	r3, [sp, #4]
    8974:	785b      	ldrb	r3, [r3, #1]
    8976:	461a      	mov	r2, r3
    8978:	4b33      	ldr	r3, [pc, #204]	; (8a48 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xf8>)
    897a:	5c9b      	ldrb	r3, [r3, r2]
    897c:	2b00      	cmp	r3, #0
    897e:	d012      	beq.n	89a6 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
    {
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8980:	9b01      	ldr	r3, [sp, #4]
    8982:	789b      	ldrb	r3, [r3, #2]
    8984:	4618      	mov	r0, r3
    8986:	f002 fe83 	bl	b690 <FlexCAN_Ip_DisableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    898a:	9b01      	ldr	r3, [sp, #4]
    898c:	7a5b      	ldrb	r3, [r3, #9]
    898e:	f083 0301 	eor.w	r3, r3, #1
    8992:	b2db      	uxtb	r3, r3
    8994:	2b00      	cmp	r3, #0
    8996:	d006      	beq.n	89a6 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x56>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    8998:	9b01      	ldr	r3, [sp, #4]
    899a:	789b      	ldrb	r3, [r3, #2]
    899c:	2200      	movs	r2, #0
    899e:	2104      	movs	r1, #4
    89a0:	4618      	mov	r0, r3
    89a2:	f002 fea1 	bl	b6e8 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    89a6:	2300      	movs	r3, #0
    89a8:	f88d 300e 	strb.w	r3, [sp, #14]
    89ac:	e032      	b.n	8a14 <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xc4>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pControllerConfig->Can_ppHwObject[u8HwObjRefIdx];
    89ae:	9b01      	ldr	r3, [sp, #4]
    89b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    89b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    89b6:	009b      	lsls	r3, r3, #2
    89b8:	4413      	add	r3, r2
    89ba:	681b      	ldr	r3, [r3, #0]
    89bc:	9302      	str	r3, [sp, #8]

        if (CAN_TX_NORMAL == Can_pHwObject->Can_eReceiveType)
    89be:	9b02      	ldr	r3, [sp, #8]
    89c0:	699b      	ldr	r3, [r3, #24]
    89c2:	2b03      	cmp	r3, #3
    89c4:	d119      	bne.n	89fa <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xaa>
        {
            u8Idx = 0U;
    89c6:	2300      	movs	r3, #0
    89c8:	f88d 300d 	strb.w	r3, [sp, #13]
            do
            {
                (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex + u8Idx);
    89cc:	9b01      	ldr	r3, [sp, #4]
    89ce:	7898      	ldrb	r0, [r3, #2]
    89d0:	9b02      	ldr	r3, [sp, #8]
    89d2:	7f1a      	ldrb	r2, [r3, #28]
    89d4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    89d8:	4413      	add	r3, r2
    89da:	b2db      	uxtb	r3, r3
    89dc:	4619      	mov	r1, r3
    89de:	f002 ff09 	bl	b7f4 <FlexCAN_Ip_AbortTransfer>
                u8Idx++;
    89e2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    89e6:	3301      	adds	r3, #1
    89e8:	f88d 300d 	strb.w	r3, [sp, #13]
            }while (u8Idx < Can_pHwObject->Can_u8ObjectCount);
    89ec:	9b02      	ldr	r3, [sp, #8]
    89ee:	7b9b      	ldrb	r3, [r3, #14]
    89f0:	f89d 200d 	ldrb.w	r2, [sp, #13]
    89f4:	429a      	cmp	r2, r3
    89f6:	d3e9      	bcc.n	89cc <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x7c>
    89f8:	e007      	b.n	8a0a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xba>
        }
        else
        {
            (void)FlexCAN_Ip_AbortTransfer(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex);
    89fa:	9b01      	ldr	r3, [sp, #4]
    89fc:	789a      	ldrb	r2, [r3, #2]
    89fe:	9b02      	ldr	r3, [sp, #8]
    8a00:	7f1b      	ldrb	r3, [r3, #28]
    8a02:	4619      	mov	r1, r3
    8a04:	4610      	mov	r0, r2
    8a06:	f002 fef5 	bl	b7f4 <FlexCAN_Ip_AbortTransfer>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pControllerConfig->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8a0a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    8a0e:	3301      	adds	r3, #1
    8a10:	f88d 300e 	strb.w	r3, [sp, #14]
    8a14:	9b01      	ldr	r3, [sp, #4]
    8a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    8a1a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    8a1e:	429a      	cmp	r2, r3
    8a20:	d3c5      	bcc.n	89ae <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0x5e>
        }
    }
    eReturnValue = (Std_ReturnType)FlexCAN_Ip_SetStopMode(Can_pControllerConfig->Can_u8ControllerOffset);
    8a22:	9b01      	ldr	r3, [sp, #4]
    8a24:	789b      	ldrb	r3, [r3, #2]
    8a26:	4618      	mov	r0, r3
    8a28:	f002 fb82 	bl	b130 <FlexCAN_Ip_SetStopMode_Privileged>
    8a2c:	4603      	mov	r3, r0
    8a2e:	f88d 300f 	strb.w	r3, [sp, #15]
    8a32:	e002      	b.n	8a3a <Can_43_FLEXCAN_Ipw_SetControllerToStopMode+0xea>
    }
    else
    {
        eReturnValue = E_NOT_OK;
    8a34:	2301      	movs	r3, #1
    8a36:	f88d 300f 	strb.w	r3, [sp, #15]
    }

    return eReturnValue;
    8a3a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    8a3e:	4618      	mov	r0, r3
    8a40:	b005      	add	sp, #20
    8a42:	f85d fb04 	ldr.w	pc, [sp], #4
    8a46:	bf00      	nop
    8a48:	1fff8fb4 	.word	0x1fff8fb4

00008a4c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts>:
/**
*   @brief      Disable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_DisableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8a4c:	b500      	push	{lr}
    8a4e:	b083      	sub	sp, #12
    8a50:	9001      	str	r0, [sp, #4]
    if (TRUE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    8a52:	9b01      	ldr	r3, [sp, #4]
    8a54:	785b      	ldrb	r3, [r3, #1]
    8a56:	461a      	mov	r2, r3
    8a58:	4b10      	ldr	r3, [pc, #64]	; (8a9c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    8a5a:	5c9b      	ldrb	r3, [r3, r2]
    8a5c:	2b00      	cmp	r3, #0
    8a5e:	d018      	beq.n	8a92 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_DisableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8a60:	9b01      	ldr	r3, [sp, #4]
    8a62:	789b      	ldrb	r3, [r3, #2]
    8a64:	4618      	mov	r0, r3
    8a66:	f002 fe13 	bl	b690 <FlexCAN_Ip_DisableInterrupts_Privileged>
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = FALSE;
    8a6a:	9b01      	ldr	r3, [sp, #4]
    8a6c:	785b      	ldrb	r3, [r3, #1]
    8a6e:	461a      	mov	r2, r3
    8a70:	4b0a      	ldr	r3, [pc, #40]	; (8a9c <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x50>)
    8a72:	2100      	movs	r1, #0
    8a74:	5499      	strb	r1, [r3, r2]
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, FALSE);
#endif  /*  ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    8a76:	9b01      	ldr	r3, [sp, #4]
    8a78:	7a5b      	ldrb	r3, [r3, #9]
    8a7a:	f083 0301 	eor.w	r3, r3, #1
    8a7e:	b2db      	uxtb	r3, r3
    8a80:	2b00      	cmp	r3, #0
    8a82:	d006      	beq.n	8a92 <Can_43_FLEXCAN_Ipw_DisableControllerInterrupts+0x46>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, FALSE);
    8a84:	9b01      	ldr	r3, [sp, #4]
    8a86:	789b      	ldrb	r3, [r3, #2]
    8a88:	2200      	movs	r2, #0
    8a8a:	2104      	movs	r1, #4
    8a8c:	4618      	mov	r0, r3
    8a8e:	f002 fe2b 	bl	b6e8 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif /* BUSOFF_INTERRUPT_SUPPORT */
    }
}
    8a92:	bf00      	nop
    8a94:	b003      	add	sp, #12
    8a96:	f85d fb04 	ldr.w	pc, [sp], #4
    8a9a:	bf00      	nop
    8a9c:	1fff8fb4 	.word	0x1fff8fb4

00008aa0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts>:

/**
*   @brief      Enable Can Controller Interrupts
*/
void Can_43_FLEXCAN_Ipw_EnableControllerInterrupts(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
    8aa0:	b500      	push	{lr}
    8aa2:	b083      	sub	sp, #12
    8aa4:	9001      	str	r0, [sp, #4]
    /*
    * [SWS_Can_00208] ⌈ The function Can_EnableControllerInterrupts shall perform no
    * action when Can_DisableControllerInterrupts has not been called before.⌋
    */
    if (FALSE == Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID])
    8aa6:	9b01      	ldr	r3, [sp, #4]
    8aa8:	785b      	ldrb	r3, [r3, #1]
    8aaa:	461a      	mov	r2, r3
    8aac:	4b11      	ldr	r3, [pc, #68]	; (8af4 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    8aae:	5c9b      	ldrb	r3, [r3, r2]
    8ab0:	f083 0301 	eor.w	r3, r3, #1
    8ab4:	b2db      	uxtb	r3, r3
    8ab6:	2b00      	cmp	r3, #0
    8ab8:	d018      	beq.n	8aec <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x4c>
    {
        /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
        (void)FlexCAN_Ip_EnableInterrupts(Can_pControllerConfig->Can_u8ControllerOffset);
    8aba:	9b01      	ldr	r3, [sp, #4]
    8abc:	789b      	ldrb	r3, [r3, #2]
    8abe:	4618      	mov	r0, r3
    8ac0:	f002 fdb8 	bl	b634 <FlexCAN_Ip_EnableInterrupts_Privileged>
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON)
        (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_ERR, TRUE);
#endif /* ERROR_INTERRUPT_SUPPORT */
#if (CAN_43_FLEXCAN_BUSOFF_INTERRUPT_SUPPORT == STD_ON)
        if (FALSE == Can_pControllerConfig->Can_bBusOffUsesPolling)
    8ac4:	9b01      	ldr	r3, [sp, #4]
    8ac6:	7a5b      	ldrb	r3, [r3, #9]
    8ac8:	f083 0301 	eor.w	r3, r3, #1
    8acc:	b2db      	uxtb	r3, r3
    8ace:	2b00      	cmp	r3, #0
    8ad0:	d006      	beq.n	8ae0 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x40>
        {
            (void)FlexCAN_Ip_SetErrorInt(Can_pControllerConfig->Can_u8ControllerOffset, FLEXCAN_IP_INT_BUSOFF, TRUE);
    8ad2:	9b01      	ldr	r3, [sp, #4]
    8ad4:	789b      	ldrb	r3, [r3, #2]
    8ad6:	2201      	movs	r2, #1
    8ad8:	2104      	movs	r1, #4
    8ada:	4618      	mov	r0, r3
    8adc:	f002 fe04 	bl	b6e8 <FlexCAN_Ip_SetErrorInt_Privileged>
        }
#endif  /* BUSOFF_INTERRUPT_SUPPORT */
        /* update status */
        Can_Ipw_abIsInterruptEnabled[Can_pControllerConfig->Can_u8ControllerID] = TRUE;
    8ae0:	9b01      	ldr	r3, [sp, #4]
    8ae2:	785b      	ldrb	r3, [r3, #1]
    8ae4:	461a      	mov	r2, r3
    8ae6:	4b03      	ldr	r3, [pc, #12]	; (8af4 <Can_43_FLEXCAN_Ipw_EnableControllerInterrupts+0x54>)
    8ae8:	2101      	movs	r1, #1
    8aea:	5499      	strb	r1, [r3, r2]
    }
}
    8aec:	bf00      	nop
    8aee:	b003      	add	sp, #12
    8af0:	f85d fb04 	ldr.w	pc, [sp], #4
    8af4:	1fff8fb4 	.word	0x1fff8fb4

00008af8 <Can_43_FLEXCAN_Ipw_GetControllerErrorState>:

/**
*   @brief      Get Controller Error State
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerErrorState(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    8af8:	b500      	push	{lr}
    8afa:	b085      	sub	sp, #20
    8afc:	9001      	str	r0, [sp, #4]
    8afe:	9100      	str	r1, [sp, #0]
    uint32 Error = 0U;
    8b00:	2300      	movs	r3, #0
    8b02:	9303      	str	r3, [sp, #12]

    Error = FlexCAN_Ip_GetErrorStatus(Can_pControllerConfig->Can_u8ControllerOffset);
    8b04:	9b01      	ldr	r3, [sp, #4]
    8b06:	789b      	ldrb	r3, [r3, #2]
    8b08:	4618      	mov	r0, r3
    8b0a:	f001 fe87 	bl	a81c <FlexCAN_Ip_GetErrorStatus>
    8b0e:	9003      	str	r0, [sp, #12]

    *pValue = (uint8)((Error & FLEXCAN_ESR1_FLTCONF_MASK)>>FLEXCAN_ESR1_FLTCONF_SHIFT);
    8b10:	9b03      	ldr	r3, [sp, #12]
    8b12:	091b      	lsrs	r3, r3, #4
    8b14:	b2db      	uxtb	r3, r3
    8b16:	f003 0303 	and.w	r3, r3, #3
    8b1a:	b2da      	uxtb	r2, r3
    8b1c:	9b00      	ldr	r3, [sp, #0]
    8b1e:	701a      	strb	r2, [r3, #0]
    return E_OK;
    8b20:	2300      	movs	r3, #0
}
    8b22:	4618      	mov	r0, r3
    8b24:	b005      	add	sp, #20
    8b26:	f85d fb04 	ldr.w	pc, [sp], #4

00008b2a <Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter>:

/**
*   @brief      Get Controller Tx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    8b2a:	b500      	push	{lr}
    8b2c:	b083      	sub	sp, #12
    8b2e:	9001      	str	r0, [sp, #4]
    8b30:	9100      	str	r1, [sp, #0]
     *pValue = FlexCAN_Ip_GetControllerTxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    8b32:	9b01      	ldr	r3, [sp, #4]
    8b34:	789b      	ldrb	r3, [r3, #2]
    8b36:	4618      	mov	r0, r3
    8b38:	f001 fe82 	bl	a840 <FlexCAN_Ip_GetControllerTxErrorCounter>
    8b3c:	4603      	mov	r3, r0
    8b3e:	461a      	mov	r2, r3
    8b40:	9b00      	ldr	r3, [sp, #0]
    8b42:	701a      	strb	r2, [r3, #0]
     return E_OK;
    8b44:	2300      	movs	r3, #0
}
    8b46:	4618      	mov	r0, r3
    8b48:	b003      	add	sp, #12
    8b4a:	f85d fb04 	ldr.w	pc, [sp], #4

00008b4e <Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter>:

/**
*   @brief      Get Controller Rx Error Counter
*/
Std_ReturnType Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter(const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
    8b4e:	b500      	push	{lr}
    8b50:	b083      	sub	sp, #12
    8b52:	9001      	str	r0, [sp, #4]
    8b54:	9100      	str	r1, [sp, #0]

    *pValue = FlexCAN_Ip_GetControllerRxErrorCounter(Can_pControllerConfig->Can_u8ControllerOffset);
    8b56:	9b01      	ldr	r3, [sp, #4]
    8b58:	789b      	ldrb	r3, [r3, #2]
    8b5a:	4618      	mov	r0, r3
    8b5c:	f001 fe82 	bl	a864 <FlexCAN_Ip_GetControllerRxErrorCounter>
    8b60:	4603      	mov	r3, r0
    8b62:	461a      	mov	r2, r3
    8b64:	9b00      	ldr	r3, [sp, #0]
    8b66:	701a      	strb	r2, [r3, #0]
    return E_OK;
    8b68:	2300      	movs	r3, #0
}
    8b6a:	4618      	mov	r0, r3
    8b6c:	b003      	add	sp, #12
    8b6e:	f85d fb04 	ldr.w	pc, [sp], #4

00008b72 <Can_43_FLEXCAN_Ipw_Write>:
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig,
    const Can_PduType * PduInfo
)
{
    8b72:	b510      	push	{r4, lr}
    8b74:	b08c      	sub	sp, #48	; 0x30
    8b76:	9005      	str	r0, [sp, #20]
    8b78:	9104      	str	r1, [sp, #16]
    8b7a:	9203      	str	r2, [sp, #12]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    8b7c:	2301      	movs	r3, #1
    8b7e:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_DataInfoType DataInfo;
    uint8 u8ObjIdx = 0U;
    8b80:	2300      	movs	r3, #0
    8b82:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
#if (CAN_43_FLEXCAN_TRIGGER_TRANSMIT_USED == STD_ON)
    PduInfoType CanIf_PduInfo;
    uint8 Data[64U];
#endif

    DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    8b86:	2300      	movs	r3, #0
    8b88:	9306      	str	r3, [sp, #24]
    DataInfo.data_length = 0U;
    8b8a:	2300      	movs	r3, #0
    8b8c:	9307      	str	r3, [sp, #28]
    DataInfo.fd_padding = 0U;
    8b8e:	2300      	movs	r3, #0
    8b90:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    DataInfo.fd_enable = FALSE;
    8b94:	2300      	movs	r3, #0
    8b96:	f88d 3020 	strb.w	r3, [sp, #32]
    DataInfo.enable_brs = FALSE;
    8b9a:	2300      	movs	r3, #0
    8b9c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    DataInfo.is_remote = FALSE;
    8ba0:	2300      	movs	r3, #0
    8ba2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    DataInfo.is_polling = FALSE;
    8ba6:	2300      	movs	r3, #0
    8ba8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (CAN_TX_NORMAL == Can_pHwObjectConfig->Can_eReceiveType)
    8bac:	9b04      	ldr	r3, [sp, #16]
    8bae:	699b      	ldr	r3, [r3, #24]
    8bb0:	2b03      	cmp	r3, #3
    8bb2:	d177      	bne.n	8ca4 <Can_43_FLEXCAN_Ipw_Write+0x132>
    {
        DataInfo.msg_id_type = ((PduInfo->id & CAN_43_FLEXCAN_EXTENDED_ID_U32) != 0U) ? FLEXCAN_MSG_ID_EXT : FLEXCAN_MSG_ID_STD;
    8bb4:	9b03      	ldr	r3, [sp, #12]
    8bb6:	681b      	ldr	r3, [r3, #0]
    8bb8:	0fdb      	lsrs	r3, r3, #31
    8bba:	9306      	str	r3, [sp, #24]
        if (Can_pHwObjectConfig->Can_u8PayloadLength <=  PduInfo->length)
    8bbc:	9b04      	ldr	r3, [sp, #16]
    8bbe:	7c1a      	ldrb	r2, [r3, #16]
    8bc0:	9b03      	ldr	r3, [sp, #12]
    8bc2:	799b      	ldrb	r3, [r3, #6]
    8bc4:	429a      	cmp	r2, r3
    8bc6:	d803      	bhi.n	8bd0 <Can_43_FLEXCAN_Ipw_Write+0x5e>
        {
            DataInfo.data_length = Can_pHwObjectConfig->Can_u8PayloadLength;
    8bc8:	9b04      	ldr	r3, [sp, #16]
    8bca:	7c1b      	ldrb	r3, [r3, #16]
    8bcc:	9307      	str	r3, [sp, #28]
    8bce:	e002      	b.n	8bd6 <Can_43_FLEXCAN_Ipw_Write+0x64>
        }
        else
        {
            DataInfo.data_length = PduInfo->length;
    8bd0:	9b03      	ldr	r3, [sp, #12]
    8bd2:	799b      	ldrb	r3, [r3, #6]
    8bd4:	9307      	str	r3, [sp, #28]
        }
#if (CAN_43_FLEXCAN_FEATURE_HAS_FD == STD_ON)
        DataInfo.fd_padding = Can_pHwObjectConfig->Can_u8PaddingValue;
    8bd6:	9b04      	ldr	r3, [sp, #16]
    8bd8:	7c5b      	ldrb	r3, [r3, #17]
    8bda:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        DataInfo.fd_enable = ((PduInfo->id & CAN_43_FLEXCAN_FD_FRAME_U32) != 0U) ? TRUE : FALSE;
    8bde:	9b03      	ldr	r3, [sp, #12]
    8be0:	681b      	ldr	r3, [r3, #0]
    8be2:	0f9b      	lsrs	r3, r3, #30
    8be4:	f003 0301 	and.w	r3, r3, #1
    8be8:	2b00      	cmp	r3, #0
    8bea:	bf14      	ite	ne
    8bec:	2301      	movne	r3, #1
    8bee:	2300      	moveq	r3, #0
    8bf0:	b2db      	uxtb	r3, r3
    8bf2:	f88d 3020 	strb.w	r3, [sp, #32]
    #if (CAN_43_FLEXCAN_SET_BAUDRATE_API == STD_ON)
            DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_au16ControllerBaudRateSel[Can_pControllerConfig->Can_u8ControllerID]].Can_bBitRateSwitch;
    8bf6:	9b05      	ldr	r3, [sp, #20]
    8bf8:	6a1a      	ldr	r2, [r3, #32]
    8bfa:	9b05      	ldr	r3, [sp, #20]
    8bfc:	785b      	ldrb	r3, [r3, #1]
    8bfe:	4619      	mov	r1, r3
    8c00:	4b31      	ldr	r3, [pc, #196]	; (8cc8 <Can_43_FLEXCAN_Ipw_Write+0x156>)
    8c02:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    8c06:	4619      	mov	r1, r3
    8c08:	2316      	movs	r3, #22
    8c0a:	fb01 f303 	mul.w	r3, r1, r3
    8c0e:	4413      	add	r3, r2
    8c10:	781b      	ldrb	r3, [r3, #0]
    8c12:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    #else
        DataInfo.enable_brs = Can_pControllerConfig->Can_pBaudrateConfig[Can_pControllerConfig->Can_u16DefaultBaudrateID].Can_bBitRateSwitch;
    #endif
#endif
        DataInfo.is_remote = FALSE;
    8c16:	2300      	movs	r3, #0
    8c18:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        DataInfo.is_polling = Can_pHwObjectConfig->Can_bHwObjectUsesPolling;
    8c1c:	9b04      	ldr	r3, [sp, #16]
    8c1e:	7b1b      	ldrb	r3, [r3, #12]
    8c20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        do
        {
            eRetVal = FlexCAN_Ip_GetTransferStatus(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx);
    8c24:	9b05      	ldr	r3, [sp, #20]
    8c26:	7898      	ldrb	r0, [r3, #2]
    8c28:	9b04      	ldr	r3, [sp, #16]
    8c2a:	7f1a      	ldrb	r2, [r3, #28]
    8c2c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8c30:	4413      	add	r3, r2
    8c32:	b2db      	uxtb	r3, r3
    8c34:	4619      	mov	r1, r3
    8c36:	f001 fcdf 	bl	a5f8 <FlexCAN_Ip_GetTransferStatus>
    8c3a:	900b      	str	r0, [sp, #44]	; 0x2c
            if (FLEXCAN_STATUS_SUCCESS == eRetVal)
    8c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8c3e:	2b00      	cmp	r3, #0
    8c40:	d122      	bne.n	8c88 <Can_43_FLEXCAN_Ipw_Write+0x116>
            {
                #if ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))
                Can_Ipw_au16TxPduId[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = PduInfo->swPduHandle;
    8c42:	9b05      	ldr	r3, [sp, #20]
    8c44:	785b      	ldrb	r3, [r3, #1]
    8c46:	461c      	mov	r4, r3
    8c48:	9b04      	ldr	r3, [sp, #16]
    8c4a:	7f1b      	ldrb	r3, [r3, #28]
    8c4c:	461a      	mov	r2, r3
    8c4e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8c52:	4413      	add	r3, r2
    8c54:	9a03      	ldr	r2, [sp, #12]
    8c56:	8890      	ldrh	r0, [r2, #4]
    8c58:	491c      	ldr	r1, [pc, #112]	; (8ccc <Can_43_FLEXCAN_Ipw_Write+0x15a>)
    8c5a:	0162      	lsls	r2, r4, #5
    8c5c:	4413      	add	r3, r2
    8c5e:	4602      	mov	r2, r0
    8c60:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    }
                }
                else
                {
            #endif
                    eRetVal = FlexCAN_Ip_Send(Can_pControllerConfig->Can_u8ControllerOffset, Can_pHwObjectConfig->Can_u8HwBufferIndex + u8ObjIdx, &DataInfo, PduInfo->id, PduInfo->sdu);
    8c64:	9b05      	ldr	r3, [sp, #20]
    8c66:	7898      	ldrb	r0, [r3, #2]
    8c68:	9b04      	ldr	r3, [sp, #16]
    8c6a:	7f1a      	ldrb	r2, [r3, #28]
    8c6c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8c70:	4413      	add	r3, r2
    8c72:	b2d9      	uxtb	r1, r3
    8c74:	9b03      	ldr	r3, [sp, #12]
    8c76:	681c      	ldr	r4, [r3, #0]
    8c78:	9b03      	ldr	r3, [sp, #12]
    8c7a:	689b      	ldr	r3, [r3, #8]
    8c7c:	aa06      	add	r2, sp, #24
    8c7e:	9300      	str	r3, [sp, #0]
    8c80:	4623      	mov	r3, r4
    8c82:	f001 fa4d 	bl	a120 <FlexCAN_Ip_Send>
    8c86:	900b      	str	r0, [sp, #44]	; 0x2c
                /* Revert to FALSE due to the MB was not transmitted successfully */
                Can_Ipw_abIsTxPduReady[Can_pControllerConfig->Can_u8ControllerID][Can_pHwObjectConfig->Can_u8HwBufferIndex+u8ObjIdx] = FALSE;
            }
            #endif /* ((CAN_43_FLEXCAN_TIMESTAMP_ENABLE == STD_ON) && ((CAN_43_FLEXCAN_TX_POLLING_SUPPORT == STD_ON) || (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON))) */
            }
            u8ObjIdx++;
    8c88:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    8c8c:	3301      	adds	r3, #1
    8c8e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        } while ((u8ObjIdx < Can_pHwObjectConfig->Can_u8ObjectCount) && (FLEXCAN_STATUS_BUSY == eRetVal));
    8c92:	9b04      	ldr	r3, [sp, #16]
    8c94:	7b9b      	ldrb	r3, [r3, #14]
    8c96:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
    8c9a:	429a      	cmp	r2, r3
    8c9c:	d202      	bcs.n	8ca4 <Can_43_FLEXCAN_Ipw_Write+0x132>
    8c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8ca0:	2b02      	cmp	r3, #2
    8ca2:	d0bf      	beq.n	8c24 <Can_43_FLEXCAN_Ipw_Write+0xb2>
    }

    if ((FLEXCAN_STATUS_SUCCESS != eRetVal) && (FLEXCAN_STATUS_BUSY != eRetVal))
    8ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8ca6:	2b00      	cmp	r3, #0
    8ca8:	d004      	beq.n	8cb4 <Can_43_FLEXCAN_Ipw_Write+0x142>
    8caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8cac:	2b02      	cmp	r3, #2
    8cae:	d001      	beq.n	8cb4 <Can_43_FLEXCAN_Ipw_Write+0x142>
    {
        eRetVal = FLEXCAN_STATUS_ERROR;
    8cb0:	2301      	movs	r3, #1
    8cb2:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    return ((FLEXCAN_STATUS_BUSY == eRetVal) ? ((Std_ReturnType)CAN_BUSY) : ((Std_ReturnType)eRetVal));
    8cb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8cb6:	2b02      	cmp	r3, #2
    8cb8:	d002      	beq.n	8cc0 <Can_43_FLEXCAN_Ipw_Write+0x14e>
    8cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8cbc:	b2db      	uxtb	r3, r3
    8cbe:	e000      	b.n	8cc2 <Can_43_FLEXCAN_Ipw_Write+0x150>
    8cc0:	2302      	movs	r3, #2
}
    8cc2:	4618      	mov	r0, r3
    8cc4:	b00c      	add	sp, #48	; 0x30
    8cc6:	bd10      	pop	{r4, pc}
    8cc8:	1fff8fb0 	.word	0x1fff8fb0
    8ccc:	1fff8f30 	.word	0x1fff8f30

00008cd0 <Can_Ipw_InitRx>:

static void Can_Ipw_InitRx(const Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
    8cd0:	b500      	push	{lr}
    8cd2:	b089      	sub	sp, #36	; 0x24
    8cd4:	9001      	str	r0, [sp, #4]
    uint8 u8HwObjRefIdx = 0U;
    8cd6:	2300      	movs	r3, #0
    8cd8:	f88d 301f 	strb.w	r3, [sp, #31]
    const Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
    Flexcan_Ip_DataInfoType DataInfo;

    /* This function just is called only if controller is in freeze mode */
    /* Always enable individual mask , Already in freeze mode */
    (void)FlexCAN_Ip_SetRxMaskType(Can_pController->Can_u8ControllerOffset, FLEXCAN_RX_MASK_INDIVIDUAL);
    8cdc:	9b01      	ldr	r3, [sp, #4]
    8cde:	789b      	ldrb	r3, [r3, #2]
    8ce0:	2101      	movs	r1, #1
    8ce2:	4618      	mov	r0, r3
    8ce4:	f002 fa42 	bl	b16c <FlexCAN_Ip_SetRxMaskType_Privileged>

    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8ce8:	2300      	movs	r3, #0
    8cea:	f88d 301f 	strb.w	r3, [sp, #31]
    8cee:	e03a      	b.n	8d66 <Can_Ipw_InitRx+0x96>
    {
        Can_pHwObject = (const Can_43_FLEXCAN_HwObjectConfigType *)Can_pController->Can_ppHwObject[u8HwObjRefIdx];
    8cf0:	9b01      	ldr	r3, [sp, #4]
    8cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8cf4:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8cf8:	009b      	lsls	r3, r3, #2
    8cfa:	4413      	add	r3, r2
    8cfc:	681b      	ldr	r3, [r3, #0]
    8cfe:	9306      	str	r3, [sp, #24]

        if (CAN_RX_NORMAL == Can_pHwObject->Can_eReceiveType)
    8d00:	9b06      	ldr	r3, [sp, #24]
    8d02:	699b      	ldr	r3, [r3, #24]
    8d04:	2b00      	cmp	r3, #0
    8d06:	d121      	bne.n	8d4c <Can_Ipw_InitRx+0x7c>
        {
            DataInfo.fd_enable = FALSE;
    8d08:	2300      	movs	r3, #0
    8d0a:	f88d 3010 	strb.w	r3, [sp, #16]
            DataInfo.data_length = 0U;
    8d0e:	2300      	movs	r3, #0
    8d10:	9303      	str	r3, [sp, #12]
            if (Can_pHwObject->Can_IdMessage != CAN_STANDARD)
    8d12:	9b06      	ldr	r3, [sp, #24]
    8d14:	689b      	ldr	r3, [r3, #8]
    8d16:	2b00      	cmp	r3, #0
    8d18:	d002      	beq.n	8d20 <Can_Ipw_InitRx+0x50>
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_EXT;
    8d1a:	2301      	movs	r3, #1
    8d1c:	9302      	str	r3, [sp, #8]
    8d1e:	e001      	b.n	8d24 <Can_Ipw_InitRx+0x54>
            }
            else
            {
                DataInfo.msg_id_type = FLEXCAN_MSG_ID_STD;
    8d20:	2300      	movs	r3, #0
    8d22:	9302      	str	r3, [sp, #8]
            }
            (void)FlexCAN_Ip_ConfigRxMb(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, &DataInfo, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterCode);
    8d24:	9b01      	ldr	r3, [sp, #4]
    8d26:	7898      	ldrb	r0, [r3, #2]
    8d28:	9b06      	ldr	r3, [sp, #24]
    8d2a:	7f19      	ldrb	r1, [r3, #28]
    8d2c:	9b06      	ldr	r3, [sp, #24]
    8d2e:	695b      	ldr	r3, [r3, #20]
    8d30:	681b      	ldr	r3, [r3, #0]
    8d32:	aa02      	add	r2, sp, #8
    8d34:	f001 fa40 	bl	a1b8 <FlexCAN_Ip_ConfigRxMb>
            /* Already in freeze mode */
            (void)FlexCAN_Ip_SetRxIndividualMask(Can_pController->Can_u8ControllerOffset, Can_pHwObject->Can_u8HwBufferIndex, Can_pHwObject->Can_pHwFilterConfig->Can_u32HwFilterMask);
    8d38:	9b01      	ldr	r3, [sp, #4]
    8d3a:	7898      	ldrb	r0, [r3, #2]
    8d3c:	9b06      	ldr	r3, [sp, #24]
    8d3e:	7f19      	ldrb	r1, [r3, #28]
    8d40:	9b06      	ldr	r3, [sp, #24]
    8d42:	695b      	ldr	r3, [r3, #20]
    8d44:	685b      	ldr	r3, [r3, #4]
    8d46:	461a      	mov	r2, r3
    8d48:	f001 ffc8 	bl	acdc <FlexCAN_Ip_SetRxIndividualMask_Privileged>
        }

        if (CAN_RX_LEGACY_FIFO == Can_pHwObject->Can_eReceiveType)
    8d4c:	9b06      	ldr	r3, [sp, #24]
    8d4e:	699b      	ldr	r3, [r3, #24]
    8d50:	2b01      	cmp	r3, #1
    8d52:	d103      	bne.n	8d5c <Can_Ipw_InitRx+0x8c>
        {
            Can_Ipw_InitLegacyFifoFilter(Can_pController, Can_pHwObject);
    8d54:	9906      	ldr	r1, [sp, #24]
    8d56:	9801      	ldr	r0, [sp, #4]
    8d58:	f7fe ffab 	bl	7cb2 <Can_Ipw_InitLegacyFifoFilter>
    for (u8HwObjRefIdx = 0U; u8HwObjRefIdx < Can_pController->Can_u8HwObjectRefCount; u8HwObjRefIdx++)
    8d5c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    8d60:	3301      	adds	r3, #1
    8d62:	f88d 301f 	strb.w	r3, [sp, #31]
    8d66:	9b01      	ldr	r3, [sp, #4]
    8d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    8d6c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    8d70:	429a      	cmp	r2, r3
    8d72:	d3bd      	bcc.n	8cf0 <Can_Ipw_InitRx+0x20>
        }
    }
}
    8d74:	bf00      	nop
    8d76:	bf00      	nop
    8d78:	b009      	add	sp, #36	; 0x24
    8d7a:	f85d fb04 	ldr.w	pc, [sp], #4

00008d7e <Can_43_FLEXCAN_Ipw_MainFunction_Mode>:
void Can_43_FLEXCAN_Ipw_MainFunction_Mode
(
    const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
    Can_ControllerStateType * Can_pControllerState
)
{
    8d7e:	b500      	push	{lr}
    8d80:	b083      	sub	sp, #12
    8d82:	9001      	str	r0, [sp, #4]
    8d84:	9100      	str	r1, [sp, #0]
    /* @violates @ref Can_43_FLEXCAN_Ipw_c_REF_3 MISRA 2012 Advisory Rule 12.3 */
    if (CAN_CS_STARTED == *Can_pControllerState)
    8d86:	9b00      	ldr	r3, [sp, #0]
    8d88:	681b      	ldr	r3, [r3, #0]
    8d8a:	2b01      	cmp	r3, #1
    8d8c:	d114      	bne.n	8db8 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x3a>
    {
        if (FALSE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    8d8e:	9b01      	ldr	r3, [sp, #4]
    8d90:	789b      	ldrb	r3, [r3, #2]
    8d92:	4618      	mov	r0, r3
    8d94:	f002 f994 	bl	b0c0 <FlexCAN_Ip_GetStartMode_Privileged>
    8d98:	4603      	mov	r3, r0
    8d9a:	f083 0301 	eor.w	r3, r3, #1
    8d9e:	b2db      	uxtb	r3, r3
    8da0:	2b00      	cmp	r3, #0
    8da2:	d01e      	beq.n	8de2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        {
            *Can_pControllerState = CAN_CS_STOPPED;
    8da4:	9b00      	ldr	r3, [sp, #0]
    8da6:	2202      	movs	r2, #2
    8da8:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STOPPED);
    8daa:	9b01      	ldr	r3, [sp, #4]
    8dac:	781b      	ldrb	r3, [r3, #0]
    8dae:	2102      	movs	r1, #2
    8db0:	4618      	mov	r0, r3
    8db2:	f7f7 fdaa 	bl	90a <CanIf_ControllerModeIndication>
    }
    else
    {
        /* nothing to do */
    }
}
    8db6:	e014      	b.n	8de2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
    else if (CAN_CS_STOPPED == *Can_pControllerState)
    8db8:	9b00      	ldr	r3, [sp, #0]
    8dba:	681b      	ldr	r3, [r3, #0]
    8dbc:	2b02      	cmp	r3, #2
    8dbe:	d110      	bne.n	8de2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
        if (TRUE == FlexCAN_Ip_GetStartMode(Can_pControllerConfig->Can_u8ControllerOffset))
    8dc0:	9b01      	ldr	r3, [sp, #4]
    8dc2:	789b      	ldrb	r3, [r3, #2]
    8dc4:	4618      	mov	r0, r3
    8dc6:	f002 f97b 	bl	b0c0 <FlexCAN_Ip_GetStartMode_Privileged>
    8dca:	4603      	mov	r3, r0
    8dcc:	2b00      	cmp	r3, #0
    8dce:	d008      	beq.n	8de2 <Can_43_FLEXCAN_Ipw_MainFunction_Mode+0x64>
            *Can_pControllerState = CAN_CS_STARTED;
    8dd0:	9b00      	ldr	r3, [sp, #0]
    8dd2:	2201      	movs	r2, #1
    8dd4:	601a      	str	r2, [r3, #0]
            CanIf_ControllerModeIndication(Can_pControllerConfig->Can_u8AbstControllerID, CAN_CS_STARTED);
    8dd6:	9b01      	ldr	r3, [sp, #4]
    8dd8:	781b      	ldrb	r3, [r3, #0]
    8dda:	2101      	movs	r1, #1
    8ddc:	4618      	mov	r0, r3
    8dde:	f7f7 fd94 	bl	90a <CanIf_ControllerModeIndication>
}
    8de2:	bf00      	nop
    8de4:	b003      	add	sp, #12
    8de6:	f85d fb04 	ldr.w	pc, [sp], #4

00008dea <Can_43_FLEXCAN_Ipw_ProcessHwObject>:
        const Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig,
        const Can_43_FLEXCAN_ConfigType * Can_pConfig,
        uint8 u8MbIdx,
        Can_43_FLEXCAN_MbType mbType
    )
    {
    8dea:	b500      	push	{lr}
    8dec:	b085      	sub	sp, #20
    8dee:	9003      	str	r0, [sp, #12]
    8df0:	9102      	str	r1, [sp, #8]
    8df2:	9300      	str	r3, [sp, #0]
    8df4:	4613      	mov	r3, r2
    8df6:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (mbType)
    8dfa:	9b00      	ldr	r3, [sp, #0]
    8dfc:	2b03      	cmp	r3, #3
    8dfe:	d009      	beq.n	8e14 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x2a>
    8e00:	9b00      	ldr	r3, [sp, #0]
    8e02:	2b03      	cmp	r3, #3
    8e04:	d821      	bhi.n	8e4a <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
    8e06:	9b00      	ldr	r3, [sp, #0]
    8e08:	2b00      	cmp	r3, #0
    8e0a:	d00c      	beq.n	8e26 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x3c>
    8e0c:	9b00      	ldr	r3, [sp, #0]
    8e0e:	2b01      	cmp	r3, #1
    8e10:	d012      	beq.n	8e38 <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x4e>
                break;
            }
            default:
            {
                /* prevent misra */
                break;
    8e12:	e01a      	b.n	8e4a <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x60>
                Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    8e14:	9b02      	ldr	r3, [sp, #8]
    8e16:	691b      	ldr	r3, [r3, #16]
    8e18:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8e1c:	4619      	mov	r1, r3
    8e1e:	9803      	ldr	r0, [sp, #12]
    8e20:	f7ff fa24 	bl	826c <Can_43_FLEXCAN_Ipw_ProcessTxMesgBuffer>
                break;
    8e24:	e012      	b.n	8e4c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    8e26:	9b02      	ldr	r3, [sp, #8]
    8e28:	691b      	ldr	r3, [r3, #16]
    8e2a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8e2e:	4619      	mov	r1, r3
    8e30:	9803      	ldr	r0, [sp, #12]
    8e32:	f7ff fa67 	bl	8304 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    8e36:	e009      	b.n	8e4c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                    Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer(Can_pControllerConfig, Can_pConfig->Can_pHwObjectConfig, u8MbIdx);
    8e38:	9b02      	ldr	r3, [sp, #8]
    8e3a:	691b      	ldr	r3, [r3, #16]
    8e3c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8e40:	4619      	mov	r1, r3
    8e42:	9803      	ldr	r0, [sp, #12]
    8e44:	f7ff fa5e 	bl	8304 <Can_43_FLEXCAN_Ipw_ProcessRxMesgBuffer>
                break;
    8e48:	e000      	b.n	8e4c <Can_43_FLEXCAN_Ipw_ProcessHwObject+0x62>
                break;
    8e4a:	bf00      	nop
            }
        }
    }
    8e4c:	bf00      	nop
    8e4e:	b005      	add	sp, #20
    8e50:	f85d fb04 	ldr.w	pc, [sp], #4

00008e54 <Can_43_FLEXCAN_CommonIrqCallback>:
void Can_43_FLEXCAN_CommonIrqCallback(uint8 u8Instance,
                           Flexcan_Ip_EventType event,
                           uint32 u32buffIdx,
                           const Flexcan_Ip_StateType *driverState
                          )
{
    8e54:	b500      	push	{lr}
    8e56:	b085      	sub	sp, #20
    8e58:	9102      	str	r1, [sp, #8]
    8e5a:	9201      	str	r2, [sp, #4]
    8e5c:	9300      	str	r3, [sp, #0]
    8e5e:	4603      	mov	r3, r0
    8e60:	f88d 300f 	strb.w	r3, [sp, #15]
    else
    {
#endif /* CAN_43_FLEXCAN_FEATURE_HAS_ENHANCED_RX_FIFO */
    #if (CAN_43_FLEXCAN_MB_INTERRUPT_SUPPORT == STD_ON)
        /* This callback is just used for interrupt buffter */
        if (FALSE == (driverState->mbs[u32buffIdx].isPolling))
    8e64:	9a00      	ldr	r2, [sp, #0]
    8e66:	9b01      	ldr	r3, [sp, #4]
    8e68:	011b      	lsls	r3, r3, #4
    8e6a:	4413      	add	r3, r2
    8e6c:	3308      	adds	r3, #8
    8e6e:	781b      	ldrb	r3, [r3, #0]
    8e70:	f083 0301 	eor.w	r3, r3, #1
    8e74:	b2db      	uxtb	r3, r3
    8e76:	2b00      	cmp	r3, #0
    8e78:	d03b      	beq.n	8ef2 <Can_43_FLEXCAN_CommonIrqCallback+0x9e>
    8e7a:	9b02      	ldr	r3, [sp, #8]
    8e7c:	2b04      	cmp	r3, #4
    8e7e:	d83a      	bhi.n	8ef6 <Can_43_FLEXCAN_CommonIrqCallback+0xa2>
    8e80:	a201      	add	r2, pc, #4	; (adr r2, 8e88 <Can_43_FLEXCAN_CommonIrqCallback+0x34>)
    8e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8e86:	bf00      	nop
    8e88:	00008eaf 	.word	0x00008eaf
    8e8c:	00008ec1 	.word	0x00008ec1
    8e90:	00008ed3 	.word	0x00008ed3
    8e94:	00008ee3 	.word	0x00008ee3
    8e98:	00008e9d 	.word	0x00008e9d
        {
            switch (event)
            {
                case FLEXCAN_EVENT_TX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_TX_NORMAL);
    8e9c:	9b01      	ldr	r3, [sp, #4]
    8e9e:	b2d9      	uxtb	r1, r3
    8ea0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ea4:	2203      	movs	r2, #3
    8ea6:	4618      	mov	r0, r3
    8ea8:	f7fe fe1e 	bl	7ae8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8eac:	e024      	b.n	8ef8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RX_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_NORMAL);
    8eae:	9b01      	ldr	r3, [sp, #4]
    8eb0:	b2d9      	uxtb	r1, r3
    8eb2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8eb6:	2200      	movs	r2, #0
    8eb8:	4618      	mov	r0, r3
    8eba:	f7fe fe15 	bl	7ae8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8ebe:	e01b      	b.n	8ef8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_COMPLETE:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, (uint8)u32buffIdx, CAN_RX_LEGACY_FIFO);
    8ec0:	9b01      	ldr	r3, [sp, #4]
    8ec2:	b2d9      	uxtb	r1, r3
    8ec4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ec8:	2201      	movs	r2, #1
    8eca:	4618      	mov	r0, r3
    8ecc:	f7fe fe0c 	bl	7ae8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8ed0:	e012      	b.n	8ef8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_WARNING:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 6U, CAN_RX_LEGACY_FIFO);
    8ed2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ed6:	2201      	movs	r2, #1
    8ed8:	2106      	movs	r1, #6
    8eda:	4618      	mov	r0, r3
    8edc:	f7fe fe04 	bl	7ae8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8ee0:	e00a      	b.n	8ef8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                }
                case FLEXCAN_EVENT_RXFIFO_OVERFLOW:
                {
                    Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt(u8Instance, 7U, CAN_RX_LEGACY_FIFO);
    8ee2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8ee6:	2201      	movs	r2, #1
    8ee8:	2107      	movs	r1, #7
    8eea:	4618      	mov	r0, r3
    8eec:	f7fe fdfc 	bl	7ae8 <Can_43_FLEXCAN_ProcessMesgBufferCommonInterrupt>
                    break;
    8ef0:	e002      	b.n	8ef8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                {
                    /* nothing to do */
                    break;
                }
            }
        }
    8ef2:	bf00      	nop
    8ef4:	e000      	b.n	8ef8 <Can_43_FLEXCAN_CommonIrqCallback+0xa4>
                    break;
    8ef6:	bf00      	nop
        Can_43_FLEXCAN_ProcessPNInterrupt(u8Instance);
    }
#endif /* (CAN_43_FLEXCAN_FEATURE_HAS_PRETENDED_NETWORKING == STD_ON) */
    (void)u32buffIdx;
    (void)driverState;
}
    8ef8:	bf00      	nop
    8efa:	b005      	add	sp, #20
    8efc:	f85d fb04 	ldr.w	pc, [sp], #4

00008f00 <Can_43_FLEXCAN_ErrorIrqCallback>:
void Can_43_FLEXCAN_ErrorIrqCallback(uint8 u8Instance,
                          Flexcan_Ip_EventType event,
                          uint32 u32ErrStatus,
                          const Flexcan_Ip_StateType *driverState
                         )
{
    8f00:	b500      	push	{lr}
    8f02:	b085      	sub	sp, #20
    8f04:	9102      	str	r1, [sp, #8]
    8f06:	9201      	str	r2, [sp, #4]
    8f08:	9300      	str	r3, [sp, #0]
    8f0a:	4603      	mov	r3, r0
    8f0c:	f88d 300f 	strb.w	r3, [sp, #15]
    (void) driverState; /* not used yet */
#if (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON)
    (void) u32ErrStatus; /* prevent compiler warning */
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT != STD_ON) */

    switch (event)
    8f10:	9b02      	ldr	r3, [sp, #8]
    8f12:	2b07      	cmp	r3, #7
    8f14:	d105      	bne.n	8f22 <Can_43_FLEXCAN_ErrorIrqCallback+0x22>
        }
#endif /* (CAN_43_FLEXCAN_ERROR_INTERRUPT_SUPPORT == STD_ON) */
        /* this function is called for both interrupt & polling */
        case FLEXCAN_EVENT_BUSOFF:
        {
            Can_43_FLEXCAN_ProcessBusOffInterrupt(u8Instance);
    8f16:	f89d 300f 	ldrb.w	r3, [sp, #15]
    8f1a:	4618      	mov	r0, r3
    8f1c:	f7fe fe26 	bl	7b6c <Can_43_FLEXCAN_ProcessBusOffInterrupt>
            break;
    8f20:	e000      	b.n	8f24 <Can_43_FLEXCAN_ErrorIrqCallback+0x24>
        }
        default:
        {
            /* nothing to do */
            break;
    8f22:	bf00      	nop
        }
    }
}
    8f24:	bf00      	nop
    8f26:	b005      	add	sp, #20
    8f28:	f85d fb04 	ldr.w	pc, [sp], #4

00008f2c <FlexCAN_SetRxFifoGlobalMask>:
 *
 * @param[in]   base  The FlexCAN base address
 * @param[in]   Mask     Sets mask
 */
static inline void FlexCAN_SetRxFifoGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    8f2c:	b082      	sub	sp, #8
    8f2e:	9001      	str	r0, [sp, #4]
    8f30:	9100      	str	r1, [sp, #0]
    (base->RXFGMASK) = Mask;
    8f32:	9b01      	ldr	r3, [sp, #4]
    8f34:	9a00      	ldr	r2, [sp, #0]
    8f36:	649a      	str	r2, [r3, #72]	; 0x48
}
    8f38:	bf00      	nop
    8f3a:	b002      	add	sp, #8
    8f3c:	4770      	bx	lr

00008f3e <FlexCAN_SetTDCOffset>:
 */
static inline void FlexCAN_SetTDCOffset(FLEXCAN_Type * base,
                                        boolean enable,
                                        uint8 offset
                                       )
{
    8f3e:	b084      	sub	sp, #16
    8f40:	9001      	str	r0, [sp, #4]
    8f42:	460b      	mov	r3, r1
    8f44:	f88d 3003 	strb.w	r3, [sp, #3]
    8f48:	4613      	mov	r3, r2
    8f4a:	f88d 3002 	strb.w	r3, [sp, #2]
    uint32 tmp;

    tmp = base->FDCTRL;
    8f4e:	9b01      	ldr	r3, [sp, #4]
    8f50:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8f54:	9303      	str	r3, [sp, #12]
    tmp &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    8f56:	9b03      	ldr	r3, [sp, #12]
    8f58:	f423 431f 	bic.w	r3, r3, #40704	; 0x9f00
    8f5c:	9303      	str	r3, [sp, #12]

    if (enable)
    8f5e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    8f62:	2b00      	cmp	r3, #0
    8f64:	d00b      	beq.n	8f7e <FlexCAN_SetTDCOffset+0x40>
    {
        tmp = tmp | FLEXCAN_FDCTRL_TDCEN_MASK;
    8f66:	9b03      	ldr	r3, [sp, #12]
    8f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8f6c:	9303      	str	r3, [sp, #12]
        tmp = tmp | FLEXCAN_FDCTRL_TDCOFF(offset);
    8f6e:	f89d 3002 	ldrb.w	r3, [sp, #2]
    8f72:	021b      	lsls	r3, r3, #8
    8f74:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    8f78:	9a03      	ldr	r2, [sp, #12]
    8f7a:	4313      	orrs	r3, r2
    8f7c:	9303      	str	r3, [sp, #12]
    }

    base->FDCTRL = tmp;
    8f7e:	9b01      	ldr	r3, [sp, #4]
    8f80:	9a03      	ldr	r2, [sp, #12]
    8f82:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    8f86:	bf00      	nop
    8f88:	b004      	add	sp, #16
    8f8a:	4770      	bx	lr

00008f8c <FlexCAN_IsEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsEnabled(const FLEXCAN_Type * pBase)
{
    8f8c:	b082      	sub	sp, #8
    8f8e:	9001      	str	r0, [sp, #4]
    return (((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U) ? FALSE : TRUE;
    8f90:	9b01      	ldr	r3, [sp, #4]
    8f92:	681b      	ldr	r3, [r3, #0]
    8f94:	43db      	mvns	r3, r3
    8f96:	0fdb      	lsrs	r3, r3, #31
    8f98:	b2db      	uxtb	r3, r3
}
    8f9a:	4618      	mov	r0, r3
    8f9c:	b002      	add	sp, #8
    8f9e:	4770      	bx	lr

00008fa0 <FlexCAN_SetFDEnabled>:
 */
static inline void FlexCAN_SetFDEnabled(FLEXCAN_Type * base,
                                        boolean enableFD,
                                        boolean enableBRS
                                       )
{
    8fa0:	b082      	sub	sp, #8
    8fa2:	9001      	str	r0, [sp, #4]
    8fa4:	460b      	mov	r3, r1
    8fa6:	f88d 3003 	strb.w	r3, [sp, #3]
    8faa:	4613      	mov	r3, r2
    8fac:	f88d 3002 	strb.w	r3, [sp, #2]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FDEN_MASK) | FLEXCAN_MCR_FDEN(enableFD ? 1UL : 0UL);
    8fb0:	9b01      	ldr	r3, [sp, #4]
    8fb2:	681b      	ldr	r3, [r3, #0]
    8fb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    8fb8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    8fbc:	2a00      	cmp	r2, #0
    8fbe:	d002      	beq.n	8fc6 <FlexCAN_SetFDEnabled+0x26>
    8fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8fc4:	e000      	b.n	8fc8 <FlexCAN_SetFDEnabled+0x28>
    8fc6:	2200      	movs	r2, #0
    8fc8:	431a      	orrs	r2, r3
    8fca:	9b01      	ldr	r3, [sp, #4]
    8fcc:	601a      	str	r2, [r3, #0]

    /* Enable BitRate Switch support from BRS_TX_MB field or ignore it */
    base->FDCTRL = (base->FDCTRL & ~FLEXCAN_FDCTRL_FDRATE_MASK) | FLEXCAN_FDCTRL_FDRATE(enableBRS ? 1UL : 0UL);
    8fce:	9b01      	ldr	r3, [sp, #4]
    8fd0:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8fd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8fd8:	f89d 2002 	ldrb.w	r2, [sp, #2]
    8fdc:	2a00      	cmp	r2, #0
    8fde:	d002      	beq.n	8fe6 <FlexCAN_SetFDEnabled+0x46>
    8fe0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8fe4:	e000      	b.n	8fe8 <FlexCAN_SetFDEnabled+0x48>
    8fe6:	2200      	movs	r2, #0
    8fe8:	431a      	orrs	r2, r3
    8fea:	9b01      	ldr	r3, [sp, #4]
    8fec:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00

    /* Disable Transmission Delay Compensation by default */
    base->FDCTRL &= ~(FLEXCAN_FDCTRL_TDCEN_MASK | FLEXCAN_FDCTRL_TDCOFF_MASK);
    8ff0:	9b01      	ldr	r3, [sp, #4]
    8ff2:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    8ff6:	f423 421f 	bic.w	r2, r3, #40704	; 0x9f00
    8ffa:	9b01      	ldr	r3, [sp, #4]
    8ffc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
    9000:	bf00      	nop
    9002:	b002      	add	sp, #8
    9004:	4770      	bx	lr

00009006 <FlexCAN_SetListenOnlyMode>:
 *
 * @param   base    The FlexCAN base address
 * @param   enable  TRUE to enable; FALSE to disable
 */
static inline void FlexCAN_SetListenOnlyMode(FLEXCAN_Type * base, boolean enableListenOnly)
{
    9006:	b082      	sub	sp, #8
    9008:	9001      	str	r0, [sp, #4]
    900a:	460b      	mov	r3, r1
    900c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(enableListenOnly ? 1UL : 0UL);
    9010:	9b01      	ldr	r3, [sp, #4]
    9012:	685b      	ldr	r3, [r3, #4]
    9014:	f023 0308 	bic.w	r3, r3, #8
    9018:	f89d 2003 	ldrb.w	r2, [sp, #3]
    901c:	2a00      	cmp	r2, #0
    901e:	d001      	beq.n	9024 <FlexCAN_SetListenOnlyMode+0x1e>
    9020:	2208      	movs	r2, #8
    9022:	e000      	b.n	9026 <FlexCAN_SetListenOnlyMode+0x20>
    9024:	2200      	movs	r2, #0
    9026:	431a      	orrs	r2, r3
    9028:	9b01      	ldr	r3, [sp, #4]
    902a:	605a      	str	r2, [r3, #4]
}
    902c:	bf00      	nop
    902e:	b002      	add	sp, #8
    9030:	4770      	bx	lr

00009032 <FlexCAN_UnlockRxMsgBuff>:
 * @brief Unlocks the FlexCAN Rx message buffer.
 *
 * @param   base     The FlexCAN base address
 */
static inline void FlexCAN_UnlockRxMsgBuff(const FLEXCAN_Type * base)
{
    9032:	b082      	sub	sp, #8
    9034:	9001      	str	r0, [sp, #4]
    /* Unlock the mailbox by reading the free running timer */
    (void)base->TIMER;
    9036:	9b01      	ldr	r3, [sp, #4]
    9038:	689b      	ldr	r3, [r3, #8]
}
    903a:	bf00      	nop
    903c:	b002      	add	sp, #8
    903e:	4770      	bx	lr

00009040 <FlexCAN_ClearMsgBuffIntStatusFlag>:
 *
 * @param   base        The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 */
static inline void FlexCAN_ClearMsgBuffIntStatusFlag(FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    9040:	b084      	sub	sp, #16
    9042:	9001      	str	r0, [sp, #4]
    9044:	9100      	str	r1, [sp, #0]
    uint32 flag = ((uint32)1U << (msgBuffIdx % 32U));
    9046:	9b00      	ldr	r3, [sp, #0]
    9048:	f003 031f 	and.w	r3, r3, #31
    904c:	2201      	movs	r2, #1
    904e:	fa02 f303 	lsl.w	r3, r2, r3
    9052:	9303      	str	r3, [sp, #12]

    /* Clear the corresponding message buffer interrupt flag*/
    if (msgBuffIdx < 32U)
    9054:	9b00      	ldr	r3, [sp, #0]
    9056:	2b1f      	cmp	r3, #31
    9058:	d802      	bhi.n	9060 <FlexCAN_ClearMsgBuffIntStatusFlag+0x20>
    {
        (base->IFLAG1) = (flag);
    905a:	9b01      	ldr	r3, [sp, #4]
    905c:	9a03      	ldr	r2, [sp, #12]
    905e:	631a      	str	r2, [r3, #48]	; 0x30
    else
    {
        (base->IFLAG4) = (flag);
    }
#endif
}
    9060:	bf00      	nop
    9062:	b004      	add	sp, #16
    9064:	4770      	bx	lr

00009066 <FlexCAN_GetBuffStatusFlag>:
 * @param   base                The FlexCAN base address
 * @param   msgBuffIdx  Index of the message buffer
 * @return  flag        The value of interrupt flag of the message buffer.
 */
static inline uint8 FlexCAN_GetBuffStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    9066:	b084      	sub	sp, #16
    9068:	9001      	str	r0, [sp, #4]
    906a:	9100      	str	r1, [sp, #0]
    uint32 flag = 0U;
    906c:	2300      	movs	r3, #0
    906e:	9303      	str	r3, [sp, #12]

    if (msgBuffIdx < 32U)
    9070:	9b00      	ldr	r3, [sp, #0]
    9072:	2b1f      	cmp	r3, #31
    9074:	d80e      	bhi.n	9094 <FlexCAN_GetBuffStatusFlag+0x2e>
    {
        flag = ((base->IFLAG1 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    9076:	9b01      	ldr	r3, [sp, #4]
    9078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    907a:	9b00      	ldr	r3, [sp, #0]
    907c:	f003 031f 	and.w	r3, r3, #31
    9080:	2101      	movs	r1, #1
    9082:	fa01 f303 	lsl.w	r3, r1, r3
    9086:	401a      	ands	r2, r3
    9088:	9b00      	ldr	r3, [sp, #0]
    908a:	f003 031f 	and.w	r3, r3, #31
    908e:	fa22 f303 	lsr.w	r3, r2, r3
    9092:	9303      	str	r3, [sp, #12]
    {
        flag = ((base->IFLAG4 & ((uint32)1U << (msgBuffIdx % 32U))) >> (msgBuffIdx % 32U));
    }
#endif

    return (uint8)flag;
    9094:	9b03      	ldr	r3, [sp, #12]
    9096:	b2db      	uxtb	r3, r3
}
    9098:	4618      	mov	r0, r3
    909a:	b004      	add	sp, #16
    909c:	4770      	bx	lr

0000909e <FlexCAN_SetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetFDTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    909e:	b082      	sub	sp, #8
    90a0:	9001      	str	r0, [sp, #4]
    90a2:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* Set FlexCAN time segments*/
    (base->FDCBT) = ((base->FDCBT) & ~((FLEXCAN_FDCBT_FPROPSEG_MASK | FLEXCAN_FDCBT_FPSEG2_MASK |
    90a4:	9b01      	ldr	r3, [sp, #4]
    90a6:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    90aa:	4b15      	ldr	r3, [pc, #84]	; (9100 <FlexCAN_SetFDTimeSegments+0x62>)
    90ac:	4013      	ands	r3, r2
    90ae:	9a01      	ldr	r2, [sp, #4]
    90b0:	f8c2 3c04 	str.w	r3, [r2, #3076]	; 0xc04
                                        FLEXCAN_FDCBT_FPSEG1_MASK | FLEXCAN_FDCBT_FPRESDIV_MASK
                                       ) | FLEXCAN_FDCBT_FRJW_MASK
                                      )
                    );

    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    90b4:	9b01      	ldr	r3, [sp, #4]
    90b6:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    90ba:	9b00      	ldr	r3, [sp, #0]
    90bc:	681b      	ldr	r3, [r3, #0]
    90be:	029b      	lsls	r3, r3, #10
    90c0:	f403 41f8 	and.w	r1, r3, #31744	; 0x7c00
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    90c4:	9b00      	ldr	r3, [sp, #0]
    90c6:	689b      	ldr	r3, [r3, #8]
    90c8:	f003 0307 	and.w	r3, r3, #7
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    90cc:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    90ce:	9b00      	ldr	r3, [sp, #0]
    90d0:	685b      	ldr	r3, [r3, #4]
    90d2:	015b      	lsls	r3, r3, #5
    90d4:	b2db      	uxtb	r3, r3
                                      FLEXCAN_FDCBT_FPSEG2(timeSeg->phaseSeg2) |
    90d6:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    90d8:	9b00      	ldr	r3, [sp, #0]
    90da:	68db      	ldr	r3, [r3, #12]
    90dc:	0518      	lsls	r0, r3, #20
    90de:	4b09      	ldr	r3, [pc, #36]	; (9104 <FlexCAN_SetFDTimeSegments+0x66>)
    90e0:	4003      	ands	r3, r0
                                      FLEXCAN_FDCBT_FPSEG1(timeSeg->phaseSeg1) |
    90e2:	4319      	orrs	r1, r3
                                      FLEXCAN_FDCBT_FRJW(timeSeg->rJumpwidth)
    90e4:	9b00      	ldr	r3, [sp, #0]
    90e6:	691b      	ldr	r3, [r3, #16]
    90e8:	041b      	lsls	r3, r3, #16
    90ea:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
                                      FLEXCAN_FDCBT_FPRESDIV(timeSeg->preDivider) |
    90ee:	430b      	orrs	r3, r1
    (base->FDCBT) = ((base->FDCBT) | (FLEXCAN_FDCBT_FPROPSEG(timeSeg->propSeg) |
    90f0:	431a      	orrs	r2, r3
    90f2:	9b01      	ldr	r3, [sp, #4]
    90f4:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
                                     )
                    );
}
    90f8:	bf00      	nop
    90fa:	b002      	add	sp, #8
    90fc:	4770      	bx	lr
    90fe:	bf00      	nop
    9100:	c0088318 	.word	0xc0088318
    9104:	3ff00000 	.word	0x3ff00000

00009108 <FlexCAN_SetTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    9108:	b082      	sub	sp, #8
    910a:	9001      	str	r0, [sp, #4]
    910c:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    (base->CTRL1) = ((base->CTRL1) & ~((FLEXCAN_CTRL1_PROPSEG_MASK | FLEXCAN_CTRL1_PSEG2_MASK |
    910e:	9b01      	ldr	r3, [sp, #4]
    9110:	685a      	ldr	r2, [r3, #4]
    9112:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    9116:	4013      	ands	r3, r2
    9118:	9a01      	ldr	r2, [sp, #4]
    911a:	6053      	str	r3, [r2, #4]
                                        FLEXCAN_CTRL1_PSEG1_MASK | FLEXCAN_CTRL1_PRESDIV_MASK
                                       ) | FLEXCAN_CTRL1_RJW_MASK
                                      )
                    );

    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    911c:	9b01      	ldr	r3, [sp, #4]
    911e:	685a      	ldr	r2, [r3, #4]
    9120:	9b00      	ldr	r3, [sp, #0]
    9122:	681b      	ldr	r3, [r3, #0]
    9124:	f003 0107 	and.w	r1, r3, #7
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    9128:	9b00      	ldr	r3, [sp, #0]
    912a:	689b      	ldr	r3, [r3, #8]
    912c:	041b      	lsls	r3, r3, #16
    912e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    9132:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    9134:	9b00      	ldr	r3, [sp, #0]
    9136:	685b      	ldr	r3, [r3, #4]
    9138:	04db      	lsls	r3, r3, #19
    913a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
                                      FLEXCAN_CTRL1_PSEG2(timeSeg->phaseSeg2) |
    913e:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    9140:	9b00      	ldr	r3, [sp, #0]
    9142:	68db      	ldr	r3, [r3, #12]
    9144:	061b      	lsls	r3, r3, #24
                                      FLEXCAN_CTRL1_PSEG1(timeSeg->phaseSeg1) |
    9146:	4319      	orrs	r1, r3
                                      FLEXCAN_CTRL1_RJW(timeSeg->rJumpwidth)
    9148:	9b00      	ldr	r3, [sp, #0]
    914a:	691b      	ldr	r3, [r3, #16]
    914c:	059b      	lsls	r3, r3, #22
    914e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
                                      FLEXCAN_CTRL1_PRESDIV(timeSeg->preDivider) |
    9152:	430b      	orrs	r3, r1
    (base->CTRL1) = ((base->CTRL1) | (FLEXCAN_CTRL1_PROPSEG(timeSeg->propSeg) |
    9154:	431a      	orrs	r2, r3
    9156:	9b01      	ldr	r3, [sp, #4]
    9158:	605a      	str	r2, [r3, #4]
                                     )
                    );
}
    915a:	bf00      	nop
    915c:	b002      	add	sp, #8
    915e:	4770      	bx	lr

00009160 <FlexCAN_SetExtendedTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments, which need to be set for the bit rate.
 */
static inline void FlexCAN_SetExtendedTimeSegments(FLEXCAN_Type * base, const Flexcan_Ip_TimeSegmentType * timeSeg)
{
    9160:	b082      	sub	sp, #8
    9162:	9001      	str	r0, [sp, #4]
    9164:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(timeSeg != NULL_PTR);
#endif
    /* If extended bit time definitions are enabled, use CBT register */
    (base->CBT) = ((base->CBT) & ~((FLEXCAN_CBT_EPROPSEG_MASK | FLEXCAN_CBT_EPSEG2_MASK |
    9166:	9b01      	ldr	r3, [sp, #4]
    9168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    916a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
    916e:	9b01      	ldr	r3, [sp, #4]
    9170:	651a      	str	r2, [r3, #80]	; 0x50
                                    FLEXCAN_CBT_EPSEG1_MASK | FLEXCAN_CBT_EPRESDIV_MASK
                                   ) | FLEXCAN_CBT_ERJW_MASK
                                  )
                  );

    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    9172:	9b01      	ldr	r3, [sp, #4]
    9174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    9176:	9b00      	ldr	r3, [sp, #0]
    9178:	681b      	ldr	r3, [r3, #0]
    917a:	029b      	lsls	r3, r3, #10
    917c:	b299      	uxth	r1, r3
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    917e:	9b00      	ldr	r3, [sp, #0]
    9180:	689b      	ldr	r3, [r3, #8]
    9182:	f003 031f 	and.w	r3, r3, #31
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    9186:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    9188:	9b00      	ldr	r3, [sp, #0]
    918a:	685b      	ldr	r3, [r3, #4]
    918c:	015b      	lsls	r3, r3, #5
    918e:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                                  FLEXCAN_CBT_EPSEG2(timeSeg->phaseSeg2) |
    9192:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    9194:	9b00      	ldr	r3, [sp, #0]
    9196:	68db      	ldr	r3, [r3, #12]
    9198:	0558      	lsls	r0, r3, #21
    919a:	4b07      	ldr	r3, [pc, #28]	; (91b8 <FlexCAN_SetExtendedTimeSegments+0x58>)
    919c:	4003      	ands	r3, r0
                                  FLEXCAN_CBT_EPSEG1(timeSeg->phaseSeg1) |
    919e:	4319      	orrs	r1, r3
                                  FLEXCAN_CBT_ERJW(timeSeg->rJumpwidth)
    91a0:	9b00      	ldr	r3, [sp, #0]
    91a2:	691b      	ldr	r3, [r3, #16]
    91a4:	041b      	lsls	r3, r3, #16
    91a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
                                  FLEXCAN_CBT_EPRESDIV(timeSeg->preDivider) |
    91aa:	430b      	orrs	r3, r1
    (base->CBT) = ((base->CBT) | (FLEXCAN_CBT_EPROPSEG(timeSeg->propSeg) |
    91ac:	431a      	orrs	r2, r3
    91ae:	9b01      	ldr	r3, [sp, #4]
    91b0:	651a      	str	r2, [r3, #80]	; 0x50
                                 )
                  );
}
    91b2:	bf00      	nop
    91b4:	b002      	add	sp, #8
    91b6:	4770      	bx	lr
    91b8:	7fe00000 	.word	0x7fe00000

000091bc <FlexCAN_GetExtendedTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetExtendedTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    91bc:	b082      	sub	sp, #8
    91be:	9001      	str	r0, [sp, #4]
    91c0:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CBT) & FLEXCAN_CBT_EPRESDIV_MASK) >> FLEXCAN_CBT_EPRESDIV_SHIFT;
    91c2:	9b01      	ldr	r3, [sp, #4]
    91c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    91c6:	0d5b      	lsrs	r3, r3, #21
    91c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
    91cc:	9b00      	ldr	r3, [sp, #0]
    91ce:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CBT) & FLEXCAN_CBT_EPROPSEG_MASK) >> FLEXCAN_CBT_EPROPSEG_SHIFT;
    91d0:	9b01      	ldr	r3, [sp, #4]
    91d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    91d4:	0a9b      	lsrs	r3, r3, #10
    91d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    91da:	9b00      	ldr	r3, [sp, #0]
    91dc:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CBT) & FLEXCAN_CBT_EPSEG1_MASK) >> FLEXCAN_CBT_EPSEG1_SHIFT;
    91de:	9b01      	ldr	r3, [sp, #4]
    91e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    91e2:	095b      	lsrs	r3, r3, #5
    91e4:	f003 021f 	and.w	r2, r3, #31
    91e8:	9b00      	ldr	r3, [sp, #0]
    91ea:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CBT) & FLEXCAN_CBT_EPSEG2_MASK) >> FLEXCAN_CBT_EPSEG2_SHIFT;
    91ec:	9b01      	ldr	r3, [sp, #4]
    91ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    91f0:	f003 021f 	and.w	r2, r3, #31
    91f4:	9b00      	ldr	r3, [sp, #0]
    91f6:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CBT) & FLEXCAN_CBT_ERJW_MASK) >> FLEXCAN_CBT_ERJW_SHIFT;
    91f8:	9b01      	ldr	r3, [sp, #4]
    91fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    91fc:	0c1b      	lsrs	r3, r3, #16
    91fe:	f003 021f 	and.w	r2, r3, #31
    9202:	9b00      	ldr	r3, [sp, #0]
    9204:	611a      	str	r2, [r3, #16]
}
    9206:	bf00      	nop
    9208:	b002      	add	sp, #8
    920a:	4770      	bx	lr

0000920c <FlexCAN_GetTimeSegments>:
 *
 * @param[in]   base The FlexCAN base address
 * @param[out]   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    920c:	b082      	sub	sp, #8
    920e:	9001      	str	r0, [sp, #4]
    9210:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->CTRL1) & FLEXCAN_CTRL1_PRESDIV_MASK) >> FLEXCAN_CTRL1_PRESDIV_SHIFT;
    9212:	9b01      	ldr	r3, [sp, #4]
    9214:	685b      	ldr	r3, [r3, #4]
    9216:	0e1b      	lsrs	r3, r3, #24
    9218:	b2da      	uxtb	r2, r3
    921a:	9b00      	ldr	r3, [sp, #0]
    921c:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->CTRL1) & FLEXCAN_CTRL1_PROPSEG_MASK) >> FLEXCAN_CTRL1_PROPSEG_SHIFT;
    921e:	9b01      	ldr	r3, [sp, #4]
    9220:	685b      	ldr	r3, [r3, #4]
    9222:	f003 0207 	and.w	r2, r3, #7
    9226:	9b00      	ldr	r3, [sp, #0]
    9228:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG1_MASK) >> FLEXCAN_CTRL1_PSEG1_SHIFT;
    922a:	9b01      	ldr	r3, [sp, #4]
    922c:	685b      	ldr	r3, [r3, #4]
    922e:	0cdb      	lsrs	r3, r3, #19
    9230:	f003 0207 	and.w	r2, r3, #7
    9234:	9b00      	ldr	r3, [sp, #0]
    9236:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->CTRL1) & FLEXCAN_CTRL1_PSEG2_MASK) >> FLEXCAN_CTRL1_PSEG2_SHIFT;
    9238:	9b01      	ldr	r3, [sp, #4]
    923a:	685b      	ldr	r3, [r3, #4]
    923c:	0c1b      	lsrs	r3, r3, #16
    923e:	f003 0207 	and.w	r2, r3, #7
    9242:	9b00      	ldr	r3, [sp, #0]
    9244:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->CTRL1) & FLEXCAN_CTRL1_RJW_MASK) >> FLEXCAN_CTRL1_RJW_SHIFT;
    9246:	9b01      	ldr	r3, [sp, #4]
    9248:	685b      	ldr	r3, [r3, #4]
    924a:	0d9b      	lsrs	r3, r3, #22
    924c:	f003 0203 	and.w	r2, r3, #3
    9250:	9b00      	ldr	r3, [sp, #0]
    9252:	611a      	str	r2, [r3, #16]
}
    9254:	bf00      	nop
    9256:	b002      	add	sp, #8
    9258:	4770      	bx	lr

0000925a <FlexCAN_GetFDTimeSegments>:
 *
 * @param   base The FlexCAN base address
 * @param   timeSeg    FlexCAN time segments read for bit rate
 */
static inline void FlexCAN_GetFDTimeSegments(const FLEXCAN_Type * base, Flexcan_Ip_TimeSegmentType * timeSeg)
{
    925a:	b082      	sub	sp, #8
    925c:	9001      	str	r0, [sp, #4]
    925e:	9100      	str	r1, [sp, #0]
    timeSeg->preDivider = ((base->FDCBT) & FLEXCAN_FDCBT_FPRESDIV_MASK) >> FLEXCAN_FDCBT_FPRESDIV_SHIFT;
    9260:	9b01      	ldr	r3, [sp, #4]
    9262:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    9266:	0d1b      	lsrs	r3, r3, #20
    9268:	f3c3 0209 	ubfx	r2, r3, #0, #10
    926c:	9b00      	ldr	r3, [sp, #0]
    926e:	60da      	str	r2, [r3, #12]
    timeSeg->propSeg = ((base->FDCBT) & FLEXCAN_FDCBT_FPROPSEG_MASK) >> FLEXCAN_FDCBT_FPROPSEG_SHIFT;
    9270:	9b01      	ldr	r3, [sp, #4]
    9272:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    9276:	0a9b      	lsrs	r3, r3, #10
    9278:	f003 021f 	and.w	r2, r3, #31
    927c:	9b00      	ldr	r3, [sp, #0]
    927e:	601a      	str	r2, [r3, #0]
    timeSeg->phaseSeg1 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG1_MASK) >> FLEXCAN_FDCBT_FPSEG1_SHIFT;
    9280:	9b01      	ldr	r3, [sp, #4]
    9282:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    9286:	095b      	lsrs	r3, r3, #5
    9288:	f003 0207 	and.w	r2, r3, #7
    928c:	9b00      	ldr	r3, [sp, #0]
    928e:	605a      	str	r2, [r3, #4]
    timeSeg->phaseSeg2 = ((base->FDCBT) & FLEXCAN_FDCBT_FPSEG2_MASK) >> FLEXCAN_FDCBT_FPSEG2_SHIFT;
    9290:	9b01      	ldr	r3, [sp, #4]
    9292:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    9296:	f003 0207 	and.w	r2, r3, #7
    929a:	9b00      	ldr	r3, [sp, #0]
    929c:	609a      	str	r2, [r3, #8]
    timeSeg->rJumpwidth = ((base->FDCBT) & FLEXCAN_FDCBT_FRJW_MASK) >> FLEXCAN_FDCBT_FRJW_SHIFT;
    929e:	9b01      	ldr	r3, [sp, #4]
    92a0:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
    92a4:	0c1b      	lsrs	r3, r3, #16
    92a6:	f003 0207 	and.w	r2, r3, #7
    92aa:	9b00      	ldr	r3, [sp, #0]
    92ac:	611a      	str	r2, [r3, #16]
}
    92ae:	bf00      	nop
    92b0:	b002      	add	sp, #8
    92b2:	4770      	bx	lr

000092b4 <FlexCAN_IsExCbtEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsExCbtEnabled(const FLEXCAN_Type * pBase)
{
    92b4:	b082      	sub	sp, #8
    92b6:	9001      	str	r0, [sp, #4]
    return (0U == ((pBase->CBT & FLEXCAN_CBT_BTF_MASK) >> FLEXCAN_CBT_BTF_SHIFT)) ? FALSE : TRUE;
    92b8:	9b01      	ldr	r3, [sp, #4]
    92ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    92bc:	0fdb      	lsrs	r3, r3, #31
    92be:	b2db      	uxtb	r3, r3
}
    92c0:	4618      	mov	r0, r3
    92c2:	b002      	add	sp, #8
    92c4:	4770      	bx	lr

000092c6 <FlexCAN_EnableExtCbt>:
 *
 * @param   base    The FlexCAN base address
 * @param   enableCBT Enable/Disable use of Extent Time Segments
 */
static inline void FlexCAN_EnableExtCbt(FLEXCAN_Type * base, boolean enableCBT)
{   /* Enable the use of extended bit time definitions */
    92c6:	b082      	sub	sp, #8
    92c8:	9001      	str	r0, [sp, #4]
    92ca:	460b      	mov	r3, r1
    92cc:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CBT = (base->CBT & ~FLEXCAN_CBT_BTF_MASK) | FLEXCAN_CBT_BTF(enableCBT ? 1UL : 0UL);
    92d0:	9b01      	ldr	r3, [sp, #4]
    92d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    92d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    92d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    92dc:	2a00      	cmp	r2, #0
    92de:	d002      	beq.n	92e6 <FlexCAN_EnableExtCbt+0x20>
    92e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    92e4:	e000      	b.n	92e8 <FlexCAN_EnableExtCbt+0x22>
    92e6:	2200      	movs	r2, #0
    92e8:	431a      	orrs	r2, r3
    92ea:	9b01      	ldr	r3, [sp, #4]
    92ec:	651a      	str	r2, [r3, #80]	; 0x50
}
    92ee:	bf00      	nop
    92f0:	b002      	add	sp, #8
    92f2:	4770      	bx	lr

000092f4 <FlexCAN_SetSelfReception>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Enable/Disable Self Reception
 */
static inline void FlexCAN_SetSelfReception(FLEXCAN_Type * base, boolean enable)
{
    92f4:	b082      	sub	sp, #8
    92f6:	9001      	str	r0, [sp, #4]
    92f8:	460b      	mov	r3, r1
    92fa:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    92fe:	9b01      	ldr	r3, [sp, #4]
    9300:	681b      	ldr	r3, [r3, #0]
    9302:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    9306:	f89d 2003 	ldrb.w	r2, [sp, #3]
    930a:	2a00      	cmp	r2, #0
    930c:	d001      	beq.n	9312 <FlexCAN_SetSelfReception+0x1e>
    930e:	2200      	movs	r2, #0
    9310:	e001      	b.n	9316 <FlexCAN_SetSelfReception+0x22>
    9312:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9316:	431a      	orrs	r2, r3
    9318:	9b01      	ldr	r3, [sp, #4]
    931a:	601a      	str	r2, [r3, #0]
}
    931c:	bf00      	nop
    931e:	b002      	add	sp, #8
    9320:	4770      	bx	lr

00009322 <FlexCAN_IsFDEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsFDEnabled(const FLEXCAN_Type * base)
{
    9322:	b082      	sub	sp, #8
    9324:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    9326:	9b01      	ldr	r3, [sp, #4]
    9328:	681b      	ldr	r3, [r3, #0]
    932a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    932e:	2b00      	cmp	r3, #0
    9330:	bf14      	ite	ne
    9332:	2301      	movne	r3, #1
    9334:	2300      	moveq	r3, #0
    9336:	b2db      	uxtb	r3, r3
}
    9338:	4618      	mov	r0, r3
    933a:	b002      	add	sp, #8
    933c:	4770      	bx	lr

0000933e <FlexCAN_IsListenOnlyModeEnabled>:
 *
 * @param   base    The FlexCAN base address
 * @return  TRUE if enabled; FALSE if disabled
 */
static inline boolean FlexCAN_IsListenOnlyModeEnabled(const FLEXCAN_Type * base)
{
    933e:	b082      	sub	sp, #8
    9340:	9001      	str	r0, [sp, #4]
    return (((base->CTRL1 & (FLEXCAN_CTRL1_LOM_MASK)) != 0U) ? TRUE : FALSE);
    9342:	9b01      	ldr	r3, [sp, #4]
    9344:	685b      	ldr	r3, [r3, #4]
    9346:	f003 0308 	and.w	r3, r3, #8
    934a:	2b00      	cmp	r3, #0
    934c:	bf14      	ite	ne
    934e:	2301      	movne	r3, #1
    9350:	2300      	moveq	r3, #0
    9352:	b2db      	uxtb	r3, r3
}
    9354:	4618      	mov	r0, r3
    9356:	b002      	add	sp, #8
    9358:	4770      	bx	lr

0000935a <RxFifoOcuppiedLastMsgBuff>:
 *
 * @param   x    Number of Configured RxFIFO Filters
 * @return  number of last MB occupied by RxFIFO
 */
static inline uint32 RxFifoOcuppiedLastMsgBuff(uint8 x)
{
    935a:	b082      	sub	sp, #8
    935c:	4603      	mov	r3, r0
    935e:	f88d 3007 	strb.w	r3, [sp, #7]
    return 5U + (((((uint32)x) + 1U) * 8U) / 4U);
    9362:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9366:	3301      	adds	r3, #1
    9368:	00db      	lsls	r3, r3, #3
    936a:	089b      	lsrs	r3, r3, #2
    936c:	3305      	adds	r3, #5
}
    936e:	4618      	mov	r0, r3
    9370:	b002      	add	sp, #8
    9372:	4770      	bx	lr

00009374 <FlexCAN_SetClkSrc>:
 *
 * @param   base  The FlexCAN base address
 * @param   enable Specifies if The CAN engine clock source is the oscillator clock(FALSE) or peripheral clock(TRUE).
 */
static inline void FlexCAN_SetClkSrc(FLEXCAN_Type * base, boolean enable)
{
    9374:	b082      	sub	sp, #8
    9376:	9001      	str	r0, [sp, #4]
    9378:	460b      	mov	r3, r1
    937a:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_CLKSRC_MASK) | FLEXCAN_CTRL1_CLKSRC(enable ? 1UL : 0UL);
    937e:	9b01      	ldr	r3, [sp, #4]
    9380:	685b      	ldr	r3, [r3, #4]
    9382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    9386:	f89d 2003 	ldrb.w	r2, [sp, #3]
    938a:	2a00      	cmp	r2, #0
    938c:	d002      	beq.n	9394 <FlexCAN_SetClkSrc+0x20>
    938e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    9392:	e000      	b.n	9396 <FlexCAN_SetClkSrc+0x22>
    9394:	2200      	movs	r2, #0
    9396:	431a      	orrs	r2, r3
    9398:	9b01      	ldr	r3, [sp, #4]
    939a:	605a      	str	r2, [r3, #4]
}
    939c:	bf00      	nop
    939e:	b002      	add	sp, #8
    93a0:	4770      	bx	lr

000093a2 <FlexCAN_GetMsgBuffIntStatusFlag>:
 * @param   base  The FlexCAN base address
 * @param   msgBuffIdx       Index of the message buffer
 * @return  the individual Message Buffer interrupt flag (0 and 1 are the flag value)
 */
static inline uint8 FlexCAN_GetMsgBuffIntStatusFlag(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    93a2:	b084      	sub	sp, #16
    93a4:	9001      	str	r0, [sp, #4]
    93a6:	9100      	str	r1, [sp, #0]
    /* TODO: This need to be protected multithread access*/
    uint8 flag = 0;
    93a8:	2300      	movs	r3, #0
    93aa:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 mask;

    if (msgBuffIdx < 32U)
    93ae:	9b00      	ldr	r3, [sp, #0]
    93b0:	2b1f      	cmp	r3, #31
    93b2:	d810      	bhi.n	93d6 <FlexCAN_GetMsgBuffIntStatusFlag+0x34>
    {
        mask = base->IMASK1 & FLEXCAN_IMASK1_BUF31TO0M_MASK;
    93b4:	9b01      	ldr	r3, [sp, #4]
    93b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    93b8:	9302      	str	r3, [sp, #8]
        flag = (uint8)(((base->IFLAG1 & mask) >> (msgBuffIdx % 32U)) & 1U);
    93ba:	9b01      	ldr	r3, [sp, #4]
    93bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    93be:	9b02      	ldr	r3, [sp, #8]
    93c0:	401a      	ands	r2, r3
    93c2:	9b00      	ldr	r3, [sp, #0]
    93c4:	f003 031f 	and.w	r3, r3, #31
    93c8:	fa22 f303 	lsr.w	r3, r2, r3
    93cc:	b2db      	uxtb	r3, r3
    93ce:	f003 0301 	and.w	r3, r3, #1
    93d2:	f88d 300f 	strb.w	r3, [sp, #15]
        mask = base->IMASK4 & FLEXCAN_IMASK4_BUF127TO96M_MASK;
        flag = (uint8)(((base->IFLAG4 & mask) >> (msgBuffIdx % 32U)) & 1U);
    }
#endif

    return flag;
    93d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    93da:	4618      	mov	r0, r3
    93dc:	b004      	add	sp, #16
    93de:	4770      	bx	lr

000093e0 <FlexCAN_SetRxMsgBuffGlobalMask>:
 *
 * @param   base  The FlexCAN base address
 * @param   Mask  Mask Value
 */
static inline void FlexCAN_SetRxMsgBuffGlobalMask(FLEXCAN_Type * base, uint32 Mask)
{
    93e0:	b082      	sub	sp, #8
    93e2:	9001      	str	r0, [sp, #4]
    93e4:	9100      	str	r1, [sp, #0]
    (base->RXMGMASK) = Mask;
    93e6:	9b01      	ldr	r3, [sp, #4]
    93e8:	9a00      	ldr	r2, [sp, #0]
    93ea:	611a      	str	r2, [r3, #16]
}
    93ec:	bf00      	nop
    93ee:	b002      	add	sp, #8
    93f0:	4770      	bx	lr

000093f2 <FlexCAN_SetRxIndividualMask>:
 */
static inline void FlexCAN_SetRxIndividualMask(FLEXCAN_Type * base,
                                               uint32 msgBuffIdx,
                                               uint32 mask
                                              )
{
    93f2:	b084      	sub	sp, #16
    93f4:	9003      	str	r0, [sp, #12]
    93f6:	9102      	str	r1, [sp, #8]
    93f8:	9201      	str	r2, [sp, #4]
    base->RXIMR[msgBuffIdx] = mask;
    93fa:	9b03      	ldr	r3, [sp, #12]
    93fc:	9a02      	ldr	r2, [sp, #8]
    93fe:	f502 7208 	add.w	r2, r2, #544	; 0x220
    9402:	9901      	ldr	r1, [sp, #4]
    9404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    9408:	bf00      	nop
    940a:	b004      	add	sp, #16
    940c:	4770      	bx	lr

0000940e <FlexCAN_SetTxArbitrationStartDelay>:
 *
 * @param   base  The FlexCAN base address
 * @param   tasd  The Tx arbitration start delay value
 */
static inline void FlexCAN_SetTxArbitrationStartDelay(FLEXCAN_Type * base, uint8 tasd)
{
    940e:	b082      	sub	sp, #8
    9410:	9001      	str	r0, [sp, #4]
    9412:	460b      	mov	r3, r1
    9414:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_TASD_MASK) | FLEXCAN_CTRL2_TASD(tasd);
    9418:	9b01      	ldr	r3, [sp, #4]
    941a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    941c:	f423 0278 	bic.w	r2, r3, #16252928	; 0xf80000
    9420:	f89d 3003 	ldrb.w	r3, [sp, #3]
    9424:	04db      	lsls	r3, r3, #19
    9426:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
    942a:	431a      	orrs	r2, r3
    942c:	9b01      	ldr	r3, [sp, #4]
    942e:	635a      	str	r2, [r3, #52]	; 0x34
}
    9430:	bf00      	nop
    9432:	b002      	add	sp, #8
    9434:	4770      	bx	lr

00009436 <FlexCAN_SetRxMaskType>:
 *
 * @param   base  The FlexCAN base address
 * @param   type         The FlexCAN Rx mask type
 */
static inline void FlexCAN_SetRxMaskType(FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
    9436:	b082      	sub	sp, #8
    9438:	9001      	str	r0, [sp, #4]
    943a:	9100      	str	r1, [sp, #0]
    /* Set RX masking type (RX global mask or RX individual mask)*/
    if (FLEXCAN_RX_MASK_GLOBAL == type)
    943c:	9b00      	ldr	r3, [sp, #0]
    943e:	2b00      	cmp	r3, #0
    9440:	d106      	bne.n	9450 <FlexCAN_SetRxMaskType+0x1a>
    {
        /* Enable Global RX masking */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(0U);
    9442:	9b01      	ldr	r3, [sp, #4]
    9444:	681b      	ldr	r3, [r3, #0]
    9446:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
    944a:	9b01      	ldr	r3, [sp, #4]
    944c:	601a      	str	r2, [r3, #0]
    else
    {
        /* Enable Individual Rx Masking and Queue */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    }
}
    944e:	e005      	b.n	945c <FlexCAN_SetRxMaskType+0x26>
        base->MCR = (base->MCR & ~FLEXCAN_MCR_IRMQ_MASK) | FLEXCAN_MCR_IRMQ(1U);
    9450:	9b01      	ldr	r3, [sp, #4]
    9452:	681b      	ldr	r3, [r3, #0]
    9454:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
    9458:	9b01      	ldr	r3, [sp, #4]
    945a:	601a      	str	r2, [r3, #0]
}
    945c:	bf00      	nop
    945e:	b002      	add	sp, #8
    9460:	4770      	bx	lr

00009462 <FlexCAN_SetRegDefaultVal>:
 * @brief Will set Flexcan Peripheral Register to default val.
 *
 * @param   base    The FlexCAN base address
 */
static inline void FlexCAN_SetRegDefaultVal(FLEXCAN_Type * base)
{
    9462:	b500      	push	{lr}
    9464:	b083      	sub	sp, #12
    9466:	9001      	str	r0, [sp, #4]
        base->ERFCR = FLEXCAN_IP_ERFCR_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    9468:	9801      	ldr	r0, [sp, #4]
    946a:	f002 ff85 	bl	c378 <FlexCAN_IsFDAvailable>
    946e:	4603      	mov	r3, r0
    9470:	2b00      	cmp	r3, #0
    9472:	d007      	beq.n	9484 <FlexCAN_SetRegDefaultVal+0x22>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    9474:	9b01      	ldr	r3, [sp, #4]
    9476:	2200      	movs	r2, #0
    9478:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    947c:	9b01      	ldr	r3, [sp, #4]
    947e:	4a12      	ldr	r2, [pc, #72]	; (94c8 <FlexCAN_SetRegDefaultVal+0x66>)
    9480:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    {
        base->IFLAG2 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
        base->IMASK2 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */
    base->IFLAG1 = FLEXCAN_IP_IFLAG_DEFAULT_VALUE_U32;
    9484:	9b01      	ldr	r3, [sp, #4]
    9486:	f04f 32ff 	mov.w	r2, #4294967295
    948a:	631a      	str	r2, [r3, #48]	; 0x30
    base->IMASK1 = FLEXCAN_IP_IMASK_DEFAULT_VALUE_U32;
    948c:	9b01      	ldr	r3, [sp, #4]
    948e:	2200      	movs	r2, #0
    9490:	629a      	str	r2, [r3, #40]	; 0x28
    base->CBT = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    9492:	9b01      	ldr	r3, [sp, #4]
    9494:	2200      	movs	r2, #0
    9496:	651a      	str	r2, [r3, #80]	; 0x50
    base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    9498:	9b01      	ldr	r3, [sp, #4]
    949a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    949e:	635a      	str	r2, [r3, #52]	; 0x34
    base->ESR1 = FLEXCAN_IP_ESR1_DEFAULT_VALUE_U32;
    94a0:	9b01      	ldr	r3, [sp, #4]
    94a2:	4a0a      	ldr	r2, [pc, #40]	; (94cc <FlexCAN_SetRegDefaultVal+0x6a>)
    94a4:	621a      	str	r2, [r3, #32]
    base->ECR = FLEXCAN_IP_ECR_DEFAULT_VALUE_U32;
    94a6:	9b01      	ldr	r3, [sp, #4]
    94a8:	2200      	movs	r2, #0
    94aa:	61da      	str	r2, [r3, #28]
    base->TIMER = FLEXCAN_IP_TIMER_DEFAULT_VALUE_U32;
    94ac:	9b01      	ldr	r3, [sp, #4]
    94ae:	2200      	movs	r2, #0
    94b0:	609a      	str	r2, [r3, #8]
    base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    94b2:	9b01      	ldr	r3, [sp, #4]
    94b4:	2200      	movs	r2, #0
    94b6:	605a      	str	r2, [r3, #4]
    base->EPRS  = FLEXCAN_IP_EPRS_DEFAULT_VALUE_U32;
    base->ENCBT = FLEXCAN_IP_ENCBT_DEFAULT_VALUE_U32;
    base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
    base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
    base->MCR = FLEXCAN_IP_MCR_DEFAULT_VALUE_U32;
    94b8:	9b01      	ldr	r3, [sp, #4]
    94ba:	4a05      	ldr	r2, [pc, #20]	; (94d0 <FlexCAN_SetRegDefaultVal+0x6e>)
    94bc:	601a      	str	r2, [r3, #0]
}
    94be:	bf00      	nop
    94c0:	b003      	add	sp, #12
    94c2:	f85d fb04 	ldr.w	pc, [sp], #4
    94c6:	bf00      	nop
    94c8:	80004100 	.word	0x80004100
    94cc:	0003b006 	.word	0x0003b006
    94d0:	d890000f 	.word	0xd890000f

000094d4 <FlexCAN_InitRxFifo>:
 * Description   : Initialize fifo and dma if requested.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitRxFifo(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    94d4:	b500      	push	{lr}
    94d6:	b085      	sub	sp, #20
    94d8:	9001      	str	r0, [sp, #4]
    94da:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    94dc:	2300      	movs	r3, #0
    94de:	9303      	str	r3, [sp, #12]

    /* Enable RxFIFO feature, if requested. This might fail if the FD mode is enabled. */
    if (Flexcan_Ip_pData->is_rx_fifo_needed)
    94e0:	9b00      	ldr	r3, [sp, #0]
    94e2:	7a1b      	ldrb	r3, [r3, #8]
    94e4:	2b00      	cmp	r3, #0
    94e6:	d006      	beq.n	94f6 <FlexCAN_InitRxFifo+0x22>
    {
        eResult = FlexCAN_EnableRxFifo(pBase, (uint32)Flexcan_Ip_pData->num_id_filters);
    94e8:	9b00      	ldr	r3, [sp, #0]
    94ea:	685b      	ldr	r3, [r3, #4]
    94ec:	4619      	mov	r1, r3
    94ee:	9801      	ldr	r0, [sp, #4]
    94f0:	f002 fefe 	bl	c2f0 <FlexCAN_EnableRxFifo>
    94f4:	9003      	str	r0, [sp, #12]
        FlexCAN_SetRxFifoDMA(pBase, FALSE);
    }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    return eResult;
    94f6:	9b03      	ldr	r3, [sp, #12]
}
    94f8:	4618      	mov	r0, r3
    94fa:	b005      	add	sp, #20
    94fc:	f85d fb04 	ldr.w	pc, [sp], #4

00009500 <FlexCAN_InitCtroll>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitCtroll(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    9500:	b500      	push	{lr}
    9502:	b085      	sub	sp, #20
    9504:	9001      	str	r0, [sp, #4]
    9506:	9100      	str	r1, [sp, #0]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    9508:	2300      	movs	r3, #0
    950a:	9303      	str	r3, [sp, #12]
    /* Disable the self reception feature if FlexCAN is not in loopback mode. */
    if (Flexcan_Ip_pData->flexcanMode != FLEXCAN_LOOPBACK_MODE)
    950c:	9b00      	ldr	r3, [sp, #0]
    950e:	68db      	ldr	r3, [r3, #12]
    9510:	2b02      	cmp	r3, #2
    9512:	d003      	beq.n	951c <FlexCAN_InitCtroll+0x1c>
    {
        FlexCAN_SetSelfReception(pBase, FALSE);
    9514:	2100      	movs	r1, #0
    9516:	9801      	ldr	r0, [sp, #4]
    9518:	f7ff feec 	bl	92f4 <FlexCAN_SetSelfReception>
    }

    /* Init legacy fifo, enhanced fifo if requested. */
    eResult = FlexCAN_InitRxFifo(pBase, Flexcan_Ip_pData);
    951c:	9900      	ldr	r1, [sp, #0]
    951e:	9801      	ldr	r0, [sp, #4]
    9520:	f7ff ffd8 	bl	94d4 <FlexCAN_InitRxFifo>
    9524:	9003      	str	r0, [sp, #12]
    if (eResult != FLEXCAN_STATUS_SUCCESS)
    9526:	9b03      	ldr	r3, [sp, #12]
    9528:	2b00      	cmp	r3, #0
    952a:	d006      	beq.n	953a <FlexCAN_InitCtroll+0x3a>
    {
        /* To enter Disable Mode requires FreezMode first */
        (void)FlexCAN_EnterFreezeMode(pBase);
    952c:	9801      	ldr	r0, [sp, #4]
    952e:	f002 fd03 	bl	bf38 <FlexCAN_EnterFreezeMode>
        (void)FlexCAN_Disable(pBase);
    9532:	9801      	ldr	r0, [sp, #4]
    9534:	f002 fdca 	bl	c0cc <FlexCAN_Disable>
    9538:	e00b      	b.n	9552 <FlexCAN_InitCtroll+0x52>
    }
    else
    {
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set payload size. */
        FlexCAN_SetPayloadSize(pBase, &Flexcan_Ip_pData->payload);
    953a:	9b00      	ldr	r3, [sp, #0]
    953c:	3314      	adds	r3, #20
    953e:	4619      	mov	r1, r3
    9540:	9801      	ldr	r0, [sp, #4]
    9542:	f002 ff3b 	bl	c3bc <FlexCAN_SetPayloadSize>
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
            (void)FlexCAN_Disable(pBase);
        }
    #else
        (void)FlexCAN_SetMaxMsgBuffNum(pBase, Flexcan_Ip_pData->max_num_mb);
    9546:	9b00      	ldr	r3, [sp, #0]
    9548:	681b      	ldr	r3, [r3, #0]
    954a:	4619      	mov	r1, r3
    954c:	9801      	ldr	r0, [sp, #4]
    954e:	f003 fab7 	bl	cac0 <FlexCAN_SetMaxMsgBuffNum>
    #endif /* FLEXCAN_IP_DEV_ERROR_DETECT */
    }
    return eResult;
    9552:	9b03      	ldr	r3, [sp, #12]
}
    9554:	4618      	mov	r0, r3
    9556:	b005      	add	sp, #20
    9558:	f85d fb04 	ldr.w	pc, [sp], #4

0000955c <FlexCAN_InitController>:
 * Description   : Initialize basically controller.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_InitController(uint8 Instance, FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    955c:	b500      	push	{lr}
    955e:	b087      	sub	sp, #28
    9560:	4603      	mov	r3, r0
    9562:	9102      	str	r1, [sp, #8]
    9564:	9201      	str	r2, [sp, #4]
    9566:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    956a:	2300      	movs	r3, #0
    956c:	9305      	str	r3, [sp, #20]

    if (FlexCAN_IsEnabled(pBase))
    956e:	9802      	ldr	r0, [sp, #8]
    9570:	f7ff fd0c 	bl	8f8c <FlexCAN_IsEnabled>
    9574:	4603      	mov	r3, r0
    9576:	2b00      	cmp	r3, #0
    9578:	d00a      	beq.n	9590 <FlexCAN_InitController+0x34>
    {
        /* To enter Disable Mode requires FreezMode first */
        eResult = FlexCAN_EnterFreezeMode(pBase);
    957a:	9802      	ldr	r0, [sp, #8]
    957c:	f002 fcdc 	bl	bf38 <FlexCAN_EnterFreezeMode>
    9580:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == eResult)
    9582:	9b05      	ldr	r3, [sp, #20]
    9584:	2b00      	cmp	r3, #0
    9586:	d103      	bne.n	9590 <FlexCAN_InitController+0x34>
        {
            eResult = FlexCAN_Disable(pBase);
    9588:	9802      	ldr	r0, [sp, #8]
    958a:	f002 fd9f 	bl	c0cc <FlexCAN_Disable>
    958e:	9005      	str	r0, [sp, #20]
        }
    }

    if (FLEXCAN_STATUS_SUCCESS == eResult)
    9590:	9b05      	ldr	r3, [sp, #20]
    9592:	2b00      	cmp	r3, #0
    9594:	d137      	bne.n	9606 <FlexCAN_InitController+0xaa>
    {
    #if (FLEXCAN_IP_FEATURE_HAS_PE_CLKSRC_SELECT == STD_ON)
        /* Select a source clock for the FlexCAN engine */
        FlexCAN_SetClkSrc(pBase, Flexcan_Ip_pData->is_pe_clock);
    9596:	9b01      	ldr	r3, [sp, #4]
    9598:	7e5b      	ldrb	r3, [r3, #25]
    959a:	4619      	mov	r1, r3
    959c:	9802      	ldr	r0, [sp, #8]
    959e:	f7ff fee9 	bl	9374 <FlexCAN_SetClkSrc>
    #endif
        /* Enable FlexCAN Module need to perform SoftReset & ClearRam */
        pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    95a2:	9b02      	ldr	r3, [sp, #8]
    95a4:	681b      	ldr	r3, [r3, #0]
    95a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    95aa:	9b02      	ldr	r3, [sp, #8]
    95ac:	601a      	str	r2, [r3, #0]
        /* Initialize FLEXCAN device */
        eResult = FlexCAN_Init(pBase);
    95ae:	9802      	ldr	r0, [sp, #8]
    95b0:	f002 fe28 	bl	c204 <FlexCAN_Init>
    95b4:	9005      	str	r0, [sp, #20]
        if (eResult != FLEXCAN_STATUS_SUCCESS)
    95b6:	9b05      	ldr	r3, [sp, #20]
    95b8:	2b00      	cmp	r3, #0
    95ba:	d006      	beq.n	95ca <FlexCAN_InitController+0x6e>
        {
            /* To enter Disable Mode requires FreezMode first */
            (void)FlexCAN_EnterFreezeMode(pBase);
    95bc:	9802      	ldr	r0, [sp, #8]
    95be:	f002 fcbb 	bl	bf38 <FlexCAN_EnterFreezeMode>
            (void)FlexCAN_Disable(pBase);
    95c2:	9802      	ldr	r0, [sp, #8]
    95c4:	f002 fd82 	bl	c0cc <FlexCAN_Disable>
    95c8:	e01d      	b.n	9606 <FlexCAN_InitController+0xaa>
            /* Disable the Protection again because is enabled by soft reset */
            FlexCAN_DisableMemErrorDetection(pBase);
        #endif

        #if defined(CAN_FEATURE_S32K1XX)
            if (TRUE == FlexCAN_IsFDAvailable(pBase))
    95ca:	9802      	ldr	r0, [sp, #8]
    95cc:	f002 fed4 	bl	c378 <FlexCAN_IsFDAvailable>
    95d0:	4603      	mov	r3, r0
    95d2:	2b00      	cmp	r3, #0
    95d4:	d007      	beq.n	95e6 <FlexCAN_InitController+0x8a>
            {
        #endif /* defined(CAN_FEATURE_S32K1XX) */
                /* Enable/Disable FD and check FD was set as expected. Setting FD as enabled
                 * might fail if the current CAN instance does not support FD. */
                FlexCAN_SetFDEnabled(pBase, Flexcan_Ip_pData->fd_enable, Flexcan_Ip_pData->bitRateSwitch);
    95d6:	9b01      	ldr	r3, [sp, #4]
    95d8:	7e19      	ldrb	r1, [r3, #24]
    95da:	9b01      	ldr	r3, [sp, #4]
    95dc:	7edb      	ldrb	r3, [r3, #27]
    95de:	461a      	mov	r2, r3
    95e0:	9802      	ldr	r0, [sp, #8]
    95e2:	f7ff fcdd 	bl	8fa0 <FlexCAN_SetFDEnabled>
                }*/
        #if defined(CAN_FEATURE_S32K1XX)
            }
        #endif /* defined(CAN_FEATURE_S32K1XX) */
            /* configure depends on controller options. */
            FlexCAN_ConfigCtrlOptions(pBase, Flexcan_Ip_pData->ctrlOptions);
    95e6:	9b01      	ldr	r3, [sp, #4]
    95e8:	691b      	ldr	r3, [r3, #16]
    95ea:	4619      	mov	r1, r3
    95ec:	9802      	ldr	r0, [sp, #8]
    95ee:	f003 fdeb 	bl	d1c8 <FlexCAN_ConfigCtrlOptions>
            /* reset Imask buffers */
            FlexCAN_ResetImaskBuff(Instance);
    95f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    95f6:	4618      	mov	r0, r3
    95f8:	f003 fe56 	bl	d2a8 <FlexCAN_ResetImaskBuff>
            eResult = FlexCAN_InitCtroll(pBase, Flexcan_Ip_pData);
    95fc:	9901      	ldr	r1, [sp, #4]
    95fe:	9802      	ldr	r0, [sp, #8]
    9600:	f7ff ff7e 	bl	9500 <FlexCAN_InitCtroll>
    9604:	9005      	str	r0, [sp, #20]
        }
    }
    return eResult;
    9606:	9b05      	ldr	r3, [sp, #20]
}
    9608:	4618      	mov	r0, r3
    960a:	b007      	add	sp, #28
    960c:	f85d fb04 	ldr.w	pc, [sp], #4

00009610 <FlexCAN_InitBaudrate>:
 * Description   : Init baudrate for given controller.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_InitBaudrate(FLEXCAN_Type * pBase, const Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
    9610:	b500      	push	{lr}
    9612:	b083      	sub	sp, #12
    9614:	9001      	str	r0, [sp, #4]
    9616:	9100      	str	r1, [sp, #0]
    /* Enable the use of extended bit time definitions */
    FlexCAN_EnableExtCbt(pBase, Flexcan_Ip_pData->fd_enable);
    9618:	9b00      	ldr	r3, [sp, #0]
    961a:	7e1b      	ldrb	r3, [r3, #24]
    961c:	4619      	mov	r1, r3
    961e:	9801      	ldr	r0, [sp, #4]
    9620:	f7ff fe51 	bl	92c6 <FlexCAN_EnableExtCbt>
        /* Disable Enhanced CBT time segments */
        pBase->CTRL2 &= ~FLEXCAN_CTRL2_BTE_MASK;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Set bit rate. */
        if (Flexcan_Ip_pData->fd_enable)
    9624:	9b00      	ldr	r3, [sp, #0]
    9626:	7e1b      	ldrb	r3, [r3, #24]
    9628:	2b00      	cmp	r3, #0
    962a:	d00c      	beq.n	9646 <FlexCAN_InitBaudrate+0x36>
        {
            /* Write Normal bit time configuration to CBT register */
            FlexCAN_SetExtendedTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    962c:	9b00      	ldr	r3, [sp, #0]
    962e:	331c      	adds	r3, #28
    9630:	4619      	mov	r1, r3
    9632:	9801      	ldr	r0, [sp, #4]
    9634:	f7ff fd94 	bl	9160 <FlexCAN_SetExtendedTimeSegments>
            /* Write Data bit time configuration to FDCBT register */
            FlexCAN_SetFDTimeSegments(pBase, &Flexcan_Ip_pData->bitrate_cbt);
    9638:	9b00      	ldr	r3, [sp, #0]
    963a:	3330      	adds	r3, #48	; 0x30
    963c:	4619      	mov	r1, r3
    963e:	9801      	ldr	r0, [sp, #4]
    9640:	f7ff fd2d 	bl	909e <FlexCAN_SetFDTimeSegments>
            /* Write Normal bit time configuration to CTRL1 register */
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
        }
#endif
    }
}
    9644:	e005      	b.n	9652 <FlexCAN_InitBaudrate+0x42>
            FlexCAN_SetTimeSegments(pBase, &Flexcan_Ip_pData->bitrate);
    9646:	9b00      	ldr	r3, [sp, #0]
    9648:	331c      	adds	r3, #28
    964a:	4619      	mov	r1, r3
    964c:	9801      	ldr	r0, [sp, #4]
    964e:	f7ff fd5b 	bl	9108 <FlexCAN_SetTimeSegments>
}
    9652:	bf00      	nop
    9654:	b003      	add	sp, #12
    9656:	f85d fb04 	ldr.w	pc, [sp], #4

0000965a <FlexCAN_ProccessLegacyRxFIFO>:
 * Description   : This function will process the enhanced RxFIFO in blocking mode.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_ProccessLegacyRxFIFO(uint8 u8Instance, uint32 u32TimeoutMs)
{
    965a:	b500      	push	{lr}
    965c:	b08d      	sub	sp, #52	; 0x34
    965e:	4603      	mov	r3, r0
    9660:	9102      	str	r1, [sp, #8]
    9662:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    9666:	2300      	movs	r3, #0
    9668:	930b      	str	r3, [sp, #44]	; 0x2c
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    966a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    966e:	4a46      	ldr	r2, [pc, #280]	; (9788 <FlexCAN_ProccessLegacyRxFIFO+0x12e>)
    9670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9674:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9676:	f89d 300f 	ldrb.w	r3, [sp, #15]
    967a:	4a44      	ldr	r2, [pc, #272]	; (978c <FlexCAN_ProccessLegacyRxFIFO+0x132>)
    967c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9680:	9307      	str	r3, [sp, #28]
    uint32 timeStart = 0U;
    9682:	2300      	movs	r3, #0
    9684:	9305      	str	r3, [sp, #20]
    uint32 timeElapsed = 0U;
    9686:	2300      	movs	r3, #0
    9688:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    968a:	9b02      	ldr	r3, [sp, #8]
    968c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9690:	fb02 f303 	mul.w	r3, r2, r3
    9694:	2100      	movs	r1, #0
    9696:	4618      	mov	r0, r3
    9698:	f7f8 fdec 	bl	2274 <OsIf_MicrosToTicks>
    969c:	9006      	str	r0, [sp, #24]
    uint32 u32intType = 0U;
    969e:	2300      	movs	r3, #0
    96a0:	9309      	str	r3, [sp, #36]	; 0x24

        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    96a2:	2000      	movs	r0, #0
    96a4:	f7f8 fd9a 	bl	21dc <OsIf_GetCounter>
    96a8:	4603      	mov	r3, r0
    96aa:	9305      	str	r3, [sp, #20]

        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    96ac:	e02a      	b.n	9704 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
        {
            if (FLEXCAN_RXFIFO_USING_POLLING == pState->transferType)
    96ae:	9b08      	ldr	r3, [sp, #32]
    96b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    96b4:	2b01      	cmp	r3, #1
    96b6:	d115      	bne.n	96e4 <FlexCAN_ProccessLegacyRxFIFO+0x8a>
            {
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    96b8:	2307      	movs	r3, #7
    96ba:	9309      	str	r3, [sp, #36]	; 0x24
    96bc:	e00f      	b.n	96de <FlexCAN_ProccessLegacyRxFIFO+0x84>
                     u32intType >= FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE; \
                     u32intType--)
                {
                    if (FlexCAN_GetBuffStatusFlag(pBase, u32intType) != 0U)
    96be:	9909      	ldr	r1, [sp, #36]	; 0x24
    96c0:	9807      	ldr	r0, [sp, #28]
    96c2:	f7ff fcd0 	bl	9066 <FlexCAN_GetBuffStatusFlag>
    96c6:	4603      	mov	r3, r0
    96c8:	2b00      	cmp	r3, #0
    96ca:	d005      	beq.n	96d8 <FlexCAN_ProccessLegacyRxFIFO+0x7e>
                    {
                        FlexCAN_IRQHandlerRxFIFO(u8Instance, u32intType);
    96cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    96d0:	9909      	ldr	r1, [sp, #36]	; 0x24
    96d2:	4618      	mov	r0, r3
    96d4:	f000 fb06 	bl	9ce4 <FlexCAN_IRQHandlerRxFIFO>
                     u32intType--)
    96d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    96da:	3b01      	subs	r3, #1
    96dc:	9309      	str	r3, [sp, #36]	; 0x24
                for (u32intType = FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW; \
    96de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    96e0:	2b04      	cmp	r3, #4
    96e2:	d8ec      	bhi.n	96be <FlexCAN_ProccessLegacyRxFIFO+0x64>
                    }
                }
            }

            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    96e4:	ab05      	add	r3, sp, #20
    96e6:	2100      	movs	r1, #0
    96e8:	4618      	mov	r0, r3
    96ea:	f7f8 fd90 	bl	220e <OsIf_GetElapsed>
    96ee:	4602      	mov	r2, r0
    96f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    96f2:	4413      	add	r3, r2
    96f4:	930a      	str	r3, [sp, #40]	; 0x28
            if (timeElapsed >= mS2Ticks)
    96f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    96f8:	9b06      	ldr	r3, [sp, #24]
    96fa:	429a      	cmp	r2, r3
    96fc:	d302      	bcc.n	9704 <FlexCAN_ProccessLegacyRxFIFO+0xaa>
            {
                eResult = FLEXCAN_STATUS_TIMEOUT;
    96fe:	2303      	movs	r3, #3
    9700:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    9702:	e003      	b.n	970c <FlexCAN_ProccessLegacyRxFIFO+0xb2>
        while (FLEXCAN_MB_RX_BUSY == pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9704:	9b08      	ldr	r3, [sp, #32]
    9706:	685b      	ldr	r3, [r3, #4]
    9708:	2b01      	cmp	r3, #1
    970a:	d0d0      	beq.n	96ae <FlexCAN_ProccessLegacyRxFIFO+0x54>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == eResult) && (FLEXCAN_RXFIFO_USING_POLLING != pState->transferType))
    970c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    970e:	2b03      	cmp	r3, #3
    9710:	d125      	bne.n	975e <FlexCAN_ProccessLegacyRxFIFO+0x104>
    9712:	9b08      	ldr	r3, [sp, #32]
    9714:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    9718:	2b01      	cmp	r3, #1
    971a:	d020      	beq.n	975e <FlexCAN_ProccessLegacyRxFIFO+0x104>
        {
            /* Disable RX FIFO interrupts*/
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, pState->isIntActive);
    971c:	9b08      	ldr	r3, [sp, #32]
    971e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9722:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9726:	9300      	str	r3, [sp, #0]
    9728:	2300      	movs	r3, #0
    972a:	2205      	movs	r2, #5
    972c:	9807      	ldr	r0, [sp, #28]
    972e:	f002 feef 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, pState->isIntActive);
    9732:	9b08      	ldr	r3, [sp, #32]
    9734:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9738:	f89d 100f 	ldrb.w	r1, [sp, #15]
    973c:	9300      	str	r3, [sp, #0]
    973e:	2300      	movs	r3, #0
    9740:	2206      	movs	r2, #6
    9742:	9807      	ldr	r0, [sp, #28]
    9744:	f002 fee4 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
            (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, pState->isIntActive);
    9748:	9b08      	ldr	r3, [sp, #32]
    974a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    974e:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9752:	9300      	str	r3, [sp, #0]
    9754:	2300      	movs	r3, #0
    9756:	2207      	movs	r2, #7
    9758:	9807      	ldr	r0, [sp, #28]
    975a:	f002 fed9 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
                (void)Dma_Ip_SetLogicChannelCommand(pState->rxFifoDMAChannel, DMA_IP_CH_CLEAR_HARDWARE_REQUEST);
            }
#endif
        }

        switch (pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    975e:	9b08      	ldr	r3, [sp, #32]
    9760:	685b      	ldr	r3, [r3, #4]
    9762:	2b00      	cmp	r3, #0
    9764:	d005      	beq.n	9772 <FlexCAN_ProccessLegacyRxFIFO+0x118>
    9766:	2b01      	cmp	r3, #1
    9768:	d106      	bne.n	9778 <FlexCAN_ProccessLegacyRxFIFO+0x11e>
        {
            case FLEXCAN_MB_RX_BUSY:
                pState->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    976a:	9b08      	ldr	r3, [sp, #32]
    976c:	2200      	movs	r2, #0
    976e:	605a      	str	r2, [r3, #4]
                break;
    9770:	e005      	b.n	977e <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_IDLE:
                eResult = FLEXCAN_STATUS_SUCCESS;
    9772:	2300      	movs	r3, #0
    9774:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    9776:	e002      	b.n	977e <FlexCAN_ProccessLegacyRxFIFO+0x124>
            case FLEXCAN_MB_DMA_ERROR:
                eResult = FLEXCAN_STATUS_ERROR;
                break;
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
            default:
                eResult = FLEXCAN_STATUS_ERROR;
    9778:	2301      	movs	r3, #1
    977a:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
    977c:	bf00      	nop
        }

    return eResult;
    977e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    9780:	4618      	mov	r0, r3
    9782:	b00d      	add	sp, #52	; 0x34
    9784:	f85d fb04 	ldr.w	pc, [sp], #4
    9788:	1fff8fb8 	.word	0x1fff8fb8
    978c:	000101c4 	.word	0x000101c4

00009790 <FlexCAN_StartRxMessageBufferData>:
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageBufferData(uint8 instance,
                                                              uint8 mb_idx,
                                                              Flexcan_Ip_MsgBuffType * data,
                                                              boolean isPolling
                                                             )
{
    9790:	b084      	sub	sp, #16
    9792:	9200      	str	r2, [sp, #0]
    9794:	461a      	mov	r2, r3
    9796:	4603      	mov	r3, r0
    9798:	f88d 3007 	strb.w	r3, [sp, #7]
    979c:	460b      	mov	r3, r1
    979e:	f88d 3006 	strb.w	r3, [sp, #6]
    97a2:	4613      	mov	r3, r2
    97a4:	f88d 3005 	strb.w	r3, [sp, #5]

    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    97a8:	2300      	movs	r3, #0
    97aa:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    97ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    97b0:	4a15      	ldr	r2, [pc, #84]	; (9808 <FlexCAN_StartRxMessageBufferData+0x78>)
    97b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    97b6:	9302      	str	r3, [sp, #8]
    }
    else
    {
#endif
        /* Start receiving mailbox */
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    97b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97bc:	9a02      	ldr	r2, [sp, #8]
    97be:	011b      	lsls	r3, r3, #4
    97c0:	4413      	add	r3, r2
    97c2:	3304      	adds	r3, #4
    97c4:	681b      	ldr	r3, [r3, #0]
    97c6:	2b00      	cmp	r3, #0
    97c8:	d002      	beq.n	97d0 <FlexCAN_StartRxMessageBufferData+0x40>
        {
            result = FLEXCAN_STATUS_BUSY;
    97ca:	2302      	movs	r3, #2
    97cc:	9303      	str	r3, [sp, #12]
    97ce:	e017      	b.n	9800 <FlexCAN_StartRxMessageBufferData+0x70>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_RX_BUSY;
    97d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97d4:	9a02      	ldr	r2, [sp, #8]
    97d6:	011b      	lsls	r3, r3, #4
    97d8:	4413      	add	r3, r2
    97da:	3304      	adds	r3, #4
    97dc:	2201      	movs	r2, #1
    97de:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].pMBmessage = data;
    97e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97e4:	9a02      	ldr	r2, [sp, #8]
    97e6:	011b      	lsls	r3, r3, #4
    97e8:	4413      	add	r3, r2
    97ea:	9a00      	ldr	r2, [sp, #0]
    97ec:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = isPolling;
    97ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
    97f2:	9a02      	ldr	r2, [sp, #8]
    97f4:	011b      	lsls	r3, r3, #4
    97f6:	4413      	add	r3, r2
    97f8:	3308      	adds	r3, #8
    97fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
    97fe:	701a      	strb	r2, [r3, #0]
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    9800:	9b03      	ldr	r3, [sp, #12]
}
    9802:	4618      	mov	r0, r3
    9804:	b004      	add	sp, #16
    9806:	4770      	bx	lr
    9808:	1fff8fb8 	.word	0x1fff8fb8

0000980c <FlexCAN_StartSendData>:
                                                   uint8 mb_idx,
                                                   const Flexcan_Ip_DataInfoType * tx_info,
                                                   uint32 msg_id,
                                                   const uint8 * mb_data
                                                  )
{
    980c:	b500      	push	{lr}
    980e:	b08f      	sub	sp, #60	; 0x3c
    9810:	9204      	str	r2, [sp, #16]
    9812:	9303      	str	r3, [sp, #12]
    9814:	4603      	mov	r3, r0
    9816:	f88d 3017 	strb.w	r3, [sp, #23]
    981a:	460b      	mov	r3, r1
    981c:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    9820:	2300      	movs	r3, #0
    9822:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[Flexcan_Ip_u8Instance];
    9824:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9828:	4a38      	ldr	r2, [pc, #224]	; (990c <FlexCAN_StartSendData+0x100>)
    982a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    982e:	930c      	str	r3, [sp, #48]	; 0x30
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    9830:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9834:	4a36      	ldr	r2, [pc, #216]	; (9910 <FlexCAN_StartSendData+0x104>)
    9836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    983a:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    983c:	2300      	movs	r3, #0
    983e:	930a      	str	r3, [sp, #40]	; 0x28
        eResult = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
    else
    {
#endif
        if (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE)
    9840:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9846:	011b      	lsls	r3, r3, #4
    9848:	4413      	add	r3, r2
    984a:	3304      	adds	r3, #4
    984c:	681b      	ldr	r3, [r3, #0]
    984e:	2b00      	cmp	r3, #0
    9850:	d002      	beq.n	9858 <FlexCAN_StartSendData+0x4c>
        {
            eResult = FLEXCAN_STATUS_BUSY;
    9852:	2302      	movs	r3, #2
    9854:	930d      	str	r3, [sp, #52]	; 0x34
    9856:	e053      	b.n	9900 <FlexCAN_StartSendData+0xf4>
        }
        else
        {
            /* Clear message buffer flag */
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9858:	f89d 3016 	ldrb.w	r3, [sp, #22]
    985c:	4619      	mov	r1, r3
    985e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9860:	f7ff fbee 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>

            state->mbs[mb_idx].state = FLEXCAN_MB_TX_BUSY;
    9864:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    986a:	011b      	lsls	r3, r3, #4
    986c:	4413      	add	r3, r2
    986e:	3304      	adds	r3, #4
    9870:	2202      	movs	r2, #2
    9872:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].time_stamp = 0U;
    9874:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    987a:	011b      	lsls	r3, r3, #4
    987c:	4413      	add	r3, r2
    987e:	330c      	adds	r3, #12
    9880:	2200      	movs	r2, #0
    9882:	601a      	str	r2, [r3, #0]
            state->mbs[mb_idx].isPolling = tx_info->is_polling;
    9884:	f89d 3016 	ldrb.w	r3, [sp, #22]
    9888:	9a04      	ldr	r2, [sp, #16]
    988a:	7b11      	ldrb	r1, [r2, #12]
    988c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    988e:	011b      	lsls	r3, r3, #4
    9890:	4413      	add	r3, r2
    9892:	3308      	adds	r3, #8
    9894:	460a      	mov	r2, r1
    9896:	701a      	strb	r2, [r3, #0]
            state->mbs[mb_idx].isRemote = tx_info->is_remote;
    9898:	f89d 3016 	ldrb.w	r3, [sp, #22]
    989c:	9a04      	ldr	r2, [sp, #16]
    989e:	7ad1      	ldrb	r1, [r2, #11]
    98a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    98a2:	011b      	lsls	r3, r3, #4
    98a4:	4413      	add	r3, r2
    98a6:	3309      	adds	r3, #9
    98a8:	460a      	mov	r2, r1
    98aa:	701a      	strb	r2, [r3, #0]

            cs.dataLen = tx_info->data_length;
    98ac:	9b04      	ldr	r3, [sp, #16]
    98ae:	685b      	ldr	r3, [r3, #4]
    98b0:	9308      	str	r3, [sp, #32]

            cs.msgIdType = tx_info->msg_id_type;
    98b2:	9b04      	ldr	r3, [sp, #16]
    98b4:	681b      	ldr	r3, [r3, #0]
    98b6:	9307      	str	r3, [sp, #28]

        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            cs.fd_enable = tx_info->fd_enable;
    98b8:	9b04      	ldr	r3, [sp, #16]
    98ba:	7a1b      	ldrb	r3, [r3, #8]
    98bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
            cs.fd_padding = tx_info->fd_padding;
    98c0:	9b04      	ldr	r3, [sp, #16]
    98c2:	7a5b      	ldrb	r3, [r3, #9]
    98c4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
            cs.enable_brs = tx_info->enable_brs;
    98c8:	9b04      	ldr	r3, [sp, #16]
    98ca:	7a9b      	ldrb	r3, [r3, #10]
    98cc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        #endif

            if (tx_info->is_remote)
    98d0:	9b04      	ldr	r3, [sp, #16]
    98d2:	7adb      	ldrb	r3, [r3, #11]
    98d4:	2b00      	cmp	r3, #0
    98d6:	d002      	beq.n	98de <FlexCAN_StartSendData+0xd2>
            {
                cs.code = (uint32)FLEXCAN_TX_REMOTE;
    98d8:	231c      	movs	r3, #28
    98da:	9306      	str	r3, [sp, #24]
    98dc:	e001      	b.n	98e2 <FlexCAN_StartSendData+0xd6>
            }
            else
            {
                cs.code = (uint32)FLEXCAN_TX_DATA;
    98de:	230c      	movs	r3, #12
    98e0:	9306      	str	r3, [sp, #24]
            }
            pMbAddr = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    98e2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    98e6:	4619      	mov	r1, r3
    98e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    98ea:	f002 fa89 	bl	be00 <FlexCAN_GetMsgBuffRegion>
    98ee:	900a      	str	r0, [sp, #40]	; 0x28
            FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, FALSE);
    98f0:	a906      	add	r1, sp, #24
    98f2:	2300      	movs	r3, #0
    98f4:	9300      	str	r3, [sp, #0]
    98f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    98f8:	9a03      	ldr	r2, [sp, #12]
    98fa:	980a      	ldr	r0, [sp, #40]	; 0x28
    98fc:	f002 ffd2 	bl	c8a4 <FlexCAN_SetTxMsgBuff>
        }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    9900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    9902:	4618      	mov	r0, r3
    9904:	b00f      	add	sp, #60	; 0x3c
    9906:	f85d fb04 	ldr.w	pc, [sp], #4
    990a:	bf00      	nop
    990c:	1fff8fb8 	.word	0x1fff8fb8
    9910:	000101c4 	.word	0x000101c4

00009914 <FlexCAN_StartRxMessageFifoData>:
 * receiving data and enabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_StartRxMessageFifoData(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    9914:	b500      	push	{lr}
    9916:	b089      	sub	sp, #36	; 0x24
    9918:	4603      	mov	r3, r0
    991a:	9102      	str	r1, [sp, #8]
    991c:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = NULL_PTR;
    9920:	2300      	movs	r3, #0
    9922:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StateType * state = NULL_PTR;
    9924:	2300      	movs	r3, #0
    9926:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    9928:	2300      	movs	r3, #0
    992a:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base = Flexcan_Ip_apxBase[instance];
    992c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9930:	4a26      	ldr	r2, [pc, #152]	; (99cc <FlexCAN_StartRxMessageFifoData+0xb8>)
    9932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9936:	9306      	str	r3, [sp, #24]
    state = Flexcan_Ip_apxState[instance];
    9938:	f89d 300f 	ldrb.w	r3, [sp, #15]
    993c:	4a24      	ldr	r2, [pc, #144]	; (99d0 <FlexCAN_StartRxMessageFifoData+0xbc>)
    993e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9942:	9305      	str	r3, [sp, #20]
    #endif
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

    /* Start receiving fifo */
    if (state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state == FLEXCAN_MB_RX_BUSY)
    9944:	9b05      	ldr	r3, [sp, #20]
    9946:	685b      	ldr	r3, [r3, #4]
    9948:	2b01      	cmp	r3, #1
    994a:	d102      	bne.n	9952 <FlexCAN_StartRxMessageFifoData+0x3e>
    {
        eResult = FLEXCAN_STATUS_BUSY;
    994c:	2302      	movs	r3, #2
    994e:	9307      	str	r3, [sp, #28]
    9950:	e036      	b.n	99c0 <FlexCAN_StartRxMessageFifoData+0xac>
    }
    else
    {
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_RX_BUSY;
    9952:	9b05      	ldr	r3, [sp, #20]
    9954:	2201      	movs	r2, #1
    9956:	605a      	str	r2, [r3, #4]
    if (FLEXCAN_RXFIFO_USING_POLLING == state->transferType)
    9958:	9b05      	ldr	r3, [sp, #20]
    995a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    995e:	2b01      	cmp	r3, #1
    9960:	d102      	bne.n	9968 <FlexCAN_StartRxMessageFifoData+0x54>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    9962:	9b05      	ldr	r3, [sp, #20]
    9964:	2201      	movs	r2, #1
    9966:	721a      	strb	r2, [r3, #8]
    }

    /* This will get filled by the interrupt handler */
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = data;
    9968:	9b05      	ldr	r3, [sp, #20]
    996a:	9a02      	ldr	r2, [sp, #8]
    996c:	601a      	str	r2, [r3, #0]

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    996e:	9b05      	ldr	r3, [sp, #20]
    9970:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    9974:	2b00      	cmp	r3, #0
    9976:	d123      	bne.n	99c0 <FlexCAN_StartRxMessageFifoData+0xac>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = FALSE;
    9978:	9b05      	ldr	r3, [sp, #20]
    997a:	2200      	movs	r2, #0
    997c:	721a      	strb	r2, [r3, #8]
        /* Enable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, TRUE, state->isIntActive);
    997e:	9b05      	ldr	r3, [sp, #20]
    9980:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9984:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9988:	9300      	str	r3, [sp, #0]
    998a:	2301      	movs	r3, #1
    998c:	2206      	movs	r2, #6
    998e:	9806      	ldr	r0, [sp, #24]
    9990:	f002 fdbe 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, TRUE, state->isIntActive);
    9994:	9b05      	ldr	r3, [sp, #20]
    9996:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    999a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    999e:	9300      	str	r3, [sp, #0]
    99a0:	2301      	movs	r3, #1
    99a2:	2207      	movs	r2, #7
    99a4:	9806      	ldr	r0, [sp, #24]
    99a6:	f002 fdb3 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, TRUE, state->isIntActive);
    99aa:	9b05      	ldr	r3, [sp, #20]
    99ac:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    99b0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    99b4:	9300      	str	r3, [sp, #0]
    99b6:	2301      	movs	r3, #1
    99b8:	2205      	movs	r2, #5
    99ba:	9806      	ldr	r0, [sp, #24]
    99bc:	f002 fda8 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    99c0:	9b07      	ldr	r3, [sp, #28]
}
    99c2:	4618      	mov	r0, r3
    99c4:	b009      	add	sp, #36	; 0x24
    99c6:	f85d fb04 	ldr.w	pc, [sp], #4
    99ca:	bf00      	nop
    99cc:	000101c4 	.word	0x000101c4
    99d0:	1fff8fb8 	.word	0x1fff8fb8

000099d4 <FlexCAN_IRQHandlerRxMB>:
 *
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerRxMB(uint8 instance, uint32 mb_idx)
{
    99d4:	b510      	push	{r4, lr}
    99d6:	b09e      	sub	sp, #120	; 0x78
    99d8:	4603      	mov	r3, r0
    99da:	9102      	str	r1, [sp, #8]
    99dc:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    99e0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    99e4:	4a70      	ldr	r2, [pc, #448]	; (9ba8 <FlexCAN_IRQHandlerRxMB+0x1d4>)
    99e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99ea:	931c      	str	r3, [sp, #112]	; 0x70
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    99ec:	f89d 300f 	ldrb.w	r3, [sp, #15]
    99f0:	4a6e      	ldr	r2, [pc, #440]	; (9bac <FlexCAN_IRQHandlerRxMB+0x1d8>)
    99f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    99f6:	931b      	str	r3, [sp, #108]	; 0x6c
    Flexcan_Ip_MsgBuffType data;
    boolean bCurrentIntStat = FALSE;
    99f8:	2300      	movs	r3, #0
    99fa:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[mb_idx].pMBmessage  */
    if (NULL_PTR == state->mbs[mb_idx].pMBmessage)
    99fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9a00:	9b02      	ldr	r3, [sp, #8]
    9a02:	011b      	lsls	r3, r3, #4
    9a04:	4413      	add	r3, r2
    9a06:	681b      	ldr	r3, [r3, #0]
    9a08:	2b00      	cmp	r3, #0
    9a0a:	d105      	bne.n	9a18 <FlexCAN_IRQHandlerRxMB+0x44>
    {
        state->mbs[mb_idx].pMBmessage = &data;
    9a0c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9a0e:	9b02      	ldr	r3, [sp, #8]
    9a10:	011b      	lsls	r3, r3, #4
    9a12:	4413      	add	r3, r2
    9a14:	aa05      	add	r2, sp, #20
    9a16:	601a      	str	r2, [r3, #0]
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    boolean bIsCriticalSectionNeeded = FALSE;
    9a18:	2300      	movs	r3, #0
    9a1a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77

    /* Expectation: the sequence will not be interrupted when it already in interupt context */
    if (TRUE == state->mbs[mb_idx].isPolling)
    9a1e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9a20:	9b02      	ldr	r3, [sp, #8]
    9a22:	011b      	lsls	r3, r3, #4
    9a24:	4413      	add	r3, r2
    9a26:	3308      	adds	r3, #8
    9a28:	781b      	ldrb	r3, [r3, #0]
    9a2a:	2b00      	cmp	r3, #0
    9a2c:	d008      	beq.n	9a40 <FlexCAN_IRQHandlerRxMB+0x6c>
        if ((state->bIsLegacyFifoEn ||  state->bIsEnhancedFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #else
        if ((state->bIsLegacyFifoEn) && (0U != (base->CTRL2 & FLEXCAN_CTRL2_TSTAMPCAP_MASK)))
        #endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    #elif defined (ERR_IPV_FLEXCAN_E050246)
        if (state->bIsLegacyFifoEn)
    9a2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9a30:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9a34:	2b00      	cmp	r3, #0
    9a36:	d003      	beq.n	9a40 <FlexCAN_IRQHandlerRxMB+0x6c>
    #endif
        {
            bIsCriticalSectionNeeded = TRUE;
    9a38:	2301      	movs	r3, #1
    9a3a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
            /* Disable all IRQs */
            OsIf_SuspendAllInterrupts();
    9a3e:	b672      	cpsid	i
        }
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    /* Lock RX message buffer and RX FIFO*/
    FlexCAN_LockRxMsgBuff(base, mb_idx);
    9a40:	9902      	ldr	r1, [sp, #8]
    9a42:	981c      	ldr	r0, [sp, #112]	; 0x70
    9a44:	f002 fd55 	bl	c4f2 <FlexCAN_LockRxMsgBuff>

    /* Get RX MB field values*/
    FlexCAN_GetMsgBuff(base, mb_idx, state->mbs[mb_idx].pMBmessage);
    9a48:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9a4a:	9b02      	ldr	r3, [sp, #8]
    9a4c:	011b      	lsls	r3, r3, #4
    9a4e:	4413      	add	r3, r2
    9a50:	681b      	ldr	r3, [r3, #0]
    9a52:	461a      	mov	r2, r3
    9a54:	9902      	ldr	r1, [sp, #8]
    9a56:	981c      	ldr	r0, [sp, #112]	; 0x70
    9a58:	f002 fe7a 	bl	c750 <FlexCAN_GetMsgBuff>

    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9a5c:	9902      	ldr	r1, [sp, #8]
    9a5e:	981c      	ldr	r0, [sp, #112]	; 0x70
    9a60:	f7ff faee 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>

#if defined (ERR_IPV_FLEXCAN_E050246)
    /* the CODE field is updated with an incorrect value when MBx is locked by software for more than 20 CAN bit times and FIFO enable.
    When the CODE field is corrupted, it's probably updated with any value that is invalid. Except EMPTY, FULL and OVERRUN other values can not make MB unlocked and move-in process. */
    if ((state->bIsLegacyFifoEn) && \
    9a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9a66:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9a6a:	2b00      	cmp	r3, #0
    9a6c:	d032      	beq.n	9ad4 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9a6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9a70:	9b02      	ldr	r3, [sp, #8]
    9a72:	011b      	lsls	r3, r3, #4
    9a74:	4413      	add	r3, r2
    9a76:	681b      	ldr	r3, [r3, #0]
    9a78:	681b      	ldr	r3, [r3, #0]
    9a7a:	0e1b      	lsrs	r3, r3, #24
    9a7c:	f003 030f 	and.w	r3, r3, #15
    if ((state->bIsLegacyFifoEn) && \
    9a80:	2b02      	cmp	r3, #2
    9a82:	d027      	beq.n	9ad4 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9a84:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9a86:	9b02      	ldr	r3, [sp, #8]
    9a88:	011b      	lsls	r3, r3, #4
    9a8a:	4413      	add	r3, r2
    9a8c:	681b      	ldr	r3, [r3, #0]
    9a8e:	681b      	ldr	r3, [r3, #0]
    9a90:	0e1b      	lsrs	r3, r3, #24
    9a92:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_FULL != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9a96:	2b04      	cmp	r3, #4
    9a98:	d01c      	beq.n	9ad4 <FlexCAN_IRQHandlerRxMB+0x100>
    ((uint32)FLEXCAN_RX_OVERRUN != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)))
    9a9a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9a9c:	9b02      	ldr	r3, [sp, #8]
    9a9e:	011b      	lsls	r3, r3, #4
    9aa0:	4413      	add	r3, r2
    9aa2:	681b      	ldr	r3, [r3, #0]
    9aa4:	681b      	ldr	r3, [r3, #0]
    9aa6:	0e1b      	lsrs	r3, r3, #24
    9aa8:	f003 030f 	and.w	r3, r3, #15
    ((uint32)FLEXCAN_RX_EMPTY != ((state->mbs[mb_idx].pMBmessage->cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT)) && \
    9aac:	2b06      	cmp	r3, #6
    9aae:	d011      	beq.n	9ad4 <FlexCAN_IRQHandlerRxMB+0x100>
    {
        /* Update the cs code for next sequence move in MB.
        A CPU write into the C/S word also unlocks the MB */
        volatile uint32 *flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    9ab0:	9902      	ldr	r1, [sp, #8]
    9ab2:	981c      	ldr	r0, [sp, #112]	; 0x70
    9ab4:	f002 f9a4 	bl	be00 <FlexCAN_GetMsgBuffRegion>
    9ab8:	9019      	str	r0, [sp, #100]	; 0x64
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    9aba:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9abc:	681b      	ldr	r3, [r3, #0]
    9abe:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    9ac2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9ac4:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (((uint32)FLEXCAN_RX_EMPTY) << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    9ac6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9ac8:	681b      	ldr	r3, [r3, #0]
    9aca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
    9ace:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9ad0:	601a      	str	r2, [r3, #0]
    {
    9ad2:	e002      	b.n	9ada <FlexCAN_IRQHandlerRxMB+0x106>
    }
    else
#endif
    {
    /* Unlock RX message buffer and RX FIFO*/
    FlexCAN_UnlockRxMsgBuff(base);
    9ad4:	981c      	ldr	r0, [sp, #112]	; 0x70
    9ad6:	f7ff faac 	bl	9032 <FlexCAN_UnlockRxMsgBuff>
    }

#if (defined (ERR_IPV_FLEXCAN_E050246) || defined (ERR_IPV_FLEXCAN_E050630))
    /* To ensure that interrupts are resumed when they are suspended */
    if (TRUE == bIsCriticalSectionNeeded)
    9ada:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
    9ade:	2b00      	cmp	r3, #0
    9ae0:	d000      	beq.n	9ae4 <FlexCAN_IRQHandlerRxMB+0x110>
    {
        /* Enable all IRQs */
        OsIf_ResumeAllInterrupts();
    9ae2:	b662      	cpsie	i
    }
#endif /* (defined(ERR_IPV_FLEXCAN_E050246) || defined(ERR_IPV_FLEXCAN_E050630)) */

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9ae4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9ae6:	9b02      	ldr	r3, [sp, #8]
    9ae8:	011b      	lsls	r3, r3, #4
    9aea:	4413      	add	r3, r2
    9aec:	3304      	adds	r3, #4
    9aee:	2200      	movs	r2, #0
    9af0:	601a      	str	r2, [r3, #0]

    bCurrentIntStat = state->mbs[mb_idx].isPolling;
    9af2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9af4:	9b02      	ldr	r3, [sp, #8]
    9af6:	011b      	lsls	r3, r3, #4
    9af8:	4413      	add	r3, r2
    9afa:	3308      	adds	r3, #8
    9afc:	781b      	ldrb	r3, [r3, #0]
    9afe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b

    /* Invoke callback */
    if (state->callback != NULL_PTR)
    9b02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9b04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9b08:	2b00      	cmp	r3, #0
    9b0a:	d008      	beq.n	9b1e <FlexCAN_IRQHandlerRxMB+0x14a>
    {
        state->callback(instance, FLEXCAN_EVENT_RX_COMPLETE, mb_idx, state);
    9b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9b0e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9b12:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9b16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9b18:	9a02      	ldr	r2, [sp, #8]
    9b1a:	2100      	movs	r1, #0
    9b1c:	47a0      	blx	r4
    }

    if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state) && (FALSE == state->mbs[mb_idx].isPolling))
    9b1e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9b20:	9b02      	ldr	r3, [sp, #8]
    9b22:	011b      	lsls	r3, r3, #4
    9b24:	4413      	add	r3, r2
    9b26:	3304      	adds	r3, #4
    9b28:	681b      	ldr	r3, [r3, #0]
    9b2a:	2b00      	cmp	r3, #0
    9b2c:	d11e      	bne.n	9b6c <FlexCAN_IRQHandlerRxMB+0x198>
    9b2e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9b30:	9b02      	ldr	r3, [sp, #8]
    9b32:	011b      	lsls	r3, r3, #4
    9b34:	4413      	add	r3, r2
    9b36:	3308      	adds	r3, #8
    9b38:	781b      	ldrb	r3, [r3, #0]
    9b3a:	f083 0301 	eor.w	r3, r3, #1
    9b3e:	b2db      	uxtb	r3, r3
    9b40:	2b00      	cmp	r3, #0
    9b42:	d013      	beq.n	9b6c <FlexCAN_IRQHandlerRxMB+0x198>
    {
        /* callback is not called, need to reset to default value */
        state->mbs[mb_idx].isPolling = TRUE;
    9b44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9b46:	9b02      	ldr	r3, [sp, #8]
    9b48:	011b      	lsls	r3, r3, #4
    9b4a:	4413      	add	r3, r2
    9b4c:	3308      	adds	r3, #8
    9b4e:	2201      	movs	r2, #1
    9b50:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    9b52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9b54:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9b58:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9b5c:	9300      	str	r3, [sp, #0]
    9b5e:	2300      	movs	r3, #0
    9b60:	9a02      	ldr	r2, [sp, #8]
    9b62:	981c      	ldr	r0, [sp, #112]	; 0x70
    9b64:	f002 fcd4 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
    9b68:	bf00      	nop
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    9b6a:	e019      	b.n	9ba0 <FlexCAN_IRQHandlerRxMB+0x1cc>
    else if ((FALSE == bCurrentIntStat) && (TRUE == state->mbs[mb_idx].isPolling))
    9b6c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
    9b70:	f083 0301 	eor.w	r3, r3, #1
    9b74:	b2db      	uxtb	r3, r3
    9b76:	2b00      	cmp	r3, #0
    9b78:	d012      	beq.n	9ba0 <FlexCAN_IRQHandlerRxMB+0x1cc>
    9b7a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    9b7c:	9b02      	ldr	r3, [sp, #8]
    9b7e:	011b      	lsls	r3, r3, #4
    9b80:	4413      	add	r3, r2
    9b82:	3308      	adds	r3, #8
    9b84:	781b      	ldrb	r3, [r3, #0]
    9b86:	2b00      	cmp	r3, #0
    9b88:	d00a      	beq.n	9ba0 <FlexCAN_IRQHandlerRxMB+0x1cc>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    9b8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9b8c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9b90:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9b94:	9300      	str	r3, [sp, #0]
    9b96:	2300      	movs	r3, #0
    9b98:	9a02      	ldr	r2, [sp, #8]
    9b9a:	981c      	ldr	r0, [sp, #112]	; 0x70
    9b9c:	f002 fcb8 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
}
    9ba0:	bf00      	nop
    9ba2:	b01e      	add	sp, #120	; 0x78
    9ba4:	bd10      	pop	{r4, pc}
    9ba6:	bf00      	nop
    9ba8:	000101c4 	.word	0x000101c4
    9bac:	1fff8fb8 	.word	0x1fff8fb8

00009bb0 <FlexCAN_IRQHandlerTxMB>:
 * note: just using in interrupt mode
 * This is not a public API as it is called whenever an interrupt and receive
 * individual MB occurs
 *END**************************************************************************/
static void FlexCAN_IRQHandlerTxMB(uint8 u8Instance, uint32 u32MbIdx)
{
    9bb0:	b510      	push	{r4, lr}
    9bb2:	b09a      	sub	sp, #104	; 0x68
    9bb4:	4603      	mov	r3, r0
    9bb6:	9102      	str	r1, [sp, #8]
    9bb8:	f88d 300f 	strb.w	r3, [sp, #15]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9bbc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bc0:	4a46      	ldr	r2, [pc, #280]	; (9cdc <FlexCAN_IRQHandlerTxMB+0x12c>)
    9bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bc6:	9319      	str	r3, [sp, #100]	; 0x64
    Flexcan_Ip_StateType * pState = Flexcan_Ip_apxState[u8Instance];
    9bc8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    9bcc:	4a44      	ldr	r2, [pc, #272]	; (9ce0 <FlexCAN_IRQHandlerTxMB+0x130>)
    9bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bd2:	9318      	str	r3, [sp, #96]	; 0x60
    Flexcan_Ip_MsgBuffType mb;
    mb.cs = 0U;
    9bd4:	2300      	movs	r3, #0
    9bd6:	9304      	str	r3, [sp, #16]
    mb.time_stamp = 0U;
    9bd8:	2300      	movs	r3, #0
    9bda:	9317      	str	r3, [sp, #92]	; 0x5c
    if (pState->mbs[u32MbIdx].isRemote)
    9bdc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9bde:	9b02      	ldr	r3, [sp, #8]
    9be0:	011b      	lsls	r3, r3, #4
    9be2:	4413      	add	r3, r2
    9be4:	3309      	adds	r3, #9
    9be6:	781b      	ldrb	r3, [r3, #0]
    9be8:	2b00      	cmp	r3, #0
    9bea:	d01e      	beq.n	9c2a <FlexCAN_IRQHandlerTxMB+0x7a>
    {
        FlexCAN_LockRxMsgBuff(pBase, u32MbIdx);
    9bec:	9902      	ldr	r1, [sp, #8]
    9bee:	9819      	ldr	r0, [sp, #100]	; 0x64
    9bf0:	f002 fc7f 	bl	c4f2 <FlexCAN_LockRxMsgBuff>
        FlexCAN_GetMsgBuff(pBase, u32MbIdx, &mb);
    9bf4:	ab04      	add	r3, sp, #16
    9bf6:	461a      	mov	r2, r3
    9bf8:	9902      	ldr	r1, [sp, #8]
    9bfa:	9819      	ldr	r0, [sp, #100]	; 0x64
    9bfc:	f002 fda8 	bl	c750 <FlexCAN_GetMsgBuff>
        FlexCAN_UnlockRxMsgBuff(pBase);
    9c00:	9819      	ldr	r0, [sp, #100]	; 0x64
    9c02:	f7ff fa16 	bl	9032 <FlexCAN_UnlockRxMsgBuff>
        pState->mbs[u32MbIdx].time_stamp = mb.time_stamp;
    9c06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    9c08:	9918      	ldr	r1, [sp, #96]	; 0x60
    9c0a:	9b02      	ldr	r3, [sp, #8]
    9c0c:	011b      	lsls	r3, r3, #4
    9c0e:	440b      	add	r3, r1
    9c10:	330c      	adds	r3, #12
    9c12:	601a      	str	r2, [r3, #0]
        /* If the frame was a remote frame, clear the flag only if the response was
        * not received yet. If the response was received, leave the flag set in order
        * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
        if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    9c14:	9b04      	ldr	r3, [sp, #16]
    9c16:	0e1b      	lsrs	r3, r3, #24
    9c18:	f003 030f 	and.w	r3, r3, #15
    9c1c:	2b04      	cmp	r3, #4
    9c1e:	d116      	bne.n	9c4e <FlexCAN_IRQHandlerTxMB+0x9e>
        {
            FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    9c20:	9902      	ldr	r1, [sp, #8]
    9c22:	9819      	ldr	r0, [sp, #100]	; 0x64
    9c24:	f7ff fa0c 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
    9c28:	e011      	b.n	9c4e <FlexCAN_IRQHandlerTxMB+0x9e>
        }
    }
    else
    {
        pState->mbs[u32MbIdx].time_stamp = FlexCAN_GetMsgBuffTimestamp(pBase, u32MbIdx);
    9c2a:	9902      	ldr	r1, [sp, #8]
    9c2c:	9819      	ldr	r0, [sp, #100]	; 0x64
    9c2e:	f002 fd7b 	bl	c728 <FlexCAN_GetMsgBuffTimestamp>
    9c32:	4601      	mov	r1, r0
    9c34:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9c36:	9b02      	ldr	r3, [sp, #8]
    9c38:	011b      	lsls	r3, r3, #4
    9c3a:	4413      	add	r3, r2
    9c3c:	330c      	adds	r3, #12
    9c3e:	6019      	str	r1, [r3, #0]
        FlexCAN_UnlockRxMsgBuff(pBase);
    9c40:	9819      	ldr	r0, [sp, #100]	; 0x64
    9c42:	f7ff f9f6 	bl	9032 <FlexCAN_UnlockRxMsgBuff>
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, u32MbIdx);
    9c46:	9902      	ldr	r1, [sp, #8]
    9c48:	9819      	ldr	r0, [sp, #100]	; 0x64
    9c4a:	f7ff f9f9 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }

    pState->mbs[u32MbIdx].state = FLEXCAN_MB_IDLE;
    9c4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9c50:	9b02      	ldr	r3, [sp, #8]
    9c52:	011b      	lsls	r3, r3, #4
    9c54:	4413      	add	r3, r2
    9c56:	3304      	adds	r3, #4
    9c58:	2200      	movs	r2, #0
    9c5a:	601a      	str	r2, [r3, #0]

    /* Invoke callback */
    if (pState->callback != NULL_PTR)
    9c5c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9c5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9c62:	2b00      	cmp	r3, #0
    9c64:	d008      	beq.n	9c78 <FlexCAN_IRQHandlerTxMB+0xc8>
    {
        pState->callback(u8Instance, FLEXCAN_EVENT_TX_COMPLETE, u32MbIdx, pState);
    9c66:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9c68:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9c6c:	f89d 000f 	ldrb.w	r0, [sp, #15]
    9c70:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9c72:	9a02      	ldr	r2, [sp, #8]
    9c74:	2104      	movs	r1, #4
    9c76:	47a0      	blx	r4
    }

    if (FLEXCAN_MB_IDLE == pState->mbs[u32MbIdx].state)
    9c78:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9c7a:	9b02      	ldr	r3, [sp, #8]
    9c7c:	011b      	lsls	r3, r3, #4
    9c7e:	4413      	add	r3, r2
    9c80:	3304      	adds	r3, #4
    9c82:	681b      	ldr	r3, [r3, #0]
    9c84:	2b00      	cmp	r3, #0
    9c86:	d112      	bne.n	9cae <FlexCAN_IRQHandlerTxMB+0xfe>
    {
        /* callback is not called, need to reset to default value */
        pState->mbs[u32MbIdx].isPolling = TRUE;
    9c88:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9c8a:	9b02      	ldr	r3, [sp, #8]
    9c8c:	011b      	lsls	r3, r3, #4
    9c8e:	4413      	add	r3, r2
    9c90:	3308      	adds	r3, #8
    9c92:	2201      	movs	r2, #1
    9c94:	701a      	strb	r2, [r3, #0]
        /* Disable the transmitter data register empty interrupt for case: mb is interrupt (it was not use in above callback with the same index) */
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    9c96:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9c98:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9c9c:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9ca0:	9300      	str	r3, [sp, #0]
    9ca2:	2300      	movs	r3, #0
    9ca4:	9a02      	ldr	r2, [sp, #8]
    9ca6:	9819      	ldr	r0, [sp, #100]	; 0x64
    9ca8:	f002 fc32 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
    else
    {
        /* Prevent misra */
        /* When processing type change from POLL->POLL or INTERRUPT -> INTERRUPT(this Mb is used continously in callback), no need to disable interrupt in the ISR */
    }
}
    9cac:	e012      	b.n	9cd4 <FlexCAN_IRQHandlerTxMB+0x124>
    else if (TRUE == pState->mbs[u32MbIdx].isPolling)
    9cae:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9cb0:	9b02      	ldr	r3, [sp, #8]
    9cb2:	011b      	lsls	r3, r3, #4
    9cb4:	4413      	add	r3, r2
    9cb6:	3308      	adds	r3, #8
    9cb8:	781b      	ldrb	r3, [r3, #0]
    9cba:	2b00      	cmp	r3, #0
    9cbc:	d00a      	beq.n	9cd4 <FlexCAN_IRQHandlerTxMB+0x124>
        (void)FlexCAN_SetMsgBuffIntCmd(pBase, u8Instance, u32MbIdx, FALSE, pState->isIntActive);
    9cbe:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9cc0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9cc4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    9cc8:	9300      	str	r3, [sp, #0]
    9cca:	2300      	movs	r3, #0
    9ccc:	9a02      	ldr	r2, [sp, #8]
    9cce:	9819      	ldr	r0, [sp, #100]	; 0x64
    9cd0:	f002 fc1e 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
}
    9cd4:	bf00      	nop
    9cd6:	b01a      	add	sp, #104	; 0x68
    9cd8:	bd10      	pop	{r4, pc}
    9cda:	bf00      	nop
    9cdc:	000101c4 	.word	0x000101c4
    9ce0:	1fff8fb8 	.word	0x1fff8fb8

00009ce4 <FlexCAN_IRQHandlerRxFIFO>:
 * Function Name : FlexCAN_IRQHandlerRxFIFO
 * Description   : Process IRQHandler in case of RxFIFO mode selection for CAN interface.
 *
 *END**************************************************************************/
static inline void FlexCAN_IRQHandlerRxFIFO(uint8 instance, uint32 mb_idx)
{
    9ce4:	b510      	push	{r4, lr}
    9ce6:	b098      	sub	sp, #96	; 0x60
    9ce8:	4603      	mov	r3, r0
    9cea:	9100      	str	r1, [sp, #0]
    9cec:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    9cf0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9cf4:	4a3c      	ldr	r2, [pc, #240]	; (9de8 <FlexCAN_IRQHandlerRxFIFO+0x104>)
    9cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9cfa:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    9cfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d00:	4a3a      	ldr	r2, [pc, #232]	; (9dec <FlexCAN_IRQHandlerRxFIFO+0x108>)
    9d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9d06:	9316      	str	r3, [sp, #88]	; 0x58
    Flexcan_Ip_MsgBuffType data;

    /* If use pass NULL_PTR, they can get data in callback function by getting state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage  */
    if (NULL_PTR == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage)
    9d08:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d0a:	681b      	ldr	r3, [r3, #0]
    9d0c:	2b00      	cmp	r3, #0
    9d0e:	d102      	bne.n	9d16 <FlexCAN_IRQHandlerRxFIFO+0x32>
    {
        state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = &data;
    9d10:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d12:	aa02      	add	r2, sp, #8
    9d14:	601a      	str	r2, [r3, #0]
    }
    switch (mb_idx)
    9d16:	9b00      	ldr	r3, [sp, #0]
    9d18:	2b07      	cmp	r3, #7
    9d1a:	d048      	beq.n	9dae <FlexCAN_IRQHandlerRxFIFO+0xca>
    9d1c:	9b00      	ldr	r3, [sp, #0]
    9d1e:	2b07      	cmp	r3, #7
    9d20:	d858      	bhi.n	9dd4 <FlexCAN_IRQHandlerRxFIFO+0xf0>
    9d22:	9b00      	ldr	r3, [sp, #0]
    9d24:	2b05      	cmp	r3, #5
    9d26:	d003      	beq.n	9d30 <FlexCAN_IRQHandlerRxFIFO+0x4c>
    9d28:	9b00      	ldr	r3, [sp, #0]
    9d2a:	2b06      	cmp	r3, #6
    9d2c:	d02c      	beq.n	9d88 <FlexCAN_IRQHandlerRxFIFO+0xa4>
            }

            break;
        default:
            /* Do Nothing */
            break;
    9d2e:	e051      	b.n	9dd4 <FlexCAN_IRQHandlerRxFIFO+0xf0>
            if (FLEXCAN_MB_RX_BUSY == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9d30:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d32:	685b      	ldr	r3, [r3, #4]
    9d34:	2b01      	cmp	r3, #1
    9d36:	d14f      	bne.n	9dd8 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                FlexCAN_ReadRxFifo(base, state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage);
    9d38:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d3a:	681b      	ldr	r3, [r3, #0]
    9d3c:	4619      	mov	r1, r3
    9d3e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9d40:	f003 f98d 	bl	d05e <FlexCAN_ReadRxFifo>
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9d44:	9900      	ldr	r1, [sp, #0]
    9d46:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9d48:	f7ff f97a 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
                state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    9d4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d4e:	2200      	movs	r2, #0
    9d50:	605a      	str	r2, [r3, #4]
                if (state->callback != NULL_PTR)
    9d52:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9d58:	2b00      	cmp	r3, #0
    9d5a:	d008      	beq.n	9d6e <FlexCAN_IRQHandlerRxFIFO+0x8a>
                    state->callback(instance, FLEXCAN_EVENT_RXFIFO_COMPLETE, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    9d5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d5e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9d62:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9d66:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d68:	2200      	movs	r2, #0
    9d6a:	2101      	movs	r1, #1
    9d6c:	47a0      	blx	r4
                if (FLEXCAN_MB_IDLE == state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state)
    9d6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d70:	685b      	ldr	r3, [r3, #4]
    9d72:	2b00      	cmp	r3, #0
    9d74:	d130      	bne.n	9dd8 <FlexCAN_IRQHandlerRxFIFO+0xf4>
                    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].isPolling = TRUE;
    9d76:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d78:	2201      	movs	r2, #1
    9d7a:	721a      	strb	r2, [r3, #8]
                    FlexCAN_CompleteRxMessageFifoData(instance);
    9d7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9d80:	4618      	mov	r0, r3
    9d82:	f000 fc61 	bl	a648 <FlexCAN_CompleteRxMessageFifoData>
            break;
    9d86:	e027      	b.n	9dd8 <FlexCAN_IRQHandlerRxFIFO+0xf4>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9d88:	9900      	ldr	r1, [sp, #0]
    9d8a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9d8c:	f7ff f958 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    9d90:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9d96:	2b00      	cmp	r3, #0
    9d98:	d020      	beq.n	9ddc <FlexCAN_IRQHandlerRxFIFO+0xf8>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_WARNING, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    9d9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9d9c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9da0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9da4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9da6:	2200      	movs	r2, #0
    9da8:	2102      	movs	r1, #2
    9daa:	47a0      	blx	r4
            break;
    9dac:	e016      	b.n	9ddc <FlexCAN_IRQHandlerRxFIFO+0xf8>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    9dae:	9900      	ldr	r1, [sp, #0]
    9db0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9db2:	f7ff f945 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
            if (state->callback != NULL_PTR)
    9db6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9db8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9dbc:	2b00      	cmp	r3, #0
    9dbe:	d00f      	beq.n	9de0 <FlexCAN_IRQHandlerRxFIFO+0xfc>
                state->callback(instance, FLEXCAN_EVENT_RXFIFO_OVERFLOW, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
    9dc0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9dc2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    9dc6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9dca:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9dcc:	2200      	movs	r2, #0
    9dce:	2103      	movs	r1, #3
    9dd0:	47a0      	blx	r4
            break;
    9dd2:	e005      	b.n	9de0 <FlexCAN_IRQHandlerRxFIFO+0xfc>
            break;
    9dd4:	bf00      	nop
    9dd6:	e004      	b.n	9de2 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    9dd8:	bf00      	nop
    9dda:	e002      	b.n	9de2 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    9ddc:	bf00      	nop
    9dde:	e000      	b.n	9de2 <FlexCAN_IRQHandlerRxFIFO+0xfe>
            break;
    9de0:	bf00      	nop
    }
}
    9de2:	bf00      	nop
    9de4:	b018      	add	sp, #96	; 0x60
    9de6:	bd10      	pop	{r4, pc}
    9de8:	000101c4 	.word	0x000101c4
    9dec:	1fff8fb8 	.word	0x1fff8fb8

00009df0 <FlexCAN_AbortTxTransfer>:
 * Description   : Abort transfer for Tx buffer.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static Flexcan_Ip_StatusType FlexCAN_AbortTxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    9df0:	b500      	push	{lr}
    9df2:	b08b      	sub	sp, #44	; 0x2c
    9df4:	4603      	mov	r3, r0
    9df6:	460a      	mov	r2, r1
    9df8:	f88d 3007 	strb.w	r3, [sp, #7]
    9dfc:	4613      	mov	r3, r2
    9dfe:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9e02:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e06:	4a3c      	ldr	r2, [pc, #240]	; (9ef8 <FlexCAN_AbortTxTransfer+0x108>)
    9e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e0c:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9e0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9e12:	4a3a      	ldr	r2, [pc, #232]	; (9efc <FlexCAN_AbortTxTransfer+0x10c>)
    9e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9e18:	9306      	str	r3, [sp, #24]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    9e1a:	2300      	movs	r3, #0
    9e1c:	9309      	str	r3, [sp, #36]	; 0x24

    uint32 timeStart = 0U;
    9e1e:	2300      	movs	r3, #0
    9e20:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    9e22:	2300      	movs	r3, #0
    9e24:	9308      	str	r3, [sp, #32]
    uint32 flexcan_mb_config = 0;
    9e26:	2300      	movs	r3, #0
    9e28:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = 0U;
    9e2a:	2300      	movs	r3, #0
    9e2c:	9304      	str	r3, [sp, #16]
    volatile uint32 * flexcan_mb = NULL_PTR;
    9e2e:	2300      	movs	r3, #0
    9e30:	9303      	str	r3, [sp, #12]

    flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9e32:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9e36:	4619      	mov	r1, r3
    9e38:	9807      	ldr	r0, [sp, #28]
    9e3a:	f001 ffe1 	bl	be00 <FlexCAN_GetMsgBuffRegion>
    9e3e:	9003      	str	r0, [sp, #12]
    flexcan_mb_config = * flexcan_mb;
    9e40:	9b03      	ldr	r3, [sp, #12]
    9e42:	681b      	ldr	r3, [r3, #0]
    9e44:	9305      	str	r3, [sp, #20]
    /* Reset the code */
    flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9e46:	9b05      	ldr	r3, [sp, #20]
    9e48:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9e4c:	9305      	str	r3, [sp, #20]
    flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    9e4e:	9b05      	ldr	r3, [sp, #20]
    9e50:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    9e54:	9305      	str	r3, [sp, #20]
    *flexcan_mb = flexcan_mb_config;
    9e56:	9b03      	ldr	r3, [sp, #12]
    9e58:	9a05      	ldr	r2, [sp, #20]
    9e5a:	601a      	str	r2, [r3, #0]

    /* Wait to finish abort operation */
    uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9e5c:	2100      	movs	r1, #0
    9e5e:	4828      	ldr	r0, [pc, #160]	; (9f00 <FlexCAN_AbortTxTransfer+0x110>)
    9e60:	f7f8 fa08 	bl	2274 <OsIf_MicrosToTicks>
    9e64:	9004      	str	r0, [sp, #16]
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9e66:	2000      	movs	r0, #0
    9e68:	f7f8 f9b8 	bl	21dc <OsIf_GetCounter>
    9e6c:	4603      	mov	r3, r0
    9e6e:	9302      	str	r3, [sp, #8]
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    9e70:	e00f      	b.n	9e92 <FlexCAN_AbortTxTransfer+0xa2>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    9e72:	ab02      	add	r3, sp, #8
    9e74:	2100      	movs	r1, #0
    9e76:	4618      	mov	r0, r3
    9e78:	f7f8 f9c9 	bl	220e <OsIf_GetElapsed>
    9e7c:	4602      	mov	r2, r0
    9e7e:	9b08      	ldr	r3, [sp, #32]
    9e80:	4413      	add	r3, r2
    9e82:	9308      	str	r3, [sp, #32]
        if (timeElapsed >= uS2Ticks)
    9e84:	9a08      	ldr	r2, [sp, #32]
    9e86:	9b04      	ldr	r3, [sp, #16]
    9e88:	429a      	cmp	r2, r3
    9e8a:	d302      	bcc.n	9e92 <FlexCAN_AbortTxTransfer+0xa2>
        {
            result = FLEXCAN_STATUS_TIMEOUT;
    9e8c:	2303      	movs	r3, #3
    9e8e:	9309      	str	r3, [sp, #36]	; 0x24
            break;
    9e90:	e008      	b.n	9ea4 <FlexCAN_AbortTxTransfer+0xb4>
    while (0U == FlexCAN_GetBuffStatusFlag(pBase, mb_idx))
    9e92:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9e96:	4619      	mov	r1, r3
    9e98:	9807      	ldr	r0, [sp, #28]
    9e9a:	f7ff f8e4 	bl	9066 <FlexCAN_GetBuffStatusFlag>
    9e9e:	4603      	mov	r3, r0
    9ea0:	2b00      	cmp	r3, #0
    9ea2:	d0e6      	beq.n	9e72 <FlexCAN_AbortTxTransfer+0x82>
        }
    }
    if (result != FLEXCAN_STATUS_TIMEOUT)
    9ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ea6:	2b03      	cmp	r3, #3
    9ea8:	d012      	beq.n	9ed0 <FlexCAN_AbortTxTransfer+0xe0>
    {
        flexcan_mb_config = *flexcan_mb;
    9eaa:	9b03      	ldr	r3, [sp, #12]
    9eac:	681b      	ldr	r3, [r3, #0]
    9eae:	9305      	str	r3, [sp, #20]
        /* Check if the MBs have been safely Inactivated */
        if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    9eb0:	9b05      	ldr	r3, [sp, #20]
    9eb2:	0e1b      	lsrs	r3, r3, #24
    9eb4:	f003 030f 	and.w	r3, r3, #15
    9eb8:	2b08      	cmp	r3, #8
    9eba:	d101      	bne.n	9ec0 <FlexCAN_AbortTxTransfer+0xd0>
        {
            /* Transmission have occurred */
            result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    9ebc:	2305      	movs	r3, #5
    9ebe:	9309      	str	r3, [sp, #36]	; 0x24
        }

        if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    9ec0:	9b05      	ldr	r3, [sp, #20]
    9ec2:	0e1b      	lsrs	r3, r3, #24
    9ec4:	f003 030f 	and.w	r3, r3, #15
    9ec8:	2b09      	cmp	r3, #9
    9eca:	d101      	bne.n	9ed0 <FlexCAN_AbortTxTransfer+0xe0>
        {
            /* Transmission have been aborted */
            result = FLEXCAN_STATUS_SUCCESS;
    9ecc:	2300      	movs	r3, #0
    9ece:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    9ed0:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ed4:	4619      	mov	r1, r3
    9ed6:	9807      	ldr	r0, [sp, #28]
    9ed8:	f7ff f8b2 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9edc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9ee0:	9a06      	ldr	r2, [sp, #24]
    9ee2:	011b      	lsls	r3, r3, #4
    9ee4:	4413      	add	r3, r2
    9ee6:	3304      	adds	r3, #4
    9ee8:	2200      	movs	r2, #0
    9eea:	601a      	str	r2, [r3, #0]

    return result;
    9eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    9eee:	4618      	mov	r0, r3
    9ef0:	b00b      	add	sp, #44	; 0x2c
    9ef2:	f85d fb04 	ldr.w	pc, [sp], #4
    9ef6:	bf00      	nop
    9ef8:	000101c4 	.word	0x000101c4
    9efc:	1fff8fb8 	.word	0x1fff8fb8
    9f00:	000f4240 	.word	0x000f4240

00009f04 <FlexCAN_AbortRxTransfer>:
 * Description   : Abort transfer for Rx normal or legacy fifo if enabled.
 *
 * This is not a public API as it is called from other driver functions.
 *END**************************************************************************/
static void FlexCAN_AbortRxTransfer(uint8 u8Instance, uint8 mb_idx)
{
    9f04:	b500      	push	{lr}
    9f06:	b089      	sub	sp, #36	; 0x24
    9f08:	4603      	mov	r3, r0
    9f0a:	460a      	mov	r2, r1
    9f0c:	f88d 3007 	strb.w	r3, [sp, #7]
    9f10:	4613      	mov	r3, r2
    9f12:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    9f16:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f1a:	4a41      	ldr	r2, [pc, #260]	; (a020 <FlexCAN_AbortRxTransfer+0x11c>)
    9f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f20:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    9f22:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9f26:	4a3f      	ldr	r2, [pc, #252]	; (a024 <FlexCAN_AbortRxTransfer+0x120>)
    9f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f2c:	9306      	str	r3, [sp, #24]
    uint8 val1 = 0U;
    9f2e:	2300      	movs	r3, #0
    9f30:	f88d 3017 	strb.w	r3, [sp, #23]
    uint32 val2 = 0U;
    9f34:	2300      	movs	r3, #0
    9f36:	9304      	str	r3, [sp, #16]
    uint32 flexcan_mb_config = 0;
    9f38:	2300      	movs	r3, #0
    9f3a:	9303      	str	r3, [sp, #12]
    volatile uint32 * flexcan_mb = NULL_PTR;
    9f3c:	2300      	movs	r3, #0
    9f3e:	9302      	str	r3, [sp, #8]

    state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    9f40:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f44:	9a06      	ldr	r2, [sp, #24]
    9f46:	011b      	lsls	r3, r3, #4
    9f48:	4413      	add	r3, r2
    9f4a:	3304      	adds	r3, #4
    9f4c:	2200      	movs	r2, #0
    9f4e:	601a      	str	r2, [r3, #0]
    /* Check if fifo enabled */
    if (TRUE == state->bIsLegacyFifoEn)
    9f50:	9b06      	ldr	r3, [sp, #24]
    9f52:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    9f56:	2b00      	cmp	r3, #0
    9f58:	d03c      	beq.n	9fd4 <FlexCAN_AbortRxTransfer+0xd0>
    {
        /* Get the number of RX FIFO Filters*/
        val1 = (uint8)(((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    9f5a:	9b07      	ldr	r3, [sp, #28]
    9f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9f5e:	0e1b      	lsrs	r3, r3, #24
    9f60:	b2db      	uxtb	r3, r3
    9f62:	f003 030f 	and.w	r3, r3, #15
    9f66:	f88d 3017 	strb.w	r3, [sp, #23]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        val2 = RxFifoOcuppiedLastMsgBuff(val1);
    9f6a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    9f6e:	4618      	mov	r0, r3
    9f70:	f7ff f9f3 	bl	935a <RxFifoOcuppiedLastMsgBuff>
    9f74:	9004      	str	r0, [sp, #16]
        if (mb_idx > val2)
    9f76:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f7a:	9a04      	ldr	r2, [sp, #16]
    9f7c:	429a      	cmp	r2, r3
    9f7e:	d21b      	bcs.n	9fb8 <FlexCAN_AbortRxTransfer+0xb4>
        {
            /* This operation is not allowed for MB that are part of RxFIFO */
            flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9f80:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9f84:	4619      	mov	r1, r3
    9f86:	9807      	ldr	r0, [sp, #28]
    9f88:	f001 ff3a 	bl	be00 <FlexCAN_GetMsgBuffRegion>
    9f8c:	9002      	str	r0, [sp, #8]
            flexcan_mb_config = * flexcan_mb;
    9f8e:	9b02      	ldr	r3, [sp, #8]
    9f90:	681b      	ldr	r3, [r3, #0]
    9f92:	9303      	str	r3, [sp, #12]
            /* Reset the code and unlock the MB */
            flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    9f94:	9b03      	ldr	r3, [sp, #12]
    9f96:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9f9a:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
            *flexcan_mb = flexcan_mb_config;
    9f9c:	9b02      	ldr	r3, [sp, #8]
    9f9e:	9a03      	ldr	r2, [sp, #12]
    9fa0:	601a      	str	r2, [r3, #0]
            /* Reconfigure The MB as left by RxMBconfig */
            flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9fa2:	9b03      	ldr	r3, [sp, #12]
    9fa4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9fa8:	9303      	str	r3, [sp, #12]
            flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    9faa:	9b03      	ldr	r3, [sp, #12]
    9fac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    9fb0:	9303      	str	r3, [sp, #12]
            *flexcan_mb = flexcan_mb_config;
    9fb2:	9b02      	ldr	r3, [sp, #8]
    9fb4:	9a03      	ldr	r2, [sp, #12]
    9fb6:	601a      	str	r2, [r3, #0]
        }
        if (FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    9fb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fbc:	2b00      	cmp	r3, #0
    9fbe:	d125      	bne.n	a00c <FlexCAN_AbortRxTransfer+0x108>
        {
            FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, state->isIntActive);
    9fc0:	9b06      	ldr	r3, [sp, #24]
    9fc2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    9fc6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    9fca:	2205      	movs	r2, #5
    9fcc:	9807      	ldr	r0, [sp, #28]
    9fce:	f002 faf5 	bl	c5bc <FLEXCAN_ClearMsgBuffIntCmd>
    9fd2:	e01b      	b.n	a00c <FlexCAN_AbortRxTransfer+0x108>
        }
    }
    else
    {
        /* This operation is not allowed for MB that are part of RxFIFO */
        flexcan_mb = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    9fd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    9fd8:	4619      	mov	r1, r3
    9fda:	9807      	ldr	r0, [sp, #28]
    9fdc:	f001 ff10 	bl	be00 <FlexCAN_GetMsgBuffRegion>
    9fe0:	9002      	str	r0, [sp, #8]
        flexcan_mb_config = * flexcan_mb;
    9fe2:	9b02      	ldr	r3, [sp, #8]
    9fe4:	681b      	ldr	r3, [r3, #0]
    9fe6:	9303      	str	r3, [sp, #12]
        /* Reset the code and unlock the MB */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9fe8:	9b03      	ldr	r3, [sp, #12]
    9fea:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9fee:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
        *flexcan_mb = flexcan_mb_config;
    9ff0:	9b02      	ldr	r3, [sp, #8]
    9ff2:	9a03      	ldr	r2, [sp, #12]
    9ff4:	601a      	str	r2, [r3, #0]
        /* Reconfigure The MB as left by RxMBconfig */
        flexcan_mb_config &= (~FLEXCAN_IP_CS_CODE_MASK);
    9ff6:	9b03      	ldr	r3, [sp, #12]
    9ff8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    9ffc:	9303      	str	r3, [sp, #12]
        flexcan_mb_config |= (uint32)(((uint32)FLEXCAN_RX_EMPTY & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK;
    9ffe:	9b03      	ldr	r3, [sp, #12]
    a000:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    a004:	9303      	str	r3, [sp, #12]
        *flexcan_mb = flexcan_mb_config;
    a006:	9b02      	ldr	r3, [sp, #8]
    a008:	9a03      	ldr	r2, [sp, #12]
    a00a:	601a      	str	r2, [r3, #0]
    }
    /* Clear message buffer flag */
    FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    a00c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a010:	4619      	mov	r1, r3
    a012:	9807      	ldr	r0, [sp, #28]
    a014:	f7ff f814 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
}
    a018:	bf00      	nop
    a01a:	b009      	add	sp, #36	; 0x24
    a01c:	f85d fb04 	ldr.w	pc, [sp], #4
    a020:	000101c4 	.word	0x000101c4
    a024:	1fff8fb8 	.word	0x1fff8fb8

0000a028 <FlexCAN_Ip_Init_Privileged>:
/* implements FlexCAN_Ip_Init_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Init_Privileged(uint8 Flexcan_Ip_u8Instance,
                                                 Flexcan_Ip_StateType * Flexcan_Ip_pState,
                                                 const Flexcan_Ip_ConfigType * Flexcan_Ip_pData
                                                )
{
    a028:	b500      	push	{lr}
    a02a:	b089      	sub	sp, #36	; 0x24
    a02c:	4603      	mov	r3, r0
    a02e:	9102      	str	r1, [sp, #8]
    a030:	9201      	str	r2, [sp, #4]
    a032:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    a036:	2300      	movs	r3, #0
    a038:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[Flexcan_Ip_u8Instance];
    a03a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a03e:	4a36      	ldr	r2, [pc, #216]	; (a118 <FlexCAN_Ip_Init_Privileged+0xf0>)
    a040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a044:	9305      	str	r3, [sp, #20]
    {
        OsIf_Trusted_Call1param(FlexCAN_SetUserAccessAllowed, pBase);
    }
#endif

    eResult = FlexCAN_InitController(Flexcan_Ip_u8Instance, pBase, Flexcan_Ip_pData);
    a046:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a04a:	9a01      	ldr	r2, [sp, #4]
    a04c:	9905      	ldr	r1, [sp, #20]
    a04e:	4618      	mov	r0, r3
    a050:	f7ff fa84 	bl	955c <FlexCAN_InitController>
    a054:	9006      	str	r0, [sp, #24]
    if (FLEXCAN_STATUS_SUCCESS == eResult)
    a056:	9b06      	ldr	r3, [sp, #24]
    a058:	2b00      	cmp	r3, #0
    a05a:	d158      	bne.n	a10e <FlexCAN_Ip_Init_Privileged+0xe6>
    {
        /* Init Baudrate */
        FlexCAN_InitBaudrate(pBase, Flexcan_Ip_pData);
    a05c:	9901      	ldr	r1, [sp, #4]
    a05e:	9805      	ldr	r0, [sp, #20]
    a060:	f7ff fad6 	bl	9610 <FlexCAN_InitBaudrate>
        /* Select mode */
        FlexCAN_SetOperationMode(pBase, Flexcan_Ip_pData->flexcanMode);
    a064:	9b01      	ldr	r3, [sp, #4]
    a066:	68db      	ldr	r3, [r3, #12]
    a068:	4619      	mov	r1, r3
    a06a:	9805      	ldr	r0, [sp, #20]
    a06c:	f002 fdb8 	bl	cbe0 <FlexCAN_SetOperationMode>

#if (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON)
        FlexCAN_ConfigTimestamp(Flexcan_Ip_u8Instance, pBase, (const Flexcan_Ip_TimeStampConfigType *)(&Flexcan_Ip_pData->time_stamp));
#endif   /* (FLEXCAN_IP_FEATURE_HAS_TS_ENABLE == STD_ON) */

        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    a070:	2300      	movs	r3, #0
    a072:	9307      	str	r3, [sp, #28]
    a074:	e01d      	b.n	a0b2 <FlexCAN_Ip_Init_Privileged+0x8a>
        {
            /* Check if blocking need to be any more present in sync\async discussions */
            /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
            Flexcan_Ip_pState->mbs[i].isPolling = TRUE;
    a076:	9a02      	ldr	r2, [sp, #8]
    a078:	9b07      	ldr	r3, [sp, #28]
    a07a:	011b      	lsls	r3, r3, #4
    a07c:	4413      	add	r3, r2
    a07e:	3308      	adds	r3, #8
    a080:	2201      	movs	r2, #1
    a082:	701a      	strb	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].pMBmessage = NULL_PTR;
    a084:	9a02      	ldr	r2, [sp, #8]
    a086:	9b07      	ldr	r3, [sp, #28]
    a088:	011b      	lsls	r3, r3, #4
    a08a:	4413      	add	r3, r2
    a08c:	2200      	movs	r2, #0
    a08e:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].state = FLEXCAN_MB_IDLE;
    a090:	9a02      	ldr	r2, [sp, #8]
    a092:	9b07      	ldr	r3, [sp, #28]
    a094:	011b      	lsls	r3, r3, #4
    a096:	4413      	add	r3, r2
    a098:	3304      	adds	r3, #4
    a09a:	2200      	movs	r2, #0
    a09c:	601a      	str	r2, [r3, #0]
            Flexcan_Ip_pState->mbs[i].time_stamp = 0U;
    a09e:	9a02      	ldr	r2, [sp, #8]
    a0a0:	9b07      	ldr	r3, [sp, #28]
    a0a2:	011b      	lsls	r3, r3, #4
    a0a4:	4413      	add	r3, r2
    a0a6:	330c      	adds	r3, #12
    a0a8:	2200      	movs	r2, #0
    a0aa:	601a      	str	r2, [r3, #0]
        for (i = 0; i < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM; i++)
    a0ac:	9b07      	ldr	r3, [sp, #28]
    a0ae:	3301      	adds	r3, #1
    a0b0:	9307      	str	r3, [sp, #28]
    a0b2:	9b07      	ldr	r3, [sp, #28]
    a0b4:	2b1f      	cmp	r3, #31
    a0b6:	d9de      	bls.n	a076 <FlexCAN_Ip_Init_Privileged+0x4e>
        /* Sync up isPolling status with hw (Imask), at the begining all Imask = 0 => isPolling = TRUE */
        Flexcan_Ip_pState->enhancedFifoOutput.isPolling = TRUE;
        Flexcan_Ip_pState->enhancedFifoOutput.state = FLEXCAN_MB_IDLE;
#endif

        Flexcan_Ip_pState->transferType = Flexcan_Ip_pData->transfer_type;
    a0b8:	9b01      	ldr	r3, [sp, #4]
    a0ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    a0bc:	9b02      	ldr	r3, [sp, #8]
    a0be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        Flexcan_Ip_pState->u32NumOfMbTransferByDMA = Flexcan_Ip_pData->num_enhanced_watermark;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
#endif /* FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */

        /* Clear Callbacks in case of autovariables garbage */
        Flexcan_Ip_pState->callback = Flexcan_Ip_pData->Callback;
    a0c2:	9b01      	ldr	r3, [sp, #4]
    a0c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a0c6:	9b02      	ldr	r3, [sp, #8]
    a0c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        Flexcan_Ip_pState->callbackParam = NULL_PTR;
    a0cc:	9b02      	ldr	r3, [sp, #8]
    a0ce:	2200      	movs	r2, #0
    a0d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        Flexcan_Ip_pState->error_callback = Flexcan_Ip_pData->ErrorCallback;
    a0d4:	9b01      	ldr	r3, [sp, #4]
    a0d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    a0d8:	9b02      	ldr	r3, [sp, #8]
    a0da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
        Flexcan_Ip_pState->errorCallbackParam = NULL_PTR;
    a0de:	9b02      	ldr	r3, [sp, #8]
    a0e0:	2200      	movs	r2, #0
    a0e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
        Flexcan_Ip_pState->bIsLegacyFifoEn = Flexcan_Ip_pData->is_rx_fifo_needed;
    a0e6:	9b01      	ldr	r3, [sp, #4]
    a0e8:	7a1a      	ldrb	r2, [r3, #8]
    a0ea:	9b02      	ldr	r3, [sp, #8]
    a0ec:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
        Flexcan_Ip_pState->bIsEnhancedFifoEn = Flexcan_Ip_pData->is_enhanced_rx_fifo_needed;
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */
        Flexcan_Ip_pState->u32MaxMbNum = Flexcan_Ip_pData->max_num_mb;
    a0f0:	9b01      	ldr	r3, [sp, #4]
    a0f2:	681a      	ldr	r2, [r3, #0]
    a0f4:	9b02      	ldr	r3, [sp, #8]
    a0f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
        Flexcan_Ip_pState->isIntActive = TRUE;
    a0fa:	9b02      	ldr	r3, [sp, #8]
    a0fc:	2201      	movs	r2, #1
    a0fe:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        /* Save runtime structure pointers so irq handler can point to the correct state structure */
        Flexcan_Ip_apxState[Flexcan_Ip_u8Instance] = Flexcan_Ip_pState;
    a102:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a106:	4905      	ldr	r1, [pc, #20]	; (a11c <FlexCAN_Ip_Init_Privileged+0xf4>)
    a108:	9a02      	ldr	r2, [sp, #8]
    a10a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    return eResult;
    a10e:	9b06      	ldr	r3, [sp, #24]
}
    a110:	4618      	mov	r0, r3
    a112:	b009      	add	sp, #36	; 0x24
    a114:	f85d fb04 	ldr.w	pc, [sp], #4
    a118:	000101c4 	.word	0x000101c4
    a11c:	1fff8fb8 	.word	0x1fff8fb8

0000a120 <FlexCAN_Ip_Send>:
                                      uint8 mb_idx,
                                      const Flexcan_Ip_DataInfoType * tx_info,
                                      uint32 msg_id,
                                      const uint8 * mb_data
                                     )
{
    a120:	b500      	push	{lr}
    a122:	b08b      	sub	sp, #44	; 0x2c
    a124:	9204      	str	r2, [sp, #16]
    a126:	9303      	str	r3, [sp, #12]
    a128:	4603      	mov	r3, r0
    a12a:	f88d 3017 	strb.w	r3, [sp, #23]
    a12e:	460b      	mov	r3, r1
    a130:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    a134:	2301      	movs	r3, #1
    a136:	9309      	str	r3, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a138:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a13c:	4a1c      	ldr	r2, [pc, #112]	; (a1b0 <FlexCAN_Ip_Send+0x90>)
    a13e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a142:	9308      	str	r3, [sp, #32]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a144:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a148:	4a1a      	ldr	r2, [pc, #104]	; (a1b4 <FlexCAN_Ip_Send+0x94>)
    a14a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a14e:	9307      	str	r3, [sp, #28]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif
    if (!FlexCAN_IsListenOnlyModeEnabled(base))
    a150:	9808      	ldr	r0, [sp, #32]
    a152:	f7ff f8f4 	bl	933e <FlexCAN_IsListenOnlyModeEnabled>
    a156:	4603      	mov	r3, r0
    a158:	f083 0301 	eor.w	r3, r3, #1
    a15c:	b2db      	uxtb	r3, r3
    a15e:	2b00      	cmp	r3, #0
    a160:	d021      	beq.n	a1a6 <FlexCAN_Ip_Send+0x86>
    {
        result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    a162:	f89d 1016 	ldrb.w	r1, [sp, #22]
    a166:	f89d 0017 	ldrb.w	r0, [sp, #23]
    a16a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a16c:	9300      	str	r3, [sp, #0]
    a16e:	9b03      	ldr	r3, [sp, #12]
    a170:	9a04      	ldr	r2, [sp, #16]
    a172:	f7ff fb4b 	bl	980c <FlexCAN_StartSendData>
    a176:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        if ((FLEXCAN_STATUS_SUCCESS ==  result) && (FALSE == tx_info->is_polling))
    a178:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a17a:	2b00      	cmp	r3, #0
    a17c:	d113      	bne.n	a1a6 <FlexCAN_Ip_Send+0x86>
    a17e:	9b04      	ldr	r3, [sp, #16]
    a180:	7b1b      	ldrb	r3, [r3, #12]
    a182:	f083 0301 	eor.w	r3, r3, #1
    a186:	b2db      	uxtb	r3, r3
    a188:	2b00      	cmp	r3, #0
    a18a:	d00c      	beq.n	a1a6 <FlexCAN_Ip_Send+0x86>
        {
            /* Enable message buffer interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    a18c:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a190:	9b07      	ldr	r3, [sp, #28]
    a192:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a196:	f89d 1017 	ldrb.w	r1, [sp, #23]
    a19a:	9300      	str	r3, [sp, #0]
    a19c:	2301      	movs	r3, #1
    a19e:	9808      	ldr	r0, [sp, #32]
    a1a0:	f002 f9b6 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
    a1a4:	9009      	str	r0, [sp, #36]	; 0x24
        }
#endif
    }
    return result;
    a1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    a1a8:	4618      	mov	r0, r3
    a1aa:	b00b      	add	sp, #44	; 0x2c
    a1ac:	f85d fb04 	ldr.w	pc, [sp], #4
    a1b0:	000101c4 	.word	0x000101c4
    a1b4:	1fff8fb8 	.word	0x1fff8fb8

0000a1b8 <FlexCAN_Ip_ConfigRxMb>:
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxMb(uint8 instance,
                                            uint8 mb_idx,
                                            const Flexcan_Ip_DataInfoType * rx_info,
                                            uint32 msg_id
                                           )
{
    a1b8:	b500      	push	{lr}
    a1ba:	b08b      	sub	sp, #44	; 0x2c
    a1bc:	9202      	str	r2, [sp, #8]
    a1be:	9301      	str	r3, [sp, #4]
    a1c0:	4603      	mov	r3, r0
    a1c2:	f88d 300f 	strb.w	r3, [sp, #15]
    a1c6:	460b      	mov	r3, r1
    a1c8:	f88d 300e 	strb.w	r3, [sp, #14]
    Flexcan_Ip_StatusType eResult = FLEXCAN_STATUS_SUCCESS;
    a1cc:	2300      	movs	r3, #0
    a1ce:	9309      	str	r3, [sp, #36]	; 0x24
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a1d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a1d4:	4a19      	ldr	r2, [pc, #100]	; (a23c <FlexCAN_Ip_ConfigRxMb+0x84>)
    a1d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1da:	9308      	str	r3, [sp, #32]
    }
    else
    {
#endif
        /* Clear the message buffer flag if previous remained triggered */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a1dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a1e0:	4619      	mov	r1, r3
    a1e2:	9808      	ldr	r0, [sp, #32]
    a1e4:	f7fe ff2c 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>

        cs.dataLen = rx_info->data_length;
    a1e8:	9b02      	ldr	r3, [sp, #8]
    a1ea:	685b      	ldr	r3, [r3, #4]
    a1ec:	9306      	str	r3, [sp, #24]
        cs.msgIdType = rx_info->msg_id_type;
    a1ee:	9b02      	ldr	r3, [sp, #8]
    a1f0:	681b      	ldr	r3, [r3, #0]
    a1f2:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = rx_info->fd_enable;
    a1f4:	9b02      	ldr	r3, [sp, #8]
    a1f6:	7a1b      	ldrb	r3, [r3, #8]
    a1f8:	f88d 301c 	strb.w	r3, [sp, #28]
    #endif

        /* Initialize rx mb*/
        cs.code = (uint32)FLEXCAN_RX_NOT_USED;
    a1fc:	230f      	movs	r3, #15
    a1fe:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    a200:	f89d 100e 	ldrb.w	r1, [sp, #14]
    a204:	aa04      	add	r2, sp, #16
    a206:	9b01      	ldr	r3, [sp, #4]
    a208:	9808      	ldr	r0, [sp, #32]
    a20a:	f002 fa25 	bl	c658 <FlexCAN_SetRxMsgBuff>

        /* Initialize receive MB*/
        cs.code = (uint32)FLEXCAN_RX_INACTIVE;
    a20e:	2300      	movs	r3, #0
    a210:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    a212:	f89d 100e 	ldrb.w	r1, [sp, #14]
    a216:	aa04      	add	r2, sp, #16
    a218:	9b01      	ldr	r3, [sp, #4]
    a21a:	9808      	ldr	r0, [sp, #32]
    a21c:	f002 fa1c 	bl	c658 <FlexCAN_SetRxMsgBuff>

        /* Set up FlexCAN message buffer fields for receiving data*/
        cs.code = (uint32)FLEXCAN_RX_EMPTY;
    a220:	2304      	movs	r3, #4
    a222:	9304      	str	r3, [sp, #16]
        FlexCAN_SetRxMsgBuff(base, mb_idx, &cs, msg_id);
    a224:	f89d 100e 	ldrb.w	r1, [sp, #14]
    a228:	aa04      	add	r2, sp, #16
    a22a:	9b01      	ldr	r3, [sp, #4]
    a22c:	9808      	ldr	r0, [sp, #32]
    a22e:	f002 fa13 	bl	c658 <FlexCAN_SetRxMsgBuff>
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return eResult;
    a232:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    a234:	4618      	mov	r0, r3
    a236:	b00b      	add	sp, #44	; 0x2c
    a238:	f85d fb04 	ldr.w	pc, [sp], #4
    a23c:	000101c4 	.word	0x000101c4

0000a240 <FlexCAN_Ip_Receive>:
Flexcan_Ip_StatusType FlexCAN_Ip_Receive(uint8 instance,
                                         uint8 mb_idx,
                                         Flexcan_Ip_MsgBuffType * data,
                                         boolean isPolling
                                        )
{
    a240:	b500      	push	{lr}
    a242:	b089      	sub	sp, #36	; 0x24
    a244:	9202      	str	r2, [sp, #8]
    a246:	461a      	mov	r2, r3
    a248:	4603      	mov	r3, r0
    a24a:	f88d 300f 	strb.w	r3, [sp, #15]
    a24e:	460b      	mov	r3, r1
    a250:	f88d 300e 	strb.w	r3, [sp, #14]
    a254:	4613      	mov	r3, r2
    a256:	f88d 300d 	strb.w	r3, [sp, #13]

    Flexcan_Ip_StatusType result;
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a25a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a25e:	4a18      	ldr	r2, [pc, #96]	; (a2c0 <FlexCAN_Ip_Receive+0x80>)
    a260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a264:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a266:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a26a:	4a16      	ldr	r2, [pc, #88]	; (a2c4 <FlexCAN_Ip_Receive+0x84>)
    a26c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a270:	9305      	str	r3, [sp, #20]
#endif
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    #endif

    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    a272:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a276:	f89d 100e 	ldrb.w	r1, [sp, #14]
    a27a:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a27e:	9a02      	ldr	r2, [sp, #8]
    a280:	f7ff fa86 	bl	9790 <FlexCAN_StartRxMessageBufferData>
    a284:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    a286:	9b07      	ldr	r3, [sp, #28]
    a288:	2b00      	cmp	r3, #0
    a28a:	d113      	bne.n	a2b4 <FlexCAN_Ip_Receive+0x74>
    a28c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a290:	f083 0301 	eor.w	r3, r3, #1
    a294:	b2db      	uxtb	r3, r3
    a296:	2b00      	cmp	r3, #0
    a298:	d00c      	beq.n	a2b4 <FlexCAN_Ip_Receive+0x74>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    a29a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a29e:	9b05      	ldr	r3, [sp, #20]
    a2a0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a2a4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a2a8:	9300      	str	r3, [sp, #0]
    a2aa:	2301      	movs	r3, #1
    a2ac:	9806      	ldr	r0, [sp, #24]
    a2ae:	f002 f92f 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
    a2b2:	9007      	str	r0, [sp, #28]
    }
#endif
    return result;
    a2b4:	9b07      	ldr	r3, [sp, #28]
}
    a2b6:	4618      	mov	r0, r3
    a2b8:	b009      	add	sp, #36	; 0x24
    a2ba:	f85d fb04 	ldr.w	pc, [sp], #4
    a2be:	bf00      	nop
    a2c0:	000101c4 	.word	0x000101c4
    a2c4:	1fff8fb8 	.word	0x1fff8fb8

0000a2c8 <FlexCAN_Ip_ReceiveBlocking>:
                                                 uint8 mb_idx,
                                                 Flexcan_Ip_MsgBuffType * data,
                                                 boolean isPolling,
                                                 uint32 u32TimeoutMs
                                                )
{
    a2c8:	b500      	push	{lr}
    a2ca:	b08b      	sub	sp, #44	; 0x2c
    a2cc:	9202      	str	r2, [sp, #8]
    a2ce:	461a      	mov	r2, r3
    a2d0:	4603      	mov	r3, r0
    a2d2:	f88d 300f 	strb.w	r3, [sp, #15]
    a2d6:	460b      	mov	r3, r1
    a2d8:	f88d 300e 	strb.w	r3, [sp, #14]
    a2dc:	4613      	mov	r3, r2
    a2de:	f88d 300d 	strb.w	r3, [sp, #13]
    Flexcan_Ip_StatusType result;
    uint32 timeStart = 0U;
    a2e2:	2300      	movs	r3, #0
    a2e4:	9304      	str	r3, [sp, #16]
    uint32 timeElapsed = 0U;
    a2e6:	2300      	movs	r3, #0
    a2e8:	9308      	str	r3, [sp, #32]
    uint32 mS2Ticks = OsIf_MicrosToTicks((u32TimeoutMs * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a2ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a2ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a2f0:	fb02 f303 	mul.w	r3, r2, r3
    a2f4:	2100      	movs	r1, #0
    a2f6:	4618      	mov	r0, r3
    a2f8:	f7f7 ffbc 	bl	2274 <OsIf_MicrosToTicks>
    a2fc:	9007      	str	r0, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a2fe:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a302:	4a4c      	ldr	r2, [pc, #304]	; (a434 <FlexCAN_Ip_ReceiveBlocking+0x16c>)
    a304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a308:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a30a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a30e:	4a4a      	ldr	r2, [pc, #296]	; (a438 <FlexCAN_Ip_ReceiveBlocking+0x170>)
    a310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a314:	9305      	str	r3, [sp, #20]
#else
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
#endif
    result = FlexCAN_StartRxMessageBufferData(instance, mb_idx, data, isPolling);
    a316:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a31a:	f89d 100e 	ldrb.w	r1, [sp, #14]
    a31e:	f89d 000f 	ldrb.w	r0, [sp, #15]
    a322:	9a02      	ldr	r2, [sp, #8]
    a324:	f7ff fa34 	bl	9790 <FlexCAN_StartRxMessageBufferData>
    a328:	9009      	str	r0, [sp, #36]	; 0x24
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
    if ((FLEXCAN_STATUS_SUCCESS == result) && (FALSE == isPolling))
    a32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a32c:	2b00      	cmp	r3, #0
    a32e:	d113      	bne.n	a358 <FlexCAN_Ip_ReceiveBlocking+0x90>
    a330:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a334:	f083 0301 	eor.w	r3, r3, #1
    a338:	b2db      	uxtb	r3, r3
    a33a:	2b00      	cmp	r3, #0
    a33c:	d00c      	beq.n	a358 <FlexCAN_Ip_ReceiveBlocking+0x90>
    {
        /* Enable MB interrupt*/
        result = FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, TRUE, state->isIntActive);
    a33e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a342:	9b06      	ldr	r3, [sp, #24]
    a344:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a348:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a34c:	9300      	str	r3, [sp, #0]
    a34e:	2301      	movs	r3, #1
    a350:	9805      	ldr	r0, [sp, #20]
    a352:	f002 f8dd 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
    a356:	9009      	str	r0, [sp, #36]	; 0x24
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a358:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a35a:	2b00      	cmp	r3, #0
    a35c:	d133      	bne.n	a3c6 <FlexCAN_Ip_ReceiveBlocking+0xfe>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a35e:	2000      	movs	r0, #0
    a360:	f7f7 ff3c 	bl	21dc <OsIf_GetCounter>
    a364:	4603      	mov	r3, r0
    a366:	9304      	str	r3, [sp, #16]
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    a368:	e024      	b.n	a3b4 <FlexCAN_Ip_ReceiveBlocking+0xec>
        {
            if (TRUE == isPolling)
    a36a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a36e:	2b00      	cmp	r3, #0
    a370:	d010      	beq.n	a394 <FlexCAN_Ip_ReceiveBlocking+0xcc>
            {
                if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    a372:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a376:	4619      	mov	r1, r3
    a378:	9805      	ldr	r0, [sp, #20]
    a37a:	f7fe fe74 	bl	9066 <FlexCAN_GetBuffStatusFlag>
    a37e:	4603      	mov	r3, r0
    a380:	2b00      	cmp	r3, #0
    a382:	d007      	beq.n	a394 <FlexCAN_Ip_ReceiveBlocking+0xcc>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    a384:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a388:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a38c:	4611      	mov	r1, r2
    a38e:	4618      	mov	r0, r3
    a390:	f7ff fb20 	bl	99d4 <FlexCAN_IRQHandlerRxMB>
                }
            }
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    a394:	ab04      	add	r3, sp, #16
    a396:	2100      	movs	r1, #0
    a398:	4618      	mov	r0, r3
    a39a:	f7f7 ff38 	bl	220e <OsIf_GetElapsed>
    a39e:	4602      	mov	r2, r0
    a3a0:	9b08      	ldr	r3, [sp, #32]
    a3a2:	4413      	add	r3, r2
    a3a4:	9308      	str	r3, [sp, #32]
            if (timeElapsed >= mS2Ticks)
    a3a6:	9a08      	ldr	r2, [sp, #32]
    a3a8:	9b07      	ldr	r3, [sp, #28]
    a3aa:	429a      	cmp	r2, r3
    a3ac:	d302      	bcc.n	a3b4 <FlexCAN_Ip_ReceiveBlocking+0xec>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    a3ae:	2303      	movs	r3, #3
    a3b0:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    a3b2:	e008      	b.n	a3c6 <FlexCAN_Ip_ReceiveBlocking+0xfe>
        while (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    a3b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a3b8:	9a06      	ldr	r2, [sp, #24]
    a3ba:	011b      	lsls	r3, r3, #4
    a3bc:	4413      	add	r3, r2
    a3be:	3304      	adds	r3, #4
    a3c0:	681b      	ldr	r3, [r3, #0]
    a3c2:	2b01      	cmp	r3, #1
    a3c4:	d0d1      	beq.n	a36a <FlexCAN_Ip_ReceiveBlocking+0xa2>
            }
        }
    }

    if ((FLEXCAN_STATUS_TIMEOUT == result) && (FALSE == isPolling))
    a3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a3c8:	2b03      	cmp	r3, #3
    a3ca:	d112      	bne.n	a3f2 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    a3cc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    a3d0:	f083 0301 	eor.w	r3, r3, #1
    a3d4:	b2db      	uxtb	r3, r3
    a3d6:	2b00      	cmp	r3, #0
    a3d8:	d00b      	beq.n	a3f2 <FlexCAN_Ip_ReceiveBlocking+0x12a>
    {
#if (FLEXCAN_IP_MB_INTERRUPT_SUPPORT == STD_ON)
        /* Disable Mb interrupt*/
       (void)FlexCAN_SetMsgBuffIntCmd(base, instance, mb_idx, FALSE, state->isIntActive);
    a3da:	f89d 200e 	ldrb.w	r2, [sp, #14]
    a3de:	9b06      	ldr	r3, [sp, #24]
    a3e0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a3e4:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a3e8:	9300      	str	r3, [sp, #0]
    a3ea:	2300      	movs	r3, #0
    a3ec:	9805      	ldr	r0, [sp, #20]
    a3ee:	f002 f88f 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
#endif
    }

    if ((FLEXCAN_STATUS_BUFF_OUT_OF_RANGE != result) && (FLEXCAN_STATUS_BUSY != result))
    a3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a3f4:	2b04      	cmp	r3, #4
    a3f6:	d018      	beq.n	a42a <FlexCAN_Ip_ReceiveBlocking+0x162>
    a3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a3fa:	2b02      	cmp	r3, #2
    a3fc:	d015      	beq.n	a42a <FlexCAN_Ip_ReceiveBlocking+0x162>
    {
        if ((FLEXCAN_MB_IDLE == state->mbs[mb_idx].state))
    a3fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a402:	9a06      	ldr	r2, [sp, #24]
    a404:	011b      	lsls	r3, r3, #4
    a406:	4413      	add	r3, r2
    a408:	3304      	adds	r3, #4
    a40a:	681b      	ldr	r3, [r3, #0]
    a40c:	2b00      	cmp	r3, #0
    a40e:	d102      	bne.n	a416 <FlexCAN_Ip_ReceiveBlocking+0x14e>
        {
            result = FLEXCAN_STATUS_SUCCESS;
    a410:	2300      	movs	r3, #0
    a412:	9309      	str	r3, [sp, #36]	; 0x24
    a414:	e009      	b.n	a42a <FlexCAN_Ip_ReceiveBlocking+0x162>
        }
        else
        {
            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    a416:	f89d 300e 	ldrb.w	r3, [sp, #14]
    a41a:	9a06      	ldr	r2, [sp, #24]
    a41c:	011b      	lsls	r3, r3, #4
    a41e:	4413      	add	r3, r2
    a420:	3304      	adds	r3, #4
    a422:	2200      	movs	r2, #0
    a424:	601a      	str	r2, [r3, #0]
            result = FLEXCAN_STATUS_TIMEOUT;
    a426:	2303      	movs	r3, #3
    a428:	9309      	str	r3, [sp, #36]	; 0x24
        }
    }
    return result;
    a42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
}
    a42c:	4618      	mov	r0, r3
    a42e:	b00b      	add	sp, #44	; 0x2c
    a430:	f85d fb04 	ldr.w	pc, [sp], #4
    a434:	1fff8fb8 	.word	0x1fff8fb8
    a438:	000101c4 	.word	0x000101c4

0000a43c <FlexCAN_Ip_RxFifo>:
 * after the frame was received and read into the specified buffer.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_RxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifo(uint8 instance, Flexcan_Ip_MsgBuffType * data)
{
    a43c:	b500      	push	{lr}
    a43e:	b085      	sub	sp, #20
    a440:	4603      	mov	r3, r0
    a442:	9100      	str	r1, [sp, #0]
    a444:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a448:	2300      	movs	r3, #0
    a44a:	9303      	str	r3, [sp, #12]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    a44c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a450:	9900      	ldr	r1, [sp, #0]
    a452:	4618      	mov	r0, r3
    a454:	f7ff fa5e 	bl	9914 <FlexCAN_StartRxMessageFifoData>
    a458:	9003      	str	r0, [sp, #12]
    }
    return result;
    a45a:	9b03      	ldr	r3, [sp, #12]
}
    a45c:	4618      	mov	r0, r3
    a45e:	b005      	add	sp, #20
    a460:	f85d fb04 	ldr.w	pc, [sp], #4

0000a464 <FlexCAN_Ip_RxFifoBlocking>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_RxFifoBlocking_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_RxFifoBlocking(uint8 instance, Flexcan_Ip_MsgBuffType *data, uint32 timeout)
{
    a464:	b500      	push	{lr}
    a466:	b087      	sub	sp, #28
    a468:	4603      	mov	r3, r0
    a46a:	9102      	str	r1, [sp, #8]
    a46c:	9201      	str	r2, [sp, #4]
    a46e:	f88d 300f 	strb.w	r3, [sp, #15]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a472:	2300      	movs	r3, #0
    a474:	9305      	str	r3, [sp, #20]
        }
    }
    else
#endif /*FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO*/
    {
        result = FlexCAN_StartRxMessageFifoData(instance, data);
    a476:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a47a:	9902      	ldr	r1, [sp, #8]
    a47c:	4618      	mov	r0, r3
    a47e:	f7ff fa49 	bl	9914 <FlexCAN_StartRxMessageFifoData>
    a482:	9005      	str	r0, [sp, #20]
        if (FLEXCAN_STATUS_SUCCESS == result)
    a484:	9b05      	ldr	r3, [sp, #20]
    a486:	2b00      	cmp	r3, #0
    a488:	d106      	bne.n	a498 <FlexCAN_Ip_RxFifoBlocking+0x34>
        {
            result = FlexCAN_ProccessLegacyRxFIFO(instance, timeout);
    a48a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a48e:	9901      	ldr	r1, [sp, #4]
    a490:	4618      	mov	r0, r3
    a492:	f7ff f8e2 	bl	965a <FlexCAN_ProccessLegacyRxFIFO>
    a496:	9005      	str	r0, [sp, #20]
        }
    }
    return result;
    a498:	9b05      	ldr	r3, [sp, #20]
}
    a49a:	4618      	mov	r0, r3
    a49c:	b007      	add	sp, #28
    a49e:	f85d fb04 	ldr.w	pc, [sp], #4

0000a4a2 <FlexCAN_Ip_ConfigRxFifo_Privileged>:
/* implements FlexCAN_Ip_ConfigRxFifo_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ConfigRxFifo_Privileged(uint8 instance,
                                                         Flexcan_Ip_RxFifoIdElementFormatType id_format,
                                                         const Flexcan_Ip_IdTableType * id_filter_table
                                                        )
{
    a4a2:	b500      	push	{lr}
    a4a4:	b089      	sub	sp, #36	; 0x24
    a4a6:	4603      	mov	r3, r0
    a4a8:	9102      	str	r1, [sp, #8]
    a4aa:	9201      	str	r2, [sp, #4]
    a4ac:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a4b0:	2300      	movs	r3, #0
    a4b2:	9307      	str	r3, [sp, #28]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    a4b4:	2300      	movs	r3, #0
    a4b6:	9306      	str	r3, [sp, #24]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a4b8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a4bc:	4a1c      	ldr	r2, [pc, #112]	; (a530 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x8e>)
    a4be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a4c2:	9305      	str	r3, [sp, #20]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    a4c4:	9805      	ldr	r0, [sp, #20]
    a4c6:	f7fe fd61 	bl	8f8c <FlexCAN_IsEnabled>
    a4ca:	4603      	mov	r3, r0
    a4cc:	2b00      	cmp	r3, #0
    a4ce:	bf14      	ite	ne
    a4d0:	2301      	movne	r3, #1
    a4d2:	2300      	moveq	r3, #0
    a4d4:	b2db      	uxtb	r3, r3
    a4d6:	f083 0301 	eor.w	r3, r3, #1
    a4da:	b2db      	uxtb	r3, r3
    a4dc:	f88d 3013 	strb.w	r3, [sp, #19]
    a4e0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a4e4:	f003 0301 	and.w	r3, r3, #1
    a4e8:	f88d 3013 	strb.w	r3, [sp, #19]

    if (TRUE == disabled)
    a4ec:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a4f0:	2b00      	cmp	r3, #0
    a4f2:	d003      	beq.n	a4fc <FlexCAN_Ip_ConfigRxFifo_Privileged+0x5a>
    {
        result = FlexCAN_Enable(pBase);
    a4f4:	9805      	ldr	r0, [sp, #20]
    a4f6:	f001 fd6b 	bl	bfd0 <FlexCAN_Enable>
    a4fa:	9007      	str	r0, [sp, #28]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    a4fc:	9b07      	ldr	r3, [sp, #28]
    a4fe:	2b00      	cmp	r3, #0
    a500:	d104      	bne.n	a50c <FlexCAN_Ip_ConfigRxFifo_Privileged+0x6a>
    {
        /* Initialize rx fifo*/
        FlexCAN_SetRxFifoFilter(pBase, id_format, id_filter_table);
    a502:	9a01      	ldr	r2, [sp, #4]
    a504:	9902      	ldr	r1, [sp, #8]
    a506:	9805      	ldr	r0, [sp, #20]
    a508:	f002 fba5 	bl	cc56 <FlexCAN_SetRxFifoFilter>
    }

    if (TRUE == disabled)
    a50c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    a510:	2b00      	cmp	r3, #0
    a512:	d008      	beq.n	a526 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
    {
        status = FlexCAN_Disable(pBase);
    a514:	9805      	ldr	r0, [sp, #20]
    a516:	f001 fdd9 	bl	c0cc <FlexCAN_Disable>
    a51a:	9006      	str	r0, [sp, #24]
        if (FLEXCAN_STATUS_SUCCESS != status)
    a51c:	9b06      	ldr	r3, [sp, #24]
    a51e:	2b00      	cmp	r3, #0
    a520:	d001      	beq.n	a526 <FlexCAN_Ip_ConfigRxFifo_Privileged+0x84>
        {
            result = status;
    a522:	9b06      	ldr	r3, [sp, #24]
    a524:	9307      	str	r3, [sp, #28]
        }
    }

    return result;
    a526:	9b07      	ldr	r3, [sp, #28]
}
    a528:	4618      	mov	r0, r3
    a52a:	b009      	add	sp, #36	; 0x24
    a52c:	f85d fb04 	ldr.w	pc, [sp], #4
    a530:	000101c4 	.word	0x000101c4

0000a534 <FlexCAN_Ip_ConfigRemoteResponseMb>:
                                                        uint8 mb_idx,
                                                        const Flexcan_Ip_DataInfoType *tx_info,
                                                        uint32 msg_id,
                                                        const uint8 *mb_data
                                                       )
{
    a534:	b500      	push	{lr}
    a536:	b08f      	sub	sp, #60	; 0x3c
    a538:	9204      	str	r2, [sp, #16]
    a53a:	9303      	str	r3, [sp, #12]
    a53c:	4603      	mov	r3, r0
    a53e:	f88d 3017 	strb.w	r3, [sp, #23]
    a542:	460b      	mov	r3, r1
    a544:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    a548:	2300      	movs	r3, #0
    a54a:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_MsbuffCodeStatusType cs;
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a54c:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a550:	4a27      	ldr	r2, [pc, #156]	; (a5f0 <FlexCAN_Ip_ConfigRemoteResponseMb+0xbc>)
    a552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a556:	930c      	str	r3, [sp, #48]	; 0x30
    const Flexcan_Ip_StateType * const state = Flexcan_Ip_apxState[instance];
    a558:	f89d 3017 	ldrb.w	r3, [sp, #23]
    a55c:	4a25      	ldr	r2, [pc, #148]	; (a5f4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xc0>)
    a55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a562:	930b      	str	r3, [sp, #44]	; 0x2c
    volatile uint32 * pMbAddr = NULL_PTR;
    a564:	2300      	movs	r3, #0
    a566:	930a      	str	r3, [sp, #40]	; 0x28
    if (TRUE == FlexCAN_IsMbOutOfRange(pBase, mb_idx, state->bIsLegacyFifoEn, state->u32MaxMbNum))
    {
        result = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    a568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a56a:	2b00      	cmp	r3, #0
    a56c:	d13a      	bne.n	a5e4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
    {
        /* Initialize transmit mb*/
        cs.dataLen = tx_info->data_length;
    a56e:	9b04      	ldr	r3, [sp, #16]
    a570:	685b      	ldr	r3, [r3, #4]
    a572:	9308      	str	r3, [sp, #32]
        cs.msgIdType = tx_info->msg_id_type;
    a574:	9b04      	ldr	r3, [sp, #16]
    a576:	681b      	ldr	r3, [r3, #0]
    a578:	9307      	str	r3, [sp, #28]
        cs.code = (uint32)FLEXCAN_RX_RANSWER;
    a57a:	230a      	movs	r3, #10
    a57c:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        cs.fd_enable = FALSE;
    a57e:	2300      	movs	r3, #0
    a580:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        cs.enable_brs = FALSE;
    a584:	2300      	movs	r3, #0
    a586:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        cs.fd_padding = 0x00U;
    a58a:	2300      	movs	r3, #0
    a58c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
#endif
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, mb_idx);
    a590:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a594:	4619      	mov	r1, r3
    a596:	980c      	ldr	r0, [sp, #48]	; 0x30
    a598:	f7fe fd52 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
        pMbAddr = FlexCAN_GetMsgBuffRegion(pBase, mb_idx);
    a59c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    a5a0:	4619      	mov	r1, r3
    a5a2:	980c      	ldr	r0, [sp, #48]	; 0x30
    a5a4:	f001 fc2c 	bl	be00 <FlexCAN_GetMsgBuffRegion>
    a5a8:	900a      	str	r0, [sp, #40]	; 0x28
        FlexCAN_SetTxMsgBuff(pMbAddr, &cs, msg_id, mb_data, tx_info->is_remote);
    a5aa:	9b04      	ldr	r3, [sp, #16]
    a5ac:	7adb      	ldrb	r3, [r3, #11]
    a5ae:	a906      	add	r1, sp, #24
    a5b0:	9300      	str	r3, [sp, #0]
    a5b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a5b4:	9a03      	ldr	r2, [sp, #12]
    a5b6:	980a      	ldr	r0, [sp, #40]	; 0x28
    a5b8:	f002 f974 	bl	c8a4 <FlexCAN_SetTxMsgBuff>
        if (FALSE == tx_info->is_polling)
    a5bc:	9b04      	ldr	r3, [sp, #16]
    a5be:	7b1b      	ldrb	r3, [r3, #12]
    a5c0:	f083 0301 	eor.w	r3, r3, #1
    a5c4:	b2db      	uxtb	r3, r3
    a5c6:	2b00      	cmp	r3, #0
    a5c8:	d00c      	beq.n	a5e4 <FlexCAN_Ip_ConfigRemoteResponseMb+0xb0>
        {
            /* Enable MB interrupt*/
            result = FlexCAN_SetMsgBuffIntCmd(pBase, instance, mb_idx, TRUE, state->isIntActive);
    a5ca:	f89d 2016 	ldrb.w	r2, [sp, #22]
    a5ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a5d0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a5d4:	f89d 1017 	ldrb.w	r1, [sp, #23]
    a5d8:	9300      	str	r3, [sp, #0]
    a5da:	2301      	movs	r3, #1
    a5dc:	980c      	ldr	r0, [sp, #48]	; 0x30
    a5de:	f001 ff97 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
    a5e2:	900d      	str	r0, [sp, #52]	; 0x34
        }
    }
    return result;
    a5e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
}
    a5e6:	4618      	mov	r0, r3
    a5e8:	b00f      	add	sp, #60	; 0x3c
    a5ea:	f85d fb04 	ldr.w	pc, [sp], #4
    a5ee:	bf00      	nop
    a5f0:	000101c4 	.word	0x000101c4
    a5f4:	1fff8fb8 	.word	0x1fff8fb8

0000a5f8 <FlexCAN_Ip_GetTransferStatus>:
 * or complete (success). In case Enhanced Rx Fifo, mb_idx will be 255.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetTransferStatus_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_GetTransferStatus(uint8 instance, uint8 mb_idx)
{
    a5f8:	b084      	sub	sp, #16
    a5fa:	4603      	mov	r3, r0
    a5fc:	460a      	mov	r2, r1
    a5fe:	f88d 3007 	strb.w	r3, [sp, #7]
    a602:	4613      	mov	r3, r2
    a604:	f88d 3006 	strb.w	r3, [sp, #6]

    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a608:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a60c:	4a0d      	ldr	r2, [pc, #52]	; (a644 <FlexCAN_Ip_GetTransferStatus+0x4c>)
    a60e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a612:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_ERROR;
    a614:	2301      	movs	r3, #1
    a616:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
#endif

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    a618:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a61c:	2b1f      	cmp	r3, #31
    a61e:	d80d      	bhi.n	a63c <FlexCAN_Ip_GetTransferStatus+0x44>
    {
        if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    a620:	f89d 3006 	ldrb.w	r3, [sp, #6]
    a624:	9a02      	ldr	r2, [sp, #8]
    a626:	011b      	lsls	r3, r3, #4
    a628:	4413      	add	r3, r2
    a62a:	3304      	adds	r3, #4
    a62c:	681b      	ldr	r3, [r3, #0]
    a62e:	2b00      	cmp	r3, #0
    a630:	d102      	bne.n	a638 <FlexCAN_Ip_GetTransferStatus+0x40>
        {
            status = FLEXCAN_STATUS_SUCCESS;
    a632:	2300      	movs	r3, #0
    a634:	9303      	str	r3, [sp, #12]
    a636:	e001      	b.n	a63c <FlexCAN_Ip_GetTransferStatus+0x44>
            status = FLEXCAN_STATUS_ERROR;
        }
#endif
        else
        {
            status = FLEXCAN_STATUS_BUSY;
    a638:	2302      	movs	r3, #2
    a63a:	9303      	str	r3, [sp, #12]
            status = FLEXCAN_STATUS_BUSY;
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return status;
    a63c:	9b03      	ldr	r3, [sp, #12]
}
    a63e:	4618      	mov	r0, r3
    a640:	b004      	add	sp, #16
    a642:	4770      	bx	lr
    a644:	1fff8fb8 	.word	0x1fff8fb8

0000a648 <FlexCAN_CompleteRxMessageFifoData>:
 * data and disabling the interrupt.
 * This is not a public API as it is called from other driver functions.
 *
 *END**************************************************************************/
static void FlexCAN_CompleteRxMessageFifoData(uint8 instance)
{
    a648:	b500      	push	{lr}
    a64a:	b087      	sub	sp, #28
    a64c:	4603      	mov	r3, r0
    a64e:	f88d 300f 	strb.w	r3, [sp, #15]

    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a652:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a656:	4a1d      	ldr	r2, [pc, #116]	; (a6cc <FlexCAN_CompleteRxMessageFifoData+0x84>)
    a658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a65c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a65e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a662:	4a1b      	ldr	r2, [pc, #108]	; (a6d0 <FlexCAN_CompleteRxMessageFifoData+0x88>)
    a664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a668:	9304      	str	r3, [sp, #16]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FLEXCAN_RXFIFO_USING_INTERRUPTS == state->transferType)
    a66a:	9b04      	ldr	r3, [sp, #16]
    a66c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    a670:	2b00      	cmp	r3, #0
    a672:	d120      	bne.n	a6b6 <FlexCAN_CompleteRxMessageFifoData+0x6e>
    {
        /* Disable RX FIFO interrupts*/
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE, FALSE, state->isIntActive);
    a674:	9b04      	ldr	r3, [sp, #16]
    a676:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a67a:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a67e:	9300      	str	r3, [sp, #0]
    a680:	2300      	movs	r3, #0
    a682:	2205      	movs	r2, #5
    a684:	9805      	ldr	r0, [sp, #20]
    a686:	f001 ff43 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_WARNING, FALSE, state->isIntActive);
    a68a:	9b04      	ldr	r3, [sp, #16]
    a68c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a690:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a694:	9300      	str	r3, [sp, #0]
    a696:	2300      	movs	r3, #0
    a698:	2206      	movs	r2, #6
    a69a:	9805      	ldr	r0, [sp, #20]
    a69c:	f001 ff38 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
        (void)FlexCAN_SetMsgBuffIntCmd(base, instance, FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW, FALSE, state->isIntActive);
    a6a0:	9b04      	ldr	r3, [sp, #16]
    a6a2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    a6a6:	f89d 100f 	ldrb.w	r1, [sp, #15]
    a6aa:	9300      	str	r3, [sp, #0]
    a6ac:	2300      	movs	r3, #0
    a6ae:	2207      	movs	r2, #7
    a6b0:	9805      	ldr	r0, [sp, #20]
    a6b2:	f001 ff2d 	bl	c510 <FlexCAN_SetMsgBuffIntCmd>
    {
        /* do nothing when transferType is POLLING */
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
    /* Clear fifo message*/
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].pMBmessage = NULL_PTR;
    a6b6:	9b04      	ldr	r3, [sp, #16]
    a6b8:	2200      	movs	r2, #0
    a6ba:	601a      	str	r2, [r3, #0]
            state->callback(instance, FLEXCAN_EVENT_DMA_ERROR, FLEXCAN_IP_MB_HANDLE_RXFIFO, state);
        }
    }

#else
    state->mbs[FLEXCAN_IP_MB_HANDLE_RXFIFO].state = FLEXCAN_MB_IDLE;
    a6bc:	9b04      	ldr	r3, [sp, #16]
    a6be:	2200      	movs	r2, #0
    a6c0:	605a      	str	r2, [r3, #4]
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
}
    a6c2:	bf00      	nop
    a6c4:	b007      	add	sp, #28
    a6c6:	f85d fb04 	ldr.w	pc, [sp], #4
    a6ca:	bf00      	nop
    a6cc:	000101c4 	.word	0x000101c4
    a6d0:	1fff8fb8 	.word	0x1fff8fb8

0000a6d4 <FlexCAN_IRQHandler>:
    uint32 endMbIdx
    #if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    ,boolean bEnhancedFifoExisted
    #endif
)
{
    a6d4:	b500      	push	{lr}
    a6d6:	b08b      	sub	sp, #44	; 0x2c
    a6d8:	4603      	mov	r3, r0
    a6da:	9102      	str	r1, [sp, #8]
    a6dc:	9201      	str	r2, [sp, #4]
    a6de:	f88d 300f 	strb.w	r3, [sp, #15]
    uint32 u32MbHandle = 0U;
    a6e2:	2300      	movs	r3, #0
    a6e4:	9309      	str	r3, [sp, #36]	; 0x24
    uint32 flag_reg = 0;
    a6e6:	2300      	movs	r3, #0
    a6e8:	9308      	str	r3, [sp, #32]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a6ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6ee:	4a3f      	ldr	r2, [pc, #252]	; (a7ec <FlexCAN_IRQHandler+0x118>)
    a6f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a6f4:	9306      	str	r3, [sp, #24]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a6f6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a6fa:	4a3d      	ldr	r2, [pc, #244]	; (a7f0 <FlexCAN_IRQHandler+0x11c>)
    a6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a700:	9305      	str	r3, [sp, #20]

    /* Get the interrupts that are enabled and ready */
    uint32 mb_idx = endMbIdx;
    a702:	9b01      	ldr	r3, [sp, #4]
    a704:	9307      	str	r3, [sp, #28]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(endMbIdx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM);
#endif
    /* Check if instance initialized */
    if (NULL_PTR != state)
    a706:	9b05      	ldr	r3, [sp, #20]
    a708:	2b00      	cmp	r3, #0
    a70a:	d05c      	beq.n	a7c6 <FlexCAN_IRQHandler+0xf2>
    {
        flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    a70c:	9907      	ldr	r1, [sp, #28]
    a70e:	9806      	ldr	r0, [sp, #24]
    a710:	f7fe fe47 	bl	93a2 <FlexCAN_GetMsgBuffIntStatusFlag>
    a714:	4603      	mov	r3, r0
    a716:	9308      	str	r3, [sp, #32]

        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    a718:	e008      	b.n	a72c <FlexCAN_IRQHandler+0x58>
        {
            mb_idx--;
    a71a:	9b07      	ldr	r3, [sp, #28]
    a71c:	3b01      	subs	r3, #1
    a71e:	9307      	str	r3, [sp, #28]
            flag_reg = FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx);
    a720:	9907      	ldr	r1, [sp, #28]
    a722:	9806      	ldr	r0, [sp, #24]
    a724:	f7fe fe3d 	bl	93a2 <FlexCAN_GetMsgBuffIntStatusFlag>
    a728:	4603      	mov	r3, r0
    a72a:	9308      	str	r3, [sp, #32]
        while ((0U == flag_reg) && (mb_idx > startMbIdx))
    a72c:	9b08      	ldr	r3, [sp, #32]
    a72e:	2b00      	cmp	r3, #0
    a730:	d103      	bne.n	a73a <FlexCAN_IRQHandler+0x66>
    a732:	9a07      	ldr	r2, [sp, #28]
    a734:	9b02      	ldr	r3, [sp, #8]
    a736:	429a      	cmp	r2, r3
    a738:	d8ef      	bhi.n	a71a <FlexCAN_IRQHandler+0x46>
        }

        /* Check Tx/Rx interrupt flag and clear the interrupt */
        if (flag_reg != 0U)
    a73a:	9b08      	ldr	r3, [sp, #32]
    a73c:	2b00      	cmp	r3, #0
    a73e:	d050      	beq.n	a7e2 <FlexCAN_IRQHandler+0x10e>
        {
            /* For legacy fifo, mb handler is FLEXCAN_IP_MB_HANDLE_RXFIFO(0) */
            u32MbHandle = mb_idx;
    a740:	9b07      	ldr	r3, [sp, #28]
    a742:	9309      	str	r3, [sp, #36]	; 0x24

            if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    a744:	9b05      	ldr	r3, [sp, #20]
    a746:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    a74a:	2b00      	cmp	r3, #0
    a74c:	d00b      	beq.n	a766 <FlexCAN_IRQHandler+0x92>
    a74e:	9b07      	ldr	r3, [sp, #28]
    a750:	2b07      	cmp	r3, #7
    a752:	d808      	bhi.n	a766 <FlexCAN_IRQHandler+0x92>
            {
                FlexCAN_IRQHandlerRxFIFO(instance, mb_idx);
    a754:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a758:	9907      	ldr	r1, [sp, #28]
    a75a:	4618      	mov	r0, r3
    a75c:	f7ff fac2 	bl	9ce4 <FlexCAN_IRQHandlerRxFIFO>
                u32MbHandle = (uint32)FLEXCAN_IP_MB_HANDLE_RXFIFO;
    a760:	2300      	movs	r3, #0
    a762:	9309      	str	r3, [sp, #36]	; 0x24
    a764:	e00d      	b.n	a782 <FlexCAN_IRQHandler+0xae>
            }
            else
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[u32MbHandle].state)
    a766:	9a05      	ldr	r2, [sp, #20]
    a768:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a76a:	011b      	lsls	r3, r3, #4
    a76c:	4413      	add	r3, r2
    a76e:	3304      	adds	r3, #4
    a770:	681b      	ldr	r3, [r3, #0]
    a772:	2b01      	cmp	r3, #1
    a774:	d105      	bne.n	a782 <FlexCAN_IRQHandler+0xae>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    a776:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a77a:	9907      	ldr	r1, [sp, #28]
    a77c:	4618      	mov	r0, r3
    a77e:	f7ff f929 	bl	99d4 <FlexCAN_IRQHandlerRxMB>
                }
            }

            /* Check mailbox completed transmission */
            if (FLEXCAN_MB_TX_BUSY == state->mbs[u32MbHandle].state)
    a782:	9a05      	ldr	r2, [sp, #20]
    a784:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a786:	011b      	lsls	r3, r3, #4
    a788:	4413      	add	r3, r2
    a78a:	3304      	adds	r3, #4
    a78c:	681b      	ldr	r3, [r3, #0]
    a78e:	2b02      	cmp	r3, #2
    a790:	d105      	bne.n	a79e <FlexCAN_IRQHandler+0xca>
            {
                FlexCAN_IRQHandlerTxMB(instance, mb_idx);
    a792:	f89d 300f 	ldrb.w	r3, [sp, #15]
    a796:	9907      	ldr	r1, [sp, #28]
    a798:	4618      	mov	r0, r3
    a79a:	f7ff fa09 	bl	9bb0 <FlexCAN_IRQHandlerTxMB>
            }

            /* Check for spurious interrupt */
            if (FlexCAN_GetMsgBuffIntStatusFlag(base, mb_idx) != 0U)
    a79e:	9907      	ldr	r1, [sp, #28]
    a7a0:	9806      	ldr	r0, [sp, #24]
    a7a2:	f7fe fdfe 	bl	93a2 <FlexCAN_GetMsgBuffIntStatusFlag>
    a7a6:	4603      	mov	r3, r0
    a7a8:	2b00      	cmp	r3, #0
    a7aa:	d01a      	beq.n	a7e2 <FlexCAN_IRQHandler+0x10e>
            {
                if (state->mbs[u32MbHandle].state == FLEXCAN_MB_IDLE)
    a7ac:	9a05      	ldr	r2, [sp, #20]
    a7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7b0:	011b      	lsls	r3, r3, #4
    a7b2:	4413      	add	r3, r2
    a7b4:	3304      	adds	r3, #4
    a7b6:	681b      	ldr	r3, [r3, #0]
    a7b8:	2b00      	cmp	r3, #0
    a7ba:	d112      	bne.n	a7e2 <FlexCAN_IRQHandler+0x10e>
                {
                    /* In case of desynchronized status of the MB to avoid trapping in ISR
                    * clear the MB flag */
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a7bc:	9907      	ldr	r1, [sp, #28]
    a7be:	9806      	ldr	r0, [sp, #24]
    a7c0:	f7fe fc3e 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
            FlexCAN_ClearEnhancedRxFifoIntStatusFlag(base, FLEXCAN_IP_ENHANCED_RXFIFO_UNDERFLOW);
        }
    #endif /* End of (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
    }
}
    a7c4:	e00d      	b.n	a7e2 <FlexCAN_IRQHandler+0x10e>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    a7c6:	9b02      	ldr	r3, [sp, #8]
    a7c8:	9307      	str	r3, [sp, #28]
    a7ca:	e006      	b.n	a7da <FlexCAN_IRQHandler+0x106>
            FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    a7cc:	9907      	ldr	r1, [sp, #28]
    a7ce:	9806      	ldr	r0, [sp, #24]
    a7d0:	f7fe fc36 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
        for (mb_idx = startMbIdx; mb_idx <= endMbIdx; mb_idx++)
    a7d4:	9b07      	ldr	r3, [sp, #28]
    a7d6:	3301      	adds	r3, #1
    a7d8:	9307      	str	r3, [sp, #28]
    a7da:	9a07      	ldr	r2, [sp, #28]
    a7dc:	9b01      	ldr	r3, [sp, #4]
    a7de:	429a      	cmp	r2, r3
    a7e0:	d9f4      	bls.n	a7cc <FlexCAN_IRQHandler+0xf8>
}
    a7e2:	bf00      	nop
    a7e4:	b00b      	add	sp, #44	; 0x2c
    a7e6:	f85d fb04 	ldr.w	pc, [sp], #4
    a7ea:	bf00      	nop
    a7ec:	000101c4 	.word	0x000101c4
    a7f0:	1fff8fb8 	.word	0x1fff8fb8

0000a7f4 <FlexCAN_Ip_ClearErrorStatus>:
 *                 transmission of a CAN frame.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearErrorStatus_Activity */
void FlexCAN_Ip_ClearErrorStatus(uint8 instance, uint32 error)
{
    a7f4:	b084      	sub	sp, #16
    a7f6:	4603      	mov	r3, r0
    a7f8:	9100      	str	r1, [sp, #0]
    a7fa:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a7fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a802:	4a05      	ldr	r2, [pc, #20]	; (a818 <FlexCAN_Ip_ClearErrorStatus+0x24>)
    a804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a808:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    base->ESR1 = error;
    a80a:	9b03      	ldr	r3, [sp, #12]
    a80c:	9a00      	ldr	r2, [sp, #0]
    a80e:	621a      	str	r2, [r3, #32]
}
    a810:	bf00      	nop
    a812:	b004      	add	sp, #16
    a814:	4770      	bx	lr
    a816:	bf00      	nop
    a818:	000101c4 	.word	0x000101c4

0000a81c <FlexCAN_Ip_GetErrorStatus>:
 *                 transmission of a CAN frame and some general status of the device.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetErrorStatus_Activity */
uint32 FlexCAN_Ip_GetErrorStatus(uint8 instance)
{
    a81c:	b084      	sub	sp, #16
    a81e:	4603      	mov	r3, r0
    a820:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a824:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a828:	4a04      	ldr	r2, [pc, #16]	; (a83c <FlexCAN_Ip_GetErrorStatus+0x20>)
    a82a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a82e:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint32)(base->ESR1);
    a830:	9b03      	ldr	r3, [sp, #12]
    a832:	6a1b      	ldr	r3, [r3, #32]
}
    a834:	4618      	mov	r0, r3
    a836:	b004      	add	sp, #16
    a838:	4770      	bx	lr
    a83a:	bf00      	nop
    a83c:	000101c4 	.word	0x000101c4

0000a840 <FlexCAN_Ip_GetControllerTxErrorCounter>:
 *                 transmitted messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerTxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerTxErrorCounter(uint8 instance)
{
    a840:	b084      	sub	sp, #16
    a842:	4603      	mov	r3, r0
    a844:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a848:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a84c:	4a04      	ldr	r2, [pc, #16]	; (a860 <FlexCAN_Ip_GetControllerTxErrorCounter+0x20>)
    a84e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a852:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_TXERRCNT_MASK) >> FLEXCAN_ECR_TXERRCNT_SHIFT);
    a854:	9b03      	ldr	r3, [sp, #12]
    a856:	69db      	ldr	r3, [r3, #28]
    a858:	b2db      	uxtb	r3, r3
}
    a85a:	4618      	mov	r0, r3
    a85c:	b004      	add	sp, #16
    a85e:	4770      	bx	lr
    a860:	000101c4 	.word	0x000101c4

0000a864 <FlexCAN_Ip_GetControllerRxErrorCounter>:
 *                 received messages.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetControllerRxErrorCounter_Activity */
uint8 FlexCAN_Ip_GetControllerRxErrorCounter(uint8 instance)
{
    a864:	b084      	sub	sp, #16
    a866:	4603      	mov	r3, r0
    a868:	f88d 3007 	strb.w	r3, [sp, #7]

    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a86c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a870:	4a05      	ldr	r2, [pc, #20]	; (a888 <FlexCAN_Ip_GetControllerRxErrorCounter+0x24>)
    a872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a876:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    return (uint8)((base->ECR & FLEXCAN_ECR_RXERRCNT_MASK) >> FLEXCAN_ECR_RXERRCNT_SHIFT);
    a878:	9b03      	ldr	r3, [sp, #12]
    a87a:	69db      	ldr	r3, [r3, #28]
    a87c:	0a1b      	lsrs	r3, r3, #8
    a87e:	b2db      	uxtb	r3, r3
}
    a880:	4618      	mov	r0, r3
    a882:	b004      	add	sp, #16
    a884:	4770      	bx	lr
    a886:	bf00      	nop
    a888:	000101c4 	.word	0x000101c4

0000a88c <FlexCAN_Error_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements  CAN_X_ERROR_ISR_Activity */
void FlexCAN_Error_IRQHandler(uint8 instance)
{
    a88c:	b510      	push	{r4, lr}
    a88e:	b086      	sub	sp, #24
    a890:	4603      	mov	r3, r0
    a892:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    a896:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a89a:	4a29      	ldr	r2, [pc, #164]	; (a940 <FlexCAN_Error_IRQHandler+0xb4>)
    a89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8a0:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a8a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a8a6:	4a27      	ldr	r2, [pc, #156]	; (a944 <FlexCAN_Error_IRQHandler+0xb8>)
    a8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a8ac:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    a8ae:	2300      	movs	r3, #0
    a8b0:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check if the instance initialized */
    if (NULL_PTR != state)
    a8b2:	9b03      	ldr	r3, [sp, #12]
    a8b4:	2b00      	cmp	r3, #0
    a8b6:	d03d      	beq.n	a934 <FlexCAN_Error_IRQHandler+0xa8>
    {
        /* Get error status to get value updated */
        u32ErrStatus = pBase->ESR1;
    a8b8:	9b04      	ldr	r3, [sp, #16]
    a8ba:	6a1b      	ldr	r3, [r3, #32]
    a8bc:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_MASK))) && ((uint32)0U != (pBase->CTRL1 & ((uint32)FLEXCAN_CTRL1_ERRMSK_MASK))))
    a8be:	9b05      	ldr	r3, [sp, #20]
    a8c0:	f003 0302 	and.w	r3, r3, #2
    a8c4:	2b00      	cmp	r3, #0
    a8c6:	d019      	beq.n	a8fc <FlexCAN_Error_IRQHandler+0x70>
    a8c8:	9b04      	ldr	r3, [sp, #16]
    a8ca:	685b      	ldr	r3, [r3, #4]
    a8cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    a8d0:	2b00      	cmp	r3, #0
    a8d2:	d013      	beq.n	a8fc <FlexCAN_Error_IRQHandler+0x70>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_MASK;
    a8d4:	9b04      	ldr	r3, [sp, #16]
    a8d6:	2202      	movs	r2, #2
    a8d8:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a8da:	9b03      	ldr	r3, [sp, #12]
    a8dc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a8e0:	2b00      	cmp	r3, #0
    a8e2:	d00b      	beq.n	a8fc <FlexCAN_Error_IRQHandler+0x70>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR, u32ErrStatus, state);
    a8e4:	9b03      	ldr	r3, [sp, #12]
    a8e6:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a8ea:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a8ee:	9b03      	ldr	r3, [sp, #12]
    a8f0:	9a05      	ldr	r2, [sp, #20]
    a8f2:	2105      	movs	r1, #5
    a8f4:	47a0      	blx	r4
            #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = pBase->ESR1;
    a8f6:	9b04      	ldr	r3, [sp, #16]
    a8f8:	6a1b      	ldr	r3, [r3, #32]
    a8fa:	9305      	str	r3, [sp, #20]
            }
        }

    #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        /* Check if this is spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_ERRINT_FAST_MASK))) && ((uint32)0U != (pBase->CTRL2 & ((uint32)FLEXCAN_CTRL2_ERRMSK_FAST_MASK))))
    a8fc:	9b05      	ldr	r3, [sp, #20]
    a8fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    a902:	2b00      	cmp	r3, #0
    a904:	d019      	beq.n	a93a <FlexCAN_Error_IRQHandler+0xae>
    a906:	9b04      	ldr	r3, [sp, #16]
    a908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a90a:	2b00      	cmp	r3, #0
    a90c:	da15      	bge.n	a93a <FlexCAN_Error_IRQHandler+0xae>
        {
            pBase->ESR1 = FLEXCAN_ESR1_ERRINT_FAST_MASK;
    a90e:	9b04      	ldr	r3, [sp, #16]
    a910:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    a914:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a916:	9b03      	ldr	r3, [sp, #12]
    a918:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a91c:	2b00      	cmp	r3, #0
    a91e:	d00c      	beq.n	a93a <FlexCAN_Error_IRQHandler+0xae>
            {
                state->error_callback(instance, FLEXCAN_EVENT_ERROR_FAST, u32ErrStatus, state);
    a920:	9b03      	ldr	r3, [sp, #12]
    a922:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a926:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a92a:	9b03      	ldr	r3, [sp, #12]
    a92c:	9a05      	ldr	r2, [sp, #20]
    a92e:	2106      	movs	r1, #6
    a930:	47a0      	blx	r4
    }
    else
    {
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    }
}
    a932:	e002      	b.n	a93a <FlexCAN_Error_IRQHandler+0xae>
        (pBase->ESR1) = FLEXCAN_IP_ERROR_INT;
    a934:	9b04      	ldr	r3, [sp, #16]
    a936:	4a04      	ldr	r2, [pc, #16]	; (a948 <FlexCAN_Error_IRQHandler+0xbc>)
    a938:	621a      	str	r2, [r3, #32]
}
    a93a:	bf00      	nop
    a93c:	b006      	add	sp, #24
    a93e:	bd10      	pop	{r4, pc}
    a940:	000101c4 	.word	0x000101c4
    a944:	1fff8fb8 	.word	0x1fff8fb8
    a948:	00300002 	.word	0x00300002

0000a94c <FlexCAN_BusOff_IRQHandler>:
 * This is not a public API as it is called whenever an interrupt occurs.
 *
 *END**************************************************************************/
/* implements CAN_X_BUSOFF_ISR_Activity */
void FlexCAN_BusOff_IRQHandler(uint8 instance)
{
    a94c:	b510      	push	{r4, lr}
    a94e:	b086      	sub	sp, #24
    a950:	4603      	mov	r3, r0
    a952:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    a956:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a95a:	4a3a      	ldr	r2, [pc, #232]	; (aa44 <FlexCAN_BusOff_IRQHandler+0xf8>)
    a95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a960:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    a962:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a966:	4a38      	ldr	r2, [pc, #224]	; (aa48 <FlexCAN_BusOff_IRQHandler+0xfc>)
    a968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a96c:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    a96e:	2300      	movs	r3, #0
    a970:	9305      	str	r3, [sp, #20]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Check If Driver initialized */
    if (NULL_PTR != state)
    a972:	9b03      	ldr	r3, [sp, #12]
    a974:	2b00      	cmp	r3, #0
    a976:	d05f      	beq.n	aa38 <FlexCAN_BusOff_IRQHandler+0xec>
    {
        /* Get error status to get value updated */
        u32ErrStatus = base->ESR1;
    a978:	9b04      	ldr	r3, [sp, #16]
    a97a:	6a1b      	ldr	r3, [r3, #32]
    a97c:	9305      	str	r3, [sp, #20]

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_TWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_TWRNMSK_MASK))))
    a97e:	9b05      	ldr	r3, [sp, #20]
    a980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    a984:	2b00      	cmp	r3, #0
    a986:	d01a      	beq.n	a9be <FlexCAN_BusOff_IRQHandler+0x72>
    a988:	9b04      	ldr	r3, [sp, #16]
    a98a:	685b      	ldr	r3, [r3, #4]
    a98c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a990:	2b00      	cmp	r3, #0
    a992:	d014      	beq.n	a9be <FlexCAN_BusOff_IRQHandler+0x72>
        {
            base->ESR1 = FLEXCAN_ESR1_TWRNINT_MASK;
    a994:	9b04      	ldr	r3, [sp, #16]
    a996:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    a99a:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a99c:	9b03      	ldr	r3, [sp, #12]
    a99e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a9a2:	2b00      	cmp	r3, #0
    a9a4:	d00b      	beq.n	a9be <FlexCAN_BusOff_IRQHandler+0x72>
            {
                state->error_callback(instance, FLEXCAN_EVENT_TX_WARNING, u32ErrStatus, state);
    a9a6:	9b03      	ldr	r3, [sp, #12]
    a9a8:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a9ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a9b0:	9b03      	ldr	r3, [sp, #12]
    a9b2:	9a05      	ldr	r2, [sp, #20]
    a9b4:	2109      	movs	r1, #9
    a9b6:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    a9b8:	9b04      	ldr	r3, [sp, #16]
    a9ba:	6a1b      	ldr	r3, [r3, #32]
    a9bc:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_RWRNINT_MASK))) && (0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_RWRNMSK_MASK))))
    a9be:	9b05      	ldr	r3, [sp, #20]
    a9c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    a9c4:	2b00      	cmp	r3, #0
    a9c6:	d01a      	beq.n	a9fe <FlexCAN_BusOff_IRQHandler+0xb2>
    a9c8:	9b04      	ldr	r3, [sp, #16]
    a9ca:	685b      	ldr	r3, [r3, #4]
    a9cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a9d0:	2b00      	cmp	r3, #0
    a9d2:	d014      	beq.n	a9fe <FlexCAN_BusOff_IRQHandler+0xb2>
        {
            base->ESR1 = FLEXCAN_ESR1_RWRNINT_MASK;
    a9d4:	9b04      	ldr	r3, [sp, #16]
    a9d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a9da:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    a9dc:	9b03      	ldr	r3, [sp, #12]
    a9de:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    a9e2:	2b00      	cmp	r3, #0
    a9e4:	d00b      	beq.n	a9fe <FlexCAN_BusOff_IRQHandler+0xb2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_RX_WARNING, u32ErrStatus, state);
    a9e6:	9b03      	ldr	r3, [sp, #12]
    a9e8:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    a9ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
    a9f0:	9b03      	ldr	r3, [sp, #12]
    a9f2:	9a05      	ldr	r2, [sp, #20]
    a9f4:	2108      	movs	r1, #8
    a9f6:	47a0      	blx	r4
                /* Get error status to get value updated due to user may handle ESR1 register */
                u32ErrStatus = base->ESR1;
    a9f8:	9b04      	ldr	r3, [sp, #16]
    a9fa:	6a1b      	ldr	r3, [r3, #32]
    a9fc:	9305      	str	r3, [sp, #20]
            }
        }

        /* Check spurious interrupt */
        if (((uint32)0U != (u32ErrStatus & ((uint32)FLEXCAN_ESR1_BOFFINT_MASK))) && ((uint32)0U != (base->CTRL1 & ((uint32)FLEXCAN_CTRL1_BOFFMSK_MASK))))
    a9fe:	9b05      	ldr	r3, [sp, #20]
    aa00:	f003 0304 	and.w	r3, r3, #4
    aa04:	2b00      	cmp	r3, #0
    aa06:	d01a      	beq.n	aa3e <FlexCAN_BusOff_IRQHandler+0xf2>
    aa08:	9b04      	ldr	r3, [sp, #16]
    aa0a:	685b      	ldr	r3, [r3, #4]
    aa0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    aa10:	2b00      	cmp	r3, #0
    aa12:	d014      	beq.n	aa3e <FlexCAN_BusOff_IRQHandler+0xf2>
        {
            base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    aa14:	9b04      	ldr	r3, [sp, #16]
    aa16:	2204      	movs	r2, #4
    aa18:	621a      	str	r2, [r3, #32]
            /* Invoke callback */
            if (state->error_callback != NULL_PTR)
    aa1a:	9b03      	ldr	r3, [sp, #12]
    aa1c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    aa20:	2b00      	cmp	r3, #0
    aa22:	d00c      	beq.n	aa3e <FlexCAN_BusOff_IRQHandler+0xf2>
            {
                state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    aa24:	9b03      	ldr	r3, [sp, #12]
    aa26:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    aa2a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    aa2e:	9b03      	ldr	r3, [sp, #12]
    aa30:	9a05      	ldr	r2, [sp, #20]
    aa32:	2107      	movs	r1, #7
    aa34:	47a0      	blx	r4
    }
    else
    {
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    }
}
    aa36:	e002      	b.n	aa3e <FlexCAN_BusOff_IRQHandler+0xf2>
        base->ESR1 = FLEXCAN_IP_BUS_OFF_INT;
    aa38:	9b04      	ldr	r3, [sp, #16]
    aa3a:	4a04      	ldr	r2, [pc, #16]	; (aa4c <FlexCAN_BusOff_IRQHandler+0x100>)
    aa3c:	621a      	str	r2, [r3, #32]
}
    aa3e:	bf00      	nop
    aa40:	b006      	add	sp, #24
    aa42:	bd10      	pop	{r4, pc}
    aa44:	000101c4 	.word	0x000101c4
    aa48:	1fff8fb8 	.word	0x1fff8fb8
    aa4c:	000b0004 	.word	0x000b0004

0000aa50 <FlexCAN_Ip_SendBlocking>:
                                              const Flexcan_Ip_DataInfoType * tx_info,
                                              uint32 msg_id,
                                              const uint8 * mb_data,
                                              uint32 timeout_ms
                                             )
{
    aa50:	b500      	push	{lr}
    aa52:	b091      	sub	sp, #68	; 0x44
    aa54:	9204      	str	r2, [sp, #16]
    aa56:	9303      	str	r3, [sp, #12]
    aa58:	4603      	mov	r3, r0
    aa5a:	f88d 3017 	strb.w	r3, [sp, #23]
    aa5e:	460b      	mov	r3, r1
    aa60:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_StatusType result;
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    aa64:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aa68:	4a5f      	ldr	r2, [pc, #380]	; (abe8 <FlexCAN_Ip_SendBlocking+0x198>)
    aa6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa6e:	930d      	str	r3, [sp, #52]	; 0x34
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    aa70:	f89d 3017 	ldrb.w	r3, [sp, #23]
    aa74:	4a5d      	ldr	r2, [pc, #372]	; (abec <FlexCAN_Ip_SendBlocking+0x19c>)
    aa76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa7a:	930c      	str	r3, [sp, #48]	; 0x30

    uint32 timeStart = 0U;
    aa7c:	2300      	movs	r3, #0
    aa7e:	9307      	str	r3, [sp, #28]
    uint32 timeElapsed = 0U;
    aa80:	2300      	movs	r3, #0
    aa82:	930e      	str	r3, [sp, #56]	; 0x38
    uint32 mS2Ticks = OsIf_MicrosToTicks((timeout_ms * 1000U), FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    aa84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aa86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    aa8a:	fb02 f303 	mul.w	r3, r2, r3
    aa8e:	2100      	movs	r1, #0
    aa90:	4618      	mov	r0, r3
    aa92:	f7f7 fbef 	bl	2274 <OsIf_MicrosToTicks>
    aa96:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32 uS2Ticks = 0U;
    aa98:	2300      	movs	r3, #0
    aa9a:	930a      	str	r3, [sp, #40]	; 0x28
    uint32 flexcan_mb_config = 0;
    aa9c:	2300      	movs	r3, #0
    aa9e:	9309      	str	r3, [sp, #36]	; 0x24

    volatile uint32 * flexcan_mb = NULL_PTR;
    aaa0:	2300      	movs	r3, #0
    aaa2:	9308      	str	r3, [sp, #32]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(tx_info != NULL_PTR);
#endif

    result = FlexCAN_StartSendData(instance, mb_idx, tx_info, msg_id, mb_data);
    aaa4:	f89d 1016 	ldrb.w	r1, [sp, #22]
    aaa8:	f89d 0017 	ldrb.w	r0, [sp, #23]
    aaac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    aaae:	9300      	str	r3, [sp, #0]
    aab0:	9b03      	ldr	r3, [sp, #12]
    aab2:	9a04      	ldr	r2, [sp, #16]
    aab4:	f7fe feaa 	bl	980c <FlexCAN_StartSendData>
    aab8:	900f      	str	r0, [sp, #60]	; 0x3c

    if (FLEXCAN_STATUS_SUCCESS == result)
    aaba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aabc:	2b00      	cmp	r3, #0
    aabe:	f040 808d 	bne.w	abdc <FlexCAN_Ip_SendBlocking+0x18c>
    {
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    aac2:	2000      	movs	r0, #0
    aac4:	f7f7 fb8a 	bl	21dc <OsIf_GetCounter>
    aac8:	4603      	mov	r3, r0
    aaca:	9307      	str	r3, [sp, #28]
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    aacc:	e00f      	b.n	aaee <FlexCAN_Ip_SendBlocking+0x9e>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    aace:	ab07      	add	r3, sp, #28
    aad0:	2100      	movs	r1, #0
    aad2:	4618      	mov	r0, r3
    aad4:	f7f7 fb9b 	bl	220e <OsIf_GetElapsed>
    aad8:	4602      	mov	r2, r0
    aada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aadc:	4413      	add	r3, r2
    aade:	930e      	str	r3, [sp, #56]	; 0x38
            if (timeElapsed >= mS2Ticks)
    aae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    aae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aae4:	429a      	cmp	r2, r3
    aae6:	d302      	bcc.n	aaee <FlexCAN_Ip_SendBlocking+0x9e>
            {
                result = FLEXCAN_STATUS_TIMEOUT;
    aae8:	2303      	movs	r3, #3
    aaea:	930f      	str	r3, [sp, #60]	; 0x3c
                break;
    aaec:	e008      	b.n	ab00 <FlexCAN_Ip_SendBlocking+0xb0>
        while (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 1U)
    aaee:	f89d 3016 	ldrb.w	r3, [sp, #22]
    aaf2:	4619      	mov	r1, r3
    aaf4:	980d      	ldr	r0, [sp, #52]	; 0x34
    aaf6:	f7fe fab6 	bl	9066 <FlexCAN_GetBuffStatusFlag>
    aafa:	4603      	mov	r3, r0
    aafc:	2b01      	cmp	r3, #1
    aafe:	d1e6      	bne.n	aace <FlexCAN_Ip_SendBlocking+0x7e>
            }
        }

        if ((FLEXCAN_STATUS_TIMEOUT == result) && (state->mbs[mb_idx].state != FLEXCAN_MB_IDLE))
    ab00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ab02:	2b03      	cmp	r3, #3
    ab04:	d15c      	bne.n	abc0 <FlexCAN_Ip_SendBlocking+0x170>
    ab06:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ab0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ab0c:	011b      	lsls	r3, r3, #4
    ab0e:	4413      	add	r3, r2
    ab10:	3304      	adds	r3, #4
    ab12:	681b      	ldr	r3, [r3, #0]
    ab14:	2b00      	cmp	r3, #0
    ab16:	d053      	beq.n	abc0 <FlexCAN_Ip_SendBlocking+0x170>
        {
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    ab18:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ab1c:	4619      	mov	r1, r3
    ab1e:	980d      	ldr	r0, [sp, #52]	; 0x34
    ab20:	f7fe fa8e 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
                flexcan_mb = FlexCAN_GetMsgBuffRegion(base, mb_idx);
    ab24:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ab28:	4619      	mov	r1, r3
    ab2a:	980d      	ldr	r0, [sp, #52]	; 0x34
    ab2c:	f001 f968 	bl	be00 <FlexCAN_GetMsgBuffRegion>
    ab30:	9008      	str	r0, [sp, #32]
                flexcan_mb_config = * flexcan_mb;
    ab32:	9b08      	ldr	r3, [sp, #32]
    ab34:	681b      	ldr	r3, [r3, #0]
    ab36:	9309      	str	r3, [sp, #36]	; 0x24
                /* Reset the code */
                flexcan_mb_config &= (uint32)(~FLEXCAN_IP_CS_CODE_MASK);
    ab38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab3a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    ab3e:	9309      	str	r3, [sp, #36]	; 0x24
                flexcan_mb_config |= ((uint32)(((uint32)FLEXCAN_TX_ABORT & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    ab40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab42:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
    ab46:	9309      	str	r3, [sp, #36]	; 0x24
                *flexcan_mb = flexcan_mb_config;
    ab48:	9b08      	ldr	r3, [sp, #32]
    ab4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ab4c:	601a      	str	r2, [r3, #0]

                /* Wait to finish abort operation */
                uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ab4e:	2100      	movs	r1, #0
    ab50:	4827      	ldr	r0, [pc, #156]	; (abf0 <FlexCAN_Ip_SendBlocking+0x1a0>)
    ab52:	f7f7 fb8f 	bl	2274 <OsIf_MicrosToTicks>
    ab56:	900a      	str	r0, [sp, #40]	; 0x28
                timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ab58:	2000      	movs	r0, #0
    ab5a:	f7f7 fb3f 	bl	21dc <OsIf_GetCounter>
    ab5e:	4603      	mov	r3, r0
    ab60:	9307      	str	r3, [sp, #28]
                 timeElapsed = 0U;
    ab62:	2300      	movs	r3, #0
    ab64:	930e      	str	r3, [sp, #56]	; 0x38
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    ab66:	e00f      	b.n	ab88 <FlexCAN_Ip_SendBlocking+0x138>
                {
                    timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    ab68:	ab07      	add	r3, sp, #28
    ab6a:	2100      	movs	r1, #0
    ab6c:	4618      	mov	r0, r3
    ab6e:	f7f7 fb4e 	bl	220e <OsIf_GetElapsed>
    ab72:	4602      	mov	r2, r0
    ab74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ab76:	4413      	add	r3, r2
    ab78:	930e      	str	r3, [sp, #56]	; 0x38
                    if (timeElapsed >= uS2Ticks)
    ab7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ab7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ab7e:	429a      	cmp	r2, r3
    ab80:	d302      	bcc.n	ab88 <FlexCAN_Ip_SendBlocking+0x138>
                    {
                        result = FLEXCAN_STATUS_TIMEOUT;
    ab82:	2303      	movs	r3, #3
    ab84:	930f      	str	r3, [sp, #60]	; 0x3c
                        break;
    ab86:	e008      	b.n	ab9a <FlexCAN_Ip_SendBlocking+0x14a>
                while (0U == FlexCAN_GetBuffStatusFlag(base, mb_idx))
    ab88:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ab8c:	4619      	mov	r1, r3
    ab8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    ab90:	f7fe fa69 	bl	9066 <FlexCAN_GetBuffStatusFlag>
    ab94:	4603      	mov	r3, r0
    ab96:	2b00      	cmp	r3, #0
    ab98:	d0e6      	beq.n	ab68 <FlexCAN_Ip_SendBlocking+0x118>
                    }
                }

                flexcan_mb_config = *flexcan_mb;
    ab9a:	9b08      	ldr	r3, [sp, #32]
    ab9c:	681b      	ldr	r3, [r3, #0]
    ab9e:	9309      	str	r3, [sp, #36]	; 0x24
                /* Check if the MBs have been safely Inactivated */
                if ((uint32)FLEXCAN_TX_INACTIVE == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    aba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aba2:	0e1b      	lsrs	r3, r3, #24
    aba4:	f003 030f 	and.w	r3, r3, #15
    aba8:	2b08      	cmp	r3, #8
    abaa:	d101      	bne.n	abb0 <FlexCAN_Ip_SendBlocking+0x160>
                {
                    /* Transmission have occurred */
                    result = FLEXCAN_STATUS_SUCCESS;
    abac:	2300      	movs	r3, #0
    abae:	930f      	str	r3, [sp, #60]	; 0x3c
                }

                if ((uint32)FLEXCAN_TX_ABORT == ((flexcan_mb_config & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    abb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    abb2:	0e1b      	lsrs	r3, r3, #24
    abb4:	f003 030f 	and.w	r3, r3, #15
    abb8:	2b09      	cmp	r3, #9
    abba:	d101      	bne.n	abc0 <FlexCAN_Ip_SendBlocking+0x170>
                {
                    /* Transmission have been aborted */
                    result = FLEXCAN_STATUS_TIMEOUT;
    abbc:	2303      	movs	r3, #3
    abbe:	930f      	str	r3, [sp, #60]	; 0x3c
                }
        }

        /* Clear message buffer flag */
        FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    abc0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    abc4:	4619      	mov	r1, r3
    abc6:	980d      	ldr	r0, [sp, #52]	; 0x34
    abc8:	f7fe fa3a 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>

        state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    abcc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    abd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    abd2:	011b      	lsls	r3, r3, #4
    abd4:	4413      	add	r3, r2
    abd6:	3304      	adds	r3, #4
    abd8:	2200      	movs	r2, #0
    abda:	601a      	str	r2, [r3, #0]
    }
    return result;
    abdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
}
    abde:	4618      	mov	r0, r3
    abe0:	b011      	add	sp, #68	; 0x44
    abe2:	f85d fb04 	ldr.w	pc, [sp], #4
    abe6:	bf00      	nop
    abe8:	000101c4 	.word	0x000101c4
    abec:	1fff8fb8 	.word	0x1fff8fb8
    abf0:	000f4240 	.word	0x000f4240

0000abf4 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_SetRxMbGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMbGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    abf4:	b500      	push	{lr}
    abf6:	b087      	sub	sp, #28
    abf8:	4603      	mov	r3, r0
    abfa:	9100      	str	r1, [sp, #0]
    abfc:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ac00:	2300      	movs	r3, #0
    ac02:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    ac04:	2300      	movs	r3, #0
    ac06:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ac08:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac0c:	4a1c      	ldr	r2, [pc, #112]	; (ac80 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x8c>)
    ac0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac12:	9303      	str	r3, [sp, #12]
#endif

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    ac14:	9803      	ldr	r0, [sp, #12]
    ac16:	f7fe f9b9 	bl	8f8c <FlexCAN_IsEnabled>
    ac1a:	4603      	mov	r3, r0
    ac1c:	2b00      	cmp	r3, #0
    ac1e:	bf14      	ite	ne
    ac20:	2301      	movne	r3, #1
    ac22:	2300      	moveq	r3, #0
    ac24:	b2db      	uxtb	r3, r3
    ac26:	f083 0301 	eor.w	r3, r3, #1
    ac2a:	b2db      	uxtb	r3, r3
    ac2c:	f88d 300b 	strb.w	r3, [sp, #11]
    ac30:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ac34:	f003 0301 	and.w	r3, r3, #1
    ac38:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    ac3c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ac40:	2b00      	cmp	r3, #0
    ac42:	d003      	beq.n	ac4c <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    ac44:	9803      	ldr	r0, [sp, #12]
    ac46:	f001 f9c3 	bl	bfd0 <FlexCAN_Enable>
    ac4a:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    ac4c:	9b05      	ldr	r3, [sp, #20]
    ac4e:	2b00      	cmp	r3, #0
    ac50:	d103      	bne.n	ac5a <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxMsgBuffGlobalMask(pBase, mask);
    ac52:	9900      	ldr	r1, [sp, #0]
    ac54:	9803      	ldr	r0, [sp, #12]
    ac56:	f7fe fbc3 	bl	93e0 <FlexCAN_SetRxMsgBuffGlobalMask>
    }

    if (TRUE == disabled)
    ac5a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ac5e:	2b00      	cmp	r3, #0
    ac60:	d008      	beq.n	ac74 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    ac62:	9803      	ldr	r0, [sp, #12]
    ac64:	f001 fa32 	bl	c0cc <FlexCAN_Disable>
    ac68:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ac6a:	9b04      	ldr	r3, [sp, #16]
    ac6c:	2b00      	cmp	r3, #0
    ac6e:	d001      	beq.n	ac74 <FlexCAN_Ip_SetRxMbGlobalMask_Privileged+0x80>
        {
            result = status;
    ac70:	9b04      	ldr	r3, [sp, #16]
    ac72:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    ac74:	9b05      	ldr	r3, [sp, #20]
}
    ac76:	4618      	mov	r0, r3
    ac78:	b007      	add	sp, #28
    ac7a:	f85d fb04 	ldr.w	pc, [sp], #4
    ac7e:	bf00      	nop
    ac80:	000101c4 	.word	0x000101c4

0000ac84 <FlexCAN_Ip_EnterFreezeMode_Privileged>:
 * Description   : Enter Driver In freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnterFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnterFreezeMode_Privileged(uint8 instance)
{
    ac84:	b500      	push	{lr}
    ac86:	b085      	sub	sp, #20
    ac88:	4603      	mov	r3, r0
    ac8a:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ac8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ac92:	4a06      	ldr	r2, [pc, #24]	; (acac <FlexCAN_Ip_EnterFreezeMode_Privileged+0x28>)
    ac94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ac98:	9303      	str	r3, [sp, #12]
        return FlexCAN_EnterFreezeMode(base);
    ac9a:	9803      	ldr	r0, [sp, #12]
    ac9c:	f001 f94c 	bl	bf38 <FlexCAN_EnterFreezeMode>
    aca0:	4603      	mov	r3, r0
}
    aca2:	4618      	mov	r0, r3
    aca4:	b005      	add	sp, #20
    aca6:	f85d fb04 	ldr.w	pc, [sp], #4
    acaa:	bf00      	nop
    acac:	000101c4 	.word	0x000101c4

0000acb0 <FlexCAN_Ip_ExitFreezeMode_Privileged>:
 * Description   : Exit Driver from freeze Mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_ExitFreezeMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ExitFreezeMode_Privileged(uint8 instance)
{
    acb0:	b500      	push	{lr}
    acb2:	b085      	sub	sp, #20
    acb4:	4603      	mov	r3, r0
    acb6:	f88d 3007 	strb.w	r3, [sp, #7]
        FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    acba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    acbe:	4a06      	ldr	r2, [pc, #24]	; (acd8 <FlexCAN_Ip_ExitFreezeMode_Privileged+0x28>)
    acc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    acc4:	9303      	str	r3, [sp, #12]
        return FlexCAN_ExitFreezeMode(base);
    acc6:	9803      	ldr	r0, [sp, #12]
    acc8:	f001 f9be 	bl	c048 <FlexCAN_ExitFreezeMode>
    accc:	4603      	mov	r3, r0
}
    acce:	4618      	mov	r0, r3
    acd0:	b005      	add	sp, #20
    acd2:	f85d fb04 	ldr.w	pc, [sp], #4
    acd6:	bf00      	nop
    acd8:	000101c4 	.word	0x000101c4

0000acdc <FlexCAN_Ip_SetRxIndividualMask_Privileged>:
 * Description   : Set Rx individual mask as absolute value provided by mask parameter
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxIndividualMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxIndividualMask_Privileged(uint8 instance, uint8 mb_idx, uint32 mask)
{
    acdc:	b500      	push	{lr}
    acde:	b087      	sub	sp, #28
    ace0:	4603      	mov	r3, r0
    ace2:	9200      	str	r2, [sp, #0]
    ace4:	f88d 3007 	strb.w	r3, [sp, #7]
    ace8:	460b      	mov	r3, r1
    acea:	f88d 3006 	strb.w	r3, [sp, #6]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    acee:	2300      	movs	r3, #0
    acf0:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    acf2:	2300      	movs	r3, #0
    acf4:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    acf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    acfa:	4a1e      	ldr	r2, [pc, #120]	; (ad74 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x98>)
    acfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad00:	9303      	str	r3, [sp, #12]
    }
    else
    {
#endif

    boolean disabled = !FlexCAN_IsEnabled(pBase);
    ad02:	9803      	ldr	r0, [sp, #12]
    ad04:	f7fe f942 	bl	8f8c <FlexCAN_IsEnabled>
    ad08:	4603      	mov	r3, r0
    ad0a:	2b00      	cmp	r3, #0
    ad0c:	bf14      	ite	ne
    ad0e:	2301      	movne	r3, #1
    ad10:	2300      	moveq	r3, #0
    ad12:	b2db      	uxtb	r3, r3
    ad14:	f083 0301 	eor.w	r3, r3, #1
    ad18:	b2db      	uxtb	r3, r3
    ad1a:	f88d 300b 	strb.w	r3, [sp, #11]
    ad1e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad22:	f003 0301 	and.w	r3, r3, #1
    ad26:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    ad2a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad2e:	2b00      	cmp	r3, #0
    ad30:	d003      	beq.n	ad3a <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    ad32:	9803      	ldr	r0, [sp, #12]
    ad34:	f001 f94c 	bl	bfd0 <FlexCAN_Enable>
    ad38:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    ad3a:	9b05      	ldr	r3, [sp, #20]
    ad3c:	2b00      	cmp	r3, #0
    ad3e:	d106      	bne.n	ad4e <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x72>
    {
        FlexCAN_SetRxIndividualMask(pBase, mb_idx, mask);
    ad40:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ad44:	9a00      	ldr	r2, [sp, #0]
    ad46:	4619      	mov	r1, r3
    ad48:	9803      	ldr	r0, [sp, #12]
    ad4a:	f7fe fb52 	bl	93f2 <FlexCAN_SetRxIndividualMask>
    }

    if (TRUE == disabled)
    ad4e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ad52:	2b00      	cmp	r3, #0
    ad54:	d008      	beq.n	ad68 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    ad56:	9803      	ldr	r0, [sp, #12]
    ad58:	f001 f9b8 	bl	c0cc <FlexCAN_Disable>
    ad5c:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ad5e:	9b04      	ldr	r3, [sp, #16]
    ad60:	2b00      	cmp	r3, #0
    ad62:	d001      	beq.n	ad68 <FlexCAN_Ip_SetRxIndividualMask_Privileged+0x8c>
        {
            result = status;
    ad64:	9b04      	ldr	r3, [sp, #16]
    ad66:	9305      	str	r3, [sp, #20]
        }
    }
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    }
#endif
    return result;
    ad68:	9b05      	ldr	r3, [sp, #20]
}
    ad6a:	4618      	mov	r0, r3
    ad6c:	b007      	add	sp, #28
    ad6e:	f85d fb04 	ldr.w	pc, [sp], #4
    ad72:	bf00      	nop
    ad74:	000101c4 	.word	0x000101c4

0000ad78 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged>:
 * Description   : Set RxFifo Global Mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxFifoGlobalMask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxFifoGlobalMask_Privileged(uint8 instance, uint32 mask)
{
    ad78:	b500      	push	{lr}
    ad7a:	b087      	sub	sp, #28
    ad7c:	4603      	mov	r3, r0
    ad7e:	9100      	str	r1, [sp, #0]
    ad80:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    ad84:	2300      	movs	r3, #0
    ad86:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    ad88:	2300      	movs	r3, #0
    ad8a:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    ad8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ad90:	4a1c      	ldr	r2, [pc, #112]	; (ae04 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x8c>)
    ad92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad96:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    ad98:	9803      	ldr	r0, [sp, #12]
    ad9a:	f7fe f8f7 	bl	8f8c <FlexCAN_IsEnabled>
    ad9e:	4603      	mov	r3, r0
    ada0:	2b00      	cmp	r3, #0
    ada2:	bf14      	ite	ne
    ada4:	2301      	movne	r3, #1
    ada6:	2300      	moveq	r3, #0
    ada8:	b2db      	uxtb	r3, r3
    adaa:	f083 0301 	eor.w	r3, r3, #1
    adae:	b2db      	uxtb	r3, r3
    adb0:	f88d 300b 	strb.w	r3, [sp, #11]
    adb4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    adb8:	f003 0301 	and.w	r3, r3, #1
    adbc:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    adc0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    adc4:	2b00      	cmp	r3, #0
    adc6:	d003      	beq.n	add0 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    adc8:	9803      	ldr	r0, [sp, #12]
    adca:	f001 f901 	bl	bfd0 <FlexCAN_Enable>
    adce:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    add0:	9b05      	ldr	r3, [sp, #20]
    add2:	2b00      	cmp	r3, #0
    add4:	d103      	bne.n	adde <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x66>
    {
        FlexCAN_SetRxFifoGlobalMask(pBase, mask);
    add6:	9900      	ldr	r1, [sp, #0]
    add8:	9803      	ldr	r0, [sp, #12]
    adda:	f7fe f8a7 	bl	8f2c <FlexCAN_SetRxFifoGlobalMask>
    }

    if (TRUE == disabled)
    adde:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ade2:	2b00      	cmp	r3, #0
    ade4:	d008      	beq.n	adf8 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
    {
        status = FlexCAN_Disable(pBase);
    ade6:	9803      	ldr	r0, [sp, #12]
    ade8:	f001 f970 	bl	c0cc <FlexCAN_Disable>
    adec:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    adee:	9b04      	ldr	r3, [sp, #16]
    adf0:	2b00      	cmp	r3, #0
    adf2:	d001      	beq.n	adf8 <FlexCAN_Ip_SetRxFifoGlobalMask_Privileged+0x80>
        {
            result = status;
    adf4:	9b04      	ldr	r3, [sp, #16]
    adf6:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    adf8:	9b05      	ldr	r3, [sp, #20]
}
    adfa:	4618      	mov	r0, r3
    adfc:	b007      	add	sp, #28
    adfe:	f85d fb04 	ldr.w	pc, [sp], #4
    ae02:	bf00      	nop
    ae04:	000101c4 	.word	0x000101c4

0000ae08 <FlexCAN_Ip_Deinit_Privileged>:
 * This function will disable all FlexCAN interrupts, and disable the FlexCAN.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_Deinit_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_Deinit_Privileged(uint8 instance)
{
    ae08:	b500      	push	{lr}
    ae0a:	b085      	sub	sp, #20
    ae0c:	4603      	mov	r3, r0
    ae0e:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ae12:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae16:	4a0e      	ldr	r2, [pc, #56]	; (ae50 <FlexCAN_Ip_Deinit_Privileged+0x48>)
    ae18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae1c:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Enter Freeze Mode Required before to enter Disabled Mode */
    result = FlexCAN_EnterFreezeMode(base);
    ae1e:	9803      	ldr	r0, [sp, #12]
    ae20:	f001 f88a 	bl	bf38 <FlexCAN_EnterFreezeMode>
    ae24:	9002      	str	r0, [sp, #8]
    if (FLEXCAN_STATUS_SUCCESS == result)
    ae26:	9b02      	ldr	r3, [sp, #8]
    ae28:	2b00      	cmp	r3, #0
    ae2a:	d10b      	bne.n	ae44 <FlexCAN_Ip_Deinit_Privileged+0x3c>
    {
        /* Reset registers */
        FlexCAN_SetRegDefaultVal(base);
    ae2c:	9803      	ldr	r0, [sp, #12]
    ae2e:	f7fe fb18 	bl	9462 <FlexCAN_SetRegDefaultVal>
        /* wait for disable */
        (void)FlexCAN_Disable(base);
    ae32:	9803      	ldr	r0, [sp, #12]
    ae34:	f001 f94a 	bl	c0cc <FlexCAN_Disable>
        /* Clear state pointer that is checked by FLEXCAN_DRV_Init */
        Flexcan_Ip_apxState[instance] = NULL_PTR;
    ae38:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae3c:	4a05      	ldr	r2, [pc, #20]	; (ae54 <FlexCAN_Ip_Deinit_Privileged+0x4c>)
    ae3e:	2100      	movs	r1, #0
    ae40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OsIf_Trusted_Call1param(FlexCAN_ClrUserAccessAllowed, base);
        }
    #endif
    }

    return result;
    ae44:	9b02      	ldr	r3, [sp, #8]
}
    ae46:	4618      	mov	r0, r3
    ae48:	b005      	add	sp, #20
    ae4a:	f85d fb04 	ldr.w	pc, [sp], #4
    ae4e:	bf00      	nop
    ae50:	000101c4 	.word	0x000101c4
    ae54:	1fff8fb8 	.word	0x1fff8fb8

0000ae58 <FlexCAN_Ip_MainFunctionRead>:
 * This function read the messages received as pulling or if the Interrupts are disabled.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionRead_Activity */
void FlexCAN_Ip_MainFunctionRead(uint8 instance, uint8 mb_idx)
{
    ae58:	b500      	push	{lr}
    ae5a:	b085      	sub	sp, #20
    ae5c:	4603      	mov	r3, r0
    ae5e:	460a      	mov	r2, r1
    ae60:	f88d 3007 	strb.w	r3, [sp, #7]
    ae64:	4613      	mov	r3, r2
    ae66:	f88d 3006 	strb.w	r3, [sp, #6]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ae6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae6e:	4a22      	ldr	r2, [pc, #136]	; (aef8 <FlexCAN_Ip_MainFunctionRead+0xa0>)
    ae70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae74:	9303      	str	r3, [sp, #12]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    ae76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ae7a:	4a20      	ldr	r2, [pc, #128]	; (aefc <FlexCAN_Ip_MainFunctionRead+0xa4>)
    ae7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ae80:	9302      	str	r3, [sp, #8]
        }
    }
    else
    {
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
        if ((TRUE == state->bIsLegacyFifoEn) && (mb_idx <= FLEXCAN_IP_LEGACY_RXFIFO_OVERFLOW))
    ae82:	9b02      	ldr	r3, [sp, #8]
    ae84:	f893 3214 	ldrb.w	r3, [r3, #532]	; 0x214
    ae88:	2b00      	cmp	r3, #0
    ae8a:	d015      	beq.n	aeb8 <FlexCAN_Ip_MainFunctionRead+0x60>
    ae8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae90:	2b07      	cmp	r3, #7
    ae92:	d811      	bhi.n	aeb8 <FlexCAN_Ip_MainFunctionRead+0x60>
        {
            /* just process available legacy fifo event only */
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    ae94:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ae98:	2b00      	cmp	r3, #0
    ae9a:	d128      	bne.n	aeee <FlexCAN_Ip_MainFunctionRead+0x96>
            {
                if (FlexCAN_GetBuffStatusFlag(base, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE) != 0U)
    ae9c:	2105      	movs	r1, #5
    ae9e:	9803      	ldr	r0, [sp, #12]
    aea0:	f7fe f8e1 	bl	9066 <FlexCAN_GetBuffStatusFlag>
    aea4:	4603      	mov	r3, r0
    aea6:	2b00      	cmp	r3, #0
    aea8:	d021      	beq.n	aeee <FlexCAN_Ip_MainFunctionRead+0x96>
                {
                    FlexCAN_IRQHandlerRxFIFO(instance, FLEXCAN_IP_LEGACY_RXFIFO_FRAME_AVAILABLE);
    aeaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aeae:	2105      	movs	r1, #5
    aeb0:	4618      	mov	r0, r3
    aeb2:	f7fe ff17 	bl	9ce4 <FlexCAN_IRQHandlerRxFIFO>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    aeb6:	e01a      	b.n	aeee <FlexCAN_Ip_MainFunctionRead+0x96>
                }
            }
        }
        else
        {
            if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    aeb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aebc:	4619      	mov	r1, r3
    aebe:	9803      	ldr	r0, [sp, #12]
    aec0:	f7fe f8d1 	bl	9066 <FlexCAN_GetBuffStatusFlag>
    aec4:	4603      	mov	r3, r0
    aec6:	2b00      	cmp	r3, #0
    aec8:	d012      	beq.n	aef0 <FlexCAN_Ip_MainFunctionRead+0x98>
            {
                /* Check mailbox completed reception */
                if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    aeca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    aece:	9a02      	ldr	r2, [sp, #8]
    aed0:	011b      	lsls	r3, r3, #4
    aed2:	4413      	add	r3, r2
    aed4:	3304      	adds	r3, #4
    aed6:	681b      	ldr	r3, [r3, #0]
    aed8:	2b01      	cmp	r3, #1
    aeda:	d109      	bne.n	aef0 <FlexCAN_Ip_MainFunctionRead+0x98>
                {
                    FlexCAN_IRQHandlerRxMB(instance, mb_idx);
    aedc:	f89d 2006 	ldrb.w	r2, [sp, #6]
    aee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    aee4:	4611      	mov	r1, r2
    aee6:	4618      	mov	r0, r3
    aee8:	f7fe fd74 	bl	99d4 <FlexCAN_IRQHandlerRxMB>
            }
        }
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
    }
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
}
    aeec:	e000      	b.n	aef0 <FlexCAN_Ip_MainFunctionRead+0x98>
            if ((uint8)FLEXCAN_IP_MB_HANDLE_RXFIFO == mb_idx)
    aeee:	bf00      	nop
}
    aef0:	bf00      	nop
    aef2:	b005      	add	sp, #20
    aef4:	f85d fb04 	ldr.w	pc, [sp], #4
    aef8:	000101c4 	.word	0x000101c4
    aefc:	1fff8fb8 	.word	0x1fff8fb8

0000af00 <FlexCAN_Ip_MainFunctionBusOff_Privileged>:
 * This function check the bus off event.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionBusOff_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_MainFunctionBusOff_Privileged(uint8 instance)
{
    af00:	b510      	push	{r4, lr}
    af02:	b086      	sub	sp, #24
    af04:	4603      	mov	r3, r0
    af06:	f88d 3007 	strb.w	r3, [sp, #7]
    Flexcan_Ip_StatusType eRetVal = FLEXCAN_STATUS_ERROR;
    af0a:	2301      	movs	r3, #1
    af0c:	9305      	str	r3, [sp, #20]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    af0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af12:	4a15      	ldr	r2, [pc, #84]	; (af68 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x68>)
    af14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af18:	9304      	str	r3, [sp, #16]
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    af1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af1e:	4a13      	ldr	r2, [pc, #76]	; (af6c <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x6c>)
    af20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af24:	9303      	str	r3, [sp, #12]
    uint32 u32ErrStatus = 0U;
    af26:	2300      	movs	r3, #0
    af28:	9302      	str	r3, [sp, #8]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Get error status */
    u32ErrStatus = base->ESR1;
    af2a:	9b04      	ldr	r3, [sp, #16]
    af2c:	6a1b      	ldr	r3, [r3, #32]
    af2e:	9302      	str	r3, [sp, #8]

    if (0U != (u32ErrStatus & FLEXCAN_ESR1_BOFFINT_MASK))
    af30:	9b02      	ldr	r3, [sp, #8]
    af32:	f003 0304 	and.w	r3, r3, #4
    af36:	2b00      	cmp	r3, #0
    af38:	d012      	beq.n	af60 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x60>
    {
        /* Invoke callback */
        if (state->error_callback != NULL_PTR)
    af3a:	9b03      	ldr	r3, [sp, #12]
    af3c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
    af40:	2b00      	cmp	r3, #0
    af42:	d008      	beq.n	af56 <FlexCAN_Ip_MainFunctionBusOff_Privileged+0x56>
        {
            state->error_callback(instance, FLEXCAN_EVENT_BUSOFF, u32ErrStatus, state);
    af44:	9b03      	ldr	r3, [sp, #12]
    af46:	f8d3 4208 	ldr.w	r4, [r3, #520]	; 0x208
    af4a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    af4e:	9b03      	ldr	r3, [sp, #12]
    af50:	9a02      	ldr	r2, [sp, #8]
    af52:	2107      	movs	r1, #7
    af54:	47a0      	blx	r4
        }
        /* Clear BusOff Status Flag */
        base->ESR1 = FLEXCAN_ESR1_BOFFINT_MASK;
    af56:	9b04      	ldr	r3, [sp, #16]
    af58:	2204      	movs	r2, #4
    af5a:	621a      	str	r2, [r3, #32]
        eRetVal = FLEXCAN_STATUS_SUCCESS;
    af5c:	2300      	movs	r3, #0
    af5e:	9305      	str	r3, [sp, #20]
    }
    return eRetVal;
    af60:	9b05      	ldr	r3, [sp, #20]
}
    af62:	4618      	mov	r0, r3
    af64:	b006      	add	sp, #24
    af66:	bd10      	pop	{r4, pc}
    af68:	000101c4 	.word	0x000101c4
    af6c:	1fff8fb8 	.word	0x1fff8fb8

0000af70 <FlexCAN_Ip_MainFunctionWrite>:
 * This function check the message if have been sent.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_MainFunctionWrite_Activity */
void FlexCAN_Ip_MainFunctionWrite(uint8 instance, uint8 mb_idx)
{
    af70:	b510      	push	{r4, lr}
    af72:	b098      	sub	sp, #96	; 0x60
    af74:	4603      	mov	r3, r0
    af76:	460a      	mov	r2, r1
    af78:	f88d 3007 	strb.w	r3, [sp, #7]
    af7c:	4613      	mov	r3, r2
    af7e:	f88d 3006 	strb.w	r3, [sp, #6]
    FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    af82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af86:	4a3f      	ldr	r2, [pc, #252]	; (b084 <FlexCAN_Ip_MainFunctionWrite+0x114>)
    af88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af8c:	9317      	str	r3, [sp, #92]	; 0x5c
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[instance];
    af8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    af92:	4a3d      	ldr	r2, [pc, #244]	; (b088 <FlexCAN_Ip_MainFunctionWrite+0x118>)
    af94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af98:	9316      	str	r3, [sp, #88]	; 0x58

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (FlexCAN_GetBuffStatusFlag(base, mb_idx) != 0U)
    af9a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    af9e:	4619      	mov	r1, r3
    afa0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    afa2:	f7fe f860 	bl	9066 <FlexCAN_GetBuffStatusFlag>
    afa6:	4603      	mov	r3, r0
    afa8:	2b00      	cmp	r3, #0
    afaa:	d068      	beq.n	b07e <FlexCAN_Ip_MainFunctionWrite+0x10e>
    {
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    afac:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afb0:	9a16      	ldr	r2, [sp, #88]	; 0x58
    afb2:	011b      	lsls	r3, r3, #4
    afb4:	4413      	add	r3, r2
    afb6:	3304      	adds	r3, #4
    afb8:	681b      	ldr	r3, [r3, #0]
    afba:	2b02      	cmp	r3, #2
    afbc:	d15f      	bne.n	b07e <FlexCAN_Ip_MainFunctionWrite+0x10e>
        {
            if (state->mbs[mb_idx].isRemote)
    afbe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afc2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    afc4:	011b      	lsls	r3, r3, #4
    afc6:	4413      	add	r3, r2
    afc8:	3309      	adds	r3, #9
    afca:	781b      	ldrb	r3, [r3, #0]
    afcc:	2b00      	cmp	r3, #0
    afce:	d028      	beq.n	b022 <FlexCAN_Ip_MainFunctionWrite+0xb2>
            {
                Flexcan_Ip_MsgBuffType mb;
                mb.cs = 0U;
    afd0:	2300      	movs	r3, #0
    afd2:	9302      	str	r3, [sp, #8]
                mb.time_stamp = 0U;
    afd4:	2300      	movs	r3, #0
    afd6:	9315      	str	r3, [sp, #84]	; 0x54
                FlexCAN_LockRxMsgBuff(base, mb_idx);
    afd8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afdc:	4619      	mov	r1, r3
    afde:	9817      	ldr	r0, [sp, #92]	; 0x5c
    afe0:	f001 fa87 	bl	c4f2 <FlexCAN_LockRxMsgBuff>
                FlexCAN_GetMsgBuff(base, mb_idx, &mb);
    afe4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    afe8:	aa02      	add	r2, sp, #8
    afea:	4619      	mov	r1, r3
    afec:	9817      	ldr	r0, [sp, #92]	; 0x5c
    afee:	f001 fbaf 	bl	c750 <FlexCAN_GetMsgBuff>
                FlexCAN_UnlockRxMsgBuff(base);
    aff2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    aff4:	f7fe f81d 	bl	9032 <FlexCAN_UnlockRxMsgBuff>
                state->mbs[mb_idx].time_stamp = mb.time_stamp;
    aff8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    affc:	9a15      	ldr	r2, [sp, #84]	; 0x54
    affe:	9916      	ldr	r1, [sp, #88]	; 0x58
    b000:	011b      	lsls	r3, r3, #4
    b002:	440b      	add	r3, r1
    b004:	330c      	adds	r3, #12
    b006:	601a      	str	r2, [r3, #0]
                /* If the frame was a remote frame, clear the flag only if the response was
                * not received yet. If the response was received, leave the flag set in order
                * to be handled when the user calls FLEXCAN_DRV_RxMessageBuffer. */
                if ((uint32)FLEXCAN_RX_EMPTY == ((mb.cs & FLEXCAN_IP_CS_CODE_MASK) >> FLEXCAN_IP_CS_CODE_SHIFT))
    b008:	9b02      	ldr	r3, [sp, #8]
    b00a:	0e1b      	lsrs	r3, r3, #24
    b00c:	f003 030f 	and.w	r3, r3, #15
    b010:	2b04      	cmp	r3, #4
    b012:	d11d      	bne.n	b050 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                {
                    FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    b014:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b018:	4619      	mov	r1, r3
    b01a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b01c:	f7fe f810 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
    b020:	e016      	b.n	b050 <FlexCAN_Ip_MainFunctionWrite+0xe0>
                }
            }
            else
            {
                state->mbs[mb_idx].time_stamp = FlexCAN_GetMsgBuffTimestamp(base, mb_idx);
    b022:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b026:	f89d 4006 	ldrb.w	r4, [sp, #6]
    b02a:	4619      	mov	r1, r3
    b02c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b02e:	f001 fb7b 	bl	c728 <FlexCAN_GetMsgBuffTimestamp>
    b032:	4601      	mov	r1, r0
    b034:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b036:	0123      	lsls	r3, r4, #4
    b038:	4413      	add	r3, r2
    b03a:	330c      	adds	r3, #12
    b03c:	6019      	str	r1, [r3, #0]
                FlexCAN_UnlockRxMsgBuff(base);
    b03e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b040:	f7fd fff7 	bl	9032 <FlexCAN_UnlockRxMsgBuff>
                /* Clear message buffer flag */
                FlexCAN_ClearMsgBuffIntStatusFlag(base, mb_idx);
    b044:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b048:	4619      	mov	r1, r3
    b04a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b04c:	f7fd fff8 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
            }

            state->mbs[mb_idx].state = FLEXCAN_MB_IDLE;
    b050:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b054:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b056:	011b      	lsls	r3, r3, #4
    b058:	4413      	add	r3, r2
    b05a:	3304      	adds	r3, #4
    b05c:	2200      	movs	r2, #0
    b05e:	601a      	str	r2, [r3, #0]

            /* Invoke callback */
            if (state->callback != NULL_PTR)
    b060:	9b16      	ldr	r3, [sp, #88]	; 0x58
    b062:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    b066:	2b00      	cmp	r3, #0
    b068:	d009      	beq.n	b07e <FlexCAN_Ip_MainFunctionWrite+0x10e>
            {
                state->callback(instance, FLEXCAN_EVENT_TX_COMPLETE, mb_idx, state);
    b06a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    b06c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    b070:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b074:	f89d 0007 	ldrb.w	r0, [sp, #7]
    b078:	9b16      	ldr	r3, [sp, #88]	; 0x58
    b07a:	2104      	movs	r1, #4
    b07c:	47a0      	blx	r4
            }
        }
    }
}
    b07e:	bf00      	nop
    b080:	b018      	add	sp, #96	; 0x60
    b082:	bd10      	pop	{r4, pc}
    b084:	000101c4 	.word	0x000101c4
    b088:	1fff8fb8 	.word	0x1fff8fb8

0000b08c <FlexCAN_Ip_GetStopMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STOPPED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStopMode_Activity */
boolean FlexCAN_Ip_GetStopMode_Privileged(uint8 instance)
{
    b08c:	b084      	sub	sp, #16
    b08e:	4603      	mov	r3, r0
    b090:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    b094:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b098:	4a08      	ldr	r2, [pc, #32]	; (b0bc <FlexCAN_Ip_GetStopMode_Privileged+0x30>)
    b09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b09e:	9303      	str	r3, [sp, #12]
    return ((FLEXCAN_MCR_LPMACK_MASK == (base->MCR & FLEXCAN_MCR_LPMACK_MASK)) ? TRUE : FALSE);
    b0a0:	9b03      	ldr	r3, [sp, #12]
    b0a2:	681b      	ldr	r3, [r3, #0]
    b0a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    b0a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    b0ac:	bf0c      	ite	eq
    b0ae:	2301      	moveq	r3, #1
    b0b0:	2300      	movne	r3, #0
    b0b2:	b2db      	uxtb	r3, r3
}
    b0b4:	4618      	mov	r0, r3
    b0b6:	b004      	add	sp, #16
    b0b8:	4770      	bx	lr
    b0ba:	bf00      	nop
    b0bc:	000101c4 	.word	0x000101c4

0000b0c0 <FlexCAN_Ip_GetStartMode_Privileged>:
 * Description   : Check if the FlexCAN instance is STARTED.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetStartMode_Activity */
boolean FlexCAN_Ip_GetStartMode_Privileged(uint8 instance)
{
    b0c0:	b084      	sub	sp, #16
    b0c2:	4603      	mov	r3, r0
    b0c4:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    b0c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b0cc:	4a07      	ldr	r2, [pc, #28]	; (b0ec <FlexCAN_Ip_GetStartMode_Privileged+0x2c>)
    b0ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b0d2:	9303      	str	r3, [sp, #12]
    return ((0U == (base->MCR & (FLEXCAN_MCR_LPMACK_MASK | FLEXCAN_MCR_FRZACK_MASK))) ? TRUE : FALSE);
    b0d4:	9b03      	ldr	r3, [sp, #12]
    b0d6:	681b      	ldr	r3, [r3, #0]
    b0d8:	f003 7388 	and.w	r3, r3, #17825792	; 0x1100000
    b0dc:	2b00      	cmp	r3, #0
    b0de:	bf0c      	ite	eq
    b0e0:	2301      	moveq	r3, #1
    b0e2:	2300      	movne	r3, #0
    b0e4:	b2db      	uxtb	r3, r3
}
    b0e6:	4618      	mov	r0, r3
    b0e8:	b004      	add	sp, #16
    b0ea:	4770      	bx	lr
    b0ec:	000101c4 	.word	0x000101c4

0000b0f0 <FlexCAN_Ip_SetStartMode_Privileged>:
 * Description   : Set the FlexCAN instance in START mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStartMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStartMode_Privileged(uint8 instance)
{
    b0f0:	b500      	push	{lr}
    b0f2:	b085      	sub	sp, #20
    b0f4:	4603      	mov	r3, r0
    b0f6:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b0fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b0fe:	4a0b      	ldr	r2, [pc, #44]	; (b12c <FlexCAN_Ip_SetStartMode_Privileged+0x3c>)
    b100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b104:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    b106:	f002 fb93 	bl	d830 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>
    /* Enable Flexcan Module */
    pBase->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    b10a:	9b03      	ldr	r3, [sp, #12]
    b10c:	681b      	ldr	r3, [r3, #0]
    b10e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    b112:	9b03      	ldr	r3, [sp, #12]
    b114:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07();
    b116:	f002 fbb7 	bl	d888 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>

    return (FlexCAN_ExitFreezeMode(pBase));
    b11a:	9803      	ldr	r0, [sp, #12]
    b11c:	f000 ff94 	bl	c048 <FlexCAN_ExitFreezeMode>
    b120:	4603      	mov	r3, r0
}
    b122:	4618      	mov	r0, r3
    b124:	b005      	add	sp, #20
    b126:	f85d fb04 	ldr.w	pc, [sp], #4
    b12a:	bf00      	nop
    b12c:	000101c4 	.word	0x000101c4

0000b130 <FlexCAN_Ip_SetStopMode_Privileged>:
 * Description   : Set the FlexCAN instance in STOP mode.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetStopMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetStopMode_Privileged(uint8 instance)
{
    b130:	b500      	push	{lr}
    b132:	b085      	sub	sp, #20
    b134:	4603      	mov	r3, r0
    b136:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b13a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b13e:	4a0a      	ldr	r2, [pc, #40]	; (b168 <FlexCAN_Ip_SetStopMode_Privileged+0x38>)
    b140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b144:	9302      	str	r3, [sp, #8]
    Flexcan_Ip_StatusType status;
    status = FlexCAN_EnterFreezeMode(pBase);
    b146:	9802      	ldr	r0, [sp, #8]
    b148:	f000 fef6 	bl	bf38 <FlexCAN_EnterFreezeMode>
    b14c:	9003      	str	r0, [sp, #12]
    if (FLEXCAN_STATUS_SUCCESS == status)
    b14e:	9b03      	ldr	r3, [sp, #12]
    b150:	2b00      	cmp	r3, #0
    b152:	d103      	bne.n	b15c <FlexCAN_Ip_SetStopMode_Privileged+0x2c>

        /* TODO: reset MB status */

        /* TODO: disable all interrupt */

        status = FlexCAN_Disable(pBase);
    b154:	9802      	ldr	r0, [sp, #8]
    b156:	f000 ffb9 	bl	c0cc <FlexCAN_Disable>
    b15a:	9003      	str	r0, [sp, #12]
    }
    return status;
    b15c:	9b03      	ldr	r3, [sp, #12]
}
    b15e:	4618      	mov	r0, r3
    b160:	b005      	add	sp, #20
    b162:	f85d fb04 	ldr.w	pc, [sp], #4
    b166:	bf00      	nop
    b168:	000101c4 	.word	0x000101c4

0000b16c <FlexCAN_Ip_SetRxMaskType_Privileged>:
 * mask.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetRxMaskType_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMaskType_Privileged(uint8 instance, Flexcan_Ip_RxMaskType type)
{
    b16c:	b500      	push	{lr}
    b16e:	b087      	sub	sp, #28
    b170:	4603      	mov	r3, r0
    b172:	9100      	str	r1, [sp, #0]
    b174:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b178:	2300      	movs	r3, #0
    b17a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b17c:	2300      	movs	r3, #0
    b17e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b180:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b184:	4a1e      	ldr	r2, [pc, #120]	; (b200 <FlexCAN_Ip_SetRxMaskType_Privileged+0x94>)
    b186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b18a:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b18c:	9803      	ldr	r0, [sp, #12]
    b18e:	f7fd fefd 	bl	8f8c <FlexCAN_IsEnabled>
    b192:	4603      	mov	r3, r0
    b194:	2b00      	cmp	r3, #0
    b196:	bf14      	ite	ne
    b198:	2301      	movne	r3, #1
    b19a:	2300      	moveq	r3, #0
    b19c:	b2db      	uxtb	r3, r3
    b19e:	f083 0301 	eor.w	r3, r3, #1
    b1a2:	b2db      	uxtb	r3, r3
    b1a4:	f88d 300b 	strb.w	r3, [sp, #11]
    b1a8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b1ac:	f003 0301 	and.w	r3, r3, #1
    b1b0:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b1b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b1b8:	2b00      	cmp	r3, #0
    b1ba:	d003      	beq.n	b1c4 <FlexCAN_Ip_SetRxMaskType_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    b1bc:	9803      	ldr	r0, [sp, #12]
    b1be:	f000 ff07 	bl	bfd0 <FlexCAN_Enable>
    b1c2:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b1c4:	9b05      	ldr	r3, [sp, #20]
    b1c6:	2b00      	cmp	r3, #0
    b1c8:	d107      	bne.n	b1da <FlexCAN_Ip_SetRxMaskType_Privileged+0x6e>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    b1ca:	f002 fb83 	bl	d8d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
        FlexCAN_SetRxMaskType(pBase, type);
    b1ce:	9900      	ldr	r1, [sp, #0]
    b1d0:	9803      	ldr	r0, [sp, #12]
    b1d2:	f7fe f930 	bl	9436 <FlexCAN_SetRxMaskType>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08();
    b1d6:	f002 fba9 	bl	d92c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>
    }

    if (TRUE == disabled)
    b1da:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b1de:	2b00      	cmp	r3, #0
    b1e0:	d008      	beq.n	b1f4 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
    {
        status = FlexCAN_Disable(pBase);
    b1e2:	9803      	ldr	r0, [sp, #12]
    b1e4:	f000 ff72 	bl	c0cc <FlexCAN_Disable>
    b1e8:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b1ea:	9b04      	ldr	r3, [sp, #16]
    b1ec:	2b00      	cmp	r3, #0
    b1ee:	d001      	beq.n	b1f4 <FlexCAN_Ip_SetRxMaskType_Privileged+0x88>
        {
            result = status;
    b1f0:	9b04      	ldr	r3, [sp, #16]
    b1f2:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b1f4:	9b05      	ldr	r3, [sp, #20]
}
    b1f6:	4618      	mov	r0, r3
    b1f8:	b007      	add	sp, #28
    b1fa:	f85d fb04 	ldr.w	pc, [sp], #4
    b1fe:	bf00      	nop
    b200:	000101c4 	.word	0x000101c4

0000b204 <FlexCAN_Ip_SetBitrate_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrate_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrate_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
    b204:	b500      	push	{lr}
    b206:	b087      	sub	sp, #28
    b208:	4603      	mov	r3, r0
    b20a:	9100      	str	r1, [sp, #0]
    b20c:	f88d 3007 	strb.w	r3, [sp, #7]
    b210:	4613      	mov	r3, r2
    b212:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b216:	2300      	movs	r3, #0
    b218:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b21a:	2300      	movs	r3, #0
    b21c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b21e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b222:	4a1c      	ldr	r2, [pc, #112]	; (b294 <FlexCAN_Ip_SetBitrate_Privileged+0x90>)
    b224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b228:	9303      	str	r3, [sp, #12]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    b22a:	9b03      	ldr	r3, [sp, #12]
    b22c:	681b      	ldr	r3, [r3, #0]
    b22e:	0fdb      	lsrs	r3, r3, #31
    b230:	f88d 300b 	strb.w	r3, [sp, #11]
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_OFF)
    (void)enhExt;
#endif
    if (TRUE == disabled)
    b234:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b238:	2b00      	cmp	r3, #0
    b23a:	d003      	beq.n	b244 <FlexCAN_Ip_SetBitrate_Privileged+0x40>
    {
        result = FlexCAN_Enable(pBase);
    b23c:	9803      	ldr	r0, [sp, #12]
    b23e:	f000 fec7 	bl	bfd0 <FlexCAN_Enable>
    b242:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b244:	9b05      	ldr	r3, [sp, #20]
    b246:	2b00      	cmp	r3, #0
    b248:	d112      	bne.n	b270 <FlexCAN_Ip_SetBitrate_Privileged+0x6c>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    b24a:	f002 fd2f 	bl	dcac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
            FlexCAN_SetEnhancedNominalTimeSegments(pBase, bitrate);
        }
        else
#endif
        {
            if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    b24e:	9803      	ldr	r0, [sp, #12]
    b250:	f7fe f830 	bl	92b4 <FlexCAN_IsExCbtEnabled>
    b254:	4603      	mov	r3, r0
    b256:	2b00      	cmp	r3, #0
    b258:	d004      	beq.n	b264 <FlexCAN_Ip_SetBitrate_Privileged+0x60>
            {
                FlexCAN_SetExtendedTimeSegments(pBase, bitrate);
    b25a:	9900      	ldr	r1, [sp, #0]
    b25c:	9803      	ldr	r0, [sp, #12]
    b25e:	f7fd ff7f 	bl	9160 <FlexCAN_SetExtendedTimeSegments>
    b262:	e003      	b.n	b26c <FlexCAN_Ip_SetBitrate_Privileged+0x68>
            }
            else
            {
                FlexCAN_SetTimeSegments(pBase, bitrate);
    b264:	9900      	ldr	r1, [sp, #0]
    b266:	9803      	ldr	r0, [sp, #12]
    b268:	f7fd ff4e 	bl	9108 <FlexCAN_SetTimeSegments>
            }
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14();
    b26c:	f002 fd4a 	bl	dd04 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>
    }

    if (TRUE == disabled)
    b270:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b274:	2b00      	cmp	r3, #0
    b276:	d008      	beq.n	b28a <FlexCAN_Ip_SetBitrate_Privileged+0x86>
    {
        status = FlexCAN_Disable(pBase);
    b278:	9803      	ldr	r0, [sp, #12]
    b27a:	f000 ff27 	bl	c0cc <FlexCAN_Disable>
    b27e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b280:	9b04      	ldr	r3, [sp, #16]
    b282:	2b00      	cmp	r3, #0
    b284:	d001      	beq.n	b28a <FlexCAN_Ip_SetBitrate_Privileged+0x86>
        {
            result = status;
    b286:	9b04      	ldr	r3, [sp, #16]
    b288:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b28a:	9b05      	ldr	r3, [sp, #20]
}
    b28c:	4618      	mov	r0, r3
    b28e:	b007      	add	sp, #28
    b290:	f85d fb04 	ldr.w	pc, [sp], #4
    b294:	000101c4 	.word	0x000101c4

0000b298 <FlexCAN_Ip_GetBitrate>:
 * or the arbitration phase of FD frames.
 *
 *END**************************************************************************/
 /* implements   FlexCAN_Ip_GetBitrate_Activity */
boolean FlexCAN_Ip_GetBitrate(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    b298:	b500      	push	{lr}
    b29a:	b085      	sub	sp, #20
    b29c:	4603      	mov	r3, r0
    b29e:	9100      	str	r1, [sp, #0]
    b2a0:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b2a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b2a8:	4a0d      	ldr	r2, [pc, #52]	; (b2e0 <FlexCAN_Ip_GetBitrate+0x48>)
    b2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2ae:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    b2b0:	2300      	movs	r3, #0
    b2b2:	f88d 300b 	strb.w	r3, [sp, #11]
        FlexCAN_GetEnhancedNominalTimeSegments(pBase, bitrate);
    }
    else
#endif
    {
        if (TRUE == FlexCAN_IsExCbtEnabled(pBase))
    b2b6:	9803      	ldr	r0, [sp, #12]
    b2b8:	f7fd fffc 	bl	92b4 <FlexCAN_IsExCbtEnabled>
    b2bc:	4603      	mov	r3, r0
    b2be:	2b00      	cmp	r3, #0
    b2c0:	d004      	beq.n	b2cc <FlexCAN_Ip_GetBitrate+0x34>
        {
            /* Get the Extended time segments*/
            FlexCAN_GetExtendedTimeSegments(pBase, bitrate);
    b2c2:	9900      	ldr	r1, [sp, #0]
    b2c4:	9803      	ldr	r0, [sp, #12]
    b2c6:	f7fd ff79 	bl	91bc <FlexCAN_GetExtendedTimeSegments>
    b2ca:	e003      	b.n	b2d4 <FlexCAN_Ip_GetBitrate+0x3c>
        }
        else
        {
            /* Get the time segments*/
            FlexCAN_GetTimeSegments(pBase, bitrate);
    b2cc:	9900      	ldr	r1, [sp, #0]
    b2ce:	9803      	ldr	r0, [sp, #12]
    b2d0:	f7fd ff9c 	bl	920c <FlexCAN_GetTimeSegments>
        }
    }
    return enhCbt;
    b2d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    b2d8:	4618      	mov	r0, r3
    b2da:	b005      	add	sp, #20
    b2dc:	f85d fb04 	ldr.w	pc, [sp], #4
    b2e0:	000101c4 	.word	0x000101c4

0000b2e4 <FlexCAN_Ip_ClearTDCFail>:
 * Description   : This function clear the TDC Fail flag.
 *
 *END**************************************************************************/
/* implements   FlexCAN_Ip_ClearTDCFail_Activity */
void FlexCAN_Ip_ClearTDCFail(uint8 u8Instance)
{
    b2e4:	b500      	push	{lr}
    b2e6:	b085      	sub	sp, #20
    b2e8:	4603      	mov	r3, r0
    b2ea:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b2ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b2f2:	4a0a      	ldr	r2, [pc, #40]	; (b31c <FlexCAN_Ip_ClearTDCFail+0x38>)
    b2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b2f8:	9303      	str	r3, [sp, #12]
    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    b2fa:	f002 fb3d 	bl	d978 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
        pBase->ETDC |=  FLEXCAN_ETDC_ETDCFAIL_MASK;
    }
    else
#endif
    {
        pBase->FDCTRL |= FLEXCAN_FDCTRL_TDCFAIL_MASK;
    b2fe:	9b03      	ldr	r3, [sp, #12]
    b300:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b304:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
    b308:	9b03      	ldr	r3, [sp, #12]
    b30a:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09();
    b30e:	f002 fb5f 	bl	d9d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>
}
    b312:	bf00      	nop
    b314:	b005      	add	sp, #20
    b316:	f85d fb04 	ldr.w	pc, [sp], #4
    b31a:	bf00      	nop
    b31c:	000101c4 	.word	0x000101c4

0000b320 <FlexCAN_Ip_GetTDCFail>:
 *
 *END**************************************************************************/

/* implements    FlexCAN_Ip_GetTDCFail_Activity */
boolean FlexCAN_Ip_GetTDCFail(uint8 u8Instance)
{
    b320:	b084      	sub	sp, #16
    b322:	4603      	mov	r3, r0
    b324:	f88d 3007 	strb.w	r3, [sp, #7]
    boolean value=FALSE;
    b328:	2300      	movs	r3, #0
    b32a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b32e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b332:	4a0a      	ldr	r2, [pc, #40]	; (b35c <FlexCAN_Ip_GetTDCFail+0x3c>)
    b334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b338:	9302      	str	r3, [sp, #8]
        value = ((pBase->ETDC & FLEXCAN_ETDC_ETDCFAIL_MASK) == FLEXCAN_ETDC_ETDCFAIL_MASK) ? TRUE : FALSE;
    }
    else
#endif
    {
        value = ((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCFAIL_MASK) == FLEXCAN_FDCTRL_TDCFAIL_MASK) ? TRUE : FALSE;
    b33a:	9b02      	ldr	r3, [sp, #8]
    b33c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    b344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    b348:	bf0c      	ite	eq
    b34a:	2301      	moveq	r3, #1
    b34c:	2300      	movne	r3, #0
    b34e:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    b352:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b356:	4618      	mov	r0, r3
    b358:	b004      	add	sp, #16
    b35a:	4770      	bx	lr
    b35c:	000101c4 	.word	0x000101c4

0000b360 <FlexCAN_Ip_GetTDCValue>:
 *
 *END**************************************************************************/

/* implements FlexCAN_Ip_GetTDCValue_Activity */
uint8 FlexCAN_Ip_GetTDCValue(uint8 u8Instance)
{
    b360:	b084      	sub	sp, #16
    b362:	4603      	mov	r3, r0
    b364:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 value = 0;
    b368:	2300      	movs	r3, #0
    b36a:	f88d 300f 	strb.w	r3, [sp, #15]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b36e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b372:	4a08      	ldr	r2, [pc, #32]	; (b394 <FlexCAN_Ip_GetTDCValue+0x34>)
    b374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b378:	9302      	str	r3, [sp, #8]
        value = (uint8)((pBase->ETDC& FLEXCAN_ETDC_ETDCVAL_MASK) >> FLEXCAN_ETDC_ETDCVAL_SHIFT);
    }
    else
#endif
    {
        value = (uint8)((pBase->FDCTRL & FLEXCAN_FDCTRL_TDCVAL_MASK) >> FLEXCAN_FDCTRL_TDCVAL_SHIFT);
    b37a:	9b02      	ldr	r3, [sp, #8]
    b37c:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    b380:	b2db      	uxtb	r3, r3
    b382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b386:	f88d 300f 	strb.w	r3, [sp, #15]
    }
    return value;
    b38a:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    b38e:	4618      	mov	r0, r3
    b390:	b004      	add	sp, #16
    b392:	4770      	bx	lr
    b394:	000101c4 	.word	0x000101c4

0000b398 <FlexCAN_Ip_SetBitrateCbt_Privileged>:
 *
 *END**************************************************************************/

/* implements  FlexCAN_Ip_SetBitrateCbt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetBitrateCbt_Privileged(uint8 instance, const Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
    b398:	b500      	push	{lr}
    b39a:	b087      	sub	sp, #28
    b39c:	4603      	mov	r3, r0
    b39e:	9100      	str	r1, [sp, #0]
    b3a0:	f88d 3007 	strb.w	r3, [sp, #7]
    b3a4:	4613      	mov	r3, r2
    b3a6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b3aa:	2300      	movs	r3, #0
    b3ac:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b3ae:	2300      	movs	r3, #0
    b3b0:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b3b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b3b6:	4a1e      	ldr	r2, [pc, #120]	; (b430 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x98>)
    b3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b3bc:	9303      	str	r3, [sp, #12]
    boolean fd_enable = FlexCAN_IsFDEnabled(pBase);
    b3be:	9803      	ldr	r0, [sp, #12]
    b3c0:	f7fd ffaf 	bl	9322 <FlexCAN_IsFDEnabled>
    b3c4:	4603      	mov	r3, r0
    b3c6:	f88d 300b 	strb.w	r3, [sp, #11]
    /* Check if the FlexCAN is enabled or not */
    boolean disabled = ((pBase->MCR & FLEXCAN_MCR_MDIS_MASK) != 0U) ? TRUE : FALSE;
    b3ca:	9b03      	ldr	r3, [sp, #12]
    b3cc:	681b      	ldr	r3, [r3, #0]
    b3ce:	0fdb      	lsrs	r3, r3, #31
    b3d0:	f88d 300a 	strb.w	r3, [sp, #10]

    if (TRUE == disabled)
    b3d4:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b3d8:	2b00      	cmp	r3, #0
    b3da:	d003      	beq.n	b3e4 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x4c>
    {
        result = FlexCAN_Enable(pBase);
    b3dc:	9803      	ldr	r0, [sp, #12]
    b3de:	f000 fdf7 	bl	bfd0 <FlexCAN_Enable>
    b3e2:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b3e4:	9b05      	ldr	r3, [sp, #20]
    b3e6:	2b00      	cmp	r3, #0
    b3e8:	d10f      	bne.n	b40a <FlexCAN_Ip_SetBitrateCbt_Privileged+0x72>
    {
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCE_CBT == STD_ON)
        boolean enhCbt = FlexCAN_IsEnhCbtEnabled(pBase);
#endif
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    b3ea:	f002 fcb1 	bl	dd50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
        FlexCAN_SetFDEnabled(pBase, fd_enable, bitRateSwitch);
    b3ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b3f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b3f6:	4619      	mov	r1, r3
    b3f8:	9803      	ldr	r0, [sp, #12]
    b3fa:	f7fd fdd1 	bl	8fa0 <FlexCAN_SetFDEnabled>
        }
        else
#endif
        {
            /* Set time segments*/
            FlexCAN_SetFDTimeSegments(pBase, bitrate);
    b3fe:	9900      	ldr	r1, [sp, #0]
    b400:	9803      	ldr	r0, [sp, #12]
    b402:	f7fd fe4c 	bl	909e <FlexCAN_SetFDTimeSegments>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15();
    b406:	f002 fccf 	bl	dda8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>
    }

    if (TRUE == disabled)
    b40a:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b40e:	2b00      	cmp	r3, #0
    b410:	d008      	beq.n	b424 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
    {
        status = FlexCAN_Disable(pBase);
    b412:	9803      	ldr	r0, [sp, #12]
    b414:	f000 fe5a 	bl	c0cc <FlexCAN_Disable>
    b418:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b41a:	9b04      	ldr	r3, [sp, #16]
    b41c:	2b00      	cmp	r3, #0
    b41e:	d001      	beq.n	b424 <FlexCAN_Ip_SetBitrateCbt_Privileged+0x8c>
        {
            result = status;
    b420:	9b04      	ldr	r3, [sp, #16]
    b422:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b424:	9b05      	ldr	r3, [sp, #20]
}
    b426:	4618      	mov	r0, r3
    b428:	b007      	add	sp, #28
    b42a:	f85d fb04 	ldr.w	pc, [sp], #4
    b42e:	bf00      	nop
    b430:	000101c4 	.word	0x000101c4

0000b434 <FlexCAN_Ip_GetBitrateFD>:
 * of FD frames.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBitrateFD_Activity */
boolean FlexCAN_Ip_GetBitrateFD(uint8 instance, Flexcan_Ip_TimeSegmentType * bitrate)
{
    b434:	b500      	push	{lr}
    b436:	b085      	sub	sp, #20
    b438:	4603      	mov	r3, r0
    b43a:	9100      	str	r1, [sp, #0]
    b43c:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
    DevAssert(bitrate != NULL_PTR);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b440:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b444:	4a08      	ldr	r2, [pc, #32]	; (b468 <FlexCAN_Ip_GetBitrateFD+0x34>)
    b446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b44a:	9303      	str	r3, [sp, #12]
    boolean enhCbt = FALSE;
    b44c:	2300      	movs	r3, #0
    b44e:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    else
#endif
    {
        /* Get the time segments*/
        FlexCAN_GetFDTimeSegments(pBase, bitrate);
    b452:	9900      	ldr	r1, [sp, #0]
    b454:	9803      	ldr	r0, [sp, #12]
    b456:	f7fd ff00 	bl	925a <FlexCAN_GetFDTimeSegments>
    }
    return enhCbt;
    b45a:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    b45e:	4618      	mov	r0, r3
    b460:	b005      	add	sp, #20
    b462:	f85d fb04 	ldr.w	pc, [sp], #4
    b466:	bf00      	nop
    b468:	000101c4 	.word	0x000101c4

0000b46c <FlexCAN_Ip_SetTDCOffset_Privileged>:
 * the Transceiver Delay Compensation Offset.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTDCOffset_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTDCOffset_Privileged(uint8 instance, boolean enable, uint8 offset)
{
    b46c:	b500      	push	{lr}
    b46e:	b087      	sub	sp, #28
    b470:	4603      	mov	r3, r0
    b472:	f88d 3007 	strb.w	r3, [sp, #7]
    b476:	460b      	mov	r3, r1
    b478:	f88d 3006 	strb.w	r3, [sp, #6]
    b47c:	4613      	mov	r3, r2
    b47e:	f88d 3005 	strb.w	r3, [sp, #5]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b482:	2300      	movs	r3, #0
    b484:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b486:	2300      	movs	r3, #0
    b488:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b48a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b48e:	4a20      	ldr	r2, [pc, #128]	; (b510 <FlexCAN_Ip_SetTDCOffset_Privileged+0xa4>)
    b490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b494:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b496:	9803      	ldr	r0, [sp, #12]
    b498:	f7fd fd78 	bl	8f8c <FlexCAN_IsEnabled>
    b49c:	4603      	mov	r3, r0
    b49e:	2b00      	cmp	r3, #0
    b4a0:	bf14      	ite	ne
    b4a2:	2301      	movne	r3, #1
    b4a4:	2300      	moveq	r3, #0
    b4a6:	b2db      	uxtb	r3, r3
    b4a8:	f083 0301 	eor.w	r3, r3, #1
    b4ac:	b2db      	uxtb	r3, r3
    b4ae:	f88d 300b 	strb.w	r3, [sp, #11]
    b4b2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b4b6:	f003 0301 	and.w	r3, r3, #1
    b4ba:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b4be:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b4c2:	2b00      	cmp	r3, #0
    b4c4:	d003      	beq.n	b4ce <FlexCAN_Ip_SetTDCOffset_Privileged+0x62>
    {
        result = FlexCAN_Enable(pBase);
    b4c6:	9803      	ldr	r0, [sp, #12]
    b4c8:	f000 fd82 	bl	bfd0 <FlexCAN_Enable>
    b4cc:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b4ce:	9b05      	ldr	r3, [sp, #20]
    b4d0:	2b00      	cmp	r3, #0
    b4d2:	d10b      	bne.n	b4ec <FlexCAN_Ip_SetTDCOffset_Privileged+0x80>
    {
        /* Check if enhaced CBT is Enabled */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    b4d4:	f002 fc8e 	bl	ddf4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        }
        else
#endif
        {
            /* Enable/Disable TDC and set the TDC Offset */
            FlexCAN_SetTDCOffset(pBase, enable, offset);
    b4d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    b4dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b4e0:	4619      	mov	r1, r3
    b4e2:	9803      	ldr	r0, [sp, #12]
    b4e4:	f7fd fd2b 	bl	8f3e <FlexCAN_SetTDCOffset>
        }
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16();
    b4e8:	f002 fcb0 	bl	de4c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>
        /* Check if enhaced CBT is Enabled */
    }

    if (TRUE == disabled)
    b4ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b4f0:	2b00      	cmp	r3, #0
    b4f2:	d008      	beq.n	b506 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
    {
        status = FlexCAN_Disable(pBase);
    b4f4:	9803      	ldr	r0, [sp, #12]
    b4f6:	f000 fde9 	bl	c0cc <FlexCAN_Disable>
    b4fa:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b4fc:	9b04      	ldr	r3, [sp, #16]
    b4fe:	2b00      	cmp	r3, #0
    b500:	d001      	beq.n	b506 <FlexCAN_Ip_SetTDCOffset_Privileged+0x9a>
        {
            result = status;
    b502:	9b04      	ldr	r3, [sp, #16]
    b504:	9305      	str	r3, [sp, #20]
        }
    }
    return result;
    b506:	9b05      	ldr	r3, [sp, #20]
}
    b508:	4618      	mov	r0, r3
    b50a:	b007      	add	sp, #28
    b50c:	f85d fb04 	ldr.w	pc, [sp], #4
    b510:	000101c4 	.word	0x000101c4

0000b514 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged>:
 * be delayed from the first bit of CRC field on CAN bus.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetTxArbitrationStartDelay_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged(uint8 instance,  uint8 value)
{
    b514:	b500      	push	{lr}
    b516:	b087      	sub	sp, #28
    b518:	4603      	mov	r3, r0
    b51a:	460a      	mov	r2, r1
    b51c:	f88d 3007 	strb.w	r3, [sp, #7]
    b520:	4613      	mov	r3, r2
    b522:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b526:	2300      	movs	r3, #0
    b528:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b52a:	2300      	movs	r3, #0
    b52c:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b52e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b532:	4a1f      	ldr	r2, [pc, #124]	; (b5b0 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x9c>)
    b534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b538:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b53a:	9803      	ldr	r0, [sp, #12]
    b53c:	f7fd fd26 	bl	8f8c <FlexCAN_IsEnabled>
    b540:	4603      	mov	r3, r0
    b542:	2b00      	cmp	r3, #0
    b544:	bf14      	ite	ne
    b546:	2301      	movne	r3, #1
    b548:	2300      	moveq	r3, #0
    b54a:	b2db      	uxtb	r3, r3
    b54c:	f083 0301 	eor.w	r3, r3, #1
    b550:	b2db      	uxtb	r3, r3
    b552:	f88d 300b 	strb.w	r3, [sp, #11]
    b556:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b55a:	f003 0301 	and.w	r3, r3, #1
    b55e:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b562:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b566:	2b00      	cmp	r3, #0
    b568:	d003      	beq.n	b572 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    b56a:	9803      	ldr	r0, [sp, #12]
    b56c:	f000 fd30 	bl	bfd0 <FlexCAN_Enable>
    b570:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    b572:	9b05      	ldr	r3, [sp, #20]
    b574:	2b00      	cmp	r3, #0
    b576:	d109      	bne.n	b58c <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    b578:	f002 fc8e 	bl	de98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
        FlexCAN_SetTxArbitrationStartDelay(pBase, value);
    b57c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b580:	4619      	mov	r1, r3
    b582:	9803      	ldr	r0, [sp, #12]
    b584:	f7fd ff43 	bl	940e <FlexCAN_SetTxArbitrationStartDelay>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17();
    b588:	f002 fcb2 	bl	def0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>
    }

    if (TRUE == disabled)
    b58c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b590:	2b00      	cmp	r3, #0
    b592:	d008      	beq.n	b5a6 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    b594:	9803      	ldr	r0, [sp, #12]
    b596:	f000 fd99 	bl	c0cc <FlexCAN_Disable>
    b59a:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b59c:	9b04      	ldr	r3, [sp, #16]
    b59e:	2b00      	cmp	r3, #0
    b5a0:	d001      	beq.n	b5a6 <FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged+0x92>
        {
            result = status;
    b5a2:	9b04      	ldr	r3, [sp, #16]
    b5a4:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b5a6:	9b05      	ldr	r3, [sp, #20]
}
    b5a8:	4618      	mov	r0, r3
    b5aa:	b007      	add	sp, #28
    b5ac:	f85d fb04 	ldr.w	pc, [sp], #4
    b5b0:	000101c4 	.word	0x000101c4

0000b5b4 <FlexCAN_Ip_GetBuffStatusFlag>:
 * In case of a complete operation this flag is set.
 * In case msgBuff is 255 will return Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_GetBuffStatusFlag_Activity */
boolean FlexCAN_Ip_GetBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    b5b4:	b500      	push	{lr}
    b5b6:	b085      	sub	sp, #20
    b5b8:	4603      	mov	r3, r0
    b5ba:	460a      	mov	r2, r1
    b5bc:	f88d 3007 	strb.w	r3, [sp, #7]
    b5c0:	4613      	mov	r3, r2
    b5c2:	f88d 3006 	strb.w	r3, [sp, #6]
    boolean returnResult;
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    const FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b5c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b5ca:	4a0b      	ldr	r2, [pc, #44]	; (b5f8 <FlexCAN_Ip_GetBuffStatusFlag+0x44>)
    b5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b5d0:	9303      	str	r3, [sp, #12]
        returnResult = ((1U == FlexCAN_GetEnhancedRxFIFOStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW)) ? TRUE : FALSE);
    }
    else
#endif
    {
        returnResult = ((1U == FlexCAN_GetBuffStatusFlag(pBase, msgBuffIdx)) ? TRUE : FALSE);
    b5d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b5d6:	4619      	mov	r1, r3
    b5d8:	9803      	ldr	r0, [sp, #12]
    b5da:	f7fd fd44 	bl	9066 <FlexCAN_GetBuffStatusFlag>
    b5de:	4603      	mov	r3, r0
    b5e0:	2b01      	cmp	r3, #1
    b5e2:	bf0c      	ite	eq
    b5e4:	2301      	moveq	r3, #1
    b5e6:	2300      	movne	r3, #0
    b5e8:	f88d 300b 	strb.w	r3, [sp, #11]
    }
    return returnResult;
    b5ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    b5f0:	4618      	mov	r0, r3
    b5f2:	b005      	add	sp, #20
    b5f4:	f85d fb04 	ldr.w	pc, [sp], #4
    b5f8:	000101c4 	.word	0x000101c4

0000b5fc <FlexCAN_Ip_ClearBuffStatusFlag>:
 * Description   : Clear FlexCAN Message Buffer Status Flag.
 * In case msgBuff is 255 will clear Enhanced Overflow Status Flag.
 *END**************************************************************************/
/* implements FlexCAN_Ip_ClearBuffStatusFlag_Activity */
void FlexCAN_Ip_ClearBuffStatusFlag(uint8 instance, uint8 msgBuffIdx)
{
    b5fc:	b500      	push	{lr}
    b5fe:	b085      	sub	sp, #20
    b600:	4603      	mov	r3, r0
    b602:	460a      	mov	r2, r1
    b604:	f88d 3007 	strb.w	r3, [sp, #7]
    b608:	4613      	mov	r3, r2
    b60a:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b60e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b612:	4a07      	ldr	r2, [pc, #28]	; (b630 <FlexCAN_Ip_ClearBuffStatusFlag+0x34>)
    b614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b618:	9303      	str	r3, [sp, #12]
        FlexCAN_ClearEnhancedRxFifoIntStatusFlag(pBase, FLEXCAN_IP_ENHANCED_RXFIFO_OVERFLOW);
    }
    else
#endif
    {
        FlexCAN_ClearMsgBuffIntStatusFlag(pBase, msgBuffIdx);
    b61a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b61e:	4619      	mov	r1, r3
    b620:	9803      	ldr	r0, [sp, #12]
    b622:	f7fd fd0d 	bl	9040 <FlexCAN_ClearMsgBuffIntStatusFlag>
    }
}
    b626:	bf00      	nop
    b628:	b005      	add	sp, #20
    b62a:	f85d fb04 	ldr.w	pc, [sp], #4
    b62e:	bf00      	nop
    b630:	000101c4 	.word	0x000101c4

0000b634 <FlexCAN_Ip_EnableInterrupts_Privileged>:
 * Description   : Enable all mb interrupts configured.
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_EnableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_EnableInterrupts_Privileged(uint8 u8Instance)
{
    b634:	b500      	push	{lr}
    b636:	b087      	sub	sp, #28
    b638:	4603      	mov	r3, r0
    b63a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b63e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b642:	4a11      	ldr	r2, [pc, #68]	; (b688 <FlexCAN_Ip_EnableInterrupts_Privileged+0x54>)
    b644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b648:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    b64a:	2301      	movs	r3, #1
    b64c:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    b64e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b652:	4a0e      	ldr	r2, [pc, #56]	; (b68c <FlexCAN_Ip_EnableInterrupts_Privileged+0x58>)
    b654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b658:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    b65a:	9804      	ldr	r0, [sp, #16]
    b65c:	f7fd fc96 	bl	8f8c <FlexCAN_IsEnabled>
    b660:	4603      	mov	r3, r0
    b662:	2b00      	cmp	r3, #0
    b664:	d00b      	beq.n	b67e <FlexCAN_Ip_EnableInterrupts_Privileged+0x4a>
    {
        FlexCAN_EnableInterrupts(pBase, u8Instance);
    b666:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b66a:	4619      	mov	r1, r3
    b66c:	9804      	ldr	r0, [sp, #16]
    b66e:	f000 ffe1 	bl	c634 <FlexCAN_EnableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, TRUE);
            }
        }
    #endif
        state->isIntActive = TRUE;
    b672:	9b03      	ldr	r3, [sp, #12]
    b674:	2201      	movs	r2, #1
    b676:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    b67a:	2300      	movs	r3, #0
    b67c:	9305      	str	r3, [sp, #20]
    }

    return result;
    b67e:	9b05      	ldr	r3, [sp, #20]
}
    b680:	4618      	mov	r0, r3
    b682:	b007      	add	sp, #28
    b684:	f85d fb04 	ldr.w	pc, [sp], #4
    b688:	000101c4 	.word	0x000101c4
    b68c:	1fff8fb8 	.word	0x1fff8fb8

0000b690 <FlexCAN_Ip_DisableInterrupts_Privileged>:
 * Description   : Enable all interrupts configured.
 *
 *END**************************************************************************/
 /* implements FlexCAN_Ip_DisableInterrupts_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_DisableInterrupts_Privileged(uint8 u8Instance)
{
    b690:	b500      	push	{lr}
    b692:	b087      	sub	sp, #28
    b694:	4603      	mov	r3, r0
    b696:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b69a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b69e:	4a10      	ldr	r2, [pc, #64]	; (b6e0 <FlexCAN_Ip_DisableInterrupts_Privileged+0x50>)
    b6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6a4:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_ERROR;
    b6a6:	2301      	movs	r3, #1
    b6a8:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    b6aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b6ae:	4a0d      	ldr	r2, [pc, #52]	; (b6e4 <FlexCAN_Ip_DisableInterrupts_Privileged+0x54>)
    b6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b6b4:	9303      	str	r3, [sp, #12]

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    if (TRUE == FlexCAN_IsEnabled(pBase))
    b6b6:	9804      	ldr	r0, [sp, #16]
    b6b8:	f7fd fc68 	bl	8f8c <FlexCAN_IsEnabled>
    b6bc:	4603      	mov	r3, r0
    b6be:	2b00      	cmp	r3, #0
    b6c0:	d008      	beq.n	b6d4 <FlexCAN_Ip_DisableInterrupts_Privileged+0x44>
    {
        FlexCAN_DisableInterrupts(pBase);
    b6c2:	9804      	ldr	r0, [sp, #16]
    b6c4:	f000 ffae 	bl	c624 <FlexCAN_DisableInterrupts>
            {
                FlexCAN_SetEnhancedRxFifoIntAll(pBase, FALSE);
            }
        }
#endif
        state->isIntActive = FALSE;
    b6c8:	9b03      	ldr	r3, [sp, #12]
    b6ca:	2200      	movs	r2, #0
    b6cc:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
        result = FLEXCAN_STATUS_SUCCESS;
    b6d0:	2300      	movs	r3, #0
    b6d2:	9305      	str	r3, [sp, #20]
    }

    return result;
    b6d4:	9b05      	ldr	r3, [sp, #20]
}
    b6d6:	4618      	mov	r0, r3
    b6d8:	b007      	add	sp, #28
    b6da:	f85d fb04 	ldr.w	pc, [sp], #4
    b6de:	bf00      	nop
    b6e0:	000101c4 	.word	0x000101c4
    b6e4:	1fff8fb8 	.word	0x1fff8fb8

0000b6e8 <FlexCAN_Ip_SetErrorInt_Privileged>:
 * Description   : Enable\Disable Error or BusOff Interrupt
 *
 *END**************************************************************************/
/* implements FlexCAN_Ip_SetErrorInt_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetErrorInt_Privileged(uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
    b6e8:	b500      	push	{lr}
    b6ea:	b087      	sub	sp, #28
    b6ec:	4603      	mov	r3, r0
    b6ee:	9100      	str	r1, [sp, #0]
    b6f0:	f88d 3007 	strb.w	r3, [sp, #7]
    b6f4:	4613      	mov	r3, r2
    b6f6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b6fa:	2300      	movs	r3, #0
    b6fc:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b6fe:	2300      	movs	r3, #0
    b700:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b702:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b706:	4a3a      	ldr	r2, [pc, #232]	; (b7f0 <FlexCAN_Ip_SetErrorInt_Privileged+0x108>)
    b708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b70c:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b70e:	9803      	ldr	r0, [sp, #12]
    b710:	f7fd fc3c 	bl	8f8c <FlexCAN_IsEnabled>
    b714:	4603      	mov	r3, r0
    b716:	2b00      	cmp	r3, #0
    b718:	bf14      	ite	ne
    b71a:	2301      	movne	r3, #1
    b71c:	2300      	moveq	r3, #0
    b71e:	b2db      	uxtb	r3, r3
    b720:	f083 0301 	eor.w	r3, r3, #1
    b724:	b2db      	uxtb	r3, r3
    b726:	f88d 300b 	strb.w	r3, [sp, #11]
    b72a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b72e:	f003 0301 	and.w	r3, r3, #1
    b732:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b736:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b73a:	2b00      	cmp	r3, #0
    b73c:	d003      	beq.n	b746 <FlexCAN_Ip_SetErrorInt_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    b73e:	9803      	ldr	r0, [sp, #12]
    b740:	f000 fc46 	bl	bfd0 <FlexCAN_Enable>
    b744:	9005      	str	r0, [sp, #20]
    }

    if (FLEXCAN_STATUS_SUCCESS == result)
    b746:	9b05      	ldr	r3, [sp, #20]
    b748:	2b00      	cmp	r3, #0
    b74a:	d13c      	bne.n	b7c6 <FlexCAN_Ip_SetErrorInt_Privileged+0xde>
    b74c:	9b00      	ldr	r3, [sp, #0]
    b74e:	2b04      	cmp	r3, #4
    b750:	d83b      	bhi.n	b7ca <FlexCAN_Ip_SetErrorInt_Privileged+0xe2>
    b752:	a201      	add	r2, pc, #4	; (adr r2, b758 <FlexCAN_Ip_SetErrorInt_Privileged+0x70>)
    b754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b758:	0000b7a3 	.word	0x0000b7a3
    b75c:	0000b7b5 	.word	0x0000b7b5
    b760:	0000b77f 	.word	0x0000b77f
    b764:	0000b791 	.word	0x0000b791
    b768:	0000b76d 	.word	0x0000b76d
    {
        switch (type)
        {
            case FLEXCAN_IP_INT_BUSOFF:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_BUSOFF, enable);
    b76c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b770:	461a      	mov	r2, r3
    b772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    b776:	9803      	ldr	r0, [sp, #12]
    b778:	f000 fce8 	bl	c14c <FlexCAN_SetErrIntCmd>
                break;
    b77c:	e026      	b.n	b7cc <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR:
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR, enable);
    b77e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b782:	461a      	mov	r2, r3
    b784:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    b788:	9803      	ldr	r0, [sp, #12]
    b78a:	f000 fcdf 	bl	c14c <FlexCAN_SetErrIntCmd>
                break;
    b78e:	e01d      	b.n	b7cc <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
            }
            case FLEXCAN_IP_INT_ERR_FAST :
            {
                FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_ERR_FAST, enable);
    b790:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b794:	461a      	mov	r2, r3
    b796:	f244 0101 	movw	r1, #16385	; 0x4001
    b79a:	9803      	ldr	r0, [sp, #12]
    b79c:	f000 fcd6 	bl	c14c <FlexCAN_SetErrIntCmd>
                break;
    b7a0:	e014      	b.n	b7cc <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_RX_WARNING, enable);
    b7a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b7a6:	461a      	mov	r2, r3
    b7a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    b7ac:	9803      	ldr	r0, [sp, #12]
    b7ae:	f000 fccd 	bl	c14c <FlexCAN_SetErrIntCmd>
                }
                break;
    b7b2:	e00b      	b.n	b7cc <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    {
                        result = FLEXCAN_STATUS_ERROR;
                    }else
                #endif
                {
                    FlexCAN_SetErrIntCmd(pBase, FLEXCAN_INT_TX_WARNING, enable);
    b7b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b7b8:	461a      	mov	r2, r3
    b7ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
    b7be:	9803      	ldr	r0, [sp, #12]
    b7c0:	f000 fcc4 	bl	c14c <FlexCAN_SetErrIntCmd>
                }
                break;
    b7c4:	e002      	b.n	b7cc <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                    /* Should not get here */
                #endif
                break;
            }
        }
    }
    b7c6:	bf00      	nop
    b7c8:	e000      	b.n	b7cc <FlexCAN_Ip_SetErrorInt_Privileged+0xe4>
                break;
    b7ca:	bf00      	nop

    if (TRUE == disabled)
    b7cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b7d0:	2b00      	cmp	r3, #0
    b7d2:	d008      	beq.n	b7e6 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
    {
        status = FlexCAN_Disable(pBase);
    b7d4:	9803      	ldr	r0, [sp, #12]
    b7d6:	f000 fc79 	bl	c0cc <FlexCAN_Disable>
    b7da:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b7dc:	9b04      	ldr	r3, [sp, #16]
    b7de:	2b00      	cmp	r3, #0
    b7e0:	d001      	beq.n	b7e6 <FlexCAN_Ip_SetErrorInt_Privileged+0xfe>
        {
            result = status;
    b7e2:	9b04      	ldr	r3, [sp, #16]
    b7e4:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b7e6:	9b05      	ldr	r3, [sp, #20]
}
    b7e8:	4618      	mov	r0, r3
    b7ea:	b007      	add	sp, #28
    b7ec:	f85d fb04 	ldr.w	pc, [sp], #4
    b7f0:	000101c4 	.word	0x000101c4

0000b7f4 <FlexCAN_Ip_AbortTransfer>:
 * receiver.
 *
 *END**************************************************************************/
/* implements    FlexCAN_Ip_AbortTransfer_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_AbortTransfer(uint8 u8Instance, uint8 mb_idx)
{
    b7f4:	b500      	push	{lr}
    b7f6:	b087      	sub	sp, #28
    b7f8:	4603      	mov	r3, r0
    b7fa:	460a      	mov	r2, r1
    b7fc:	f88d 3007 	strb.w	r3, [sp, #7]
    b800:	4613      	mov	r3, r2
    b802:	f88d 3006 	strb.w	r3, [sp, #6]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(u8Instance < FLEXCAN_INSTANCE_COUNT);
        DevAssert((mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM) || (255u == mb_idx));
    #endif
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[u8Instance];
    b806:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b80a:	4a27      	ldr	r2, [pc, #156]	; (b8a8 <FlexCAN_Ip_AbortTransfer+0xb4>)
    b80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b810:	9304      	str	r3, [sp, #16]
#if ((FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON))
    Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
#else
    const Flexcan_Ip_StateType * state = Flexcan_Ip_apxState[u8Instance];
    b812:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b816:	4a25      	ldr	r2, [pc, #148]	; (b8ac <FlexCAN_Ip_AbortTransfer+0xb8>)
    b818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b81c:	9303      	str	r3, [sp, #12]
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) && (FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE == STD_ON) */
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b81e:	2300      	movs	r3, #0
    b820:	9305      	str	r3, [sp, #20]

    if (mb_idx < (uint8)FLEXCAN_IP_FEATURE_MAX_MB_NUM)
    b822:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b826:	2b1f      	cmp	r3, #31
    b828:	d838      	bhi.n	b89c <FlexCAN_Ip_AbortTransfer+0xa8>
    {

    if (FLEXCAN_MB_IDLE == state->mbs[mb_idx].state)
    b82a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b82e:	9a03      	ldr	r2, [sp, #12]
    b830:	011b      	lsls	r3, r3, #4
    b832:	4413      	add	r3, r2
    b834:	3304      	adds	r3, #4
    b836:	681b      	ldr	r3, [r3, #0]
    b838:	2b00      	cmp	r3, #0
    b83a:	d102      	bne.n	b842 <FlexCAN_Ip_AbortTransfer+0x4e>
    {
        result = FLEXCAN_STATUS_NO_TRANSFER_IN_PROGRESS;
    b83c:	2305      	movs	r3, #5
    b83e:	9305      	str	r3, [sp, #20]
    b840:	e02c      	b.n	b89c <FlexCAN_Ip_AbortTransfer+0xa8>
    }
    else
    {
        FLEXCAN_ClearMsgBuffIntCmd(pBase, u8Instance, mb_idx, state->isIntActive);
    b842:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b846:	9b03      	ldr	r3, [sp, #12]
    b848:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
    b84c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    b850:	9804      	ldr	r0, [sp, #16]
    b852:	f000 feb3 	bl	c5bc <FLEXCAN_ClearMsgBuffIntCmd>
        if (FLEXCAN_MB_TX_BUSY == state->mbs[mb_idx].state)
    b856:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b85a:	9a03      	ldr	r2, [sp, #12]
    b85c:	011b      	lsls	r3, r3, #4
    b85e:	4413      	add	r3, r2
    b860:	3304      	adds	r3, #4
    b862:	681b      	ldr	r3, [r3, #0]
    b864:	2b02      	cmp	r3, #2
    b866:	d108      	bne.n	b87a <FlexCAN_Ip_AbortTransfer+0x86>
        {
            result = FlexCAN_AbortTxTransfer(u8Instance, mb_idx);
    b868:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b86c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b870:	4611      	mov	r1, r2
    b872:	4618      	mov	r0, r3
    b874:	f7fe fabc 	bl	9df0 <FlexCAN_AbortTxTransfer>
    b878:	9005      	str	r0, [sp, #20]
        }

        if (FLEXCAN_MB_RX_BUSY == state->mbs[mb_idx].state)
    b87a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b87e:	9a03      	ldr	r2, [sp, #12]
    b880:	011b      	lsls	r3, r3, #4
    b882:	4413      	add	r3, r2
    b884:	3304      	adds	r3, #4
    b886:	681b      	ldr	r3, [r3, #0]
    b888:	2b01      	cmp	r3, #1
    b88a:	d107      	bne.n	b89c <FlexCAN_Ip_AbortTransfer+0xa8>
        {
            FlexCAN_AbortRxTransfer(u8Instance, mb_idx);
    b88c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    b890:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b894:	4611      	mov	r1, r2
    b896:	4618      	mov	r0, r3
    b898:	f7fe fb34 	bl	9f04 <FlexCAN_AbortRxTransfer>
        }
    }
#endif /* if FLEXCAN_IP_FEATURE_HAS_DMA_ENABLE */
#endif /* if FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO */

    return result;
    b89c:	9b05      	ldr	r3, [sp, #20]
}
    b89e:	4618      	mov	r0, r3
    b8a0:	b007      	add	sp, #28
    b8a2:	f85d fb04 	ldr.w	pc, [sp], #4
    b8a6:	bf00      	nop
    b8a8:	000101c4 	.word	0x000101c4
    b8ac:	1fff8fb8 	.word	0x1fff8fb8

0000b8b0 <FlexCAN_Ip_SetRxMb14Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb14Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb14Mask_Privileged(uint8 instance, uint32 mask)
{
    b8b0:	b500      	push	{lr}
    b8b2:	b087      	sub	sp, #28
    b8b4:	4603      	mov	r3, r0
    b8b6:	9100      	str	r1, [sp, #0]
    b8b8:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b8bc:	2300      	movs	r3, #0
    b8be:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b8c0:	2300      	movs	r3, #0
    b8c2:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b8c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b8c8:	4a1b      	ldr	r2, [pc, #108]	; (b938 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x88>)
    b8ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8ce:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b8d0:	9803      	ldr	r0, [sp, #12]
    b8d2:	f7fd fb5b 	bl	8f8c <FlexCAN_IsEnabled>
    b8d6:	4603      	mov	r3, r0
    b8d8:	2b00      	cmp	r3, #0
    b8da:	bf14      	ite	ne
    b8dc:	2301      	movne	r3, #1
    b8de:	2300      	moveq	r3, #0
    b8e0:	b2db      	uxtb	r3, r3
    b8e2:	f083 0301 	eor.w	r3, r3, #1
    b8e6:	b2db      	uxtb	r3, r3
    b8e8:	f88d 300b 	strb.w	r3, [sp, #11]
    b8ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b8f0:	f003 0301 	and.w	r3, r3, #1
    b8f4:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b8f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b8fc:	2b00      	cmp	r3, #0
    b8fe:	d003      	beq.n	b908 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    b900:	9803      	ldr	r0, [sp, #12]
    b902:	f000 fb65 	bl	bfd0 <FlexCAN_Enable>
    b906:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    b908:	9b05      	ldr	r3, [sp, #20]
    b90a:	2b00      	cmp	r3, #0
    b90c:	d102      	bne.n	b914 <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x64>
    {
        pBase->RX14MASK = mask;
    b90e:	9b03      	ldr	r3, [sp, #12]
    b910:	9a00      	ldr	r2, [sp, #0]
    b912:	615a      	str	r2, [r3, #20]
    }
    if (TRUE == disabled)
    b914:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b918:	2b00      	cmp	r3, #0
    b91a:	d008      	beq.n	b92e <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    b91c:	9803      	ldr	r0, [sp, #12]
    b91e:	f000 fbd5 	bl	c0cc <FlexCAN_Disable>
    b922:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b924:	9b04      	ldr	r3, [sp, #16]
    b926:	2b00      	cmp	r3, #0
    b928:	d001      	beq.n	b92e <FlexCAN_Ip_SetRxMb14Mask_Privileged+0x7e>
        {
            result = status;
    b92a:	9b04      	ldr	r3, [sp, #16]
    b92c:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b92e:	9b05      	ldr	r3, [sp, #20]
}
    b930:	4618      	mov	r0, r3
    b932:	b007      	add	sp, #28
    b934:	f85d fb04 	ldr.w	pc, [sp], #4
    b938:	000101c4 	.word	0x000101c4

0000b93c <FlexCAN_Ip_SetRxMb15Mask_Privileged>:

/* implements    FlexCAN_Ip_SetRxMb15Mask_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetRxMb15Mask_Privileged(uint8 instance, uint32 mask)
{
    b93c:	b500      	push	{lr}
    b93e:	b087      	sub	sp, #28
    b940:	4603      	mov	r3, r0
    b942:	9100      	str	r1, [sp, #0]
    b944:	f88d 3007 	strb.w	r3, [sp, #7]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b948:	2300      	movs	r3, #0
    b94a:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b94c:	2300      	movs	r3, #0
    b94e:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b950:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b954:	4a1b      	ldr	r2, [pc, #108]	; (b9c4 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x88>)
    b956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b95a:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    boolean freeze = FALSE;
#endif
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b95c:	9803      	ldr	r0, [sp, #12]
    b95e:	f7fd fb15 	bl	8f8c <FlexCAN_IsEnabled>
    b962:	4603      	mov	r3, r0
    b964:	2b00      	cmp	r3, #0
    b966:	bf14      	ite	ne
    b968:	2301      	movne	r3, #1
    b96a:	2300      	moveq	r3, #0
    b96c:	b2db      	uxtb	r3, r3
    b96e:	f083 0301 	eor.w	r3, r3, #1
    b972:	b2db      	uxtb	r3, r3
    b974:	f88d 300b 	strb.w	r3, [sp, #11]
    b978:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b97c:	f003 0301 	and.w	r3, r3, #1
    b980:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    b984:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b988:	2b00      	cmp	r3, #0
    b98a:	d003      	beq.n	b994 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x58>
    {
        result = FlexCAN_Enable(pBase);
    b98c:	9803      	ldr	r0, [sp, #12]
    b98e:	f000 fb1f 	bl	bfd0 <FlexCAN_Enable>
    b992:	9005      	str	r0, [sp, #20]
    if ((FALSE == freeze) && (FLEXCAN_STATUS_SUCCESS == result))
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif
    if (FLEXCAN_STATUS_SUCCESS == result)
    b994:	9b05      	ldr	r3, [sp, #20]
    b996:	2b00      	cmp	r3, #0
    b998:	d102      	bne.n	b9a0 <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x64>
    {
        pBase->RX15MASK = mask;
    b99a:	9b03      	ldr	r3, [sp, #12]
    b99c:	9a00      	ldr	r2, [sp, #0]
    b99e:	619a      	str	r2, [r3, #24]
    }

    if (TRUE == disabled)
    b9a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
    b9a4:	2b00      	cmp	r3, #0
    b9a6:	d008      	beq.n	b9ba <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
    {
        status = FlexCAN_Disable(pBase);
    b9a8:	9803      	ldr	r0, [sp, #12]
    b9aa:	f000 fb8f 	bl	c0cc <FlexCAN_Disable>
    b9ae:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    b9b0:	9b04      	ldr	r3, [sp, #16]
    b9b2:	2b00      	cmp	r3, #0
    b9b4:	d001      	beq.n	b9ba <FlexCAN_Ip_SetRxMb15Mask_Privileged+0x7e>
        {
            result = status;
    b9b6:	9b04      	ldr	r3, [sp, #16]
    b9b8:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    b9ba:	9b05      	ldr	r3, [sp, #20]
}
    b9bc:	4618      	mov	r0, r3
    b9be:	b007      	add	sp, #28
    b9c0:	f85d fb04 	ldr.w	pc, [sp], #4
    b9c4:	000101c4 	.word	0x000101c4

0000b9c8 <FlexCAN_Ip_SetListenOnlyMode_Privileged>:
 * This function will enable or disable Listen Only mode.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_SetListenOnlyMode_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_SetListenOnlyMode_Privileged(uint8 instance, const boolean enable)
{
    b9c8:	b500      	push	{lr}
    b9ca:	b087      	sub	sp, #28
    b9cc:	4603      	mov	r3, r0
    b9ce:	460a      	mov	r2, r1
    b9d0:	f88d 3007 	strb.w	r3, [sp, #7]
    b9d4:	4613      	mov	r3, r2
    b9d6:	f88d 3006 	strb.w	r3, [sp, #6]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(instance < FLEXCAN_INSTANCE_COUNT);
#endif
    Flexcan_Ip_StatusType result = FLEXCAN_STATUS_SUCCESS;
    b9da:	2300      	movs	r3, #0
    b9dc:	9305      	str	r3, [sp, #20]
    Flexcan_Ip_StatusType status = FLEXCAN_STATUS_SUCCESS;
    b9de:	2300      	movs	r3, #0
    b9e0:	9304      	str	r3, [sp, #16]
    FLEXCAN_Type * pBase = Flexcan_Ip_apxBase[instance];
    b9e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b9e6:	4a1f      	ldr	r2, [pc, #124]	; (ba64 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x9c>)
    b9e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9ec:	9303      	str	r3, [sp, #12]
    boolean disabled = !FlexCAN_IsEnabled(pBase);
    b9ee:	9803      	ldr	r0, [sp, #12]
    b9f0:	f7fd facc 	bl	8f8c <FlexCAN_IsEnabled>
    b9f4:	4603      	mov	r3, r0
    b9f6:	2b00      	cmp	r3, #0
    b9f8:	bf14      	ite	ne
    b9fa:	2301      	movne	r3, #1
    b9fc:	2300      	moveq	r3, #0
    b9fe:	b2db      	uxtb	r3, r3
    ba00:	f083 0301 	eor.w	r3, r3, #1
    ba04:	b2db      	uxtb	r3, r3
    ba06:	f88d 300b 	strb.w	r3, [sp, #11]
    ba0a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ba0e:	f003 0301 	and.w	r3, r3, #1
    ba12:	f88d 300b 	strb.w	r3, [sp, #11]

    if (TRUE == disabled)
    ba16:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ba1a:	2b00      	cmp	r3, #0
    ba1c:	d003      	beq.n	ba26 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x5e>
    {
        result = FlexCAN_Enable(pBase);
    ba1e:	9803      	ldr	r0, [sp, #12]
    ba20:	f000 fad6 	bl	bfd0 <FlexCAN_Enable>
    ba24:	9005      	str	r0, [sp, #20]
    {
        result = FLEXCAN_STATUS_ERROR;
    }
#endif

    if (FLEXCAN_STATUS_SUCCESS == result)
    ba26:	9b05      	ldr	r3, [sp, #20]
    ba28:	2b00      	cmp	r3, #0
    ba2a:	d109      	bne.n	ba40 <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x78>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    ba2c:	f001 fff6 	bl	da1c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
        FlexCAN_SetListenOnlyMode(pBase, enable);
    ba30:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ba34:	4619      	mov	r1, r3
    ba36:	9803      	ldr	r0, [sp, #12]
    ba38:	f7fd fae5 	bl	9006 <FlexCAN_SetListenOnlyMode>
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10();
    ba3c:	f002 f81a 	bl	da74 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>
    }

    if (TRUE == disabled)
    ba40:	f89d 300b 	ldrb.w	r3, [sp, #11]
    ba44:	2b00      	cmp	r3, #0
    ba46:	d008      	beq.n	ba5a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
    {
        status = FlexCAN_Disable(pBase);
    ba48:	9803      	ldr	r0, [sp, #12]
    ba4a:	f000 fb3f 	bl	c0cc <FlexCAN_Disable>
    ba4e:	9004      	str	r0, [sp, #16]
        if (FLEXCAN_STATUS_SUCCESS != status)
    ba50:	9b04      	ldr	r3, [sp, #16]
    ba52:	2b00      	cmp	r3, #0
    ba54:	d001      	beq.n	ba5a <FlexCAN_Ip_SetListenOnlyMode_Privileged+0x92>
        {
            result = status;
    ba56:	9b04      	ldr	r3, [sp, #16]
    ba58:	9305      	str	r3, [sp, #20]
        }
    }

    return result;
    ba5a:	9b05      	ldr	r3, [sp, #20]
}
    ba5c:	4618      	mov	r0, r3
    ba5e:	b007      	add	sp, #28
    ba60:	f85d fb04 	ldr.w	pc, [sp], #4
    ba64:	000101c4 	.word	0x000101c4

0000ba68 <FlexCAN_Ip_GetListenOnlyMode>:
 * Description   : Check if Listen Only mode is ENABLE.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_GetListenOnlyMode_Activity */
boolean FlexCAN_Ip_GetListenOnlyMode(uint8 instance)
{
    ba68:	b500      	push	{lr}
    ba6a:	b085      	sub	sp, #20
    ba6c:	4603      	mov	r3, r0
    ba6e:	f88d 3007 	strb.w	r3, [sp, #7]
    const FLEXCAN_Type * base = Flexcan_Ip_apxBase[instance];
    ba72:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ba76:	4a06      	ldr	r2, [pc, #24]	; (ba90 <FlexCAN_Ip_GetListenOnlyMode+0x28>)
    ba78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba7c:	9303      	str	r3, [sp, #12]
    return FlexCAN_IsListenOnlyModeEnabled(base);
    ba7e:	9803      	ldr	r0, [sp, #12]
    ba80:	f7fd fc5d 	bl	933e <FlexCAN_IsListenOnlyModeEnabled>
    ba84:	4603      	mov	r3, r0
}
    ba86:	4618      	mov	r0, r3
    ba88:	b005      	add	sp, #20
    ba8a:	f85d fb04 	ldr.w	pc, [sp], #4
    ba8e:	bf00      	nop
    ba90:	000101c4 	.word	0x000101c4

0000ba94 <FlexCAN_Ip_ManualBusOffRecovery>:
 * Description   : Recover manually from bus-off if possible.
 *
 *END**************************************************************************/
/* implements  FlexCAN_Ip_ManualBusOffRecovery_Activity */
Flexcan_Ip_StatusType FlexCAN_Ip_ManualBusOffRecovery(uint8 Instance)
{
    ba94:	b500      	push	{lr}
    ba96:	b089      	sub	sp, #36	; 0x24
    ba98:	4603      	mov	r3, r0
    ba9a:	f88d 3007 	strb.w	r3, [sp, #7]
    FLEXCAN_Type * Base = Flexcan_Ip_apxBase[Instance];
    ba9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    baa2:	4a27      	ldr	r2, [pc, #156]	; (bb40 <FlexCAN_Ip_ManualBusOffRecovery+0xac>)
    baa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    baa8:	9305      	str	r3, [sp, #20]
    uint32 timeStart = 0U;
    baaa:	2300      	movs	r3, #0
    baac:	9303      	str	r3, [sp, #12]
    uint32 timeElapsed = 0U;
    baae:	2300      	movs	r3, #0
    bab0:	9307      	str	r3, [sp, #28]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bab2:	2100      	movs	r1, #0
    bab4:	4823      	ldr	r0, [pc, #140]	; (bb44 <FlexCAN_Ip_ManualBusOffRecovery+0xb0>)
    bab6:	f7f6 fbdd 	bl	2274 <OsIf_MicrosToTicks>
    baba:	9004      	str	r0, [sp, #16]
    Flexcan_Ip_StatusType RetVal = FLEXCAN_STATUS_ERROR;
    babc:	2301      	movs	r3, #1
    babe:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(Instance < FLEXCAN_INSTANCE_COUNT);
#endif

    /* Recover from bus-off when Automatic recovering from Bus Off state disabled. */
    if ((Base->CTRL1 & FLEXCAN_CTRL1_BOFFREC_MASK) != 0U)
    bac0:	9b05      	ldr	r3, [sp, #20]
    bac2:	685b      	ldr	r3, [r3, #4]
    bac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    bac8:	2b00      	cmp	r3, #0
    baca:	d033      	beq.n	bb34 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
    {
        RetVal = FLEXCAN_STATUS_SUCCESS;
    bacc:	2300      	movs	r3, #0
    bace:	9306      	str	r3, [sp, #24]
        /* return success if the controller is not in bus-off */
        if ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    bad0:	9b05      	ldr	r3, [sp, #20]
    bad2:	6a1b      	ldr	r3, [r3, #32]
    bad4:	f003 0320 	and.w	r3, r3, #32
    bad8:	2b00      	cmp	r3, #0
    bada:	d02b      	beq.n	bb34 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
        {
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    badc:	f002 fad2 	bl	e084 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* negate to recover from bus-off */
            Base->CTRL1 &= ~FLEXCAN_CTRL1_BOFFREC_MASK;
    bae0:	9b05      	ldr	r3, [sp, #20]
    bae2:	685b      	ldr	r3, [r3, #4]
    bae4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
    bae8:	9b05      	ldr	r3, [sp, #20]
    baea:	605a      	str	r2, [r3, #4]
            /* re-assert to disable bus-off auto reocvery */
            Base->CTRL1 |= FLEXCAN_CTRL1_BOFFREC_MASK;
    baec:	9b05      	ldr	r3, [sp, #20]
    baee:	685b      	ldr	r3, [r3, #4]
    baf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
    baf4:	9b05      	ldr	r3, [sp, #20]
    baf6:	605a      	str	r2, [r3, #4]
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20();
    baf8:	f002 faf0 	bl	e0dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>
            /* Wait till exit bus-off */
            timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bafc:	2000      	movs	r0, #0
    bafe:	f7f6 fb6d 	bl	21dc <OsIf_GetCounter>
    bb02:	4603      	mov	r3, r0
    bb04:	9303      	str	r3, [sp, #12]

            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    bb06:	e00f      	b.n	bb28 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
            {
                timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bb08:	ab03      	add	r3, sp, #12
    bb0a:	2100      	movs	r1, #0
    bb0c:	4618      	mov	r0, r3
    bb0e:	f7f6 fb7e 	bl	220e <OsIf_GetElapsed>
    bb12:	4602      	mov	r2, r0
    bb14:	9b07      	ldr	r3, [sp, #28]
    bb16:	4413      	add	r3, r2
    bb18:	9307      	str	r3, [sp, #28]
                if (timeElapsed >= uS2Ticks)
    bb1a:	9a07      	ldr	r2, [sp, #28]
    bb1c:	9b04      	ldr	r3, [sp, #16]
    bb1e:	429a      	cmp	r2, r3
    bb20:	d302      	bcc.n	bb28 <FlexCAN_Ip_ManualBusOffRecovery+0x94>
                {
                    RetVal = FLEXCAN_STATUS_TIMEOUT;
    bb22:	2303      	movs	r3, #3
    bb24:	9306      	str	r3, [sp, #24]
                    break;
    bb26:	e005      	b.n	bb34 <FlexCAN_Ip_ManualBusOffRecovery+0xa0>
            while ((Base->ESR1 & FLEXCAN_IP_ESR1_FLTCONF_BUS_OFF) != 0U)
    bb28:	9b05      	ldr	r3, [sp, #20]
    bb2a:	6a1b      	ldr	r3, [r3, #32]
    bb2c:	f003 0320 	and.w	r3, r3, #32
    bb30:	2b00      	cmp	r3, #0
    bb32:	d1e9      	bne.n	bb08 <FlexCAN_Ip_ManualBusOffRecovery+0x74>
                }
            }
        }
    }

    return RetVal;
    bb34:	9b06      	ldr	r3, [sp, #24]
}
    bb36:	4618      	mov	r0, r3
    bb38:	b009      	add	sp, #36	; 0x24
    bb3a:	f85d fb04 	ldr.w	pc, [sp], #4
    bb3e:	bf00      	nop
    bb40:	000101c4 	.word	0x000101c4
    bb44:	000f4240 	.word	0x000f4240

0000bb48 <FlexCAN_SetSelfReception>:
{
    bb48:	b082      	sub	sp, #8
    bb4a:	9001      	str	r0, [sp, #4]
    bb4c:	460b      	mov	r3, r1
    bb4e:	f88d 3003 	strb.w	r3, [sp, #3]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SRXDIS_MASK) | FLEXCAN_MCR_SRXDIS(enable ? 0UL : 1UL);
    bb52:	9b01      	ldr	r3, [sp, #4]
    bb54:	681b      	ldr	r3, [r3, #0]
    bb56:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    bb5a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bb5e:	2a00      	cmp	r2, #0
    bb60:	d001      	beq.n	bb66 <FlexCAN_SetSelfReception+0x1e>
    bb62:	2200      	movs	r2, #0
    bb64:	e001      	b.n	bb6a <FlexCAN_SetSelfReception+0x22>
    bb66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    bb6a:	431a      	orrs	r2, r3
    bb6c:	9b01      	ldr	r3, [sp, #4]
    bb6e:	601a      	str	r2, [r3, #0]
}
    bb70:	bf00      	nop
    bb72:	b002      	add	sp, #8
    bb74:	4770      	bx	lr

0000bb76 <FlexCAN_IsFDEnabled>:
{
    bb76:	b082      	sub	sp, #8
    bb78:	9001      	str	r0, [sp, #4]
    return ((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U;
    bb7a:	9b01      	ldr	r3, [sp, #4]
    bb7c:	681b      	ldr	r3, [r3, #0]
    bb7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    bb82:	2b00      	cmp	r3, #0
    bb84:	bf14      	ite	ne
    bb86:	2301      	movne	r3, #1
    bb88:	2300      	moveq	r3, #0
    bb8a:	b2db      	uxtb	r3, r3
}
    bb8c:	4618      	mov	r0, r3
    bb8e:	b002      	add	sp, #8
    bb90:	4770      	bx	lr

0000bb92 <FlexCAN_SetIsoCan>:
{
    bb92:	b082      	sub	sp, #8
    bb94:	9001      	str	r0, [sp, #4]
    bb96:	460b      	mov	r3, r1
    bb98:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ISOCANFDEN_MASK) | FLEXCAN_CTRL2_ISOCANFDEN(enable ? 1UL : 0UL);
    bb9c:	9b01      	ldr	r3, [sp, #4]
    bb9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    bba4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bba8:	2a00      	cmp	r2, #0
    bbaa:	d002      	beq.n	bbb2 <FlexCAN_SetIsoCan+0x20>
    bbac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    bbb0:	e000      	b.n	bbb4 <FlexCAN_SetIsoCan+0x22>
    bbb2:	2200      	movs	r2, #0
    bbb4:	431a      	orrs	r2, r3
    bbb6:	9b01      	ldr	r3, [sp, #4]
    bbb8:	635a      	str	r2, [r3, #52]	; 0x34
}
    bbba:	bf00      	nop
    bbbc:	b002      	add	sp, #8
    bbbe:	4770      	bx	lr

0000bbc0 <FlexCAN_SetEntireFrameArbitrationFieldComparison>:
{
    bbc0:	b082      	sub	sp, #8
    bbc2:	9001      	str	r0, [sp, #4]
    bbc4:	460b      	mov	r3, r1
    bbc6:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EACEN_MASK) | FLEXCAN_CTRL2_EACEN(enable ? 1UL : 0UL);
    bbca:	9b01      	ldr	r3, [sp, #4]
    bbcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bbce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    bbd2:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bbd6:	2a00      	cmp	r2, #0
    bbd8:	d002      	beq.n	bbe0 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x20>
    bbda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    bbde:	e000      	b.n	bbe2 <FlexCAN_SetEntireFrameArbitrationFieldComparison+0x22>
    bbe0:	2200      	movs	r2, #0
    bbe2:	431a      	orrs	r2, r3
    bbe4:	9b01      	ldr	r3, [sp, #4]
    bbe6:	635a      	str	r2, [r3, #52]	; 0x34
}
    bbe8:	bf00      	nop
    bbea:	b002      	add	sp, #8
    bbec:	4770      	bx	lr

0000bbee <FlexCAN_SetProtocolException>:
{
    bbee:	b082      	sub	sp, #8
    bbf0:	9001      	str	r0, [sp, #4]
    bbf2:	460b      	mov	r3, r1
    bbf4:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_PREXCEN_MASK) | FLEXCAN_CTRL2_PREXCEN(enable ? 1UL : 0UL);
    bbf8:	9b01      	ldr	r3, [sp, #4]
    bbfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bbfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    bc00:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bc04:	2a00      	cmp	r2, #0
    bc06:	d002      	beq.n	bc0e <FlexCAN_SetProtocolException+0x20>
    bc08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    bc0c:	e000      	b.n	bc10 <FlexCAN_SetProtocolException+0x22>
    bc0e:	2200      	movs	r2, #0
    bc10:	431a      	orrs	r2, r3
    bc12:	9b01      	ldr	r3, [sp, #4]
    bc14:	635a      	str	r2, [r3, #52]	; 0x34
}
    bc16:	bf00      	nop
    bc18:	b002      	add	sp, #8
    bc1a:	4770      	bx	lr

0000bc1c <FlexCAN_SetRemoteReqStore>:
{
    bc1c:	b082      	sub	sp, #8
    bc1e:	9001      	str	r0, [sp, #4]
    bc20:	460b      	mov	r3, r1
    bc22:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RRS_MASK) | FLEXCAN_CTRL2_RRS(enable ? 1UL : 0UL);
    bc26:	9b01      	ldr	r3, [sp, #4]
    bc28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bc2a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
    bc2e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bc32:	2a00      	cmp	r2, #0
    bc34:	d002      	beq.n	bc3c <FlexCAN_SetRemoteReqStore+0x20>
    bc36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    bc3a:	e000      	b.n	bc3e <FlexCAN_SetRemoteReqStore+0x22>
    bc3c:	2200      	movs	r2, #0
    bc3e:	431a      	orrs	r2, r3
    bc40:	9b01      	ldr	r3, [sp, #4]
    bc42:	635a      	str	r2, [r3, #52]	; 0x34
}
    bc44:	bf00      	nop
    bc46:	b002      	add	sp, #8
    bc48:	4770      	bx	lr

0000bc4a <FlexCAN_SetBusOffAutorecovery>:
{
    bc4a:	b082      	sub	sp, #8
    bc4c:	9001      	str	r0, [sp, #4]
    bc4e:	460b      	mov	r3, r1
    bc50:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_BOFFREC_MASK) | FLEXCAN_CTRL1_BOFFREC(enable ? 0UL : 1UL);
    bc54:	9b01      	ldr	r3, [sp, #4]
    bc56:	685b      	ldr	r3, [r3, #4]
    bc58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    bc5c:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bc60:	2a00      	cmp	r2, #0
    bc62:	d001      	beq.n	bc68 <FlexCAN_SetBusOffAutorecovery+0x1e>
    bc64:	2200      	movs	r2, #0
    bc66:	e000      	b.n	bc6a <FlexCAN_SetBusOffAutorecovery+0x20>
    bc68:	2240      	movs	r2, #64	; 0x40
    bc6a:	431a      	orrs	r2, r3
    bc6c:	9b01      	ldr	r3, [sp, #4]
    bc6e:	605a      	str	r2, [r3, #4]
}
    bc70:	bf00      	nop
    bc72:	b002      	add	sp, #8
    bc74:	4770      	bx	lr

0000bc76 <FlexCAN_SetEdgeFilter>:
{
    bc76:	b082      	sub	sp, #8
    bc78:	9001      	str	r0, [sp, #4]
    bc7a:	460b      	mov	r3, r1
    bc7c:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_EDFLTDIS_MASK) | FLEXCAN_CTRL2_EDFLTDIS(enable ? 0UL : 1UL);
    bc80:	9b01      	ldr	r3, [sp, #4]
    bc82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bc84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    bc88:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bc8c:	2a00      	cmp	r2, #0
    bc8e:	d001      	beq.n	bc94 <FlexCAN_SetEdgeFilter+0x1e>
    bc90:	2200      	movs	r2, #0
    bc92:	e001      	b.n	bc98 <FlexCAN_SetEdgeFilter+0x22>
    bc94:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bc98:	431a      	orrs	r2, r3
    bc9a:	9b01      	ldr	r3, [sp, #4]
    bc9c:	635a      	str	r2, [r3, #52]	; 0x34
}
    bc9e:	bf00      	nop
    bca0:	b002      	add	sp, #8
    bca2:	4770      	bx	lr

0000bca4 <FlexCAN_CanBitSampling>:
{
    bca4:	b082      	sub	sp, #8
    bca6:	9001      	str	r0, [sp, #4]
    bca8:	460b      	mov	r3, r1
    bcaa:	f88d 3003 	strb.w	r3, [sp, #3]
    base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_SMP_MASK) | FLEXCAN_CTRL1_SMP(enable ? 1UL : 0UL);
    bcae:	9b01      	ldr	r3, [sp, #4]
    bcb0:	685b      	ldr	r3, [r3, #4]
    bcb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    bcb6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    bcba:	2a00      	cmp	r2, #0
    bcbc:	d001      	beq.n	bcc2 <FlexCAN_CanBitSampling+0x1e>
    bcbe:	2280      	movs	r2, #128	; 0x80
    bcc0:	e000      	b.n	bcc4 <FlexCAN_CanBitSampling+0x20>
    bcc2:	2200      	movs	r2, #0
    bcc4:	431a      	orrs	r2, r3
    bcc6:	9b01      	ldr	r3, [sp, #4]
    bcc8:	605a      	str	r2, [r3, #4]
}
    bcca:	bf00      	nop
    bccc:	b002      	add	sp, #8
    bcce:	4770      	bx	lr

0000bcd0 <FlexCAN_ComputeDLCValue>:
 * Function Name: FLEXCAN_ComputeDLCValue
 * Description  : Computes the DLC field value, given a payload size (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_ComputeDLCValue(uint8 payloadSize)
{
    bcd0:	b084      	sub	sp, #16
    bcd2:	4603      	mov	r3, r0
    bcd4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 ret = 0xFFU;                   /* 0,  1,  2,  3,  4,  5,  6,  7,  8, */
    bcd8:	23ff      	movs	r3, #255	; 0xff
    bcda:	9303      	str	r3, [sp, #12]
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES,
                                           FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES, FLEXCAN_IP_DLC_VALUE_64_BYTES
                                          };

    if (payloadSize <= 64U)
    bcdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bce0:	2b40      	cmp	r3, #64	; 0x40
    bce2:	d804      	bhi.n	bcee <FlexCAN_ComputeDLCValue+0x1e>
    {
        ret = payload_code[payloadSize];
    bce4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bce8:	4a03      	ldr	r2, [pc, #12]	; (bcf8 <FlexCAN_ComputeDLCValue+0x28>)
    bcea:	5cd3      	ldrb	r3, [r2, r3]
    bcec:	9303      	str	r3, [sp, #12]
    else
    {
        /* The argument is not a valid payload size will return 0xFF*/
    }

    return (uint8)ret;
    bcee:	9b03      	ldr	r3, [sp, #12]
    bcf0:	b2db      	uxtb	r3, r3
}
    bcf2:	4618      	mov	r0, r3
    bcf4:	b004      	add	sp, #16
    bcf6:	4770      	bx	lr
    bcf8:	000101d0 	.word	0x000101d0

0000bcfc <FlexCAN_ClearRAM>:
 * Function Name : FLEXCAN_ClearRAM
 * Description   : Clears FlexCAN memory positions that require initialization.
 *
 *END**************************************************************************/
static void FlexCAN_ClearRAM(FLEXCAN_Type * base)
{
    bcfc:	b500      	push	{lr}
    bcfe:	b087      	sub	sp, #28
    bd00:	9001      	str	r0, [sp, #4]
    uint32 databyte;
    uint32 RAM_size   = FlexCAN_GetMaxMbNum(base) * 4U;
    bd02:	9801      	ldr	r0, [sp, #4]
    bd04:	f000 f8f6 	bl	bef4 <FlexCAN_GetMaxMbNum>
    bd08:	4603      	mov	r3, r0
    bd0a:	009b      	lsls	r3, r3, #2
    bd0c:	9304      	str	r3, [sp, #16]
    uint32 RXIMR_size = FlexCAN_GetMaxMbNum(base);
    bd0e:	9801      	ldr	r0, [sp, #4]
    bd10:	f000 f8f0 	bl	bef4 <FlexCAN_GetMaxMbNum>
    bd14:	9003      	str	r0, [sp, #12]
    /* Address of base + ram offset to point to MB start address */
    volatile uint32 * RAM = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    bd16:	9b01      	ldr	r3, [sp, #4]
    bd18:	3380      	adds	r3, #128	; 0x80
    bd1a:	9302      	str	r3, [sp, #8]
    /* Clear MB region */
    for (databyte = 0U; databyte < RAM_size; databyte++)
    bd1c:	2300      	movs	r3, #0
    bd1e:	9305      	str	r3, [sp, #20]
    bd20:	e008      	b.n	bd34 <FlexCAN_ClearRAM+0x38>
    {
        RAM[databyte] = 0x0U;
    bd22:	9b05      	ldr	r3, [sp, #20]
    bd24:	009b      	lsls	r3, r3, #2
    bd26:	9a02      	ldr	r2, [sp, #8]
    bd28:	4413      	add	r3, r2
    bd2a:	2200      	movs	r2, #0
    bd2c:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RAM_size; databyte++)
    bd2e:	9b05      	ldr	r3, [sp, #20]
    bd30:	3301      	adds	r3, #1
    bd32:	9305      	str	r3, [sp, #20]
    bd34:	9a05      	ldr	r2, [sp, #20]
    bd36:	9b04      	ldr	r3, [sp, #16]
    bd38:	429a      	cmp	r2, r3
    bd3a:	d3f2      	bcc.n	bd22 <FlexCAN_ClearRAM+0x26>
    }
    RAM = (volatile uint32 *)base->RXIMR;
    bd3c:	9b01      	ldr	r3, [sp, #4]
    bd3e:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    bd42:	9302      	str	r3, [sp, #8]
    /* Clear RXIMR region */
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    bd44:	2300      	movs	r3, #0
    bd46:	9305      	str	r3, [sp, #20]
    bd48:	e008      	b.n	bd5c <FlexCAN_ClearRAM+0x60>
    {
        RAM[databyte] = 0x0U;
    bd4a:	9b05      	ldr	r3, [sp, #20]
    bd4c:	009b      	lsls	r3, r3, #2
    bd4e:	9a02      	ldr	r2, [sp, #8]
    bd50:	4413      	add	r3, r2
    bd52:	2200      	movs	r2, #0
    bd54:	601a      	str	r2, [r3, #0]
    for (databyte = 0U; databyte < RXIMR_size; databyte++)
    bd56:	9b05      	ldr	r3, [sp, #20]
    bd58:	3301      	adds	r3, #1
    bd5a:	9305      	str	r3, [sp, #20]
    bd5c:	9a05      	ldr	r2, [sp, #20]
    bd5e:	9b03      	ldr	r3, [sp, #12]
    bd60:	429a      	cmp	r2, r3
    bd62:	d3f2      	bcc.n	bd4a <FlexCAN_ClearRAM+0x4e>
    }
#endif
    /* Clear WRMFRZ bit in CTRL2 Register to restrict write access to memory */
    base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_WRMFRZ_MASK) | FLEXCAN_CTRL2_WRMFRZ(0U);
#endif /* if FLEXCAN_IP_FEATURE_HAS_MEM_ERR_DET */
}
    bd64:	bf00      	nop
    bd66:	bf00      	nop
    bd68:	b007      	add	sp, #28
    bd6a:	f85d fb04 	ldr.w	pc, [sp], #4

0000bd6e <FlexCAN_ComputePayloadSize>:
#if (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON)
uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#else
static uint8 FlexCAN_ComputePayloadSize(uint8 dlcValue)
#endif /* (FLEXCAN_IP_FEATURE_HAS_ENHANCED_RX_FIFO == STD_ON) */
{
    bd6e:	b084      	sub	sp, #16
    bd70:	4603      	mov	r3, r0
    bd72:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ret = 8U;
    bd76:	2308      	movs	r3, #8
    bd78:	f88d 300f 	strb.w	r3, [sp, #15]

    if (dlcValue <= 8U)
    bd7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bd80:	2b08      	cmp	r3, #8
    bd82:	d804      	bhi.n	bd8e <FlexCAN_ComputePayloadSize+0x20>
    {
        ret = dlcValue;
    bd84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bd88:	f88d 300f 	strb.w	r3, [sp, #15]
    bd8c:	e033      	b.n	bdf6 <FlexCAN_ComputePayloadSize+0x88>
    }
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    else
    {
        switch (dlcValue)
    bd8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    bd92:	3b09      	subs	r3, #9
    bd94:	2b06      	cmp	r3, #6
    bd96:	d82d      	bhi.n	bdf4 <FlexCAN_ComputePayloadSize+0x86>
    bd98:	a201      	add	r2, pc, #4	; (adr r2, bda0 <FlexCAN_ComputePayloadSize+0x32>)
    bd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bd9e:	bf00      	nop
    bda0:	0000bdbd 	.word	0x0000bdbd
    bda4:	0000bdc5 	.word	0x0000bdc5
    bda8:	0000bdcd 	.word	0x0000bdcd
    bdac:	0000bdd5 	.word	0x0000bdd5
    bdb0:	0000bddd 	.word	0x0000bddd
    bdb4:	0000bde5 	.word	0x0000bde5
    bdb8:	0000bded 	.word	0x0000bded
        {
            case FLEXCAN_IP_DLC_VALUE_12_BYTES:
                ret = 12U;
    bdbc:	230c      	movs	r3, #12
    bdbe:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bdc2:	e018      	b.n	bdf6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_16_BYTES:
                ret = 16U;
    bdc4:	2310      	movs	r3, #16
    bdc6:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bdca:	e014      	b.n	bdf6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_20_BYTES:
                ret = 20U;
    bdcc:	2314      	movs	r3, #20
    bdce:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bdd2:	e010      	b.n	bdf6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_24_BYTES:
                ret = 24U;
    bdd4:	2318      	movs	r3, #24
    bdd6:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bdda:	e00c      	b.n	bdf6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_32_BYTES:
                ret = 32U;
    bddc:	2320      	movs	r3, #32
    bdde:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bde2:	e008      	b.n	bdf6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_48_BYTES:
                ret = 48U;
    bde4:	2330      	movs	r3, #48	; 0x30
    bde6:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bdea:	e004      	b.n	bdf6 <FlexCAN_ComputePayloadSize+0x88>
            case FLEXCAN_IP_DLC_VALUE_64_BYTES:
                ret = 64U;
    bdec:	2340      	movs	r3, #64	; 0x40
    bdee:	f88d 300f 	strb.w	r3, [sp, #15]
                break;
    bdf2:	e000      	b.n	bdf6 <FlexCAN_ComputePayloadSize+0x88>
            default:
                /* The argument is not a valid DLC size */
                break;
    bdf4:	bf00      	nop
        }
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    return ret;
    bdf6:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
    bdfa:	4618      	mov	r0, r3
    bdfc:	b004      	add	sp, #16
    bdfe:	4770      	bx	lr

0000be00 <FlexCAN_GetMsgBuffRegion>:
 * Function Name : FLEXCAN_GetMsgBuffRegion
 * Description   : Returns the start of a MB area, based on its index.
 *
 *END**************************************************************************/
volatile uint32 * FlexCAN_GetMsgBuffRegion(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    be00:	b500      	push	{lr}
    be02:	b08b      	sub	sp, #44	; 0x2c
    be04:	9001      	str	r0, [sp, #4]
    be06:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    be08:	2308      	movs	r3, #8
    be0a:	f88d 3020 	strb.w	r3, [sp, #32]
    uint8 mb_size = 0U;
    be0e:	2300      	movs	r3, #0
    be10:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint32 ramBlockSize = 512U;
    be14:	f44f 7300 	mov.w	r3, #512	; 0x200
    be18:	9307      	str	r3, [sp, #28]
    uint16 ramBlockOffset = 0;
    be1a:	2300      	movs	r3, #0
    be1c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    uint8 msgBuffIdxBackup = (uint8)msgBuffIdx;
    be20:	9b00      	ldr	r3, [sp, #0]
    be22:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    uint8 i=0U;
    be26:	2300      	movs	r3, #0
    be28:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    uint8 maxMbNum=0U;
    be2c:	2300      	movs	r3, #0
    be2e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    uint32 mb_index=0U;
    be32:	2300      	movs	r3, #0
    be34:	9306      	str	r3, [sp, #24]
    uint8 payload_size=0U;
    be36:	2300      	movs	r3, #0
    be38:	f88d 3017 	strb.w	r3, [sp, #23]
    volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    be3c:	9b01      	ldr	r3, [sp, #4]
    be3e:	3380      	adds	r3, #128	; 0x80
    be40:	9304      	str	r3, [sp, #16]
    volatile uint32 * pAddressRet = NULL_PTR;
    be42:	2300      	movs	r3, #0
    be44:	9303      	str	r3, [sp, #12]
#if (FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY == STD_ON)
    volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    be46:	2300      	movs	r3, #0
    be48:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    be4c:	e02d      	b.n	beaa <FlexCAN_GetMsgBuffRegion+0xaa>
    {
        payload_size = FlexCAN_GetPayloadSize(base, i);
    be4e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    be52:	4619      	mov	r1, r3
    be54:	9801      	ldr	r0, [sp, #4]
    be56:	f000 fad1 	bl	c3fc <FlexCAN_GetPayloadSize>
    be5a:	4603      	mov	r3, r0
    be5c:	f88d 3017 	strb.w	r3, [sp, #23]
        mb_size = (uint8)(payload_size + arbitration_field_size);
    be60:	f89d 2017 	ldrb.w	r2, [sp, #23]
    be64:	f89d 3020 	ldrb.w	r3, [sp, #32]
    be68:	4413      	add	r3, r2
    be6a:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        maxMbNum = (uint8)(ramBlockSize / mb_size);
    be6e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    be72:	9a07      	ldr	r2, [sp, #28]
    be74:	fbb2 f3f3 	udiv	r3, r2, r3
    be78:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        if (maxMbNum > msgBuffIdxBackup)
    be7c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    be80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    be84:	429a      	cmp	r2, r3
    be86:	d815      	bhi.n	beb4 <FlexCAN_GetMsgBuffRegion+0xb4>
        {
            break;
        }
        ramBlockOffset += 128U;
    be88:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    be8c:	3380      	adds	r3, #128	; 0x80
    be8e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        msgBuffIdxBackup -= maxMbNum;
    be92:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    be96:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    be9a:	1ad3      	subs	r3, r2, r3
    be9c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    bea0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    bea4:	3301      	adds	r3, #1
    bea6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    beaa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    beae:	2b00      	cmp	r3, #0
    beb0:	d0cd      	beq.n	be4e <FlexCAN_GetMsgBuffRegion+0x4e>
    beb2:	e000      	b.n	beb6 <FlexCAN_GetMsgBuffRegion+0xb6>
            break;
    beb4:	bf00      	nop
    }
    else
#endif
    {
        /* Multiply the MB index by the MB size (in words) */
        mb_index = (uint32)ramBlockOffset + (((uint32)msgBuffIdxBackup % (uint32)maxMbNum) * ((uint32)mb_size >> 2U));
    beb6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
    beba:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    bebe:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    bec2:	fbb3 f0f2 	udiv	r0, r3, r2
    bec6:	fb00 f202 	mul.w	r2, r0, r2
    beca:	1a9b      	subs	r3, r3, r2
    becc:	b2db      	uxtb	r3, r3
    bece:	461a      	mov	r2, r3
    bed0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    bed4:	089b      	lsrs	r3, r3, #2
    bed6:	b2db      	uxtb	r3, r3
    bed8:	fb02 f303 	mul.w	r3, r2, r3
    bedc:	440b      	add	r3, r1
    bede:	9306      	str	r3, [sp, #24]
        pAddressRet = &(RAM[mb_index]);
    bee0:	9b06      	ldr	r3, [sp, #24]
    bee2:	009b      	lsls	r3, r3, #2
    bee4:	9a04      	ldr	r2, [sp, #16]
    bee6:	4413      	add	r3, r2
    bee8:	9303      	str	r3, [sp, #12]
    }

    return pAddressRet;
    beea:	9b03      	ldr	r3, [sp, #12]
}
    beec:	4618      	mov	r0, r3
    beee:	b00b      	add	sp, #44	; 0x2c
    bef0:	f85d fb04 	ldr.w	pc, [sp], #4

0000bef4 <FlexCAN_GetMaxMbNum>:
 * Function Name : FlexCAN_GetMaxMbNum
 * Description   : Computes the maximum RAM size occupied by MBs.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMaxMbNum(const FLEXCAN_Type * base)
{
    bef4:	b084      	sub	sp, #16
    bef6:	9001      	str	r0, [sp, #4]
    uint32 i, ret = 0u;
    bef8:	2300      	movs	r3, #0
    befa:	9302      	str	r3, [sp, #8]
    static FLEXCAN_Type * const flexcanBase[] = IP_FLEXCAN_BASE_PTRS;
    static const uint32 maxMbNum[] = FLEXCAN_IP_FEATURE_MAX_MB_NUM_ARRAY;

    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    befc:	2300      	movs	r3, #0
    befe:	9303      	str	r3, [sp, #12]
    bf00:	e00e      	b.n	bf20 <FlexCAN_GetMaxMbNum+0x2c>
    {
        if (base == flexcanBase[i])
    bf02:	4a0b      	ldr	r2, [pc, #44]	; (bf30 <FlexCAN_GetMaxMbNum+0x3c>)
    bf04:	9b03      	ldr	r3, [sp, #12]
    bf06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf0a:	9a01      	ldr	r2, [sp, #4]
    bf0c:	429a      	cmp	r2, r3
    bf0e:	d104      	bne.n	bf1a <FlexCAN_GetMaxMbNum+0x26>
        {
            ret = maxMbNum[i];
    bf10:	4a08      	ldr	r2, [pc, #32]	; (bf34 <FlexCAN_GetMaxMbNum+0x40>)
    bf12:	9b03      	ldr	r3, [sp, #12]
    bf14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    bf18:	9302      	str	r3, [sp, #8]
    for (i = 0u; i < FLEXCAN_INSTANCE_COUNT; i++)
    bf1a:	9b03      	ldr	r3, [sp, #12]
    bf1c:	3301      	adds	r3, #1
    bf1e:	9303      	str	r3, [sp, #12]
    bf20:	9b03      	ldr	r3, [sp, #12]
    bf22:	2b02      	cmp	r3, #2
    bf24:	d9ed      	bls.n	bf02 <FlexCAN_GetMaxMbNum+0xe>
        }
    }
    return ret;
    bf26:	9b02      	ldr	r3, [sp, #8]
}
    bf28:	4618      	mov	r0, r3
    bf2a:	b004      	add	sp, #16
    bf2c:	4770      	bx	lr
    bf2e:	bf00      	nop
    bf30:	00010214 	.word	0x00010214
    bf34:	00010220 	.word	0x00010220

0000bf38 <FlexCAN_EnterFreezeMode>:
 * Function Name : FLEXCAN_EnterFreezeMode
 * Description   : Enter the freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnterFreezeMode(FLEXCAN_Type * base)
{
    bf38:	b500      	push	{lr}
    bf3a:	b087      	sub	sp, #28
    bf3c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bf3e:	2300      	movs	r3, #0
    bf40:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bf42:	2300      	movs	r3, #0
    bf44:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bf46:	2100      	movs	r1, #0
    bf48:	4820      	ldr	r0, [pc, #128]	; (bfcc <FlexCAN_EnterFreezeMode+0x94>)
    bf4a:	f7f6 f993 	bl	2274 <OsIf_MicrosToTicks>
    bf4e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    bf50:	2300      	movs	r3, #0
    bf52:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    bf54:	f001 fad2 	bl	d4fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(1U);
    bf58:	9b01      	ldr	r3, [sp, #4]
    bf5a:	681b      	ldr	r3, [r3, #0]
    bf5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    bf60:	9b01      	ldr	r3, [sp, #4]
    bf62:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(1U);
    bf64:	9b01      	ldr	r3, [sp, #4]
    bf66:	681b      	ldr	r3, [r3, #0]
    bf68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
    bf6c:	9b01      	ldr	r3, [sp, #4]
    bf6e:	601a      	str	r2, [r3, #0]
    if (((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT) != 0U)
    bf70:	9b01      	ldr	r3, [sp, #4]
    bf72:	681b      	ldr	r3, [r3, #0]
    bf74:	2b00      	cmp	r3, #0
    bf76:	da05      	bge.n	bf84 <FlexCAN_EnterFreezeMode+0x4c>
    {
        base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    bf78:	9b01      	ldr	r3, [sp, #4]
    bf7a:	681b      	ldr	r3, [r3, #0]
    bf7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bf80:	9b01      	ldr	r3, [sp, #4]
    bf82:	601a      	str	r2, [r3, #0]
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02();
    bf84:	f001 fae6 	bl	d554 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bf88:	2000      	movs	r0, #0
    bf8a:	f7f6 f927 	bl	21dc <OsIf_GetCounter>
    bf8e:	4603      	mov	r3, r0
    bf90:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bf92:	e00f      	b.n	bfb4 <FlexCAN_EnterFreezeMode+0x7c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bf94:	ab02      	add	r3, sp, #8
    bf96:	2100      	movs	r1, #0
    bf98:	4618      	mov	r0, r3
    bf9a:	f7f6 f938 	bl	220e <OsIf_GetElapsed>
    bf9e:	4602      	mov	r2, r0
    bfa0:	9b05      	ldr	r3, [sp, #20]
    bfa2:	4413      	add	r3, r2
    bfa4:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    bfa6:	9a05      	ldr	r2, [sp, #20]
    bfa8:	9b03      	ldr	r3, [sp, #12]
    bfaa:	429a      	cmp	r2, r3
    bfac:	d302      	bcc.n	bfb4 <FlexCAN_EnterFreezeMode+0x7c>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    bfae:	2303      	movs	r3, #3
    bfb0:	9304      	str	r3, [sp, #16]
            break;
    bfb2:	e005      	b.n	bfc0 <FlexCAN_EnterFreezeMode+0x88>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    bfb4:	9b01      	ldr	r3, [sp, #4]
    bfb6:	681b      	ldr	r3, [r3, #0]
    bfb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    bfbc:	2b00      	cmp	r3, #0
    bfbe:	d0e9      	beq.n	bf94 <FlexCAN_EnterFreezeMode+0x5c>
        }
    }

    return returnResult;
    bfc0:	9b04      	ldr	r3, [sp, #16]
}
    bfc2:	4618      	mov	r0, r3
    bfc4:	b007      	add	sp, #28
    bfc6:	f85d fb04 	ldr.w	pc, [sp], #4
    bfca:	bf00      	nop
    bfcc:	000f4240 	.word	0x000f4240

0000bfd0 <FlexCAN_Enable>:
 * Function Name : FlexCAN_Enable
 * Description   : Enable the clock for FlexCAN Module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Enable(FLEXCAN_Type * base)
{
    bfd0:	b500      	push	{lr}
    bfd2:	b087      	sub	sp, #28
    bfd4:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    bfd6:	2300      	movs	r3, #0
    bfd8:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    bfda:	2300      	movs	r3, #0
    bfdc:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    bfde:	2100      	movs	r1, #0
    bfe0:	4818      	ldr	r0, [pc, #96]	; (c044 <FlexCAN_Enable+0x74>)
    bfe2:	f7f6 f947 	bl	2274 <OsIf_MicrosToTicks>
    bfe6:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    bfe8:	2300      	movs	r3, #0
    bfea:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    bfec:	f001 fad8 	bl	d5a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>

    /* Enable Module */
    base->MCR &= ~FLEXCAN_MCR_MDIS_MASK;
    bff0:	9b01      	ldr	r3, [sp, #4]
    bff2:	681b      	ldr	r3, [r3, #0]
    bff4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    bff8:	9b01      	ldr	r3, [sp, #4]
    bffa:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03();
    bffc:	f001 fafc 	bl	d5f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>
    /* Wait for entering the freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c000:	2000      	movs	r0, #0
    c002:	f7f6 f8eb 	bl	21dc <OsIf_GetCounter>
    c006:	4603      	mov	r3, r0
    c008:	9302      	str	r3, [sp, #8]
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    c00a:	e00f      	b.n	c02c <FlexCAN_Enable+0x5c>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c00c:	ab02      	add	r3, sp, #8
    c00e:	2100      	movs	r1, #0
    c010:	4618      	mov	r0, r3
    c012:	f7f6 f8fc 	bl	220e <OsIf_GetElapsed>
    c016:	4602      	mov	r2, r0
    c018:	9b05      	ldr	r3, [sp, #20]
    c01a:	4413      	add	r3, r2
    c01c:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    c01e:	9a05      	ldr	r2, [sp, #20]
    c020:	9b03      	ldr	r3, [sp, #12]
    c022:	429a      	cmp	r2, r3
    c024:	d302      	bcc.n	c02c <FlexCAN_Enable+0x5c>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    c026:	2303      	movs	r3, #3
    c028:	9304      	str	r3, [sp, #16]
            break;
    c02a:	e005      	b.n	c038 <FlexCAN_Enable+0x68>
    while (0U == ((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT))
    c02c:	9b01      	ldr	r3, [sp, #4]
    c02e:	681b      	ldr	r3, [r3, #0]
    c030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    c034:	2b00      	cmp	r3, #0
    c036:	d0e9      	beq.n	c00c <FlexCAN_Enable+0x3c>
        }
    }
    return returnValue;
    c038:	9b04      	ldr	r3, [sp, #16]
}
    c03a:	4618      	mov	r0, r3
    c03c:	b007      	add	sp, #28
    c03e:	f85d fb04 	ldr.w	pc, [sp], #4
    c042:	bf00      	nop
    c044:	000f4240 	.word	0x000f4240

0000c048 <FlexCAN_ExitFreezeMode>:
 * Function Name : FLEXCAN_ExitFreezeMode
 * Description   : Exit of freeze mode.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_ExitFreezeMode(FLEXCAN_Type * base)
{
    c048:	b500      	push	{lr}
    c04a:	b087      	sub	sp, #28
    c04c:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    c04e:	2300      	movs	r3, #0
    c050:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    c052:	2300      	movs	r3, #0
    c054:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c056:	2100      	movs	r1, #0
    c058:	481b      	ldr	r0, [pc, #108]	; (c0c8 <FlexCAN_ExitFreezeMode+0x80>)
    c05a:	f7f6 f90b 	bl	2274 <OsIf_MicrosToTicks>
    c05e:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnValue = FLEXCAN_STATUS_SUCCESS;
    c060:	2300      	movs	r3, #0
    c062:	9304      	str	r3, [sp, #16]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    c064:	f001 faee 	bl	d644 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    base->MCR = (base->MCR & ~FLEXCAN_MCR_HALT_MASK) | FLEXCAN_MCR_HALT(0U);
    c068:	9b01      	ldr	r3, [sp, #4]
    c06a:	681b      	ldr	r3, [r3, #0]
    c06c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
    c070:	9b01      	ldr	r3, [sp, #4]
    c072:	601a      	str	r2, [r3, #0]
    base->MCR = (base->MCR & ~FLEXCAN_MCR_FRZ_MASK) | FLEXCAN_MCR_FRZ(0U);
    c074:	9b01      	ldr	r3, [sp, #4]
    c076:	681b      	ldr	r3, [r3, #0]
    c078:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
    c07c:	9b01      	ldr	r3, [sp, #4]
    c07e:	601a      	str	r2, [r3, #0]
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04();
    c080:	f001 fb0c 	bl	d69c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>
    /* Wait till exit freeze mode */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c084:	2000      	movs	r0, #0
    c086:	f7f6 f8a9 	bl	21dc <OsIf_GetCounter>
    c08a:	4603      	mov	r3, r0
    c08c:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    c08e:	e00f      	b.n	c0b0 <FlexCAN_ExitFreezeMode+0x68>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c090:	ab02      	add	r3, sp, #8
    c092:	2100      	movs	r1, #0
    c094:	4618      	mov	r0, r3
    c096:	f7f6 f8ba 	bl	220e <OsIf_GetElapsed>
    c09a:	4602      	mov	r2, r0
    c09c:	9b05      	ldr	r3, [sp, #20]
    c09e:	4413      	add	r3, r2
    c0a0:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    c0a2:	9a05      	ldr	r2, [sp, #20]
    c0a4:	9b03      	ldr	r3, [sp, #12]
    c0a6:	429a      	cmp	r2, r3
    c0a8:	d302      	bcc.n	c0b0 <FlexCAN_ExitFreezeMode+0x68>
        {
            returnValue = FLEXCAN_STATUS_TIMEOUT;
    c0aa:	2303      	movs	r3, #3
    c0ac:	9304      	str	r3, [sp, #16]
            break;
    c0ae:	e005      	b.n	c0bc <FlexCAN_ExitFreezeMode+0x74>
    while (((base->MCR & FLEXCAN_MCR_FRZACK_MASK) >> FLEXCAN_MCR_FRZACK_SHIFT) != 0U)
    c0b0:	9b01      	ldr	r3, [sp, #4]
    c0b2:	681b      	ldr	r3, [r3, #0]
    c0b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    c0b8:	2b00      	cmp	r3, #0
    c0ba:	d1e9      	bne.n	c090 <FlexCAN_ExitFreezeMode+0x48>
        }
    }
    return returnValue;
    c0bc:	9b04      	ldr	r3, [sp, #16]
}
    c0be:	4618      	mov	r0, r3
    c0c0:	b007      	add	sp, #28
    c0c2:	f85d fb04 	ldr.w	pc, [sp], #4
    c0c6:	bf00      	nop
    c0c8:	000f4240 	.word	0x000f4240

0000c0cc <FlexCAN_Disable>:
 * Description   : Disable FlexCAN module.
 * This function will disable FlexCAN module.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Disable(FLEXCAN_Type * base)
{
    c0cc:	b500      	push	{lr}
    c0ce:	b087      	sub	sp, #28
    c0d0:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    c0d2:	2300      	movs	r3, #0
    c0d4:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    c0d6:	2300      	movs	r3, #0
    c0d8:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c0da:	2100      	movs	r1, #0
    c0dc:	481a      	ldr	r0, [pc, #104]	; (c148 <FlexCAN_Disable+0x7c>)
    c0de:	f7f6 f8c9 	bl	2274 <OsIf_MicrosToTicks>
    c0e2:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    c0e4:	2300      	movs	r3, #0
    c0e6:	9304      	str	r3, [sp, #16]

    /* To access the memory mapped registers */
    /* Enter disable mode (hard reset). */
    if (0U == ((base->MCR & FLEXCAN_MCR_MDIS_MASK) >> FLEXCAN_MCR_MDIS_SHIFT))
    c0e8:	9b01      	ldr	r3, [sp, #4]
    c0ea:	681b      	ldr	r3, [r3, #0]
    c0ec:	2b00      	cmp	r3, #0
    c0ee:	db25      	blt.n	c13c <FlexCAN_Disable+0x70>
    {
        /* Start critical section: implementation depends on integrator */
        SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    c0f0:	f001 fafa 	bl	d6e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Clock disable (module) */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MDIS_MASK) | FLEXCAN_MCR_MDIS(1U);
    c0f4:	9b01      	ldr	r3, [sp, #4]
    c0f6:	681b      	ldr	r3, [r3, #0]
    c0f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    c0fc:	9b01      	ldr	r3, [sp, #4]
    c0fe:	601a      	str	r2, [r3, #0]
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05();
    c100:	f001 fb1e 	bl	d740 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>
        /* Wait until disable mode acknowledged */
        timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c104:	2000      	movs	r0, #0
    c106:	f7f6 f869 	bl	21dc <OsIf_GetCounter>
    c10a:	4603      	mov	r3, r0
    c10c:	9302      	str	r3, [sp, #8]
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    c10e:	e00f      	b.n	c130 <FlexCAN_Disable+0x64>
        {
            timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c110:	ab02      	add	r3, sp, #8
    c112:	2100      	movs	r1, #0
    c114:	4618      	mov	r0, r3
    c116:	f7f6 f87a 	bl	220e <OsIf_GetElapsed>
    c11a:	4602      	mov	r2, r0
    c11c:	9b05      	ldr	r3, [sp, #20]
    c11e:	4413      	add	r3, r2
    c120:	9305      	str	r3, [sp, #20]
            if (timeElapsed >= uS2Ticks)
    c122:	9a05      	ldr	r2, [sp, #20]
    c124:	9b03      	ldr	r3, [sp, #12]
    c126:	429a      	cmp	r2, r3
    c128:	d302      	bcc.n	c130 <FlexCAN_Disable+0x64>
            {
                returnResult = FLEXCAN_STATUS_TIMEOUT;
    c12a:	2303      	movs	r3, #3
    c12c:	9304      	str	r3, [sp, #16]
                break;
    c12e:	e005      	b.n	c13c <FlexCAN_Disable+0x70>
        while (0U == ((base->MCR & FLEXCAN_MCR_LPMACK_MASK) >> FLEXCAN_MCR_LPMACK_SHIFT))
    c130:	9b01      	ldr	r3, [sp, #4]
    c132:	681b      	ldr	r3, [r3, #0]
    c134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    c138:	2b00      	cmp	r3, #0
    c13a:	d0e9      	beq.n	c110 <FlexCAN_Disable+0x44>
            }
        }
    }
    return returnResult;
    c13c:	9b04      	ldr	r3, [sp, #16]
}
    c13e:	4618      	mov	r0, r3
    c140:	b007      	add	sp, #28
    c142:	f85d fb04 	ldr.w	pc, [sp], #4
    c146:	bf00      	nop
    c148:	000f4240 	.word	0x000f4240

0000c14c <FlexCAN_SetErrIntCmd>:
 * Description   : Enable the error interrupts.
 * This function will enable Error interrupt.
 *
 *END**************************************************************************/
void FlexCAN_SetErrIntCmd(FLEXCAN_Type * base, flexcan_int_type_t errType, boolean enable)
{
    c14c:	b500      	push	{lr}
    c14e:	b087      	sub	sp, #28
    c150:	9003      	str	r0, [sp, #12]
    c152:	9102      	str	r1, [sp, #8]
    c154:	4613      	mov	r3, r2
    c156:	f88d 3007 	strb.w	r3, [sp, #7]
    uint32 temp = (uint32)errType;
    c15a:	9b02      	ldr	r3, [sp, #8]
    c15c:	9305      	str	r3, [sp, #20]

    /* Start critical section: implementation depends on integrator */
    SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    c15e:	f001 fb15 	bl	d78c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
    if (enable)
    c162:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c166:	2b00      	cmp	r3, #0
    c168:	d020      	beq.n	c1ac <FlexCAN_SetErrIntCmd+0x60>
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    c16a:	9b02      	ldr	r3, [sp, #8]
    c16c:	f244 0201 	movw	r2, #16385	; 0x4001
    c170:	4293      	cmp	r3, r2
    c172:	d106      	bne.n	c182 <FlexCAN_SetErrIntCmd+0x36>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(1U);
    c174:	9b03      	ldr	r3, [sp, #12]
    c176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c178:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    c17c:	9b03      	ldr	r3, [sp, #12]
    c17e:	635a      	str	r2, [r3, #52]	; 0x34
    c180:	e03a      	b.n	c1f8 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            if ((FLEXCAN_INT_RX_WARNING == errType) || (FLEXCAN_INT_TX_WARNING == errType))
    c182:	9b02      	ldr	r3, [sp, #8]
    c184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    c188:	d003      	beq.n	c192 <FlexCAN_SetErrIntCmd+0x46>
    c18a:	9b02      	ldr	r3, [sp, #8]
    c18c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    c190:	d105      	bne.n	c19e <FlexCAN_SetErrIntCmd+0x52>
            {
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(1U);
    c192:	9b03      	ldr	r3, [sp, #12]
    c194:	681b      	ldr	r3, [r3, #0]
    c196:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    c19a:	9b03      	ldr	r3, [sp, #12]
    c19c:	601a      	str	r2, [r3, #0]
            }
            (base->CTRL1) = ((base->CTRL1) | (temp));
    c19e:	9b03      	ldr	r3, [sp, #12]
    c1a0:	685a      	ldr	r2, [r3, #4]
    c1a2:	9b05      	ldr	r3, [sp, #20]
    c1a4:	431a      	orrs	r2, r3
    c1a6:	9b03      	ldr	r3, [sp, #12]
    c1a8:	605a      	str	r2, [r3, #4]
    c1aa:	e025      	b.n	c1f8 <FlexCAN_SetErrIntCmd+0xac>
        }
    }
    else
    {
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        if (FLEXCAN_INT_ERR_FAST == errType)
    c1ac:	9b02      	ldr	r3, [sp, #8]
    c1ae:	f244 0201 	movw	r2, #16385	; 0x4001
    c1b2:	4293      	cmp	r3, r2
    c1b4:	d106      	bne.n	c1c4 <FlexCAN_SetErrIntCmd+0x78>
        {
            base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_ERRMSK_FAST_MASK) | FLEXCAN_CTRL2_ERRMSK_FAST(0U);
    c1b6:	9b03      	ldr	r3, [sp, #12]
    c1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c1ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    c1be:	9b03      	ldr	r3, [sp, #12]
    c1c0:	635a      	str	r2, [r3, #52]	; 0x34
    c1c2:	e019      	b.n	c1f8 <FlexCAN_SetErrIntCmd+0xac>
            (void)temp;
        }
        else
#endif
        {
            (base->CTRL1) = ((base->CTRL1) & ~(temp));
    c1c4:	9b03      	ldr	r3, [sp, #12]
    c1c6:	685a      	ldr	r2, [r3, #4]
    c1c8:	9b05      	ldr	r3, [sp, #20]
    c1ca:	43db      	mvns	r3, r3
    c1cc:	401a      	ands	r2, r3
    c1ce:	9b03      	ldr	r3, [sp, #12]
    c1d0:	605a      	str	r2, [r3, #4]
            temp = base->CTRL1;
    c1d2:	9b03      	ldr	r3, [sp, #12]
    c1d4:	685b      	ldr	r3, [r3, #4]
    c1d6:	9305      	str	r3, [sp, #20]
            if ((0U == (temp & (uint32)FLEXCAN_INT_RX_WARNING)) && (0U == (temp & (uint32)FLEXCAN_INT_TX_WARNING)))
    c1d8:	9b05      	ldr	r3, [sp, #20]
    c1da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    c1de:	2b00      	cmp	r3, #0
    c1e0:	d10a      	bne.n	c1f8 <FlexCAN_SetErrIntCmd+0xac>
    c1e2:	9b05      	ldr	r3, [sp, #20]
    c1e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    c1e8:	2b00      	cmp	r3, #0
    c1ea:	d105      	bne.n	c1f8 <FlexCAN_SetErrIntCmd+0xac>
            {
                /* If WRNEN disabled then both FLEXCAN_INT_RX_WARNING and FLEXCAN_INT_TX_WARNING will be disabled */
                base->MCR = (base->MCR & ~FLEXCAN_MCR_WRNEN_MASK) | FLEXCAN_MCR_WRNEN(0U);
    c1ec:	9b03      	ldr	r3, [sp, #12]
    c1ee:	681b      	ldr	r3, [r3, #0]
    c1f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
    c1f4:	9b03      	ldr	r3, [sp, #12]
    c1f6:	601a      	str	r2, [r3, #0]
            }
        }
    }
    /* End critical section: implementation depends on integrator */
    SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06();
    c1f8:	f001 faf4 	bl	d7e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>
}
    c1fc:	bf00      	nop
    c1fe:	b007      	add	sp, #28
    c200:	f85d fb04 	ldr.w	pc, [sp], #4

0000c204 <FlexCAN_Init>:
 * buffers, initialize all message buffers as inactive, enable RX FIFO
 * if needed, mask all mask bits, and disable all MB interrupts.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_Init(FLEXCAN_Type * base)
{
    c204:	b500      	push	{lr}
    c206:	b087      	sub	sp, #28
    c208:	9001      	str	r0, [sp, #4]
    uint32 timeStart = 0U;
    c20a:	2300      	movs	r3, #0
    c20c:	9302      	str	r3, [sp, #8]
    uint32 timeElapsed = 0U;
    c20e:	2300      	movs	r3, #0
    c210:	9305      	str	r3, [sp, #20]
    uint32 uS2Ticks = OsIf_MicrosToTicks(FLEXCAN_IP_TIMEOUT_DURATION, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c212:	2100      	movs	r1, #0
    c214:	4833      	ldr	r0, [pc, #204]	; (c2e4 <FlexCAN_Init+0xe0>)
    c216:	f7f6 f82d 	bl	2274 <OsIf_MicrosToTicks>
    c21a:	9003      	str	r0, [sp, #12]
    Flexcan_Ip_StatusType returnResult = FLEXCAN_STATUS_SUCCESS;
    c21c:	2300      	movs	r3, #0
    c21e:	9304      	str	r3, [sp, #16]

    /* Reset the FLEXCAN */
    base->MCR = (base->MCR & ~FLEXCAN_MCR_SOFTRST_MASK) | FLEXCAN_MCR_SOFTRST(1U);
    c220:	9b01      	ldr	r3, [sp, #4]
    c222:	681b      	ldr	r3, [r3, #0]
    c224:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
    c228:	9b01      	ldr	r3, [sp, #4]
    c22a:	601a      	str	r2, [r3, #0]
    /* Wait for reset cycle to complete */
    timeStart = OsIf_GetCounter(FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c22c:	2000      	movs	r0, #0
    c22e:	f7f5 ffd5 	bl	21dc <OsIf_GetCounter>
    c232:	4603      	mov	r3, r0
    c234:	9302      	str	r3, [sp, #8]
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    c236:	e00f      	b.n	c258 <FlexCAN_Init+0x54>
    {
        timeElapsed += OsIf_GetElapsed(&timeStart, FLEXCAN_IP_SERVICE_TIMEOUT_TYPE);
    c238:	ab02      	add	r3, sp, #8
    c23a:	2100      	movs	r1, #0
    c23c:	4618      	mov	r0, r3
    c23e:	f7f5 ffe6 	bl	220e <OsIf_GetElapsed>
    c242:	4602      	mov	r2, r0
    c244:	9b05      	ldr	r3, [sp, #20]
    c246:	4413      	add	r3, r2
    c248:	9305      	str	r3, [sp, #20]
        if (timeElapsed >= uS2Ticks)
    c24a:	9a05      	ldr	r2, [sp, #20]
    c24c:	9b03      	ldr	r3, [sp, #12]
    c24e:	429a      	cmp	r2, r3
    c250:	d302      	bcc.n	c258 <FlexCAN_Init+0x54>
        {
            returnResult = FLEXCAN_STATUS_TIMEOUT;
    c252:	2303      	movs	r3, #3
    c254:	9304      	str	r3, [sp, #16]
            break;
    c256:	e005      	b.n	c264 <FlexCAN_Init+0x60>
    while (((base->MCR & FLEXCAN_MCR_SOFTRST_MASK) >> FLEXCAN_MCR_SOFTRST_SHIFT) != 0U)
    c258:	9b01      	ldr	r3, [sp, #4]
    c25a:	681b      	ldr	r3, [r3, #0]
    c25c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    c260:	2b00      	cmp	r3, #0
    c262:	d1e9      	bne.n	c238 <FlexCAN_Init+0x34>
        }
    }
    if (FLEXCAN_STATUS_SUCCESS == returnResult)
    c264:	9b04      	ldr	r3, [sp, #16]
    c266:	2b00      	cmp	r3, #0
    c268:	d136      	bne.n	c2d8 <FlexCAN_Init+0xd4>
    {
        /* Avoid Abort Transmission, use Inactive MB */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_AEN_MASK) | FLEXCAN_MCR_AEN(1U);
    c26a:	9b01      	ldr	r3, [sp, #4]
    c26c:	681b      	ldr	r3, [r3, #0]
    c26e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    c272:	9b01      	ldr	r3, [sp, #4]
    c274:	601a      	str	r2, [r3, #0]
        /* Clear FlexCAN memory */
        FlexCAN_ClearRAM(base);
    c276:	9801      	ldr	r0, [sp, #4]
    c278:	f7ff fd40 	bl	bcfc <FlexCAN_ClearRAM>
        /* Rx global mask*/
        (base->RXMGMASK) = (uint32)(FLEXCAN_RXMGMASK_MG_MASK);
    c27c:	9b01      	ldr	r3, [sp, #4]
    c27e:	f04f 32ff 	mov.w	r2, #4294967295
    c282:	611a      	str	r2, [r3, #16]
        /* Rx reg 14 mask*/
        (base->RX14MASK) =  (uint32)(FLEXCAN_RX14MASK_RX14M_MASK);
    c284:	9b01      	ldr	r3, [sp, #4]
    c286:	f04f 32ff 	mov.w	r2, #4294967295
    c28a:	615a      	str	r2, [r3, #20]
        /* Rx reg 15 mask*/
        (base->RX15MASK) = (uint32)(FLEXCAN_RX15MASK_RX15M_MASK);
    c28c:	9b01      	ldr	r3, [sp, #4]
    c28e:	f04f 32ff 	mov.w	r2, #4294967295
    c292:	619a      	str	r2, [r3, #24]
        /* Disable all MB interrupts */
        (base->IMASK1) = 0x0;
    c294:	9b01      	ldr	r3, [sp, #4]
    c296:	2200      	movs	r2, #0
    c298:	629a      	str	r2, [r3, #40]	; 0x28
        /* Clear all MB interrupt flags */
        (base->IFLAG1) = FLEXCAN_IMASK1_BUF31TO0M_MASK;
    c29a:	9b01      	ldr	r3, [sp, #4]
    c29c:	f04f 32ff 	mov.w	r2, #4294967295
    c2a0:	631a      	str	r2, [r3, #48]	; 0x30
            (base->IMASK4) = 0x0;
            (base->IFLAG4) = FLEXCAN_IMASK4_BUF127TO96M_MASK;
        }
#endif
        /* Clear all error interrupt flags */
        (base->ESR1) = FLEXCAN_IP_ALL_INT;
    c2a2:	9b01      	ldr	r3, [sp, #4]
    c2a4:	4a10      	ldr	r2, [pc, #64]	; (c2e8 <FlexCAN_Init+0xe4>)
    c2a6:	621a      	str	r2, [r3, #32]
        /* clear registers which are not effected by soft reset */
        base->CTRL1 = FLEXCAN_IP_CTRL1_DEFAULT_VALUE_U32;
    c2a8:	9b01      	ldr	r3, [sp, #4]
    c2aa:	2200      	movs	r2, #0
    c2ac:	605a      	str	r2, [r3, #4]
        base->CTRL2 = FLEXCAN_IP_CTRL2_DEFAULT_VALUE_U32;
    c2ae:	9b01      	ldr	r3, [sp, #4]
    c2b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    c2b4:	635a      	str	r2, [r3, #52]	; 0x34
        base->CBT   = FLEXCAN_IP_CBT_DEFAULT_VALUE_U32;
    c2b6:	9b01      	ldr	r3, [sp, #4]
    c2b8:	2200      	movs	r2, #0
    c2ba:	651a      	str	r2, [r3, #80]	; 0x50
        base->EDCBT = FLEXCAN_IP_EDCBT_DEFAULT_VALUE_U32;
        base->ETDC  = FLEXCAN_IP_ETDC_DEFAULT_VALUE_U32;
#endif
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    #if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    c2bc:	9801      	ldr	r0, [sp, #4]
    c2be:	f000 f85b 	bl	c378 <FlexCAN_IsFDAvailable>
    c2c2:	4603      	mov	r3, r0
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	d007      	beq.n	c2d8 <FlexCAN_Init+0xd4>
    {
    #endif /* defined(CAN_FEATURE_S32K1XX) */
        base->FDCBT = FLEXCAN_IP_FDCBT_DEFAULT_VALUE_U32;
    c2c8:	9b01      	ldr	r3, [sp, #4]
    c2ca:	2200      	movs	r2, #0
    c2cc:	f8c3 2c04 	str.w	r2, [r3, #3076]	; 0xc04
        base->FDCTRL = FLEXCAN_IP_FDCTRL_DEFAULT_VALUE_U32;
    c2d0:	9b01      	ldr	r3, [sp, #4]
    c2d2:	4a06      	ldr	r2, [pc, #24]	; (c2ec <FlexCAN_Init+0xe8>)
    c2d4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    #if defined(CAN_FEATURE_S32K1XX)
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
#endif /* (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON) */
    }
    return returnResult;
    c2d8:	9b04      	ldr	r3, [sp, #16]
}
    c2da:	4618      	mov	r0, r3
    c2dc:	b007      	add	sp, #28
    c2de:	f85d fb04 	ldr.w	pc, [sp], #4
    c2e2:	bf00      	nop
    c2e4:	000f4240 	.word	0x000f4240
    c2e8:	003b0006 	.word	0x003b0006
    c2ec:	80004100 	.word	0x80004100

0000c2f0 <FlexCAN_EnableRxFifo>:
 * This function will enable the Rx FIFO feature.
 *
 *END**************************************************************************/
Flexcan_Ip_StatusType FlexCAN_EnableRxFifo(FLEXCAN_Type * base,
                                         uint32 numOfFilters)
{
    c2f0:	b500      	push	{lr}
    c2f2:	b087      	sub	sp, #28
    c2f4:	9001      	str	r0, [sp, #4]
    c2f6:	9100      	str	r1, [sp, #0]
    uint32 i;
    uint16 noOfMbx = (uint16)FlexCAN_GetMaxMbNum(base);
    c2f8:	9801      	ldr	r0, [sp, #4]
    c2fa:	f7ff fdfb 	bl	bef4 <FlexCAN_GetMaxMbNum>
    c2fe:	4603      	mov	r3, r0
    c300:	f8ad 300e 	strh.w	r3, [sp, #14]
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    c304:	2300      	movs	r3, #0
    c306:	9304      	str	r3, [sp, #16]

    /* RxFIFO cannot be enabled if FD is enabled */
    if (((base->MCR & FLEXCAN_MCR_FDEN_MASK) >> FLEXCAN_MCR_FDEN_SHIFT) != 0U)
    c308:	9b01      	ldr	r3, [sp, #4]
    c30a:	681b      	ldr	r3, [r3, #0]
    c30c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    c310:	2b00      	cmp	r3, #0
    c312:	d001      	beq.n	c318 <FlexCAN_EnableRxFifo+0x28>
    {
        stat = FLEXCAN_STATUS_ERROR;
    c314:	2301      	movs	r3, #1
    c316:	9304      	str	r3, [sp, #16]
    }
    if (FLEXCAN_STATUS_SUCCESS == stat)
    c318:	9b04      	ldr	r3, [sp, #16]
    c31a:	2b00      	cmp	r3, #0
    c31c:	d127      	bne.n	c36e <FlexCAN_EnableRxFifo+0x7e>
    {
        /* Enable RX FIFO */
        base->MCR = (base->MCR & ~FLEXCAN_MCR_RFEN_MASK) | FLEXCAN_MCR_RFEN(1U);
    c31e:	9b01      	ldr	r3, [sp, #4]
    c320:	681b      	ldr	r3, [r3, #0]
    c322:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    c326:	9b01      	ldr	r3, [sp, #4]
    c328:	601a      	str	r2, [r3, #0]
        /* Set the number of the RX FIFO filters needed */
        base->CTRL2 = (base->CTRL2 & ~FLEXCAN_CTRL2_RFFN_MASK) | ((numOfFilters << FLEXCAN_CTRL2_RFFN_SHIFT) & FLEXCAN_CTRL2_RFFN_MASK);
    c32a:	9b01      	ldr	r3, [sp, #4]
    c32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c32e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    c332:	9b00      	ldr	r3, [sp, #0]
    c334:	061b      	lsls	r3, r3, #24
    c336:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    c33a:	431a      	orrs	r2, r3
    c33c:	9b01      	ldr	r3, [sp, #4]
    c33e:	635a      	str	r2, [r3, #52]	; 0x34
        /* RX FIFO global mask, take in consideration all filter fields*/
        (base->RXFGMASK) = FLEXCAN_RXFGMASK_FGM_MASK;
    c340:	9b01      	ldr	r3, [sp, #4]
    c342:	f04f 32ff 	mov.w	r2, #4294967295
    c346:	649a      	str	r2, [r3, #72]	; 0x48

        for (i = 0U; i < noOfMbx; i++)
    c348:	2300      	movs	r3, #0
    c34a:	9305      	str	r3, [sp, #20]
    c34c:	e00a      	b.n	c364 <FlexCAN_EnableRxFifo+0x74>
        {
            /* RX individual mask */
            base->RXIMR[i] = (FLEXCAN_RXIMR_MI_MASK << FLEXCAN_IP_ID_EXT_SHIFT) & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    c34e:	9b01      	ldr	r3, [sp, #4]
    c350:	9a05      	ldr	r2, [sp, #20]
    c352:	f502 7208 	add.w	r2, r2, #544	; 0x220
    c356:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    c35a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (i = 0U; i < noOfMbx; i++)
    c35e:	9b05      	ldr	r3, [sp, #20]
    c360:	3301      	adds	r3, #1
    c362:	9305      	str	r3, [sp, #20]
    c364:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    c368:	9a05      	ldr	r2, [sp, #20]
    c36a:	429a      	cmp	r2, r3
    c36c:	d3ef      	bcc.n	c34e <FlexCAN_EnableRxFifo+0x5e>
        }
    }
    return stat;
    c36e:	9b04      	ldr	r3, [sp, #16]
}
    c370:	4618      	mov	r0, r3
    c372:	b007      	add	sp, #28
    c374:	f85d fb04 	ldr.w	pc, [sp], #4

0000c378 <FlexCAN_IsFDAvailable>:
 * Description   : Checks if FlexCAN has FD Support.
 * This function is private.
 *
 *END**************************************************************************/
boolean FlexCAN_IsFDAvailable(const FLEXCAN_Type * base)
{
    c378:	b084      	sub	sp, #16
    c37a:	9001      	str	r0, [sp, #4]
    uint32 i=0U;
    c37c:	2300      	movs	r3, #0
    c37e:	9303      	str	r3, [sp, #12]
    static FLEXCAN_Type * const flexcanBase[] = CAN_BASE_PTRS_HAS_FD;
    boolean returnValue = FALSE;
    c380:	2300      	movs	r3, #0
    c382:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    c386:	2300      	movs	r3, #0
    c388:	9303      	str	r3, [sp, #12]
    c38a:	e00d      	b.n	c3a8 <FlexCAN_IsFDAvailable+0x30>
    {
        if (base == flexcanBase[i])
    c38c:	4a0a      	ldr	r2, [pc, #40]	; (c3b8 <FlexCAN_IsFDAvailable+0x40>)
    c38e:	9b03      	ldr	r3, [sp, #12]
    c390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    c394:	9a01      	ldr	r2, [sp, #4]
    c396:	429a      	cmp	r2, r3
    c398:	d103      	bne.n	c3a2 <FlexCAN_IsFDAvailable+0x2a>
        {
            returnValue = TRUE;
    c39a:	2301      	movs	r3, #1
    c39c:	f88d 300b 	strb.w	r3, [sp, #11]
            break;
    c3a0:	e005      	b.n	c3ae <FlexCAN_IsFDAvailable+0x36>
    for (i = 0U; i < CAN_FEATURE_FD_INSTANCES; i++)
    c3a2:	9b03      	ldr	r3, [sp, #12]
    c3a4:	3301      	adds	r3, #1
    c3a6:	9303      	str	r3, [sp, #12]
    c3a8:	9b03      	ldr	r3, [sp, #12]
    c3aa:	2b00      	cmp	r3, #0
    c3ac:	d0ee      	beq.n	c38c <FlexCAN_IsFDAvailable+0x14>
        }
    }

    return returnValue;
    c3ae:	f89d 300b 	ldrb.w	r3, [sp, #11]
}
    c3b2:	4618      	mov	r0, r3
    c3b4:	b004      	add	sp, #16
    c3b6:	4770      	bx	lr
    c3b8:	0001022c 	.word	0x0001022c

0000c3bc <FlexCAN_SetPayloadSize>:
 * Description   : Sets the payload size of the MBs.
 *
 *END**************************************************************************/
void FlexCAN_SetPayloadSize(FLEXCAN_Type * base,
                            const Flexcan_Ip_PayloadSizeType * payloadSize)
{
    c3bc:	b500      	push	{lr}
    c3be:	b085      	sub	sp, #20
    c3c0:	9001      	str	r0, [sp, #4]
    c3c2:	9100      	str	r1, [sp, #0]
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
    DevAssert(FlexCAN_IsFDEnabled(base) || (FLEXCAN_PAYLOAD_SIZE_8 == payloadSize->payloadBlock3));
    #endif
#endif
    /* If FD is not enabled, only 8 bytes payload is supported */
    if (FlexCAN_IsFDEnabled(base))
    c3c4:	9801      	ldr	r0, [sp, #4]
    c3c6:	f7ff fbd6 	bl	bb76 <FlexCAN_IsFDEnabled>
    c3ca:	4603      	mov	r3, r0
    c3cc:	2b00      	cmp	r3, #0
    c3ce:	d011      	beq.n	c3f4 <FlexCAN_SetPayloadSize+0x38>
    {
        tmp = base->FDCTRL;
    c3d0:	9b01      	ldr	r3, [sp, #4]
    c3d2:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    c3d6:	9303      	str	r3, [sp, #12]
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR0_MASK);
    c3d8:	9b03      	ldr	r3, [sp, #12]
    c3da:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    c3de:	9303      	str	r3, [sp, #12]
        tmp |= ((uint32)payloadSize->payloadBlock0) << FLEXCAN_FDCTRL_MBDSR0_SHIFT;
    c3e0:	9b00      	ldr	r3, [sp, #0]
    c3e2:	681b      	ldr	r3, [r3, #0]
    c3e4:	041b      	lsls	r3, r3, #16
    c3e6:	9a03      	ldr	r2, [sp, #12]
    c3e8:	4313      	orrs	r3, r2
    c3ea:	9303      	str	r3, [sp, #12]
#endif
#if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        tmp &= ~(FLEXCAN_FDCTRL_MBDSR3_MASK);
        tmp |= ((uint32)payloadSize->payloadBlock3) << FLEXCAN_FDCTRL_MBDSR3_SHIFT;
#endif
        base->FDCTRL = tmp;
    c3ec:	9b01      	ldr	r3, [sp, #4]
    c3ee:	9a03      	ldr	r2, [sp, #12]
    c3f0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
    }
}
    c3f4:	bf00      	nop
    c3f6:	b005      	add	sp, #20
    c3f8:	f85d fb04 	ldr.w	pc, [sp], #4

0000c3fc <FlexCAN_GetPayloadSize>:
 * Function Name : FLEXCAN_GetPayloadSize
 * Description   : Returns the payload size of the MBs (in bytes).
 *
 *END**************************************************************************/
static uint8 FlexCAN_GetPayloadSize(const FLEXCAN_Type * base, uint8 mbdsrIdx)
{
    c3fc:	b500      	push	{lr}
    c3fe:	b085      	sub	sp, #20
    c400:	9001      	str	r0, [sp, #4]
    c402:	460b      	mov	r3, r1
    c404:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 payloadSize = 0U;
    c408:	2300      	movs	r3, #0
    c40a:	9303      	str	r3, [sp, #12]

#if defined(CAN_FEATURE_S32K1XX)
    if (TRUE == FlexCAN_IsFDAvailable(base))
    c40c:	9801      	ldr	r0, [sp, #4]
    c40e:	f7ff ffb3 	bl	c378 <FlexCAN_IsFDAvailable>
    c412:	4603      	mov	r3, r0
    c414:	2b00      	cmp	r3, #0
    c416:	d019      	beq.n	c44c <FlexCAN_GetPayloadSize+0x50>
    {
#endif /* defined(CAN_FEATURE_S32K1XX) */
    switch (mbdsrIdx)
    c418:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c41c:	2b00      	cmp	r3, #0
    c41e:	d10a      	bne.n	c436 <FlexCAN_GetPayloadSize+0x3a>
    {
        case 0 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    c420:	9b01      	ldr	r3, [sp, #4]
    c422:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    c426:	0c1b      	lsrs	r3, r3, #16
    c428:	f003 0303 	and.w	r3, r3, #3
    c42c:	2208      	movs	r2, #8
    c42e:	fa02 f303 	lsl.w	r3, r2, r3
    c432:	9303      	str	r3, [sp, #12]
    c434:	e00c      	b.n	c450 <FlexCAN_GetPayloadSize+0x54>
        case 2 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR2_MASK) >> FLEXCAN_FDCTRL_MBDSR2_SHIFT); } break;
    #endif
    #if (FLEXCAN_IP_FEATURE_MBDSR_COUNT > 3U)
        case 3 : {  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR3_MASK) >> FLEXCAN_FDCTRL_MBDSR3_SHIFT); } break;
    #endif
        default :{  payloadSize = 8UL << ((base->FDCTRL & FLEXCAN_FDCTRL_MBDSR0_MASK) >> FLEXCAN_FDCTRL_MBDSR0_SHIFT); } break;
    c436:	9b01      	ldr	r3, [sp, #4]
    c438:	f8d3 3c00 	ldr.w	r3, [r3, #3072]	; 0xc00
    c43c:	0c1b      	lsrs	r3, r3, #16
    c43e:	f003 0303 	and.w	r3, r3, #3
    c442:	2208      	movs	r2, #8
    c444:	fa02 f303 	lsl.w	r3, r2, r3
    c448:	9303      	str	r3, [sp, #12]
    c44a:	e001      	b.n	c450 <FlexCAN_GetPayloadSize+0x54>
    }
    #if defined(CAN_FEATURE_S32K1XX)
    }
    else
    {
        payloadSize = 8U;
    c44c:	2308      	movs	r3, #8
    c44e:	9303      	str	r3, [sp, #12]
    }
    #endif /* defined(CAN_FEATURE_S32K1XX) */
    return (uint8)payloadSize;
    c450:	9b03      	ldr	r3, [sp, #12]
    c452:	b2db      	uxtb	r3, r3
}
    c454:	4618      	mov	r0, r3
    c456:	b005      	add	sp, #20
    c458:	f85d fb04 	ldr.w	pc, [sp], #4

0000c45c <FlexCAN_GetMbPayloadSize>:



uint8 FlexCAN_GetMbPayloadSize(const FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    c45c:	b500      	push	{lr}
    c45e:	b087      	sub	sp, #28
    c460:	9001      	str	r0, [sp, #4]
    c462:	9100      	str	r1, [sp, #0]
    uint8 arbitration_field_size = 8U;
    c464:	2308      	movs	r3, #8
    c466:	f88d 3014 	strb.w	r3, [sp, #20]
    uint32 ramBlockSize = 512U;
    c46a:	f44f 7300 	mov.w	r3, #512	; 0x200
    c46e:	9304      	str	r3, [sp, #16]
    uint8 can_real_payload = 8U;
    c470:	2308      	movs	r3, #8
    c472:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 maxMbBlockNum = 0U;
    c476:	2300      	movs	r3, #0
    c478:	f88d 3016 	strb.w	r3, [sp, #22]
    uint8 i=0U;
    c47c:	2300      	movs	r3, #0
    c47e:	f88d 3015 	strb.w	r3, [sp, #21]
    uint8 mb_size = 0U;
    c482:	2300      	movs	r3, #0
    c484:	f88d 300f 	strb.w	r3, [sp, #15]

    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    c488:	2300      	movs	r3, #0
    c48a:	f88d 3015 	strb.w	r3, [sp, #21]
    c48e:	e024      	b.n	c4da <FlexCAN_GetMbPayloadSize+0x7e>
    {
        /* Check that the number of MBs is supported based on the payload size*/
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
        can_real_payload = FlexCAN_GetPayloadSize(base, i);
    c490:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c494:	4619      	mov	r1, r3
    c496:	9801      	ldr	r0, [sp, #4]
    c498:	f7ff ffb0 	bl	c3fc <FlexCAN_GetPayloadSize>
    c49c:	4603      	mov	r3, r0
    c49e:	f88d 3017 	strb.w	r3, [sp, #23]
#endif /* Else can_real_payload will remain as 8 payload size */
        mb_size = (uint8)(can_real_payload + arbitration_field_size);
    c4a2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    c4a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c4aa:	4413      	add	r3, r2
    c4ac:	f88d 300f 	strb.w	r3, [sp, #15]
        maxMbBlockNum += (uint8)(ramBlockSize / mb_size);
    c4b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    c4b4:	9a04      	ldr	r2, [sp, #16]
    c4b6:	fbb2 f3f3 	udiv	r3, r2, r3
    c4ba:	b2da      	uxtb	r2, r3
    c4bc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c4c0:	4413      	add	r3, r2
    c4c2:	f88d 3016 	strb.w	r3, [sp, #22]
        if (maxMbBlockNum > maxMsgBuffNum)
    c4c6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    c4ca:	9a00      	ldr	r2, [sp, #0]
    c4cc:	429a      	cmp	r2, r3
    c4ce:	d309      	bcc.n	c4e4 <FlexCAN_GetMbPayloadSize+0x88>
    for (i=0; i< (uint8)FLEXCAN_IP_FEATURE_MBDSR_COUNT; i++)
    c4d0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c4d4:	3301      	adds	r3, #1
    c4d6:	f88d 3015 	strb.w	r3, [sp, #21]
    c4da:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c4de:	2b00      	cmp	r3, #0
    c4e0:	d0d6      	beq.n	c490 <FlexCAN_GetMbPayloadSize+0x34>
    c4e2:	e000      	b.n	c4e6 <FlexCAN_GetMbPayloadSize+0x8a>
        {
            break;
    c4e4:	bf00      	nop
    {
        can_real_payload = 64U;
    }
 #endif

    return can_real_payload;
    c4e6:	f89d 3017 	ldrb.w	r3, [sp, #23]
}
    c4ea:	4618      	mov	r0, r3
    c4ec:	b007      	add	sp, #28
    c4ee:	f85d fb04 	ldr.w	pc, [sp], #4

0000c4f2 <FlexCAN_LockRxMsgBuff>:
 * Description   : Lock the RX message buffer.
 * This function will lock the RX message buffer.
 *
 *END**************************************************************************/
void FlexCAN_LockRxMsgBuff(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    c4f2:	b500      	push	{lr}
    c4f4:	b085      	sub	sp, #20
    c4f6:	9001      	str	r0, [sp, #4]
    c4f8:	9100      	str	r1, [sp, #0]
    volatile const uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c4fa:	9900      	ldr	r1, [sp, #0]
    c4fc:	9801      	ldr	r0, [sp, #4]
    c4fe:	f7ff fc7f 	bl	be00 <FlexCAN_GetMsgBuffRegion>
    c502:	9003      	str	r0, [sp, #12]

    /* Lock the mailbox by reading it */
    (void)*flexcan_mb;
    c504:	9b03      	ldr	r3, [sp, #12]
    c506:	681b      	ldr	r3, [r3, #0]
}
    c508:	bf00      	nop
    c50a:	b005      	add	sp, #20
    c50c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c510 <FlexCAN_SetMsgBuffIntCmd>:
                                               uint8 u8Instance,
                                               uint32 msgBuffIdx,
                                               boolean enable,
                                               boolean bIsIntActive
                                              )
{
    c510:	b500      	push	{lr}
    c512:	b087      	sub	sp, #28
    c514:	9003      	str	r0, [sp, #12]
    c516:	9201      	str	r2, [sp, #4]
    c518:	461a      	mov	r2, r3
    c51a:	460b      	mov	r3, r1
    c51c:	f88d 300b 	strb.w	r3, [sp, #11]
    c520:	4613      	mov	r3, r2
    c522:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp;
    Flexcan_Ip_StatusType stat = FLEXCAN_STATUS_SUCCESS;
    c526:	2300      	movs	r3, #0
    c528:	9305      	str	r3, [sp, #20]

        /* Enable the corresponding message buffer Interrupt */
        temp = 1UL << (msgBuffIdx % 32U);
    c52a:	9b01      	ldr	r3, [sp, #4]
    c52c:	f003 031f 	and.w	r3, r3, #31
    c530:	2201      	movs	r2, #1
    c532:	fa02 f303 	lsl.w	r3, r2, r3
    c536:	9304      	str	r3, [sp, #16]
        if (msgBuffIdx < 32U)
    c538:	9b01      	ldr	r3, [sp, #4]
    c53a:	2b1f      	cmp	r3, #31
    c53c:	d837      	bhi.n	c5ae <FlexCAN_SetMsgBuffIntCmd+0x9e>
        {
            if (enable)
    c53e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c542:	2b00      	cmp	r3, #0
    c544:	d01b      	beq.n	c57e <FlexCAN_SetMsgBuffIntCmd+0x6e>
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c546:	f001 fcf9 	bl	df3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) | (temp));
    c54a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c54e:	4a1a      	ldr	r2, [pc, #104]	; (c5b8 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c550:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c554:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c558:	9a04      	ldr	r2, [sp, #16]
    c55a:	430a      	orrs	r2, r1
    c55c:	4916      	ldr	r1, [pc, #88]	; (c5b8 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c55e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TRUE == bIsIntActive)
    c562:	f89d 3020 	ldrb.w	r3, [sp, #32]
    c566:	2b00      	cmp	r3, #0
    c568:	d006      	beq.n	c578 <FlexCAN_SetMsgBuffIntCmd+0x68>
                {
                    base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c56a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c56e:	4a12      	ldr	r2, [pc, #72]	; (c5b8 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c570:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c574:	9b03      	ldr	r3, [sp, #12]
    c576:	629a      	str	r2, [r3, #40]	; 0x28
                }
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c578:	f001 fd0c 	bl	df94 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
    c57c:	e017      	b.n	c5ae <FlexCAN_SetMsgBuffIntCmd+0x9e>
            }
            else
            {
                /* Start critical section: implementation depends on integrator */
                SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c57e:	f001 fcdd 	bl	df3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = ((FlexCAN_Ip_au32ImaskBuff[u8Instance][0U]) & ~(temp));
    c582:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c586:	4a0c      	ldr	r2, [pc, #48]	; (c5b8 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c588:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c58c:	9b04      	ldr	r3, [sp, #16]
    c58e:	43da      	mvns	r2, r3
    c590:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c594:	400a      	ands	r2, r1
    c596:	4908      	ldr	r1, [pc, #32]	; (c5b8 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                base->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c59c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c5a0:	4a05      	ldr	r2, [pc, #20]	; (c5b8 <FlexCAN_SetMsgBuffIntCmd+0xa8>)
    c5a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c5a6:	9b03      	ldr	r3, [sp, #12]
    c5a8:	629a      	str	r2, [r3, #40]	; 0x28
                /* End critical section: implementation depends on integrator */
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
    c5aa:	f001 fcf3 	bl	df94 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>
                SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18();
            }
        }
#endif /* if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */

    return stat;
    c5ae:	9b05      	ldr	r3, [sp, #20]
}
    c5b0:	4618      	mov	r0, r3
    c5b2:	b007      	add	sp, #28
    c5b4:	f85d fb04 	ldr.w	pc, [sp], #4
    c5b8:	1fff8fc4 	.word	0x1fff8fc4

0000c5bc <FLEXCAN_ClearMsgBuffIntCmd>:
void FLEXCAN_ClearMsgBuffIntCmd(FLEXCAN_Type * pBase,
                                uint8 u8Instance,
                                uint32 mb_idx,
                                boolean bIsIntActive
                               )
{
    c5bc:	b500      	push	{lr}
    c5be:	b087      	sub	sp, #28
    c5c0:	9003      	str	r0, [sp, #12]
    c5c2:	9201      	str	r2, [sp, #4]
    c5c4:	461a      	mov	r2, r3
    c5c6:	460b      	mov	r3, r1
    c5c8:	f88d 300b 	strb.w	r3, [sp, #11]
    c5cc:	4613      	mov	r3, r2
    c5ce:	f88d 300a 	strb.w	r3, [sp, #10]
    uint32 temp = (1UL << (mb_idx % 32U));
    c5d2:	9b01      	ldr	r3, [sp, #4]
    c5d4:	f003 031f 	and.w	r3, r3, #31
    c5d8:	2201      	movs	r2, #1
    c5da:	fa02 f303 	lsl.w	r3, r2, r3
    c5de:	9305      	str	r3, [sp, #20]

 /* Stop the running transfer. */
    if (mb_idx < 32U)
    c5e0:	9b01      	ldr	r3, [sp, #4]
    c5e2:	2b1f      	cmp	r3, #31
    c5e4:	d818      	bhi.n	c618 <FLEXCAN_ClearMsgBuffIntCmd+0x5c>
    {
          /* Start critical section: implementation depends on integrator */
          SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    c5e6:	f001 fa6b 	bl	dac0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
          FlexCAN_Ip_au32ImaskBuff[u8Instance][0U] = (pBase->IMASK1 & (~temp));
    c5ea:	9b03      	ldr	r3, [sp, #12]
    c5ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
    c5ee:	9b05      	ldr	r3, [sp, #20]
    c5f0:	43da      	mvns	r2, r3
    c5f2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c5f6:	400a      	ands	r2, r1
    c5f8:	4909      	ldr	r1, [pc, #36]	; (c620 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    c5fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          if (TRUE == bIsIntActive)
    c5fe:	f89d 300a 	ldrb.w	r3, [sp, #10]
    c602:	2b00      	cmp	r3, #0
    c604:	d006      	beq.n	c614 <FLEXCAN_ClearMsgBuffIntCmd+0x58>
          {
              pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c606:	f89d 300b 	ldrb.w	r3, [sp, #11]
    c60a:	4a05      	ldr	r2, [pc, #20]	; (c620 <FLEXCAN_ClearMsgBuffIntCmd+0x64>)
    c60c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c610:	9b03      	ldr	r3, [sp, #12]
    c612:	629a      	str	r2, [r3, #40]	; 0x28
          }
          /* End critical section: implementation depends on integrator */
          SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    c614:	f001 fa80 	bl	db18 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>
        }
        /* End critical section: implementation depends on integrator */
        SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11();
    }
#endif /* #if FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U */
}
    c618:	bf00      	nop
    c61a:	b007      	add	sp, #28
    c61c:	f85d fb04 	ldr.w	pc, [sp], #4
    c620:	1fff8fc4 	.word	0x1fff8fc4

0000c624 <FlexCAN_DisableInterrupts>:


void FlexCAN_DisableInterrupts(FLEXCAN_Type * pBase)
{
    c624:	b082      	sub	sp, #8
    c626:	9001      	str	r0, [sp, #4]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = 0U;
    c628:	9b01      	ldr	r3, [sp, #4]
    c62a:	2200      	movs	r2, #0
    c62c:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = 0U;
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    c62e:	bf00      	nop
    c630:	b002      	add	sp, #8
    c632:	4770      	bx	lr

0000c634 <FlexCAN_EnableInterrupts>:

void FlexCAN_EnableInterrupts(FLEXCAN_Type * pBase, uint8 u8Instance)
{
    c634:	b082      	sub	sp, #8
    c636:	9001      	str	r0, [sp, #4]
    c638:	460b      	mov	r3, r1
    c63a:	f88d 3003 	strb.w	r3, [sp, #3]
#if (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U)
    uint32 u32MaxMbCrtlNum = FlexCAN_GetMaxMbNum(pBase);
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 32U) */

    pBase->IMASK1 = FlexCAN_Ip_au32ImaskBuff[u8Instance][0U];
    c63e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    c642:	4a04      	ldr	r2, [pc, #16]	; (c654 <FlexCAN_EnableInterrupts+0x20>)
    c644:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c648:	9b01      	ldr	r3, [sp, #4]
    c64a:	629a      	str	r2, [r3, #40]	; 0x28
    if (u32MaxMbCrtlNum > 96U)
    {
        pBase->IMASK4 = FlexCAN_Ip_au32ImaskBuff[u8Instance][3U];
    }
#endif /* (FLEXCAN_IP_FEATURE_MAX_MB_NUM > 96U) */
}
    c64c:	bf00      	nop
    c64e:	b002      	add	sp, #8
    c650:	4770      	bx	lr
    c652:	bf00      	nop
    c654:	1fff8fc4 	.word	0x1fff8fc4

0000c658 <FlexCAN_SetRxMsgBuff>:
void FlexCAN_SetRxMsgBuff(const FLEXCAN_Type * base,
                          uint32 msgBuffIdx,
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId
                         )
{
    c658:	b500      	push	{lr}
    c65a:	b087      	sub	sp, #28
    c65c:	9003      	str	r0, [sp, #12]
    c65e:	9102      	str	r1, [sp, #8]
    c660:	9201      	str	r2, [sp, #4]
    c662:	9300      	str	r3, [sp, #0]
    volatile uint32 * flexcan_mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c664:	9902      	ldr	r1, [sp, #8]
    c666:	9803      	ldr	r0, [sp, #12]
    c668:	f7ff fbca 	bl	be00 <FlexCAN_GetMsgBuffRegion>
    c66c:	9005      	str	r0, [sp, #20]
    volatile uint32 * flexcan_mb_id = &flexcan_mb[1];
    c66e:	9b05      	ldr	r3, [sp, #20]
    c670:	3304      	adds	r3, #4
    c672:	9304      	str	r3, [sp, #16]
    DevAssert(cs != NULL_PTR);
#endif


    /* Clean up the arbitration field area */
    *flexcan_mb = 0;
    c674:	9b05      	ldr	r3, [sp, #20]
    c676:	2200      	movs	r2, #0
    c678:	601a      	str	r2, [r3, #0]
    *flexcan_mb_id = 0;
    c67a:	9b04      	ldr	r3, [sp, #16]
    c67c:	2200      	movs	r2, #0
    c67e:	601a      	str	r2, [r3, #0]

    /* Set the ID according the format structure */
    if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    c680:	9b01      	ldr	r3, [sp, #4]
    c682:	685b      	ldr	r3, [r3, #4]
    c684:	2b01      	cmp	r3, #1
    c686:	d119      	bne.n	c6bc <FlexCAN_SetRxMsgBuff+0x64>
    {
        /* Set IDE */
        *flexcan_mb |= FLEXCAN_IP_CS_IDE_MASK;
    c688:	9b05      	ldr	r3, [sp, #20]
    c68a:	681b      	ldr	r3, [r3, #0]
    c68c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
    c690:	9b05      	ldr	r3, [sp, #20]
    c692:	601a      	str	r2, [r3, #0]

        /* Clear SRR bit */
        *flexcan_mb &= ~FLEXCAN_IP_CS_SRR_MASK;
    c694:	9b05      	ldr	r3, [sp, #20]
    c696:	681b      	ldr	r3, [r3, #0]
    c698:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
    c69c:	9b05      	ldr	r3, [sp, #20]
    c69e:	601a      	str	r2, [r3, #0]

        /* ID [28-0] */
        *flexcan_mb_id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    c6a0:	9b04      	ldr	r3, [sp, #16]
    c6a2:	681b      	ldr	r3, [r3, #0]
    c6a4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    c6a8:	9b04      	ldr	r3, [sp, #16]
    c6aa:	601a      	str	r2, [r3, #0]
        *flexcan_mb_id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    c6ac:	9b04      	ldr	r3, [sp, #16]
    c6ae:	681a      	ldr	r2, [r3, #0]
    c6b0:	9b00      	ldr	r3, [sp, #0]
    c6b2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    c6b6:	431a      	orrs	r2, r3
    c6b8:	9b04      	ldr	r3, [sp, #16]
    c6ba:	601a      	str	r2, [r3, #0]
    }

    if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    c6bc:	9b01      	ldr	r3, [sp, #4]
    c6be:	685b      	ldr	r3, [r3, #4]
    c6c0:	2b00      	cmp	r3, #0
    c6c2:	d116      	bne.n	c6f2 <FlexCAN_SetRxMsgBuff+0x9a>
    {
        /* Make sure IDE and SRR are not set */
        *flexcan_mb &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c6c4:	9b05      	ldr	r3, [sp, #20]
    c6c6:	681b      	ldr	r3, [r3, #0]
    c6c8:	f423 02c0 	bic.w	r2, r3, #6291456	; 0x600000
    c6cc:	9b05      	ldr	r3, [sp, #20]
    c6ce:	601a      	str	r2, [r3, #0]

        /* ID[28-18] */
        *flexcan_mb_id &= ~FLEXCAN_IP_ID_STD_MASK;
    c6d0:	9b04      	ldr	r3, [sp, #16]
    c6d2:	681b      	ldr	r3, [r3, #0]
    c6d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    c6d8:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    c6dc:	9a04      	ldr	r2, [sp, #16]
    c6de:	6013      	str	r3, [r2, #0]
        *flexcan_mb_id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    c6e0:	9b04      	ldr	r3, [sp, #16]
    c6e2:	681a      	ldr	r2, [r3, #0]
    c6e4:	9b00      	ldr	r3, [sp, #0]
    c6e6:	0499      	lsls	r1, r3, #18
    c6e8:	4b0e      	ldr	r3, [pc, #56]	; (c724 <FlexCAN_SetRxMsgBuff+0xcc>)
    c6ea:	400b      	ands	r3, r1
    c6ec:	431a      	orrs	r2, r3
    c6ee:	9b04      	ldr	r3, [sp, #16]
    c6f0:	601a      	str	r2, [r3, #0]
    }

    /* Set MB CODE */
    if ((uint32)FLEXCAN_RX_NOT_USED != cs->code)
    c6f2:	9b01      	ldr	r3, [sp, #4]
    c6f4:	681b      	ldr	r3, [r3, #0]
    c6f6:	2b0f      	cmp	r3, #15
    c6f8:	d00f      	beq.n	c71a <FlexCAN_SetRxMsgBuff+0xc2>
    {
        *flexcan_mb &= ~FLEXCAN_IP_CS_CODE_MASK;
    c6fa:	9b05      	ldr	r3, [sp, #20]
    c6fc:	681b      	ldr	r3, [r3, #0]
    c6fe:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
    c702:	9b05      	ldr	r3, [sp, #20]
    c704:	601a      	str	r2, [r3, #0]
        *flexcan_mb |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    c706:	9b05      	ldr	r3, [sp, #20]
    c708:	681a      	ldr	r2, [r3, #0]
    c70a:	9b01      	ldr	r3, [sp, #4]
    c70c:	681b      	ldr	r3, [r3, #0]
    c70e:	061b      	lsls	r3, r3, #24
    c710:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    c714:	431a      	orrs	r2, r3
    c716:	9b05      	ldr	r3, [sp, #20]
    c718:	601a      	str	r2, [r3, #0]
    }
}
    c71a:	bf00      	nop
    c71c:	b007      	add	sp, #28
    c71e:	f85d fb04 	ldr.w	pc, [sp], #4
    c722:	bf00      	nop
    c724:	1ffc0000 	.word	0x1ffc0000

0000c728 <FlexCAN_GetMsgBuffTimestamp>:
 * Function Name : FlexCAN_GetMsgBuffTimestamp
 * Description   : Get a message buffer timestamp value.
 *
 *END**************************************************************************/
uint32 FlexCAN_GetMsgBuffTimestamp(const FLEXCAN_Type * base, uint32 msgBuffIdx)
{
    c728:	b500      	push	{lr}
    c72a:	b085      	sub	sp, #20
    c72c:	9001      	str	r0, [sp, #4]
    c72e:	9100      	str	r1, [sp, #0]
    uint32 TimeStamp = 0U;
    c730:	2300      	movs	r3, #0
    c732:	9303      	str	r3, [sp, #12]
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c734:	9900      	ldr	r1, [sp, #0]
    c736:	9801      	ldr	r0, [sp, #4]
    c738:	f7ff fb62 	bl	be00 <FlexCAN_GetMsgBuffRegion>
    c73c:	9002      	str	r0, [sp, #8]
        TimeStamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        TimeStamp = (uint32)((*Flexcan_Mb & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    c73e:	9b02      	ldr	r3, [sp, #8]
    c740:	681b      	ldr	r3, [r3, #0]
    c742:	b29b      	uxth	r3, r3
    c744:	9303      	str	r3, [sp, #12]
    }
    return TimeStamp;
    c746:	9b03      	ldr	r3, [sp, #12]
}
    c748:	4618      	mov	r0, r3
    c74a:	b005      	add	sp, #20
    c74c:	f85d fb04 	ldr.w	pc, [sp], #4

0000c750 <FlexCAN_GetMsgBuff>:
 *END**************************************************************************/
void FlexCAN_GetMsgBuff(const FLEXCAN_Type * base,
                        uint32 msgBuffIdx,
                        Flexcan_Ip_MsgBuffType * msgBuff
                       )
{
    c750:	b500      	push	{lr}
    c752:	b08d      	sub	sp, #52	; 0x34
    c754:	9003      	str	r0, [sp, #12]
    c756:	9102      	str	r1, [sp, #8]
    c758:	9201      	str	r2, [sp, #4]

    uint8 i;
    volatile const uint32 * Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, msgBuffIdx);
    c75a:	9902      	ldr	r1, [sp, #8]
    c75c:	9803      	ldr	r0, [sp, #12]
    c75e:	f7ff fb4f 	bl	be00 <FlexCAN_GetMsgBuffRegion>
    c762:	900a      	str	r0, [sp, #40]	; 0x28
    volatile const uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    c764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c766:	3304      	adds	r3, #4
    c768:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const uint8 * Flexcan_Mb_Data = (volatile const uint8 *)(&Flexcan_Mb[2]);
    c76a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c76c:	3308      	adds	r3, #8
    c76e:	9308      	str	r3, [sp, #32]
    volatile const uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    c770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c772:	3308      	adds	r3, #8
    c774:	9307      	str	r3, [sp, #28]
    uint32 * MsgBuff_Data_32 = NULL_PTR;
    c776:	2300      	movs	r3, #0
    c778:	9306      	str	r3, [sp, #24]
    uint32 MbWord;

    uint8 Flexcan_Mb_Dlc_Value = (uint8)(((*Flexcan_Mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    c77a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c77c:	681b      	ldr	r3, [r3, #0]
    c77e:	0c1b      	lsrs	r3, r3, #16
    c780:	b2db      	uxtb	r3, r3
    c782:	f003 030f 	and.w	r3, r3, #15
    c786:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Payload_Size = FlexCAN_ComputePayloadSize(Flexcan_Mb_Dlc_Value);
    c78a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    c78e:	4618      	mov	r0, r3
    c790:	f7ff faed 	bl	bd6e <FlexCAN_ComputePayloadSize>
    c794:	4603      	mov	r3, r0
    c796:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e

#if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
    DevAssert(msgBuff != NULL_PTR);
#endif
    /* Asign after NULL Check */
    MsgBuff_Data_32 = (uint32 *)(msgBuff->data);
    c79a:	9b01      	ldr	r3, [sp, #4]
    c79c:	3308      	adds	r3, #8
    c79e:	9306      	str	r3, [sp, #24]
#if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
    /* Payload Size is based on MBDSR for 1 MBDSR corresponds 32 * 8Bytes MBs  */
    if (Payload_Size > FlexCAN_GetMbPayloadSize(base, msgBuffIdx))
    c7a0:	9902      	ldr	r1, [sp, #8]
    c7a2:	9803      	ldr	r0, [sp, #12]
    c7a4:	f7ff fe5a 	bl	c45c <FlexCAN_GetMbPayloadSize>
    c7a8:	4603      	mov	r3, r0
    c7aa:	461a      	mov	r2, r3
    c7ac:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    c7b0:	4293      	cmp	r3, r2
    c7b2:	d906      	bls.n	c7c2 <FlexCAN_GetMsgBuff+0x72>
    {
        Payload_Size = FlexCAN_GetMbPayloadSize(base, msgBuffIdx);
    c7b4:	9902      	ldr	r1, [sp, #8]
    c7b6:	9803      	ldr	r0, [sp, #12]
    c7b8:	f7ff fe50 	bl	c45c <FlexCAN_GetMbPayloadSize>
    c7bc:	4603      	mov	r3, r0
    c7be:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    }
#endif /* FLEXCAN_IP_FEATURE_HAS_FD */

    msgBuff->dataLen = Payload_Size;
    c7c2:	9b01      	ldr	r3, [sp, #4]
    c7c4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    c7c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Get a MB field values */
    msgBuff->cs = *Flexcan_Mb;
    c7cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c7ce:	681a      	ldr	r2, [r3, #0]
    c7d0:	9b01      	ldr	r3, [sp, #4]
    c7d2:	601a      	str	r2, [r3, #0]
    if ((msgBuff->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    c7d4:	9b01      	ldr	r3, [sp, #4]
    c7d6:	681b      	ldr	r3, [r3, #0]
    c7d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    c7dc:	2b00      	cmp	r3, #0
    c7de:	d004      	beq.n	c7ea <FlexCAN_GetMsgBuff+0x9a>
    {
        msgBuff->msgId = (*Flexcan_Mb_Id);
    c7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c7e2:	681a      	ldr	r2, [r3, #0]
    c7e4:	9b01      	ldr	r3, [sp, #4]
    c7e6:	605a      	str	r2, [r3, #4]
    c7e8:	e004      	b.n	c7f4 <FlexCAN_GetMsgBuff+0xa4>
    }
    else
    {
        msgBuff->msgId = (*Flexcan_Mb_Id) >> FLEXCAN_IP_ID_STD_SHIFT;
    c7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c7ec:	681b      	ldr	r3, [r3, #0]
    c7ee:	0c9a      	lsrs	r2, r3, #18
    c7f0:	9b01      	ldr	r3, [sp, #4]
    c7f2:	605a      	str	r2, [r3, #4]
        msgBuff->time_stamp = (uint32)base->HR_TIME_STAMP[msgBuffIdx];
    }
    else
#endif /* EATURE_CAN_HAS_HR_TIMER */
    {
        msgBuff->time_stamp = (uint32)((msgBuff->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    c7f4:	9b01      	ldr	r3, [sp, #4]
    c7f6:	681b      	ldr	r3, [r3, #0]
    c7f8:	b29a      	uxth	r2, r3
    c7fa:	9b01      	ldr	r3, [sp, #4]
    c7fc:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, MsgBuff_Data_32[i >> 2U]);
        }
    }

#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    c7fe:	2300      	movs	r3, #0
    c800:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    c804:	e025      	b.n	c852 <FlexCAN_GetMsgBuff+0x102>
    {
        MbWord = Flexcan_Mb_Data_32[i >> 2U];
    c806:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c80a:	089b      	lsrs	r3, r3, #2
    c80c:	b2db      	uxtb	r3, r3
    c80e:	009b      	lsls	r3, r3, #2
    c810:	9a07      	ldr	r2, [sp, #28]
    c812:	4413      	add	r3, r2
    c814:	681b      	ldr	r3, [r3, #0]
    c816:	9304      	str	r3, [sp, #16]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (MsgBuff_Data_32[i >> 2U]));
    c818:	9b04      	ldr	r3, [sp, #16]
    c81a:	0e1a      	lsrs	r2, r3, #24
    c81c:	9b04      	ldr	r3, [sp, #16]
    c81e:	0a1b      	lsrs	r3, r3, #8
    c820:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    c824:	431a      	orrs	r2, r3
    c826:	9b04      	ldr	r3, [sp, #16]
    c828:	021b      	lsls	r3, r3, #8
    c82a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    c82e:	ea42 0103 	orr.w	r1, r2, r3
    c832:	9b04      	ldr	r3, [sp, #16]
    c834:	061a      	lsls	r2, r3, #24
    c836:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c83a:	089b      	lsrs	r3, r3, #2
    c83c:	b2db      	uxtb	r3, r3
    c83e:	009b      	lsls	r3, r3, #2
    c840:	9806      	ldr	r0, [sp, #24]
    c842:	4403      	add	r3, r0
    c844:	430a      	orrs	r2, r1
    c846:	601a      	str	r2, [r3, #0]
    for (i = 0U; i < (Payload_Size & ~3U); i += 4U)
    c848:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c84c:	3304      	adds	r3, #4
    c84e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    c852:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    c856:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    c85a:	f023 0303 	bic.w	r3, r3, #3
    c85e:	429a      	cmp	r2, r3
    c860:	d3d1      	bcc.n	c806 <FlexCAN_GetMsgBuff+0xb6>
    }

#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
    for (; i < Payload_Size; i++)
    c862:	e014      	b.n	c88e <FlexCAN_GetMsgBuff+0x13e>
    {   /* Max allowed value for index is 63 */
        msgBuff->data[i] = Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(i)];
    c864:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c868:	f083 0303 	eor.w	r3, r3, #3
    c86c:	b2db      	uxtb	r3, r3
    c86e:	461a      	mov	r2, r3
    c870:	9b08      	ldr	r3, [sp, #32]
    c872:	441a      	add	r2, r3
    c874:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c878:	7812      	ldrb	r2, [r2, #0]
    c87a:	b2d1      	uxtb	r1, r2
    c87c:	9a01      	ldr	r2, [sp, #4]
    c87e:	4413      	add	r3, r2
    c880:	460a      	mov	r2, r1
    c882:	721a      	strb	r2, [r3, #8]
    for (; i < Payload_Size; i++)
    c884:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    c888:	3301      	adds	r3, #1
    c88a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    c88e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    c892:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    c896:	429a      	cmp	r2, r3
    c898:	d3e4      	bcc.n	c864 <FlexCAN_GetMsgBuff+0x114>
    }
}
    c89a:	bf00      	nop
    c89c:	bf00      	nop
    c89e:	b00d      	add	sp, #52	; 0x34
    c8a0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c8a4 <FlexCAN_SetTxMsgBuff>:
                          const Flexcan_Ip_MsbuffCodeStatusType * cs,
                          uint32 msgId,
                          const uint8 * msgData,
                          const boolean isRemote
                         )
{
    c8a4:	b500      	push	{lr}
    c8a6:	b08d      	sub	sp, #52	; 0x34
    c8a8:	9003      	str	r0, [sp, #12]
    c8aa:	9102      	str	r1, [sp, #8]
    c8ac:	9201      	str	r2, [sp, #4]
    c8ae:	9300      	str	r3, [sp, #0]
    uint32 Flexcan_Mb_Config = 0;
    c8b0:	2300      	movs	r3, #0
    c8b2:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32 DataByte;
    uint8 Dlc_Value;
    uint8 Payload_Size;
    volatile uint32 * Flexcan_Mb = pMbAddr;
    c8b4:	9b03      	ldr	r3, [sp, #12]
    c8b6:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 * Flexcan_Mb_Id   = &Flexcan_Mb[1];
    c8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8ba:	3304      	adds	r3, #4
    c8bc:	9308      	str	r3, [sp, #32]
    volatile uint8 * Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    c8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8c0:	3308      	adds	r3, #8
    c8c2:	9307      	str	r3, [sp, #28]
    volatile uint32 * Flexcan_Mb_Data_32 = &Flexcan_Mb[2];
    c8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8c6:	3308      	adds	r3, #8
    c8c8:	9306      	str	r3, [sp, #24]
    const uint32 * MsgData_32 = (const uint32*)msgData;
    c8ca:	9b00      	ldr	r3, [sp, #0]
    c8cc:	9305      	str	r3, [sp, #20]
    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(cs != NULL_PTR);
    #endif

        /* Clean up the arbitration field area and set TxMB Inactive */
        *Flexcan_Mb = (uint32)((((uint32)FLEXCAN_TX_INACTIVE & (uint32)0x1F) << (uint8)FLEXCAN_IP_CS_CODE_SHIFT) & (uint32)FLEXCAN_IP_CS_CODE_MASK);
    c8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    c8d4:	601a      	str	r2, [r3, #0]
        *Flexcan_Mb_Id = 0;
    c8d6:	9b08      	ldr	r3, [sp, #32]
    c8d8:	2200      	movs	r2, #0
    c8da:	601a      	str	r2, [r3, #0]

        /* Compute the value of the DLC field */
        Dlc_Value = FlexCAN_ComputeDLCValue((uint8)cs->dataLen);
    c8dc:	9b02      	ldr	r3, [sp, #8]
    c8de:	689b      	ldr	r3, [r3, #8]
    c8e0:	b2db      	uxtb	r3, r3
    c8e2:	4618      	mov	r0, r3
    c8e4:	f7ff f9f4 	bl	bcd0 <FlexCAN_ComputeDLCValue>
    c8e8:	4603      	mov	r3, r0
    c8ea:	f88d 3013 	strb.w	r3, [sp, #19]
        /* Copy user's buffer into the message buffer data area */
        if (msgData != NULL_PTR)
    c8ee:	9b00      	ldr	r3, [sp, #0]
    c8f0:	2b00      	cmp	r3, #0
    c8f2:	d065      	beq.n	c9c0 <FlexCAN_SetTxMsgBuff+0x11c>
        {
#if (defined(S32K116) || defined (S32K118))
            (void)MsgData_32;
            DataByte = FlexCAN_DataTransferTxMsgBuff(Flexcan_Mb_Data_32, cs, msgData);
#else
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    c8f4:	2300      	movs	r3, #0
    c8f6:	930a      	str	r3, [sp, #40]	; 0x28
    c8f8:	e02c      	b.n	c954 <FlexCAN_SetTxMsgBuff+0xb0>
            {
                FLEXCAN_IP_SWAP_BYTES_IN_WORD((MsgData_32[DataByte >> 2U]), (Flexcan_Mb_Data_32[DataByte >> 2U]));
    c8fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c8fc:	089b      	lsrs	r3, r3, #2
    c8fe:	009b      	lsls	r3, r3, #2
    c900:	9a05      	ldr	r2, [sp, #20]
    c902:	4413      	add	r3, r2
    c904:	681b      	ldr	r3, [r3, #0]
    c906:	0e1a      	lsrs	r2, r3, #24
    c908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c90a:	089b      	lsrs	r3, r3, #2
    c90c:	009b      	lsls	r3, r3, #2
    c90e:	9905      	ldr	r1, [sp, #20]
    c910:	440b      	add	r3, r1
    c912:	681b      	ldr	r3, [r3, #0]
    c914:	0a1b      	lsrs	r3, r3, #8
    c916:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    c91a:	431a      	orrs	r2, r3
    c91c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c91e:	089b      	lsrs	r3, r3, #2
    c920:	009b      	lsls	r3, r3, #2
    c922:	9905      	ldr	r1, [sp, #20]
    c924:	440b      	add	r3, r1
    c926:	681b      	ldr	r3, [r3, #0]
    c928:	021b      	lsls	r3, r3, #8
    c92a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    c92e:	ea42 0103 	orr.w	r1, r2, r3
    c932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c934:	089b      	lsrs	r3, r3, #2
    c936:	009b      	lsls	r3, r3, #2
    c938:	9a05      	ldr	r2, [sp, #20]
    c93a:	4413      	add	r3, r2
    c93c:	681b      	ldr	r3, [r3, #0]
    c93e:	061a      	lsls	r2, r3, #24
    c940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c942:	089b      	lsrs	r3, r3, #2
    c944:	009b      	lsls	r3, r3, #2
    c946:	9806      	ldr	r0, [sp, #24]
    c948:	4403      	add	r3, r0
    c94a:	430a      	orrs	r2, r1
    c94c:	601a      	str	r2, [r3, #0]
            for (DataByte = 0; DataByte < (cs->dataLen & ~3U); DataByte += 4U)
    c94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c950:	3304      	adds	r3, #4
    c952:	930a      	str	r3, [sp, #40]	; 0x28
    c954:	9b02      	ldr	r3, [sp, #8]
    c956:	689b      	ldr	r3, [r3, #8]
    c958:	f023 0303 	bic.w	r3, r3, #3
    c95c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c95e:	429a      	cmp	r2, r3
    c960:	d3cb      	bcc.n	c8fa <FlexCAN_SetTxMsgBuff+0x56>
            }
#endif /* (defined(S32K116) || defined (S32K118)) */
            for ( ; DataByte < cs->dataLen; DataByte++)
    c962:	e00c      	b.n	c97e <FlexCAN_SetTxMsgBuff+0xda>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] =  msgData[DataByte];
    c964:	9a00      	ldr	r2, [sp, #0]
    c966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c968:	441a      	add	r2, r3
    c96a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c96c:	f083 0303 	eor.w	r3, r3, #3
    c970:	9907      	ldr	r1, [sp, #28]
    c972:	440b      	add	r3, r1
    c974:	7812      	ldrb	r2, [r2, #0]
    c976:	701a      	strb	r2, [r3, #0]
            for ( ; DataByte < cs->dataLen; DataByte++)
    c978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c97a:	3301      	adds	r3, #1
    c97c:	930a      	str	r3, [sp, #40]	; 0x28
    c97e:	9b02      	ldr	r3, [sp, #8]
    c980:	689b      	ldr	r3, [r3, #8]
    c982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c984:	429a      	cmp	r2, r3
    c986:	d3ed      	bcc.n	c964 <FlexCAN_SetTxMsgBuff+0xc0>
            }
        #if (FLEXCAN_IP_FEATURE_HAS_FD == STD_ON)
            Payload_Size = FlexCAN_ComputePayloadSize(Dlc_Value);
    c988:	f89d 3013 	ldrb.w	r3, [sp, #19]
    c98c:	4618      	mov	r0, r3
    c98e:	f7ff f9ee 	bl	bd6e <FlexCAN_ComputePayloadSize>
    c992:	4603      	mov	r3, r0
    c994:	f88d 3012 	strb.w	r3, [sp, #18]
            /* Add padding, if needed */
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    c998:	9b02      	ldr	r3, [sp, #8]
    c99a:	689b      	ldr	r3, [r3, #8]
    c99c:	930a      	str	r3, [sp, #40]	; 0x28
    c99e:	e00a      	b.n	c9b6 <FlexCAN_SetTxMsgBuff+0x112>
            {
                Flexcan_Mb_Data[FLEXCAN_IP_SWAP_BYTES_IN_WORD_INDEX(DataByte)] = cs->fd_padding;
    c9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c9a2:	f083 0303 	eor.w	r3, r3, #3
    c9a6:	9a07      	ldr	r2, [sp, #28]
    c9a8:	4413      	add	r3, r2
    c9aa:	9a02      	ldr	r2, [sp, #8]
    c9ac:	7b52      	ldrb	r2, [r2, #13]
    c9ae:	701a      	strb	r2, [r3, #0]
            for (DataByte = cs->dataLen; DataByte < Payload_Size; DataByte++)
    c9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c9b2:	3301      	adds	r3, #1
    c9b4:	930a      	str	r3, [sp, #40]	; 0x28
    c9b6:	f89d 3012 	ldrb.w	r3, [sp, #18]
    c9ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c9bc:	429a      	cmp	r2, r3
    c9be:	d3ef      	bcc.n	c9a0 <FlexCAN_SetTxMsgBuff+0xfc>
            }
        #endif /* FLEXCAN_IP_FEATURE_HAS_FD */
        }
        /* Set the ID according the format structure */
        if (FLEXCAN_MSG_ID_EXT == cs->msgIdType)
    c9c0:	9b02      	ldr	r3, [sp, #8]
    c9c2:	685b      	ldr	r3, [r3, #4]
    c9c4:	2b01      	cmp	r3, #1
    c9c6:	d111      	bne.n	c9ec <FlexCAN_SetTxMsgBuff+0x148>
        {
            /* ID [28-0] */
            *Flexcan_Mb_Id &= ~(FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK);
    c9c8:	9b08      	ldr	r3, [sp, #32]
    c9ca:	681b      	ldr	r3, [r3, #0]
    c9cc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
    c9d0:	9b08      	ldr	r3, [sp, #32]
    c9d2:	601a      	str	r2, [r3, #0]
            *Flexcan_Mb_Id |= (msgId & (FLEXCAN_IP_ID_STD_MASK | FLEXCAN_IP_ID_EXT_MASK));
    c9d4:	9b08      	ldr	r3, [sp, #32]
    c9d6:	681a      	ldr	r2, [r3, #0]
    c9d8:	9b01      	ldr	r3, [sp, #4]
    c9da:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    c9de:	431a      	orrs	r2, r3
    c9e0:	9b08      	ldr	r3, [sp, #32]
    c9e2:	601a      	str	r2, [r3, #0]
            /* Set IDE and SRR bit*/
            Flexcan_Mb_Config |= (FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    c9e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c9e6:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
    c9ea:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        if (FLEXCAN_MSG_ID_STD == cs->msgIdType)
    c9ec:	9b02      	ldr	r3, [sp, #8]
    c9ee:	685b      	ldr	r3, [r3, #4]
    c9f0:	2b00      	cmp	r3, #0
    c9f2:	d114      	bne.n	ca1e <FlexCAN_SetTxMsgBuff+0x17a>
        {
            /* ID[28-18] */
            *Flexcan_Mb_Id &= ~FLEXCAN_IP_ID_STD_MASK;
    c9f4:	9b08      	ldr	r3, [sp, #32]
    c9f6:	681b      	ldr	r3, [r3, #0]
    c9f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
    c9fc:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
    ca00:	9a08      	ldr	r2, [sp, #32]
    ca02:	6013      	str	r3, [r2, #0]
            *Flexcan_Mb_Id |= (msgId << FLEXCAN_IP_ID_STD_SHIFT) & FLEXCAN_IP_ID_STD_MASK;
    ca04:	9b08      	ldr	r3, [sp, #32]
    ca06:	681a      	ldr	r2, [r3, #0]
    ca08:	9b01      	ldr	r3, [sp, #4]
    ca0a:	0499      	lsls	r1, r3, #18
    ca0c:	4b2b      	ldr	r3, [pc, #172]	; (cabc <FlexCAN_SetTxMsgBuff+0x218>)
    ca0e:	400b      	ands	r3, r1
    ca10:	431a      	orrs	r2, r3
    ca12:	9b08      	ldr	r3, [sp, #32]
    ca14:	601a      	str	r2, [r3, #0]
            /* make sure IDE and SRR are not set */
            Flexcan_Mb_Config &= ~(FLEXCAN_IP_CS_IDE_MASK | FLEXCAN_IP_CS_SRR_MASK);
    ca16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca18:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
    ca1c:	930b      	str	r3, [sp, #44]	; 0x2c
        }
        /* Set the length of data in bytes */
        Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_DLC_MASK;
    ca1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca20:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    ca24:	930b      	str	r3, [sp, #44]	; 0x2c
        Flexcan_Mb_Config |= ((uint32)Dlc_Value << FLEXCAN_IP_CS_DLC_SHIFT) & FLEXCAN_IP_CS_DLC_MASK;
    ca26:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ca2a:	041b      	lsls	r3, r3, #16
    ca2c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    ca30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca32:	4313      	orrs	r3, r2
    ca34:	930b      	str	r3, [sp, #44]	; 0x2c
        /* Set MB CODE */
        if (cs->code != (uint32)FLEXCAN_TX_NOT_USED)
    ca36:	9b02      	ldr	r3, [sp, #8]
    ca38:	681b      	ldr	r3, [r3, #0]
    ca3a:	2b0f      	cmp	r3, #15
    ca3c:	d03a      	beq.n	cab4 <FlexCAN_SetTxMsgBuff+0x210>
        {
            if ((uint32)FLEXCAN_TX_REMOTE == cs->code)
    ca3e:	9b02      	ldr	r3, [sp, #8]
    ca40:	681b      	ldr	r3, [r3, #0]
    ca42:	2b1c      	cmp	r3, #28
    ca44:	d104      	bne.n	ca50 <FlexCAN_SetTxMsgBuff+0x1ac>
            {
                /* Set RTR bit */
                Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    ca46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ca4c:	930b      	str	r3, [sp, #44]	; 0x2c
    ca4e:	e007      	b.n	ca60 <FlexCAN_SetTxMsgBuff+0x1bc>
            }
            else
            {
                if (TRUE == isRemote)
    ca50:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    ca54:	2b00      	cmp	r3, #0
    ca56:	d003      	beq.n	ca60 <FlexCAN_SetTxMsgBuff+0x1bc>
                {
                    /* Set RTR bit */
                    Flexcan_Mb_Config |= FLEXCAN_IP_CS_RTR_MASK;
    ca58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ca5e:	930b      	str	r3, [sp, #44]	; 0x2c
                }
            }
            /* Reset the code */
            Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_CODE_MASK;
    ca60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca62:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    ca66:	930b      	str	r3, [sp, #44]	; 0x2c
            /* Set the code */
            if (cs->fd_enable)
    ca68:	9b02      	ldr	r3, [sp, #8]
    ca6a:	7b1b      	ldrb	r3, [r3, #12]
    ca6c:	2b00      	cmp	r3, #0
    ca6e:	d00e      	beq.n	ca8e <FlexCAN_SetTxMsgBuff+0x1ea>
            {
                Flexcan_Mb_Config |= ((cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK) | FLEXCAN_IP_MB_EDL_MASK;
    ca70:	9b02      	ldr	r3, [sp, #8]
    ca72:	681b      	ldr	r3, [r3, #0]
    ca74:	061b      	lsls	r3, r3, #24
    ca76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    ca7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca7c:	4313      	orrs	r3, r2
    ca7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ca82:	930b      	str	r3, [sp, #44]	; 0x2c
                /* In case of FD frame not supported RTR */
                Flexcan_Mb_Config &= ~FLEXCAN_IP_CS_RTR_MASK;
    ca84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca86:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    ca8a:	930b      	str	r3, [sp, #44]	; 0x2c
    ca8c:	e007      	b.n	ca9e <FlexCAN_SetTxMsgBuff+0x1fa>
            }
            else
            {
                Flexcan_Mb_Config |= (cs->code << FLEXCAN_IP_CS_CODE_SHIFT) & FLEXCAN_IP_CS_CODE_MASK;
    ca8e:	9b02      	ldr	r3, [sp, #8]
    ca90:	681b      	ldr	r3, [r3, #0]
    ca92:	061b      	lsls	r3, r3, #24
    ca94:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    ca98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ca9a:	4313      	orrs	r3, r2
    ca9c:	930b      	str	r3, [sp, #44]	; 0x2c
            }

            if (cs->enable_brs)
    ca9e:	9b02      	ldr	r3, [sp, #8]
    caa0:	7b9b      	ldrb	r3, [r3, #14]
    caa2:	2b00      	cmp	r3, #0
    caa4:	d003      	beq.n	caae <FlexCAN_SetTxMsgBuff+0x20a>
            {
                Flexcan_Mb_Config |= FLEXCAN_IP_MB_BRS_MASK;
    caa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    caa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    caac:	930b      	str	r3, [sp, #44]	; 0x2c
            }
            *Flexcan_Mb = Flexcan_Mb_Config;
    caae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cab0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cab2:	601a      	str	r2, [r3, #0]
        }
}
    cab4:	bf00      	nop
    cab6:	b00d      	add	sp, #52	; 0x34
    cab8:	f85d fb04 	ldr.w	pc, [sp], #4
    cabc:	1ffc0000 	.word	0x1ffc0000

0000cac0 <FlexCAN_SetMaxMsgBuffNum>:
 * Description   : Set the number of the last Message Buffers.
 * This function will define the number of the last Message Buffers
 *
 *END***************************************************************************/
Flexcan_Ip_StatusType FlexCAN_SetMaxMsgBuffNum(FLEXCAN_Type * base, uint32 maxMsgBuffNum)
{
    cac0:	b500      	push	{lr}
    cac2:	b08f      	sub	sp, #60	; 0x3c
    cac4:	9001      	str	r0, [sp, #4]
    cac6:	9100      	str	r1, [sp, #0]
    uint32 MsgBuffIdx;
    uint32 DataByte;
    const volatile uint32 * RAM = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    cac8:	9b01      	ldr	r3, [sp, #4]
    caca:	3380      	adds	r3, #128	; 0x80
    cacc:	930a      	str	r3, [sp, #40]	; 0x28
#if (STD_ON == FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY)
    const volatile uint32 * RAM_EXPANDED = (uint32*)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_EXP_RAM_OFFSET);
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */
    const volatile uint32 * ValEndMbPointer = NULL_PTR;
    cace:	2300      	movs	r3, #0
    cad0:	9309      	str	r3, [sp, #36]	; 0x24
    volatile uint32 *Flexcan_Mb = NULL_PTR;
    cad2:	2300      	movs	r3, #0
    cad4:	9308      	str	r3, [sp, #32]
    volatile uint32 *Flexcan_Mb_Id   = NULL_PTR ;
    cad6:	2300      	movs	r3, #0
    cad8:	9307      	str	r3, [sp, #28]
    volatile uint8  *Flexcan_Mb_Data = NULL_PTR;
    cada:	2300      	movs	r3, #0
    cadc:	9306      	str	r3, [sp, #24]
    uint8 Arbitration_Field_Size = 8U;
    cade:	2308      	movs	r3, #8
    cae0:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8 Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, maxMsgBuffNum - (uint32)1U);
    cae4:	9b00      	ldr	r3, [sp, #0]
    cae6:	3b01      	subs	r3, #1
    cae8:	4619      	mov	r1, r3
    caea:	9801      	ldr	r0, [sp, #4]
    caec:	f7ff fcb6 	bl	c45c <FlexCAN_GetMbPayloadSize>
    caf0:	4603      	mov	r3, r0
    caf2:	f88d 3016 	strb.w	r3, [sp, #22]
    Flexcan_Ip_PtrSizeType ValEndMb = 0U;
    caf6:	2300      	movs	r3, #0
    caf8:	9304      	str	r3, [sp, #16]
    Flexcan_Ip_PtrSizeType ValEndRam = 0U;
    cafa:	2300      	movs	r3, #0
    cafc:	9303      	str	r3, [sp, #12]
    Flexcan_Ip_StatusType Status = FLEXCAN_STATUS_SUCCESS;
    cafe:	2300      	movs	r3, #0
    cb00:	930b      	str	r3, [sp, #44]	; 0x2c

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(maxMsgBuffNum>0U);
    #endif

    ValEndMbPointer = FlexCAN_GetMsgBuffRegion(base, (maxMsgBuffNum - (uint32)1U));
    cb02:	9b00      	ldr	r3, [sp, #0]
    cb04:	3b01      	subs	r3, #1
    cb06:	4619      	mov	r1, r3
    cb08:	9801      	ldr	r0, [sp, #4]
    cb0a:	f7ff f979 	bl	be00 <FlexCAN_GetMsgBuffRegion>
    cb0e:	9009      	str	r0, [sp, #36]	; 0x24

    ValEndMb = (Flexcan_Ip_PtrSizeType)ValEndMbPointer + Can_Real_Payload + Arbitration_Field_Size;
    cb10:	f89d 2016 	ldrb.w	r2, [sp, #22]
    cb14:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb16:	441a      	add	r2, r3
    cb18:	f89d 3017 	ldrb.w	r3, [sp, #23]
    cb1c:	4413      	add	r3, r2
    cb1e:	9304      	str	r3, [sp, #16]
    else
    {
        ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    }
#else
    ValEndRam = (Flexcan_Ip_PtrSizeType)&RAM[(FlexCAN_GetMaxMbNum(base) * 4U)];
    cb20:	9801      	ldr	r0, [sp, #4]
    cb22:	f7ff f9e7 	bl	bef4 <FlexCAN_GetMaxMbNum>
    cb26:	4603      	mov	r3, r0
    cb28:	011b      	lsls	r3, r3, #4
    cb2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cb2c:	4413      	add	r3, r2
    cb2e:	9303      	str	r3, [sp, #12]
#endif /* FLEXCAN_IP_FEATURE_HAS_EXPANDABLE_MEMORY */

    if ((ValEndMb > ValEndRam) || (maxMsgBuffNum > FlexCAN_GetMaxMbNum(base)))
    cb30:	9a04      	ldr	r2, [sp, #16]
    cb32:	9b03      	ldr	r3, [sp, #12]
    cb34:	429a      	cmp	r2, r3
    cb36:	d806      	bhi.n	cb46 <FlexCAN_SetMaxMsgBuffNum+0x86>
    cb38:	9801      	ldr	r0, [sp, #4]
    cb3a:	f7ff f9db 	bl	bef4 <FlexCAN_GetMaxMbNum>
    cb3e:	4602      	mov	r2, r0
    cb40:	9b00      	ldr	r3, [sp, #0]
    cb42:	4293      	cmp	r3, r2
    cb44:	d901      	bls.n	cb4a <FlexCAN_SetMaxMsgBuffNum+0x8a>
    {
        Status = FLEXCAN_STATUS_BUFF_OUT_OF_RANGE;
    cb46:	2304      	movs	r3, #4
    cb48:	930b      	str	r3, [sp, #44]	; 0x2c
    }

    if (FLEXCAN_STATUS_SUCCESS == Status)
    cb4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cb4c:	2b00      	cmp	r3, #0
    cb4e:	d142      	bne.n	cbd6 <FlexCAN_SetMaxMsgBuffNum+0x116>
    {
        /* Set the maximum number of MBs*/
        base->MCR = (base->MCR & ~FLEXCAN_MCR_MAXMB_MASK) | (((maxMsgBuffNum-1U) << FLEXCAN_MCR_MAXMB_SHIFT) & FLEXCAN_MCR_MAXMB_MASK);
    cb50:	9b01      	ldr	r3, [sp, #4]
    cb52:	681b      	ldr	r3, [r3, #0]
    cb54:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
    cb58:	9b00      	ldr	r3, [sp, #0]
    cb5a:	3b01      	subs	r3, #1
    cb5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    cb60:	431a      	orrs	r2, r3
    cb62:	9b01      	ldr	r3, [sp, #4]
    cb64:	601a      	str	r2, [r3, #0]
        if (!(((base->MCR & FLEXCAN_MCR_RFEN_MASK) >> FLEXCAN_MCR_RFEN_SHIFT) != 0U))
    cb66:	9b01      	ldr	r3, [sp, #4]
    cb68:	681b      	ldr	r3, [r3, #0]
    cb6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    cb6e:	2b00      	cmp	r3, #0
    cb70:	d131      	bne.n	cbd6 <FlexCAN_SetMaxMsgBuffNum+0x116>
        {
            /* Initialize all message buffers as inactive */
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    cb72:	2300      	movs	r3, #0
    cb74:	930d      	str	r3, [sp, #52]	; 0x34
    cb76:	e02a      	b.n	cbce <FlexCAN_SetMaxMsgBuffNum+0x10e>
            {
                Flexcan_Mb = FlexCAN_GetMsgBuffRegion(base, MsgBuffIdx);
    cb78:	990d      	ldr	r1, [sp, #52]	; 0x34
    cb7a:	9801      	ldr	r0, [sp, #4]
    cb7c:	f7ff f940 	bl	be00 <FlexCAN_GetMsgBuffRegion>
    cb80:	9008      	str	r0, [sp, #32]
                Flexcan_Mb_Id   = &Flexcan_Mb[1];
    cb82:	9b08      	ldr	r3, [sp, #32]
    cb84:	3304      	adds	r3, #4
    cb86:	9307      	str	r3, [sp, #28]
                Flexcan_Mb_Data = (volatile uint8*)(&Flexcan_Mb[2]);
    cb88:	9b08      	ldr	r3, [sp, #32]
    cb8a:	3308      	adds	r3, #8
    cb8c:	9306      	str	r3, [sp, #24]
                *Flexcan_Mb = 0x0U;
    cb8e:	9b08      	ldr	r3, [sp, #32]
    cb90:	2200      	movs	r2, #0
    cb92:	601a      	str	r2, [r3, #0]
                *Flexcan_Mb_Id = 0x0U;
    cb94:	9b07      	ldr	r3, [sp, #28]
    cb96:	2200      	movs	r2, #0
    cb98:	601a      	str	r2, [r3, #0]
                Can_Real_Payload = FlexCAN_GetMbPayloadSize(base, MsgBuffIdx);
    cb9a:	990d      	ldr	r1, [sp, #52]	; 0x34
    cb9c:	9801      	ldr	r0, [sp, #4]
    cb9e:	f7ff fc5d 	bl	c45c <FlexCAN_GetMbPayloadSize>
    cba2:	4603      	mov	r3, r0
    cba4:	f88d 3016 	strb.w	r3, [sp, #22]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    cba8:	2300      	movs	r3, #0
    cbaa:	930c      	str	r3, [sp, #48]	; 0x30
    cbac:	e007      	b.n	cbbe <FlexCAN_SetMaxMsgBuffNum+0xfe>
                {
                   Flexcan_Mb_Data[DataByte] = 0x0U;
    cbae:	9a06      	ldr	r2, [sp, #24]
    cbb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cbb2:	4413      	add	r3, r2
    cbb4:	2200      	movs	r2, #0
    cbb6:	701a      	strb	r2, [r3, #0]
                for (DataByte = 0; DataByte < Can_Real_Payload; DataByte++)
    cbb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cbba:	3301      	adds	r3, #1
    cbbc:	930c      	str	r3, [sp, #48]	; 0x30
    cbbe:	f89d 3016 	ldrb.w	r3, [sp, #22]
    cbc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cbc4:	429a      	cmp	r2, r3
    cbc6:	d3f2      	bcc.n	cbae <FlexCAN_SetMaxMsgBuffNum+0xee>
            for (MsgBuffIdx = 0; MsgBuffIdx < maxMsgBuffNum; MsgBuffIdx++)
    cbc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cbca:	3301      	adds	r3, #1
    cbcc:	930d      	str	r3, [sp, #52]	; 0x34
    cbce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cbd0:	9b00      	ldr	r3, [sp, #0]
    cbd2:	429a      	cmp	r2, r3
    cbd4:	d3d0      	bcc.n	cb78 <FlexCAN_SetMaxMsgBuffNum+0xb8>
                }
            }
        }
    }
    return Status;
    cbd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}
    cbd8:	4618      	mov	r0, r3
    cbda:	b00f      	add	sp, #60	; 0x3c
    cbdc:	f85d fb04 	ldr.w	pc, [sp], #4

0000cbe0 <FlexCAN_SetOperationMode>:
 * Description   : Enable a FlexCAN operation mode.
 * This function will enable one of the modes listed in flexcan_operation_modes_t.
 *
 *END**************************************************************************/
void FlexCAN_SetOperationMode(FLEXCAN_Type * base, Flexcan_Ip_ModesType mode)
{
    cbe0:	b500      	push	{lr}
    cbe2:	b083      	sub	sp, #12
    cbe4:	9001      	str	r0, [sp, #4]
    cbe6:	9100      	str	r1, [sp, #0]
    switch (mode)
    cbe8:	9b00      	ldr	r3, [sp, #0]
    cbea:	2b02      	cmp	r3, #2
    cbec:	d01d      	beq.n	cc2a <FlexCAN_SetOperationMode+0x4a>
    cbee:	9b00      	ldr	r3, [sp, #0]
    cbf0:	2b02      	cmp	r3, #2
    cbf2:	d82b      	bhi.n	cc4c <FlexCAN_SetOperationMode+0x6c>
    cbf4:	9b00      	ldr	r3, [sp, #0]
    cbf6:	2b00      	cmp	r3, #0
    cbf8:	d003      	beq.n	cc02 <FlexCAN_SetOperationMode+0x22>
    cbfa:	9b00      	ldr	r3, [sp, #0]
    cbfc:	2b01      	cmp	r3, #1
    cbfe:	d00d      	beq.n	cc1c <FlexCAN_SetOperationMode+0x3c>
            /* Enable Self Reception */
            FlexCAN_SetSelfReception(base, TRUE);
            break;
        default:
            /* Should not get here */
            break;
    cc00:	e024      	b.n	cc4c <FlexCAN_SetOperationMode+0x6c>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    cc02:	9b01      	ldr	r3, [sp, #4]
    cc04:	685b      	ldr	r3, [r3, #4]
    cc06:	f023 0208 	bic.w	r2, r3, #8
    cc0a:	9b01      	ldr	r3, [sp, #4]
    cc0c:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(0U);
    cc0e:	9b01      	ldr	r3, [sp, #4]
    cc10:	685b      	ldr	r3, [r3, #4]
    cc12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    cc16:	9b01      	ldr	r3, [sp, #4]
    cc18:	605a      	str	r2, [r3, #4]
            break;
    cc1a:	e018      	b.n	cc4e <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(1U);
    cc1c:	9b01      	ldr	r3, [sp, #4]
    cc1e:	685b      	ldr	r3, [r3, #4]
    cc20:	f043 0208 	orr.w	r2, r3, #8
    cc24:	9b01      	ldr	r3, [sp, #4]
    cc26:	605a      	str	r2, [r3, #4]
            break;
    cc28:	e011      	b.n	cc4e <FlexCAN_SetOperationMode+0x6e>
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LPB_MASK) | FLEXCAN_CTRL1_LPB(1U);
    cc2a:	9b01      	ldr	r3, [sp, #4]
    cc2c:	685b      	ldr	r3, [r3, #4]
    cc2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    cc32:	9b01      	ldr	r3, [sp, #4]
    cc34:	605a      	str	r2, [r3, #4]
            base->CTRL1 = (base->CTRL1 & ~FLEXCAN_CTRL1_LOM_MASK) | FLEXCAN_CTRL1_LOM(0U);
    cc36:	9b01      	ldr	r3, [sp, #4]
    cc38:	685b      	ldr	r3, [r3, #4]
    cc3a:	f023 0208 	bic.w	r2, r3, #8
    cc3e:	9b01      	ldr	r3, [sp, #4]
    cc40:	605a      	str	r2, [r3, #4]
            FlexCAN_SetSelfReception(base, TRUE);
    cc42:	2101      	movs	r1, #1
    cc44:	9801      	ldr	r0, [sp, #4]
    cc46:	f7fe ff7f 	bl	bb48 <FlexCAN_SetSelfReception>
            break;
    cc4a:	e000      	b.n	cc4e <FlexCAN_SetOperationMode+0x6e>
            break;
    cc4c:	bf00      	nop
    }
}
    cc4e:	bf00      	nop
    cc50:	b003      	add	sp, #12
    cc52:	f85d fb04 	ldr.w	pc, [sp], #4

0000cc56 <FlexCAN_SetRxFifoFilter>:
 *END**************************************************************************/
void FlexCAN_SetRxFifoFilter(FLEXCAN_Type * base,
                             Flexcan_Ip_RxFifoIdElementFormatType idFormat,
                             const Flexcan_Ip_IdTableType * idFilterTable
                            )
{
    cc56:	b500      	push	{lr}
    cc58:	b08d      	sub	sp, #52	; 0x34
    cc5a:	9003      	str	r0, [sp, #12]
    cc5c:	9102      	str	r1, [sp, #8]
    cc5e:	9201      	str	r2, [sp, #4]

    /* Set RX FIFO ID filter table elements*/
    uint32 i, j, NumOfFilters;
    uint32 Val1 = 0UL, Val2 = 0UL, Val = 0UL;
    cc60:	2300      	movs	r3, #0
    cc62:	9309      	str	r3, [sp, #36]	; 0x24
    cc64:	2300      	movs	r3, #0
    cc66:	9308      	str	r3, [sp, #32]
    cc68:	2300      	movs	r3, #0
    cc6a:	9307      	str	r3, [sp, #28]
    volatile uint32 * FilterTable = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_RX_FIFO_FILTER_TABLE_OFFSET);
    cc6c:	9b03      	ldr	r3, [sp, #12]
    cc6e:	33e0      	adds	r3, #224	; 0xe0
    cc70:	9306      	str	r3, [sp, #24]

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert((idFilterTable != NULL_PTR) || (FLEXCAN_RX_FIFO_ID_FORMAT_D == idFormat));
    #endif

    NumOfFilters = (((base->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    cc72:	9b03      	ldr	r3, [sp, #12]
    cc74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    cc76:	0e1b      	lsrs	r3, r3, #24
    cc78:	f003 030f 	and.w	r3, r3, #15
    cc7c:	9305      	str	r3, [sp, #20]
    cc7e:	9b02      	ldr	r3, [sp, #8]
    cc80:	2b03      	cmp	r3, #3
    cc82:	f200 81e7 	bhi.w	d054 <FlexCAN_SetRxFifoFilter+0x3fe>
    cc86:	a201      	add	r2, pc, #4	; (adr r2, cc8c <FlexCAN_SetRxFifoFilter+0x36>)
    cc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cc8c:	0000cc9d 	.word	0x0000cc9d
    cc90:	0000cd37 	.word	0x0000cd37
    cc94:	0000ce71 	.word	0x0000ce71
    cc98:	0000d03f 	.word	0x0000d03f
    switch (idFormat)
    {
        case (FLEXCAN_RX_FIFO_ID_FORMAT_A):
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    cc9c:	f000 ffb4 	bl	dc08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            /* One full ID (standard and extended) per ID Filter Table element.*/
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    cca0:	9b03      	ldr	r3, [sp, #12]
    cca2:	681b      	ldr	r3, [r3, #0]
    cca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
            (base->MCR) =
    cca8:	9b03      	ldr	r3, [sp, #12]
    ccaa:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_A)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ccac:	f000 ffd8 	bl	dc60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    ccb0:	2300      	movs	r3, #0
    ccb2:	930b      	str	r3, [sp, #44]	; 0x2c
    ccb4:	e038      	b.n	cd28 <FlexCAN_SetRxFifoFilter+0xd2>
            {
                Val = 0UL;
    ccb6:	2300      	movs	r3, #0
    ccb8:	9307      	str	r3, [sp, #28]

                if (idFilterTable[i].isRemoteFrame)
    ccba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccbc:	00db      	lsls	r3, r3, #3
    ccbe:	9a01      	ldr	r2, [sp, #4]
    ccc0:	4413      	add	r3, r2
    ccc2:	781b      	ldrb	r3, [r3, #0]
    ccc4:	2b00      	cmp	r3, #0
    ccc6:	d002      	beq.n	ccce <FlexCAN_SetRxFifoFilter+0x78>
                {
                    Val = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    ccc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    cccc:	9307      	str	r3, [sp, #28]
                }

                if (idFilterTable[i].isExtendedFrame)
    ccce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccd0:	00db      	lsls	r3, r3, #3
    ccd2:	9a01      	ldr	r2, [sp, #4]
    ccd4:	4413      	add	r3, r2
    ccd6:	785b      	ldrb	r3, [r3, #1]
    ccd8:	2b00      	cmp	r3, #0
    ccda:	d013      	beq.n	cd04 <FlexCAN_SetRxFifoFilter+0xae>
                {
                    Val |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    ccdc:	9b07      	ldr	r3, [sp, #28]
    ccde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    cce2:	9307      	str	r3, [sp, #28]
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT) &
    cce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cce6:	00db      	lsls	r3, r3, #3
    cce8:	9a01      	ldr	r2, [sp, #4]
    ccea:	4413      	add	r3, r2
    ccec:	685b      	ldr	r3, [r3, #4]
    ccee:	005b      	lsls	r3, r3, #1
    ccf0:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    ccf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccf6:	009b      	lsls	r3, r3, #2
    ccf8:	9a06      	ldr	r2, [sp, #24]
    ccfa:	4413      	add	r3, r2
    ccfc:	9a07      	ldr	r2, [sp, #28]
    ccfe:	440a      	add	r2, r1
    cd00:	601a      	str	r2, [r3, #0]
    cd02:	e00e      	b.n	cd22 <FlexCAN_SetRxFifoFilter+0xcc>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
                                           );
                }
                else
                {
                    FilterTable[i] = Val + ((idFilterTable[i].id << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT) &
    cd04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd06:	00db      	lsls	r3, r3, #3
    cd08:	9a01      	ldr	r2, [sp, #4]
    cd0a:	4413      	add	r3, r2
    cd0c:	685b      	ldr	r3, [r3, #4]
    cd0e:	04da      	lsls	r2, r3, #19
    cd10:	4b9d      	ldr	r3, [pc, #628]	; (cf88 <FlexCAN_SetRxFifoFilter+0x332>)
    cd12:	4013      	ands	r3, r2
    cd14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd16:	0092      	lsls	r2, r2, #2
    cd18:	9906      	ldr	r1, [sp, #24]
    cd1a:	440a      	add	r2, r1
    cd1c:	9907      	ldr	r1, [sp, #28]
    cd1e:	440b      	add	r3, r1
    cd20:	6013      	str	r3, [r2, #0]
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    cd22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cd24:	3301      	adds	r3, #1
    cd26:	930b      	str	r3, [sp, #44]	; 0x2c
    cd28:	9b05      	ldr	r3, [sp, #20]
    cd2a:	3301      	adds	r3, #1
    cd2c:	00db      	lsls	r3, r3, #3
    cd2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cd30:	429a      	cmp	r2, r3
    cd32:	d3c0      	bcc.n	ccb6 <FlexCAN_SetRxFifoFilter+0x60>
                                             FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
                                           );
                }
            }
            break;
    cd34:	e18f      	b.n	d056 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_B):
            /* Two full standard IDs or two partial 14-bit (standard and extended) IDs*/
            /* per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    cd36:	f000 ff67 	bl	dc08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) | ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_B)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK)));
    cd3a:	9b03      	ldr	r3, [sp, #12]
    cd3c:	681b      	ldr	r3, [r3, #0]
    cd3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    cd42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
            (base->MCR) =
    cd46:	9b03      	ldr	r3, [sp, #12]
    cd48:	601a      	str	r2, [r3, #0]
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    cd4a:	f000 ff89 	bl	dc60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    cd4e:	2300      	movs	r3, #0
    cd50:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    cd52:	2300      	movs	r3, #0
    cd54:	930b      	str	r3, [sp, #44]	; 0x2c
    cd56:	e083      	b.n	ce60 <FlexCAN_SetRxFifoFilter+0x20a>
            {
                Val1 = 0U;
    cd58:	2300      	movs	r3, #0
    cd5a:	9309      	str	r3, [sp, #36]	; 0x24
                Val2 = 0U;
    cd5c:	2300      	movs	r3, #0
    cd5e:	9308      	str	r3, [sp, #32]

                if (idFilterTable[j].isRemoteFrame)
    cd60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd62:	00db      	lsls	r3, r3, #3
    cd64:	9a01      	ldr	r2, [sp, #4]
    cd66:	4413      	add	r3, r2
    cd68:	781b      	ldrb	r3, [r3, #0]
    cd6a:	2b00      	cmp	r3, #0
    cd6c:	d002      	beq.n	cd74 <FlexCAN_SetRxFifoFilter+0x11e>
                {
                    Val1 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT;
    cd6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    cd72:	9309      	str	r3, [sp, #36]	; 0x24
                }

                if (idFilterTable[j + 1U].isRemoteFrame)
    cd74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd76:	3301      	adds	r3, #1
    cd78:	00db      	lsls	r3, r3, #3
    cd7a:	9a01      	ldr	r2, [sp, #4]
    cd7c:	4413      	add	r3, r2
    cd7e:	781b      	ldrb	r3, [r3, #0]
    cd80:	2b00      	cmp	r3, #0
    cd82:	d002      	beq.n	cd8a <FlexCAN_SetRxFifoFilter+0x134>
                {
                    Val2 = FLEXCAN_IP_RX_FIFO_ACCEPT_REMOTE_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT;
    cd84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    cd88:	9308      	str	r3, [sp, #32]
                }

                if (idFilterTable[j].isExtendedFrame)
    cd8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd8c:	00db      	lsls	r3, r3, #3
    cd8e:	9a01      	ldr	r2, [sp, #4]
    cd90:	4413      	add	r3, r2
    cd92:	785b      	ldrb	r3, [r3, #1]
    cd94:	2b00      	cmp	r3, #0
    cd96:	d014      	beq.n	cdc2 <FlexCAN_SetRxFifoFilter+0x16c>
                {
                    Val1 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT;
    cd98:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    cd9e:	9309      	str	r3, [sp, #36]	; 0x24

                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    cda0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cda2:	00db      	lsls	r3, r3, #3
    cda4:	9a01      	ldr	r2, [sp, #4]
    cda6:	4413      	add	r3, r2
    cda8:	685b      	ldr	r3, [r3, #4]
    cdaa:	0bdb      	lsrs	r3, r3, #15
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
    cdac:	041a      	lsls	r2, r3, #16
    cdae:	4b77      	ldr	r3, [pc, #476]	; (cf8c <FlexCAN_SetRxFifoFilter+0x336>)
    cdb0:	4013      	ands	r3, r2
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    cdb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cdb4:	0092      	lsls	r2, r2, #2
    cdb6:	9906      	ldr	r1, [sp, #24]
    cdb8:	440a      	add	r2, r1
    cdba:	9909      	ldr	r1, [sp, #36]	; 0x24
    cdbc:	440b      	add	r3, r1
    cdbe:	6013      	str	r3, [r2, #0]
    cdc0:	e00e      	b.n	cde0 <FlexCAN_SetRxFifoFilter+0x18a>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + ((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    cdc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cdc4:	00db      	lsls	r3, r3, #3
    cdc6:	9a01      	ldr	r2, [sp, #4]
    cdc8:	4413      	add	r3, r2
    cdca:	685b      	ldr	r3, [r3, #4]
    cdcc:	04da      	lsls	r2, r3, #19
    cdce:	4b6e      	ldr	r3, [pc, #440]	; (cf88 <FlexCAN_SetRxFifoFilter+0x332>)
    cdd0:	4013      	ands	r3, r2
    cdd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cdd4:	0092      	lsls	r2, r2, #2
    cdd6:	9906      	ldr	r1, [sp, #24]
    cdd8:	440a      	add	r2, r1
    cdda:	9909      	ldr	r1, [sp, #36]	; 0x24
    cddc:	440b      	add	r3, r1
    cdde:	6013      	str	r3, [r2, #0]
                                              FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    cde0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cde2:	3301      	adds	r3, #1
    cde4:	00db      	lsls	r3, r3, #3
    cde6:	9a01      	ldr	r2, [sp, #4]
    cde8:	4413      	add	r3, r2
    cdea:	785b      	ldrb	r3, [r3, #1]
    cdec:	2b00      	cmp	r3, #0
    cdee:	d01a      	beq.n	ce26 <FlexCAN_SetRxFifoFilter+0x1d0>
                {
                    Val2 |= FLEXCAN_IP_RX_FIFO_ACCEPT_EXT_FRAME << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT;
    cdf0:	9b08      	ldr	r3, [sp, #32]
    cdf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    cdf6:	9308      	str	r3, [sp, #32]

                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    cdf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cdfa:	009b      	lsls	r3, r3, #2
    cdfc:	9a06      	ldr	r2, [sp, #24]
    cdfe:	4413      	add	r3, r2
    ce00:	6819      	ldr	r1, [r3, #0]
    ce02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce04:	3301      	adds	r3, #1
    ce06:	00db      	lsls	r3, r3, #3
    ce08:	9a01      	ldr	r2, [sp, #4]
    ce0a:	4413      	add	r3, r2
    ce0c:	685b      	ldr	r3, [r3, #4]
    ce0e:	0bdb      	lsrs	r3, r3, #15
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
    ce10:	f3c3 020d 	ubfx	r2, r3, #0, #14
                    FilterTable[i] |= Val2 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK) >>
    ce14:	9b08      	ldr	r3, [sp, #32]
    ce16:	441a      	add	r2, r3
    ce18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce1a:	009b      	lsls	r3, r3, #2
    ce1c:	9806      	ldr	r0, [sp, #24]
    ce1e:	4403      	add	r3, r0
    ce20:	430a      	orrs	r2, r1
    ce22:	601a      	str	r2, [r3, #0]
    ce24:	e016      	b.n	ce54 <FlexCAN_SetRxFifoFilter+0x1fe>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val2 + ((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_MASK) <<
    ce26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce28:	009b      	lsls	r3, r3, #2
    ce2a:	9a06      	ldr	r2, [sp, #24]
    ce2c:	4413      	add	r3, r2
    ce2e:	6819      	ldr	r1, [r3, #0]
    ce30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce32:	3301      	adds	r3, #1
    ce34:	00db      	lsls	r3, r3, #3
    ce36:	9a01      	ldr	r2, [sp, #4]
    ce38:	4413      	add	r3, r2
    ce3a:	685b      	ldr	r3, [r3, #4]
    ce3c:	00da      	lsls	r2, r3, #3
    ce3e:	f643 73f8 	movw	r3, #16376	; 0x3ff8
    ce42:	4013      	ands	r3, r2
    ce44:	9a08      	ldr	r2, [sp, #32]
    ce46:	441a      	add	r2, r3
    ce48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce4a:	009b      	lsls	r3, r3, #2
    ce4c:	9806      	ldr	r0, [sp, #24]
    ce4e:	4403      	add	r3, r0
    ce50:	430a      	orrs	r2, r1
    ce52:	601a      	str	r2, [r3, #0]
                                               FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
                                             );
                }

                j = j + 2U;
    ce54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce56:	3302      	adds	r3, #2
    ce58:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    ce5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce5c:	3301      	adds	r3, #1
    ce5e:	930b      	str	r3, [sp, #44]	; 0x2c
    ce60:	9b05      	ldr	r3, [sp, #20]
    ce62:	3301      	adds	r3, #1
    ce64:	00db      	lsls	r3, r3, #3
    ce66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ce68:	429a      	cmp	r2, r3
    ce6a:	f4ff af75 	bcc.w	cd58 <FlexCAN_SetRxFifoFilter+0x102>
            }
            break;
    ce6e:	e0f2      	b.n	d056 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_C):
            /* Four partial 8-bit Standard IDs per ID Filter Table element.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ce70:	f000 feca 	bl	dc08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    ce74:	9b03      	ldr	r3, [sp, #12]
    ce76:	681b      	ldr	r3, [r3, #0]
    ce78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    ce7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
            (base->MCR) =
    ce80:	9b03      	ldr	r3, [sp, #12]
    ce82:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_C)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    ce84:	f000 feec 	bl	dc60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            j = 0U;
    ce88:	2300      	movs	r3, #0
    ce8a:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    ce8c:	2300      	movs	r3, #0
    ce8e:	930b      	str	r3, [sp, #44]	; 0x2c
    ce90:	e0cd      	b.n	d02e <FlexCAN_SetRxFifoFilter+0x3d8>
            {
                if (idFilterTable[j].isExtendedFrame)
    ce92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce94:	00db      	lsls	r3, r3, #3
    ce96:	9a01      	ldr	r2, [sp, #4]
    ce98:	4413      	add	r3, r2
    ce9a:	785b      	ldrb	r3, [r3, #1]
    ce9c:	2b00      	cmp	r3, #0
    ce9e:	d00e      	beq.n	cebe <FlexCAN_SetRxFifoFilter+0x268>
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cea2:	00db      	lsls	r3, r3, #3
    cea4:	9a01      	ldr	r2, [sp, #4]
    cea6:	4413      	add	r3, r2
    cea8:	685b      	ldr	r3, [r3, #4]
    ceaa:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    ceac:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ceae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ceb0:	009b      	lsls	r3, r3, #2
    ceb2:	9a06      	ldr	r2, [sp, #24]
    ceb4:	4413      	add	r3, r2
    ceb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ceb8:	440a      	add	r2, r1
    ceba:	601a      	str	r2, [r3, #0]
    cebc:	e00d      	b.n	ceda <FlexCAN_SetRxFifoFilter+0x284>
                                            );
                }
                else
                {
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cec0:	00db      	lsls	r3, r3, #3
    cec2:	9a01      	ldr	r2, [sp, #4]
    cec4:	4413      	add	r3, r2
    cec6:	685b      	ldr	r3, [r3, #4]
    cec8:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                             ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
    ceca:	0619      	lsls	r1, r3, #24
                    FilterTable[i] = Val1 + (((idFilterTable[j].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cecc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cece:	009b      	lsls	r3, r3, #2
    ced0:	9a06      	ldr	r2, [sp, #24]
    ced2:	4413      	add	r3, r2
    ced4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ced6:	440a      	add	r2, r1
    ced8:	601a      	str	r2, [r3, #0]
                                            );
                }

                if (idFilterTable[j + 1U].isExtendedFrame)
    ceda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cedc:	3301      	adds	r3, #1
    cede:	00db      	lsls	r3, r3, #3
    cee0:	9a01      	ldr	r2, [sp, #4]
    cee2:	4413      	add	r3, r2
    cee4:	785b      	ldrb	r3, [r3, #1]
    cee6:	2b00      	cmp	r3, #0
    cee8:	d017      	beq.n	cf1a <FlexCAN_SetRxFifoFilter+0x2c4>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    ceea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ceec:	009b      	lsls	r3, r3, #2
    ceee:	9a06      	ldr	r2, [sp, #24]
    cef0:	4413      	add	r3, r2
    cef2:	6819      	ldr	r1, [r3, #0]
    cef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cef6:	3301      	adds	r3, #1
    cef8:	00db      	lsls	r3, r3, #3
    cefa:	9a01      	ldr	r2, [sp, #4]
    cefc:	4413      	add	r3, r2
    cefe:	685b      	ldr	r3, [r3, #4]
    cf00:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    cf02:	041b      	lsls	r3, r3, #16
    cf04:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cf08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf0a:	441a      	add	r2, r3
    cf0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf0e:	009b      	lsls	r3, r3, #2
    cf10:	9806      	ldr	r0, [sp, #24]
    cf12:	4403      	add	r3, r0
    cf14:	430a      	orrs	r2, r1
    cf16:	601a      	str	r2, [r3, #0]
    cf18:	e016      	b.n	cf48 <FlexCAN_SetRxFifoFilter+0x2f2>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cf1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf1c:	009b      	lsls	r3, r3, #2
    cf1e:	9a06      	ldr	r2, [sp, #24]
    cf20:	4413      	add	r3, r2
    cf22:	6819      	ldr	r1, [r3, #0]
    cf24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf26:	3301      	adds	r3, #1
    cf28:	00db      	lsls	r3, r3, #3
    cf2a:	9a01      	ldr	r2, [sp, #4]
    cf2c:	4413      	add	r3, r2
    cf2e:	685b      	ldr	r3, [r3, #4]
    cf30:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
    cf32:	041b      	lsls	r3, r3, #16
    cf34:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 1U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cf38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf3a:	441a      	add	r2, r3
    cf3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf3e:	009b      	lsls	r3, r3, #2
    cf40:	9806      	ldr	r0, [sp, #24]
    cf42:	4403      	add	r3, r0
    cf44:	430a      	orrs	r2, r1
    cf46:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 2U].isExtendedFrame)
    cf48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf4a:	3302      	adds	r3, #2
    cf4c:	00db      	lsls	r3, r3, #3
    cf4e:	9a01      	ldr	r2, [sp, #4]
    cf50:	4413      	add	r3, r2
    cf52:	785b      	ldrb	r3, [r3, #1]
    cf54:	2b00      	cmp	r3, #0
    cf56:	d01b      	beq.n	cf90 <FlexCAN_SetRxFifoFilter+0x33a>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cf58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf5a:	009b      	lsls	r3, r3, #2
    cf5c:	9a06      	ldr	r2, [sp, #24]
    cf5e:	4413      	add	r3, r2
    cf60:	6819      	ldr	r1, [r3, #0]
    cf62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf64:	3302      	adds	r3, #2
    cf66:	00db      	lsls	r3, r3, #3
    cf68:	9a01      	ldr	r2, [sp, #4]
    cf6a:	4413      	add	r3, r2
    cf6c:	685b      	ldr	r3, [r3, #4]
    cf6e:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    cf70:	021b      	lsls	r3, r3, #8
    cf72:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cf74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cf76:	441a      	add	r2, r3
    cf78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf7a:	009b      	lsls	r3, r3, #2
    cf7c:	9806      	ldr	r0, [sp, #24]
    cf7e:	4403      	add	r3, r0
    cf80:	430a      	orrs	r2, r1
    cf82:	601a      	str	r2, [r3, #0]
    cf84:	e01a      	b.n	cfbc <FlexCAN_SetRxFifoFilter+0x366>
    cf86:	bf00      	nop
    cf88:	3ff80000 	.word	0x3ff80000
    cf8c:	3fff0000 	.word	0x3fff0000
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cf90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cf92:	009b      	lsls	r3, r3, #2
    cf94:	9a06      	ldr	r2, [sp, #24]
    cf96:	4413      	add	r3, r2
    cf98:	6819      	ldr	r1, [r3, #0]
    cf9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cf9c:	3302      	adds	r3, #2
    cf9e:	00db      	lsls	r3, r3, #3
    cfa0:	9a01      	ldr	r2, [sp, #4]
    cfa2:	4413      	add	r3, r2
    cfa4:	685b      	ldr	r3, [r3, #4]
    cfa6:	08db      	lsrs	r3, r3, #3
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
    cfa8:	021b      	lsls	r3, r3, #8
    cfaa:	b29a      	uxth	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 2U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    cfac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cfae:	441a      	add	r2, r3
    cfb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfb2:	009b      	lsls	r3, r3, #2
    cfb4:	9806      	ldr	r0, [sp, #24]
    cfb6:	4403      	add	r3, r0
    cfb8:	430a      	orrs	r2, r1
    cfba:	601a      	str	r2, [r3, #0]
                                             );
                }

                if (idFilterTable[j + 3U].isExtendedFrame)
    cfbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cfbe:	3303      	adds	r3, #3
    cfc0:	00db      	lsls	r3, r3, #3
    cfc2:	9a01      	ldr	r2, [sp, #4]
    cfc4:	4413      	add	r3, r2
    cfc6:	785b      	ldrb	r3, [r3, #1]
    cfc8:	2b00      	cmp	r3, #0
    cfca:	d015      	beq.n	cff8 <FlexCAN_SetRxFifoFilter+0x3a2>
                {
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cfcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfce:	009b      	lsls	r3, r3, #2
    cfd0:	9a06      	ldr	r2, [sp, #24]
    cfd2:	4413      	add	r3, r2
    cfd4:	6819      	ldr	r1, [r3, #0]
    cfd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cfd8:	3303      	adds	r3, #3
    cfda:	00db      	lsls	r3, r3, #3
    cfdc:	9a01      	ldr	r2, [sp, #4]
    cfde:	4413      	add	r3, r2
    cfe0:	685b      	ldr	r3, [r3, #4]
    cfe2:	0d5b      	lsrs	r3, r3, #21
                                                FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_CMP_SHIFT
                                              ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    cfe4:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 + (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_EXT_MASK) >>
    cfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cfe8:	441a      	add	r2, r3
    cfea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cfec:	009b      	lsls	r3, r3, #2
    cfee:	9806      	ldr	r0, [sp, #24]
    cff0:	4403      	add	r3, r0
    cff2:	430a      	orrs	r2, r1
    cff4:	601a      	str	r2, [r3, #0]
    cff6:	e014      	b.n	d022 <FlexCAN_SetRxFifoFilter+0x3cc>
                                             );
                }
                else
                {
                    FilterTable[i] |= Val1 +
    cff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cffa:	009b      	lsls	r3, r3, #2
    cffc:	9a06      	ldr	r2, [sp, #24]
    cffe:	4413      	add	r3, r2
    d000:	6819      	ldr	r1, [r3, #0]
                                      (((idFilterTable[j + 3U].id & FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_MASK) >>
    d002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d004:	3303      	adds	r3, #3
    d006:	00db      	lsls	r3, r3, #3
    d008:	9a01      	ldr	r2, [sp, #4]
    d00a:	4413      	add	r3, r2
    d00c:	685b      	ldr	r3, [r3, #4]
    d00e:	08db      	lsrs	r3, r3, #3
                                        FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_STD_CMP_SHIFT
                                       ) << FLEXCAN_IP_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
    d010:	b2da      	uxtb	r2, r3
                    FilterTable[i] |= Val1 +
    d012:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d014:	441a      	add	r2, r3
    d016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d018:	009b      	lsls	r3, r3, #2
    d01a:	9806      	ldr	r0, [sp, #24]
    d01c:	4403      	add	r3, r0
    d01e:	430a      	orrs	r2, r1
    d020:	601a      	str	r2, [r3, #0]
                                      );
                }

                j = j + 4U;
    d022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d024:	3304      	adds	r3, #4
    d026:	930a      	str	r3, [sp, #40]	; 0x28
            for (i = 0U; i < FLEXCAN_IP_RXFIFO_FILTER_ELEM_NUM(NumOfFilters); i++)
    d028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d02a:	3301      	adds	r3, #1
    d02c:	930b      	str	r3, [sp, #44]	; 0x2c
    d02e:	9b05      	ldr	r3, [sp, #20]
    d030:	3301      	adds	r3, #1
    d032:	00db      	lsls	r3, r3, #3
    d034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d036:	429a      	cmp	r2, r3
    d038:	f4ff af2b 	bcc.w	ce92 <FlexCAN_SetRxFifoFilter+0x23c>
            }
            break;
    d03c:	e00b      	b.n	d056 <FlexCAN_SetRxFifoFilter+0x400>
        case (FLEXCAN_RX_FIFO_ID_FORMAT_D):
            /* All frames rejected.*/
            /* Start critical section: implementation depends on integrator */
            SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    d03e:	f000 fde3 	bl	dc08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            (base->MCR) =
                (((base->MCR) & ~(FLEXCAN_MCR_IDAM_MASK)) |
    d042:	9b03      	ldr	r3, [sp, #12]
    d044:	681b      	ldr	r3, [r3, #0]
    d046:	f443 7240 	orr.w	r2, r3, #768	; 0x300
            (base->MCR) =
    d04a:	9b03      	ldr	r3, [sp, #12]
    d04c:	601a      	str	r2, [r3, #0]
                 ((((uint32)(((uint32)(FLEXCAN_RX_FIFO_ID_FORMAT_D)) << FLEXCAN_MCR_IDAM_SHIFT)) & FLEXCAN_MCR_IDAM_MASK))
                );
            /* End critical section: implementation depends on integrator */
            SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13();
    d04e:	f000 fe07 	bl	dc60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>
            break;
    d052:	e000      	b.n	d056 <FlexCAN_SetRxFifoFilter+0x400>
        default:
            /* Should not get here */
            break;
    d054:	bf00      	nop
    }
}
    d056:	bf00      	nop
    d058:	b00d      	add	sp, #52	; 0x34
    d05a:	f85d fb04 	ldr.w	pc, [sp], #4

0000d05e <FlexCAN_ReadRxFifo>:
 * Description   : Read Rx FIFO data.
 * This function will copy MB[0] data field into user's buffer.
 *
 *END**************************************************************************/
void FlexCAN_ReadRxFifo(const FLEXCAN_Type * base, Flexcan_Ip_MsgBuffType * rxFifo)
{
    d05e:	b500      	push	{lr}
    d060:	b08b      	sub	sp, #44	; 0x2c
    d062:	9001      	str	r0, [sp, #4]
    d064:	9100      	str	r1, [sp, #0]
    uint32 x;
    uint8 Index;
    const uint8 * p;
    #endif

    volatile const uint32 * flexcan_mb = (uint32 *)((Flexcan_Ip_PtrSizeType)base + (uint32)FLEXCAN_IP_FEATURE_RAM_OFFSET);
    d066:	9b01      	ldr	r3, [sp, #4]
    d068:	3380      	adds	r3, #128	; 0x80
    d06a:	9307      	str	r3, [sp, #28]
    volatile const uint32 * flexcan_mb_id = &flexcan_mb[1];
    d06c:	9b07      	ldr	r3, [sp, #28]
    d06e:	3304      	adds	r3, #4
    d070:	9306      	str	r3, [sp, #24]
    volatile const uint32 * flexcan_mb_data_32 = &flexcan_mb[2];
    d072:	9b07      	ldr	r3, [sp, #28]
    d074:	3308      	adds	r3, #8
    d076:	9305      	str	r3, [sp, #20]
    uint32 * msgData_32 = NULL_PTR;
    d078:	2300      	movs	r3, #0
    d07a:	9304      	str	r3, [sp, #16]
    uint8 flexcan_mb_dlc_value = (uint8)(((*flexcan_mb) & FLEXCAN_IP_CS_DLC_MASK) >> 16);
    d07c:	9b07      	ldr	r3, [sp, #28]
    d07e:	681b      	ldr	r3, [r3, #0]
    d080:	0c1b      	lsrs	r3, r3, #16
    d082:	b2db      	uxtb	r3, r3
    d084:	f003 030f 	and.w	r3, r3, #15
    d088:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8 can_real_payload = FlexCAN_ComputePayloadSize(flexcan_mb_dlc_value);
    d08c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d090:	4618      	mov	r0, r3
    d092:	f7fe fe6c 	bl	bd6e <FlexCAN_ComputePayloadSize>
    d096:	4603      	mov	r3, r0
    d098:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23

    #if (FLEXCAN_IP_DEV_ERROR_DETECT == STD_ON)
        DevAssert(rxFifo != NULL_PTR);
    #endif
    msgData_32 = (uint32 *)(rxFifo->data);
    d09c:	9b00      	ldr	r3, [sp, #0]
    d09e:	3308      	adds	r3, #8
    d0a0:	9304      	str	r3, [sp, #16]
       Check if the length of received data packet bigger than the maximum length accepted,
       then processing flow shall continue with the maximum length defined by configuration.
       Legacy FIFO just support in normal mode.
    */
    /* no need to check if FD enabled or not because this function just is invoked when legacy fifo enabled only ! */
    if (can_real_payload > 8U)
    d0a2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    d0a6:	2b08      	cmp	r3, #8
    d0a8:	d902      	bls.n	d0b0 <FlexCAN_ReadRxFifo+0x52>
    {
        can_real_payload = 8U;
    d0aa:	2308      	movs	r3, #8
    d0ac:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    }

    rxFifo->dataLen = can_real_payload;
    d0b0:	9b00      	ldr	r3, [sp, #0]
    d0b2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
    d0b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    rxFifo->cs = *flexcan_mb;
    d0ba:	9b07      	ldr	r3, [sp, #28]
    d0bc:	681a      	ldr	r2, [r3, #0]
    d0be:	9b00      	ldr	r3, [sp, #0]
    d0c0:	601a      	str	r2, [r3, #0]
    if ((rxFifo->cs & FLEXCAN_IP_CS_IDE_MASK) != 0U)
    d0c2:	9b00      	ldr	r3, [sp, #0]
    d0c4:	681b      	ldr	r3, [r3, #0]
    d0c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    d0ca:	2b00      	cmp	r3, #0
    d0cc:	d004      	beq.n	d0d8 <FlexCAN_ReadRxFifo+0x7a>
    {
        rxFifo->msgId = *flexcan_mb_id;
    d0ce:	9b06      	ldr	r3, [sp, #24]
    d0d0:	681a      	ldr	r2, [r3, #0]
    d0d2:	9b00      	ldr	r3, [sp, #0]
    d0d4:	605a      	str	r2, [r3, #4]
    d0d6:	e004      	b.n	d0e2 <FlexCAN_ReadRxFifo+0x84>
    }
    else
    {
        rxFifo->msgId = (*flexcan_mb_id) >> FLEXCAN_IP_ID_STD_SHIFT;
    d0d8:	9b06      	ldr	r3, [sp, #24]
    d0da:	681b      	ldr	r3, [r3, #0]
    d0dc:	0c9a      	lsrs	r2, r3, #18
    d0de:	9b00      	ldr	r3, [sp, #0]
    d0e0:	605a      	str	r2, [r3, #4]
    }
    /* Extract the IDHIT */
    rxFifo->id_hit = (uint8)base->RXFIR;
    d0e2:	9b01      	ldr	r3, [sp, #4]
    d0e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d0e6:	b2da      	uxtb	r2, r3
    d0e8:	9b00      	ldr	r3, [sp, #0]
    d0ea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    /* Extract the Time Stamp */
    rxFifo->time_stamp = (uint32)((rxFifo->cs & FLEXCAN_IP_CS_TIME_STAMP_MASK) >> FLEXCAN_IP_CS_TIME_STAMP_SHIFT);
    d0ee:	9b00      	ldr	r3, [sp, #0]
    d0f0:	681b      	ldr	r3, [r3, #0]
    d0f2:	b29a      	uxth	r2, r3
    d0f4:	9b00      	ldr	r3, [sp, #0]
    d0f6:	64da      	str	r2, [r3, #76]	; 0x4c
            FLEXCAN_IP_SWAP_BYTES_IN_WORD(MbWord, msgData_32[DataByte >> 2U]);
        }
    }
#else  /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
      /* Copy MB[0] data field into user's buffer */
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    d0f8:	2300      	movs	r3, #0
    d0fa:	9309      	str	r3, [sp, #36]	; 0x24
    d0fc:	e01f      	b.n	d13e <FlexCAN_ReadRxFifo+0xe0>
    {
        MbWord = flexcan_mb_data_32[DataByte >> 2U];
    d0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d100:	089b      	lsrs	r3, r3, #2
    d102:	009b      	lsls	r3, r3, #2
    d104:	9a05      	ldr	r2, [sp, #20]
    d106:	4413      	add	r3, r2
    d108:	681b      	ldr	r3, [r3, #0]
    d10a:	9302      	str	r3, [sp, #8]
        FLEXCAN_IP_SWAP_BYTES_IN_WORD((MbWord), (msgData_32[DataByte >> 2U]));
    d10c:	9b02      	ldr	r3, [sp, #8]
    d10e:	0e1a      	lsrs	r2, r3, #24
    d110:	9b02      	ldr	r3, [sp, #8]
    d112:	0a1b      	lsrs	r3, r3, #8
    d114:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    d118:	431a      	orrs	r2, r3
    d11a:	9b02      	ldr	r3, [sp, #8]
    d11c:	021b      	lsls	r3, r3, #8
    d11e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    d122:	ea42 0103 	orr.w	r1, r2, r3
    d126:	9b02      	ldr	r3, [sp, #8]
    d128:	061a      	lsls	r2, r3, #24
    d12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d12c:	089b      	lsrs	r3, r3, #2
    d12e:	009b      	lsls	r3, r3, #2
    d130:	9804      	ldr	r0, [sp, #16]
    d132:	4403      	add	r3, r0
    d134:	430a      	orrs	r2, r1
    d136:	601a      	str	r2, [r3, #0]
    for (DataByte = 0U; DataByte < can_real_payload; DataByte += 4U)
    d138:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d13a:	3304      	adds	r3, #4
    d13c:	9309      	str	r3, [sp, #36]	; 0x24
    d13e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    d142:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d144:	429a      	cmp	r2, r3
    d146:	d3da      	bcc.n	d0fe <FlexCAN_ReadRxFifo+0xa0>
    }
#endif /* if (defined (CPU_S32K116) || defined (CPU_S32K118)) */
}
    d148:	bf00      	nop
    d14a:	bf00      	nop
    d14c:	b00b      	add	sp, #44	; 0x2c
    d14e:	f85d fb04 	ldr.w	pc, [sp], #4

0000d152 <FlexCAN_IsMbOutOfRange>:
    const FLEXCAN_Type * pBase,
    uint8 u8MbIndex,
    boolean bIsLegacyFifoEn,
    uint32 u32MaxMbNum
)
{
    d152:	b088      	sub	sp, #32
    d154:	9003      	str	r0, [sp, #12]
    d156:	9301      	str	r3, [sp, #4]
    d158:	460b      	mov	r3, r1
    d15a:	f88d 300b 	strb.w	r3, [sp, #11]
    d15e:	4613      	mov	r3, r2
    d160:	f88d 300a 	strb.w	r3, [sp, #10]
    boolean ReturnValue = FALSE;
    d164:	2300      	movs	r3, #0
    d166:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32 u32NumOfFiFoElement = 0U;
    d16a:	2300      	movs	r3, #0
    d16c:	9306      	str	r3, [sp, #24]
    uint32 u32NumOfMbOccupiedByFiFo = 0U;
    d16e:	2300      	movs	r3, #0
    d170:	9305      	str	r3, [sp, #20]

    if (u8MbIndex >= (uint8)u32MaxMbNum)
    d172:	9b01      	ldr	r3, [sp, #4]
    d174:	b2db      	uxtb	r3, r3
    d176:	f89d 200b 	ldrb.w	r2, [sp, #11]
    d17a:	429a      	cmp	r2, r3
    d17c:	d303      	bcc.n	d186 <FlexCAN_IsMbOutOfRange+0x34>
    {
       ReturnValue = TRUE;
    d17e:	2301      	movs	r3, #1
    d180:	f88d 301f 	strb.w	r3, [sp, #31]
    d184:	e01b      	b.n	d1be <FlexCAN_IsMbOutOfRange+0x6c>
    }
    /* Check if RX FIFO is enabled*/
    else if (TRUE == bIsLegacyFifoEn)
    d186:	f89d 300a 	ldrb.w	r3, [sp, #10]
    d18a:	2b00      	cmp	r3, #0
    d18c:	d014      	beq.n	d1b8 <FlexCAN_IsMbOutOfRange+0x66>
    {
        /* Get the number of RX FIFO Filters*/
        u32NumOfFiFoElement = (((pBase->CTRL2) & FLEXCAN_CTRL2_RFFN_MASK) >> FLEXCAN_CTRL2_RFFN_SHIFT);
    d18e:	9b03      	ldr	r3, [sp, #12]
    d190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d192:	0e1b      	lsrs	r3, r3, #24
    d194:	f003 030f 	and.w	r3, r3, #15
    d198:	9306      	str	r3, [sp, #24]
        /* Get the number if MBs occupied by RX FIFO and ID filter table*/
        /* the Rx FIFO occupies the memory space originally reserved for MB0-5*/
        /* Every number of RFFN means 8 number of RX FIFO filters*/
        /* and every 4 number of RX FIFO filters occupied one MB*/
        u32NumOfMbOccupiedByFiFo = 5U + ((((u32NumOfFiFoElement) + 1U) * 8U) / 4U);
    d19a:	9b06      	ldr	r3, [sp, #24]
    d19c:	3301      	adds	r3, #1
    d19e:	00db      	lsls	r3, r3, #3
    d1a0:	089b      	lsrs	r3, r3, #2
    d1a2:	3305      	adds	r3, #5
    d1a4:	9305      	str	r3, [sp, #20]
        if (u8MbIndex <= u32NumOfMbOccupiedByFiFo)
    d1a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    d1aa:	9a05      	ldr	r2, [sp, #20]
    d1ac:	429a      	cmp	r2, r3
    d1ae:	d306      	bcc.n	d1be <FlexCAN_IsMbOutOfRange+0x6c>
        {
            ReturnValue = TRUE;
    d1b0:	2301      	movs	r3, #1
    d1b2:	f88d 301f 	strb.w	r3, [sp, #31]
    d1b6:	e002      	b.n	d1be <FlexCAN_IsMbOutOfRange+0x6c>
        }
    }
    else
    {
        ReturnValue = FALSE;
    d1b8:	2300      	movs	r3, #0
    d1ba:	f88d 301f 	strb.w	r3, [sp, #31]
    }

    return ReturnValue;
    d1be:	f89d 301f 	ldrb.w	r3, [sp, #31]
}
    d1c2:	4618      	mov	r0, r3
    d1c4:	b008      	add	sp, #32
    d1c6:	4770      	bx	lr

0000d1c8 <FlexCAN_ConfigCtrlOptions>:
 * Description   : configure controller depending on options
 * note: should be call after FD configuration.
 *
 *END**************************************************************************/
void FlexCAN_ConfigCtrlOptions(FLEXCAN_Type * pBase, uint32 u32Options)
{
    d1c8:	b500      	push	{lr}
    d1ca:	b083      	sub	sp, #12
    d1cc:	9001      	str	r0, [sp, #4]
    d1ce:	9100      	str	r1, [sp, #0]
#if (FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON)
    /* If the FD feature is enabled, in order to be ISO-compliant. */
    if ((u32Options & FLEXCAN_IP_ISO_U32) != 0U)
    d1d0:	9b00      	ldr	r3, [sp, #0]
    d1d2:	f003 0320 	and.w	r3, r3, #32
    d1d6:	2b00      	cmp	r3, #0
    d1d8:	d004      	beq.n	d1e4 <FlexCAN_ConfigCtrlOptions+0x1c>
    {
        FlexCAN_SetIsoCan(pBase, TRUE);
    d1da:	2101      	movs	r1, #1
    d1dc:	9801      	ldr	r0, [sp, #4]
    d1de:	f7fe fcd8 	bl	bb92 <FlexCAN_SetIsoCan>
    d1e2:	e003      	b.n	d1ec <FlexCAN_ConfigCtrlOptions+0x24>
    }
    else
    {
        /* This maybe don't have sense if the Deinit returns the state of registers at init values */
        FlexCAN_SetIsoCan(pBase, FALSE);
    d1e4:	2100      	movs	r1, #0
    d1e6:	9801      	ldr	r0, [sp, #4]
    d1e8:	f7fe fcd3 	bl	bb92 <FlexCAN_SetIsoCan>
    }
#endif /*(FLEXCAN_IP_FEATURE_SWITCHINGISOMODE == STD_ON) */
    /* Set Entire Frame Arbitration Field Comparison. */
    if ((u32Options & FLEXCAN_IP_EACEN_U32) != 0U)
    d1ec:	9b00      	ldr	r3, [sp, #0]
    d1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
    d1f2:	2b00      	cmp	r3, #0
    d1f4:	d004      	beq.n	d200 <FlexCAN_ConfigCtrlOptions+0x38>
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, TRUE);
    d1f6:	2101      	movs	r1, #1
    d1f8:	9801      	ldr	r0, [sp, #4]
    d1fa:	f7fe fce1 	bl	bbc0 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    d1fe:	e003      	b.n	d208 <FlexCAN_ConfigCtrlOptions+0x40>
    }
    else
    {
        FlexCAN_SetEntireFrameArbitrationFieldComparison(pBase, FALSE);
    d200:	2100      	movs	r1, #0
    d202:	9801      	ldr	r0, [sp, #4]
    d204:	f7fe fcdc 	bl	bbc0 <FlexCAN_SetEntireFrameArbitrationFieldComparison>
    }
#if (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)
    /* Set protocol Exception */
    if ((u32Options & FLEXCAN_IP_PROTOCOL_EXCEPTION_U32) != 0U)
    d208:	9b00      	ldr	r3, [sp, #0]
    d20a:	f003 0308 	and.w	r3, r3, #8
    d20e:	2b00      	cmp	r3, #0
    d210:	d004      	beq.n	d21c <FlexCAN_ConfigCtrlOptions+0x54>
    {
        FlexCAN_SetProtocolException(pBase, TRUE);
    d212:	2101      	movs	r1, #1
    d214:	9801      	ldr	r0, [sp, #4]
    d216:	f7fe fcea 	bl	bbee <FlexCAN_SetProtocolException>
    d21a:	e003      	b.n	d224 <FlexCAN_ConfigCtrlOptions+0x5c>
    }
    else
    {
        FlexCAN_SetProtocolException(pBase, FALSE);
    d21c:	2100      	movs	r1, #0
    d21e:	9801      	ldr	r0, [sp, #4]
    d220:	f7fe fce5 	bl	bbee <FlexCAN_SetProtocolException>
    }
#endif /* Endif  (FLEXCAN_IP_FEATURE_PROTOCOLEXCEPTION == STD_ON)  */
    /* Set CAN Bit Sampling */
    if (((u32Options & FLEXCAN_IP_THREE_SAMPLES_U32) != 0U) && (0U == (pBase->MCR & FLEXCAN_MCR_FDEN_MASK)))
    d224:	9b00      	ldr	r3, [sp, #0]
    d226:	f003 0302 	and.w	r3, r3, #2
    d22a:	2b00      	cmp	r3, #0
    d22c:	d00a      	beq.n	d244 <FlexCAN_ConfigCtrlOptions+0x7c>
    d22e:	9b01      	ldr	r3, [sp, #4]
    d230:	681b      	ldr	r3, [r3, #0]
    d232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    d236:	2b00      	cmp	r3, #0
    d238:	d104      	bne.n	d244 <FlexCAN_ConfigCtrlOptions+0x7c>
    {
        FlexCAN_CanBitSampling(pBase, TRUE);
    d23a:	2101      	movs	r1, #1
    d23c:	9801      	ldr	r0, [sp, #4]
    d23e:	f7fe fd31 	bl	bca4 <FlexCAN_CanBitSampling>
    d242:	e003      	b.n	d24c <FlexCAN_ConfigCtrlOptions+0x84>
    }
    else
    {
        FlexCAN_CanBitSampling(pBase, FALSE);
    d244:	2100      	movs	r1, #0
    d246:	9801      	ldr	r0, [sp, #4]
    d248:	f7fe fd2c 	bl	bca4 <FlexCAN_CanBitSampling>
    }

    /* Set AutoBusOff Recovery */
    if ((u32Options & FLEXCAN_IP_BUSOFF_RECOVERY_U32) != 0U)
    d24c:	9b00      	ldr	r3, [sp, #0]
    d24e:	f003 0304 	and.w	r3, r3, #4
    d252:	2b00      	cmp	r3, #0
    d254:	d004      	beq.n	d260 <FlexCAN_ConfigCtrlOptions+0x98>
    {
        FlexCAN_SetBusOffAutorecovery(pBase, TRUE);
    d256:	2101      	movs	r1, #1
    d258:	9801      	ldr	r0, [sp, #4]
    d25a:	f7fe fcf6 	bl	bc4a <FlexCAN_SetBusOffAutorecovery>
    d25e:	e003      	b.n	d268 <FlexCAN_ConfigCtrlOptions+0xa0>
    }
    else
    {
        FlexCAN_SetBusOffAutorecovery(pBase, FALSE);
    d260:	2100      	movs	r1, #0
    d262:	9801      	ldr	r0, [sp, #4]
    d264:	f7fe fcf1 	bl	bc4a <FlexCAN_SetBusOffAutorecovery>
    }
    /* Set Remote Request Store for received of Remote Request Frames */
    if ((u32Options & FLEXCAN_IP_REM_STORE_U32) != 0U)
    d268:	9b00      	ldr	r3, [sp, #0]
    d26a:	f003 0301 	and.w	r3, r3, #1
    d26e:	2b00      	cmp	r3, #0
    d270:	d004      	beq.n	d27c <FlexCAN_ConfigCtrlOptions+0xb4>
    {
        FlexCAN_SetRemoteReqStore(pBase, TRUE);
    d272:	2101      	movs	r1, #1
    d274:	9801      	ldr	r0, [sp, #4]
    d276:	f7fe fcd1 	bl	bc1c <FlexCAN_SetRemoteReqStore>
    d27a:	e003      	b.n	d284 <FlexCAN_ConfigCtrlOptions+0xbc>
    }
    else
    {
        FlexCAN_SetRemoteReqStore(pBase, FALSE);
    d27c:	2100      	movs	r1, #0
    d27e:	9801      	ldr	r0, [sp, #4]
    d280:	f7fe fccc 	bl	bc1c <FlexCAN_SetRemoteReqStore>
    }
#if (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)
    /* Set Edge Filter */
    if ((u32Options & FLEXCAN_IP_EDGE_FILTER_U32) != 0U)
    d284:	9b00      	ldr	r3, [sp, #0]
    d286:	f003 0310 	and.w	r3, r3, #16
    d28a:	2b00      	cmp	r3, #0
    d28c:	d004      	beq.n	d298 <FlexCAN_ConfigCtrlOptions+0xd0>
    {
        FlexCAN_SetEdgeFilter(pBase, TRUE);
    d28e:	2101      	movs	r1, #1
    d290:	9801      	ldr	r0, [sp, #4]
    d292:	f7fe fcf0 	bl	bc76 <FlexCAN_SetEdgeFilter>
    else
    {
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    }
#endif /* End of (FLEXCAN_IP_FEATURE_EDGEFILTER == STD_ON)  */
}
    d296:	e003      	b.n	d2a0 <FlexCAN_ConfigCtrlOptions+0xd8>
        FlexCAN_SetEdgeFilter(pBase, FALSE);
    d298:	2100      	movs	r1, #0
    d29a:	9801      	ldr	r0, [sp, #4]
    d29c:	f7fe fceb 	bl	bc76 <FlexCAN_SetEdgeFilter>
}
    d2a0:	bf00      	nop
    d2a2:	b003      	add	sp, #12
    d2a4:	f85d fb04 	ldr.w	pc, [sp], #4

0000d2a8 <FlexCAN_ResetImaskBuff>:
 * Function Name : FlexCAN_ResetImaskBuff (uses in FlexCAN_Ip_Init function only)
 * Description   : Reset Imask Buffers.
 *
 *END**************************************************************************/
void FlexCAN_ResetImaskBuff(uint8 Instance)
{
    d2a8:	b084      	sub	sp, #16
    d2aa:	4603      	mov	r3, r0
    d2ac:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8 ImaskCnt = 0U;
    d2b0:	2300      	movs	r3, #0
    d2b2:	f88d 300f 	strb.w	r3, [sp, #15]

    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    d2b6:	2300      	movs	r3, #0
    d2b8:	f88d 300f 	strb.w	r3, [sp, #15]
    d2bc:	e00d      	b.n	d2da <FlexCAN_ResetImaskBuff+0x32>
    {
        FlexCAN_Ip_au32ImaskBuff[Instance][ImaskCnt] = 0U;
    d2be:	f89d 2007 	ldrb.w	r2, [sp, #7]
    d2c2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d2c6:	4909      	ldr	r1, [pc, #36]	; (d2ec <FlexCAN_ResetImaskBuff+0x44>)
    d2c8:	4413      	add	r3, r2
    d2ca:	2200      	movs	r2, #0
    d2cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (ImaskCnt = 0U; ImaskCnt < FLEXCAN_IP_FEATURE_MBDSR_COUNT; ImaskCnt++)
    d2d0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d2d4:	3301      	adds	r3, #1
    d2d6:	f88d 300f 	strb.w	r3, [sp, #15]
    d2da:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d2de:	2b00      	cmp	r3, #0
    d2e0:	d0ed      	beq.n	d2be <FlexCAN_ResetImaskBuff+0x16>
    }
}
    d2e2:	bf00      	nop
    d2e4:	bf00      	nop
    d2e6:	b004      	add	sp, #16
    d2e8:	4770      	bx	lr
    d2ea:	bf00      	nop
    d2ec:	1fff8fc4 	.word	0x1fff8fc4

0000d2f0 <CAN0_ORED_IRQHandler>:

#else

/* Implementation of CAN0 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN0_ORED_IRQHandler)
{
    d2f0:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(0U);
    d2f2:	2000      	movs	r0, #0
    d2f4:	f7fd fb2a 	bl	a94c <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    d2f8:	f3bf 8f4f 	dsb	sy
}
    d2fc:	bf00      	nop
    d2fe:	bd08      	pop	{r3, pc}

0000d300 <CAN0_Error_IRQHandler>:

/* Implementation of CAN0 handler named in startup code for processing of Errors reporting. */
ISR(CAN0_Error_IRQHandler)
{
    d300:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(0U);
    d302:	2000      	movs	r0, #0
    d304:	f7fd fac2 	bl	a88c <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    d308:	f3bf 8f4f 	dsb	sy
}
    d30c:	bf00      	nop
    d30e:	bd08      	pop	{r3, pc}

0000d310 <CAN0_ORED_0_15_MB_IRQHandler>:
}
#endif
/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN0_ORED_0_15_MB_IRQHandler)
{
    d310:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 0U, 15U);
    d312:	220f      	movs	r2, #15
    d314:	2100      	movs	r1, #0
    d316:	2000      	movs	r0, #0
    d318:	f7fd f9dc 	bl	a6d4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    d31c:	f3bf 8f4f 	dsb	sy
}
    d320:	bf00      	nop
    d322:	bd08      	pop	{r3, pc}

0000d324 <CAN0_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN0 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN0_ORED_16_31_MB_IRQHandler)
{
    d324:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(0U, 16U, 31U);
    d326:	221f      	movs	r2, #31
    d328:	2110      	movs	r1, #16
    d32a:	2000      	movs	r0, #0
    d32c:	f7fd f9d2 	bl	a6d4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    d330:	f3bf 8f4f 	dsb	sy
}
    d334:	bf00      	nop
    d336:	bd08      	pop	{r3, pc}

0000d338 <CAN1_ORED_IRQHandler>:
#endif /* (defined(S32K142W) || defined(S32K144W) || defined(S32M243) || defined(S32M244)) */

#if (FLEXCAN_INSTANCE_COUNT > 1U)
/* Implementation of CAN1 handler named in startup code for processing of Tx\Rx Warning and Bus Off reporting. */
ISR(CAN1_ORED_IRQHandler)
{
    d338:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(1U);
    d33a:	2001      	movs	r0, #1
    d33c:	f7fd fb06 	bl	a94c <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    d340:	f3bf 8f4f 	dsb	sy
}
    d344:	bf00      	nop
    d346:	bd08      	pop	{r3, pc}

0000d348 <CAN1_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN1_Error_IRQHandler)
{
    d348:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(1U);
    d34a:	2001      	movs	r0, #1
    d34c:	f7fd fa9e 	bl	a88c <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    d350:	f3bf 8f4f 	dsb	sy
}
    d354:	bf00      	nop
    d356:	bd08      	pop	{r3, pc}

0000d358 <CAN1_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN1_ORED_0_15_MB_IRQHandler)
{
    d358:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 0U, 15U);
    d35a:	220f      	movs	r2, #15
    d35c:	2100      	movs	r1, #0
    d35e:	2001      	movs	r0, #1
    d360:	f7fd f9b8 	bl	a6d4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    d364:	f3bf 8f4f 	dsb	sy
}
    d368:	bf00      	nop
    d36a:	bd08      	pop	{r3, pc}

0000d36c <CAN1_ORED_16_31_MB_IRQHandler>:

/* Implementation of CAN1 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 16-31. */
ISR(CAN1_ORED_16_31_MB_IRQHandler)
{
    d36c:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(1U, 16U, 31U);
    d36e:	221f      	movs	r2, #31
    d370:	2110      	movs	r1, #16
    d372:	2001      	movs	r0, #1
    d374:	f7fd f9ae 	bl	a6d4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    d378:	f3bf 8f4f 	dsb	sy
}
    d37c:	bf00      	nop
    d37e:	bd08      	pop	{r3, pc}

0000d380 <CAN2_ORED_IRQHandler>:
#endif /* (FLEXCAN_INSTANCE_COUNT > 1U) */

#if (FLEXCAN_INSTANCE_COUNT > 2U)
/* Implementation of CAN2 handler named in startup code for processing of Errors and Bus Off reporting. */
ISR(CAN2_ORED_IRQHandler)
{
    d380:	b508      	push	{r3, lr}
    FlexCAN_BusOff_IRQHandler(2U);
    d382:	2002      	movs	r0, #2
    d384:	f7fd fae2 	bl	a94c <FlexCAN_BusOff_IRQHandler>
    EXIT_INTERRUPT();
    d388:	f3bf 8f4f 	dsb	sy
}
    d38c:	bf00      	nop
    d38e:	bd08      	pop	{r3, pc}

0000d390 <CAN2_Error_IRQHandler>:

/* Implementation of CAN1 handler named in startup code for processing of Errors reporting. */
ISR(CAN2_Error_IRQHandler)
{
    d390:	b508      	push	{r3, lr}
    FlexCAN_Error_IRQHandler(2U);
    d392:	2002      	movs	r0, #2
    d394:	f7fd fa7a 	bl	a88c <FlexCAN_Error_IRQHandler>
    EXIT_INTERRUPT();
    d398:	f3bf 8f4f 	dsb	sy
}
    d39c:	bf00      	nop
    d39e:	bd08      	pop	{r3, pc}

0000d3a0 <CAN2_ORED_0_15_MB_IRQHandler>:

/* Implementation of CAN2 IRQ handler for interrupts indicating a successful
transmission or reception for Message Buffers 0-15. */
ISR(CAN2_ORED_0_15_MB_IRQHandler)
{
    d3a0:	b508      	push	{r3, lr}
    FlexCAN_IRQHandler(2U, 0U, 15U);
    d3a2:	220f      	movs	r2, #15
    d3a4:	2100      	movs	r1, #0
    d3a6:	2002      	movs	r0, #2
    d3a8:	f7fd f994 	bl	a6d4 <FlexCAN_IRQHandler>
    EXIT_INTERRUPT();
    d3ac:	f3bf 8f4f 	dsb	sy
}
    d3b0:	bf00      	nop
    d3b2:	bd08      	pop	{r3, pc}

0000d3b4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    d3b4:	b500      	push	{lr}
    d3b6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d3b8:	f7f3 ff50 	bl	125c <Sys_GetCoreID>
    d3bc:	4603      	mov	r3, r0
    d3be:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId])
    d3c0:	4a10      	ldr	r2, [pc, #64]	; (d404 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    d3c2:	9b01      	ldr	r3, [sp, #4]
    d3c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3c8:	2b00      	cmp	r3, #0
    d3ca:	d10d      	bne.n	d3e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d3cc:	f7f3 fc5a 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    d3d0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d3d2:	9b00      	ldr	r3, [sp, #0]
    d3d4:	f003 0301 	and.w	r3, r3, #1
    d3d8:	2b00      	cmp	r3, #0
    d3da:	d100      	bne.n	d3de <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d3dc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    d3de:	490a      	ldr	r1, [pc, #40]	; (d408 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x54>)
    d3e0:	9b01      	ldr	r3, [sp, #4]
    d3e2:	9a00      	ldr	r2, [sp, #0]
    d3e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]++;
    d3e8:	4a06      	ldr	r2, [pc, #24]	; (d404 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    d3ea:	9b01      	ldr	r3, [sp, #4]
    d3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d3f0:	1c5a      	adds	r2, r3, #1
    d3f2:	4904      	ldr	r1, [pc, #16]	; (d404 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x50>)
    d3f4:	9b01      	ldr	r3, [sp, #4]
    d3f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d3fa:	bf00      	nop
    d3fc:	b003      	add	sp, #12
    d3fe:	f85d fb04 	ldr.w	pc, [sp], #4
    d402:	bf00      	nop
    d404:	1fff8fd4 	.word	0x1fff8fd4
    d408:	1fff8fd0 	.word	0x1fff8fd0

0000d40c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00(void)
{
    d40c:	b500      	push	{lr}
    d40e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d410:	f7f3 ff24 	bl	125c <Sys_GetCoreID>
    d414:	4603      	mov	r3, r0
    d416:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]--;
    d418:	4a0d      	ldr	r2, [pc, #52]	; (d450 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    d41a:	9b01      	ldr	r3, [sp, #4]
    d41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d420:	1e5a      	subs	r2, r3, #1
    d422:	490b      	ldr	r1, [pc, #44]	; (d450 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    d424:	9b01      	ldr	r3, [sp, #4]
    d426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    d42a:	4a0a      	ldr	r2, [pc, #40]	; (d454 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x48>)
    d42c:	9b01      	ldr	r3, [sp, #4]
    d42e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d432:	f003 0301 	and.w	r3, r3, #1
    d436:	2b00      	cmp	r3, #0
    d438:	d106      	bne.n	d448 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    d43a:	4a05      	ldr	r2, [pc, #20]	; (d450 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x44>)
    d43c:	9b01      	ldr	r3, [sp, #4]
    d43e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d442:	2b00      	cmp	r3, #0
    d444:	d100      	bne.n	d448 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d446:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d448:	bf00      	nop
    d44a:	b003      	add	sp, #12
    d44c:	f85d fb04 	ldr.w	pc, [sp], #4
    d450:	1fff8fd4 	.word	0x1fff8fd4
    d454:	1fff8fd0 	.word	0x1fff8fd0

0000d458 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    d458:	b500      	push	{lr}
    d45a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d45c:	f7f3 fefe 	bl	125c <Sys_GetCoreID>
    d460:	4603      	mov	r3, r0
    d462:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId])
    d464:	4a10      	ldr	r2, [pc, #64]	; (d4a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    d466:	9b01      	ldr	r3, [sp, #4]
    d468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d46c:	2b00      	cmp	r3, #0
    d46e:	d10d      	bne.n	d48c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d470:	f7f3 fc08 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    d474:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d476:	9b00      	ldr	r3, [sp, #0]
    d478:	f003 0301 	and.w	r3, r3, #1
    d47c:	2b00      	cmp	r3, #0
    d47e:	d100      	bne.n	d482 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d480:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    d482:	490a      	ldr	r1, [pc, #40]	; (d4ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x54>)
    d484:	9b01      	ldr	r3, [sp, #4]
    d486:	9a00      	ldr	r2, [sp, #0]
    d488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]++;
    d48c:	4a06      	ldr	r2, [pc, #24]	; (d4a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    d48e:	9b01      	ldr	r3, [sp, #4]
    d490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d494:	1c5a      	adds	r2, r3, #1
    d496:	4904      	ldr	r1, [pc, #16]	; (d4a8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x50>)
    d498:	9b01      	ldr	r3, [sp, #4]
    d49a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d49e:	bf00      	nop
    d4a0:	b003      	add	sp, #12
    d4a2:	f85d fb04 	ldr.w	pc, [sp], #4
    d4a6:	bf00      	nop
    d4a8:	1fff8fdc 	.word	0x1fff8fdc
    d4ac:	1fff8fd8 	.word	0x1fff8fd8

0000d4b0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01(void)
{
    d4b0:	b500      	push	{lr}
    d4b2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d4b4:	f7f3 fed2 	bl	125c <Sys_GetCoreID>
    d4b8:	4603      	mov	r3, r0
    d4ba:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]--;
    d4bc:	4a0d      	ldr	r2, [pc, #52]	; (d4f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    d4be:	9b01      	ldr	r3, [sp, #4]
    d4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4c4:	1e5a      	subs	r2, r3, #1
    d4c6:	490b      	ldr	r1, [pc, #44]	; (d4f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    d4c8:	9b01      	ldr	r3, [sp, #4]
    d4ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    d4ce:	4a0a      	ldr	r2, [pc, #40]	; (d4f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x48>)
    d4d0:	9b01      	ldr	r3, [sp, #4]
    d4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4d6:	f003 0301 	and.w	r3, r3, #1
    d4da:	2b00      	cmp	r3, #0
    d4dc:	d106      	bne.n	d4ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    d4de:	4a05      	ldr	r2, [pc, #20]	; (d4f4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x44>)
    d4e0:	9b01      	ldr	r3, [sp, #4]
    d4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d4e6:	2b00      	cmp	r3, #0
    d4e8:	d100      	bne.n	d4ec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d4ea:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d4ec:	bf00      	nop
    d4ee:	b003      	add	sp, #12
    d4f0:	f85d fb04 	ldr.w	pc, [sp], #4
    d4f4:	1fff8fdc 	.word	0x1fff8fdc
    d4f8:	1fff8fd8 	.word	0x1fff8fd8

0000d4fc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    d4fc:	b500      	push	{lr}
    d4fe:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d500:	f7f3 feac 	bl	125c <Sys_GetCoreID>
    d504:	4603      	mov	r3, r0
    d506:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId])
    d508:	4a10      	ldr	r2, [pc, #64]	; (d54c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    d50a:	9b01      	ldr	r3, [sp, #4]
    d50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d510:	2b00      	cmp	r3, #0
    d512:	d10d      	bne.n	d530 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d514:	f7f3 fbb6 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    d518:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d51a:	9b00      	ldr	r3, [sp, #0]
    d51c:	f003 0301 	and.w	r3, r3, #1
    d520:	2b00      	cmp	r3, #0
    d522:	d100      	bne.n	d526 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d524:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    d526:	490a      	ldr	r1, [pc, #40]	; (d550 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x54>)
    d528:	9b01      	ldr	r3, [sp, #4]
    d52a:	9a00      	ldr	r2, [sp, #0]
    d52c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]++;
    d530:	4a06      	ldr	r2, [pc, #24]	; (d54c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    d532:	9b01      	ldr	r3, [sp, #4]
    d534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d538:	1c5a      	adds	r2, r3, #1
    d53a:	4904      	ldr	r1, [pc, #16]	; (d54c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x50>)
    d53c:	9b01      	ldr	r3, [sp, #4]
    d53e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d542:	bf00      	nop
    d544:	b003      	add	sp, #12
    d546:	f85d fb04 	ldr.w	pc, [sp], #4
    d54a:	bf00      	nop
    d54c:	1fff8fe4 	.word	0x1fff8fe4
    d550:	1fff8fe0 	.word	0x1fff8fe0

0000d554 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02(void)
{
    d554:	b500      	push	{lr}
    d556:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d558:	f7f3 fe80 	bl	125c <Sys_GetCoreID>
    d55c:	4603      	mov	r3, r0
    d55e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]--;
    d560:	4a0d      	ldr	r2, [pc, #52]	; (d598 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    d562:	9b01      	ldr	r3, [sp, #4]
    d564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d568:	1e5a      	subs	r2, r3, #1
    d56a:	490b      	ldr	r1, [pc, #44]	; (d598 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    d56c:	9b01      	ldr	r3, [sp, #4]
    d56e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    d572:	4a0a      	ldr	r2, [pc, #40]	; (d59c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x48>)
    d574:	9b01      	ldr	r3, [sp, #4]
    d576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d57a:	f003 0301 	and.w	r3, r3, #1
    d57e:	2b00      	cmp	r3, #0
    d580:	d106      	bne.n	d590 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    d582:	4a05      	ldr	r2, [pc, #20]	; (d598 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x44>)
    d584:	9b01      	ldr	r3, [sp, #4]
    d586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d58a:	2b00      	cmp	r3, #0
    d58c:	d100      	bne.n	d590 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d58e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d590:	bf00      	nop
    d592:	b003      	add	sp, #12
    d594:	f85d fb04 	ldr.w	pc, [sp], #4
    d598:	1fff8fe4 	.word	0x1fff8fe4
    d59c:	1fff8fe0 	.word	0x1fff8fe0

0000d5a0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    d5a0:	b500      	push	{lr}
    d5a2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5a4:	f7f3 fe5a 	bl	125c <Sys_GetCoreID>
    d5a8:	4603      	mov	r3, r0
    d5aa:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId])
    d5ac:	4a10      	ldr	r2, [pc, #64]	; (d5f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    d5ae:	9b01      	ldr	r3, [sp, #4]
    d5b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	d10d      	bne.n	d5d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d5b8:	f7f3 fb64 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    d5bc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d5be:	9b00      	ldr	r3, [sp, #0]
    d5c0:	f003 0301 	and.w	r3, r3, #1
    d5c4:	2b00      	cmp	r3, #0
    d5c6:	d100      	bne.n	d5ca <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d5c8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    d5ca:	490a      	ldr	r1, [pc, #40]	; (d5f4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x54>)
    d5cc:	9b01      	ldr	r3, [sp, #4]
    d5ce:	9a00      	ldr	r2, [sp, #0]
    d5d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]++;
    d5d4:	4a06      	ldr	r2, [pc, #24]	; (d5f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    d5d6:	9b01      	ldr	r3, [sp, #4]
    d5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d5dc:	1c5a      	adds	r2, r3, #1
    d5de:	4904      	ldr	r1, [pc, #16]	; (d5f0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x50>)
    d5e0:	9b01      	ldr	r3, [sp, #4]
    d5e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d5e6:	bf00      	nop
    d5e8:	b003      	add	sp, #12
    d5ea:	f85d fb04 	ldr.w	pc, [sp], #4
    d5ee:	bf00      	nop
    d5f0:	1fff8fec 	.word	0x1fff8fec
    d5f4:	1fff8fe8 	.word	0x1fff8fe8

0000d5f8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03(void)
{
    d5f8:	b500      	push	{lr}
    d5fa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d5fc:	f7f3 fe2e 	bl	125c <Sys_GetCoreID>
    d600:	4603      	mov	r3, r0
    d602:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]--;
    d604:	4a0d      	ldr	r2, [pc, #52]	; (d63c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    d606:	9b01      	ldr	r3, [sp, #4]
    d608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d60c:	1e5a      	subs	r2, r3, #1
    d60e:	490b      	ldr	r1, [pc, #44]	; (d63c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    d610:	9b01      	ldr	r3, [sp, #4]
    d612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    d616:	4a0a      	ldr	r2, [pc, #40]	; (d640 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x48>)
    d618:	9b01      	ldr	r3, [sp, #4]
    d61a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d61e:	f003 0301 	and.w	r3, r3, #1
    d622:	2b00      	cmp	r3, #0
    d624:	d106      	bne.n	d634 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    d626:	4a05      	ldr	r2, [pc, #20]	; (d63c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x44>)
    d628:	9b01      	ldr	r3, [sp, #4]
    d62a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d62e:	2b00      	cmp	r3, #0
    d630:	d100      	bne.n	d634 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d632:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d634:	bf00      	nop
    d636:	b003      	add	sp, #12
    d638:	f85d fb04 	ldr.w	pc, [sp], #4
    d63c:	1fff8fec 	.word	0x1fff8fec
    d640:	1fff8fe8 	.word	0x1fff8fe8

0000d644 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    d644:	b500      	push	{lr}
    d646:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d648:	f7f3 fe08 	bl	125c <Sys_GetCoreID>
    d64c:	4603      	mov	r3, r0
    d64e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId])
    d650:	4a10      	ldr	r2, [pc, #64]	; (d694 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    d652:	9b01      	ldr	r3, [sp, #4]
    d654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d658:	2b00      	cmp	r3, #0
    d65a:	d10d      	bne.n	d678 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d65c:	f7f3 fb12 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    d660:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d662:	9b00      	ldr	r3, [sp, #0]
    d664:	f003 0301 	and.w	r3, r3, #1
    d668:	2b00      	cmp	r3, #0
    d66a:	d100      	bne.n	d66e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d66c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    d66e:	490a      	ldr	r1, [pc, #40]	; (d698 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x54>)
    d670:	9b01      	ldr	r3, [sp, #4]
    d672:	9a00      	ldr	r2, [sp, #0]
    d674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]++;
    d678:	4a06      	ldr	r2, [pc, #24]	; (d694 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    d67a:	9b01      	ldr	r3, [sp, #4]
    d67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d680:	1c5a      	adds	r2, r3, #1
    d682:	4904      	ldr	r1, [pc, #16]	; (d694 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x50>)
    d684:	9b01      	ldr	r3, [sp, #4]
    d686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d68a:	bf00      	nop
    d68c:	b003      	add	sp, #12
    d68e:	f85d fb04 	ldr.w	pc, [sp], #4
    d692:	bf00      	nop
    d694:	1fff8ff4 	.word	0x1fff8ff4
    d698:	1fff8ff0 	.word	0x1fff8ff0

0000d69c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04(void)
{
    d69c:	b500      	push	{lr}
    d69e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6a0:	f7f3 fddc 	bl	125c <Sys_GetCoreID>
    d6a4:	4603      	mov	r3, r0
    d6a6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]--;
    d6a8:	4a0d      	ldr	r2, [pc, #52]	; (d6e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    d6aa:	9b01      	ldr	r3, [sp, #4]
    d6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6b0:	1e5a      	subs	r2, r3, #1
    d6b2:	490b      	ldr	r1, [pc, #44]	; (d6e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    d6b4:	9b01      	ldr	r3, [sp, #4]
    d6b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    d6ba:	4a0a      	ldr	r2, [pc, #40]	; (d6e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x48>)
    d6bc:	9b01      	ldr	r3, [sp, #4]
    d6be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6c2:	f003 0301 	and.w	r3, r3, #1
    d6c6:	2b00      	cmp	r3, #0
    d6c8:	d106      	bne.n	d6d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    d6ca:	4a05      	ldr	r2, [pc, #20]	; (d6e0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x44>)
    d6cc:	9b01      	ldr	r3, [sp, #4]
    d6ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6d2:	2b00      	cmp	r3, #0
    d6d4:	d100      	bne.n	d6d8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d6d6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d6d8:	bf00      	nop
    d6da:	b003      	add	sp, #12
    d6dc:	f85d fb04 	ldr.w	pc, [sp], #4
    d6e0:	1fff8ff4 	.word	0x1fff8ff4
    d6e4:	1fff8ff0 	.word	0x1fff8ff0

0000d6e8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    d6e8:	b500      	push	{lr}
    d6ea:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d6ec:	f7f3 fdb6 	bl	125c <Sys_GetCoreID>
    d6f0:	4603      	mov	r3, r0
    d6f2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId])
    d6f4:	4a10      	ldr	r2, [pc, #64]	; (d738 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    d6f6:	9b01      	ldr	r3, [sp, #4]
    d6f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d10d      	bne.n	d71c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d700:	f7f3 fac0 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    d704:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d706:	9b00      	ldr	r3, [sp, #0]
    d708:	f003 0301 	and.w	r3, r3, #1
    d70c:	2b00      	cmp	r3, #0
    d70e:	d100      	bne.n	d712 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d710:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    d712:	490a      	ldr	r1, [pc, #40]	; (d73c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x54>)
    d714:	9b01      	ldr	r3, [sp, #4]
    d716:	9a00      	ldr	r2, [sp, #0]
    d718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]++;
    d71c:	4a06      	ldr	r2, [pc, #24]	; (d738 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    d71e:	9b01      	ldr	r3, [sp, #4]
    d720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d724:	1c5a      	adds	r2, r3, #1
    d726:	4904      	ldr	r1, [pc, #16]	; (d738 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x50>)
    d728:	9b01      	ldr	r3, [sp, #4]
    d72a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d72e:	bf00      	nop
    d730:	b003      	add	sp, #12
    d732:	f85d fb04 	ldr.w	pc, [sp], #4
    d736:	bf00      	nop
    d738:	1fff8ffc 	.word	0x1fff8ffc
    d73c:	1fff8ff8 	.word	0x1fff8ff8

0000d740 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05(void)
{
    d740:	b500      	push	{lr}
    d742:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d744:	f7f3 fd8a 	bl	125c <Sys_GetCoreID>
    d748:	4603      	mov	r3, r0
    d74a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]--;
    d74c:	4a0d      	ldr	r2, [pc, #52]	; (d784 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    d74e:	9b01      	ldr	r3, [sp, #4]
    d750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d754:	1e5a      	subs	r2, r3, #1
    d756:	490b      	ldr	r1, [pc, #44]	; (d784 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    d758:	9b01      	ldr	r3, [sp, #4]
    d75a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    d75e:	4a0a      	ldr	r2, [pc, #40]	; (d788 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x48>)
    d760:	9b01      	ldr	r3, [sp, #4]
    d762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d766:	f003 0301 	and.w	r3, r3, #1
    d76a:	2b00      	cmp	r3, #0
    d76c:	d106      	bne.n	d77c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    d76e:	4a05      	ldr	r2, [pc, #20]	; (d784 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x44>)
    d770:	9b01      	ldr	r3, [sp, #4]
    d772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d776:	2b00      	cmp	r3, #0
    d778:	d100      	bne.n	d77c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d77a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d77c:	bf00      	nop
    d77e:	b003      	add	sp, #12
    d780:	f85d fb04 	ldr.w	pc, [sp], #4
    d784:	1fff8ffc 	.word	0x1fff8ffc
    d788:	1fff8ff8 	.word	0x1fff8ff8

0000d78c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    d78c:	b500      	push	{lr}
    d78e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d790:	f7f3 fd64 	bl	125c <Sys_GetCoreID>
    d794:	4603      	mov	r3, r0
    d796:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId])
    d798:	4a10      	ldr	r2, [pc, #64]	; (d7dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    d79a:	9b01      	ldr	r3, [sp, #4]
    d79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7a0:	2b00      	cmp	r3, #0
    d7a2:	d10d      	bne.n	d7c0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d7a4:	f7f3 fa6e 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    d7a8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d7aa:	9b00      	ldr	r3, [sp, #0]
    d7ac:	f003 0301 	and.w	r3, r3, #1
    d7b0:	2b00      	cmp	r3, #0
    d7b2:	d100      	bne.n	d7b6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d7b4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    d7b6:	490a      	ldr	r1, [pc, #40]	; (d7e0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x54>)
    d7b8:	9b01      	ldr	r3, [sp, #4]
    d7ba:	9a00      	ldr	r2, [sp, #0]
    d7bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]++;
    d7c0:	4a06      	ldr	r2, [pc, #24]	; (d7dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    d7c2:	9b01      	ldr	r3, [sp, #4]
    d7c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7c8:	1c5a      	adds	r2, r3, #1
    d7ca:	4904      	ldr	r1, [pc, #16]	; (d7dc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x50>)
    d7cc:	9b01      	ldr	r3, [sp, #4]
    d7ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d7d2:	bf00      	nop
    d7d4:	b003      	add	sp, #12
    d7d6:	f85d fb04 	ldr.w	pc, [sp], #4
    d7da:	bf00      	nop
    d7dc:	1fff9004 	.word	0x1fff9004
    d7e0:	1fff9000 	.word	0x1fff9000

0000d7e4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06(void)
{
    d7e4:	b500      	push	{lr}
    d7e6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d7e8:	f7f3 fd38 	bl	125c <Sys_GetCoreID>
    d7ec:	4603      	mov	r3, r0
    d7ee:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]--;
    d7f0:	4a0d      	ldr	r2, [pc, #52]	; (d828 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    d7f2:	9b01      	ldr	r3, [sp, #4]
    d7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d7f8:	1e5a      	subs	r2, r3, #1
    d7fa:	490b      	ldr	r1, [pc, #44]	; (d828 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    d7fc:	9b01      	ldr	r3, [sp, #4]
    d7fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    d802:	4a0a      	ldr	r2, [pc, #40]	; (d82c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x48>)
    d804:	9b01      	ldr	r3, [sp, #4]
    d806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d80a:	f003 0301 	and.w	r3, r3, #1
    d80e:	2b00      	cmp	r3, #0
    d810:	d106      	bne.n	d820 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    d812:	4a05      	ldr	r2, [pc, #20]	; (d828 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x44>)
    d814:	9b01      	ldr	r3, [sp, #4]
    d816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d81a:	2b00      	cmp	r3, #0
    d81c:	d100      	bne.n	d820 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d81e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d820:	bf00      	nop
    d822:	b003      	add	sp, #12
    d824:	f85d fb04 	ldr.w	pc, [sp], #4
    d828:	1fff9004 	.word	0x1fff9004
    d82c:	1fff9000 	.word	0x1fff9000

0000d830 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    d830:	b500      	push	{lr}
    d832:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d834:	f7f3 fd12 	bl	125c <Sys_GetCoreID>
    d838:	4603      	mov	r3, r0
    d83a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId])
    d83c:	4a10      	ldr	r2, [pc, #64]	; (d880 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    d83e:	9b01      	ldr	r3, [sp, #4]
    d840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d844:	2b00      	cmp	r3, #0
    d846:	d10d      	bne.n	d864 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d848:	f7f3 fa1c 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    d84c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d84e:	9b00      	ldr	r3, [sp, #0]
    d850:	f003 0301 	and.w	r3, r3, #1
    d854:	2b00      	cmp	r3, #0
    d856:	d100      	bne.n	d85a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d858:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    d85a:	490a      	ldr	r1, [pc, #40]	; (d884 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x54>)
    d85c:	9b01      	ldr	r3, [sp, #4]
    d85e:	9a00      	ldr	r2, [sp, #0]
    d860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]++;
    d864:	4a06      	ldr	r2, [pc, #24]	; (d880 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    d866:	9b01      	ldr	r3, [sp, #4]
    d868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d86c:	1c5a      	adds	r2, r3, #1
    d86e:	4904      	ldr	r1, [pc, #16]	; (d880 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x50>)
    d870:	9b01      	ldr	r3, [sp, #4]
    d872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d876:	bf00      	nop
    d878:	b003      	add	sp, #12
    d87a:	f85d fb04 	ldr.w	pc, [sp], #4
    d87e:	bf00      	nop
    d880:	1fff900c 	.word	0x1fff900c
    d884:	1fff9008 	.word	0x1fff9008

0000d888 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07(void)
{
    d888:	b500      	push	{lr}
    d88a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d88c:	f7f3 fce6 	bl	125c <Sys_GetCoreID>
    d890:	4603      	mov	r3, r0
    d892:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]--;
    d894:	4a0d      	ldr	r2, [pc, #52]	; (d8cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    d896:	9b01      	ldr	r3, [sp, #4]
    d898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d89c:	1e5a      	subs	r2, r3, #1
    d89e:	490b      	ldr	r1, [pc, #44]	; (d8cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    d8a0:	9b01      	ldr	r3, [sp, #4]
    d8a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    d8a6:	4a0a      	ldr	r2, [pc, #40]	; (d8d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x48>)
    d8a8:	9b01      	ldr	r3, [sp, #4]
    d8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8ae:	f003 0301 	and.w	r3, r3, #1
    d8b2:	2b00      	cmp	r3, #0
    d8b4:	d106      	bne.n	d8c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    d8b6:	4a05      	ldr	r2, [pc, #20]	; (d8cc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x44>)
    d8b8:	9b01      	ldr	r3, [sp, #4]
    d8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8be:	2b00      	cmp	r3, #0
    d8c0:	d100      	bne.n	d8c4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d8c2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d8c4:	bf00      	nop
    d8c6:	b003      	add	sp, #12
    d8c8:	f85d fb04 	ldr.w	pc, [sp], #4
    d8cc:	1fff900c 	.word	0x1fff900c
    d8d0:	1fff9008 	.word	0x1fff9008

0000d8d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    d8d4:	b500      	push	{lr}
    d8d6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d8d8:	f7f3 fcc0 	bl	125c <Sys_GetCoreID>
    d8dc:	4603      	mov	r3, r0
    d8de:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId])
    d8e0:	4a10      	ldr	r2, [pc, #64]	; (d924 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    d8e2:	9b01      	ldr	r3, [sp, #4]
    d8e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d8e8:	2b00      	cmp	r3, #0
    d8ea:	d10d      	bne.n	d908 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d8ec:	f7f3 f9ca 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    d8f0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d8f2:	9b00      	ldr	r3, [sp, #0]
    d8f4:	f003 0301 	and.w	r3, r3, #1
    d8f8:	2b00      	cmp	r3, #0
    d8fa:	d100      	bne.n	d8fe <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d8fc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    d8fe:	490a      	ldr	r1, [pc, #40]	; (d928 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x54>)
    d900:	9b01      	ldr	r3, [sp, #4]
    d902:	9a00      	ldr	r2, [sp, #0]
    d904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]++;
    d908:	4a06      	ldr	r2, [pc, #24]	; (d924 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    d90a:	9b01      	ldr	r3, [sp, #4]
    d90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d910:	1c5a      	adds	r2, r3, #1
    d912:	4904      	ldr	r1, [pc, #16]	; (d924 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x50>)
    d914:	9b01      	ldr	r3, [sp, #4]
    d916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d91a:	bf00      	nop
    d91c:	b003      	add	sp, #12
    d91e:	f85d fb04 	ldr.w	pc, [sp], #4
    d922:	bf00      	nop
    d924:	1fff9014 	.word	0x1fff9014
    d928:	1fff9010 	.word	0x1fff9010

0000d92c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08(void)
{
    d92c:	b500      	push	{lr}
    d92e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d930:	f7f3 fc94 	bl	125c <Sys_GetCoreID>
    d934:	4603      	mov	r3, r0
    d936:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]--;
    d938:	4a0d      	ldr	r2, [pc, #52]	; (d970 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    d93a:	9b01      	ldr	r3, [sp, #4]
    d93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d940:	1e5a      	subs	r2, r3, #1
    d942:	490b      	ldr	r1, [pc, #44]	; (d970 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    d944:	9b01      	ldr	r3, [sp, #4]
    d946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    d94a:	4a0a      	ldr	r2, [pc, #40]	; (d974 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x48>)
    d94c:	9b01      	ldr	r3, [sp, #4]
    d94e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d952:	f003 0301 	and.w	r3, r3, #1
    d956:	2b00      	cmp	r3, #0
    d958:	d106      	bne.n	d968 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    d95a:	4a05      	ldr	r2, [pc, #20]	; (d970 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x44>)
    d95c:	9b01      	ldr	r3, [sp, #4]
    d95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d962:	2b00      	cmp	r3, #0
    d964:	d100      	bne.n	d968 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    d966:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    d968:	bf00      	nop
    d96a:	b003      	add	sp, #12
    d96c:	f85d fb04 	ldr.w	pc, [sp], #4
    d970:	1fff9014 	.word	0x1fff9014
    d974:	1fff9010 	.word	0x1fff9010

0000d978 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    d978:	b500      	push	{lr}
    d97a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d97c:	f7f3 fc6e 	bl	125c <Sys_GetCoreID>
    d980:	4603      	mov	r3, r0
    d982:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId])
    d984:	4a10      	ldr	r2, [pc, #64]	; (d9c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    d986:	9b01      	ldr	r3, [sp, #4]
    d988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d98c:	2b00      	cmp	r3, #0
    d98e:	d10d      	bne.n	d9ac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    d990:	f7f3 f978 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    d994:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    d996:	9b00      	ldr	r3, [sp, #0]
    d998:	f003 0301 	and.w	r3, r3, #1
    d99c:	2b00      	cmp	r3, #0
    d99e:	d100      	bne.n	d9a2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    d9a0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    d9a2:	490a      	ldr	r1, [pc, #40]	; (d9cc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x54>)
    d9a4:	9b01      	ldr	r3, [sp, #4]
    d9a6:	9a00      	ldr	r2, [sp, #0]
    d9a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]++;
    d9ac:	4a06      	ldr	r2, [pc, #24]	; (d9c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    d9ae:	9b01      	ldr	r3, [sp, #4]
    d9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9b4:	1c5a      	adds	r2, r3, #1
    d9b6:	4904      	ldr	r1, [pc, #16]	; (d9c8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x50>)
    d9b8:	9b01      	ldr	r3, [sp, #4]
    d9ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    d9be:	bf00      	nop
    d9c0:	b003      	add	sp, #12
    d9c2:	f85d fb04 	ldr.w	pc, [sp], #4
    d9c6:	bf00      	nop
    d9c8:	1fff901c 	.word	0x1fff901c
    d9cc:	1fff9018 	.word	0x1fff9018

0000d9d0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09(void)
{
    d9d0:	b500      	push	{lr}
    d9d2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    d9d4:	f7f3 fc42 	bl	125c <Sys_GetCoreID>
    d9d8:	4603      	mov	r3, r0
    d9da:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]--;
    d9dc:	4a0d      	ldr	r2, [pc, #52]	; (da14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d9de:	9b01      	ldr	r3, [sp, #4]
    d9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9e4:	1e5a      	subs	r2, r3, #1
    d9e6:	490b      	ldr	r1, [pc, #44]	; (da14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    d9e8:	9b01      	ldr	r3, [sp, #4]
    d9ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    d9ee:	4a0a      	ldr	r2, [pc, #40]	; (da18 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x48>)
    d9f0:	9b01      	ldr	r3, [sp, #4]
    d9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d9f6:	f003 0301 	and.w	r3, r3, #1
    d9fa:	2b00      	cmp	r3, #0
    d9fc:	d106      	bne.n	da0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    d9fe:	4a05      	ldr	r2, [pc, #20]	; (da14 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x44>)
    da00:	9b01      	ldr	r3, [sp, #4]
    da02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da06:	2b00      	cmp	r3, #0
    da08:	d100      	bne.n	da0c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    da0a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    da0c:	bf00      	nop
    da0e:	b003      	add	sp, #12
    da10:	f85d fb04 	ldr.w	pc, [sp], #4
    da14:	1fff901c 	.word	0x1fff901c
    da18:	1fff9018 	.word	0x1fff9018

0000da1c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    da1c:	b500      	push	{lr}
    da1e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da20:	f7f3 fc1c 	bl	125c <Sys_GetCoreID>
    da24:	4603      	mov	r3, r0
    da26:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId])
    da28:	4a10      	ldr	r2, [pc, #64]	; (da6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    da2a:	9b01      	ldr	r3, [sp, #4]
    da2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da30:	2b00      	cmp	r3, #0
    da32:	d10d      	bne.n	da50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    da34:	f7f3 f926 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    da38:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    da3a:	9b00      	ldr	r3, [sp, #0]
    da3c:	f003 0301 	and.w	r3, r3, #1
    da40:	2b00      	cmp	r3, #0
    da42:	d100      	bne.n	da46 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    da44:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    da46:	490a      	ldr	r1, [pc, #40]	; (da70 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x54>)
    da48:	9b01      	ldr	r3, [sp, #4]
    da4a:	9a00      	ldr	r2, [sp, #0]
    da4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]++;
    da50:	4a06      	ldr	r2, [pc, #24]	; (da6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    da52:	9b01      	ldr	r3, [sp, #4]
    da54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da58:	1c5a      	adds	r2, r3, #1
    da5a:	4904      	ldr	r1, [pc, #16]	; (da6c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x50>)
    da5c:	9b01      	ldr	r3, [sp, #4]
    da5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    da62:	bf00      	nop
    da64:	b003      	add	sp, #12
    da66:	f85d fb04 	ldr.w	pc, [sp], #4
    da6a:	bf00      	nop
    da6c:	1fff9024 	.word	0x1fff9024
    da70:	1fff9020 	.word	0x1fff9020

0000da74 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10(void)
{
    da74:	b500      	push	{lr}
    da76:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    da78:	f7f3 fbf0 	bl	125c <Sys_GetCoreID>
    da7c:	4603      	mov	r3, r0
    da7e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]--;
    da80:	4a0d      	ldr	r2, [pc, #52]	; (dab8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    da82:	9b01      	ldr	r3, [sp, #4]
    da84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da88:	1e5a      	subs	r2, r3, #1
    da8a:	490b      	ldr	r1, [pc, #44]	; (dab8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    da8c:	9b01      	ldr	r3, [sp, #4]
    da8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    da92:	4a0a      	ldr	r2, [pc, #40]	; (dabc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x48>)
    da94:	9b01      	ldr	r3, [sp, #4]
    da96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    da9a:	f003 0301 	and.w	r3, r3, #1
    da9e:	2b00      	cmp	r3, #0
    daa0:	d106      	bne.n	dab0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    daa2:	4a05      	ldr	r2, [pc, #20]	; (dab8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x44>)
    daa4:	9b01      	ldr	r3, [sp, #4]
    daa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    daaa:	2b00      	cmp	r3, #0
    daac:	d100      	bne.n	dab0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    daae:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dab0:	bf00      	nop
    dab2:	b003      	add	sp, #12
    dab4:	f85d fb04 	ldr.w	pc, [sp], #4
    dab8:	1fff9024 	.word	0x1fff9024
    dabc:	1fff9020 	.word	0x1fff9020

0000dac0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    dac0:	b500      	push	{lr}
    dac2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dac4:	f7f3 fbca 	bl	125c <Sys_GetCoreID>
    dac8:	4603      	mov	r3, r0
    daca:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId])
    dacc:	4a10      	ldr	r2, [pc, #64]	; (db10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    dace:	9b01      	ldr	r3, [sp, #4]
    dad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dad4:	2b00      	cmp	r3, #0
    dad6:	d10d      	bne.n	daf4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dad8:	f7f3 f8d4 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    dadc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dade:	9b00      	ldr	r3, [sp, #0]
    dae0:	f003 0301 	and.w	r3, r3, #1
    dae4:	2b00      	cmp	r3, #0
    dae6:	d100      	bne.n	daea <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dae8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    daea:	490a      	ldr	r1, [pc, #40]	; (db14 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x54>)
    daec:	9b01      	ldr	r3, [sp, #4]
    daee:	9a00      	ldr	r2, [sp, #0]
    daf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]++;
    daf4:	4a06      	ldr	r2, [pc, #24]	; (db10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    daf6:	9b01      	ldr	r3, [sp, #4]
    daf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dafc:	1c5a      	adds	r2, r3, #1
    dafe:	4904      	ldr	r1, [pc, #16]	; (db10 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x50>)
    db00:	9b01      	ldr	r3, [sp, #4]
    db02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    db06:	bf00      	nop
    db08:	b003      	add	sp, #12
    db0a:	f85d fb04 	ldr.w	pc, [sp], #4
    db0e:	bf00      	nop
    db10:	1fff902c 	.word	0x1fff902c
    db14:	1fff9028 	.word	0x1fff9028

0000db18 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11(void)
{
    db18:	b500      	push	{lr}
    db1a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db1c:	f7f3 fb9e 	bl	125c <Sys_GetCoreID>
    db20:	4603      	mov	r3, r0
    db22:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]--;
    db24:	4a0d      	ldr	r2, [pc, #52]	; (db5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    db26:	9b01      	ldr	r3, [sp, #4]
    db28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db2c:	1e5a      	subs	r2, r3, #1
    db2e:	490b      	ldr	r1, [pc, #44]	; (db5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    db30:	9b01      	ldr	r3, [sp, #4]
    db32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    db36:	4a0a      	ldr	r2, [pc, #40]	; (db60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x48>)
    db38:	9b01      	ldr	r3, [sp, #4]
    db3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db3e:	f003 0301 	and.w	r3, r3, #1
    db42:	2b00      	cmp	r3, #0
    db44:	d106      	bne.n	db54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    db46:	4a05      	ldr	r2, [pc, #20]	; (db5c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x44>)
    db48:	9b01      	ldr	r3, [sp, #4]
    db4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db4e:	2b00      	cmp	r3, #0
    db50:	d100      	bne.n	db54 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    db52:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    db54:	bf00      	nop
    db56:	b003      	add	sp, #12
    db58:	f85d fb04 	ldr.w	pc, [sp], #4
    db5c:	1fff902c 	.word	0x1fff902c
    db60:	1fff9028 	.word	0x1fff9028

0000db64 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    db64:	b500      	push	{lr}
    db66:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    db68:	f7f3 fb78 	bl	125c <Sys_GetCoreID>
    db6c:	4603      	mov	r3, r0
    db6e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId])
    db70:	4a10      	ldr	r2, [pc, #64]	; (dbb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    db72:	9b01      	ldr	r3, [sp, #4]
    db74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    db78:	2b00      	cmp	r3, #0
    db7a:	d10d      	bne.n	db98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    db7c:	f7f3 f882 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    db80:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    db82:	9b00      	ldr	r3, [sp, #0]
    db84:	f003 0301 	and.w	r3, r3, #1
    db88:	2b00      	cmp	r3, #0
    db8a:	d100      	bne.n	db8e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    db8c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    db8e:	490a      	ldr	r1, [pc, #40]	; (dbb8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x54>)
    db90:	9b01      	ldr	r3, [sp, #4]
    db92:	9a00      	ldr	r2, [sp, #0]
    db94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]++;
    db98:	4a06      	ldr	r2, [pc, #24]	; (dbb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    db9a:	9b01      	ldr	r3, [sp, #4]
    db9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dba0:	1c5a      	adds	r2, r3, #1
    dba2:	4904      	ldr	r1, [pc, #16]	; (dbb4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x50>)
    dba4:	9b01      	ldr	r3, [sp, #4]
    dba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dbaa:	bf00      	nop
    dbac:	b003      	add	sp, #12
    dbae:	f85d fb04 	ldr.w	pc, [sp], #4
    dbb2:	bf00      	nop
    dbb4:	1fff9034 	.word	0x1fff9034
    dbb8:	1fff9030 	.word	0x1fff9030

0000dbbc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12(void)
{
    dbbc:	b500      	push	{lr}
    dbbe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dbc0:	f7f3 fb4c 	bl	125c <Sys_GetCoreID>
    dbc4:	4603      	mov	r3, r0
    dbc6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]--;
    dbc8:	4a0d      	ldr	r2, [pc, #52]	; (dc00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    dbca:	9b01      	ldr	r3, [sp, #4]
    dbcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbd0:	1e5a      	subs	r2, r3, #1
    dbd2:	490b      	ldr	r1, [pc, #44]	; (dc00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    dbd4:	9b01      	ldr	r3, [sp, #4]
    dbd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    dbda:	4a0a      	ldr	r2, [pc, #40]	; (dc04 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x48>)
    dbdc:	9b01      	ldr	r3, [sp, #4]
    dbde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbe2:	f003 0301 	and.w	r3, r3, #1
    dbe6:	2b00      	cmp	r3, #0
    dbe8:	d106      	bne.n	dbf8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    dbea:	4a05      	ldr	r2, [pc, #20]	; (dc00 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x44>)
    dbec:	9b01      	ldr	r3, [sp, #4]
    dbee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dbf2:	2b00      	cmp	r3, #0
    dbf4:	d100      	bne.n	dbf8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dbf6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dbf8:	bf00      	nop
    dbfa:	b003      	add	sp, #12
    dbfc:	f85d fb04 	ldr.w	pc, [sp], #4
    dc00:	1fff9034 	.word	0x1fff9034
    dc04:	1fff9030 	.word	0x1fff9030

0000dc08 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    dc08:	b500      	push	{lr}
    dc0a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc0c:	f7f3 fb26 	bl	125c <Sys_GetCoreID>
    dc10:	4603      	mov	r3, r0
    dc12:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId])
    dc14:	4a10      	ldr	r2, [pc, #64]	; (dc58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    dc16:	9b01      	ldr	r3, [sp, #4]
    dc18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d10d      	bne.n	dc3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dc20:	f7f3 f830 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    dc24:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dc26:	9b00      	ldr	r3, [sp, #0]
    dc28:	f003 0301 	and.w	r3, r3, #1
    dc2c:	2b00      	cmp	r3, #0
    dc2e:	d100      	bne.n	dc32 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dc30:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    dc32:	490a      	ldr	r1, [pc, #40]	; (dc5c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x54>)
    dc34:	9b01      	ldr	r3, [sp, #4]
    dc36:	9a00      	ldr	r2, [sp, #0]
    dc38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]++;
    dc3c:	4a06      	ldr	r2, [pc, #24]	; (dc58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    dc3e:	9b01      	ldr	r3, [sp, #4]
    dc40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc44:	1c5a      	adds	r2, r3, #1
    dc46:	4904      	ldr	r1, [pc, #16]	; (dc58 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x50>)
    dc48:	9b01      	ldr	r3, [sp, #4]
    dc4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dc4e:	bf00      	nop
    dc50:	b003      	add	sp, #12
    dc52:	f85d fb04 	ldr.w	pc, [sp], #4
    dc56:	bf00      	nop
    dc58:	1fff903c 	.word	0x1fff903c
    dc5c:	1fff9038 	.word	0x1fff9038

0000dc60 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13(void)
{
    dc60:	b500      	push	{lr}
    dc62:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dc64:	f7f3 fafa 	bl	125c <Sys_GetCoreID>
    dc68:	4603      	mov	r3, r0
    dc6a:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]--;
    dc6c:	4a0d      	ldr	r2, [pc, #52]	; (dca4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    dc6e:	9b01      	ldr	r3, [sp, #4]
    dc70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc74:	1e5a      	subs	r2, r3, #1
    dc76:	490b      	ldr	r1, [pc, #44]	; (dca4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    dc78:	9b01      	ldr	r3, [sp, #4]
    dc7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    dc7e:	4a0a      	ldr	r2, [pc, #40]	; (dca8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x48>)
    dc80:	9b01      	ldr	r3, [sp, #4]
    dc82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc86:	f003 0301 	and.w	r3, r3, #1
    dc8a:	2b00      	cmp	r3, #0
    dc8c:	d106      	bne.n	dc9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    dc8e:	4a05      	ldr	r2, [pc, #20]	; (dca4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x44>)
    dc90:	9b01      	ldr	r3, [sp, #4]
    dc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dc96:	2b00      	cmp	r3, #0
    dc98:	d100      	bne.n	dc9c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dc9a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dc9c:	bf00      	nop
    dc9e:	b003      	add	sp, #12
    dca0:	f85d fb04 	ldr.w	pc, [sp], #4
    dca4:	1fff903c 	.word	0x1fff903c
    dca8:	1fff9038 	.word	0x1fff9038

0000dcac <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    dcac:	b500      	push	{lr}
    dcae:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dcb0:	f7f3 fad4 	bl	125c <Sys_GetCoreID>
    dcb4:	4603      	mov	r3, r0
    dcb6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId])
    dcb8:	4a10      	ldr	r2, [pc, #64]	; (dcfc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    dcba:	9b01      	ldr	r3, [sp, #4]
    dcbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dcc0:	2b00      	cmp	r3, #0
    dcc2:	d10d      	bne.n	dce0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dcc4:	f7f2 ffde 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    dcc8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dcca:	9b00      	ldr	r3, [sp, #0]
    dccc:	f003 0301 	and.w	r3, r3, #1
    dcd0:	2b00      	cmp	r3, #0
    dcd2:	d100      	bne.n	dcd6 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dcd4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    dcd6:	490a      	ldr	r1, [pc, #40]	; (dd00 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x54>)
    dcd8:	9b01      	ldr	r3, [sp, #4]
    dcda:	9a00      	ldr	r2, [sp, #0]
    dcdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]++;
    dce0:	4a06      	ldr	r2, [pc, #24]	; (dcfc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    dce2:	9b01      	ldr	r3, [sp, #4]
    dce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dce8:	1c5a      	adds	r2, r3, #1
    dcea:	4904      	ldr	r1, [pc, #16]	; (dcfc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x50>)
    dcec:	9b01      	ldr	r3, [sp, #4]
    dcee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dcf2:	bf00      	nop
    dcf4:	b003      	add	sp, #12
    dcf6:	f85d fb04 	ldr.w	pc, [sp], #4
    dcfa:	bf00      	nop
    dcfc:	1fff9044 	.word	0x1fff9044
    dd00:	1fff9040 	.word	0x1fff9040

0000dd04 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14(void)
{
    dd04:	b500      	push	{lr}
    dd06:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd08:	f7f3 faa8 	bl	125c <Sys_GetCoreID>
    dd0c:	4603      	mov	r3, r0
    dd0e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]--;
    dd10:	4a0d      	ldr	r2, [pc, #52]	; (dd48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    dd12:	9b01      	ldr	r3, [sp, #4]
    dd14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd18:	1e5a      	subs	r2, r3, #1
    dd1a:	490b      	ldr	r1, [pc, #44]	; (dd48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    dd1c:	9b01      	ldr	r3, [sp, #4]
    dd1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    dd22:	4a0a      	ldr	r2, [pc, #40]	; (dd4c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x48>)
    dd24:	9b01      	ldr	r3, [sp, #4]
    dd26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd2a:	f003 0301 	and.w	r3, r3, #1
    dd2e:	2b00      	cmp	r3, #0
    dd30:	d106      	bne.n	dd40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    dd32:	4a05      	ldr	r2, [pc, #20]	; (dd48 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x44>)
    dd34:	9b01      	ldr	r3, [sp, #4]
    dd36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	d100      	bne.n	dd40 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dd3e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dd40:	bf00      	nop
    dd42:	b003      	add	sp, #12
    dd44:	f85d fb04 	ldr.w	pc, [sp], #4
    dd48:	1fff9044 	.word	0x1fff9044
    dd4c:	1fff9040 	.word	0x1fff9040

0000dd50 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    dd50:	b500      	push	{lr}
    dd52:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dd54:	f7f3 fa82 	bl	125c <Sys_GetCoreID>
    dd58:	4603      	mov	r3, r0
    dd5a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId])
    dd5c:	4a10      	ldr	r2, [pc, #64]	; (dda0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    dd5e:	9b01      	ldr	r3, [sp, #4]
    dd60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd64:	2b00      	cmp	r3, #0
    dd66:	d10d      	bne.n	dd84 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dd68:	f7f2 ff8c 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    dd6c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dd6e:	9b00      	ldr	r3, [sp, #0]
    dd70:	f003 0301 	and.w	r3, r3, #1
    dd74:	2b00      	cmp	r3, #0
    dd76:	d100      	bne.n	dd7a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dd78:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    dd7a:	490a      	ldr	r1, [pc, #40]	; (dda4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x54>)
    dd7c:	9b01      	ldr	r3, [sp, #4]
    dd7e:	9a00      	ldr	r2, [sp, #0]
    dd80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]++;
    dd84:	4a06      	ldr	r2, [pc, #24]	; (dda0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    dd86:	9b01      	ldr	r3, [sp, #4]
    dd88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dd8c:	1c5a      	adds	r2, r3, #1
    dd8e:	4904      	ldr	r1, [pc, #16]	; (dda0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x50>)
    dd90:	9b01      	ldr	r3, [sp, #4]
    dd92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dd96:	bf00      	nop
    dd98:	b003      	add	sp, #12
    dd9a:	f85d fb04 	ldr.w	pc, [sp], #4
    dd9e:	bf00      	nop
    dda0:	1fff904c 	.word	0x1fff904c
    dda4:	1fff9048 	.word	0x1fff9048

0000dda8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15(void)
{
    dda8:	b500      	push	{lr}
    ddaa:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddac:	f7f3 fa56 	bl	125c <Sys_GetCoreID>
    ddb0:	4603      	mov	r3, r0
    ddb2:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]--;
    ddb4:	4a0d      	ldr	r2, [pc, #52]	; (ddec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    ddb6:	9b01      	ldr	r3, [sp, #4]
    ddb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddbc:	1e5a      	subs	r2, r3, #1
    ddbe:	490b      	ldr	r1, [pc, #44]	; (ddec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    ddc0:	9b01      	ldr	r3, [sp, #4]
    ddc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    ddc6:	4a0a      	ldr	r2, [pc, #40]	; (ddf0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x48>)
    ddc8:	9b01      	ldr	r3, [sp, #4]
    ddca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddce:	f003 0301 	and.w	r3, r3, #1
    ddd2:	2b00      	cmp	r3, #0
    ddd4:	d106      	bne.n	dde4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    ddd6:	4a05      	ldr	r2, [pc, #20]	; (ddec <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x44>)
    ddd8:	9b01      	ldr	r3, [sp, #4]
    ddda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ddde:	2b00      	cmp	r3, #0
    dde0:	d100      	bne.n	dde4 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dde2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dde4:	bf00      	nop
    dde6:	b003      	add	sp, #12
    dde8:	f85d fb04 	ldr.w	pc, [sp], #4
    ddec:	1fff904c 	.word	0x1fff904c
    ddf0:	1fff9048 	.word	0x1fff9048

0000ddf4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    ddf4:	b500      	push	{lr}
    ddf6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ddf8:	f7f3 fa30 	bl	125c <Sys_GetCoreID>
    ddfc:	4603      	mov	r3, r0
    ddfe:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId])
    de00:	4a10      	ldr	r2, [pc, #64]	; (de44 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    de02:	9b01      	ldr	r3, [sp, #4]
    de04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de08:	2b00      	cmp	r3, #0
    de0a:	d10d      	bne.n	de28 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    de0c:	f7f2 ff3a 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    de10:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    de12:	9b00      	ldr	r3, [sp, #0]
    de14:	f003 0301 	and.w	r3, r3, #1
    de18:	2b00      	cmp	r3, #0
    de1a:	d100      	bne.n	de1e <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    de1c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    de1e:	490a      	ldr	r1, [pc, #40]	; (de48 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x54>)
    de20:	9b01      	ldr	r3, [sp, #4]
    de22:	9a00      	ldr	r2, [sp, #0]
    de24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]++;
    de28:	4a06      	ldr	r2, [pc, #24]	; (de44 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    de2a:	9b01      	ldr	r3, [sp, #4]
    de2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de30:	1c5a      	adds	r2, r3, #1
    de32:	4904      	ldr	r1, [pc, #16]	; (de44 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x50>)
    de34:	9b01      	ldr	r3, [sp, #4]
    de36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    de3a:	bf00      	nop
    de3c:	b003      	add	sp, #12
    de3e:	f85d fb04 	ldr.w	pc, [sp], #4
    de42:	bf00      	nop
    de44:	1fff9054 	.word	0x1fff9054
    de48:	1fff9050 	.word	0x1fff9050

0000de4c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16(void)
{
    de4c:	b500      	push	{lr}
    de4e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de50:	f7f3 fa04 	bl	125c <Sys_GetCoreID>
    de54:	4603      	mov	r3, r0
    de56:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]--;
    de58:	4a0d      	ldr	r2, [pc, #52]	; (de90 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    de5a:	9b01      	ldr	r3, [sp, #4]
    de5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de60:	1e5a      	subs	r2, r3, #1
    de62:	490b      	ldr	r1, [pc, #44]	; (de90 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    de64:	9b01      	ldr	r3, [sp, #4]
    de66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    de6a:	4a0a      	ldr	r2, [pc, #40]	; (de94 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x48>)
    de6c:	9b01      	ldr	r3, [sp, #4]
    de6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de72:	f003 0301 	and.w	r3, r3, #1
    de76:	2b00      	cmp	r3, #0
    de78:	d106      	bne.n	de88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    de7a:	4a05      	ldr	r2, [pc, #20]	; (de90 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x44>)
    de7c:	9b01      	ldr	r3, [sp, #4]
    de7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    de82:	2b00      	cmp	r3, #0
    de84:	d100      	bne.n	de88 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    de86:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    de88:	bf00      	nop
    de8a:	b003      	add	sp, #12
    de8c:	f85d fb04 	ldr.w	pc, [sp], #4
    de90:	1fff9054 	.word	0x1fff9054
    de94:	1fff9050 	.word	0x1fff9050

0000de98 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    de98:	b500      	push	{lr}
    de9a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    de9c:	f7f3 f9de 	bl	125c <Sys_GetCoreID>
    dea0:	4603      	mov	r3, r0
    dea2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId])
    dea4:	4a10      	ldr	r2, [pc, #64]	; (dee8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    dea6:	9b01      	ldr	r3, [sp, #4]
    dea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    deac:	2b00      	cmp	r3, #0
    deae:	d10d      	bne.n	decc <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    deb0:	f7f2 fee8 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    deb4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    deb6:	9b00      	ldr	r3, [sp, #0]
    deb8:	f003 0301 	and.w	r3, r3, #1
    debc:	2b00      	cmp	r3, #0
    debe:	d100      	bne.n	dec2 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    dec0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    dec2:	490a      	ldr	r1, [pc, #40]	; (deec <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x54>)
    dec4:	9b01      	ldr	r3, [sp, #4]
    dec6:	9a00      	ldr	r2, [sp, #0]
    dec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]++;
    decc:	4a06      	ldr	r2, [pc, #24]	; (dee8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    dece:	9b01      	ldr	r3, [sp, #4]
    ded0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ded4:	1c5a      	adds	r2, r3, #1
    ded6:	4904      	ldr	r1, [pc, #16]	; (dee8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x50>)
    ded8:	9b01      	ldr	r3, [sp, #4]
    deda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    dede:	bf00      	nop
    dee0:	b003      	add	sp, #12
    dee2:	f85d fb04 	ldr.w	pc, [sp], #4
    dee6:	bf00      	nop
    dee8:	1fff905c 	.word	0x1fff905c
    deec:	1fff9058 	.word	0x1fff9058

0000def0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17(void)
{
    def0:	b500      	push	{lr}
    def2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    def4:	f7f3 f9b2 	bl	125c <Sys_GetCoreID>
    def8:	4603      	mov	r3, r0
    defa:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]--;
    defc:	4a0d      	ldr	r2, [pc, #52]	; (df34 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    defe:	9b01      	ldr	r3, [sp, #4]
    df00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df04:	1e5a      	subs	r2, r3, #1
    df06:	490b      	ldr	r1, [pc, #44]	; (df34 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    df08:	9b01      	ldr	r3, [sp, #4]
    df0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    df0e:	4a0a      	ldr	r2, [pc, #40]	; (df38 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x48>)
    df10:	9b01      	ldr	r3, [sp, #4]
    df12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df16:	f003 0301 	and.w	r3, r3, #1
    df1a:	2b00      	cmp	r3, #0
    df1c:	d106      	bne.n	df2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    df1e:	4a05      	ldr	r2, [pc, #20]	; (df34 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x44>)
    df20:	9b01      	ldr	r3, [sp, #4]
    df22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df26:	2b00      	cmp	r3, #0
    df28:	d100      	bne.n	df2c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    df2a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    df2c:	bf00      	nop
    df2e:	b003      	add	sp, #12
    df30:	f85d fb04 	ldr.w	pc, [sp], #4
    df34:	1fff905c 	.word	0x1fff905c
    df38:	1fff9058 	.word	0x1fff9058

0000df3c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    df3c:	b500      	push	{lr}
    df3e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df40:	f7f3 f98c 	bl	125c <Sys_GetCoreID>
    df44:	4603      	mov	r3, r0
    df46:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId])
    df48:	4a10      	ldr	r2, [pc, #64]	; (df8c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    df4a:	9b01      	ldr	r3, [sp, #4]
    df4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df50:	2b00      	cmp	r3, #0
    df52:	d10d      	bne.n	df70 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    df54:	f7f2 fe96 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    df58:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    df5a:	9b00      	ldr	r3, [sp, #0]
    df5c:	f003 0301 	and.w	r3, r3, #1
    df60:	2b00      	cmp	r3, #0
    df62:	d100      	bne.n	df66 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    df64:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    df66:	490a      	ldr	r1, [pc, #40]	; (df90 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x54>)
    df68:	9b01      	ldr	r3, [sp, #4]
    df6a:	9a00      	ldr	r2, [sp, #0]
    df6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]++;
    df70:	4a06      	ldr	r2, [pc, #24]	; (df8c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    df72:	9b01      	ldr	r3, [sp, #4]
    df74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    df78:	1c5a      	adds	r2, r3, #1
    df7a:	4904      	ldr	r1, [pc, #16]	; (df8c <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x50>)
    df7c:	9b01      	ldr	r3, [sp, #4]
    df7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    df82:	bf00      	nop
    df84:	b003      	add	sp, #12
    df86:	f85d fb04 	ldr.w	pc, [sp], #4
    df8a:	bf00      	nop
    df8c:	1fff9064 	.word	0x1fff9064
    df90:	1fff9060 	.word	0x1fff9060

0000df94 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18(void)
{
    df94:	b500      	push	{lr}
    df96:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    df98:	f7f3 f960 	bl	125c <Sys_GetCoreID>
    df9c:	4603      	mov	r3, r0
    df9e:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]--;
    dfa0:	4a0d      	ldr	r2, [pc, #52]	; (dfd8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    dfa2:	9b01      	ldr	r3, [sp, #4]
    dfa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfa8:	1e5a      	subs	r2, r3, #1
    dfaa:	490b      	ldr	r1, [pc, #44]	; (dfd8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    dfac:	9b01      	ldr	r3, [sp, #4]
    dfae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    dfb2:	4a0a      	ldr	r2, [pc, #40]	; (dfdc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x48>)
    dfb4:	9b01      	ldr	r3, [sp, #4]
    dfb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfba:	f003 0301 	and.w	r3, r3, #1
    dfbe:	2b00      	cmp	r3, #0
    dfc0:	d106      	bne.n	dfd0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    dfc2:	4a05      	ldr	r2, [pc, #20]	; (dfd8 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x44>)
    dfc4:	9b01      	ldr	r3, [sp, #4]
    dfc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dfca:	2b00      	cmp	r3, #0
    dfcc:	d100      	bne.n	dfd0 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    dfce:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    dfd0:	bf00      	nop
    dfd2:	b003      	add	sp, #12
    dfd4:	f85d fb04 	ldr.w	pc, [sp], #4
    dfd8:	1fff9064 	.word	0x1fff9064
    dfdc:	1fff9060 	.word	0x1fff9060

0000dfe0 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    dfe0:	b500      	push	{lr}
    dfe2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    dfe4:	f7f3 f93a 	bl	125c <Sys_GetCoreID>
    dfe8:	4603      	mov	r3, r0
    dfea:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId])
    dfec:	4a10      	ldr	r2, [pc, #64]	; (e030 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    dfee:	9b01      	ldr	r3, [sp, #4]
    dff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    dff4:	2b00      	cmp	r3, #0
    dff6:	d10d      	bne.n	e014 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    dff8:	f7f2 fe44 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    dffc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    dffe:	9b00      	ldr	r3, [sp, #0]
    e000:	f003 0301 	and.w	r3, r3, #1
    e004:	2b00      	cmp	r3, #0
    e006:	d100      	bne.n	e00a <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e008:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    e00a:	490a      	ldr	r1, [pc, #40]	; (e034 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x54>)
    e00c:	9b01      	ldr	r3, [sp, #4]
    e00e:	9a00      	ldr	r2, [sp, #0]
    e010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]++;
    e014:	4a06      	ldr	r2, [pc, #24]	; (e030 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    e016:	9b01      	ldr	r3, [sp, #4]
    e018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e01c:	1c5a      	adds	r2, r3, #1
    e01e:	4904      	ldr	r1, [pc, #16]	; (e030 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x50>)
    e020:	9b01      	ldr	r3, [sp, #4]
    e022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e026:	bf00      	nop
    e028:	b003      	add	sp, #12
    e02a:	f85d fb04 	ldr.w	pc, [sp], #4
    e02e:	bf00      	nop
    e030:	1fff906c 	.word	0x1fff906c
    e034:	1fff9068 	.word	0x1fff9068

0000e038 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19(void)
{
    e038:	b500      	push	{lr}
    e03a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e03c:	f7f3 f90e 	bl	125c <Sys_GetCoreID>
    e040:	4603      	mov	r3, r0
    e042:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]--;
    e044:	4a0d      	ldr	r2, [pc, #52]	; (e07c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    e046:	9b01      	ldr	r3, [sp, #4]
    e048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e04c:	1e5a      	subs	r2, r3, #1
    e04e:	490b      	ldr	r1, [pc, #44]	; (e07c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    e050:	9b01      	ldr	r3, [sp, #4]
    e052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    e056:	4a0a      	ldr	r2, [pc, #40]	; (e080 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x48>)
    e058:	9b01      	ldr	r3, [sp, #4]
    e05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e05e:	f003 0301 	and.w	r3, r3, #1
    e062:	2b00      	cmp	r3, #0
    e064:	d106      	bne.n	e074 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    e066:	4a05      	ldr	r2, [pc, #20]	; (e07c <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x44>)
    e068:	9b01      	ldr	r3, [sp, #4]
    e06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e06e:	2b00      	cmp	r3, #0
    e070:	d100      	bne.n	e074 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e072:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e074:	bf00      	nop
    e076:	b003      	add	sp, #12
    e078:	f85d fb04 	ldr.w	pc, [sp], #4
    e07c:	1fff906c 	.word	0x1fff906c
    e080:	1fff9068 	.word	0x1fff9068

0000e084 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    e084:	b500      	push	{lr}
    e086:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e088:	f7f3 f8e8 	bl	125c <Sys_GetCoreID>
    e08c:	4603      	mov	r3, r0
    e08e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId])
    e090:	4a10      	ldr	r2, [pc, #64]	; (e0d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    e092:	9b01      	ldr	r3, [sp, #4]
    e094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e098:	2b00      	cmp	r3, #0
    e09a:	d10d      	bne.n	e0b8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Can_43_FLEXCAN_schm_read_msr);
#else
        msr = Can_43_FLEXCAN_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e09c:	f7f2 fdf2 	bl	c84 <Can_43_FLEXCAN_schm_read_msr>
    e0a0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e0a2:	9b00      	ldr	r3, [sp, #0]
    e0a4:	f003 0301 	and.w	r3, r3, #1
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	d100      	bne.n	e0ae <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e0ac:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_CAN_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    e0ae:	490a      	ldr	r1, [pc, #40]	; (e0d8 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x54>)
    e0b0:	9b01      	ldr	r3, [sp, #4]
    e0b2:	9a00      	ldr	r2, [sp, #0]
    e0b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]++;
    e0b8:	4a06      	ldr	r2, [pc, #24]	; (e0d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    e0ba:	9b01      	ldr	r3, [sp, #4]
    e0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0c0:	1c5a      	adds	r2, r3, #1
    e0c2:	4904      	ldr	r1, [pc, #16]	; (e0d4 <SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x50>)
    e0c4:	9b01      	ldr	r3, [sp, #4]
    e0c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e0ca:	bf00      	nop
    e0cc:	b003      	add	sp, #12
    e0ce:	f85d fb04 	ldr.w	pc, [sp], #4
    e0d2:	bf00      	nop
    e0d4:	1fff9074 	.word	0x1fff9074
    e0d8:	1fff9070 	.word	0x1fff9070

0000e0dc <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20>:

void SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20(void)
{
    e0dc:	b500      	push	{lr}
    e0de:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e0e0:	f7f3 f8bc 	bl	125c <Sys_GetCoreID>
    e0e4:	4603      	mov	r3, r0
    e0e6:	9301      	str	r3, [sp, #4]

    reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]--;
    e0e8:	4a0d      	ldr	r2, [pc, #52]	; (e120 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    e0ea:	9b01      	ldr	r3, [sp, #4]
    e0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e0f0:	1e5a      	subs	r2, r3, #1
    e0f2:	490b      	ldr	r1, [pc, #44]	; (e120 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    e0f4:	9b01      	ldr	r3, [sp, #4]
    e0f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_CAN_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_CAN_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    e0fa:	4a0a      	ldr	r2, [pc, #40]	; (e124 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x48>)
    e0fc:	9b01      	ldr	r3, [sp, #4]
    e0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e102:	f003 0301 	and.w	r3, r3, #1
    e106:	2b00      	cmp	r3, #0
    e108:	d106      	bne.n	e118 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    e10a:	4a05      	ldr	r2, [pc, #20]	; (e120 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x44>)
    e10c:	9b01      	ldr	r3, [sp, #4]
    e10e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e112:	2b00      	cmp	r3, #0
    e114:	d100      	bne.n	e118 <SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e116:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e118:	bf00      	nop
    e11a:	b003      	add	sp, #12
    e11c:	f85d fb04 	ldr.w	pc, [sp], #4
    e120:	1fff9074 	.word	0x1fff9074
    e124:	1fff9070 	.word	0x1fff9070

0000e128 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    e128:	b500      	push	{lr}
    e12a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e12c:	f7f3 f896 	bl	125c <Sys_GetCoreID>
    e130:	4603      	mov	r3, r0
    e132:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId])
    e134:	4a10      	ldr	r2, [pc, #64]	; (e178 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    e136:	9b01      	ldr	r3, [sp, #4]
    e138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e13c:	2b00      	cmp	r3, #0
    e13e:	d10d      	bne.n	e15c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e140:	f7f2 fda9 	bl	c96 <Dio_schm_read_msr>
    e144:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e146:	9b00      	ldr	r3, [sp, #0]
    e148:	f003 0301 	and.w	r3, r3, #1
    e14c:	2b00      	cmp	r3, #0
    e14e:	d100      	bne.n	e152 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e150:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    e152:	490a      	ldr	r1, [pc, #40]	; (e17c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x54>)
    e154:	9b01      	ldr	r3, [sp, #4]
    e156:	9a00      	ldr	r2, [sp, #0]
    e158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]++;
    e15c:	4a06      	ldr	r2, [pc, #24]	; (e178 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    e15e:	9b01      	ldr	r3, [sp, #4]
    e160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e164:	1c5a      	adds	r2, r3, #1
    e166:	4904      	ldr	r1, [pc, #16]	; (e178 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_00+0x50>)
    e168:	9b01      	ldr	r3, [sp, #4]
    e16a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e16e:	bf00      	nop
    e170:	b003      	add	sp, #12
    e172:	f85d fb04 	ldr.w	pc, [sp], #4
    e176:	bf00      	nop
    e178:	1fff907c 	.word	0x1fff907c
    e17c:	1fff9078 	.word	0x1fff9078

0000e180 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00(void)
{
    e180:	b500      	push	{lr}
    e182:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e184:	f7f3 f86a 	bl	125c <Sys_GetCoreID>
    e188:	4603      	mov	r3, r0
    e18a:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]--;
    e18c:	4a0d      	ldr	r2, [pc, #52]	; (e1c4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    e18e:	9b01      	ldr	r3, [sp, #4]
    e190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e194:	1e5a      	subs	r2, r3, #1
    e196:	490b      	ldr	r1, [pc, #44]	; (e1c4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    e198:	9b01      	ldr	r3, [sp, #4]
    e19a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    e19e:	4a0a      	ldr	r2, [pc, #40]	; (e1c8 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x48>)
    e1a0:	9b01      	ldr	r3, [sp, #4]
    e1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1a6:	f003 0301 	and.w	r3, r3, #1
    e1aa:	2b00      	cmp	r3, #0
    e1ac:	d106      	bne.n	e1bc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    e1ae:	4a05      	ldr	r2, [pc, #20]	; (e1c4 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x44>)
    e1b0:	9b01      	ldr	r3, [sp, #4]
    e1b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1b6:	2b00      	cmp	r3, #0
    e1b8:	d100      	bne.n	e1bc <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e1ba:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e1bc:	bf00      	nop
    e1be:	b003      	add	sp, #12
    e1c0:	f85d fb04 	ldr.w	pc, [sp], #4
    e1c4:	1fff907c 	.word	0x1fff907c
    e1c8:	1fff9078 	.word	0x1fff9078

0000e1cc <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    e1cc:	b500      	push	{lr}
    e1ce:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e1d0:	f7f3 f844 	bl	125c <Sys_GetCoreID>
    e1d4:	4603      	mov	r3, r0
    e1d6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId])
    e1d8:	4a10      	ldr	r2, [pc, #64]	; (e21c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    e1da:	9b01      	ldr	r3, [sp, #4]
    e1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e1e0:	2b00      	cmp	r3, #0
    e1e2:	d10d      	bne.n	e200 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Dio_schm_read_msr);
#else
        msr = Dio_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e1e4:	f7f2 fd57 	bl	c96 <Dio_schm_read_msr>
    e1e8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e1ea:	9b00      	ldr	r3, [sp, #0]
    e1ec:	f003 0301 	and.w	r3, r3, #1
    e1f0:	2b00      	cmp	r3, #0
    e1f2:	d100      	bne.n	e1f6 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e1f4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_DIO_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    e1f6:	490a      	ldr	r1, [pc, #40]	; (e220 <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x54>)
    e1f8:	9b01      	ldr	r3, [sp, #4]
    e1fa:	9a00      	ldr	r2, [sp, #0]
    e1fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]++;
    e200:	4a06      	ldr	r2, [pc, #24]	; (e21c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    e202:	9b01      	ldr	r3, [sp, #4]
    e204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e208:	1c5a      	adds	r2, r3, #1
    e20a:	4904      	ldr	r1, [pc, #16]	; (e21c <SchM_Enter_Dio_DIO_EXCLUSIVE_AREA_01+0x50>)
    e20c:	9b01      	ldr	r3, [sp, #4]
    e20e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e212:	bf00      	nop
    e214:	b003      	add	sp, #12
    e216:	f85d fb04 	ldr.w	pc, [sp], #4
    e21a:	bf00      	nop
    e21c:	1fff9084 	.word	0x1fff9084
    e220:	1fff9080 	.word	0x1fff9080

0000e224 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01>:

void SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01(void)
{
    e224:	b500      	push	{lr}
    e226:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e228:	f7f3 f818 	bl	125c <Sys_GetCoreID>
    e22c:	4603      	mov	r3, r0
    e22e:	9301      	str	r3, [sp, #4]

    reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]--;
    e230:	4a0d      	ldr	r2, [pc, #52]	; (e268 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    e232:	9b01      	ldr	r3, [sp, #4]
    e234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e238:	1e5a      	subs	r2, r3, #1
    e23a:	490b      	ldr	r1, [pc, #44]	; (e268 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    e23c:	9b01      	ldr	r3, [sp, #4]
    e23e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_DIO_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_DIO_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    e242:	4a0a      	ldr	r2, [pc, #40]	; (e26c <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x48>)
    e244:	9b01      	ldr	r3, [sp, #4]
    e246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e24a:	f003 0301 	and.w	r3, r3, #1
    e24e:	2b00      	cmp	r3, #0
    e250:	d106      	bne.n	e260 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    e252:	4a05      	ldr	r2, [pc, #20]	; (e268 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x44>)
    e254:	9b01      	ldr	r3, [sp, #4]
    e256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e25a:	2b00      	cmp	r3, #0
    e25c:	d100      	bne.n	e260 <SchM_Exit_Dio_DIO_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e25e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e260:	bf00      	nop
    e262:	b003      	add	sp, #12
    e264:	f85d fb04 	ldr.w	pc, [sp], #4
    e268:	1fff9084 	.word	0x1fff9084
    e26c:	1fff9080 	.word	0x1fff9080

0000e270 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    e270:	b500      	push	{lr}
    e272:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e274:	f7f2 fff2 	bl	125c <Sys_GetCoreID>
    e278:	4603      	mov	r3, r0
    e27a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId])
    e27c:	4a10      	ldr	r2, [pc, #64]	; (e2c0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    e27e:	9b01      	ldr	r3, [sp, #4]
    e280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e284:	2b00      	cmp	r3, #0
    e286:	d10d      	bne.n	e2a4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e288:	f7f2 fd0e 	bl	ca8 <Mcu_schm_read_msr>
    e28c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e28e:	9b00      	ldr	r3, [sp, #0]
    e290:	f003 0301 	and.w	r3, r3, #1
    e294:	2b00      	cmp	r3, #0
    e296:	d100      	bne.n	e29a <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e298:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    e29a:	490a      	ldr	r1, [pc, #40]	; (e2c4 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x54>)
    e29c:	9b01      	ldr	r3, [sp, #4]
    e29e:	9a00      	ldr	r2, [sp, #0]
    e2a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]++;
    e2a4:	4a06      	ldr	r2, [pc, #24]	; (e2c0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    e2a6:	9b01      	ldr	r3, [sp, #4]
    e2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2ac:	1c5a      	adds	r2, r3, #1
    e2ae:	4904      	ldr	r1, [pc, #16]	; (e2c0 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_00+0x50>)
    e2b0:	9b01      	ldr	r3, [sp, #4]
    e2b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e2b6:	bf00      	nop
    e2b8:	b003      	add	sp, #12
    e2ba:	f85d fb04 	ldr.w	pc, [sp], #4
    e2be:	bf00      	nop
    e2c0:	1fff908c 	.word	0x1fff908c
    e2c4:	1fff9088 	.word	0x1fff9088

0000e2c8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00(void)
{
    e2c8:	b500      	push	{lr}
    e2ca:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e2cc:	f7f2 ffc6 	bl	125c <Sys_GetCoreID>
    e2d0:	4603      	mov	r3, r0
    e2d2:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]--;
    e2d4:	4a0d      	ldr	r2, [pc, #52]	; (e30c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    e2d6:	9b01      	ldr	r3, [sp, #4]
    e2d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2dc:	1e5a      	subs	r2, r3, #1
    e2de:	490b      	ldr	r1, [pc, #44]	; (e30c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    e2e0:	9b01      	ldr	r3, [sp, #4]
    e2e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    e2e6:	4a0a      	ldr	r2, [pc, #40]	; (e310 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x48>)
    e2e8:	9b01      	ldr	r3, [sp, #4]
    e2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2ee:	f003 0301 	and.w	r3, r3, #1
    e2f2:	2b00      	cmp	r3, #0
    e2f4:	d106      	bne.n	e304 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    e2f6:	4a05      	ldr	r2, [pc, #20]	; (e30c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x44>)
    e2f8:	9b01      	ldr	r3, [sp, #4]
    e2fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e2fe:	2b00      	cmp	r3, #0
    e300:	d100      	bne.n	e304 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e302:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e304:	bf00      	nop
    e306:	b003      	add	sp, #12
    e308:	f85d fb04 	ldr.w	pc, [sp], #4
    e30c:	1fff908c 	.word	0x1fff908c
    e310:	1fff9088 	.word	0x1fff9088

0000e314 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    e314:	b500      	push	{lr}
    e316:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e318:	f7f2 ffa0 	bl	125c <Sys_GetCoreID>
    e31c:	4603      	mov	r3, r0
    e31e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId])
    e320:	4a10      	ldr	r2, [pc, #64]	; (e364 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    e322:	9b01      	ldr	r3, [sp, #4]
    e324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e328:	2b00      	cmp	r3, #0
    e32a:	d10d      	bne.n	e348 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e32c:	f7f2 fcbc 	bl	ca8 <Mcu_schm_read_msr>
    e330:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e332:	9b00      	ldr	r3, [sp, #0]
    e334:	f003 0301 	and.w	r3, r3, #1
    e338:	2b00      	cmp	r3, #0
    e33a:	d100      	bne.n	e33e <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e33c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    e33e:	490a      	ldr	r1, [pc, #40]	; (e368 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x54>)
    e340:	9b01      	ldr	r3, [sp, #4]
    e342:	9a00      	ldr	r2, [sp, #0]
    e344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]++;
    e348:	4a06      	ldr	r2, [pc, #24]	; (e364 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    e34a:	9b01      	ldr	r3, [sp, #4]
    e34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e350:	1c5a      	adds	r2, r3, #1
    e352:	4904      	ldr	r1, [pc, #16]	; (e364 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_01+0x50>)
    e354:	9b01      	ldr	r3, [sp, #4]
    e356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e35a:	bf00      	nop
    e35c:	b003      	add	sp, #12
    e35e:	f85d fb04 	ldr.w	pc, [sp], #4
    e362:	bf00      	nop
    e364:	1fff9094 	.word	0x1fff9094
    e368:	1fff9090 	.word	0x1fff9090

0000e36c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01(void)
{
    e36c:	b500      	push	{lr}
    e36e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e370:	f7f2 ff74 	bl	125c <Sys_GetCoreID>
    e374:	4603      	mov	r3, r0
    e376:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]--;
    e378:	4a0d      	ldr	r2, [pc, #52]	; (e3b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    e37a:	9b01      	ldr	r3, [sp, #4]
    e37c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e380:	1e5a      	subs	r2, r3, #1
    e382:	490b      	ldr	r1, [pc, #44]	; (e3b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    e384:	9b01      	ldr	r3, [sp, #4]
    e386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    e38a:	4a0a      	ldr	r2, [pc, #40]	; (e3b4 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x48>)
    e38c:	9b01      	ldr	r3, [sp, #4]
    e38e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e392:	f003 0301 	and.w	r3, r3, #1
    e396:	2b00      	cmp	r3, #0
    e398:	d106      	bne.n	e3a8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    e39a:	4a05      	ldr	r2, [pc, #20]	; (e3b0 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x44>)
    e39c:	9b01      	ldr	r3, [sp, #4]
    e39e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3a2:	2b00      	cmp	r3, #0
    e3a4:	d100      	bne.n	e3a8 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e3a6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e3a8:	bf00      	nop
    e3aa:	b003      	add	sp, #12
    e3ac:	f85d fb04 	ldr.w	pc, [sp], #4
    e3b0:	1fff9094 	.word	0x1fff9094
    e3b4:	1fff9090 	.word	0x1fff9090

0000e3b8 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    e3b8:	b500      	push	{lr}
    e3ba:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e3bc:	f7f2 ff4e 	bl	125c <Sys_GetCoreID>
    e3c0:	4603      	mov	r3, r0
    e3c2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId])
    e3c4:	4a10      	ldr	r2, [pc, #64]	; (e408 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    e3c6:	9b01      	ldr	r3, [sp, #4]
    e3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3cc:	2b00      	cmp	r3, #0
    e3ce:	d10d      	bne.n	e3ec <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Mcu_schm_read_msr);
#else
        msr = Mcu_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e3d0:	f7f2 fc6a 	bl	ca8 <Mcu_schm_read_msr>
    e3d4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e3d6:	9b00      	ldr	r3, [sp, #0]
    e3d8:	f003 0301 	and.w	r3, r3, #1
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d100      	bne.n	e3e2 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e3e0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_MCU_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    e3e2:	490a      	ldr	r1, [pc, #40]	; (e40c <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x54>)
    e3e4:	9b01      	ldr	r3, [sp, #4]
    e3e6:	9a00      	ldr	r2, [sp, #0]
    e3e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]++;
    e3ec:	4a06      	ldr	r2, [pc, #24]	; (e408 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    e3ee:	9b01      	ldr	r3, [sp, #4]
    e3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e3f4:	1c5a      	adds	r2, r3, #1
    e3f6:	4904      	ldr	r1, [pc, #16]	; (e408 <SchM_Enter_Mcu_MCU_EXCLUSIVE_AREA_02+0x50>)
    e3f8:	9b01      	ldr	r3, [sp, #4]
    e3fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e3fe:	bf00      	nop
    e400:	b003      	add	sp, #12
    e402:	f85d fb04 	ldr.w	pc, [sp], #4
    e406:	bf00      	nop
    e408:	1fff909c 	.word	0x1fff909c
    e40c:	1fff9098 	.word	0x1fff9098

0000e410 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02>:

void SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02(void)
{
    e410:	b500      	push	{lr}
    e412:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e414:	f7f2 ff22 	bl	125c <Sys_GetCoreID>
    e418:	4603      	mov	r3, r0
    e41a:	9301      	str	r3, [sp, #4]

    reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]--;
    e41c:	4a0d      	ldr	r2, [pc, #52]	; (e454 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    e41e:	9b01      	ldr	r3, [sp, #4]
    e420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e424:	1e5a      	subs	r2, r3, #1
    e426:	490b      	ldr	r1, [pc, #44]	; (e454 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    e428:	9b01      	ldr	r3, [sp, #4]
    e42a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_MCU_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_MCU_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    e42e:	4a0a      	ldr	r2, [pc, #40]	; (e458 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x48>)
    e430:	9b01      	ldr	r3, [sp, #4]
    e432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e436:	f003 0301 	and.w	r3, r3, #1
    e43a:	2b00      	cmp	r3, #0
    e43c:	d106      	bne.n	e44c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    e43e:	4a05      	ldr	r2, [pc, #20]	; (e454 <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x44>)
    e440:	9b01      	ldr	r3, [sp, #4]
    e442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e446:	2b00      	cmp	r3, #0
    e448:	d100      	bne.n	e44c <SchM_Exit_Mcu_MCU_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e44a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e44c:	bf00      	nop
    e44e:	b003      	add	sp, #12
    e450:	f85d fb04 	ldr.w	pc, [sp], #4
    e454:	1fff909c 	.word	0x1fff909c
    e458:	1fff9098 	.word	0x1fff9098

0000e45c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00>:
==================================================================================================*/
#define RTE_START_SEC_CODE
#include "Rte_MemMap.h"

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    e45c:	b500      	push	{lr}
    e45e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e460:	f7f2 fefc 	bl	125c <Sys_GetCoreID>
    e464:	4603      	mov	r3, r0
    e466:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId])
    e468:	4a10      	ldr	r2, [pc, #64]	; (e4ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    e46a:	9b01      	ldr	r3, [sp, #4]
    e46c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e470:	2b00      	cmp	r3, #0
    e472:	d10d      	bne.n	e490 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e474:	f7f2 fc21 	bl	cba <Port_schm_read_msr>
    e478:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e47a:	9b00      	ldr	r3, [sp, #0]
    e47c:	f003 0301 	and.w	r3, r3, #1
    e480:	2b00      	cmp	r3, #0
    e482:	d100      	bne.n	e486 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e484:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_00[u32CoreId] = msr;
    e486:	490a      	ldr	r1, [pc, #40]	; (e4b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x54>)
    e488:	9b01      	ldr	r3, [sp, #4]
    e48a:	9a00      	ldr	r2, [sp, #0]
    e48c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]++;
    e490:	4a06      	ldr	r2, [pc, #24]	; (e4ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    e492:	9b01      	ldr	r3, [sp, #4]
    e494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e498:	1c5a      	adds	r2, r3, #1
    e49a:	4904      	ldr	r1, [pc, #16]	; (e4ac <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_00+0x50>)
    e49c:	9b01      	ldr	r3, [sp, #4]
    e49e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e4a2:	bf00      	nop
    e4a4:	b003      	add	sp, #12
    e4a6:	f85d fb04 	ldr.w	pc, [sp], #4
    e4aa:	bf00      	nop
    e4ac:	1fff90a4 	.word	0x1fff90a4
    e4b0:	1fff90a0 	.word	0x1fff90a0

0000e4b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00(void)
{
    e4b4:	b500      	push	{lr}
    e4b6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e4b8:	f7f2 fed0 	bl	125c <Sys_GetCoreID>
    e4bc:	4603      	mov	r3, r0
    e4be:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]--;
    e4c0:	4a0d      	ldr	r2, [pc, #52]	; (e4f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    e4c2:	9b01      	ldr	r3, [sp, #4]
    e4c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4c8:	1e5a      	subs	r2, r3, #1
    e4ca:	490b      	ldr	r1, [pc, #44]	; (e4f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    e4cc:	9b01      	ldr	r3, [sp, #4]
    e4ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_00[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_00[u32CoreId]))         /*if interrupts were enabled*/
    e4d2:	4a0a      	ldr	r2, [pc, #40]	; (e4fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x48>)
    e4d4:	9b01      	ldr	r3, [sp, #4]
    e4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4da:	f003 0301 	and.w	r3, r3, #1
    e4de:	2b00      	cmp	r3, #0
    e4e0:	d106      	bne.n	e4f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    e4e2:	4a05      	ldr	r2, [pc, #20]	; (e4f8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x44>)
    e4e4:	9b01      	ldr	r3, [sp, #4]
    e4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e4ea:	2b00      	cmp	r3, #0
    e4ec:	d100      	bne.n	e4f0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_00+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e4ee:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e4f0:	bf00      	nop
    e4f2:	b003      	add	sp, #12
    e4f4:	f85d fb04 	ldr.w	pc, [sp], #4
    e4f8:	1fff90a4 	.word	0x1fff90a4
    e4fc:	1fff90a0 	.word	0x1fff90a0

0000e500 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    e500:	b500      	push	{lr}
    e502:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e504:	f7f2 feaa 	bl	125c <Sys_GetCoreID>
    e508:	4603      	mov	r3, r0
    e50a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId])
    e50c:	4a10      	ldr	r2, [pc, #64]	; (e550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    e50e:	9b01      	ldr	r3, [sp, #4]
    e510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e514:	2b00      	cmp	r3, #0
    e516:	d10d      	bne.n	e534 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e518:	f7f2 fbcf 	bl	cba <Port_schm_read_msr>
    e51c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e51e:	9b00      	ldr	r3, [sp, #0]
    e520:	f003 0301 	and.w	r3, r3, #1
    e524:	2b00      	cmp	r3, #0
    e526:	d100      	bne.n	e52a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e528:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_01[u32CoreId] = msr;
    e52a:	490a      	ldr	r1, [pc, #40]	; (e554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x54>)
    e52c:	9b01      	ldr	r3, [sp, #4]
    e52e:	9a00      	ldr	r2, [sp, #0]
    e530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]++;
    e534:	4a06      	ldr	r2, [pc, #24]	; (e550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    e536:	9b01      	ldr	r3, [sp, #4]
    e538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e53c:	1c5a      	adds	r2, r3, #1
    e53e:	4904      	ldr	r1, [pc, #16]	; (e550 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_01+0x50>)
    e540:	9b01      	ldr	r3, [sp, #4]
    e542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e546:	bf00      	nop
    e548:	b003      	add	sp, #12
    e54a:	f85d fb04 	ldr.w	pc, [sp], #4
    e54e:	bf00      	nop
    e550:	1fff90ac 	.word	0x1fff90ac
    e554:	1fff90a8 	.word	0x1fff90a8

0000e558 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01(void)
{
    e558:	b500      	push	{lr}
    e55a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e55c:	f7f2 fe7e 	bl	125c <Sys_GetCoreID>
    e560:	4603      	mov	r3, r0
    e562:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]--;
    e564:	4a0d      	ldr	r2, [pc, #52]	; (e59c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    e566:	9b01      	ldr	r3, [sp, #4]
    e568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e56c:	1e5a      	subs	r2, r3, #1
    e56e:	490b      	ldr	r1, [pc, #44]	; (e59c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    e570:	9b01      	ldr	r3, [sp, #4]
    e572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_01[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_01[u32CoreId]))         /*if interrupts were enabled*/
    e576:	4a0a      	ldr	r2, [pc, #40]	; (e5a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x48>)
    e578:	9b01      	ldr	r3, [sp, #4]
    e57a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e57e:	f003 0301 	and.w	r3, r3, #1
    e582:	2b00      	cmp	r3, #0
    e584:	d106      	bne.n	e594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    e586:	4a05      	ldr	r2, [pc, #20]	; (e59c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x44>)
    e588:	9b01      	ldr	r3, [sp, #4]
    e58a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e58e:	2b00      	cmp	r3, #0
    e590:	d100      	bne.n	e594 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_01+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e592:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e594:	bf00      	nop
    e596:	b003      	add	sp, #12
    e598:	f85d fb04 	ldr.w	pc, [sp], #4
    e59c:	1fff90ac 	.word	0x1fff90ac
    e5a0:	1fff90a8 	.word	0x1fff90a8

0000e5a4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    e5a4:	b500      	push	{lr}
    e5a6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e5a8:	f7f2 fe58 	bl	125c <Sys_GetCoreID>
    e5ac:	4603      	mov	r3, r0
    e5ae:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId])
    e5b0:	4a10      	ldr	r2, [pc, #64]	; (e5f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    e5b2:	9b01      	ldr	r3, [sp, #4]
    e5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5b8:	2b00      	cmp	r3, #0
    e5ba:	d10d      	bne.n	e5d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e5bc:	f7f2 fb7d 	bl	cba <Port_schm_read_msr>
    e5c0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e5c2:	9b00      	ldr	r3, [sp, #0]
    e5c4:	f003 0301 	and.w	r3, r3, #1
    e5c8:	2b00      	cmp	r3, #0
    e5ca:	d100      	bne.n	e5ce <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e5cc:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_02[u32CoreId] = msr;
    e5ce:	490a      	ldr	r1, [pc, #40]	; (e5f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x54>)
    e5d0:	9b01      	ldr	r3, [sp, #4]
    e5d2:	9a00      	ldr	r2, [sp, #0]
    e5d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]++;
    e5d8:	4a06      	ldr	r2, [pc, #24]	; (e5f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    e5da:	9b01      	ldr	r3, [sp, #4]
    e5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e5e0:	1c5a      	adds	r2, r3, #1
    e5e2:	4904      	ldr	r1, [pc, #16]	; (e5f4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_02+0x50>)
    e5e4:	9b01      	ldr	r3, [sp, #4]
    e5e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e5ea:	bf00      	nop
    e5ec:	b003      	add	sp, #12
    e5ee:	f85d fb04 	ldr.w	pc, [sp], #4
    e5f2:	bf00      	nop
    e5f4:	1fff90b4 	.word	0x1fff90b4
    e5f8:	1fff90b0 	.word	0x1fff90b0

0000e5fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02(void)
{
    e5fc:	b500      	push	{lr}
    e5fe:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e600:	f7f2 fe2c 	bl	125c <Sys_GetCoreID>
    e604:	4603      	mov	r3, r0
    e606:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]--;
    e608:	4a0d      	ldr	r2, [pc, #52]	; (e640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    e60a:	9b01      	ldr	r3, [sp, #4]
    e60c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e610:	1e5a      	subs	r2, r3, #1
    e612:	490b      	ldr	r1, [pc, #44]	; (e640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    e614:	9b01      	ldr	r3, [sp, #4]
    e616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_02[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_02[u32CoreId]))         /*if interrupts were enabled*/
    e61a:	4a0a      	ldr	r2, [pc, #40]	; (e644 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x48>)
    e61c:	9b01      	ldr	r3, [sp, #4]
    e61e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e622:	f003 0301 	and.w	r3, r3, #1
    e626:	2b00      	cmp	r3, #0
    e628:	d106      	bne.n	e638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    e62a:	4a05      	ldr	r2, [pc, #20]	; (e640 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x44>)
    e62c:	9b01      	ldr	r3, [sp, #4]
    e62e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e632:	2b00      	cmp	r3, #0
    e634:	d100      	bne.n	e638 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_02+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e636:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e638:	bf00      	nop
    e63a:	b003      	add	sp, #12
    e63c:	f85d fb04 	ldr.w	pc, [sp], #4
    e640:	1fff90b4 	.word	0x1fff90b4
    e644:	1fff90b0 	.word	0x1fff90b0

0000e648 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    e648:	b500      	push	{lr}
    e64a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e64c:	f7f2 fe06 	bl	125c <Sys_GetCoreID>
    e650:	4603      	mov	r3, r0
    e652:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId])
    e654:	4a10      	ldr	r2, [pc, #64]	; (e698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    e656:	9b01      	ldr	r3, [sp, #4]
    e658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e65c:	2b00      	cmp	r3, #0
    e65e:	d10d      	bne.n	e67c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e660:	f7f2 fb2b 	bl	cba <Port_schm_read_msr>
    e664:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e666:	9b00      	ldr	r3, [sp, #0]
    e668:	f003 0301 	and.w	r3, r3, #1
    e66c:	2b00      	cmp	r3, #0
    e66e:	d100      	bne.n	e672 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e670:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_03[u32CoreId] = msr;
    e672:	490a      	ldr	r1, [pc, #40]	; (e69c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x54>)
    e674:	9b01      	ldr	r3, [sp, #4]
    e676:	9a00      	ldr	r2, [sp, #0]
    e678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]++;
    e67c:	4a06      	ldr	r2, [pc, #24]	; (e698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    e67e:	9b01      	ldr	r3, [sp, #4]
    e680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e684:	1c5a      	adds	r2, r3, #1
    e686:	4904      	ldr	r1, [pc, #16]	; (e698 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_03+0x50>)
    e688:	9b01      	ldr	r3, [sp, #4]
    e68a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e68e:	bf00      	nop
    e690:	b003      	add	sp, #12
    e692:	f85d fb04 	ldr.w	pc, [sp], #4
    e696:	bf00      	nop
    e698:	1fff90bc 	.word	0x1fff90bc
    e69c:	1fff90b8 	.word	0x1fff90b8

0000e6a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03(void)
{
    e6a0:	b500      	push	{lr}
    e6a2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6a4:	f7f2 fdda 	bl	125c <Sys_GetCoreID>
    e6a8:	4603      	mov	r3, r0
    e6aa:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]--;
    e6ac:	4a0d      	ldr	r2, [pc, #52]	; (e6e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    e6ae:	9b01      	ldr	r3, [sp, #4]
    e6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6b4:	1e5a      	subs	r2, r3, #1
    e6b6:	490b      	ldr	r1, [pc, #44]	; (e6e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    e6b8:	9b01      	ldr	r3, [sp, #4]
    e6ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_03[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_03[u32CoreId]))         /*if interrupts were enabled*/
    e6be:	4a0a      	ldr	r2, [pc, #40]	; (e6e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x48>)
    e6c0:	9b01      	ldr	r3, [sp, #4]
    e6c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6c6:	f003 0301 	and.w	r3, r3, #1
    e6ca:	2b00      	cmp	r3, #0
    e6cc:	d106      	bne.n	e6dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    e6ce:	4a05      	ldr	r2, [pc, #20]	; (e6e4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x44>)
    e6d0:	9b01      	ldr	r3, [sp, #4]
    e6d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e6d6:	2b00      	cmp	r3, #0
    e6d8:	d100      	bne.n	e6dc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_03+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e6da:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e6dc:	bf00      	nop
    e6de:	b003      	add	sp, #12
    e6e0:	f85d fb04 	ldr.w	pc, [sp], #4
    e6e4:	1fff90bc 	.word	0x1fff90bc
    e6e8:	1fff90b8 	.word	0x1fff90b8

0000e6ec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    e6ec:	b500      	push	{lr}
    e6ee:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e6f0:	f7f2 fdb4 	bl	125c <Sys_GetCoreID>
    e6f4:	4603      	mov	r3, r0
    e6f6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId])
    e6f8:	4a10      	ldr	r2, [pc, #64]	; (e73c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    e6fa:	9b01      	ldr	r3, [sp, #4]
    e6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e700:	2b00      	cmp	r3, #0
    e702:	d10d      	bne.n	e720 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e704:	f7f2 fad9 	bl	cba <Port_schm_read_msr>
    e708:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e70a:	9b00      	ldr	r3, [sp, #0]
    e70c:	f003 0301 	and.w	r3, r3, #1
    e710:	2b00      	cmp	r3, #0
    e712:	d100      	bne.n	e716 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e714:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_04[u32CoreId] = msr;
    e716:	490a      	ldr	r1, [pc, #40]	; (e740 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x54>)
    e718:	9b01      	ldr	r3, [sp, #4]
    e71a:	9a00      	ldr	r2, [sp, #0]
    e71c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]++;
    e720:	4a06      	ldr	r2, [pc, #24]	; (e73c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    e722:	9b01      	ldr	r3, [sp, #4]
    e724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e728:	1c5a      	adds	r2, r3, #1
    e72a:	4904      	ldr	r1, [pc, #16]	; (e73c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_04+0x50>)
    e72c:	9b01      	ldr	r3, [sp, #4]
    e72e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e732:	bf00      	nop
    e734:	b003      	add	sp, #12
    e736:	f85d fb04 	ldr.w	pc, [sp], #4
    e73a:	bf00      	nop
    e73c:	1fff90c4 	.word	0x1fff90c4
    e740:	1fff90c0 	.word	0x1fff90c0

0000e744 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04(void)
{
    e744:	b500      	push	{lr}
    e746:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e748:	f7f2 fd88 	bl	125c <Sys_GetCoreID>
    e74c:	4603      	mov	r3, r0
    e74e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]--;
    e750:	4a0d      	ldr	r2, [pc, #52]	; (e788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    e752:	9b01      	ldr	r3, [sp, #4]
    e754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e758:	1e5a      	subs	r2, r3, #1
    e75a:	490b      	ldr	r1, [pc, #44]	; (e788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    e75c:	9b01      	ldr	r3, [sp, #4]
    e75e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_04[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_04[u32CoreId]))         /*if interrupts were enabled*/
    e762:	4a0a      	ldr	r2, [pc, #40]	; (e78c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x48>)
    e764:	9b01      	ldr	r3, [sp, #4]
    e766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e76a:	f003 0301 	and.w	r3, r3, #1
    e76e:	2b00      	cmp	r3, #0
    e770:	d106      	bne.n	e780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    e772:	4a05      	ldr	r2, [pc, #20]	; (e788 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x44>)
    e774:	9b01      	ldr	r3, [sp, #4]
    e776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e77a:	2b00      	cmp	r3, #0
    e77c:	d100      	bne.n	e780 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_04+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e77e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e780:	bf00      	nop
    e782:	b003      	add	sp, #12
    e784:	f85d fb04 	ldr.w	pc, [sp], #4
    e788:	1fff90c4 	.word	0x1fff90c4
    e78c:	1fff90c0 	.word	0x1fff90c0

0000e790 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    e790:	b500      	push	{lr}
    e792:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e794:	f7f2 fd62 	bl	125c <Sys_GetCoreID>
    e798:	4603      	mov	r3, r0
    e79a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId])
    e79c:	4a10      	ldr	r2, [pc, #64]	; (e7e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    e79e:	9b01      	ldr	r3, [sp, #4]
    e7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7a4:	2b00      	cmp	r3, #0
    e7a6:	d10d      	bne.n	e7c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e7a8:	f7f2 fa87 	bl	cba <Port_schm_read_msr>
    e7ac:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e7ae:	9b00      	ldr	r3, [sp, #0]
    e7b0:	f003 0301 	and.w	r3, r3, #1
    e7b4:	2b00      	cmp	r3, #0
    e7b6:	d100      	bne.n	e7ba <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e7b8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_05[u32CoreId] = msr;
    e7ba:	490a      	ldr	r1, [pc, #40]	; (e7e4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x54>)
    e7bc:	9b01      	ldr	r3, [sp, #4]
    e7be:	9a00      	ldr	r2, [sp, #0]
    e7c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]++;
    e7c4:	4a06      	ldr	r2, [pc, #24]	; (e7e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    e7c6:	9b01      	ldr	r3, [sp, #4]
    e7c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7cc:	1c5a      	adds	r2, r3, #1
    e7ce:	4904      	ldr	r1, [pc, #16]	; (e7e0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_05+0x50>)
    e7d0:	9b01      	ldr	r3, [sp, #4]
    e7d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e7d6:	bf00      	nop
    e7d8:	b003      	add	sp, #12
    e7da:	f85d fb04 	ldr.w	pc, [sp], #4
    e7de:	bf00      	nop
    e7e0:	1fff90cc 	.word	0x1fff90cc
    e7e4:	1fff90c8 	.word	0x1fff90c8

0000e7e8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05(void)
{
    e7e8:	b500      	push	{lr}
    e7ea:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e7ec:	f7f2 fd36 	bl	125c <Sys_GetCoreID>
    e7f0:	4603      	mov	r3, r0
    e7f2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]--;
    e7f4:	4a0d      	ldr	r2, [pc, #52]	; (e82c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    e7f6:	9b01      	ldr	r3, [sp, #4]
    e7f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e7fc:	1e5a      	subs	r2, r3, #1
    e7fe:	490b      	ldr	r1, [pc, #44]	; (e82c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    e800:	9b01      	ldr	r3, [sp, #4]
    e802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_05[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_05[u32CoreId]))         /*if interrupts were enabled*/
    e806:	4a0a      	ldr	r2, [pc, #40]	; (e830 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x48>)
    e808:	9b01      	ldr	r3, [sp, #4]
    e80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e80e:	f003 0301 	and.w	r3, r3, #1
    e812:	2b00      	cmp	r3, #0
    e814:	d106      	bne.n	e824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    e816:	4a05      	ldr	r2, [pc, #20]	; (e82c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x44>)
    e818:	9b01      	ldr	r3, [sp, #4]
    e81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e81e:	2b00      	cmp	r3, #0
    e820:	d100      	bne.n	e824 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_05+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e822:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e824:	bf00      	nop
    e826:	b003      	add	sp, #12
    e828:	f85d fb04 	ldr.w	pc, [sp], #4
    e82c:	1fff90cc 	.word	0x1fff90cc
    e830:	1fff90c8 	.word	0x1fff90c8

0000e834 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    e834:	b500      	push	{lr}
    e836:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e838:	f7f2 fd10 	bl	125c <Sys_GetCoreID>
    e83c:	4603      	mov	r3, r0
    e83e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId])
    e840:	4a10      	ldr	r2, [pc, #64]	; (e884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    e842:	9b01      	ldr	r3, [sp, #4]
    e844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e848:	2b00      	cmp	r3, #0
    e84a:	d10d      	bne.n	e868 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e84c:	f7f2 fa35 	bl	cba <Port_schm_read_msr>
    e850:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e852:	9b00      	ldr	r3, [sp, #0]
    e854:	f003 0301 	and.w	r3, r3, #1
    e858:	2b00      	cmp	r3, #0
    e85a:	d100      	bne.n	e85e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e85c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_06[u32CoreId] = msr;
    e85e:	490a      	ldr	r1, [pc, #40]	; (e888 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x54>)
    e860:	9b01      	ldr	r3, [sp, #4]
    e862:	9a00      	ldr	r2, [sp, #0]
    e864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]++;
    e868:	4a06      	ldr	r2, [pc, #24]	; (e884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    e86a:	9b01      	ldr	r3, [sp, #4]
    e86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e870:	1c5a      	adds	r2, r3, #1
    e872:	4904      	ldr	r1, [pc, #16]	; (e884 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_06+0x50>)
    e874:	9b01      	ldr	r3, [sp, #4]
    e876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e87a:	bf00      	nop
    e87c:	b003      	add	sp, #12
    e87e:	f85d fb04 	ldr.w	pc, [sp], #4
    e882:	bf00      	nop
    e884:	1fff90d4 	.word	0x1fff90d4
    e888:	1fff90d0 	.word	0x1fff90d0

0000e88c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06(void)
{
    e88c:	b500      	push	{lr}
    e88e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e890:	f7f2 fce4 	bl	125c <Sys_GetCoreID>
    e894:	4603      	mov	r3, r0
    e896:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]--;
    e898:	4a0d      	ldr	r2, [pc, #52]	; (e8d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    e89a:	9b01      	ldr	r3, [sp, #4]
    e89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8a0:	1e5a      	subs	r2, r3, #1
    e8a2:	490b      	ldr	r1, [pc, #44]	; (e8d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    e8a4:	9b01      	ldr	r3, [sp, #4]
    e8a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_06[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_06[u32CoreId]))         /*if interrupts were enabled*/
    e8aa:	4a0a      	ldr	r2, [pc, #40]	; (e8d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x48>)
    e8ac:	9b01      	ldr	r3, [sp, #4]
    e8ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8b2:	f003 0301 	and.w	r3, r3, #1
    e8b6:	2b00      	cmp	r3, #0
    e8b8:	d106      	bne.n	e8c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    e8ba:	4a05      	ldr	r2, [pc, #20]	; (e8d0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x44>)
    e8bc:	9b01      	ldr	r3, [sp, #4]
    e8be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8c2:	2b00      	cmp	r3, #0
    e8c4:	d100      	bne.n	e8c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_06+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e8c6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e8c8:	bf00      	nop
    e8ca:	b003      	add	sp, #12
    e8cc:	f85d fb04 	ldr.w	pc, [sp], #4
    e8d0:	1fff90d4 	.word	0x1fff90d4
    e8d4:	1fff90d0 	.word	0x1fff90d0

0000e8d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    e8d8:	b500      	push	{lr}
    e8da:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e8dc:	f7f2 fcbe 	bl	125c <Sys_GetCoreID>
    e8e0:	4603      	mov	r3, r0
    e8e2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId])
    e8e4:	4a10      	ldr	r2, [pc, #64]	; (e928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    e8e6:	9b01      	ldr	r3, [sp, #4]
    e8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e8ec:	2b00      	cmp	r3, #0
    e8ee:	d10d      	bne.n	e90c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e8f0:	f7f2 f9e3 	bl	cba <Port_schm_read_msr>
    e8f4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e8f6:	9b00      	ldr	r3, [sp, #0]
    e8f8:	f003 0301 	and.w	r3, r3, #1
    e8fc:	2b00      	cmp	r3, #0
    e8fe:	d100      	bne.n	e902 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e900:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_07[u32CoreId] = msr;
    e902:	490a      	ldr	r1, [pc, #40]	; (e92c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x54>)
    e904:	9b01      	ldr	r3, [sp, #4]
    e906:	9a00      	ldr	r2, [sp, #0]
    e908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]++;
    e90c:	4a06      	ldr	r2, [pc, #24]	; (e928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    e90e:	9b01      	ldr	r3, [sp, #4]
    e910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e914:	1c5a      	adds	r2, r3, #1
    e916:	4904      	ldr	r1, [pc, #16]	; (e928 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_07+0x50>)
    e918:	9b01      	ldr	r3, [sp, #4]
    e91a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e91e:	bf00      	nop
    e920:	b003      	add	sp, #12
    e922:	f85d fb04 	ldr.w	pc, [sp], #4
    e926:	bf00      	nop
    e928:	1fff90dc 	.word	0x1fff90dc
    e92c:	1fff90d8 	.word	0x1fff90d8

0000e930 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07(void)
{
    e930:	b500      	push	{lr}
    e932:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e934:	f7f2 fc92 	bl	125c <Sys_GetCoreID>
    e938:	4603      	mov	r3, r0
    e93a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]--;
    e93c:	4a0d      	ldr	r2, [pc, #52]	; (e974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    e93e:	9b01      	ldr	r3, [sp, #4]
    e940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e944:	1e5a      	subs	r2, r3, #1
    e946:	490b      	ldr	r1, [pc, #44]	; (e974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    e948:	9b01      	ldr	r3, [sp, #4]
    e94a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_07[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_07[u32CoreId]))         /*if interrupts were enabled*/
    e94e:	4a0a      	ldr	r2, [pc, #40]	; (e978 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x48>)
    e950:	9b01      	ldr	r3, [sp, #4]
    e952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e956:	f003 0301 	and.w	r3, r3, #1
    e95a:	2b00      	cmp	r3, #0
    e95c:	d106      	bne.n	e96c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    e95e:	4a05      	ldr	r2, [pc, #20]	; (e974 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x44>)
    e960:	9b01      	ldr	r3, [sp, #4]
    e962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e966:	2b00      	cmp	r3, #0
    e968:	d100      	bne.n	e96c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_07+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    e96a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    e96c:	bf00      	nop
    e96e:	b003      	add	sp, #12
    e970:	f85d fb04 	ldr.w	pc, [sp], #4
    e974:	1fff90dc 	.word	0x1fff90dc
    e978:	1fff90d8 	.word	0x1fff90d8

0000e97c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    e97c:	b500      	push	{lr}
    e97e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e980:	f7f2 fc6c 	bl	125c <Sys_GetCoreID>
    e984:	4603      	mov	r3, r0
    e986:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId])
    e988:	4a10      	ldr	r2, [pc, #64]	; (e9cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    e98a:	9b01      	ldr	r3, [sp, #4]
    e98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e990:	2b00      	cmp	r3, #0
    e992:	d10d      	bne.n	e9b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    e994:	f7f2 f991 	bl	cba <Port_schm_read_msr>
    e998:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    e99a:	9b00      	ldr	r3, [sp, #0]
    e99c:	f003 0301 	and.w	r3, r3, #1
    e9a0:	2b00      	cmp	r3, #0
    e9a2:	d100      	bne.n	e9a6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    e9a4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_08[u32CoreId] = msr;
    e9a6:	490a      	ldr	r1, [pc, #40]	; (e9d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x54>)
    e9a8:	9b01      	ldr	r3, [sp, #4]
    e9aa:	9a00      	ldr	r2, [sp, #0]
    e9ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]++;
    e9b0:	4a06      	ldr	r2, [pc, #24]	; (e9cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    e9b2:	9b01      	ldr	r3, [sp, #4]
    e9b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9b8:	1c5a      	adds	r2, r3, #1
    e9ba:	4904      	ldr	r1, [pc, #16]	; (e9cc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_08+0x50>)
    e9bc:	9b01      	ldr	r3, [sp, #4]
    e9be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e9c2:	bf00      	nop
    e9c4:	b003      	add	sp, #12
    e9c6:	f85d fb04 	ldr.w	pc, [sp], #4
    e9ca:	bf00      	nop
    e9cc:	1fff90e4 	.word	0x1fff90e4
    e9d0:	1fff90e0 	.word	0x1fff90e0

0000e9d4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08(void)
{
    e9d4:	b500      	push	{lr}
    e9d6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    e9d8:	f7f2 fc40 	bl	125c <Sys_GetCoreID>
    e9dc:	4603      	mov	r3, r0
    e9de:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]--;
    e9e0:	4a0d      	ldr	r2, [pc, #52]	; (ea18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    e9e2:	9b01      	ldr	r3, [sp, #4]
    e9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9e8:	1e5a      	subs	r2, r3, #1
    e9ea:	490b      	ldr	r1, [pc, #44]	; (ea18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    e9ec:	9b01      	ldr	r3, [sp, #4]
    e9ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_08[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_08[u32CoreId]))         /*if interrupts were enabled*/
    e9f2:	4a0a      	ldr	r2, [pc, #40]	; (ea1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x48>)
    e9f4:	9b01      	ldr	r3, [sp, #4]
    e9f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    e9fa:	f003 0301 	and.w	r3, r3, #1
    e9fe:	2b00      	cmp	r3, #0
    ea00:	d106      	bne.n	ea10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    ea02:	4a05      	ldr	r2, [pc, #20]	; (ea18 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x44>)
    ea04:	9b01      	ldr	r3, [sp, #4]
    ea06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea0a:	2b00      	cmp	r3, #0
    ea0c:	d100      	bne.n	ea10 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_08+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ea0e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ea10:	bf00      	nop
    ea12:	b003      	add	sp, #12
    ea14:	f85d fb04 	ldr.w	pc, [sp], #4
    ea18:	1fff90e4 	.word	0x1fff90e4
    ea1c:	1fff90e0 	.word	0x1fff90e0

0000ea20 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    ea20:	b500      	push	{lr}
    ea22:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea24:	f7f2 fc1a 	bl	125c <Sys_GetCoreID>
    ea28:	4603      	mov	r3, r0
    ea2a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId])
    ea2c:	4a10      	ldr	r2, [pc, #64]	; (ea70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    ea2e:	9b01      	ldr	r3, [sp, #4]
    ea30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea34:	2b00      	cmp	r3, #0
    ea36:	d10d      	bne.n	ea54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ea38:	f7f2 f93f 	bl	cba <Port_schm_read_msr>
    ea3c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ea3e:	9b00      	ldr	r3, [sp, #0]
    ea40:	f003 0301 	and.w	r3, r3, #1
    ea44:	2b00      	cmp	r3, #0
    ea46:	d100      	bne.n	ea4a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ea48:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_09[u32CoreId] = msr;
    ea4a:	490a      	ldr	r1, [pc, #40]	; (ea74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x54>)
    ea4c:	9b01      	ldr	r3, [sp, #4]
    ea4e:	9a00      	ldr	r2, [sp, #0]
    ea50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]++;
    ea54:	4a06      	ldr	r2, [pc, #24]	; (ea70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    ea56:	9b01      	ldr	r3, [sp, #4]
    ea58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea5c:	1c5a      	adds	r2, r3, #1
    ea5e:	4904      	ldr	r1, [pc, #16]	; (ea70 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_09+0x50>)
    ea60:	9b01      	ldr	r3, [sp, #4]
    ea62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ea66:	bf00      	nop
    ea68:	b003      	add	sp, #12
    ea6a:	f85d fb04 	ldr.w	pc, [sp], #4
    ea6e:	bf00      	nop
    ea70:	1fff90ec 	.word	0x1fff90ec
    ea74:	1fff90e8 	.word	0x1fff90e8

0000ea78 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09(void)
{
    ea78:	b500      	push	{lr}
    ea7a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ea7c:	f7f2 fbee 	bl	125c <Sys_GetCoreID>
    ea80:	4603      	mov	r3, r0
    ea82:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]--;
    ea84:	4a0d      	ldr	r2, [pc, #52]	; (eabc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ea86:	9b01      	ldr	r3, [sp, #4]
    ea88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea8c:	1e5a      	subs	r2, r3, #1
    ea8e:	490b      	ldr	r1, [pc, #44]	; (eabc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    ea90:	9b01      	ldr	r3, [sp, #4]
    ea92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_09[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_09[u32CoreId]))         /*if interrupts were enabled*/
    ea96:	4a0a      	ldr	r2, [pc, #40]	; (eac0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x48>)
    ea98:	9b01      	ldr	r3, [sp, #4]
    ea9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ea9e:	f003 0301 	and.w	r3, r3, #1
    eaa2:	2b00      	cmp	r3, #0
    eaa4:	d106      	bne.n	eab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    eaa6:	4a05      	ldr	r2, [pc, #20]	; (eabc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x44>)
    eaa8:	9b01      	ldr	r3, [sp, #4]
    eaaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eaae:	2b00      	cmp	r3, #0
    eab0:	d100      	bne.n	eab4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_09+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eab2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eab4:	bf00      	nop
    eab6:	b003      	add	sp, #12
    eab8:	f85d fb04 	ldr.w	pc, [sp], #4
    eabc:	1fff90ec 	.word	0x1fff90ec
    eac0:	1fff90e8 	.word	0x1fff90e8

0000eac4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    eac4:	b500      	push	{lr}
    eac6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eac8:	f7f2 fbc8 	bl	125c <Sys_GetCoreID>
    eacc:	4603      	mov	r3, r0
    eace:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId])
    ead0:	4a10      	ldr	r2, [pc, #64]	; (eb14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    ead2:	9b01      	ldr	r3, [sp, #4]
    ead4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ead8:	2b00      	cmp	r3, #0
    eada:	d10d      	bne.n	eaf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eadc:	f7f2 f8ed 	bl	cba <Port_schm_read_msr>
    eae0:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eae2:	9b00      	ldr	r3, [sp, #0]
    eae4:	f003 0301 	and.w	r3, r3, #1
    eae8:	2b00      	cmp	r3, #0
    eaea:	d100      	bne.n	eaee <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eaec:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_10[u32CoreId] = msr;
    eaee:	490a      	ldr	r1, [pc, #40]	; (eb18 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x54>)
    eaf0:	9b01      	ldr	r3, [sp, #4]
    eaf2:	9a00      	ldr	r2, [sp, #0]
    eaf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]++;
    eaf8:	4a06      	ldr	r2, [pc, #24]	; (eb14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    eafa:	9b01      	ldr	r3, [sp, #4]
    eafc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb00:	1c5a      	adds	r2, r3, #1
    eb02:	4904      	ldr	r1, [pc, #16]	; (eb14 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_10+0x50>)
    eb04:	9b01      	ldr	r3, [sp, #4]
    eb06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eb0a:	bf00      	nop
    eb0c:	b003      	add	sp, #12
    eb0e:	f85d fb04 	ldr.w	pc, [sp], #4
    eb12:	bf00      	nop
    eb14:	1fff90f4 	.word	0x1fff90f4
    eb18:	1fff90f0 	.word	0x1fff90f0

0000eb1c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10(void)
{
    eb1c:	b500      	push	{lr}
    eb1e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb20:	f7f2 fb9c 	bl	125c <Sys_GetCoreID>
    eb24:	4603      	mov	r3, r0
    eb26:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]--;
    eb28:	4a0d      	ldr	r2, [pc, #52]	; (eb60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    eb2a:	9b01      	ldr	r3, [sp, #4]
    eb2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb30:	1e5a      	subs	r2, r3, #1
    eb32:	490b      	ldr	r1, [pc, #44]	; (eb60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    eb34:	9b01      	ldr	r3, [sp, #4]
    eb36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_10[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_10[u32CoreId]))         /*if interrupts were enabled*/
    eb3a:	4a0a      	ldr	r2, [pc, #40]	; (eb64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x48>)
    eb3c:	9b01      	ldr	r3, [sp, #4]
    eb3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb42:	f003 0301 	and.w	r3, r3, #1
    eb46:	2b00      	cmp	r3, #0
    eb48:	d106      	bne.n	eb58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    eb4a:	4a05      	ldr	r2, [pc, #20]	; (eb60 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x44>)
    eb4c:	9b01      	ldr	r3, [sp, #4]
    eb4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb52:	2b00      	cmp	r3, #0
    eb54:	d100      	bne.n	eb58 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_10+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    eb56:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eb58:	bf00      	nop
    eb5a:	b003      	add	sp, #12
    eb5c:	f85d fb04 	ldr.w	pc, [sp], #4
    eb60:	1fff90f4 	.word	0x1fff90f4
    eb64:	1fff90f0 	.word	0x1fff90f0

0000eb68 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    eb68:	b500      	push	{lr}
    eb6a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eb6c:	f7f2 fb76 	bl	125c <Sys_GetCoreID>
    eb70:	4603      	mov	r3, r0
    eb72:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId])
    eb74:	4a10      	ldr	r2, [pc, #64]	; (ebb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    eb76:	9b01      	ldr	r3, [sp, #4]
    eb78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eb7c:	2b00      	cmp	r3, #0
    eb7e:	d10d      	bne.n	eb9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eb80:	f7f2 f89b 	bl	cba <Port_schm_read_msr>
    eb84:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eb86:	9b00      	ldr	r3, [sp, #0]
    eb88:	f003 0301 	and.w	r3, r3, #1
    eb8c:	2b00      	cmp	r3, #0
    eb8e:	d100      	bne.n	eb92 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eb90:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_11[u32CoreId] = msr;
    eb92:	490a      	ldr	r1, [pc, #40]	; (ebbc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x54>)
    eb94:	9b01      	ldr	r3, [sp, #4]
    eb96:	9a00      	ldr	r2, [sp, #0]
    eb98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]++;
    eb9c:	4a06      	ldr	r2, [pc, #24]	; (ebb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    eb9e:	9b01      	ldr	r3, [sp, #4]
    eba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eba4:	1c5a      	adds	r2, r3, #1
    eba6:	4904      	ldr	r1, [pc, #16]	; (ebb8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_11+0x50>)
    eba8:	9b01      	ldr	r3, [sp, #4]
    ebaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ebae:	bf00      	nop
    ebb0:	b003      	add	sp, #12
    ebb2:	f85d fb04 	ldr.w	pc, [sp], #4
    ebb6:	bf00      	nop
    ebb8:	1fff90fc 	.word	0x1fff90fc
    ebbc:	1fff90f8 	.word	0x1fff90f8

0000ebc0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11(void)
{
    ebc0:	b500      	push	{lr}
    ebc2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ebc4:	f7f2 fb4a 	bl	125c <Sys_GetCoreID>
    ebc8:	4603      	mov	r3, r0
    ebca:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]--;
    ebcc:	4a0d      	ldr	r2, [pc, #52]	; (ec04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ebce:	9b01      	ldr	r3, [sp, #4]
    ebd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebd4:	1e5a      	subs	r2, r3, #1
    ebd6:	490b      	ldr	r1, [pc, #44]	; (ec04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ebd8:	9b01      	ldr	r3, [sp, #4]
    ebda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_11[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_11[u32CoreId]))         /*if interrupts were enabled*/
    ebde:	4a0a      	ldr	r2, [pc, #40]	; (ec08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x48>)
    ebe0:	9b01      	ldr	r3, [sp, #4]
    ebe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebe6:	f003 0301 	and.w	r3, r3, #1
    ebea:	2b00      	cmp	r3, #0
    ebec:	d106      	bne.n	ebfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    ebee:	4a05      	ldr	r2, [pc, #20]	; (ec04 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x44>)
    ebf0:	9b01      	ldr	r3, [sp, #4]
    ebf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ebf6:	2b00      	cmp	r3, #0
    ebf8:	d100      	bne.n	ebfc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_11+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ebfa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ebfc:	bf00      	nop
    ebfe:	b003      	add	sp, #12
    ec00:	f85d fb04 	ldr.w	pc, [sp], #4
    ec04:	1fff90fc 	.word	0x1fff90fc
    ec08:	1fff90f8 	.word	0x1fff90f8

0000ec0c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    ec0c:	b500      	push	{lr}
    ec0e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec10:	f7f2 fb24 	bl	125c <Sys_GetCoreID>
    ec14:	4603      	mov	r3, r0
    ec16:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId])
    ec18:	4a10      	ldr	r2, [pc, #64]	; (ec5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    ec1a:	9b01      	ldr	r3, [sp, #4]
    ec1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec20:	2b00      	cmp	r3, #0
    ec22:	d10d      	bne.n	ec40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ec24:	f7f2 f849 	bl	cba <Port_schm_read_msr>
    ec28:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ec2a:	9b00      	ldr	r3, [sp, #0]
    ec2c:	f003 0301 	and.w	r3, r3, #1
    ec30:	2b00      	cmp	r3, #0
    ec32:	d100      	bne.n	ec36 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ec34:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_12[u32CoreId] = msr;
    ec36:	490a      	ldr	r1, [pc, #40]	; (ec60 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x54>)
    ec38:	9b01      	ldr	r3, [sp, #4]
    ec3a:	9a00      	ldr	r2, [sp, #0]
    ec3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]++;
    ec40:	4a06      	ldr	r2, [pc, #24]	; (ec5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    ec42:	9b01      	ldr	r3, [sp, #4]
    ec44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec48:	1c5a      	adds	r2, r3, #1
    ec4a:	4904      	ldr	r1, [pc, #16]	; (ec5c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_12+0x50>)
    ec4c:	9b01      	ldr	r3, [sp, #4]
    ec4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ec52:	bf00      	nop
    ec54:	b003      	add	sp, #12
    ec56:	f85d fb04 	ldr.w	pc, [sp], #4
    ec5a:	bf00      	nop
    ec5c:	1fff9104 	.word	0x1fff9104
    ec60:	1fff9100 	.word	0x1fff9100

0000ec64 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12(void)
{
    ec64:	b500      	push	{lr}
    ec66:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ec68:	f7f2 faf8 	bl	125c <Sys_GetCoreID>
    ec6c:	4603      	mov	r3, r0
    ec6e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]--;
    ec70:	4a0d      	ldr	r2, [pc, #52]	; (eca8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ec72:	9b01      	ldr	r3, [sp, #4]
    ec74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec78:	1e5a      	subs	r2, r3, #1
    ec7a:	490b      	ldr	r1, [pc, #44]	; (eca8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ec7c:	9b01      	ldr	r3, [sp, #4]
    ec7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_12[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_12[u32CoreId]))         /*if interrupts were enabled*/
    ec82:	4a0a      	ldr	r2, [pc, #40]	; (ecac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x48>)
    ec84:	9b01      	ldr	r3, [sp, #4]
    ec86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec8a:	f003 0301 	and.w	r3, r3, #1
    ec8e:	2b00      	cmp	r3, #0
    ec90:	d106      	bne.n	eca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    ec92:	4a05      	ldr	r2, [pc, #20]	; (eca8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x44>)
    ec94:	9b01      	ldr	r3, [sp, #4]
    ec96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ec9a:	2b00      	cmp	r3, #0
    ec9c:	d100      	bne.n	eca0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_12+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ec9e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    eca0:	bf00      	nop
    eca2:	b003      	add	sp, #12
    eca4:	f85d fb04 	ldr.w	pc, [sp], #4
    eca8:	1fff9104 	.word	0x1fff9104
    ecac:	1fff9100 	.word	0x1fff9100

0000ecb0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    ecb0:	b500      	push	{lr}
    ecb2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ecb4:	f7f2 fad2 	bl	125c <Sys_GetCoreID>
    ecb8:	4603      	mov	r3, r0
    ecba:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId])
    ecbc:	4a10      	ldr	r2, [pc, #64]	; (ed00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ecbe:	9b01      	ldr	r3, [sp, #4]
    ecc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecc4:	2b00      	cmp	r3, #0
    ecc6:	d10d      	bne.n	ece4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ecc8:	f7f1 fff7 	bl	cba <Port_schm_read_msr>
    eccc:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ecce:	9b00      	ldr	r3, [sp, #0]
    ecd0:	f003 0301 	and.w	r3, r3, #1
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	d100      	bne.n	ecda <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ecd8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_13[u32CoreId] = msr;
    ecda:	490a      	ldr	r1, [pc, #40]	; (ed04 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x54>)
    ecdc:	9b01      	ldr	r3, [sp, #4]
    ecde:	9a00      	ldr	r2, [sp, #0]
    ece0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]++;
    ece4:	4a06      	ldr	r2, [pc, #24]	; (ed00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ece6:	9b01      	ldr	r3, [sp, #4]
    ece8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ecec:	1c5a      	adds	r2, r3, #1
    ecee:	4904      	ldr	r1, [pc, #16]	; (ed00 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_13+0x50>)
    ecf0:	9b01      	ldr	r3, [sp, #4]
    ecf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ecf6:	bf00      	nop
    ecf8:	b003      	add	sp, #12
    ecfa:	f85d fb04 	ldr.w	pc, [sp], #4
    ecfe:	bf00      	nop
    ed00:	1fff910c 	.word	0x1fff910c
    ed04:	1fff9108 	.word	0x1fff9108

0000ed08 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13(void)
{
    ed08:	b500      	push	{lr}
    ed0a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed0c:	f7f2 faa6 	bl	125c <Sys_GetCoreID>
    ed10:	4603      	mov	r3, r0
    ed12:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]--;
    ed14:	4a0d      	ldr	r2, [pc, #52]	; (ed4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    ed16:	9b01      	ldr	r3, [sp, #4]
    ed18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed1c:	1e5a      	subs	r2, r3, #1
    ed1e:	490b      	ldr	r1, [pc, #44]	; (ed4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    ed20:	9b01      	ldr	r3, [sp, #4]
    ed22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_13[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_13[u32CoreId]))         /*if interrupts were enabled*/
    ed26:	4a0a      	ldr	r2, [pc, #40]	; (ed50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x48>)
    ed28:	9b01      	ldr	r3, [sp, #4]
    ed2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed2e:	f003 0301 	and.w	r3, r3, #1
    ed32:	2b00      	cmp	r3, #0
    ed34:	d106      	bne.n	ed44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    ed36:	4a05      	ldr	r2, [pc, #20]	; (ed4c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x44>)
    ed38:	9b01      	ldr	r3, [sp, #4]
    ed3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed3e:	2b00      	cmp	r3, #0
    ed40:	d100      	bne.n	ed44 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_13+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ed42:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ed44:	bf00      	nop
    ed46:	b003      	add	sp, #12
    ed48:	f85d fb04 	ldr.w	pc, [sp], #4
    ed4c:	1fff910c 	.word	0x1fff910c
    ed50:	1fff9108 	.word	0x1fff9108

0000ed54 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    ed54:	b500      	push	{lr}
    ed56:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ed58:	f7f2 fa80 	bl	125c <Sys_GetCoreID>
    ed5c:	4603      	mov	r3, r0
    ed5e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId])
    ed60:	4a10      	ldr	r2, [pc, #64]	; (eda4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    ed62:	9b01      	ldr	r3, [sp, #4]
    ed64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed68:	2b00      	cmp	r3, #0
    ed6a:	d10d      	bne.n	ed88 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ed6c:	f7f1 ffa5 	bl	cba <Port_schm_read_msr>
    ed70:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ed72:	9b00      	ldr	r3, [sp, #0]
    ed74:	f003 0301 	and.w	r3, r3, #1
    ed78:	2b00      	cmp	r3, #0
    ed7a:	d100      	bne.n	ed7e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ed7c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_14[u32CoreId] = msr;
    ed7e:	490a      	ldr	r1, [pc, #40]	; (eda8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x54>)
    ed80:	9b01      	ldr	r3, [sp, #4]
    ed82:	9a00      	ldr	r2, [sp, #0]
    ed84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]++;
    ed88:	4a06      	ldr	r2, [pc, #24]	; (eda4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    ed8a:	9b01      	ldr	r3, [sp, #4]
    ed8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ed90:	1c5a      	adds	r2, r3, #1
    ed92:	4904      	ldr	r1, [pc, #16]	; (eda4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_14+0x50>)
    ed94:	9b01      	ldr	r3, [sp, #4]
    ed96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ed9a:	bf00      	nop
    ed9c:	b003      	add	sp, #12
    ed9e:	f85d fb04 	ldr.w	pc, [sp], #4
    eda2:	bf00      	nop
    eda4:	1fff9114 	.word	0x1fff9114
    eda8:	1fff9110 	.word	0x1fff9110

0000edac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14(void)
{
    edac:	b500      	push	{lr}
    edae:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edb0:	f7f2 fa54 	bl	125c <Sys_GetCoreID>
    edb4:	4603      	mov	r3, r0
    edb6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]--;
    edb8:	4a0d      	ldr	r2, [pc, #52]	; (edf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    edba:	9b01      	ldr	r3, [sp, #4]
    edbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edc0:	1e5a      	subs	r2, r3, #1
    edc2:	490b      	ldr	r1, [pc, #44]	; (edf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    edc4:	9b01      	ldr	r3, [sp, #4]
    edc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_14[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_14[u32CoreId]))         /*if interrupts were enabled*/
    edca:	4a0a      	ldr	r2, [pc, #40]	; (edf4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x48>)
    edcc:	9b01      	ldr	r3, [sp, #4]
    edce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    edd2:	f003 0301 	and.w	r3, r3, #1
    edd6:	2b00      	cmp	r3, #0
    edd8:	d106      	bne.n	ede8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    edda:	4a05      	ldr	r2, [pc, #20]	; (edf0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x44>)
    eddc:	9b01      	ldr	r3, [sp, #4]
    edde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ede2:	2b00      	cmp	r3, #0
    ede4:	d100      	bne.n	ede8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_14+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ede6:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ede8:	bf00      	nop
    edea:	b003      	add	sp, #12
    edec:	f85d fb04 	ldr.w	pc, [sp], #4
    edf0:	1fff9114 	.word	0x1fff9114
    edf4:	1fff9110 	.word	0x1fff9110

0000edf8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    edf8:	b500      	push	{lr}
    edfa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    edfc:	f7f2 fa2e 	bl	125c <Sys_GetCoreID>
    ee00:	4603      	mov	r3, r0
    ee02:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId])
    ee04:	4a10      	ldr	r2, [pc, #64]	; (ee48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    ee06:	9b01      	ldr	r3, [sp, #4]
    ee08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee0c:	2b00      	cmp	r3, #0
    ee0e:	d10d      	bne.n	ee2c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ee10:	f7f1 ff53 	bl	cba <Port_schm_read_msr>
    ee14:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ee16:	9b00      	ldr	r3, [sp, #0]
    ee18:	f003 0301 	and.w	r3, r3, #1
    ee1c:	2b00      	cmp	r3, #0
    ee1e:	d100      	bne.n	ee22 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ee20:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_15[u32CoreId] = msr;
    ee22:	490a      	ldr	r1, [pc, #40]	; (ee4c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x54>)
    ee24:	9b01      	ldr	r3, [sp, #4]
    ee26:	9a00      	ldr	r2, [sp, #0]
    ee28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]++;
    ee2c:	4a06      	ldr	r2, [pc, #24]	; (ee48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    ee2e:	9b01      	ldr	r3, [sp, #4]
    ee30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee34:	1c5a      	adds	r2, r3, #1
    ee36:	4904      	ldr	r1, [pc, #16]	; (ee48 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_15+0x50>)
    ee38:	9b01      	ldr	r3, [sp, #4]
    ee3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ee3e:	bf00      	nop
    ee40:	b003      	add	sp, #12
    ee42:	f85d fb04 	ldr.w	pc, [sp], #4
    ee46:	bf00      	nop
    ee48:	1fff911c 	.word	0x1fff911c
    ee4c:	1fff9118 	.word	0x1fff9118

0000ee50 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15(void)
{
    ee50:	b500      	push	{lr}
    ee52:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ee54:	f7f2 fa02 	bl	125c <Sys_GetCoreID>
    ee58:	4603      	mov	r3, r0
    ee5a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]--;
    ee5c:	4a0d      	ldr	r2, [pc, #52]	; (ee94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ee5e:	9b01      	ldr	r3, [sp, #4]
    ee60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee64:	1e5a      	subs	r2, r3, #1
    ee66:	490b      	ldr	r1, [pc, #44]	; (ee94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ee68:	9b01      	ldr	r3, [sp, #4]
    ee6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_15[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_15[u32CoreId]))         /*if interrupts were enabled*/
    ee6e:	4a0a      	ldr	r2, [pc, #40]	; (ee98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x48>)
    ee70:	9b01      	ldr	r3, [sp, #4]
    ee72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee76:	f003 0301 	and.w	r3, r3, #1
    ee7a:	2b00      	cmp	r3, #0
    ee7c:	d106      	bne.n	ee8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    ee7e:	4a05      	ldr	r2, [pc, #20]	; (ee94 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x44>)
    ee80:	9b01      	ldr	r3, [sp, #4]
    ee82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ee86:	2b00      	cmp	r3, #0
    ee88:	d100      	bne.n	ee8c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_15+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ee8a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ee8c:	bf00      	nop
    ee8e:	b003      	add	sp, #12
    ee90:	f85d fb04 	ldr.w	pc, [sp], #4
    ee94:	1fff911c 	.word	0x1fff911c
    ee98:	1fff9118 	.word	0x1fff9118

0000ee9c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    ee9c:	b500      	push	{lr}
    ee9e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eea0:	f7f2 f9dc 	bl	125c <Sys_GetCoreID>
    eea4:	4603      	mov	r3, r0
    eea6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId])
    eea8:	4a10      	ldr	r2, [pc, #64]	; (eeec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    eeaa:	9b01      	ldr	r3, [sp, #4]
    eeac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eeb0:	2b00      	cmp	r3, #0
    eeb2:	d10d      	bne.n	eed0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    eeb4:	f7f1 ff01 	bl	cba <Port_schm_read_msr>
    eeb8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    eeba:	9b00      	ldr	r3, [sp, #0]
    eebc:	f003 0301 	and.w	r3, r3, #1
    eec0:	2b00      	cmp	r3, #0
    eec2:	d100      	bne.n	eec6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    eec4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_16[u32CoreId] = msr;
    eec6:	490a      	ldr	r1, [pc, #40]	; (eef0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x54>)
    eec8:	9b01      	ldr	r3, [sp, #4]
    eeca:	9a00      	ldr	r2, [sp, #0]
    eecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]++;
    eed0:	4a06      	ldr	r2, [pc, #24]	; (eeec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    eed2:	9b01      	ldr	r3, [sp, #4]
    eed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eed8:	1c5a      	adds	r2, r3, #1
    eeda:	4904      	ldr	r1, [pc, #16]	; (eeec <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_16+0x50>)
    eedc:	9b01      	ldr	r3, [sp, #4]
    eede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    eee2:	bf00      	nop
    eee4:	b003      	add	sp, #12
    eee6:	f85d fb04 	ldr.w	pc, [sp], #4
    eeea:	bf00      	nop
    eeec:	1fff9124 	.word	0x1fff9124
    eef0:	1fff9120 	.word	0x1fff9120

0000eef4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16(void)
{
    eef4:	b500      	push	{lr}
    eef6:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    eef8:	f7f2 f9b0 	bl	125c <Sys_GetCoreID>
    eefc:	4603      	mov	r3, r0
    eefe:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]--;
    ef00:	4a0d      	ldr	r2, [pc, #52]	; (ef38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    ef02:	9b01      	ldr	r3, [sp, #4]
    ef04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef08:	1e5a      	subs	r2, r3, #1
    ef0a:	490b      	ldr	r1, [pc, #44]	; (ef38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    ef0c:	9b01      	ldr	r3, [sp, #4]
    ef0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_16[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_16[u32CoreId]))         /*if interrupts were enabled*/
    ef12:	4a0a      	ldr	r2, [pc, #40]	; (ef3c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x48>)
    ef14:	9b01      	ldr	r3, [sp, #4]
    ef16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef1a:	f003 0301 	and.w	r3, r3, #1
    ef1e:	2b00      	cmp	r3, #0
    ef20:	d106      	bne.n	ef30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    ef22:	4a05      	ldr	r2, [pc, #20]	; (ef38 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x44>)
    ef24:	9b01      	ldr	r3, [sp, #4]
    ef26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef2a:	2b00      	cmp	r3, #0
    ef2c:	d100      	bne.n	ef30 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_16+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    ef2e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    ef30:	bf00      	nop
    ef32:	b003      	add	sp, #12
    ef34:	f85d fb04 	ldr.w	pc, [sp], #4
    ef38:	1fff9124 	.word	0x1fff9124
    ef3c:	1fff9120 	.word	0x1fff9120

0000ef40 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    ef40:	b500      	push	{lr}
    ef42:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef44:	f7f2 f98a 	bl	125c <Sys_GetCoreID>
    ef48:	4603      	mov	r3, r0
    ef4a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId])
    ef4c:	4a10      	ldr	r2, [pc, #64]	; (ef90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    ef4e:	9b01      	ldr	r3, [sp, #4]
    ef50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef54:	2b00      	cmp	r3, #0
    ef56:	d10d      	bne.n	ef74 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    ef58:	f7f1 feaf 	bl	cba <Port_schm_read_msr>
    ef5c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    ef5e:	9b00      	ldr	r3, [sp, #0]
    ef60:	f003 0301 	and.w	r3, r3, #1
    ef64:	2b00      	cmp	r3, #0
    ef66:	d100      	bne.n	ef6a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    ef68:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_17[u32CoreId] = msr;
    ef6a:	490a      	ldr	r1, [pc, #40]	; (ef94 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x54>)
    ef6c:	9b01      	ldr	r3, [sp, #4]
    ef6e:	9a00      	ldr	r2, [sp, #0]
    ef70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]++;
    ef74:	4a06      	ldr	r2, [pc, #24]	; (ef90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    ef76:	9b01      	ldr	r3, [sp, #4]
    ef78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef7c:	1c5a      	adds	r2, r3, #1
    ef7e:	4904      	ldr	r1, [pc, #16]	; (ef90 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_17+0x50>)
    ef80:	9b01      	ldr	r3, [sp, #4]
    ef82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    ef86:	bf00      	nop
    ef88:	b003      	add	sp, #12
    ef8a:	f85d fb04 	ldr.w	pc, [sp], #4
    ef8e:	bf00      	nop
    ef90:	1fff912c 	.word	0x1fff912c
    ef94:	1fff9128 	.word	0x1fff9128

0000ef98 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17(void)
{
    ef98:	b500      	push	{lr}
    ef9a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    ef9c:	f7f2 f95e 	bl	125c <Sys_GetCoreID>
    efa0:	4603      	mov	r3, r0
    efa2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]--;
    efa4:	4a0d      	ldr	r2, [pc, #52]	; (efdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    efa6:	9b01      	ldr	r3, [sp, #4]
    efa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efac:	1e5a      	subs	r2, r3, #1
    efae:	490b      	ldr	r1, [pc, #44]	; (efdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    efb0:	9b01      	ldr	r3, [sp, #4]
    efb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_17[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_17[u32CoreId]))         /*if interrupts were enabled*/
    efb6:	4a0a      	ldr	r2, [pc, #40]	; (efe0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x48>)
    efb8:	9b01      	ldr	r3, [sp, #4]
    efba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efbe:	f003 0301 	and.w	r3, r3, #1
    efc2:	2b00      	cmp	r3, #0
    efc4:	d106      	bne.n	efd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    efc6:	4a05      	ldr	r2, [pc, #20]	; (efdc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x44>)
    efc8:	9b01      	ldr	r3, [sp, #4]
    efca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    efce:	2b00      	cmp	r3, #0
    efd0:	d100      	bne.n	efd4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_17+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    efd2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    efd4:	bf00      	nop
    efd6:	b003      	add	sp, #12
    efd8:	f85d fb04 	ldr.w	pc, [sp], #4
    efdc:	1fff912c 	.word	0x1fff912c
    efe0:	1fff9128 	.word	0x1fff9128

0000efe4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    efe4:	b500      	push	{lr}
    efe6:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    efe8:	f7f2 f938 	bl	125c <Sys_GetCoreID>
    efec:	4603      	mov	r3, r0
    efee:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId])
    eff0:	4a10      	ldr	r2, [pc, #64]	; (f034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    eff2:	9b01      	ldr	r3, [sp, #4]
    eff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    eff8:	2b00      	cmp	r3, #0
    effa:	d10d      	bne.n	f018 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    effc:	f7f1 fe5d 	bl	cba <Port_schm_read_msr>
    f000:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f002:	9b00      	ldr	r3, [sp, #0]
    f004:	f003 0301 	and.w	r3, r3, #1
    f008:	2b00      	cmp	r3, #0
    f00a:	d100      	bne.n	f00e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f00c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_18[u32CoreId] = msr;
    f00e:	490a      	ldr	r1, [pc, #40]	; (f038 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x54>)
    f010:	9b01      	ldr	r3, [sp, #4]
    f012:	9a00      	ldr	r2, [sp, #0]
    f014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]++;
    f018:	4a06      	ldr	r2, [pc, #24]	; (f034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f01a:	9b01      	ldr	r3, [sp, #4]
    f01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f020:	1c5a      	adds	r2, r3, #1
    f022:	4904      	ldr	r1, [pc, #16]	; (f034 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_18+0x50>)
    f024:	9b01      	ldr	r3, [sp, #4]
    f026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f02a:	bf00      	nop
    f02c:	b003      	add	sp, #12
    f02e:	f85d fb04 	ldr.w	pc, [sp], #4
    f032:	bf00      	nop
    f034:	1fff9134 	.word	0x1fff9134
    f038:	1fff9130 	.word	0x1fff9130

0000f03c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18(void)
{
    f03c:	b500      	push	{lr}
    f03e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f040:	f7f2 f90c 	bl	125c <Sys_GetCoreID>
    f044:	4603      	mov	r3, r0
    f046:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]--;
    f048:	4a0d      	ldr	r2, [pc, #52]	; (f080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f04a:	9b01      	ldr	r3, [sp, #4]
    f04c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f050:	1e5a      	subs	r2, r3, #1
    f052:	490b      	ldr	r1, [pc, #44]	; (f080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f054:	9b01      	ldr	r3, [sp, #4]
    f056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_18[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_18[u32CoreId]))         /*if interrupts were enabled*/
    f05a:	4a0a      	ldr	r2, [pc, #40]	; (f084 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x48>)
    f05c:	9b01      	ldr	r3, [sp, #4]
    f05e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f062:	f003 0301 	and.w	r3, r3, #1
    f066:	2b00      	cmp	r3, #0
    f068:	d106      	bne.n	f078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    f06a:	4a05      	ldr	r2, [pc, #20]	; (f080 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x44>)
    f06c:	9b01      	ldr	r3, [sp, #4]
    f06e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f072:	2b00      	cmp	r3, #0
    f074:	d100      	bne.n	f078 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_18+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f076:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f078:	bf00      	nop
    f07a:	b003      	add	sp, #12
    f07c:	f85d fb04 	ldr.w	pc, [sp], #4
    f080:	1fff9134 	.word	0x1fff9134
    f084:	1fff9130 	.word	0x1fff9130

0000f088 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    f088:	b500      	push	{lr}
    f08a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f08c:	f7f2 f8e6 	bl	125c <Sys_GetCoreID>
    f090:	4603      	mov	r3, r0
    f092:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId])
    f094:	4a10      	ldr	r2, [pc, #64]	; (f0d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f096:	9b01      	ldr	r3, [sp, #4]
    f098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f09c:	2b00      	cmp	r3, #0
    f09e:	d10d      	bne.n	f0bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f0a0:	f7f1 fe0b 	bl	cba <Port_schm_read_msr>
    f0a4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f0a6:	9b00      	ldr	r3, [sp, #0]
    f0a8:	f003 0301 	and.w	r3, r3, #1
    f0ac:	2b00      	cmp	r3, #0
    f0ae:	d100      	bne.n	f0b2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f0b0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_19[u32CoreId] = msr;
    f0b2:	490a      	ldr	r1, [pc, #40]	; (f0dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x54>)
    f0b4:	9b01      	ldr	r3, [sp, #4]
    f0b6:	9a00      	ldr	r2, [sp, #0]
    f0b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]++;
    f0bc:	4a06      	ldr	r2, [pc, #24]	; (f0d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f0be:	9b01      	ldr	r3, [sp, #4]
    f0c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0c4:	1c5a      	adds	r2, r3, #1
    f0c6:	4904      	ldr	r1, [pc, #16]	; (f0d8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_19+0x50>)
    f0c8:	9b01      	ldr	r3, [sp, #4]
    f0ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f0ce:	bf00      	nop
    f0d0:	b003      	add	sp, #12
    f0d2:	f85d fb04 	ldr.w	pc, [sp], #4
    f0d6:	bf00      	nop
    f0d8:	1fff913c 	.word	0x1fff913c
    f0dc:	1fff9138 	.word	0x1fff9138

0000f0e0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19(void)
{
    f0e0:	b500      	push	{lr}
    f0e2:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f0e4:	f7f2 f8ba 	bl	125c <Sys_GetCoreID>
    f0e8:	4603      	mov	r3, r0
    f0ea:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]--;
    f0ec:	4a0d      	ldr	r2, [pc, #52]	; (f124 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f0ee:	9b01      	ldr	r3, [sp, #4]
    f0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0f4:	1e5a      	subs	r2, r3, #1
    f0f6:	490b      	ldr	r1, [pc, #44]	; (f124 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f0f8:	9b01      	ldr	r3, [sp, #4]
    f0fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_19[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_19[u32CoreId]))         /*if interrupts were enabled*/
    f0fe:	4a0a      	ldr	r2, [pc, #40]	; (f128 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x48>)
    f100:	9b01      	ldr	r3, [sp, #4]
    f102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f106:	f003 0301 	and.w	r3, r3, #1
    f10a:	2b00      	cmp	r3, #0
    f10c:	d106      	bne.n	f11c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    f10e:	4a05      	ldr	r2, [pc, #20]	; (f124 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x44>)
    f110:	9b01      	ldr	r3, [sp, #4]
    f112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f116:	2b00      	cmp	r3, #0
    f118:	d100      	bne.n	f11c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_19+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f11a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f11c:	bf00      	nop
    f11e:	b003      	add	sp, #12
    f120:	f85d fb04 	ldr.w	pc, [sp], #4
    f124:	1fff913c 	.word	0x1fff913c
    f128:	1fff9138 	.word	0x1fff9138

0000f12c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    f12c:	b500      	push	{lr}
    f12e:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f130:	f7f2 f894 	bl	125c <Sys_GetCoreID>
    f134:	4603      	mov	r3, r0
    f136:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId])
    f138:	4a10      	ldr	r2, [pc, #64]	; (f17c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    f13a:	9b01      	ldr	r3, [sp, #4]
    f13c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f140:	2b00      	cmp	r3, #0
    f142:	d10d      	bne.n	f160 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f144:	f7f1 fdb9 	bl	cba <Port_schm_read_msr>
    f148:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f14a:	9b00      	ldr	r3, [sp, #0]
    f14c:	f003 0301 	and.w	r3, r3, #1
    f150:	2b00      	cmp	r3, #0
    f152:	d100      	bne.n	f156 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f154:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_20[u32CoreId] = msr;
    f156:	490a      	ldr	r1, [pc, #40]	; (f180 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x54>)
    f158:	9b01      	ldr	r3, [sp, #4]
    f15a:	9a00      	ldr	r2, [sp, #0]
    f15c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]++;
    f160:	4a06      	ldr	r2, [pc, #24]	; (f17c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    f162:	9b01      	ldr	r3, [sp, #4]
    f164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f168:	1c5a      	adds	r2, r3, #1
    f16a:	4904      	ldr	r1, [pc, #16]	; (f17c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_20+0x50>)
    f16c:	9b01      	ldr	r3, [sp, #4]
    f16e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f172:	bf00      	nop
    f174:	b003      	add	sp, #12
    f176:	f85d fb04 	ldr.w	pc, [sp], #4
    f17a:	bf00      	nop
    f17c:	1fff9144 	.word	0x1fff9144
    f180:	1fff9140 	.word	0x1fff9140

0000f184 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20(void)
{
    f184:	b500      	push	{lr}
    f186:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f188:	f7f2 f868 	bl	125c <Sys_GetCoreID>
    f18c:	4603      	mov	r3, r0
    f18e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]--;
    f190:	4a0d      	ldr	r2, [pc, #52]	; (f1c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    f192:	9b01      	ldr	r3, [sp, #4]
    f194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f198:	1e5a      	subs	r2, r3, #1
    f19a:	490b      	ldr	r1, [pc, #44]	; (f1c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    f19c:	9b01      	ldr	r3, [sp, #4]
    f19e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_20[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_20[u32CoreId]))         /*if interrupts were enabled*/
    f1a2:	4a0a      	ldr	r2, [pc, #40]	; (f1cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x48>)
    f1a4:	9b01      	ldr	r3, [sp, #4]
    f1a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1aa:	f003 0301 	and.w	r3, r3, #1
    f1ae:	2b00      	cmp	r3, #0
    f1b0:	d106      	bne.n	f1c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    f1b2:	4a05      	ldr	r2, [pc, #20]	; (f1c8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x44>)
    f1b4:	9b01      	ldr	r3, [sp, #4]
    f1b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1ba:	2b00      	cmp	r3, #0
    f1bc:	d100      	bne.n	f1c0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_20+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f1be:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f1c0:	bf00      	nop
    f1c2:	b003      	add	sp, #12
    f1c4:	f85d fb04 	ldr.w	pc, [sp], #4
    f1c8:	1fff9144 	.word	0x1fff9144
    f1cc:	1fff9140 	.word	0x1fff9140

0000f1d0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    f1d0:	b500      	push	{lr}
    f1d2:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f1d4:	f7f2 f842 	bl	125c <Sys_GetCoreID>
    f1d8:	4603      	mov	r3, r0
    f1da:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId])
    f1dc:	4a10      	ldr	r2, [pc, #64]	; (f220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    f1de:	9b01      	ldr	r3, [sp, #4]
    f1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f1e4:	2b00      	cmp	r3, #0
    f1e6:	d10d      	bne.n	f204 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f1e8:	f7f1 fd67 	bl	cba <Port_schm_read_msr>
    f1ec:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f1ee:	9b00      	ldr	r3, [sp, #0]
    f1f0:	f003 0301 	and.w	r3, r3, #1
    f1f4:	2b00      	cmp	r3, #0
    f1f6:	d100      	bne.n	f1fa <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f1f8:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_21[u32CoreId] = msr;
    f1fa:	490a      	ldr	r1, [pc, #40]	; (f224 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x54>)
    f1fc:	9b01      	ldr	r3, [sp, #4]
    f1fe:	9a00      	ldr	r2, [sp, #0]
    f200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]++;
    f204:	4a06      	ldr	r2, [pc, #24]	; (f220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    f206:	9b01      	ldr	r3, [sp, #4]
    f208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f20c:	1c5a      	adds	r2, r3, #1
    f20e:	4904      	ldr	r1, [pc, #16]	; (f220 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_21+0x50>)
    f210:	9b01      	ldr	r3, [sp, #4]
    f212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f216:	bf00      	nop
    f218:	b003      	add	sp, #12
    f21a:	f85d fb04 	ldr.w	pc, [sp], #4
    f21e:	bf00      	nop
    f220:	1fff914c 	.word	0x1fff914c
    f224:	1fff9148 	.word	0x1fff9148

0000f228 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21(void)
{
    f228:	b500      	push	{lr}
    f22a:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f22c:	f7f2 f816 	bl	125c <Sys_GetCoreID>
    f230:	4603      	mov	r3, r0
    f232:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]--;
    f234:	4a0d      	ldr	r2, [pc, #52]	; (f26c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    f236:	9b01      	ldr	r3, [sp, #4]
    f238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f23c:	1e5a      	subs	r2, r3, #1
    f23e:	490b      	ldr	r1, [pc, #44]	; (f26c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    f240:	9b01      	ldr	r3, [sp, #4]
    f242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_21[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_21[u32CoreId]))         /*if interrupts were enabled*/
    f246:	4a0a      	ldr	r2, [pc, #40]	; (f270 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x48>)
    f248:	9b01      	ldr	r3, [sp, #4]
    f24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f24e:	f003 0301 	and.w	r3, r3, #1
    f252:	2b00      	cmp	r3, #0
    f254:	d106      	bne.n	f264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    f256:	4a05      	ldr	r2, [pc, #20]	; (f26c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x44>)
    f258:	9b01      	ldr	r3, [sp, #4]
    f25a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f25e:	2b00      	cmp	r3, #0
    f260:	d100      	bne.n	f264 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_21+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f262:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f264:	bf00      	nop
    f266:	b003      	add	sp, #12
    f268:	f85d fb04 	ldr.w	pc, [sp], #4
    f26c:	1fff914c 	.word	0x1fff914c
    f270:	1fff9148 	.word	0x1fff9148

0000f274 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    f274:	b500      	push	{lr}
    f276:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f278:	f7f1 fff0 	bl	125c <Sys_GetCoreID>
    f27c:	4603      	mov	r3, r0
    f27e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId])
    f280:	4a10      	ldr	r2, [pc, #64]	; (f2c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    f282:	9b01      	ldr	r3, [sp, #4]
    f284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f288:	2b00      	cmp	r3, #0
    f28a:	d10d      	bne.n	f2a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f28c:	f7f1 fd15 	bl	cba <Port_schm_read_msr>
    f290:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f292:	9b00      	ldr	r3, [sp, #0]
    f294:	f003 0301 	and.w	r3, r3, #1
    f298:	2b00      	cmp	r3, #0
    f29a:	d100      	bne.n	f29e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f29c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_22[u32CoreId] = msr;
    f29e:	490a      	ldr	r1, [pc, #40]	; (f2c8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x54>)
    f2a0:	9b01      	ldr	r3, [sp, #4]
    f2a2:	9a00      	ldr	r2, [sp, #0]
    f2a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]++;
    f2a8:	4a06      	ldr	r2, [pc, #24]	; (f2c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    f2aa:	9b01      	ldr	r3, [sp, #4]
    f2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2b0:	1c5a      	adds	r2, r3, #1
    f2b2:	4904      	ldr	r1, [pc, #16]	; (f2c4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_22+0x50>)
    f2b4:	9b01      	ldr	r3, [sp, #4]
    f2b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f2ba:	bf00      	nop
    f2bc:	b003      	add	sp, #12
    f2be:	f85d fb04 	ldr.w	pc, [sp], #4
    f2c2:	bf00      	nop
    f2c4:	1fff9154 	.word	0x1fff9154
    f2c8:	1fff9150 	.word	0x1fff9150

0000f2cc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22(void)
{
    f2cc:	b500      	push	{lr}
    f2ce:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f2d0:	f7f1 ffc4 	bl	125c <Sys_GetCoreID>
    f2d4:	4603      	mov	r3, r0
    f2d6:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]--;
    f2d8:	4a0d      	ldr	r2, [pc, #52]	; (f310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    f2da:	9b01      	ldr	r3, [sp, #4]
    f2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2e0:	1e5a      	subs	r2, r3, #1
    f2e2:	490b      	ldr	r1, [pc, #44]	; (f310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    f2e4:	9b01      	ldr	r3, [sp, #4]
    f2e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_22[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_22[u32CoreId]))         /*if interrupts were enabled*/
    f2ea:	4a0a      	ldr	r2, [pc, #40]	; (f314 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x48>)
    f2ec:	9b01      	ldr	r3, [sp, #4]
    f2ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f2f2:	f003 0301 	and.w	r3, r3, #1
    f2f6:	2b00      	cmp	r3, #0
    f2f8:	d106      	bne.n	f308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    f2fa:	4a05      	ldr	r2, [pc, #20]	; (f310 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x44>)
    f2fc:	9b01      	ldr	r3, [sp, #4]
    f2fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f302:	2b00      	cmp	r3, #0
    f304:	d100      	bne.n	f308 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_22+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f306:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f308:	bf00      	nop
    f30a:	b003      	add	sp, #12
    f30c:	f85d fb04 	ldr.w	pc, [sp], #4
    f310:	1fff9154 	.word	0x1fff9154
    f314:	1fff9150 	.word	0x1fff9150

0000f318 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    f318:	b500      	push	{lr}
    f31a:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f31c:	f7f1 ff9e 	bl	125c <Sys_GetCoreID>
    f320:	4603      	mov	r3, r0
    f322:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId])
    f324:	4a10      	ldr	r2, [pc, #64]	; (f368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    f326:	9b01      	ldr	r3, [sp, #4]
    f328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f32c:	2b00      	cmp	r3, #0
    f32e:	d10d      	bne.n	f34c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f330:	f7f1 fcc3 	bl	cba <Port_schm_read_msr>
    f334:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f336:	9b00      	ldr	r3, [sp, #0]
    f338:	f003 0301 	and.w	r3, r3, #1
    f33c:	2b00      	cmp	r3, #0
    f33e:	d100      	bne.n	f342 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f340:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_23[u32CoreId] = msr;
    f342:	490a      	ldr	r1, [pc, #40]	; (f36c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x54>)
    f344:	9b01      	ldr	r3, [sp, #4]
    f346:	9a00      	ldr	r2, [sp, #0]
    f348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]++;
    f34c:	4a06      	ldr	r2, [pc, #24]	; (f368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    f34e:	9b01      	ldr	r3, [sp, #4]
    f350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f354:	1c5a      	adds	r2, r3, #1
    f356:	4904      	ldr	r1, [pc, #16]	; (f368 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_23+0x50>)
    f358:	9b01      	ldr	r3, [sp, #4]
    f35a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f35e:	bf00      	nop
    f360:	b003      	add	sp, #12
    f362:	f85d fb04 	ldr.w	pc, [sp], #4
    f366:	bf00      	nop
    f368:	1fff915c 	.word	0x1fff915c
    f36c:	1fff9158 	.word	0x1fff9158

0000f370 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23(void)
{
    f370:	b500      	push	{lr}
    f372:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f374:	f7f1 ff72 	bl	125c <Sys_GetCoreID>
    f378:	4603      	mov	r3, r0
    f37a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]--;
    f37c:	4a0d      	ldr	r2, [pc, #52]	; (f3b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    f37e:	9b01      	ldr	r3, [sp, #4]
    f380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f384:	1e5a      	subs	r2, r3, #1
    f386:	490b      	ldr	r1, [pc, #44]	; (f3b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    f388:	9b01      	ldr	r3, [sp, #4]
    f38a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_23[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_23[u32CoreId]))         /*if interrupts were enabled*/
    f38e:	4a0a      	ldr	r2, [pc, #40]	; (f3b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x48>)
    f390:	9b01      	ldr	r3, [sp, #4]
    f392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f396:	f003 0301 	and.w	r3, r3, #1
    f39a:	2b00      	cmp	r3, #0
    f39c:	d106      	bne.n	f3ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    f39e:	4a05      	ldr	r2, [pc, #20]	; (f3b4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x44>)
    f3a0:	9b01      	ldr	r3, [sp, #4]
    f3a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3a6:	2b00      	cmp	r3, #0
    f3a8:	d100      	bne.n	f3ac <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_23+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f3aa:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f3ac:	bf00      	nop
    f3ae:	b003      	add	sp, #12
    f3b0:	f85d fb04 	ldr.w	pc, [sp], #4
    f3b4:	1fff915c 	.word	0x1fff915c
    f3b8:	1fff9158 	.word	0x1fff9158

0000f3bc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    f3bc:	b500      	push	{lr}
    f3be:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f3c0:	f7f1 ff4c 	bl	125c <Sys_GetCoreID>
    f3c4:	4603      	mov	r3, r0
    f3c6:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId])
    f3c8:	4a10      	ldr	r2, [pc, #64]	; (f40c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    f3ca:	9b01      	ldr	r3, [sp, #4]
    f3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3d0:	2b00      	cmp	r3, #0
    f3d2:	d10d      	bne.n	f3f0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f3d4:	f7f1 fc71 	bl	cba <Port_schm_read_msr>
    f3d8:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f3da:	9b00      	ldr	r3, [sp, #0]
    f3dc:	f003 0301 	and.w	r3, r3, #1
    f3e0:	2b00      	cmp	r3, #0
    f3e2:	d100      	bne.n	f3e6 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f3e4:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_24[u32CoreId] = msr;
    f3e6:	490a      	ldr	r1, [pc, #40]	; (f410 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x54>)
    f3e8:	9b01      	ldr	r3, [sp, #4]
    f3ea:	9a00      	ldr	r2, [sp, #0]
    f3ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]++;
    f3f0:	4a06      	ldr	r2, [pc, #24]	; (f40c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    f3f2:	9b01      	ldr	r3, [sp, #4]
    f3f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f3f8:	1c5a      	adds	r2, r3, #1
    f3fa:	4904      	ldr	r1, [pc, #16]	; (f40c <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_24+0x50>)
    f3fc:	9b01      	ldr	r3, [sp, #4]
    f3fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f402:	bf00      	nop
    f404:	b003      	add	sp, #12
    f406:	f85d fb04 	ldr.w	pc, [sp], #4
    f40a:	bf00      	nop
    f40c:	1fff9164 	.word	0x1fff9164
    f410:	1fff9160 	.word	0x1fff9160

0000f414 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24(void)
{
    f414:	b500      	push	{lr}
    f416:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f418:	f7f1 ff20 	bl	125c <Sys_GetCoreID>
    f41c:	4603      	mov	r3, r0
    f41e:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]--;
    f420:	4a0d      	ldr	r2, [pc, #52]	; (f458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    f422:	9b01      	ldr	r3, [sp, #4]
    f424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f428:	1e5a      	subs	r2, r3, #1
    f42a:	490b      	ldr	r1, [pc, #44]	; (f458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    f42c:	9b01      	ldr	r3, [sp, #4]
    f42e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_24[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_24[u32CoreId]))         /*if interrupts were enabled*/
    f432:	4a0a      	ldr	r2, [pc, #40]	; (f45c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x48>)
    f434:	9b01      	ldr	r3, [sp, #4]
    f436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f43a:	f003 0301 	and.w	r3, r3, #1
    f43e:	2b00      	cmp	r3, #0
    f440:	d106      	bne.n	f450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    f442:	4a05      	ldr	r2, [pc, #20]	; (f458 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x44>)
    f444:	9b01      	ldr	r3, [sp, #4]
    f446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f44a:	2b00      	cmp	r3, #0
    f44c:	d100      	bne.n	f450 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_24+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f44e:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f450:	bf00      	nop
    f452:	b003      	add	sp, #12
    f454:	f85d fb04 	ldr.w	pc, [sp], #4
    f458:	1fff9164 	.word	0x1fff9164
    f45c:	1fff9160 	.word	0x1fff9160

0000f460 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    f460:	b500      	push	{lr}
    f462:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f464:	f7f1 fefa 	bl	125c <Sys_GetCoreID>
    f468:	4603      	mov	r3, r0
    f46a:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId])
    f46c:	4a10      	ldr	r2, [pc, #64]	; (f4b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    f46e:	9b01      	ldr	r3, [sp, #4]
    f470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f474:	2b00      	cmp	r3, #0
    f476:	d10d      	bne.n	f494 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f478:	f7f1 fc1f 	bl	cba <Port_schm_read_msr>
    f47c:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f47e:	9b00      	ldr	r3, [sp, #0]
    f480:	f003 0301 	and.w	r3, r3, #1
    f484:	2b00      	cmp	r3, #0
    f486:	d100      	bne.n	f48a <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f488:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_25[u32CoreId] = msr;
    f48a:	490a      	ldr	r1, [pc, #40]	; (f4b4 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x54>)
    f48c:	9b01      	ldr	r3, [sp, #4]
    f48e:	9a00      	ldr	r2, [sp, #0]
    f490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]++;
    f494:	4a06      	ldr	r2, [pc, #24]	; (f4b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    f496:	9b01      	ldr	r3, [sp, #4]
    f498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f49c:	1c5a      	adds	r2, r3, #1
    f49e:	4904      	ldr	r1, [pc, #16]	; (f4b0 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_25+0x50>)
    f4a0:	9b01      	ldr	r3, [sp, #4]
    f4a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f4a6:	bf00      	nop
    f4a8:	b003      	add	sp, #12
    f4aa:	f85d fb04 	ldr.w	pc, [sp], #4
    f4ae:	bf00      	nop
    f4b0:	1fff916c 	.word	0x1fff916c
    f4b4:	1fff9168 	.word	0x1fff9168

0000f4b8 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25(void)
{
    f4b8:	b500      	push	{lr}
    f4ba:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f4bc:	f7f1 fece 	bl	125c <Sys_GetCoreID>
    f4c0:	4603      	mov	r3, r0
    f4c2:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]--;
    f4c4:	4a0d      	ldr	r2, [pc, #52]	; (f4fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    f4c6:	9b01      	ldr	r3, [sp, #4]
    f4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4cc:	1e5a      	subs	r2, r3, #1
    f4ce:	490b      	ldr	r1, [pc, #44]	; (f4fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    f4d0:	9b01      	ldr	r3, [sp, #4]
    f4d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_25[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_25[u32CoreId]))         /*if interrupts were enabled*/
    f4d6:	4a0a      	ldr	r2, [pc, #40]	; (f500 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x48>)
    f4d8:	9b01      	ldr	r3, [sp, #4]
    f4da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4de:	f003 0301 	and.w	r3, r3, #1
    f4e2:	2b00      	cmp	r3, #0
    f4e4:	d106      	bne.n	f4f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    f4e6:	4a05      	ldr	r2, [pc, #20]	; (f4fc <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x44>)
    f4e8:	9b01      	ldr	r3, [sp, #4]
    f4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4ee:	2b00      	cmp	r3, #0
    f4f0:	d100      	bne.n	f4f4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_25+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f4f2:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f4f4:	bf00      	nop
    f4f6:	b003      	add	sp, #12
    f4f8:	f85d fb04 	ldr.w	pc, [sp], #4
    f4fc:	1fff916c 	.word	0x1fff916c
    f500:	1fff9168 	.word	0x1fff9168

0000f504 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    f504:	b500      	push	{lr}
    f506:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f508:	f7f1 fea8 	bl	125c <Sys_GetCoreID>
    f50c:	4603      	mov	r3, r0
    f50e:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId])
    f510:	4a10      	ldr	r2, [pc, #64]	; (f554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    f512:	9b01      	ldr	r3, [sp, #4]
    f514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f518:	2b00      	cmp	r3, #0
    f51a:	d10d      	bne.n	f538 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f51c:	f7f1 fbcd 	bl	cba <Port_schm_read_msr>
    f520:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f522:	9b00      	ldr	r3, [sp, #0]
    f524:	f003 0301 	and.w	r3, r3, #1
    f528:	2b00      	cmp	r3, #0
    f52a:	d100      	bne.n	f52e <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f52c:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_26[u32CoreId] = msr;
    f52e:	490a      	ldr	r1, [pc, #40]	; (f558 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x54>)
    f530:	9b01      	ldr	r3, [sp, #4]
    f532:	9a00      	ldr	r2, [sp, #0]
    f534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]++;
    f538:	4a06      	ldr	r2, [pc, #24]	; (f554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    f53a:	9b01      	ldr	r3, [sp, #4]
    f53c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f540:	1c5a      	adds	r2, r3, #1
    f542:	4904      	ldr	r1, [pc, #16]	; (f554 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_26+0x50>)
    f544:	9b01      	ldr	r3, [sp, #4]
    f546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f54a:	bf00      	nop
    f54c:	b003      	add	sp, #12
    f54e:	f85d fb04 	ldr.w	pc, [sp], #4
    f552:	bf00      	nop
    f554:	1fff9174 	.word	0x1fff9174
    f558:	1fff9170 	.word	0x1fff9170

0000f55c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26(void)
{
    f55c:	b500      	push	{lr}
    f55e:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f560:	f7f1 fe7c 	bl	125c <Sys_GetCoreID>
    f564:	4603      	mov	r3, r0
    f566:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]--;
    f568:	4a0d      	ldr	r2, [pc, #52]	; (f5a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    f56a:	9b01      	ldr	r3, [sp, #4]
    f56c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f570:	1e5a      	subs	r2, r3, #1
    f572:	490b      	ldr	r1, [pc, #44]	; (f5a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    f574:	9b01      	ldr	r3, [sp, #4]
    f576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_26[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_26[u32CoreId]))         /*if interrupts were enabled*/
    f57a:	4a0a      	ldr	r2, [pc, #40]	; (f5a4 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x48>)
    f57c:	9b01      	ldr	r3, [sp, #4]
    f57e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f582:	f003 0301 	and.w	r3, r3, #1
    f586:	2b00      	cmp	r3, #0
    f588:	d106      	bne.n	f598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    f58a:	4a05      	ldr	r2, [pc, #20]	; (f5a0 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x44>)
    f58c:	9b01      	ldr	r3, [sp, #4]
    f58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f592:	2b00      	cmp	r3, #0
    f594:	d100      	bne.n	f598 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_26+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f596:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f598:	bf00      	nop
    f59a:	b003      	add	sp, #12
    f59c:	f85d fb04 	ldr.w	pc, [sp], #4
    f5a0:	1fff9174 	.word	0x1fff9174
    f5a4:	1fff9170 	.word	0x1fff9170

0000f5a8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    f5a8:	b500      	push	{lr}
    f5aa:	b083      	sub	sp, #12
    uint32 msr;
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f5ac:	f7f1 fe56 	bl	125c <Sys_GetCoreID>
    f5b0:	4603      	mov	r3, r0
    f5b2:	9301      	str	r3, [sp, #4]

    if(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId])
    f5b4:	4a10      	ldr	r2, [pc, #64]	; (f5f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    f5b6:	9b01      	ldr	r3, [sp, #4]
    f5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5bc:	2b00      	cmp	r3, #0
    f5be:	d10d      	bne.n	f5dc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x34>
    {
#if (defined MCAL_ENABLE_USER_MODE_SUPPORT)
        msr = OsIf_Trusted_Call_Return(Port_schm_read_msr);
#else
        msr = Port_schm_read_msr();  /*read MSR (to store interrupts state)*/
    f5c0:	f7f1 fb7b 	bl	cba <Port_schm_read_msr>
    f5c4:	9000      	str	r0, [sp, #0]
#endif /* MCAL_ENABLE_USER_MODE_SUPPORT */
        if (ISR_ON(msr)) /*if MSR[EE] = 0, skip calling Suspend/Resume AllInterrupts*/
    f5c6:	9b00      	ldr	r3, [sp, #0]
    f5c8:	f003 0301 	and.w	r3, r3, #1
    f5cc:	2b00      	cmp	r3, #0
    f5ce:	d100      	bne.n	f5d2 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x2a>
        {
            OsIf_SuspendAllInterrupts();
    f5d0:	b672      	cpsid	i
#ifdef _ARM_DS5_C_S32K1XX_
            ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
        }
        msr_PORT_EXCLUSIVE_AREA_27[u32CoreId] = msr;
    f5d2:	490a      	ldr	r1, [pc, #40]	; (f5fc <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x54>)
    f5d4:	9b01      	ldr	r3, [sp, #4]
    f5d6:	9a00      	ldr	r2, [sp, #0]
    f5d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]++;
    f5dc:	4a06      	ldr	r2, [pc, #24]	; (f5f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    f5de:	9b01      	ldr	r3, [sp, #4]
    f5e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f5e4:	1c5a      	adds	r2, r3, #1
    f5e6:	4904      	ldr	r1, [pc, #16]	; (f5f8 <SchM_Enter_Port_PORT_EXCLUSIVE_AREA_27+0x50>)
    f5e8:	9b01      	ldr	r3, [sp, #4]
    f5ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    f5ee:	bf00      	nop
    f5f0:	b003      	add	sp, #12
    f5f2:	f85d fb04 	ldr.w	pc, [sp], #4
    f5f6:	bf00      	nop
    f5f8:	1fff917c 	.word	0x1fff917c
    f5fc:	1fff9178 	.word	0x1fff9178

0000f600 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27>:

void SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27(void)
{
    f600:	b500      	push	{lr}
    f602:	b083      	sub	sp, #12
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f604:	f7f1 fe2a 	bl	125c <Sys_GetCoreID>
    f608:	4603      	mov	r3, r0
    f60a:	9301      	str	r3, [sp, #4]

    reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]--;
    f60c:	4a0d      	ldr	r2, [pc, #52]	; (f644 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    f60e:	9b01      	ldr	r3, [sp, #4]
    f610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f614:	1e5a      	subs	r2, r3, #1
    f616:	490b      	ldr	r1, [pc, #44]	; (f644 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    f618:	9b01      	ldr	r3, [sp, #4]
    f61a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if ((ISR_ON(msr_PORT_EXCLUSIVE_AREA_27[u32CoreId]))&&(0UL == reentry_guard_PORT_EXCLUSIVE_AREA_27[u32CoreId]))         /*if interrupts were enabled*/
    f61e:	4a0a      	ldr	r2, [pc, #40]	; (f648 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x48>)
    f620:	9b01      	ldr	r3, [sp, #4]
    f622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f626:	f003 0301 	and.w	r3, r3, #1
    f62a:	2b00      	cmp	r3, #0
    f62c:	d106      	bne.n	f63c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    f62e:	4a05      	ldr	r2, [pc, #20]	; (f644 <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x44>)
    f630:	9b01      	ldr	r3, [sp, #4]
    f632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f636:	2b00      	cmp	r3, #0
    f638:	d100      	bne.n	f63c <SchM_Exit_Port_PORT_EXCLUSIVE_AREA_27+0x3c>
    {
        OsIf_ResumeAllInterrupts();
    f63a:	b662      	cpsie	i
#ifdef _ARM_DS5_C_S32K1XX_
        ASM_KEYWORD(" nop ");/* Compiler fix - forces the CSPID instruction to be generated with -02, -Ospace are selected*/
#endif
    }
}
    f63c:	bf00      	nop
    f63e:	b003      	add	sp, #12
    f640:	f85d fb04 	ldr.w	pc, [sp], #4
    f644:	1fff917c 	.word	0x1fff917c
    f648:	1fff9178 	.word	0x1fff9178

0000f64c <Det_Init>:
*
*/
void Det_Init(void)
{
    /* Do nothing */
}
    f64c:	bf00      	nop
    f64e:	4770      	bx	lr

0000f650 <Det_ReportError>:
*/
Std_ReturnType Det_ReportError(uint16 ModuleId,
                               uint8 InstanceId,
                               uint8 ApiId,
                               uint8 ErrorId)
{
    f650:	b510      	push	{r4, lr}
    f652:	b084      	sub	sp, #16
    f654:	4604      	mov	r4, r0
    f656:	4608      	mov	r0, r1
    f658:	4611      	mov	r1, r2
    f65a:	461a      	mov	r2, r3
    f65c:	4623      	mov	r3, r4
    f65e:	f8ad 3006 	strh.w	r3, [sp, #6]
    f662:	4603      	mov	r3, r0
    f664:	f88d 3005 	strb.w	r3, [sp, #5]
    f668:	460b      	mov	r3, r1
    f66a:	f88d 3004 	strb.w	r3, [sp, #4]
    f66e:	4613      	mov	r3, r2
    f670:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f674:	f7f1 fdf2 	bl	125c <Sys_GetCoreID>
    f678:	4603      	mov	r3, r0
    f67a:	9303      	str	r3, [sp, #12]

    Det_ModuleId[u32CoreId] = ModuleId;
    f67c:	490d      	ldr	r1, [pc, #52]	; (f6b4 <Det_ReportError+0x64>)
    f67e:	9b03      	ldr	r3, [sp, #12]
    f680:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f684:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_InstanceId[u32CoreId] = InstanceId;
    f688:	4a0b      	ldr	r2, [pc, #44]	; (f6b8 <Det_ReportError+0x68>)
    f68a:	9b03      	ldr	r3, [sp, #12]
    f68c:	4413      	add	r3, r2
    f68e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    f692:	701a      	strb	r2, [r3, #0]
    Det_ApiId[u32CoreId] = ApiId;
    f694:	4a09      	ldr	r2, [pc, #36]	; (f6bc <Det_ReportError+0x6c>)
    f696:	9b03      	ldr	r3, [sp, #12]
    f698:	4413      	add	r3, r2
    f69a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f69e:	701a      	strb	r2, [r3, #0]
    Det_ErrorId[u32CoreId] = ErrorId;
    f6a0:	4a07      	ldr	r2, [pc, #28]	; (f6c0 <Det_ReportError+0x70>)
    f6a2:	9b03      	ldr	r3, [sp, #12]
    f6a4:	4413      	add	r3, r2
    f6a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f6aa:	701a      	strb	r2, [r3, #0]

    return E_OK;
    f6ac:	2300      	movs	r3, #0
}
    f6ae:	4618      	mov	r0, r3
    f6b0:	b004      	add	sp, #16
    f6b2:	bd10      	pop	{r4, pc}
    f6b4:	1fff91a8 	.word	0x1fff91a8
    f6b8:	1fff9180 	.word	0x1fff9180
    f6bc:	1fff9184 	.word	0x1fff9184
    f6c0:	1fff9188 	.word	0x1fff9188

0000f6c4 <Det_ReportRuntimeError>:
*/
Std_ReturnType Det_ReportRuntimeError(uint16 ModuleId,
                                      uint8 InstanceId,
                                      uint8 ApiId,
                                      uint8 ErrorId)
{
    f6c4:	b510      	push	{r4, lr}
    f6c6:	b084      	sub	sp, #16
    f6c8:	4604      	mov	r4, r0
    f6ca:	4608      	mov	r0, r1
    f6cc:	4611      	mov	r1, r2
    f6ce:	461a      	mov	r2, r3
    f6d0:	4623      	mov	r3, r4
    f6d2:	f8ad 3006 	strh.w	r3, [sp, #6]
    f6d6:	4603      	mov	r3, r0
    f6d8:	f88d 3005 	strb.w	r3, [sp, #5]
    f6dc:	460b      	mov	r3, r1
    f6de:	f88d 3004 	strb.w	r3, [sp, #4]
    f6e2:	4613      	mov	r3, r2
    f6e4:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f6e8:	f7f1 fdb8 	bl	125c <Sys_GetCoreID>
    f6ec:	4603      	mov	r3, r0
    f6ee:	9303      	str	r3, [sp, #12]

    Det_RuntimeModuleId[u32CoreId] = ModuleId;
    f6f0:	490d      	ldr	r1, [pc, #52]	; (f728 <Det_ReportRuntimeError+0x64>)
    f6f2:	9b03      	ldr	r3, [sp, #12]
    f6f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f6f8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_RuntimeInstanceId[u32CoreId] = InstanceId;
    f6fc:	4a0b      	ldr	r2, [pc, #44]	; (f72c <Det_ReportRuntimeError+0x68>)
    f6fe:	9b03      	ldr	r3, [sp, #12]
    f700:	4413      	add	r3, r2
    f702:	f89d 2005 	ldrb.w	r2, [sp, #5]
    f706:	701a      	strb	r2, [r3, #0]
    Det_RuntimeApiId[u32CoreId] = ApiId;
    f708:	4a09      	ldr	r2, [pc, #36]	; (f730 <Det_ReportRuntimeError+0x6c>)
    f70a:	9b03      	ldr	r3, [sp, #12]
    f70c:	4413      	add	r3, r2
    f70e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f712:	701a      	strb	r2, [r3, #0]
    Det_RuntimeErrorId[u32CoreId] = ErrorId;
    f714:	4a07      	ldr	r2, [pc, #28]	; (f734 <Det_ReportRuntimeError+0x70>)
    f716:	9b03      	ldr	r3, [sp, #12]
    f718:	4413      	add	r3, r2
    f71a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f71e:	701a      	strb	r2, [r3, #0]

    return E_OK;
    f720:	2300      	movs	r3, #0
}
    f722:	4618      	mov	r0, r3
    f724:	b004      	add	sp, #16
    f726:	bd10      	pop	{r4, pc}
    f728:	1fff91ac 	.word	0x1fff91ac
    f72c:	1fff918c 	.word	0x1fff918c
    f730:	1fff9190 	.word	0x1fff9190
    f734:	1fff9194 	.word	0x1fff9194

0000f738 <Det_ReportTransientFault>:
*/
Std_ReturnType Det_ReportTransientFault(uint16 ModuleId,
                                        uint8 InstanceId,
                                        uint8 ApiId,
                                        uint8 FaultId)
{
    f738:	b510      	push	{r4, lr}
    f73a:	b084      	sub	sp, #16
    f73c:	4604      	mov	r4, r0
    f73e:	4608      	mov	r0, r1
    f740:	4611      	mov	r1, r2
    f742:	461a      	mov	r2, r3
    f744:	4623      	mov	r3, r4
    f746:	f8ad 3006 	strh.w	r3, [sp, #6]
    f74a:	4603      	mov	r3, r0
    f74c:	f88d 3005 	strb.w	r3, [sp, #5]
    f750:	460b      	mov	r3, r1
    f752:	f88d 3004 	strb.w	r3, [sp, #4]
    f756:	4613      	mov	r3, r2
    f758:	f88d 3003 	strb.w	r3, [sp, #3]
    uint32 u32CoreId = (uint32)OsIf_GetCoreID();
    f75c:	f7f1 fd7e 	bl	125c <Sys_GetCoreID>
    f760:	4603      	mov	r3, r0
    f762:	9303      	str	r3, [sp, #12]

    Det_TransientModuleId[u32CoreId] = ModuleId;
    f764:	490d      	ldr	r1, [pc, #52]	; (f79c <Det_ReportTransientFault+0x64>)
    f766:	9b03      	ldr	r3, [sp, #12]
    f768:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f76c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    Det_TransientInstanceId[u32CoreId] = InstanceId;
    f770:	4a0b      	ldr	r2, [pc, #44]	; (f7a0 <Det_ReportTransientFault+0x68>)
    f772:	9b03      	ldr	r3, [sp, #12]
    f774:	4413      	add	r3, r2
    f776:	f89d 2005 	ldrb.w	r2, [sp, #5]
    f77a:	701a      	strb	r2, [r3, #0]
    Det_TransientApiId[u32CoreId] = ApiId;
    f77c:	4a09      	ldr	r2, [pc, #36]	; (f7a4 <Det_ReportTransientFault+0x6c>)
    f77e:	9b03      	ldr	r3, [sp, #12]
    f780:	4413      	add	r3, r2
    f782:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f786:	701a      	strb	r2, [r3, #0]
    Det_TransientFaultId[u32CoreId] = FaultId;
    f788:	4a07      	ldr	r2, [pc, #28]	; (f7a8 <Det_ReportTransientFault+0x70>)
    f78a:	9b03      	ldr	r3, [sp, #12]
    f78c:	4413      	add	r3, r2
    f78e:	f89d 2003 	ldrb.w	r2, [sp, #3]
    f792:	701a      	strb	r2, [r3, #0]

    return E_OK;
    f794:	2300      	movs	r3, #0
}
    f796:	4618      	mov	r0, r3
    f798:	b004      	add	sp, #16
    f79a:	bd10      	pop	{r4, pc}
    f79c:	1fff91a4 	.word	0x1fff91a4
    f7a0:	1fff9198 	.word	0x1fff9198
    f7a4:	1fff919c 	.word	0x1fff919c
    f7a8:	1fff91a0 	.word	0x1fff91a0

0000f7ac <Det_Start>:
* @requirement DET010
*/
void Det_Start(void)
{
    /* Do nothing */
}
    f7ac:	bf00      	nop
    f7ae:	4770      	bx	lr

0000f7b0 <Fls_ACEraseRomEnd>:
    f7b0:	204e4143 	.word	0x204e4143
    f7b4:	64756162 	.word	0x64756162
    f7b8:	74617220 	.word	0x74617220
    f7bc:	65732065 	.word	0x65732065
    f7c0:	75732074 	.word	0x75732074
    f7c4:	73656363 	.word	0x73656363
    f7c8:	6c756673 	.word	0x6c756673
    f7cc:	202e796c 	.word	0x202e796c
    f7d0:	0000000a 	.word	0x0000000a
    f7d4:	6c696146 	.word	0x6c696146
    f7d8:	74206465 	.word	0x74206465
    f7dc:	6573206f 	.word	0x6573206f
    f7e0:	41432074 	.word	0x41432074
    f7e4:	6162204e 	.word	0x6162204e
    f7e8:	72206475 	.word	0x72206475
    f7ec:	2e657461 	.word	0x2e657461
    f7f0:	00000a20 	.word	0x00000a20
    f7f4:	204e4143 	.word	0x204e4143
    f7f8:	746e6f63 	.word	0x746e6f63
    f7fc:	6c6c6f72 	.word	0x6c6c6f72
    f800:	73207265 	.word	0x73207265
    f804:	65746174 	.word	0x65746174
    f808:	63616d20 	.word	0x63616d20
    f80c:	656e6968 	.word	0x656e6968
    f810:	74657320 	.word	0x74657320
    f814:	63757320 	.word	0x63757320
    f818:	73736563 	.word	0x73736563
    f81c:	6c6c7566 	.word	0x6c6c7566
    f820:	0a202e79 	.word	0x0a202e79
    f824:	00000000 	.word	0x00000000
    f828:	6c696146 	.word	0x6c696146
    f82c:	74206465 	.word	0x74206465
    f830:	6573206f 	.word	0x6573206f
    f834:	41432074 	.word	0x41432074
    f838:	6f63204e 	.word	0x6f63204e
    f83c:	6f72746e 	.word	0x6f72746e
    f840:	72656c6c 	.word	0x72656c6c
    f844:	61747320 	.word	0x61747320
    f848:	6d206574 	.word	0x6d206574
    f84c:	69686361 	.word	0x69686361
    f850:	202e656e 	.word	0x202e656e
    f854:	0000000a 	.word	0x0000000a
    f858:	74747542 	.word	0x74747542
    f85c:	31206e6f 	.word	0x31206e6f
    f860:	74636120 	.word	0x74636120
    f864:	3a6e6f69 	.word	0x3a6e6f69
    f868:	4e495320 	.word	0x4e495320
    f86c:	5f454c47 	.word	0x5f454c47
    f870:	43494c43 	.word	0x43494c43
    f874:	000a204b 	.word	0x000a204b
    f878:	74747542 	.word	0x74747542
    f87c:	31206e6f 	.word	0x31206e6f
    f880:	74636120 	.word	0x74636120
    f884:	3a6e6f69 	.word	0x3a6e6f69
    f888:	554f4420 	.word	0x554f4420
    f88c:	5f454c42 	.word	0x5f454c42
    f890:	43494c43 	.word	0x43494c43
    f894:	000a204b 	.word	0x000a204b
    f898:	74747542 	.word	0x74747542
    f89c:	31206e6f 	.word	0x31206e6f
    f8a0:	74636120 	.word	0x74636120
    f8a4:	3a6e6f69 	.word	0x3a6e6f69
    f8a8:	4c4f4820 	.word	0x4c4f4820
    f8ac:	4c435f44 	.word	0x4c435f44
    f8b0:	204b4349 	.word	0x204b4349
    f8b4:	0000000a 	.word	0x0000000a
    f8b8:	74747542 	.word	0x74747542
    f8bc:	31206e6f 	.word	0x31206e6f
    f8c0:	74636120 	.word	0x74636120
    f8c4:	3a6e6f69 	.word	0x3a6e6f69
    f8c8:	4c455220 	.word	0x4c455220
    f8cc:	45534145 	.word	0x45534145
    f8d0:	00000a20 	.word	0x00000a20
    f8d4:	74747542 	.word	0x74747542
    f8d8:	32206e6f 	.word	0x32206e6f
    f8dc:	74636120 	.word	0x74636120
    f8e0:	3a6e6f69 	.word	0x3a6e6f69
    f8e4:	4e495320 	.word	0x4e495320
    f8e8:	5f454c47 	.word	0x5f454c47
    f8ec:	43494c43 	.word	0x43494c43
    f8f0:	000a204b 	.word	0x000a204b
    f8f4:	74747542 	.word	0x74747542
    f8f8:	32206e6f 	.word	0x32206e6f
    f8fc:	74636120 	.word	0x74636120
    f900:	3a6e6f69 	.word	0x3a6e6f69
    f904:	554f4420 	.word	0x554f4420
    f908:	5f454c42 	.word	0x5f454c42
    f90c:	43494c43 	.word	0x43494c43
    f910:	000a204b 	.word	0x000a204b
    f914:	74747542 	.word	0x74747542
    f918:	32206e6f 	.word	0x32206e6f
    f91c:	74636120 	.word	0x74636120
    f920:	3a6e6f69 	.word	0x3a6e6f69
    f924:	4c4f4820 	.word	0x4c4f4820
    f928:	4c435f44 	.word	0x4c435f44
    f92c:	204b4349 	.word	0x204b4349
    f930:	0000000a 	.word	0x0000000a
    f934:	74747542 	.word	0x74747542
    f938:	32206e6f 	.word	0x32206e6f
    f93c:	74636120 	.word	0x74636120
    f940:	3a6e6f69 	.word	0x3a6e6f69
    f944:	4c455220 	.word	0x4c455220
    f948:	45534145 	.word	0x45534145
    f94c:	00000a20 	.word	0x00000a20
    f950:	74747542 	.word	0x74747542
    f954:	33206e6f 	.word	0x33206e6f
    f958:	74636120 	.word	0x74636120
    f95c:	3a6e6f69 	.word	0x3a6e6f69
    f960:	4e495320 	.word	0x4e495320
    f964:	5f454c47 	.word	0x5f454c47
    f968:	43494c43 	.word	0x43494c43
    f96c:	000a204b 	.word	0x000a204b
    f970:	74747542 	.word	0x74747542
    f974:	33206e6f 	.word	0x33206e6f
    f978:	74636120 	.word	0x74636120
    f97c:	3a6e6f69 	.word	0x3a6e6f69
    f980:	554f4420 	.word	0x554f4420
    f984:	5f454c42 	.word	0x5f454c42
    f988:	43494c43 	.word	0x43494c43
    f98c:	000a204b 	.word	0x000a204b
    f990:	74747542 	.word	0x74747542
    f994:	33206e6f 	.word	0x33206e6f
    f998:	74636120 	.word	0x74636120
    f99c:	3a6e6f69 	.word	0x3a6e6f69
    f9a0:	4c4f4820 	.word	0x4c4f4820
    f9a4:	4c435f44 	.word	0x4c435f44
    f9a8:	204b4349 	.word	0x204b4349
    f9ac:	0000000a 	.word	0x0000000a
    f9b0:	74747542 	.word	0x74747542
    f9b4:	33206e6f 	.word	0x33206e6f
    f9b8:	74636120 	.word	0x74636120
    f9bc:	3a6e6f69 	.word	0x3a6e6f69
    f9c0:	4c455220 	.word	0x4c455220
    f9c4:	45534145 	.word	0x45534145
    f9c8:	00000a20 	.word	0x00000a20
    f9cc:	204e4143 	.word	0x204e4143
    f9d0:	2067736d 	.word	0x2067736d
    f9d4:	6e617274 	.word	0x6e617274
    f9d8:	74696d73 	.word	0x74696d73
    f9dc:	20646574 	.word	0x20646574
    f9e0:	35207461 	.word	0x35207461
    f9e4:	626b3030 	.word	0x626b3030
    f9e8:	75207370 	.word	0x75207370
    f9ec:	676e6973 	.word	0x676e6973
    f9f0:	74754220 	.word	0x74754220
    f9f4:	3a6e6f74 	.word	0x3a6e6f74
    f9f8:	20642520 	.word	0x20642520
    f9fc:	0000000a 	.word	0x0000000a
    fa00:	6d726554 	.word	0x6d726554
    fa04:	6c616e69 	.word	0x6c616e69
    fa08:	00000000 	.word	0x00000000
    fa0c:	4c554e28 	.word	0x4c554e28
    fa10:	0000294c 	.word	0x0000294c

0000fa14 <Clock_Ip_au8DividerCallbackIndex>:
    fa14:	0e0d0c00 06030201 0a070409 000b0805     ................

0000fa24 <Clock_Ip_au8DividerTriggerCallbackIndex>:
	...

0000fa34 <Clock_Ip_au8XoscCallbackIndex>:
    fa34:	00000100 00000000 00000000 00000000     ................

0000fa44 <Clock_Ip_au8IrcoscCallbackIndex>:
    fa44:	03020100 00000004 00000000 00000000     ................

0000fa54 <Clock_Ip_au8GateCallbackIndex>:
    fa54:	06010200 01040301 00000500 00000000     ................

0000fa64 <Clock_Ip_au8FractionalDividerCallbackIndex>:
	...

0000fa74 <Clock_Ip_au8PllCallbackIndex>:
    fa74:	00000100 00000000 00000000 00000000     ................

0000fa84 <Clock_Ip_au8SelectorCallbackIndex>:
    fa84:	0a090800 03020109 07060504 00000000     ................

0000fa94 <Clock_Ip_au8PcfsCallbackIndex>:
	...

0000faa4 <Clock_Ip_au8CmuCallbackIndex>:
	...

0000fab4 <Clock_Ip_au8ClockFeatures>:
	...
    fac4:	01000000 00000000 00000000 00000002     ................
    fad4:	00000000 00000300 00000000 00040000     ................
    fae4:	00000000 05000000 00000000 00000000     ................
    faf4:	00000006 00000000 00000100 00000000     ................
    fb04:	00010000 00000000 04000000 00000000     ................
    fb14:	00000000 00000005 00000001 00000401     ................
    fb24:	00000200 00050100 00030000 04020000     ................
    fb34:	04000000 02000000 00000005 00000005     ................
    fb44:	00000403 00000600 00050300 00070000     ................
    fb54:	05000000 00000000 00000000 00000006     ................
	...
    fb94:	00050000 00000000 06000000 00000100     ................
    fba4:	00000000 00030007 00000000 00000000     ................
    fbb4:	00000000 00060000 00000000 07000000     ................
    fbc4:	00000100 00000000 00030008 00000000     ................
	...
    fbdc:	00090000 00000000 0a000000 00000100     ................
    fbec:	00000000 0003000b 00000000 00000000     ................
    fbfc:	00000000 000c0000 00000000 0d000000     ................
    fc0c:	00000100 00000000 0003000e 00000000     ................
    fc1c:	00000800 00000000 00090000 00000000     ................
    fc2c:	0a000000 00000000 00000000 0000000b     ................
    fc3c:	00000000 00000b01 00000000 000b0200     ................
    fc4c:	00000000 0b030000 00000000 00000000     ................
	...
    fc64:	00000400 003b003b 00040000 27002700     ....;.;......'.'
    fc74:	01000000 00000000 00000000 00000007     ................
    fc84:	00007300 00000700 00320000 00090000     .s........2.....
    fc94:	02000000 07000000 00000000 00000021     ............!...
    fca4:	00000009 00000400 00000900 00030000     ................
    fcb4:	00070000 61000000 07000000 00000000     .......a........
    fcc4:	00000024 00000007 00002500 00000700     $........%......
    fcd4:	002b0000 00040000 5a005a00 07000000     ..+......Z.Z....
    fce4:	00000000 00000020 38000004 00003800     .... ......8.8..
    fcf4:	00000400 00390039 00040000 3a003a00     ....9.9......:.:
    fd04:	04000000 00260000 00000026 66000004     ......&.&......f
    fd14:	00006600 00000400 00370037 00040000     .f......7.7.....
    fd24:	2c002c00 04000000 002d0000 0000002d     .,.,......-.-...
    fd34:	2e000004 00002e00 00000200 00404040     ............@@@.
    fd44:	00040000 6a006a00 04000000 006b0000     .....j.j......k.
    fd54:	0000006b 6c000004 00006c00 00000900     k......l.l......
    fd64:	00010000 00090000 00000000 07000000     ................
    fd74:	00000000 00000036 00000007 00003100     ....6........1..
    fd84:	00000700 00490000 00070000 4a000000     ......I........J
    fd94:	07000000 00000000 0000004b 00000007     ........K.......
    fda4:	00004c00 00000700 004d0000 00070000     .L........M.....
    fdb4:	3d000000 03000000 00000000 00000000     ...=............

0000fdc4 <Clock_Ip_au16SelectorEntryHardwareValue>:
    fdc4:	01010a03 01010001 04040002 02000603     ................
    fdd4:	00010810 02020100 00000000 00000007     ................
    fde4:	00000009 00000000 00000c0e 00000000     ................
	...

0000fe1c <Clock_Ip_au8SelectorEntryScsHardwareValue>:
    fe1c:	00020000 00000300 00000601 00000000     ................
	...

0000fe4c <Clock_Ip_au8SelectorEntryPcsHardwareValue>:
    fe4c:	00000700 00000000 02020000 01010303     ................
    fe5c:	03020606 00000000 00000000 00000000     ................
	...

0000fe7c <Clock_Ip_au8SelectorEntrySIMHardwareValue>:
    fe7c:	00000001 00000000 02020000 01010303     ................
    fe8c:	03020606 00000000 00000000 00000000     ................
	...

0000feac <Clock_Ip_au8DividerValueHardwareValue>:
    feac:	00020100 00000003 00000004 00000000     ................
    febc:	00000005 00000000 00000000 00000000     ................
    fecc:	00000006 00000000 00000000 00000000     ................
	...
    feec:	00000007                                ....

0000fef0 <Clock_Ip_apxScgPeriphAsyncDivs>:
    fef0:	40064204 40064304 40064104 40064604     .B.@.C.@.A.@.F.@

0000ff00 <Clock_Ip_aeSourceTypeClockName>:
    ff00:	00000000 00000001 00000001 00000001     ................
    ff10:	00000001 00000001 00000001 00000001     ................
    ff20:	00000002 00000003 00000001 00000001     ................
    ff30:	00000001 00000001 00000002 00000002     ................
    ff40:	00000003 00000003 00000001 00000001     ................
    ff50:	00000004 00000004 00000004 00000004     ................
	...

0000ffbc <Clock_Ip_aeHwPllName>:
    ffbc:	00000009                                ....

0000ffc0 <Clock_Ip_aeHwDfsName>:
    ffc0:	00000057                                W...

0000ffc4 <Clock_Ip_axDividerCallbacks>:
    ffc4:	0000329d 000032a7 000032c1 000032db     .2...2...2...2..
    ffd4:	000032f5 0000330f 00003329 00003343     .2...3..)3..C3..
    ffe4:	0000335d 00003377 00003391 000033ab     ]3..w3...3...3..
    fff4:	000033c5 000033df 000033f9              .3...3...3..

00010000 <Clock_Ip_axDividerTriggerCallbacks>:
   10000:	0000376d 0000376d                       m7..m7..

00010008 <Clock_Ip_axExtOscCallbacks>:
   10008:	00003779 00003779 00003779 00003783     y7..y7..y7...7..
   10018:	00003779 0000378d 000037a7 000037c1     y7...7...7...7..
   10028:	00003845 00003859                       E8..Y8..

00010030 <Clock_Ip_axFracDivCallbacks>:
   10030:	00003a19 00003a19 00003a23              .:...:..#:..

0001003c <Clock_Ip_axGateCallbacks>:
   1003c:	00003a3d 00003a47 00003b47 00003b61     =:..G:..G;..a;..
   1004c:	00003af7 00003b11 00003aa7 00003ac1     .:...;...:...:..
   1005c:	00003a57 00003a71 00003b97 00003bb1     W:..q:...;...;..
   1006c:	00003be7 00003c01                       .;...<..

00010074 <Clock_Ip_axIntOscCallbacks>:
   10074:	00003dad 00003dad 00003db7 00003dc1     .=...=...=...=..
   10084:	00003ddb 00003df5 00003e09 00003e23     .=...=...>..#>..
   10094:	00003e3d 00003e51 00003e6b 00003e85     =>..Q>..k>...>..
   100a4:	00003f2d 00003f47 00003f61              -?..G?..a?..

000100b0 <Clock_Ip_axCmuCallbacks>:
   100b0:	000044fd 00004507 00004513 000044fd     .D...E...E...D..

000100c0 <Clock_Ip_axPllCallbacks>:
   100c0:	0000451d 0000451d 00004527 0000451d     .E...E..'E...E..
   100d0:	00004533 0000453d 00004557 00004571     3E..=E..WE..qE..
   100e0:	00004615 00004601                       .F...F..

000100e8 <Clock_Ip_axPcfsCallbacks>:
   100e8:	00004771                                qG..

000100ec <Clock_Ip_axSelectorCallbacks>:
   100ec:	0000477d 0000477d 00004787 000047a1     }G..}G...G...G..
   100fc:	0000477d 000047bb 000047d5 000047ef     }G...G...G...G..
   1010c:	00004809 00004823 0000483d 00004857     .H..#H..=H..WH..
   1011c:	00004871 0000488b 000048a5 000048bf     qH...H...H...H..
   1012c:	000048d9 000048f3 0000490d 00004927     .H...H...I..'I..
   1013c:	00004941 0000495b                       AI..[I..

00010144 <ClockSource>:
   10144:	00000000 00000008 00000002 00000005     ................
	...
   1015c:	00000009                                ....

00010160 <ResetReasonArray>:
   10160:	00000000 00000001 00000002 00000003     ................
   10170:	00000004 00000005 00000006 00000007     ................
   10180:	00000008 00000009 0000000a 0000000b     ................
   10190:	0000000c 0000000d 0000000e              ............

0001019c <Port_au32PortCiPortBaseAddr>:
   1019c:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
   101ac:	4004d000                                ...@

000101b0 <Port_au32PortCiGpioBaseAddr>:
   101b0:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
   101c0:	400ff100                                ...@

000101c4 <Flexcan_Ip_apxBase>:
   101c4:	40024000 40025000 4002b000              .@.@.P.@...@

000101d0 <payload_code.3>:
   101d0:	03020100 07060504 09090908 0a0a0a09     ................
   101e0:	0b0b0b0a 0c0c0c0b 0d0d0d0c 0d0d0d0d     ................
   101f0:	0e0e0e0d 0e0e0e0e 0e0e0e0e 0e0e0e0e     ................
   10200:	0f0f0f0e 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
   10210:	0000000f                                ....

00010214 <flexcanBase.2>:
   10214:	40024000 40025000 4002b000              .@.@.P.@...@

00010220 <maxMbNum.1>:
   10220:	00000020 00000010 00000010               ...........

0001022c <flexcanBase.0>:
   1022c:	40024000                                .@.@

00010230 <ButtonsCfg>:
   10230:	0000008c 0000012c 00000071 0000012c     ....,...q...,...
   10240:	0000000c 0000012c                       ....,...

00010248 <LedsCfg>:
   10248:	00000060 0000006f 00000070 00010048     `...o...p...H...
   10258:	00010049 0001004a 0001004b 0001004c     I...J...K...L...
   10268:	0001004d 0001004e 0001004f              M...N...O...

00010274 <Can_43_FLEXCANIpwHwChannelConfig0>:
   10274:	0001073c                                <...

00010278 <Can_au32HwBufferAddr_Ctrl0>:
   10278:	4002b080 4002b090 4002b0a0              ...@...@...@

00010284 <Can_aCtrlOffsetToCtrlIDMap>:
   10284:	0000ffff                                ....

00010288 <Can_aHwObjIDToCtrlIDMap>:
   10288:	00000000                                ....

0001028c <Can_aHwObjectConfig>:
   1028c:	00000000 00000001 00000000 ff030000     ................
   1029c:	00000008 00000000 00000003 00000000     ................
   102ac:	00010278                                x...

000102b0 <Can_aBaudrateConfig_Ctrl0>:
   102b0:	04030000 001d0005 00000000 00000000     ................
	...
   102c8:	00050403 0000000b 00000000 00000000     ................
   102d8:	00000000 04030000 00050005 00000000     ................
	...

000102f4 <Can_apHwObject_Ctrl0>:
   102f4:	0001028c                                ....

000102f8 <Can_aControllerConfig>:
   102f8:	00020000 4002b000 00000001 ffffffff     .......@........
	...
   10314:	00030001 000102b0 00010274 00000001     ........t.......
   10324:	000102f4                                ....

00010328 <Can_apController>:
   10328:	000102f8                                ....

0001032c <Can_43_FLEXCAN_Config>:
	...
   10334:	00010284 00010288 0001028c 00010328     ............(...

00010344 <Mcu_aClockConfigPB>:
	...
   1034c:	1c000101 04000010 01000029 00000005     ........).......
   1035c:	00000001 00000000 00000057 00000000     ........W.......
   1036c:	00000000 00000008 007a1200 00000001     ..........z.....
   1037c:	00000001 00000000 00000057 00000000     ........W.......
   1038c:	00000057 00000000 00000000 00000000     W...............
	...
   103ac:	00000019 00000005 0000001a 00000002     ................
   103bc:	0000001b 00000005 0000002a 00000005     ........*.......
   103cc:	00000028 0000000e 00000029 00000001     (.......).......
   103dc:	00000056 0000001c 00000032 0000002a     V.......2...*...
   103ec:	0000002b 00000014 0000002c 00000014     +.......,.......
   103fc:	0000002d 00000014 0000002e 00000014     -...............
   1040c:	0000003f 00000000 00000040 00000000     ?.......@.......
   1041c:	00000041 00000000 00000042 00000000     A.......B.......
   1042c:	00000031 00000000 00000045 00000000     1.......E.......
   1043c:	00000046 00000000 00000047 00000000     F.......G.......
   1044c:	00000044 00000000 00000030 00000000     D.......0.......
   1045c:	0000003d 00000000 00000043 00000000     =.......C.......
   1046c:	00000049 00000000 0000004a 00000000     I.......J.......
   1047c:	0000004b 00000000 00000048 00000000     K.......H.......
   1048c:	0000000c 00000001 00000000 0000000d     ................
   1049c:	00000002 00000000 0000000e 00000001     ................
   104ac:	00000000 0000000f 00000001 00000000     ................
   104bc:	0000001d 00000001 00000000 0000001e     ................
   104cc:	00000008 00000000 0000001f 00000001     ................
   104dc:	00000000 00000021 00000001 00000000     ....!...........
   104ec:	00000022 00000002 00000000 00000023     "...........#...
   104fc:	00000001 00000000 00000025 00000003     ........%.......
   1050c:	00000000 00000026 00000004 00000000     ....&...........
   1051c:	00000027 00000002 00000000 00000032     '...........2...
   1052c:	00000001 00000000 00000048 00000001     ........H.......
   1053c:	00000001 00000056 00000001 00000001     ....V...........
   1054c:	00000057 00000000 00000000 00000057     W...........W...
	...
   10564:	00000057 00000000 00000000 00000057     W...........W...
	...
   1057c:	00000057 00000000 00000057 00000057     W.......W...W...
	...
   10598:	00000014 00007d00 00000015 00007d00     .....}.......}..
   105a8:	00000016 00007d00 00000017 00008000     .....}..........
   105b8:	00000012 00000001 00000013 00000001     ................
   105c8:	00000030 00000000 00000031 00000000     0.......1.......
   105d8:	00000032 00000000 00000033 00000000     2.......3.......
   105e8:	00000034 00000000 00000035 00000001     4.......5.......
   105f8:	00000036 00000000 00000037 00000001     6.......7.......
   10608:	00000038 00000001 00000039 00000000     8.......9.......
   10618:	0000003a 00000000 0000003b 00000000     :.......;.......
   10628:	0000003c 00000001 0000003d 00000000     <.......=.......
   10638:	0000003e 00000000 0000003f 00000000     >.......?.......
   10648:	00000040 00000000 00000041 00000000     @.......A.......
   10658:	00000042 00000000 00000043 00000000     B.......C.......
   10668:	00000044 00000000 00000045 00000000     D.......E.......
   10678:	00000046 00000000 00000047 00000000     F.......G.......
   10688:	00000048 00000000 00000049 00000000     H.......I.......
   10698:	0000004a 00000000 0000004b 00000000     J.......K.......
   106a8:	0000004c 00000001 0000004d 00000001     L.......M.......
   106b8:	0000004e 00000000 0000004f 00000000     N.......O.......
   106c8:	00000050 00000001 00000051 00000001     P.......Q.......
   106d8:	00000052 00000001 00000053 00000001     R.......S.......
   106e8:	00000054 00000001 00000055 00000000     T.......U.......
   106f8:	00000056 00000001 00000057 00000000     V.......W.......
   10708:	00000000 00000057 00000000 00000057     ....W.......W...
	...

0001073c <Flexcan_aCtrlConfigPB>:
   1073c:	00000003 00000000 00000000 00000000     ................
   1074c:	00000060 00000000 00000100 00000003     `...............
   1075c:	00000004 00000005 0000000b 00000000     ................
   1076c:	00000004 00000004 00000005 0000000b     ................
	...
   10784:	00008e55 00008f01                       U.......

0001078c <aIrqConfiguration>:
   1078c:	0000005c 00000f01 0000d381 0000005d     \...........]...
   1079c:	00000f01 0000d391 0000005f 00000f01     ........_.......
   107ac:	0000d3a1                                ....

000107b0 <intCtrlConfig>:
   107b0:	00000003 0001078c                       ........

000107b8 <Mcu_Config>:
   107b8:	0000005a 00000000 00000001 00000001     Z...............
   107c8:	00010cbc 00010344 00010cc8              ....D.......

000107d4 <OsIf_xPredefinedConfig>:
   107d4:	00000000 02dc6c00                       .....l..

000107dc <OsIf_apxPredefinedConfig>:
   107dc:	000107d4                                ....

000107e0 <Platform_uConfiguration>:
   107e0:	000107e8                                ....

000107e4 <Platform_Config>:
   107e4:	000107e0                                ....

000107e8 <ipwConfig>:
   107e8:	000107b0 00000000                       ........

000107f0 <g_pin_mux_InitConfigArr>:
   107f0:	4004c000 400ff0c0 00000010 00000002     ...@...@........
   10800:	00000001 00000002 00000000 00000000     ................
   10810:	00000000 00000100 4004c000 400ff0c0     ...........@...@
   10820:	0000000f 00000002 00000001 00000002     ................
	...
   1083c:	00000100 4004c000 400ff0c0 00000000     .......@...@....
   1084c:	00000002 00000001 00000002 00000000     ................
	...
   10864:	00000100 4004c000 400ff0c0 00000011     .......@...@....
   10874:	00000002 00000001 00000001 00000000     ................
	...
   10890:	4004d000 400ff100 0000000c 00000002     ...@...@........
   108a0:	00000001 00000001 00000000 00000000     ................
	...
   108b8:	40049000 400ff000 0000000c 00000002     ...@...@........
   108c8:	00000001 00000001 00000000 00000000     ................
	...
   108e0:	4004b000 400ff080 00000008 00000002     ...@...@........
   108f0:	00000001 00000002 00000000 00000000     ................
	...
   10908:	4004b000 400ff080 00000009 00000002     ...@...@........
   10918:	00000001 00000002 00000000 00000000     ................
	...
   10930:	4004b000 400ff080 0000000a 00000002     ...@...@........
   10940:	00000001 00000002 00000000 00000000     ................
	...
   10958:	4004b000 400ff080 0000000b 00000002     ...@...@........
   10968:	00000001 00000002 00000000 00000000     ................
	...
   10980:	4004b000 400ff080 0000000c 00000002     ...@...@........
   10990:	00000001 00000002 00000000 00000000     ................
	...
   109a8:	4004b000 400ff080 0000000d 00000002     ...@...@........
   109b8:	00000001 00000002 00000000 00000000     ................
	...
   109d0:	4004b000 400ff080 0000000e 00000002     ...@...@........
   109e0:	00000001 00000002 00000000 00000000     ................
	...
   109f8:	4004b000 400ff080 0000000f 00000002     ...@...@........
   10a08:	00000001 00000002 00000000 00000000     ................
	...
   10a20:	4004b000 00000000 00000011 00000002     ...@............
   10a30:	00000003 00000001 00000000 00000000     ................
	...
   10a48:	4004b000 00000000 00000010 00000002     ...@............
   10a58:	00000003 00000001 00000000 00000000     ................
	...

00010a70 <au8Port_PartitionList>:
   10a70:	00000001                                ....

00010a74 <au32Port_PinToPartitionMap>:
   10a74:	00000001 00000001 00000001 00000001     ................
   10a84:	00000001 00000001 00000001 00000001     ................
   10a94:	00000001 00000001 00000001 00000001     ................
   10aa4:	00000001 00000001 00000001 00000001     ................

00010ab4 <Port_au16NoUnUsedPadsArrayDefault>:
   10ab4:	00010000 00030002 00070006 00090008     ................
   10ac4:	000d000b 000f000e 00110010 00210020     ............ .!.
   10ad4:	00230022 00250024 00270026 00290028     ".#.$.%.&.'.(.).
   10ae4:	002b002a 002d002c 002f002e 00310030     *.+.,.-.../.0.1.
   10af4:	00410040 00430042 00470046 00620061     @.A.B.C.F.G.a.b.
   10b04:	00640063 00660065 00680067 006a0069     c.d.e.f.g.h.i.j.
   10b14:	006c006b 006e006d 00810080 00830082     k.l.m.n.........
   10b24:	00850084 00870086 00890088 008b008a     ................
   10b34:	008e008d 0090008f                       ........

00010b3c <Port_UnUsedPin>:
   10b3c:	00000100 00000001 00000000              ............

00010b48 <Port_aPinConfigDefault>:
   10b48:	00000070 00000100 00000001 00000002     p...............
   10b58:	00010001 00000051 00000300 00000000     ....Q...........
   10b68:	00000001 00010000 00000050 00000300     ........P.......
   10b78:	00000000 00000001 00010000 0000006f     ............o...
   10b88:	00000100 00000001 00000002 00010001     ................
   10b98:	00000060 00000100 00000001 00000002     `...............
   10ba8:	00010001 00000071 00000100 00000000     ....q...........
   10bb8:	00000001 00010001 0000008c 00000100     ................
   10bc8:	00000000 00000001 00010001 0000000c     ................
   10bd8:	00000100 00000000 00000001 00010001     ................
   10be8:	00000048 00000100 00000000 00000002     H...............
   10bf8:	00010001 00000049 00000100 00000000     ....I...........
   10c08:	00000002 00010001 0000004a 00000100     ........J.......
   10c18:	00000000 00000002 00010001 0000004b     ............K...
   10c28:	00000100 00000000 00000002 00010001     ................
   10c38:	0000004c 00000100 00000000 00000002     L...............
   10c48:	00010001 0000004d 00000100 00000000     ....M...........
   10c58:	00000002 00010001 0000004e 00000100     ........N.......
   10c68:	00000000 00000002 00010001 0000004f     ............O...
   10c78:	00000100 00000000 00000002 00010001     ................

00010c88 <Port_Config>:
   10c88:	00440010 00010ab4 00010b3c 00010b48     ..D.....<...H...
	...
   10ca0:	00010a74 00010a70 000107f0              t...p.......

00010cac <Power_Ip_RCM_ConfigPB>:
	...

00010cb4 <Power_Ip_PMC_ConfigPB>:
   10cb4:	00000000                                ....

00010cb8 <Power_Ip_SMC_ConfigPB>:
   10cb8:	00000000                                ....

00010cbc <Power_Ip_aModeConfigPB>:
	...

00010cc8 <Power_Ip_HwIPsConfigPB>:
   10cc8:	00010cac 00010cb4 00010cb8              ............

00010cd4 <_aInitStr.0>:
   10cd4:	00000000 54540000 45522052 53454747     ......TTR REGGES
   10ce4:	00000000                                ....

00010ce8 <_aV2C.0>:
   10ce8:	33323130 37363534 42413938 46454443     0123456789ABCDEF

00010cf8 <__INIT_TABLE>:
   10cf8:	00000002 	.word	0x00000002
   10cfc:	1fff8b10 	.word	0x1fff8b10
   10d00:	00010d20 	.word	0x00010d20
   10d04:	00010d50 	.word	0x00010d50
   10d08:	1fff8800 	.word	0x1fff8800
   10d0c:	00000000 	.word	0x00000000
   10d10:	00000310 	.word	0x00000310

00010d14 <__ZERO_TABLE>:
   10d14:	00000001 	.word	0x00000001
   10d18:	1fff8b40 	.word	0x1fff8b40
   10d1c:	1fff96a0 	.word	0x1fff96a0
