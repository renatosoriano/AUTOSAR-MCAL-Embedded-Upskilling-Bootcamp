
Marking local functions:


Marking externally visible functions: Can_43_FLEXCAN_Ipw_MainFunction_Mode/23 Can_43_FLEXCAN_Ipw_MainFunction_BusOff/22 Can_43_FLEXCAN_Ipw_MainFunction_Read/21 Can_43_FLEXCAN_Ipw_MainFunction_Write/20 Can_43_FLEXCAN_Ipw_Write/18 Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter/17 Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter/16 Can_43_FLEXCAN_Ipw_GetControllerErrorState/15 Can_43_FLEXCAN_Ipw_EnableControllerInterrupts/14 Can_43_FLEXCAN_Ipw_DisableControllerInterrupts/13 Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 Can_43_FLEXCAN_Ipw_DeInit/9 Can_43_FLEXCAN_Ipw_Init/8


Marking externally visible variables:


Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:
Symbol table:

CanIf_ControllerModeIndication/56 (CanIf_ControllerModeIndication) @0dc51620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Mode/23 Can_43_FLEXCAN_Ipw_MainFunction_Mode/23 
  Calls: 
FlexCAN_Ip_GetStartMode_Privileged/55 (FlexCAN_Ip_GetStartMode_Privileged) @0dc51540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Mode/23 Can_43_FLEXCAN_Ipw_MainFunction_Mode/23 
  Calls: 
FlexCAN_Ip_MainFunctionBusOff_Privileged/54 (FlexCAN_Ip_MainFunctionBusOff_Privileged) @0dc51380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_BusOff/22 
  Calls: 
FlexCAN_Ip_Receive/53 (FlexCAN_Ip_Receive) @0dc511c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Read/21 
  Calls: 
FlexCAN_Ip_GetStopMode_Privileged/52 (FlexCAN_Ip_GetStopMode_Privileged) @0dc510e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Read/21 
  Calls: 
CanIf_TxConfirmation/51 (CanIf_TxConfirmation) @0dc44ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Write/20 
  Calls: 
FlexCAN_Ip_MainFunctionWrite/50 (FlexCAN_Ip_MainFunctionWrite) @0dc44e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Write/20 
  Calls: 
FlexCAN_Ip_ConfigRxMb/49 (FlexCAN_Ip_ConfigRxMb) @0dc44c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_InitRx/19 
  Calls: 
FlexCAN_Ip_SetRxMaskType_Privileged/48 (FlexCAN_Ip_SetRxMaskType_Privileged) @0dc44b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_InitRx/19 
  Calls: 
FlexCAN_Ip_Send/47 (FlexCAN_Ip_Send) @0dc449a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_Write/18 
  Calls: 
FlexCAN_Ip_GetControllerRxErrorCounter/46 (FlexCAN_Ip_GetControllerRxErrorCounter) @0dc447e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter/17 
  Calls: 
FlexCAN_Ip_GetControllerTxErrorCounter/45 (FlexCAN_Ip_GetControllerTxErrorCounter) @0dc44620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter/16 
  Calls: 
FlexCAN_Ip_GetErrorStatus/44 (FlexCAN_Ip_GetErrorStatus) @0dc44460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_GetControllerErrorState/15 
  Calls: 
FlexCAN_Ip_AbortTransfer/43 (FlexCAN_Ip_AbortTransfer) @0dc440e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 
  Calls: 
FlexCAN_Ip_EnterFreezeMode_Privileged/42 (FlexCAN_Ip_EnterFreezeMode_Privileged) @0dc44000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 
  Calls: 
FlexCAN_Ip_SetStartMode_Privileged/41 (FlexCAN_Ip_SetStartMode_Privileged) @0dc36d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_SetControlerErrorInit/10 
  Calls: 
FlexCAN_Ip_EnableInterrupts_Privileged/40 (FlexCAN_Ip_EnableInterrupts_Privileged) @0dc36c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_EnableControllerInterrupts/14 Can_43_FLEXCAN_Ipw_SetControlerErrorInit/10 
  Calls: 
FlexCAN_Ip_Deinit_Privileged/39 (FlexCAN_Ip_Deinit_Privileged) @0dc36a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_DeInit/9 
  Calls: 
FlexCAN_Ip_SetStopMode_Privileged/38 (FlexCAN_Ip_SetStopMode_Privileged) @0dc368c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_Init/8 Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 
  Calls: 
FlexCAN_Ip_DisableInterrupts_Privileged/37 (FlexCAN_Ip_DisableInterrupts_Privileged) @0dc367e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 Can_43_FLEXCAN_Ipw_Init/8 Can_43_FLEXCAN_Ipw_DisableControllerInterrupts/13 Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 
  Calls: 
FlexCAN_Ip_Init_Privileged/36 (FlexCAN_Ip_Init_Privileged) @0dc36700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 Can_43_FLEXCAN_Ipw_Init/8 
  Calls: 
FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/35 (FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged) @0dc36540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_Init/8 Can_Ipw_InitBaudrate/7 
  Calls: 
FlexCAN_Ip_SetTDCOffset_Privileged/34 (FlexCAN_Ip_SetTDCOffset_Privileged) @0dc36460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_Init/8 Can_Ipw_InitBaudrate/7 
  Calls: 
FlexCAN_Ip_GetTransferStatus/33 (FlexCAN_Ip_GetTransferStatus) @0dc362a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Read/21 Can_43_FLEXCAN_Ipw_MainFunction_Write/20 Can_43_FLEXCAN_Ipw_Write/18 Can_Ipw_ProcessLegacyFifoPolling/6 
  Calls: 
FlexCAN_Ip_MainFunctionRead/32 (FlexCAN_Ip_MainFunctionRead) @0dc361c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Read/21 Can_Ipw_ProcessLegacyFifoPolling/6 
  Calls: 
FlexCAN_Ip_RxFifo/31 (FlexCAN_Ip_RxFifo) @0dc360e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_ProcessLegacyFifoPolling/6 
  Calls: 
FlexCAN_Ip_ClearBuffStatusFlag/30 (FlexCAN_Ip_ClearBuffStatusFlag) @0dc36000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_ProcessLegacyFifoPolling/6 Can_Ipw_ProcessLegacyFifoPolling/6 
  Calls: 
FlexCAN_Ip_GetBuffStatusFlag/29 (FlexCAN_Ip_GetBuffStatusFlag) @0dc10b60
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_ProcessLegacyFifoPolling/6 Can_Ipw_ProcessLegacyFifoPolling/6 Can_Ipw_ProcessLegacyFifoPolling/6 Can_Ipw_ProcessLegacyFifoPolling/6 
  Calls: 
FlexCAN_Ip_ConfigRxFifo_Privileged/28 (FlexCAN_Ip_ConfigRxFifo_Privileged) @0dc100e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_InitLegacyFifoFilter/5 
  Calls: 
FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/27 (FlexCAN_Ip_SetRxFifoGlobalMask_Privileged) @0dc10ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_InitLegacyFifoFilter/5 
  Calls: 
FlexCAN_Ip_SetRxIndividualMask_Privileged/26 (FlexCAN_Ip_SetRxIndividualMask_Privileged) @0dc10e00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_InitRx/19 Can_Ipw_InitLegacyFifoFilter/5 
  Calls: 
CanIf_RxIndication/25 (CanIf_RxIndication) @0dc10a80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_ParseData/4 
  Calls: 
Det_ReportRuntimeError/24 (Det_ReportRuntimeError) @0dc109a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: Can_Ipw_ProcessLegacyFifoPolling/6 Can_Ipw_ParseData/4 
  Calls: 
Can_43_FLEXCAN_Ipw_MainFunction_Mode/23 (Can_43_FLEXCAN_Ipw_MainFunction_Mode) @0dc10540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: CanIf_ControllerModeIndication/56 FlexCAN_Ip_GetStartMode_Privileged/55 CanIf_ControllerModeIndication/56 FlexCAN_Ip_GetStartMode_Privileged/55 
Can_43_FLEXCAN_Ipw_MainFunction_BusOff/22 (Can_43_FLEXCAN_Ipw_MainFunction_BusOff) @0dc102a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_MainFunctionBusOff_Privileged/54 
Can_43_FLEXCAN_Ipw_MainFunction_Read/21 (Can_43_FLEXCAN_Ipw_MainFunction_Read) @0dc10000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_Ipw_ProcessLegacyFifoPolling/6 Can_Ipw_ParseData/4 FlexCAN_Ip_GetTransferStatus/33 FlexCAN_Ip_MainFunctionRead/32 FlexCAN_Ip_Receive/53 FlexCAN_Ip_GetStopMode_Privileged/52 
Can_43_FLEXCAN_Ipw_MainFunction_Write/20 (Can_43_FLEXCAN_Ipw_MainFunction_Write) @0dc03b60
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_xStatus0/0 (addr) Can_Ipw_au16TxPduId/2 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: CanIf_TxConfirmation/51 FlexCAN_Ip_GetTransferStatus/33 FlexCAN_Ip_MainFunctionWrite/50 
Can_Ipw_InitRx/19 (Can_Ipw_InitRx) @0dc03620
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 Can_43_FLEXCAN_Ipw_Init/8 
  Calls: Can_Ipw_InitLegacyFifoFilter/5 FlexCAN_Ip_SetRxIndividualMask_Privileged/26 FlexCAN_Ip_ConfigRxMb/49 FlexCAN_Ip_SetRxMaskType_Privileged/48 
Can_43_FLEXCAN_Ipw_Write/18 (Can_43_FLEXCAN_Ipw_Write) @0dc03d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_au16TxPduId/2 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_Send/47 FlexCAN_Ip_GetTransferStatus/33 
Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter/17 (Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter) @0dc03a80
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_GetControllerRxErrorCounter/46 
Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter/16 (Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter) @0dc037e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_GetControllerTxErrorCounter/45 
Can_43_FLEXCAN_Ipw_GetControllerErrorState/15 (Can_43_FLEXCAN_Ipw_GetControllerErrorState) @0dc03540
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_GetErrorStatus/44 
Can_43_FLEXCAN_Ipw_EnableControllerInterrupts/14 (Can_43_FLEXCAN_Ipw_EnableControllerInterrupts) @0dc032a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_abIsInterruptEnabled/3 (read) Can_Ipw_abIsInterruptEnabled/3 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_EnableInterrupts_Privileged/40 
Can_43_FLEXCAN_Ipw_DisableControllerInterrupts/13 (Can_43_FLEXCAN_Ipw_DisableControllerInterrupts) @0dc03000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_abIsInterruptEnabled/3 (read) Can_Ipw_abIsInterruptEnabled/3 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_DisableInterrupts_Privileged/37 
Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 (Can_43_FLEXCAN_Ipw_SetControllerToStopMode) @0db749a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_abIsInterruptEnabled/3 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_SetStopMode_Privileged/38 FlexCAN_Ip_AbortTransfer/43 FlexCAN_Ip_AbortTransfer/43 FlexCAN_Ip_DisableInterrupts_Privileged/37 FlexCAN_Ip_EnterFreezeMode_Privileged/42 
Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 (Can_43_FLEXCAN_Ipw_SetControllerToStartMode) @0db74000
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_xStatus0/0 (addr) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: Can_43_FLEXCAN_Ipw_SetControlerErrorInit/10 Can_Ipw_InitRx/19 Can_Ipw_InitBaudrate/7 FlexCAN_Ip_DisableInterrupts_Privileged/37 FlexCAN_Ip_Init_Privileged/36 
Can_43_FLEXCAN_Ipw_SetControlerErrorInit/10 (Can_43_FLEXCAN_Ipw_SetControlerErrorInit) @0db74b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Can_Ipw_abIsInterruptEnabled/3 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 
  Calls: FlexCAN_Ip_SetStartMode_Privileged/41 FlexCAN_Ip_EnableInterrupts_Privileged/40 
Can_43_FLEXCAN_Ipw_DeInit/9 (Can_43_FLEXCAN_Ipw_DeInit) @0db748c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_Deinit_Privileged/39 
Can_43_FLEXCAN_Ipw_Init/8 (Can_43_FLEXCAN_Ipw_Init) @0db74620
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Can_Ipw_xStatus0/0 (addr) Can_Ipw_abIsInterruptEnabled/3 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Ip_SetStopMode_Privileged/38 Can_Ipw_InitRx/19 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/35 FlexCAN_Ip_SetTDCOffset_Privileged/34 FlexCAN_Ip_DisableInterrupts_Privileged/37 FlexCAN_Ip_Init_Privileged/36 
Can_Ipw_InitBaudrate/7 (Can_Ipw_InitBaudrate) @0d9e6ee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 
  Calls: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/35 FlexCAN_Ip_SetTDCOffset_Privileged/34 
Can_Ipw_ProcessLegacyFifoPolling/6 (Can_Ipw_ProcessLegacyFifoPolling) @0d9e6e00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Read/21 
  Calls: FlexCAN_Ip_GetBuffStatusFlag/29 Can_Ipw_ParseData/4 FlexCAN_Ip_GetTransferStatus/33 FlexCAN_Ip_MainFunctionRead/32 FlexCAN_Ip_RxFifo/31 FlexCAN_Ip_ClearBuffStatusFlag/30 FlexCAN_Ip_GetBuffStatusFlag/29 FlexCAN_Ip_ClearBuffStatusFlag/30 Det_ReportRuntimeError/24 FlexCAN_Ip_GetBuffStatusFlag/29 FlexCAN_Ip_GetBuffStatusFlag/29 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
Can_Ipw_InitLegacyFifoFilter/5 (Can_Ipw_InitLegacyFifoFilter) @0d9e6a80
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_Ipw_InitRx/19 
  Calls: FlexCAN_Ip_ConfigRxFifo_Privileged/28 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/27 FlexCAN_Ip_SetRxIndividualMask_Privileged/26 
Can_Ipw_ParseData/4 (Can_Ipw_ParseData) @0d9e67e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: Can_43_FLEXCAN_Ipw_MainFunction_Read/21 Can_Ipw_ProcessLegacyFifoPolling/6 
  Calls: CanIf_RxIndication/25 Det_ReportRuntimeError/24 
Can_Ipw_abIsInterruptEnabled/3 (Can_Ipw_abIsInterruptEnabled) @0d9dfa68
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Can_43_FLEXCAN_Ipw_DisableControllerInterrupts/13 (write) Can_43_FLEXCAN_Ipw_SetControllerToStopMode/12 (read) Can_43_FLEXCAN_Ipw_EnableControllerInterrupts/14 (write) Can_43_FLEXCAN_Ipw_DisableControllerInterrupts/13 (read) Can_43_FLEXCAN_Ipw_SetControlerErrorInit/10 (read) Can_43_FLEXCAN_Ipw_EnableControllerInterrupts/14 (read) Can_43_FLEXCAN_Ipw_Init/8 (write) 
  Availability: available
  Varpool flags:
Can_Ipw_au16TxPduId/2 (Can_Ipw_au16TxPduId) @0d9df8b8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Can_43_FLEXCAN_Ipw_Write/18 (write) Can_43_FLEXCAN_Ipw_MainFunction_Write/20 (read) 
  Availability: available
  Varpool flags:
Can_Ipw_apxStatus/1 (Can_Ipw_apxStatus) @0d9df828
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Can_Ipw_xStatus0/0 (addr) 
  Referring: 
  Availability: available
  Varpool flags: initialized read-only const-value-known
Can_Ipw_xStatus0/0 (Can_Ipw_xStatus0) @0d9df0d8
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: Can_Ipw_apxStatus/1 (addr) Can_43_FLEXCAN_Ipw_Init/8 (addr) Can_43_FLEXCAN_Ipw_SetControllerToStartMode/11 (addr) Can_43_FLEXCAN_Ipw_MainFunction_Write/20 (addr) 
  Availability: available
  Varpool flags:
Can_43_FLEXCAN_Ipw_MainFunction_Mode (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, Can_ControllerStateType * Can_pControllerState)
{
  <unnamed type> _1;
  unsigned char _2;
  _Bool _3;
  _Bool _4;
  unsigned char _5;
  <unnamed type> _6;
  unsigned char _7;
  _Bool _8;
  unsigned char _9;

  <bb 2> :
  _1 = *Can_pControllerState_12(D);
  if (_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _2 = Can_pControllerConfig_13(D)->Can_u8ControllerOffset;
  _3 = FlexCAN_Ip_GetStartMode_Privileged (_2);
  _4 = ~_3;
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  *Can_pControllerState_12(D) = 2;
  _5 = Can_pControllerConfig_13(D)->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_5, 2);
  goto <bb 8>; [INV]

  <bb 5> :
  _6 = *Can_pControllerState_12(D);
  if (_6 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _7 = Can_pControllerConfig_13(D)->Can_u8ControllerOffset;
  _8 = FlexCAN_Ip_GetStartMode_Privileged (_7);
  if (_8 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  *Can_pControllerState_12(D) = 1;
  _9 = Can_pControllerConfig_13(D)->Can_u8AbstControllerID;
  CanIf_ControllerModeIndication (_9, 1);

  <bb 8> :
  return;

}


Can_43_FLEXCAN_Ipw_MainFunction_BusOff (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  unsigned char _1;

  <bb 2> :
  _1 = Can_pControllerConfig_3(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_MainFunctionBusOff_Privileged (_1);
  return;

}


Can_43_FLEXCAN_Ipw_MainFunction_Read (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig)
{
  struct PduInfoType CanIf_PduInfo;
  struct Can_HwType CanIf_Mailbox;
  struct Flexcan_Ip_MsgBuffType ReceivedDataBuffer;
  unsigned char _1;
  _Bool _2;
  _Bool _3;
  <unnamed type> _4;
  unsigned char _5;
  unsigned char _6;
  _Bool _7;
  unsigned char _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  <unnamed type> _12;
  <unnamed type> _13;

  <bb 2> :
  ReceivedDataBuffer.cs = 0;
  ReceivedDataBuffer.msgId = 0;
  ReceivedDataBuffer.dataLen = 0;
  _1 = Can_pControllerConfig_19(D)->Can_u8ControllerOffset;
  _2 = FlexCAN_Ip_GetStopMode_Privileged (_1);
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  _4 = Can_pHwObjectConfig_21(D)->Can_eReceiveType;
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _5 = Can_pControllerConfig_19(D)->Can_u8ControllerOffset;
  _6 = Can_pHwObjectConfig_21(D)->Can_u8HwBufferIndex;
  _7 = Can_pHwObjectConfig_21(D)->Can_bHwObjectUsesPolling;
  FlexCAN_Ip_Receive (_5, _6, &ReceivedDataBuffer, _7);
  _8 = Can_pControllerConfig_19(D)->Can_u8ControllerOffset;
  _9 = Can_pHwObjectConfig_21(D)->Can_u8HwBufferIndex;
  FlexCAN_Ip_MainFunctionRead (_8, _9);
  _10 = Can_pControllerConfig_19(D)->Can_u8ControllerOffset;
  _11 = Can_pHwObjectConfig_21(D)->Can_u8HwBufferIndex;
  _12 = FlexCAN_Ip_GetTransferStatus (_10, _11);
  if (_12 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  Can_Ipw_ParseData (&CanIf_Mailbox, &CanIf_PduInfo, &ReceivedDataBuffer, Can_pControllerConfig_19(D), Can_pHwObjectConfig_21(D));
  goto <bb 8>; [INV]

  <bb 6> :
  _13 = Can_pHwObjectConfig_21(D)->Can_eReceiveType;
  if (_13 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  Can_Ipw_ProcessLegacyFifoPolling (&CanIf_Mailbox, &CanIf_PduInfo, &ReceivedDataBuffer, Can_pControllerConfig_19(D), Can_pHwObjectConfig_21(D));

  <bb 8> :
  ReceivedDataBuffer ={v} {CLOBBER};
  CanIf_Mailbox ={v} {CLOBBER};
  CanIf_PduInfo ={v} {CLOBBER};
  return;

}


Can_43_FLEXCAN_Ipw_MainFunction_Write (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig)
{
  uint8 u8ObjIdx;
  unsigned char _1;
  int _2;
  struct Flexcan_Ip_StateType * _3;
  unsigned char _4;
  int _5;
  int _6;
  int _7;
  <unnamed type> _8;
  unsigned char _9;
  unsigned char _10;
  unsigned char _11;
  unsigned char _12;
  unsigned char _13;
  unsigned char _14;
  <unnamed type> _15;
  unsigned char _16;
  int _17;
  unsigned char _18;
  int _19;
  int _20;
  int _21;
  short unsigned int _22;
  unsigned char u8ObjIdx.8_23;
  unsigned char _24;

  <bb 2> :
  u8ObjIdx_28 = 0;

  <bb 3> :
  # u8ObjIdx_25 = PHI <u8ObjIdx_28(2), u8ObjIdx_35(6)>
  _1 = Can_pControllerConfig_30(D)->Can_u8ControllerID;
  _2 = (int) _1;
  _3 = &Can_Ipw_xStatus0;
  _4 = Can_pHwObjectConfig_31(D)->Can_u8HwBufferIndex;
  _5 = (int) _4;
  _6 = (int) u8ObjIdx_25;
  _7 = _5 + _6;
  _8 ={v} _3->mbs[_7].state;
  if (_8 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  _9 = Can_pControllerConfig_30(D)->Can_u8ControllerOffset;
  _10 = Can_pHwObjectConfig_31(D)->Can_u8HwBufferIndex;
  _11 = u8ObjIdx_25 + _10;
  FlexCAN_Ip_MainFunctionWrite (_9, _11);
  _12 = Can_pControllerConfig_30(D)->Can_u8ControllerOffset;
  _13 = Can_pHwObjectConfig_31(D)->Can_u8HwBufferIndex;
  _14 = u8ObjIdx_25 + _13;
  _15 = FlexCAN_Ip_GetTransferStatus (_12, _14);
  if (_15 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _16 = Can_pControllerConfig_30(D)->Can_u8ControllerID;
  _17 = (int) _16;
  _18 = Can_pHwObjectConfig_31(D)->Can_u8HwBufferIndex;
  _19 = (int) _18;
  _20 = (int) u8ObjIdx_25;
  _21 = _19 + _20;
  _22 = Can_Ipw_au16TxPduId[_17][_21];
  CanIf_TxConfirmation (_22);

  <bb 6> :
  u8ObjIdx.8_23 = u8ObjIdx_25;
  u8ObjIdx_35 = u8ObjIdx.8_23 + 1;
  _24 = Can_pHwObjectConfig_31(D)->Can_u8ObjectCount;
  if (u8ObjIdx_35 < _24)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  return;

}


Can_Ipw_InitRx (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController)
{
  struct Flexcan_Ip_DataInfoType DataInfo;
  const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
  uint8 u8HwObjRefIdx;
  unsigned char _1;
  const struct Can_43_FLEXCAN_HwObjectConfigType * const * _2;
  unsigned int _3;
  unsigned int _4;
  const struct Can_43_FLEXCAN_HwObjectConfigType * const * _5;
  <unnamed type> _6;
  <unnamed type> _7;
  unsigned char _8;
  unsigned char _9;
  const struct Can_43_FLEXCAN_HwFilterType * _10;
  long unsigned int _11;
  unsigned char _12;
  unsigned char _13;
  const struct Can_43_FLEXCAN_HwFilterType * _14;
  long unsigned int _15;
  <unnamed type> _16;
  unsigned char u8HwObjRefIdx.7_17;
  unsigned char _18;

  <bb 2> :
  u8HwObjRefIdx_24 = 0;
  _1 = Can_pController_26(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_SetRxMaskType_Privileged (_1, 1);
  u8HwObjRefIdx_28 = 0;
  goto <bb 11>; [INV]

  <bb 3> :
  _2 = Can_pController_26(D)->Can_ppHwObject;
  _3 = (unsigned int) u8HwObjRefIdx_19;
  _4 = _3 * 4;
  _5 = _2 + _4;
  Can_pHwObject_30 = *_5;
  _6 = Can_pHwObject_30->Can_eReceiveType;
  if (_6 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  DataInfo.fd_enable = 0;
  DataInfo.data_length = 0;
  _7 = Can_pHwObject_30->Can_IdMessage;
  if (_7 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  DataInfo.msg_id_type = 1;
  goto <bb 7>; [INV]

  <bb 6> :
  DataInfo.msg_id_type = 0;

  <bb 7> :
  _8 = Can_pController_26(D)->Can_u8ControllerOffset;
  _9 = Can_pHwObject_30->Can_u8HwBufferIndex;
  _10 = Can_pHwObject_30->Can_pHwFilterConfig;
  _11 = _10->Can_u32HwFilterCode;
  FlexCAN_Ip_ConfigRxMb (_8, _9, &DataInfo, _11);
  _12 = Can_pController_26(D)->Can_u8ControllerOffset;
  _13 = Can_pHwObject_30->Can_u8HwBufferIndex;
  _14 = Can_pHwObject_30->Can_pHwFilterConfig;
  _15 = _14->Can_u32HwFilterMask;
  FlexCAN_Ip_SetRxIndividualMask_Privileged (_12, _13, _15);

  <bb 8> :
  _16 = Can_pHwObject_30->Can_eReceiveType;
  if (_16 == 1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  Can_Ipw_InitLegacyFifoFilter (Can_pController_26(D), Can_pHwObject_30);

  <bb 10> :
  u8HwObjRefIdx.7_17 = u8HwObjRefIdx_19;
  u8HwObjRefIdx_38 = u8HwObjRefIdx.7_17 + 1;

  <bb 11> :
  # u8HwObjRefIdx_19 = PHI <u8HwObjRefIdx_28(2), u8HwObjRefIdx_38(10)>
  _18 = Can_pController_26(D)->Can_u8HwObjectRefCount;
  if (u8HwObjRefIdx_19 < _18)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  DataInfo ={v} {CLOBBER};
  return;

}


Can_43_FLEXCAN_Ipw_Write (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig, const struct Can_PduType * PduInfo)
{
  uint8 u8ObjIdx;
  struct Flexcan_Ip_DataInfoType DataInfo;
  Flexcan_Ip_StatusType eRetVal;
  Std_ReturnType iftmp.6;
  Std_ReturnType D.6964;
  <unnamed type> _1;
  long unsigned int _2;
  unsigned int _3;
  unsigned char _4;
  unsigned char _5;
  unsigned char _6;
  long unsigned int _7;
  unsigned char _8;
  long unsigned int _9;
  unsigned char _10;
  long unsigned int _11;
  long unsigned int _12;
  int _13;
  int _14;
  _Bool _15;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _16;
  short unsigned int _17;
  unsigned int _18;
  unsigned int _19;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _20;
  _Bool _21;
  _Bool _22;
  unsigned char _23;
  unsigned char _24;
  unsigned char _25;
  unsigned char _26;
  int _27;
  unsigned char _28;
  int _29;
  int _30;
  int _31;
  short unsigned int _32;
  unsigned char _33;
  unsigned char _34;
  unsigned char _35;
  long unsigned int _36;
  uint8 * _37;
  unsigned char u8ObjIdx.5_38;
  unsigned char _39;
  Std_ReturnType iftmp.6_44;
  Std_ReturnType iftmp.6_77;
  Std_ReturnType iftmp.6_78;
  Std_ReturnType _79;

  <bb 2> :
  eRetVal_49 = 1;
  u8ObjIdx_50 = 0;
  DataInfo.msg_id_type = 0;
  DataInfo.data_length = 0;
  DataInfo.fd_padding = 0;
  DataInfo.fd_enable = 0;
  DataInfo.enable_brs = 0;
  DataInfo.is_remote = 0;
  DataInfo.is_polling = 0;
  _1 = Can_pHwObjectConfig_59(D)->Can_eReceiveType;
  if (_1 == 3)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _2 = PduInfo_60(D)->id;
  _3 = _2 >> 31;
  DataInfo.msg_id_type = _3;
  _4 = Can_pHwObjectConfig_59(D)->Can_u8PayloadLength;
  _5 = PduInfo_60(D)->length;
  if (_4 <= _5)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = Can_pHwObjectConfig_59(D)->Can_u8PayloadLength;
  _7 = (long unsigned int) _6;
  DataInfo.data_length = _7;
  goto <bb 6>; [INV]

  <bb 5> :
  _8 = PduInfo_60(D)->length;
  _9 = (long unsigned int) _8;
  DataInfo.data_length = _9;

  <bb 6> :
  _10 = Can_pHwObjectConfig_59(D)->Can_u8PaddingValue;
  DataInfo.fd_padding = _10;
  _11 = PduInfo_60(D)->id;
  _12 = _11 >> 30;
  _13 = (int) _12;
  _14 = _13 & 1;
  _15 = _14 != 0;
  DataInfo.fd_enable = _15;
  _16 = Can_pControllerConfig_66(D)->Can_pBaudrateConfig;
  _17 = Can_pControllerConfig_66(D)->Can_u16DefaultBaudrateID;
  _18 = (unsigned int) _17;
  _19 = _18 * 22;
  _20 = _16 + _19;
  _21 = _20->Can_bBitRateSwitch;
  DataInfo.enable_brs = _21;
  DataInfo.is_remote = 0;
  _22 = Can_pHwObjectConfig_59(D)->Can_bHwObjectUsesPolling;
  DataInfo.is_polling = _22;

  <bb 7> :
  # u8ObjIdx_43 = PHI <u8ObjIdx_50(6), u8ObjIdx_75(10)>
  _23 = Can_pControllerConfig_66(D)->Can_u8ControllerOffset;
  _24 = Can_pHwObjectConfig_59(D)->Can_u8HwBufferIndex;
  _25 = u8ObjIdx_43 + _24;
  eRetVal_71 = FlexCAN_Ip_GetTransferStatus (_23, _25);
  if (eRetVal_71 == 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _26 = Can_pControllerConfig_66(D)->Can_u8ControllerID;
  _27 = (int) _26;
  _28 = Can_pHwObjectConfig_59(D)->Can_u8HwBufferIndex;
  _29 = (int) _28;
  _30 = (int) u8ObjIdx_43;
  _31 = _29 + _30;
  _32 = PduInfo_60(D)->swPduHandle;
  Can_Ipw_au16TxPduId[_27][_31] = _32;
  _33 = Can_pControllerConfig_66(D)->Can_u8ControllerOffset;
  _34 = Can_pHwObjectConfig_59(D)->Can_u8HwBufferIndex;
  _35 = u8ObjIdx_43 + _34;
  _36 = PduInfo_60(D)->id;
  _37 = PduInfo_60(D)->sdu;
  eRetVal_74 = FlexCAN_Ip_Send (_33, _35, &DataInfo, _36, _37);

  <bb 9> :
  # eRetVal_40 = PHI <eRetVal_71(7), eRetVal_74(8)>
  u8ObjIdx.5_38 = u8ObjIdx_43;
  u8ObjIdx_75 = u8ObjIdx.5_38 + 1;
  _39 = Can_pHwObjectConfig_59(D)->Can_u8ObjectCount;
  if (u8ObjIdx_75 < _39)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  if (eRetVal_40 == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  # eRetVal_41 = PHI <eRetVal_49(2), eRetVal_40(9), eRetVal_40(10)>
  if (eRetVal_41 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 12> :
  if (eRetVal_41 != 2)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 13> :
  eRetVal_76 = 1;

  <bb 14> :
  # eRetVal_42 = PHI <eRetVal_41(11), eRetVal_41(12), eRetVal_76(13)>
  if (eRetVal_42 != 2)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  iftmp.6_78 = (Std_ReturnType) eRetVal_42;
  goto <bb 17>; [INV]

  <bb 16> :
  iftmp.6_77 = 2;

  <bb 17> :
  # iftmp.6_44 = PHI <iftmp.6_78(15), iftmp.6_77(16)>
  _79 = iftmp.6_44;
  DataInfo ={v} {CLOBBER};

  <bb 18> :
<L18>:
  return _79;

}


Can_43_FLEXCAN_Ipw_GetControllerRxErrorCounter (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
  Std_ReturnType D.6950;
  unsigned char _1;
  unsigned char _2;
  Std_ReturnType _8;

  <bb 2> :
  _1 = Can_pControllerConfig_4(D)->Can_u8ControllerOffset;
  _2 = FlexCAN_Ip_GetControllerRxErrorCounter (_1);
  *pValue_6(D) = _2;
  _8 = 0;

  <bb 3> :
<L0>:
  return _8;

}


Can_43_FLEXCAN_Ipw_GetControllerTxErrorCounter (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
  Std_ReturnType D.6948;
  unsigned char _1;
  unsigned char _2;
  Std_ReturnType _8;

  <bb 2> :
  _1 = Can_pControllerConfig_4(D)->Can_u8ControllerOffset;
  _2 = FlexCAN_Ip_GetControllerTxErrorCounter (_1);
  *pValue_6(D) = _2;
  _8 = 0;

  <bb 3> :
<L0>:
  return _8;

}


Can_43_FLEXCAN_Ipw_GetControllerErrorState (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, uint8 * pValue)
{
  uint32 Error;
  Std_ReturnType D.6946;
  unsigned char _1;
  long unsigned int _2;
  unsigned char _3;
  unsigned char _4;
  Std_ReturnType _12;

  <bb 2> :
  Error_5 = 0;
  _1 = Can_pControllerConfig_7(D)->Can_u8ControllerOffset;
  Error_9 = FlexCAN_Ip_GetErrorStatus (_1);
  _2 = Error_9 >> 4;
  _3 = (unsigned char) _2;
  _4 = _3 & 3;
  *pValue_10(D) = _4;
  _12 = 0;

  <bb 3> :
<L0>:
  return _12;

}


Can_43_FLEXCAN_Ipw_EnableControllerInterrupts (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  unsigned char _1;
  int _2;
  _Bool _3;
  _Bool _4;
  unsigned char _5;
  unsigned char _6;
  int _7;

  <bb 2> :
  _1 = Can_pControllerConfig_10(D)->Can_u8ControllerID;
  _2 = (int) _1;
  _3 = Can_Ipw_abIsInterruptEnabled[_2];
  _4 = ~_3;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = Can_pControllerConfig_10(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_EnableInterrupts_Privileged (_5);
  _6 = Can_pControllerConfig_10(D)->Can_u8ControllerID;
  _7 = (int) _6;
  Can_Ipw_abIsInterruptEnabled[_7] = 1;

  <bb 4> :
  return;

}


Can_43_FLEXCAN_Ipw_DisableControllerInterrupts (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  unsigned char _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  unsigned char _5;
  int _6;

  <bb 2> :
  _1 = Can_pControllerConfig_9(D)->Can_u8ControllerID;
  _2 = (int) _1;
  _3 = Can_Ipw_abIsInterruptEnabled[_2];
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = Can_pControllerConfig_9(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_DisableInterrupts_Privileged (_4);
  _5 = Can_pControllerConfig_9(D)->Can_u8ControllerID;
  _6 = (int) _5;
  Can_Ipw_abIsInterruptEnabled[_6] = 0;

  <bb 4> :
  return;

}


Can_43_FLEXCAN_Ipw_SetControllerToStopMode (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  uint8 u8Idx;
  const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject;
  uint8 u8HwObjRefIdx;
  Std_ReturnType eReturnValue;
  Std_ReturnType D.6940;
  unsigned char _1;
  <unnamed type> _2;
  unsigned char _3;
  int _4;
  _Bool _5;
  unsigned char _6;
  const struct Can_43_FLEXCAN_HwObjectConfigType * const * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Can_43_FLEXCAN_HwObjectConfigType * const * _10;
  <unnamed type> _11;
  unsigned char _12;
  unsigned char _13;
  unsigned char _14;
  unsigned char u8Idx.3_15;
  unsigned char _16;
  unsigned char _17;
  unsigned char _18;
  unsigned char u8HwObjRefIdx.4_19;
  unsigned char _20;
  unsigned char _21;
  <unnamed type> _22;
  Std_ReturnType _47;

  <bb 2> :
  u8HwObjRefIdx_31 = 0;
  u8Idx_32 = 0;
  _1 = Can_pControllerConfig_34(D)->Can_u8ControllerOffset;
  _2 = FlexCAN_Ip_EnterFreezeMode_Privileged (_1);
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 3> :
  _3 = Can_pControllerConfig_34(D)->Can_u8ControllerID;
  _4 = (int) _3;
  _5 = Can_Ipw_abIsInterruptEnabled[_4];
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _6 = Can_pControllerConfig_34(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_DisableInterrupts_Privileged (_6);

  <bb 5> :
  u8HwObjRefIdx_38 = 0;
  goto <bb 11>; [INV]

  <bb 6> :
  _7 = Can_pControllerConfig_34(D)->Can_ppHwObject;
  _8 = (unsigned int) u8HwObjRefIdx_24;
  _9 = _8 * 4;
  _10 = _7 + _9;
  Can_pHwObject_41 = *_10;
  _11 = Can_pHwObject_41->Can_eReceiveType;
  if (_11 == 3)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  u8Idx_43 = 0;

  <bb 8> :
  # u8Idx_25 = PHI <u8Idx_43(7), u8Idx_45(8)>
  _12 = Can_pControllerConfig_34(D)->Can_u8ControllerOffset;
  _13 = Can_pHwObject_41->Can_u8HwBufferIndex;
  _14 = u8Idx_25 + _13;
  FlexCAN_Ip_AbortTransfer (_12, _14);
  u8Idx.3_15 = u8Idx_25;
  u8Idx_45 = u8Idx.3_15 + 1;
  _16 = Can_pHwObject_41->Can_u8ObjectCount;
  if (u8Idx_45 < _16)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _17 = Can_pControllerConfig_34(D)->Can_u8ControllerOffset;
  _18 = Can_pHwObject_41->Can_u8HwBufferIndex;
  FlexCAN_Ip_AbortTransfer (_17, _18);

  <bb 10> :
  u8HwObjRefIdx.4_19 = u8HwObjRefIdx_24;
  u8HwObjRefIdx_46 = u8HwObjRefIdx.4_19 + 1;

  <bb 11> :
  # u8HwObjRefIdx_24 = PHI <u8HwObjRefIdx_38(5), u8HwObjRefIdx_46(10)>
  _20 = Can_pControllerConfig_34(D)->Can_u8HwObjectRefCount;
  if (u8HwObjRefIdx_24 < _20)
    goto <bb 6>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  _21 = Can_pControllerConfig_34(D)->Can_u8ControllerOffset;
  _22 = FlexCAN_Ip_SetStopMode_Privileged (_21);
  eReturnValue_40 = (Std_ReturnType) _22;
  goto <bb 14>; [INV]

  <bb 13> :
  eReturnValue_36 = 1;

  <bb 14> :
  # eReturnValue_23 = PHI <eReturnValue_40(12), eReturnValue_36(13)>
  _47 = eReturnValue_23;

  <bb 15> :
<L13>:
  return _47;

}


Can_43_FLEXCAN_Ipw_SetControllerToStartMode (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  Flexcan_Ip_StatusType eRetVal;
  Std_ReturnType D.6930;
  unsigned char _1;
  unsigned char _2;
  int _3;
  struct Flexcan_Ip_StateType * _4;
  const struct Can_43_FLEXCAN_Ipw_HwChannelConfigType * _5;
  const struct Flexcan_Ip_ConfigType * _6;
  unsigned char _7;
  unsigned char _8;
  _Bool _9;
  Std_ReturnType _21;

  <bb 2> :
  _1 = Can_pControllerConfig_13(D)->Can_u8ControllerOffset;
  _2 = Can_pControllerConfig_13(D)->Can_u8ControllerID;
  _3 = (int) _2;
  _4 = &Can_Ipw_xStatus0;
  _5 = Can_pControllerConfig_13(D)->HwChannelIpConfig;
  _6 = _5->pFlexcanIpHwConfig;
  eRetVal_15 = FlexCAN_Ip_Init_Privileged (_1, _4, _6);
  if (eRetVal_15 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _7 = Can_pControllerConfig_13(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_DisableInterrupts_Privileged (_7);
  Can_Ipw_InitBaudrate (Can_pControllerConfig_13(D));
  Can_Ipw_InitRx (Can_pControllerConfig_13(D));
  _8 = Can_43_FLEXCAN_Ipw_SetControlerErrorInit (Can_pControllerConfig_13(D));
  _9 = _8 != 0;
  eRetVal_20 = (Flexcan_Ip_StatusType) _9;

  <bb 4> :
  # eRetVal_10 = PHI <eRetVal_15(2), eRetVal_20(3)>
  _21 = (Std_ReturnType) eRetVal_10;

  <bb 5> :
<L2>:
  return _21;

}


Can_43_FLEXCAN_Ipw_SetControlerErrorInit (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  Flexcan_Ip_StatusType eRetVal;
  Std_ReturnType D.6926;
  unsigned char _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  unsigned char _5;
  Std_ReturnType _13;

  <bb 2> :
  eRetVal_7 = 0;
  _1 = Can_pControllerConfig_9(D)->Can_u8ControllerID;
  _2 = (int) _1;
  _3 = Can_Ipw_abIsInterruptEnabled[_2];
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = Can_pControllerConfig_9(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_EnableInterrupts_Privileged (_4);

  <bb 4> :
  _5 = Can_pControllerConfig_9(D)->Can_u8ControllerOffset;
  eRetVal_12 = FlexCAN_Ip_SetStartMode_Privileged (_5);
  _13 = (Std_ReturnType) eRetVal_12;

  <bb 5> :
<L2>:
  return _13;

}


Can_43_FLEXCAN_Ipw_DeInit (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  unsigned char _1;

  <bb 2> :
  _1 = Can_pControllerConfig_3(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_Deinit_Privileged (_1);
  return;

}


Can_43_FLEXCAN_Ipw_Init (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig)
{
  Std_ReturnType eRetVal;
  Std_ReturnType D.6922;
  unsigned char _1;
  unsigned char _2;
  int _3;
  struct Flexcan_Ip_StateType * _4;
  const struct Can_43_FLEXCAN_Ipw_HwChannelConfigType * _5;
  const struct Flexcan_Ip_ConfigType * _6;
  <unnamed type> _7;
  unsigned char _8;
  int _9;
  unsigned char _10;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _11;
  short unsigned int _12;
  unsigned int _13;
  unsigned int _14;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _15;
  _Bool _16;
  unsigned char _17;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _18;
  short unsigned int _19;
  unsigned int _20;
  unsigned int _21;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _22;
  _Bool _23;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _24;
  short unsigned int _25;
  unsigned int _26;
  unsigned int _27;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _28;
  unsigned char _29;
  unsigned char _30;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _31;
  short unsigned int _32;
  unsigned int _33;
  unsigned int _34;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _35;
  unsigned char _36;
  unsigned char _37;
  <unnamed type> _38;
  Std_ReturnType _53;

  <bb 2> :
  eRetVal_41 = 1;
  _1 = Can_pControllerConfig_43(D)->Can_u8ControllerOffset;
  _2 = Can_pControllerConfig_43(D)->Can_u8ControllerID;
  _3 = (int) _2;
  _4 = &Can_Ipw_xStatus0;
  _5 = Can_pControllerConfig_43(D)->HwChannelIpConfig;
  _6 = _5->pFlexcanIpHwConfig;
  _7 = FlexCAN_Ip_Init_Privileged (_1, _4, _6);
  eRetVal_45 = (Std_ReturnType) _7;
  _8 = Can_pControllerConfig_43(D)->Can_u8ControllerID;
  _9 = (int) _8;
  Can_Ipw_abIsInterruptEnabled[_9] = 1;
  if (eRetVal_45 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _10 = Can_pControllerConfig_43(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_DisableInterrupts_Privileged (_10);
  _11 = Can_pControllerConfig_43(D)->Can_pBaudrateConfig;
  _12 = Can_pControllerConfig_43(D)->Can_u16DefaultBaudrateID;
  _13 = (unsigned int) _12;
  _14 = _13 * 22;
  _15 = _11 + _14;
  _16 = _15->Can_bFDFrame;
  if (_16 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _17 = Can_pControllerConfig_43(D)->Can_u8ControllerOffset;
  _18 = Can_pControllerConfig_43(D)->Can_pBaudrateConfig;
  _19 = Can_pControllerConfig_43(D)->Can_u16DefaultBaudrateID;
  _20 = (unsigned int) _19;
  _21 = _20 * 22;
  _22 = _18 + _21;
  _23 = _22->Can_bTrcvDelayEnable;
  _24 = Can_pControllerConfig_43(D)->Can_pBaudrateConfig;
  _25 = Can_pControllerConfig_43(D)->Can_u16DefaultBaudrateID;
  _26 = (unsigned int) _25;
  _27 = _26 * 22;
  _28 = _24 + _27;
  _29 = _28->Can_u8TrcvDelayCompOffset;
  FlexCAN_Ip_SetTDCOffset_Privileged (_17, _23, _29);

  <bb 5> :
  _30 = Can_pControllerConfig_43(D)->Can_u8ControllerOffset;
  _31 = Can_pControllerConfig_43(D)->Can_pBaudrateConfig;
  _32 = Can_pControllerConfig_43(D)->Can_u16DefaultBaudrateID;
  _33 = (unsigned int) _32;
  _34 = _33 * 22;
  _35 = _31 + _34;
  _36 = _35->Can_u8TxArbitrationStartDelay;
  FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (_30, _36);
  Can_Ipw_InitRx (Can_pControllerConfig_43(D));

  <bb 6> :
  _37 = Can_pControllerConfig_43(D)->Can_u8ControllerOffset;
  _38 = FlexCAN_Ip_SetStopMode_Privileged (_37);
  eRetVal_52 = (Std_ReturnType) _38;
  _53 = eRetVal_52;

  <bb 7> :
<L4>:
  return _53;

}


Can_Ipw_InitBaudrate (const struct Can_43_FLEXCAN_ControllerConfigType * ControllerConfig)
{
  uint16 BaudRateConfigID;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _1;
  unsigned int _2;
  unsigned int _3;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _4;
  _Bool _5;
  unsigned char _6;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _7;
  unsigned int _8;
  unsigned int _9;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _10;
  _Bool _11;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _12;
  unsigned int _13;
  unsigned int _14;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _15;
  unsigned char _16;
  unsigned char _17;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _18;
  unsigned int _19;
  unsigned int _20;
  const struct Can_43_FLEXCAN_BaudrateConfigType * _21;
  unsigned char _22;

  <bb 2> :
  BaudRateConfigID_26 = ControllerConfig_25(D)->Can_u16DefaultBaudrateID;
  _1 = ControllerConfig_25(D)->Can_pBaudrateConfig;
  _2 = (unsigned int) BaudRateConfigID_26;
  _3 = _2 * 22;
  _4 = _1 + _3;
  _5 = _4->Can_bFDFrame;
  if (_5 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _6 = ControllerConfig_25(D)->Can_u8ControllerOffset;
  _7 = ControllerConfig_25(D)->Can_pBaudrateConfig;
  _8 = (unsigned int) BaudRateConfigID_26;
  _9 = _8 * 22;
  _10 = _7 + _9;
  _11 = _10->Can_bTrcvDelayEnable;
  _12 = ControllerConfig_25(D)->Can_pBaudrateConfig;
  _13 = (unsigned int) BaudRateConfigID_26;
  _14 = _13 * 22;
  _15 = _12 + _14;
  _16 = _15->Can_u8TrcvDelayCompOffset;
  FlexCAN_Ip_SetTDCOffset_Privileged (_6, _11, _16);

  <bb 4> :
  _17 = ControllerConfig_25(D)->Can_u8ControllerOffset;
  _18 = ControllerConfig_25(D)->Can_pBaudrateConfig;
  _19 = (unsigned int) BaudRateConfigID_26;
  _20 = _19 * 22;
  _21 = _18 + _20;
  _22 = _21->Can_u8TxArbitrationStartDelay;
  FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (_17, _22);
  return;

}


Can_Ipw_ProcessLegacyFifoPolling (struct Can_HwType * CanIf_Mailbox, struct PduInfoType * CanIf_PduInfo, struct Flexcan_Ip_MsgBuffType * pReceivedDataBuffer, const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig)
{
  boolean returnResult;
  uint8 u8ObjIdx;
  unsigned char _1;
  unsigned char u8ObjIdx.2_2;
  unsigned char _3;
  _Bool _4;
  void (*<T6ee>) (void) _5;
  void (*<T6ee>) (void) _6;
  unsigned char _7;
  unsigned char _8;
  _Bool _9;
  void (*<T6ee>) (void) _10;
  void (*<T6ee>) (void) _11;
  unsigned char _12;
  unsigned char _13;
  unsigned char _14;
  unsigned char _15;
  unsigned char _16;
  unsigned char _17;
  <unnamed type> _18;
  unsigned char _19;
  unsigned char _20;

  <bb 2> :
  u8ObjIdx_29 = 0;
  _1 = Can_pControllerConfig_31(D)->Can_u8ControllerOffset;
  returnResult_33 = FlexCAN_Ip_GetBuffStatusFlag (_1, 5);
  goto <bb 14>; [INV]

  <bb 3> :
  u8ObjIdx.2_2 = u8ObjIdx_21;
  u8ObjIdx_35 = u8ObjIdx.2_2 + 1;
  _3 = Can_pControllerConfig_31(D)->Can_u8ControllerOffset;
  _4 = FlexCAN_Ip_GetBuffStatusFlag (_3, 7);
  if (_4 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  Det_ReportRuntimeError (80, 0, 8, 1);
  _5 = Can_pControllerConfig_31(D)->Can_pLegacyFiFoOvfNotif;
  if (_5 != 0B)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _6 = Can_pControllerConfig_31(D)->Can_pLegacyFiFoOvfNotif;
  _6 ();

  <bb 6> :
  _7 = Can_pControllerConfig_31(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_ClearBuffStatusFlag (_7, 7);

  <bb 7> :
  _8 = Can_pControllerConfig_31(D)->Can_u8ControllerOffset;
  _9 = FlexCAN_Ip_GetBuffStatusFlag (_8, 6);
  if (_9 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _10 = Can_pControllerConfig_31(D)->Can_pLegacyFiFoWarnNotif;
  if (_10 != 0B)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _11 = Can_pControllerConfig_31(D)->Can_pLegacyFiFoWarnNotif;
  _11 ();

  <bb 10> :
  _12 = Can_pControllerConfig_31(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_ClearBuffStatusFlag (_12, 6);

  <bb 11> :
  _13 = Can_pControllerConfig_31(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_RxFifo (_13, pReceivedDataBuffer_43(D));
  _14 = Can_pControllerConfig_31(D)->Can_u8ControllerOffset;
  _15 = Can_pHwObjectConfig_34(D)->Can_u8HwBufferIndex;
  FlexCAN_Ip_MainFunctionRead (_14, _15);
  _16 = Can_pControllerConfig_31(D)->Can_u8ControllerOffset;
  _17 = Can_pHwObjectConfig_34(D)->Can_u8HwBufferIndex;
  _18 = FlexCAN_Ip_GetTransferStatus (_16, _17);
  if (_18 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  Can_Ipw_ParseData (CanIf_Mailbox_47(D), CanIf_PduInfo_48(D), pReceivedDataBuffer_43(D), Can_pControllerConfig_31(D), Can_pHwObjectConfig_34(D));

  <bb 13> :
  _19 = Can_pControllerConfig_31(D)->Can_u8ControllerOffset;
  returnResult_51 = FlexCAN_Ip_GetBuffStatusFlag (_19, 5);

  <bb 14> :
  # u8ObjIdx_21 = PHI <u8ObjIdx_29(2), u8ObjIdx_35(13)>
  # returnResult_22 = PHI <returnResult_33(2), returnResult_51(13)>
  _20 = Can_pHwObjectConfig_34(D)->Can_u8ObjectCount;
  if (u8ObjIdx_21 < _20)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  if (returnResult_22 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  return;

}


Can_Ipw_InitLegacyFifoFilter (const struct Can_43_FLEXCAN_ControllerConfigType * Can_pController, const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObject)
{
  struct Flexcan_Ip_IdTableType RxFifoFilters[128];
  Flexcan_Ip_RxFifoIdElementFormatType eElementFormat;
  uint8 u8FiFoFilterIndvCount;
  uint32 u32HwFilterMask;
  uint8 u8HwFilterCount;
  uint8 u8FilterIdx;
  unsigned char _1;
  unsigned char _2;
  unsigned int _3;
  unsigned int _4;
  unsigned char _5;
  unsigned char _6;
  <unnamed type> _7;
  <unnamed type> _8;
  const struct Can_43_FLEXCAN_HwFilterType * _9;
  unsigned int _10;
  unsigned int _11;
  const struct Can_43_FLEXCAN_HwFilterType * _12;
  long unsigned int _13;
  long unsigned int _14;
  const struct Can_43_FLEXCAN_HwFilterType * _15;
  unsigned int _16;
  unsigned int _17;
  const struct Can_43_FLEXCAN_HwFilterType * _18;
  long unsigned int _19;
  long unsigned int _20;
  <unnamed type> _21;
  unsigned char _22;
  <unnamed type> _23;
  const struct Can_43_FLEXCAN_HwFilterType * _24;
  unsigned int _25;
  unsigned int _26;
  const struct Can_43_FLEXCAN_HwFilterType * _27;
  long unsigned int _28;
  long unsigned int _29;
  long unsigned int _30;
  const struct Can_43_FLEXCAN_HwFilterType * _31;
  unsigned int _32;
  unsigned int _33;
  sizetype _34;
  const struct Can_43_FLEXCAN_HwFilterType * _35;
  long unsigned int _36;
  long unsigned int _37;
  const struct Can_43_FLEXCAN_HwFilterType * _38;
  unsigned int _39;
  unsigned int _40;
  const struct Can_43_FLEXCAN_HwFilterType * _41;
  long unsigned int _42;
  long unsigned int _43;
  const struct Can_43_FLEXCAN_HwFilterType * _44;
  unsigned int _45;
  unsigned int _46;
  sizetype _47;
  const struct Can_43_FLEXCAN_HwFilterType * _48;
  long unsigned int _49;
  long unsigned int _50;
  unsigned char _51;
  <unnamed type> _52;
  const struct Can_43_FLEXCAN_HwFilterType * _53;
  unsigned int _54;
  unsigned int _55;
  const struct Can_43_FLEXCAN_HwFilterType * _56;
  long unsigned int _57;
  long unsigned int _58;
  long unsigned int _59;
  const struct Can_43_FLEXCAN_HwFilterType * _60;
  unsigned int _61;
  unsigned int _62;
  sizetype _63;
  const struct Can_43_FLEXCAN_HwFilterType * _64;
  long unsigned int _65;
  long unsigned int _66;
  long unsigned int _67;
  const struct Can_43_FLEXCAN_HwFilterType * _68;
  unsigned int _69;
  unsigned int _70;
  sizetype _71;
  const struct Can_43_FLEXCAN_HwFilterType * _72;
  long unsigned int _73;
  long unsigned int _74;
  long unsigned int _75;
  const struct Can_43_FLEXCAN_HwFilterType * _76;
  unsigned int _77;
  unsigned int _78;
  sizetype _79;
  const struct Can_43_FLEXCAN_HwFilterType * _80;
  long unsigned int _81;
  long unsigned int _82;
  const struct Can_43_FLEXCAN_HwFilterType * _83;
  unsigned int _84;
  unsigned int _85;
  const struct Can_43_FLEXCAN_HwFilterType * _86;
  long unsigned int _87;
  long unsigned int _88;
  long unsigned int _89;
  const struct Can_43_FLEXCAN_HwFilterType * _90;
  unsigned int _91;
  unsigned int _92;
  sizetype _93;
  const struct Can_43_FLEXCAN_HwFilterType * _94;
  long unsigned int _95;
  long unsigned int _96;
  long unsigned int _97;
  const struct Can_43_FLEXCAN_HwFilterType * _98;
  unsigned int _99;
  unsigned int _100;
  sizetype _101;
  const struct Can_43_FLEXCAN_HwFilterType * _102;
  long unsigned int _103;
  long unsigned int _104;
  long unsigned int _105;
  const struct Can_43_FLEXCAN_HwFilterType * _106;
  unsigned int _107;
  unsigned int _108;
  sizetype _109;
  const struct Can_43_FLEXCAN_HwFilterType * _110;
  long unsigned int _111;
  long unsigned int _112;
  unsigned char _113;
  unsigned char u8FilterIdx.0_114;
  unsigned char _115;
  unsigned char _116;
  long unsigned int _117;
  const struct Can_43_FLEXCAN_HwFilterType * _118;
  unsigned int _119;
  unsigned int _120;
  const struct Can_43_FLEXCAN_HwFilterType * _121;
  int _122;
  long unsigned int _123;
  <unnamed type> _124;
  int _125;
  int _126;
  int _127;
  unsigned char u8FilterIdx.1_128;
  unsigned char _129;

  <bb 2> :
  u8FilterIdx_142 = 0;
  u8HwFilterCount_143 = 0;
  u32HwFilterMask_144 = 0;
  u8FiFoFilterIndvCount_145 = 0;
  eElementFormat_146 = 0;
  _1 = Can_pHwObject_148(D)->Can_u8HwFilterCount;
  _2 = _1 / 4;
  _3 = (unsigned int) _2;
  _4 = _3 + 6;
  if (_4 <= 32)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _5 = Can_pHwObject_148(D)->Can_u8HwFilterCount;
  _6 = _5 / 4;
  u8FiFoFilterIndvCount_150 = _6 + 6;
  goto <bb 5>; [INV]

  <bb 4> :
  u8FiFoFilterIndvCount_149 = 32;

  <bb 5> :
  # u8FiFoFilterIndvCount_135 = PHI <u8FiFoFilterIndvCount_150(3), u8FiFoFilterIndvCount_149(4)>
  u8FilterIdx_151 = 0;
  goto <bb 18>; [INV]

  <bb 6> :
  _7 = Can_pController_152(D)->Can_eLegacyAcceptanceMode;
  if (_7 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 7> :
  u8HwFilterCount_171 = Can_pHwObject_148(D)->Can_u8HwFilterCount;
  u32HwFilterMask_172 = 3221225472;
  eElementFormat_173 = 0;
  _8 = Can_pHwObject_148(D)->Can_IdMessage;
  if (_8 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  _9 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _10 = (unsigned int) u8FilterIdx_130;
  _11 = _10 * 8;
  _12 = _9 + _11;
  _13 = _12->Can_u32HwFilterMask;
  _14 = _13 << 1;
  u32HwFilterMask_175 = u32HwFilterMask_172 | _14;
  goto <bb 17>; [INV]

  <bb 9> :
  _15 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _16 = (unsigned int) u8FilterIdx_130;
  _17 = _16 * 8;
  _18 = _15 + _17;
  _19 = _18->Can_u32HwFilterMask;
  _20 = _19 << 19;
  u32HwFilterMask_174 = u32HwFilterMask_172 | _20;
  goto <bb 17>; [INV]

  <bb 10> :
  _21 = Can_pController_152(D)->Can_eLegacyAcceptanceMode;
  if (_21 == 1)
    goto <bb 11>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 11> :
  _22 = Can_pHwObject_148(D)->Can_u8HwFilterCount;
  u8HwFilterCount_164 = _22 * 2;
  u32HwFilterMask_165 = 3221274624;
  eElementFormat_166 = 1;
  _23 = Can_pHwObject_148(D)->Can_IdMessage;
  if (_23 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _24 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _25 = (unsigned int) u8FilterIdx_130;
  _26 = _25 * 16;
  _27 = _24 + _26;
  _28 = _27->Can_u32HwFilterMask;
  _29 = _28 >> 15;
  _30 = _29 << 16;
  u32HwFilterMask_169 = u32HwFilterMask_165 | _30;
  _31 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _32 = (unsigned int) u8FilterIdx_130;
  _33 = _32 * 16;
  _34 = _33 + 8;
  _35 = _31 + _34;
  _36 = _35->Can_u32HwFilterMask;
  _37 = _36 >> 15;
  u32HwFilterMask_170 = u32HwFilterMask_169 | _37;
  goto <bb 17>; [INV]

  <bb 13> :
  _38 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _39 = (unsigned int) u8FilterIdx_130;
  _40 = _39 * 16;
  _41 = _38 + _40;
  _42 = _41->Can_u32HwFilterMask;
  _43 = _42 << 19;
  u32HwFilterMask_167 = u32HwFilterMask_165 | _43;
  _44 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _45 = (unsigned int) u8FilterIdx_130;
  _46 = _45 * 16;
  _47 = _46 + 8;
  _48 = _44 + _47;
  _49 = _48->Can_u32HwFilterMask;
  _50 = _49 << 3;
  u32HwFilterMask_168 = u32HwFilterMask_167 | _50;
  goto <bb 17>; [INV]

  <bb 14> :
  _51 = Can_pHwObject_148(D)->Can_u8HwFilterCount;
  u8HwFilterCount_153 = _51 * 4;
  u32HwFilterMask_154 = 0;
  eElementFormat_155 = 2;
  _52 = Can_pHwObject_148(D)->Can_IdMessage;
  if (_52 != 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _53 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _54 = (unsigned int) u8FilterIdx_130;
  _55 = _54 * 32;
  _56 = _53 + _55;
  _57 = _56->Can_u32HwFilterMask;
  _58 = _57 >> 21;
  _59 = _58 << 24;
  u32HwFilterMask_160 = u32HwFilterMask_154 | _59;
  _60 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _61 = (unsigned int) u8FilterIdx_130;
  _62 = _61 * 32;
  _63 = _62 + 8;
  _64 = _60 + _63;
  _65 = _64->Can_u32HwFilterMask;
  _66 = _65 >> 21;
  _67 = _66 << 16;
  u32HwFilterMask_161 = u32HwFilterMask_160 | _67;
  _68 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _69 = (unsigned int) u8FilterIdx_130;
  _70 = _69 * 32;
  _71 = _70 + 16;
  _72 = _68 + _71;
  _73 = _72->Can_u32HwFilterMask;
  _74 = _73 >> 21;
  _75 = _74 << 8;
  u32HwFilterMask_162 = u32HwFilterMask_161 | _75;
  _76 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _77 = (unsigned int) u8FilterIdx_130;
  _78 = _77 * 32;
  _79 = _78 + 24;
  _80 = _76 + _79;
  _81 = _80->Can_u32HwFilterMask;
  _82 = _81 >> 21;
  u32HwFilterMask_163 = u32HwFilterMask_162 | _82;
  goto <bb 17>; [INV]

  <bb 16> :
  _83 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _84 = (unsigned int) u8FilterIdx_130;
  _85 = _84 * 32;
  _86 = _83 + _85;
  _87 = _86->Can_u32HwFilterMask;
  _88 = _87 >> 3;
  _89 = _88 << 24;
  u32HwFilterMask_156 = u32HwFilterMask_154 | _89;
  _90 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _91 = (unsigned int) u8FilterIdx_130;
  _92 = _91 * 32;
  _93 = _92 + 8;
  _94 = _90 + _93;
  _95 = _94->Can_u32HwFilterMask;
  _96 = _95 >> 3;
  _97 = _96 << 16;
  u32HwFilterMask_157 = u32HwFilterMask_156 | _97;
  _98 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _99 = (unsigned int) u8FilterIdx_130;
  _100 = _99 * 32;
  _101 = _100 + 16;
  _102 = _98 + _101;
  _103 = _102->Can_u32HwFilterMask;
  _104 = _103 >> 3;
  _105 = _104 << 8;
  u32HwFilterMask_158 = u32HwFilterMask_157 | _105;
  _106 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _107 = (unsigned int) u8FilterIdx_130;
  _108 = _107 * 32;
  _109 = _108 + 24;
  _110 = _106 + _109;
  _111 = _110->Can_u32HwFilterMask;
  _112 = _111 >> 3;
  u32HwFilterMask_159 = u32HwFilterMask_158 | _112;

  <bb 17> :
  # u8HwFilterCount_132 = PHI <u8HwFilterCount_171(9), u8HwFilterCount_164(13), u8HwFilterCount_153(15), u8HwFilterCount_153(16), u8HwFilterCount_171(8), u8HwFilterCount_164(12)>
  # u32HwFilterMask_134 = PHI <u32HwFilterMask_174(9), u32HwFilterMask_168(13), u32HwFilterMask_163(15), u32HwFilterMask_159(16), u32HwFilterMask_175(8), u32HwFilterMask_170(12)>
  # eElementFormat_136 = PHI <eElementFormat_173(9), eElementFormat_166(13), eElementFormat_155(15), eElementFormat_155(16), eElementFormat_173(8), eElementFormat_166(12)>
  _113 = Can_pController_152(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_SetRxIndividualMask_Privileged (_113, u8FilterIdx_130, u32HwFilterMask_134);
  u8FilterIdx.0_114 = u8FilterIdx_130;
  u8FilterIdx_177 = u8FilterIdx.0_114 + 1;

  <bb 18> :
  # u8FilterIdx_130 = PHI <u8FilterIdx_151(5), u8FilterIdx_177(17)>
  # u8HwFilterCount_133 = PHI <u8HwFilterCount_143(5), u8HwFilterCount_132(17)>
  # eElementFormat_137 = PHI <eElementFormat_146(5), eElementFormat_136(17)>
  if (u8FilterIdx_130 < u8FiFoFilterIndvCount_135)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  _115 = Can_pHwObject_148(D)->Can_u8HwFilterCount;
  if (u8FilterIdx_130 < _115)
    goto <bb 6>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 20> :
  _116 = Can_pController_152(D)->Can_u8ControllerOffset;
  _117 = Can_pController_152(D)->Can_u32LegacyGlobalMask;
  FlexCAN_Ip_SetRxFifoGlobalMask_Privileged (_116, _117);
  if (u8HwFilterCount_133 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 28>; [INV]

  <bb 21> :
  u8FilterIdx_179 = 0;
  goto <bb 26>; [INV]

  <bb 22> :
  _118 = Can_pHwObject_148(D)->Can_pHwFilterConfig;
  _119 = (unsigned int) u8FilterIdx_131;
  _120 = _119 * 8;
  _121 = _118 + _120;
  _122 = (int) u8FilterIdx_131;
  _123 = _121->Can_u32HwFilterCode;
  RxFifoFilters[_122].id = _123;
  _124 = Can_pHwObject_148(D)->Can_IdMessage;
  if (_124 != 0)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]

  <bb 23> :
  _125 = (int) u8FilterIdx_131;
  RxFifoFilters[_125].isExtendedFrame = 1;
  goto <bb 25>; [INV]

  <bb 24> :
  _126 = (int) u8FilterIdx_131;
  RxFifoFilters[_126].isExtendedFrame = 0;

  <bb 25> :
  _127 = (int) u8FilterIdx_131;
  RxFifoFilters[_127].isRemoteFrame = 0;
  u8FilterIdx.1_128 = u8FilterIdx_131;
  u8FilterIdx_185 = u8FilterIdx.1_128 + 1;

  <bb 26> :
  # u8FilterIdx_131 = PHI <u8FilterIdx_179(21), u8FilterIdx_185(25)>
  if (u8FilterIdx_131 < u8HwFilterCount_133)
    goto <bb 22>; [INV]
  else
    goto <bb 27>; [INV]

  <bb 27> :
  _129 = Can_pController_152(D)->Can_u8ControllerOffset;
  FlexCAN_Ip_ConfigRxFifo_Privileged (_129, eElementFormat_137, &RxFifoFilters);

  <bb 28> :
  RxFifoFilters ={v} {CLOBBER};
  return;

}


Can_Ipw_ParseData (struct Can_HwType * CanIf_Mailbox, struct PduInfoType * CanIf_PduInfo, struct Flexcan_Ip_MsgBuffType * pReceivedDataBuffer, const struct Can_43_FLEXCAN_ControllerConfigType * Can_pControllerConfig, const struct Can_43_FLEXCAN_HwObjectConfigType * Can_pHwObjectConfig)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  <unnamed type> _6;
  long unsigned int _7;
  long unsigned int _8;
  <unnamed type> _9;
  long unsigned int _10;
  signed int _11;
  long unsigned int _12;
  long unsigned int _13;
  unsigned char _14;
  unsigned char _15;
  unsigned char _16;
  long unsigned int _17;
  unsigned char _18;
  long unsigned int _19;
  short unsigned int _20;
  unsigned char _21;
  uint8 * _22;

  <bb 2> :
  _1 = pReceivedDataBuffer_28(D)->msgId;
  CanIf_Mailbox_29(D)->CanId = _1;
  _2 = pReceivedDataBuffer_28(D)->cs;
  _3 = _2 & 2097152;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = CanIf_Mailbox_29(D)->CanId;
  _5 = _4 | 2147483648;
  CanIf_Mailbox_29(D)->CanId = _5;

  <bb 4> :
  _6 = Can_pHwObjectConfig_32(D)->Can_eReceiveType;
  if (_6 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _7 = pReceivedDataBuffer_28(D)->cs;
  _8 = _7 & 251658240;
  if (_8 == 100663296)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  Det_ReportRuntimeError (80, 0, 8, 1);

  <bb 7> :
  _9 = Can_pHwObjectConfig_32(D)->Can_eReceiveType;
  if (_9 != 1)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 8> :
  _10 = pReceivedDataBuffer_28(D)->cs;
  _11 = (signed int) _10;
  if (_11 < 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _12 = CanIf_Mailbox_29(D)->CanId;
  _13 = _12 | 1073741824;
  CanIf_Mailbox_29(D)->CanId = _13;

  <bb 10> :
  _14 = Can_pHwObjectConfig_32(D)->Can_u8PayloadLength;
  _15 = pReceivedDataBuffer_28(D)->dataLen;
  if (_14 <= _15)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _16 = Can_pHwObjectConfig_32(D)->Can_u8PayloadLength;
  _17 = (long unsigned int) _16;
  CanIf_PduInfo_35(D)->SduLength = _17;
  goto <bb 13>; [INV]

  <bb 12> :
  _18 = pReceivedDataBuffer_28(D)->dataLen;
  _19 = (long unsigned int) _18;
  CanIf_PduInfo_35(D)->SduLength = _19;

  <bb 13> :
  _20 = Can_pHwObjectConfig_32(D)->Can_HwObjectID;
  CanIf_Mailbox_29(D)->Hoh = _20;
  _21 = Can_pControllerConfig_39(D)->Can_u8AbstControllerID;
  CanIf_Mailbox_29(D)->ControllerId = _21;
  _22 = &pReceivedDataBuffer_28(D)->data[0];
  CanIf_PduInfo_35(D)->SduDataPtr = _22;
  CanIf_RxIndication (CanIf_Mailbox_29(D), CanIf_PduInfo_35(D));
  return;

}


