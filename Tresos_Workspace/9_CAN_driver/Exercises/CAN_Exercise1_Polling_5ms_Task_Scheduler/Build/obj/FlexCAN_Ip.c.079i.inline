IPA summary for FlexCAN_Ip_ManualBusOffRecovery/103 is missing.
IPA summary for FlexCAN_Ip_GetListenOnlyMode/102 is missing.
IPA summary for FlexCAN_Ip_SetListenOnlyMode_Privileged/101 is missing.
IPA summary for FlexCAN_Ip_SetRxMb15Mask_Privileged/100 is missing.
IPA summary for FlexCAN_Ip_SetRxMb14Mask_Privileged/99 is missing.
IPA summary for FlexCAN_Ip_AbortTransfer/98 is missing.
IPA summary for FlexCAN_Ip_SetErrorInt_Privileged/97 is missing.
IPA summary for FlexCAN_Ip_DisableInterrupts_Privileged/96 is missing.
IPA summary for FlexCAN_Ip_EnableInterrupts_Privileged/95 is missing.
IPA summary for FlexCAN_Ip_ClearBuffStatusFlag/94 is missing.
IPA summary for FlexCAN_Ip_GetBuffStatusFlag/93 is missing.
IPA summary for FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/92 is missing.
IPA summary for FlexCAN_Ip_SetTDCOffset_Privileged/91 is missing.
IPA summary for FlexCAN_Ip_GetBitrateFD/90 is missing.
IPA summary for FlexCAN_Ip_SetBitrateCbt_Privileged/89 is missing.
IPA summary for FlexCAN_Ip_GetTDCValue/88 is missing.
IPA summary for FlexCAN_Ip_GetTDCFail/87 is missing.
IPA summary for FlexCAN_Ip_ClearTDCFail/86 is missing.
IPA summary for FlexCAN_Ip_GetBitrate/85 is missing.
IPA summary for FlexCAN_Ip_SetBitrate_Privileged/84 is missing.
IPA summary for FlexCAN_Ip_SetRxMaskType_Privileged/83 is missing.
IPA summary for FlexCAN_Ip_SetStopMode_Privileged/82 is missing.
IPA summary for FlexCAN_Ip_SetStartMode_Privileged/81 is missing.
IPA summary for FlexCAN_Ip_GetStartMode_Privileged/80 is missing.
IPA summary for FlexCAN_Ip_GetStopMode_Privileged/79 is missing.
IPA summary for FlexCAN_Ip_MainFunctionWrite/78 is missing.
IPA summary for FlexCAN_Ip_MainFunctionBusOff_Privileged/77 is missing.
IPA summary for FlexCAN_Ip_MainFunctionRead/76 is missing.
IPA summary for FlexCAN_Ip_Deinit_Privileged/75 is missing.
IPA summary for FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/74 is missing.
IPA summary for FlexCAN_Ip_SetRxIndividualMask_Privileged/73 is missing.
IPA summary for FlexCAN_Ip_ExitFreezeMode_Privileged/72 is missing.
IPA summary for FlexCAN_Ip_EnterFreezeMode_Privileged/71 is missing.
IPA summary for FlexCAN_Ip_SetRxMbGlobalMask_Privileged/70 is missing.
IPA summary for FlexCAN_Ip_SendBlocking/69 is missing.
IPA summary for FlexCAN_BusOff_IRQHandler/68 is missing.
IPA summary for FlexCAN_Error_IRQHandler/67 is missing.
IPA summary for FlexCAN_Ip_GetControllerRxErrorCounter/66 is missing.
IPA summary for FlexCAN_Ip_GetControllerTxErrorCounter/65 is missing.
IPA summary for FlexCAN_Ip_GetErrorStatus/64 is missing.
IPA summary for FlexCAN_Ip_ClearErrorStatus/63 is missing.
IPA summary for FlexCAN_IRQHandler/62 is missing.
IPA summary for FlexCAN_CompleteRxMessageFifoData/61 is missing.
IPA summary for FlexCAN_Ip_GetTransferStatus/60 is missing.
IPA summary for FlexCAN_Ip_ConfigRemoteResponseMb/59 is missing.
IPA summary for FlexCAN_Ip_ConfigRxFifo_Privileged/58 is missing.
IPA summary for FlexCAN_Ip_RxFifoBlocking/57 is missing.
IPA summary for FlexCAN_Ip_RxFifo/56 is missing.
IPA summary for FlexCAN_Ip_ReceiveBlocking/55 is missing.
IPA summary for FlexCAN_Ip_Receive/54 is missing.
IPA summary for FlexCAN_Ip_ConfigRxMb/53 is missing.
IPA summary for FlexCAN_Ip_Send/52 is missing.
IPA summary for FlexCAN_Ip_Init_Privileged/51 is missing.
IPA summary for FlexCAN_AbortRxTransfer/50 is missing.
IPA summary for FlexCAN_AbortTxTransfer/49 is missing.
IPA summary for FlexCAN_IRQHandlerRxFIFO/48 is missing.
IPA summary for FlexCAN_IRQHandlerTxMB/47 is missing.
IPA summary for FlexCAN_IRQHandlerRxMB/46 is missing.
IPA summary for FlexCAN_StartRxMessageFifoData/45 is missing.
IPA summary for FlexCAN_StartSendData/44 is missing.
IPA summary for FlexCAN_StartRxMessageBufferData/43 is missing.
IPA summary for FlexCAN_ProccessLegacyRxFIFO/42 is missing.
IPA summary for FlexCAN_InitBaudrate/41 is missing.
IPA summary for FlexCAN_InitController/40 is missing.
IPA summary for FlexCAN_InitCtroll/39 is missing.
IPA summary for FlexCAN_InitRxFifo/38 is missing.
IPA summary for FlexCAN_SetRegDefaultVal/35 is missing.
IPA summary for FlexCAN_SetRxMaskType/34 is missing.
IPA summary for FlexCAN_SetTxArbitrationStartDelay/33 is missing.
IPA summary for FlexCAN_SetRxIndividualMask/31 is missing.
IPA summary for FlexCAN_SetRxMsgBuffGlobalMask/30 is missing.
IPA summary for FlexCAN_GetMsgBuffIntStatusFlag/29 is missing.
IPA summary for FlexCAN_SetClkSrc/28 is missing.
IPA summary for RxFifoOcuppiedLastMsgBuff/20 is missing.
IPA summary for FlexCAN_IsListenOnlyModeEnabled/19 is missing.
IPA summary for FlexCAN_IsFDEnabled/18 is missing.
IPA summary for FlexCAN_SetSelfReception/17 is missing.
IPA summary for FlexCAN_EnableExtCbt/16 is missing.
IPA summary for FlexCAN_IsExCbtEnabled/15 is missing.
IPA summary for FlexCAN_GetFDTimeSegments/14 is missing.
IPA summary for FlexCAN_GetTimeSegments/13 is missing.
IPA summary for FlexCAN_GetExtendedTimeSegments/12 is missing.
IPA summary for FlexCAN_SetExtendedTimeSegments/11 is missing.
IPA summary for FlexCAN_SetTimeSegments/10 is missing.
IPA summary for FlexCAN_SetFDTimeSegments/9 is missing.
IPA summary for FlexCAN_GetBuffStatusFlag/7 is missing.
IPA summary for FlexCAN_ClearMsgBuffIntStatusFlag/6 is missing.
IPA summary for FlexCAN_UnlockRxMsgBuff/5 is missing.
IPA summary for FlexCAN_SetListenOnlyMode/4 is missing.
IPA summary for FlexCAN_SetFDEnabled/3 is missing.
IPA summary for FlexCAN_IsEnabled/2 is missing.
IPA summary for FlexCAN_SetTDCOffset/1 is missing.
IPA summary for FlexCAN_SetRxFifoGlobalMask/0 is missing.

Flattening functions:
Overall time estimate: 0.000000 weighted by profile: 0.000000

Deciding on inlining of small functions.  Starting with size 0.
node context cache: 0 hits, 0 misses, 0 initializations

Reclaiming functions:
Reclaiming variables:
Clearing address taken flags:

Deciding on functions to be inlined into all callers and removing useless speculations:
Overall time estimate: 0.000000 weighted by profile: 0.000000

Why inlining failed?
function not considered for inlining              :       98 calls, 98.000000 freq, 0 count
function body not available                       :      129 calls, 129.000000 freq, 0 count
IPA summary for FlexCAN_Ip_ManualBusOffRecovery/103 is missing.
IPA summary for FlexCAN_Ip_GetListenOnlyMode/102 is missing.
IPA summary for FlexCAN_Ip_SetListenOnlyMode_Privileged/101 is missing.
IPA summary for FlexCAN_Ip_SetRxMb15Mask_Privileged/100 is missing.
IPA summary for FlexCAN_Ip_SetRxMb14Mask_Privileged/99 is missing.
IPA summary for FlexCAN_Ip_AbortTransfer/98 is missing.
IPA summary for FlexCAN_Ip_SetErrorInt_Privileged/97 is missing.
IPA summary for FlexCAN_Ip_DisableInterrupts_Privileged/96 is missing.
IPA summary for FlexCAN_Ip_EnableInterrupts_Privileged/95 is missing.
IPA summary for FlexCAN_Ip_ClearBuffStatusFlag/94 is missing.
IPA summary for FlexCAN_Ip_GetBuffStatusFlag/93 is missing.
IPA summary for FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/92 is missing.
IPA summary for FlexCAN_Ip_SetTDCOffset_Privileged/91 is missing.
IPA summary for FlexCAN_Ip_GetBitrateFD/90 is missing.
IPA summary for FlexCAN_Ip_SetBitrateCbt_Privileged/89 is missing.
IPA summary for FlexCAN_Ip_GetTDCValue/88 is missing.
IPA summary for FlexCAN_Ip_GetTDCFail/87 is missing.
IPA summary for FlexCAN_Ip_ClearTDCFail/86 is missing.
IPA summary for FlexCAN_Ip_GetBitrate/85 is missing.
IPA summary for FlexCAN_Ip_SetBitrate_Privileged/84 is missing.
IPA summary for FlexCAN_Ip_SetRxMaskType_Privileged/83 is missing.
IPA summary for FlexCAN_Ip_SetStopMode_Privileged/82 is missing.
IPA summary for FlexCAN_Ip_SetStartMode_Privileged/81 is missing.
IPA summary for FlexCAN_Ip_GetStartMode_Privileged/80 is missing.
IPA summary for FlexCAN_Ip_GetStopMode_Privileged/79 is missing.
IPA summary for FlexCAN_Ip_MainFunctionWrite/78 is missing.
IPA summary for FlexCAN_Ip_MainFunctionBusOff_Privileged/77 is missing.
IPA summary for FlexCAN_Ip_MainFunctionRead/76 is missing.
IPA summary for FlexCAN_Ip_Deinit_Privileged/75 is missing.
IPA summary for FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/74 is missing.
IPA summary for FlexCAN_Ip_SetRxIndividualMask_Privileged/73 is missing.
IPA summary for FlexCAN_Ip_ExitFreezeMode_Privileged/72 is missing.
IPA summary for FlexCAN_Ip_EnterFreezeMode_Privileged/71 is missing.
IPA summary for FlexCAN_Ip_SetRxMbGlobalMask_Privileged/70 is missing.
IPA summary for FlexCAN_Ip_SendBlocking/69 is missing.
IPA summary for FlexCAN_BusOff_IRQHandler/68 is missing.
IPA summary for FlexCAN_Error_IRQHandler/67 is missing.
IPA summary for FlexCAN_Ip_GetControllerRxErrorCounter/66 is missing.
IPA summary for FlexCAN_Ip_GetControllerTxErrorCounter/65 is missing.
IPA summary for FlexCAN_Ip_GetErrorStatus/64 is missing.
IPA summary for FlexCAN_Ip_ClearErrorStatus/63 is missing.
IPA summary for FlexCAN_IRQHandler/62 is missing.
IPA summary for FlexCAN_CompleteRxMessageFifoData/61 is missing.
IPA summary for FlexCAN_Ip_GetTransferStatus/60 is missing.
IPA summary for FlexCAN_Ip_ConfigRemoteResponseMb/59 is missing.
IPA summary for FlexCAN_Ip_ConfigRxFifo_Privileged/58 is missing.
IPA summary for FlexCAN_Ip_RxFifoBlocking/57 is missing.
IPA summary for FlexCAN_Ip_RxFifo/56 is missing.
IPA summary for FlexCAN_Ip_ReceiveBlocking/55 is missing.
IPA summary for FlexCAN_Ip_Receive/54 is missing.
IPA summary for FlexCAN_Ip_ConfigRxMb/53 is missing.
IPA summary for FlexCAN_Ip_Send/52 is missing.
IPA summary for FlexCAN_Ip_Init_Privileged/51 is missing.
IPA summary for FlexCAN_AbortRxTransfer/50 is missing.
IPA summary for FlexCAN_AbortTxTransfer/49 is missing.
IPA summary for FlexCAN_IRQHandlerRxFIFO/48 is missing.
IPA summary for FlexCAN_IRQHandlerTxMB/47 is missing.
IPA summary for FlexCAN_IRQHandlerRxMB/46 is missing.
IPA summary for FlexCAN_StartRxMessageFifoData/45 is missing.
IPA summary for FlexCAN_StartSendData/44 is missing.
IPA summary for FlexCAN_StartRxMessageBufferData/43 is missing.
IPA summary for FlexCAN_ProccessLegacyRxFIFO/42 is missing.
IPA summary for FlexCAN_InitBaudrate/41 is missing.
IPA summary for FlexCAN_InitController/40 is missing.
IPA summary for FlexCAN_InitCtroll/39 is missing.
IPA summary for FlexCAN_InitRxFifo/38 is missing.
IPA summary for FlexCAN_SetRegDefaultVal/35 is missing.
IPA summary for FlexCAN_SetRxMaskType/34 is missing.
IPA summary for FlexCAN_SetTxArbitrationStartDelay/33 is missing.
IPA summary for FlexCAN_SetRxIndividualMask/31 is missing.
IPA summary for FlexCAN_SetRxMsgBuffGlobalMask/30 is missing.
IPA summary for FlexCAN_GetMsgBuffIntStatusFlag/29 is missing.
IPA summary for FlexCAN_SetClkSrc/28 is missing.
IPA summary for RxFifoOcuppiedLastMsgBuff/20 is missing.
IPA summary for FlexCAN_IsListenOnlyModeEnabled/19 is missing.
IPA summary for FlexCAN_IsFDEnabled/18 is missing.
IPA summary for FlexCAN_SetSelfReception/17 is missing.
IPA summary for FlexCAN_EnableExtCbt/16 is missing.
IPA summary for FlexCAN_IsExCbtEnabled/15 is missing.
IPA summary for FlexCAN_GetFDTimeSegments/14 is missing.
IPA summary for FlexCAN_GetTimeSegments/13 is missing.
IPA summary for FlexCAN_GetExtendedTimeSegments/12 is missing.
IPA summary for FlexCAN_SetExtendedTimeSegments/11 is missing.
IPA summary for FlexCAN_SetTimeSegments/10 is missing.
IPA summary for FlexCAN_SetFDTimeSegments/9 is missing.
IPA summary for FlexCAN_GetBuffStatusFlag/7 is missing.
IPA summary for FlexCAN_ClearMsgBuffIntStatusFlag/6 is missing.
IPA summary for FlexCAN_UnlockRxMsgBuff/5 is missing.
IPA summary for FlexCAN_SetListenOnlyMode/4 is missing.
IPA summary for FlexCAN_SetFDEnabled/3 is missing.
IPA summary for FlexCAN_IsEnabled/2 is missing.
IPA summary for FlexCAN_SetTDCOffset/1 is missing.
IPA summary for FlexCAN_SetRxFifoGlobalMask/0 is missing.
Symbol table:

SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20/149 (SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20) @0e7dbee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/103 
  Calls: 
SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20/148 (SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20) @0e7dbe00
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/103 
  Calls: 
SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10/147 (SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10) @0e7dba80
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/101 
  Calls: 
SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10/146 (SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10) @0e7db9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/101 
  Calls: 
FlexCAN_SetErrIntCmd/145 (FlexCAN_SetErrIntCmd) @0e7db540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetErrorInt_Privileged/97 FlexCAN_Ip_SetErrorInt_Privileged/97 FlexCAN_Ip_SetErrorInt_Privileged/97 FlexCAN_Ip_SetErrorInt_Privileged/97 FlexCAN_Ip_SetErrorInt_Privileged/97 
  Calls: 
FlexCAN_DisableInterrupts/144 (FlexCAN_DisableInterrupts) @0e7db380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_DisableInterrupts_Privileged/96 
  Calls: 
FlexCAN_EnableInterrupts/143 (FlexCAN_EnableInterrupts) @0e7db1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_EnableInterrupts_Privileged/95 
  Calls: 
SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17/142 (SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17) @0e7cfd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/92 
  Calls: 
SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17/141 (SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17) @0e7cfc40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/92 
  Calls: 
SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16/140 (SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16) @0e7cf9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/91 
  Calls: 
SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16/139 (SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16) @0e7cf8c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/91 
  Calls: 
SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15/138 (SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15) @0e7cf460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/89 
  Calls: 
SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15/137 (SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15) @0e7cf380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/89 
  Calls: 
SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09/136 (SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09) @0e7cf000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ClearTDCFail/86 
  Calls: 
SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09/135 (SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09) @0e7c1ee0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ClearTDCFail/86 
  Calls: 
SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14/134 (SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14) @0e7c19a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetBitrate_Privileged/84 
  Calls: 
SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14/133 (SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14) @0e7c18c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetBitrate_Privileged/84 
  Calls: 
SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08/132 (SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08) @0e7c1620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetRxMaskType_Privileged/83 
  Calls: 
SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08/131 (SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08) @0e7c1540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetRxMaskType_Privileged/83 
  Calls: 
SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07/130 (SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07) @0e7c12a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetStartMode_Privileged/81 
  Calls: 
SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07/129 (SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07) @0e7c11c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetStartMode_Privileged/81 
  Calls: 
FlexCAN_ExitFreezeMode/128 (FlexCAN_ExitFreezeMode) @0e7a9620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetStartMode_Privileged/81 FlexCAN_Ip_ExitFreezeMode_Privileged/72 
  Calls: 
FlexCAN_SetRxFifoFilter/127 (FlexCAN_SetRxFifoFilter) @0e74e460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ConfigRxFifo_Privileged/58 
  Calls: 
FlexCAN_Enable/126 (FlexCAN_Enable) @0e74e380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/101 FlexCAN_Ip_SetRxMb15Mask_Privileged/100 FlexCAN_Ip_SetRxMb14Mask_Privileged/99 FlexCAN_Ip_SetErrorInt_Privileged/97 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/92 FlexCAN_Ip_SetTDCOffset_Privileged/91 FlexCAN_Ip_SetBitrateCbt_Privileged/89 FlexCAN_Ip_SetBitrate_Privileged/84 FlexCAN_Ip_SetRxMaskType_Privileged/83 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/74 FlexCAN_Ip_SetRxIndividualMask_Privileged/73 FlexCAN_Ip_SetRxMbGlobalMask_Privileged/70 FlexCAN_Ip_ConfigRxFifo_Privileged/58 
  Calls: 
FlexCAN_SetRxMsgBuff/125 (FlexCAN_SetRxMsgBuff) @0e73cd20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ConfigRxMb/53 FlexCAN_Ip_ConfigRxMb/53 FlexCAN_Ip_ConfigRxMb/53 
  Calls: 
FlexCAN_SetOperationMode/124 (FlexCAN_SetOperationMode) @0e73c9a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_Init_Privileged/51 
  Calls: 
FLEXCAN_ClearMsgBuffIntCmd/123 (FLEXCAN_ClearMsgBuffIntCmd) @0e73c700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_AbortTransfer/98 FlexCAN_AbortRxTransfer/50 
  Calls: 
FlexCAN_GetMsgBuffTimestamp/122 (FlexCAN_GetMsgBuffTimestamp) @0e73c460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_MainFunctionWrite/78 FlexCAN_IRQHandlerTxMB/47 
  Calls: 
FlexCAN_GetMsgBuff/121 (FlexCAN_GetMsgBuff) @0e73c1c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_MainFunctionWrite/78 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerRxMB/46 
  Calls: 
FlexCAN_LockRxMsgBuff/120 (FlexCAN_LockRxMsgBuff) @0e73c0e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_MainFunctionWrite/78 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerRxMB/46 
  Calls: 
FlexCAN_SetTxMsgBuff/119 (FlexCAN_SetTxMsgBuff) @0e728d20
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ConfigRemoteResponseMb/59 FlexCAN_StartSendData/44 
  Calls: 
FlexCAN_GetMsgBuffRegion/118 (FlexCAN_GetMsgBuffRegion) @0e728c40
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SendBlocking/69 FlexCAN_Ip_ConfigRemoteResponseMb/59 FlexCAN_AbortRxTransfer/50 FlexCAN_AbortRxTransfer/50 FlexCAN_AbortTxTransfer/49 FlexCAN_IRQHandlerRxMB/46 FlexCAN_StartSendData/44 
  Calls: 
FlexCAN_ReadRxFifo/117 (FlexCAN_ReadRxFifo) @0e7288c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_IRQHandlerRxFIFO/48 
  Calls: 
FlexCAN_SetMsgBuffIntCmd/116 (FlexCAN_SetMsgBuffIntCmd) @0e728620
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_ProccessLegacyRxFIFO/42 FlexCAN_ProccessLegacyRxFIFO/42 FlexCAN_ProccessLegacyRxFIFO/42 FlexCAN_CompleteRxMessageFifoData/61 FlexCAN_CompleteRxMessageFifoData/61 FlexCAN_CompleteRxMessageFifoData/61 FlexCAN_Ip_ConfigRemoteResponseMb/59 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerRxMB/46 FlexCAN_IRQHandlerRxMB/46 FlexCAN_StartRxMessageFifoData/45 FlexCAN_StartRxMessageFifoData/45 FlexCAN_StartRxMessageFifoData/45 
  Calls: 
OsIf_GetElapsed/115 (OsIf_GetElapsed) @0e728540
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/103 FlexCAN_Ip_SendBlocking/69 FlexCAN_Ip_SendBlocking/69 FlexCAN_ProccessLegacyRxFIFO/42 FlexCAN_Ip_ReceiveBlocking/55 FlexCAN_AbortTxTransfer/49 
  Calls: 
OsIf_GetCounter/114 (OsIf_GetCounter) @0e728460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/103 FlexCAN_Ip_SendBlocking/69 FlexCAN_Ip_SendBlocking/69 FlexCAN_ProccessLegacyRxFIFO/42 FlexCAN_Ip_ReceiveBlocking/55 FlexCAN_AbortTxTransfer/49 
  Calls: 
OsIf_MicrosToTicks/113 (OsIf_MicrosToTicks) @0e728380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_ManualBusOffRecovery/103 FlexCAN_Ip_SendBlocking/69 FlexCAN_Ip_SendBlocking/69 FlexCAN_ProccessLegacyRxFIFO/42 FlexCAN_Ip_ReceiveBlocking/55 FlexCAN_AbortTxTransfer/49 
  Calls: 
FlexCAN_ResetImaskBuff/112 (FlexCAN_ResetImaskBuff) @0e7189a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitController/40 
  Calls: 
FlexCAN_ConfigCtrlOptions/111 (FlexCAN_ConfigCtrlOptions) @0e7188c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitController/40 
  Calls: 
FlexCAN_IsFDAvailable/110 (FlexCAN_IsFDAvailable) @0e7187e0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitController/40 FlexCAN_SetRegDefaultVal/35 
  Calls: 
FlexCAN_Init/109 (FlexCAN_Init) @0e718700
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitController/40 
  Calls: 
FlexCAN_SetMaxMsgBuffNum/108 (FlexCAN_SetMaxMsgBuffNum) @0e718460
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitCtroll/39 
  Calls: 
FlexCAN_SetPayloadSize/107 (FlexCAN_SetPayloadSize) @0e718380
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitCtroll/39 
  Calls: 
FlexCAN_Disable/106 (FlexCAN_Disable) @0e7182a0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/101 FlexCAN_Ip_SetRxMb15Mask_Privileged/100 FlexCAN_Ip_SetRxMb14Mask_Privileged/99 FlexCAN_Ip_SetErrorInt_Privileged/97 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/92 FlexCAN_Ip_SetTDCOffset_Privileged/91 FlexCAN_Ip_SetBitrateCbt_Privileged/89 FlexCAN_Ip_SetBitrate_Privileged/84 FlexCAN_Ip_SetRxMaskType_Privileged/83 FlexCAN_Ip_SetStopMode_Privileged/82 FlexCAN_Ip_Deinit_Privileged/75 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/74 FlexCAN_Ip_SetRxIndividualMask_Privileged/73 FlexCAN_Ip_SetRxMbGlobalMask_Privileged/70 FlexCAN_Ip_ConfigRxFifo_Privileged/58 FlexCAN_InitController/40 FlexCAN_InitController/40 FlexCAN_InitCtroll/39 
  Calls: 
FlexCAN_EnterFreezeMode/105 (FlexCAN_EnterFreezeMode) @0e7181c0
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_Ip_SetStopMode_Privileged/82 FlexCAN_Ip_Deinit_Privileged/75 FlexCAN_Ip_EnterFreezeMode_Privileged/71 FlexCAN_InitController/40 FlexCAN_InitController/40 FlexCAN_InitCtroll/39 
  Calls: 
FlexCAN_EnableRxFifo/104 (FlexCAN_EnableRxFifo) @0e718000
  Type: function
  Visibility: external public
  References: 
  Referring: 
  Availability: not_available
  Function flags:
  Called by: FlexCAN_InitRxFifo/38 
  Calls: 
FlexCAN_Ip_ManualBusOffRecovery/103 (FlexCAN_Ip_ManualBusOffRecovery) @0e6c92a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/115 OsIf_GetCounter/114 SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20/149 SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20/148 OsIf_MicrosToTicks/113 
FlexCAN_Ip_GetListenOnlyMode/102 (FlexCAN_Ip_GetListenOnlyMode) @0e6c9ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_IsListenOnlyModeEnabled/19 
FlexCAN_Ip_SetListenOnlyMode_Privileged/101 (FlexCAN_Ip_SetListenOnlyMode_Privileged) @0e6c9c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10/147 FlexCAN_SetListenOnlyMode/4 SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10/146 FlexCAN_Enable/126 FlexCAN_IsEnabled/2 
FlexCAN_Ip_SetRxMb15Mask_Privileged/100 (FlexCAN_Ip_SetRxMb15Mask_Privileged) @0e6c99a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 FlexCAN_Enable/126 FlexCAN_IsEnabled/2 
FlexCAN_Ip_SetRxMb14Mask_Privileged/99 (FlexCAN_Ip_SetRxMb14Mask_Privileged) @0e6c9700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 FlexCAN_Enable/126 FlexCAN_IsEnabled/2 
FlexCAN_Ip_AbortTransfer/98 (FlexCAN_Ip_AbortTransfer) @0e6c9460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_AbortRxTransfer/50 FlexCAN_AbortTxTransfer/49 FLEXCAN_ClearMsgBuffIntCmd/123 
FlexCAN_Ip_SetErrorInt_Privileged/97 (FlexCAN_Ip_SetErrorInt_Privileged) @0e6c91c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 FlexCAN_SetErrIntCmd/145 FlexCAN_SetErrIntCmd/145 FlexCAN_SetErrIntCmd/145 FlexCAN_SetErrIntCmd/145 FlexCAN_SetErrIntCmd/145 FlexCAN_Enable/126 FlexCAN_IsEnabled/2 
FlexCAN_Ip_DisableInterrupts_Privileged/96 (FlexCAN_Ip_DisableInterrupts_Privileged) @0e6c3d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_DisableInterrupts/144 FlexCAN_IsEnabled/2 
FlexCAN_Ip_EnableInterrupts_Privileged/95 (FlexCAN_Ip_EnableInterrupts_Privileged) @0e6c37e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_EnableInterrupts/143 FlexCAN_IsEnabled/2 
FlexCAN_Ip_ClearBuffStatusFlag/94 (FlexCAN_Ip_ClearBuffStatusFlag) @0e6c32a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/6 
FlexCAN_Ip_GetBuffStatusFlag/93 (FlexCAN_Ip_GetBuffStatusFlag) @0e6c3ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetBuffStatusFlag/7 
FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/92 (FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged) @0e6c3c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17/142 FlexCAN_SetTxArbitrationStartDelay/33 SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17/141 FlexCAN_Enable/126 FlexCAN_IsEnabled/2 
FlexCAN_Ip_SetTDCOffset_Privileged/91 (FlexCAN_Ip_SetTDCOffset_Privileged) @0e6c39a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16/140 FlexCAN_SetTDCOffset/1 SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16/139 FlexCAN_Enable/126 FlexCAN_IsEnabled/2 
FlexCAN_Ip_GetBitrateFD/90 (FlexCAN_Ip_GetBitrateFD) @0e6c3700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetFDTimeSegments/14 
FlexCAN_Ip_SetBitrateCbt_Privileged/89 (FlexCAN_Ip_SetBitrateCbt_Privileged) @0e6c3460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15/138 FlexCAN_SetFDTimeSegments/9 FlexCAN_SetFDEnabled/3 SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15/137 FlexCAN_Enable/126 FlexCAN_IsFDEnabled/18 
FlexCAN_Ip_GetTDCValue/88 (FlexCAN_Ip_GetTDCValue) @0e6c31c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_GetTDCFail/87 (FlexCAN_Ip_GetTDCFail) @0e6bbd20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_ClearTDCFail/86 (FlexCAN_Ip_ClearTDCFail) @0e6bb7e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09/136 SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09/135 
FlexCAN_Ip_GetBitrate/85 (FlexCAN_Ip_GetBitrate) @0e6bb2a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_GetTimeSegments/13 FlexCAN_GetExtendedTimeSegments/12 FlexCAN_IsExCbtEnabled/15 
FlexCAN_Ip_SetBitrate_Privileged/84 (FlexCAN_Ip_SetBitrate_Privileged) @0e6bbee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14/134 FlexCAN_SetTimeSegments/10 FlexCAN_SetExtendedTimeSegments/11 FlexCAN_IsExCbtEnabled/15 SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14/133 FlexCAN_Enable/126 
FlexCAN_Ip_SetRxMaskType_Privileged/83 (FlexCAN_Ip_SetRxMaskType_Privileged) @0e6bbc40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08/132 FlexCAN_SetRxMaskType/34 SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08/131 FlexCAN_Enable/126 FlexCAN_IsEnabled/2 
FlexCAN_Ip_SetStopMode_Privileged/82 (FlexCAN_Ip_SetStopMode_Privileged) @0e6bb9a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 FlexCAN_EnterFreezeMode/105 
FlexCAN_Ip_SetStartMode_Privileged/81 (FlexCAN_Ip_SetStartMode_Privileged) @0e6bb700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ExitFreezeMode/128 SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07/130 SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07/129 
FlexCAN_Ip_GetStartMode_Privileged/80 (FlexCAN_Ip_GetStartMode_Privileged) @0e6bb460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_GetStopMode_Privileged/79 (FlexCAN_Ip_GetStopMode_Privileged) @0e6bb1c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_MainFunctionWrite/78 (FlexCAN_Ip_MainFunctionWrite) @0e6b1d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_UnlockRxMsgBuff/5 FlexCAN_GetMsgBuffTimestamp/122 FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_UnlockRxMsgBuff/5 FlexCAN_GetMsgBuff/121 FlexCAN_LockRxMsgBuff/120 FlexCAN_GetBuffStatusFlag/7 
   Indirect call Num speculative call targets: 0
FlexCAN_Ip_MainFunctionBusOff_Privileged/77 (FlexCAN_Ip_MainFunctionBusOff_Privileged) @0e6b17e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
FlexCAN_Ip_MainFunctionRead/76 (FlexCAN_Ip_MainFunctionRead) @0e6b12a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_IRQHandlerRxMB/46 FlexCAN_GetBuffStatusFlag/7 FlexCAN_IRQHandlerRxFIFO/48 FlexCAN_GetBuffStatusFlag/7 
FlexCAN_Ip_Deinit_Privileged/75 (FlexCAN_Ip_Deinit_Privileged) @0e6b1ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 FlexCAN_SetRegDefaultVal/35 FlexCAN_EnterFreezeMode/105 
FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/74 (FlexCAN_Ip_SetRxFifoGlobalMask_Privileged) @0e6b1c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 FlexCAN_SetRxFifoGlobalMask/0 FlexCAN_Enable/126 FlexCAN_IsEnabled/2 
FlexCAN_Ip_SetRxIndividualMask_Privileged/73 (FlexCAN_Ip_SetRxIndividualMask_Privileged) @0e6b19a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 FlexCAN_SetRxIndividualMask/31 FlexCAN_Enable/126 FlexCAN_IsEnabled/2 
FlexCAN_Ip_ExitFreezeMode_Privileged/72 (FlexCAN_Ip_ExitFreezeMode_Privileged) @0e6b1700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ExitFreezeMode/128 
FlexCAN_Ip_EnterFreezeMode_Privileged/71 (FlexCAN_Ip_EnterFreezeMode_Privileged) @0e6b1460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_EnterFreezeMode/105 
FlexCAN_Ip_SetRxMbGlobalMask_Privileged/70 (FlexCAN_Ip_SetRxMbGlobalMask_Privileged) @0e6b11c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 FlexCAN_SetRxMsgBuffGlobalMask/30 FlexCAN_Enable/126 FlexCAN_IsEnabled/2 
FlexCAN_Ip_SendBlocking/69 (FlexCAN_Ip_SendBlocking) @0e6a1d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_GetBuffStatusFlag/7 OsIf_GetElapsed/115 OsIf_GetCounter/114 OsIf_MicrosToTicks/113 FlexCAN_GetMsgBuffRegion/118 FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_GetBuffStatusFlag/7 OsIf_GetElapsed/115 OsIf_GetCounter/114 FlexCAN_StartSendData/44 OsIf_MicrosToTicks/113 
FlexCAN_BusOff_IRQHandler/68 (FlexCAN_BusOff_IRQHandler) @0e6a17e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
FlexCAN_Error_IRQHandler/67 (FlexCAN_Error_IRQHandler) @0e6a12a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
FlexCAN_Ip_GetControllerRxErrorCounter/66 (FlexCAN_Ip_GetControllerRxErrorCounter) @0e6a1ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_GetControllerTxErrorCounter/65 (FlexCAN_Ip_GetControllerTxErrorCounter) @0e6a1c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_GetErrorStatus/64 (FlexCAN_Ip_GetErrorStatus) @0e6a19a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_ClearErrorStatus/63 (FlexCAN_Ip_ClearErrorStatus) @0e6a1700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_IRQHandler/62 (FlexCAN_IRQHandler) @0e6a1460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_GetMsgBuffIntStatusFlag/29 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerRxMB/46 FlexCAN_IRQHandlerRxFIFO/48 FlexCAN_GetMsgBuffIntStatusFlag/29 FlexCAN_GetMsgBuffIntStatusFlag/29 
FlexCAN_CompleteRxMessageFifoData/61 (FlexCAN_CompleteRxMessageFifoData) @0e6a11c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_IRQHandlerRxFIFO/48 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 
FlexCAN_Ip_GetTransferStatus/60 (FlexCAN_Ip_GetTransferStatus) @0e697d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: 
FlexCAN_Ip_ConfigRemoteResponseMb/59 (FlexCAN_Ip_ConfigRemoteResponseMb) @0e6977e0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetTxMsgBuff/119 FlexCAN_GetMsgBuffRegion/118 FlexCAN_ClearMsgBuffIntStatusFlag/6 
FlexCAN_Ip_ConfigRxFifo_Privileged/58 (FlexCAN_Ip_ConfigRxFifo_Privileged) @0e6972a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_Disable/106 FlexCAN_SetRxFifoFilter/127 FlexCAN_Enable/126 FlexCAN_IsEnabled/2 
FlexCAN_Ip_RxFifoBlocking/57 (FlexCAN_Ip_RxFifoBlocking) @0e697ee0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_ProccessLegacyRxFIFO/42 FlexCAN_StartRxMessageFifoData/45 
FlexCAN_Ip_RxFifo/56 (FlexCAN_Ip_RxFifo) @0e697c40
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_StartRxMessageFifoData/45 
FlexCAN_Ip_ReceiveBlocking/55 (FlexCAN_Ip_ReceiveBlocking) @0e6979a0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxState/37 (read) Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: OsIf_GetElapsed/115 FlexCAN_IRQHandlerRxMB/46 FlexCAN_GetBuffStatusFlag/7 OsIf_GetCounter/114 FlexCAN_StartRxMessageBufferData/43 OsIf_MicrosToTicks/113 
FlexCAN_Ip_Receive/54 (FlexCAN_Ip_Receive) @0e697700
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_StartRxMessageBufferData/43 
FlexCAN_Ip_ConfigRxMb/53 (FlexCAN_Ip_ConfigRxMb) @0e697460
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetRxMsgBuff/125 FlexCAN_SetRxMsgBuff/125 FlexCAN_SetRxMsgBuff/125 FlexCAN_ClearMsgBuffIntStatusFlag/6 
FlexCAN_Ip_Send/52 (FlexCAN_Ip_Send) @0e6971c0
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_StartSendData/44 FlexCAN_IsListenOnlyModeEnabled/19 
FlexCAN_Ip_Init_Privileged/51 (FlexCAN_Ip_Init_Privileged) @0e683d20
  Type: function definition analyzed
  Visibility: force_output externally_visible no_reorder public
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (write) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: 
  Calls: FlexCAN_SetOperationMode/124 FlexCAN_InitBaudrate/41 FlexCAN_InitController/40 
FlexCAN_AbortRxTransfer/50 (FlexCAN_AbortRxTransfer) @0e6837e0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_AbortTransfer/98 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_GetMsgBuffRegion/118 FLEXCAN_ClearMsgBuffIntCmd/123 FlexCAN_GetMsgBuffRegion/118 RxFifoOcuppiedLastMsgBuff/20 
FlexCAN_AbortTxTransfer/49 (FlexCAN_AbortTxTransfer) @0e6832a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_AbortTransfer/98 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_GetBuffStatusFlag/7 OsIf_GetElapsed/115 OsIf_GetCounter/114 OsIf_MicrosToTicks/113 FlexCAN_GetMsgBuffRegion/118 
FlexCAN_IRQHandlerRxFIFO/48 (FlexCAN_IRQHandlerRxFIFO) @0e683ee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_MainFunctionRead/76 FlexCAN_IRQHandler/62 FlexCAN_ProccessLegacyRxFIFO/42 
  Calls: FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_CompleteRxMessageFifoData/61 FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_ReadRxFifo/117 
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
   Indirect call Num speculative call targets: 0
FlexCAN_IRQHandlerTxMB/47 (FlexCAN_IRQHandlerTxMB) @0e683c40
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_IRQHandler/62 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_UnlockRxMsgBuff/5 FlexCAN_GetMsgBuffTimestamp/122 FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_UnlockRxMsgBuff/5 FlexCAN_GetMsgBuff/121 FlexCAN_LockRxMsgBuff/120 
   Indirect call Num speculative call targets: 0
FlexCAN_IRQHandlerRxMB/46 (FlexCAN_IRQHandlerRxMB) @0e6839a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_MainFunctionRead/76 FlexCAN_IRQHandler/62 FlexCAN_Ip_ReceiveBlocking/55 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_UnlockRxMsgBuff/5 FlexCAN_GetMsgBuffRegion/118 FlexCAN_ClearMsgBuffIntStatusFlag/6 FlexCAN_GetMsgBuff/121 FlexCAN_LockRxMsgBuff/120 
   Indirect call Num speculative call targets: 0
FlexCAN_StartRxMessageFifoData/45 (FlexCAN_StartRxMessageFifoData) @0e683700
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxBase/36 (read) Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_RxFifoBlocking/57 FlexCAN_Ip_RxFifo/56 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 
FlexCAN_StartSendData/44 (FlexCAN_StartSendData) @0e683460
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxState/37 (read) Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_SendBlocking/69 FlexCAN_Ip_Send/52 
  Calls: FlexCAN_SetTxMsgBuff/119 FlexCAN_GetMsgBuffRegion/118 FlexCAN_ClearMsgBuffIntStatusFlag/6 
FlexCAN_StartRxMessageBufferData/43 (FlexCAN_StartRxMessageBufferData) @0e6831c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxState/37 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_ReceiveBlocking/55 FlexCAN_Ip_Receive/54 
  Calls: 
FlexCAN_ProccessLegacyRxFIFO/42 (FlexCAN_ProccessLegacyRxFIFO) @0e622ee0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: Flexcan_Ip_apxState/37 (read) Flexcan_Ip_apxBase/36 (read) 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_RxFifoBlocking/57 
  Calls: FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 FlexCAN_SetMsgBuffIntCmd/116 OsIf_GetElapsed/115 FlexCAN_IRQHandlerRxFIFO/48 FlexCAN_GetBuffStatusFlag/7 OsIf_GetCounter/114 OsIf_MicrosToTicks/113 
FlexCAN_InitBaudrate/41 (FlexCAN_InitBaudrate) @0e6229a0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_Init_Privileged/51 
  Calls: FlexCAN_SetTimeSegments/10 FlexCAN_SetFDTimeSegments/9 FlexCAN_SetExtendedTimeSegments/11 FlexCAN_EnableExtCbt/16 
FlexCAN_InitController/40 (FlexCAN_InitController) @0e622e00
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_Ip_Init_Privileged/51 
  Calls: FlexCAN_InitCtroll/39 FlexCAN_ResetImaskBuff/112 FlexCAN_ConfigCtrlOptions/111 FlexCAN_SetFDEnabled/3 FlexCAN_IsFDAvailable/110 FlexCAN_Disable/106 FlexCAN_EnterFreezeMode/105 FlexCAN_Init/109 FlexCAN_SetClkSrc/28 FlexCAN_Disable/106 FlexCAN_EnterFreezeMode/105 FlexCAN_IsEnabled/2 
FlexCAN_InitCtroll/39 (FlexCAN_InitCtroll) @0e622b60
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_InitController/40 
  Calls: FlexCAN_SetMaxMsgBuffNum/108 FlexCAN_SetPayloadSize/107 FlexCAN_Disable/106 FlexCAN_EnterFreezeMode/105 FlexCAN_InitRxFifo/38 FlexCAN_SetSelfReception/17 
FlexCAN_InitRxFifo/38 (FlexCAN_InitRxFifo) @0e6228c0
  Type: function definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: available
  Function flags: body
  Called by: FlexCAN_InitCtroll/39 
  Calls: FlexCAN_EnableRxFifo/104 
Flexcan_Ip_apxState/37 (Flexcan_Ip_apxState) @0e66d990
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_CompleteRxMessageFifoData/61 (read) FlexCAN_Ip_GetTransferStatus/60 (read) FlexCAN_Ip_EnableInterrupts_Privileged/95 (read) FlexCAN_Ip_DisableInterrupts_Privileged/96 (read) FlexCAN_StartRxMessageBufferData/43 (read) FlexCAN_StartSendData/44 (read) FlexCAN_StartRxMessageFifoData/45 (read) FlexCAN_IRQHandlerRxMB/46 (read) FlexCAN_IRQHandlerTxMB/47 (read) FlexCAN_AbortTxTransfer/49 (read) FlexCAN_AbortRxTransfer/50 (read) FlexCAN_Ip_Init_Privileged/51 (write) FlexCAN_Ip_ReceiveBlocking/55 (read) FlexCAN_Ip_ConfigRemoteResponseMb/59 (read) FlexCAN_IRQHandlerRxFIFO/48 (read) FlexCAN_ProccessLegacyRxFIFO/42 (read) FlexCAN_IRQHandler/62 (read) FlexCAN_Error_IRQHandler/67 (read) FlexCAN_BusOff_IRQHandler/68 (read) FlexCAN_Ip_SendBlocking/69 (read) FlexCAN_Ip_Deinit_Privileged/75 (write) FlexCAN_Ip_MainFunctionRead/76 (read) FlexCAN_Ip_MainFunctionBusOff_Privileged/77 (read) FlexCAN_Ip_MainFunctionWrite/78 (read) FlexCAN_Ip_AbortTransfer/98 (read) 
  Availability: available
  Varpool flags:
Flexcan_Ip_apxBase/36 (Flexcan_Ip_apxBase) @0e66d900
  Type: variable definition analyzed
  Visibility: force_output no_reorder prevailing_def_ironly
  References: 
  Referring: FlexCAN_CompleteRxMessageFifoData/61 (read) FlexCAN_Ip_ConfigRemoteResponseMb/59 (read) FlexCAN_Ip_SetListenOnlyMode_Privileged/101 (read) FlexCAN_Ip_GetListenOnlyMode/102 (read) FlexCAN_StartSendData/44 (read) FlexCAN_StartRxMessageFifoData/45 (read) FlexCAN_IRQHandlerRxMB/46 (read) FlexCAN_IRQHandlerTxMB/47 (read) FlexCAN_AbortTxTransfer/49 (read) FlexCAN_AbortRxTransfer/50 (read) FlexCAN_Ip_Init_Privileged/51 (read) FlexCAN_Ip_Send/52 (read) FlexCAN_Ip_ConfigRxMb/53 (read) FlexCAN_Ip_ReceiveBlocking/55 (read) FlexCAN_Ip_ConfigRxFifo_Privileged/58 (read) FlexCAN_IRQHandlerRxFIFO/48 (read) FlexCAN_ProccessLegacyRxFIFO/42 (read) FlexCAN_IRQHandler/62 (read) FlexCAN_Ip_ClearErrorStatus/63 (read) FlexCAN_Ip_GetErrorStatus/64 (read) FlexCAN_Ip_GetControllerTxErrorCounter/65 (read) FlexCAN_Ip_GetControllerRxErrorCounter/66 (read) FlexCAN_Error_IRQHandler/67 (read) FlexCAN_BusOff_IRQHandler/68 (read) FlexCAN_Ip_SendBlocking/69 (read) FlexCAN_Ip_SetRxMbGlobalMask_Privileged/70 (read) FlexCAN_Ip_EnterFreezeMode_Privileged/71 (read) FlexCAN_Ip_ExitFreezeMode_Privileged/72 (read) FlexCAN_Ip_SetRxIndividualMask_Privileged/73 (read) FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/74 (read) FlexCAN_Ip_Deinit_Privileged/75 (read) FlexCAN_Ip_MainFunctionRead/76 (read) FlexCAN_Ip_MainFunctionBusOff_Privileged/77 (read) FlexCAN_Ip_MainFunctionWrite/78 (read) FlexCAN_Ip_GetStopMode_Privileged/79 (read) FlexCAN_Ip_GetStartMode_Privileged/80 (read) FlexCAN_Ip_SetStartMode_Privileged/81 (read) FlexCAN_Ip_SetStopMode_Privileged/82 (read) FlexCAN_Ip_SetRxMaskType_Privileged/83 (read) FlexCAN_Ip_SetBitrate_Privileged/84 (read) FlexCAN_Ip_GetBitrate/85 (read) FlexCAN_Ip_ClearTDCFail/86 (read) FlexCAN_Ip_GetTDCFail/87 (read) FlexCAN_Ip_GetTDCValue/88 (read) FlexCAN_Ip_SetBitrateCbt_Privileged/89 (read) FlexCAN_Ip_GetBitrateFD/90 (read) FlexCAN_Ip_SetTDCOffset_Privileged/91 (read) FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/92 (read) FlexCAN_Ip_GetBuffStatusFlag/93 (read) FlexCAN_Ip_ClearBuffStatusFlag/94 (read) FlexCAN_Ip_EnableInterrupts_Privileged/95 (read) FlexCAN_Ip_DisableInterrupts_Privileged/96 (read) FlexCAN_Ip_SetErrorInt_Privileged/97 (read) FlexCAN_Ip_AbortTransfer/98 (read) FlexCAN_Ip_SetRxMb14Mask_Privileged/99 (read) FlexCAN_Ip_SetRxMb15Mask_Privileged/100 (read) FlexCAN_Ip_ManualBusOffRecovery/103 (read) 
  Availability: available
  Varpool flags: initialized read-only const-value-known
FlexCAN_SetRegDefaultVal/35 (FlexCAN_SetRegDefaultVal) @0e6612a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_Deinit_Privileged/75 
  Calls: FlexCAN_IsFDAvailable/110 
FlexCAN_SetRxMaskType/34 (FlexCAN_SetRxMaskType) @0e65dee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetRxMaskType_Privileged/83 
  Calls: 
FlexCAN_SetTxArbitrationStartDelay/33 (FlexCAN_SetTxArbitrationStartDelay) @0e65da80
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/92 
  Calls: 
FlexCAN_SetRxIndividualMask/31 (FlexCAN_SetRxIndividualMask) @0e65d460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetRxIndividualMask_Privileged/73 
  Calls: 
FlexCAN_SetRxMsgBuffGlobalMask/30 (FlexCAN_SetRxMsgBuffGlobalMask) @0e65d1c0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetRxMbGlobalMask_Privileged/70 
  Calls: 
FlexCAN_GetMsgBuffIntStatusFlag/29 (FlexCAN_GetMsgBuffIntStatusFlag) @0e658ee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_IRQHandler/62 FlexCAN_IRQHandler/62 FlexCAN_IRQHandler/62 
  Calls: 
FlexCAN_SetClkSrc/28 (FlexCAN_SetClkSrc) @0e658c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_InitController/40 
  Calls: 
RxFifoOcuppiedLastMsgBuff/20 (RxFifoOcuppiedLastMsgBuff) @0e64dee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_AbortRxTransfer/50 
  Calls: 
FlexCAN_IsListenOnlyModeEnabled/19 (FlexCAN_IsListenOnlyModeEnabled) @0e64dc40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetListenOnlyMode/102 FlexCAN_Ip_Send/52 
  Calls: 
FlexCAN_IsFDEnabled/18 (FlexCAN_IsFDEnabled) @0e64d9a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/89 
  Calls: 
FlexCAN_SetSelfReception/17 (FlexCAN_SetSelfReception) @0e64d700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_InitCtroll/39 
  Calls: 
FlexCAN_EnableExtCbt/16 (FlexCAN_EnableExtCbt) @0e64d2a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_InitBaudrate/41 
  Calls: 
FlexCAN_IsExCbtEnabled/15 (FlexCAN_IsExCbtEnabled) @0e648ee0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrate/85 FlexCAN_Ip_SetBitrate_Privileged/84 
  Calls: 
FlexCAN_GetFDTimeSegments/14 (FlexCAN_GetFDTimeSegments) @0e648c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrateFD/90 
  Calls: 
FlexCAN_GetTimeSegments/13 (FlexCAN_GetTimeSegments) @0e6489a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrate/85 
  Calls: 
FlexCAN_GetExtendedTimeSegments/12 (FlexCAN_GetExtendedTimeSegments) @0e648700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBitrate/85 
  Calls: 
FlexCAN_SetExtendedTimeSegments/11 (FlexCAN_SetExtendedTimeSegments) @0e648460
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrate_Privileged/84 FlexCAN_InitBaudrate/41 
  Calls: 
FlexCAN_SetTimeSegments/10 (FlexCAN_SetTimeSegments) @0e644d20
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrate_Privileged/84 FlexCAN_InitBaudrate/41 
  Calls: 
FlexCAN_SetFDTimeSegments/9 (FlexCAN_SetFDTimeSegments) @0e644620
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/89 FlexCAN_InitBaudrate/41 
  Calls: 
FlexCAN_GetBuffStatusFlag/7 (FlexCAN_GetBuffStatusFlag) @0e640c40
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_GetBuffStatusFlag/93 FlexCAN_Ip_MainFunctionWrite/78 FlexCAN_Ip_MainFunctionRead/76 FlexCAN_Ip_MainFunctionRead/76 FlexCAN_Ip_SendBlocking/69 FlexCAN_Ip_SendBlocking/69 FlexCAN_ProccessLegacyRxFIFO/42 FlexCAN_Ip_ReceiveBlocking/55 FlexCAN_AbortTxTransfer/49 
  Calls: 
FlexCAN_ClearMsgBuffIntStatusFlag/6 (FlexCAN_ClearMsgBuffIntStatusFlag) @0e6409a0
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_ClearBuffStatusFlag/94 FlexCAN_Ip_MainFunctionWrite/78 FlexCAN_Ip_MainFunctionWrite/78 FlexCAN_Ip_SendBlocking/69 FlexCAN_Ip_SendBlocking/69 FlexCAN_IRQHandler/62 FlexCAN_IRQHandler/62 FlexCAN_IRQHandlerRxFIFO/48 FlexCAN_IRQHandlerRxFIFO/48 FlexCAN_IRQHandlerRxFIFO/48 FlexCAN_Ip_ConfigRemoteResponseMb/59 FlexCAN_Ip_ConfigRxMb/53 FlexCAN_AbortRxTransfer/50 FlexCAN_AbortTxTransfer/49 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerRxMB/46 FlexCAN_StartSendData/44 
  Calls: 
FlexCAN_UnlockRxMsgBuff/5 (FlexCAN_UnlockRxMsgBuff) @0e640700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_MainFunctionWrite/78 FlexCAN_Ip_MainFunctionWrite/78 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerTxMB/47 FlexCAN_IRQHandlerRxMB/46 
  Calls: 
FlexCAN_SetListenOnlyMode/4 (FlexCAN_SetListenOnlyMode) @0e640380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/101 
  Calls: 
FlexCAN_SetFDEnabled/3 (FlexCAN_SetFDEnabled) @0e640000
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetBitrateCbt_Privileged/89 FlexCAN_InitController/40 
  Calls: 
FlexCAN_IsEnabled/2 (FlexCAN_IsEnabled) @0e5d4b60
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetListenOnlyMode_Privileged/101 FlexCAN_Ip_SetRxMb15Mask_Privileged/100 FlexCAN_Ip_SetRxMb14Mask_Privileged/99 FlexCAN_Ip_SetErrorInt_Privileged/97 FlexCAN_Ip_DisableInterrupts_Privileged/96 FlexCAN_Ip_EnableInterrupts_Privileged/95 FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged/92 FlexCAN_Ip_SetTDCOffset_Privileged/91 FlexCAN_Ip_SetRxMaskType_Privileged/83 FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/74 FlexCAN_Ip_SetRxIndividualMask_Privileged/73 FlexCAN_Ip_SetRxMbGlobalMask_Privileged/70 FlexCAN_Ip_ConfigRxFifo_Privileged/58 FlexCAN_InitController/40 
  Calls: 
FlexCAN_SetTDCOffset/1 (FlexCAN_SetTDCOffset) @0e5d4700
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetTDCOffset_Privileged/91 
  Calls: 
FlexCAN_SetRxFifoGlobalMask/0 (FlexCAN_SetRxFifoGlobalMask) @0e5d4380
  Type: function definition analyzed
  Visibility: no_reorder prevailing_def_ironly
  References: 
  Referring: 
  Availability: local
  Function flags: body local
  Called by: FlexCAN_Ip_SetRxFifoGlobalMask_Privileged/74 
  Calls: 

;; Function FlexCAN_SetRxFifoGlobalMask (FlexCAN_SetRxFifoGlobalMask, funcdef_no=0, decl_uid=6459, cgraph_uid=1, symbol_order=0)

FlexCAN_SetRxFifoGlobalMask (struct FLEXCAN_Type * base, uint32 Mask)
{
  <bb 2> :
  base_2(D)->RXFGMASK ={v} Mask_3(D);
  return;

}



;; Function FlexCAN_SetTDCOffset (FlexCAN_SetTDCOffset, funcdef_no=1, decl_uid=6464, cgraph_uid=2, symbol_order=1)

FlexCAN_SetTDCOffset (struct FLEXCAN_Type * base, boolean enable, uint8 offset)
{
  uint32 tmp;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  tmp_7 ={v} base_6(D)->FDCTRL;
  tmp_8 = tmp_7 & 4294926591;
  if (enable_9(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  tmp_10 = tmp_8 | 32768;
  _1 = (long unsigned int) offset_11(D);
  _2 = _1 << 8;
  _3 = _2 & 7936;
  tmp_12 = tmp_10 | _3;

  <bb 4> :
  # tmp_4 = PHI <tmp_8(2), tmp_12(3)>
  base_6(D)->FDCTRL ={v} tmp_4;
  return;

}



;; Function FlexCAN_IsEnabled (FlexCAN_IsEnabled, funcdef_no=2, decl_uid=6473, cgraph_uid=3, symbol_order=2)

FlexCAN_IsEnabled (const struct FLEXCAN_Type * pBase)
{
  boolean D.7354;
  long unsigned int _1;
  signed int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} pBase_4(D)->MCR;
  _2 = (signed int) _1;
  _5 = _2 >= 0;

  <bb 3> :
<L0>:
  return _5;

}



;; Function FlexCAN_SetFDEnabled (FlexCAN_SetFDEnabled, funcdef_no=3, decl_uid=6478, cgraph_uid=4, symbol_order=3)

FlexCAN_SetFDEnabled (struct FLEXCAN_Type * base, boolean enableFD, boolean enableBRS)
{
  long unsigned int iftmp.3;
  long unsigned int iftmp.2;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int iftmp.2_9;
  long unsigned int iftmp.3_10;
  long unsigned int iftmp.2_14;
  long unsigned int iftmp.2_15;
  long unsigned int iftmp.3_18;
  long unsigned int iftmp.3_19;

  <bb 2> :
  _1 ={v} base_12(D)->MCR;
  _2 = _1 & 4294965247;
  if (enableFD_13(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.2_15 = 2048;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.2_14 = 0;

  <bb 5> :
  # iftmp.2_9 = PHI <iftmp.2_15(3), iftmp.2_14(4)>
  _3 = iftmp.2_9 | _2;
  base_12(D)->MCR ={v} _3;
  _4 ={v} base_12(D)->FDCTRL;
  _5 = _4 & 2147483647;
  if (enableBRS_17(D) != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  iftmp.3_19 = 2147483648;
  goto <bb 8>; [INV]

  <bb 7> :
  iftmp.3_18 = 0;

  <bb 8> :
  # iftmp.3_10 = PHI <iftmp.3_19(6), iftmp.3_18(7)>
  _6 = iftmp.3_10 | _5;
  base_12(D)->FDCTRL ={v} _6;
  _7 ={v} base_12(D)->FDCTRL;
  _8 = _7 & 4294926591;
  base_12(D)->FDCTRL ={v} _8;
  return;

}



;; Function FlexCAN_SetListenOnlyMode (FlexCAN_SetListenOnlyMode, funcdef_no=4, decl_uid=6482, cgraph_uid=5, symbol_order=4)

FlexCAN_SetListenOnlyMode (struct FLEXCAN_Type * base, boolean enableListenOnly)
{
  long unsigned int iftmp.6;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.6_4;
  long unsigned int iftmp.6_8;
  long unsigned int iftmp.6_9;

  <bb 2> :
  _1 ={v} base_6(D)->CTRL1;
  _2 = _1 & 4294967287;
  if (enableListenOnly_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.6_9 = 8;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.6_8 = 0;

  <bb 5> :
  # iftmp.6_4 = PHI <iftmp.6_9(3), iftmp.6_8(4)>
  _3 = iftmp.6_4 | _2;
  base_6(D)->CTRL1 ={v} _3;
  return;

}



;; Function FlexCAN_UnlockRxMsgBuff (FlexCAN_UnlockRxMsgBuff, funcdef_no=5, decl_uid=6487, cgraph_uid=6, symbol_order=5)

FlexCAN_UnlockRxMsgBuff (const struct FLEXCAN_Type * base)
{
  long unsigned int vol.5;
  long unsigned int vol.5_3;

  <bb 2> :
  vol.5_3 ={v} base_2(D)->TIMER;
  return;

}



;; Function FlexCAN_ClearMsgBuffIntStatusFlag (FlexCAN_ClearMsgBuffIntStatusFlag, funcdef_no=6, decl_uid=6491, cgraph_uid=7, symbol_order=6)

FlexCAN_ClearMsgBuffIntStatusFlag (struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;
  long unsigned int _1;

  <bb 2> :
  _1 = msgBuffIdx_3(D) & 31;
  flag_4 = 1 << _1;
  if (msgBuffIdx_3(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  base_6(D)->IFLAG1 ={v} flag_4;

  <bb 4> :
  return;

}



;; Function FlexCAN_GetBuffStatusFlag (FlexCAN_GetBuffStatusFlag, funcdef_no=7, decl_uid=6496, cgraph_uid=8, symbol_order=7)

FlexCAN_GetBuffStatusFlag (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 flag;
  uint8 D.7391;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  uint8 _12;

  <bb 2> :
  flag_7 = 0;
  if (msgBuffIdx_8(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} base_10(D)->IFLAG1;
  _2 = msgBuffIdx_8(D) & 31;
  _3 = 1 << _2;
  _4 = _1 & _3;
  _5 = msgBuffIdx_8(D) & 31;
  flag_11 = _4 >> _5;

  <bb 4> :
  # flag_6 = PHI <flag_7(2), flag_11(3)>
  _12 = (uint8) flag_6;

  <bb 5> :
<L2>:
  return _12;

}



;; Function FlexCAN_SetFDTimeSegments (FlexCAN_SetFDTimeSegments, funcdef_no=9, decl_uid=6506, cgraph_uid=10, symbol_order=9)

FlexCAN_SetFDTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;

  <bb 2> :
  _1 ={v} base_24(D)->FDCBT;
  _2 = _1 & 3221783320;
  base_24(D)->FDCBT ={v} _2;
  _3 ={v} base_24(D)->FDCBT;
  _4 = timeSeg_26(D)->propSeg;
  _5 = _4 << 10;
  _6 = _5 & 31744;
  _7 = timeSeg_26(D)->phaseSeg2;
  _8 = _7 & 7;
  _9 = _6 | _8;
  _10 = timeSeg_26(D)->phaseSeg1;
  _11 = _10 << 5;
  _12 = _11 & 255;
  _13 = _9 | _12;
  _14 = timeSeg_26(D)->preDivider;
  _15 = _14 << 20;
  _16 = _15 & 1072693248;
  _17 = _13 | _16;
  _18 = timeSeg_26(D)->rJumpwidth;
  _19 = _18 << 16;
  _20 = _19 & 458752;
  _21 = _17 | _20;
  _22 = _3 | _21;
  base_24(D)->FDCBT ={v} _22;
  return;

}



;; Function FlexCAN_SetTimeSegments (FlexCAN_SetTimeSegments, funcdef_no=10, decl_uid=6510, cgraph_uid=11, symbol_order=10)

FlexCAN_SetTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;

  <bb 2> :
  _1 ={v} base_23(D)->CTRL1;
  _2 = _1 & 65528;
  base_23(D)->CTRL1 ={v} _2;
  _3 ={v} base_23(D)->CTRL1;
  _4 = timeSeg_25(D)->propSeg;
  _5 = _4 & 7;
  _6 = timeSeg_25(D)->phaseSeg2;
  _7 = _6 << 16;
  _8 = _7 & 458752;
  _9 = _5 | _8;
  _10 = timeSeg_25(D)->phaseSeg1;
  _11 = _10 << 19;
  _12 = _11 & 3670016;
  _13 = _9 | _12;
  _14 = timeSeg_25(D)->preDivider;
  _15 = _14 << 24;
  _16 = _13 | _15;
  _17 = timeSeg_25(D)->rJumpwidth;
  _18 = _17 << 22;
  _19 = _18 & 12582912;
  _20 = _16 | _19;
  _21 = _3 | _20;
  base_23(D)->CTRL1 ={v} _21;
  return;

}



;; Function FlexCAN_SetExtendedTimeSegments (FlexCAN_SetExtendedTimeSegments, funcdef_no=11, decl_uid=6514, cgraph_uid=12, symbol_order=11)

FlexCAN_SetExtendedTimeSegments (struct FLEXCAN_Type * base, const struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;

  <bb 2> :
  _1 ={v} base_24(D)->CBT;
  _2 = _1 & 2147483648;
  base_24(D)->CBT ={v} _2;
  _3 ={v} base_24(D)->CBT;
  _4 = timeSeg_26(D)->propSeg;
  _5 = _4 << 10;
  _6 = _5 & 65535;
  _7 = timeSeg_26(D)->phaseSeg2;
  _8 = _7 & 31;
  _9 = _6 | _8;
  _10 = timeSeg_26(D)->phaseSeg1;
  _11 = _10 << 5;
  _12 = _11 & 992;
  _13 = _9 | _12;
  _14 = timeSeg_26(D)->preDivider;
  _15 = _14 << 21;
  _16 = _15 & 2145386496;
  _17 = _13 | _16;
  _18 = timeSeg_26(D)->rJumpwidth;
  _19 = _18 << 16;
  _20 = _19 & 2031616;
  _21 = _17 | _20;
  _22 = _3 | _21;
  base_24(D)->CBT ={v} _22;
  return;

}



;; Function FlexCAN_GetExtendedTimeSegments (FlexCAN_GetExtendedTimeSegments, funcdef_no=12, decl_uid=6518, cgraph_uid=13, symbol_order=12)

FlexCAN_GetExtendedTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  _1 ={v} base_16(D)->CBT;
  _2 = _1 >> 21;
  _3 = _2 & 1023;
  timeSeg_17(D)->preDivider = _3;
  _4 ={v} base_16(D)->CBT;
  _5 = _4 >> 10;
  _6 = _5 & 63;
  timeSeg_17(D)->propSeg = _6;
  _7 ={v} base_16(D)->CBT;
  _8 = _7 >> 5;
  _9 = _8 & 31;
  timeSeg_17(D)->phaseSeg1 = _9;
  _10 ={v} base_16(D)->CBT;
  _11 = _10 & 31;
  timeSeg_17(D)->phaseSeg2 = _11;
  _12 ={v} base_16(D)->CBT;
  _13 = _12 >> 16;
  _14 = _13 & 31;
  timeSeg_17(D)->rJumpwidth = _14;
  return;

}



;; Function FlexCAN_GetTimeSegments (FlexCAN_GetTimeSegments, funcdef_no=13, decl_uid=6522, cgraph_uid=14, symbol_order=13)

FlexCAN_GetTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  _1 ={v} base_16(D)->CTRL1;
  _2 = _1 >> 24;
  _3 = _2 & 255;
  timeSeg_17(D)->preDivider = _3;
  _4 ={v} base_16(D)->CTRL1;
  _5 = _4 & 7;
  timeSeg_17(D)->propSeg = _5;
  _6 ={v} base_16(D)->CTRL1;
  _7 = _6 >> 19;
  _8 = _7 & 7;
  timeSeg_17(D)->phaseSeg1 = _8;
  _9 ={v} base_16(D)->CTRL1;
  _10 = _9 >> 16;
  _11 = _10 & 7;
  timeSeg_17(D)->phaseSeg2 = _11;
  _12 ={v} base_16(D)->CTRL1;
  _13 = _12 >> 22;
  _14 = _13 & 3;
  timeSeg_17(D)->rJumpwidth = _14;
  return;

}



;; Function FlexCAN_GetFDTimeSegments (FlexCAN_GetFDTimeSegments, funcdef_no=14, decl_uid=6526, cgraph_uid=15, symbol_order=14)

FlexCAN_GetFDTimeSegments (const struct FLEXCAN_Type * base, struct Flexcan_Ip_TimeSegmentType * timeSeg)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;

  <bb 2> :
  _1 ={v} base_16(D)->FDCBT;
  _2 = _1 >> 20;
  _3 = _2 & 1023;
  timeSeg_17(D)->preDivider = _3;
  _4 ={v} base_16(D)->FDCBT;
  _5 = _4 >> 10;
  _6 = _5 & 31;
  timeSeg_17(D)->propSeg = _6;
  _7 ={v} base_16(D)->FDCBT;
  _8 = _7 >> 5;
  _9 = _8 & 7;
  timeSeg_17(D)->phaseSeg1 = _9;
  _10 ={v} base_16(D)->FDCBT;
  _11 = _10 & 7;
  timeSeg_17(D)->phaseSeg2 = _11;
  _12 ={v} base_16(D)->FDCBT;
  _13 = _12 >> 16;
  _14 = _13 & 7;
  timeSeg_17(D)->rJumpwidth = _14;
  return;

}



;; Function FlexCAN_IsExCbtEnabled (FlexCAN_IsExCbtEnabled, funcdef_no=15, decl_uid=6529, cgraph_uid=16, symbol_order=15)

FlexCAN_IsExCbtEnabled (const struct FLEXCAN_Type * pBase)
{
  boolean D.7748;
  long unsigned int _1;
  signed int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} pBase_4(D)->CBT;
  _2 = (signed int) _1;
  _5 = _2 < 0;

  <bb 3> :
<L0>:
  return _5;

}



;; Function FlexCAN_EnableExtCbt (FlexCAN_EnableExtCbt, funcdef_no=16, decl_uid=6533, cgraph_uid=17, symbol_order=16)

FlexCAN_EnableExtCbt (struct FLEXCAN_Type * base, boolean enableCBT)
{
  long unsigned int iftmp.4;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.4_4;
  long unsigned int iftmp.4_8;
  long unsigned int iftmp.4_9;

  <bb 2> :
  _1 ={v} base_6(D)->CBT;
  _2 = _1 & 2147483647;
  if (enableCBT_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.4_9 = 2147483648;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.4_8 = 0;

  <bb 5> :
  # iftmp.4_4 = PHI <iftmp.4_9(3), iftmp.4_8(4)>
  _3 = iftmp.4_4 | _2;
  base_6(D)->CBT ={v} _3;
  return;

}



;; Function FlexCAN_SetSelfReception (FlexCAN_SetSelfReception, funcdef_no=17, decl_uid=6540, cgraph_uid=18, symbol_order=17)

FlexCAN_SetSelfReception (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.0;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.0_4;
  long unsigned int iftmp.0_8;
  long unsigned int iftmp.0_9;

  <bb 2> :
  _1 ={v} base_6(D)->MCR;
  _2 = _1 & 4294836223;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.0_9 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.0_8 = 131072;

  <bb 5> :
  # iftmp.0_4 = PHI <iftmp.0_9(3), iftmp.0_8(4)>
  _3 = iftmp.0_4 | _2;
  base_6(D)->MCR ={v} _3;
  return;

}



;; Function FlexCAN_IsFDEnabled (FlexCAN_IsFDEnabled, funcdef_no=18, decl_uid=6543, cgraph_uid=19, symbol_order=18)

FlexCAN_IsFDEnabled (const struct FLEXCAN_Type * base)
{
  boolean D.7769;
  long unsigned int _1;
  long unsigned int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} base_4(D)->MCR;
  _2 = _1 & 2048;
  _5 = _2 != 0;

  <bb 3> :
<L0>:
  return _5;

}



;; Function FlexCAN_IsListenOnlyModeEnabled (FlexCAN_IsListenOnlyModeEnabled, funcdef_no=19, decl_uid=6546, cgraph_uid=20, symbol_order=19)

FlexCAN_IsListenOnlyModeEnabled (const struct FLEXCAN_Type * base)
{
  boolean D.7498;
  long unsigned int _1;
  long unsigned int _2;
  boolean _5;

  <bb 2> :
  _1 ={v} base_4(D)->CTRL1;
  _2 = _1 & 8;
  _5 = _2 != 0;

  <bb 3> :
<L0>:
  return _5;

}



;; Function RxFifoOcuppiedLastMsgBuff (RxFifoOcuppiedLastMsgBuff, funcdef_no=20, decl_uid=6549, cgraph_uid=21, symbol_order=20)

RxFifoOcuppiedLastMsgBuff (uint8 x)
{
  uint32 D.7488;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  uint32 _6;

  <bb 2> :
  _1 = (long unsigned int) x_5(D);
  _2 = _1 + 1;
  _3 = _2 * 8;
  _4 = _3 / 4;
  _6 = _4 + 5;

  <bb 3> :
<L0>:
  return _6;

}



;; Function FlexCAN_SetClkSrc (FlexCAN_SetClkSrc, funcdef_no=28, decl_uid=6584, cgraph_uid=29, symbol_order=28)

FlexCAN_SetClkSrc (struct FLEXCAN_Type * base, boolean enable)
{
  long unsigned int iftmp.1;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int iftmp.1_4;
  long unsigned int iftmp.1_8;
  long unsigned int iftmp.1_9;

  <bb 2> :
  _1 ={v} base_6(D)->CTRL1;
  _2 = _1 & 4294959103;
  if (enable_7(D) != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  iftmp.1_9 = 8192;
  goto <bb 5>; [INV]

  <bb 4> :
  iftmp.1_8 = 0;

  <bb 5> :
  # iftmp.1_4 = PHI <iftmp.1_9(3), iftmp.1_8(4)>
  _3 = iftmp.1_4 | _2;
  base_6(D)->CTRL1 ={v} _3;
  return;

}



;; Function FlexCAN_GetMsgBuffIntStatusFlag (FlexCAN_GetMsgBuffIntStatusFlag, funcdef_no=29, decl_uid=6588, cgraph_uid=30, symbol_order=29)

FlexCAN_GetMsgBuffIntStatusFlag (const struct FLEXCAN_Type * base, uint32 msgBuffIdx)
{
  uint32 mask;
  uint8 flag;
  uint8 D.7580;
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  unsigned char _5;
  uint8 _13;

  <bb 2> :
  flag_7 = 0;
  if (msgBuffIdx_8(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  mask_11 ={v} base_10(D)->IMASK1;
  _1 ={v} base_10(D)->IFLAG1;
  _2 = mask_11 & _1;
  _3 = msgBuffIdx_8(D) & 31;
  _4 = _2 >> _3;
  _5 = (unsigned char) _4;
  flag_12 = _5 & 1;

  <bb 4> :
  # flag_6 = PHI <flag_7(2), flag_12(3)>
  _13 = flag_6;

  <bb 5> :
<L2>:
  return _13;

}



;; Function FlexCAN_SetRxMsgBuffGlobalMask (FlexCAN_SetRxMsgBuffGlobalMask, funcdef_no=30, decl_uid=6594, cgraph_uid=31, symbol_order=30)

FlexCAN_SetRxMsgBuffGlobalMask (struct FLEXCAN_Type * base, uint32 Mask)
{
  <bb 2> :
  base_2(D)->RXMGMASK ={v} Mask_3(D);
  return;

}



;; Function FlexCAN_SetRxIndividualMask (FlexCAN_SetRxIndividualMask, funcdef_no=31, decl_uid=6599, cgraph_uid=32, symbol_order=31)

FlexCAN_SetRxIndividualMask (struct FLEXCAN_Type * base, uint32 msgBuffIdx, uint32 mask)
{
  <bb 2> :
  base_2(D)->RXIMR[msgBuffIdx_3(D)] ={v} mask_4(D);
  return;

}



;; Function FlexCAN_SetTxArbitrationStartDelay (FlexCAN_SetTxArbitrationStartDelay, funcdef_no=33, decl_uid=6606, cgraph_uid=34, symbol_order=33)

FlexCAN_SetTxArbitrationStartDelay (struct FLEXCAN_Type * base, uint8 tasd)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;

  <bb 2> :
  _1 ={v} base_8(D)->CTRL2;
  _2 = _1 & 4278714367;
  _3 = (long unsigned int) tasd_9(D);
  _4 = _3 << 19;
  _5 = _4 & 16252928;
  _6 = _2 | _5;
  base_8(D)->CTRL2 ={v} _6;
  return;

}



;; Function FlexCAN_SetRxMaskType (FlexCAN_SetRxMaskType, funcdef_no=34, decl_uid=6610, cgraph_uid=35, symbol_order=34)

FlexCAN_SetRxMaskType (struct FLEXCAN_Type * base, Flexcan_Ip_RxMaskType type)
{
  long unsigned int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;

  <bb 2> :
  if (type_6(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _1 ={v} base_8(D)->MCR;
  _2 = _1 & 4294901759;
  base_8(D)->MCR ={v} _2;
  goto <bb 5>; [INV]

  <bb 4> :
  _3 ={v} base_8(D)->MCR;
  _4 = _3 | 65536;
  base_8(D)->MCR ={v} _4;

  <bb 5> :
  return;

}



;; Function FlexCAN_SetRegDefaultVal (FlexCAN_SetRegDefaultVal, funcdef_no=35, decl_uid=6616, cgraph_uid=36, symbol_order=35)

FlexCAN_SetRegDefaultVal (struct FLEXCAN_Type * base)
{
  _Bool _1;

  <bb 2> :
  _1 = FlexCAN_IsFDAvailable (base_4(D));
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  base_4(D)->FDCBT ={v} 0;
  base_4(D)->FDCTRL ={v} 2147500288;

  <bb 4> :
  base_4(D)->IFLAG1 ={v} 4294967295;
  base_4(D)->IMASK1 ={v} 0;
  base_4(D)->CBT ={v} 0;
  base_4(D)->CTRL2 ={v} 1048576;
  base_4(D)->ESR1 ={v} 241670;
  base_4(D)->ECR ={v} 0;
  base_4(D)->TIMER ={v} 0;
  base_4(D)->CTRL1 ={v} 0;
  base_4(D)->MCR ={v} 3633315855;
  return;

}



;; Function FlexCAN_InitRxFifo (FlexCAN_InitRxFifo, funcdef_no=36, decl_uid=6762, cgraph_uid=37, symbol_order=38)

FlexCAN_InitRxFifo (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7328;
  _Bool _1;
  <unnamed type> _2;
  Flexcan_Ip_StatusType _11;

  <bb 2> :
  eResult_5 = 0;
  _1 = Flexcan_Ip_pData_7(D)->is_rx_fifo_needed;
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _2 = Flexcan_Ip_pData_7(D)->num_id_filters;
  eResult_10 = FlexCAN_EnableRxFifo (pBase_8(D), _2);

  <bb 4> :
  # eResult_3 = PHI <eResult_5(2), eResult_10(3)>
  _11 = eResult_3;

  <bb 5> :
<L2>:
  return _11;

}



;; Function FlexCAN_InitCtroll (FlexCAN_InitCtroll, funcdef_no=37, decl_uid=6769, cgraph_uid=38, symbol_order=39)

FlexCAN_InitCtroll (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7335;
  <unnamed type> _1;
  const struct Flexcan_Ip_PayloadSizeType * _2;
  long unsigned int _3;
  Flexcan_Ip_StatusType _17;

  <bb 2> :
  eResult_6 = 0;
  _1 = Flexcan_Ip_pData_8(D)->flexcanMode;
  if (_1 != 2)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_SetSelfReception (pBase_9(D), 0);

  <bb 4> :
  eResult_12 = FlexCAN_InitRxFifo (pBase_9(D), Flexcan_Ip_pData_8(D));
  if (eResult_12 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FlexCAN_EnterFreezeMode (pBase_9(D));
  FlexCAN_Disable (pBase_9(D));
  goto <bb 7>; [INV]

  <bb 6> :
  _2 = &Flexcan_Ip_pData_8(D)->payload;
  FlexCAN_SetPayloadSize (pBase_9(D), _2);
  _3 = Flexcan_Ip_pData_8(D)->max_num_mb;
  FlexCAN_SetMaxMsgBuffNum (pBase_9(D), _3);

  <bb 7> :
  _17 = eResult_12;

  <bb 8> :
<L5>:
  return _17;

}



;; Function FlexCAN_InitController (FlexCAN_InitController, funcdef_no=38, decl_uid=6766, cgraph_uid=39, symbol_order=40)

FlexCAN_InitController (uint8 Instance, struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7352;
  _Bool _1;
  _Bool _2;
  long unsigned int _3;
  long unsigned int _4;
  _Bool _5;
  _Bool _6;
  _Bool _7;
  long unsigned int _8;
  Flexcan_Ip_StatusType _36;

  <bb 2> :
  eResult_14 = 0;
  _1 = FlexCAN_IsEnabled (pBase_16(D));
  if (_1 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  eResult_19 = FlexCAN_EnterFreezeMode (pBase_16(D));
  if (eResult_19 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  eResult_21 = FlexCAN_Disable (pBase_16(D));

  <bb 5> :
  # eResult_9 = PHI <eResult_14(2), eResult_19(3), eResult_21(4)>
  if (eResult_9 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 6> :
  _2 = Flexcan_Ip_pData_22(D)->is_pe_clock;
  FlexCAN_SetClkSrc (pBase_16(D), _2);
  _3 ={v} pBase_16(D)->MCR;
  _4 = _3 & 2147483647;
  pBase_16(D)->MCR ={v} _4;
  eResult_26 = FlexCAN_Init (pBase_16(D));
  if (eResult_26 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  FlexCAN_EnterFreezeMode (pBase_16(D));
  FlexCAN_Disable (pBase_16(D));
  goto <bb 11>; [INV]

  <bb 8> :
  _5 = FlexCAN_IsFDAvailable (pBase_16(D));
  if (_5 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  _6 = Flexcan_Ip_pData_22(D)->fd_enable;
  _7 = Flexcan_Ip_pData_22(D)->bitRateSwitch;
  FlexCAN_SetFDEnabled (pBase_16(D), _6, _7);

  <bb 10> :
  _8 = Flexcan_Ip_pData_22(D)->ctrlOptions;
  FlexCAN_ConfigCtrlOptions (pBase_16(D), _8);
  FlexCAN_ResetImaskBuff (Instance_30(D));
  eResult_33 = FlexCAN_InitCtroll (pBase_16(D), Flexcan_Ip_pData_22(D));

  <bb 11> :
  # eResult_10 = PHI <eResult_9(5), eResult_26(7), eResult_33(10)>
  _36 = eResult_10;

  <bb 12> :
<L11>:
  return _36;

}



;; Function FlexCAN_InitBaudrate (FlexCAN_InitBaudrate, funcdef_no=39, decl_uid=6772, cgraph_uid=40, symbol_order=41)

FlexCAN_InitBaudrate (struct FLEXCAN_Type * pBase, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  _Bool _1;
  _Bool _2;
  const struct Flexcan_Ip_TimeSegmentType * _3;
  const struct Flexcan_Ip_TimeSegmentType * _4;
  const struct Flexcan_Ip_TimeSegmentType * _5;

  <bb 2> :
  _1 = Flexcan_Ip_pData_8(D)->fd_enable;
  FlexCAN_EnableExtCbt (pBase_9(D), _1);
  _2 = Flexcan_Ip_pData_8(D)->fd_enable;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _3 = &Flexcan_Ip_pData_8(D)->bitrate;
  FlexCAN_SetExtendedTimeSegments (pBase_9(D), _3);
  _4 = &Flexcan_Ip_pData_8(D)->bitrate_cbt;
  FlexCAN_SetFDTimeSegments (pBase_9(D), _4);
  goto <bb 5>; [INV]

  <bb 4> :
  _5 = &Flexcan_Ip_pData_8(D)->bitrate;
  FlexCAN_SetTimeSegments (pBase_9(D), _5);

  <bb 5> :
  return;

}



;; Function FlexCAN_ProccessLegacyRxFIFO (FlexCAN_ProccessLegacyRxFIFO, funcdef_no=40, decl_uid=6789, cgraph_uid=41, symbol_order=42)

FlexCAN_ProccessLegacyRxFIFO (uint8 u8Instance, uint32 u32TimeoutMs)
{
  uint32 u32intType;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_StateType * pState;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7386;
  long unsigned int D.7379;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  <unnamed type> _5;
  unsigned char _6;
  <unnamed type> _7;
  <unnamed type> _8;
  _Bool _9;
  _Bool _10;
  _Bool _11;
  <unnamed type> _12;
  long unsigned int _42;
  Flexcan_Ip_StatusType _51;

  <bb 2> :
  eResult_24 = 0;
  _1 = (int) u8Instance_25(D);
  pState_27 = Flexcan_Ip_apxState[_1];
  _2 = (int) u8Instance_25(D);
  pBase_28 = Flexcan_Ip_apxBase[_2];
  timeStart = 0;
  timeElapsed_30 = 0;
  _3 = u32TimeoutMs_31(D) * 1000;
  mS2Ticks_33 = OsIf_MicrosToTicks (_3, 0);
  u32intType_34 = 0;
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  goto <bb 11>; [INV]

  <bb 3> :
  _5 = pState_27->transferType;
  if (_5 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 4> :
  u32intType_37 = 7;
  goto <bb 8>; [INV]

  <bb 5> :
  _6 = FlexCAN_GetBuffStatusFlag (pBase_28, u32intType_16);
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_IRQHandlerRxFIFO (u8Instance_25(D), u32intType_16);

  <bb 7> :
  u32intType_40 = u32intType_16 + 4294967295;

  <bb 8> :
  # u32intType_16 = PHI <u32intType_37(4), u32intType_40(7)>
  if (u32intType_16 > 4)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  _42 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_43 = _42 + timeElapsed_15;
  if (timeElapsed_43 >= mS2Ticks_33)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  eResult_44 = 3;
  goto <bb 12>; [INV]

  <bb 11> :
  # timeElapsed_15 = PHI <timeElapsed_30(2), timeElapsed_43(9)>
  _7 ={v} pState_27->mbs[0].state;
  if (_7 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  # eResult_13 = PHI <eResult_44(10), eResult_24(11)>
  if (eResult_13 == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  _8 = pState_27->transferType;
  if (_8 != 1)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  _9 = pState_27->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_28, u8Instance_25(D), 5, 0, _9);
  _10 = pState_27->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_28, u8Instance_25(D), 6, 0, _10);
  _11 = pState_27->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_28, u8Instance_25(D), 7, 0, _11);

  <bb 15> :
  _12 ={v} pState_27->mbs[0].state;
  switch (_12) <default: <L18> [INV], case 0: <L17> [INV], case 1: <L16> [INV]>

  <bb 16> :
<L16>:
  pState_27->mbs[0].state ={v} 0;
  goto <bb 19>; [INV]

  <bb 17> :
<L17>:
  eResult_49 = 0;
  goto <bb 19>; [INV]

  <bb 18> :
<L18>:
  eResult_50 = 1;

  <bb 19> :
  # eResult_14 = PHI <eResult_13(16), eResult_49(17), eResult_50(18)>
  _51 = eResult_14;
  timeStart ={v} {CLOBBER};

  <bb 20> :
<L21>:
  return _51;

}



;; Function FlexCAN_StartRxMessageBufferData (FlexCAN_StartRxMessageBufferData, funcdef_no=41, decl_uid=6777, cgraph_uid=42, symbol_order=43)

FlexCAN_StartRxMessageBufferData (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7410;
  int _1;
  int _2;
  <unnamed type> _3;
  int _4;
  int _5;
  int _6;
  Flexcan_Ip_StatusType _20;

  <bb 2> :
  result_9 = 0;
  _1 = (int) instance_10(D);
  state_12 = Flexcan_Ip_apxState[_1];
  _2 = (int) mb_idx_13(D);
  _3 ={v} state_12->mbs[_2].state;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_19 = 2;
  goto <bb 5>; [INV]

  <bb 4> :
  _4 = (int) mb_idx_13(D);
  state_12->mbs[_4].state ={v} 1;
  _5 = (int) mb_idx_13(D);
  state_12->mbs[_5].pMBmessage = data_15(D);
  _6 = (int) mb_idx_13(D);
  state_12->mbs[_6].isPolling = isPolling_17(D);

  <bb 5> :
  # result_7 = PHI <result_19(3), result_9(4)>
  _20 = result_7;

  <bb 6> :
<L3>:
  return _20;

}



;; Function FlexCAN_StartSendData (FlexCAN_StartSendData, funcdef_no=42, decl_uid=6783, cgraph_uid=43, symbol_order=44)

FlexCAN_StartSendData (uint8 Flexcan_Ip_u8Instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile uint32 * pMbAddr;
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7418;
  int _1;
  int _2;
  int _3;
  <unnamed type> _4;
  long unsigned int _5;
  int _6;
  int _7;
  int _8;
  _Bool _9;
  int _10;
  _Bool _11;
  long unsigned int _12;
  <unnamed type> _13;
  _Bool _14;
  unsigned char _15;
  _Bool _16;
  _Bool _17;
  long unsigned int _18;
  Flexcan_Ip_StatusType _48;

  <bb 2> :
  eResult_22 = 0;
  _1 = (int) Flexcan_Ip_u8Instance_23(D);
  state_25 = Flexcan_Ip_apxState[_1];
  _2 = (int) Flexcan_Ip_u8Instance_23(D);
  base_26 = Flexcan_Ip_apxBase[_2];
  pMbAddr_27 = 0B;
  _3 = (int) mb_idx_28(D);
  _4 ={v} state_25->mbs[_3].state;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  eResult_47 = 2;
  goto <bb 8>; [INV]

  <bb 4> :
  _5 = (long unsigned int) mb_idx_28(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_26, _5);
  _6 = (int) mb_idx_28(D);
  state_25->mbs[_6].state ={v} 2;
  _7 = (int) mb_idx_28(D);
  state_25->mbs[_7].time_stamp = 0;
  _8 = (int) mb_idx_28(D);
  _9 = tx_info_32(D)->is_polling;
  state_25->mbs[_8].isPolling = _9;
  _10 = (int) mb_idx_28(D);
  _11 = tx_info_32(D)->is_remote;
  state_25->mbs[_10].isRemote = _11;
  _12 = tx_info_32(D)->data_length;
  cs.dataLen = _12;
  _13 = tx_info_32(D)->msg_id_type;
  cs.msgIdType = _13;
  _14 = tx_info_32(D)->fd_enable;
  cs.fd_enable = _14;
  _15 = tx_info_32(D)->fd_padding;
  cs.fd_padding = _15;
  _16 = tx_info_32(D)->enable_brs;
  cs.enable_brs = _16;
  _17 = tx_info_32(D)->is_remote;
  if (_17 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  cs.code = 28;
  goto <bb 7>; [INV]

  <bb 6> :
  cs.code = 12;

  <bb 7> :
  _18 = (long unsigned int) mb_idx_28(D);
  pMbAddr_43 = FlexCAN_GetMsgBuffRegion (base_26, _18);
  FlexCAN_SetTxMsgBuff (pMbAddr_43, &cs, msg_id_44(D), mb_data_45(D), 0);

  <bb 8> :
  # eResult_19 = PHI <eResult_47(3), eResult_22(7)>
  _48 = eResult_19;
  cs ={v} {CLOBBER};

  <bb 9> :
<L7>:
  return _48;

}



;; Function FlexCAN_StartRxMessageFifoData (FlexCAN_StartRxMessageFifoData, funcdef_no=43, decl_uid=6786, cgraph_uid=44, symbol_order=45)

FlexCAN_StartRxMessageFifoData (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  Flexcan_Ip_StatusType eResult;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.7428;
  int _1;
  int _2;
  <unnamed type> _3;
  <unnamed type> _4;
  <unnamed type> _5;
  _Bool _6;
  _Bool _7;
  _Bool _8;
  Flexcan_Ip_StatusType _28;

  <bb 2> :
  base_12 = 0B;
  state_13 = 0B;
  eResult_14 = 0;
  _1 = (int) instance_15(D);
  base_17 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_15(D);
  state_18 = Flexcan_Ip_apxState[_2];
  _3 ={v} state_18->mbs[0].state;
  if (_3 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  eResult_27 = 2;
  goto <bb 8>; [INV]

  <bb 4> :
  state_18->mbs[0].state ={v} 1;
  _4 = state_18->transferType;
  if (_4 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  state_18->mbs[0].isPolling = 1;

  <bb 6> :
  state_18->mbs[0].pMBmessage = data_21(D);
  _5 = state_18->transferType;
  if (_5 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  state_18->mbs[0].isPolling = 0;
  _6 = state_18->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_17, instance_15(D), 6, 1, _6);
  _7 = state_18->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_17, instance_15(D), 7, 1, _7);
  _8 = state_18->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_17, instance_15(D), 5, 1, _8);

  <bb 8> :
  # eResult_9 = PHI <eResult_27(3), eResult_14(6), eResult_14(7)>
  _28 = eResult_9;

  <bb 9> :
<L7>:
  return _28;

}



;; Function FlexCAN_IRQHandlerRxMB (FlexCAN_IRQHandlerRxMB, funcdef_no=44, decl_uid=6792, cgraph_uid=45, symbol_order=46)

FlexCAN_IRQHandlerRxMB (uint8 instance, uint32 mb_idx)
{
  volatile uint32 * flexcan_mb;
  boolean bIsCriticalSectionNeeded;
  boolean bCurrentIntStat;
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  struct Flexcan_Ip_MsgBuffType * _3;
  _Bool _4;
  _Bool _5;
  struct Flexcan_Ip_MsgBuffType * _6;
  _Bool _7;
  struct Flexcan_Ip_MsgBuffType * _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  struct Flexcan_Ip_MsgBuffType * _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  struct Flexcan_Ip_MsgBuffType * _16;
  long unsigned int _17;
  long unsigned int _18;
  long unsigned int _19;
  long unsigned int _20;
  long unsigned int _21;
  long unsigned int _22;
  long unsigned int _23;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _24;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _25;
  <unnamed type> _26;
  _Bool _27;
  _Bool _28;
  _Bool _29;
  _Bool _30;
  _Bool _31;
  _Bool _32;

  <bb 2> :
  _1 = (int) instance_40(D);
  base_42 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_40(D);
  state_43 = Flexcan_Ip_apxState[_2];
  bCurrentIntStat_44 = 0;
  _3 = state_43->mbs[mb_idx_45(D)].pMBmessage;
  if (_3 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  state_43->mbs[mb_idx_45(D)].pMBmessage = &data;

  <bb 4> :
  bIsCriticalSectionNeeded_47 = 0;
  _4 = state_43->mbs[mb_idx_45(D)].isPolling;
  if (_4 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _5 = state_43->bIsLegacyFifoEn;
  if (_5 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  bIsCriticalSectionNeeded_48 = 1;
  __asm__ __volatile__(" cpsid i");

  <bb 7> :
  # bIsCriticalSectionNeeded_33 = PHI <bIsCriticalSectionNeeded_47(4), bIsCriticalSectionNeeded_47(5), bIsCriticalSectionNeeded_48(6)>
  FlexCAN_LockRxMsgBuff (base_42, mb_idx_45(D));
  _6 = state_43->mbs[mb_idx_45(D)].pMBmessage;
  FlexCAN_GetMsgBuff (base_42, mb_idx_45(D), _6);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_42, mb_idx_45(D));
  _7 = state_43->bIsLegacyFifoEn;
  if (_7 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  _8 = state_43->mbs[mb_idx_45(D)].pMBmessage;
  _9 = _8->cs;
  _10 = _9 >> 24;
  _11 = _10 & 15;
  if (_11 != 2)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  _12 = state_43->mbs[mb_idx_45(D)].pMBmessage;
  _13 = _12->cs;
  _14 = _13 >> 24;
  _15 = _14 & 15;
  if (_15 != 4)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _16 = state_43->mbs[mb_idx_45(D)].pMBmessage;
  _17 = _16->cs;
  _18 = _17 >> 24;
  _19 = _18 & 15;
  if (_19 != 6)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  flexcan_mb_54 = FlexCAN_GetMsgBuffRegion (base_42, mb_idx_45(D));
  _20 ={v} *flexcan_mb_54;
  _21 = _20 & 4043309055;
  *flexcan_mb_54 ={v} _21;
  _22 ={v} *flexcan_mb_54;
  _23 = _22 | 67108864;
  *flexcan_mb_54 ={v} _23;
  goto <bb 13>; [INV]

  <bb 12> :
  FlexCAN_UnlockRxMsgBuff (base_42);

  <bb 13> :
  if (bIsCriticalSectionNeeded_33 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  __asm__ __volatile__(" cpsie i");

  <bb 15> :
  state_43->mbs[mb_idx_45(D)].state ={v} 0;
  bCurrentIntStat_60 = state_43->mbs[mb_idx_45(D)].isPolling;
  _24 = state_43->callback;
  if (_24 != 0B)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  _25 = state_43->callback;
  _25 (instance_40(D), 0, mb_idx_45(D), state_43);

  <bb 17> :
  _26 ={v} state_43->mbs[mb_idx_45(D)].state;
  if (_26 == 0)
    goto <bb 18>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 18> :
  _27 = state_43->mbs[mb_idx_45(D)].isPolling;
  _28 = ~_27;
  if (_28 != 0)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]

  <bb 19> :
  state_43->mbs[mb_idx_45(D)].isPolling = 1;
  _29 = state_43->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_42, instance_40(D), mb_idx_45(D), 0, _29);
  goto <bb 23>; [INV]

  <bb 20> :
  _30 = ~bCurrentIntStat_60;
  if (_30 != 0)
    goto <bb 21>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 21> :
  _31 = state_43->mbs[mb_idx_45(D)].isPolling;
  if (_31 != 0)
    goto <bb 22>; [INV]
  else
    goto <bb 23>; [INV]

  <bb 22> :
  _32 = state_43->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_42, instance_40(D), mb_idx_45(D), 0, _32);

  <bb 23> :
  data ={v} {CLOBBER};
  return;

}



;; Function FlexCAN_IRQHandlerTxMB (FlexCAN_IRQHandlerTxMB, funcdef_no=45, decl_uid=6795, cgraph_uid=46, symbol_order=47)

FlexCAN_IRQHandlerTxMB (uint8 u8Instance, uint32 u32MbIdx)
{
  struct Flexcan_Ip_MsgBuffType mb;
  struct Flexcan_Ip_StateType * pState;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  _Bool _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _9;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _10;
  <unnamed type> _11;
  _Bool _12;
  _Bool _13;
  _Bool _14;

  <bb 2> :
  _1 = (int) u8Instance_18(D);
  pBase_20 = Flexcan_Ip_apxBase[_1];
  _2 = (int) u8Instance_18(D);
  pState_21 = Flexcan_Ip_apxState[_2];
  mb.cs = 0;
  mb.time_stamp = 0;
  _3 = pState_21->mbs[u32MbIdx_24(D)].isRemote;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  FlexCAN_LockRxMsgBuff (pBase_20, u32MbIdx_24(D));
  FlexCAN_GetMsgBuff (pBase_20, u32MbIdx_24(D), &mb);
  FlexCAN_UnlockRxMsgBuff (pBase_20);
  _4 = mb.time_stamp;
  pState_21->mbs[u32MbIdx_24(D)].time_stamp = _4;
  _5 = mb.cs;
  _6 = _5 >> 24;
  _7 = _6 & 15;
  if (_7 == 4)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_20, u32MbIdx_24(D));
  goto <bb 6>; [INV]

  <bb 5> :
  _8 = FlexCAN_GetMsgBuffTimestamp (pBase_20, u32MbIdx_24(D));
  pState_21->mbs[u32MbIdx_24(D)].time_stamp = _8;
  FlexCAN_UnlockRxMsgBuff (pBase_20);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_20, u32MbIdx_24(D));

  <bb 6> :
  pState_21->mbs[u32MbIdx_24(D)].state ={v} 0;
  _9 = pState_21->callback;
  if (_9 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _10 = pState_21->callback;
  _10 (u8Instance_18(D), 4, u32MbIdx_24(D), pState_21);

  <bb 8> :
  _11 ={v} pState_21->mbs[u32MbIdx_24(D)].state;
  if (_11 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  pState_21->mbs[u32MbIdx_24(D)].isPolling = 1;
  _12 = pState_21->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_20, u8Instance_18(D), u32MbIdx_24(D), 0, _12);
  goto <bb 12>; [INV]

  <bb 10> :
  _13 = pState_21->mbs[u32MbIdx_24(D)].isPolling;
  if (_13 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _14 = pState_21->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (pBase_20, u8Instance_18(D), u32MbIdx_24(D), 0, _14);

  <bb 12> :
  mb ={v} {CLOBBER};
  return;

}



;; Function FlexCAN_IRQHandlerRxFIFO (FlexCAN_IRQHandlerRxFIFO, funcdef_no=46, decl_uid=6798, cgraph_uid=47, symbol_order=48)

FlexCAN_IRQHandlerRxFIFO (uint8 instance, uint32 mb_idx)
{
  struct Flexcan_Ip_MsgBuffType data;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  struct Flexcan_Ip_MsgBuffType * _3;
  <unnamed type> _4;
  struct Flexcan_Ip_MsgBuffType * _5;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _7;
  <unnamed type> _8;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _9;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _10;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _11;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _12;

  <bb 2> :
  _1 = (int) instance_19(D);
  base_21 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_19(D);
  state_22 = Flexcan_Ip_apxState[_2];
  _3 = state_22->mbs[0].pMBmessage;
  if (_3 == 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  state_22->mbs[0].pMBmessage = &data;

  <bb 4> :
  switch (mb_idx_24(D)) <default: <L15> [INV], case 5: <L2> [INV], case 6: <L9> [INV], case 7: <L12> [INV]>

  <bb 5> :
<L2>:
  _4 ={v} state_22->mbs[0].state;
  if (_4 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  _5 = state_22->mbs[0].pMBmessage;
  FlexCAN_ReadRxFifo (base_21, _5);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_21, mb_idx_24(D));
  state_22->mbs[0].state ={v} 0;
  _6 = state_22->callback;
  if (_6 != 0B)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  _7 = state_22->callback;
  _7 (instance_19(D), 1, 0, state_22);

  <bb 8> :
  _8 ={v} state_22->mbs[0].state;
  if (_8 == 0)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  state_22->mbs[0].isPolling = 1;
  FlexCAN_CompleteRxMessageFifoData (instance_19(D));

  <bb 10> :
  goto <bb 18>; [INV]

  <bb 11> :
<L9>:
  FlexCAN_ClearMsgBuffIntStatusFlag (base_21, mb_idx_24(D));
  _9 = state_22->callback;
  if (_9 != 0B)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  _10 = state_22->callback;
  _10 (instance_19(D), 2, 0, state_22);

  <bb 13> :
  goto <bb 18>; [INV]

  <bb 14> :
<L12>:
  FlexCAN_ClearMsgBuffIntStatusFlag (base_21, mb_idx_24(D));
  _11 = state_22->callback;
  if (_11 != 0B)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  _12 = state_22->callback;
  _12 (instance_19(D), 3, 0, state_22);

  <bb 16> :
  goto <bb 18>; [INV]

  <bb 17> :
<L15>:

  <bb 18> :
  data ={v} {CLOBBER};
  return;

}



;; Function FlexCAN_AbortTxTransfer (FlexCAN_AbortTxTransfer, funcdef_no=47, decl_uid=6801, cgraph_uid=48, symbol_order=49)

FlexCAN_AbortTxTransfer (uint8 u8Instance, uint8 mb_idx)
{
  volatile uint32 * flexcan_mb;
  uint32 uS2Ticks;
  uint32 flexcan_mb_config;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType result;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.7478;
  long unsigned int D.7469;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned char _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  int _12;
  long unsigned int _42;
  Flexcan_Ip_StatusType _50;

  <bb 2> :
  _1 = (int) u8Instance_19(D);
  pBase_21 = Flexcan_Ip_apxBase[_1];
  _2 = (int) u8Instance_19(D);
  state_22 = Flexcan_Ip_apxState[_2];
  result_23 = 0;
  timeStart = 0;
  timeElapsed_25 = 0;
  flexcan_mb_config_26 = 0;
  uS2Ticks_27 = 0;
  flexcan_mb_28 = 0B;
  _3 = (long unsigned int) mb_idx_29(D);
  flexcan_mb_31 = FlexCAN_GetMsgBuffRegion (pBase_21, _3);
  flexcan_mb_config_32 ={v} *flexcan_mb_31;
  flexcan_mb_config_33 = flexcan_mb_config_32 & 4043309055;
  flexcan_mb_config_34 = flexcan_mb_config_33 | 150994944;
  *flexcan_mb_31 ={v} flexcan_mb_config_34;
  uS2Ticks_37 = OsIf_MicrosToTicks (1000000, 0);
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  goto <bb 5>; [INV]

  <bb 3> :
  _42 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_43 = _42 + timeElapsed_16;
  if (timeElapsed_43 >= uS2Ticks_37)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  result_44 = 3;
  goto <bb 6>; [INV]

  <bb 5> :
  # timeElapsed_16 = PHI <timeElapsed_25(2), timeElapsed_43(3)>
  _5 = (long unsigned int) mb_idx_29(D);
  _6 = FlexCAN_GetBuffStatusFlag (pBase_21, _5);
  if (_6 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  # result_13 = PHI <result_44(4), result_23(5)>
  if (result_13 != 3)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 7> :
  flexcan_mb_config_45 ={v} *flexcan_mb_31;
  _7 = flexcan_mb_config_45 >> 24;
  _8 = _7 & 15;
  if (_8 == 8)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_46 = 5;

  <bb 9> :
  # result_14 = PHI <result_13(7), result_46(8)>
  _9 = flexcan_mb_config_45 >> 24;
  _10 = _9 & 15;
  if (_10 == 9)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  result_47 = 0;

  <bb 11> :
  # result_15 = PHI <result_13(6), result_14(9), result_47(10)>
  _11 = (long unsigned int) mb_idx_29(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_21, _11);
  _12 = (int) mb_idx_29(D);
  state_22->mbs[_12].state ={v} 0;
  _50 = result_15;
  timeStart ={v} {CLOBBER};

  <bb 12> :
<L12>:
  return _50;

}



;; Function FlexCAN_AbortRxTransfer (FlexCAN_AbortRxTransfer, funcdef_no=48, decl_uid=6804, cgraph_uid=49, symbol_order=50)

FlexCAN_AbortRxTransfer (uint8 u8Instance, uint8 mb_idx)
{
  volatile uint32 * flexcan_mb;
  uint32 flexcan_mb_config;
  uint32 val2;
  uint8 val1;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  int _3;
  _Bool _4;
  long unsigned int _5;
  long unsigned int _6;
  unsigned char _7;
  long unsigned int _8;
  long unsigned int _9;
  _Bool _10;
  long unsigned int _11;
  long unsigned int _12;

  <bb 2> :
  _1 = (int) u8Instance_15(D);
  pBase_17 = Flexcan_Ip_apxBase[_1];
  _2 = (int) u8Instance_15(D);
  state_18 = Flexcan_Ip_apxState[_2];
  val1_19 = 0;
  val2_20 = 0;
  flexcan_mb_config_21 = 0;
  flexcan_mb_22 = 0B;
  _3 = (int) mb_idx_23(D);
  state_18->mbs[_3].state ={v} 0;
  _4 = state_18->bIsLegacyFifoEn;
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  _5 ={v} pBase_17->CTRL2;
  _6 = _5 >> 24;
  _7 = (unsigned char) _6;
  val1_34 = _7 & 15;
  val2_36 = RxFifoOcuppiedLastMsgBuff (val1_34);
  _8 = (long unsigned int) mb_idx_23(D);
  if (val2_36 < _8)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _9 = (long unsigned int) mb_idx_23(D);
  flexcan_mb_38 = FlexCAN_GetMsgBuffRegion (pBase_17, _9);
  flexcan_mb_config_39 ={v} *flexcan_mb_38;
  flexcan_mb_config_40 = flexcan_mb_config_39 & 4043309055;
  flexcan_mb_config_41 = flexcan_mb_config_40;
  *flexcan_mb_38 ={v} flexcan_mb_config_41;
  flexcan_mb_config_43 = flexcan_mb_config_41 & 4043309055;
  flexcan_mb_config_44 = flexcan_mb_config_43 | 67108864;
  *flexcan_mb_38 ={v} flexcan_mb_config_44;

  <bb 5> :
  if (mb_idx_23(D) == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 6> :
  _10 = state_18->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase_17, u8Instance_15(D), 5, _10);
  goto <bb 8>; [INV]

  <bb 7> :
  _11 = (long unsigned int) mb_idx_23(D);
  flexcan_mb_26 = FlexCAN_GetMsgBuffRegion (pBase_17, _11);
  flexcan_mb_config_27 ={v} *flexcan_mb_26;
  flexcan_mb_config_28 = flexcan_mb_config_27 & 4043309055;
  flexcan_mb_config_29 = flexcan_mb_config_28;
  *flexcan_mb_26 ={v} flexcan_mb_config_29;
  flexcan_mb_config_31 = flexcan_mb_config_29 & 4043309055;
  flexcan_mb_config_32 = flexcan_mb_config_31 | 67108864;
  *flexcan_mb_26 ={v} flexcan_mb_config_32;

  <bb 8> :
  _12 = (long unsigned int) mb_idx_23(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_17, _12);
  return;

}



;; Function FlexCAN_Ip_Init_Privileged (FlexCAN_Ip_Init_Privileged, funcdef_no=49, decl_uid=6195, cgraph_uid=50, symbol_order=51)

FlexCAN_Ip_Init_Privileged (uint8 Flexcan_Ip_u8Instance, struct Flexcan_Ip_StateType * Flexcan_Ip_pState, const struct Flexcan_Ip_ConfigType * Flexcan_Ip_pData)
{
  uint32 i;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7492;
  int _1;
  <unnamed type> _2;
  <unnamed type> _3;
  void (*<T66b>) (uint8, Flexcan_Ip_EventType, uint32, const struct Flexcan_Ip_StateType *) _4;
  void (*<T66b>) (uint8, Flexcan_Ip_EventType, uint32, const struct Flexcan_Ip_StateType *) _5;
  _Bool _6;
  long unsigned int _7;
  int _8;
  Flexcan_Ip_StatusType _37;

  <bb 2> :
  eResult_12 = 0;
  _1 = (int) Flexcan_Ip_u8Instance_13(D);
  pBase_15 = Flexcan_Ip_apxBase[_1];
  eResult_18 = FlexCAN_InitController (Flexcan_Ip_u8Instance_13(D), pBase_15, Flexcan_Ip_pData_16(D));
  if (eResult_18 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 3> :
  FlexCAN_InitBaudrate (pBase_15, Flexcan_Ip_pData_16(D));
  _2 = Flexcan_Ip_pData_16(D)->flexcanMode;
  FlexCAN_SetOperationMode (pBase_15, _2);
  i_21 = 0;
  goto <bb 5>; [INV]

  <bb 4> :
  Flexcan_Ip_pState_22(D)->mbs[i_9].isPolling = 1;
  Flexcan_Ip_pState_22(D)->mbs[i_9].pMBmessage = 0B;
  Flexcan_Ip_pState_22(D)->mbs[i_9].state ={v} 0;
  Flexcan_Ip_pState_22(D)->mbs[i_9].time_stamp = 0;
  i_36 = i_9 + 1;

  <bb 5> :
  # i_9 = PHI <i_21(3), i_36(4)>
  if (i_9 <= 31)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 6> :
  _3 = Flexcan_Ip_pData_16(D)->transfer_type;
  Flexcan_Ip_pState_22(D)->transferType = _3;
  _4 = Flexcan_Ip_pData_16(D)->Callback;
  Flexcan_Ip_pState_22(D)->callback = _4;
  Flexcan_Ip_pState_22(D)->callbackParam = 0B;
  _5 = Flexcan_Ip_pData_16(D)->ErrorCallback;
  Flexcan_Ip_pState_22(D)->error_callback = _5;
  Flexcan_Ip_pState_22(D)->errorCallbackParam = 0B;
  _6 = Flexcan_Ip_pData_16(D)->is_rx_fifo_needed;
  Flexcan_Ip_pState_22(D)->bIsLegacyFifoEn = _6;
  _7 = Flexcan_Ip_pData_16(D)->max_num_mb;
  Flexcan_Ip_pState_22(D)->u32MaxMbNum = _7;
  Flexcan_Ip_pState_22(D)->isIntActive = 1;
  _8 = (int) Flexcan_Ip_u8Instance_13(D);
  Flexcan_Ip_apxState[_8] = Flexcan_Ip_pState_22(D);

  <bb 7> :
  _37 = eResult_18;

  <bb 8> :
<L5>:
  return _37;

}



;; Function FlexCAN_Ip_Send (FlexCAN_Ip_Send, funcdef_no=50, decl_uid=6267, cgraph_uid=51, symbol_order=52)

FlexCAN_Ip_Send (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  const struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7496;
  int _1;
  _Bool _2;
  _Bool _3;
  Flexcan_Ip_StatusType _17;

  <bb 2> :
  result_6 = 1;
  _1 = (int) instance_7(D);
  base_9 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsListenOnlyModeEnabled (base_9);
  _3 = ~_2;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_16 = FlexCAN_StartSendData (instance_7(D), mb_idx_11(D), tx_info_12(D), msg_id_13(D), mb_data_14(D));

  <bb 4> :
  # result_4 = PHI <result_6(2), result_16(3)>
  _17 = result_4;

  <bb 5> :
<L2>:
  return _17;

}



;; Function FlexCAN_Ip_ConfigRxMb (FlexCAN_Ip_ConfigRxMb, funcdef_no=51, decl_uid=6291, cgraph_uid=52, symbol_order=53)

FlexCAN_Ip_ConfigRxMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * rx_info, uint32 msg_id)
{
  struct FLEXCAN_Type * base;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType eResult;
  Flexcan_Ip_StatusType D.7500;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  <unnamed type> _4;
  _Bool _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  eResult_9 = 0;
  _1 = (int) instance_10(D);
  base_12 = Flexcan_Ip_apxBase[_1];
  _2 = (long unsigned int) mb_idx_13(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_12, _2);
  _3 = rx_info_15(D)->data_length;
  cs.dataLen = _3;
  _4 = rx_info_15(D)->msg_id_type;
  cs.msgIdType = _4;
  _5 = rx_info_15(D)->fd_enable;
  cs.fd_enable = _5;
  cs.code = 15;
  _6 = (long unsigned int) mb_idx_13(D);
  FlexCAN_SetRxMsgBuff (base_12, _6, &cs, msg_id_20(D));
  cs.code = 0;
  _7 = (long unsigned int) mb_idx_13(D);
  FlexCAN_SetRxMsgBuff (base_12, _7, &cs, msg_id_20(D));
  cs.code = 4;
  _8 = (long unsigned int) mb_idx_13(D);
  FlexCAN_SetRxMsgBuff (base_12, _8, &cs, msg_id_20(D));
  _26 = eResult_9;
  cs ={v} {CLOBBER};

  <bb 3> :
<L1>:
  return _26;

}



;; Function FlexCAN_Ip_Receive (FlexCAN_Ip_Receive, funcdef_no=52, decl_uid=6279, cgraph_uid=53, symbol_order=54)

FlexCAN_Ip_Receive (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling)
{
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7503;
  Flexcan_Ip_StatusType _8;

  <bb 2> :
  result_7 = FlexCAN_StartRxMessageBufferData (instance_2(D), mb_idx_3(D), data_4(D), isPolling_5(D));
  _8 = result_7;

  <bb 3> :
<L0>:
  return _8;

}



;; Function FlexCAN_Ip_ReceiveBlocking (FlexCAN_Ip_ReceiveBlocking, funcdef_no=53, decl_uid=6338, cgraph_uid=54, symbol_order=55)

FlexCAN_Ip_ReceiveBlocking (uint8 instance, uint8 mb_idx, struct Flexcan_Ip_MsgBuffType * data, boolean isPolling, uint32 u32TimeoutMs)
{
  const struct FLEXCAN_Type * base;
  struct Flexcan_Ip_StateType * state;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7525;
  long unsigned int D.7511;
  long unsigned int _1;
  int _2;
  int _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned char _6;
  long unsigned int _7;
  int _8;
  <unnamed type> _9;
  _Bool _10;
  int _11;
  <unnamed type> _12;
  int _13;
  long unsigned int _40;
  Flexcan_Ip_StatusType _46;

  <bb 2> :
  timeStart = 0;
  timeElapsed_23 = 0;
  _1 = u32TimeoutMs_24(D) * 1000;
  mS2Ticks_26 = OsIf_MicrosToTicks (_1, 0);
  _2 = (int) instance_27(D);
  state_28 = Flexcan_Ip_apxState[_2];
  _3 = (int) instance_27(D);
  base_29 = Flexcan_Ip_apxBase[_3];
  result_34 = FlexCAN_StartRxMessageBufferData (instance_27(D), mb_idx_30(D), data_31(D), isPolling_32(D));
  if (result_34 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 3> :
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  goto <bb 9>; [INV]

  <bb 4> :
  if (isPolling_32(D) != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _5 = (long unsigned int) mb_idx_30(D);
  _6 = FlexCAN_GetBuffStatusFlag (base_29, _5);
  if (_6 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _7 = (long unsigned int) mb_idx_30(D);
  FlexCAN_IRQHandlerRxMB (instance_27(D), _7);

  <bb 7> :
  _40 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_41 = _40 + timeElapsed_16;
  if (timeElapsed_41 >= mS2Ticks_26)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_42 = 3;
  goto <bb 10>; [INV]

  <bb 9> :
  # timeElapsed_16 = PHI <timeElapsed_23(3), timeElapsed_41(7)>
  _8 = (int) mb_idx_30(D);
  _9 ={v} state_28->mbs[_8].state;
  if (_9 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 10> :
  # result_14 = PHI <result_34(2), result_42(8), result_34(9)>
  if (result_14 == 3)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  _10 = ~isPolling_32(D);

  <bb 12> :
  if (result_14 != 4)
    goto <bb 13>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 13> :
  if (result_14 != 2)
    goto <bb 14>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 14> :
  _11 = (int) mb_idx_30(D);
  _12 ={v} state_28->mbs[_11].state;
  if (_12 == 0)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 15> :
  result_45 = 0;
  goto <bb 17>; [INV]

  <bb 16> :
  _13 = (int) mb_idx_30(D);
  state_28->mbs[_13].state ={v} 0;
  result_44 = 3;

  <bb 17> :
  # result_15 = PHI <result_14(12), result_14(13), result_45(15), result_44(16)>
  _46 = result_15;
  timeStart ={v} {CLOBBER};

  <bb 18> :
<L23>:
  return _46;

}



;; Function FlexCAN_Ip_RxFifo (FlexCAN_Ip_RxFifo, funcdef_no=54, decl_uid=6282, cgraph_uid=55, symbol_order=56)

FlexCAN_Ip_RxFifo (uint8 instance, struct Flexcan_Ip_MsgBuffType * data)
{
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7528;
  Flexcan_Ip_StatusType _7;

  <bb 2> :
  result_1 = 0;
  result_6 = FlexCAN_StartRxMessageFifoData (instance_3(D), data_4(D));
  _7 = result_6;

  <bb 3> :
<L0>:
  return _7;

}



;; Function FlexCAN_Ip_RxFifoBlocking (FlexCAN_Ip_RxFifoBlocking, funcdef_no=55, decl_uid=6286, cgraph_uid=56, symbol_order=57)

FlexCAN_Ip_RxFifoBlocking (uint8 instance, struct Flexcan_Ip_MsgBuffType * data, uint32 timeout)
{
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7532;
  Flexcan_Ip_StatusType _12;

  <bb 2> :
  result_3 = 0;
  result_8 = FlexCAN_StartRxMessageFifoData (instance_5(D), data_6(D));
  if (result_8 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_11 = FlexCAN_ProccessLegacyRxFIFO (instance_5(D), timeout_9(D));

  <bb 4> :
  # result_1 = PHI <result_8(2), result_11(3)>
  _12 = result_1;

  <bb 5> :
<L2>:
  return _12;

}



;; Function FlexCAN_Ip_ConfigRxFifo_Privileged (FlexCAN_Ip_ConfigRxFifo_Privileged, funcdef_no=56, decl_uid=6199, cgraph_uid=57, symbol_order=58)

FlexCAN_Ip_ConfigRxFifo_Privileged (uint8 instance, Flexcan_Ip_RxFifoIdElementFormatType id_format, const struct Flexcan_Ip_IdTableType * id_filter_table)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7542;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _27;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FlexCAN_SetRxFifoFilter (pBase_16, id_format_21(D), id_filter_table_22(D));

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_25 = FlexCAN_Disable (pBase_16);
  if (status_25 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_26 = status_25;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_26(8)>
  _27 = result_8;

  <bb 10> :
<L8>:
  return _27;

}



;; Function FlexCAN_Ip_ConfigRemoteResponseMb (FlexCAN_Ip_ConfigRemoteResponseMb, funcdef_no=57, decl_uid=6344, cgraph_uid=58, symbol_order=59)

FlexCAN_Ip_ConfigRemoteResponseMb (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data)
{
  volatile uint32 * pMbAddr;
  const struct Flexcan_Ip_StateType * const state;
  struct FLEXCAN_Type * pBase;
  struct Flexcan_Ip_MsbuffCodeStatusType cs;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7548;
  int _1;
  int _2;
  long unsigned int _3;
  <unnamed type> _4;
  long unsigned int _5;
  long unsigned int _6;
  _Bool _7;
  _Bool _8;
  _Bool _9;
  long unsigned int _10;
  _Bool _11;
  Flexcan_Ip_StatusType _36;

  <bb 2> :
  result_14 = 0;
  _1 = (int) instance_15(D);
  pBase_17 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_15(D);
  state_18 = Flexcan_Ip_apxState[_2];
  pMbAddr_19 = 0B;
  if (result_14 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 3> :
  _3 = tx_info_20(D)->data_length;
  cs.dataLen = _3;
  _4 = tx_info_20(D)->msg_id_type;
  cs.msgIdType = _4;
  cs.code = 10;
  cs.fd_enable = 0;
  cs.enable_brs = 0;
  cs.fd_padding = 0;
  _5 = (long unsigned int) mb_idx_27(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_17, _5);
  _6 = (long unsigned int) mb_idx_27(D);
  pMbAddr_30 = FlexCAN_GetMsgBuffRegion (pBase_17, _6);
  _7 = tx_info_20(D)->is_remote;
  FlexCAN_SetTxMsgBuff (pMbAddr_30, &cs, msg_id_31(D), mb_data_32(D), _7);
  _8 = tx_info_20(D)->is_polling;
  _9 = ~_8;
  if (_9 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _10 = (long unsigned int) mb_idx_27(D);
  _11 = state_18->isIntActive;
  result_35 = FlexCAN_SetMsgBuffIntCmd (pBase_17, instance_15(D), _10, 1, _11);

  <bb 5> :
  # result_12 = PHI <result_14(2), result_14(3), result_35(4)>
  _36 = result_12;
  cs ={v} {CLOBBER};

  <bb 6> :
<L5>:
  return _36;

}



;; Function FlexCAN_Ip_GetTransferStatus (FlexCAN_Ip_GetTransferStatus, funcdef_no=58, decl_uid=6300, cgraph_uid=59, symbol_order=60)

FlexCAN_Ip_GetTransferStatus (uint8 instance, uint8 mb_idx)
{
  Flexcan_Ip_StatusType status;
  const struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType D.7556;
  int _1;
  int _2;
  <unnamed type> _3;
  Flexcan_Ip_StatusType _12;

  <bb 2> :
  _1 = (int) instance_5(D);
  state_7 = Flexcan_Ip_apxState[_1];
  status_8 = 1;
  if (mb_idx_9(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _2 = (int) mb_idx_9(D);
  _3 ={v} state_7->mbs[_2].state;
  if (_3 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  status_11 = 0;
  goto <bb 6>; [INV]

  <bb 5> :
  status_10 = 2;

  <bb 6> :
  # status_4 = PHI <status_8(2), status_11(4), status_10(5)>
  _12 = status_4;

  <bb 7> :
<L5>:
  return _12;

}



;; Function FlexCAN_CompleteRxMessageFifoData (FlexCAN_CompleteRxMessageFifoData, funcdef_no=59, decl_uid=6806, cgraph_uid=60, symbol_order=61)

FlexCAN_CompleteRxMessageFifoData (uint8 instance)
{
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  <unnamed type> _3;
  _Bool _4;
  _Bool _5;
  _Bool _6;

  <bb 2> :
  _1 = (int) instance_8(D);
  base_10 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_8(D);
  state_11 = Flexcan_Ip_apxState[_2];
  _3 = state_11->transferType;
  if (_3 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  _4 = state_11->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_10, instance_8(D), 5, 0, _4);
  _5 = state_11->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_10, instance_8(D), 6, 0, _5);
  _6 = state_11->isIntActive;
  FlexCAN_SetMsgBuffIntCmd (base_10, instance_8(D), 7, 0, _6);

  <bb 4> :
  state_11->mbs[0].pMBmessage = 0B;
  state_11->mbs[0].state ={v} 0;
  return;

}



;; Function FlexCAN_IRQHandler (FlexCAN_IRQHandler, funcdef_no=60, decl_uid=6350, cgraph_uid=61, symbol_order=62)

FlexCAN_IRQHandler (uint8 instance, uint32 startMbIdx, uint32 endMbIdx)
{
  uint32 mb_idx;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  uint32 flag_reg;
  uint32 u32MbHandle;
  int _1;
  int _2;
  unsigned char _3;
  unsigned char _4;
  _Bool _5;
  <unnamed type> _6;
  <unnamed type> _7;
  unsigned char _8;
  <unnamed type> _9;

  <bb 2> :
  u32MbHandle_19 = 0;
  flag_reg_20 = 0;
  _1 = (int) instance_21(D);
  base_23 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_21(D);
  state_24 = Flexcan_Ip_apxState[_2];
  mb_idx_26 = endMbIdx_25(D);
  if (state_24 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  _3 = FlexCAN_GetMsgBuffIntStatusFlag (base_23, mb_idx_26);
  flag_reg_32 = (uint32) _3;
  goto <bb 5>; [INV]

  <bb 4> :
  mb_idx_33 = mb_idx_12 + 4294967295;
  _4 = FlexCAN_GetMsgBuffIntStatusFlag (base_23, mb_idx_33);
  flag_reg_35 = (uint32) _4;

  <bb 5> :
  # flag_reg_11 = PHI <flag_reg_32(3), flag_reg_35(4)>
  # mb_idx_12 = PHI <mb_idx_26(3), mb_idx_33(4)>
  if (flag_reg_11 == 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  if (mb_idx_12 > startMbIdx_27(D))
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  if (flag_reg_11 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 8> :
  u32MbHandle_36 = mb_idx_12;
  _5 = state_24->bIsLegacyFifoEn;
  if (_5 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  if (mb_idx_12 <= 7)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  FlexCAN_IRQHandlerRxFIFO (instance_21(D), mb_idx_12);
  u32MbHandle_38 = 0;
  goto <bb 13>; [INV]

  <bb 11> :
  _6 ={v} state_24->mbs[u32MbHandle_36].state;
  if (_6 == 1)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  FlexCAN_IRQHandlerRxMB (instance_21(D), mb_idx_12);

  <bb 13> :
  # u32MbHandle_10 = PHI <u32MbHandle_38(10), u32MbHandle_36(11), u32MbHandle_36(12)>
  _7 ={v} state_24->mbs[u32MbHandle_10].state;
  if (_7 == 2)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  FlexCAN_IRQHandlerTxMB (instance_21(D), mb_idx_12);

  <bb 15> :
  _8 = FlexCAN_GetMsgBuffIntStatusFlag (base_23, mb_idx_12);
  if (_8 != 0)
    goto <bb 16>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 16> :
  _9 ={v} state_24->mbs[u32MbHandle_10].state;
  if (_9 == 0)
    goto <bb 17>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 17> :
  FlexCAN_ClearMsgBuffIntStatusFlag (base_23, mb_idx_12);
  goto <bb 21>; [INV]

  <bb 18> :
  mb_idx_28 = startMbIdx_27(D);
  goto <bb 20>; [INV]

  <bb 19> :
  FlexCAN_ClearMsgBuffIntStatusFlag (base_23, mb_idx_13);
  mb_idx_30 = mb_idx_13 + 1;

  <bb 20> :
  # mb_idx_13 = PHI <mb_idx_28(18), mb_idx_30(19)>
  if (mb_idx_13 <= endMbIdx_25(D))
    goto <bb 19>; [INV]
  else
    goto <bb 21>; [INV]

  <bb 21> :
  return;

}



;; Function FlexCAN_Ip_ClearErrorStatus (FlexCAN_Ip_ClearErrorStatus, funcdef_no=61, decl_uid=6309, cgraph_uid=62, symbol_order=63)

FlexCAN_Ip_ClearErrorStatus (uint8 instance, uint32 error)
{
  struct FLEXCAN_Type * base;
  int _1;

  <bb 2> :
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  base_4->ESR1 ={v} error_5(D);
  return;

}



;; Function FlexCAN_Ip_GetErrorStatus (FlexCAN_Ip_GetErrorStatus, funcdef_no=62, decl_uid=6302, cgraph_uid=63, symbol_order=64)

FlexCAN_Ip_GetErrorStatus (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  uint32 D.7582;
  int _1;
  uint32 _5;

  <bb 2> :
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  _5 ={v} base_4->ESR1;

  <bb 3> :
<L0>:
  return _5;

}



;; Function FlexCAN_Ip_GetControllerTxErrorCounter (FlexCAN_Ip_GetControllerTxErrorCounter, funcdef_no=63, decl_uid=6304, cgraph_uid=64, symbol_order=65)

FlexCAN_Ip_GetControllerTxErrorCounter (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  uint8 D.7584;
  int _1;
  long unsigned int _2;
  uint8 _6;

  <bb 2> :
  _1 = (int) instance_3(D);
  base_5 = Flexcan_Ip_apxBase[_1];
  _2 ={v} base_5->ECR;
  _6 = (uint8) _2;

  <bb 3> :
<L0>:
  return _6;

}



;; Function FlexCAN_Ip_GetControllerRxErrorCounter (FlexCAN_Ip_GetControllerRxErrorCounter, funcdef_no=64, decl_uid=6306, cgraph_uid=65, symbol_order=66)

FlexCAN_Ip_GetControllerRxErrorCounter (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  uint8 D.7586;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  uint8 _7;

  <bb 2> :
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  _2 ={v} base_6->ECR;
  _3 = _2 >> 8;
  _7 = (uint8) _3;

  <bb 3> :
<L0>:
  return _7;

}



;; Function FlexCAN_Error_IRQHandler (FlexCAN_Error_IRQHandler, funcdef_no=65, decl_uid=6354, cgraph_uid=66, symbol_order=67)

FlexCAN_Error_IRQHandler (uint8 instance)
{
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _7;
  long unsigned int _8;
  long unsigned int _9;
  signed int _10;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _11;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _12;

  <bb 2> :
  _1 = (int) instance_16(D);
  pBase_18 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_16(D);
  state_19 = Flexcan_Ip_apxState[_2];
  u32ErrStatus_20 = 0;
  if (state_19 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  u32ErrStatus_22 ={v} pBase_18->ESR1;
  _3 = u32ErrStatus_22 & 2;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _4 ={v} pBase_18->CTRL1;
  _5 = _4 & 16384;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  pBase_18->ESR1 ={v} 2;
  _6 = state_19->error_callback;
  if (_6 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _7 = state_19->error_callback;
  _7 (instance_16(D), 5, u32ErrStatus_22, state_19);
  u32ErrStatus_25 ={v} pBase_18->ESR1;

  <bb 7> :
  # u32ErrStatus_13 = PHI <u32ErrStatus_22(3), u32ErrStatus_22(4), u32ErrStatus_22(5), u32ErrStatus_25(6)>
  _8 = u32ErrStatus_13 & 1048576;
  if (_8 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 8> :
  _9 ={v} pBase_18->CTRL2;
  _10 = (signed int) _9;
  if (_10 < 0)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 9> :
  pBase_18->ESR1 ={v} 1048576;
  _11 = state_19->error_callback;
  if (_11 != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  _12 = state_19->error_callback;
  _12 (instance_16(D), 6, u32ErrStatus_13, state_19);
  goto <bb 12>; [INV]

  <bb 11> :
  pBase_18->ESR1 ={v} 3145730;

  <bb 12> :
  return;

}



;; Function FlexCAN_BusOff_IRQHandler (FlexCAN_BusOff_IRQHandler, funcdef_no=66, decl_uid=6352, cgraph_uid=67, symbol_order=68)

FlexCAN_BusOff_IRQHandler (uint8 instance)
{
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _6;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _11;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _16;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _17;

  <bb 2> :
  _1 = (int) instance_23(D);
  base_25 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_23(D);
  state_26 = Flexcan_Ip_apxState[_2];
  u32ErrStatus_27 = 0;
  if (state_26 != 0B)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  u32ErrStatus_29 ={v} base_25->ESR1;
  _3 = u32ErrStatus_29 & 131072;
  if (_3 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 4> :
  _4 ={v} base_25->CTRL1;
  _5 = _4 & 2048;
  if (_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  base_25->ESR1 ={v} 131072;
  _6 = state_26->error_callback;
  if (_6 != 0B)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _7 = state_26->error_callback;
  _7 (instance_23(D), 9, u32ErrStatus_29, state_26);
  u32ErrStatus_32 ={v} base_25->ESR1;

  <bb 7> :
  # u32ErrStatus_18 = PHI <u32ErrStatus_29(3), u32ErrStatus_29(4), u32ErrStatus_29(5), u32ErrStatus_32(6)>
  _8 = u32ErrStatus_18 & 65536;
  if (_8 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 8> :
  _9 ={v} base_25->CTRL1;
  _10 = _9 & 1024;
  if (_10 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  base_25->ESR1 ={v} 65536;
  _11 = state_26->error_callback;
  if (_11 != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _12 = state_26->error_callback;
  _12 (instance_23(D), 8, u32ErrStatus_18, state_26);
  u32ErrStatus_35 ={v} base_25->ESR1;

  <bb 11> :
  # u32ErrStatus_19 = PHI <u32ErrStatus_18(7), u32ErrStatus_18(8), u32ErrStatus_18(9), u32ErrStatus_35(10)>
  _13 = u32ErrStatus_19 & 4;
  if (_13 != 0)
    goto <bb 12>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 12> :
  _14 ={v} base_25->CTRL1;
  _15 = _14 & 32768;
  if (_15 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 13> :
  base_25->ESR1 ={v} 4;
  _16 = state_26->error_callback;
  if (_16 != 0B)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 14> :
  _17 = state_26->error_callback;
  _17 (instance_23(D), 7, u32ErrStatus_19, state_26);
  goto <bb 16>; [INV]

  <bb 15> :
  base_25->ESR1 ={v} 720900;

  <bb 16> :
  return;

}



;; Function FlexCAN_Ip_SendBlocking (FlexCAN_Ip_SendBlocking, funcdef_no=67, decl_uid=6274, cgraph_uid=68, symbol_order=69)

FlexCAN_Ip_SendBlocking (uint8 instance, uint8 mb_idx, const struct Flexcan_Ip_DataInfoType * tx_info, uint32 msg_id, const uint8 * mb_data, uint32 timeout_ms)
{
  volatile uint32 * flexcan_mb;
  uint32 flexcan_mb_config;
  uint32 uS2Ticks;
  uint32 mS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7640;
  long unsigned int D.7633;
  long unsigned int D.7626;
  int _1;
  int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  unsigned char _6;
  int _7;
  <unnamed type> _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  unsigned char _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  long unsigned int _18;
  int _19;
  long unsigned int _55;
  long unsigned int _72;
  Flexcan_Ip_StatusType _80;

  <bb 2> :
  _1 = (int) instance_33(D);
  base_35 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_33(D);
  state_36 = Flexcan_Ip_apxState[_2];
  timeStart = 0;
  timeElapsed_38 = 0;
  _3 = timeout_ms_39(D) * 1000;
  mS2Ticks_41 = OsIf_MicrosToTicks (_3, 0);
  uS2Ticks_42 = 0;
  flexcan_mb_config_43 = 0;
  flexcan_mb_44 = 0B;
  result_50 = FlexCAN_StartSendData (instance_33(D), mb_idx_45(D), tx_info_46(D), msg_id_47(D), mb_data_48(D));
  if (result_50 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 18>; [INV]

  <bb 3> :
  _4 = OsIf_GetCounter (0);
  timeStart = _4;
  goto <bb 6>; [INV]

  <bb 4> :
  _55 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_56 = _55 + timeElapsed_25;
  if (timeElapsed_56 >= mS2Ticks_41)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  result_57 = 3;
  goto <bb 7>; [INV]

  <bb 6> :
  # timeElapsed_25 = PHI <timeElapsed_38(3), timeElapsed_56(4)>
  _5 = (long unsigned int) mb_idx_45(D);
  _6 = FlexCAN_GetBuffStatusFlag (base_35, _5);
  if (_6 != 1)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  # result_20 = PHI <result_57(5), result_50(6)>
  if (result_20 == 3)
    goto <bb 8>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 8> :
  _7 = (int) mb_idx_45(D);
  _8 ={v} state_36->mbs[_7].state;
  if (_8 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 9> :
  _9 = (long unsigned int) mb_idx_45(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_35, _9);
  _10 = (long unsigned int) mb_idx_45(D);
  flexcan_mb_60 = FlexCAN_GetMsgBuffRegion (base_35, _10);
  flexcan_mb_config_61 ={v} *flexcan_mb_60;
  flexcan_mb_config_62 = flexcan_mb_config_61 & 4043309055;
  flexcan_mb_config_63 = flexcan_mb_config_62 | 150994944;
  *flexcan_mb_60 ={v} flexcan_mb_config_63;
  uS2Ticks_66 = OsIf_MicrosToTicks (1000000, 0);
  _11 = OsIf_GetCounter (0);
  timeStart = _11;
  timeElapsed_69 = 0;
  goto <bb 12>; [INV]

  <bb 10> :
  _72 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_73 = _72 + timeElapsed_26;
  if (timeElapsed_73 >= uS2Ticks_66)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result_74 = 3;
  goto <bb 13>; [INV]

  <bb 12> :
  # timeElapsed_26 = PHI <timeElapsed_69(9), timeElapsed_73(10)>
  _12 = (long unsigned int) mb_idx_45(D);
  _13 = FlexCAN_GetBuffStatusFlag (base_35, _12);
  if (_13 == 0)
    goto <bb 10>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  # result_21 = PHI <result_74(11), result_20(12)>
  flexcan_mb_config_75 ={v} *flexcan_mb_60;
  _14 = flexcan_mb_config_75 >> 24;
  _15 = _14 & 15;
  if (_15 == 8)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  result_76 = 0;

  <bb 15> :
  # result_22 = PHI <result_21(13), result_76(14)>
  _16 = flexcan_mb_config_75 >> 24;
  _17 = _16 & 15;
  if (_17 == 9)
    goto <bb 16>; [INV]
  else
    goto <bb 17>; [INV]

  <bb 16> :
  result_77 = 3;

  <bb 17> :
  # result_23 = PHI <result_20(7), result_20(8), result_22(15), result_77(16)>
  _18 = (long unsigned int) mb_idx_45(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_35, _18);
  _19 = (int) mb_idx_45(D);
  state_36->mbs[_19].state ={v} 0;

  <bb 18> :
  # result_24 = PHI <result_50(2), result_23(17)>
  _80 = result_24;
  timeStart ={v} {CLOBBER};

  <bb 19> :
<L21>:
  return _80;

}



;; Function FlexCAN_Ip_SetRxMbGlobalMask_Privileged (FlexCAN_Ip_SetRxMbGlobalMask_Privileged, funcdef_no=68, decl_uid=6234, cgraph_uid=69, symbol_order=70)

FlexCAN_Ip_SetRxMbGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7651;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FlexCAN_SetRxMsgBuffGlobalMask (pBase_16, mask_21(D));

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_24 = FlexCAN_Disable (pBase_16);
  if (status_24 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_25 = status_24;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_25(8)>
  _26 = result_8;

  <bb 10> :
<L8>:
  return _26;

}



;; Function FlexCAN_Ip_EnterFreezeMode_Privileged (FlexCAN_Ip_EnterFreezeMode_Privileged, funcdef_no=69, decl_uid=6207, cgraph_uid=70, symbol_order=71)

FlexCAN_Ip_EnterFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.7653;
  int _1;
  Flexcan_Ip_StatusType _6;

  <bb 2> :
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  _6 = FlexCAN_EnterFreezeMode (base_4);

  <bb 3> :
<L0>:
  return _6;

}



;; Function FlexCAN_Ip_ExitFreezeMode_Privileged (FlexCAN_Ip_ExitFreezeMode_Privileged, funcdef_no=70, decl_uid=6209, cgraph_uid=71, symbol_order=72)

FlexCAN_Ip_ExitFreezeMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.7655;
  int _1;
  Flexcan_Ip_StatusType _6;

  <bb 2> :
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  _6 = FlexCAN_ExitFreezeMode (base_4);

  <bb 3> :
<L0>:
  return _6;

}



;; Function FlexCAN_Ip_SetRxIndividualMask_Privileged (FlexCAN_Ip_SetRxIndividualMask_Privileged, funcdef_no=71, decl_uid=6231, cgraph_uid=72, symbol_order=73)

FlexCAN_Ip_SetRxIndividualMask_Privileged (uint8 instance, uint8 mb_idx, uint32 mask)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7665;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  long unsigned int _7;
  Flexcan_Ip_StatusType _28;

  <bb 2> :
  result_13 = 0;
  status_14 = 0;
  _1 = (int) instance_15(D);
  pBase_17 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_17);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_19 = (boolean) _6;
  if (disabled_19 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_21 = FlexCAN_Enable (pBase_17);

  <bb 4> :
  # result_8 = PHI <result_13(2), result_21(3)>
  if (result_8 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  _7 = (long unsigned int) mb_idx_22(D);
  FlexCAN_SetRxIndividualMask (pBase_17, _7, mask_23(D));

  <bb 6> :
  if (disabled_19 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_26 = FlexCAN_Disable (pBase_17);
  if (status_26 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_27 = status_26;

  <bb 9> :
  # result_9 = PHI <result_8(6), result_8(7), result_27(8)>
  _28 = result_9;

  <bb 10> :
<L8>:
  return _28;

}



;; Function FlexCAN_Ip_SetRxFifoGlobalMask_Privileged (FlexCAN_Ip_SetRxFifoGlobalMask_Privileged, funcdef_no=72, decl_uid=6212, cgraph_uid=73, symbol_order=74)

FlexCAN_Ip_SetRxFifoGlobalMask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7675;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  FlexCAN_SetRxFifoGlobalMask (pBase_16, mask_21(D));

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_24 = FlexCAN_Disable (pBase_16);
  if (status_24 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_25 = status_24;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_25(8)>
  _26 = result_8;

  <bb 10> :
<L8>:
  return _26;

}



;; Function FlexCAN_Ip_Deinit_Privileged (FlexCAN_Ip_Deinit_Privileged, funcdef_no=73, decl_uid=6214, cgraph_uid=74, symbol_order=75)

FlexCAN_Ip_Deinit_Privileged (uint8 instance)
{
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType D.7679;
  int _1;
  int _2;
  Flexcan_Ip_StatusType _12;

  <bb 2> :
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  result_8 = FlexCAN_EnterFreezeMode (base_6);
  if (result_8 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_SetRegDefaultVal (base_6);
  FlexCAN_Disable (base_6);
  _2 = (int) instance_4(D);
  Flexcan_Ip_apxState[_2] = 0B;

  <bb 4> :
  _12 = result_8;

  <bb 5> :
<L2>:
  return _12;

}



;; Function FlexCAN_Ip_MainFunctionRead (FlexCAN_Ip_MainFunctionRead, funcdef_no=74, decl_uid=6294, cgraph_uid=75, symbol_order=76)

FlexCAN_Ip_MainFunctionRead (uint8 instance, uint8 mb_idx)
{
  const struct Flexcan_Ip_StateType * state;
  const struct FLEXCAN_Type * base;
  int _1;
  int _2;
  _Bool _3;
  unsigned char _4;
  long unsigned int _5;
  unsigned char _6;
  int _7;
  <unnamed type> _8;
  long unsigned int _9;

  <bb 2> :
  _1 = (int) instance_12(D);
  base_14 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_12(D);
  state_15 = Flexcan_Ip_apxState[_2];
  _3 = state_15->bIsLegacyFifoEn;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  if (mb_idx_16(D) <= 7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  if (mb_idx_16(D) == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 5> :
  _4 = FlexCAN_GetBuffStatusFlag (base_14, 5);
  if (_4 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_IRQHandlerRxFIFO (instance_12(D), 5);

  <bb 7> :
  goto <bb 11>; [INV]

  <bb 8> :
  _5 = (long unsigned int) mb_idx_16(D);
  _6 = FlexCAN_GetBuffStatusFlag (base_14, _5);
  if (_6 != 0)
    goto <bb 9>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 9> :
  _7 = (int) mb_idx_16(D);
  _8 ={v} state_15->mbs[_7].state;
  if (_8 == 1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _9 = (long unsigned int) mb_idx_16(D);
  FlexCAN_IRQHandlerRxMB (instance_12(D), _9);

  <bb 11> :
  return;

}



;; Function FlexCAN_Ip_MainFunctionBusOff_Privileged (FlexCAN_Ip_MainFunctionBusOff_Privileged, funcdef_no=75, decl_uid=6201, cgraph_uid=76, symbol_order=77)

FlexCAN_Ip_MainFunctionBusOff_Privileged (uint8 instance)
{
  uint32 u32ErrStatus;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  Flexcan_Ip_StatusType eRetVal;
  Flexcan_Ip_StatusType D.7699;
  int _1;
  int _2;
  long unsigned int _3;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _4;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _5;
  Flexcan_Ip_StatusType _19;

  <bb 2> :
  eRetVal_9 = 1;
  _1 = (int) instance_10(D);
  base_12 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_10(D);
  state_13 = Flexcan_Ip_apxState[_2];
  u32ErrStatus_14 = 0;
  u32ErrStatus_15 ={v} base_12->ESR1;
  _3 = u32ErrStatus_15 & 4;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  _4 = state_13->error_callback;
  if (_4 != 0B)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  _5 = state_13->error_callback;
  _5 (instance_10(D), 7, u32ErrStatus_15, state_13);

  <bb 5> :
  base_12->ESR1 ={v} 4;
  eRetVal_18 = 0;

  <bb 6> :
  # eRetVal_6 = PHI <eRetVal_9(2), eRetVal_18(5)>
  _19 = eRetVal_6;

  <bb 7> :
<L4>:
  return _19;

}



;; Function FlexCAN_Ip_MainFunctionWrite (FlexCAN_Ip_MainFunctionWrite, funcdef_no=76, decl_uid=6297, cgraph_uid=77, symbol_order=78)

FlexCAN_Ip_MainFunctionWrite (uint8 instance, uint8 mb_idx)
{
  struct Flexcan_Ip_MsgBuffType mb;
  struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * base;
  int _1;
  int _2;
  long unsigned int _3;
  unsigned char _4;
  int _5;
  <unnamed type> _6;
  int _7;
  _Bool _8;
  long unsigned int _9;
  long unsigned int _10;
  int _11;
  long unsigned int _12;
  long unsigned int _13;
  long unsigned int _14;
  long unsigned int _15;
  long unsigned int _16;
  long unsigned int _17;
  int _18;
  long unsigned int _19;
  long unsigned int _20;
  int _21;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _22;
  void (*<T665>) (uint8, Flexcan_Ip_EventType, uint32, const struct FlexCANState *) _23;
  long unsigned int _24;

  <bb 2> :
  _1 = (int) instance_28(D);
  base_30 = Flexcan_Ip_apxBase[_1];
  _2 = (int) instance_28(D);
  state_31 = Flexcan_Ip_apxState[_2];
  _3 = (long unsigned int) mb_idx_32(D);
  _4 = FlexCAN_GetBuffStatusFlag (base_30, _3);
  if (_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 3> :
  _5 = (int) mb_idx_32(D);
  _6 ={v} state_31->mbs[_5].state;
  if (_6 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 4> :
  _7 = (int) mb_idx_32(D);
  _8 = state_31->mbs[_7].isRemote;
  if (_8 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 5> :
  mb.cs = 0;
  mb.time_stamp = 0;
  _9 = (long unsigned int) mb_idx_32(D);
  FlexCAN_LockRxMsgBuff (base_30, _9);
  _10 = (long unsigned int) mb_idx_32(D);
  FlexCAN_GetMsgBuff (base_30, _10, &mb);
  FlexCAN_UnlockRxMsgBuff (base_30);
  _11 = (int) mb_idx_32(D);
  _12 = mb.time_stamp;
  state_31->mbs[_11].time_stamp = _12;
  _13 = mb.cs;
  _14 = _13 >> 24;
  _15 = _14 & 15;
  if (_15 == 4)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  _16 = (long unsigned int) mb_idx_32(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_30, _16);

  <bb 7> :
  mb ={v} {CLOBBER};
  goto <bb 9>; [INV]

  <bb 8> :
  _17 = (long unsigned int) mb_idx_32(D);
  _18 = (int) mb_idx_32(D);
  _19 = FlexCAN_GetMsgBuffTimestamp (base_30, _17);
  state_31->mbs[_18].time_stamp = _19;
  FlexCAN_UnlockRxMsgBuff (base_30);
  _20 = (long unsigned int) mb_idx_32(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (base_30, _20);

  <bb 9> :
  _21 = (int) mb_idx_32(D);
  state_31->mbs[_21].state ={v} 0;
  _22 = state_31->callback;
  if (_22 != 0B)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  _23 = state_31->callback;
  _24 = (long unsigned int) mb_idx_32(D);
  _23 (instance_28(D), 4, _24, state_31);

  <bb 11> :
  return;

}



;; Function FlexCAN_Ip_GetStopMode_Privileged (FlexCAN_Ip_GetStopMode_Privileged, funcdef_no=77, decl_uid=6203, cgraph_uid=78, symbol_order=79)

FlexCAN_Ip_GetStopMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  boolean D.7712;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _7;

  <bb 2> :
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  _2 ={v} base_6->MCR;
  _3 = _2 & 1048576;
  _7 = _3 == 1048576;

  <bb 3> :
<L0>:
  return _7;

}



;; Function FlexCAN_Ip_GetStartMode_Privileged (FlexCAN_Ip_GetStartMode_Privileged, funcdef_no=78, decl_uid=6205, cgraph_uid=79, symbol_order=80)

FlexCAN_Ip_GetStartMode_Privileged (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  boolean D.7714;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _7;

  <bb 2> :
  _1 = (int) instance_4(D);
  base_6 = Flexcan_Ip_apxBase[_1];
  _2 ={v} base_6->MCR;
  _3 = _2 & 17825792;
  _7 = _3 == 0;

  <bb 3> :
<L0>:
  return _7;

}



;; Function FlexCAN_Ip_SetStartMode_Privileged (FlexCAN_Ip_SetStartMode_Privileged, funcdef_no=79, decl_uid=6216, cgraph_uid=80, symbol_order=81)

FlexCAN_Ip_SetStartMode_Privileged (uint8 instance)
{
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.7716;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  Flexcan_Ip_StatusType _11;

  <bb 2> :
  _1 = (int) instance_4(D);
  pBase_6 = Flexcan_Ip_apxBase[_1];
  SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07 ();
  _2 ={v} pBase_6->MCR;
  _3 = _2 & 2147483647;
  pBase_6->MCR ={v} _3;
  SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_07 ();
  _11 = FlexCAN_ExitFreezeMode (pBase_6);

  <bb 3> :
<L0>:
  return _11;

}



;; Function FlexCAN_Ip_SetStopMode_Privileged (FlexCAN_Ip_SetStopMode_Privileged, funcdef_no=80, decl_uid=6218, cgraph_uid=81, symbol_order=82)

FlexCAN_Ip_SetStopMode_Privileged (uint8 instance)
{
  Flexcan_Ip_StatusType status;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.7720;
  int _1;
  Flexcan_Ip_StatusType _11;

  <bb 2> :
  _1 = (int) instance_4(D);
  pBase_6 = Flexcan_Ip_apxBase[_1];
  status_8 = FlexCAN_EnterFreezeMode (pBase_6);
  if (status_8 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  status_10 = FlexCAN_Disable (pBase_6);

  <bb 4> :
  # status_2 = PHI <status_8(2), status_10(3)>
  _11 = status_2;

  <bb 5> :
<L2>:
  return _11;

}



;; Function FlexCAN_Ip_SetRxMaskType_Privileged (FlexCAN_Ip_SetRxMaskType_Privileged, funcdef_no=81, decl_uid=6221, cgraph_uid=82, symbol_order=83)

FlexCAN_Ip_SetRxMaskType_Privileged (uint8 instance, Flexcan_Ip_RxMaskType type)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7730;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _28;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08 ();
  FlexCAN_SetRxMaskType (pBase_16, type_22(D));
  SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_08 ();

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_26 = FlexCAN_Disable (pBase_16);
  if (status_26 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_27 = status_26;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_27(8)>
  _28 = result_8;

  <bb 10> :
<L8>:
  return _28;

}



;; Function FlexCAN_Ip_SetBitrate_Privileged (FlexCAN_Ip_SetBitrate_Privileged, funcdef_no=82, decl_uid=6238, cgraph_uid=83, symbol_order=84)

FlexCAN_Ip_SetBitrate_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean enhExt)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7746;
  int _1;
  long unsigned int _2;
  signed int _3;
  _Bool _4;
  Flexcan_Ip_StatusType _28;

  <bb 2> :
  result_11 = 0;
  status_12 = 0;
  _1 = (int) instance_13(D);
  pBase_15 = Flexcan_Ip_apxBase[_1];
  _2 ={v} pBase_15->MCR;
  _3 = (signed int) _2;
  disabled_16 = _3 < 0;
  if (disabled_16 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_18 = FlexCAN_Enable (pBase_15);

  <bb 4> :
  # result_5 = PHI <result_11(2), result_18(3)>
  if (result_5 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 5> :
  SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14 ();
  _4 = FlexCAN_IsExCbtEnabled (pBase_15);
  if (_4 != 0)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  FlexCAN_SetExtendedTimeSegments (pBase_15, bitrate_21(D));
  goto <bb 8>; [INV]

  <bb 7> :
  FlexCAN_SetTimeSegments (pBase_15, bitrate_21(D));

  <bb 8> :
  SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_14 ();

  <bb 9> :
  if (disabled_16 != 0)
    goto <bb 10>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 10> :
  status_26 = FlexCAN_Disable (pBase_15);
  if (status_26 != 0)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  result_27 = status_26;

  <bb 12> :
  # result_6 = PHI <result_5(9), result_5(10), result_27(11)>
  _28 = result_6;

  <bb 13> :
<L11>:
  return _28;

}



;; Function FlexCAN_Ip_GetBitrate (FlexCAN_Ip_GetBitrate, funcdef_no=83, decl_uid=6312, cgraph_uid=84, symbol_order=85)

FlexCAN_Ip_GetBitrate (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  boolean enhCbt;
  const struct FLEXCAN_Type * pBase;
  boolean D.7753;
  int _1;
  _Bool _2;
  boolean _12;

  <bb 2> :
  _1 = (int) instance_4(D);
  pBase_6 = Flexcan_Ip_apxBase[_1];
  enhCbt_7 = 0;
  _2 = FlexCAN_IsExCbtEnabled (pBase_6);
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_GetExtendedTimeSegments (pBase_6, bitrate_9(D));
  goto <bb 5>; [INV]

  <bb 4> :
  FlexCAN_GetTimeSegments (pBase_6, bitrate_9(D));

  <bb 5> :
  _12 = enhCbt_7;

  <bb 6> :
<L3>:
  return _12;

}



;; Function FlexCAN_Ip_ClearTDCFail (FlexCAN_Ip_ClearTDCFail, funcdef_no=84, decl_uid=6314, cgraph_uid=85, symbol_order=86)

FlexCAN_Ip_ClearTDCFail (uint8 u8Instance)
{
  struct FLEXCAN_Type * pBase;
  int _1;
  long unsigned int _2;
  long unsigned int _3;

  <bb 2> :
  _1 = (int) u8Instance_4(D);
  pBase_6 = Flexcan_Ip_apxBase[_1];
  SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09 ();
  _2 ={v} pBase_6->FDCTRL;
  _3 = _2 | 16384;
  pBase_6->FDCTRL ={v} _3;
  SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_09 ();
  return;

}



;; Function FlexCAN_Ip_GetTDCFail (FlexCAN_Ip_GetTDCFail, funcdef_no=85, decl_uid=6316, cgraph_uid=86, symbol_order=87)

FlexCAN_Ip_GetTDCFail (uint8 u8Instance)
{
  const struct FLEXCAN_Type * pBase;
  boolean value;
  boolean D.7755;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  boolean _9;

  <bb 2> :
  value_4 = 0;
  _1 = (int) u8Instance_5(D);
  pBase_7 = Flexcan_Ip_apxBase[_1];
  _2 ={v} pBase_7->FDCTRL;
  _3 = _2 & 16384;
  value_8 = _3 == 16384;
  _9 = value_8;

  <bb 3> :
<L0>:
  return _9;

}



;; Function FlexCAN_Ip_GetTDCValue (FlexCAN_Ip_GetTDCValue, funcdef_no=86, decl_uid=6318, cgraph_uid=87, symbol_order=88)

FlexCAN_Ip_GetTDCValue (uint8 u8Instance)
{
  const struct FLEXCAN_Type * pBase;
  uint8 value;
  uint8 D.7757;
  int _1;
  long unsigned int _2;
  unsigned char _3;
  uint8 _9;

  <bb 2> :
  value_4 = 0;
  _1 = (int) u8Instance_5(D);
  pBase_7 = Flexcan_Ip_apxBase[_1];
  _2 ={v} pBase_7->FDCTRL;
  _3 = (unsigned char) _2;
  value_8 = _3 & 63;
  _9 = value_8;

  <bb 3> :
<L0>:
  return _9;

}



;; Function FlexCAN_Ip_SetBitrateCbt_Privileged (FlexCAN_Ip_SetBitrateCbt_Privileged, funcdef_no=87, decl_uid=6242, cgraph_uid=88, symbol_order=89)

FlexCAN_Ip_SetBitrateCbt_Privileged (uint8 instance, const struct Flexcan_Ip_TimeSegmentType * bitrate, boolean bitRateSwitch)
{
  boolean disabled;
  boolean fd_enable;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7767;
  int _1;
  long unsigned int _2;
  signed int _3;
  Flexcan_Ip_StatusType _28;

  <bb 2> :
  result_9 = 0;
  status_10 = 0;
  _1 = (int) instance_11(D);
  pBase_13 = Flexcan_Ip_apxBase[_1];
  fd_enable_15 = FlexCAN_IsFDEnabled (pBase_13);
  _2 ={v} pBase_13->MCR;
  _3 = (signed int) _2;
  disabled_16 = _3 < 0;
  if (disabled_16 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_18 = FlexCAN_Enable (pBase_13);

  <bb 4> :
  # result_4 = PHI <result_9(2), result_18(3)>
  if (result_4 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15 ();
  FlexCAN_SetFDEnabled (pBase_13, fd_enable_15, bitRateSwitch_20(D));
  FlexCAN_SetFDTimeSegments (pBase_13, bitrate_22(D));
  SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_15 ();

  <bb 6> :
  if (disabled_16 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_26 = FlexCAN_Disable (pBase_13);
  if (status_26 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_27 = status_26;

  <bb 9> :
  # result_5 = PHI <result_4(6), result_4(7), result_27(8)>
  _28 = result_5;

  <bb 10> :
<L8>:
  return _28;

}



;; Function FlexCAN_Ip_GetBitrateFD (FlexCAN_Ip_GetBitrateFD, funcdef_no=88, decl_uid=6321, cgraph_uid=89, symbol_order=90)

FlexCAN_Ip_GetBitrateFD (uint8 instance, struct Flexcan_Ip_TimeSegmentType * bitrate)
{
  boolean enhCbt;
  const struct FLEXCAN_Type * pBase;
  boolean D.7771;
  int _1;
  boolean _8;

  <bb 2> :
  _1 = (int) instance_2(D);
  pBase_4 = Flexcan_Ip_apxBase[_1];
  enhCbt_5 = 0;
  FlexCAN_GetFDTimeSegments (pBase_4, bitrate_6(D));
  _8 = enhCbt_5;

  <bb 3> :
<L0>:
  return _8;

}



;; Function FlexCAN_Ip_SetTDCOffset_Privileged (FlexCAN_Ip_SetTDCOffset_Privileged, funcdef_no=89, decl_uid=6249, cgraph_uid=90, symbol_order=91)

FlexCAN_Ip_SetTDCOffset_Privileged (uint8 instance, boolean enable, uint8 offset)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7781;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _29;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16 ();
  FlexCAN_SetTDCOffset (pBase_16, enable_22(D), offset_23(D));
  SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_16 ();

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_27 = FlexCAN_Disable (pBase_16);
  if (status_27 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_28 = status_27;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_28(8)>
  _29 = result_8;

  <bb 10> :
<L8>:
  return _29;

}



;; Function FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged, funcdef_no=90, decl_uid=6245, cgraph_uid=91, symbol_order=92)

FlexCAN_Ip_SetTxArbitrationStartDelay_Privileged (uint8 instance, uint8 value)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7793;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _28;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17 ();
  FlexCAN_SetTxArbitrationStartDelay (pBase_16, value_22(D));
  SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_17 ();

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_26 = FlexCAN_Disable (pBase_16);
  if (status_26 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_27 = status_26;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_27(8)>
  _28 = result_8;

  <bb 10> :
<L8>:
  return _28;

}



;; Function FlexCAN_Ip_GetBuffStatusFlag (FlexCAN_Ip_GetBuffStatusFlag, funcdef_no=91, decl_uid=6324, cgraph_uid=92, symbol_order=93)

FlexCAN_Ip_GetBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  const struct FLEXCAN_Type * pBase;
  boolean returnResult;
  boolean D.7795;
  int _1;
  long unsigned int _2;
  unsigned char _3;
  boolean _10;

  <bb 2> :
  _1 = (int) instance_4(D);
  pBase_6 = Flexcan_Ip_apxBase[_1];
  _2 = (long unsigned int) msgBuffIdx_7(D);
  _3 = FlexCAN_GetBuffStatusFlag (pBase_6, _2);
  returnResult_9 = _3 == 1;
  _10 = returnResult_9;

  <bb 3> :
<L0>:
  return _10;

}



;; Function FlexCAN_Ip_ClearBuffStatusFlag (FlexCAN_Ip_ClearBuffStatusFlag, funcdef_no=92, decl_uid=6327, cgraph_uid=93, symbol_order=94)

FlexCAN_Ip_ClearBuffStatusFlag (uint8 instance, uint8 msgBuffIdx)
{
  struct FLEXCAN_Type * pBase;
  int _1;
  long unsigned int _2;

  <bb 2> :
  _1 = (int) instance_3(D);
  pBase_5 = Flexcan_Ip_apxBase[_1];
  _2 = (long unsigned int) msgBuffIdx_6(D);
  FlexCAN_ClearMsgBuffIntStatusFlag (pBase_5, _2);
  return;

}



;; Function FlexCAN_Ip_EnableInterrupts_Privileged (FlexCAN_Ip_EnableInterrupts_Privileged, funcdef_no=93, decl_uid=6251, cgraph_uid=94, symbol_order=95)

FlexCAN_Ip_EnableInterrupts_Privileged (uint8 u8Instance)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.7799;
  int _1;
  int _2;
  _Bool _3;
  Flexcan_Ip_StatusType _15;

  <bb 2> :
  _1 = (int) u8Instance_6(D);
  pBase_8 = Flexcan_Ip_apxBase[_1];
  result_9 = 1;
  _2 = (int) u8Instance_6(D);
  state_10 = Flexcan_Ip_apxState[_2];
  _3 = FlexCAN_IsEnabled (pBase_8);
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_EnableInterrupts (pBase_8, u8Instance_6(D));
  state_10->isIntActive = 1;
  result_14 = 0;

  <bb 4> :
  # result_4 = PHI <result_9(2), result_14(3)>
  _15 = result_4;

  <bb 5> :
<L2>:
  return _15;

}



;; Function FlexCAN_Ip_DisableInterrupts_Privileged (FlexCAN_Ip_DisableInterrupts_Privileged, funcdef_no=94, decl_uid=6253, cgraph_uid=95, symbol_order=96)

FlexCAN_Ip_DisableInterrupts_Privileged (uint8 u8Instance)
{
  struct Flexcan_Ip_StateType * state;
  Flexcan_Ip_StatusType result;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.7803;
  int _1;
  int _2;
  _Bool _3;
  Flexcan_Ip_StatusType _15;

  <bb 2> :
  _1 = (int) u8Instance_6(D);
  pBase_8 = Flexcan_Ip_apxBase[_1];
  result_9 = 1;
  _2 = (int) u8Instance_6(D);
  state_10 = Flexcan_Ip_apxState[_2];
  _3 = FlexCAN_IsEnabled (pBase_8);
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  FlexCAN_DisableInterrupts (pBase_8);
  state_10->isIntActive = 0;
  result_14 = 0;

  <bb 4> :
  # result_4 = PHI <result_9(2), result_14(3)>
  _15 = result_4;

  <bb 5> :
<L2>:
  return _15;

}



;; Function FlexCAN_Ip_SetErrorInt_Privileged (FlexCAN_Ip_SetErrorInt_Privileged, funcdef_no=95, decl_uid=6257, cgraph_uid=96, symbol_order=97)

FlexCAN_Ip_SetErrorInt_Privileged (uint8 u8Instance, Flexcan_Ip_ErrorIntType type, boolean enable)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7813;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _31;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) u8Instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 5> :
  switch (type_21(D)) <default: <L8> [INV], case 0: <L6> [INV], case 1: <L7> [INV], case 2: <L4> [INV], case 3: <L5> [INV], case 4: <L3> [INV]>

  <bb 6> :
<L3>:
  FlexCAN_SetErrIntCmd (pBase_16, 32768, enable_22(D));
  goto <bb 12>; [INV]

  <bb 7> :
<L4>:
  FlexCAN_SetErrIntCmd (pBase_16, 16384, enable_22(D));
  goto <bb 12>; [INV]

  <bb 8> :
<L5>:
  FlexCAN_SetErrIntCmd (pBase_16, 16385, enable_22(D));
  goto <bb 12>; [INV]

  <bb 9> :
<L6>:
  FlexCAN_SetErrIntCmd (pBase_16, 1024, enable_22(D));
  goto <bb 12>; [INV]

  <bb 10> :
<L7>:
  FlexCAN_SetErrIntCmd (pBase_16, 2048, enable_22(D));
  goto <bb 12>; [INV]

  <bb 11> :
<L8>:

  <bb 12> :
  if (disabled_18 != 0)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 13> :
  status_29 = FlexCAN_Disable (pBase_16);
  if (status_29 != 0)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  result_30 = status_29;

  <bb 15> :
  # result_8 = PHI <result_7(12), result_7(13), result_30(14)>
  _31 = result_8;

  <bb 16> :
<L15>:
  return _31;

}



;; Function FlexCAN_Ip_AbortTransfer (FlexCAN_Ip_AbortTransfer, funcdef_no=96, decl_uid=6330, cgraph_uid=97, symbol_order=98)

FlexCAN_Ip_AbortTransfer (uint8 u8Instance, uint8 mb_idx)
{
  Flexcan_Ip_StatusType result;
  const struct Flexcan_Ip_StateType * state;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType D.7824;
  int _1;
  int _2;
  int _3;
  <unnamed type> _4;
  long unsigned int _5;
  _Bool _6;
  int _7;
  <unnamed type> _8;
  int _9;
  <unnamed type> _10;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  _1 = (int) u8Instance_15(D);
  pBase_17 = Flexcan_Ip_apxBase[_1];
  _2 = (int) u8Instance_15(D);
  state_18 = Flexcan_Ip_apxState[_2];
  result_19 = 0;
  if (mb_idx_20(D) <= 31)
    goto <bb 3>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 3> :
  _3 = (int) mb_idx_20(D);
  _4 ={v} state_18->mbs[_3].state;
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  result_25 = 5;
  goto <bb 9>; [INV]

  <bb 5> :
  _5 = (long unsigned int) mb_idx_20(D);
  _6 = state_18->isIntActive;
  FLEXCAN_ClearMsgBuffIntCmd (pBase_17, u8Instance_15(D), _5, _6);
  _7 = (int) mb_idx_20(D);
  _8 ={v} state_18->mbs[_7].state;
  if (_8 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  result_23 = FlexCAN_AbortTxTransfer (u8Instance_15(D), mb_idx_20(D));

  <bb 7> :
  # result_11 = PHI <result_19(5), result_23(6)>
  _9 = (int) mb_idx_20(D);
  _10 ={v} state_18->mbs[_9].state;
  if (_10 == 1)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  FlexCAN_AbortRxTransfer (u8Instance_15(D), mb_idx_20(D));

  <bb 9> :
  # result_12 = PHI <result_19(2), result_25(4), result_11(7), result_11(8)>
  _26 = result_12;

  <bb 10> :
<L9>:
  return _26;

}



;; Function FlexCAN_Ip_SetRxMb14Mask_Privileged (FlexCAN_Ip_SetRxMb14Mask_Privileged, funcdef_no=97, decl_uid=6224, cgraph_uid=98, symbol_order=99)

FlexCAN_Ip_SetRxMb14Mask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7834;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  pBase_16->RX14MASK ={v} mask_21(D);

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_24 = FlexCAN_Disable (pBase_16);
  if (status_24 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_25 = status_24;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_25(8)>
  _26 = result_8;

  <bb 10> :
<L8>:
  return _26;

}



;; Function FlexCAN_Ip_SetRxMb15Mask_Privileged (FlexCAN_Ip_SetRxMb15Mask_Privileged, funcdef_no=98, decl_uid=6227, cgraph_uid=99, symbol_order=100)

FlexCAN_Ip_SetRxMb15Mask_Privileged (uint8 instance, uint32 mask)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7844;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _26;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  pBase_16->RX15MASK ={v} mask_21(D);

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_24 = FlexCAN_Disable (pBase_16);
  if (status_24 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_25 = status_24;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_25(8)>
  _26 = result_8;

  <bb 10> :
<L8>:
  return _26;

}



;; Function FlexCAN_Ip_SetListenOnlyMode_Privileged (FlexCAN_Ip_SetListenOnlyMode_Privileged, funcdef_no=99, decl_uid=6260, cgraph_uid=100, symbol_order=101)

FlexCAN_Ip_SetListenOnlyMode_Privileged (uint8 instance, const boolean enable)
{
  boolean disabled;
  struct FLEXCAN_Type * pBase;
  Flexcan_Ip_StatusType status;
  Flexcan_Ip_StatusType result;
  Flexcan_Ip_StatusType D.7854;
  int _1;
  _Bool _2;
  int _3;
  _Bool _4;
  _Bool _5;
  int _6;
  Flexcan_Ip_StatusType _28;

  <bb 2> :
  result_12 = 0;
  status_13 = 0;
  _1 = (int) instance_14(D);
  pBase_16 = Flexcan_Ip_apxBase[_1];
  _2 = FlexCAN_IsEnabled (pBase_16);
  _3 = (int) _2;
  _4 = _3 != 0;
  _5 = ~_4;
  _6 = (int) _5;
  disabled_18 = (boolean) _6;
  if (disabled_18 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  result_20 = FlexCAN_Enable (pBase_16);

  <bb 4> :
  # result_7 = PHI <result_12(2), result_20(3)>
  if (result_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10 ();
  FlexCAN_SetListenOnlyMode (pBase_16, enable_22(D));
  SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_10 ();

  <bb 6> :
  if (disabled_18 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 7> :
  status_26 = FlexCAN_Disable (pBase_16);
  if (status_26 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  result_27 = status_26;

  <bb 9> :
  # result_8 = PHI <result_7(6), result_7(7), result_27(8)>
  _28 = result_8;

  <bb 10> :
<L8>:
  return _28;

}



;; Function FlexCAN_Ip_GetListenOnlyMode (FlexCAN_Ip_GetListenOnlyMode, funcdef_no=100, decl_uid=6332, cgraph_uid=101, symbol_order=102)

FlexCAN_Ip_GetListenOnlyMode (uint8 instance)
{
  const struct FLEXCAN_Type * base;
  boolean D.7860;
  int _1;
  boolean _6;

  <bb 2> :
  _1 = (int) instance_2(D);
  base_4 = Flexcan_Ip_apxBase[_1];
  _6 = FlexCAN_IsListenOnlyModeEnabled (base_4);

  <bb 3> :
<L0>:
  return _6;

}



;; Function FlexCAN_Ip_ManualBusOffRecovery (FlexCAN_Ip_ManualBusOffRecovery, funcdef_no=101, decl_uid=6346, cgraph_uid=102, symbol_order=103)

FlexCAN_Ip_ManualBusOffRecovery (uint8 Instance)
{
  Flexcan_Ip_StatusType RetVal;
  uint32 uS2Ticks;
  uint32 timeElapsed;
  uint32 timeStart;
  struct FLEXCAN_Type * Base;
  Flexcan_Ip_StatusType D.7869;
  long unsigned int D.7866;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  long unsigned int _4;
  long unsigned int _5;
  long unsigned int _6;
  long unsigned int _7;
  long unsigned int _8;
  long unsigned int _9;
  long unsigned int _10;
  long unsigned int _11;
  long unsigned int _12;
  long unsigned int _33;
  Flexcan_Ip_StatusType _36;

  <bb 2> :
  _1 = (int) Instance_17(D);
  Base_19 = Flexcan_Ip_apxBase[_1];
  timeStart = 0;
  timeElapsed_21 = 0;
  uS2Ticks_23 = OsIf_MicrosToTicks (1000000, 0);
  RetVal_24 = 1;
  _2 ={v} Base_19->CTRL1;
  _3 = _2 & 64;
  if (_3 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 3> :
  RetVal_25 = 0;
  _4 ={v} Base_19->ESR1;
  _5 = _4 & 32;
  if (_5 != 0)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 4> :
  SchM_Enter_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20 ();
  _6 ={v} Base_19->CTRL1;
  _7 = _6 & 4294967231;
  Base_19->CTRL1 ={v} _7;
  _8 ={v} Base_19->CTRL1;
  _9 = _8 | 64;
  Base_19->CTRL1 ={v} _9;
  SchM_Exit_Can_43_FLEXCAN_CAN_EXCLUSIVE_AREA_20 ();
  _10 = OsIf_GetCounter (0);
  timeStart = _10;
  goto <bb 7>; [INV]

  <bb 5> :
  _33 = OsIf_GetElapsed (&timeStart, 0);
  timeElapsed_34 = _33 + timeElapsed_13;
  if (timeElapsed_34 >= uS2Ticks_23)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  RetVal_35 = 3;
  goto <bb 8>; [INV]

  <bb 7> :
  # timeElapsed_13 = PHI <timeElapsed_21(4), timeElapsed_34(5)>
  _11 ={v} Base_19->ESR1;
  _12 = _11 & 32;
  if (_12 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  # RetVal_14 = PHI <RetVal_24(2), RetVal_25(3), RetVal_35(6), RetVal_25(7)>
  _36 = RetVal_14;
  timeStart ={v} {CLOBBER};

  <bb 9> :
<L10>:
  return _36;

}


